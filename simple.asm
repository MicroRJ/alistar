; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	stbi_write_tga_with_rle
PUBLIC	stbi_write_png_compression_level
PUBLIC	stbi_write_force_png_filter
PUBLIC	?fdata@@3PAUZenGlyph@@A				; fdata
PUBLIC	?static_assert_replacement@@3PADA		; static_assert_replacement
_BSS	SEGMENT
?fdata@@3PAUZenGlyph@@A DB 0e00H DUP (?)		; fdata
?static_assert_replacement@@3PADA DB 01H DUP (?)	; static_assert_replacement
_BSS	ENDS
_DATA	SEGMENT
stbi_write_tga_with_rle DD 01H
stbi_write_png_compression_level DD 08H
stbi_write_force_png_filter DD 0ffffffffH
_DATA	ENDS
CONST	SEGMENT
$SG90114 DB	'bad bits_per_channel', 00H
$SG8290	DB	00H
$SG164777 DB	00H
$SG164779 DB	00H
$SG163875 DB	'%d/%3s/%d %d:%d:%d', 00H
$SG164793 DB	00H
$SG163914 DB	'../', 00H
$SG163876 DB	'%d %3s %d %d:%d:%d', 00H
$SG91169 DB	00H
$SG163917 DB	'./', 00H
$SG164936 DB	00H
$SG163877 DB	'%*3s, %d %3s %d %d:%d:%d', 00H
$SG173422 DB	00H
$SG173425 DB	00H
$SG165397 DB	00H
$SG163920 DB	'/./', 00H
$SG163878 DB	'%d-%3s-%d %d:%d:%d', 00H
$SG165945 DB	00H
$SG163923 DB	'/.', 00H
$SG166024 DB	00H
$SG90197 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
$SG166143 DB	00H
$SG166168 DB	00H
$SG163926 DB	'/../', 00H
$SG167900 DB	00H
$SG167902 DB	00H
$SG168076 DB	00H
$SG90198 DB	'v', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H
	DB	'6', 00H, 00H, 00H
$SG90199 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
$SG168868 DB	00H
$SG169523 DB	00H
$SG90200 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '8', 00H, 00H, 00H
$SG161641 DB	00H
$SG169884 DB	00H
$SG163931 DB	'/..', 00H
$SG163937 DB	'.', 00H
$SG169886 DB	00H
$SG169888 DB	00H
$SG163938 DB	'..', 00H
$SG169890 DB	00H
$SG8304	DB	00H, 00H
$SG169892 DB	00H
$SG169894 DB	00H
$SG163964 DB	'.bin', 00H
$SG169896 DB	00H
$SG169898 DB	00H
$SG169900 DB	00H
?builtin_mime_types@@3QBU<unnamed-type-builtin_mime_types>@@B DQ FLAT:$SG163964 ; builtin_mime_types
	DQ	0000000000000004H
	DQ	FLAT:$SG163965
	DQ	FLAT:$SG163966
	DQ	0000000000000004H
	DQ	FLAT:$SG163967
	DQ	FLAT:$SG163968
	DQ	0000000000000004H
	DQ	FLAT:$SG163969
	DQ	FLAT:$SG163970
	DQ	0000000000000004H
	DQ	FLAT:$SG163971
	DQ	FLAT:$SG163972
	DQ	0000000000000004H
	DQ	FLAT:$SG163973
	DQ	FLAT:$SG163974
	DQ	0000000000000004H
	DQ	FLAT:$SG163975
	DQ	FLAT:$SG163976
	DQ	0000000000000004H
	DQ	FLAT:$SG163977
	DQ	FLAT:$SG163978
	DQ	0000000000000004H
	DQ	FLAT:$SG163979
	DQ	FLAT:$SG163980
	DQ	0000000000000003H
	DQ	FLAT:$SG163981
	DQ	FLAT:$SG163982
	DQ	0000000000000005H
	DQ	FLAT:$SG163983
	DQ	FLAT:$SG163984
	DQ	0000000000000004H
	DQ	FLAT:$SG163985
	DQ	FLAT:$SG163986
	DQ	0000000000000004H
	DQ	FLAT:$SG163987
	DQ	FLAT:$SG163988
	DQ	0000000000000003H
	DQ	FLAT:$SG163989
	DQ	FLAT:$SG163990
	DQ	0000000000000004H
	DQ	FLAT:$SG163991
	DQ	FLAT:$SG163992
	DQ	0000000000000006H
	DQ	FLAT:$SG163993
	DQ	FLAT:$SG163994
	DQ	0000000000000004H
	DQ	FLAT:$SG163995
	DQ	FLAT:$SG163996
	DQ	0000000000000005H
	DQ	FLAT:$SG163997
	DQ	FLAT:$SG163998
	DQ	0000000000000004H
	DQ	FLAT:$SG163999
	DQ	FLAT:$SG164000
	DQ	0000000000000004H
	DQ	FLAT:$SG164001
	DQ	FLAT:$SG164002
	DQ	0000000000000004H
	DQ	FLAT:$SG164003
	DQ	FLAT:$SG164004
	DQ	0000000000000004H
	DQ	FLAT:$SG164005
	DQ	FLAT:$SG164006
	DQ	0000000000000004H
	DQ	FLAT:$SG164007
	DQ	FLAT:$SG164008
	DQ	0000000000000004H
	DQ	FLAT:$SG164009
	DQ	FLAT:$SG164010
	DQ	0000000000000005H
	DQ	FLAT:$SG164011
	DQ	FLAT:$SG164012
	DQ	0000000000000006H
	DQ	FLAT:$SG164013
	DQ	FLAT:$SG164014
	DQ	0000000000000004H
	DQ	FLAT:$SG164015
	DQ	FLAT:$SG164016
	DQ	0000000000000004H
	DQ	FLAT:$SG164017
	DQ	FLAT:$SG164018
	DQ	0000000000000004H
	DQ	FLAT:$SG164019
	DQ	FLAT:$SG164020
	DQ	0000000000000004H
	DQ	FLAT:$SG164021
	DQ	FLAT:$SG164022
	DQ	0000000000000004H
	DQ	FLAT:$SG164023
	DQ	FLAT:$SG164024
	DQ	0000000000000005H
	DQ	FLAT:$SG164025
	DQ	FLAT:$SG164026
	DQ	0000000000000004H
	DQ	FLAT:$SG164027
	DQ	FLAT:$SG164028
	DQ	0000000000000004H
	DQ	FLAT:$SG164029
	DQ	FLAT:$SG164030
	DQ	0000000000000004H
	DQ	FLAT:$SG164031
	DQ	FLAT:$SG164032
	DQ	0000000000000004H
	DQ	FLAT:$SG164033
	DQ	FLAT:$SG164034
	DQ	0000000000000004H
	DQ	FLAT:$SG164035
	DQ	FLAT:$SG164036
	DQ	0000000000000004H
	DQ	FLAT:$SG164037
	DQ	FLAT:$SG164038
	DQ	0000000000000005H
	DQ	FLAT:$SG164039
	DQ	FLAT:$SG164040
	DQ	0000000000000004H
	DQ	FLAT:$SG164041
	DQ	FLAT:$SG164042
	DQ	0000000000000004H
	DQ	FLAT:$SG164043
	DQ	FLAT:$SG164044
	DQ	0000000000000004H
	DQ	FLAT:$SG164045
	DQ	FLAT:$SG164046
	DQ	0000000000000004H
	DQ	FLAT:$SG164047
	DQ	FLAT:$SG164048
	DQ	0000000000000005H
	DQ	FLAT:$SG164049
	DQ	FLAT:$SG164050
	DQ	0000000000000004H
	DQ	FLAT:$SG164051
	DQ	FLAT:$SG164052
	DQ	0000000000000005H
	DQ	FLAT:$SG164053
	DQ	FLAT:$SG164054
	DQ	0000000000000006H
	DQ	FLAT:$SG164055
	DQ	FLAT:$SG164056
	DQ	0000000000000004H
	DQ	FLAT:$SG164057
	DQ	FLAT:$SG164058
	DQ	0000000000000004H
	DQ	FLAT:$SG164059
	DQ	FLAT:$SG164060
	DQ	0000000000000004H
	DQ	FLAT:$SG164061
	DQ	FLAT:$SG164062
	DQ	0000000000000004H
	DQ	FLAT:$SG164063
	DQ	FLAT:$SG164064
	DQ	0000000000000005H
	DQ	FLAT:$SG164065
	DQ	FLAT:$SG164066
	DQ	0000000000000004H
	DQ	FLAT:$SG164067
	DQ	FLAT:$SG164068
	DQ	0000000000000004H
	DQ	FLAT:$SG164069
	DQ	FLAT:$SG164070
	DQ	0000000000000003H
	DQ	FLAT:$SG164071
	DQ	FLAT:$SG164072
	DQ	0000000000000004H
	DQ	FLAT:$SG164073
	DQ	FLAT:$SG164074
	DQ	0000000000000003H
	DQ	FLAT:$SG164075
	DQ	FLAT:$SG164076
	DQ	0000000000000004H
	DQ	FLAT:$SG164077
	DQ	FLAT:$SG164078
	DQ	0000000000000004H
	DQ	FLAT:$SG164079
	DQ	FLAT:$SG164080
	DQ	0000000000000004H
	DQ	FLAT:$SG164081
	DQ	FLAT:$SG164082
	DQ	0000000000000004H
	DQ	FLAT:$SG164083
	DQ	FLAT:$SG164084
	DQ	0000000000000008H
	DQ	FLAT:$SG164085
	DQ	FLAT:$SG164086
	DQ	0000000000000004H
	DQ	FLAT:$SG164087
	DQ	FLAT:$SG164088
	DQ	0000000000000004H
	DQ	FLAT:$SG164089
	DQ	FLAT:$SG164090
	DQ	0000000000000004H
	DQ	FLAT:$SG164091
	DQ	FLAT:$SG164092
	DQ	0000000000000004H
	DQ	FLAT:$SG164093
	DQ	FLAT:$SG164094
	DQ	0000000000000005H
	DQ	FLAT:$SG164095
	DQ	FLAT:$SG164096
	DQ	0000000000000004H
	DQ	FLAT:$SG164097
	DQ	FLAT:$SG164098
	DQ	0000000000000004H
	DQ	FLAT:$SG164099
	DQ	FLAT:$SG164100
	DQ	0000000000000004H
	DQ	FLAT:$SG164101
	DQ	FLAT:$SG164102
	DQ	0000000000000003H
	DQ	FLAT:$SG164103
	DQ	FLAT:$SG164104
	DQ	0000000000000004H
	DQ	FLAT:$SG164105
	DQ	FLAT:$SG164106
	DQ	0000000000000004H
	DQ	FLAT:$SG164107
	DQ	FLAT:$SG164108
	DQ	0000000000000004H
	DQ	FLAT:$SG164109
	DQ	FLAT:$SG164110
	DQ	0000000000000004H
	DQ	FLAT:$SG164111
	DQ	FLAT:$SG164112
	DQ	0000000000000004H
	DQ	FLAT:$SG164113
	DQ	FLAT:$SG164114
	DQ	0000000000000005H
	DQ	FLAT:$SG164115
	DQ	FLAT:$SG164116
	DQ	0000000000000004H
	DQ	FLAT:$SG164117
	DQ	FLAT:$SG164118
	DQ	0000000000000005H
	DQ	FLAT:$SG164119
	DQ	FLAT:$SG164120
	DQ	0000000000000004H
	DQ	FLAT:$SG164121
	DQ	FLAT:$SG164122
	DQ	0000000000000004H
	DQ	FLAT:$SG164123
	DQ	FLAT:$SG164124
	DQ	0000000000000004H
	DQ	FLAT:$SG164125
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG163965 DB	'application/octet-stream', 00H
$SG161743 DB	00H
$SG169959 DB	00H
$SG169962 DB	00H
$SG163966 DB	'.deb', 00H
$SG169964 DB	00H
$SG169970 DB	00H
$SG169974 DB	00H
$SG163980 DB	'.js', 00H
$SG163967 DB	'application/octet-stream', 00H
$SG169978 DB	00H
$SG169981 DB	00H
$SG162439 DB	00H
$SG163968 DB	'.dmg', 00H
	ORG $+7
$SG163969 DB	'application/octet-stream', 00H
	ORG $+3
$SG163970 DB	'.dll', 00H
	ORG $+3
$SG163982 DB	'.json', 00H
	ORG $+2
$SG163988 DB	'.ps', 00H
$SG163971 DB	'application/octet-stream', 00H
	ORG $+3
$SG163972 DB	'.doc', 00H
	ORG $+3
$SG163992 DB	'.xhtml', 00H
	ORG $+1
$SG164070 DB	'.qt', 00H
$SG163973 DB	'application/msword', 00H
	ORG $+1
$SG163974 DB	'.eps', 00H
	ORG $+3
$SG163996 DB	'.xslt', 00H
	ORG $+2
$SG164012 DB	'.woff2', 00H
	ORG $+1
$SG164074 DB	'.gz', 00H
$SG163975 DB	'application/postscript', 00H
	ORG $+1
$SG163976 DB	'.exe', 00H
	ORG $+3
$SG163977 DB	'application/octet-stream', 00H
	ORG $+3
$SG163978 DB	'.iso', 00H
	ORG $+3
$SG164010 DB	'.woff', 00H
	ORG $+2
$SG164054 DB	'.shtml', 00H
	ORG $+1
$SG164102 DB	'.ra', 00H
$SG163979 DB	'application/octet-stream', 00H
	ORG $+3
$SG164024 DB	'.jpeg', 00H
	ORG $+2
$SG164231 DB	':', 00H
	ORG $+2
$SG163981 DB	'application/javascript', 00H
	ORG $+1
$SG163983 DB	'application/json', 00H
	ORG $+3
$SG163984 DB	'.msi', 00H
	ORG $+3
$SG164038 DB	'.tiff', 00H
	ORG $+2
$SG164232 DB	':', 00H
	ORG $+2
$SG163985 DB	'application/octet-stream', 00H
	ORG $+3
$SG163986 DB	'.pdf', 00H
	ORG $+3
$SG164048 DB	'.html', 00H
	ORG $+2
$SG164233 DB	':', 00H
	ORG $+2
$SG163987 DB	'application/pdf', 00H
$SG163989 DB	'application/postscript', 00H
	ORG $+1
$SG163990 DB	'.rtf', 00H
	ORG $+3
$SG163991 DB	'application/rtf', 00H
$SG163993 DB	'application/xhtml+xml', 00H
	ORG $+2
$SG90265 DB	'not BMP', 00H
$SG163994 DB	'.xsl', 00H
	ORG $+3
$SG163995 DB	'application/xml', 00H
$SG90267 DB	'bad BMP', 00H
$SG163997 DB	'application/xml', 00H
$SG155805 DB	'%', 00H, 's', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, '(', 00H, ')', 00H, 00H, 00H
$SG90269 DB	'unknown BMP', 00H
$SG163998 DB	'.ttf', 00H
	ORG $+3
$SG164052 DB	'.shtm', 00H
	ORG $+2
$SG164234 DB	':', 00H
	ORG $+2
$SG163999 DB	'application/font-sfnt', 00H
	ORG $+2
$SG164000 DB	'.cff', 00H
	ORG $+3
$SG164001 DB	'application/font-sfnt', 00H
	ORG $+2
$SG90273 DB	'bad BMP', 00H
$SG164002 DB	'.otf', 00H
	ORG $+3
$SG164003 DB	'application/font-sfnt', 00H
	ORG $+2
$SG164004 DB	'.aat', 00H
	ORG $+3
$SG164005 DB	'application/font-sfnt', 00H
	ORG $+2
$SG90277 DB	'BMP RLE', 00H
$SG164006 DB	'.sil', 00H
	ORG $+3
$SG164007 DB	'application/font-sfnt', 00H
	ORG $+2
$SG90279 DB	'BMP JPEG/PNG', 00H
	ORG $+3
$SG164008 DB	'.pfr', 00H
	ORG $+3
$SG164009 DB	'application/font-tdpfr', 00H
	ORG $+1
$SG90281 DB	'bad BMP', 00H
$SG164011 DB	'application/font-woff', 00H
	ORG $+2
$SG164013 DB	'application/font-woff2', 00H
	ORG $+1
$SG164014 DB	'.mp3', 00H
	ORG $+3
$SG164015 DB	'audio/mpeg', 00H
	ORG $+1
$SG164016 DB	'.oga', 00H
	ORG $+3
$SG164064 DB	'.mpeg', 00H
	ORG $+2
$SG164235 DB	':', 00H
	ORG $+2
$SG164017 DB	'audio/ogg', 00H
	ORG $+2
$SG164018 DB	'.ogg', 00H
	ORG $+3
$SG164094 DB	'.flac', 00H
	ORG $+2
$SG164236 DB	':', 00H
	ORG $+2
$SG164019 DB	'audio/ogg', 00H
	ORG $+2
$SG164020 DB	'.gif', 00H
	ORG $+3
$SG164114 DB	'.pict', 00H
	ORG $+2
$SG164318 DB	'Basic ', 00H
	ORG $+1
$SG164324 DB	' ', 00H
	ORG $+2
$SG164021 DB	'image/gif', 00H
	ORG $+2
$SG164325 DB	'=', 00H
	ORG $+2
$SG90293 DB	'bad BMP', 00H
$SG164022 DB	'.ief', 00H
	ORG $+3
$SG90294 DB	'bad BMP', 00H
$SG164023 DB	'image/ief', 00H
	ORG $+2
$SG164328 DB	' ', 00H
	ORG $+2
$SG90296 DB	'bad BMP', 00H
$SG164025 DB	'image/jpeg', 00H
	ORG $+1
$SG164026 DB	'.jpg', 00H
	ORG $+3
$SG164118 DB	'.webm', 00H
	ORG $+2
$SG164329 DB	'"', 00H
	ORG $+2
$SG164027 DB	'image/jpeg', 00H
	ORG $+1
$SG164028 DB	'.jpm', 00H
	ORG $+3
$SG164258 DB	'%s/%s', 00H
	ORG $+2
$SG164331 DB	' ', 00H
	ORG $+2
$SG164029 DB	'image/jpm', 00H
	ORG $+2
$SG164030 DB	'.jpx', 00H
	ORG $+3
$SG164332 DB	', ', 00H
	ORG $+1
$SG164031 DB	'image/jpx', 00H
	ORG $+2
$SG164032 DB	'.png', 00H
	ORG $+3
$SG164339 DB	'cnonce', 00H
	ORG $+1
$SG164345 DB	'uri', 00H
$SG164033 DB	'image/png', 00H
	ORG $+2
$SG164034 DB	'.svg', 00H
	ORG $+3
$SG164348 DB	'qop', 00H
$SG164035 DB	'image/svg+xml', 00H
	ORG $+2
$SG164036 DB	'.tif', 00H
	ORG $+3
$SG164037 DB	'image/tiff', 00H
	ORG $+1
$SG164351 DB	'nc', 00H
	ORG $+1
$SG164039 DB	'image/tiff', 00H
	ORG $+1
$SG164040 DB	'.wrl', 00H
	ORG $+3
$SG164353 DB	'nonce', 00H
	ORG $+2
$SG164436 DB	':', 00H
	ORG $+2
$SG164041 DB	'model/vrml', 00H
	ORG $+1
$SG164042 DB	'.css', 00H
	ORG $+3
$SG164437 DB	':', 00H
	ORG $+2
$SG164043 DB	'text/css', 00H
	ORG $+3
$SG164044 DB	'.csv', 00H
	ORG $+3
$SG82573 DB	'0', 00H, 00H, 00H
$SG164045 DB	'text/csv', 00H
	ORG $+3
$SG164046 DB	'.htm', 00H
	ORG $+3
$SG164503 DB	'0', 00H
	ORG $+2
$SG164047 DB	'text/html', 00H
	ORG $+2
$SG164574 DB	'r', 00H
	ORG $+2
$SG164049 DB	'text/html', 00H
	ORG $+2
$SG164050 DB	'.sgm', 00H
	ORG $+3
$SG164585 DB	'w', 00H
	ORG $+2
$SG164051 DB	'text/sgml', 00H
	ORG $+2
$SG164604 DB	':', 00H
	ORG $+2
$SG164053 DB	'text/html', 00H
	ORG $+2
$SG164605 DB	':', 00H
	ORG $+2
$SG164055 DB	'text/html', 00H
	ORG $+2
$SG164056 DB	'.txt', 00H
	ORG $+3
$SG164669 DB	'%s', 00H
	ORG $+1
$SG164057 DB	'text/plain', 00H
	ORG $+1
$SG164058 DB	'.xml', 00H
	ORG $+3
$SG164674 DB	'%s', 00H
	ORG $+1
$SG164059 DB	'text/xml', 00H
	ORG $+3
$SG164060 DB	'.mov', 00H
	ORG $+3
$SG164678 DB	'%s', 00H
	ORG $+1
$SG164061 DB	'video/quicktime', 00H
$SG164062 DB	'.mp4', 00H
	ORG $+3
$SG164063 DB	'video/mp4', 00H
	ORG $+2
$SG164683 DB	'%s', 00H
	ORG $+1
$SG164065 DB	'video/mpeg', 00H
	ORG $+1
$SG164066 DB	'.mpg', 00H
	ORG $+3
$SG164747 DB	'&<>', 00H
$SG164067 DB	'video/mpeg', 00H
	ORG $+1
$SG164068 DB	'.ogv', 00H
	ORG $+3
$SG164752 DB	'&amp;', 00H
	ORG $+2
$SG164761 DB	'%s', 00H
	ORG $+1
$SG164069 DB	'video/ogg', 00H
	ORG $+2
$SG164764 DB	'%d', 00H
	ORG $+1
$SG164071 DB	'video/quicktime', 00H
$SG164072 DB	'.arj', 00H
	ORG $+3
$SG164073 DB	'application/x-arj-compressed', 00H
	ORG $+3
$SG164075 DB	'application/x-gunzip', 00H
	ORG $+3
$SG164076 DB	'.rar', 00H
	ORG $+3
$SG164077 DB	'application/x-arj-compressed', 00H
	ORG $+3
$SG164078 DB	'.swf', 00H
	ORG $+3
$SG164079 DB	'application/x-shockwave-flash', 00H
	ORG $+2
$SG164080 DB	'.tar', 00H
	ORG $+3
$SG164081 DB	'application/x-tar', 00H
	ORG $+2
$SG164082 DB	'.tgz', 00H
	ORG $+3
$SG164767 DB	'%.1fk', 00H
	ORG $+2
$SG82850 DB	'0', 00H, 00H, 00H
$SG164083 DB	'application/x-tar-gz', 00H
	ORG $+3
$SG164084 DB	'.torrent', 00H
	ORG $+3
$SG164770 DB	'%.1fM', 00H
	ORG $+2
$SG164776 DB	'/', 00H
	ORG $+2
$SG164085 DB	'application/x-bittorrent', 00H
	ORG $+3
$SG164086 DB	'.ppt', 00H
	ORG $+3
$SG164771 DB	'%.1fG', 00H
	ORG $+2
$SG164778 DB	'/', 00H
	ORG $+2
$SG164087 DB	'application/x-mspowerpoint', 00H
	ORG $+1
$SG164088 DB	'.xls', 00H
	ORG $+3
$SG82868 DB	'0', 00H, 00H, 00H
$SG164089 DB	'application/x-msexcel', 00H
	ORG $+2
$SG164090 DB	'.zip', 00H
	ORG $+3
$SG164091 DB	'application/x-zip-compressed', 00H
	ORG $+3
$SG164092 DB	'.aac', 00H
	ORG $+3
$SG164093 DB	'audio/aac', 00H
	ORG $+2
$SG164797 DB	'n', 00H
	ORG $+2
$SG164095 DB	'audio/flac', 00H
	ORG $+1
$SG164834 DB	'.', 00H
	ORG $+2
$SG155903 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG164096 DB	'.aif', 00H
	ORG $+3
$SG155904 DB	'TemporaryPushCounterUntilAStackIsAdded ++ < 1', 00H
	ORG $+2
$SG164097 DB	'audio/x-aif', 00H
$SG164835 DB	'..', 00H
	ORG $+1
$SG155905 DB	'ZenCorePushCurrentDir', 00H
	ORG $+2
$SG164098 DB	'.m3u', 00H
	ORG $+3
$SG155906 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG164862 DB	'.', 00H
	ORG $+2
$SG164099 DB	'audio/x-mpegurl', 00H
$SG155907 DB	'S', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	'A', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG164100 DB	'.mid', 00H
	ORG $+3
$SG164836 DB	'%s/%s', 00H
	ORG $+2
$SG164863 DB	'..', 00H
	ORG $+1
$SG155908 DB	'ZenCorePushCurrentDir', 00H
	ORG $+2
$SG164101 DB	'audio/x-midi', 00H
	ORG $+3
$SG155909 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG164925 DB	'&<>', 00H
$SG164103 DB	'audio/x-pn-realaudio', 00H
	ORG $+3
$SG164104 DB	'.ram', 00H
	ORG $+3
$SG164105 DB	'audio/x-pn-realaudio', 00H
	ORG $+3
$SG164106 DB	'.wav', 00H
	ORG $+3
$SG164107 DB	'audio/x-wav', 00H
$SG164940 DB	'-', 00H
	ORG $+2
$SG155915 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG164108 DB	'.bmp', 00H
	ORG $+3
$SG155916 DB	'TemporaryPushCounterUntilAStackIsAdded -- > 0', 00H
	ORG $+2
$SG164109 DB	'image/bmp', 00H
	ORG $+2
$SG164941 DB	'-', 00H
	ORG $+2
$SG155917 DB	'ZenCorePullCurrentDir', 00H
	ORG $+2
$SG164110 DB	'.ico', 00H
	ORG $+3
$SG155918 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG164943 DB	'..', 00H
	ORG $+1
$SG164111 DB	'image/x-icon', 00H
	ORG $+3
$SG155919 DB	'S', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	'A', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG164112 DB	'.pct', 00H
	ORG $+3
$SG164864 DB	'%s/%s', 00H
	ORG $+2
$SG164947 DB	'%s', 00H
	ORG $+1
$SG155920 DB	'ZenCorePullCurrentDir', 00H
	ORG $+2
$SG164113 DB	'image/x-pct', 00H
$SG164978 DB	'%s', 00H
	ORG $+1
$SG155921 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG83083 DB	'0', 00H, 00H, 00H
$SG164115 DB	'image/pict', 00H
	ORG $+1
$SG164116 DB	'.rgb', 00H
	ORG $+3
$SG164930 DB	'&amp;', 00H
	ORG $+2
$SG165055 DB	'%s', 00H
	ORG $+1
$SG164117 DB	'image/x-rgb', 00H
$SG173320 DB	'1', 00H
	ORG $+2
$SG164119 DB	'video/webm', 00H
	ORG $+1
$SG164120 DB	'.asf', 00H
	ORG $+3
$SG165039 DB	'Range', 00H
	ORG $+2
$SG173316 DB	'100000', 00H
	ORG $+1
$SG165128 DB	'yes', 00H
$SG164121 DB	'video/x-ms-asf', 00H
	ORG $+1
$SG164122 DB	'.avi', 00H
	ORG $+3
$SG164123 DB	'video/x-msvideo', 00H
$SG164124 DB	'.m4v', 00H
	ORG $+3
$SG164125 DB	'video/x-m4v', 00H
$SG173322 DB	'1', 00H
	ORG $+2
$SG164136 DB	'text/plain', 00H
	ORG $+1
$SG165130 DB	'%s', 00H
	ORG $+1
$SG155954 DB	'ZenCoreCreateSoftTexture', 00H
	ORG $+3
$SG165042 DB	'%s.gz', 00H
	ORG $+2
$SG173318 DB	'100000', 00H
	ORG $+1
$SG165132 DB	'%s', 00H
	ORG $+1
$SG90418 DB	'too large', 00H
	ORG $+2
$SG173424 DB	'64', 00H
	ORG $+1
$SG155955 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG165253 DB	'GET', 00H
$SG90420 DB	'too large', 00H
	ORG $+2
$SG165255 DB	'PUT', 00H
$SG90427 DB	'bad offset', 00H
	ORG $+1
$SG91594 DB	'-Y ', 00H
$SG164161 DB	'0123456789abcdef', 00H
	ORG $+3
$SG165047 DB	'%s.gz', 00H
	ORG $+2
$SG165256 DB	'DELETE', 00H
	ORG $+1
$SG91597 DB	'+X ', 00H
$SG90433 DB	'too large', 00H
	ORG $+2
$SG165264 DB	'UNLOCK', 00H
	ORG $+1
$SG9728	DB	'%f', 00H
	ORG $+1
$SG90435 DB	'outofmem', 00H
	ORG $+3
$SG165060 DB	'%I64d', 00H
	ORG $+2
$SG165268 DB	'REPORT', 00H
	ORG $+1
$SG91652 DB	'-Y ', 00H
$SG90440 DB	'invalid', 00H
$SG155981 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155982 DB	'internal error', 00H
	ORG $+1
$SG155983 DB	'!"internal error"', 00H
	ORG $+2
$SG91586 DB	'#?RGBE', 00H
	ORG $+1
$SG9732	DB	'%s', 00H
	ORG $+1
$SG155984 DB	'ZenCoreSoftLoadTextureFromFile', 00H
	ORG $+1
$SG90448 DB	'bad bpp', 00H
$SG155985 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG165379 DB	'Expect', 00H
	ORG $+1
$SG165382 DB	'%s', 00H
	ORG $+1
$SG90469 DB	'bad masks', 00H
	ORG $+2
$SG91654 DB	'+X ', 00H
$SG90472 DB	'bad masks', 00H
	ORG $+2
$SG165390 DB	'%s', 00H
	ORG $+1
$SG156018 DB	'ZenCoreCreateNativeThread', 00H
	ORG $+2
$SG165393 DB	'%s', 00H
	ORG $+1
$SG156019 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+2
$SG165398 DB	'%s', 00H
	ORG $+1
$SG164257 DB	'.htpasswd', 00H
	ORG $+2
$SG165443 DB	'addenv', 00H
	ORG $+1
$SG165499 DB	'%s', 00H
	ORG $+1
$SG164262 DB	'.htpasswd', 00H
	ORG $+2
$SG165445 DB	'addenv', 00H
	ORG $+1
$SG165501 DB	'%s', 00H
	ORG $+1
$SG164263 DB	'%.*s/%s', 00H
$SG172468 DB	'u', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
$SG165503 DB	'%s', 00H
	ORG $+1
$SG172469 DB	'ParseResponseObservation', 00H
	ORG $+3
$SG165063 DB	'bytes', 00H
	ORG $+2
$SG165448 DB	'addenv', 00H
	ORG $+1
$SG165524 DB	'off', 00H
$SG172470 DB	'W:\cpp\void\alistar\alistar.h', 00H
	ORG $+2
$SG172491 DB	'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '#', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG165525 DB	'on', 00H
	ORG $+1
$SG172492 DB	'ParseResponseAction', 00H
$SG157350 DB	'..', 00H
	ORG $+1
$SG172493 DB	'W:\cpp\void\alistar\alistar.h', 00H
	ORG $+2
$SG164314 DB	'Authorization', 00H
	ORG $+2
$SG164323 DB	'Digest ', 00H
$SG164336 DB	'username', 00H
	ORG $+3
$SG165260 DB	'PATCH', 00H
	ORG $+2
$SG165450 DB	'addenv', 00H
	ORG $+1
$SG165563 DB	'%s', 00H
	ORG $+1
$SG164342 DB	'response', 00H
	ORG $+3
$SG165262 DB	'MKCOL', 00H
	ORG $+2
$SG157345 DB	'assets', 00H
	ORG $+1
$SG91854 DB	'rb', 00H
	ORG $+1
$SG172549 DB	'u', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o'
	DB	00H, 'n', 00H, 's', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H
	DB	'i', 00H, 00H, 00H
	ORG $+2
$SG91871 DB	'rb', 00H
	ORG $+1
$SG172550 DB	'ParseResponse', 00H
	ORG $+2
$SG172551 DB	'W:\cpp\void\alistar\alistar.h', 00H
	ORG $+2
$SG90660 DB	'too large', 00H
	ORG $+2
$SG165696 DB	'no', 00H
	ORG $+1
$SG90662 DB	'too large', 00H
	ORG $+2
$SG165699 DB	'%s', 00H
	ORG $+1
$SG90667 DB	'bad format', 00H
	ORG $+1
$SG165726 DB	'wb', 00H
	ORG $+1
$SG90670 DB	'too large', 00H
	ORG $+2
$SG165727 DB	'rb', 00H
	ORG $+1
$SG90672 DB	'outofmem', 00H
	ORG $+3
$SG165300 DB	'HTTP/', 00H
	ORG $+2
$SG165728 DB	'rb', 00H
	ORG $+1
$SG90677 DB	'bad palette', 00H
$SG165754 DB	'OK', 00H
	ORG $+1
$SG90679 DB	'outofmem', 00H
	ORG $+7
$SG90683 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG90685 DB	'bad palette', 00H
$SG164486 DB	'%.*s', 00H
	ORG $+7
$SG90682 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG164416 DB	'include=', 00H
	ORG $+3
$SG165332 DB	'HTTP/', 00H
	ORG $+2
$SG165757 DB	'Status', 00H
	ORG $+1
$SG92034 DB	'wb', 00H
	ORG $+1
$SG164420 DB	'read_auth_file', 00H
	ORG $+1
$SG164421 DB	'%s: cannot open authorization file: %s', 00H
	ORG $+1
$SG164422 DB	'read_auth_file', 00H
	ORG $+1
$SG164423 DB	'read_auth_file', 00H
	ORG $+1
$SG164424 DB	'%s: syntax error in authorization file: %s', 00H
	ORG $+1
$SG165765 DB	0dH, 0aH, 00H
	ORG $+1
$SG164425 DB	'read_auth_file', 00H
	ORG $+1
$SG90697 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG90698 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG164427 DB	'read_auth_file', 00H
	ORG $+1
$SG82507 DB	'!', 00H, '(', 00H, 'o', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'b', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG82524 DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG82506 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG165807 DB	'0', 00H
	ORG $+2
$SG164428 DB	'%s: syntax error in authorization file: %s', 00H
	ORG $+1
$SG92100 DB	'0', 00H, 00H, 00H
$SG164429 DB	'read_auth_file', 00H
	ORG $+1
$SG164431 DB	'read_auth_file', 00H
	ORG $+1
$SG164432 DB	'%s: syntax error in authorization file: %s', 00H
	ORG $+1
$SG165853 DB	'%s', 00H
	ORG $+1
$SG164433 DB	'read_auth_file', 00H
	ORG $+1
$SG82523 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82534 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG165866 DB	'%s', 00H
	ORG $+1
$SG82535 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '4', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H
$SG82653 DB	'typ1', 00H
	ORG $+7
$SG82555 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG165881 DB	'0', 00H
	ORG $+2
$SG82556 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG165914 DB	'0', 00H
	ORG $+2
$SG164489 DB	'check_authorization', 00H
$SG165929 DB	'0', 00H
	ORG $+2
$SG164490 DB	'%s: cannot open %s: %s', 00H
	ORG $+1
$SG164491 DB	'check_authorization', 00H
$SG82654 DB	'typ1', 00H
	ORG $+7
$SG82572 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG165946 DB	'%s', 00H
	ORG $+1
$SG172694 DB	'S', 00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 00H, 00H
$SG82583 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG165952 DB	'0', 00H
	ORG $+2
$SG172696 DB	'N', 00H, 'o', 00H, 't', 00H, 'S', 00H, 'u', 00H, 'p', 00H
	DB	'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG157788 DB	'zen', 00H
$SG164504 DB	'Content-Length', 00H
	ORG $+1
$SG82584 DB	'b', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'2', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG157792 DB	'ttf', 00H
$SG164505 DB	'Digest qop="auth", realm="%s", nonce="%I64u"', 00H
	ORG $+3
$SG172698 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG157793 DB	'otf', 00H
$SG164507 DB	'WWW-Authenticate', 00H
	ORG $+3
$SG165570 DB	'%s=%s', 00H
	ORG $+2
$SG157796 DB	'ttf', 00H
$SG172700 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'Q', 00H, 'u', 00H
	DB	'e', 00H, 'u', 00H, 'e', 00H, 'T', 00H, 'h', 00H, 'a', 00H, 't'
	DB	00H, 'O', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG172702 DB	'R', 00H, 'e', 00H, 't', 00H, 'r', 00H, 'y', 00H, 00H, 00H
$SG157797 DB	'otf', 00H
$SG172704 DB	'C', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG165992 DB	'%s', 00H
	ORG $+1
$SG172706 DB	'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, 'I', 00H
	DB	's', 00H, 'F', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG172708 DB	'R', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, 'Q', 00H
	DB	'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, 'I', 00H, 's', 00H, 'F'
	DB	00H, 'u', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG165998 DB	'%s', 00H
	ORG $+1
$SG172710 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'M', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG166001 DB	'%s', 00H
	ORG $+1
$SG172712 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'V', 00H, 'e', 00H, 's', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG166032 DB	'r', 00H
	ORG $+2
$SG172714 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'z', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG172716 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'C', 00H, 'u', 00H, 's', 00H, 't'
	DB	00H, 'o', 00H, 'm', 00H, 00H, 00H
$SG172718 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'F', 00H, 'o', 00H, 'o', 00H, 'd'
	DB	00H, 00H, 00H
$SG166118 DB	'1', 00H
	ORG $+2
$SG172720 DB	'F', 00H, 'o', 00H, 'o', 00H, 'd', 00H, 'U', 00H, 's', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 'I', 00H, 'm', 00H, 'p', 00H, 'o'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H
$SG172722 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'L', 00H, 'i', 00H, 'f', 00H, 'e'
	DB	00H, 00H, 00H
$SG166119 DB	'DAV', 00H
$SG172724 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'S', 00H, 'h', 00H, 'i', 00H, 'e'
	DB	00H, 'l', 00H, 'd', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG157929 DB	'zen', 00H
$SG172726 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'E', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 'g', 00H, 'y', 00H, 00H, 00H
$SG172728 DB	'L', 00H, 'i', 00H, 'f', 00H, 'e', 00H, 'S', 00H, 'u', 00H
	DB	'p', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG172730 DB	'S', 00H, 'h', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H
	DB	's', 00H, 'S', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG166170 DB	'yes', 00H
$SG172732 DB	'E', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'g', 00H, 'y', 00H
	DB	'S', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 's', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG166172 DB	'0', 00H
	ORG $+2
$SG172734 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'g', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG166174 DB	'%s', 0aH, 00H
$SG172736 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, 'M', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172738 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'M', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 'l', 00H, 's', 00H, 00H, 00H
$SG172740 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'V', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG172742 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'z'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG92476 DB	'p', 00H, 00H, 00H
$SG172744 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'C', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm'
	DB	00H, 00H, 00H
$SG82655 DB	'typ1', 00H
	ORG $+7
$SG82632 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG166209 DB	'%s', 00H
	ORG $+1
$SG82633 DB	'i', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
$SG172746 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'F', 00H, 'o', 00H, 'o', 00H, 'd', 00H, 00H, 00H
$SG82634 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG166212 DB	01H, 00H
	ORG $+2
$SG82635 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG166213 DB	01H, 00H
	ORG $+2
$SG172748 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'L', 00H, 'i', 00H, 'f', 00H, 'e', 00H, 00H, 00H
$SG172750 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'S', 00H, 'h', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG90831 DB	'not PSD', 00H
$SG172752 DB	'T', 00H, 'o', 00H, 'o', 00H, 'M', 00H, 'u', 00H, 'c', 00H
	DB	'h', 00H, 'E', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'g', 00H, 'y'
	DB	00H, 00H, 00H
$SG166234 DB	'%s', 00H
	ORG $+1
$SG90833 DB	'wrong version', 00H
	ORG $+2
$SG172754 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'W', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'L', 00H
	DB	'i', 00H, 'f', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG172756 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'W', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'S', 00H
	DB	'h', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, 's', 00H, 00H
	DB	00H
$SG166247 DB	'%s', 0aH, 00H
$SG90836 DB	'wrong channel count', 00H
$SG166350 DB	080H, 00H
	ORG $+2
$SG172758 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'W', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'E', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'g', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG166351 DB	00H, 00H
	ORG $+2
$SG90838 DB	'too large', 00H
	ORG $+2
$SG166378 DB	0dH, 0aH, 00H
	ORG $+1
$SG172760 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'r', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 00H, 00H
$SG166379 DB	'%s', 00H
	ORG $+1
$SG90840 DB	'too large', 00H
	ORG $+2
$SG166469 DB	'yes', 00H
$SG172762 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'p', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 00H, 00H
$SG166482 DB	'%s', 00H
	ORG $+1
$SG90842 DB	'unsupported bit depth', 00H
	ORG $+2
$SG172764 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'T', 00H, 'h', 00H, 'a'
	DB	00H, 't', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG90844 DB	'wrong color format', 00H
	ORG $+1
$SG166489 DB	'%s', 00H
	ORG $+1
$SG172766 DB	'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	't', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	00H, 00H
$SG90846 DB	'bad compression', 00H
$SG172768 DB	'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'C', 00H, 'a', 00H
	DB	'n', 00H, 't', 00H, 'M', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG166501 DB	'%s', 00H
	ORG $+1
$SG90848 DB	'too large', 00H
	ORG $+2
$SG82656 DB	'typ1', 00H
	ORG $+3
$SG165862 DB	'%s/%s', 00H
	ORG $+2
$SG158319 DB	'.', 00H, 00H, 00H
$SG164577 DB	'%255[^:]:%255[^:]:%255s', 00H
$SG172770 DB	'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'I', 00H, 's', 00H, 'H', 00H, 'o'
	DB	00H, 'l', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'P', 00H
	DB	'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 00H, 00H
	ORG $+2
$SG82658 DB	'OTTO', 00H
	ORG $+3
$SG82659 DB	'OTTO', 00H
	ORG $+3
$SG172772 DB	'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H
	DB	'e', 00H, 'c', 00H, 'h', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, 's', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'M', 00H, 'e'
	DB	00H, 't', 00H, 00H, 00H
$SG90852 DB	'outofmem', 00H
	ORG $+3
$SG82660 DB	'OTTO', 00H
	ORG $+3
$SG165988 DB	'%s/%s', 00H
	ORG $+2
$SG166522 DB	'worker', 00H
	ORG $+1
$SG158332 DB	'.', 00H, 00H, 00H
$SG164581 DB	'%s:%s:%s', 0aH, 00H
	ORG $+2
$SG82661 DB	'OTTO', 00H
	ORG $+3
$SG157824 DB	'ASCII', 00H
	ORG $+2
$SG158366 DB	'.', 00H
	ORG $+2
$SG172774 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 'c', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
$SG158382 DB	'Zen', 00H
$SG164583 DB	'%s:%s:%s', 0aH, 00H
	ORG $+2
$SG158367 DB	'assets', 00H
	ORG $+1
$SG166598 DB	'%s', 00H
	ORG $+1
$SG172776 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'O', 00H, 'n', 00H, 'T', 00H, 'h'
	DB	00H, 'a', 00H, 't', 00H, 00H, 00H
$SG82664 DB	'true', 00H
	ORG $+3
$SG82665 DB	'true', 00H
	ORG $+3
$SG172778 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'C'
	DB	00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'o', 00H
	DB	'D', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'O', 00H, 'f', 00H, 'f'
	DB	00H, 00H, 00H
	ORG $+2
$SG90858 DB	'corrupt', 00H
$SG82666 DB	'true', 00H
	ORG $+3
$SG82667 DB	'true', 00H
	ORG $+3
$SG172780 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'I', 00H, 'n', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG166646 DB	'%s', 00H
	ORG $+1
$SG172782 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'e', 00H
	DB	'e', 00H, 'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 00H, 00H
	ORG $+2
$SG166648 DB	'%s', 00H
	ORG $+1
$SG164591 DB	'%s:%s:%s', 0aH, 00H
	ORG $+2
$SG166651 DB	'13', 00H
	ORG $+1
$SG172784 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'C'
	DB	00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'o', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'p', 00H, 'S', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG172786 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'C'
	DB	00H, 'l', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'o', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG166653 DB	'%s', 00H
	ORG $+1
$SG172788 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F'
	DB	00H, 'a', 00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	'W', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG92930 DB	'wb', 00H
	ORG $+1
$SG172790 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F'
	DB	00H, 'a', 00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'p', 00H, 'S', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG172794 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'O', 00H, 'n', 00H, 'D', 00H, 'e'
	DB	00H, 'n', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 00H, 00H
$SG172800 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'e', 00H
	DB	'e', 00H, 'L', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'L', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	00H, 00H
$SG172792 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F'
	DB	00H, 'a', 00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG82688 DB	'ttcf', 00H
	ORG $+3
$SG172796 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'r', 00H
	DB	'a', 00H, 'i', 00H, 'n', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F'
	DB	00H, 'a', 00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	'T', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'P', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG172798 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 'I', 00H, 'n', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 00H, 00H
$SG82689 DB	'ttcf', 00H
	ORG $+3
$SG172802 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'C', 00H, 'l'
	DB	00H, 'o', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'o', 00H, 'C', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG82690 DB	'ttcf', 00H
	ORG $+3
$SG82691 DB	'ttcf', 00H
	ORG $+3
$SG166083 DB	'<!--#', 00H
	ORG $+2
$SG166664 DB	'%s', 00H
	ORG $+1
$SG172804 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'C', 00H, 'l'
	DB	00H, 'o', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'o', 00H, 'R', 00H
	DB	'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H
$SG172806 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F', 00H, 'a'
	DB	00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'W', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG172808 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F', 00H, 'a'
	DB	00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'C', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG172810 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F', 00H, 'a'
	DB	00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'B', 00H
	DB	'u', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'P', 00H, 'o', 00H, 'w'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82700 DB	'ttcf', 00H
	ORG $+3
$SG172812 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'F', 00H, 'a'
	DB	00H, 'r', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'T', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'P', 00H, 'o', 00H, 'w'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	'c', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG82701 DB	'ttcf', 00H
	ORG $+3
$SG172814 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'O', 00H, 'n', 00H, 'D', 00H, 'e', 00H, 'n'
	DB	00H, 's', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG82702 DB	'ttcf', 00H
	ORG $+3
$SG90895 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG82703 DB	'ttcf', 00H
	ORG $+3
$SG172816 DB	'A', 00H, 'd', 00H, 'd', 00H, 'O', 00H, 'n', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'F', 00H, 'a', 00H, 'r', 00H, 'F', 00H, 'r'
	DB	00H, 'o', 00H, 'm', 00H, 'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H
	DB	'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG90897 DB	'PICT', 00H
	ORG $+3
$SG172818 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'B', 00H, 'u', 00H
	DB	'i', 00H, 'l', 00H, 'd', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'i'
	DB	00H, 'n', 00H, 'e', 00H, 'r', 00H, 'y', 00H, 'F', 00H, 'i', 00H
	DB	'r', 00H, 's', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG172820 DB	'B', 00H, 'u', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, 'I', 00H, 's', 00H, 'U', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H
$SG172822 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'D', 00H, 'r', 00H, 'o', 00H, 'p', 00H, 'O'
	DB	00H, 'f', 00H, 'f', 00H, 00H, 00H
$SG172824 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 'O', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'r'
	DB	00H, 'P', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
$SG166667 DB	'%s', 00H
	ORG $+1
$SG172826 DB	'N', 00H, 'o', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'o', 00H
	DB	'u', 00H, 'g', 00H, 'h', 00H, 'R', 00H, 'o', 00H, 'o', 00H, 'm'
	DB	00H, 'T', 00H, 'o', 00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H
	DB	'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
$SG172828 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'U', 00H, 'n', 00H
	DB	'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 'T', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG166692 DB	'h2', 00H
	ORG $+1
$SG172830 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'W', 00H, 'a', 00H
	DB	'r', 00H, 'p', 00H, 'I', 00H, 'n', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 'T', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG166999 DB	'GET', 00H
$SG172832 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 'I', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'b'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG167243 DB	'wss', 00H
$SG172834 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 'I'
	DB	00H, 'm', 00H, 'm', 00H, 'o', 00H, 'b', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
$SG82726 DB	'SVG ', 00H
	ORG $+7
$SG172836 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 'U'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172838 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 'T', 00H, 'h', 00H, 'a', 00H, 't', 00H, 'U'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG167107 DB	'name="', 00H
	ORG $+1
$SG167252 DB	'%s', 00H
	ORG $+1
$SG172840 DB	'N', 00H, 'o', 00H, 'C', 00H, 'a', 00H, 'r', 00H, 'g', 00H
	DB	'o', 00H, 'T', 00H, 'o', 00H, 'U', 00H, 'n', 00H, 'l', 00H, 'o'
	DB	00H, 'a', 00H, 'd', 00H, 00H, 00H
$SG172842 DB	'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'N', 00H, 'o', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g'
	DB	00H, 'e', 00H, 't', 00H, 's', 00H, 'F', 00H, 'o', 00H, 'u', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
$SG167311 DB	'%s', 00H
	ORG $+1
$SG172844 DB	'N', 00H, 'o', 00H, 't', 00H, 'W', 00H, 'h', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'O', 00H, 'c', 00H, 'c', 00H, 'u', 00H, 'p'
	DB	00H, 'i', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG167109 DB	'name="', 00H
	ORG $+1
$SG167315 DB	'%s', 00H
	ORG $+1
$SG172846 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'A', 00H, 't', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'W', 00H, 'i', 00H, 't'
	DB	00H, 'h', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'A', 00H, 'm', 00H
	DB	'm', 00H, 'o', 00H, 00H, 00H
$SG167570 DB	'%s', 00H
	ORG $+1
$SG90927 DB	'bad file', 00H
	ORG $+3
$SG166117 DB	'Allow', 00H
	ORG $+2
$SG167572 DB	'%s', 00H
	ORG $+1
$SG172848 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'H', 00H, 'o', 00H
	DB	'l', 00H, 'd', 00H, 'A', 00H, 'n', 00H, 'y', 00H, 'M', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, 'A', 00H, 'm', 00H, 'm', 00H, 'o', 00H
	DB	00H, 00H
$SG172850 DB	'T', 00H, 'e', 00H, 'c', 00H, 'h', 00H, 'R', 00H, 'e', 00H
	DB	'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 's', 00H, 'N', 00H, 'o', 00H, 't', 00H
	DB	'M', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG172852 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'U'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'F', 00H, 'i', 00H, 'r', 00H
	DB	's', 00H, 't', 00H, 00H, 00H
$SG167595 DB	0dH, 0aH, 00H
	ORG $+1
$SG172854 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 00H, 00H
	ORG $+2
$SG172856 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG172858 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'V', 00H, 'i', 00H, 's'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 00H, 00H
$SG167625 DB	'%s', 00H
	ORG $+1
$SG172860 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'V', 00H, 'i', 00H, 's'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
$SG167627 DB	'%s', 00H
	ORG $+1
$SG164668 DB	'NULL host', 00H
	ORG $+2
$SG167586 DB	'Origin', 00H
	ORG $+1
$SG167630 DB	'%s', 00H
	ORG $+1
$SG172862 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'a', 00H, 'l'
	DB	00H, 'k', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'L', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 00H, 00H
	ORG $+2
$SG172864 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'a', 00H, 'w'
	DB	00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG164673 DB	'invalid port', 00H
	ORG $+3
$SG172866 DB	'Y', 00H, 'o', 00H, 'u', 00H, 'C', 00H, 'a', 00H, 'n', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'o'
	DB	00H, 'l', 00H, 'T', 00H, 'h', 00H, 'a', 00H, 't', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG172868 DB	'Y', 00H, 'o', 00H, 'u', 00H, 'C', 00H, 'a', 00H, 'n', 00H
	DB	't', 00H, 'I', 00H, 's', 00H, 's', 00H, 'u', 00H, 'e', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	's', 00H, 'T', 00H, 'o', 00H, 'T', 00H, 'h', 00H, 'a', 00H, 't'
	DB	00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG164677 DB	'SSL is not initialized', 00H
	ORG $+1
$SG172870 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	00H, 00H
$SG172872 DB	'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'T'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG172874 DB	'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'R', 00H, 'e', 00H, 'p', 00H, 'a', 00H, 'i'
	DB	00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 00H, 00H
	ORG $+2
$SG167634 DB	'PUT', 00H
$SG164682 DB	'host not found', 00H
	ORG $+1
$SG172876 DB	'N', 00H, 'o', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	's', 00H, 'T', 00H, 'o', 00H, 'D', 00H, 'r', 00H, 'o', 00H, 'p'
	DB	00H, 00H, 00H
$SG167653 DB	'%s', 00H
	ORG $+1
$SG172878 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'H', 00H, 'o', 00H
	DB	'l', 00H, 'd', 00H, 'A', 00H, 'n', 00H, 'y', 00H, 'M', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG167636 DB	'DELETE', 00H
	ORG $+1
$SG167659 DB	'/', 00H
	ORG $+2
$SG164687 DB	'socket(): %s', 00H
	ORG $+3
$SG172880 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'H', 00H, 'o', 00H
	DB	'l', 00H, 'd', 00H, 'T', 00H, 'h', 00H, 'a', 00H, 't', 00H, 00H
	DB	00H
	ORG $+2
$SG167646 DB	'UNLOCK', 00H
	ORG $+1
$SG167661 DB	'?', 00H
	ORG $+2
$SG172882 DB	'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'H', 00H, 'a', 00H, 's', 00H, 'N', 00H, 'o', 00H, 'I', 00H, 'n'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'y', 00H, 00H, 00H
	ORG $+2
$SG167667 DB	'GET', 00H
$SG164690 DB	'Cannot set socket to non-blocking: %s', 00H
	ORG $+2
$SG82770 DB	'cmap', 00H
	ORG $+3
$SG82771 DB	'loca', 00H
	ORG $+3
$SG172884 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, 'I'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 00H, 00H
	ORG $+2
$SG82772 DB	'head', 00H
	ORG $+3
$SG82773 DB	'glyf', 00H
	ORG $+3
$SG166121 DB	'Allow', 00H
	ORG $+2
$SG167673 DB	'yes', 00H
$SG172886 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'M', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, 'I'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 00H, 00H
	ORG $+2
$SG82774 DB	'hhea', 00H
	ORG $+3
$SG82775 DB	'hmtx', 00H
	ORG $+3
$SG166162 DB	'Depth', 00H
	ORG $+2
$SG167675 DB	'%s', 00H
	ORG $+1
$SG172888 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'P', 00H, 'a', 00H
	DB	'w', 00H, 'n', 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, 'U'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG167696 DB	'%s', 00H
	ORG $+1
$SG164696 DB	'connect(%s:%d): timeout', 00H
$SG82776 DB	'kern', 00H
	ORG $+3
$SG82777 DB	'GPOS', 00H
	ORG $+3
$SG172890 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG167701 DB	'%s', 00H
	ORG $+1
$SG172892 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG167835 DB	'%s', 00H
	ORG $+1
$SG164700 DB	'connect(%s:%d): error %s', 00H
	ORG $+3
$SG166211 DB	'%I64u', 00H
	ORG $+2
$SG167857 DB	'%s', 00H
	ORG $+1
$SG172894 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG82783 DB	'CFF ', 00H
	ORG $+3
$SG172896 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG172898 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'Y', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'O', 00H, 'w', 00H, 'n', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172900 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'Y', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'O', 00H, 'w', 00H, 'n', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG164708 DB	'._-$,;~()', 00H
	ORG $+2
$SG82789 DB	'maxp', 00H
	ORG $+3
$SG166473 DB	'wsock', 00H
	ORG $+2
$SG167861 DB	'%s', 00H
	ORG $+1
$SG172902 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'y', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG164711 DB	'0123456789abcdef', 00H
	ORG $+3
$SG166738 DB	'%lf%c', 00H
	ORG $+2
$SG167871 DB	'-', 00H
	ORG $+2
$SG172904 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'y', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG172906 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'N', 00H, 'e', 00H, 'u'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'l', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172908 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'N', 00H, 'e', 00H, 'u'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'l', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172910 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'e'
	DB	00H, 'm', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG167901 DB	'?', 00H
	ORG $+2
$SG172912 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'e'
	DB	00H, 'm', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG167903 DB	'-', 00H
	ORG $+2
$SG172914 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H, 'i', 00H, 'r'
	DB	00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172916 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H, 'i', 00H, 'r'
	DB	00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172918 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'G', 00H, 'r', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG167904 DB	'-', 00H
	ORG $+2
$SG172920 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'G', 00H, 'r', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG167905 DB	'-', 00H
	ORG $+2
$SG172922 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG167912 DB	'%s', 0aH, 00H
$SG172924 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG167974 DB	'yes', 00H
$SG172926 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'L', 00H, 'i', 00H, 'g'
	DB	00H, 'h', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG168038 DB	'yes', 00H
$SG172928 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'L', 00H, 'i', 00H, 'g'
	DB	00H, 'h', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG168043 DB	'sslize', 00H
	ORG $+1
$SG86203 DB	'rb', 00H
	ORG $+1
$SG91009 DB	'bad format', 00H
	ORG $+1
$SG86240 DB	'rb', 00H
	ORG $+1
$SG172930 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H, 'r', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91011 DB	'bad file', 00H
	ORG $+3
$SG167108 DB	':,; ', 09H, 00H
	ORG $+2
$SG168046 DB	'sslize', 00H
	ORG $+1
$SG168232 DB	'...', 00H
$SG172932 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'A', 00H, 'r', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91013 DB	'bad format', 00H
	ORG $+1
$SG86341 DB	'rb', 00H
	ORG $+1
$SG172934 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'i', 00H, 'o'
	DB	00H, 'l', 00H, 'o', 00H, 'g', 00H, 'i', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
$SG86362 DB	'rb', 00H
	ORG $+1
$SG91015 DB	'bad format', 00H
	ORG $+1
$SG86544 DB	'0', 00H, 00H, 00H
$SG172936 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'i', 00H, 'o'
	DB	00H, 'l', 00H, 'o', 00H, 'g', 00H, 'i', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
$SG168532 DB	'yes', 00H
$SG172938 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'H', 00H, 'e', 00H, 'r'
	DB	00H, 'o', 00H, 'i', 00H, 'c', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG168535 DB	'yes', 00H
$SG172940 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'H', 00H, 'e', 00H, 'r'
	DB	00H, 'o', 00H, 'i', 00H, 'c', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG86636 DB	'0', 00H, 00H, 00H
$SG91020 DB	'bad file', 00H
	ORG $+3
$SG167113 DB	'name=', 00H
	ORG $+2
$SG168063 DB	'sslize', 00H
	ORG $+1
$SG168571 DB	'%s', 00H
	ORG $+1
$SG172942 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'o', 00H, 'b'
	DB	00H, 'o', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172944 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'o', 00H, 'b'
	DB	00H, 'o', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91025 DB	'bad file', 00H
	ORG $+3
$SG167114 DB	':,; ', 09H, 00H
	ORG $+2
$SG168065 DB	'sslize', 00H
	ORG $+1
$SG168579 DB	'%s', 00H
	ORG $+1
$SG172946 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'e', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
$SG164755 DB	'&lt;', 00H
	ORG $+3
$SG167115 DB	'name=', 00H
	ORG $+2
$SG168587 DB	'%s', 00H
	ORG $+1
$SG172948 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'e', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
$SG164757 DB	'&gt;', 00H
	ORG $+3
$SG167119 DB	':,; ', 09H, 00H
	ORG $+2
$SG168852 DB	'%s', 00H
	ORG $+1
$SG172950 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91031 DB	'bad file', 00H
	ORG $+3
$SG93393 DB	'error', 00H
	ORG $+2
$SG168861 DB	'ws', 00H
	ORG $+1
$SG172952 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG164760 DB	'[DIRECTORY]', 00H
$SG168864 DB	'wss', 00H
$SG172954 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91034 DB	'bad file', 00H
	ORG $+3
$SG167125 DB	':,; ', 09H, 00H
	ORG $+2
$SG168887 DB	'wss://', 00H
	ORG $+1
$SG168929 DB	'yes', 00H
$SG172956 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172958 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'i', 00H, 's'
	DB	00H, 's', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG168956 DB	'%s', 00H
	ORG $+1
$SG172960 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'i', 00H, 's'
	DB	00H, 's', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG164933 DB	'&lt;', 00H
	ORG $+7
$SG82849 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG168959 DB	'%s', 00H
	ORG $+1
$SG172962 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'o', 00H, 'r'
	DB	00H, 'k', 00H, 'e', 00H, 'r', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG168962 DB	'%s', 00H
	ORG $+1
$SG172964 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'o', 00H, 'r'
	DB	00H, 'k', 00H, 'e', 00H, 'r', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG168967 DB	'%s', 00H
	ORG $+1
$SG172966 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, 'g', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG168969 DB	'%s', 00H
	ORG $+1
$SG164774 DB	'%d-%b-%Y %H:%M', 00H
	ORG $+1
$SG164775 DB	'01-Jan-1970 00:00', 00H
	ORG $+2
$SG168981 DB	'%s', 00H
	ORG $+1
$SG172968 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, 'g', 00H, 'y', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG168984 DB	'%s', 00H
	ORG $+1
$SG172970 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'i'
	DB	00H, 'e', 00H, 'l', 00H, 'd', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG168992 DB	'%s', 00H
	ORG $+1
$SG172972 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'i'
	DB	00H, 'e', 00H, 'l', 00H, 'd', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG172974 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'y'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG164780 DB	'<tr><td><a href="%s%s">%s%s</a></td><td>&nbsp;%s</td><td'
	DB	'>&nbsp;&nbsp;%s</td></tr>', 0aH, 00H
	ORG $+1
$SG168999 DB	'%s', 00H
	ORG $+1
$SG172976 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'y'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG169011 DB	'%s', 00H
	ORG $+1
$SG172978 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'u', 00H, 'r'
	DB	00H, 'i', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG82867 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG169019 DB	'%s', 00H
	ORG $+1
$SG172980 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'u', 00H, 'r'
	DB	00H, 'i', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG169026 DB	'%s', 00H
	ORG $+1
$SG172982 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'l', 00H, 'o'
	DB	00H, 'a', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172984 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'l', 00H, 'o'
	DB	00H, 'a', 00H, 'k', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG172986 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 'I', 00H, 'n', 00H, 'A', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 's', 00H, 'i', 00H, 's', 00H, 'F', 00H, 'i'
	DB	00H, 'e', 00H, 'l', 00H, 'd', 00H, 00H, 00H
$SG169046 DB	'%s', 00H
	ORG $+1
$SG91066 DB	'too large', 00H
	ORG $+2
$SG169049 DB	'%i', 00H
	ORG $+1
$SG172988 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 'I', 00H, 'n', 00H, 'A', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 's', 00H, 'i', 00H, 's', 00H, 'F', 00H, 'i'
	DB	00H, 'e', 00H, 'l', 00H, 'd', 00H, 00H, 00H
$SG169072 DB	'%s', 00H
	ORG $+1
$SG91068 DB	'too large', 00H
	ORG $+6
$SG172990 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG169156 DB	'%s', 00H
	ORG $+1
$SG91070 DB	'bad file', 00H
	ORG $+7
$SG91072 DB	'too large', 00H
	ORG $+6
$SG172994 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	00H, 00H
$SG172992 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG169219 DB	'yes', 00H
$SG91074 DB	'outofmem', 00H
	ORG $+3
$SG167244 DB	'https', 00H
	ORG $+2
$SG79113 DB	'C:', 00H
	ORG $+1
$SG172996 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	00H, 00H
$SG172998 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'v'
	DB	00H, 'i', 00H, 'v', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG79139 DB	'*', 00H
	ORG $+2
$SG173000 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'v'
	DB	00H, 'i', 00H, 'v', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG169263 DB	'%s', 00H
	ORG $+1
$SG173002 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'H', 00H, 'i', 00H, 'd'
	DB	00H, 'd', 00H, 'e', 00H, 'n', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG169265 DB	'1.0', 00H
$SG173004 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'H', 00H, 'i', 00H, 'd'
	DB	00H, 'd', 00H, 'e', 00H, 'n', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG169266 DB	'1.1', 00H
$SG164812 DB	'**.htpasswd$', 00H
	ORG $+3
$SG173006 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 'O'
	DB	00H, 't', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'P', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'U', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG164935 DB	'&gt;', 00H
	ORG $+7
$SG82894 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG169268 DB	'%s', 00H
	ORG $+1
$SG82895 DB	'!', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'f', 00H, 'f', 00H, '.', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG173008 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'H', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'u', 00H, 'c', 00H, 'i', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG169278 DB	'%s', 00H
	ORG $+1
$SG173010 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'H', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'u', 00H, 'c', 00H, 'i', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG169360 DB	'worker', 00H
	ORG $+1
$SG169372 DB	'%s', 00H
	ORG $+1
$SG173012 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'u', 00H, 'l', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 's', 00H, 00H, 00H
$SG173014 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'u', 00H, 'l', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 's', 00H, 00H, 00H
$SG173016 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 't'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG173018 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 't'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG173020 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'W', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'E', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'g', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG161182 DB	'50', 00H
	ORG $+1
$SG173022 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'W', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'S', 00H
	DB	'h', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, 's', 00H, 00H
	DB	00H
$SG161185 DB	'0', 00H
	ORG $+2
$SG173024 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161190 DB	'20', 00H
	ORG $+1
$SG173026 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161192 DB	'200', 00H
$SG173028 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'e', 00H
	DB	'f', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161194 DB	'no', 00H
	ORG $+1
$SG173030 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'e', 00H
	DB	'f', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161197 DB	'no', 00H
	ORG $+1
$SG164839 DB	'scan_directory', 00H
	ORG $+1
$SG173032 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'v', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161201 DB	'500', 00H
$SG164840 DB	'%s: mg_stat(%s) failed: %s', 00H
	ORG $+1
$SG161204 DB	'no', 00H
	ORG $+1
$SG164841 DB	'scan_directory', 00H
	ORG $+1
$SG173034 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'v', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'U', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161206 DB	'yes', 00H
$SG173036 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG173038 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'P', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG173040 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'u'
	DB	00H, 'n', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG173042 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'u'
	DB	00H, 'n', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG173044 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'u', 00H, 'm'
	DB	00H, 'm', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG173046 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'u', 00H, 'm'
	DB	00H, 'm', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 'U', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
$SG173048 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 's', 00H, 'e'
	DB	00H, 'r', 00H, '1', 00H, 00H, 00H
$SG173050 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 's', 00H, 'e'
	DB	00H, 'r', 00H, '1', 00H, 00H, 00H
$SG173052 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'o', 00H, 'p', 00H, 'p', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG173054 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'U', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'o', 00H, 'p', 00H, 'p', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG173056 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 't', 00H
	DB	'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161208 DB	'no', 00H
	ORG $+1
$SG173058 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 't', 00H
	DB	'U', 00H, 'n', 00H, 'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161218 DB	'yes', 00H
$SG164867 DB	'remove_directory', 00H
	ORG $+3
$SG167638 DB	'MKCOL', 00H
	ORG $+2
$SG161224 DB	'yes', 00H
$SG173060 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'a', 00H, 'z'
	DB	00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG169420 DB	'1', 00H
	ORG $+2
$SG164868 DB	'%s: mg_stat(%s) failed: %s', 00H
	ORG $+1
$SG161230 DB	'yes', 00H
$SG164869 DB	'remove_directory', 00H
	ORG $+3
$SG78573 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161234 DB	'yes', 00H
$SG173062 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'a', 00H, 'z'
	DB	00H, 'e', 00H, 'd', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG161236 DB	'no', 00H
	ORG $+1
$SG173064 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+2
$SG161247 DB	'no', 00H
	ORG $+1
$SG173066 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'M', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r'
	DB	00H, 'o', 00H, 'l', 00H, 00H, 00H
$SG173068 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG173070 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, 'i', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG173072 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'I', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 's', 00H, 00H, 00H
$SG173074 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'I', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 's', 00H, 00H, 00H
$SG173076 DB	'N', 00H, 'o', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'A', 00H, 'v', 00H, 'a'
	DB	00H, 'i', 00H, 'l', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	00H, 00H
$SG173078 DB	'W', 00H, 'a', 00H, 'y', 00H, 'p', 00H, 'o', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'F'
	DB	00H, 'u', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG161249 DB	'-1', 00H
	ORG $+1
$SG173080 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'a', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG173082 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'a', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG173084 DB	'M', 00H, 'u', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'i', 00H, 'm'
	DB	00H, 'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91164 DB	'not GIF', 00H
$SG173086 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'i', 00H, 'm'
	DB	00H, 'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG91166 DB	'not GIF', 00H
$SG173088 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'E', 00H, 'n', 00H, 'o', 00H, 'u', 00H, 'g'
	DB	00H, 'h', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 's', 00H, 00H, 00H
$SG161253 DB	'9', 00H
	ORG $+2
$SG91168 DB	'not GIF', 00H
$SG173090 DB	'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'y', 00H, 'S', 00H, 'p', 00H, 'a', 00H, 'w', 00H, 'n', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'L', 00H, 'a', 00H, 'r', 00H, 'v', 00H
	DB	'a', 00H, 00H, 00H
	ORG $+2
$SG95717 DB	'%f', 00H
	ORG $+1
$SG91171 DB	'too large', 00H
	ORG $+2
$SG161255 DB	'yes', 00H
$SG173092 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'E', 00H, 'x', 00H, 'h'
	DB	00H, 'a', 00H, 'u', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG161258 DB	'4', 00H
	ORG $+2
$SG91173 DB	'too large', 00H
	ORG $+2
$SG169452 DB	'master', 00H
	ORG $+1
$SG161260 DB	'no', 00H
	ORG $+1
$SG173094 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'M', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG173096 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'U', 00H, 's', 00H
	DB	'e', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'P', 00H, 'a'
	DB	00H, 'n', 00H, 'e', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG161263 DB	'*', 00H
	ORG $+2
$SG173098 DB	'O', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'Q', 00H
	DB	'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, 'I', 00H, 's', 00H, 'F'
	DB	00H, 'u', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG161265 DB	'*', 00H
	ORG $+2
$SG173100 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'H', 00H, 'a', 00H
	DB	'r', 00H, 'v', 00H, 'e', 00H, 's', 00H, 't', 00H, 'T', 00H, 'h'
	DB	00H, 'a', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H
	DB	'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG173102 DB	'H', 00H, 'a', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 's', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
$SG161267 DB	'*', 00H
	ORG $+2
$SG173104 DB	'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'y', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG173106 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'A', 00H, 't', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'W', 00H, 'e', 00H, 'a'
	DB	00H, 'p', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'D', 00H, 'i', 00H
	DB	's', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
$SG161275 DB	'no', 00H
	ORG $+1
$SG91187 DB	'outofmem', 00H
	ORG $+3
$SG168858 DB	'https', 00H
	ORG $+2
$SG79388 DB	'DEVICE', 00H
	ORG $+1
$SG79423 DB	'%s,', 00H
$SG173108 DB	'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	't', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'T'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG173110 DB	'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'I', 00H, 's', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'O', 00H, 'f'
	DB	00H, 'R', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG173112 DB	'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'I', 00H, 's', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'C', 00H, 'l'
	DB	00H, 'o', 00H, 's', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG79391 DB	'HIDDEN', 00H
	ORG $+1
$SG169613 DB	'%s', 00H
	ORG $+1
$SG173114 DB	'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'I', 00H, 's', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'O', 00H, 'f'
	DB	00H, 'A', 00H, 'r', 00H, 'c', 00H, 00H, 00H
	ORG $+2
$SG79393 DB	'NORMAL', 00H
	ORG $+1
$SG169617 DB	'%s', 00H
	ORG $+1
$SG164923 DB	'Error: Cannot open directory', 0aH, 'opendir(%s): %s', 00H
	ORG $+3
$SG173116 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'p'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, 'L', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG79402 DB	'SYSTEM', 00H
	ORG $+1
$SG169620 DB	'%s', 00H
	ORG $+1
$SG173118 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'C', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG79405 DB	'PINNED', 00H
	ORG $+1
$SG169623 DB	'%s', 00H
	ORG $+1
$SG173120 DB	'C', 00H, 'a', 00H, 'n', 00H, 't', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'C', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e'
	DB	00H, 'l', 00H, 'O', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
$SG173121 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG164937 DB	'text/html; charset=utf-8', 00H
	ORG $+3
$SG168886 DB	'ws://', 00H
	ORG $+2
$SG169660 DB	'%s', 00H
	ORG $+1
$SG164938 DB	'Content-Type', 00H
	ORG $+3
$SG164939 DB	'<html><head><title>Index of %s</title><style>th {text-al'
	DB	'ign: left;}</style></head><body><h1>Index of %s</h1><pre><tab'
	DB	'le cellpadding="0"><tr><th><a href="?n%c">Name</a></th><th><a'
	DB	' href="?d%c">Modified</a></th><th><a href="?s%c">Size</a></th'
	DB	'></tr><tr><td colspan="3"><hr></td></tr>', 00H
$SG164942 DB	'Parent directory', 00H
	ORG $+3
$SG161187 DB	'16384', 00H
	ORG $+2
$SG169663 DB	'%s', 00H
	ORG $+1
$SG173136 DB	'ZenCoreCreateSoftTextureForThisFrame', 00H
	ORG $+3
$SG164944 DB	'<tr><td><a href="%s">%s</a></td><td>&nbsp;%s</td><td>&nb'
	DB	'sp;&nbsp;%s</td></tr>', 0aH, 00H
	ORG $+1
$SG173137 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG164946 DB	'</table></pre></body></html>', 00H
	ORG $+3
$SG164974 DB	'send_file_data', 00H
	ORG $+1
$SG164975 DB	'%s: fseeko() failed: %s', 00H
$SG164976 DB	'send_file_data', 00H
	ORG $+1
$SG164977 DB	'Error: Unable to access file at requested position.', 00H
$SG169669 DB	'%s', 00H
	ORG $+1
$SG91254 DB	'no clear code', 00H
	ORG $+2
$SG173178 DB	'CopyImageDataToTexture', 00H
	ORG $+1
$SG91258 DB	'too many codes', 00H
	ORG $+1
$SG173179 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG164987 DB	'bytes=%I64d-%I64d', 00H
	ORG $+2
$SG169672 DB	'%s', 00H
	ORG $+1
$SG173180 DB	'CopyImageDataToTexture', 00H
	ORG $+1
$SG91260 DB	'illegal code in raster', 00H
	ORG $+1
$SG173181 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG91262 DB	'illegal code in raster', 00H
	ORG $+1
$SG164995 DB	'"%lx.%I64d"', 00H
$SG165034 DB	'HEAD', 00H
	ORG $+7
$SG83082 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG169675 DB	'%s', 00H
	ORG $+1
$SG173219 DB	'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'A', 00H, 'l', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'y', 00H, 00H, 00H
	ORG $+2
$SG169678 DB	'%s', 00H
	ORG $+1
$SG173220 DB	'AliQueueEventAndNotifyAll_', 00H
	ORG $+1
$SG169681 DB	'%s', 00H
	ORG $+1
$SG173221 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG165038 DB	'Error: File size is too large to send', 0aH, '%I64d', 00H
$SG169684 DB	'%s', 00H
	ORG $+1
$SG165044 DB	'Error: Path of zipped file too long (%s)', 00H
	ORG $+3
$SG165045 DB	'gzip', 00H
	ORG $+3
$SG161199 DB	'30000', 00H
	ORG $+2
$SG169687 DB	'%s', 00H
	ORG $+1
$SG91319 DB	'too large', 00H
	ORG $+2
$SG165049 DB	'gzip', 00H
	ORG $+3
$SG79424 DB	'%s %s', 00H
	ORG $+2
$SG169690 DB	'%s', 00H
	ORG $+1
$SG91322 DB	'outofmem', 00H
	ORG $+3
$SG169693 DB	'%s', 00H
	ORG $+1
$SG165051 DB	'Error: Cannot open file', 0aH, 'fopen(%s): %s', 00H
	ORG $+2
$SG165054 DB	'Error: Range requests in gzipped files are not supported'
	DB	00H
	ORG $+3
$SG169696 DB	'%s', 00H
	ORG $+1
$SG165056 DB	'bytes %I64d-%I64d/%I64d', 00H
$SG165057 DB	'Content-Type', 00H
	ORG $+3
$SG165058 DB	'Last-Modified', 00H
	ORG $+2
$SG165059 DB	'Etag', 00H
	ORG $+3
$SG91333 DB	'bad Image Descriptor', 00H
	ORG $+3
$SG165062 DB	'Content-Length', 00H
	ORG $+1
$SG165064 DB	'Accept-Ranges', 00H
	ORG $+2
$SG173258 DB	'last_response.txt', 00H
	ORG $+2
$SG169699 DB	'%s', 00H
	ORG $+1
$SG165066 DB	'Content-Encoding', 00H
	ORG $+3
$SG169702 DB	'%s', 00H
	ORG $+1
$SG173260 DB	'last_map.png', 00H
	ORG $+3
$SG165068 DB	'Content-Range', 00H
	ORG $+2
$SG91341 DB	'missing color table', 00H
$SG169753 DB	'%s', 00H
	ORG $+1
$SG91355 DB	'unknown code', 00H
	ORG $+3
$SG173277 DB	'last_response.txt', 00H
	ORG $+2
$SG169757 DB	'%s', 00H
	ORG $+1
$SG173278 DB	'AlistarOnSocketDataReceived', 00H
$SG169761 DB	'%s', 00H
	ORG $+1
$SG173279 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG165088 DB	'If-Modified-Since', 00H
	ORG $+2
$SG169778 DB	'%s', 00H
	ORG $+1
$SG165089 DB	'If-None-Match', 00H
	ORG $+2
$SG91365 DB	'outofmem', 00H
	ORG $+3
$SG161516 DB	'r', 00H, 'b', 00H, 00H, 00H
	ORG $+2
$SG169786 DB	'%s', 00H
	ORG $+1
$SG173287 DB	'AlistarOnSocketConnectionClosed', 00H
$SG173288 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG165098 DB	'Last-Modified', 00H
	ORG $+2
$SG165099 DB	'Etag', 00H
	ORG $+3
$SG173314 DB	'127.0.0.1', 00H
	ORG $+2
$SG169879 DB	'{', 00H
	ORG $+2
$SG173315 DB	'request_timeout_ms', 00H
	ORG $+1
$SG161745 DB	'%s', 00H
	ORG $+1
$SG173317 DB	'websocket_timeout_ms', 00H
	ORG $+3
$SG173319 DB	'num_threads', 00H
$SG169954 DB	'{', 00H
	ORG $+2
$SG173321 DB	'tcp_nodelay', 00H
$SG169958 DB	'"', 00H
	ORG $+2
$SG165129 DB	'Error: Directory listing denied', 00H
$SG173323 DB	'G:\StarCraft II', 00H
$SG165131 DB	'Error: File not found', 00H
	ORG $+2
$SG173324 DB	'/sc2api', 00H
$SG173326 DB	'AlistarEstablishConnection', 00H
	ORG $+1
$SG169961 DB	'"', 00H
	ORG $+2
$SG173327 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG173329 DB	'AlistarEstablishConnection', 00H
	ORG $+1
$SG169963 DB	',', 00H
	ORG $+2
$SG173330 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG173331 DB	'RoyJacobs', 00H
	ORG $+2
$SG169883 DB	' Stats', 00H
	ORG $+1
$SG169969 DB	',', 00H
	ORG $+2
$SG173333 DB	'AlistarEstablishConnection', 00H
	ORG $+1
$SG169973 DB	',', 00H
	ORG $+2
$SG173334 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG173336 DB	'AlistarEstablishConnection', 00H
	ORG $+1
$SG169977 DB	',', 00H
	ORG $+2
$SG173337 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG91419 DB	'not GIF', 00H
$SG165163 DB	'remove_bad_file', 00H
$SG165164 DB	'%s: Cannot remove invalid file %s', 00H
	ORG $+2
$SG169885 DB	' Cache', 00H
	ORG $+1
$SG169980 DB	',', 00H
	ORG $+2
$SG165165 DB	'remove_bad_file', 00H
$SG165181 DB	'mg_store_body', 00H
	ORG $+2
$SG165182 DB	'%s: Contents already consumed', 00H
	ORG $+2
$SG165183 DB	'mg_store_body', 00H
	ORG $+2
$SG91456 DB	'#?RADIANCE', 0aH, 00H
$SG161798 DB	'wss', 00H
$SG9536	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9537	DB	'V <= ((unsigned __int64)(0x000000000000000F))', 00H
	ORG $+2
$SG91458 DB	'#?RGBE', 0aH, 00H
$SG9538	DB	'safe_cast_u4', 00H
	ORG $+3
$SG9539	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG9545	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9546	DB	'V <= 0xffui8', 00H
	ORG $+3
$SG9547	DB	'safe_cast_u8', 00H
	ORG $+3
$SG9548	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG9554	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9555	DB	'V <= 0xffffui16', 00H
$SG9556	DB	'safe_cast_u16', 00H
	ORG $+2
$SG173397 DB	'AlistarTick', 00H
$SG161799 DB	'ws', 00H
	ORG $+1
$SG9557	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG173398 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG9563	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9564	DB	'V <= 0xffffffffui32', 00H
$SG161837 DB	'%2f', 00H
$SG9565	DB	'safe_cast_u32', 00H
	ORG $+2
$SG9566	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG9572	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9573	DB	'V <= 0xffffffffffffffffui64', 00H
$SG170035 DB	', ', 00H
	ORG $+1
$SG9574	DB	'safe_cast_u64', 00H
	ORG $+2
$SG9575	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG173419 DB	'FindStarcraftExecutableAndDllsDirectory', 00H
$SG173418 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ',', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, ',', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	'!', 00H, 00H, 00H
	ORG $+2
$SG173420 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG173421 DB	'_x64', 00H
	ORG $+3
$SG173423 DB	'%s\versions\Base89165\SC2%s.exe', 00H
$SG173426 DB	'%s\Support%s', 00H
	ORG $+3
$SG173428 DB	'E', 00H, 'x', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 't', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG169897 DB	' HTTPS', 00H
	ORG $+1
$SG161843 DB	'wss', 00H
$SG173429 DB	'FindStarcraftExecutableAndDllsDirectory', 00H
$SG173430 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG173432 DB	'S', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 'd', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG173433 DB	'FindStarcraftExecutableAndDllsDirectory', 00H
$SG173434 DB	'W:\cpp\void\alistar\alistar.c', 00H
	ORG $+2
$SG165254 DB	'POST', 00H
	ORG $+3
?http_methods@@3QBUmg_http_method_info@@B DQ FLAT:$SG165253 ; http_methods
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	ORG $+4
	DQ	FLAT:$SG165254
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165255
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165256
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165257
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	ORG $+4
	DQ	FLAT:$SG165258
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165259
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165260
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165261
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165262
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165263
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165264
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165265
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165266
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165267
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
	DQ	FLAT:$SG165268
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
$SG173449 DB	' -listen %s -port %i -displayMode 0 -windowx 1921 -windo'
	DB	'wy 0', 00H
	ORG $+3
$SG165257 DB	'HEAD', 00H
	ORG $+3
$SG165258 DB	'OPTIONS', 00H
$SG165259 DB	'CONNECT', 00H
$SG165261 DB	'PROPFIND', 00H
	ORG $+3
$SG165263 DB	'LOCK', 00H
	ORG $+3
$SG161518 DB	'w', 00H, 'b', 00H, 00H, 00H
	ORG $+2
$SG169899 DB	' Files', 00H
	ORG $+1
$SG161845 DB	'yes', 00H
$SG165265 DB	'PROPPATCH', 00H
	ORG $+2
$SG165266 DB	'COPY', 00H
	ORG $+3
$SG165267 DB	'MOVE', 00H
	ORG $+3
$SG161520 DB	'a', 00H, 'b', 00H, 00H, 00H
	ORG $+2
$SG161848 DB	':%u', 00H
$SG173460 DB	't', 00H, 'i', 00H, 'c', 00H, 'k', 00H, '.', 00H, '.', 00H
	DB	'.', 00H, 00H, 00H
$SG173461 DB	'ZenMain', 00H
$SG173462 DB	'simple.c', 00H
	ORG $+7
$SG83385 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83386 DB	'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG162042 DB	'/', 00H
	ORG $+2
$SG91585 DB	'#?RADIANCE', 00H
	ORG $+1
$SG162122 DB	'yes', 00H
$SG91587 DB	'not HDR', 00H
$SG91590 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG91592 DB	'unsupported format', 00H
	ORG $+1
$SG162128 DB	'1.1', 00H
$SG91595 DB	'unsupported data layout', 00H
$SG91598 DB	'unsupported data layout', 00H
$SG91600 DB	'too large', 00H
	ORG $+2
$SG80102 DB	'v32tos', 00H
	ORG $+1
$SG162134 DB	'yes', 00H
$SG91602 DB	'too large', 00H
	ORG $+2
$SG162140 DB	'yes', 00H
$SG91606 DB	'too large', 00H
	ORG $+2
$SG88413 DB	'bad TQ', 00H
	ORG $+1
$SG162163 DB	'1.0', 00H
$SG91608 DB	'outofmem', 00H
	ORG $+3
$SG169893 DB	' IPv6', 00H
	ORG $+2
$SG88438 DB	'no SOI', 00H
	ORG $+1
$SG162244 DB	0dH, 0aH, 00H
	ORG $+1
$SG91615 DB	'invalid decoded scanline length', 00H
$SG91618 DB	'outofmem', 00H
	ORG $+3
$SG161800 DB	'https', 00H
	ORG $+2
$SG88442 DB	'no SOF', 00H
	ORG $+1
$SG162250 DB	'0', 00H
	ORG $+2
$SG91622 DB	'corrupt', 00H
$SG91624 DB	'corrupt', 00H
$SG91649 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG9730	DB	'%lli', 00H
	ORG $+3
$SG165381 DB	'Error: NULL File', 00H
	ORG $+3
$SG161842 DB	'https', 00H
	ORG $+2
$SG162254 DB	'Pragma', 00H
	ORG $+1
$SG162304 DB	'OK', 00H
	ORG $+1
$SG9734	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9735	DB	'Unsupported Format Specifier!', 00H
	ORG $+2
$SG9736	DB	'! "Unsupported Format Specifier!"', 00H
	ORG $+2
$SG162284 DB	'Origin', 00H
	ORG $+1
$SG162562 DB	'/', 00H
	ORG $+2
$SG165385 DB	'100-continue', 00H
	ORG $+3
$SG9737	DB	'rx__printf', 00H
	ORG $+1
$SG162567 DB	'0', 00H
	ORG $+2
$SG165386 DB	'Error: Can not fulfill expectation', 00H
	ORG $+1
$SG162681 DB	'yes', 00H
$SG9738	DB	'W:\cpp\void\dr/text.c', 00H
	ORG $+2
$SG165389 DB	'HTTP/1.1 100 Continue', 0dH, 0aH, 0dH, 0aH, 00H
	ORG $+2
$SG162380 DB	'Locked', 00H
	ORG $+1
$SG155008 DB	'1', 00H
	ORG $+2
$SG165392 DB	'Error: Size mismatch', 00H
	ORG $+3
$SG165444 DB	'%s: Cannot register CGI variable [%s]', 00H
	ORG $+2
$SG91718 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG165449 DB	'%s: Cannot allocate memory for CGI variable [%s]', 00H
	ORG $+3
$SG80076 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG170755 DB	'GetTag', 00H
	ORG $+1
$SG163399 DB	0dH, 0aH, 00H
	ORG $+1
$SG91757 DB	'too large', 00H
	ORG $+2
$SG154896 DB	'MainVS', 00H
	ORG $+1
$SG163690 DB	'PUT', 00H
$SG165487 DB	'prepare_cgi_environment', 00H
$SG91759 DB	'too large', 00H
	ORG $+2
$SG154899 DB	'MainPS', 00H
	ORG $+1
$SG163823 DB	'yes', 00H
$SG165488 DB	'%s: Not enough memory for environmental buffer', 00H
	ORG $+1
$SG165489 DB	'prepare_cgi_environment', 00H
$SG91762 DB	'too large', 00H
	ORG $+2
$SG154902 DB	'MainCS', 00H
	ORG $+5
$SG165491 DB	'prepare_cgi_environment', 00H
$SG165492 DB	'%s: Not enough memory for environmental variables', 00H
	ORG $+6
$SG91764 DB	'outofmem', 00H
	ORG $+7
$SG165493 DB	'prepare_cgi_environment', 00H
$SG165494 DB	'SERVER_NAME=%s', 00H
	ORG $+1
$SG165495 DB	'SERVER_ROOT=%s', 00H
	ORG $+1
$SG165496 DB	'DOCUMENT_ROOT=%s', 00H
	ORG $+7
$SG165497 DB	'SERVER_SOFTWARE=CivetWeb/%s', 00H
	ORG $+4
$SG165498 DB	'GATEWAY_INTERFACE=CGI/1.1', 00H
	ORG $+6
$SG165500 DB	'SERVER_PROTOCOL=HTTP/1.1', 00H
	ORG $+7
$SG165502 DB	'REDIRECT_STATUS=200', 00H
	ORG $+4
$SG165504 DB	'SERVER_PORT=%d', 00H
	ORG $+1
$SG165505 DB	'REMOTE_ADDR=%s', 00H
	ORG $+1
$SG165506 DB	'REQUEST_METHOD=%s', 00H
	ORG $+6
$SG165507 DB	'REMOTE_PORT=%d', 00H
	ORG $+1
$SG165508 DB	'REQUEST_URI=%s', 00H
	ORG $+1
$SG165509 DB	'LOCAL_URI=%s', 00H
	ORG $+3
$SG165510 DB	'LOCAL_URI_RAW=%s', 00H
	ORG $+7
$SG165515 DB	'SCRIPT_NAME=%s', 00H
	ORG $+1
$SG157324 DB	'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'l', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H
	ORG $+6
$SG165517 DB	'SCRIPT_NAME=%s%s', 00H
	ORG $+7
$SG157325 DB	'LoadModel', 00H
	ORG $+6
$SG165518 DB	'SCRIPT_NAME=%.*s', 00H
	ORG $+7
$SG157326 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165519 DB	'SCRIPT_FILENAME=%s', 00H
	ORG $+5
$SG165522 DB	'PATH_TRANSLATED=%s', 00H
	ORG $+5
$SG165523 DB	'PATH_TRANSLATED=%s%s', 00H
	ORG $+3
$SG165526 DB	'HTTPS=%s', 00H
	ORG $+7
$SG157335 DB	'LoadModel', 00H
	ORG $+6
$SG165528 DB	'Content-Type', 00H
	ORG $+3
$SG157336 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157334 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG165529 DB	'CONTENT_TYPE=%s', 00H
$SG165531 DB	'QUERY_STRING=%s', 00H
$SG165533 DB	'Content-Length', 00H
	ORG $+1
$SG165534 DB	'CONTENT_LENGTH=%s', 00H
	ORG $+6
$SG157342 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157343 DB	'LoadModel', 00H
	ORG $+2
$SG165536 DB	'PATH', 00H
	ORG $+7
$SG157344 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165537 DB	'PATH=%s', 00H
$SG165539 DB	'PATH_INFO=%s', 00H
	ORG $+3
$SG157347 DB	'l', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'y', 00H, ' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG157348 DB	'LoadModel', 00H
	ORG $+6
$SG165541 DB	'STATUS=%d', 00H
	ORG $+6
$SG157349 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165543 DB	'COMSPEC', 00H
$SG165544 DB	'COMSPEC=%s', 00H
	ORG $+5
$SG91817 DB	'max value > 65535', 00H
	ORG $+6
$SG165546 DB	'SYSTEMROOT', 00H
	ORG $+5
$SG165547 DB	'SYSTEMROOT=%s', 00H
	ORG $+2
$SG165549 DB	'SystemDrive', 00H
	ORG $+4
$SG165550 DB	'SystemDrive=%s', 00H
	ORG $+1
$SG157360 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157358 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157359 DB	'LoadModel', 00H
	ORG $+6
$SG165552 DB	'ProgramFiles', 00H
	ORG $+3
$SG165553 DB	'ProgramFiles=%s', 00H
$SG165555 DB	'ProgramFiles(x86)', 00H
	ORG $+6
$SG165556 DB	'ProgramFiles(x86)=%s', 00H
	ORG $+3
$SG165558 DB	'PERLLIB', 00H
$SG165559 DB	'PERLLIB=%s', 00H
	ORG $+5
$SG157368 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG165561 DB	'REMOTE_USER=%s', 00H
	ORG $+1
$SG157369 DB	'LoadModel', 00H
	ORG $+6
$SG165562 DB	'AUTH_TYPE=Digest', 00H
	ORG $+7
$SG157370 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165564 DB	'HTTP_%s', 00H
$SG165566 DB	'prepare_cgi_environment', 00H
$SG165567 DB	'%s: HTTP header variable too long [%s]', 00H
	ORG $+1
$SG91839 DB	'unknown image type', 00H
	ORG $+5
$SG165568 DB	'prepare_cgi_environment', 00H
$SG83650 DB	'OS/2', 00H
	ORG $+3
$SG165571 DB	'%.*s', 00H
	ORG $+3
$SG157388 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, '(', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, 'd', 00H, '>', 00H, '?', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG157389 DB	'LoadModel', 00H
	ORG $+6
$SG157390 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG91856 DB	'can''t fopen', 00H
$SG166079 DB	'exec', 00H
	ORG $+7
$SG157399 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, '(', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, 'N', 00H, 's', 00H, '>', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '<', 00H, 'N', 00H, 'i'
	DB	00H, '>', 00H, '?', 00H, ')', 00H, 00H, 00H
$SG157400 DB	'LoadModel', 00H
	ORG $+6
$SG157401 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157409 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG91873 DB	'can''t fopen', 00H
	ORG $+4
$SG157410 DB	'Invalid Statement, (Did You Mean <Ka> or <Kd> or <Ks> or'
	DB	' <Ke>?)', 00H
$SG157411 DB	'! "Invalid Statement, (Did You Mean <Ka> or <Kd> or <Ks>'
	DB	' or <Ke>?)"', 00H
	ORG $+4
$SG157412 DB	'LoadModel', 00H
	ORG $+6
$SG157413 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157414 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG157418 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157415 DB	'Invalid Statement, Did You Mean (<Ns> or <Ni> or <Ka> or'
	DB	' <Kd> or <Ks> or <Ke>?)', 00H
$SG157416 DB	'! "Invalid Statement, Did You Mean (<Ns> or <Ni> or <Ka>'
	DB	' or <Kd> or <Ks> or <Ke>?)"', 00H
	ORG $+4
$SG157417 DB	'LoadModel', 00H
	ORG $+6
$SG157431 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG157432 DB	'Invalid Statement, Did You Mean <map_d> or <map_Kd> or <'
	DB	'map_Ke> or <map_Bump>?', 00H
	ORG $+1
$SG157433 DB	'! "Invalid Statement, Did You Mean <map_d> or <map_Kd> o'
	DB	'r <map_Ke> or <map_Bump>?"', 00H
	ORG $+5
$SG157434 DB	'LoadModel', 00H
	ORG $+6
$SG157435 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157438 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG157442 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157439 DB	'Invalid Statement, Did You Mean <newmtl> or <illum> or <'
	DB	'map_d> or <map_Kd> or <map_Ke> or <map_Bump>?', 00H
	ORG $+2
$SG157450 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157440 DB	'! "Invalid Statement, Did You Mean <newmtl> or <illum> o'
	DB	'r <map_d> or <map_Kd> or <map_Ke> or <map_Bump>?"', 00H
	ORG $+6
$SG157441 DB	'LoadModel', 00H
	ORG $+6
$SG157448 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157449 DB	'LoadModel', 00H
	ORG $+6
$SG157458 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157456 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157457 DB	'LoadModel', 00H
	ORG $+6
$SG157468 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157466 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157467 DB	'LoadModel', 00H
	ORG $+6
$SG157476 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157474 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157475 DB	'LoadModel', 00H
	ORG $+6
$SG157484 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157482 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157483 DB	'LoadModel', 00H
	ORG $+6
$SG157492 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157490 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157491 DB	'LoadModel', 00H
	ORG $+6
$SG157501 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG157499 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG157500 DB	'LoadModel', 00H
	ORG $+6
$SG157503 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 's', 00H
	DB	'''', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG157504 DB	'LoadModel', 00H
	ORG $+6
$SG157505 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165701 DB	'Error: CGI program "%s": Path too long', 00H
	ORG $+1
$SG157509 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 'f', 00H
	DB	'''', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG165702 DB	'handle_cgi_request', 00H
	ORG $+5
$SG157510 DB	'LoadModel', 00H
	ORG $+6
$SG165703 DB	'CGI path too long', 00H
	ORG $+6
$SG157511 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165704 DB	'Error: %s', 00H
	ORG $+6
$SG165710 DB	'Error: CGI program "%s": Can not create CGI pipes: %s', 00H
	ORG $+2
$SG165711 DB	'handle_cgi_request', 00H
	ORG $+5
$SG165712 DB	'Error: Cannot create CGI pipe: %s', 00H
	ORG $+6
$SG165715 DB	'Error: CGI program "%s": Out or memory', 00H
	ORG $+1
$SG157523 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG165716 DB	'handle_cgi_request', 00H
	ORG $+5
$SG157524 DB	'LoadModel', 00H
	ORG $+6
$SG165717 DB	'Error: Out of memory [%s]', 00H
	ORG $+6
$SG157525 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG165720 DB	'Error: CGI program "%s": Can not spawn CGI process: %s', 00H
	ORG $+1
$SG165721 DB	'handle_cgi_request', 00H
	ORG $+5
$SG165722 DB	'Error: Cannot spawn CGI process', 00H
$SG165729 DB	'Error: CGI program "%s": Can not open fd: %s', 00H
	ORG $+3
$SG165730 DB	'handle_cgi_request', 00H
	ORG $+5
$SG165731 DB	'Error: CGI can not open fd', 0aH, 'fdopen: %s', 00H
	ORG $+2
$SG157542 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG157543 DB	'Area.Min.X <= Texture->DimenX', 00H
	ORG $+2
$SG165736 DB	'Error: CGI program "%s": Forward body data failed', 00H
	ORG $+6
$SG157544 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG165737 DB	'handle_cgi_request', 00H
	ORG $+5
$SG157545 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG157546 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG157547 DB	'Area.Min.Y <= Texture->DimenY', 00H
	ORG $+2
$SG165740 DB	'Error: Not enough memory for CGI buffer (%u bytes)', 00H
	ORG $+5
$SG157548 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG157549 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG165741 DB	'Error: CGI program "%s": Not enough memory for buffer (%'
	DB	'u bytes)', 00H
	ORG $+7
$SG165742 DB	'handle_cgi_request', 00H
	ORG $+5
$SG157550 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG157551 DB	'Area.Max.X >= 0', 00H
$SG157552 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG157553 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG157554 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG165747 DB	'Error: CGI program "%s" sent error message: [%.*s]', 00H
	ORG $+5
$SG157555 DB	'Area.Max.Y >= 0', 00H
$SG165748 DB	'handle_cgi_request', 00H
	ORG $+5
$SG157556 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG165749 DB	'Error: CGI program "%s" failed.', 00H
$SG157557 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG165750 DB	'Error: CGI program sent malformed or too big (>%u bytes)'
	DB	' HTTP headers: [%.*s]', 00H
	ORG $+2
$SG165751 DB	'handle_cgi_request', 00H
	ORG $+5
$SG165763 DB	'HTTP/1.1 %d %s', 0dH, 0aH, 00H
	ORG $+7
$SG165752 DB	'Error: CGI program sent malformed or too big (>%u bytes)'
	DB	' HTTP headers: [%.*s]', 00H
	ORG $+2
$SG165761 DB	'Location', 00H
	ORG $+7
$SG165764 DB	'%s: %s', 0dH, 0aH, 00H
	ORG $+7
$SG83875 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83876 DB	'z', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG165798 DB	'dav_mkcol', 00H
	ORG $+6
$SG165799 DB	'%s: mg_stat(%s) failed: %s', 00H
	ORG $+5
$SG165800 DB	'dav_mkcol', 00H
	ORG $+6
$SG165802 DB	'Error: mkcol(%s): %s', 00H
	ORG $+3
$SG165804 DB	'Error: mkcol(%s): %s', 00H
	ORG $+3
$SG165808 DB	'Content-Length', 00H
	ORG $+1
$SG165812 DB	'Error processing %s: %s', 00H
$SG83915 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+4
$SG83904 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83905 DB	'y', 00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H
	DB	'1', 00H, 00H, 00H
$SG83906 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92099 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG83907 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG83919 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG83927 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+4
$SG83914 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83918 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83922 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83923 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG83926 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG165847 DB	'Overwrite', 00H
	ORG $+6
$SG165848 DB	'Destination', 00H
	ORG $+4
$SG83928 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83929 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, 00H, 00H
	ORG $+6
$SG165852 DB	'Missing destination', 00H
$SG166372 DB	'%s%s', 00H
	ORG $+7
$SG83934 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83935 DB	'x', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+6
$SG165865 DB	'Illegal destination', 00H
$SG92903 DB	'IHDR', 00H
	ORG $+7
$SG83945 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83946 DB	't', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG83947 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83948 DB	'b', 00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG165871 DB	'Cannot overwrite file: %s', 00H
	ORG $+6
$SG165872 DB	'Destination already exists: %s', 00H
	ORG $+1
$SG165878 DB	'Destination already exists: %s', 00H
	ORG $+1
$SG165882 DB	'Content-Length', 00H
	ORG $+1
$SG165883 DB	'Operation failed', 00H
	ORG $+7
$SG165912 DB	'Error: Put not possible', 0aH, 'Replacing %s is not allo'
	DB	'wed', 00H
	ORG $+4
$SG165915 DB	'Content-Length', 00H
	ORG $+1
$SG165917 DB	'Error: Path too long', 0aH, 'put_dir(%s): %s', 00H
	ORG $+3
$SG165919 DB	'Error: Can not create directory', 0aH, 'put_dir(%s): %s', 00H
$SG165922 DB	'Error: Can not create file', 0aH, 'fopen(%s): %s', 00H
	ORG $+7
$SG165923 DB	'Content-Range', 00H
	ORG $+2
$SG165926 DB	'Error: Internal error processing file %s', 00H
	ORG $+7
$SG165930 DB	'Content-Length', 00H
	ORG $+1
$SG165941 DB	'Error: Cannot delete file', 0aH, 'File %s not found', 00H
	ORG $+4
$SG165947 DB	'Error: Could not delete %s', 00H
	ORG $+5
$SG84028 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG165949 DB	'Error: Delete not possible', 0aH, 'Deleting %s is not al'
	DB	'lowed', 00H
	ORG $+2
$SG92221 DB	'11 4 22 44 44 22 444444', 00H
$SG84029 DB	'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG92222 DB	'11 4 22 44 44 22 444444 4444 4 444 444 444 444', 00H
	ORG $+1
$SG165953 DB	'Content-Length', 00H
	ORG $+1
$SG165954 DB	'Error: Cannot delete file', 0aH, 'remove(%s): %s', 00H
	ORG $+7
$SG84035 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84036 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o'
	DB	00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, 00H, 00H
$SG157770 DB	'assets\fonts\%s.%s', 00H
	ORG $+5
$SG157771 DB	'C:\Windows\Fonts\%s.%s', 00H
	ORG $+1
$SG84046 DB	'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG84045 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84048 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84049 DB	'd', 00H, 'y', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG84050 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84051 DB	'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG84054 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84055 DB	'f', 00H, 'a', 00H, 'b', 00H, 's', 00H, '(', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, ')', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG84057 DB	's', 00H, 'y', 00H, '1', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'y', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, '-', 00H, '0', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG84056 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG165987 DB	' virtual="%511[^"]"', 00H
	ORG $+4
$SG165991 DB	' abspath="%511[^"]"', 00H
	ORG $+4
$SG165996 DB	' file="%511[^"]"', 00H
	ORG $+7
$SG165997 DB	' "%511[^"]"', 00H
	ORG $+4
$SG166002 DB	'Bad SSI #include: [%s]', 00H
	ORG $+1
$SG166003 DB	'do_ssi_include', 00H
	ORG $+1
$SG166005 DB	'SSI #include path length overflow: [%s]', 00H
$SG166006 DB	'do_ssi_include', 00H
	ORG $+1
$SG166009 DB	'Cannot open SSI #include: [%s]: fopen(%s): %s', 00H
	ORG $+2
$SG166010 DB	'do_ssi_include', 00H
	ORG $+1
$SG92288 DB	'111 221 2222 11', 00H
$SG92289 DB	'111 221 2222 11', 00H
$SG157827 DB	'ASCII-EX', 00H
	ORG $+7
$SG166027 DB	' "%1023[^"]"', 00H
	ORG $+3
$SG166028 DB	'Bad SSI #exec: [%s]', 00H
	ORG $+4
$SG166029 DB	'do_ssi_exec', 00H
	ORG $+4
$SG166033 DB	'Cannot SSI #exec: [%s]: %s', 00H
	ORG $+5
$SG166034 DB	'do_ssi_exec', 00H
	ORG $+4
$SG84124 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84125 DB	'z', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+6
$SG84130 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84131 DB	'z', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, '_', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H
	DB	00H, 00H
$SG166066 DB	'SSI #include level is too deep (%s)', 00H
	ORG $+4
$SG166067 DB	'send_ssi_file', 00H
	ORG $+2
$SG92347 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG166076 DB	'include', 00H
$SG92348 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	'+', 00H, '1', 00H, '2', 00H, '8', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, '5', 00H, '5', 00H, 00H, 00H
	ORG $+4
$SG166080 DB	'%s: unknown SSI command: "%s"', 00H
	ORG $+2
$SG166081 DB	'send_ssi_file', 00H
	ORG $+2
$SG166085 DB	'%s: tag is too large', 00H
	ORG $+3
$SG166086 DB	'send_ssi_file', 00H
	ORG $+2
$SG92358 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG92359 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '8'
	DB	00H, 00H, 00H
	ORG $+4
$SG157896 DB	'ZenCoreCreateGlyphFontAtlas', 00H
	ORG $+4
$SG157897 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166105 DB	'Error: Cannot read file', 0aH, 'fopen(%s): %s', 00H
	ORG $+2
$SG166106 DB	'text/html', 00H
	ORG $+6
$SG166107 DB	'Content-Type', 00H
	ORG $+3
$SG166113 DB	'text/html', 00H
	ORG $+6
$SG166114 DB	'Content-Type', 00H
	ORG $+3
$SG157924 DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, ',', 00H, ' ', 00H, 'N', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG157925 DB	'ZenCoreLoadGlyphFontCaller', 00H
	ORG $+5
$SG157926 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166120 DB	'GET, POST', 00H
	ORG $+6
$SG157931 DB	'ZenCoreLoadGlyphFontCaller', 00H
	ORG $+5
$SG157932 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG157933 DB	'ZenCoreLoadGlyphFontCaller', 00H
	ORG $+5
$SG157934 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166142 DB	'<d:collection/>', 00H
$SG166144 DB	'<d:response><d:href>%s</d:href><d:propstat><d:prop><d:re'
	DB	'sourcetype>%s</d:resourcetype><d:getcontentlength>%I64d</d:ge'
	DB	'tcontentlength><d:getlastmodified>%s</d:getlastmodified><d:lo'
	DB	'ckdiscovery>', 00H
	ORG $+1
$SG166146 DB	'<d:activelock><d:locktype><d:write/></d:locktype><d:lock'
	DB	'scope><d:exclusive/></d:lockscope><d:depth>0</d:depth><d:owne'
	DB	'r>%s</d:owner><d:timeout>Second-%u</d:timeout><d:locktoken><d'
	DB	':href>%s</d:href></d:locktoken></d:activelock>', 0aH, 00H
	ORG $+6
$SG92433 DB	'EXPOSURE=          1.0000000000000', 0aH, 0aH, '-Y %d +X'
	DB	' %d', 0aH, 00H
	ORG $+7
$SG166147 DB	'</d:lockdiscovery></d:prop><d:status>HTTP/1.1 200 OK</d:'
	DB	'status></d:propstat></d:response>', 0aH, 00H
	ORG $+5
$SG92432 DB	'#?RADIANCE', 0aH, '# Written by stb_image_write.h', 0aH, 'F'
	DB	'ORMAT=32-bit_rle_rgbe', 0aH, 00H
	ORG $+6
$SG157972 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG166165 DB	'application/xml; charset=utf-8', 00H
	ORG $+1
$SG157973 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166166 DB	'Content-Type', 00H
	ORG $+3
$SG157974 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG166167 DB	'<?xml version="1.0" encoding="utf-8"?><d:multistatus xml'
	DB	'ns:d=''DAV:''>', 0aH, 00H
	ORG $+2
$SG157975 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG157977 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG157978 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG157979 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG157980 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166173 DB	'</d:multistatus>', 00H
	ORG $+7
$SG158003 DB	'ZenCoreSerializeGlyphFont', 00H
	ORG $+6
$SG158004 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG92475 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG166208 DB	'Already locked', 00H
	ORG $+1
$SG166216 DB	'application/xml; charset=utf-8', 00H
	ORG $+1
$SG166217 DB	'Content-Type', 00H
	ORG $+3
$SG166218 DB	'Lock-Token', 00H
	ORG $+5
$SG166233 DB	'Lock not found', 00H
	ORG $+1
$SG158047 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166219 DB	'<?xml version="1.0" encoding="utf-8"?><d:prop xmlns:d="D'
	DB	'AV:">', 0aH, '     <d:lockdiscovery>', 0aH, '       <d:active'
	DB	'lock>', 0aH, '         <d:lockscope><d:exclusive/></d:locksco'
	DB	'pe>', 0aH, '         <d:locktype><d:write/></d:locktype>', 0aH
	DB	'         <d:owner>', 0aH, '           <d:href>%s</d:href>', 0aH
	DB	'         </d:owner>', 0aH, '         <d:timeout>Second-%u</d:'
	DB	'timeout>', 0aH, '         <d:locktoken><d:href>%s</d:href></d'
	DB	':locktoken>', 0aH, '         <d:lockroot>', 0aH, '           '
	DB	'<d:href>%s</d:href>', 0aH, '         </d:lockroot>', 0aH, '  '
	DB	'     </d:activelock>', 0aH, '     </d:lockdiscovery>', 0aH, ' '
	DB	'  </d:prop>', 0aH, 00H
	ORG $+4
$SG158046 DB	'ZenCoreLoadMetalFontFromFile', 00H
	ORG $+3
$SG158048 DB	'ZenCoreLoadMetalFontFromFile', 00H
	ORG $+3
$SG158049 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166242 DB	'application/xml; charset=utf-8', 00H
	ORG $+1
$SG166243 DB	'Content-Type', 00H
	ORG $+3
$SG166246 DB	'</d:response></d:multistatus>', 00H
	ORG $+2
$SG158109 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG166244 DB	'<?xml version="1.0" encoding="utf-8"?><d:multistatus xml'
	DB	'ns:d=''DAV:''>', 0aH, '<d:response>', 0aH, '<d:href>%s</d:hre'
	DB	'f>', 0aH, 00H
	ORG $+1
$SG158110 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG166245 DB	'<d:propstat><d:status>HTTP/1.1 403 Forbidden</d:status><'
	DB	'/d:propstat>', 0aH, 00H
	ORG $+2
$SG158111 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG158112 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG158113 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG158114 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG158116 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG158117 DB	'CurX <= MaxPackX', 00H
	ORG $+7
$SG158118 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG158119 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG158120 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG158121 DB	'CurY <= MaxPackY', 00H
	ORG $+7
$SG158122 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG158123 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG158125 DB	'%', 00H, 'i', 00H, ' ', 00H, '.', 00H, '.', 00H, '.', 00H
	DB	00H, 00H
	ORG $+2
$SG158126 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG158127 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG158128 DB	'SomeFile', 00H
	ORG $+7
$SG158129 DB	'%s_debug_atlas.png', 00H
	ORG $+5
$SG166358 DB	'258EAFA5-E914-47DA-95CA-C5AB0DC85B11', 00H
	ORG $+3
$SG158179 DB	'W:\cpp\void\detroit', 00H
	ORG $+4
$SG158180 DB	'UnifrakturCook\UnifrakturCook-Bold', 00H
	ORG $+5
$SG158181 DB	'ZenConductSDFFontTest', 00H
	ORG $+2
$SG166374 DB	'HTTP/1.1 101 Switching Protocols', 0dH, 0aH, 'Upgrade: w'
	DB	'ebsocket', 0dH, 0aH, 'Connection: Upgrade', 0dH, 0aH, 'Sec-We'
	DB	'bSocket-Accept: %s', 0dH, 0aH, 00H
	ORG $+2
$SG158182 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG158183 DB	'W:\cpp\void\detroit\assets', 00H
	ORG $+5
$SG158184 DB	'test\circle.png', 00H
$SG166377 DB	'Sec-WebSocket-Protocol: %s', 0dH, 0aH, 0dH, 0aH, 00H
	ORG $+1
$SG158185 DB	'test\sdf_circle.png', 00H
	ORG $+4
$SG158186 DB	'1234111 jjyyggiiill110099 QQ11jjiiiyy``.. [%d]', 00H
	ORG $+1
$SG158187 DB	'test\sdf_test.png', 00H
	ORG $+6
$SG92720 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG92721 DB	'd', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, '7', 00H, '6', 00H, '7', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '2', 00H, '5', 00H, '8', 00H, 00H
	DB	00H
	ORG $+4
$SG158259 DB	'D3D11_FILL_MODE', 00H
$SG158260 DB	'D3D11_FILL_WIREFRAME', 00H
	ORG $+3
$SG158261 DB	'D3D11_FILL_SOLID', 00H
	ORG $+7
$SG158262 DB	'D3D11_CULL_MODE', 00H
$SG158263 DB	'D3D11_CULL_NONE', 00H
$SG158264 DB	'D3D11_CULL_FRONT', 00H
	ORG $+7
$SG158265 DB	'D3D11_CULL_BACK', 00H
$SG158266 DB	'D3D11_RASTERIZER_DESC', 00H
	ORG $+2
$SG158267 DB	'FillMode', 00H
	ORG $+7
$SG158268 DB	'CullMode', 00H
	ORG $+7
$SG158269 DB	'FrontCounterClockwise', 00H
	ORG $+2
$SG158270 DB	'DepthBias', 00H
	ORG $+6
$SG158271 DB	'DepthBiasClamp', 00H
	ORG $+1
$SG158272 DB	'SlopeScaledDepthBias', 00H
	ORG $+3
$SG158273 DB	'DepthClipEnable', 00H
$SG158274 DB	'ScissorEnable', 00H
	ORG $+2
$SG158275 DB	'MultisampleEnable', 00H
	ORG $+6
$SG158276 DB	'AntialiasedLineEnable', 00H
	ORG $+2
$SG84552 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84553 DB	'x', 00H, '+', 00H, 'g', 00H, 'w', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'w', 00H, 00H, 00H
$SG92904 DB	'IHDR', 00H
	ORG $+7
$SG84554 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG158283 DB	'ZenAlloc', 00H
	ORG $+7
$SG84555 DB	'y', 00H, '+', 00H, 'g', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG158284 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG166481 DB	'websocket out of memory; closing connection', 00H
	ORG $+4
$SG158289 DB	'ZenFrameAlloc', 00H
	ORG $+2
$SG158290 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG166483 DB	'read_websocket', 00H
	ORG $+1
$SG166488 DB	'websocket out of memory; closing connection', 00H
	ORG $+4
$SG166490 DB	'read_websocket', 00H
	ORG $+1
$SG166500 DB	'Websocket pull failed; closing connection', 00H
	ORG $+6
$SG166502 DB	'read_websocket', 00H
	ORG $+1
$SG158320 DB	'ZenInternalDebugInternalFiberFun', 00H
	ORG $+7
$SG158321 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG158333 DB	'ZenInternalDebugExternalFiberFun', 00H
	ORG $+7
$SG158334 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG158356 DB	'user32.dll', 00H
	ORG $+5
$SG158359 DB	'SetProcessDPIAwarenessContext', 00H
	ORG $+2
$SG158361 DB	'SetProcessDPIAware', 00H
	ORG $+5
$SG158362 DB	'W:\cpp\void\detroit', 00H
	ORG $+4
$SG158368 DB	'shaders', 00H
$SG158369 DB	'UnifrakturCook\UnifrakturCook-Bold', 00H
	ORG $+5
$SG158370 DB	'ZenInitialize', 00H
	ORG $+2
$SG158371 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG158385 DB	'Font Shader', 00H
	ORG $+4
$SG158394 DB	'Min: %f', 00H
$SG158395 DB	'Off: %f', 00H
$SG158396 DB	'Max: %f', 00H
$SG158397 DB	'Font Atlas', 00H
	ORG $+5
$SG84684 DB	'h', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+4
$SG166597 DB	'Cannot allocate buffer for masked websocket response: Ou'
	DB	't of memory', 00H
	ORG $+4
$SG166599 DB	'mg_websocket_client_write', 00H
	ORG $+6
$SG84686 DB	'v', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+4
$SG84683 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84685 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG92905 DB	'IHDR', 00H
	ORG $+3
$SG92906 DB	'IHDR', 00H
	ORG $+3
$SG92907 DB	'IDAT', 00H
	ORG $+3
$SG92908 DB	'IDAT', 00H
	ORG $+3
$SG92909 DB	'IDAT', 00H
	ORG $+7
$SG166638 DB	'Sec-WebSocket-Key', 00H
	ORG $+2
$SG92910 DB	'IDAT', 00H
	ORG $+7
$SG166639 DB	'Sec-WebSocket-Version', 00H
	ORG $+2
$SG92911 DB	'IEND', 00H
	ORG $+3
$SG92912 DB	'IEND', 00H
	ORG $+3
$SG166641 DB	'Sec-WebSocket-Key1', 00H
	ORG $+1
$SG92913 DB	'IEND', 00H
	ORG $+7
$SG166642 DB	'Sec-WebSocket-Key2', 00H
	ORG $+1
$SG92914 DB	'IEND', 00H
	ORG $+7
$SG92915 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG92916 DB	'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '*', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG166645 DB	'Protocol upgrade to RFC 6455 required', 00H
	ORG $+2
$SG166647 DB	'Malformed websocket request', 00H
	ORG $+4
$SG166652 DB	'Protocol upgrade required', 00H
	ORG $+6
$SG166655 DB	'Sec-WebSocket-Protocol', 00H
	ORG $+1
$SG84741 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84742 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG166663 DB	'Not found', 00H
	ORG $+6
$SG166666 DB	'Websocket handshake failed', 00H
	ORG $+5
?stbiw__jpg_ZigZag@@3QBEB DB 00H			; stbiw__jpg_ZigZag
	DB	01H
	DB	05H
	DB	06H
	DB	0eH
	DB	0fH
	DB	01bH
	DB	01cH
	DB	02H
	DB	04H
	DB	07H
	DB	0dH
	DB	010H
	DB	01aH
	DB	01dH
	DB	02aH
	DB	03H
	DB	08H
	DB	0cH
	DB	011H
	DB	019H
	DB	01eH
	DB	029H
	DB	02bH
	DB	09H
	DB	0bH
	DB	012H
	DB	018H
	DB	01fH
	DB	028H
	DB	02cH
	DB	035H
	DB	0aH
	DB	013H
	DB	017H
	DB	020H
	DB	027H
	DB	02dH
	DB	034H
	DB	036H
	DB	014H
	DB	016H
	DB	021H
	DB	026H
	DB	02eH
	DB	033H
	DB	037H
	DB	03cH
	DB	015H
	DB	022H
	DB	025H
	DB	02fH
	DB	032H
	DB	038H
	DB	03bH
	DB	03dH
	DB	023H
	DB	024H
	DB	030H
	DB	031H
	DB	039H
	DB	03aH
	DB	03eH
	DB	03fH
$SG166683 DB	'Connection', 00H
	ORG $+5
$SG166685 DB	'upgrade', 00H
$SG166687 DB	'Upgrade', 00H
$SG166690 DB	'websocket', 00H
	ORG $+6
$SG84791 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84792 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H
	DB	'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG166714 DB	'%u.%u.%u.%u/%u%n', 00H
	ORG $+7
$SG166716 DB	'%u.%u.%u.%u%n', 00H
	ORG $+2
$SG166776 DB	'url_encoded_field_found', 00H
$SG166777 DB	'%s: Cannot decode filename', 00H
	ORG $+5
$SG166778 DB	'url_encoded_field_found', 00H
$SG166781 DB	'url_encoded_field_found', 00H
$SG166782 DB	'%s: Function "Get" not available', 00H
	ORG $+7
$SG166783 DB	'url_encoded_field_found', 00H
$SG166786 DB	'url_encoded_field_found', 00H
$SG166787 DB	'%s: Function "Store" not available', 00H
	ORG $+5
$SG166788 DB	'url_encoded_field_found', 00H
$SG166809 DB	'url_encoded_field_get', 00H
	ORG $+2
$SG166810 DB	'%s: Not enough memory (required: %lu)', 00H
	ORG $+2
$SG166811 DB	'url_encoded_field_get', 00H
	ORG $+2
$SG166848 DB	0dH, 0aH, '--', 00H
	ORG $+3
$SG167015 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167016 DB	'%s: Cannot write file %s', 00H
	ORG $+7
$SG167017 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167022 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167023 DB	'%s: Error saving file %s', 00H
	ORG $+7
$SG167024 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167025 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167026 DB	'%s: Cannot create file %s', 00H
	ORG $+6
$SG167027 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167029 DB	'Content-Type', 00H
	ORG $+3
$SG167032 DB	'APPLICATION/X-WWW-FORM-URLENCODED', 00H
	ORG $+6
$SG167033 DB	'APPLICATION/WWW-FORM-URLENCODED', 00H
$SG167044 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167045 DB	'%s: Cannot create file %s', 00H
	ORG $+6
$SG167046 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167057 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167058 DB	'%s: Cannot write file %s', 00H
	ORG $+7
$SG167059 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167071 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167072 DB	'%s: Error saving file %s', 00H
	ORG $+7
$SG167073 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167076 DB	'MULTIPART/FORM-DATA;', 00H
	ORG $+3
$SG167078 DB	'BOUNDARY=', 00H
	ORG $+6
$SG167080 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167081 DB	'%s: Cannot allocate memory for boundary [%lu]', 00H
	ORG $+2
$SG167082 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167101 DB	'--', 0dH, 0aH, 00H
	ORG $+3
$SG167102 DB	0dH, 0aH, 0dH, 0aH, 00H
	ORG $+3
$SG167105 DB	'Content-Disposition', 00H
	ORG $+4
$SG93380 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'a'
	DB	00H, 00H, 00H
	ORG $+2
$SG93381 DB	'ZenArenaInit', 00H
	ORG $+3
$SG93382 DB	'W:\cpp\void\detroit\brazen-memory.h', 00H
$SG167117 DB	',; ', 09H, 00H
	ORG $+7
$SG167118 DB	'filename="', 00H
	ORG $+5
$SG167120 DB	'filename="', 00H
	ORG $+5
$SG93392 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG93394 DB	'! "error"', 00H
	ORG $+6
$SG93395 DB	'ZenArenaAlloc', 00H
	ORG $+2
$SG167124 DB	'filename=', 00H
	ORG $+6
$SG93396 DB	'W:\cpp\void\detroit\brazen-memory.h', 00H
	ORG $+4
$SG167126 DB	'filename=', 00H
	ORG $+2
$SG167128 DB	',; ', 09H, 00H
	ORG $+7
$SG167136 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167137 DB	'%s: Cannot create file %s', 00H
	ORG $+6
?COLOR_GRAY@@3Tf32x4@@B DD 03f000000r		; 0.5	; COLOR_GRAY
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
$SG167138 DB	'mg_handle_form_request', 00H
	ORG $+1
?COLOR_BLUE@@3Tf32x4@@B DD 000000000r		; 0	; COLOR_BLUE
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
?COLOR_GREEN@@3Tf32x4@@B DD 000000000r		; 0	; COLOR_GREEN
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
?COLOR_RED@@3Tf32x4@@B DD 03f800000r		; 1	; COLOR_RED
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
$SG167147 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167148 DB	'%s: Cannot write file %s', 00H
	ORG $+7
$SG167149 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167162 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167163 DB	'%s: Cannot write file %s', 00H
	ORG $+7
$SG167164 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167168 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167169 DB	'%s: Error saving file %s', 00H
	ORG $+7
$SG167170 DB	'mg_handle_form_request', 00H
	ORG $+1
$SG167195 DB	'Host', 00H
	ORG $+3
$SG85279 DB	'i', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG167251 DB	'Redirect URL too long', 00H
	ORG $+2
$SG85278 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG93570 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, 'X', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'l', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG93571 DB	'X < Texture->DimenX', 00H
	ORG $+4
$SG93572 DB	'ZenGetTextureMemoryAt', 00H
	ORG $+2
$SG85380 DB	'name', 00H
	ORG $+3
$SG93573 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG93575 DB	'Y < Texture->DimenY', 00H
	ORG $+4
$SG93574 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, 'Y', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'l', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG93576 DB	'ZenGetTextureMemoryAt', 00H
	ORG $+2
$SG93577 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG167310 DB	'Cannot create new request handler struct, OOM', 00H
	ORG $+2
$SG167312 DB	'mg_set_handler_type', 00H
	ORG $+4
$SG167314 DB	'Cannot create new request handler struct, OOM', 00H
	ORG $+2
$SG167316 DB	'mg_set_handler_type', 00H
	ORG $+4
$SG93608 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG93609 DB	'Destination->DimenX >= Source->DimenX', 00H
	ORG $+2
$SG93610 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG93611 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG93612 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG93613 DB	'Destination->DimenY >= Source->DimenY', 00H
	ORG $+2
$SG93614 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG93615 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG93616 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG93617 DB	'Destination->Stride >= Source->Stride', 00H
	ORG $+2
$SG93618 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG93619 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG93622 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG93623 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG93620 DB	'M', 00H, 'i', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG93621 DB	'Destination->Memory != NULL', 00H
	ORG $+4
$SG93624 DB	'M', 00H, 'i', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
	ORG $+4
$SG93625 DB	'Source->Memory != NULL', 00H
	ORG $+1
$SG85433 DB	'head', 00H
	ORG $+3
$SG93626 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG93627 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG85435 DB	'name', 00H
	ORG $+3
$SG93630 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG93631 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG93628 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'b', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG93629 DB	'RowSize <= Source->Stride', 00H
	ORG $+6
$SG93652 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG93653 DB	'Texture->Format == PIXEL_FORMAT_RGB8', 00H
	ORG $+3
$SG93654 DB	'ZenDrawQuadOnTexture', 00H
	ORG $+3
$SG93655 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG167569 DB	'Error: SSL forward not configured properly', 00H
	ORG $+5
$SG167571 DB	'Can not redirect to SSL, no SSL port available', 00H
	ORG $+1
$SG167573 DB	'handle_request', 00H
	ORG $+1
$SG167585 DB	'OPTIONS', 00H
$SG167587 DB	'Access-Control-Request-Method', 00H
	ORG $+2
$SG167589 DB	'Access-Control-Request-Headers', 00H
	ORG $+1
$SG167590 DB	'HTTP/1.1 200 OK', 0dH, 0aH, 'Date: %s', 0dH, 0aH, 'Acces'
	DB	's-Control-Allow-Origin: %s', 0dH, 0aH, 'Access-Control-Allow-'
	DB	'Methods: %s', 0dH, 0aH, 'Content-Length: 0', 0dH, 0aH, 'Conne'
	DB	'ction: %s', 0dH, 0aH, 00H
	ORG $+6
$SG167593 DB	'Access-Control-Allow-Headers: %s', 0dH, 0aH, 00H
	ORG $+5
$SG167594 DB	'Access-Control-Max-Age: 60', 0dH, 0aH, 00H
	ORG $+3
$SG167601 DB	'%s method not allowed', 00H
	ORG $+2
$SG167609 DB	'%s method not allowed', 00H
	ORG $+2
$SG93891 DB	'u', 00H, 'n', 00H, 'r', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	'a', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'u'
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, 00H, 00H
	ORG $+6
$SG93892 DB	'Released', 00H
	ORG $+7
$SG93893 DB	'ZenReleaseNativeMutexEnsured', 00H
	ORG $+3
$SG93894 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG167624 DB	'Forbidden', 00H
	ORG $+6
$SG167626 DB	'Not found', 00H
	ORG $+6
$SG167629 DB	'Not Found', 00H
	ORG $+2
$SG167640 DB	'MOVE', 00H
	ORG $+3
$SG167642 DB	'COPY', 00H
	ORG $+3
$SG167644 DB	'LOCK', 00H
	ORG $+7
$SG167648 DB	'PROPPATCH', 00H
	ORG $+6
$SG167649 DB	'%s method not allowed', 00H
	ORG $+2
$SG167652 DB	'Not found', 00H
	ORG $+6
$SG167658 DB	'out or memory', 00H
	ORG $+2
$SG167663 DB	'PROPFIND', 00H
	ORG $+7
$SG167665 DB	'OPTIONS', 00H
$SG167668 DB	'HEAD', 00H
	ORG $+3
$SG167669 DB	'%s method not allowed', 00H
	ORG $+2
$SG167674 DB	'Error: Directory listing denied', 00H
$SG167695 DB	'Forbidden', 00H
	ORG $+6
$SG167700 DB	'Forbidden', 00H
	ORG $+6
$SG167742 DB	'%u.%u.%u.%u:%u%n', 00H
	ORG $+3
$SG167745 DB	'%u%n', 00H
	ORG $+3
$SG167756 DB	'%u%n', 00H
	ORG $+7
$SG167821 DB	'[IP_ADDRESS:]PORT[s|r]', 00H
	ORG $+1
$SG167822 DB	'%.*s: invalid port spec (entry %i). Expecting list of: %'
	DB	's', 00H
	ORG $+6
$SG167823 DB	'set_ports_option', 00H
	ORG $+7
$SG167825 DB	'Cannot add SSL socket (entry %i)', 00H
	ORG $+7
$SG167826 DB	'set_ports_option', 00H
	ORG $+7
$SG167828 DB	'cannot create socket (entry %i)', 00H
$SG167829 DB	'set_ports_option', 00H
	ORG $+7
$SG167831 DB	'cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)', 00H
$SG167832 DB	'set_ports_option', 00H
	ORG $+7
$SG167834 DB	'IPv6 not available', 00H
	ORG $+5
$SG167836 DB	'set_ports_option', 00H
	ORG $+7
$SG167840 DB	'cannot bind to %.*s: %d (%s)', 00H
	ORG $+3
$SG167841 DB	'set_ports_option', 00H
	ORG $+7
$SG167842 DB	'cannot bind: address family not supported (entry %i)', 00H
	ORG $+3
$SG167843 DB	'set_ports_option', 00H
	ORG $+7
$SG167846 DB	'%s value "%s" is invalid', 00H
	ORG $+7
$SG167847 DB	'set_ports_option', 00H
	ORG $+7
$SG167849 DB	'cannot listen to %.*s: %d (%s)', 00H
	ORG $+1
$SG167850 DB	'set_ports_option', 00H
	ORG $+7
$SG167853 DB	'call to getsockname failed %.*s: %d (%s)', 00H
	ORG $+7
$SG167854 DB	'set_ports_option', 00H
	ORG $+7
$SG167856 DB	'Out of memory', 00H
	ORG $+2
$SG167858 DB	'set_ports_option', 00H
	ORG $+7
$SG167860 DB	'Out of memory', 00H
	ORG $+2
$SG167862 DB	'set_ports_option', 00H
	ORG $+7
$SG167896 DB	'%d/%b/%Y:%H:%M:%S %z', 00H
	ORG $+3
$SG167897 DB	'01/Jan/1970:00:00:00 +0000', 00H
	ORG $+5
$SG167898 DB	'Referer', 00H
$SG167899 DB	'User-Agent', 00H
	ORG $+5
$SG167906 DB	'%s - %s [%s] "%s %s%s%s HTTP/%s" %d %I64d %s %s', 00H
$SG167916 DB	'Error writing log file %s', 00H
	ORG $+6
$SG167917 DB	'log_access', 00H
	ORG $+5
$SG167933 DB	'check_acl', 00H
	ORG $+6
$SG167934 DB	'%s: subnet must be [+|-]IP-addr[/x]', 00H
	ORG $+4
$SG167935 DB	'check_acl', 00H
	ORG $+6
$SG167976 DB	'optional', 00H
	ORG $+7
$SG167979 DB	'SSL_CTX_load_verify_locations error: %s ssl_verify_peer '
	DB	'requires setting either ssl_ca_path or ssl_ca_file. Is any of'
	DB	' them present in the .conf file?', 00H
	ORG $+2
$SG167980 DB	'refresh_trust', 00H
	ORG $+2
$SG86063 DB	'unknown image type', 00H
	ORG $+5
$SG86081 DB	'outofmem', 00H
	ORG $+7
$SG94287 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H
$SG94288 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG94289 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG86100 DB	'outofmem', 00H
	ORG $+7
$SG94298 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG94299 DB	'~Event->Counter & 0x01', 00H
	ORG $+1
$SG94300 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG94301 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG94307 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG94308 DB	'Event->Counter & 0x01', 00H
	ORG $+2
$SG94309 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG94310 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG94311 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ',', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'u'
	DB	00H, 'l', 00H, 'd', 00H, ' ', 00H, 'h', 00H, 'a', 00H, 'v', 00H
	DB	'e', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'e', 00H, 'n', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H
	ORG $+6
$SG94312 DB	'Window->ClickFocused', 00H
	ORG $+3
$SG94313 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG168042 DB	'sslize error: %s', 00H
	ORG $+7
$SG94314 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG168045 DB	'sslize error: %s', 00H
	ORG $+7
$SG94330 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG94331 DB	'ZenNativeWindowCallback', 00H
$SG94332 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG168062 DB	'SSL syscall error %i', 00H
	ORG $+3
$SG168064 DB	'sslize error: %s', 00H
	ORG $+7
$SG86152 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG168090 DB	'0123456789abcdef', 00H
	ORG $+7
$SG86153 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG86172 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG94373 DB	'Location.Max.X != 0', 00H
	ORG $+4
$SG86173 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG94372 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, '[', 00H, 'x', 00H, ']', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG94374 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94375 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG94376 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, '[', 00H, 'y', 00H, ']', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG94377 DB	'Location.Max.Y != 0', 00H
	ORG $+4
$SG94378 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94379 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG94380 DB	'Z', 00H, 'e', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, ':', 00H, ':', 00H, '%', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG94386 DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'F', 00H, 'i', 00H, 'b', 00H, 'e', 00H, 'r', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H
	DB	'E', 00H, 'D', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG94387 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94388 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
$SG168165 DB	'sha1', 00H
	ORG $+7
$SG94390 DB	'S', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, 'A', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E'
	DB	00H, 'D', 00H, ']', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+6
$SG94391 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94392 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG94394 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, 'A', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E'
	DB	00H, 'D', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG94395 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94396 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG94397 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG86205 DB	'can''t fopen', 00H
	ORG $+4
$SG94398 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94399 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
$SG168230 DB	', %s', 00H
	ORG $+7
$SG94400 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG94401 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG94402 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG86242 DB	'can''t fopen', 00H
	ORG $+4
$SG168220 DB	'load_tls_dll', 00H
	ORG $+3
$SG168221 DB	'%s: cannot load %s', 00H
	ORG $+5
$SG168227 DB	'load_tls_dll', 00H
	ORG $+3
$SG168228 DB	'%s: %s: cannot find %s', 00H
	ORG $+1
$SG86310 DB	'unknown image type', 00H
	ORG $+5
$SG86343 DB	'can''t fopen', 00H
	ORG $+4
$SG168279 DB	'libeay64.dll', 00H
	ORG $+3
$SG168281 DB	'libeay64.dll', 00H
	ORG $+3
$SG168282 DB	'initialize_openssl', 00H
	ORG $+5
$SG168283 DB	'%s: error loading library %s', 00H
	ORG $+3
$SG168289 DB	'initialize_openssl', 00H
	ORG $+5
$SG168290 DB	'%s: cannot allocate mutexes: %s', 00H
$SG168292 DB	'initialize_openssl', 00H
	ORG $+5
$SG168293 DB	'%s: error initializing mutex %i of %i', 00H
	ORG $+2
$SG168295 DB	'ssleay64.dll', 00H
	ORG $+3
$SG168317 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168318 DB	'%s: cannot open certificate file %s: %s', 00H
$SG168319 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168321 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168322 DB	'%s: cannot open private key file %s: %s', 00H
$SG168323 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168325 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168326 DB	'%s: certificate and private key do not match: %s', 00H
	ORG $+7
$SG168327 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168330 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG168331 DB	'%s: cannot use certificate chain file %s: %s', 00H
	ORG $+3
$SG168332 DB	'ssl_use_pem_file', 00H
	ORG $+7
$SG86526 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG86527 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG86529 DB	'outofmem', 00H
	ORG $+7
$SG86545 DB	'unsupported', 00H
$SG168855 DB	'http', 00H
	ORG $+7
$SG86543 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG168517 DB	'SSL_CTX_new (server) error: %s', 00H
	ORG $+1
$SG168518 DB	'init_ssl_ctx_impl', 00H
	ORG $+6
$SG168520 DB	'SSL callback returned error: %i', 00H
$SG168521 DB	'init_ssl_ctx_impl', 00H
	ORG $+6
$SG168524 DB	'Domain SSL callback returned error: %i', 00H
	ORG $+1
$SG168525 DB	'init_ssl_ctx_impl', 00H
	ORG $+6
$SG168534 DB	'optional', 00H
	ORG $+7
$SG168539 DB	'init_ssl_ctx_impl', 00H
	ORG $+6
$SG168538 DB	'SSL_CTX_load_verify_locations error: %s ssl_verify_peer '
	DB	'requires setting either ssl_ca_path or ssl_ca_file. Is any of'
	DB	' them present in the .conf file?', 00H
	ORG $+2
$SG168544 DB	'init_ssl_ctx_impl', 00H
	ORG $+6
$SG86618 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG86619 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG86621 DB	'outofmem', 00H
	ORG $+7
$SG168543 DB	'SSL_CTX_set_default_verify_paths error: %s', 00H
	ORG $+5
$SG168548 DB	'SSL_CTX_set_cipher_list error: %s', 00H
	ORG $+6
$SG168549 DB	'init_ssl_ctx_impl', 00H
	ORG $+6
$SG86637 DB	'unsupported', 00H
$SG161180 DB	'8080', 00H
	ORG $+7
$SG86635 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG168567 DB	'external_ssl_ctx callback returned error: %i', 00H
	ORG $+3
$SG168568 DB	'init_ssl_ctx', 00H
	ORG $+3
$SG168572 DB	'init_ssl_ctx', 00H
	ORG $+3
$SG168575 DB	'external_ssl_ctx_domain callback returned error: %i', 00H
	ORG $+4
$SG168576 DB	'init_ssl_ctx', 00H
	ORG $+3
$SG168580 DB	'init_ssl_ctx', 00H
	ORG $+3
$SG168582 DB	'Initializing SSL failed: -%s is not set', 00H
$SG168583 DB	'init_ssl_ctx', 00H
	ORG $+3
$SG86664 DB	'outofmem', 00H
	ORG $+7
$SG168588 DB	'init_ssl_ctx', 00H
	ORG $+3
$SG86696 DB	'outofmem', 00H
	ORG $+7
$SG168634 DB	'Cannot open %s: %s', 00H
	ORG $+5
$SG168635 DB	'set_gpass_option', 00H
	ORG $+7
$SG78535 DB	'[WARNING] write console failed, are you using visual stu'
	DB	'dio?', 0aH, 00H
	ORG $+2
$SG78543 DB	'[WARNING] write console failed, are you using visual stu'
	DB	'dio?', 0aH, 00H
	ORG $+2
$SG94947 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG94946 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG94948 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG168679 DB	'close_socket_gracefully', 00H
$SG94950 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' '
	DB	00H, 'p', 00H, 'r', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
$SG94951 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG168680 DB	'%s: getsockopt(SOL_SOCKET SO_ERROR) failed: %s', 00H
	ORG $+1
$SG94952 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG168681 DB	'close_socket_gracefully', 00H
$SG78569 DB	'%s, %i %s() [%i] %s', 00H
	ORG $+4
$SG94954 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H
	DB	'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'i'
	DB	00H, 'm', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+6
$SG78570 DB	'Break Handler Invoked', 00H
	ORG $+2
$SG94955 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG78571 DB	'B', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, ' ', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'o', 00H, 'k', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG94956 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG78572 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
	ORG $+4
$SG168685 DB	'close_socket_gracefully', 00H
$SG168686 DB	'%s: setsockopt(SOL_SOCKET SO_LINGER(%i,%i)) failed: %s', 00H
	ORG $+1
$SG168687 DB	'close_socket_gracefully', 00H
$SG94958 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H
	DB	'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'i'
	DB	00H, 'm', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG78574 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
	ORG $+4
$SG94959 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG78575 DB	'Choose Your Poison', 00H
	ORG $+5
$SG94960 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG78576 DB	'Would You Like To Exit (Abort), Debug (Retry) or Continu'
	DB	'e (Ignore)?', 00H
	ORG $+4
$SG94972 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG94973 DB	'Slice->Pos.Count >= Slice->Tex.Count', 00H
	ORG $+3
$SG94974 DB	'ZenImmediatePrimitiveAlloc', 00H
	ORG $+5
$SG94975 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG78591 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 'E', 00H
	DB	'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H, 'L'
	DB	00H, 'A', 00H, 'S', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'E', 00H
	DB	'N', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'L', 00H, '''', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '''', 00H, 'E', 00H, 'R', 00H
	DB	'R', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'A'
	DB	00H, 'S', 00H, 'S', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'T', 00H
	DB	'W', 00H, 'O', 00H, 'R', 00H, 'K', 00H, '''', 00H, 00H, 00H
	ORG $+6
$SG94976 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG78592 DB	'GetErrorCode', 00H
	ORG $+3
$SG94977 DB	'Slice->Pos.Count >= Slice->Col.Count', 00H
	ORG $+3
$SG78593 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG94978 DB	'ZenImmediatePrimitiveAlloc', 00H
	ORG $+5
$SG94979 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG94995 DB	'ZenImmediateModePush', 00H
	ORG $+3
$SG94994 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'm', 00H, 'e', 00H
	DB	'd', 00H, 'i', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'm'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
$SG94996 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG78617 DB	'GetErrorStringA', 00H
$SG78626 DB	'no error message, or message too large', 00H
	ORG $+1
$SG78616 DB	'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'w', 00H, 'h', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'e'
	DB	00H, 'c', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+4
$SG78618 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78623 DB	'n', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG78624 DB	'GetErrorStringA', 00H
$SG78625 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG86842 DB	'bad code lengths', 00H
	ORG $+7
$SG168790 DB	'calloc(): %s', 00H
	ORG $+3
$SG168794 DB	'SSL_CTX_new error: %s', 00H
	ORG $+2
$SG95067 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG168796 DB	'mg_connect_client_impl', 00H
	ORG $+1
$SG95068 DB	'Sampler!=0', 00H
	ORG $+5
?stbi__bmask@@3QBIB DD 00H				; stbi__bmask
	DD	01H
	DD	03H
	DD	07H
	DD	0fH
	DD	01fH
	DD	03fH
	DD	07fH
	DD	0ffH
	DD	01ffH
	DD	03ffH
	DD	07ffH
	DD	0fffH
	DD	01fffH
	DD	03fffH
	DD	07fffH
	DD	0ffffH
	ORG $+4
$SG168797 DB	'%s: getsockname() failed: %s', 00H
	ORG $+3
$SG95069 DB	'ZenImmediateSkinnedRect', 00H
$SG168798 DB	'mg_connect_client_impl', 00H
	ORG $+1
$SG95070 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95071 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG95072 DB	'Texture!=0', 00H
	ORG $+5
$SG168801 DB	'Can not create mutex', 00H
	ORG $+3
$SG95073 DB	'ZenImmediateSkinnedRect', 00H
$SG95074 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95076 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, ',', 00H, ' '
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'X', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'D', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 'X', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG95077 DB	'(Source.Min.X) <= Texture->DimenX', 00H
	ORG $+6
$SG168806 DB	'Can not use SSL client certificate', 00H
	ORG $+5
$SG95078 DB	'ZenImmediateSkinnedRect', 00H
$SG95079 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95080 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, ',', 00H, ' '
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'Y', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'D', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 'Y', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG95081 DB	'(Source.Min.Y) <= Texture->DimenY', 00H
	ORG $+6
$SG95082 DB	'ZenImmediateSkinnedRect', 00H
$SG168811 DB	'SSL_CTX_load_verify_locations error: %s', 00H
$SG95083 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG78699 DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '?', 00H, 00H, 00H
	ORG $+2
$SG95084 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG78700 DB	'ZenFlushSystemProcessOutputsToStd', 00H
	ORG $+6
$SG95085 DB	'(Source.Min.X + Source.Max.X) <= Texture->DimenX', 00H
	ORG $+7
$SG78701 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG168814 DB	'SSL connection error', 00H
	ORG $+3
$SG95086 DB	'ZenImmediateSkinnedRect', 00H
$SG95087 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95088 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG78703 DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '?', 00H, 00H, 00H
	ORG $+2
$SG78704 DB	'ZenFlushSystemProcessOutputsToStd', 00H
	ORG $+6
$SG95089 DB	'(Source.Min.Y + Source.Max.Y) <= Texture->DimenY', 00H
	ORG $+7
$SG78705 DB	'W:\cpp\void\dr/plat-win32.c', 00H
$SG161270 DB	'3600', 00H
	ORG $+7
$SG86897 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG95090 DB	'ZenImmediateSkinnedRect', 00H
$SG86898 DB	'(', 00H, '(', 00H, '(', 00H, 'j', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '(', 00H, '3', 00H, '2', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, '_', 00H, '_', 00H, 'b', 00H, 'm', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, '[', 00H, 'h', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']'
	DB	00H, ']', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '[', 00H, 'c', 00H, ']', 00H, 00H, 00H
$SG169524 DB	' (?)', 00H
	ORG $+7
?stbi__jbias@@3QBHB DD 00H				; stbi__jbias
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0fffffff9H
	DD	0fffffff1H
	DD	0ffffffe1H
	DD	0ffffffc1H
	DD	0ffffff81H
	DD	0ffffff01H
	DD	0fffffe01H
	DD	0fffffc01H
	DD	0fffff801H
	DD	0fffff001H
	DD	0ffffe001H
	DD	0ffffc001H
	DD	0ffff8001H
$SG95091 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG168851 DB	'Invalid parameters', 00H
	ORG $+5
?stbi__jpeg_dezigzag@@3QBEB DB 00H			; stbi__jpeg_dezigzag
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	ORG $+1
$SG78752 DB	'(', 00H, '.', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG78753 DB	'LoadFileData', 00H
	ORG $+3
$SG168866 DB	'Protocol %s not supported', 00H
	ORG $+6
$SG86946 DB	'bad huffman code', 00H
	ORG $+7
$SG78754 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78758 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG86951 DB	'bad huffman code', 00H
	ORG $+7
$SG78759 DB	'LoadFileData', 00H
	ORG $+3
$SG78760 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78762 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78763 DB	'LoadFileData', 00H
	ORG $+3
$SG78764 DB	'W:\cpp\void\dr/plat-win32.c', 00H
$SG169889 DB	' Lua', 00H
	ORG $+7
?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B DQ FLAT:$SG168884 ; abs_uri_protocols
	DQ	0000000000000007H
	DD	050H
	ORG $+4
	DQ	FLAT:$SG168885
	DQ	0000000000000008H
	DD	01bbH
	ORG $+4
	DQ	FLAT:$SG168886
	DQ	0000000000000005H
	DD	050H
	ORG $+4
	DQ	FLAT:$SG168887
	DQ	0000000000000006H
	DD	01bbH
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG168884 DB	'http://', 00H
$SG168885 DB	'https://', 00H
	ORG $+7
$SG86967 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG78779 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78780 DB	'WriteFileData', 00H
	ORG $+2
$SG86973 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG78781 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78782 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78783 DB	'WriteFileData', 00H
	ORG $+2
$SG78784 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG87010 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG87018 DB	'bad huffman code', 00H
	ORG $+7
$SG87031 DB	'bad huffman code', 00H
	ORG $+7
$SG168955 DB	'Internal error', 00H
	ORG $+1
$SG168958 DB	'Invalid message size', 00H
	ORG $+3
$SG87038 DB	'bad huffman code', 00H
	ORG $+7
$SG168961 DB	'Message too large', 00H
	ORG $+6
$SG168966 DB	'Malformed message', 00H
	ORG $+6
$SG168968 DB	'No data received', 00H
	ORG $+7
$SG168980 DB	'Bad request', 00H
	ORG $+4
$SG168983 DB	'Bad request: Host mismatch', 00H
	ORG $+5
$SG168987 DB	'Transfer-Encoding', 00H
	ORG $+6
$SG168988 DB	'identity', 00H
	ORG $+7
$SG168990 DB	'chunked', 00H
$SG168991 DB	'Bad request', 00H
	ORG $+4
$SG168995 DB	'Content-Length', 00H
	ORG $+1
$SG168998 DB	'Bad request', 00H
	ORG $+4
$SG169010 DB	'Bad response', 00H
	ORG $+3
$SG169014 DB	'Transfer-Encoding', 00H
	ORG $+6
$SG169015 DB	'identity', 00H
	ORG $+7
$SG169017 DB	'chunked', 00H
$SG169018 DB	'Bad request', 00H
	ORG $+4
$SG169022 DB	'Content-Length', 00H
	ORG $+1
$SG169045 DB	'Parameter error', 00H
$SG169071 DB	'Error sending request', 00H
	ORG $+2
$SG78911 DB	'w', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 's', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 's'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ' ', 00H, 's', 00H, 'h'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'g', 00H
	DB	'o', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+6
$SG78912 DB	'FileNameMerge', 00H
	ORG $+2
$SG169025 DB	'Bad request', 00H
	ORG $+4
$SG78913 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78984 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ',', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG78985 DB	'CreateCompleteFilePath', 00H
	ORG $+1
$SG78986 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG169099 DB	'ws-clnt', 00H
$SG169120 DB	'x3JJHMbDL1EzLkh9GBhXDw==', 00H
	ORG $+7
$SG169143 DB	'Unexpected error', 00H
	ORG $+7
$SG169148 DB	'GET %s HTTP/1.1', 0dH, 0aH, 'Host: %s', 0dH, 0aH, 'Upgra'
	DB	'de: websocket', 0dH, 0aH, 'Connection: Upgrade', 0dH, 0aH, 'S'
	DB	'ec-WebSocket-Key: %s', 0dH, 0aH, 'Sec-WebSocket-Version: 13', 0dH
	DB	0aH, 'Sec-WebSocket-Extensions: %s', 0dH, 0aH, 'Origin: %s', 0dH
	DB	0aH, 0dH, 0aH, 00H
	ORG $+5
$SG160960 DB	'SSL_connect', 00H
$SG169895 DB	' CGI', 00H
	ORG $+7
$SG169149 DB	'GET %s HTTP/1.1', 0dH, 0aH, 'Host: %s', 0dH, 0aH, 'Upgra'
	DB	'de: websocket', 0dH, 0aH, 'Connection: Upgrade', 0dH, 0aH, 'S'
	DB	'ec-WebSocket-Key: %s', 0dH, 0aH, 'Sec-WebSocket-Version: 13', 0dH
	DB	0aH, 'Origin: %s', 0dH, 0aH, 0dH, 0aH, 00H
	ORG $+3
$SG160958 DB	'SSL_free', 00H
	ORG $+7
$SG160959 DB	'SSL_accept', 00H
	ORG $+5
$SG169155 DB	'Error sending request', 00H
	ORG $+2
$SG169152 DB	'GET %s HTTP/1.1', 0dH, 0aH, 'Host: %s', 0dH, 0aH, 'Upgra'
	DB	'de: websocket', 0dH, 0aH, 'Connection: Upgrade', 0dH, 0aH, 'S'
	DB	'ec-WebSocket-Key: %s', 0dH, 0aH, 'Sec-WebSocket-Version: 13', 0dH
	DB	0aH, 'Sec-WebSocket-Extensions: %s', 0dH, 0aH, 0dH, 0aH, 00H
	ORG $+1
$SG160965 DB	'SSL_new', 00H
$SG169153 DB	'GET %s HTTP/1.1', 0dH, 0aH, 'Host: %s', 0dH, 0aH, 'Upgra'
	DB	'de: websocket', 0dH, 0aH, 'Connection: Upgrade', 0dH, 0aH, 'S'
	DB	'ec-WebSocket-Key: %s', 0dH, 0aH, 'Sec-WebSocket-Version: 13', 0dH
	DB	0aH, 0dH, 0aH, 00H
	ORG $+7
$SG160961 DB	'SSL_read', 00H
	ORG $+7
$SG160962 DB	'SSL_write', 00H
	ORG $+6
$SG160963 DB	'SSL_get_error', 00H
	ORG $+2
$SG160964 DB	'SSL_set_fd', 00H
	ORG $+5
$SG160966 DB	'SSL_CTX_new', 00H
	ORG $+4
$SG160967 DB	'SSLv23_server_method', 00H
	ORG $+3
$SG169160 DB	'Unexpected server reply', 00H
$SG160968 DB	'SSL_library_init', 00H
	ORG $+7
$SG160969 DB	'SSL_CTX_use_PrivateKey_file', 00H
	ORG $+4
$SG160970 DB	'SSL_CTX_use_certificate_file', 00H
	ORG $+3
$SG160971 DB	'SSL_CTX_set_default_passwd_cb', 00H
	ORG $+2
$SG79051 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'P', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG160972 DB	'SSL_CTX_free', 00H
	ORG $+3
$SG79052 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG160973 DB	'SSL_load_error_strings', 00H
	ORG $+1
$SG79053 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG160974 DB	'SSL_CTX_use_certificate_chain_file', 00H
	ORG $+5
$SG160975 DB	'SSLv23_client_method', 00H
	ORG $+3
$SG160976 DB	'SSL_pending', 00H
	ORG $+4
$SG79056 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG160977 DB	'SSL_CTX_set_verify', 00H
	ORG $+5
$SG79057 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG160978 DB	'SSL_shutdown', 00H
	ORG $+3
$SG79058 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG160979 DB	'SSL_CTX_load_verify_locations', 00H
	ORG $+2
$SG160980 DB	'SSL_CTX_set_default_verify_paths', 00H
	ORG $+7
$SG79060 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG160981 DB	'SSL_CTX_set_verify_depth', 00H
	ORG $+7
$SG79061 DB	'Old->File.IsFile == New->File.IsFile', 00H
	ORG $+3
$SG160982 DB	'SSL_get_peer_certificate', 00H
	ORG $+7
$SG79062 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG160983 DB	'SSL_get_version', 00H
$SG79063 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG160984 DB	'SSL_get_current_cipher', 00H
	ORG $+1
$SG160985 DB	'SSL_CIPHER_get_name', 00H
	ORG $+4
$SG79065 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'M', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG160986 DB	'SSL_CTX_check_private_key', 00H
	ORG $+6
$SG79066 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG160987 DB	'SSL_CTX_set_session_id_context', 00H
	ORG $+1
$SG79067 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG160988 DB	'SSL_CTX_ctrl', 00H
	ORG $+3
$SG160989 DB	'SSL_CTX_set_cipher_list', 00H
$SG79069 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'd', 00H, 'i'
	DB	00H, 't', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG160990 DB	'SSL_CTX_set_info_callback', 00H
	ORG $+6
$SG79070 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG160991 DB	'SSL_get_ex_data', 00H
$SG79071 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG160992 DB	'SSL_set_ex_data', 00H
$SG160993 DB	'SSL_CTX_callback_ctrl', 00H
	ORG $+2
$SG79073 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG160994 DB	'SSL_get_servername', 00H
	ORG $+5
$SG79074 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG160995 DB	'SSL_set_SSL_CTX', 00H
$SG79075 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG160996 DB	'SSL_ctrl', 00H
	ORG $+7
$SG160997 DB	'SSL_CTX_set_alpn_protos', 00H
$SG160998 DB	'SSL_CTX_set_alpn_select_cb', 00H
	ORG $+5
$SG160999 DB	'SSL_CTX_set_next_protos_advertised_cb', 00H
	ORG $+2
$SG161000 DB	'SSL_CTX_set_timeout', 00H
	ORG $+4
$SG161002 DB	'CRYPTO_num_locks', 00H
	ORG $+7
$SG161003 DB	'CRYPTO_set_locking_callback', 00H
	ORG $+4
$SG161004 DB	'CRYPTO_set_id_callback', 00H
	ORG $+1
$SG161005 DB	'ERR_get_error', 00H
	ORG $+2
$SG161006 DB	'ERR_error_string', 00H
	ORG $+7
$SG161007 DB	'ERR_remove_state', 00H
	ORG $+7
$SG161008 DB	'ERR_free_strings', 00H
	ORG $+7
$SG161009 DB	'ENGINE_cleanup', 00H
	ORG $+1
$SG161010 DB	'CONF_modules_unload', 00H
	ORG $+4
$SG161011 DB	'CRYPTO_cleanup_all_ex_data', 00H
	ORG $+5
$SG161012 DB	'EVP_cleanup', 00H
	ORG $+4
$SG161013 DB	'X509_free', 00H
	ORG $+6
$SG161014 DB	'X509_get_subject_name', 00H
	ORG $+2
$SG161015 DB	'X509_get_issuer_name', 00H
	ORG $+3
$SG161016 DB	'X509_NAME_oneline', 00H
	ORG $+6
$SG161017 DB	'X509_get_serialNumber', 00H
	ORG $+2
$SG161018 DB	'i2c_ASN1_INTEGER', 00H
	ORG $+7
$SG161019 DB	'EVP_get_digestbyname', 00H
	ORG $+3
$SG161020 DB	'EVP_Digest', 00H
	ORG $+5
$SG161021 DB	'i2d_X509', 00H
	ORG $+7
$SG161022 DB	'BN_bn2hex', 00H
	ORG $+6
$SG161023 DB	'ASN1_INTEGER_to_BN', 00H
	ORG $+5
$SG161024 DB	'BN_free', 00H
$SG161025 DB	'CRYPTO_free', 00H
	ORG $+4
$SG161026 DB	'ERR_clear_error', 00H
?month_names@@3QAY03$$CBDA DB 'Jan', 00H		; month_names
	DB	'Feb', 00H
	DB	'Mar', 00H
	DB	'Apr', 00H
	DB	'May', 00H
	DB	'Jun', 00H
	DB	'Jul', 00H
	DB	'Aug', 00H
	DB	'Sep', 00H
	DB	'Oct', 00H
	DB	'Nov', 00H
	DB	'Dec', 00H
$SG169267 DB	'Bad HTTP version: [%s]', 00H
	ORG $+1
$SG169277 DB	'Invalid URI', 00H
	ORG $+4
$SG79226 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79227 DB	'Queue->ConsumerTail <= Queue->Consumer', 00H
	ORG $+1
$SG79228 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG79229 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79230 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79231 DB	'Queue->ProducerTail <= Queue->Producer', 00H
	ORG $+1
$SG79232 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG79233 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79237 DB	'N', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'E', 00H, 'n', 00H
	DB	'o', 00H, 'u', 00H, 'g', 00H, 'h', 00H, ' ', 00H, 'T', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, 's', 00H, ',', 00H, ' ', 00H, 'A', 00H
	DB	's', 00H, 'k', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'F', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, 'T', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'A', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'O', 00H, 'n', 00H
	DB	'l', 00H, 'y', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']'
	DB	00H, 00H, 00H
	ORG $+6
$SG79238 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG79239 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG169365 DB	'Internal error: Invalid worker index %i', 00H
$SG169366 DB	'worker_thread_run', 00H
	ORG $+6
$SG169368 DB	'Out of memory: Cannot allocate buffer for worker %i', 00H
	ORG $+4
$SG169369 DB	'worker_thread_run', 00H
	ORG $+6
$SG79258 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
?config_options@@3QBUmg_option@@B DQ FLAT:$SG161179	; config_options
	DD	07H
	ORG $+4
	DQ	FLAT:$SG161180
	DQ	FLAT:$SG161181
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161182
	DQ	FLAT:$SG161183
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161184
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161185
	DQ	FLAT:$SG161186
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161187
	DQ	FLAT:$SG161188
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161189
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161190
	DQ	FLAT:$SG161191
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161192
	DQ	FLAT:$SG161193
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161194
	DQ	FLAT:$SG161195
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161196
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161197
	DQ	FLAT:$SG161198
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161199
	DQ	FLAT:$SG161200
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161201
	DQ	FLAT:$SG161202
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161203
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161204
	DQ	FLAT:$SG161205
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161206
	DQ	FLAT:$SG161207
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161208
	DQ	FLAT:$SG161209
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161210
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161211
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161212
	DD	06H
	ORG $+4
	DQ	FLAT:$SG161213
	DQ	FLAT:$SG161214
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161215
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161216
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161217
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161218
	DQ	FLAT:$SG161219
	DD	06H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161220
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161221
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161222
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161223
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161224
	DQ	FLAT:$SG161225
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161226
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161227
	DD	02H
	ORG $+4
	DQ	FLAT:$SG161228
	DQ	FLAT:$SG161229
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161230
	DQ	FLAT:$SG161231
	DD	06H
	ORG $+4
	DQ	FLAT:$SG161232
	DQ	FLAT:$SG161233
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161234
	DQ	FLAT:$SG161235
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161236
	DQ	FLAT:$SG161237
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161238
	DD	07H
	ORG $+4
	DQ	FLAT:$SG161239
	DQ	FLAT:$SG161240
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161241
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161242
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161243
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161244
	DD	07H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161245
	DD	06H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161246
	DD	09H
	ORG $+4
	DQ	FLAT:$SG161247
	DQ	FLAT:$SG161248
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161249
	DQ	FLAT:$SG161250
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161251
	DD	03H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161252
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161253
	DQ	FLAT:$SG161254
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161255
	DQ	FLAT:$SG161256
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161257
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161258
	DQ	FLAT:$SG161259
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161260
	DQ	FLAT:$SG161261
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161262
	DD	02H
	ORG $+4
	DQ	FLAT:$SG161263
	DQ	FLAT:$SG161264
	DD	02H
	ORG $+4
	DQ	FLAT:$SG161265
	DQ	FLAT:$SG161266
	DD	02H
	ORG $+4
	DQ	FLAT:$SG161267
	DQ	FLAT:$SG161268
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161269
	DD	01H
	ORG $+4
	DQ	FLAT:$SG161270
	DQ	FLAT:$SG161271
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161272
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161273
	DD	08H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161274
	DD	05H
	ORG $+4
	DQ	FLAT:$SG161275
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
$SG169371 DB	'Cannot create mutex', 00H
	ORG $+4
$SG161179 DB	'listening_ports', 00H
$SG79259 DB	'Queue->ConsumerTail <= Queue->Consumer', 00H
	ORG $+1
$SG79260 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG169373 DB	'worker_thread_run', 00H
	ORG $+6
$SG161181 DB	'num_threads', 00H
	ORG $+4
$SG79261 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79262 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG161183 DB	'run_as_user', 00H
	ORG $+4
$SG79263 DB	'Queue->ProducerTail <= Queue->Producer', 00H
	ORG $+1
$SG161184 DB	'tcp_nodelay', 00H
	ORG $+4
$SG79264 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG79265 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG161186 DB	'max_request_size', 00H
	ORG $+7
$SG161188 DB	'linger_timeout_ms', 00H
	ORG $+6
$SG161189 DB	'connection_queue', 00H
	ORG $+7
$SG79269 DB	'T', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'M', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, ' ', 00H, 'T', 00H, 'a', 00H, 's', 00H, 'k'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG79270 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG161191 DB	'listen_backlog', 00H
	ORG $+1
$SG79271 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG161193 DB	'case_sensitive', 00H
	ORG $+1
$SG161195 DB	'throttle', 00H
	ORG $+7
$SG161196 DB	'enable_keep_alive', 00H
	ORG $+6
$SG161198 DB	'request_timeout_ms', 00H
	ORG $+5
$SG161200 DB	'keep_alive_timeout_ms', 00H
	ORG $+2
$SG161202 DB	'websocket_timeout_ms', 00H
	ORG $+3
$SG161203 DB	'enable_websocket_ping_pong', 00H
	ORG $+5
$SG161205 DB	'decode_url', 00H
	ORG $+5
$SG161207 DB	'decode_query_string', 00H
	ORG $+4
$SG161209 DB	'document_root', 00H
	ORG $+2
$SG161210 DB	'access_log_file', 00H
$SG161211 DB	'error_log_file', 00H
	ORG $+1
$SG161212 DB	'cgi_pattern', 00H
	ORG $+4
$SG161213 DB	'**.cgi$|**.pl$|**.php$', 00H
	ORG $+1
$SG169406 DB	'accept_new_connection', 00H
	ORG $+2
$SG161214 DB	'cgi_environment', 00H
$SG169407 DB	'%s: %s is not allowed to connect', 00H
	ORG $+7
$SG161215 DB	'cgi_interpreter', 00H
$SG79295 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG169408 DB	'accept_new_connection', 00H
	ORG $+2
$SG161216 DB	'cgi_interpreter_args', 00H
	ORG $+3
$SG79296 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG161217 DB	'cgi_buffering', 00H
	ORG $+2
$SG79297 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG169410 DB	'accept_new_connection', 00H
	ORG $+2
$SG79298 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'a', 00H
	DB	's', 00H, 'k', 00H, '.', 00H, 'W', 00H, 'o', 00H, 'r', 00H, 'k'
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG169411 DB	'%s: getsockname() failed: %s', 00H
	ORG $+3
$SG161219 DB	'cgi2_pattern', 00H
	ORG $+3
$SG79299 DB	'FileTask.Work != NULL', 00H
	ORG $+2
$SG169412 DB	'accept_new_connection', 00H
	ORG $+2
$SG161220 DB	'cgi2_environment', 00H
	ORG $+7
$SG79300 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG161221 DB	'cgi2_interpreter', 00H
	ORG $+7
$SG79301 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG161222 DB	'cgi2_interpreter_args', 00H
	ORG $+2
$SG161223 DB	'cgi2_buffering', 00H
	ORG $+1
$SG169416 DB	'accept_new_connection', 00H
	ORG $+2
$SG169417 DB	'%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s', 00H
	ORG $+5
$SG161225 DB	'put_delete_auth_file', 00H
	ORG $+3
$SG79305 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'L', 00H, 'e', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG169418 DB	'accept_new_connection', 00H
	ORG $+2
$SG161226 DB	'protect_uri', 00H
	ORG $+4
$SG79306 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG161227 DB	'authentication_domain', 00H
	ORG $+2
$SG79307 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG161228 DB	'mydomain.com', 00H
	ORG $+3
$SG161229 DB	'enable_auth_domain_check', 00H
	ORG $+7
$SG169422 DB	'accept_new_connection', 00H
	ORG $+2
$SG169423 DB	'%s: setsockopt(IPPROTO_TCP TCP_NODELAY) failed: %s', 00H
	ORG $+5
$SG161231 DB	'ssi_pattern', 00H
	ORG $+4
$SG169424 DB	'accept_new_connection', 00H
	ORG $+2
$SG161232 DB	'**.shtml$|**.shtm$', 00H
	ORG $+5
$SG161233 DB	'enable_directory_listing', 00H
	ORG $+7
$SG161235 DB	'enable_webdav', 00H
	ORG $+2
$SG161237 DB	'global_auth_file', 00H
	ORG $+7
$SG161238 DB	'index_files', 00H
	ORG $+4
$SG161239 DB	'index.xhtml,index.html,index.htm,index.cgi,index.shtml,i'
	DB	'ndex.php', 00H
	ORG $+7
$SG161240 DB	'access_control_list', 00H
	ORG $+4
$SG161241 DB	'extra_mime_types', 00H
	ORG $+7
$SG161242 DB	'ssl_certificate', 00H
$SG161243 DB	'ssl_certificate_chain', 00H
	ORG $+2
$SG161244 DB	'url_rewrite_patterns', 00H
	ORG $+3
$SG161245 DB	'hide_files_patterns', 00H
	ORG $+4
$SG161246 DB	'ssl_verify_peer', 00H
$SG161248 DB	'ssl_cache_timeout', 00H
	ORG $+6
$SG161250 DB	'ssl_ca_path', 00H
	ORG $+4
$SG161251 DB	'ssl_ca_file', 00H
	ORG $+4
$SG161252 DB	'ssl_verify_depth', 00H
	ORG $+7
$SG161254 DB	'ssl_default_verify_paths', 00H
	ORG $+7
$SG161256 DB	'ssl_cipher_list', 00H
$SG161257 DB	'ssl_protocol_version', 00H
	ORG $+3
$SG161259 DB	'ssl_short_trust', 00H
$SG161261 DB	'websocket_root', 00H
	ORG $+1
$SG161262 DB	'access_control_allow_origin', 00H
	ORG $+4
$SG161264 DB	'access_control_allow_methods', 00H
	ORG $+3
$SG161266 DB	'access_control_allow_headers', 00H
	ORG $+3
$SG161268 DB	'error_pages', 00H
	ORG $+4
$SG161269 DB	'static_file_max_age', 00H
	ORG $+4
$SG161271 DB	'static_file_cache_control', 00H
	ORG $+6
$SG161272 DB	'strict_transport_security_max_age', 00H
	ORG $+6
$SG161273 DB	'additional_header', 00H
	ORG $+6
$SG161274 DB	'allow_index_script_resource', 00H
	ORG $+4
$SG79357 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'Q', 00H, 'u', 00H
	DB	'e', 00H, 'u', 00H, 'e', 00H, '.', 00H, 'C', 00H, 'o', 00H, 'r'
	DB	00H, 'e', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H, '.', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, 00H, 00H
$SG79358 DB	'FileQueueBegin', 00H
	ORG $+1
$SG79359 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG95755 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG95756 DB	'PixelPosition.X >= 0', 00H
	ORG $+3
$SG95757 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG95758 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95759 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG95760 DB	'PixelPosition.X < Texture->DimenX', 00H
	ORG $+6
$SG95761 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG95762 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95763 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG95764 DB	'PixelPosition.Y >= 0', 00H
	ORG $+3
$SG95765 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG95766 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG95767 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG95768 DB	'PixelPosition.Y < Texture->DimenY', 00H
	ORG $+6
$SG95769 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG95770 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG79386 DB	'ARCHIVE', 00H
$SG79387 DB	'COMPRESSED', 00H
	ORG $+5
$SG79389 DB	'DIRECTORY', 00H
	ORG $+6
$SG79390 DB	'ENCRYPTED', 00H
	ORG $+6
$SG79392 DB	'INTEGRITY_STREAM', 00H
	ORG $+7
$SG79394 DB	'NOT_CONTENT_INDEXED', 00H
	ORG $+4
$SG79395 DB	'NO_SCRUB_DATA', 00H
	ORG $+2
$SG79396 DB	'OFFLINE', 00H
$SG79397 DB	'READONLY', 00H
	ORG $+7
$SG79398 DB	'RECALL_ON_DATA_ACCESS', 00H
	ORG $+2
$SG79399 DB	'RECALL_ON_OPEN', 00H
	ORG $+1
$SG79400 DB	'REPARSE_POINT', 00H
	ORG $+2
$SG79401 DB	'SPARSE_FILE', 00H
	ORG $+4
$SG79403 DB	'TEMPORARY', 00H
	ORG $+6
$SG79404 DB	'VIRTUAL', 00H
$SG79406 DB	'UNPINNED', 00H
	ORG $+7
$SG169522 DB	' (WoW64)', 00H
	ORG $+7
$SG169525 DB	'Windows %u.%u%s', 00H
$SG79420 DB	'INVALID_FILE_ATTRIBUTES', 00H
$SG79431 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, ')', 00H, 00H, 00H
$SG79433 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'R', 00H, 'E', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79435 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79437 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '3', 00H, ')', 00H, 00H, 00H
$SG79439 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '5', 00H, ')', 00H, 00H, 00H
$SG79441 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'T', 00H
	DB	'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG79443 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'C', 00H, 'U', 00H, 'S', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '7', 00H, ')', 00H
	DB	00H, 00H
$SG79445 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'I', 00H, 'L', 00H
	DB	'L', 00H, 'F', 00H, 'O', 00H, 'C', 00H, 'U', 00H, 'S', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79447 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'A', 00H
	DB	'B', 00H, 'L', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79449 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'R', 00H, 'E', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'W', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, 'B', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79451 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79453 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79455 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 'L', 00H, 'E', 00H, 'N'
	DB	00H, 'G', 00H, 'T', 00H, 'H', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '0', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79457 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79459 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H
	DB	'S', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '1', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79461 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'S', 00H, 'E'
	DB	00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79463 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'O', 00H, 'P', 00H, 'E', 00H, 'N', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79465 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'D', 00H
	DB	'S', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79467 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'I', 00H
	DB	'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
$SG79469 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'R', 00H, 'A', 00H
	DB	'S', 00H, 'E', 00H, 'B', 00H, 'K', 00H, 'G', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79471 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '0', 00H, '1', 00H, '5', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79473 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'H', 00H, 'O', 00H
	DB	'W', 00H, 'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79475 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'I', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG79477 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'M', 00H, 'O', 00H, 'D', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '1', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79479 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'T', 00H
	DB	'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, 'A', 00H, 'P'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'1', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79481 DB	'W', 00H, 'M', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H
	DB	'T', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79483 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79485 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 'L', 00H, 'M', 00H, 'O', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79487 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'C', 00H, 'U', 00H, 'R', 00H, 'S', 00H, 'O', 00H, 'R', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79489 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79491 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'I', 00H
	DB	'L', 00H, 'D', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79493 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'U', 00H, 'E', 00H, 'S', 00H, 'Y', 00H, 'N', 00H, 'C', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79495 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'M', 00H, 'I', 00H, 'N', 00H, 'M', 00H, 'A', 00H, 'X', 00H, 'I'
	DB	00H, 'N', 00H, 'F', 00H, 'O', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79497 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '6', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79499 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'C', 00H, 'O', 00H
	DB	'N', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'S', 00H, 'E', 00H, 'B'
	DB	00H, 'K', 00H, 'G', 00H, 'N', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '0', 00H, '2', 00H, '7', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG169612 DB	'Library uninitialized', 00H
	ORG $+2
$SG79501 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'X', 00H
	DB	'T', 00H, 'D', 00H, 'L', 00H, 'G', 00H, 'C', 00H, 'T', 00H, 'L'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79503 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'P', 00H, 'O', 00H
	DB	'O', 00H, 'L', 00H, 'E', 00H, 'R', 00H, 'S', 00H, 'T', 00H, 'A'
	DB	00H, 'T', 00H, 'U', 00H, 'S', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169616 DB	'Out of memory', 00H
	ORG $+2
$SG79505 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'W', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, 'B', 00H, ')', 00H
	DB	00H, 00H
$SG169619 DB	'Cannot initialize thread synchronization objects', 00H
	ORG $+7
$SG79507 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'A', 00H
	DB	'S', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'2', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169621 DB	'mg_start2', 00H
	ORG $+6
$SG79509 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79511 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'K', 00H, 'E', 00H
	DB	'Y', 00H, 'T', 00H, 'O', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79513 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'R', 00H, 'T', 00H, 'O', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169627 DB	'Invalid option: %s', 00H
	ORG $+5
$SG79515 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '3', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169628 DB	'mg_start2', 00H
	ORG $+6
$SG79517 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '3', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169630 DB	'Invalid configuration option: %s', 00H
	ORG $+7
$SG79519 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'O', 00H, 'T', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG169632 DB	'%s: option value cannot be NULL', 00H
$SG169633 DB	'mg_start2', 00H
	ORG $+6
$SG79521 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'O', 00H, 'T', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG169635 DB	'Invalid configuration option value: %s', 00H
	ORG $+1
$SG79523 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'G', 00H, 'I'
	DB	00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '3', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169637 DB	'warning: %s: duplicate option', 00H
	ORG $+2
$SG79525 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169638 DB	'mg_start2', 00H
	ORG $+6
$SG79527 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'O', 00H, 'B', 00H, 'J', 00H, 'E', 00H, 'C', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, 'D', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG169641 DB	'%s too small', 00H
	ORG $+3
$SG79529 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'P', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169642 DB	'mg_start2', 00H
	ORG $+6
$SG79531 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'M', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169644 DB	'Invalid configuration option value: %s', 00H
	ORG $+1
$SG79533 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4'
	DB	00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169646 DB	'%s too small', 00H
	ORG $+3
$SG169647 DB	'mg_start2', 00H
	ORG $+6
$SG79535 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H, '7'
	DB	00H, ')', 00H, 00H, 00H
$SG169649 DB	'Invalid configuration option value: %s', 00H
	ORG $+1
$SG79537 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H
	DB	'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '4', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169651 DB	'Out of memory: Cannot allocate %s', 00H
	ORG $+6
$SG79539 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'P', 00H
	DB	'Y', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'A', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H, 'A', 00H, ')', 00H
	DB	00H, 00H
$SG169652 DB	'mg_start2', 00H
	ORG $+6
$SG79541 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 'L', 00H, 'J', 00H, 'O', 00H, 'U', 00H, 'R'
	DB	00H, 'N', 00H, 'A', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '4', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169654 DB	'Out of memory: Cannot allocate %s', 00H
	ORG $+6
$SG79543 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'I', 00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '4', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG169960 DB	'null', 00H
	ORG $+7
$SG79545 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, 'L', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'R', 00H
	DB	'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG169659 DB	'Invalid number of worker threads', 00H
	ORG $+7
$SG79547 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, 'L', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG169661 DB	'mg_start2', 00H
	ORG $+6
$SG79549 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'C', 00H, 'A', 00H
	DB	'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '5', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169662 DB	'Too many worker threads', 00H
$SG161471 DB	'civetweb-%s', 00H
	ORG $+4
$SG79551 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'E', 00H, 'L', 00H
	DB	'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5'
	DB	00H, '3', 00H, ')', 00H, 00H, 00H
$SG169664 DB	'mg_start2', 00H
	ORG $+6
$SG79553 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'S', 00H, 'E', 00H
	DB	'R', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'5', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169666 DB	'Invalid configuration option value: %s', 00H
	ORG $+1
$SG79555 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'I', 00H, 'F', 00H, 'Y', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '5', 00H, '5', 00H, ')', 00H, 00H, 00H
$SG169668 DB	'Invalid global password file', 00H
	ORG $+3
$SG79557 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N'
	DB	00H, 'U', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'7', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169670 DB	'mg_start2', 00H
	ORG $+6
$SG79559 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'Y', 00H
	DB	'L', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '7', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79561 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'Y', 00H
	DB	'L', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '7', 00H, 'D', 00H, ')', 00H, 00H, 00H
$SG169674 DB	'Error initializing SSL context', 00H
	ORG $+1
$SG79563 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'S', 00H
	DB	'P', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '7', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169676 DB	'mg_start2', 00H
	ORG $+6
$SG79565 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '7', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79567 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169680 DB	'Failed to setup server ports', 00H
	ORG $+3
$SG79569 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'C', 00H
	DB	'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '1', 00H, ')', 00H
	DB	00H, 00H
$SG169682 DB	'mg_start2', 00H
	ORG $+6
$SG79571 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'D', 00H
	DB	'E', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79573 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'C', 00H
	DB	'A', 00H, 'L', 00H, 'C', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169686 DB	'Failed to setup access control list', 00H
	ORG $+4
$SG79575 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'H', 00H
	DB	'I', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '4', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG169688 DB	'mg_start2', 00H
	ORG $+6
$SG79577 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'A', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79579 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'A', 00H
	DB	'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169692 DB	'Not enough memory for worker thread ID array', 00H
	ORG $+3
$SG79581 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'D', 00H, 'L', 00H, 'G', 00H, 'C', 00H, 'O', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'7', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169694 DB	'mg_start2', 00H
	ORG $+6
$SG79583 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'N', 00H
	DB	'C', 00H, 'P', 00H, 'A', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79585 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169698 DB	'Not enough memory for worker thread connection array', 00H
	ORG $+3
$SG79587 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169700 DB	'mg_start2', 00H
	ORG $+6
$SG79589 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79591 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '3', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79593 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169707 DB	'Cannot start worker thread %i: error %ld', 00H
	ORG $+7
$SG79595 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169708 DB	'mg_start2', 00H
	ORG $+6
$SG169709 DB	'Cannot create threads: error %ld', 00H
	ORG $+7
$SG79597 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '6', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG169710 DB	'mg_start2', 00H
	ORG $+6
$SG79599 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169712 DB	'Cannot create first worker thread: error %ld', 00H
	ORG $+3
$SG79601 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79603 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '9', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79605 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79607 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79609 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79611 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I'
	DB	00H, 'C', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, 'F', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79613 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, 'F', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79615 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'N', 00H, '_', 00H, 'O', 00H, 'R'
	DB	00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'F', 00H, 'I', 00H
	DB	'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '1', 00H, '0', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79617 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79619 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '0'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
$SG153349 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG79621 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'A', 00H
	DB	'D', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG153350 DB	'Archive->InfoSize == sizeof(* External)', 00H
$SG153351 DB	'ZenAccessionTexture', 00H
	ORG $+4
$SG79623 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'N'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H
	DB	'4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG153352 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG79625 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H, '5', 00H, ')', 00H
	DB	00H, 00H
$SG79627 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG153358 DB	'ZenAccessionTexture', 00H
	ORG $+4
$SG153357 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	's', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG79629 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'D', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'0', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG153359 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG79631 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '_', 00H, 'O', 00H, 'R'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79633 DB	'U', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'O', 00H, 'D', 00H
	DB	'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H
	DB	'F', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79635 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169752 DB	'Invalid parameters', 00H
	ORG $+5
$SG79637 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'R', 00H, 'T', 00H, 'C'
	DB	00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H
	DB	'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
$SG79639 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'C', 00H, 'O', 00H, 'M'
	DB	00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H, 'T', 00H, 'I', 00H
	DB	'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79641 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '_', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '0', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG153370 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG153371 DB	'Archive->InfoSize == sizeof(* External)', 00H
$SG79643 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'D', 00H, 'I', 00H, 'A', 00H, 'L', 00H, 'O', 00H, 'G'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169756 DB	'Server already stopped', 00H
	ORG $+1
$SG153372 DB	'ZenAccessionGlyphic', 00H
	ORG $+4
$SG153373 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG79645 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'M', 00H, 'A', 00H, 'N', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79647 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169760 DB	'Out or memory', 00H
	ORG $+2
$SG79649 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '1', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG153378 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'g', 00H
	DB	'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 'i', 00H, 'c', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	's', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG153379 DB	'ZenAccessionGlyphic', 00H
	ORG $+4
$SG79651 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169764 DB	'Invalid option: %s', 00H
	ORG $+5
$SG153380 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG169765 DB	'mg_start_domain2', 00H
	ORG $+7
$SG79653 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169767 DB	'Invalid option: %s', 00H
	ORG $+5
$SG79655 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG169769 DB	'%s: option value cannot be NULL', 00H
$SG79657 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'P', 00H, 'O'
	DB	00H, 'P', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '1', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169770 DB	'mg_start_domain2', 00H
	ORG $+7
$SG79659 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169772 DB	'Invalid option value: %s', 00H
	ORG $+7
$SG79661 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'O', 00H, 'T'
	DB	00H, 'I', 00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169774 DB	'warning: %s: duplicate option', 00H
	ORG $+2
$SG169775 DB	'mg_start_domain2', 00H
	ORG $+7
$SG153391 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i', 00H, 00H
	DB	00H
	ORG $+4
$SG79663 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG153392 DB	'Archive->InfoSize == sizeof(* External)', 00H
$SG169777 DB	'authentication domain required', 00H
	ORG $+1
$SG153393 DB	'ZenAccessionWindow', 00H
	ORG $+5
$SG79665 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '0', 00H, ')', 00H
	DB	00H, 00H
$SG153394 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG169779 DB	'mg_start_domain2', 00H
	ORG $+7
$SG79667 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'I', 00H, 'D', 00H, 'L', 00H, 'E', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '1', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG169781 DB	'Mandatory option %s missing', 00H
	ORG $+4
$SG79669 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'R', 00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O'
	DB	00H, 'N', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79671 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'G', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG153399 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 's', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG153400 DB	'ZenAccessionWindow', 00H
	ORG $+5
$SG169785 DB	'Initializing SSL context failed', 00H
$SG153401 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG79673 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'G', 00H, 'E', 00H, 'T', 00H, 'O', 00H, 'B', 00H, 'J'
	DB	00H, 'E', 00H, 'C', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79675 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'I', 00H
	DB	'N', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H, 'P', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '5', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG169788 DB	'domain %s already in use', 00H
	ORG $+7
$SG169789 DB	'mg_start_domain2', 00H
	ORG $+7
$SG79677 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N'
	DB	00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'2', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169791 DB	'Domain %s specified by %s is already in use', 00H
	ORG $+4
$SG79679 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79681 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'P', 00H, 'D', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79683 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T', 00H, 'A'
	DB	00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'1', 00H, '2', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG79685 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'S'
	DB	00H, 'G', 00H, 'B', 00H, 'O', 00H, 'X', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '1', 00H, '3', 00H, '2', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79687 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'E', 00H, 'D'
	DB	00H, 'I', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, ')', 00H, 00H, 00H
$SG161608 DB	'truncating vsnprintf buffer: [%.*s]', 00H
	ORG $+4
$SG161609 DB	'mg_vsnprintf', 00H
	ORG $+3
$SG79689 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'L', 00H, 'I'
	DB	00H, 'S', 00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '1', 00H, '3', 00H, '4', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79691 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'B', 00H, 'T'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79693 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'D', 00H, 'L'
	DB	00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79695 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 'C'
	DB	00H, 'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'B', 00H, 'A', 00H
	DB	'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '3'
	DB	00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79697 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'C', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '1', 00H, '3', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79699 DB	'M', 00H, 'N', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, 'E', 00H, '1', 00H, ')', 00H
	DB	00H, 00H
$SG79707 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79701 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E', 00H, '_'
	DB	00H, 'O', 00H, 'R', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'F', 00H, 'I', 00H, 'R', 00H, 'S', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79703 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79705 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79709 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79711 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '5', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79713 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79715 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79717 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79719 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79721 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E', 00H, 'L'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	'A', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79723 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79725 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, 'C', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79727 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79729 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'H', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E'
	DB	00H, 'L', 00H, '_', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG79731 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, 'N', 00H, 'T', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I'
	DB	00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG79733 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'O', 00H, 'O', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '1', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79735 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'O'
	DB	00H, 'O', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG79737 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'X', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '1', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG79739 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '1', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79741 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'P', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '1', 00H, '5', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79743 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '1', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79745 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H
	DB	'E', 00H, 'R', 00H, 'B', 00H, 'R', 00H, 'O', 00H, 'A', 00H, 'D'
	DB	00H, 'C', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '1', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79747 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'I', 00H, 'C', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG79749 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79751 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'D', 00H, 'E', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79753 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79755 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'R', 00H, 'E', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'R', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79757 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'N', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '2', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79759 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'M', 00H, 'A', 00H, 'X', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'Z'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79761 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'T', 00H, 'I', 00H, 'L', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '2', 00H, '2', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79763 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'C', 00H, 'A', 00H, 'S', 00H, 'C', 00H, 'A', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'7', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79765 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'A', 00H, 'R', 00H, 'R'
	DB	00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '2', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79767 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'G', 00H, 'E', 00H, 'T', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '2', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG169880 DB	'%s"version" : "%s"', 00H
	ORG $+5
$SG169881 DB	',%s"os" : "Windows %u.%u"', 00H
	ORG $+6
$SG79769 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'S', 00H, 'E', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '3', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG169882 DB	',%s"cpu" : "type %u, cores %u, mask %x"', 00H
$SG79771 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'M'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '3', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79773 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'I', 00H
	DB	'T', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'M', 00H, 'O'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG169887 DB	' JavaScript', 00H
	ORG $+4
$SG79775 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'O', 00H
	DB	'P', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H, 'S', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '3', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79777 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'R', 00H, 'E', 00H, 'F', 00H, 'R', 00H, 'E', 00H, 'S', 00H, 'H'
	DB	00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '3', 00H, '4', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG169891 DB	' WebSockets', 00H
	ORG $+4
$SG79779 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '2'
	DB	00H, '3', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79781 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'I', 00H, 'N', 00H, 'R', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '2', 00H, '3', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79783 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'O', 00H, 'U', 00H, 'T', 00H
	DB	'O', 00H, 'F', 00H, 'R', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '2', 00H, '3', 00H, 'A', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG161704 DB	'%a, %d %b %Y %H:%M:%S GMT', 00H
	ORG $+6
$SG161705 DB	'Thu, 01 Jan 1970 00:00:00 GMT', 00H
	ORG $+2
$SG79785 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'U', 00H
	DB	'C', 00H, 'H', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2'
	DB	00H, '4', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79787 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U'
	DB	00H, 'P', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79789 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169901 DB	',%s"features" : %lu,%s"feature_list" : "Server:%s%s%s%s%'
	DB	's%s%s%s%s"', 00H
	ORG $+5
$SG169902 DB	'Jan 21 2023', 00H
	ORG $+4
$SG169903 DB	',%s"build" : "%s"', 00H
	ORG $+6
$SG79791 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'4', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169904 DB	',%s"compiler" : "MSC: %u (%u)"', 00H
	ORG $+1
$SG169905 DB	',%s"data_model" : "int:%u/%u/%u/%u, float:%u/%u/%u, char'
	DB	':%u/%u, ptr:%u, size:%u, time:%u"', 00H
	ORG $+6
$SG79793 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U', 00H, 'P', 00H, 'D'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79795 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'4', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79797 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, '7', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79799 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, 'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG79801 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'L', 00H, 'E', 00H, 'A'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG79803 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'T'
	DB	00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'B', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79805 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'C', 00H, 'A', 00H, 'P'
	DB	00H, 'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'C', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG79807 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'U', 00H
	DB	'C', 00H, 'H', 00H, 'H', 00H, 'I', 00H, 'T', 00H, 'T', 00H, 'E'
	DB	00H, 'S', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79809 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'H', 00H, 'E'
	DB	00H, 'E', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG79811 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'H', 00H, 'W', 00H, 'H'
	DB	00H, 'E', 00H, 'E', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79813 DB	'D', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'H', 00H, 'I', 00H, 'T'
	DB	00H, 'T', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '5', 00H, '0', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79815 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'T', 00H, 'O', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '5', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79817 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'A', 00H, 'W', 00H, 'A', 00H
	DB	'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '5'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG161741 DB	'[%010lu] [error] [client %s] ', 00H
	ORG $+2
$SG79821 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '8', 00H, '1', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79819 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'R', 00H, 'E', 00H, 'L', 00H
	DB	'E', 00H, 'A', 00H, 'S', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '5', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG79823 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG161744 DB	'%s %s: ', 00H
$SG79825 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O'
	DB	00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79827 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S'
	DB	00H, 'I', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'F', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '8', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79829 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H
	DB	'5', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79831 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG79833 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169946 DB	'unknown', 00H
$SG79835 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'9', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79837 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '9', 00H, '1', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79839 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'H', 00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'A', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79841 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'A', 00H, 'V', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'A', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79843 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'H', 00H, 'O', 00H, 'V'
	DB	00H, 'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'A', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG169956 DB	'%s"connection" : {%s"remote" : {%s"protocol" : "%s",%s"a'
	DB	'ddr" : "%s",%s"port" : %u%s},%s"handled_requests" : %u%s}', 00H
	ORG $+6
$SG79845 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'A'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'A', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG79847 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'T', 00H, 'S', 00H
	DB	'S', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'B'
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79849 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'A', 00H, 'B', 00H
	DB	'L', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'R'
	DB	00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'c', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG79851 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'A', 00H, 'B', 00H
	DB	'L', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'd', 00H, 'f', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG161778 DB	'user', 00H
	ORG $+3
$SG169965 DB	'%s%s"request_info" : {%s"method" : "%s",%s"uri" : "%s",%'
	DB	's"query" : %s%s%s%s}', 00H
	ORG $+3
$SG79853 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79855 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '_', 00H, 'B', 00H, 'E', 00H, 'F', 00H, 'O', 00H, 'R', 00H
	DB	'E', 00H, 'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79859 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'D', 00H, 'P', 00H, 'I', 00H, 'S', 00H, 'C', 00H, 'A', 00H, 'L'
	DB	00H, 'E', 00H, 'D', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H, '4'
	DB	00H, ')', 00H, 00H, 00H
$SG79857 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '_', 00H, 'A', 00H, 'F', 00H, 'T', 00H, 'E', 00H, 'R', 00H
	DB	'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
$SG161782 DB	'1.16', 00H
	ORG $+7
$SG169971 DB	'%s%s"time" : {%s"uptime" : %.0f,%s"start" : "%s",%s"clos'
	DB	'ed" : "%s"%s}', 00H
	ORG $+2
$SG79861 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'U', 00H, 'T', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG169975 DB	'%s%s"user" : {%s"name" : "%s",%s}', 00H
	ORG $+6
$SG79863 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'P', 00H
	DB	'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
$SG79865 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'S', 00H
	DB	'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '0', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG169979 DB	'%s%s"data" : {%s"read" : %I64d,%s"written" : %I64d%s}', 00H
	ORG $+2
$SG79867 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'E', 00H
	DB	'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '0', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79869 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'D', 00H
	DB	'O', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '4', 00H, ')', 00H, 00H, 00H
$SG169982 DB	'%s%s"state" : "%s"', 00H
	ORG $+5
$SG79871 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'R', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '0', 00H, '5', 00H, ')', 00H, 00H, 00H
$SG79873 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'L', 00H, 'L', 00H, 'F'
	DB	00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, 'S', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '6'
	DB	00H, ')', 00H, 00H, 00H
$SG79875 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '7'
	DB	00H, ')', 00H, 00H, 00H
$SG79877 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'W', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B', 00H, 'O'
	DB	00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79879 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B'
	DB	00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '0', 00H, '9', 00H, ')', 00H, 00H
	DB	00H
$SG161801 DB	'http', 00H
	ORG $+7
$SG79881 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'A'
	DB	00H, ')', 00H, 00H, 00H
$SG79883 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B', 00H, 'O'
	DB	00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79885 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'S', 00H, 'K', 00H
	DB	'C', 00H, 'B', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A'
	DB	00H, 'T', 00H, 'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'C', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79887 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, 'C', 00H, 'B', 00H, 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'I', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79889 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'E'
	DB	00H, ')', 00H, 00H, 00H
$SG79891 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'N', 00H, 'E', 00H, 'W', 00H, 'P', 00H, 'A'
	DB	00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'F', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79893 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'I', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1'
	DB	00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79895 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '1', 00H, '1', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79897 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'O', 00H, 'T', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '3', 00H, '1', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79899 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '1', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79901 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'E', 00H, 'N'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'1', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79903 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'P', 00H, 'P', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H
	DB	'9', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79905 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'H', 00H, 'E', 00H
	DB	'M', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG79907 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'I', 00H
	DB	'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H, 'U'
	DB	00H, 'P', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79923 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H
	DB	'D', 00H, 'H', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'F', 00H, 'I'
	DB	00H, 'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '5', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79909 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I'
	DB	00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'E', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG79925 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H
	DB	'D', 00H, 'H', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'L', 00H, 'A'
	DB	00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '5', 00H, 'F', 00H, ')', 00H, 00H, 00H
$SG79927 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'F', 00H, 'X', 00H
	DB	'F', 00H, 'I', 00H, 'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '6', 00H, '0', 00H, ')', 00H
	DB	00H, 00H
$SG79911 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'N', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'E'
	DB	00H, 'R', 00H, 'I', 00H, 'N', 00H, 'G', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'F', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG79929 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'F', 00H, 'X', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '3', 00H, '7', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79913 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'I', 00H, 'Z'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'C', 00H
	DB	'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '2', 00H, '0', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG79915 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'M'
	DB	00H, 'A', 00H, 'X', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 'D', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'2', 00H, '1', 00H, ')', 00H, 00H, 00H
$SG79962 DB	'STATIC_ALLOCATOR', 00H
	ORG $+7
$SG79917 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'C', 00H, 'O'
	DB	00H, 'N', 00H, 'I', 00H, 'C', 00H, 'T', 00H, 'H', 00H, 'U', 00H
	DB	'M', 00H, 'B', 00H, 'N', 00H, 'A', 00H, 'I', 00H, 'L', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '2', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
$SG80101 DB	'r_==t', 00H
	ORG $+6
$SG79919 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'C', 00H, 'O'
	DB	00H, 'N', 00H, 'I', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'V', 00H
	DB	'E', 00H, 'P', 00H, 'R', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'E'
	DB	00H, 'W', 00H, 'B', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'A', 00H
	DB	'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '2'
	DB	00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79921 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'I', 00H, 'T', 00H, 'L', 00H, 'E', 00H, 'B', 00H, 'A'
	DB	00H, 'R', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'E', 00H
	DB	'X', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '3'
	DB	00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG161851 DB	'%s://%s%s%s', 00H
	ORG $+4
$SG79931 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'R', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'8', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79933 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'L', 00H, 'A', 00H, 'S', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '8', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79935 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'P', 00H, 'P', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '8', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79936 DB	'U', 00H, 'N', 00H, 'K', 00H, 'N', 00H, 'O', 00H, 'W', 00H
	DB	'N', 00H, 00H, 00H
$SG79961 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, 'o', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'g', 00H, 00H
	DB	00H
	ORG $+6
$SG79963 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG79967 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79968 DB	'not supported for static allocations', 00H
	ORG $+3
$SG79969 DB	'!"not supported for static allocations"', 00H
$SG79970 DB	'STATIC_ALLOCATOR', 00H
	ORG $+7
$SG79971 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG79987 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG80010 DB	'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80012 DB	'D', 00H, 'E', 00H, 'B', 00H, 'U', 00H, 'G', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80014 DB	'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80016 DB	'W', 00H, 'A', 00H, 'R', 00H, 'N', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, ':', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80018 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80020 DB	'F', 00H, 'A', 00H, 'T', 00H, 'A', 00H, 'L', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80022 DB	'V', 00H, 'E', 00H, 'R', 00H, 'B', 00H, 'O', 00H, 'S', 00H
	DB	'E', 00H, ':', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80024 DB	'P', 00H, 'E', 00H, 'D', 00H, 'A', 00H, 'N', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, ':', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80025 DB	'I', 00H, 'N', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 'I', 00H
	DB	'D', 00H, '_', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'A', 00H
	DB	'G', 00H, 'E', 00H, 00H, 00H
	ORG $+4
$SG80044 DB	'K', 00H, 'L', 00H, 'A', 00H, 'R', 00H, 'K', 00H, '_', 00H
	DB	'A', 00H, 'P', 00H, 'P', 00H, ' ', 00H, '%', 00H, 's', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	'(', 00H, ')', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']'
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG80058 DB	'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, ' ', 00H, '['
	DB	00H, '%', 00H, 's', 00H, ']', 00H, ' ', 00H, '%', 00H, 'f', 00H
	DB	'(', 00H, 'm', 00H, 's', 00H, ')', 00H, 00H, 00H
$SG88272 DB	'expected marker', 00H
$SG88275 DB	'bad DRI len', 00H
	ORG $+4
$SG88278 DB	'bad DQT type', 00H
	ORG $+3
$SG88280 DB	'bad DQT table', 00H
	ORG $+2
$SG88284 DB	'bad DHT header', 00H
	ORG $+1
$SG80100 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80103 DB	'W:\cpp\void\dr/vint.c', 00H
	ORG $+2
$SG88296 DB	'bad COM len', 00H
	ORG $+4
$SG88297 DB	'bad APP len', 00H
	ORG $+4
$SG88305 DB	'unknown marker', 00H
	ORG $+1
$SG88324 DB	'bad SOS component count', 00H
$SG88326 DB	'bad SOS len', 00H
	ORG $+4
$SG88330 DB	'bad DC huff', 00H
	ORG $+4
$SG88332 DB	'bad AC huff', 00H
	ORG $+4
$SG88337 DB	'bad SOS', 00H
$SG170259 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG88339 DB	'bad SOS', 00H
$SG170260 DB	'ReturnDecodeError', 00H
	ORG $+6
$SG170261 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG170262 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG88342 DB	'bad SOS', 00H
$SG170263 DB	'error', 00H
	ORG $+2
$SG170264 DB	'!"error"', 00H
	ORG $+7
$SG170265 DB	'ReturnDecodeError', 00H
	ORG $+6
$SG170266 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG88390 DB	'bad SOF len', 00H
	ORG $+4
$SG88392 DB	'only 8-bit', 00H
	ORG $+5
$SG170313 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170314 DB	'tst==val', 00H
	ORG $+7
$SG88394 DB	'no header height', 00H
	ORG $+7
$SG170315 DB	'WriteVarint', 00H
	ORG $+4
$SG162123 DB	'Connection', 00H
	ORG $+5
$SG170316 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG88396 DB	'0 width', 00H
$SG170317 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170318 DB	'len==(res-cur)', 00H
	ORG $+1
$SG162126 DB	'keep-alive', 00H
	ORG $+5
$SG88398 DB	'too large', 00H
	ORG $+6
$SG170319 DB	'WriteVarint', 00H
	ORG $+4
$SG170320 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG88400 DB	'too large', 00H
	ORG $+6
$SG88402 DB	'bad component count', 00H
	ORG $+4
$SG88404 DB	'bad SOF len', 00H
$SG88408 DB	'bad H', 00H
	ORG $+2
$SG88411 DB	'bad V', 00H
	ORG $+6
$SG162144 DB	'keep-alive', 00H
	ORG $+5
$SG88416 DB	'too large', 00H
	ORG $+2
$SG162145 DB	'close', 00H
	ORG $+2
$SG88420 DB	'bad H', 00H
	ORG $+2
$SG88422 DB	'bad V', 00H
	ORG $+6
$SG88424 DB	'outofmem', 00H
	ORG $+7
$SG88427 DB	'outofmem', 00H
	ORG $+7
$SG162165 DB	'HTTP/%s %i %s', 0dH, 0aH, 00H
$SG88468 DB	'bad DNL len', 00H
	ORG $+4
$SG88470 DB	'bad DNL height', 00H
	ORG $+1
$SG162235 DB	'%s: %s', 0dH, 0aH, 00H
	ORG $+3
$SG162237 DB	'Date', 00H
	ORG $+7
$SG162239 DB	'Connection', 00H
	ORG $+5
$SG162241 DB	'Date: %s', 0dH, 0aH, 00H
	ORG $+5
$SG162243 DB	'Connection: %s', 0dH, 0aH, 00H
	ORG $+7
$SG162248 DB	'no-cache, no-store, must-revalidate, private, max-age=0', 00H
$SG170436 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, ',', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H
	DB	' ', 00H, 'm', 00H, 'a', 00H, 'k', 00H, 'e', 00H, ' ', 00H, 'e'
	DB	00H, 'm', 00H, 'b', 00H, 'e', 00H, 'd', 00H, 'd', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG162249 DB	'Cache-Control', 00H
	ORG $+2
$SG162251 DB	'Expires', 00H
$SG162253 DB	'no-cache', 00H
	ORG $+7
$SG170448 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170449 DB	'internal error, invalid block, cannot commit', 00H
	ORG $+3
$SG170450 DB	'!"internal error, invalid block, cannot commit"', 00H
$SG170451 DB	'InternalPullStack', 00H
	ORG $+6
$SG170452 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG170453 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l'
	DB	00H, 'o', 00H, 'w', 00H, ',', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ',', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 's', 00H, 's', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'y', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'r', 00H
	DB	'r', 00H, 'u', 00H, 'p', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+6
$SG162263 DB	'Cache-Control', 00H
	ORG $+2
$SG162265 DB	'max-age=%lu', 00H
	ORG $+4
$SG162266 DB	'Cache-Control', 00H
	ORG $+2
$SG162276 DB	'max-age=%lu', 00H
	ORG $+4
$SG162277 DB	'Strict-Transport-Security', 00H
	ORG $+6
$SG162286 DB	'Access-Control-Allow-Origin', 00H
	ORG $+4
$SG162298 DB	'Continue', 00H
	ORG $+7
$SG162300 DB	'Switching Protocols', 00H
	ORG $+4
$SG162302 DB	'Processing', 00H
	ORG $+5
$SG162306 DB	'Created', 00H
$SG162308 DB	'Accepted', 00H
	ORG $+7
$SG162310 DB	'Non-Authoritative Information', 00H
	ORG $+2
$SG162312 DB	'No Content', 00H
	ORG $+5
$SG162314 DB	'Reset Content', 00H
	ORG $+2
$SG162316 DB	'Partial Content', 00H
$SG162318 DB	'Multi-Status', 00H
	ORG $+3
$SG162320 DB	'Already Reported', 00H
	ORG $+7
$SG162322 DB	'IM used', 00H
$SG162324 DB	'Multiple Choices', 00H
	ORG $+7
$SG162326 DB	'Moved Permanently', 00H
	ORG $+2
$SG162328 DB	'Found', 00H
	ORG $+6
$SG162330 DB	'See Other', 00H
	ORG $+6
$SG162332 DB	'Not Modified', 00H
	ORG $+3
$SG162334 DB	'Use Proxy', 00H
	ORG $+6
$SG162336 DB	'Temporary Redirect', 00H
	ORG $+5
$SG162338 DB	'Permanent Redirect', 00H
	ORG $+5
$SG162340 DB	'Bad Request', 00H
	ORG $+4
$SG162342 DB	'Unauthorized', 00H
	ORG $+3
$SG162344 DB	'Payment Required', 00H
	ORG $+7
$SG162346 DB	'Forbidden', 00H
	ORG $+6
$SG162348 DB	'Not Found', 00H
	ORG $+6
$SG162350 DB	'Method Not Allowed', 00H
	ORG $+5
$SG162352 DB	'Not Acceptable', 00H
	ORG $+1
$SG162354 DB	'Proxy Authentication Required', 00H
	ORG $+2
$SG170547 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170548 DB	'error', 00H
	ORG $+2
$SG162356 DB	'Request Time-out', 00H
	ORG $+7
$SG170549 DB	'!"error"', 00H
	ORG $+7
$SG170550 DB	'ReadyValueForSerialization', 00H
	ORG $+5
$SG162358 DB	'Conflict', 00H
	ORG $+7
$SG170551 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+2
$SG162360 DB	'Gone', 00H
	ORG $+7
$SG162362 DB	'Length Required', 00H
$SG162364 DB	'Precondition Failed', 00H
	ORG $+4
$SG162366 DB	'Request Entity Too Large', 00H
	ORG $+7
$SG162368 DB	'Request-URI Too Large', 00H
	ORG $+2
$SG162370 DB	'Unsupported Media Type', 00H
	ORG $+1
$SG162372 DB	'Requested range not satisfiable', 00H
$SG162374 DB	'Expectation Failed', 00H
	ORG $+5
$SG162376 DB	'Misdirected Request', 00H
	ORG $+4
$SG162378 DB	'Unproccessable entity', 00H
	ORG $+2
$SG162382 DB	'Failed Dependency', 00H
	ORG $+6
$SG162384 DB	'Upgrade Required', 00H
	ORG $+7
$SG162386 DB	'Precondition Required', 00H
	ORG $+2
$SG162388 DB	'Too Many Requests', 00H
	ORG $+6
$SG162390 DB	'Request Header Fields Too Large', 00H
$SG170584 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG162392 DB	'Unavailable For Legal Reasons', 00H
	ORG $+2
$SG170585 DB	'error', 00H
	ORG $+2
$SG170586 DB	'!"error"', 00H
	ORG $+7
$SG162394 DB	'Internal Server Error', 00H
	ORG $+2
$SG170587 DB	'SerializeValueInternal', 00H
	ORG $+1
$SG170588 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG162396 DB	'Not Implemented', 00H
$SG162398 DB	'Bad Gateway', 00H
	ORG $+4
$SG162400 DB	'Service Unavailable', 00H
	ORG $+4
$SG162402 DB	'Gateway Time-out', 00H
	ORG $+7
$SG162404 DB	'HTTP Version not supported', 00H
	ORG $+5
$SG162406 DB	'Variant Also Negotiates', 00H
$SG162408 DB	'Insufficient Storage', 00H
	ORG $+3
$SG162410 DB	'Loop Detected', 00H
	ORG $+2
$SG170603 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170604 DB	'read->stc->has', 00H
	ORG $+1
$SG162412 DB	'Not Extended', 00H
	ORG $+3
$SG170605 DB	'InternalConsumeLabel', 00H
	ORG $+3
$SG170606 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG162414 DB	'Network Authentication Required', 00H
$SG162416 DB	'I am a teapot', 00H
	ORG $+2
$SG162418 DB	'Authentication Timeout', 00H
	ORG $+1
$SG162420 DB	'Enhance Your Calm', 00H
	ORG $+6
$SG162422 DB	'Login Timeout', 00H
	ORG $+2
$SG162424 DB	'Bandwidth Limit Exceeded', 00H
	ORG $+7
$SG162427 DB	'Unknown HTTP response code: %u', 00H
	ORG $+1
$SG162428 DB	'mg_get_response_code_text', 00H
	ORG $+6
$SG162430 DB	'Information', 00H
	ORG $+4
$SG170624 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG162432 DB	'Success', 00H
$SG170625 DB	'error', 00H
	ORG $+2
$SG170626 DB	'!"error"', 00H
	ORG $+7
$SG162434 DB	'Redirection', 00H
	ORG $+4
$SG170627 DB	'InternalGetUnknownValue', 00H
$SG170628 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG162436 DB	'Client Error', 00H
	ORG $+3
$SG162438 DB	'Server Error', 00H
	ORG $+3
$SG170638 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG170649 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG170678 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG170689 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG162507 DB	'%serror%03u.', 00H
	ORG $+3
$SG162509 DB	'%serror%01uxx.', 00H
	ORG $+1
$SG162511 DB	'%serror.', 00H
	ORG $+7
$SG170706 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG162516 DB	'text/plain; charset=utf-8', 00H
	ORG $+6
$SG162517 DB	'Content-Type', 00H
	ORG $+3
$SG162520 DB	'Error %d: %s', 0aH, 00H
	ORG $+2
$SG170718 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG170734 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm'
	DB	00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG162543 DB	'text/html', 00H
	ORG $+6
$SG162544 DB	'Content-Type', 00H
	ORG $+3
$SG170739 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170740 DB	'error, cursor out of bounds', 00H
	ORG $+4
$SG162548 DB	'chunked', 00H
$SG170741 DB	'!"error, cursor out of bounds"', 00H
	ORG $+1
$SG162549 DB	'Transfer-Encoding', 00H
	ORG $+6
$SG170742 DB	'NextField', 00H
	ORG $+2
$SG162550 DB	'%I64u', 00H
	ORG $+6
$SG170743 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG162552 DB	'Content-Length', 00H
	ORG $+1
$SG170753 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG170754 DB	'read->stc->has', 00H
	ORG $+1
$SG162563 DB	'Location', 00H
	ORG $+7
$SG170756 DB	'W:\cpp\void\alistar\ali.c', 00H
	ORG $+6
$SG162568 DB	'Content-Length', 00H
	ORG $+1
$SG88975 DB	'bad req_comp', 00H
	ORG $+3
$SG88981 DB	'outofmem', 00H
	ORG $+7
$SG154523 DB	'modules\renderer\model.hlsl', 00H
	ORG $+4
$SG154524 DB	'plain3D', 00H
$SG154525 DB	'POSITION', 00H
	ORG $+7
$SG154526 DB	'plain3D', 00H
$SG154527 DB	'modules\renderer\textured.hlsl', 00H
	ORG $+1
$SG88991 DB	'outofmem', 00H
	ORG $+7
$SG154528 DB	'textured3D', 00H
	ORG $+5
$SG154529 DB	'TEXCOORD', 00H
	ORG $+7
$SG154530 DB	'POSITION', 00H
	ORG $+7
$SG154531 DB	'textured3D', 00H
	ORG $+5
$SG154532 DB	'modules\renderer\text.hlsl', 00H
	ORG $+5
$SG154533 DB	'POSITION', 00H
	ORG $+7
$SG154534 DB	'GLYPHIDX', 00H
	ORG $+3
$SG154535 DB	'text', 00H
	ORG $+7
$SG154536 DB	'TEXCOORD', 00H
	ORG $+3
$SG154537 DB	'COLOR', 00H
	ORG $+6
$SG154538 DB	'POSITION', 00H
	ORG $+7
$SG154539 DB	'ImGui::ShaderBundle(A)', 00H
	ORG $+1
$SG154540 DB	'TEXCOORD', 00H
	ORG $+3
$SG154541 DB	'COLOR', 00H
	ORG $+6
$SG154542 DB	'POSITION', 00H
	ORG $+7
$SG154543 DB	'ImGui::ShaderBundle(B)', 00H
	ORG $+1
$SG154544 DB	'TEXCOORD', 00H
	ORG $+3
$SG154545 DB	'COLOR', 00H
	ORG $+6
$SG154546 DB	'POSITION', 00H
	ORG $+7
$SG154547 DB	'ImGui::ShaderBundle(C)', 00H
	ORG $+1
$SG162748 DB	'\', 00H, '*', 00H, 00H, 00H
	ORG $+2
$SG89033 DB	'outofmem', 00H
	ORG $+7
$SG154576 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H
$SG154577 DB	'D3D11Driver_InitializeCompatible', 00H
	ORG $+7
$SG154578 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG89042 DB	'outofmem', 00H
	ORG $+7
$SG154585 DB	'cbuffer ConstBuffer : register(b0)', 0dH, 0aH, '{ float4'
	DB	'x4 ProjectionMatrix;', 0dH, 0aH, '};', 0dH, 0aH, 'struct VS_I'
	DB	'NPUT', 0dH, 0aH, '{ float2 pos : POSITION;', 0dH, 0aH, '  flo'
	DB	'at4 col : COLOR0;', 0dH, 0aH, '};', 0dH, 0aH, 'struct PS_INPU'
	DB	'T', 0dH, 0aH, '{ float4 pos : SV_POSITION;', 0dH, 0aH, '  flo'
	DB	'at4 col : COLOR0;', 0dH, 0aH, '  float4 tex : TEXCOORD0;', 0dH
	DB	0aH, '};', 0dH, 0aH, 'PS_INPUT MainVS(VS_INPUT input)', 0dH, 0aH
	DB	'{ PS_INPUT output;', 0dH, 0aH, '  output.pos = mul( Projectio'
	DB	'nMatrix, float4(input.pos.xy, 0.f, 1.f));', 0dH, 0aH, '  outp'
	DB	'ut.col = input.col;', 0dH, 0aH, '  output.tex = float4(0,0,0,'
	DB	'0);', 0dH, 0aH, '  return output;', 0dH, 0aH, '}', 0dH, 0aH, 'f'
	DB	'loat4 MainPS(PS_INPUT input) : SV_Target', 0dH, 0aH, '{ retur'
	DB	'n input.col;', 0dH, 0aH, '}', 0dH, 0aH, 00H
$SG162993 DB	'%s/%s', 00H
	ORG $+6
$SG154592 DB	'cbuffer ConstBuffer : register(b0)', 0dH, 0aH, '{ float4'
	DB	'x4 ProjectionMatrix;', 0dH, 0aH, '};', 0dH, 0aH, 'struct VS_I'
	DB	'NPUT', 0dH, 0aH, '{ float2 pos : POSITION;', 0dH, 0aH, '  flo'
	DB	'at4 col : COLOR0;', 0dH, 0aH, '  float2 uv  : TEXCOORD0;', 0dH
	DB	0aH, '};', 0dH, 0aH, 'struct PS_INPUT', 0dH, 0aH, '{ float4 po'
	DB	's : SV_POSITION;', 0dH, 0aH, '  float4 col : COLOR0;', 0dH, 0aH
	DB	'  float2 uv  : TEXCOORD0;', 0dH, 0aH, '};', 0dH, 0aH, 'PS_INP'
	DB	'UT MainVS(VS_INPUT input)', 0dH, 0aH, '{ PS_INPUT output;', 0dH
	DB	0aH, '  output.pos = mul( ProjectionMatrix, float4(input.pos.x'
	DB	'y, 0.f, 1.f));', 0dH, 0aH, '  output.col = input.col;', 0dH, 0aH
	DB	'  output.uv  = input.uv;', 0dH, 0aH, '  return output;', 0dH, 0aH
	DB	'}', 0dH, 0aH, 'SamplerState      sampler0;', 0dH, 0aH, 'Textu'
	DB	're2D<float4> texture0;', 0dH, 0aH, 'float4 MainPS(PS_INPUT in'
	DB	'put) : SV_Target', 0dH, 0aH, '{ float4 out_col = texture0.Sam'
	DB	'ple(sampler0, input.uv);', 0dH, 0aH, '  return out_col;', 0dH
	DB	0aH, '}', 0dH, 0aH, 00H
	ORG $+7
$SG154599 DB	'cbuffer ConstBuffer : register(b0)', 0dH, 0aH, '{ float4'
	DB	'x4 ProjectionMatrix;', 0dH, 0aH, '  float    FieldMin;', 0dH, 0aH
	DB	'  float    FieldOff;', 0dH, 0aH, '  float    FieldMax;', 0dH, 0aH
	DB	'};', 0dH, 0aH, 'struct VS_INPUT', 0dH, 0aH, '{ float2 pos : P'
	DB	'OSITION;', 0dH, 0aH, '  float4 col : COLOR0;', 0dH, 0aH, '  f'
	DB	'loat2 uv  : TEXCOORD0;', 0dH, 0aH, '};', 0dH, 0aH, 'struct PS'
	DB	'_INPUT', 0dH, 0aH, '{ float4 pos : SV_POSITION;', 0dH, 0aH, ' '
	DB	' float4 col : COLOR0;', 0dH, 0aH, '  float2 uv  : TEXCOORD0;', 0dH
	DB	0aH, '};', 0dH, 0aH, 'PS_INPUT MainVS(VS_INPUT input)', 0dH, 0aH
	DB	'{ PS_INPUT output;', 0dH, 0aH, '  output.pos = mul( Projectio'
	DB	'nMatrix, float4(input.pos.xy, 0.f, 1.f));', 0dH, 0aH, '  outp'
	DB	'ut.col = input.col;', 0dH, 0aH, '  output.uv  = input.uv;', 0dH
	DB	0aH, '  return output;', 0dH, 0aH, '}', 0dH, 0aH, 'SamplerStat'
	DB	'e     sampler0;', 0dH, 0aH, 'Texture2D<float> texture0;', 0dH
	DB	0aH, 'float4 MainPS(PS_INPUT input) : SV_Target', 0dH, 0aH, '{'
	DB	0dH, 0aH, '  float4 Color = float4(0,0,0,0); ', 0dH, 0aH, '  f'
	DB	'loat Distance = texture0.Sample(sampler0, input.uv);', 0dH, 0aH
	DB	'  if(Distance >= FieldOff) ', 0dH, 0aH, '  { float Alpha = sm'
	DB	'oothstep(FieldOff, FieldMax, Distance);', 0dH, 0aH, '    Colo'
	DB	'r = float4(input.col.rgb * Alpha, Alpha);', 0dH, 0aH, '  } el'
	DB	'se ', 0dH, 0aH, '  { ', 0dH, 0aH, '  } ', 0dH, 0aH, '  return'
	DB	' Color;', 0dH, 0aH, '}', 0dH, 0aH, 00H
	ORG $+6
$SG89064 DB	'outofmem', 00H
	ORG $+7
$SG154628 DB	'u', 00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG89092 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG154629 DB	'ZenExternalizeResourceAccessFlags', 00H
	ORG $+6
$SG89093 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG154630 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG154652 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'I', 00H, 'D', 00H, 'X', 00H, 'G', 00H, 'I', 00H
	DB	'_', 00H, 'F', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'O', 00H, 'R'
	DB	00H, 'Y', 00H, 00H, 00H
$SG154653 DB	'ID3D11Driver_GetFactory', 00H
$SG154654 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG89128 DB	'bad sizes', 00H
	ORG $+6
$SG89131 DB	'bad codelengths', 00H
$SG154725 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG154726 DB	'ID3D11Driver_CreateBuffer', 00H
	ORG $+6
$SG154727 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG89216 DB	'output buffer limit', 00H
	ORG $+4
$SG89218 DB	'outofmem', 00H
	ORG $+7
$SG89220 DB	'outofmem', 00H
	ORG $+7
$SG89222 DB	'outofmem', 00H
	ORG $+7
$SG154766 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG154767 DB	'ID3D11Driver_CreateBufferShaderAccess', 00H
	ORG $+2
?stbi__zlength_base@@3QBHB DD 03H			; stbi__zlength_base
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	DD	00H
	DD	00H
	ORG $+4
?stbi__zlength_extra@@3QBHB DD 00H			; stbi__zlength_extra
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
?stbi__zdist_base@@3QBHB DD 01H				; stbi__zdist_base
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
	DD	00H
	DD	00H
?stbi__zdist_extra@@3QBHB DD 00H			; stbi__zdist_extra
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
$SG154768 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG154779 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG154780 DB	'ID3D11Driver_CreateSimpleSampler', 00H
	ORG $+7
$SG154781 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG89250 DB	'bad huffman code', 00H
	ORG $+7
$SG89256 DB	'bad huffman code', 00H
	ORG $+7
$SG89259 DB	'bad dist', 00H
	ORG $+7
$SG154806 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG154804 DB	'I', 00H, 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '1', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '_'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'R'
	DB	00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H
	DB	'E', 00H, 'D', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG154805 DB	'ID3D11Driver_CreateTexture2DShaderAccess', 00H
	ORG $+7
$SG154807 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
$SG154808 DB	'ID3D11Driver_CreateTexture2DShaderAccess', 00H
	ORG $+7
$SG154809 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG163003 DB	'"%s" %s "%s\%s"', 00H
$SG163004 DB	'"%s" "%s\%s"', 00H
	ORG $+3
$SG163005 DB	'"%s\%s"', 00H
$SG163009 DB	'spawn_process', 00H
	ORG $+2
$SG163010 DB	'%s: CreateProcess(%s): %ld', 00H
	ORG $+5
$SG163011 DB	'spawn_process', 00H
	ORG $+2
$SG154823 DB	'I', 00H, 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '1', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '_'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'V', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, '(', 00H, ')', 00H, ' ', 00H, '['
	DB	00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E', 00H, 'D', 00H
	DB	']', 00H, 00H, 00H
	ORG $+2
$SG154824 DB	'ID3D11Driver_CreateTexture2DRenderTargetView', 00H
	ORG $+3
$SG154825 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG154826 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
$SG154827 DB	'ID3D11Driver_CreateTexture2DRenderTargetView', 00H
	ORG $+3
$SG154828 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG89293 DB	'bad codelengths', 00H
$SG89299 DB	'bad codelengths', 00H
$SG89304 DB	'bad codelengths', 00H
$SG89306 DB	'bad codelengths', 00H
$SG89308 DB	'bad codelengths', 00H
$SG89325 DB	'zlib corrupt', 00H
	ORG $+3
$SG89327 DB	'zlib corrupt', 00H
	ORG $+3
$SG89329 DB	'read past buffer', 00H
	ORG $+7
$SG89339 DB	'bad zlib header', 00H
$SG89341 DB	'bad zlib header', 00H
$SG89343 DB	'no preset dict', 00H
	ORG $+1
$SG89345 DB	'bad compression', 00H
?stbi__zdefault_length@@3QBEB DB 08H			; stbi__zdefault_length
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
?stbi__zdefault_distance@@3QBEB DB 05H			; stbi__zdefault_distance
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
$SG154892 DB	'invalid', 00H
$SG154893 DB	'invalid', 00H
$SG154908 DB	'vs_4_0', 00H
	ORG $+1
$SG154911 DB	'ps_4_0', 00H
	ORG $+1
$SG154913 DB	'cs_4_0', 00H
	ORG $+1
$SG154919 DB	'vs_5_0', 00H
	ORG $+1
$SG154922 DB	'ps_5_0', 00H
	ORG $+1
$SG154924 DB	'cs_5_0', 00H
	ORG $+1
$SG154953 DB	'u', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG154954 DB	'ID3D11Driver_CreateShaderInternal', 00H
	ORG $+6
$SG154955 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
?STANDARD_BASIS_X@@3Tf32x3@@B DD 03f800000r	; 1	; STANDARD_BASIS_X
	DD	000000000r			; 0
	DD	000000000r			; 0
	ORG $+4
?STANDARD_BASIS_Y@@3Tf32x3@@B DD 000000000r	; 0	; STANDARD_BASIS_Y
	DD	03f800000r			; 1
	DD	000000000r			; 0
	ORG $+4
?STANDARD_BASIS_Z@@3Tf32x3@@B DD 000000000r	; 0	; STANDARD_BASIS_Z
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
$SG155007 DB	'COMPILE_SHADER', 00H
	ORG $+1
$SG155013 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG155012 DB	'*', 00H, '*', 00H, '*', 00H, ' ', 00H, 's', 00H, 'h', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	00H, 00H
	ORG $+4
$SG155014 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG155015 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG155016 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG155017 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155018 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	00H, 00H
	ORG $+4
$SG89482 DB	'bad png sig', 00H
	ORG $+4
$SG155019 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG155020 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
?stbi__depth_scale_table@@3QBEB DB 00H			; stbi__depth_scale_table
	DB	0ffH
	DB	055H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+7
$SG155067 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155068 DB	'(void *)Record == (void *)External', 00H
	ORG $+5
$SG155069 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG155070 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155071 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'T', 00H
	DB	'E', 00H, 'X', 00H, 'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, ','
	DB	00H, ' ', 00H, 'C', 00H, 'A', 00H, 'N', 00H, 'N', 00H, 'O', 00H
	DB	'T', 00H, ' ', 00H, 'M', 00H, 'A', 00H, 'P', 00H, 00H, 00H
	ORG $+6
$SG155072 DB	'Record->Resource != NULL', 00H
	ORG $+7
$SG155073 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG155074 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155075 DB	'M', 00H, 'A', 00H, 'P', 00H, ' ', 00H, 'A', 00H, 'L', 00H
	DB	'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, ' ', 00H, 'A'
	DB	00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'E', 00H, ',', 00H
	DB	' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG155076 DB	'Record->BorrowedCounter == 0', 00H
	ORG $+3
$SG155077 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG155078 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155086 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155087 DB	'TODO(RJ):', 00H
	ORG $+6
$SG155088 DB	'!"TODO(RJ):"', 00H
	ORG $+3
$SG155089 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG155090 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155091 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG155092 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG155093 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155104 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG155105 DB	'ID3D11Driver_ReturnTextureChronicle', 00H
	ORG $+4
$SG155106 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG163396 DB	'%x', 0dH, 0aH, 00H
	ORG $+7
$SG89677 DB	'too large', 00H
	ORG $+6
$SG89679 DB	'not enough pixels', 00H
	ORG $+6
$SG89672 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG89681 DB	'invalid filter', 00H
	ORG $+1
$SG89710 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, '_', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG89673 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+'
	DB	00H, '1', 00H, 00H, 00H
	ORG $+6
$SG89675 DB	'outofmem', 00H
	ORG $+7
$SG89684 DB	'invalid width', 00H
	ORG $+2
$SG89741 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG89709 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG89800 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG89740 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG89779 DB	'outofmem', 00H
	ORG $+7
$SG89823 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG89799 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG89896 DB	's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'm', 00H, 'g', 00H
	DB	'_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG89822 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG89849 DB	'outofmem', 00H
	ORG $+7
$SG155443 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG155444 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG163622 DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123'
	DB	'456789+/', 00H
	ORG $+7
$SG155445 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG89895 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG155446 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG155447 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG155448 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155449 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG155450 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG155451 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG163691 DB	'DELETE', 00H
	ORG $+1
$SG163692 DB	'MKCOL', 00H
	ORG $+2
$SG163693 DB	'PATCH', 00H
	ORG $+2
$SG163694 DB	'LOCK', 00H
	ORG $+3
$SG163695 DB	'UNLOCK', 00H
	ORG $+5
$SG163696 DB	'PROPPATCH', 00H
	ORG $+2
$SG163697 DB	'MOVE', 00H
	ORG $+3
$SG163698 DB	'COPY', 00H
	ORG $+7
$SG163705 DB	'PROPFIND', 00H
	ORG $+7
$SG163706 DB	'PROPPATCH', 00H
	ORG $+2
$SG163707 DB	'LOCK', 00H
	ORG $+7
$SG171900 DB	'16-Bit LE', 00H
	ORG $+2
$SG163708 DB	'UNLOCK', 00H
	ORG $+5
$SG171901 DB	'RoyJacobs', 00H
	ORG $+2
$SG163709 DB	'MOVE', 00H
	ORG $+7
$SG171902 DB	'DakotaBrown', 00H
$SG163710 DB	'COPY', 00H
	ORG $+7
$SG81799 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG81800 DB	'invalid aspect ratio!', 00H
	ORG $+2
$SG89993 DB	'multiple IHDR', 00H
	ORG $+2
$SG81801 DB	'AspectRatio != 0 && "invalid aspect ratio!"', 00H
	ORG $+4
$SG81802 DB	'MatrixP', 00H
$SG89995 DB	'bad IHDR len', 00H
	ORG $+3
$SG81803 DB	'W:\cpp\void\detroit\brazen-math.h', 00H
	ORG $+6
$SG89997 DB	'too large', 00H
	ORG $+6
$SG89999 DB	'too large', 00H
	ORG $+6
$SG90001 DB	'1/2/4/8/16-bit only', 00H
	ORG $+4
$SG155538 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l'
	DB	00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG155539 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG90003 DB	'bad ctype', 00H
	ORG $+6
$SG155540 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG90005 DB	'bad ctype', 00H
	ORG $+6
$SG155542 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG155543 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG155544 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG155545 DB	'l', 00H, 'o', 00H, 'o', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
$SG90009 DB	'bad ctype', 00H
	ORG $+6
$SG155546 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG155547 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG90011 DB	'bad comp method', 00H
$SG90013 DB	'bad filter method', 00H
	ORG $+6
$SG90015 DB	'bad interlace method', 00H
	ORG $+3
$SG90018 DB	'0-pixel image', 00H
	ORG $+2
$SG90022 DB	'too large', 00H
	ORG $+6
$SG90025 DB	'too large', 00H
	ORG $+6
$SG90028 DB	'first not IHDR', 00H
	ORG $+1
$SG90030 DB	'invalid PLTE', 00H
	ORG $+3
$SG90032 DB	'invalid PLTE', 00H
	ORG $+3
$SG90035 DB	'first not IHDR', 00H
	ORG $+1
$SG90037 DB	'tRNS after IDAT', 00H
$SG90042 DB	'tRNS before PLTE', 00H
	ORG $+7
$SG90044 DB	'bad tRNS len', 00H
	ORG $+3
$SG90046 DB	'tRNS with alpha', 00H
$SG90048 DB	'bad tRNS len', 00H
	ORG $+3
$SG90053 DB	'first not IHDR', 00H
	ORG $+1
$SG90055 DB	'no PLTE', 00H
$SG90061 DB	'outofmem', 00H
	ORG $+7
$SG90063 DB	'outofdata', 00H
	ORG $+6
$SG90066 DB	'first not IHDR', 00H
	ORG $+1
$SG163795 DB	'Accept-Encoding', 00H
$SG163797 DB	'gzip', 00H
	ORG $+3
$SG90069 DB	'no IDAT', 00H
$SG163799 DB	'%s%s', 00H
	ORG $+3
$SG163803 DB	'%.*s%s', 00H
	ORG $+1
$SG163816 DB	'%s.gz', 00H
	ORG $+2
$SG90089 DB	'first not IHDR', 00H
	ORG $+1
$SG90108 DB	'bad req_comp', 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnwprintf_l
PUBLIC	_vsnwprintf
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsnprintf
PUBLIC	_vsprintf_l
PUBLIC	_vsprintf_s_l
PUBLIC	vsprintf_s
PUBLIC	sprintf
PUBLIC	sprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	?strchr@@YAPEADQEADH@Z				; strchr
PUBLIC	?strrchr@@YAPEADQEADH@Z				; strrchr
PUBLIC	?strstr@@YAPEADQEADQEBD@Z			; strstr
PUBLIC	??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z	; _TRACE_BLOCK::_TRACE_BLOCK
PUBLIC	??1_TRACE_BLOCK@@QEAA@XZ			; _TRACE_BLOCK::~_TRACE_BLOCK
PUBLIC	??Bstr32@@QEAAPEADXZ				; str32::operator char *
PUBLIC	??Bstr32@@QEAA_JXZ				; str32::operator __int64
PUBLIC	??Bstr32@@QEAA_KXZ				; str32::operator unsigned __int64
PUBLIC	??Bstr32@@QEAANXZ				; str32::operator double
PUBLIC	??Bstr32@@QEAAMXZ				; str32::operator float
PUBLIC	??Bstr32@@QEAAIXZ				; str32::operator unsigned int
PUBLIC	??Bstr32@@QEAAHXZ				; str32::operator int
PUBLIC	??7str32@@QEAAHXZ				; str32::operator!
PUBLIC	stbtt_BakeFontBitmap
PUBLIC	stbtt_GetBakedQuad
PUBLIC	stbtt_GetScaledFontVMetrics
PUBLIC	stbtt_PackBegin
PUBLIC	stbtt_PackEnd
PUBLIC	stbtt_PackFontRange
PUBLIC	stbtt_PackFontRanges
PUBLIC	stbtt_PackSetOversampling
PUBLIC	stbtt_PackSetSkipMissingCodepoints
PUBLIC	stbtt_GetPackedQuad
PUBLIC	stbtt_PackFontRangesGatherRects
PUBLIC	stbtt_PackFontRangesPackRects
PUBLIC	stbtt_PackFontRangesRenderIntoRects
PUBLIC	stbtt_GetNumberOfFonts
PUBLIC	stbtt_GetFontOffsetForIndex
PUBLIC	stbtt_InitFont
PUBLIC	stbtt_FindGlyphIndex
PUBLIC	stbtt_ScaleForPixelHeight
PUBLIC	stbtt_ScaleForMappingEmToPixels
PUBLIC	stbtt_GetFontVMetrics
PUBLIC	stbtt_GetFontVMetricsOS2
PUBLIC	stbtt_GetFontBoundingBox
PUBLIC	stbtt_GetCodepointHMetrics
PUBLIC	stbtt_GetCodepointKernAdvance
PUBLIC	stbtt_GetCodepointBox
PUBLIC	stbtt_GetGlyphHMetrics
PUBLIC	stbtt_GetGlyphKernAdvance
PUBLIC	stbtt_GetGlyphBox
PUBLIC	stbtt_GetKerningTableLength
PUBLIC	stbtt_GetKerningTable
PUBLIC	stbtt_IsGlyphEmpty
PUBLIC	stbtt_GetCodepointShape
PUBLIC	stbtt_GetGlyphShape
PUBLIC	stbtt_FreeShape
PUBLIC	stbtt_FindSVGDoc
PUBLIC	stbtt_GetCodepointSVG
PUBLIC	stbtt_GetGlyphSVG
PUBLIC	stbtt_FreeBitmap
PUBLIC	stbtt_GetCodepointBitmap
PUBLIC	stbtt_GetCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmap
PUBLIC	stbtt_MakeCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmapSubpixelPrefilter
PUBLIC	stbtt_GetCodepointBitmapBox
PUBLIC	stbtt_GetCodepointBitmapBoxSubpixel
PUBLIC	stbtt_GetGlyphBitmap
PUBLIC	stbtt_GetGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmap
PUBLIC	stbtt_MakeGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmapSubpixelPrefilter
PUBLIC	stbtt_GetGlyphBitmapBox
PUBLIC	stbtt_GetGlyphBitmapBoxSubpixel
PUBLIC	stbtt_Rasterize
PUBLIC	stbtt_FreeSDF
PUBLIC	stbtt_GetGlyphSDF
PUBLIC	stbtt_GetCodepointSDF
PUBLIC	stbtt_FindMatchingFont
PUBLIC	stbtt_CompareUTF8toUTF16_bigendian
PUBLIC	stbtt_GetFontNameString
PUBLIC	stbi_load_from_memory
PUBLIC	stbi_load_from_callbacks
PUBLIC	stbi_load
PUBLIC	stbi_load_from_file
PUBLIC	stbi_load_gif_from_memory
PUBLIC	stbi_load_16_from_memory
PUBLIC	stbi_load_16_from_callbacks
PUBLIC	stbi_load_16
PUBLIC	stbi_load_from_file_16
PUBLIC	stbi_loadf_from_memory
PUBLIC	stbi_loadf_from_callbacks
PUBLIC	stbi_loadf
PUBLIC	stbi_loadf_from_file
PUBLIC	stbi_hdr_to_ldr_gamma
PUBLIC	stbi_hdr_to_ldr_scale
PUBLIC	stbi_ldr_to_hdr_gamma
PUBLIC	stbi_ldr_to_hdr_scale
PUBLIC	stbi_is_hdr_from_callbacks
PUBLIC	stbi_is_hdr_from_memory
PUBLIC	stbi_is_hdr
PUBLIC	stbi_is_hdr_from_file
PUBLIC	stbi_failure_reason
PUBLIC	stbi_image_free
PUBLIC	stbi_info_from_memory
PUBLIC	stbi_info_from_callbacks
PUBLIC	stbi_is_16_bit_from_memory
PUBLIC	stbi_is_16_bit_from_callbacks
PUBLIC	stbi_info
PUBLIC	stbi_info_from_file
PUBLIC	stbi_is_16_bit
PUBLIC	stbi_is_16_bit_from_file
PUBLIC	stbi_set_unpremultiply_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb
PUBLIC	stbi_set_flip_vertically_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb_thread
PUBLIC	stbi_set_flip_vertically_on_load_thread
PUBLIC	stbi_zlib_decode_malloc_guesssize
PUBLIC	stbi_zlib_decode_malloc_guesssize_headerflag
PUBLIC	stbi_zlib_decode_malloc
PUBLIC	stbi_zlib_decode_buffer
PUBLIC	stbi_zlib_decode_noheader_malloc
PUBLIC	stbi_zlib_decode_noheader_buffer
PUBLIC	?stbi__unpremultiply_on_load_thread@@YAXH@Z	; stbi__unpremultiply_on_load_thread
PUBLIC	stbi_write_png
PUBLIC	stbi_write_bmp
PUBLIC	stbi_write_tga
PUBLIC	stbi_write_hdr
PUBLIC	stbi_write_jpg
PUBLIC	stbi_write_png_to_func
PUBLIC	stbi_write_bmp_to_func
PUBLIC	stbi_write_tga_to_func
PUBLIC	stbi_write_hdr_to_func
PUBLIC	stbi_write_jpg_to_func
PUBLIC	stbi_flip_vertically_on_write
PUBLIC	stbi_zlib_compress
PUBLIC	stbi_write_png_to_mem
PUBLIC	?NewReflectTree@@YAPEAUReflectTree@@H@Z		; NewReflectTree
PUBLIC	?CreateEnum@@YAPEAUReflectTree@@PEBD@Z		; CreateEnum
PUBLIC	?CreateStruct@@YAPEAUReflectTree@@PEBD@Z	; CreateStruct
PUBLIC	?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z	; AddValue
PUBLIC	?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z ; AddMember
PUBLIC	main
PUBLIC	mg_init_library
PUBLIC	mg_exit_library
PUBLIC	mg_start
PUBLIC	mg_stop
PUBLIC	mg_start_domain
PUBLIC	mg_set_request_handler
PUBLIC	mg_set_websocket_handler
PUBLIC	mg_set_websocket_handler_with_subprotocols
PUBLIC	mg_set_auth_handler
PUBLIC	mg_get_option
PUBLIC	mg_get_context
PUBLIC	mg_get_user_data
PUBLIC	mg_get_user_context_data
PUBLIC	mg_get_thread_pointer
PUBLIC	mg_set_user_connection_data
PUBLIC	mg_get_user_connection_data
PUBLIC	mg_get_request_link
PUBLIC	mg_get_valid_options
PUBLIC	mg_get_server_ports
PUBLIC	mg_modify_passwords_file
PUBLIC	mg_modify_passwords_file_ha1
PUBLIC	mg_get_request_info
PUBLIC	mg_get_response_info
PUBLIC	mg_write
PUBLIC	mg_websocket_write
PUBLIC	mg_websocket_client_write
PUBLIC	mg_lock_connection
PUBLIC	mg_unlock_connection
PUBLIC	mg_lock_context
PUBLIC	mg_unlock_context
PUBLIC	mg_printf
PUBLIC	mg_send_chunk
PUBLIC	mg_send_file
PUBLIC	mg_send_file_body
PUBLIC	mg_send_http_error
PUBLIC	mg_send_http_ok
PUBLIC	mg_send_http_redirect
PUBLIC	mg_send_digest_access_authentication_request
PUBLIC	mg_check_digest_access_authentication
PUBLIC	mg_send_mime_file
PUBLIC	mg_send_mime_file2
PUBLIC	mg_store_body
PUBLIC	mg_read
PUBLIC	mg_get_header
PUBLIC	mg_get_var
PUBLIC	mg_get_var2
PUBLIC	mg_split_form_urlencoded
PUBLIC	mg_get_cookie
PUBLIC	mg_download
PUBLIC	mg_close_connection
PUBLIC	mg_handle_form_request
PUBLIC	mg_start_thread
PUBLIC	mg_get_builtin_mime_type
PUBLIC	mg_get_response_code_text
PUBLIC	mg_version
PUBLIC	mg_url_decode
PUBLIC	mg_url_encode
PUBLIC	mg_base64_encode
PUBLIC	mg_base64_decode
PUBLIC	mg_md5
PUBLIC	mg_match
PUBLIC	mg_cry
PUBLIC	mg_strcasecmp
PUBLIC	mg_strncasecmp
PUBLIC	mg_connect_websocket_client
PUBLIC	mg_connect_websocket_client_extensions
PUBLIC	mg_connect_client
PUBLIC	mg_connect_client_secure
PUBLIC	mg_connect_websocket_client_secure
PUBLIC	mg_connect_websocket_client_secure_extensions
PUBLIC	mg_get_response
PUBLIC	mg_response_header_start
PUBLIC	mg_response_header_add
PUBLIC	mg_response_header_add_lines
PUBLIC	mg_response_header_send
PUBLIC	mg_check_feature
PUBLIC	mg_get_system_info
PUBLIC	mg_get_context_info
PUBLIC	mg_disable_connection_keep_alive
PUBLIC	mg_get_connection_info
PUBLIC	mg_connect_client2
PUBLIC	mg_start2
PUBLIC	mg_start_domain2
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@0a4fb11f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3da685db
PUBLIC	__real@3de978d5
PUBLIC	__real@3e112e0be826d695
PUBLIC	__real@3e800000
PUBLIC	__real@3e991687
PUBLIC	__real@3ea99ae9
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec3ef15
PUBLIC	__real@3ed65e89
PUBLIC	__real@3f000000
PUBLIC	__real@3f0a8bd4
PUBLIC	__real@3f1645a2
PUBLIC	__real@3f3504f3
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3fa73d75
PUBLIC	__real@3fd5555560000000
PUBLIC	__real@3fddb3d7
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff028f5c0000000
PUBLIC	__real@3ff921fafc8b007a
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@4130000000000000
PUBLIC	__real@41cdcd6500000000
PUBLIC	__real@41d0000000000000
PUBLIC	__real@41d80000
PUBLIC	__real@43000000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@46800000
PUBLIC	__real@477fff00
PUBLIC	__real@47800000
PUBLIC	__real@497423f0
PUBLIC	__real@be2cca2e
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c0000000
PUBLIC	__real@c1d80000
PUBLIC	__xmm@00000200000002000000020000000200
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@01010000010100000101000001010000
PUBLIC	__xmm@08a914e808a914e808a914e808a914e8
PUBLIC	__xmm@11c8e09e11c8e09e11c8e09e11c8e09e
PUBLIC	__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
PUBLIC	__xmm@12d0046b12d0046b12d0046b12d0046b
PUBLIC	__xmm@166f166f166f166f166f166f166f166f
PUBLIC	__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
PUBLIC	__xmm@e09ee565e09ee565e09ee565e09ee565
PUBLIC	__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
PUBLIC	__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
PUBLIC	__xmm@f493f493f493f493f493f493f493f493
PUBLIC	__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
PUBLIC	__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
EXTRN	__report_rangecheckfailure:PROC
EXTRN	_aligned_free_dbg:PROC
EXTRN	_aligned_realloc_dbg:PROC
EXTRN	abs:PROC
EXTRN	acos:PROC
EXTRN	cos:PROC
EXTRN	fabs:PROC
EXTRN	fmod:PROC
EXTRN	pow:PROC
EXTRN	sqrt:PROC
EXTRN	atof:PROC
EXTRN	ceil:PROC
EXTRN	floor:PROC
EXTRN	frexp:PROC
EXTRN	ldexp:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	_wfopen:PROC
EXTRN	__stdio_common_vswprintf:PROC
EXTRN	fopen_s:PROC
EXTRN	fclose:PROC
EXTRN	_fdopen:PROC
EXTRN	feof:PROC
EXTRN	ferror:PROC
EXTRN	fflush:PROC
EXTRN	fgetc:PROC
EXTRN	fgets:PROC
EXTRN	_fileno:PROC
EXTRN	fopen:PROC
EXTRN	fputc:PROC
EXTRN	fread:PROC
EXTRN	fseek:PROC
EXTRN	ftell:PROC
EXTRN	fwrite:PROC
EXTRN	_pclose:PROC
EXTRN	_popen:PROC
EXTRN	puts:PROC
EXTRN	remove:PROC
EXTRN	setbuf:PROC
EXTRN	ungetc:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__stdio_common_vsprintf:PROC
EXTRN	__stdio_common_vsprintf_s:PROC
EXTRN	__stdio_common_vsscanf:PROC
EXTRN	calloc:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	_errno:PROC
EXTRN	_lrotl:PROC
EXTRN	atoi:PROC
EXTRN	atol:PROC
EXTRN	strtod:PROC
EXTRN	strtol:PROC
EXTRN	strtoul:PROC
EXTRN	_strtoi64:PROC
EXTRN	_strtoui64:PROC
EXTRN	getenv:PROC
EXTRN	memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strchr:PROC
EXTRN	strrchr:PROC
EXTRN	strstr:PROC
EXTRN	wcscat:PROC
EXTRN	wcscmp:PROC
EXTRN	wcslen:PROC
EXTRN	strcat:PROC
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	strcspn:PROC
EXTRN	strerror:PROC
EXTRN	strlen:PROC
EXTRN	strncmp:PROC
EXTRN	strspn:PROC
EXTRN	isdigit:PROC
EXTRN	isxdigit:PROC
EXTRN	isspace:PROC
EXTRN	isalnum:PROC
EXTRN	isprint:PROC
EXTRN	isgraph:PROC
EXTRN	iscntrl:PROC
EXTRN	toupper:PROC
EXTRN	tolower:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_CreateDirectoryW:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_DeleteFileW:PROC
EXTRN	__imp_FindClose:PROC
EXTRN	__imp_FindFirstFileW:PROC
EXTRN	__imp_FindNextFileW:PROC
EXTRN	__imp_GetFileAttributesA:PROC
EXTRN	__imp_GetFileAttributesW:PROC
EXTRN	__imp_GetFileAttributesExW:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_GetFullPathNameA:PROC
EXTRN	__imp_GetLongPathNameW:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_DuplicateHandle:PROC
EXTRN	__imp_SetHandleInformation:PROC
EXTRN	__imp_RaiseException:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_CreatePipe:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_InitializeCriticalSection:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	__imp_DeleteCriticalSection:PROC
EXTRN	__imp_SetEvent:PROC
EXTRN	__imp_ResetEvent:PROC
EXTRN	__imp_ReleaseMutex:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp_CreateMutexA:PROC
EXTRN	__imp_CreateEventA:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_GetProcessTimes:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_TerminateProcess:PROC
EXTRN	__imp_GetCurrentThread:PROC
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_SetThreadPriority:PROC
EXTRN	__imp_TlsAlloc:PROC
EXTRN	__imp_TlsGetValue:PROC
EXTRN	__imp_TlsSetValue:PROC
EXTRN	__imp_TlsFree:PROC
EXTRN	__imp_CreateProcessA:PROC
EXTRN	__imp_GetThreadTimes:PROC
EXTRN	__imp_GetSystemInfo:PROC
EXTRN	__imp_GetSystemTimeAsFileTime:PROC
EXTRN	__imp_GetVersion:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_IsWow64Process:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryW:PROC
EXTRN	__imp_CopyFileW:PROC
EXTRN	__imp_MoveFileExW:PROC
EXTRN	__imp_MessageBoxA:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_WideCharToMultiByte:PROC
EXTRN	__imp_WriteConsoleW:PROC
EXTRN	__WSAFDIsSet:PROC
EXTRN	__imp_accept:PROC
EXTRN	__imp_bind:PROC
EXTRN	__imp_closesocket:PROC
EXTRN	__imp_connect:PROC
EXTRN	__imp_ioctlsocket:PROC
EXTRN	__imp_getsockname:PROC
EXTRN	__imp_getsockopt:PROC
EXTRN	__imp_htonl:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_listen:PROC
EXTRN	__imp_ntohl:PROC
EXTRN	__imp_ntohs:PROC
EXTRN	__imp_recv:PROC
EXTRN	__imp_select:PROC
EXTRN	__imp_send:PROC
EXTRN	__imp_setsockopt:PROC
EXTRN	__imp_shutdown:PROC
EXTRN	__imp_socket:PROC
EXTRN	__imp_WSAStartup:PROC
EXTRN	__imp_WSACleanup:PROC
EXTRN	__imp_getaddrinfo:PROC
EXTRN	__imp_freeaddrinfo:PROC
EXTRN	__imp_getnameinfo:PROC
EXTRN	_wassert:PROC
EXTRN	_stat64i32:PROC
EXTRN	_difftime64:PROC
EXTRN	_gmtime64:PROC
EXTRN	_localtime64:PROC
EXTRN	_mkgmtime64:PROC
EXTRN	strftime:PROC
EXTRN	_time64:PROC
EXTRN	_rmdir:PROC
EXTRN	_access:PROC
EXTRN	_close:PROC
EXTRN	_get_osfhandle:PROC
EXTRN	_pipe:PROC
EXTRN	_read:PROC
EXTRN	_lseeki64:PROC
EXTRN	_beginthread:PROC
EXTRN	_beginthreadex:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_SEH:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	8

?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA DQ 01H DUP (?) ; Global_TraceMessageHook
_BSS	ENDS
;	COMDAT ?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
_TLS	SEGMENT
?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA DQ 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::Bed
_TLS	ENDS
;	COMDAT ?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
_TLS	SEGMENT
?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA DD 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::$S1
_TLS	ENDS
_BSS	SEGMENT
?STANDARD_BASIS@@3QBTf32x3@@B DB 024H DUP (?)		; STANDARD_BASIS
_BSS	ENDS
_TLS	SEGMENT
?stbi__g_failure_reason@@3PEBDEB DQ 01H DUP (?)		; stbi__g_failure_reason
_TLS	ENDS
_BSS	SEGMENT
?stbi__vertically_flip_on_load_global@@3HA DD 01H DUP (?) ; stbi__vertically_flip_on_load_global
_BSS	ENDS
_TLS	SEGMENT
?stbi__vertically_flip_on_load_local@@3HA DD 01H DUP (?) ; stbi__vertically_flip_on_load_local
?stbi__vertically_flip_on_load_set@@3HA DD 01H DUP (?)	; stbi__vertically_flip_on_load_set
_TLS	ENDS
_BSS	SEGMENT
?stbi__unpremultiply_on_load_global@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_global
?stbi__de_iphone_flag_global@@3HA DD 01H DUP (?)	; stbi__de_iphone_flag_global
_BSS	ENDS
_TLS	SEGMENT
?stbi__unpremultiply_on_load_local@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_local
?stbi__unpremultiply_on_load_set@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_set
?stbi__de_iphone_flag_local@@3HA DD 01H DUP (?)		; stbi__de_iphone_flag_local
?stbi__de_iphone_flag_set@@3HA DD 01H DUP (?)		; stbi__de_iphone_flag_set
_TLS	ENDS
_BSS	SEGMENT
?stbi__flip_vertically_on_write@@3HA DD 01H DUP (?)	; stbi__flip_vertically_on_write
?STANDARD_BASIS_COLOR@@3QBTf32x4@@B DB 030H DUP (?)	; STANDARD_BASIS_COLOR
?Zen@@3UZenCore@@A DB 03728H DUP (?)			; Zen
_BSS	ENDS
;	COMDAT ?perfcnt_per_sec@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4NA
_BSS	SEGMENT
?perfcnt_per_sec@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4NA DQ 01H DUP (?) ; `mg_clock_gettime'::`2'::perfcnt_per_sec
_BSS	ENDS
;	COMDAT ?initialized@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4HA
_BSS	SEGMENT
?initialized@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4HA DD 01H DUP (?) ; `mg_clock_gettime'::`2'::initialized
_BSS	ENDS
_BSS	SEGMENT
?global_log_file_lock@@3Upthread_mutex_t@@A DB 028H DUP (?) ; global_log_file_lock
	ALIGN	8

?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA DQ 01H DUP (?) ; pthread_mutex_attr
?global_lock_mutex@@3Upthread_mutex_t@@A DB 028H DUP (?) ; global_lock_mutex
?mg_init_library_called@@3HA DD 01H DUP (?)		; mg_init_library_called
?mg_openssl_initialized@@3HA DD 01H DUP (?)		; mg_openssl_initialized
?sTlsKey@@3KA DD 01H DUP (?)				; sTlsKey
	ALIGN	8

?thread_idx_max@@3_JC DQ 01H DUP (?)			; thread_idx_max
?tls_feature_missing@@3PAHA DD 02H DUP (?)		; tls_feature_missing
_BSS	ENDS
;	COMDAT ?lfsr@?1??get_random@@YA_KXZ@4_KA
_BSS	SEGMENT
?lfsr@?1??get_random@@YA_KXZ@4_KA DQ 01H DUP (?)	; `get_random'::`2'::lfsr
_BSS	ENDS
;	COMDAT ?lcg@?1??get_random@@YA_KXZ@4_KA
_BSS	SEGMENT
?lcg@?1??get_random@@YA_KXZ@4_KA DQ 01H DUP (?)		; `get_random'::`2'::lcg
_BSS	ENDS
_BSS	SEGMENT
?all_methods@@3PEADEA DQ 01H DUP (?)			; all_methods
?ssl_mutexes@@3PEAUpthread_mutex_t@@EA DQ 01H DUP (?)	; ssl_mutexes
?ssllib_dll_handle@@3PEAXEA DQ 01H DUP (?)		; ssllib_dll_handle
?cryptolib_dll_handle@@3PEAXEA DQ 01H DUP (?)		; cryptolib_dll_handle
?cryptolib_users@@3_JC DQ 01H DUP (?)			; cryptolib_users
?Ali@@3UAlistarContext@@A DB 05d8H DUP (?)		; Ali
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf_l DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$_vsnwprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$_vsnwprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$_vsnprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+110
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsprintf_s DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$vsprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strchr@@YAPEADQEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?strchr@@YAPEADQEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strrchr@@YAPEADQEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?strrchr@@YAPEADQEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strstr@@YAPEADQEADQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?strstr@@YAPEADQEADQEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?rx7__stoi@@YAHHPEA_JQEBD1@Z DD imagerel ?rx7__stoi@@YAHHPEA_JQEBD1@Z
	DD	imagerel ?rx7__stoi@@YAHHPEA_JQEBD1@Z+521
	DD	imagerel $unwind$?rx7__stoi@@YAHHPEA_JQEBD1@Z
$pdata$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
$pdata$??1_TRACE_BLOCK@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+242
	DD	imagerel $unwind$??1_TRACE_BLOCK@@QEAA@XZ
$pdata$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+422
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
$pdata$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+82
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
$pdata$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+82
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
$pdata$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+803
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
$pdata$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+214
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
$pdata$??Bstr32@@QEAA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAA_JXZ
$pdata$??Bstr32@@QEAA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAA_KXZ
$pdata$??Bstr32@@QEAANXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bstr32@@QEAANXZ
$pdata$??Bstr32@@QEAAMXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bstr32@@QEAAMXZ
$pdata$??Bstr32@@QEAAIXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAAIXZ
$pdata$??Bstr32@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAAHXZ
$pdata$??7str32@@QEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??7str32@@QEAAHXZ
$pdata$?strtoi@@YA_JUstr32@@@Z DD imagerel ?strtoi@@YA_JUstr32@@@Z
	DD	imagerel ?strtoi@@YA_JUstr32@@@Z+71
	DD	imagerel $unwind$?strtoi@@YA_JUstr32@@@Z
$pdata$?GetThreadID@@YAHXZ DD imagerel ?GetThreadID@@YAHXZ
	DD	imagerel ?GetThreadID@@YAHXZ+15
	DD	imagerel $unwind$?GetThreadID@@YAHXZ
$pdata$?GetPerformanceFrequency@@YA_KXZ DD imagerel ?GetPerformanceFrequency@@YA_KXZ
	DD	imagerel ?GetPerformanceFrequency@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceFrequency@@YA_KXZ
$pdata$?GetPerformanceCounter@@YA_KXZ DD imagerel ?GetPerformanceCounter@@YA_KXZ
	DD	imagerel ?GetPerformanceCounter@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceCounter@@YA_KXZ
$pdata$?Widen@@YAPEA_WHPEBD@Z DD imagerel ?Widen@@YAPEA_WHPEBD@Z
	DD	imagerel ?Widen@@YAPEA_WHPEBD@Z+339
	DD	imagerel $unwind$?Widen@@YAPEA_WHPEBD@Z
$pdata$?OutputW@@YAXPEB_W@Z DD imagerel ?OutputW@@YAXPEB_W@Z
	DD	imagerel ?OutputW@@YAXPEB_W@Z+106
	DD	imagerel $unwind$?OutputW@@YAXPEB_W@Z
$pdata$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
	DD	imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z+475
	DD	imagerel $unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
$pdata$?UnloadFileData@@YAXPEAX@Z DD imagerel ?UnloadFileData@@YAXPEAX@Z
	DD	imagerel ?UnloadFileData@@YAXPEAX@Z+33
	DD	imagerel $unwind$?UnloadFileData@@YAXPEAX@Z
$pdata$?WriteFileData@@YAIIPEAXPEBD@Z DD imagerel ?WriteFileData@@YAIIPEAXPEBD@Z
	DD	imagerel ?WriteFileData@@YAIIPEAXPEBD@Z+504
	DD	imagerel $unwind$?WriteFileData@@YAIIPEAXPEBD@Z
$pdata$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+794
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
$pdata$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+256
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
$pdata$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
	DD	imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z+119
	DD	imagerel $unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
$pdata$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
	DD	imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z+122
	DD	imagerel $unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
$pdata$?FormatA@@YAPEADPEBDZZ DD imagerel ?FormatA@@YAPEADPEBDZZ
	DD	imagerel ?FormatA@@YAPEADPEBDZZ+104
	DD	imagerel $unwind$?FormatA@@YAPEADPEBDZZ
$pdata$?FormatW@@YAPEA_WPEB_WZZ DD imagerel ?FormatW@@YAPEA_WPEB_WZZ
	DD	imagerel ?FormatW@@YAPEA_WPEB_WZZ+104
	DD	imagerel $unwind$?FormatW@@YAPEA_WPEB_WZZ
$pdata$?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z DD imagerel ?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z
	DD	imagerel ?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z+201
	DD	imagerel $unwind$?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z
$pdata$?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z DD imagerel ?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z
	DD	imagerel ?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z+178
	DD	imagerel $unwind$?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z
$pdata$?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z DD imagerel ?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z
	DD	imagerel ?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z+458
	DD	imagerel $unwind$?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z
$pdata$?CStrW@@YAPEB_WPEBD@Z DD imagerel ?CStrW@@YAPEB_WPEBD@Z
	DD	imagerel ?CStrW@@YAPEB_WPEBD@Z+29
	DD	imagerel $unwind$?CStrW@@YAPEB_WPEBD@Z
$pdata$?IsFileNameReal@@YAHPEBD@Z DD imagerel ?IsFileNameReal@@YAHPEBD@Z
	DD	imagerel ?IsFileNameReal@@YAHPEBD@Z+52
	DD	imagerel $unwind$?IsFileNameReal@@YAHPEBD@Z
$pdata$?TraceMessageKindToString@@YAPEB_WH@Z DD imagerel ?TraceMessageKindToString@@YAPEB_WH@Z
	DD	imagerel ?TraceMessageKindToString@@YAPEB_WH@Z+160
	DD	imagerel $unwind$?TraceMessageKindToString@@YAPEB_WH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ESTANDARD_BASIS@@YAXXZ DD imagerel ??__ESTANDARD_BASIS@@YAXXZ
	DD	imagerel ??__ESTANDARD_BASIS@@YAXXZ+87
	DD	imagerel $unwind$??__ESTANDARD_BASIS@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?PIXEL_FORMAT_SIZE@@YAHH@Z DD imagerel ?PIXEL_FORMAT_SIZE@@YAHH@Z
	DD	imagerel ?PIXEL_FORMAT_SIZE@@YAHH@Z+66
	DD	imagerel $unwind$?PIXEL_FORMAT_SIZE@@YAHH@Z
$pdata$stbtt_BakeFontBitmap DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$stbtt_BakeFontBitmap
$pdata$stbtt_GetBakedQuad DD imagerel $LN5
	DD	imagerel $LN5+547
	DD	imagerel $unwind$stbtt_GetBakedQuad
$pdata$stbtt_GetScaledFontVMetrics DD imagerel $LN5
	DD	imagerel $LN5+265
	DD	imagerel $unwind$stbtt_GetScaledFontVMetrics
$pdata$stbtt_PackBegin DD imagerel $LN10
	DD	imagerel $LN10+413
	DD	imagerel $unwind$stbtt_PackBegin
$pdata$stbtt_PackEnd DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$stbtt_PackEnd
$pdata$stbtt_PackFontRange DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_PackFontRange
$pdata$stbtt_PackFontRanges DD imagerel $LN13
	DD	imagerel $LN13+595
	DD	imagerel $unwind$stbtt_PackFontRanges
$pdata$stbtt_PackSetOversampling DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$stbtt_PackSetOversampling
$pdata$stbtt_GetPackedQuad DD imagerel $LN5
	DD	imagerel $LN5+620
	DD	imagerel $unwind$stbtt_GetPackedQuad
$pdata$stbtt_PackFontRangesGatherRects DD imagerel $LN17
	DD	imagerel $LN17+832
	DD	imagerel $unwind$stbtt_PackFontRangesGatherRects
$pdata$stbtt_PackFontRangesPackRects DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbtt_PackFontRangesPackRects
$pdata$stbtt_PackFontRangesRenderIntoRects DD imagerel $LN22
	DD	imagerel $LN22+2037
	DD	imagerel $unwind$stbtt_PackFontRangesRenderIntoRects
$pdata$stbtt_GetNumberOfFonts DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stbtt_GetNumberOfFonts
$pdata$stbtt_GetFontOffsetForIndex DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex
$pdata$stbtt_InitFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_InitFont
$pdata$stbtt_FindGlyphIndex DD imagerel $LN33
	DD	imagerel $LN33+1538
	DD	imagerel $unwind$stbtt_FindGlyphIndex
$pdata$stbtt_ScaleForPixelHeight DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$stbtt_ScaleForPixelHeight
$pdata$stbtt_ScaleForMappingEmToPixels DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$stbtt_ScaleForMappingEmToPixels
$pdata$stbtt_GetFontVMetrics DD imagerel $LN6
	DD	imagerel $LN6+170
	DD	imagerel $unwind$stbtt_GetFontVMetrics
$pdata$stbtt_GetFontVMetricsOS2 DD imagerel $LN7
	DD	imagerel $LN7+210
	DD	imagerel $unwind$stbtt_GetFontVMetricsOS2
$pdata$stbtt_GetFontBoundingBox DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$stbtt_GetFontBoundingBox
$pdata$stbtt_GetCodepointHMetrics DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$stbtt_GetCodepointHMetrics
$pdata$stbtt_GetCodepointKernAdvance DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$stbtt_GetCodepointKernAdvance
$pdata$stbtt_GetCodepointBox DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$stbtt_GetCodepointBox
$pdata$stbtt_GetGlyphHMetrics DD imagerel $LN9
	DD	imagerel $LN9+357
	DD	imagerel $unwind$stbtt_GetGlyphHMetrics
$pdata$stbtt_GetGlyphKernAdvance DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$stbtt_GetGlyphKernAdvance
$pdata$stbtt_GetGlyphBox DD imagerel $LN10
	DD	imagerel $LN10+297
	DD	imagerel $unwind$stbtt_GetGlyphBox
$pdata$stbtt_GetKerningTableLength DD imagerel $LN6
	DD	imagerel $LN6+130
	DD	imagerel $unwind$stbtt_GetKerningTableLength
$pdata$stbtt_GetKerningTable DD imagerel $LN10
	DD	imagerel $LN10+349
	DD	imagerel $unwind$stbtt_GetKerningTable
$pdata$stbtt_IsGlyphEmpty DD imagerel $LN9
	DD	imagerel $LN9+185
	DD	imagerel $unwind$stbtt_IsGlyphEmpty
$pdata$stbtt_GetCodepointShape DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointShape
$pdata$stbtt_GetGlyphShape DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$stbtt_GetGlyphShape
$pdata$stbtt_FreeShape DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$stbtt_FreeShape
$pdata$stbtt_FindSVGDoc DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$stbtt_FindSVGDoc
$pdata$stbtt_GetCodepointSVG DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointSVG
$pdata$stbtt_GetGlyphSVG DD imagerel $LN6
	DD	imagerel $LN6+162
	DD	imagerel $unwind$stbtt_GetGlyphSVG
$pdata$stbtt_FreeBitmap DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$stbtt_FreeBitmap
$pdata$stbtt_GetCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_GetCodepointBitmap
$pdata$stbtt_GetCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$stbtt_GetCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$stbtt_MakeCodepointBitmap
$pdata$stbtt_MakeCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmapSubpixelPrefilter DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter
$pdata$stbtt_GetCodepointBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBox
$pdata$stbtt_GetCodepointBitmapBoxSubpixel DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBoxSubpixel
$pdata$stbtt_GetGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_GetGlyphBitmap
$pdata$stbtt_GetGlyphBitmapSubpixel DD imagerel $LN12
	DD	imagerel $LN12+683
	DD	imagerel $unwind$stbtt_GetGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$stbtt_MakeGlyphBitmap
$pdata$stbtt_MakeGlyphBitmapSubpixel DD imagerel $LN4
	DD	imagerel $LN4+382
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmapSubpixelPrefilter DD imagerel $LN5
	DD	imagerel $LN5+310
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter
$pdata$stbtt_GetGlyphBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBox
$pdata$stbtt_GetGlyphBitmapBoxSubpixel DD imagerel $LN13
	DD	imagerel $LN13+415
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBoxSubpixel
$pdata$stbtt_Rasterize DD imagerel $LN6
	DD	imagerel $LN6+353
	DD	imagerel $unwind$stbtt_Rasterize
$pdata$stbtt_FreeSDF DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$stbtt_FreeSDF
$pdata$stbtt_GetGlyphSDF DD imagerel $LN83
	DD	imagerel $LN83+6492
	DD	imagerel $unwind$stbtt_GetGlyphSDF
$pdata$stbtt_GetCodepointSDF DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$stbtt_GetCodepointSDF
$pdata$stbtt_FindMatchingFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_FindMatchingFont
$pdata$stbtt_CompareUTF8toUTF16_bigendian DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$stbtt_CompareUTF8toUTF16_bigendian
$pdata$stbtt_GetFontNameString DD imagerel $LN8
	DD	imagerel $LN8+445
	DD	imagerel $unwind$stbtt_GetFontNameString
$pdata$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z+82
	DD	imagerel $unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
$pdata$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z+121
	DD	imagerel $unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
$pdata$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z+42
	DD	imagerel $unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
$pdata$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z+139
	DD	imagerel $unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
$pdata$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
	DD	imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z+104
	DD	imagerel $unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
$pdata$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
	DD	imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z+156
	DD	imagerel $unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
$pdata$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
	DD	imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z+228
	DD	imagerel $unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
$pdata$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z+288
	DD	imagerel $unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
$pdata$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z+162
	DD	imagerel $unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
$pdata$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
	DD	imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z+283
	DD	imagerel $unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
$pdata$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
	DD	imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z+141
	DD	imagerel $unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
$pdata$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z+41
	DD	imagerel $unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
$pdata$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z+293
	DD	imagerel $unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
$pdata$?stbtt__find_table@@YAIPEAEIPEBD@Z DD imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z
	DD	imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z+349
	DD	imagerel $unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z
$pdata$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
	DD	imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z+366
	DD	imagerel $unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
$pdata$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z DD imagerel ?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z
	DD	imagerel ?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z+283
	DD	imagerel $unwind$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z
$pdata$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
	DD	imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z+416
	DD	imagerel $unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
$pdata$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z DD imagerel ?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z
	DD	imagerel ?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z+137
	DD	imagerel $unwind$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z
$pdata$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
	DD	imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z+2243
	DD	imagerel $unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
$pdata$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z+392
	DD	imagerel $unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
$pdata$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
	DD	imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z+387
	DD	imagerel $unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
$pdata$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
	DD	imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z+416
	DD	imagerel $unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
$pdata$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+5048
	DD	imagerel $unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
$pdata$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
	DD	imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z+250
	DD	imagerel $unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
$pdata$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z+130
	DD	imagerel $unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
$pdata$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z+214
	DD	imagerel $unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
$pdata$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z+148
	DD	imagerel $unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
$pdata$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
	DD	imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z+244
	DD	imagerel $unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
$pdata$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z+257
	DD	imagerel $unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
$pdata$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z+533
	DD	imagerel $unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
$pdata$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z+5164
	DD	imagerel $unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
$pdata$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+405
	DD	imagerel $unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
$pdata$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD imagerel ?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
	DD	imagerel ?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z+313
	DD	imagerel $unwind$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
$pdata$?stbtt__GetCoverageIndex@@YAHPEAEH@Z DD imagerel ?stbtt__GetCoverageIndex@@YAHPEAEH@Z
	DD	imagerel ?stbtt__GetCoverageIndex@@YAHPEAEH@Z+553
	DD	imagerel $unwind$?stbtt__GetCoverageIndex@@YAHPEAEH@Z
$pdata$?stbtt__GetGlyphClass@@YAHPEAEH@Z DD imagerel ?stbtt__GetGlyphClass@@YAHPEAEH@Z
	DD	imagerel ?stbtt__GetGlyphClass@@YAHPEAEH@Z+472
	DD	imagerel $unwind$?stbtt__GetGlyphClass@@YAHPEAEH@Z
$pdata$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD imagerel ?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
	DD	imagerel ?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z+1552
	DD	imagerel $unwind$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
$pdata$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
	DD	imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z+299
	DD	imagerel $unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
$pdata$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z+75
	DD	imagerel $unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
$pdata$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
	DD	imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z+439
	DD	imagerel $unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
$pdata$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
	DD	imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z+1085
	DD	imagerel $unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
$pdata$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z
	DD	imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z+137
	DD	imagerel $unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z
$pdata$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z
	DD	imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z+71
	DD	imagerel $unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z
$pdata$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
	DD	imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z+4079
	DD	imagerel $unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
$pdata$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z+1281
	DD	imagerel $unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
$pdata$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z+340
	DD	imagerel $unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z+1114
	DD	imagerel $unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z+46
	DD	imagerel $unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z+1002
	DD	imagerel $unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
$pdata$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z+637
	DD	imagerel $unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
$pdata$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z+1345
	DD	imagerel $unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
$pdata$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
	DD	imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z+1479
	DD	imagerel $unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
$pdata$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z DD imagerel ?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z
	DD	imagerel ?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z+927
	DD	imagerel $unwind$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z
$pdata$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z DD imagerel ?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z
	DD	imagerel ?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z+384
	DD	imagerel $unwind$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z
$pdata$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z+1090
	DD	imagerel $unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z
$pdata$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z+1213
	DD	imagerel $unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z
$pdata$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z DD imagerel ?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z
	DD	imagerel ?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z+1800
	DD	imagerel $unwind$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z
$pdata$?equal@@YAHPEAM0@Z DD imagerel ?equal@@YAHPEAM0@Z
	DD	imagerel ?equal@@YAHPEAM0@Z+122
	DD	imagerel $unwind$?equal@@YAHPEAM0@Z
$pdata$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z+2325
	DD	imagerel $unwind$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
$pdata$?stbtt__cuberoot@@YAMM@Z DD imagerel ?stbtt__cuberoot@@YAMM@Z
	DD	imagerel ?stbtt__cuberoot@@YAMM@Z+93
	DD	imagerel $unwind$?stbtt__cuberoot@@YAMM@Z
$pdata$?stbtt__solve_cubic@@YAHMMMPEAM@Z DD imagerel ?stbtt__solve_cubic@@YAHMMMPEAM@Z
	DD	imagerel ?stbtt__solve_cubic@@YAHMMMPEAM@Z+769
	DD	imagerel $unwind$?stbtt__solve_cubic@@YAHMMMPEAM@Z
$pdata$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z DD imagerel ?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z
	DD	imagerel ?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z+1079
	DD	imagerel $unwind$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z
$pdata$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z DD imagerel ?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z
	DD	imagerel ?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z+80
	DD	imagerel $unwind$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z
$pdata$?stbtt__matchpair@@YAHPEAEI0HHH@Z DD imagerel ?stbtt__matchpair@@YAHPEAEI0HHH@Z
	DD	imagerel ?stbtt__matchpair@@YAHPEAEI0HHH@Z+874
	DD	imagerel $unwind$?stbtt__matchpair@@YAHPEAEI0HHH@Z
$pdata$?stbtt__matches@@YAHPEAEI0H@Z DD imagerel ?stbtt__matches@@YAHPEAEI0H@Z
	DD	imagerel ?stbtt__matches@@YAHPEAEI0H@Z+526
	DD	imagerel $unwind$?stbtt__matches@@YAHPEAEI0H@Z
$pdata$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z DD imagerel ?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z
	DD	imagerel ?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z+111
	DD	imagerel $unwind$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z
$pdata$stbi_load_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_from_memory
$pdata$stbi_load_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_from_callbacks
$pdata$stbi_load DD imagerel $LN6
	DD	imagerel $LN6+156
	DD	imagerel $unwind$stbi_load
$pdata$stbi_load_from_file DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$stbi_load_from_file
$pdata$stbi_load_gif_from_memory DD imagerel $LN6
	DD	imagerel $LN6+315
	DD	imagerel $unwind$stbi_load_gif_from_memory
$pdata$stbi_load_16_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_16_from_memory
$pdata$stbi_load_16_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_16_from_callbacks
$pdata$stbi_load_16 DD imagerel $LN6
	DD	imagerel $LN6+156
	DD	imagerel $unwind$stbi_load_16
$pdata$stbi_load_from_file_16 DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$stbi_load_from_file_16
$pdata$stbi_loadf_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_loadf_from_memory
$pdata$stbi_loadf_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_loadf_from_callbacks
$pdata$stbi_loadf DD imagerel $LN6
	DD	imagerel $LN6+156
	DD	imagerel $unwind$stbi_loadf
$pdata$stbi_loadf_from_file DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$stbi_loadf_from_file
$pdata$stbi_is_hdr_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_hdr_from_callbacks
$pdata$stbi_is_hdr_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_hdr_from_memory
$pdata$stbi_is_hdr DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$stbi_is_hdr
$pdata$stbi_is_hdr_from_file DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbi_is_hdr_from_file
$pdata$stbi_image_free DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stbi_image_free
$pdata$stbi_info_from_memory DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbi_info_from_memory
$pdata$stbi_info_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_info_from_callbacks
$pdata$stbi_is_16_bit_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_16_bit_from_memory
$pdata$stbi_is_16_bit_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_16_bit_from_callbacks
$pdata$stbi_info DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$stbi_info
$pdata$stbi_info_from_file DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$stbi_info_from_file
$pdata$stbi_is_16_bit DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$stbi_is_16_bit
$pdata$stbi_is_16_bit_from_file DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbi_is_16_bit_from_file
$pdata$stbi_zlib_decode_malloc_guesssize DD imagerel $LN7
	DD	imagerel $LN7+249
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize
$pdata$stbi_zlib_decode_malloc_guesssize_headerflag DD imagerel $LN7
	DD	imagerel $LN7+252
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize_headerflag
$pdata$stbi_zlib_decode_malloc DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbi_zlib_decode_malloc
$pdata$stbi_zlib_decode_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_buffer
$pdata$stbi_zlib_decode_noheader_malloc DD imagerel $LN7
	DD	imagerel $LN7+236
	DD	imagerel $unwind$stbi_zlib_decode_noheader_malloc
$pdata$stbi_zlib_decode_noheader_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_noheader_buffer
$pdata$?stbi__cpuid3@@YAHXZ DD imagerel ?stbi__cpuid3@@YAHXZ
	DD	imagerel ?stbi__cpuid3@@YAHXZ+80
	DD	imagerel $unwind$?stbi__cpuid3@@YAHXZ
$pdata$?stbi__sse2_available@@YAHXZ DD imagerel ?stbi__sse2_available@@YAHXZ
	DD	imagerel ?stbi__sse2_available@@YAHXZ+54
	DD	imagerel $unwind$?stbi__sse2_available@@YAHXZ
$pdata$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z DD imagerel ?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z
	DD	imagerel ?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z+241
	DD	imagerel $unwind$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z
$pdata$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z DD imagerel ?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z
	DD	imagerel ?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z+147
	DD	imagerel $unwind$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z
$pdata$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z DD imagerel ?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z
	DD	imagerel ?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z+184
	DD	imagerel $unwind$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z
$pdata$?stbi__stdio_read@@YAHPEAXPEADH@Z DD imagerel ?stbi__stdio_read@@YAHPEAXPEADH@Z
	DD	imagerel ?stbi__stdio_read@@YAHPEAXPEADH@Z+52
	DD	imagerel $unwind$?stbi__stdio_read@@YAHPEAXPEADH@Z
$pdata$?stbi__stdio_skip@@YAXPEAXH@Z DD imagerel ?stbi__stdio_skip@@YAXPEAXH@Z
	DD	imagerel ?stbi__stdio_skip@@YAXPEAXH@Z+73
	DD	imagerel $unwind$?stbi__stdio_skip@@YAXPEAXH@Z
$pdata$?stbi__stdio_eof@@YAHPEAX@Z DD imagerel ?stbi__stdio_eof@@YAHPEAX@Z
	DD	imagerel ?stbi__stdio_eof@@YAHPEAX@Z+64
	DD	imagerel $unwind$?stbi__stdio_eof@@YAHPEAX@Z
$pdata$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z DD imagerel ?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z
	DD	imagerel ?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z+41
	DD	imagerel $unwind$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z
$pdata$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z+117
	DD	imagerel $unwind$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+172
	DD	imagerel $unwind$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z+122
	DD	imagerel $unwind$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__png_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__png_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__png_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__png_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+94
	DD	imagerel $unwind$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z+64
	DD	imagerel $unwind$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__png_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__png_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__png_is16@@YAHPEAUstbi__context@@@Z+76
	DD	imagerel $unwind$?stbi__png_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__bmp_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__bmp_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+4549
	DD	imagerel $unwind$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z+249
	DD	imagerel $unwind$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__tga_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__tga_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__tga_test@@YAHPEAUstbi__context@@@Z+402
	DD	imagerel $unwind$?stbi__tga_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+2679
	DD	imagerel $unwind$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z+612
	DD	imagerel $unwind$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__psd_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__psd_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__psd_test@@YAHPEAUstbi__context@@@Z+71
	DD	imagerel $unwind$?stbi__psd_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD imagerel ?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
	DD	imagerel ?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z+2963
	DD	imagerel $unwind$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
$pdata$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z+327
	DD	imagerel $unwind$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__psd_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__psd_is16@@YAHPEAUstbi__context@@@Z+194
	DD	imagerel $unwind$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__hdr_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__hdr_test@@YAHPEAUstbi__context@@@Z+87
	DD	imagerel $unwind$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+2323
	DD	imagerel $unwind$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z+539
	DD	imagerel $unwind$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pic_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pic_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pic_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__pic_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+656
	DD	imagerel $unwind$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z+652
	DD	imagerel $unwind$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__gif_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__gif_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__gif_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__gif_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+316
	DD	imagerel $unwind$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z DD imagerel ?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
	DD	imagerel ?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z+1005
	DD	imagerel $unwind$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
$pdata$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z+54
	DD	imagerel $unwind$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pnm_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pnm_test@@YAHPEAUstbi__context@@@Z+91
	DD	imagerel $unwind$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+661
	DD	imagerel $unwind$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z+379
	DD	imagerel $unwind$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z+46
	DD	imagerel $unwind$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__malloc@@YAPEAX_K@Z DD imagerel ?stbi__malloc@@YAPEAX_K@Z
	DD	imagerel ?stbi__malloc@@YAPEAX_K@Z+24
	DD	imagerel $unwind$?stbi__malloc@@YAPEAX_K@Z
$pdata$?stbi__addsizes_valid@@YAHHH@Z DD imagerel ?stbi__addsizes_valid@@YAHHH@Z
	DD	imagerel ?stbi__addsizes_valid@@YAHHH@Z+62
	DD	imagerel $unwind$?stbi__addsizes_valid@@YAHHH@Z
$pdata$?stbi__mul2sizes_valid@@YAHHH@Z DD imagerel ?stbi__mul2sizes_valid@@YAHHH@Z
	DD	imagerel ?stbi__mul2sizes_valid@@YAHHH@Z+84
	DD	imagerel $unwind$?stbi__mul2sizes_valid@@YAHHH@Z
$pdata$?stbi__mad2sizes_valid@@YAHHHH@Z DD imagerel ?stbi__mad2sizes_valid@@YAHHHH@Z
	DD	imagerel ?stbi__mad2sizes_valid@@YAHHHH@Z+85
	DD	imagerel $unwind$?stbi__mad2sizes_valid@@YAHHHH@Z
$pdata$?stbi__mad3sizes_valid@@YAHHHHH@Z DD imagerel ?stbi__mad3sizes_valid@@YAHHHHH@Z
	DD	imagerel ?stbi__mad3sizes_valid@@YAHHHHH@Z+119
	DD	imagerel $unwind$?stbi__mad3sizes_valid@@YAHHHHH@Z
$pdata$?stbi__mad4sizes_valid@@YAHHHHHH@Z DD imagerel ?stbi__mad4sizes_valid@@YAHHHHHH@Z
	DD	imagerel ?stbi__mad4sizes_valid@@YAHHHHHH@Z+153
	DD	imagerel $unwind$?stbi__mad4sizes_valid@@YAHHHHHH@Z
$pdata$?stbi__malloc_mad2@@YAPEAXHHH@Z DD imagerel ?stbi__malloc_mad2@@YAPEAXHHH@Z
	DD	imagerel ?stbi__malloc_mad2@@YAPEAXHHH@Z+71
	DD	imagerel $unwind$?stbi__malloc_mad2@@YAPEAXHHH@Z
$pdata$?stbi__malloc_mad3@@YAPEAXHHHH@Z DD imagerel ?stbi__malloc_mad3@@YAPEAXHHHH@Z
	DD	imagerel ?stbi__malloc_mad3@@YAPEAXHHHH@Z+86
	DD	imagerel $unwind$?stbi__malloc_mad3@@YAPEAXHHHH@Z
$pdata$?stbi__malloc_mad4@@YAPEAXHHHHH@Z DD imagerel ?stbi__malloc_mad4@@YAPEAXHHHHH@Z
	DD	imagerel ?stbi__malloc_mad4@@YAPEAXHHHHH@Z+99
	DD	imagerel $unwind$?stbi__malloc_mad4@@YAPEAXHHHHH@Z
$pdata$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z DD imagerel ?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z
	DD	imagerel ?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z+484
	DD	imagerel $unwind$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z
$pdata$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z DD imagerel ?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z
	DD	imagerel ?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z+564
	DD	imagerel $unwind$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z
$pdata$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD imagerel ?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
	DD	imagerel ?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z+819
	DD	imagerel $unwind$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
$pdata$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z DD imagerel ?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z
	DD	imagerel ?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z+195
	DD	imagerel $unwind$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z
$pdata$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z DD imagerel ?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z
	DD	imagerel ?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z+210
	DD	imagerel $unwind$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z
$pdata$?stbi__vertical_flip@@YAXPEAXHHH@Z DD imagerel ?stbi__vertical_flip@@YAXPEAXHHH@Z
	DD	imagerel ?stbi__vertical_flip@@YAXPEAXHHH@Z+410
	DD	imagerel $unwind$?stbi__vertical_flip@@YAXPEAXHHH@Z
$pdata$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z DD imagerel ?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z
	DD	imagerel ?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z+133
	DD	imagerel $unwind$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z
$pdata$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z+453
	DD	imagerel $unwind$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z+459
	DD	imagerel $unwind$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z DD imagerel ?stbi__float_postprocess@@YAXPEAMPEAH11H@Z
	DD	imagerel ?stbi__float_postprocess@@YAXPEAMPEAH11H@Z+194
	DD	imagerel $unwind$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z
$pdata$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z+57
	DD	imagerel $unwind$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z+354
	DD	imagerel $unwind$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__get8@@YAEPEAUstbi__context@@@Z DD imagerel ?stbi__get8@@YAEPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get8@@YAEPEAUstbi__context@@@Z+169
	DD	imagerel $unwind$?stbi__get8@@YAEPEAUstbi__context@@@Z
$pdata$?stbi__at_eof@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__at_eof@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__at_eof@@YAHPEAUstbi__context@@@Z+127
	DD	imagerel $unwind$?stbi__at_eof@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__skip@@YAXPEAUstbi__context@@H@Z DD imagerel ?stbi__skip@@YAXPEAUstbi__context@@H@Z
	DD	imagerel ?stbi__skip@@YAXPEAUstbi__context@@H@Z+215
	DD	imagerel $unwind$?stbi__skip@@YAXPEAUstbi__context@@H@Z
$pdata$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z DD imagerel ?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z
	DD	imagerel ?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z+355
	DD	imagerel $unwind$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z
$pdata$?stbi__get16be@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__get16be@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get16be@@YAHPEAUstbi__context@@@Z+63
	DD	imagerel $unwind$?stbi__get16be@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__get32be@@YAIPEAUstbi__context@@@Z DD imagerel ?stbi__get32be@@YAIPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get32be@@YAIPEAUstbi__context@@@Z+57
	DD	imagerel $unwind$?stbi__get32be@@YAIPEAUstbi__context@@@Z
$pdata$?stbi__get16le@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__get16le@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get16le@@YAHPEAUstbi__context@@@Z+55
	DD	imagerel $unwind$?stbi__get16le@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__get32le@@YAIPEAUstbi__context@@@Z DD imagerel ?stbi__get32le@@YAIPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get32le@@YAIPEAUstbi__context@@@Z+57
	DD	imagerel $unwind$?stbi__get32le@@YAIPEAUstbi__context@@@Z
$pdata$?stbi__convert_format@@YAPEAEPEAEHHII@Z DD imagerel ?stbi__convert_format@@YAPEAEPEAEHHII@Z
	DD	imagerel ?stbi__convert_format@@YAPEAEPEAEHHII@Z+2660
	DD	imagerel $unwind$?stbi__convert_format@@YAPEAEPEAEHHII@Z
$pdata$?stbi__convert_format16@@YAPEAGPEAGHHII@Z DD imagerel ?stbi__convert_format16@@YAPEAGPEAGHHII@Z
	DD	imagerel ?stbi__convert_format16@@YAPEAGPEAGHHII@Z+2712
	DD	imagerel $unwind$?stbi__convert_format16@@YAPEAGPEAGHHII@Z
$pdata$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z DD imagerel ?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z
	DD	imagerel ?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z+658
	DD	imagerel $unwind$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z
$pdata$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z DD imagerel ?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z
	DD	imagerel ?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z+367
	DD	imagerel $unwind$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z
$pdata$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z+264
	DD	imagerel $unwind$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z DD imagerel ?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z
	DD	imagerel ?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z+661
	DD	imagerel $unwind$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z
$pdata$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z+209
	DD	imagerel $unwind$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z+164
	DD	imagerel $unwind$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z+110
	DD	imagerel $unwind$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z DD imagerel ?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z
	DD	imagerel ?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z+762
	DD	imagerel $unwind$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z
$pdata$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z DD imagerel ?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z
	DD	imagerel ?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z+414
	DD	imagerel $unwind$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z
$pdata$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z DD imagerel ?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z
	DD	imagerel ?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z+1710
	DD	imagerel $unwind$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z
$pdata$?stbi__idct_block@@YAXPEAEHQEAF@Z DD imagerel ?stbi__idct_block@@YAXPEAEHQEAF@Z
	DD	imagerel ?stbi__idct_block@@YAXPEAEHQEAF@Z+2715
	DD	imagerel $unwind$?stbi__idct_block@@YAXPEAEHQEAF@Z
$pdata$?stbi__idct_simd@@YAXPEAEHQEAF@Z DD imagerel ?stbi__idct_simd@@YAXPEAEHQEAF@Z
	DD	imagerel ?stbi__idct_simd@@YAXPEAEHQEAF@Z+11018
	DD	imagerel $unwind$?stbi__idct_simd@@YAXPEAEHQEAF@Z
$pdata$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z DD imagerel ?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z+137
	DD	imagerel $unwind$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z+237
	DD	imagerel $unwind$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z+3188
	DD	imagerel $unwind$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z DD imagerel ?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z
	DD	imagerel ?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z+88
	DD	imagerel $unwind$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z
$pdata$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z+467
	DD	imagerel $unwind$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z+1716
	DD	imagerel $unwind$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z+812
	DD	imagerel $unwind$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z DD imagerel ?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z
	DD	imagerel ?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z+352
	DD	imagerel $unwind$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z
$pdata$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z+2318
	DD	imagerel $unwind$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z+345
	DD	imagerel $unwind$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z+487
	DD	imagerel $unwind$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z+110
	DD	imagerel $unwind$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z+474
	DD	imagerel $unwind$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z+383
	DD	imagerel $unwind$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z+1637
	DD	imagerel $unwind$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z+131
	DD	imagerel $unwind$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z
$pdata$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z DD imagerel ?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z
	DD	imagerel ?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z+451
	DD	imagerel $unwind$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z
$pdata$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z DD imagerel ?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z
	DD	imagerel ?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z+1986
	DD	imagerel $unwind$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z
$pdata$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z+137
	DD	imagerel $unwind$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z+38
	DD	imagerel $unwind$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__blinn_8x8@@YAEEE@Z DD imagerel ?stbi__blinn_8x8@@YAEEE@Z
	DD	imagerel ?stbi__blinn_8x8@@YAEEE@Z+54
	DD	imagerel $unwind$?stbi__blinn_8x8@@YAEEE@Z
$pdata$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z DD imagerel ?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
	DD	imagerel ?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z+4606
	DD	imagerel $unwind$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
$pdata$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z DD imagerel ?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z
	DD	imagerel ?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z+172
	DD	imagerel $unwind$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z
$pdata$?stbi__bit_reverse@@YAHHH@Z DD imagerel ?stbi__bit_reverse@@YAHHH@Z
	DD	imagerel ?stbi__bit_reverse@@YAHHH@Z+71
	DD	imagerel $unwind$?stbi__bit_reverse@@YAHHH@Z
$pdata$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z DD imagerel ?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
	DD	imagerel ?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z+896
	DD	imagerel $unwind$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
$pdata$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z+52
	DD	imagerel $unwind$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z DD imagerel ?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z+77
	DD	imagerel $unwind$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z
$pdata$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z DD imagerel ?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z+181
	DD	imagerel $unwind$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z
$pdata$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z DD imagerel ?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z
	DD	imagerel ?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z+143
	DD	imagerel $unwind$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z
$pdata$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD imagerel ?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
	DD	imagerel ?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z+290
	DD	imagerel $unwind$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
$pdata$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD imagerel ?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
	DD	imagerel ?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z+193
	DD	imagerel $unwind$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
$pdata$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z DD imagerel ?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z
	DD	imagerel ?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z+324
	DD	imagerel $unwind$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z
$pdata$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z+716
	DD	imagerel $unwind$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z+787
	DD	imagerel $unwind$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z+498
	DD	imagerel $unwind$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z+178
	DD	imagerel $unwind$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z DD imagerel ?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z
	DD	imagerel ?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z+296
	DD	imagerel $unwind$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z
$pdata$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z DD imagerel ?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z
	DD	imagerel ?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z+108
	DD	imagerel $unwind$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z
$pdata$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z DD imagerel ?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z
	DD	imagerel ?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z+47
	DD	imagerel $unwind$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z
$pdata$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__check_png_header@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__check_png_header@@YAHPEAUstbi__context@@@Z+95
	DD	imagerel $unwind$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__paeth@@YAHHHH@Z DD imagerel ?stbi__paeth@@YAHHHH@Z
	DD	imagerel ?stbi__paeth@@YAHHHH@Z+157
	DD	imagerel $unwind$?stbi__paeth@@YAHHHH@Z
$pdata$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z DD imagerel ?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z
	DD	imagerel ?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z+6308
	DD	imagerel $unwind$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z
$pdata$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z DD imagerel ?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
	DD	imagerel ?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z+1284
	DD	imagerel $unwind$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
$pdata$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z DD imagerel ?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z
	DD	imagerel ?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z+450
	DD	imagerel $unwind$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z
$pdata$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z DD imagerel ?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z
	DD	imagerel ?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z+453
	DD	imagerel $unwind$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z
$pdata$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z DD imagerel ?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z
	DD	imagerel ?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z+562
	DD	imagerel $unwind$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z
$pdata$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z DD imagerel ?stbi__de_iphone@@YAXPEAUstbi__png@@@Z
	DD	imagerel ?stbi__de_iphone@@YAXPEAUstbi__png@@@Z+800
	DD	imagerel $unwind$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z
$pdata$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z DD imagerel ?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
	DD	imagerel ?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z+3410
	DD	imagerel $unwind$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
$pdata$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z+578
	DD	imagerel $unwind$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z DD imagerel ?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z
	DD	imagerel ?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z+150
	DD	imagerel $unwind$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z
$pdata$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z+180
	DD	imagerel $unwind$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__high_bit@@YAHI@Z DD imagerel ?stbi__high_bit@@YAHI@Z
	DD	imagerel ?stbi__high_bit@@YAHI@Z+169
	DD	imagerel $unwind$?stbi__high_bit@@YAHI@Z
$pdata$?stbi__shiftsigned@@YAHIHH@Z DD imagerel ?stbi__shiftsigned@@YAHIHH@Z
	DD	imagerel ?stbi__shiftsigned@@YAHIHH@Z+206
	DD	imagerel $unwind$?stbi__shiftsigned@@YAHIHH@Z
$pdata$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z DD imagerel ?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z
	DD	imagerel ?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z+1359
	DD	imagerel $unwind$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z
$pdata$?stbi__tga_get_comp@@YAHHHPEAH@Z DD imagerel ?stbi__tga_get_comp@@YAHHHPEAH@Z
	DD	imagerel ?stbi__tga_get_comp@@YAHHHPEAH@Z+144
	DD	imagerel $unwind$?stbi__tga_get_comp@@YAHHHPEAH@Z
$pdata$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z DD imagerel ?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z
	DD	imagerel ?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z+197
	DD	imagerel $unwind$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z
$pdata$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z DD imagerel ?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z
	DD	imagerel ?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z+318
	DD	imagerel $unwind$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z
$pdata$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z DD imagerel ?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z
	DD	imagerel ?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z+88
	DD	imagerel $unwind$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z
$pdata$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z+108
	DD	imagerel $unwind$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z DD imagerel ?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z
	DD	imagerel ?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z+169
	DD	imagerel $unwind$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z
$pdata$?stbi__copyval@@YAXHPEAEPEBE@Z DD imagerel ?stbi__copyval@@YAXHPEAEPEBE@Z
	DD	imagerel ?stbi__copyval@@YAXHPEAEPEBE@Z+108
	DD	imagerel $unwind$?stbi__copyval@@YAXHPEAEPEBE@Z
$pdata$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z DD imagerel ?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
	DD	imagerel ?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z+1609
	DD	imagerel $unwind$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
$pdata$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z+152
	DD	imagerel $unwind$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z DD imagerel ?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z
	DD	imagerel ?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z+235
	DD	imagerel $unwind$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z
$pdata$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z DD imagerel ?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z
	DD	imagerel ?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z+524
	DD	imagerel $unwind$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z
$pdata$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z+180
	DD	imagerel $unwind$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z DD imagerel ?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z
	DD	imagerel ?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z+662
	DD	imagerel $unwind$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z
$pdata$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z DD imagerel ?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z
	DD	imagerel ?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z+1107
	DD	imagerel $unwind$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z
$pdata$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z DD imagerel ?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z
	DD	imagerel ?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z+2536
	DD	imagerel $unwind$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z
$pdata$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z DD imagerel ?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z
	DD	imagerel ?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z+155
	DD	imagerel $unwind$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z
$pdata$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z DD imagerel ?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z
	DD	imagerel ?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z+109
	DD	imagerel $unwind$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z
$pdata$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z+179
	DD	imagerel $unwind$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z
$pdata$?stbi__hdr_convert@@YAXPEAMPEAEH@Z DD imagerel ?stbi__hdr_convert@@YAXPEAMPEAEH@Z
	DD	imagerel ?stbi__hdr_convert@@YAXPEAMPEAEH@Z+608
	DD	imagerel $unwind$?stbi__hdr_convert@@YAXPEAMPEAEH@Z
$pdata$?stbi__pnm_isspace@@YAHD@Z DD imagerel ?stbi__pnm_isspace@@YAHD@Z
	DD	imagerel ?stbi__pnm_isspace@@YAHD@Z+92
	DD	imagerel $unwind$?stbi__pnm_isspace@@YAHD@Z
$pdata$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z+162
	DD	imagerel $unwind$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z
$pdata$?stbi__pnm_isdigit@@YAHD@Z DD imagerel ?stbi__pnm_isdigit@@YAHD@Z
	DD	imagerel ?stbi__pnm_isdigit@@YAHD@Z+52
	DD	imagerel $unwind$?stbi__pnm_isdigit@@YAHD@Z
$pdata$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z+102
	DD	imagerel $unwind$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z
$pdata$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z+380
	DD	imagerel $unwind$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__is_16_main@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__is_16_main@@YAHPEAUstbi__context@@@Z+79
	DD	imagerel $unwind$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z
$pdata$stbi_write_png DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$stbi_write_png
$pdata$stbi_write_bmp DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_bmp
$pdata$stbi_write_tga DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_tga
$pdata$stbi_write_hdr DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_hdr
$pdata$stbi_write_jpg DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$stbi_write_jpg
$pdata$stbi_write_png_to_func DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$stbi_write_png_to_func
$pdata$stbi_write_bmp_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_bmp_to_func
$pdata$stbi_write_tga_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_tga_to_func
$pdata$stbi_write_hdr_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_hdr_to_func
$pdata$stbi_write_jpg_to_func DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$stbi_write_jpg_to_func
$pdata$?stbi__stdio_write@@YAXPEAX0H@Z DD imagerel ?stbi__stdio_write@@YAXPEAX0H@Z
	DD	imagerel ?stbi__stdio_write@@YAXPEAX0H@Z+52
	DD	imagerel $unwind$?stbi__stdio_write@@YAXPEAX0H@Z
$pdata$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z+57
	DD	imagerel $unwind$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z DD imagerel ?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z
	DD	imagerel ?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z+93
	DD	imagerel $unwind$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z
$pdata$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z DD imagerel ?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z
	DD	imagerel ?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z+28
	DD	imagerel $unwind$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z
$pdata$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z DD imagerel ?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z
	DD	imagerel ?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z+698
	DD	imagerel $unwind$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z
$pdata$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ DD imagerel ?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ
	DD	imagerel ?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ+68
	DD	imagerel $unwind$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ
$pdata$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z DD imagerel ?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z
	DD	imagerel ?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z+84
	DD	imagerel $unwind$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z
$pdata$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z DD imagerel ?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z
	DD	imagerel ?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z+55
	DD	imagerel $unwind$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z
$pdata$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z DD imagerel ?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z
	DD	imagerel ?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z+87
	DD	imagerel $unwind$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z
$pdata$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z DD imagerel ?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z
	DD	imagerel ?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z+149
	DD	imagerel $unwind$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z
$pdata$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z DD imagerel ?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z
	DD	imagerel ?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z+519
	DD	imagerel $unwind$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z
$pdata$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z DD imagerel ?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z
	DD	imagerel ?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z+329
	DD	imagerel $unwind$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z
$pdata$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ DD imagerel ?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ
	DD	imagerel ?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ+208
	DD	imagerel $unwind$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ
$pdata$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z DD imagerel ?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z
	DD	imagerel ?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z+902
	DD	imagerel $unwind$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z
$pdata$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z DD imagerel ?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z
	DD	imagerel ?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z+1764
	DD	imagerel $unwind$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z
$pdata$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z DD imagerel ?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z
	DD	imagerel ?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z+576
	DD	imagerel $unwind$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z
$pdata$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z DD imagerel ?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z
	DD	imagerel ?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z+158
	DD	imagerel $unwind$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z
$pdata$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z DD imagerel ?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z
	DD	imagerel ?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z+146
	DD	imagerel $unwind$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z
$pdata$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z DD imagerel ?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
	DD	imagerel ?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z+1573
	DD	imagerel $unwind$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
$pdata$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z DD imagerel ?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
	DD	imagerel ?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z+454
	DD	imagerel $unwind$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
$pdata$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z DD imagerel ?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z
	DD	imagerel ?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z+290
	DD	imagerel $unwind$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z
$pdata$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z DD imagerel ?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z
	DD	imagerel ?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z+244
	DD	imagerel $unwind$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z
$pdata$?stbiw__zlib_bitrev@@YAHHH@Z DD imagerel ?stbiw__zlib_bitrev@@YAHHH@Z
	DD	imagerel ?stbiw__zlib_bitrev@@YAHHH@Z+81
	DD	imagerel $unwind$?stbiw__zlib_bitrev@@YAHHH@Z
$pdata$?stbiw__zlib_countm@@YAIPEAE0H@Z DD imagerel ?stbiw__zlib_countm@@YAIPEAE0H@Z
	DD	imagerel ?stbiw__zlib_countm@@YAIPEAE0H@Z+96
	DD	imagerel $unwind$?stbiw__zlib_countm@@YAIPEAE0H@Z
$pdata$?stbiw__zhash@@YAIPEAE@Z DD imagerel ?stbiw__zhash@@YAIPEAE@Z
	DD	imagerel ?stbiw__zhash@@YAIPEAE@Z+180
	DD	imagerel $unwind$?stbiw__zhash@@YAIPEAE@Z
$pdata$stbi_zlib_compress DD imagerel $LN100
	DD	imagerel $LN100+6672
	DD	imagerel $unwind$stbi_zlib_compress
$pdata$?stbiw__crc32@@YAIPEAEH@Z DD imagerel ?stbiw__crc32@@YAIPEAEH@Z
	DD	imagerel ?stbiw__crc32@@YAIPEAEH@Z+108
	DD	imagerel $unwind$?stbiw__crc32@@YAIPEAEH@Z
$pdata$?stbiw__wpcrc@@YAXPEAPEAEH@Z DD imagerel ?stbiw__wpcrc@@YAXPEAPEAEH@Z
	DD	imagerel ?stbiw__wpcrc@@YAXPEAPEAEH@Z+204
	DD	imagerel $unwind$?stbiw__wpcrc@@YAXPEAPEAEH@Z
$pdata$?stbiw__paeth@@YAEHHH@Z DD imagerel ?stbiw__paeth@@YAEHHH@Z
	DD	imagerel ?stbiw__paeth@@YAEHHH@Z+172
	DD	imagerel $unwind$?stbiw__paeth@@YAEHHH@Z
$pdata$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z DD imagerel ?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z
	DD	imagerel ?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z+1576
	DD	imagerel $unwind$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z
$pdata$stbi_write_png_to_mem DD imagerel $LN23
	DD	imagerel $LN23+2550
	DD	imagerel $unwind$stbi_write_png_to_mem
$pdata$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z DD imagerel ?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z
	DD	imagerel ?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z+230
	DD	imagerel $unwind$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z
$pdata$?stbiw__jpg_DCT@@YAXPEAM0000000@Z DD imagerel ?stbiw__jpg_DCT@@YAXPEAM0000000@Z
	DD	imagerel ?stbiw__jpg_DCT@@YAXPEAM0000000@Z+837
	DD	imagerel $unwind$?stbiw__jpg_DCT@@YAXPEAM0000000@Z
$pdata$?stbiw__jpg_calcBits@@YAXHQEAG@Z DD imagerel ?stbiw__jpg_calcBits@@YAXHQEAG@Z
	DD	imagerel ?stbiw__jpg_calcBits@@YAXHQEAG@Z+229
	DD	imagerel $unwind$?stbiw__jpg_calcBits@@YAXHQEAG@Z
$pdata$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z DD imagerel ?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
	DD	imagerel ?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z+1769
	DD	imagerel $unwind$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
$pdata$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z DD imagerel ?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
	DD	imagerel ?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z+4895
	DD	imagerel $unwind$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
$pdata$?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z DD imagerel ?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z
	DD	imagerel ?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z+273
	DD	imagerel $unwind$?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ESTANDARD_BASIS_COLOR@@YAXXZ DD imagerel ??__ESTANDARD_BASIS_COLOR@@YAXXZ
	DD	imagerel ??__ESTANDARD_BASIS_COLOR@@YAXXZ+87
	DD	imagerel $unwind$??__ESTANDARD_BASIS_COLOR@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z DD imagerel ?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z
	DD	imagerel ?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z+154
	DD	imagerel $unwind$?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z
$pdata$?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z DD imagerel ?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z
	DD	imagerel ?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z+141
	DD	imagerel $unwind$?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z
$pdata$?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z DD imagerel ?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z
	DD	imagerel ?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z+77
	DD	imagerel $unwind$?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z
$pdata$?ZenResetNativeEvent@@YAHPEAX@Z DD imagerel ?ZenResetNativeEvent@@YAHPEAX@Z
	DD	imagerel ?ZenResetNativeEvent@@YAHPEAX@Z+25
	DD	imagerel $unwind$?ZenResetNativeEvent@@YAHPEAX@Z
$pdata$?ZenConsumeNativeEvent@@YAHPEAX@Z DD imagerel ?ZenConsumeNativeEvent@@YAHPEAX@Z
	DD	imagerel ?ZenConsumeNativeEvent@@YAHPEAX@Z+64
	DD	imagerel $unwind$?ZenConsumeNativeEvent@@YAHPEAX@Z
$pdata$?ZenProduceNativeEvent@@YAHPEAX@Z DD imagerel ?ZenProduceNativeEvent@@YAHPEAX@Z
	DD	imagerel ?ZenProduceNativeEvent@@YAHPEAX@Z+25
	DD	imagerel $unwind$?ZenProduceNativeEvent@@YAHPEAX@Z
$pdata$?ZenCreateNativeMutex@@YAPEAXHPEBD@Z DD imagerel ?ZenCreateNativeMutex@@YAPEAXHPEBD@Z
	DD	imagerel ?ZenCreateNativeMutex@@YAPEAXHPEBD@Z+35
	DD	imagerel $unwind$?ZenCreateNativeMutex@@YAPEAXHPEBD@Z
$pdata$?ZenAcquireNativeMutex@@YAHPEAX@Z DD imagerel ?ZenAcquireNativeMutex@@YAHPEAX@Z
	DD	imagerel ?ZenAcquireNativeMutex@@YAHPEAX@Z+64
	DD	imagerel $unwind$?ZenAcquireNativeMutex@@YAHPEAX@Z
$pdata$?ZenReleaseNativeMutex@@YAHPEAX@Z DD imagerel ?ZenReleaseNativeMutex@@YAHPEAX@Z
	DD	imagerel ?ZenReleaseNativeMutex@@YAHPEAX@Z+25
	DD	imagerel $unwind$?ZenReleaseNativeMutex@@YAHPEAX@Z
$pdata$?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z DD imagerel ?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z
	DD	imagerel ?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z+174
	DD	imagerel $unwind$?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z
$pdata$?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z DD imagerel ?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z
	DD	imagerel ?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z+82
	DD	imagerel $unwind$?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z
$pdata$?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z DD imagerel ?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z
	DD	imagerel ?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z+52
	DD	imagerel $unwind$?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z
$pdata$?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z DD imagerel ?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z
	DD	imagerel ?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z+41
	DD	imagerel $unwind$?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z
$pdata$?NewReflectTree@@YAPEAUReflectTree@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?NewReflectTree@@YAPEAUReflectTree@@H@Z
$pdata$?CreateEnum@@YAPEAUReflectTree@@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?CreateEnum@@YAPEAUReflectTree@@PEBD@Z
$pdata$?CreateStruct@@YAPEAUReflectTree@@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?CreateStruct@@YAPEAUReflectTree@@PEBD@Z
$pdata$?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z
$pdata$?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z
$pdata$?ZenMain@@YAXHPEAPEAD@Z DD imagerel ?ZenMain@@YAXHPEAPEAD@Z
	DD	imagerel ?ZenMain@@YAXHPEAPEAD@Z+208
	DD	imagerel $unwind$?ZenMain@@YAXHPEAPEAD@Z
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$main
$pdata$mg_init_library DD imagerel $LN32
	DD	imagerel $LN32+771
	DD	imagerel $unwind$mg_init_library
$pdata$mg_exit_library DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$mg_exit_library
$pdata$mg_start DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$mg_start
$pdata$mg_stop DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$mg_stop
$pdata$mg_start_domain DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$mg_start_domain
$pdata$mg_set_request_handler DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$mg_set_request_handler
$pdata$mg_set_websocket_handler DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$mg_set_websocket_handler
$pdata$mg_set_websocket_handler_with_subprotocols DD imagerel $LN5
	DD	imagerel $LN5+253
	DD	imagerel $unwind$mg_set_websocket_handler_with_subprotocols
$pdata$mg_set_auth_handler DD imagerel $LN5
	DD	imagerel $LN5+196
	DD	imagerel $unwind$mg_set_auth_handler
$pdata$mg_get_option DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$mg_get_option
$pdata$mg_get_context DD imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$mg_get_context
$pdata$mg_get_user_data DD imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$mg_get_user_data
$pdata$mg_get_user_context_data DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$mg_get_user_context_data
$pdata$mg_get_thread_pointer DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$mg_get_thread_pointer
$pdata$mg_set_user_connection_data DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$mg_set_user_connection_data
$pdata$mg_get_request_link DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$mg_get_request_link
$pdata$mg_get_server_ports DD imagerel $LN12
	DD	imagerel $LN12+425
	DD	imagerel $unwind$mg_get_server_ports
$pdata$mg_modify_passwords_file DD imagerel $LN7
	DD	imagerel $LN7+268
	DD	imagerel $unwind$mg_modify_passwords_file
$pdata$mg_modify_passwords_file_ha1 DD imagerel $LN43
	DD	imagerel $LN43+1472
	DD	imagerel $unwind$mg_modify_passwords_file_ha1
$pdata$mg_write DD imagerel $LN16
	DD	imagerel $LN16+699
	DD	imagerel $unwind$mg_write
$pdata$mg_websocket_write DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$mg_websocket_write
$pdata$mg_websocket_client_write DD imagerel $LN7
	DD	imagerel $LN7+235
	DD	imagerel $unwind$mg_websocket_client_write
$pdata$mg_lock_connection DD imagerel $LN4
	DD	imagerel $LN4+41
	DD	imagerel $unwind$mg_lock_connection
$pdata$mg_unlock_connection DD imagerel $LN4
	DD	imagerel $LN4+41
	DD	imagerel $unwind$mg_unlock_connection
$pdata$mg_lock_context DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$mg_lock_context
$pdata$mg_unlock_context DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$mg_unlock_context
$pdata$mg_printf DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$mg_printf
$pdata$mg_send_chunk DD imagerel $LN6
	DD	imagerel $LN6+261
	DD	imagerel $unwind$mg_send_chunk
$pdata$mg_send_file DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$mg_send_file
$pdata$mg_send_file_body DD imagerel $LN4
	DD	imagerel $LN4+198
	DD	imagerel $unwind$mg_send_file_body
$pdata$mg_send_http_error DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$mg_send_http_error
$pdata$mg_send_http_ok DD imagerel $LN9
	DD	imagerel $LN9+317
	DD	imagerel $unwind$mg_send_http_ok
$pdata$mg_send_http_redirect DD imagerel $LN10
	DD	imagerel $LN10+280
	DD	imagerel $unwind$mg_send_http_redirect
$pdata$mg_send_digest_access_authentication_request DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$mg_send_digest_access_authentication_request
$pdata$mg_check_digest_access_authentication DD imagerel $LN6
	DD	imagerel $LN6+207
	DD	imagerel $unwind$mg_check_digest_access_authentication
$pdata$mg_send_mime_file DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$mg_send_mime_file
$pdata$mg_send_mime_file2 DD imagerel $LN12
	DD	imagerel $LN12+357
	DD	imagerel $unwind$mg_send_mime_file2
$pdata$mg_store_body DD imagerel $LN11
	DD	imagerel $LN11+484
	DD	imagerel $unwind$mg_store_body
$pdata$mg_read DD imagerel $LN32
	DD	imagerel $LN32+1174
	DD	imagerel $unwind$mg_read
$pdata$mg_get_header DD imagerel $LN6
	DD	imagerel $LN6+127
	DD	imagerel $unwind$mg_get_header
$pdata$mg_get_var DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$mg_get_var
$pdata$mg_get_var2 DD imagerel $LN17
	DD	imagerel $LN17+565
	DD	imagerel $unwind$mg_get_var2
$pdata$mg_split_form_urlencoded DD imagerel $LN31
	DD	imagerel $LN31+678
	DD	imagerel $unwind$mg_split_form_urlencoded
$pdata$mg_get_cookie DD imagerel $LN18
	DD	imagerel $LN18+539
	DD	imagerel $unwind$mg_get_cookie
$pdata$mg_download DD imagerel $LN8
	DD	imagerel $LN8+333
	DD	imagerel $unwind$mg_download
$pdata$mg_close_connection DD imagerel $LN16
	DD	imagerel $LN16+446
	DD	imagerel $unwind$mg_close_connection
$pdata$mg_handle_form_request DD imagerel $LN183
	DD	imagerel $LN183+8029
	DD	imagerel $unwind$mg_handle_form_request
$pdata$mg_start_thread DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$mg_start_thread
$pdata$mg_get_builtin_mime_type DD imagerel $LN7
	DD	imagerel $LN7+206
	DD	imagerel $unwind$mg_get_builtin_mime_type
$pdata$mg_get_response_code_text DD imagerel $LN81
	DD	imagerel $LN81+1719
	DD	imagerel $unwind$mg_get_response_code_text
$pdata$mg_url_decode DD imagerel $LN16
	DD	imagerel $LN16+490
	DD	imagerel $unwind$mg_url_decode
$pdata$mg_url_encode DD imagerel $LN13
	DD	imagerel $LN13+375
	DD	imagerel $unwind$mg_url_encode
$pdata$mg_base64_encode DD imagerel $LN18
	DD	imagerel $LN18+698
	DD	imagerel $unwind$mg_base64_encode
$pdata$mg_base64_decode DD imagerel $LN25
	DD	imagerel $LN25+729
	DD	imagerel $unwind$mg_base64_decode
$pdata$mg_md5 DD imagerel $LN7
	DD	imagerel $LN7+269
	DD	imagerel $unwind$mg_md5
$pdata$mg_match DD imagerel $LN13
	DD	imagerel $LN13+646
	DD	imagerel $unwind$mg_match
$pdata$mg_cry DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$mg_cry
$pdata$mg_strcasecmp DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$mg_strcasecmp
$pdata$mg_strncasecmp DD imagerel $LN8
	DD	imagerel $LN8+182
	DD	imagerel $unwind$mg_strncasecmp
$pdata$mg_connect_websocket_client DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$mg_connect_websocket_client
$pdata$mg_connect_websocket_client_extensions DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$mg_connect_websocket_client_extensions
$pdata$mg_connect_client DD imagerel $LN4
	DD	imagerel $LN4+188
	DD	imagerel $unwind$mg_connect_client
$pdata$mg_connect_client_secure DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$mg_connect_client_secure
$pdata$mg_connect_websocket_client_secure DD imagerel $LN4
	DD	imagerel $LN4+137
	DD	imagerel $unwind$mg_connect_websocket_client_secure
$pdata$mg_connect_websocket_client_secure_extensions DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$mg_connect_websocket_client_secure_extensions
$pdata$mg_get_response DD imagerel $LN9
	DD	imagerel $LN9+486
	DD	imagerel $unwind$mg_get_response
$pdata$mg_response_header_start DD imagerel $LN8
	DD	imagerel $LN8+145
	DD	imagerel $unwind$mg_response_header_start
$pdata$mg_response_header_add DD imagerel $LN14
	DD	imagerel $LN14+524
	DD	imagerel $unwind$mg_response_header_add
$pdata$mg_response_header_add_lines DD imagerel $LN8
	DD	imagerel $LN8+266
	DD	imagerel $unwind$mg_response_header_add_lines
$pdata$mg_response_header_send DD imagerel $LN15
	DD	imagerel $LN15+561
	DD	imagerel $unwind$mg_response_header_send
$pdata$mg_get_system_info DD imagerel $LN27
	DD	imagerel $LN27+1940
	DD	imagerel $unwind$mg_get_system_info
$pdata$mg_get_connection_info DD imagerel $LN36
	DD	imagerel $LN36+2504
	DD	imagerel $unwind$mg_get_connection_info
$pdata$mg_connect_client2 DD imagerel $LN24
	DD	imagerel $LN24+796
	DD	imagerel $unwind$mg_connect_client2
$pdata$mg_start2 DD imagerel $LN71
	DD	imagerel $LN71+4842
	DD	imagerel $unwind$mg_start2
$pdata$mg_start_domain2 DD imagerel $LN37
	DD	imagerel $LN37+2023
	DD	imagerel $unwind$mg_start_domain2
$pdata$stat DD	imagerel stat
	DD	imagerel stat+34
	DD	imagerel $unwind$stat
$pdata$difftime DD imagerel difftime
	DD	imagerel difftime+34
	DD	imagerel $unwind$difftime
$pdata$gmtime DD imagerel gmtime
	DD	imagerel gmtime+24
	DD	imagerel $unwind$gmtime
$pdata$localtime DD imagerel localtime
	DD	imagerel localtime+24
	DD	imagerel $unwind$localtime
$pdata$_mkgmtime DD imagerel _mkgmtime
	DD	imagerel _mkgmtime+24
	DD	imagerel $unwind$_mkgmtime
$pdata$time DD	imagerel time
	DD	imagerel time+24
	DD	imagerel $unwind$time
$pdata$?mg_clock_gettime@@YAHKPEAUtimespec@@@Z DD imagerel ?mg_clock_gettime@@YAHKPEAUtimespec@@@Z
	DD	imagerel ?mg_clock_gettime@@YAHKPEAUtimespec@@@Z+867
	DD	imagerel $unwind$?mg_clock_gettime@@YAHKPEAUtimespec@@@Z
$pdata$?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z DD imagerel ?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z
	DD	imagerel ?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z+30
	DD	imagerel $unwind$?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z
$pdata$?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z DD imagerel ?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z
	DD	imagerel ?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z+30
	DD	imagerel $unwind$?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z
$pdata$?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z DD imagerel ?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z
	DD	imagerel ?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z+556
	DD	imagerel $unwind$?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z
$pdata$?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z DD imagerel ?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z
	DD	imagerel ?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z+77
	DD	imagerel $unwind$?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z
$pdata$?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z DD imagerel ?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z
	DD	imagerel ?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z+79
	DD	imagerel $unwind$?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z
$pdata$?pthread_key_delete@@YAHK@Z DD imagerel ?pthread_key_delete@@YAHK@Z
	DD	imagerel ?pthread_key_delete@@YAHK@Z+49
	DD	imagerel $unwind$?pthread_key_delete@@YAHK@Z
$pdata$?pthread_setspecific@@YAHKPEAX@Z DD imagerel ?pthread_setspecific@@YAHKPEAX@Z
	DD	imagerel ?pthread_setspecific@@YAHKPEAX@Z+59
	DD	imagerel $unwind$?pthread_setspecific@@YAHKPEAX@Z
$pdata$?pthread_getspecific@@YAPEAXK@Z DD imagerel ?pthread_getspecific@@YAPEAXK@Z
	DD	imagerel ?pthread_getspecific@@YAPEAXK@Z+23
	DD	imagerel $unwind$?pthread_getspecific@@YAPEAXK@Z
$pdata$?mg_global_lock@@YAXXZ DD imagerel ?mg_global_lock@@YAXXZ
	DD	imagerel ?mg_global_lock@@YAXXZ+21
	DD	imagerel $unwind$?mg_global_lock@@YAXXZ
$pdata$?mg_global_unlock@@YAXXZ DD imagerel ?mg_global_unlock@@YAXXZ
	DD	imagerel ?mg_global_unlock@@YAXXZ+21
	DD	imagerel $unwind$?mg_global_unlock@@YAXXZ
$pdata$?mg_atomic_inc@@YA_JPEC_J@Z DD imagerel ?mg_atomic_inc@@YA_JPEC_J@Z
	DD	imagerel ?mg_atomic_inc@@YA_JPEC_J@Z+43
	DD	imagerel $unwind$?mg_atomic_inc@@YA_JPEC_J@Z
$pdata$?mg_atomic_dec@@YA_JPEC_J@Z DD imagerel ?mg_atomic_dec@@YA_JPEC_J@Z
	DD	imagerel ?mg_atomic_dec@@YA_JPEC_J@Z+45
	DD	imagerel $unwind$?mg_atomic_dec@@YA_JPEC_J@Z
$pdata$?mg_malloc@@YAPEAX_K@Z DD imagerel ?mg_malloc@@YAPEAX_K@Z
	DD	imagerel ?mg_malloc@@YAPEAX_K@Z+24
	DD	imagerel $unwind$?mg_malloc@@YAPEAX_K@Z
$pdata$?mg_calloc@@YAPEAX_K0@Z DD imagerel ?mg_calloc@@YAPEAX_K0@Z
	DD	imagerel ?mg_calloc@@YAPEAX_K0@Z+34
	DD	imagerel $unwind$?mg_calloc@@YAPEAX_K0@Z
$pdata$?mg_realloc@@YAPEAXPEAX_K@Z DD imagerel ?mg_realloc@@YAPEAXPEAX_K@Z
	DD	imagerel ?mg_realloc@@YAPEAXPEAX_K@Z+34
	DD	imagerel $unwind$?mg_realloc@@YAPEAXPEAX_K@Z
$pdata$?mg_free@@YAXPEAX@Z DD imagerel ?mg_free@@YAXPEAX@Z
	DD	imagerel ?mg_free@@YAXPEAX@Z+24
	DD	imagerel $unwind$?mg_free@@YAXPEAX@Z
$pdata$?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z DD imagerel ?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z
	DD	imagerel ?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z+342
	DD	imagerel $unwind$?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z
$pdata$?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ DD imagerel ?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ
	DD	imagerel ?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ+93
	DD	imagerel $unwind$?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ
$pdata$?mg_current_thread_id@@YAKXZ DD imagerel ?mg_current_thread_id@@YAKXZ
	DD	imagerel ?mg_current_thread_id@@YAKXZ+15
	DD	imagerel $unwind$?mg_current_thread_id@@YAKXZ
$pdata$?mg_get_current_time_ns@@YA_KXZ DD imagerel ?mg_get_current_time_ns@@YA_KXZ
	DD	imagerel ?mg_get_current_time_ns@@YA_KXZ+69
	DD	imagerel $unwind$?mg_get_current_time_ns@@YA_KXZ
$pdata$md5_append DD imagerel md5_append
	DD	imagerel md5_append+525
	DD	imagerel $unwind$md5_append
$pdata$md5_finish DD imagerel md5_finish
	DD	imagerel md5_finish+263
	DD	imagerel $unwind$md5_finish
$pdata$?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z DD imagerel ?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z
	DD	imagerel ?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z+6090
	DD	imagerel $unwind$?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z
$pdata$?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ DD imagerel ?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ
	DD	imagerel ?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ+239
	DD	imagerel $unwind$?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ
$pdata$?mg_set_thread_name@@YAXPEBD@Z DD imagerel ?mg_set_thread_name@@YAXPEBD@Z
	DD	imagerel ?mg_set_thread_name@@YAXPEBD@Z+148
	DD	imagerel $unwind$?mg_set_thread_name@@YAXPEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA DD imagerel ?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA
	DD	imagerel ?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA+21
	DD	imagerel $unwind$?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?is_file_opened@@YAHPEBUmg_file_access@@@Z DD imagerel ?is_file_opened@@YAHPEBUmg_file_access@@@Z
	DD	imagerel ?is_file_opened@@YAHPEBUmg_file_access@@@Z+56
	DD	imagerel $unwind$?is_file_opened@@YAHPEBUmg_file_access@@@Z
$pdata$?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z DD imagerel ?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z
	DD	imagerel ?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z+469
	DD	imagerel $unwind$?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z
$pdata$?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z DD imagerel ?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z
	DD	imagerel ?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z+211
	DD	imagerel $unwind$?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z
$pdata$?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z DD imagerel ?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z
	DD	imagerel ?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z+432
	DD	imagerel $unwind$?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z
$pdata$?mg_fclose@@YAHPEAUmg_file_access@@@Z DD imagerel ?mg_fclose@@YAHPEAUmg_file_access@@@Z
	DD	imagerel ?mg_fclose@@YAHPEAUmg_file_access@@@Z+80
	DD	imagerel $unwind$?mg_fclose@@YAHPEAUmg_file_access@@@Z
$pdata$?mg_strlcpy@@YAXPEADPEBD_K@Z DD imagerel ?mg_strlcpy@@YAXPEADPEBD_K@Z
	DD	imagerel ?mg_strlcpy@@YAXPEADPEBD_K@Z+117
	DD	imagerel $unwind$?mg_strlcpy@@YAXPEADPEBD_K@Z
$pdata$?lowercase@@YAHPEBD@Z DD imagerel ?lowercase@@YAHPEBD@Z
	DD	imagerel ?lowercase@@YAHPEBD@Z+29
	DD	imagerel $unwind$?lowercase@@YAHPEBD@Z
$pdata$?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z DD imagerel ?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z
	DD	imagerel ?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z+84
	DD	imagerel $unwind$?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z
$pdata$?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z DD imagerel ?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z
	DD	imagerel ?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z+47
	DD	imagerel $unwind$?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z
$pdata$?mg_strdup@@YAPEADPEBD@Z DD imagerel ?mg_strdup@@YAPEADPEBD@Z
	DD	imagerel ?mg_strdup@@YAPEADPEBD@Z+40
	DD	imagerel $unwind$?mg_strdup@@YAPEADPEBD@Z
$pdata$?mg_strcasestr@@YAPEBDPEBD0@Z DD imagerel ?mg_strcasestr@@YAPEBDPEBD0@Z
	DD	imagerel ?mg_strcasestr@@YAPEBDPEBD0@Z+168
	DD	imagerel $unwind$?mg_strcasestr@@YAPEBDPEBD0@Z
$pdata$?get_option_index@@YAHPEBD@Z DD imagerel ?get_option_index@@YAHPEBD@Z
	DD	imagerel ?get_option_index@@YAHPEBD@Z+104
	DD	imagerel $unwind$?get_option_index@@YAHPEBD@Z
$pdata$?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z DD imagerel ?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z
	DD	imagerel ?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z+119
	DD	imagerel $unwind$?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z
$pdata$?gmt_time_string@@YAXPEAD_KPEA_J@Z DD imagerel ?gmt_time_string@@YAXPEAD_KPEA_J@Z
	DD	imagerel ?gmt_time_string@@YAXPEAD_KPEA_J@Z+127
	DD	imagerel $unwind$?gmt_time_string@@YAXPEAD_KPEA_J@Z
$pdata$?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z DD imagerel ?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z
	DD	imagerel ?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z+649
	DD	imagerel $unwind$?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z
$pdata$?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z DD imagerel ?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z
	DD	imagerel ?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z+82
	DD	imagerel $unwind$?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z
$pdata$?get_proto_name@@YAPEBDPEBUmg_connection@@@Z DD imagerel ?get_proto_name@@YAPEBDPEBUmg_connection@@@Z
	DD	imagerel ?get_proto_name@@YAPEBDPEBUmg_connection@@@Z+147
	DD	imagerel $unwind$?get_proto_name@@YAPEBDPEBUmg_connection@@@Z
$pdata$?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z DD imagerel ?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z
	DD	imagerel ?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z+1188
	DD	imagerel $unwind$?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z
$pdata$?skip_quoted@@YAPEADPEAPEADPEBD1D@Z DD imagerel ?skip_quoted@@YAPEADPEAPEADPEBD1D@Z
	DD	imagerel ?skip_quoted@@YAPEADPEAPEADPEBD1D@Z+431
	DD	imagerel $unwind$?skip_quoted@@YAPEADPEAPEADPEBD1D@Z
$pdata$?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z DD imagerel ?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z
	DD	imagerel ?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z+110
	DD	imagerel $unwind$?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z
$pdata$?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z DD imagerel ?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z
	DD	imagerel ?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z+184
	DD	imagerel $unwind$?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z
$pdata$?next_option@@YAPEBDPEBDPEAUvec@@1@Z DD imagerel ?next_option@@YAPEBDPEBDPEAUvec@@1@Z
	DD	imagerel ?next_option@@YAPEBDPEBDPEAUvec@@1@Z+515
	DD	imagerel $unwind$?next_option@@YAPEBDPEBDPEAUvec@@1@Z
$pdata$?header_has_option@@YAHPEBD0@Z DD imagerel ?header_has_option@@YAHPEBD0@Z
	DD	imagerel ?header_has_option@@YAHPEBD0@Z+87
	DD	imagerel $unwind$?header_has_option@@YAHPEBD0@Z
$pdata$?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z DD imagerel ?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z
	DD	imagerel ?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z+570
	DD	imagerel $unwind$?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z
$pdata$?match_context_reset@@YAXPEAUmg_match_context@@@Z DD imagerel ?match_context_reset@@YAXPEAUmg_match_context@@@Z
	DD	imagerel ?match_context_reset@@YAXPEAUmg_match_context@@@Z+52
	DD	imagerel $unwind$?match_context_reset@@YAXPEAUmg_match_context@@@Z
$pdata$?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z DD imagerel ?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z
	DD	imagerel ?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z+1175
	DD	imagerel $unwind$?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z
$pdata$?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z DD imagerel ?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z
	DD	imagerel ?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z+267
	DD	imagerel $unwind$?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z
$pdata$?match_compare@@YAHPEBX0PEAX@Z DD imagerel ?match_compare@@YAHPEBX0PEAX@Z
	DD	imagerel ?match_compare@@YAHPEBX0PEAX@Z+93
	DD	imagerel $unwind$?match_compare@@YAHPEBX0PEAX@Z
$pdata$?match_prefix@@YA_JPEBD_K0@Z DD imagerel ?match_prefix@@YA_JPEBD_K0@Z
	DD	imagerel ?match_prefix@@YA_JPEBD_K0@Z+64
	DD	imagerel $unwind$?match_prefix@@YA_JPEBD_K0@Z
$pdata$?match_prefix_strlen@@YA_JPEBD0@Z DD imagerel ?match_prefix_strlen@@YA_JPEBD0@Z
	DD	imagerel ?match_prefix_strlen@@YA_JPEBD0@Z+67
	DD	imagerel $unwind$?match_prefix_strlen@@YA_JPEBD0@Z
$pdata$?should_keep_alive@@YAHPEBUmg_connection@@@Z DD imagerel ?should_keep_alive@@YAHPEBUmg_connection@@@Z
	DD	imagerel ?should_keep_alive@@YAHPEBUmg_connection@@@Z+204
	DD	imagerel $unwind$?should_keep_alive@@YAHPEBUmg_connection@@@Z
$pdata$?should_decode_url@@YAHPEBUmg_connection@@@Z DD imagerel ?should_decode_url@@YAHPEBUmg_connection@@@Z
	DD	imagerel ?should_decode_url@@YAHPEBUmg_connection@@@Z+105
	DD	imagerel $unwind$?should_decode_url@@YAHPEBUmg_connection@@@Z
$pdata$?should_decode_query_string@@YAHPEBUmg_connection@@@Z DD imagerel ?should_decode_query_string@@YAHPEBUmg_connection@@@Z
	DD	imagerel ?should_decode_query_string@@YAHPEBUmg_connection@@@Z+105
	DD	imagerel $unwind$?should_decode_query_string@@YAHPEBUmg_connection@@@Z
$pdata$?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z DD imagerel ?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z
	DD	imagerel ?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z+59
	DD	imagerel $unwind$?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z
$pdata$?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z DD imagerel ?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z+195
	DD	imagerel $unwind$?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z
$pdata$?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z DD imagerel ?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z
	DD	imagerel ?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z+165
	DD	imagerel $unwind$?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z
$pdata$?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z DD imagerel ?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z
	DD	imagerel ?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z+534
	DD	imagerel $unwind$?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z
$pdata$?send_no_cache_header@@YAXPEAUmg_connection@@@Z DD imagerel ?send_no_cache_header@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?send_no_cache_header@@YAXPEAUmg_connection@@@Z+115
	DD	imagerel $unwind$?send_no_cache_header@@YAXPEAUmg_connection@@@Z
$pdata$?send_static_cache_header@@YAXPEAUmg_connection@@@Z DD imagerel ?send_static_cache_header@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?send_static_cache_header@@YAXPEAUmg_connection@@@Z+269
	DD	imagerel $unwind$?send_static_cache_header@@YAXPEAUmg_connection@@@Z
$pdata$?send_additional_header@@YAXPEAUmg_connection@@@Z DD imagerel ?send_additional_header@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?send_additional_header@@YAXPEAUmg_connection@@@Z+290
	DD	imagerel $unwind$?send_additional_header@@YAXPEAUmg_connection@@@Z
$pdata$?send_cors_header@@YAXPEAUmg_connection@@@Z DD imagerel ?send_cors_header@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?send_cors_header@@YAXPEAUmg_connection@@@Z+135
	DD	imagerel $unwind$?send_cors_header@@YAXPEAUmg_connection@@@Z
$pdata$?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z DD imagerel ?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
	DD	imagerel ?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z+458
	DD	imagerel $unwind$?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
$pdata$?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z DD imagerel ?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z
	DD	imagerel ?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z+1700
	DD	imagerel $unwind$?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z
$pdata$?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z DD imagerel ?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z
	DD	imagerel ?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z+35
	DD	imagerel $unwind$?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z
$pdata$?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z DD imagerel ?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z
	DD	imagerel ?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z+30
	DD	imagerel $unwind$?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z
$pdata$?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z DD imagerel ?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z
	DD	imagerel ?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z+54
	DD	imagerel $unwind$?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z
$pdata$?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z DD imagerel ?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z
	DD	imagerel ?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z+519
	DD	imagerel $unwind$?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z
$pdata$?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z DD imagerel ?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z
	DD	imagerel ?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z+37
	DD	imagerel $unwind$?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z
$pdata$?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z DD imagerel ?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z
	DD	imagerel ?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z+153
	DD	imagerel $unwind$?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z
$pdata$?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z DD imagerel ?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z
	DD	imagerel ?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z+66
	DD	imagerel $unwind$?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z
$pdata$?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z DD imagerel ?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z
	DD	imagerel ?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z+55
	DD	imagerel $unwind$?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z
$pdata$?change_slashes_to_backslashes@@YAXPEAD@Z DD imagerel ?change_slashes_to_backslashes@@YAXPEAD@Z
	DD	imagerel ?change_slashes_to_backslashes@@YAXPEAD@Z+247
	DD	imagerel $unwind$?change_slashes_to_backslashes@@YAXPEAD@Z
$pdata$?mg_wcscasecmp@@YAHPEB_W0@Z DD imagerel ?mg_wcscasecmp@@YAHPEB_W0@Z
	DD	imagerel ?mg_wcscasecmp@@YAHPEB_W0@Z+207
	DD	imagerel $unwind$?mg_wcscasecmp@@YAHPEB_W0@Z
$pdata$?mg_remove@@YAHPEBUmg_connection@@PEBD@Z DD imagerel ?mg_remove@@YAHPEBUmg_connection@@PEBD@Z
	DD	imagerel ?mg_remove@@YAHPEBUmg_connection@@PEBD@Z+128
	DD	imagerel $unwind$?mg_remove@@YAHPEBUmg_connection@@PEBD@Z
$pdata$?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z DD imagerel ?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z
	DD	imagerel ?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z+135
	DD	imagerel $unwind$?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z
$pdata$?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z DD imagerel ?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z
	DD	imagerel ?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z+317
	DD	imagerel $unwind$?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z
$pdata$?mg_closedir@@YAHPEAUDIR@@@Z DD imagerel ?mg_closedir@@YAHPEAUDIR@@@Z
	DD	imagerel ?mg_closedir@@YAHPEAUDIR@@@Z+120
	DD	imagerel $unwind$?mg_closedir@@YAHPEAUDIR@@@Z
$pdata$?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z DD imagerel ?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z
	DD	imagerel ?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z+220
	DD	imagerel $unwind$?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z
$pdata$?poll@@YAHPEAUmg_pollfd@@IH@Z DD imagerel ?poll@@YAHPEAUmg_pollfd@@IH@Z
	DD	imagerel ?poll@@YAHPEAUmg_pollfd@@IH@Z+1155
	DD	imagerel $unwind$?poll@@YAHPEAUmg_pollfd@@IH@Z
$pdata$?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z DD imagerel ?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z
	DD	imagerel ?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z+43
	DD	imagerel $unwind$?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z
$pdata$?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z DD imagerel ?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z
	DD	imagerel ?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z+124
	DD	imagerel $unwind$?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z
$pdata$?mg_join_thread@@YAHPEAX@Z DD imagerel ?mg_join_thread@@YAHPEAX@Z
	DD	imagerel ?mg_join_thread@@YAHPEAX@Z+87
	DD	imagerel $unwind$?mg_join_thread@@YAHPEAX@Z
$pdata$?dlopen@@YAPEAXPEBDH@Z DD imagerel ?dlopen@@YAPEAXPEBDH@Z
	DD	imagerel ?dlopen@@YAPEAXPEBDH@Z+95
	DD	imagerel $unwind$?dlopen@@YAPEAXPEBDH@Z
$pdata$?dlclose@@YAHPEAX@Z DD imagerel ?dlclose@@YAHPEAX@Z
	DD	imagerel ?dlclose@@YAHPEAX@Z+51
	DD	imagerel $unwind$?dlclose@@YAHPEAX@Z
$pdata$?kill@@YAHPEAXH@Z DD imagerel ?kill@@YAHPEAXH@Z
	DD	imagerel ?kill@@YAHPEAXH@Z+46
	DD	imagerel $unwind$?kill@@YAHPEAXH@Z
$pdata$?waitpid@@YAPEAXPEAXPEAHH@Z DD imagerel ?waitpid@@YAPEAXPEAXPEAHH@Z
	DD	imagerel ?waitpid@@YAPEAXPEAXPEAHH@Z+106
	DD	imagerel $unwind$?waitpid@@YAPEAXPEAXPEAHH@Z
$pdata$?trim_trailing_whitespaces@@YAXPEAD@Z DD imagerel ?trim_trailing_whitespaces@@YAXPEAD@Z
	DD	imagerel ?trim_trailing_whitespaces@@YAXPEAD@Z+104
	DD	imagerel $unwind$?trim_trailing_whitespaces@@YAXPEAD@Z
$pdata$?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z DD imagerel ?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z
	DD	imagerel ?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z+1706
	DD	imagerel $unwind$?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z
$pdata$?set_blocking_mode@@YAH_K@Z DD imagerel ?set_blocking_mode@@YAH_K@Z
	DD	imagerel ?set_blocking_mode@@YAH_K@Z+43
	DD	imagerel $unwind$?set_blocking_mode@@YAH_K@Z
$pdata$?set_non_blocking_mode@@YAH_K@Z DD imagerel ?set_non_blocking_mode@@YAH_K@Z
	DD	imagerel ?set_non_blocking_mode@@YAH_K@Z+43
	DD	imagerel $unwind$?set_non_blocking_mode@@YAH_K@Z
$pdata$?get_random@@YA_KXZ DD imagerel ?get_random@@YA_KXZ
	DD	imagerel ?get_random@@YA_KXZ+203
	DD	imagerel $unwind$?get_random@@YA_KXZ
$pdata$?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z DD imagerel ?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z
	DD	imagerel ?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z+285
	DD	imagerel $unwind$?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z
$pdata$?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z DD imagerel ?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z
	DD	imagerel ?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z+1002
	DD	imagerel $unwind$?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z
$pdata$?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z DD imagerel ?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z
	DD	imagerel ?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z+382
	DD	imagerel $unwind$?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z
$pdata$?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z DD imagerel ?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z
	DD	imagerel ?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z+1199
	DD	imagerel $unwind$?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z
$pdata$?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z DD imagerel ?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z
	DD	imagerel ?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z+539
	DD	imagerel $unwind$?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z
$pdata$?discard_unread_request_data@@YAXPEAUmg_connection@@@Z DD imagerel ?discard_unread_request_data@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?discard_unread_request_data@@YAXPEAUmg_connection@@@Z+90
	DD	imagerel $unwind$?discard_unread_request_data@@YAXPEAUmg_connection@@@Z
$pdata$?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z DD imagerel ?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z
	DD	imagerel ?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z+636
	DD	imagerel $unwind$?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z
$pdata$?handle_request@@YAXPEAUmg_connection@@@Z DD imagerel ?handle_request@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?handle_request@@YAXPEAUmg_connection@@@Z+4888
	DD	imagerel $unwind$?handle_request@@YAXPEAUmg_connection@@@Z
$pdata$?log_access@@YAXPEBUmg_connection@@@Z DD imagerel ?log_access@@YAXPEBUmg_connection@@@Z
	DD	imagerel ?log_access@@YAXPEBUmg_connection@@@Z+1405
	DD	imagerel $unwind$?log_access@@YAXPEBUmg_connection@@@Z
$pdata$?handle_request_stat_log@@YAXPEAUmg_connection@@@Z DD imagerel ?handle_request_stat_log@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?handle_request_stat_log@@YAXPEAUmg_connection@@@Z+112
	DD	imagerel $unwind$?handle_request_stat_log@@YAXPEAUmg_connection@@@Z
$pdata$?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z DD imagerel ?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z
	DD	imagerel ?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z+217
	DD	imagerel $unwind$?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z
$pdata$?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z DD imagerel ?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z
	DD	imagerel ?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z+311
	DD	imagerel $unwind$?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z
$pdata$?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z DD imagerel ?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z
	DD	imagerel ?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z+188
	DD	imagerel $unwind$?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z
$pdata$?url_decode_in_place@@YAXPEAD@Z DD imagerel ?url_decode_in_place@@YAXPEAD@Z
	DD	imagerel ?url_decode_in_place@@YAXPEAD@Z+64
	DD	imagerel $unwind$?url_decode_in_place@@YAXPEAD@Z
$pdata$?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z DD imagerel ?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z
	DD	imagerel ?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z+279
	DD	imagerel $unwind$?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z
$pdata$?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z DD imagerel ?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z
	DD	imagerel ?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z+204
	DD	imagerel $unwind$?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z
$pdata$?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z+153
	DD	imagerel $unwind$?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z+69
	DD	imagerel $unwind$?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z DD imagerel ?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z
	DD	imagerel ?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z+320
	DD	imagerel $unwind$?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z
$pdata$?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z DD imagerel ?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z
	DD	imagerel ?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z+2753
	DD	imagerel $unwind$?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z
$pdata$?get_http_header_len@@YAHPEBDH@Z DD imagerel ?get_http_header_len@@YAHPEBDH@Z
	DD	imagerel ?get_http_header_len@@YAHPEBDH@Z+306
	DD	imagerel $unwind$?get_http_header_len@@YAHPEBDH@Z
$pdata$?get_month_index@@YAHPEBD@Z DD imagerel ?get_month_index@@YAHPEBD@Z
	DD	imagerel ?get_month_index@@YAHPEBD@Z+92
	DD	imagerel $unwind$?get_month_index@@YAHPEBD@Z
$pdata$?parse_date_string@@YA_JPEBD@Z DD imagerel ?parse_date_string@@YA_JPEBD@Z
	DD	imagerel ?parse_date_string@@YA_JPEBD@Z+530
	DD	imagerel $unwind$?parse_date_string@@YA_JPEBD@Z
$pdata$?remove_dot_segments@@YAXPEAD@Z DD imagerel ?remove_dot_segments@@YAXPEAD@Z
	DD	imagerel ?remove_dot_segments@@YAXPEAD@Z+971
	DD	imagerel $unwind$?remove_dot_segments@@YAXPEAD@Z
$pdata$?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z DD imagerel ?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z
	DD	imagerel ?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z+304
	DD	imagerel $unwind$?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z
$pdata$?bin2str@@YAXPEADPEBE_K@Z DD imagerel ?bin2str@@YAXPEADPEBE_K@Z
	DD	imagerel ?bin2str@@YAXPEADPEBE_K@Z+189
	DD	imagerel $unwind$?bin2str@@YAXPEADPEBE_K@Z
$pdata$?check_password_digest@@YAHPEBD0000000@Z DD imagerel ?check_password_digest@@YAHPEBD0000000@Z
	DD	imagerel ?check_password_digest@@YAHPEBD0000000@Z+399
	DD	imagerel $unwind$?check_password_digest@@YAHPEBD0000000@Z
$pdata$?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z DD imagerel ?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
	DD	imagerel ?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z+554
	DD	imagerel $unwind$?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
$pdata$?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z DD imagerel ?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z
	DD	imagerel ?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z+1208
	DD	imagerel $unwind$?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z
$pdata$?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z DD imagerel ?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z
	DD	imagerel ?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z+1514
	DD	imagerel $unwind$?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z
$pdata$?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z DD imagerel ?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z
	DD	imagerel ?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z+298
	DD	imagerel $unwind$?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z
$pdata$?check_authorization@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?check_authorization@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?check_authorization@@YAHPEAUmg_connection@@PEBD@Z+568
	DD	imagerel $unwind$?check_authorization@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z+511
	DD	imagerel $unwind$?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?is_authorized_for_put@@YAHPEAUmg_connection@@@Z DD imagerel ?is_authorized_for_put@@YAHPEAUmg_connection@@@Z
	DD	imagerel ?is_authorized_for_put@@YAHPEAUmg_connection@@@Z+224
	DD	imagerel $unwind$?is_authorized_for_put@@YAHPEAUmg_connection@@@Z
$pdata$?is_valid_port@@YAHK@Z DD imagerel ?is_valid_port@@YAHK@Z
	DD	imagerel ?is_valid_port@@YAHK@Z+42
	DD	imagerel $unwind$?is_valid_port@@YAHK@Z
$pdata$?mg_inet_pton@@YAHHPEBDPEAX_KH@Z DD imagerel ?mg_inet_pton@@YAHHPEBDPEAX_KH@Z
	DD	imagerel ?mg_inet_pton@@YAHHPEBDPEAX_KH@Z+255
	DD	imagerel $unwind$?mg_inet_pton@@YAHHPEBDPEAX_KH@Z
$pdata$?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z DD imagerel ?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z
	DD	imagerel ?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z+1778
	DD	imagerel $unwind$?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z
$pdata$?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z DD imagerel ?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z
	DD	imagerel ?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z+1359
	DD	imagerel $unwind$?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z
$pdata$?compare_dir_entries@@YAHPEBX0PEAX@Z DD imagerel ?compare_dir_entries@@YAHPEBX0PEAX@Z
	DD	imagerel ?compare_dir_entries@@YAHPEBX0PEAX@Z+511
	DD	imagerel $unwind$?compare_dir_entries@@YAHPEBX0PEAX@Z
$pdata$?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z+151
	DD	imagerel $unwind$?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z DD imagerel ?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z
	DD	imagerel ?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z+493
	DD	imagerel $unwind$?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z
$pdata$?remove_directory@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?remove_directory@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?remove_directory@@YAHPEAUmg_connection@@PEBD@Z+529
	DD	imagerel $unwind$?remove_directory@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?dir_scan_callback@@YAHPEAUde@@PEAX@Z DD imagerel ?dir_scan_callback@@YAHPEAUde@@PEAX@Z
	DD	imagerel ?dir_scan_callback@@YAHPEAUde@@PEAX@Z+290
	DD	imagerel $unwind$?dir_scan_callback@@YAHPEAUde@@PEAX@Z
$pdata$?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z+1190
	DD	imagerel $unwind$?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z DD imagerel ?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z
	DD	imagerel ?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z+682
	DD	imagerel $unwind$?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z
$pdata$?parse_range_header@@YAHPEBDPEA_J1@Z DD imagerel ?parse_range_header@@YAHPEBDPEA_J1@Z
	DD	imagerel ?parse_range_header@@YAHPEBDPEA_J1@Z+51
	DD	imagerel $unwind$?parse_range_header@@YAHPEBDPEA_J1@Z
$pdata$?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z DD imagerel ?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z
	DD	imagerel ?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z+96
	DD	imagerel $unwind$?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z
$pdata$?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z DD imagerel ?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z
	DD	imagerel ?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z+1937
	DD	imagerel $unwind$?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z
$pdata$?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z DD imagerel ?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z
	DD	imagerel ?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z+213
	DD	imagerel $unwind$?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z
$pdata$?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z DD imagerel ?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z
	DD	imagerel ?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z+261
	DD	imagerel $unwind$?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z
$pdata$?put_dir@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?put_dir@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?put_dir@@YAHPEAUmg_connection@@PEBD@Z+421
	DD	imagerel $unwind$?put_dir@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z DD imagerel ?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z
	DD	imagerel ?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z+104
	DD	imagerel $unwind$?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z
$pdata$?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z DD imagerel ?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z
	DD	imagerel ?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z+225
	DD	imagerel $unwind$?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z
$pdata$?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z DD imagerel ?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z
	DD	imagerel ?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z+84
	DD	imagerel $unwind$?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z
$pdata$?is_valid_http_method@@YAHPEBD@Z DD imagerel ?is_valid_http_method@@YAHPEBD@Z
	DD	imagerel ?is_valid_http_method@@YAHPEBD@Z+51
	DD	imagerel $unwind$?is_valid_http_method@@YAHPEBD@Z
$pdata$?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z DD imagerel ?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z
	DD	imagerel ?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z+574
	DD	imagerel $unwind$?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z
$pdata$?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z DD imagerel ?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z
	DD	imagerel ?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z+727
	DD	imagerel $unwind$?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z
$pdata$?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z DD imagerel ?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z
	DD	imagerel ?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z+648
	DD	imagerel $unwind$?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z
$pdata$?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z DD imagerel ?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z
	DD	imagerel ?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z+553
	DD	imagerel $unwind$?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z
$pdata$?addenv@@YAXPEAUcgi_environment@@PEBDZZ DD imagerel ?addenv@@YAXPEAUcgi_environment@@PEBDZZ
	DD	imagerel ?addenv@@YAXPEAUcgi_environment@@PEBDZZ+759
	DD	imagerel $unwind$?addenv@@YAXPEAUcgi_environment@@PEBDZZ
$pdata$?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z DD imagerel ?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z
	DD	imagerel ?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z+2659
	DD	imagerel $unwind$?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z
$pdata$?abort_cgi_process@@YAHPEAX@Z DD imagerel ?abort_cgi_process@@YAHPEAX@Z
	DD	imagerel ?abort_cgi_process@@YAHPEAX@Z+179
	DD	imagerel $unwind$?abort_cgi_process@@YAHPEAX@Z
$pdata$?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z DD imagerel ?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z
	DD	imagerel ?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z+3452
	DD	imagerel $unwind$?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z
$pdata$?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z+617
	DD	imagerel $unwind$?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?get_uri_type@@YAHPEBD@Z DD imagerel ?get_uri_type@@YAHPEBD@Z
	DD	imagerel ?get_uri_type@@YAHPEBD@Z+495
	DD	imagerel $unwind$?get_uri_type@@YAHPEBD@Z
$pdata$?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z DD imagerel ?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z
	DD	imagerel ?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z+789
	DD	imagerel $unwind$?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z
$pdata$?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z DD imagerel ?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z
	DD	imagerel ?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z+1236
	DD	imagerel $unwind$?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z
$pdata$?put_file@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?put_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?put_file@@YAXPEAUmg_connection@@PEBD@Z+1091
	DD	imagerel $unwind$?put_file@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?delete_file@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?delete_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?delete_file@@YAXPEAUmg_connection@@PEBD@Z+408
	DD	imagerel $unwind$?delete_file@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z DD imagerel ?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z
	DD	imagerel ?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z+891
	DD	imagerel $unwind$?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z
$pdata$?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z DD imagerel ?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z
	DD	imagerel ?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z+1221
	DD	imagerel $unwind$?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z
$pdata$?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z DD imagerel ?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z
	DD	imagerel ?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z+422
	DD	imagerel $unwind$?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z
$pdata$?mg_fgetc@@YAHPEAUmg_file@@@Z DD imagerel ?mg_fgetc@@YAHPEAUmg_file@@@Z
	DD	imagerel ?mg_fgetc@@YAHPEAUmg_file@@@Z+64
	DD	imagerel $unwind$?mg_fgetc@@YAHPEAUmg_file@@@Z
$pdata$?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z DD imagerel ?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
	DD	imagerel ?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z+430
	DD	imagerel $unwind$?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
$pdata$?send_options@@YAXPEAUmg_connection@@@Z DD imagerel ?send_options@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?send_options@@YAXPEAUmg_connection@@@Z+205
	DD	imagerel $unwind$?send_options@@YAXPEAUmg_connection@@@Z
$pdata$?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z DD imagerel ?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z
	DD	imagerel ?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z+635
	DD	imagerel $unwind$?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z
$pdata$?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z DD imagerel ?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z
	DD	imagerel ?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z+97
	DD	imagerel $unwind$?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z
$pdata$?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z DD imagerel ?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z
	DD	imagerel ?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z+361
	DD	imagerel $unwind$?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z
$pdata$?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z+1329
	DD	imagerel $unwind$?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z+372
	DD	imagerel $unwind$?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z DD imagerel ?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z
	DD	imagerel ?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z+308
	DD	imagerel $unwind$?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z
$pdata$?SHA1_Transform@@YAXQEAIQEBE@Z DD imagerel ?SHA1_Transform@@YAXQEAIQEBE@Z
	DD	imagerel ?SHA1_Transform@@YAXQEAIQEBE@Z+18320
	DD	imagerel $unwind$?SHA1_Transform@@YAXQEAIQEBE@Z
$pdata$?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z DD imagerel ?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z
	DD	imagerel ?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z+432
	DD	imagerel $unwind$?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z
$pdata$?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z DD imagerel ?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z
	DD	imagerel ?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z+363
	DD	imagerel $unwind$?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z
$pdata$?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z DD imagerel ?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z
	DD	imagerel ?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z+383
	DD	imagerel $unwind$?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z
$pdata$?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z DD imagerel ?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z
	DD	imagerel ?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z+2632
	DD	imagerel $unwind$?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z
$pdata$?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z DD imagerel ?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z
	DD	imagerel ?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z+506
	DD	imagerel $unwind$?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z
$pdata$?mask_data@@YAXPEBD_KIPEAD@Z DD imagerel ?mask_data@@YAXPEBD_KIPEAD@Z
	DD	imagerel ?mask_data@@YAXPEBD_KIPEAD@Z+264
	DD	imagerel $unwind$?mask_data@@YAXPEBD_KIPEAD@Z
$pdata$?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z DD imagerel ?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z
	DD	imagerel ?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z+1203
	DD	imagerel $unwind$?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z
$pdata$?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z DD imagerel ?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z
	DD	imagerel ?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z+285
	DD	imagerel $unwind$?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z
$pdata$?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z DD imagerel ?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z
	DD	imagerel ?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z+468
	DD	imagerel $unwind$?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z
$pdata$?set_throttle@@YAHPEBDPEBTusa@@0@Z DD imagerel ?set_throttle@@YAHPEBDPEBTusa@@0@Z
	DD	imagerel ?set_throttle@@YAHPEBDPEBTusa@@0@Z+399
	DD	imagerel $unwind$?set_throttle@@YAHPEBDPEBTusa@@0@Z
$pdata$?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z DD imagerel ?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z
	DD	imagerel ?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z+573
	DD	imagerel $unwind$?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z
$pdata$?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z DD imagerel ?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z
	DD	imagerel ?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z+486
	DD	imagerel $unwind$?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z
$pdata$?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z DD imagerel ?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z
	DD	imagerel ?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z+162
	DD	imagerel $unwind$?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z
$pdata$?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z DD imagerel ?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z
	DD	imagerel ?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z+66
	DD	imagerel $unwind$?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z
$pdata$?search_boundary@@YAPEBDPEBD_K01@Z DD imagerel ?search_boundary@@YAPEBDPEBD_K01@Z
	DD	imagerel ?search_boundary@@YAPEBDPEBD_K01@Z+178
	DD	imagerel $unwind$?search_boundary@@YAPEBDPEBD_K01@Z
$pdata$?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z DD imagerel ?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z
	DD	imagerel ?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z+123
	DD	imagerel $unwind$?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z
$pdata$?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z DD imagerel ?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z
	DD	imagerel ?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z+271
	DD	imagerel $unwind$?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z
$pdata$?switch_domain_context@@YAHPEAUmg_connection@@@Z DD imagerel ?switch_domain_context@@YAHPEAUmg_connection@@@Z
	DD	imagerel ?switch_domain_context@@YAHPEAUmg_connection@@@Z+414
	DD	imagerel $unwind$?switch_domain_context@@YAHPEAUmg_connection@@@Z
$pdata$?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z DD imagerel ?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z
	DD	imagerel ?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z+460
	DD	imagerel $unwind$?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z
$pdata$?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z DD imagerel ?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z
	DD	imagerel ?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z+1339
	DD	imagerel $unwind$?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z
$pdata$?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z DD imagerel ?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z
	DD	imagerel ?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z+781
	DD	imagerel $unwind$?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z
$pdata$?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z DD imagerel ?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z
	DD	imagerel ?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z+94
	DD	imagerel $unwind$?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z
$pdata$?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z DD imagerel ?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z
	DD	imagerel ?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z+64
	DD	imagerel $unwind$?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z
$pdata$?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z DD imagerel ?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z
	DD	imagerel ?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z+79
	DD	imagerel $unwind$?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z
$pdata$?close_all_listening_sockets@@YAXPEAUmg_context@@@Z DD imagerel ?close_all_listening_sockets@@YAXPEAUmg_context@@@Z
	DD	imagerel ?close_all_listening_sockets@@YAXPEAUmg_context@@@Z+169
	DD	imagerel $unwind$?close_all_listening_sockets@@YAXPEAUmg_context@@@Z
$pdata$?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z DD imagerel ?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z
	DD	imagerel ?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z+1134
	DD	imagerel $unwind$?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z
$pdata$?is_ssl_port_used@@YAHPEBD@Z DD imagerel ?is_ssl_port_used@@YAHPEBD@Z
	DD	imagerel ?is_ssl_port_used@@YAHPEBD@Z+183
	DD	imagerel $unwind$?is_ssl_port_used@@YAHPEBD@Z
$pdata$?set_ports_option@@YAHPEAUmg_context@@@Z DD imagerel ?set_ports_option@@YAHPEAUmg_context@@@Z
	DD	imagerel ?set_ports_option@@YAHPEAUmg_context@@@Z+2052
	DD	imagerel $unwind$?set_ports_option@@YAHPEAUmg_context@@@Z
$pdata$?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z DD imagerel ?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z
	DD	imagerel ?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z+63
	DD	imagerel $unwind$?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z
$pdata$?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z DD imagerel ?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z
	DD	imagerel ?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z+344
	DD	imagerel $unwind$?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z
$pdata$?tls_dtor@@YAXPEAX@Z DD imagerel ?tls_dtor@@YAXPEAX@Z
	DD	imagerel ?tls_dtor@@YAXPEAX@Z+76
	DD	imagerel $unwind$?tls_dtor@@YAXPEAX@Z
$pdata$?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z DD imagerel ?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z
	DD	imagerel ?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z+552
	DD	imagerel $unwind$?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z
$pdata$?ssl_error@@YAPEBDXZ DD imagerel ?ssl_error@@YAPEBDXZ
	DD	imagerel ?ssl_error@@YAPEBDXZ+100
	DD	imagerel $unwind$?ssl_error@@YAPEBDXZ
$pdata$?refresh_trust@@YAHPEAUmg_connection@@@Z DD imagerel ?refresh_trust@@YAHPEAUmg_connection@@@Z
	DD	imagerel ?refresh_trust@@YAHPEAUmg_connection@@@Z+799
	DD	imagerel $unwind$?refresh_trust@@YAHPEAUmg_connection@@@Z
$pdata$?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z DD imagerel ?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z
	DD	imagerel ?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z+1562
	DD	imagerel $unwind$?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z
$pdata$?hexdump2string@@YAHPEAXHPEADH@Z DD imagerel ?hexdump2string@@YAHPEAXHPEADH@Z
	DD	imagerel ?hexdump2string@@YAHPEAXHPEADH@Z+279
	DD	imagerel $unwind$?hexdump2string@@YAHPEAXHPEADH@Z
$pdata$?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z DD imagerel ?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z
	DD	imagerel ?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z+1197
	DD	imagerel $unwind$?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z
$pdata$?ssl_locking_callback@@YAXHHPEBDH@Z DD imagerel ?ssl_locking_callback@@YAXHHPEBDH@Z
	DD	imagerel ?ssl_locking_callback@@YAXHHPEBDH@Z+100
	DD	imagerel $unwind$?ssl_locking_callback@@YAXHHPEBDH@Z
$pdata$?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z DD imagerel ?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z
	DD	imagerel ?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z+605
	DD	imagerel $unwind$?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z
$pdata$?initialize_openssl@@YAHPEAD_K@Z DD imagerel ?initialize_openssl@@YAHPEAD_K@Z
	DD	imagerel ?initialize_openssl@@YAHPEAD_K@Z+775
	DD	imagerel $unwind$?initialize_openssl@@YAHPEAD_K@Z
$pdata$?ssl_get_protocol@@YAJH@Z DD imagerel ?ssl_get_protocol@@YAJH@Z
	DD	imagerel ?ssl_get_protocol@@YAJH@Z+125
	DD	imagerel $unwind$?ssl_get_protocol@@YAJH@Z
$pdata$?ssl_info_callback@@YAXPEBUssl_st@@HH@Z DD imagerel ?ssl_info_callback@@YAXPEBUssl_st@@HH@Z
	DD	imagerel ?ssl_info_callback@@YAXPEBUssl_st@@HH@Z+78
	DD	imagerel $unwind$?ssl_info_callback@@YAXPEBUssl_st@@HH@Z
$pdata$?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z DD imagerel ?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z
	DD	imagerel ?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z+567
	DD	imagerel $unwind$?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z
$pdata$?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z DD imagerel ?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z
	DD	imagerel ?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z+2792
	DD	imagerel $unwind$?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z
$pdata$?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z DD imagerel ?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z
	DD	imagerel ?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z+1017
	DD	imagerel $unwind$?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z
$pdata$?uninitialize_openssl@@YAXXZ DD imagerel ?uninitialize_openssl@@YAXXZ
	DD	imagerel ?uninitialize_openssl@@YAXXZ+342
	DD	imagerel $unwind$?uninitialize_openssl@@YAXXZ
$pdata$?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z DD imagerel ?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z
	DD	imagerel ?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z+314
	DD	imagerel $unwind$?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z
$pdata$?set_acl_option@@YAHPEAUmg_context@@@Z DD imagerel ?set_acl_option@@YAHPEAUmg_context@@@Z
	DD	imagerel ?set_acl_option@@YAHPEAUmg_context@@@Z+112
	DD	imagerel $unwind$?set_acl_option@@YAHPEAUmg_context@@@Z
$pdata$?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z DD imagerel ?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z+411
	DD	imagerel $unwind$?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z
$pdata$?set_tcp_nodelay@@YAHPEBUsocket@@H@Z DD imagerel ?set_tcp_nodelay@@YAHPEBUsocket@@H@Z
	DD	imagerel ?set_tcp_nodelay@@YAHPEBUsocket@@H@Z+97
	DD	imagerel $unwind$?set_tcp_nodelay@@YAHPEBUsocket@@H@Z
$pdata$?close_socket_gracefully@@YAXPEAUmg_connection@@@Z DD imagerel ?close_socket_gracefully@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?close_socket_gracefully@@YAXPEAUmg_connection@@@Z+652
	DD	imagerel $unwind$?close_socket_gracefully@@YAXPEAUmg_connection@@@Z
$pdata$?close_connection@@YAXPEAUmg_connection@@@Z DD imagerel ?close_connection@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?close_connection@@YAXPEAUmg_connection@@@Z+397
	DD	imagerel $unwind$?close_connection@@YAXPEAUmg_connection@@@Z
$pdata$?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z DD imagerel ?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z
	DD	imagerel ?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z+2189
	DD	imagerel $unwind$?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z
$pdata$?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z DD imagerel ?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z
	DD	imagerel ?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z+611
	DD	imagerel $unwind$?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z
$pdata$?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z DD imagerel ?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z
	DD	imagerel ?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z+686
	DD	imagerel $unwind$?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z
$pdata$?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z DD imagerel ?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z
	DD	imagerel ?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z+753
	DD	imagerel $unwind$?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z
$pdata$?websocket_client_thread@@YAIPEAX@Z DD imagerel ?websocket_client_thread@@YAIPEAX@Z
	DD	imagerel ?websocket_client_thread@@YAIPEAX@Z+343
	DD	imagerel $unwind$?websocket_client_thread@@YAIPEAX@Z
$pdata$?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z DD imagerel ?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z
	DD	imagerel ?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z+1160
	DD	imagerel $unwind$?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z
$pdata$?init_connection@@YAXPEAUmg_connection@@@Z DD imagerel ?init_connection@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?init_connection@@YAXPEAUmg_connection@@@Z+274
	DD	imagerel $unwind$?init_connection@@YAXPEAUmg_connection@@@Z
$pdata$?process_new_connection@@YAXPEAUmg_connection@@@Z DD imagerel ?process_new_connection@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?process_new_connection@@YAXPEAUmg_connection@@@Z+1437
	DD	imagerel $unwind$?process_new_connection@@YAXPEAUmg_connection@@@Z
$pdata$?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z DD imagerel ?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z
	DD	imagerel ?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z+398
	DD	imagerel $unwind$?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z
$pdata$?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z DD imagerel ?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z
	DD	imagerel ?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z+353
	DD	imagerel $unwind$?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z
$pdata$?worker_thread_run@@YAXPEAUmg_connection@@@Z DD imagerel ?worker_thread_run@@YAXPEAUmg_connection@@@Z
	DD	imagerel ?worker_thread_run@@YAXPEAUmg_connection@@@Z+1582
	DD	imagerel $unwind$?worker_thread_run@@YAXPEAUmg_connection@@@Z
$pdata$?worker_thread@@YAIPEAX@Z DD imagerel ?worker_thread@@YAIPEAX@Z
	DD	imagerel ?worker_thread@@YAIPEAX@Z+26
	DD	imagerel $unwind$?worker_thread@@YAIPEAX@Z
$pdata$?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z DD imagerel ?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z
	DD	imagerel ?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z+736
	DD	imagerel $unwind$?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z
$pdata$?master_thread_run@@YAXPEAUmg_context@@@Z DD imagerel ?master_thread_run@@YAXPEAUmg_context@@@Z
	DD	imagerel ?master_thread_run@@YAXPEAUmg_context@@@Z+780
	DD	imagerel $unwind$?master_thread_run@@YAXPEAUmg_context@@@Z
$pdata$?master_thread@@YAIPEAX@Z DD imagerel ?master_thread@@YAIPEAX@Z
	DD	imagerel ?master_thread@@YAIPEAX@Z+26
	DD	imagerel $unwind$?master_thread@@YAIPEAX@Z
$pdata$?free_context@@YAXPEAUmg_context@@@Z DD imagerel ?free_context@@YAXPEAUmg_context@@@Z
	DD	imagerel ?free_context@@YAXPEAUmg_context@@@Z+522
	DD	imagerel $unwind$?free_context@@YAXPEAUmg_context@@@Z
$pdata$?get_system_name@@YAXPEAPEAD@Z DD imagerel ?get_system_name@@YAXPEAPEAD@Z
	DD	imagerel ?get_system_name@@YAXPEAPEAD@Z+355
	DD	imagerel $unwind$?get_system_name@@YAXPEAPEAD@Z
$pdata$?legacy_init@@YAXPEAPEBD@Z DD imagerel ?legacy_init@@YAXPEAPEBD@Z
	DD	imagerel ?legacy_init@@YAXPEAPEBD@Z+188
	DD	imagerel $unwind$?legacy_init@@YAXPEAPEBD@Z
$pdata$?mg_str_append@@YA_KPEAPEADPEADPEBD@Z DD imagerel ?mg_str_append@@YA_KPEAPEADPEADPEBD@Z
	DD	imagerel ?mg_str_append@@YA_KPEAPEADPEADPEBD@Z+139
	DD	imagerel $unwind$?mg_str_append@@YA_KPEAPEADPEADPEBD@Z
$pdata$?stb__sbgrowf@@YAPEAXPEAXHH@Z DD imagerel ?stb__sbgrowf@@YAPEAXPEAXHH@Z
	DD	imagerel ?stb__sbgrowf@@YAPEAXPEAXHH@Z+314
	DD	imagerel $unwind$?stb__sbgrowf@@YAPEAXPEAXHH@Z
$pdata$?zsmov@@YAPEADPEAX_KPEBX@Z DD imagerel ?zsmov@@YAPEADPEAX_KPEBX@Z
	DD	imagerel ?zsmov@@YAPEADPEAX_KPEBX@Z+101
	DD	imagerel $unwind$?zsmov@@YAPEADPEAX_KPEBX@Z
$pdata$?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z DD imagerel ?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z
	DD	imagerel ?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z+570
	DD	imagerel $unwind$?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z
$pdata$?ReturnDecodeError@@YAHPEB_W@Z DD imagerel ?ReturnDecodeError@@YAHPEB_W@Z
	DD	imagerel ?ReturnDecodeError@@YAHPEB_W@Z+285
	DD	imagerel $unwind$?ReturnDecodeError@@YAHPEB_W@Z
$pdata$?VarintSize@@YAH_K@Z DD imagerel ?VarintSize@@YAH_K@Z
	DD	imagerel ?VarintSize@@YAH_K@Z+61
	DD	imagerel $unwind$?VarintSize@@YAH_K@Z
$pdata$?PeekVarint@@YAHPEAEPEA_K@Z DD imagerel ?PeekVarint@@YAHPEAEPEA_K@Z
	DD	imagerel ?PeekVarint@@YAHPEAEPEA_K@Z+150
	DD	imagerel $unwind$?PeekVarint@@YAHPEAEPEA_K@Z
$pdata$?WriteVarint@@YAPEAEPEAE_K@Z DD imagerel ?WriteVarint@@YAPEAEPEAE_K@Z
	DD	imagerel ?WriteVarint@@YAPEAEPEAE_K@Z+396
	DD	imagerel $unwind$?WriteVarint@@YAPEAEPEAE_K@Z
$pdata$?EncodeLabel@@YAIHH@Z DD imagerel ?EncodeLabel@@YAIHH@Z
	DD	imagerel ?EncodeLabel@@YAIHH@Z+34
	DD	imagerel $unwind$?EncodeLabel@@YAIHH@Z
$pdata$?DecodeLabel@@YA?AUxlabel@@_K@Z DD imagerel ?DecodeLabel@@YA?AUxlabel@@_K@Z
	DD	imagerel ?DecodeLabel@@YA?AUxlabel@@_K@Z+131
	DD	imagerel $unwind$?DecodeLabel@@YA?AUxlabel@@_K@Z
$pdata$?NewBlock@@YA?AUxblock@@I@Z DD imagerel ?NewBlock@@YA?AUxblock@@I@Z
	DD	imagerel ?NewBlock@@YA?AUxblock@@I@Z+55
	DD	imagerel $unwind$?NewBlock@@YA?AUxblock@@I@Z
$pdata$?DelBlock@@YAXPEAUxblock@@@Z DD imagerel ?DelBlock@@YAXPEAUxblock@@@Z
	DD	imagerel ?DelBlock@@YAXPEAUxblock@@@Z+53
	DD	imagerel $unwind$?DelBlock@@YAXPEAUxblock@@@Z
$pdata$?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z DD imagerel ?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z
	DD	imagerel ?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z+58
	DD	imagerel $unwind$?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z
$pdata$?StackCursorInBlock@@YAHPEAUxstack@@@Z DD imagerel ?StackCursorInBlock@@YAHPEAUxstack@@@Z
	DD	imagerel ?StackCursorInBlock@@YAHPEAUxstack@@@Z+101
	DD	imagerel $unwind$?StackCursorInBlock@@YAHPEAUxstack@@@Z
$pdata$?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z DD imagerel ?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z
	DD	imagerel ?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z+71
	DD	imagerel $unwind$?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z
$pdata$?StackInBlockOf@@YAHPEAUxstack@@0@Z DD imagerel ?StackInBlockOf@@YAHPEAUxstack@@0@Z
	DD	imagerel ?StackInBlockOf@@YAHPEAUxstack@@0@Z+150
	DD	imagerel $unwind$?StackInBlockOf@@YAHPEAUxstack@@0@Z
$pdata$?GobbleVarint@@YA_KPEAUxstack@@@Z DD imagerel ?GobbleVarint@@YA_KPEAUxstack@@@Z
	DD	imagerel ?GobbleVarint@@YA_KPEAUxstack@@@Z+60
	DD	imagerel $unwind$?GobbleVarint@@YA_KPEAUxstack@@@Z
$pdata$?GobbleFloat32@@YAMPEAUxstack@@@Z DD imagerel ?GobbleFloat32@@YAMPEAUxstack@@@Z
	DD	imagerel ?GobbleFloat32@@YAMPEAUxstack@@@Z+55
	DD	imagerel $unwind$?GobbleFloat32@@YAMPEAUxstack@@@Z
$pdata$?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z DD imagerel ?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z
	DD	imagerel ?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z+193
	DD	imagerel $unwind$?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z
$pdata$?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z DD imagerel ?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z
	DD	imagerel ?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z+373
	DD	imagerel $unwind$?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z
$pdata$?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z DD imagerel ?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z
	DD	imagerel ?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z+277
	DD	imagerel $unwind$?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z
$pdata$?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z DD imagerel ?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z
	DD	imagerel ?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z+55
	DD	imagerel $unwind$?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z
$pdata$?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z DD imagerel ?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z
	DD	imagerel ?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z+130
	DD	imagerel $unwind$?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z
$pdata$?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z DD imagerel ?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z
	DD	imagerel ?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z+44
	DD	imagerel $unwind$?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z
$pdata$?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z DD imagerel ?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z
	DD	imagerel ?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z+133
	DD	imagerel $unwind$?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z
$pdata$?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z DD imagerel ?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z
	DD	imagerel ?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z+147
	DD	imagerel $unwind$?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z
$pdata$?DelValue@@YAXPEAUxvalue@@@Z DD imagerel ?DelValue@@YAXPEAUxvalue@@@Z
	DD	imagerel ?DelValue@@YAXPEAUxvalue@@@Z+290
	DD	imagerel $unwind$?DelValue@@YAXPEAUxvalue@@@Z
$pdata$?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z DD imagerel ?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z
	DD	imagerel ?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z+1232
	DD	imagerel $unwind$?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z
$pdata$?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z DD imagerel ?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z
	DD	imagerel ?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z+1160
	DD	imagerel $unwind$?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z
$pdata$?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z DD imagerel ?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z
	DD	imagerel ?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z+133
	DD	imagerel $unwind$?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z
$pdata$?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z DD imagerel ?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z
	DD	imagerel ?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z+287
	DD	imagerel $unwind$?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z
$pdata$?InternalGetUnknownValue@@YAXPEAUxstate@@@Z DD imagerel ?InternalGetUnknownValue@@YAXPEAUxstate@@@Z
	DD	imagerel ?InternalGetUnknownValue@@YAXPEAUxstate@@@Z+374
	DD	imagerel $unwind$?InternalGetUnknownValue@@YAXPEAUxstate@@@Z
$pdata$?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z DD imagerel ?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z
	DD	imagerel ?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z+121
	DD	imagerel $unwind$?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z
$pdata$?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z DD imagerel ?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z
	DD	imagerel ?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z+61
	DD	imagerel $unwind$?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z
$pdata$?GetVarintValue@@YAHPEAUxstate@@PEAI@Z DD imagerel ?GetVarintValue@@YAHPEAUxstate@@PEAI@Z
	DD	imagerel ?GetVarintValue@@YAHPEAUxstate@@PEAI@Z+34
	DD	imagerel $unwind$?GetVarintValue@@YAHPEAUxstate@@PEAI@Z
$pdata$?GetVarintValue@@YAHPEAUxstate@@PEAH@Z DD imagerel ?GetVarintValue@@YAHPEAUxstate@@PEAH@Z
	DD	imagerel ?GetVarintValue@@YAHPEAUxstate@@PEAH@Z+34
	DD	imagerel $unwind$?GetVarintValue@@YAHPEAUxstate@@PEAH@Z
$pdata$?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z DD imagerel ?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z
	DD	imagerel ?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z+131
	DD	imagerel $unwind$?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z
$pdata$?GetEnumValue@@YAHPEAUxstate@@PEAX@Z DD imagerel ?GetEnumValue@@YAHPEAUxstate@@PEAX@Z
	DD	imagerel ?GetEnumValue@@YAHPEAUxstate@@PEAX@Z+34
	DD	imagerel $unwind$?GetEnumValue@@YAHPEAUxstate@@PEAX@Z
$pdata$?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z DD imagerel ?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z
	DD	imagerel ?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z+164
	DD	imagerel $unwind$?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z
$pdata$?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z DD imagerel ?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z
	DD	imagerel ?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z+164
	DD	imagerel $unwind$?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z
$pdata$?NextField@@YAHPEAUxstate@@@Z DD imagerel ?NextField@@YAHPEAUxstate@@@Z
	DD	imagerel ?NextField@@YAHPEAUxstate@@@Z+644
	DD	imagerel $unwind$?NextField@@YAHPEAUxstate@@@Z
$pdata$?GetTag@@YAHPEAUxstate@@@Z DD imagerel ?GetTag@@YAHPEAUxstate@@@Z
	DD	imagerel ?GetTag@@YAHPEAUxstate@@@Z+193
	DD	imagerel $unwind$?GetTag@@YAHPEAUxstate@@@Z
$pdata$?Apportion@@YAXPEAUxstate@@_KPEBX@Z DD imagerel ?Apportion@@YAXPEAUxstate@@_KPEBX@Z
	DD	imagerel ?Apportion@@YAXPEAUxstate@@_KPEBX@Z+44
	DD	imagerel $unwind$?Apportion@@YAXPEAUxstate@@_KPEBX@Z
$pdata$?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z DD imagerel ?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z
	DD	imagerel ?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z+340
	DD	imagerel $unwind$?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z
$pdata$?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z DD imagerel ?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z
	DD	imagerel ?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z+135
	DD	imagerel $unwind$?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z
$pdata$?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z DD imagerel ?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z
	DD	imagerel ?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z+135
	DD	imagerel $unwind$?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z
$pdata$?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z DD imagerel ?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z
	DD	imagerel ?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z+166
	DD	imagerel $unwind$?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z
$pdata$?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z DD imagerel ?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z
	DD	imagerel ?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z+34
	DD	imagerel $unwind$?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z
$pdata$?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z DD imagerel ?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z
	DD	imagerel ?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z+135
	DD	imagerel $unwind$?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z
$pdata$?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z DD imagerel ?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z
	DD	imagerel ?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z+166
	DD	imagerel $unwind$?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z
$pdata$?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z DD imagerel ?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z
	DD	imagerel ?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z+1000
	DD	imagerel $unwind$?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z
$pdata$?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z DD imagerel ?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z
	DD	imagerel ?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z+460
	DD	imagerel $unwind$?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z
$pdata$?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z DD imagerel ?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z
	DD	imagerel ?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z+137
	DD	imagerel $unwind$?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z
$pdata$?RequestObservation@@YAHPEAUAlistarContext@@HH@Z DD imagerel ?RequestObservation@@YAHPEAUAlistarContext@@HH@Z
	DD	imagerel ?RequestObservation@@YAHPEAUAlistarContext@@HH@Z+90
	DD	imagerel $unwind$?RequestObservation@@YAHPEAUAlistarContext@@HH@Z
$pdata$?RequestGameInfo@@YAHPEAUAlistarContext@@@Z DD imagerel ?RequestGameInfo@@YAHPEAUAlistarContext@@@Z
	DD	imagerel ?RequestGameInfo@@YAHPEAUAlistarContext@@@Z+61
	DD	imagerel $unwind$?RequestGameInfo@@YAHPEAUAlistarContext@@@Z
$pdata$?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z DD imagerel ?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z
	DD	imagerel ?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z+61
	DD	imagerel $unwind$?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z
$pdata$?RequestCreateGame@@YAHPEAUAlistarContext@@@Z DD imagerel ?RequestCreateGame@@YAHPEAUAlistarContext@@@Z
	DD	imagerel ?RequestCreateGame@@YAHPEAUAlistarContext@@@Z+317
	DD	imagerel $unwind$?RequestCreateGame@@YAHPEAUAlistarContext@@@Z
$pdata$?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z DD imagerel ?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z
	DD	imagerel ?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z+207
	DD	imagerel $unwind$?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z
$pdata$?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z DD imagerel ?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z
	DD	imagerel ?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z+3456
	DD	imagerel $unwind$?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z
$pdata$?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z DD imagerel ?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z
	DD	imagerel ?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z+99
	DD	imagerel $unwind$?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z
$pdata$?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z DD imagerel ?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z
	DD	imagerel ?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z+168
	DD	imagerel $unwind$?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z
$pdata$?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z DD imagerel ?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z
	DD	imagerel ?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z+98
	DD	imagerel $unwind$?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z
$pdata$?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z DD imagerel ?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z
	DD	imagerel ?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z+250
	DD	imagerel $unwind$?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z
$pdata$?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ DD imagerel ?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ
	DD	imagerel ?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ+235
	DD	imagerel $unwind$?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ
$pdata$?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z DD imagerel ?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z
	DD	imagerel ?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z+104
	DD	imagerel $unwind$?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z
$pdata$?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z DD imagerel ?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z
	DD	imagerel ?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z+104
	DD	imagerel $unwind$?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z
$pdata$?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z DD imagerel ?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z
	DD	imagerel ?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z+549
	DD	imagerel $unwind$?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z
$pdata$?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z DD imagerel ?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z
	DD	imagerel ?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z+135
	DD	imagerel $unwind$?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z
$pdata$?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z DD imagerel ?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z
	DD	imagerel ?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z+452
	DD	imagerel $unwind$?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z
$pdata$?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z DD imagerel ?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z
	DD	imagerel ?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z+108
	DD	imagerel $unwind$?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z
$pdata$?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z DD imagerel ?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z
	DD	imagerel ?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z+166
	DD	imagerel $unwind$?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z
$pdata$?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z DD imagerel ?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z
	DD	imagerel ?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z+310
	DD	imagerel $unwind$?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z
$pdata$?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z DD imagerel ?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z
	DD	imagerel ?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z+104
	DD	imagerel $unwind$?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z
$pdata$?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z DD imagerel ?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z
	DD	imagerel ?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z+324
	DD	imagerel $unwind$?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z
$pdata$?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z DD imagerel ?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z
	DD	imagerel ?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z+135
	DD	imagerel $unwind$?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z
$pdata$?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z DD imagerel ?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z
	DD	imagerel ?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z+166
	DD	imagerel $unwind$?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z
$pdata$?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z DD imagerel ?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z
	DD	imagerel ?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z+448
	DD	imagerel $unwind$?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z
$pdata$?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z DD imagerel ?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z
	DD	imagerel ?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z+508
	DD	imagerel $unwind$?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z
$pdata$?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z DD imagerel ?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z
	DD	imagerel ?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z+1266
	DD	imagerel $unwind$?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z
$pdata$?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z DD imagerel ?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z
	DD	imagerel ?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z+602
	DD	imagerel $unwind$?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z
$pdata$?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z DD imagerel ?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z
	DD	imagerel ?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z+166
	DD	imagerel $unwind$?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z
$pdata$?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z DD imagerel ?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z
	DD	imagerel ?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z+135
	DD	imagerel $unwind$?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z
$pdata$?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z DD imagerel ?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z
	DD	imagerel ?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z+204
	DD	imagerel $unwind$?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z
$pdata$?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z DD imagerel ?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z
	DD	imagerel ?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z+1908
	DD	imagerel $unwind$?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z
$pdata$?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z DD imagerel ?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z
	DD	imagerel ?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z+135
	DD	imagerel $unwind$?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z
$pdata$?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z DD imagerel ?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z
	DD	imagerel ?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z+135
	DD	imagerel $unwind$?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z
$pdata$?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z DD imagerel ?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z
	DD	imagerel ?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z+347
	DD	imagerel $unwind$?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z
$pdata$?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z DD imagerel ?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z
	DD	imagerel ?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z+135
	DD	imagerel $unwind$?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z
$pdata$?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z DD imagerel ?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z
	DD	imagerel ?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z+516
	DD	imagerel $unwind$?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z
$pdata$?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z DD imagerel ?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z
	DD	imagerel ?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z+1433
	DD	imagerel $unwind$?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z
$pdata$?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z DD imagerel ?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z
	DD	imagerel ?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z+524
	DD	imagerel $unwind$?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z
$pdata$?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z DD imagerel ?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z
	DD	imagerel ?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z+975
	DD	imagerel $unwind$?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z
$pdata$?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z DD imagerel ?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z
	DD	imagerel ?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z+297
	DD	imagerel $unwind$?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z
$pdata$?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z DD imagerel ?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z
	DD	imagerel ?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z+826
	DD	imagerel $unwind$?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z
$pdata$?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z DD imagerel ?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z
	DD	imagerel ?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z+288
	DD	imagerel $unwind$?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z
$pdata$?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z DD imagerel ?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z
	DD	imagerel ?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z+323
	DD	imagerel $unwind$?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z
$pdata$?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z DD imagerel ?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z
	DD	imagerel ?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z+175
	DD	imagerel $unwind$?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z
$pdata$?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z DD imagerel ?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z
	DD	imagerel ?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z+327
	DD	imagerel $unwind$?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z
$pdata$?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z DD imagerel ?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z
	DD	imagerel ?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z+232
	DD	imagerel $unwind$?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z
$pdata$?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z DD imagerel ?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z
	DD	imagerel ?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z+271
	DD	imagerel $unwind$?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z
$pdata$?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z DD imagerel ?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z
	DD	imagerel ?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z+195
	DD	imagerel $unwind$?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z
$pdata$?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z DD imagerel ?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z
	DD	imagerel ?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z+32
	DD	imagerel $unwind$?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z
$pdata$?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z DD imagerel ?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z
	DD	imagerel ?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z+1249
	DD	imagerel $unwind$?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z
$pdata$?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z DD imagerel ?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z
	DD	imagerel ?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z+83
	DD	imagerel $unwind$?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z
$pdata$?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z DD imagerel ?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z
	DD	imagerel ?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z+255
	DD	imagerel $unwind$?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z
$pdata$?AlistarTick@@YAHPEAUAlistarContext@@@Z DD imagerel ?AlistarTick@@YAHPEAUAlistarContext@@@Z
	DD	imagerel ?AlistarTick@@YAHPEAUAlistarContext@@@Z+1491
	DD	imagerel $unwind$?AlistarTick@@YAHPEAUAlistarContext@@@Z
$pdata$?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z DD imagerel ?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z
	DD	imagerel ?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z+789
	DD	imagerel $unwind$?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z
pdata	ENDS
;	COMDAT ?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
_TLS	SEGMENT
?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA DD 00H ; `STATIC_ALLOCATOR'::`2'::Min
_TLS	ENDS
CRT$XCU	SEGMENT
?STANDARD_BASIS$initializer$@@3P6AXXZEA DQ FLAT:??__ESTANDARD_BASIS@@YAXXZ ; STANDARD_BASIS$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
CONST	SEGMENT
__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e DB '~', 0faH, '~', 0faH, '~', 0faH
	DB	'~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH
CONST	ENDS
;	COMDAT __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
CONST	SEGMENT
__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d DB 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH
	DB	0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H
CONST	ENDS
;	COMDAT __xmm@f493f493f493f493f493f493f493f493
CONST	SEGMENT
__xmm@f493f493f493f493f493f493f493f493 DB 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
	DB	093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
CONST	ENDS
;	COMDAT __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
CONST	SEGMENT
__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9 DB 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H
	DB	01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH
CONST	ENDS
;	COMDAT __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
CONST	SEGMENT
__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0 DB 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H
	DB	0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H
CONST	ENDS
;	COMDAT __xmm@e09ee565e09ee565e09ee565e09ee565
CONST	SEGMENT
__xmm@e09ee565e09ee565e09ee565e09ee565 DB 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H
	DB	09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H
CONST	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
CONST	SEGMENT
__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a DB 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
	DB	'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
CONST	ENDS
;	COMDAT __xmm@166f166f166f166f166f166f166f166f
CONST	SEGMENT
__xmm@166f166f166f166f166f166f166f166f DB 'o', 016H, 'o', 016H, 'o', 016H
	DB	'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H
CONST	ENDS
;	COMDAT __xmm@12d0046b12d0046b12d0046b12d0046b
CONST	SEGMENT
__xmm@12d0046b12d0046b12d0046b12d0046b DB 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H
	DB	012H, 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H, 012H
CONST	ENDS
;	COMDAT __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
CONST	SEGMENT
__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3 DB 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H
	DB	0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
CONST	SEGMENT
__xmm@11c8e09e11c8e09e11c8e09e11c8e09e DB 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H
	DB	0c8H, 011H, 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@08a914e808a914e808a914e808a914e8
CONST	SEGMENT
__xmm@08a914e808a914e808a914e808a914e8 DB 0e8H, 014H, 0a9H, 08H, 0e8H, 014H
	DB	0a9H, 08H, 0e8H, 014H, 0a9H, 08H, 0e8H, 014H, 0a9H, 08H
CONST	ENDS
;	COMDAT __xmm@01010000010100000101000001010000
CONST	SEGMENT
__xmm@01010000010100000101000001010000 DB 00H, 00H, 01H, 01H, 00H, 00H, 01H
	DB	01H, 00H, 00H, 01H, 01H, 00H, 00H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00000200000002000000020000000200
CONST	SEGMENT
__xmm@00000200000002000000020000000200 DB 00H, 02H, 00H, 00H, 00H, 02H, 00H
	DB	00H, 00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c1d80000
CONST	SEGMENT
__real@c1d80000 DD 0c1d80000r			; -27
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be2cca2e
CONST	SEGMENT
__real@be2cca2e DD 0be2cca2er			; -0.16874
CONST	ENDS
;	COMDAT __real@497423f0
CONST	SEGMENT
__real@497423f0 DD 0497423f0r			; 999999
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+18
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@41d80000
CONST	SEGMENT
__real@41d80000 DD 041d80000r			; 27
CONST	ENDS
;	COMDAT __real@41d0000000000000
CONST	SEGMENT
__real@41d0000000000000 DQ 041d0000000000000r	; 1.07374e+09
CONST	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+09
CONST	ENDS
;	COMDAT __real@4130000000000000
CONST	SEGMENT
__real@4130000000000000 DQ 04130000000000000r	; 1.04858e+06
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fafc8b007a
CONST	SEGMENT
__real@3ff921fafc8b007a DQ 03ff921fafc8b007ar	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff028f5c0000000
CONST	SEGMENT
__real@3ff028f5c0000000 DQ 03ff028f5c0000000r	; 1.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fddb3d7
CONST	SEGMENT
__real@3fddb3d7 DD 03fddb3d7r			; 1.73205
CONST	ENDS
;	COMDAT __real@3fd5555560000000
CONST	SEGMENT
__real@3fd5555560000000 DQ 03fd5555560000000r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fa73d75
CONST	SEGMENT
__real@3fa73d75 DD 03fa73d75r			; 1.30656
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f1645a2
CONST	SEGMENT
__real@3f1645a2 DD 03f1645a2r			; 0.587
CONST	ENDS
;	COMDAT __real@3f0a8bd4
CONST	SEGMENT
__real@3f0a8bd4 DD 03f0a8bd4r			; 0.541196
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed65e89
CONST	SEGMENT
__real@3ed65e89 DD 03ed65e89r			; 0.41869
CONST	ENDS
;	COMDAT __real@3ec3ef15
CONST	SEGMENT
__real@3ec3ef15 DD 03ec3ef15r			; 0.382683
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3ea99ae9
CONST	SEGMENT
__real@3ea99ae9 DD 03ea99ae9r			; 0.33126
CONST	ENDS
;	COMDAT __real@3e991687
CONST	SEGMENT
__real@3e991687 DD 03e991687r			; 0.299
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e112e0be826d695
CONST	SEGMENT
__real@3e112e0be826d695 DQ 03e112e0be826d695r	; 1e-09
CONST	ENDS
;	COMDAT __real@3de978d5
CONST	SEGMENT
__real@3de978d5 DD 03de978d5r			; 0.114
CONST	ENDS
;	COMDAT __real@3da685db
CONST	SEGMENT
__real@3da685db DD 03da685dbr			; 0.08131
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@0a4fb11f
CONST	SEGMENT
__real@0a4fb11f DD 00a4fb11fr			; 1e-32
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?eoobj@?1??mg_get_connection_info@@9@4QBDB
CONST	SEGMENT
?eoobj@?1??mg_get_connection_info@@9@4QBDB DB 0dH, 0aH, '}', 0dH, 0aH, 00H ; `mg_get_connection_info'::`2'::eoobj
CONST	ENDS
;	COMDAT ?eol@?1??mg_get_connection_info@@9@4QBDB
CONST	SEGMENT
?eol@?1??mg_get_connection_info@@9@4QBDB DB 0dH, 0aH, 00H ; `mg_get_connection_info'::`2'::eol
CONST	ENDS
;	COMDAT ?eoobj@?1??mg_get_system_info@@9@4QBDB
CONST	SEGMENT
?eoobj@?1??mg_get_system_info@@9@4QBDB DB 0dH, 0aH, '}', 0dH, 0aH, 00H ; `mg_get_system_info'::`2'::eoobj
CONST	ENDS
;	COMDAT ?eol@?1??mg_get_system_info@@9@4QBDB
CONST	SEGMENT
?eol@?1??mg_get_system_info@@9@4QBDB DB 0dH, 0aH, 00H	; `mg_get_system_info'::`2'::eol
CONST	ENDS
;	COMDAT ?magic@?1??mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU2@H12PEAX@ZP6AXPEBU2@5@Z5@Z@4PEBDEB
_DATA	SEGMENT
?magic@?1??mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU2@H12PEAX@ZP6AXPEBU2@5@Z5@Z@4PEBDEB DQ FLAT:$SG169120 ; `mg_connect_websocket_client_impl'::`2'::magic
_DATA	ENDS
;	COMDAT ?magic@?1??send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z@4PEBDEB
_DATA	SEGMENT
?magic@?1??send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z@4PEBDEB DQ FLAT:$SG166358 ; `send_websocket_handshake'::`2'::magic
_DATA	ENDS
;	COMDAT ?n@?1??blk0@@YAIPEATCHAR64LONG16@@H@Z@4IB
CONST	SEGMENT
?n@?1??blk0@@YAIPEATCHAR64LONG16@@H@Z@4IB DD 01H	; `blk0'::`2'::n
CONST	ENDS
;	COMDAT ?hex@?1??mg_url_encode@@9@4PEBDEB
_DATA	SEGMENT
?hex@?1??mg_url_encode@@9@4PEBDEB DQ FLAT:$SG164711	; `mg_url_encode'::`2'::hex
_DATA	ENDS
;	COMDAT ?dont_escape@?1??mg_url_encode@@9@4PEBDEB
_DATA	SEGMENT
?dont_escape@?1??mg_url_encode@@9@4PEBDEB DQ FLAT:$SG164708 ; `mg_url_encode'::`2'::dont_escape
_DATA	ENDS
;	COMDAT ?hex@?1??bin2str@@YAXPEADPEBE_K@Z@4PEBDEB
_DATA	SEGMENT
?hex@?1??bin2str@@YAXPEADPEBE_K@Z@4PEBDEB DQ FLAT:$SG164161 ; `bin2str'::`2'::hex
_DATA	ENDS
;	COMDAT ?b64@?1??mg_base64_encode@@9@4PEBDEB
_DATA	SEGMENT
?b64@?1??mg_base64_encode@@9@4PEBDEB DQ FLAT:$SG163622	; `mg_base64_encode'::`2'::b64
_DATA	ENDS
;	COMDAT ?conn_zero@?1??fake_connection@@YAPEAUmg_connection@@PEAU2@PEAUmg_context@@@Z@4U2@B
CONST	SEGMENT
?conn_zero@?1??fake_connection@@YAPEAUmg_connection@@PEAU2@PEAUmg_context@@@Z@4U2@B	ORG $+2520 ; `fake_connection'::`2'::conn_zero
CONST	ENDS
;	COMDAT ?pad@?1??md5_finish@@9@4QBEB
CONST	SEGMENT
?pad@?1??md5_finish@@9@4QBEB DB 080H			; `md5_finish'::`2'::pad
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?w@?2??md5_process@@YAXPEAUmd5_state_s@@PEBE@Z@4HB
CONST	SEGMENT
?w@?2??md5_process@@YAXPEAUmd5_state_s@@PEBE@Z@4HB DD 01H ; `md5_process'::`3'::w
CONST	ENDS
;	COMDAT ?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB
CONST	SEGMENT
?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB DW 07fH ; `stbi_write_jpg_core'::`13'::fillBits
	DW	07H
CONST	ENDS
;	COMDAT ?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 0ffH ; `stbi_write_jpg_core'::`12'::head2
	DB	0daH
	DB	00H
	DB	0cH
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	011H
	DB	03H
	DB	011H
	DB	00H
	DB	03fH
	DB	00H
CONST	ENDS
;	COMDAT ?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 0ffH ; `stbi_write_jpg_core'::`12'::head0
	DB	0d8H
	DB	0ffH
	DB	0e0H
	DB	00H
	DB	010H
	DB	04aH
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0dbH
	DB	00H
	DB	084H
	DB	00H
CONST	ENDS
;	COMDAT ?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
CONST	SEGMENT
?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB DD 0403504f3r ; 2.82843 ; `stbi_write_jpg_core'::`2'::aasf
	DD	0407b14bfr			; 3.92314
	DD	0406c835fr			; 3.69552
	DD	04054db30r			; 3.32588
	DD	0403504f3r			; 2.82843
	DD	0400e39dar			; 2.22228
	DD	03fc3ef15r			; 1.53073
	DD	03f47c5c2r			; 0.780361
CONST	ENDS
;	COMDAT ?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
CONST	SEGMENT
?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB DD 011H ; `stbi_write_jpg_core'::`2'::UVQT
	DD	012H
	DD	018H
	DD	02fH
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	012H
	DD	015H
	DD	01aH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	018H
	DD	01aH
	DD	038H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	02fH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
CONST	ENDS
;	COMDAT ?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
CONST	SEGMENT
?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB DD 010H ; `stbi_write_jpg_core'::`2'::YQT
	DD	0bH
	DD	0aH
	DD	010H
	DD	018H
	DD	028H
	DD	033H
	DD	03dH
	DD	0cH
	DD	0cH
	DD	0eH
	DD	013H
	DD	01aH
	DD	03aH
	DD	03cH
	DD	037H
	DD	0eH
	DD	0dH
	DD	010H
	DD	018H
	DD	028H
	DD	039H
	DD	045H
	DD	038H
	DD	0eH
	DD	011H
	DD	016H
	DD	01dH
	DD	033H
	DD	057H
	DD	050H
	DD	03eH
	DD	012H
	DD	016H
	DD	025H
	DD	038H
	DD	044H
	DD	06dH
	DD	067H
	DD	04dH
	DD	018H
	DD	023H
	DD	037H
	DD	040H
	DD	051H
	DD	068H
	DD	071H
	DD	05cH
	DD	031H
	DD	040H
	DD	04eH
	DD	057H
	DD	067H
	DD	079H
	DD	078H
	DD	065H
	DD	048H
	DD	05cH
	DD	05fH
	DD	062H
	DD	070H
	DD	064H
	DD	067H
	DD	063H
CONST	ENDS
;	COMDAT ?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::UVAC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0aH
	DW	04H
	DW	018H
	DW	05H
	DW	019H
	DW	05H
	DW	038H
	DW	06H
	DW	078H
	DW	07H
	DW	01f4H
	DW	09H
	DW	03f6H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0bH
	DW	04H
	DW	039H
	DW	06H
	DW	0f6H
	DW	08H
	DW	01f5H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff5H
	DW	0cH
	DW	0ff88H
	DW	010H
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01aH
	DW	05H
	DW	0f7H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff6H
	DW	0cH
	DW	07fc2H
	DW	0fH
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01bH
	DW	05H
	DW	0f8H
	DW	08H
	DW	03f8H
	DW	0aH
	DW	0ff7H
	DW	0cH
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	0ff96H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f6H
	DW	09H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	0ff9eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f9H
	DW	0aH
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	0ffa6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	079H
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	0ffaeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f8H
	DW	0bH
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	0ffb6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0f9H
	DW	08H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f7H
	DW	09H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03fe0H
	DW	0eH
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	0fff5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	07fc3H
	DW	0fH
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 0aH ; `stbi_write_jpg_core'::`2'::YAC_HT
	DW	04H
	DW	00H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0bH
	DW	04H
	DW	01aH
	DW	05H
	DW	078H
	DW	07H
	DW	0f8H
	DW	08H
	DW	03f6H
	DW	0aH
	DW	0ff82H
	DW	010H
	DW	0ff83H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0cH
	DW	04H
	DW	01bH
	DW	05H
	DW	079H
	DW	07H
	DW	01f6H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff84H
	DW	010H
	DW	0ff85H
	DW	010H
	DW	0ff86H
	DW	010H
	DW	0ff87H
	DW	010H
	DW	0ff88H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01cH
	DW	05H
	DW	0f9H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f7H
	DW	09H
	DW	0ff5H
	DW	0cH
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f8H
	DW	0aH
	DW	0ff96H
	DW	010H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ff9eH
	DW	010H
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07bH
	DW	07H
	DW	0ff6H
	DW	0cH
	DW	0ffa6H
	DW	010H
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0faH
	DW	08H
	DW	0ff7H
	DW	0cH
	DW	0ffaeH
	DW	010H
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	07fc0H
	DW	0fH
	DW	0ffb6H
	DW	010H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03f9H
	DW	0aH
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f8H
	DW	0bH
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0fff5H
	DW	010H
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::UVDC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	DW	03feH
	DW	0aH
	DW	07feH
	DW	0bH
	ORG $+976
CONST	ENDS
;	COMDAT ?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::YDC_HT
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	03H
	DW	05H
	DW	03H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	ORG $+976
CONST	ENDS
;	COMDAT ?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	011H
	DB	04H
	DB	05H
	DB	021H
	DB	031H
	DB	06H
	DB	012H
	DB	041H
	DB	051H
	DB	07H
	DB	061H
	DB	071H
	DB	013H
	DB	022H
	DB	032H
	DB	081H
	DB	08H
	DB	014H
	DB	042H
	DB	091H
	DB	0a1H
	DB	0b1H
	DB	0c1H
	DB	09H
	DB	023H
	DB	033H
	DB	052H
	DB	0f0H
	DB	015H
	DB	062H
	DB	072H
	DB	0d1H
	DB	0aH
	DB	016H
	DB	024H
	DB	034H
	DB	0e1H
	DB	025H
	DB	0f1H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
CONST	ENDS
;	COMDAT ?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	04H
	DB	04H
	DB	03H
	DB	04H
	DB	07H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	01H
	DB	02H
	DB	077H
CONST	ENDS
;	COMDAT ?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT ?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_nrcodes
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 01H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_values
	DB	02H
	DB	03H
	DB	00H
	DB	04H
	DB	011H
	DB	05H
	DB	012H
	DB	021H
	DB	031H
	DB	041H
	DB	06H
	DB	013H
	DB	051H
	DB	061H
	DB	07H
	DB	022H
	DB	071H
	DB	014H
	DB	032H
	DB	081H
	DB	091H
	DB	0a1H
	DB	08H
	DB	023H
	DB	042H
	DB	0b1H
	DB	0c1H
	DB	015H
	DB	052H
	DB	0d1H
	DB	0f0H
	DB	024H
	DB	033H
	DB	062H
	DB	072H
	DB	082H
	DB	09H
	DB	0aH
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
CONST	ENDS
;	COMDAT ?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	07dH
CONST	ENDS
;	COMDAT ?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT ?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_nrcodes
	DB	00H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
_DATA	SEGMENT
?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA DD 00H ; `stbiw__encode_png_line'::`2'::firstmap
	DD	01H
	DD	00H
	DD	05H
	DD	06H
_DATA	ENDS
;	COMDAT ?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
_DATA	SEGMENT
?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA DD 00H ; `stbiw__encode_png_line'::`2'::mapping
	DD	01H
	DD	02H
	DD	03H
	DD	04H
_DATA	ENDS
;	COMDAT ?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA
_DATA	SEGMENT
?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA DD 00H	; `stbiw__crc32'::`2'::crc_table
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
;	COMDAT ?disteb@?1??stbi_zlib_compress@@9@4PAEA
_DATA	SEGMENT
?disteb@?1??stbi_zlib_compress@@9@4PAEA DB 00H		; `stbi_zlib_compress'::`2'::disteb
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT ?distc@?1??stbi_zlib_compress@@9@4PAGA
_DATA	SEGMENT
?distc@?1??stbi_zlib_compress@@9@4PAGA DW 01H		; `stbi_zlib_compress'::`2'::distc
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	08000H
_DATA	ENDS
;	COMDAT ?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
_DATA	SEGMENT
?lengtheb@?1??stbi_zlib_compress@@9@4PAEA DB 00H	; `stbi_zlib_compress'::`2'::lengtheb
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	00H
_DATA	ENDS
;	COMDAT ?lengthc@?1??stbi_zlib_compress@@9@4PAGA
_DATA	SEGMENT
?lengthc@?1??stbi_zlib_compress@@9@4PAGA DW 03H		; `stbi_zlib_compress'::`2'::lengthc
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	0103H
_DATA	ENDS
;	COMDAT ?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
_DATA	SEGMENT
?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA DD 00H ; `stbi__shiftsigned'::`2'::shift_table
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	04H
	DD	06H
	DD	00H
_DATA	ENDS
;	COMDAT ?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
_DATA	SEGMENT
?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA DD 00H	; `stbi__shiftsigned'::`2'::mul_table
	DD	0ffH
	DD	055H
	DD	049H
	DD	011H
	DD	021H
	DD	041H
	DD	081H
	DD	01H
_DATA	ENDS
;	COMDAT ?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
_DATA	SEGMENT
?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA DB 'X'
	DB	'XXX PNG chunk not known', 00H		; `stbi__parse_png_file'::`151'::invalid_chunk
_DATA	ENDS
;	COMDAT ?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB
CONST	SEGMENT
?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB DB 089H ; `stbi__check_png_header'::`2'::png_sig
	DB	050H
	DB	04eH
	DB	047H
	DB	0dH
	DB	0aH
	DB	01aH
	DB	0aH
CONST	ENDS
;	COMDAT ?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB
CONST	SEGMENT
?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB DB 010H ; `stbi__compute_huffman_codes'::`2'::length_dezigzag
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
CONST	ENDS
;	COMDAT ?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 052H ; `stbi__process_frame_header'::`22'::rgb
	DB	047H
	DB	042H
CONST	ENDS
;	COMDAT ?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 041H ; `stbi__process_marker'::`52'::tag
	DB	064H
	DB	06fH
	DB	062H
	DB	065H
	DB	00H
CONST	ENDS
;	COMDAT ?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 04aH ; `stbi__process_marker'::`43'::tag
	DB	046H
	DB	049H
	DB	046H
	DB	00H
CONST	ENDS
_DATA	SEGMENT
?stbi__l2h_gamma@@3MA DD 0400ccccdr		; 2.2	; stbi__l2h_gamma
?stbi__stdio_callbacks@@3Ustbi_io_callbacks@@A DQ FLAT:?stbi__stdio_read@@YAHPEAXPEADH@Z ; stbi__stdio_callbacks
	DQ	FLAT:?stbi__stdio_skip@@YAXPEAXH@Z
	DQ	FLAT:?stbi__stdio_eof@@YAHPEAX@Z
?stbi__l2h_scale@@3MA DD 03f800000r		; 1	; stbi__l2h_scale
?stbi__h2l_gamma_i@@3MA DD 03ee8ba2er		; 0.454545 ; stbi__h2l_gamma_i
?stbi__h2l_scale_i@@3MA DD 03f800000r		; 1	; stbi__h2l_scale_i
?first_row_filter@@3PAEA DB 00H				; first_row_filter
	DB	01H
	DB	00H
	DB	05H
	DB	06H
	ORG $+7
?TypeInteger@@3UReflectTree@@A DD 0200002H		; TypeInteger
	DD	00H
	DB	'int', 00H
	ORG $+124
	ORG $+296
?ssl_sw@@3PAUssl_func@@A DQ FLAT:$SG160958		; ssl_sw
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160959
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160960
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160961
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160962
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160963
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160964
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160965
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160966
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160967
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160968
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160969
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160970
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160971
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160972
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160973
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160974
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160975
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160976
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160977
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160978
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160979
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160980
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160981
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160982
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160983
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160984
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160985
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160986
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160987
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160988
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160989
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160990
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160991
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160992
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160993
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160994
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160995
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160996
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160997
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160998
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG160999
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161000
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	0000000000000000H
?crypto_sw@@3PAUssl_func@@A DQ FLAT:$SG161002		; crypto_sw
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161003
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161004
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161005
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161006
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161007
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161008
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161009
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161010
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161011
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161012
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161013
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161014
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161015
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161016
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161017
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161018
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161019
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161020
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161021
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161022
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161023
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161024
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161025
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:$SG161026
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ESTANDARD_BASIS_COLOR@@YAXXZ DD 020301H
	DD	060027003H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?websocket_client_thread@@YAIPEAX@Z
	DD	0eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z
	DD	0139H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z
	DD	0ceH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z
	DD	07eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_atomic_dec@@YA_JPEC_J@Z
	DD	015H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_atomic_inc@@YA_JPEC_J@Z
	DD	013H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_start_domain2
	DD	0d6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_start2
	DD	02acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_close_connection
	DD	075H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_write
	DD	015aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?AlistarTick@@YAHPEAUAlistarContext@@@Z
	DD	018H
	DD	05b9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z
	DD	021H
	DD	04c7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z
	DD	026H
	DD	0cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z
	DD	022H
	DD	0324H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z
	DD	021H
	DD	013aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?get_system_name@@YAXPEAPEAD@Z
	DD	016H
	DD	014bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z
	DD	01bH
	DD	02c8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z
	DD	026H
	DD	0873H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?close_socket_gracefully@@YAXPEAUmg_connection@@@Z
	DD	01cH
	DD	0274H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?set_acl_option@@YAHPEAUmg_context@@@Z
	DD	013H
	DD	05eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z
	DD	01bH
	DD	0122H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z
	DD	01bH
	DD	03e1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z
	DD	025H
	DD	0ad0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z
	DD	01bH
	DD	0495H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?hexdump2string@@YAHPEAXHPEADH@Z
	DD	023H
	DD	0103H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?refresh_trust@@YAHPEAUmg_connection@@@Z
	DD	016H
	DD	0307H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?set_ports_option@@YAHPEAUmg_context@@@Z
	DD	018H
	DD	07eaH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z
	DD	020H
	DD	0456H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z
	DD	020H
	DD	01b4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z
	DD	025H
	DD	08aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z
	DD	025H
	DD	01ceH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z
	DD	025H
	DD	0225H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z
	DD	016H
	DD	0105H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z
	DD	025H
	DD	049bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z
	DD	021H
	DD	01e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	0167H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z
	DD	018H
	DD	0159H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?SHA1_Transform@@YAXQEAIQEBE@Z
	DD	01bH
	DD	04778H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	011cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	015cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	0519H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z
	DD	025H
	DD	0263H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
	DD	020H
	DD	0196H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z
	DD	01cH
	DD	018dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z
	DD	02bH
	DD	04adH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z
	DD	02bH
	DD	0363H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?delete_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	018H
	DD	0186H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?put_file@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	042bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z
	DD	020H
	DD	04bcH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	0254H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z
	DD	020H
	DD	0d64H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z
	DD	025H
	DD	0a4bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z
	DD	02bH
	DD	0211H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?put_dir@@YAHPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	018dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z
	DD	01bH
	DD	0edH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z
	DD	01bH
	DD	0bdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z
	DD	027H
	DD	0777H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z
	DD	02bH
	DD	0292H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	048eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?remove_directory@@YAHPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	01f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z
	DD	025H
	DD	01d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z
	DD	01bH
	DD	0537H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?is_authorized_for_put@@YAHPEAUmg_connection@@@Z
	DD	013H
	DD	0ceH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	01e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?check_authorization@@YAHPEAUmg_connection@@PEBD@Z
	DD	01bH
	DD	0220H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z
	DD	026H
	DD	0112H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z
	DD	020H
	DD	05d2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z
	DD	020H
	DD	0212H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?check_password_digest@@YAHPEBD0000000@Z
	DD	025H
	DD	0177H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?parse_date_string@@YA_JPEBD@Z
	DD	017H
	DD	01f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z
	DD	027H
	DD	0aa7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z
	DD	026H
	DD	0a4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?log_access@@YAXPEBUmg_connection@@@Z
	DD	01cH
	DD	0565H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?handle_request@@YAXPEAUmg_connection@@@Z
	DD	016H
	DD	01300H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?discard_unread_request_data@@YAXPEAUmg_connection@@@Z
	DD	01cH
	DD	042H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z
	DD	026H
	DD	0691H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dlopen@@YAPEAXPEBDH@Z
	DD	01aH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?poll@@YAHPEAUmg_pollfd@@IH@Z
	DD	01fH
	DD	046bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z
	DD	01bH
	DD	0125H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z
	DD	020H
	DD	06fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_remove@@YAHPEBUmg_connection@@PEBD@Z
	DD	01bH
	DD	068H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z
	DD	02aH
	DD	068cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?send_additional_header@@YAXPEAUmg_connection@@@Z
	DD	016H
	DD	010aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?send_static_cache_header@@YAXPEAUmg_connection@@@Z
	DD	016H
	DD	0f5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z
	DD	02bH
	DD	0228H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z
	DD	025H
	DD	048cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z
	DD	02bH
	DD	0271H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z
	DD	025H
	DD	0198H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z
	DD	020H
	DD	01bdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_set_thread_name@@YAXPEBD@Z
	DD	013H
	DD	082H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ
	DD	025H
	DD	0d7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z
	DD	01bH
	DD	017b2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:md5_finish
	DD	018H
	DD	0f5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?mg_get_current_time_ns@@YA_KXZ
	DD	0eH
	DD	033H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z
	DD	025H
	DD	0214H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_get_connection_info
	DD	025H
	DD	09afH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_get_system_info
	DD	01aH
	DD	077cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_response_header_send
	DD	016H
	DD	0219H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_response_header_add_lines
	DD	01bH
	DD	0f2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_get_response
	DD	025H
	DD	01d1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_md5
	DD	025H
	DD	0f5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_handle_form_request
	DD	021H
	DD	01f45H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_read
	DD	020H
	DD	047eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_store_body
	DD	021H
	DD	01ccH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_send_mime_file2
	DD	022H
	DD	0153H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_check_digest_access_authentication
	DD	01dH
	DD	0bdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_send_http_ok
	DD	01dH
	DD	012bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_send_file_body
	DD	018H
	DD	0b4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_send_chunk
	DD	01dH
	DD	0f3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_modify_passwords_file_ha1
	DD	026H
	DD	05a7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_modify_passwords_file
	DD	022H
	DD	0faH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_stop
	DD	03dH
	DD	049H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mg_init_library
	DD	015H
	DD	02ebH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
	DD	02aH
	DD	01307H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
	DD	027H
	DD	06cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_png_to_mem
	DD	024H
	DD	09deH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
	DD	026H
	DD	01acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
	DD	024H
	DD	0610H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_to_func
	DD	026H
	DD	092H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg
	DD	025H
	DD	0a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
	DD	024H
	DD	0631H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
	DD	020H
	DD	0d39H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
	DD	025H
	DD	04ecH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
	DD	016H
	DD	02fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
	DD	020H
	DD	0368H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
	DD	025H
	DD	011e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
	DD	01aH
	DD	069cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
	DD	016H
	DD	0c5cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__idct_block@@YAXPEAEHQEAF@Z
	DD	01fH
	DD	0a83H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
	DD	022H
	DD	0150H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
	DD	025H
	DD	01b0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__vertical_flip@@YAXPEAXHHH@Z
	DD	024H
	DD	0182H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
	DD	02bH
	DD	03d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	02bH
	DD	0124H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	022H
	DD	027aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	025H
	DD	0203H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	025H
	DD	08fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	022H
	DD	0e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	025H
	DD	011adH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__cpuid3@@YAHXZ
	DD	010H
	DD	03dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_malloc
	DD	025H
	DD	0d4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize_headerflag
	DD	02aH
	DD	0e4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize
	DD	02aH
	DD	0e1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_file
	DD	016H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_file
	DD	025H
	DD	08eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_callbacks
	DD	025H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_memory
	DD	024H
	DD	068H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_file
	DD	016H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_file
	DD	025H
	DD	06cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file_16
	DD	025H
	DD	0abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_gif_from_memory
	DD	024H
	DD	0123H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file
	DD	025H
	DD	0abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
	DD	027H
	DD	08fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	021H
	DD	04abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	021H
	DD	0430H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	01cH
	DD	0440H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	019H
	DD	0140H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	025H
	DD	04e9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	021H
	DD	01393H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	01fH
	DD	013a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt_GetGlyphSDF
	DD	026H
	DD	01944H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?master_thread_run@@YAXPEAUmg_context@@@Z
	DD	0d9H
	DD	01a6H
	DD	0300H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?process_new_connection@@YAXPEAUmg_connection@@@Z
	DD	016H
	DD	033aH
	DD	0585H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z
	DD	020H
	DD	0457H
	DD	0602H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z
	DD	022H
	DD	0154H
	DD	0276H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z
	DD	025H
	DD	049bH
	DD	06daH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z
	DD	026H
	DD	021cH
	DD	0998H
	DD	0a30H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z
	DD	025H
	DD	02c2H
	DD	037bH
	DD	03d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z
	DD	025H
	DD	019bH
	DD	037bH
	DD	041fH
	DD	049aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z
	DD	026H
	DD	031H
	DD	042H
	DD	05fH
	DD	08bH
	DD	09aH
	DD	0a5H
	DD	0c9H
	DD	0101H
	DD	010eH
	DD	011fH
	DD	012aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z
	DD	031H
	DD	03cH
	DD	04bH
	DD	076H
	DD	081H
	DD	094H
	DD	0ccH
	DD	0d9H
	DD	0eaH
	DD	0102H
	DD	0118H
	DD	0123H
	DD	0139H
	DD	016aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ESTANDARD_BASIS@@YAXXZ DD 020301H
	DD	060027003H
xdata	ENDS
xdata	SEGMENT
$unwind$?rx7__stoi@@YAHHPEA_JQEBD1@Z DD 011701H
	DD	08217H
$unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD 031501H
	DD	070114215H
	DD	06010H
$unwind$??1_TRACE_BLOCK@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 041c01H
	DD	019011cH
	DD	060147015H
$unwind$?StaticAlloc@@YAPEAXH_K@Z DD 010d01H
	DD	0820dH
$unwind$?HeapAlloc@@YAPEAXH_K@Z DD 010d01H
	DD	0820dH
$unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 041c01H
	DD	01f011cH
	DD	060147015H
$unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 011701H
	DD	08217H
$unwind$??Bstr32@@QEAA_JXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAA_KXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAANXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAMXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAIXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAHXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??7str32@@QEAAHXZ DD 010901H
	DD	02209H
$unwind$?strtoi@@YA_JUstr32@@@Z DD 010901H
	DD	06209H
$unwind$?GetThreadID@@YAHXZ DD 010401H
	DD	04204H
$unwind$?GetPerformanceFrequency@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?GetPerformanceCounter@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?Widen@@YAPEA_WHPEBD@Z DD 010d01H
	DD	0820dH
$unwind$?OutputW@@YAXPEB_W@Z DD 010901H
	DD	08209H
$unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?UnloadFileData@@YAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?WriteFileData@@YAIIPEAXPEBD@Z DD 041701H
	DD	0270117H
	DD	0600f7010H
$unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 041301H
	DD	0390113H
	DD	0600b700cH
$unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD 011701H
	DD	06217H
$unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD 011701H
	DD	06217H
$unwind$?FormatA@@YAPEADPEBDZZ DD 011801H
	DD	08218H
$unwind$?FormatW@@YAPEA_WPEB_WZZ DD 011801H
	DD	08218H
$unwind$?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z DD 021301H
	DD	0700f7213H
$unwind$?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z DD 010d01H
	DD	0620dH
$unwind$?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z DD 021b01H
	DD	01d011bH
$unwind$?CStrW@@YAPEB_WPEBD@Z DD 010901H
	DD	04209H
$unwind$?IsFileNameReal@@YAHPEBD@Z DD 010901H
	DD	06209H
$unwind$?TraceMessageKindToString@@YAPEB_WH@Z DD 010801H
	DD	02208H
$unwind$?PIXEL_FORMAT_SIZE@@YAHH@Z DD 010801H
	DD	02208H
$unwind$stbtt_BakeFontBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_GetBakedQuad DD 011701H
	DD	08217H
$unwind$stbtt_GetScaledFontVMetrics DD 021b01H
	DD	01d011bH
$unwind$stbtt_PackBegin DD 011801H
	DD	0a218H
$unwind$stbtt_PackEnd DD 010901H
	DD	04209H
$unwind$stbtt_PackFontRange DD 011901H
	DD	0c219H
$unwind$stbtt_PackFontRanges DD 021b01H
	DD	01f011bH
$unwind$stbtt_PackSetOversampling DD 011201H
	DD	04212H
$unwind$stbtt_GetPackedQuad DD 011701H
	DD	08217H
$unwind$stbtt_PackFontRangesGatherRects DD 021b01H
	DD	013011bH
$unwind$stbtt_PackFontRangesPackRects DD 011301H
	DD	04213H
$unwind$stbtt_PackFontRangesRenderIntoRects DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$stbtt_GetNumberOfFonts DD 010901H
	DD	04209H
$unwind$stbtt_GetFontOffsetForIndex DD 010d01H
	DD	0420dH
$unwind$stbtt_InitFont DD 011301H
	DD	04213H
$unwind$stbtt_FindGlyphIndex DD 021001H
	DD	0130110H
$unwind$stbtt_ScaleForPixelHeight DD 010f01H
	DD	0620fH
$unwind$stbtt_ScaleForMappingEmToPixels DD 010f01H
	DD	0620fH
$unwind$stbtt_GetFontVMetrics DD 011801H
	DD	04218H
$unwind$stbtt_GetFontVMetricsOS2 DD 011801H
	DD	06218H
$unwind$stbtt_GetFontBoundingBox DD 011801H
	DD	04218H
$unwind$stbtt_GetCodepointHMetrics DD 011701H
	DD	04217H
$unwind$stbtt_GetCodepointKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetCodepointBox DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphHMetrics DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetGlyphBox DD 011701H
	DD	08217H
$unwind$stbtt_GetKerningTableLength DD 010901H
	DD	06209H
$unwind$stbtt_GetKerningTable DD 011301H
	DD	06213H
$unwind$stbtt_IsGlyphEmpty DD 010d01H
	DD	0820dH
$unwind$stbtt_GetCodepointShape DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphShape DD 011201H
	DD	04212H
$unwind$stbtt_FreeShape DD 010e01H
	DD	0420eH
$unwind$stbtt_FindSVGDoc DD 010d01H
	DD	0a20dH
$unwind$stbtt_GetCodepointSVG DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphSVG DD 011201H
	DD	08212H
$unwind$stbtt_FreeBitmap DD 010e01H
	DD	0420eH
$unwind$stbtt_GetCodepointBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetCodepointBitmapSubpixel DD 011b01H
	DD	0a21bH
$unwind$stbtt_MakeCodepointBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixel DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter DD 011801H
	DD	0e218H
$unwind$stbtt_GetCodepointBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetCodepointBitmapBoxSubpixel DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetGlyphBitmapSubpixel DD 021e01H
	DD	015011eH
$unwind$stbtt_MakeGlyphBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeGlyphBitmapSubpixel DD 021b01H
	DD	013011bH
$unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter DD 011801H
	DD	0a218H
$unwind$stbtt_GetGlyphBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmapBoxSubpixel DD 011901H
	DD	08219H
$unwind$stbtt_Rasterize DD 021c01H
	DD	011011cH
$unwind$stbtt_FreeSDF DD 010e01H
	DD	0420eH
$unwind$stbtt_GetGlyphSDF DD 022e19H
	DD	03f011cH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$stbtt_GetCodepointSDF DD 011901H
	DD	0a219H
$unwind$stbtt_FindMatchingFont DD 011301H
	DD	04213H
$unwind$stbtt_CompareUTF8toUTF16_bigendian DD 011701H
	DD	04217H
$unwind$stbtt_GetFontNameString DD 011801H
	DD	0a218H
$unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD 010901H
	DD	02209H
$unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD 011301H
	DD	04213H
$unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD 031a01H
	DD	07016621aH
	DD	06015H
$unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD 031501H
	DD	07011a215H
	DD	06010H
$unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD 010901H
	DD	04209H
$unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z DD 011201H
	DD	06212H
$unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z DD 010901H
	DD	04209H
$unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD 041801H
	DD	04b0118H
	DD	060107011H
$unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD 011701H
	DD	0e217H
$unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 022719H
	DD	0310115H
	DD	imagerel __GSHandlerCheck
	DD	0178H
$unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD 011701H
	DD	06217H
$unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD 010901H
	DD	08209H
$unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD 011501H
	DD	0a215H
$unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD 011501H
	DD	08215H
$unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD 011b01H
	DD	0a21bH
$unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD 031501H
	DD	07011c215H
	DD	06010H
$unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD 041801H
	DD	01b0118H
	DD	060107011H
$unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD 042919H
	DD	05d0117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	02d0H
$unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 021501H
	DD	0130115H
$unwind$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD 011201H
	DD	08212H
$unwind$?stbtt__GetCoverageIndex@@YAHPEAEH@Z DD 021001H
	DD	0110110H
$unwind$?stbtt__GetGlyphClass@@YAHPEAEH@Z DD 010d01H
	DD	0e20dH
$unwind$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD 021501H
	DD	0210115H
$unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD 011301H
	DD	08213H
$unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD 010e01H
	DD	0620eH
$unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD 011901H
	DD	08219H
$unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD 011801H
	DD	04218H
$unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD 011601H
	DD	04216H
$unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD 011c01H
	DD	0421cH
$unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD 021b01H
	DD	01d011bH
$unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD 022d19H
	DD	05b011bH
	DD	imagerel __GSHandlerCheck
	DD	02c0H
$unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD 031e19H
	DD	0700ba20fH
	DD	0600aH
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD 042419H
	DD	0130112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD 021b01H
	DD	013011bH
$unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD 011a01H
	DD	0c21aH
$unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD 021d01H
	DD	01b011dH
$unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD 042301H
	DD	0a6823H
	DD	017011bH
$unwind$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z DD 021b01H
	DD	025011bH
$unwind$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z DD 011301H
	DD	02213H
$unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z DD 021b01H
	DD	011011bH
$unwind$?equal@@YAHPEAM0@Z DD 010e01H
	DD	0220eH
$unwind$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z DD 022f19H
	DD	023011dH
	DD	imagerel __GSHandlerCheck
	DD	0108H
$unwind$?stbtt__cuberoot@@YAMM@Z DD 010a01H
	DD	0420aH
$unwind$?stbtt__solve_cubic@@YAHMMMPEAM@Z DD 011b01H
	DD	0a21bH
$unwind$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z DD 011701H
	DD	0c217H
$unwind$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z DD 011701H
	DD	06217H
$unwind$?stbtt__matchpair@@YAHPEAEI0HHH@Z DD 011701H
	DD	0c217H
$unwind$?stbtt__matches@@YAHPEAEI0H@Z DD 011701H
	DD	08217H
$unwind$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z DD 011301H
	DD	06213H
$unwind$stbi_load_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_load_gif_from_memory DD 022c19H
	DD	029011aH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$stbi_load_16_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16 DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file_16 DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_loadf_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf DD 011801H
	DD	0a218H
$unwind$stbi_loadf_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_hdr_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr DD 010901H
	DD	06209H
$unwind$stbi_is_hdr_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_image_free DD 010901H
	DD	04209H
$unwind$stbi_info_from_memory DD 022c19H
	DD	023011aH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info_from_callbacks DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info DD 011801H
	DD	06218H
$unwind$stbi_info_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_16_bit DD 010901H
	DD	06209H
$unwind$stbi_is_16_bit_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_zlib_decode_malloc_guesssize DD 023219H
	DD	020b0120H
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_malloc_guesssize_headerflag DD 023219H
	DD	020b0120H
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_malloc DD 011201H
	DD	04212H
$unwind$stbi_zlib_decode_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi_zlib_decode_noheader_malloc DD 022d19H
	DD	020b011bH
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_noheader_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$?stbi__cpuid3@@YAHXZ DD 021519H
	DD	030023206H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$?stbi__sse2_available@@YAHXZ DD 010401H
	DD	06204H
$unwind$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z DD 011301H
	DD	02213H
$unwind$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?stbi__stdio_read@@YAHPEAXPEADH@Z DD 011301H
	DD	04213H
$unwind$?stbi__stdio_skip@@YAXPEAXH@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__stdio_eof@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z DD 010e01H
	DD	0420eH
$unwind$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0a218H
$unwind$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__png_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0c218H
$unwind$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	0a218H
$unwind$?stbi__png_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 022d19H
	DD	0ab011bH
	DD	imagerel __GSHandlerCheck
	DD	0540H
$unwind$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?stbi__tga_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 031c01H
	DD	020011cH
	DD	07015H
$unwind$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	0a218H
$unwind$?stbi__psd_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD 021b01H
	DD	01f011bH
$unwind$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 022d19H
	DD	09d011bH
	DD	imagerel __GSHandlerCheck
	DD	04d0H
$unwind$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z DD 022d19H
	DD	089011bH
	DD	imagerel __GSHandlerCheck
	DD	0430H
$unwind$?stbi__pic_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0c218H
$unwind$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?stbi__gif_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 023319H
	DD	011190121H
	DD	imagerel __GSHandlerCheck
	DD	088b0H
$unwind$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z DD 023319H
	DD	0111f0121H
	DD	imagerel __GSHandlerCheck
	DD	088e0H
$unwind$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0a218H
$unwind$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__malloc@@YAPEAX_K@Z DD 010901H
	DD	04209H
$unwind$?stbi__addsizes_valid@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbi__mul2sizes_valid@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbi__mad2sizes_valid@@YAHHHH@Z DD 011101H
	DD	06211H
$unwind$?stbi__mad3sizes_valid@@YAHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__mad4sizes_valid@@YAHHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__malloc_mad2@@YAPEAXHHH@Z DD 011101H
	DD	04211H
$unwind$?stbi__malloc_mad3@@YAPEAXHHHH@Z DD 011601H
	DD	04216H
$unwind$?stbi__malloc_mad4@@YAPEAXHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD 011801H
	DD	0a218H
$unwind$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z DD 011701H
	DD	08217H
$unwind$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z DD 011701H
	DD	08217H
$unwind$?stbi__vertical_flip@@YAXPEAXHHH@Z DD 022c19H
	DD	010f011aH
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z DD 011701H
	DD	06217H
$unwind$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z DD 011801H
	DD	06218H
$unwind$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?stbi__get8@@YAEPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__at_eof@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__skip@@YAXPEAUstbi__context@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z DD 011301H
	DD	08213H
$unwind$?stbi__get16be@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get32be@@YAIPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get16le@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get32le@@YAIPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__convert_format@@YAPEAEPEAEHHII@Z DD 011701H
	DD	0c217H
$unwind$?stbi__convert_format16@@YAPEAGPEAGHHII@Z DD 011701H
	DD	0c217H
$unwind$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z DD 010e01H
	DD	0a20eH
$unwind$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z DD 010e01H
	DD	0a20eH
$unwind$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z DD 011801H
	DD	0c218H
$unwind$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z DD 011801H
	DD	08218H
$unwind$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z DD 021b01H
	DD	015011bH
$unwind$?stbi__idct_block@@YAXPEAEHQEAF@Z DD 022719H
	DD	0390115H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?stbi__idct_simd@@YAXPEAEHQEAF@Z DD 021b01H
	DD	036b011bH
$unwind$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	02209H
$unwind$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z DD 021e19H
	DD	041010cH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z DD 010e01H
	DD	0220eH
$unwind$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z DD 022219H
	DD	01b0110H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z DD 011201H
	DD	06212H
$unwind$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0c20dH
$unwind$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z DD 021b01H
	DD	063011bH
$unwind$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z DD 011801H
	DD	04218H
$unwind$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z DD 021b01H
	DD	08d011bH
$unwind$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__blinn_8x8@@YAEEE@Z DD 010c01H
	DD	0220cH
$unwind$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z DD 022d19H
	DD	041011bH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__bit_reverse@@YAHHH@Z DD 010c01H
	DD	0420cH
$unwind$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z DD 022819H
	DD	01d0116H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	02209H
$unwind$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z DD 011301H
	DD	08213H
$unwind$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z DD 021e19H
	DD	0149010cH
	DD	imagerel __GSHandlerCheck
	DD	0a30H
$unwind$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z DD 011801H
	DD	04218H
$unwind$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__paeth@@YAHHHH@Z DD 011101H
	DD	06211H
$unwind$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z DD 021b01H
	DD	01b011bH
$unwind$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z DD 011301H
	DD	08213H
$unwind$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z DD 011301H
	DD	08213H
$unwind$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z DD 011801H
	DD	0a218H
$unwind$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z DD 032819H
	DD	09c0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	04d0H
$unwind$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	08218H
$unwind$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__high_bit@@YAHI@Z DD 010801H
	DD	02208H
$unwind$?stbi__shiftsigned@@YAHIHH@Z DD 011101H
	DD	04211H
$unwind$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z DD 010e01H
	DD	0c20eH
$unwind$?stbi__tga_get_comp@@YAHHHPEAH@Z DD 011101H
	DD	02211H
$unwind$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z DD 011301H
	DD	06213H
$unwind$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z DD 011201H
	DD	06212H
$unwind$?stbi__copyval@@YAXHPEAEPEBE@Z DD 011201H
	DD	02212H
$unwind$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z DD 011801H
	DD	06218H
$unwind$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z DD 011801H
	DD	06218H
$unwind$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z DD 021101H
	DD	0110111H
$unwind$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z DD 021b01H
	DD	011011bH
$unwind$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z DD 011301H
	DD	06213H
$unwind$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__hdr_convert@@YAXPEAMPEAEH@Z DD 011301H
	DD	06213H
$unwind$?stbi__pnm_isspace@@YAHD@Z DD 010801H
	DD	02208H
$unwind$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0420eH
$unwind$?stbi__pnm_isdigit@@YAHD@Z DD 010801H
	DD	02208H
$unwind$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	04209H
$unwind$stbi_write_png DD 011701H
	DD	0a217H
$unwind$stbi_write_bmp DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_tga DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_hdr DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_jpg DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_png_to_func DD 011801H
	DD	0a218H
$unwind$stbi_write_bmp_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_tga_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_hdr_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_jpg_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?stbi__stdio_write@@YAXPEAX0H@Z DD 011301H
	DD	04213H
$unwind$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z DD 010901H
	DD	04209H
$unwind$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z DD 011301H
	DD	0c213H
$unwind$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ DD 011801H
	DD	06218H
$unwind$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z DD 010901H
	DD	06209H
$unwind$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z DD 010d01H
	DD	0620dH
$unwind$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z DD 010d01H
	DD	0420dH
$unwind$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z DD 011701H
	DD	06217H
$unwind$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z DD 011701H
	DD	08217H
$unwind$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ DD 011701H
	DD	0c217H
$unwind$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z DD 021a01H
	DD	031011aH
$unwind$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z DD 021a01H
	DD	023011aH
$unwind$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z DD 010e01H
	DD	0820eH
$unwind$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z DD 011201H
	DD	08212H
$unwind$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z DD 011201H
	DD	08212H
$unwind$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z DD 022919H
	DD	011011aH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z DD 042e19H
	DD	029011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z DD 011201H
	DD	08212H
$unwind$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z DD 011301H
	DD	06213H
$unwind$?stbiw__zlib_bitrev@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbiw__zlib_countm@@YAIPEAE0H@Z DD 011301H
	DD	02213H
$unwind$?stbiw__zhash@@YAIPEAE@Z DD 010901H
	DD	02209H
$unwind$stbi_zlib_compress DD 021a01H
	DD	049011aH
$unwind$?stbiw__crc32@@YAIPEAEH@Z DD 010d01H
	DD	0220dH
$unwind$?stbiw__wpcrc@@YAXPEAPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?stbiw__paeth@@YAEHHH@Z DD 011101H
	DD	06211H
$unwind$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z DD 011701H
	DD	0e217H
$unwind$stbi_write_png_to_mem DD 022c19H
	DD	019011aH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z DD 011801H
	DD	06218H
$unwind$?stbiw__jpg_DCT@@YAXPEAM0000000@Z DD 011801H
	DD	0e218H
$unwind$?stbiw__jpg_calcBits@@YAXHQEAG@Z DD 010d01H
	DD	0220dH
$unwind$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z DD 042f19H
	DD	035011dH
	DD	030157016H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z DD 023219H
	DD	02ab0120H
	DD	imagerel __GSHandlerCheck
	DD	01540H
$unwind$?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z DD 011701H
	DD	06217H
$unwind$?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z DD 010e01H
	DD	0a20eH
$unwind$?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z DD 011101H
	DD	06211H
$unwind$?ZenResetNativeEvent@@YAHPEAX@Z DD 010901H
	DD	04209H
$unwind$?ZenConsumeNativeEvent@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?ZenProduceNativeEvent@@YAHPEAX@Z DD 010901H
	DD	04209H
$unwind$?ZenCreateNativeMutex@@YAPEAXHPEBD@Z DD 010d01H
	DD	0420dH
$unwind$?ZenAcquireNativeMutex@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?ZenReleaseNativeMutex@@YAHPEAX@Z DD 010901H
	DD	04209H
$unwind$?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z DD 040e01H
	DD	013010eH
	DD	060067007H
$unwind$?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z DD 011301H
	DD	06213H
$unwind$?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z DD 010901H
	DD	04209H
$unwind$?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z DD 011101H
	DD	04211H
$unwind$?NewReflectTree@@YAPEAUReflectTree@@H@Z DD 010801H
	DD	06208H
$unwind$?CreateEnum@@YAPEAUReflectTree@@PEBD@Z DD 010901H
	DD	06209H
$unwind$?CreateStruct@@YAPEAUReflectTree@@PEBD@Z DD 010901H
	DD	06209H
$unwind$?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z DD 011201H
	DD	06212H
$unwind$?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z DD 011801H
	DD	06218H
$unwind$?ZenMain@@YAXHPEAPEAD@Z DD 041201H
	DD	0130112H
	DD	0600a700bH
$unwind$main DD	010d01H
	DD	0420dH
$unwind$mg_init_library DD 021d19H
	DD	051010bH
	DD	imagerel __GSHandlerCheck
	DD	0270H
$unwind$mg_exit_library DD 010401H
	DD	04204H
$unwind$mg_start DD 021401H
	DD	070107214H
$unwind$mg_stop DD 010901H
	DD	06209H
$unwind$mg_start_domain DD 010e01H
	DD	0420eH
$unwind$mg_set_request_handler DD 021b01H
	DD	011011bH
$unwind$mg_set_websocket_handler DD 011801H
	DD	08218H
$unwind$mg_set_websocket_handler_with_subprotocols DD 021b01H
	DD	011011bH
$unwind$mg_set_auth_handler DD 021b01H
	DD	011011bH
$unwind$mg_get_option DD 010e01H
	DD	0620eH
$unwind$mg_get_context DD 010901H
	DD	02209H
$unwind$mg_get_user_data DD 010901H
	DD	02209H
$unwind$mg_get_user_context_data DD 010901H
	DD	04209H
$unwind$mg_get_thread_pointer DD 010901H
	DD	06209H
$unwind$mg_set_user_connection_data DD 010e01H
	DD	0220eH
$unwind$mg_get_request_link DD 011301H
	DD	06213H
$unwind$mg_get_server_ports DD 011201H
	DD	06212H
$unwind$mg_modify_passwords_file DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$mg_modify_passwords_file_ha1 DD 032e19H
	DD	0b6011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	05a0H
$unwind$mg_write DD 011301H
	DD	0a213H
$unwind$mg_websocket_write DD 011701H
	DD	06217H
$unwind$mg_websocket_client_write DD 011701H
	DD	08217H
$unwind$mg_lock_connection DD 010901H
	DD	04209H
$unwind$mg_unlock_connection DD 010901H
	DD	04209H
$unwind$mg_lock_context DD 010901H
	DD	04209H
$unwind$mg_unlock_context DD 010901H
	DD	04209H
$unwind$mg_printf DD 011801H
	DD	06218H
$unwind$mg_send_chunk DD 012219H
	DD	0a213H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$mg_send_file DD 010e01H
	DD	0420eH
$unwind$mg_send_file_body DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$mg_send_http_error DD 011701H
	DD	06217H
$unwind$mg_send_http_ok DD 012219H
	DD	0c213H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$mg_send_http_redirect DD 011301H
	DD	04213H
$unwind$mg_send_digest_access_authentication_request DD 010e01H
	DD	0420eH
$unwind$mg_check_digest_access_authentication DD 012219H
	DD	0c213H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$mg_send_mime_file DD 011301H
	DD	04213H
$unwind$mg_send_mime_file2 DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$mg_store_body DD 022919H
	DD	04110117H
	DD	imagerel __GSHandlerCheck
	DD	02070H
$unwind$mg_read DD 022819H
	DD	0170116H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$mg_get_header DD 010e01H
	DD	0420eH
$unwind$mg_get_var DD 011801H
	DD	06218H
$unwind$mg_get_var2 DD 011801H
	DD	0c218H
$unwind$mg_split_form_urlencoded DD 011301H
	DD	06213H
$unwind$mg_get_cookie DD 011801H
	DD	08218H
$unwind$mg_download DD 011701H
	DD	0a217H
$unwind$mg_close_connection DD 010901H
	DD	06209H
$unwind$mg_handle_form_request DD 022919H
	DD	05210117H
	DD	imagerel __GSHandlerCheck
	DD	028f0H
$unwind$mg_start_thread DD 010e01H
	DD	0620eH
$unwind$mg_get_builtin_mime_type DD 010901H
	DD	08209H
$unwind$mg_get_response_code_text DD 010d01H
	DD	0820dH
$unwind$mg_url_decode DD 011701H
	DD	08217H
$unwind$mg_url_encode DD 011301H
	DD	08213H
$unwind$mg_base64_encode DD 011801H
	DD	06218H
$unwind$mg_base64_decode DD 011801H
	DD	0a218H
$unwind$mg_md5 DD 022d19H
	DD	019011bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$mg_match DD 011301H
	DD	0c213H
$unwind$mg_cry DD 011801H
	DD	08218H
$unwind$mg_strcasecmp DD 010e01H
	DD	0820eH
$unwind$mg_strncasecmp DD 011301H
	DD	08213H
$unwind$mg_connect_websocket_client DD 021a01H
	DD	011011aH
$unwind$mg_connect_websocket_client_extensions DD 021a01H
	DD	011011aH
$unwind$mg_connect_client DD 021a01H
	DD	011011aH
$unwind$mg_connect_client_secure DD 011301H
	DD	0a213H
$unwind$mg_connect_websocket_client_secure DD 011801H
	DD	0a218H
$unwind$mg_connect_websocket_client_secure_extensions DD 011801H
	DD	0a218H
$unwind$mg_get_response DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$mg_response_header_start DD 010d01H
	DD	0620dH
$unwind$mg_response_header_add DD 011801H
	DD	06218H
$unwind$mg_response_header_add_lines DD 022319H
	DD	08b0111H
	DD	imagerel __GSHandlerCheck
	DD	0440H
$unwind$mg_response_header_send DD 021e19H
	DD	013010cH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$mg_get_system_info DD 022219H
	DD	04b0110H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$mg_get_connection_info DD 032d19H
	DD	060011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	02f0H
$unwind$mg_connect_client2 DD 021b01H
	DD	015011bH
$unwind$mg_start2 DD 041301H
	DD	0270113H
	DD	0600b700cH
$unwind$mg_start_domain2 DD 021601H
	DD	0130116H
$unwind$stat DD	010e01H
	DD	0420eH
$unwind$difftime DD 010e01H
	DD	0420eH
$unwind$gmtime DD 010901H
	DD	04209H
$unwind$localtime DD 010901H
	DD	04209H
$unwind$_mkgmtime DD 010901H
	DD	04209H
$unwind$time DD	010901H
	DD	04209H
$unwind$?mg_clock_gettime@@YAHKPEAUtimespec@@@Z DD 021001H
	DD	0150110H
$unwind$?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z DD 010901H
	DD	04209H
$unwind$?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z DD 010901H
	DD	04209H
$unwind$?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z DD 022d19H
	DD	0115011bH
	DD	imagerel __GSHandlerCheck
	DD	0890H
$unwind$?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z DD 011301H
	DD	04213H
$unwind$?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z DD 010e01H
	DD	0620eH
$unwind$?pthread_key_delete@@YAHK@Z DD 010801H
	DD	06208H
$unwind$?pthread_setspecific@@YAHKPEAX@Z DD 010d01H
	DD	0620dH
$unwind$?pthread_getspecific@@YAPEAXK@Z DD 010801H
	DD	04208H
$unwind$?mg_global_lock@@YAXXZ DD 010401H
	DD	04204H
$unwind$?mg_global_unlock@@YAXXZ DD 010401H
	DD	04204H
$unwind$?mg_atomic_inc@@YA_JPEC_J@Z DD 010901H
	DD	02209H
$unwind$?mg_atomic_dec@@YA_JPEC_J@Z DD 010901H
	DD	02209H
$unwind$?mg_malloc@@YAPEAX_K@Z DD 010901H
	DD	04209H
$unwind$?mg_calloc@@YAPEAX_K0@Z DD 010e01H
	DD	0420eH
$unwind$?mg_realloc@@YAPEAXPEAX_K@Z DD 010e01H
	DD	0420eH
$unwind$?mg_free@@YAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z DD 011801H
	DD	0c218H
$unwind$?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ DD 011801H
	DD	08218H
$unwind$?mg_current_thread_id@@YAKXZ DD 010401H
	DD	04204H
$unwind$?mg_get_current_time_ns@@YA_KXZ DD 011319H
	DD	08204H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$md5_append DD 011301H
	DD	0a213H
$unwind$md5_finish DD 011d19H
	DD	0820eH
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z DD 022319H
	DD	0150111H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ DD 022d19H
	DD	0149011bH
	DD	imagerel __GSHandlerCheck
	DD	0a30H
$unwind$?mg_set_thread_name@@YAXPEBD@Z DD 011819H
	DD	0e209H
	DD	imagerel __GSHandlerCheck_SEH
	DD	01H
	DD	imagerel ?mg_set_thread_name@@YAXPEBD@Z+70
	DD	imagerel ?mg_set_thread_name@@YAXPEBD@Z+130
	DD	imagerel ?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA
	DD	imagerel ?mg_set_thread_name@@YAXPEBD@Z+130
	DD	061H
$unwind$?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA DD 020601H
	DD	050025206H
$unwind$?is_file_opened@@YAHPEBUmg_file_access@@@Z DD 010901H
	DD	02209H
$unwind$?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z DD 022819H
	DD	0510116H
	DD	imagerel __GSHandlerCheck
	DD	0270H
$unwind$?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z DD 010e01H
	DD	0220eH
$unwind$?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z DD 022d19H
	DD	04b011bH
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$?mg_fclose@@YAHPEAUmg_file_access@@@Z DD 010901H
	DD	06209H
$unwind$?mg_strlcpy@@YAXPEADPEBD_K@Z DD 011301H
	DD	02213H
$unwind$?lowercase@@YAHPEBD@Z DD 010901H
	DD	04209H
$unwind$?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z DD 011301H
	DD	06213H
$unwind$?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z DD 010e01H
	DD	0420eH
$unwind$?mg_strdup@@YAPEADPEBD@Z DD 010901H
	DD	04209H
$unwind$?mg_strcasestr@@YAPEBDPEBD0@Z DD 010e01H
	DD	0820eH
$unwind$?get_option_index@@YAHPEBD@Z DD 010901H
	DD	06209H
$unwind$?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z DD 011301H
	DD	08213H
$unwind$?gmt_time_string@@YAXPEAD_KPEA_J@Z DD 011301H
	DD	06213H
$unwind$?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z DD 023319H
	DD	04170121H
	DD	imagerel __GSHandlerCheck
	DD	020a0H
$unwind$?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z DD 020c01H
	DD	0600b700cH
$unwind$?get_proto_name@@YAPEBDPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$?skip_quoted@@YAPEADPEAPEADPEBD1D@Z DD 011801H
	DD	0a218H
$unwind$?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z DD 011201H
	DD	06212H
$unwind$?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z DD 011801H
	DD	06218H
$unwind$?next_option@@YAPEBDPEBDPEAUvec@@1@Z DD 011301H
	DD	06213H
$unwind$?header_has_option@@YAHPEBD0@Z DD 010e01H
	DD	0820eH
$unwind$?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z DD 025032f19H
	DD	0f21c2321H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$?match_context_reset@@YAXPEAUmg_match_context@@@Z DD 010901H
	DD	04209H
$unwind$?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z DD 011801H
	DD	0e218H
$unwind$?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z DD 011801H
	DD	08218H
$unwind$?match_compare@@YAHPEBX0PEAX@Z DD 011301H
	DD	02213H
$unwind$?match_prefix@@YA_JPEBD_K0@Z DD 011301H
	DD	04213H
$unwind$?match_prefix_strlen@@YA_JPEBD0@Z DD 010e01H
	DD	0420eH
$unwind$?should_keep_alive@@YAHPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?should_decode_url@@YAHPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?should_decode_query_string@@YAHPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	04209H
$unwind$?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z DD 010901H
	DD	0a209H
$unwind$?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z DD 010e01H
	DD	0220eH
$unwind$?send_no_cache_header@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	04209H
$unwind$?send_static_cache_header@@YAXPEAUmg_connection@@@Z DD 021e19H
	DD	013010cH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?send_additional_header@@YAXPEAUmg_connection@@@Z DD 021e19H
	DD	013010cH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?send_cors_header@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z DD 011301H
	DD	08213H
$unwind$?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z DD 023219H
	DD	04810120H
	DD	imagerel __GSHandlerCheck
	DD	023f0H
$unwind$?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z DD 010e01H
	DD	0420eH
$unwind$?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z DD 010901H
	DD	04209H
$unwind$?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z DD 010e01H
	DD	0420eH
$unwind$?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z DD 011301H
	DD	0c213H
$unwind$?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z DD 010e01H
	DD	0420eH
$unwind$?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z DD 010901H
	DD	06209H
$unwind$?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z DD 010901H
	DD	04209H
$unwind$?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z DD 010901H
	DD	04209H
$unwind$?change_slashes_to_backslashes@@YAXPEAD@Z DD 010901H
	DD	06209H
$unwind$?mg_wcscasecmp@@YAHPEB_W0@Z DD 010e01H
	DD	0220eH
$unwind$?mg_remove@@YAHPEBUmg_connection@@PEBD@Z DD 022319H
	DD	04b0111H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z DD 022819H
	DD	04b0116H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z DD 022319H
	DD	04b0111H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$?mg_closedir@@YAHPEAUDIR@@@Z DD 010901H
	DD	06209H
$unwind$?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z DD 010901H
	DD	0a209H
$unwind$?poll@@YAHPEAUmg_pollfd@@IH@Z DD 022719H
	DD	0d50115H
	DD	imagerel __GSHandlerCheck
	DD	0690H
$unwind$?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z DD 011301H
	DD	04213H
$unwind$?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z DD 011301H
	DD	0a213H
$unwind$?mg_join_thread@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?dlopen@@YAPEAXPEBDH@Z DD 022219H
	DD	0490110H
	DD	imagerel __GSHandlerCheck
	DD	0230H
$unwind$?dlclose@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?kill@@YAHPEAXH@Z DD 010d01H
	DD	0420dH
$unwind$?waitpid@@YAPEAXPEAXPEAHH@Z DD 011301H
	DD	06213H
$unwind$?trim_trailing_whitespaces@@YAXPEAD@Z DD 010901H
	DD	06209H
$unwind$?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z DD 032e19H
	DD	0150011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0a70H
$unwind$?set_blocking_mode@@YAH_K@Z DD 010901H
	DD	06209H
$unwind$?set_non_blocking_mode@@YAH_K@Z DD 010901H
	DD	06209H
$unwind$?get_random@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z DD 011701H
	DD	06217H
$unwind$?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z DD 011801H
	DD	0a218H
$unwind$?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z DD 011801H
	DD	0c218H
$unwind$?discard_unread_request_data@@YAXPEAUmg_connection@@@Z DD 022419H
	DD	04070112H
	DD	imagerel __GSHandlerCheck
	DD	02020H
$unwind$?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z DD 011301H
	DD	0e213H
$unwind$?handle_request@@YAXPEAUmg_connection@@@Z DD 021e19H
	DD	0a5010cH
	DD	imagerel __GSHandlerCheck
	DD	0510H
$unwind$?log_access@@YAXPEBUmg_connection@@@Z DD 022419H
	DD	02390112H
	DD	imagerel __GSHandlerCheck
	DD	011b0H
$unwind$?handle_request_stat_log@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z DD 011301H
	DD	08213H
$unwind$?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z DD 011801H
	DD	06218H
$unwind$?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z DD 022e19H
	DD	040b011cH
	DD	imagerel __GSHandlerCheck
	DD	02040H
$unwind$?url_decode_in_place@@YAXPEAD@Z DD 010901H
	DD	08209H
$unwind$?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z DD 010901H
	DD	06209H
$unwind$?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z DD 010e01H
	DD	0420eH
$unwind$?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z DD 011801H
	DD	0a218H
$unwind$?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z DD 042f19H
	DD	087011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0420H
$unwind$?get_http_header_len@@YAHPEBDH@Z DD 010d01H
	DD	0620dH
$unwind$?get_month_index@@YAHPEBD@Z DD 010901H
	DD	06209H
$unwind$?parse_date_string@@YA_JPEBD@Z DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?remove_dot_segments@@YAXPEAD@Z DD 010901H
	DD	08209H
$unwind$?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z DD 031501H
	DD	07011c215H
	DD	06010H
$unwind$?bin2str@@YAXPEADPEBE_K@Z DD 011301H
	DD	02213H
$unwind$?check_password_digest@@YAHPEBD0000000@Z DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c8H
$unwind$?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z DD 022819H
	DD	0710116H
	DD	imagerel __GSHandlerCheck
	DD	0370H
$unwind$?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z DD 011801H
	DD	0e218H
$unwind$?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z DD 022819H
	DD	0170116H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z DD 022e19H
	DD	045b011cH
	DD	imagerel __GSHandlerCheck
	DD	022c0H
$unwind$?check_authorization@@YAHPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0790111H
	DD	imagerel __GSHandlerCheck
	DD	03b0H
$unwind$?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z DD 022319H
	DD	01d0111H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?is_authorized_for_put@@YAHPEAUmg_connection@@@Z DD 011819H
	DD	0c209H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?is_valid_port@@YAHK@Z DD 010801H
	DD	02208H
$unwind$?mg_inet_pton@@YAHHPEBDPEAX_KH@Z DD 011701H
	DD	0e217H
$unwind$?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c8H
$unwind$?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z DD 022319H
	DD	0290111H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?compare_dir_entries@@YAHPEBX0PEAX@Z DD 011301H
	DD	0c213H
$unwind$?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z DD 010e01H
	DD	0820eH
$unwind$?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z DD 022d19H
	DD	077011bH
	DD	imagerel __GSHandlerCheck
	DD	03a0H
$unwind$?remove_directory@@YAHPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0770111H
	DD	imagerel __GSHandlerCheck
	DD	03a0H
$unwind$?dir_scan_callback@@YAHPEAUde@@PEAX@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z DD 022319H
	DD	01f0111H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z DD 023319H
	DD	04130121H
	DD	imagerel __GSHandlerCheck
	DD	02080H
$unwind$?parse_range_header@@YAHPEBDPEA_J1@Z DD 011301H
	DD	04213H
$unwind$?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z DD 011301H
	DD	08213H
$unwind$?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z DD 042f19H
	DD	0a3011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0500H
$unwind$?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z DD 022319H
	DD	0130111H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z DD 022319H
	DD	0170111H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?put_dir@@YAHPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0730111H
	DD	imagerel __GSHandlerCheck
	DD	0380H
$unwind$?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z DD 010e01H
	DD	0a20eH
$unwind$?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z DD 010d01H
	DD	0420dH
$unwind$?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z DD 010901H
	DD	06209H
$unwind$?is_valid_http_method@@YAHPEBD@Z DD 010901H
	DD	06209H
$unwind$?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z DD 011201H
	DD	06212H
$unwind$?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z DD 011201H
	DD	08212H
$unwind$?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z DD 023319H
	DD	040d0121H
	DD	imagerel __GSHandlerCheck
	DD	02050H
$unwind$?addenv@@YAXPEAUcgi_environment@@PEBDZZ DD 011801H
	DD	0e218H
$unwind$?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z DD 022d19H
	DD	02d011bH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$?abort_cgi_process@@YAHPEAX@Z DD 010901H
	DD	08209H
$unwind$?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z DD 022819H
	DD	01250116H
	DD	imagerel __GSHandlerCheck
	DD	0910H
$unwind$?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z DD 022019H
	DD	0110111H
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$?get_uri_type@@YAHPEBD@Z DD 010901H
	DD	0a209H
$unwind$?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z DD 021101H
	DD	0110111H
$unwind$?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z DD 022819H
	DD	01010116H
	DD	imagerel __GSHandlerCheck
	DD	07f0H
$unwind$?put_file@@YAXPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0130111H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$?delete_file@@YAXPEAUmg_connection@@PEBD@Z DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z DD 023319H
	DD	040f0121H
	DD	imagerel __GSHandlerCheck
	DD	02060H
$unwind$?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z DD 023319H
	DD	04570121H
	DD	imagerel __GSHandlerCheck
	DD	022a0H
$unwind$?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z DD 032419H
	DD	0900112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0470H
$unwind$?mg_fgetc@@YAHPEAUmg_file@@@Z DD 010901H
	DD	04209H
$unwind$?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z DD 022819H
	DD	0130116H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?send_options@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	04209H
$unwind$?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z DD 022d19H
	DD	0dd011bH
	DD	imagerel __GSHandlerCheck
	DD	06d0H
$unwind$?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z DD 010e01H
	DD	0620eH
$unwind$?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z DD 011301H
	DD	06213H
$unwind$?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0d90111H
	DD	imagerel __GSHandlerCheck
	DD	06b0H
$unwind$?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0cd0111H
	DD	imagerel __GSHandlerCheck
	DD	0650H
$unwind$?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z DD 022319H
	DD	0cb0111H
	DD	imagerel __GSHandlerCheck
	DD	0640H
$unwind$?SHA1_Transform@@YAXQEAIQEBE@Z DD 022319H
	DD	03b0111H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z DD 011301H
	DD	08213H
$unwind$?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z DD 011d19H
	DD	0820eH
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z DD 022319H
	DD	02f0111H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z DD 022e19H
	DD	021d011cH
	DD	imagerel __GSHandlerCheck
	DD	010d0H
$unwind$?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$?mask_data@@YAXPEBD_KIPEAD@Z DD 011801H
	DD	02218H
$unwind$?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z DD 022d19H
	DD	057011bH
	DD	imagerel __GSHandlerCheck
	DD	02a8H
$unwind$?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z DD 021e19H
	DD	013010cH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z DD 011301H
	DD	0e213H
$unwind$?set_throttle@@YAHPEBDPEBTusa@@0@Z DD 011301H
	DD	0c213H
$unwind$?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z DD 022d19H
	DD	010d011bH
	DD	imagerel __GSHandlerCheck
	DD	0850H
$unwind$?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z DD 022d19H
	DD	08f011bH
	DD	imagerel __GSHandlerCheck
	DD	0460H
$unwind$?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z DD 022d19H
	DD	08b011bH
	DD	imagerel __GSHandlerCheck
	DD	0440H
$unwind$?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z DD 011801H
	DD	06218H
$unwind$?search_boundary@@YAPEBDPEBD_K01@Z DD 011801H
	DD	06218H
$unwind$?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z DD 010901H
	DD	02209H
$unwind$?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z DD 010e01H
	DD	0620eH
$unwind$?switch_domain_context@@YAHPEAUmg_connection@@@Z DD 010901H
	DD	0a209H
$unwind$?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z DD 022819H
	DD	04110116H
	DD	imagerel __GSHandlerCheck
	DD	02070H
$unwind$?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z DD 011801H
	DD	0a218H
$unwind$?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z DD 011701H
	DD	0c217H
$unwind$?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z DD 011701H
	DD	06217H
$unwind$?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z DD 010e01H
	DD	0620eH
$unwind$?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z DD 010e01H
	DD	0420eH
$unwind$?close_all_listening_sockets@@YAXPEAUmg_context@@@Z DD 010901H
	DD	06209H
$unwind$?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z DD 022819H
	DD	0330116H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$?is_ssl_port_used@@YAHPEBD@Z DD 010901H
	DD	06209H
$unwind$?set_ports_option@@YAHPEAUmg_context@@@Z DD 042019H
	DD	021010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z DD 010e01H
	DD	0c20eH
$unwind$?tls_dtor@@YAXPEAX@Z DD 010901H
	DD	06209H
$unwind$?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z DD 011801H
	DD	0c218H
$unwind$?ssl_error@@YAPEBDXZ DD 010401H
	DD	08204H
$unwind$?refresh_trust@@YAHPEAUmg_connection@@@Z DD 021e19H
	DD	017010cH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z DD 022819H
	DD	01b0116H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?hexdump2string@@YAHPEAXHPEADH@Z DD 032819H
	DD	070156219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	020H
$unwind$?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z DD 022319H
	DD	0c50111H
	DD	imagerel __GSHandlerCheck
	DD	0610H
$unwind$?ssl_locking_callback@@YAXHHPEBDH@Z DD 011601H
	DD	04216H
$unwind$?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z DD 011801H
	DD	0e218H
$unwind$?initialize_openssl@@YAHPEAD_K@Z DD 010e01H
	DD	0c20eH
$unwind$?ssl_get_protocol@@YAJH@Z DD 010801H
	DD	02208H
$unwind$?ssl_info_callback@@YAXPEBUssl_st@@HH@Z DD 011201H
	DD	06212H
$unwind$?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z DD 011301H
	DD	0a213H
$unwind$?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z DD 022d19H
	DD	03d011bH
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z DD 022319H
	DD	0210111H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$?uninitialize_openssl@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z DD 022319H
	DD	014d0111H
	DD	imagerel __GSHandlerCheck
	DD	0a50H
$unwind$?set_acl_option@@YAHPEAUmg_context@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	04209H
$unwind$?set_tcp_nodelay@@YAHPEBUsocket@@H@Z DD 010d01H
	DD	0620dH
$unwind$?close_socket_gracefully@@YAXPEAUmg_connection@@@Z DD 022419H
	DD	04110112H
	DD	imagerel __GSHandlerCheck
	DD	02070H
$unwind$?close_connection@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	0a209H
$unwind$?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z DD 042e19H
	DD	027011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z DD 011801H
	DD	06218H
$unwind$?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z DD 011801H
	DD	08218H
$unwind$?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z DD 011801H
	DD	08218H
$unwind$?websocket_client_thread@@YAIPEAX@Z DD 010901H
	DD	0a209H
$unwind$?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z DD 021a01H
	DD	015011aH
$unwind$?init_connection@@YAXPEAUmg_connection@@@Z DD 010901H
	DD	08209H
$unwind$?process_new_connection@@YAXPEAUmg_connection@@@Z DD 021e19H
	DD	01d010cH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$?worker_thread_run@@YAXPEAUmg_connection@@@Z DD 020c01H
	DD	017010cH
$unwind$?worker_thread@@YAIPEAX@Z DD 010901H
	DD	04209H
$unwind$?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z DD 022319H
	DD	0190111H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?master_thread_run@@YAXPEAUmg_context@@@Z DD 010901H
	DD	0e209H
$unwind$?master_thread@@YAIPEAX@Z DD 010901H
	DD	04209H
$unwind$?free_context@@YAXPEAUmg_context@@@Z DD 010901H
	DD	0c209H
$unwind$?get_system_name@@YAXPEAPEAD@Z DD 021e19H
	DD	01f010cH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?legacy_init@@YAXPEAPEBD@Z DD 010901H
	DD	08209H
$unwind$?mg_str_append@@YA_KPEAPEADPEADPEBD@Z DD 011301H
	DD	06213H
$unwind$?stb__sbgrowf@@YAPEAXPEAXHH@Z DD 011201H
	DD	0a212H
$unwind$?zsmov@@YAPEADPEAX_KPEBX@Z DD 011301H
	DD	06213H
$unwind$?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z DD 011301H
	DD	0c213H
$unwind$?ReturnDecodeError@@YAHPEB_W@Z DD 040e01H
	DD	01d010eH
	DD	060067007H
$unwind$?VarintSize@@YAH_K@Z DD 010901H
	DD	02209H
$unwind$?PeekVarint@@YAHPEAEPEA_K@Z DD 010e01H
	DD	0420eH
$unwind$?WriteVarint@@YAPEAEPEAE_K@Z DD 041301H
	DD	0210113H
	DD	0600b700cH
$unwind$?EncodeLabel@@YAIHH@Z DD 010c01H
	DD	0220cH
$unwind$?DecodeLabel@@YA?AUxlabel@@_K@Z DD 010901H
	DD	04209H
$unwind$?NewBlock@@YA?AUxblock@@I@Z DD 010d01H
	DD	0420dH
$unwind$?DelBlock@@YAXPEAUxblock@@@Z DD 010901H
	DD	04209H
$unwind$?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z DD 010e01H
	DD	0220eH
$unwind$?StackCursorInBlock@@YAHPEAUxstack@@@Z DD 010901H
	DD	04209H
$unwind$?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z DD 010901H
	DD	02209H
$unwind$?StackInBlockOf@@YAHPEAUxstack@@0@Z DD 010e01H
	DD	0620eH
$unwind$?GobbleVarint@@YA_KPEAUxstack@@@Z DD 010901H
	DD	06209H
$unwind$?GobbleFloat32@@YAMPEAUxstack@@@Z DD 010901H
	DD	06209H
$unwind$?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z DD 011301H
	DD	04213H
$unwind$?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z DD 041301H
	DD	0130113H
	DD	0600b700cH
$unwind$?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z DD 011201H
	DD	08212H
$unwind$?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z DD 011201H
	DD	04212H
$unwind$?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z DD 041701H
	DD	0150117H
	DD	0600f7010H
$unwind$?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z DD 011201H
	DD	04212H
$unwind$?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z DD 041701H
	DD	0150117H
	DD	0600f7010H
$unwind$?DelValue@@YAXPEAUxvalue@@@Z DD 010901H
	DD	08209H
$unwind$?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z DD 041201H
	DD	01d0112H
	DD	0600a700bH
$unwind$?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z DD 041d01H
	DD	01f011dH
	DD	060157016H
$unwind$?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
$unwind$?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$?InternalGetUnknownValue@@YAXPEAUxstate@@@Z DD 040e01H
	DD	019010eH
	DD	060067007H
$unwind$?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z DD 010e01H
	DD	0820eH
$unwind$?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z DD 010e01H
	DD	0620eH
$unwind$?GetVarintValue@@YAHPEAUxstate@@PEAI@Z DD 010e01H
	DD	0420eH
$unwind$?GetVarintValue@@YAHPEAUxstate@@PEAH@Z DD 010e01H
	DD	0420eH
$unwind$?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z DD 010e01H
	DD	0820eH
$unwind$?GetEnumValue@@YAHPEAUxstate@@PEAX@Z DD 010e01H
	DD	0420eH
$unwind$?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z DD 010e01H
	DD	0a20eH
$unwind$?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z DD 010e01H
	DD	0a20eH
$unwind$?NextField@@YAHPEAUxstate@@@Z DD 040e01H
	DD	019010eH
	DD	060067007H
$unwind$?GetTag@@YAHPEAUxstate@@@Z DD 040e01H
	DD	013010eH
	DD	060067007H
$unwind$?Apportion@@YAXPEAUxstate@@_KPEBX@Z DD 011301H
	DD	04213H
$unwind$?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z DD 042919H
	DD	0730117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	0380H
$unwind$?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z DD 010e01H
	DD	0420eH
$unwind$?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z DD 010e01H
	DD	0620eH
$unwind$?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z DD 010e01H
	DD	0620eH
$unwind$?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z DD 010e01H
	DD	0620eH
$unwind$?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z DD 010e01H
	DD	0620eH
$unwind$?RequestObservation@@YAHPEAUAlistarContext@@HH@Z DD 021301H
	DD	0700fb213H
$unwind$?RequestGameInfo@@YAHPEAUAlistarContext@@@Z DD 020a01H
	DD	07006b20aH
$unwind$?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z DD 020a01H
	DD	07006b20aH
$unwind$?RequestCreateGame@@YAHPEAUAlistarContext@@@Z DD 040e01H
	DD	03b010eH
	DD	060067007H
$unwind$?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z DD 041701H
	DD	0230117H
	DD	0600f7010H
$unwind$?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z DD 010801H
	DD	02208H
$unwind$?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z DD 020f01H
	DD	0700b320fH
$unwind$?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z DD 021801H
	DD	070143218H
$unwind$?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z DD 020f01H
	DD	0700b320fH
$unwind$?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z DD 041e01H
	DD	01d011eH
	DD	060167017H
$unwind$?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ DD 040e01H
	DD	01f010eH
	DD	060067007H
$unwind$?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z DD 010e01H
	DD	0a20eH
$unwind$?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z DD 010e01H
	DD	0820eH
$unwind$?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z DD 010e01H
	DD	0820eH
$unwind$?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z DD 010e01H
	DD	0820eH
$unwind$?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z DD 010e01H
	DD	0e20eH
$unwind$?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z DD 010e01H
	DD	0a20eH
$unwind$?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z DD 010e01H
	DD	0a20eH
$unwind$?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z DD 010e01H
	DD	0820eH
$unwind$?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z DD 010e01H
	DD	0620eH
$unwind$?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z DD 010e01H
	DD	0820eH
$unwind$?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z DD 041301H
	DD	01b0113H
	DD	0600b700cH
$unwind$?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z DD 042a19H
	DD	06d0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0350H
$unwind$?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z DD 041801H
	DD	0250118H
	DD	060107011H
$unwind$?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z DD 040e01H
	DD	0ab010eH
	DD	060067007H
$unwind$?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z DD 032e19H
	DD	070011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0370H
$unwind$?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z DD 041c01H
	DD	015011cH
	DD	060147015H
$unwind$?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z DD 041301H
	DD	0150113H
	DD	0600b700cH
$unwind$?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z DD 010901H
	DD	04209H
$unwind$?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z DD 042919H
	DD	012d0117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	0950H
$unwind$?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z DD 010901H
	DD	06209H
$unwind$?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z DD 010901H
	DD	08209H
$unwind$?AlistarTick@@YAHPEAUAlistarContext@@@Z DD 042019H
	DD	01a7010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0d20H
$unwind$?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z DD 041c01H
	DD	035011cH
	DD	060147015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strstr@@YAPEADQEADQEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strrchr@@YAPEADQEADH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strchr@@YAPEADQEADH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf_l DD 011801H
	DD	08218H
xdata	ENDS
CRT$XCU	SEGMENT
?STANDARD_BASIS_COLOR$initializer$@@3P6AXXZEA DQ FLAT:??__ESTANDARD_BASIS_COLOR@@YAXXZ ; STANDARD_BASIS_COLOR$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = 48
tv93 = 56
tv83 = 64
tv149 = 72
tv169 = 80
$T1 = 88
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 200
$T6 = 224
$T7 = 256
$T8 = 280
$T9 = 304
$T10 = 336
$T11 = 360
$T12 = 384
inst$ = 448
arch64$ = 456
exec$ = 464
dlls$ = 472
?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z PROC ; FindStarcraftExecutableAndDllsDirectory
; File W:\cpp\void\alistar\alistar.c
; Line 470
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rcx, QWORD PTR inst$[rsp]
	call	?IsFileNameReal@@YAHPEBD@Z		; IsFileNameReal
	test	eax, eax
	jne	$LN2@FindStarcr
; Line 471
	mov	DWORD PTR [rsp+32], 192			; 000000c0H
	mov	r9d, 471				; 000001d7H
	lea	r8, OFFSET FLAT:$SG173419
	lea	rdx, OFFSET FLAT:$SG173420
	lea	rcx, QWORD PTR $T10[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR inst$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv83[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv83[rsp]
	lea	r8, OFFSET FLAT:$SG173418
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 472
	xor	eax, eax
	jmp	$LN1@FindStarcr
$LN2@FindStarcr:
; Line 475
	cmp	DWORD PTR arch64$[rsp], 0
	je	SHORT $LN6@FindStarcr
	lea	rax, OFFSET FLAT:$SG173421
	mov	QWORD PTR tv86[rsp], rax
	jmp	SHORT $LN7@FindStarcr
$LN6@FindStarcr:
	lea	rax, OFFSET FLAT:$SG173422
	mov	QWORD PTR tv86[rsp], rax
$LN7@FindStarcr:
	mov	rax, QWORD PTR tv86[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR inst$[rsp]
	lea	r8, OFFSET FLAT:$SG173423
	mov	edx, 260				; 00000104H
	mov	rcx, QWORD PTR exec$[rsp]
	call	sprintf_s
; Line 476
	cmp	DWORD PTR arch64$[rsp], 0
	je	SHORT $LN8@FindStarcr
	lea	rax, OFFSET FLAT:$SG173424
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN9@FindStarcr
$LN8@FindStarcr:
	lea	rax, OFFSET FLAT:$SG173425
	mov	QWORD PTR tv93[rsp], rax
$LN9@FindStarcr:
	mov	rax, QWORD PTR tv93[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR inst$[rsp]
	lea	r8, OFFSET FLAT:$SG173426
	mov	edx, 260				; 00000104H
	mov	rcx, QWORD PTR dlls$[rsp]
	call	sprintf_s
; Line 478
	mov	rcx, QWORD PTR exec$[rsp]
	call	?IsFileNameReal@@YAHPEBD@Z		; IsFileNameReal
	test	eax, eax
	jne	$LN3@FindStarcr
; Line 479
	mov	DWORD PTR [rsp+32], 193			; 000000c1H
	mov	r9d, 479				; 000001dfH
	lea	r8, OFFSET FLAT:$SG173429
	lea	rdx, OFFSET FLAT:$SG173430
	lea	rcx, QWORD PTR $T11[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR exec$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv149[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv149[rsp]
	lea	r8, OFFSET FLAT:$SG173428
	mov	edx, 7
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 480
	xor	eax, eax
	jmp	$LN1@FindStarcr
$LN3@FindStarcr:
; Line 482
	mov	rcx, QWORD PTR dlls$[rsp]
	call	?IsFileNameReal@@YAHPEBD@Z		; IsFileNameReal
	test	eax, eax
	jne	$LN4@FindStarcr
; Line 483
	mov	DWORD PTR [rsp+32], 194			; 000000c2H
	mov	r9d, 483				; 000001e3H
	lea	r8, OFFSET FLAT:$SG173433
	lea	rdx, OFFSET FLAT:$SG173434
	lea	rcx, QWORD PTR $T12[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR dlls$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv169[rsp], rax
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv169[rsp]
	lea	r8, OFFSET FLAT:$SG173432
	mov	edx, 7
	lea	rcx, QWORD PTR $T9[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 484
	xor	eax, eax
	jmp	SHORT $LN1@FindStarcr
$LN4@FindStarcr:
; Line 487
	mov	eax, 1
$LN1@FindStarcr:
; Line 488
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z ENDP ; FindStarcraftExecutableAndDllsDirectory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
unit$1 = 48
i$2 = 56
i$3 = 60
i$4 = 64
tv157 = 68
tv178 = 72
tv215 = 76
tv230 = 80
tv252 = 84
unit_count$5 = 88
unit_array$6 = 96
$T7 = 104
$T8 = 128
$T9 = 160
raw$10 = 184
$T11 = 240
$T12 = 456
$T13 = 672
$T14 = 888
response$ = 1104
common$15 = 2240
obs$16 = 2288
__$ArrayPad$ = 3360
ctx$ = 3408
?AlistarTick@@YAHPEAUAlistarContext@@@Z PROC		; AlistarTick
; File W:\cpp\void\alistar\alistar.c
; Line 386
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 3384				; 00000d38H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 387
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	DWORD PTR [rax+1268], 0
	je	SHORT $LN11@AlistarTic
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	DWORD PTR [rax+1264], 0
	jne	SHORT $LN11@AlistarTic
; Line 388
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1264], 1
; Line 389
	mov	rax, QWORD PTR ctx$[rsp]
	mov	r8d, DWORD PTR [rax+1272]
	mov	edx, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?RequestObservation@@YAHPEAUAlistarContext@@HH@Z ; RequestObservation
$LN11@AlistarTic:
; Line 395
	mov	DWORD PTR [rsp+32], 191			; 000000bfH
	mov	r9d, 395				; 0000018bH
	lea	r8, OFFSET FLAT:$SG173397
	lea	rdx, OFFSET FLAT:$SG173398
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 96					; 00000060H
	lea	rcx, QWORD PTR $T8[rsp]
	lea	rdx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r9d, 10
	lea	r8, QWORD PTR response$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AliDequeueEventOfTypeAndNotifyAll_
	test	eax, eax
	je	$LN12@AlistarTic
; Line 397
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1280				; 00000500H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 398
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1312				; 00000520H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 399
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1344				; 00000540H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 400
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1368				; 00000558H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 401
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1392				; 00000570H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 402
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1416				; 00000588H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 403
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1440				; 000005a0H
	mov	rcx, rax
	call	?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ; UnitArrayFree
; Line 405
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1304], 0
; Line 406
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1336], 0
; Line 408
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1264], 0
; Line 410
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+1272]
	inc	eax
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+1272], eax
; Line 413
	lea	rax, QWORD PTR obs$16[rsp]
	lea	rcx, QWORD PTR response$[rsp+16]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 1072				; 00000430H
	rep movsb
; Line 416
	lea	rax, QWORD PTR raw$10[rsp]
	lea	rcx, QWORD PTR obs$16[rsp+56]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
; Line 419
	mov	rax, QWORD PTR raw$10[rsp]
	mov	QWORD PTR unit_array$6[rsp], rax
; Line 422
	cmp	QWORD PTR unit_array$6[rsp], 0
	je	SHORT $LN23@AlistarTic
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR unit_array$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv157[rsp], eax
	jmp	SHORT $LN24@AlistarTic
$LN23@AlistarTic:
	mov	DWORD PTR tv157[rsp], 0
$LN24@AlistarTic:
	mov	eax, DWORD PTR tv157[rsp]
	mov	DWORD PTR unit_count$5[rsp], eax
; Line 424
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@AlistarTic
$LN2@AlistarTic:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@AlistarTic:
	mov	eax, DWORD PTR unit_count$5[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN3@AlistarTic
; Line 426
	movsxd	rax, DWORD PTR i$2[rsp]
	imul	rax, rax, 216				; 000000d8H
	mov	rcx, QWORD PTR unit_array$6[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR unit$1[rsp], rax
; Line 428
	mov	rax, QWORD PTR unit$1[rsp]
	cmp	DWORD PTR [rax+72], 18
	jne	$LN13@AlistarTic
; Line 429
	lea	rax, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR unit$1[rsp]
	mov	ecx, 216				; 000000d8H
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1280				; 00000500H
	mov	rcx, rax
	call	?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z ; UnitArrayAdd
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 216				; 000000d8H
	rep movsb
; Line 431
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@AlistarTic
$LN5@AlistarTic:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN7@AlistarTic:
	mov	rax, QWORD PTR unit$1[rsp]
	cmp	QWORD PTR [rax+192], 0
	je	SHORT $LN25@AlistarTic
	mov	rax, QWORD PTR unit$1[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	DWORD PTR tv178[rsp], eax
	jmp	SHORT $LN26@AlistarTic
$LN25@AlistarTic:
	mov	DWORD PTR tv178[rsp], 0
$LN26@AlistarTic:
	mov	eax, DWORD PTR tv178[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN6@AlistarTic
; Line 432
	movsxd	rax, DWORD PTR i$3[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR unit$1[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	cmp	DWORD PTR [rcx+rax], 524		; 0000020cH
	jne	SHORT $LN15@AlistarTic
; Line 433
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+1304]
	inc	eax
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+1304], eax
$LN15@AlistarTic:
; Line 435
	jmp	$LN5@AlistarTic
$LN6@AlistarTic:
; Line 436
	jmp	$LN14@AlistarTic
$LN13@AlistarTic:
; Line 437
	mov	rax, QWORD PTR unit$1[rsp]
	cmp	DWORD PTR [rax+72], 19
	jne	SHORT $LN16@AlistarTic
; Line 438
	lea	rax, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR unit$1[rsp]
	mov	ecx, 216				; 000000d8H
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1312				; 00000520H
	mov	rcx, rax
	call	?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z ; UnitArrayAdd
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 216				; 000000d8H
	rep movsb
; Line 439
	jmp	$LN17@AlistarTic
$LN16@AlistarTic:
; Line 440
	mov	rax, QWORD PTR unit$1[rsp]
	cmp	DWORD PTR [rax+72], 45			; 0000002dH
	jne	$LN18@AlistarTic
; Line 441
	lea	rax, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR unit$1[rsp]
	mov	ecx, 216				; 000000d8H
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1344				; 00000540H
	mov	rcx, rax
	call	?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z ; UnitArrayAdd
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 216				; 000000d8H
	rep movsb
; Line 443
	mov	rax, QWORD PTR unit$1[rsp]
	cmp	QWORD PTR [rax+192], 0
	je	SHORT $LN27@AlistarTic
	mov	rax, QWORD PTR unit$1[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	DWORD PTR tv215[rsp], eax
	jmp	SHORT $LN28@AlistarTic
$LN27@AlistarTic:
	mov	DWORD PTR tv215[rsp], 0
$LN28@AlistarTic:
	cmp	DWORD PTR tv215[rsp], 0
	jne	SHORT $LN19@AlistarTic
; Line 444
	lea	rax, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR unit$1[rsp]
	mov	ecx, 216				; 000000d8H
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 1368				; 00000558H
	mov	rcx, rax
	call	?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z ; UnitArrayAdd
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 216				; 000000d8H
	rep movsb
; Line 445
	jmp	$LN20@AlistarTic
$LN19@AlistarTic:
; Line 447
	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN10@AlistarTic
$LN8@AlistarTic:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN10@AlistarTic:
	mov	rax, QWORD PTR unit$1[rsp]
	cmp	QWORD PTR [rax+192], 0
	je	SHORT $LN29@AlistarTic
	mov	rax, QWORD PTR unit$1[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	DWORD PTR tv230[rsp], eax
	jmp	SHORT $LN30@AlistarTic
$LN29@AlistarTic:
	mov	DWORD PTR tv230[rsp], 0
$LN30@AlistarTic:
	mov	eax, DWORD PTR tv230[rsp]
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN9@AlistarTic
; Line 448
	movsxd	rax, DWORD PTR i$4[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR unit$1[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	cmp	DWORD PTR [rcx+rax], 319		; 0000013fH
	jne	SHORT $LN21@AlistarTic
; Line 449
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+1336]
	inc	eax
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+1336], eax
$LN21@AlistarTic:
; Line 451
	jmp	$LN8@AlistarTic
$LN9@AlistarTic:
$LN20@AlistarTic:
$LN18@AlistarTic:
$LN17@AlistarTic:
$LN14@AlistarTic:
; Line 454
	jmp	$LN2@AlistarTic
$LN3@AlistarTic:
; Line 458
	lea	rax, QWORD PTR common$15[rsp]
	lea	rcx, QWORD PTR obs$16[rsp+4]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 44					; 0000002cH
	rep movsb
; Line 459
	mov	rax, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR common$15[rsp+4]
	mov	DWORD PTR [rax+1488], ecx
; Line 460
	mov	rax, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR common$15[rsp+8]
	mov	DWORD PTR [rax+1492], ecx
$LN12@AlistarTic:
; Line 463
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	DWORD PTR [rax+1244], 10
	jne	SHORT $LN31@AlistarTic
	mov	DWORD PTR tv252[rsp], 1
	jmp	SHORT $LN32@AlistarTic
$LN31@AlistarTic:
	mov	DWORD PTR tv252[rsp], 0
$LN32@AlistarTic:
	mov	eax, DWORD PTR tv252[rsp]
; Line 464
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 3384				; 00000d38H
	pop	rdi
	pop	rsi
	ret	0
?AlistarTick@@YAHPEAUAlistarContext@@@Z ENDP		; AlistarTick
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
tv82 = 40
res$ = 48
Array$ = 80
?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z PROC ; UnitArrayAdd
; File W:\cpp\void\alistar\alistar.c
; Line 376
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 378
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@UnitArrayA
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR Array$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN3@UnitArrayA
	mov	QWORD PTR tv82[rsp], 0
	jmp	SHORT $LN4@UnitArrayA
$LN3@UnitArrayA:
	mov	r8d, 216				; 000000d8H
	mov	edx, 1
	mov	rax, QWORD PTR Array$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv77[rsp], rax
	mov	rax, QWORD PTR Array$[rsp]
	mov	rcx, QWORD PTR tv77[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR tv77[rsp]
	mov	QWORD PTR tv82[rsp], rax
$LN4@UnitArrayA:
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Array$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 216				; 000000d8H
	mov	rcx, QWORD PTR Array$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR res$[rsp], rax
; Line 379
	mov	rax, QWORD PTR Array$[rsp]
	mov	eax, DWORD PTR [rax+4]
	inc	eax
	mov	rcx, QWORD PTR Array$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 381
	mov	rax, QWORD PTR res$[rsp]
; Line 382
	add	rsp, 72					; 00000048H
	ret	0
?UnitArrayAdd@@YAPEAUUnit@@PEAUAlistarUnitArray@@@Z ENDP ; UnitArrayAdd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
Array$ = 64
?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z PROC	; UnitArrayFree
; File W:\cpp\void\alistar\alistar.c
; Line 369
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 370
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@UnitArrayF
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, 8
	mov	rcx, rax
	call	?mg_free@@YAXPEAX@Z			; mg_free
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@UnitArrayF
$LN3@UnitArrayF:
	mov	DWORD PTR tv69[rsp], 0
$LN4@UnitArrayF:
; Line 371
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR Array$[rsp]
	call	memset
; Line 372
	add	rsp, 56					; 00000038H
	ret	0
?UnitArrayFree@@YAXPEAUAlistarUnitArray@@@Z ENDP	; UnitArrayFree
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tries$ = 80
tv229 = 84
addr$ = 88
conn_context$ = 96
$T1 = 104
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 376
$T11 = 400
$T12 = 424
$T13 = 448
$T14 = 520
$T15 = 592
conn_callbacks$ = 752
response$ = 912
conn_options$ = 2048
errbuf$ = 2128
__$ArrayPad$ = 2384
ctx$ = 2432
is_realtime$ = 2440
port$ = 2448
?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z PROC ; AlistarEstablishConnection
; File W:\cpp\void\alistar\alistar.c
; Line 311
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 2408				; 00000968H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 312
	lea	rax, OFFSET FLAT:$SG173314
	mov	QWORD PTR addr$[rsp], rax
; Line 313
	mov	DWORD PTR port$[rsp], 5679		; 0000162fH
; Line 315
	lea	rax, OFFSET FLAT:$SG173315
	mov	QWORD PTR conn_options$[rsp], rax
	lea	rax, OFFSET FLAT:$SG173316
	mov	QWORD PTR conn_options$[rsp+8], rax
; Line 316
	lea	rax, OFFSET FLAT:$SG173317
	mov	QWORD PTR conn_options$[rsp+16], rax
	lea	rax, OFFSET FLAT:$SG173318
	mov	QWORD PTR conn_options$[rsp+24], rax
; Line 317
	lea	rax, OFFSET FLAT:$SG173319
	mov	QWORD PTR conn_options$[rsp+32], rax
	lea	rax, OFFSET FLAT:$SG173320
	mov	QWORD PTR conn_options$[rsp+40], rax
; Line 318
	lea	rax, OFFSET FLAT:$SG173321
	mov	QWORD PTR conn_options$[rsp+48], rax
	lea	rax, OFFSET FLAT:$SG173322
	mov	QWORD PTR conn_options$[rsp+56], rax
	mov	QWORD PTR conn_options$[rsp+64], 0
; Line 324
	lea	rax, QWORD PTR $T15[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 152				; 00000098H
	rep stosb
	lea	rax, QWORD PTR conn_callbacks$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 152				; 00000098H
	rep movsb
; Line 325
	lea	r8, QWORD PTR conn_options$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR conn_callbacks$[rsp]
	call	mg_start
	mov	QWORD PTR conn_context$[rsp], rax
; Line 327
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR addr$[rsp]
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG173323
	lea	rcx, QWORD PTR $T14[rsp]
	call	?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z ; LaunchStarcraftProcess
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 72					; 00000048H
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	mov	rdi, QWORD PTR ctx$[rsp]
	mov	rsi, rax
	mov	ecx, 72					; 00000048H
	rep movsb
; Line 330
	mov	r8d, 256				; 00000100H
	xor	edx, edx
	lea	rcx, QWORD PTR errbuf$[rsp]
	call	memset
; Line 334
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+72], 0
	mov	DWORD PTR tries$[rsp], 0
	jmp	SHORT $LN4@AlistarEst
$LN2@AlistarEst:
	mov	eax, DWORD PTR tries$[rsp]
	inc	eax
	mov	DWORD PTR tries$[rsp], eax
$LN4@AlistarEst:
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+72], 0
	jne	SHORT $LN3@AlistarEst
	cmp	DWORD PTR tries$[rsp], 7
	jge	SHORT $LN3@AlistarEst
; Line 335
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, OFFSET FLAT:?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z ; AlistarOnSocketConnectionClosed
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z ; AlistarOnSocketDataReceived
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	lea	rax, OFFSET FLAT:$SG173324
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 256			; 00000100H
	lea	r9, QWORD PTR errbuf$[rsp]
	xor	r8d, r8d
	mov	edx, DWORD PTR port$[rsp]
	mov	rcx, QWORD PTR addr$[rsp]
	call	mg_connect_websocket_client
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+72], rax
; Line 337
	jmp	$LN2@AlistarEst
$LN3@AlistarEst:
; Line 340
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z ; RequestAvailableMaps
; Line 341
	mov	DWORD PTR [rsp+32], 187			; 000000bbH
	mov	r9d, 341				; 00000155H
	lea	r8, OFFSET FLAT:$SG173326
	lea	rdx, OFFSET FLAT:$SG173327
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 96					; 00000060H
	lea	rcx, QWORD PTR $T2[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r9d, 17
	lea	r8, QWORD PTR response$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AwaitResponseOfType_
	test	eax, eax
	je	$LN5@AlistarEst
; Line 342
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?RequestCreateGame@@YAHPEAUAlistarContext@@@Z ; RequestCreateGame
; Line 344
	mov	DWORD PTR [rsp+32], 188			; 000000bcH
	mov	r9d, 344				; 00000158H
	lea	r8, OFFSET FLAT:$SG173329
	lea	rdx, OFFSET FLAT:$SG173330
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 96					; 00000060H
	lea	rcx, QWORD PTR $T4[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r9d, 1
	lea	r8, QWORD PTR response$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AwaitResponseOfType_
	test	eax, eax
	je	$LN6@AlistarEst
; Line 345
	lea	r8, OFFSET FLAT:$SG173331
	mov	edx, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z ; RequestJoinGameAsParticipant
; Line 347
	mov	DWORD PTR [rsp+32], 189			; 000000bdH
	mov	r9d, 347				; 0000015bH
	lea	r8, OFFSET FLAT:$SG173333
	lea	rdx, OFFSET FLAT:$SG173334
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 96					; 00000060H
	lea	rcx, QWORD PTR $T6[rsp]
	lea	rdx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r9d, 2
	lea	r8, QWORD PTR response$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AwaitResponseOfType_
	test	eax, eax
	je	$LN7@AlistarEst
; Line 348
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?RequestGameInfo@@YAHPEAUAlistarContext@@@Z ; RequestGameInfo
; Line 350
	mov	DWORD PTR [rsp+32], 190			; 000000beH
	mov	r9d, 350				; 0000015eH
	lea	r8, OFFSET FLAT:$SG173336
	lea	rdx, OFFSET FLAT:$SG173337
	lea	rcx, QWORD PTR $T12[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 96					; 00000060H
	lea	rcx, QWORD PTR $T8[rsp]
	lea	rdx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r9d, 9
	lea	r8, QWORD PTR response$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AwaitResponseOfType_
	test	eax, eax
	je	SHORT $LN8@AlistarEst
; Line 352
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1268], 1
$LN8@AlistarEst:
$LN7@AlistarEst:
$LN6@AlistarEst:
$LN5@AlistarEst:
; Line 358
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN10@AlistarEst
	mov	DWORD PTR tv229[rsp], 1
	jmp	SHORT $LN11@AlistarEst
$LN10@AlistarEst:
	mov	DWORD PTR tv229[rsp], 0
$LN11@AlistarEst:
	mov	eax, DWORD PTR tv229[rsp]
; Line 359
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2408				; 00000968H
	pop	rdi
	pop	rsi
	ret	0
?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z ENDP ; AlistarEstablishConnection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z PROC ; AlistarObliterateConnection
; File W:\cpp\void\alistar\alistar.c
; Line 305
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 306
	mov	rax, QWORD PTR ctx$[rsp]
	mov	edx, 777				; 00000309H
	mov	rcx, rax
	call	?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z ; ZenTerminateSystemProcessForcefully
; Line 307
	add	rsp, 40					; 00000028H
	ret	0
?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z ENDP ; AlistarObliterateConnection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
tv88 = 56
tv69 = 64
$T1 = 72
$T2 = 96
$T3 = 128
conn$ = 192
user$ = 200
?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z PROC ; AlistarOnSocketConnectionClosed
; File W:\cpp\void\alistar\alistar.c
; Line 295
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 297
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR ctx$[rsp], rax
; Line 298
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1244], 771		; 00000303H
; Line 300
	mov	DWORD PTR [rsp+32], 186			; 000000baH
	mov	r9d, 300				; 0000012cH
	lea	r8, OFFSET FLAT:$SG173287
	lea	rdx, OFFSET FLAT:$SG173288
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	mov	rcx, QWORD PTR ctx$[rsp]
	add	rcx, 96					; 00000060H
	mov	QWORD PTR tv69[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv88[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv88[rsp]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8, rax
	mov	rax, QWORD PTR tv69[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z ; AliQueueEventAndNotifyAll_
; Line 301
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AlistarOnSocketConnectionClosed@@YAXPEBUmg_connection@@PEAX@Z ENDP ; AlistarOnSocketConnectionClosed
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
tv128 = 56
tv76 = 64
$T1 = 72
$T2 = 96
$T3 = 128
conn$ = 192
flags$ = 200
data$ = 208
size$ = 216
user$ = 224
?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z PROC ; AlistarOnSocketDataReceived
; File W:\cpp\void\alistar\alistar.c
; Line 277
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 279
	lea	r8, OFFSET FLAT:$SG173277
	mov	rdx, QWORD PTR data$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	call	?WriteFileData@@YAIIPEAXPEBD@Z		; WriteFileData
; Line 284
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR ctx$[rsp], rax
; Line 285
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+1244], 771		; 00000303H
; Line 287
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	mov	r8, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, rax
	call	?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z ; ParseResponse
; Line 289
	mov	DWORD PTR [rsp+32], 185			; 000000b9H
	mov	r9d, 289				; 00000121H
	lea	r8, OFFSET FLAT:$SG173278
	lea	rdx, OFFSET FLAT:$SG173279
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	mov	rcx, QWORD PTR ctx$[rsp]
	add	rcx, 96					; 00000060H
	mov	QWORD PTR tv76[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv128[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv128[rsp]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8, rax
	mov	rax, QWORD PTR tv76[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z ; AliQueueEventAndNotifyAll_
; Line 290
	mov	eax, 1
; Line 291
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AlistarOnSocketDataReceived@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z ENDP ; AlistarOnSocketDataReceived
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 48
cmdl$ = 64
dlls$ = 336
exec$ = 608
__$ArrayPad$ = 880
__$ReturnAddress$ = 912
inst$ = 920
arch64$ = 928
addr$ = 936
port$ = 944
?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z PROC	; LaunchStarcraftProcess
; File W:\cpp\void\alistar\alistar.c
; Line 492
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 896				; 00000380H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 499
	lea	r9, QWORD PTR dlls$[rsp]
	lea	r8, QWORD PTR exec$[rsp]
	mov	edx, DWORD PTR arch64$[rsp]
	mov	rcx, QWORD PTR inst$[rsp]
	call	?FindStarcraftExecutableAndDllsDirectory@@YAHPEBDHPEAD1@Z ; FindStarcraftExecutableAndDllsDirectory
	mov	DWORD PTR res$[rsp], eax
; Line 504
	cmp	DWORD PTR res$[rsp], 0
	jne	SHORT $LN2@LaunchStar
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	xor	eax, eax
	mov	ecx, 72					; 00000048H
	rep stosb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@LaunchStar
$LN2@LaunchStar:
; Line 506
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR addr$[rsp]
	lea	r8, OFFSET FLAT:$SG173449
	mov	edx, 260				; 00000104H
	lea	rcx, QWORD PTR cmdl$[rsp]
	call	sprintf_s
; Line 512
	lea	r9, QWORD PTR cmdl$[rsp]
	lea	r8, QWORD PTR dlls$[rsp]
	lea	rdx, QWORD PTR exec$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z ; ZenLaunchSystemProcess
	mov	DWORD PTR res$[rsp], eax
; Line 514
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@LaunchStar:
; Line 515
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 896				; 00000380H
	pop	rdi
	ret	0
?LaunchStarcraftProcess@@YA?AU_PROCESS@@PEBDH0H@Z ENDP	; LaunchStarcraftProcess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file_size$ = 32
file_data$ = 40
que$ = 48
$T1 = 96
$T2 = 128
tex$3 = 160
$T4 = 192
res$5 = 224
ctx$ = 1392
?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z PROC	; AlistarCreateContext
; File W:\cpp\void\alistar\alistar.c
; Line 228
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1368				; 00000558H
	mov	r8d, 1496				; 000005d8H
	xor	edx, edx
	mov	rcx, QWORD PTR ctx$[rsp]
	call	memset
; Line 246
	xor	edx, edx
	xor	ecx, ecx
	call	?ZenCreateNativeMutex@@YAPEAXHPEBD@Z	; ZenCreateNativeMutex
	mov	QWORD PTR que$[rsp+24], rax
; Line 247
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z	; ZenCreateNativeEvent
	mov	QWORD PTR que$[rsp+32], rax
; Line 248
	mov	QWORD PTR que$[rsp], 4096		; 00001000H
; Line 249
	mov	QWORD PTR que$[rsp+8], 0
; Line 250
	imul	rax, QWORD PTR que$[rsp], 1128		; 00000468H
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR que$[rsp+16], rax
; Line 251
	mov	rax, QWORD PTR ctx$[rsp]
	lea	rcx, QWORD PTR que$[rsp]
	lea	rdi, QWORD PTR [rax+96]
	mov	rsi, rcx
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 255
	lea	rdx, OFFSET FLAT:$SG173258
	lea	rcx, QWORD PTR file_size$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR file_data$[rsp], rax
; Line 257
	cmp	QWORD PTR file_data$[rsp], 0
	je	$LN2@AlistarCre
; Line 260
	mov	eax, DWORD PTR file_size$[rsp]
	mov	r8, QWORD PTR file_data$[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR res$5[rsp]
	call	?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z ; ParseResponse
; Line 263
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR res$5[rsp+1040]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	lea	rdx, OFFSET FLAT:?Zen@@3UZenCore@@A
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z ; AliConvertTexture
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR tex$3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 265
	lea	rdx, OFFSET FLAT:$SG173260
	lea	rcx, QWORD PTR tex$3[rsp]
	call	?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ; ZenWriteTextureToFile
$LN2@AlistarCre:
; Line 269
	mov	eax, 1
; Line 270
	add	rsp, 1368				; 00000558H
	pop	rdi
	pop	rsi
	ret	0
?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z ENDP	; AlistarCreateContext
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
Caller$ = 128
Queue$ = 136
Value$ = 144
Type$ = 152
?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z PROC ; AwaitResponseOfType_
; File W:\cpp\void\alistar\alistar.c
; Line 189
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 190
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR Type$[rsp]
	mov	r8, QWORD PTR Value$[rsp]
	mov	rdx, QWORD PTR Queue$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AliDequeueEventOfTypeAndNotifyAll_
	test	eax, eax
	jne	SHORT $LN2@AwaitRespo
; Line 191
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	?ZenConsumeNativeEvent@@YAHPEAX@Z	; ZenConsumeNativeEvent
; Line 192
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR Type$[rsp]
	mov	r8, QWORD PTR Value$[rsp]
	mov	rdx, QWORD PTR Queue$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ; AliDequeueEventOfTypeAndNotifyAll_
	jmp	SHORT $LN1@AwaitRespo
$LN2@AwaitRespo:
; Line 195
	mov	eax, 1
$LN1@AwaitRespo:
; Line 196
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?AwaitResponseOfType_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ENDP ; AwaitResponseOfType_
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
Write$1 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Caller$ = 192
Queue$ = 200
Value$ = 208
?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z PROC ; AliQueueEventAndNotifyAll_
; File W:\cpp\void\alistar\alistar.c
; Line 154
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 156
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ZenAcquireNativeMutex@@YAHPEAX@Z	; ZenAcquireNativeMutex
	test	eax, eax
	je	$LN2@AliQueueEv
; Line 158
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+8], rcx
	jge	SHORT $LN3@AliQueueEv
; Line 160
	mov	rax, QWORD PTR Queue$[rsp]
	imul	rax, QWORD PTR [rax+8], 1128		; 00000468H
	mov	rcx, QWORD PTR Queue$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR tv79[rsp], rax
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rax, QWORD PTR [rax+8]
	inc	rax
	mov	rcx, QWORD PTR Queue$[rsp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR tv79[rsp]
	mov	QWORD PTR Write$1[rsp], rax
; Line 161
	mov	rdi, QWORD PTR Write$1[rsp]
	mov	rsi, QWORD PTR Value$[rsp]
	mov	ecx, 1128				; 00000468H
	rep movsb
; Line 162
	jmp	SHORT $LN4@AliQueueEv
$LN3@AliQueueEv:
; Line 164
	mov	DWORD PTR [rsp+32], 184			; 000000b8H
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:$SG173220
	lea	rdx, OFFSET FLAT:$SG173221
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG173219
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@AliQueueEv:
; Line 167
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z ; ZenReleaseNativeMutexEnsured
; Line 168
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	?ZenProduceNativeEvent@@YAHPEAX@Z	; ZenProduceNativeEvent
; Line 169
	mov	eax, 1
	jmp	SHORT $LN1@AliQueueEv
$LN2@AliQueueEv:
; Line 171
	xor	eax, eax
$LN1@AliQueueEv:
; Line 172
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AliQueueEventAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@@Z ENDP ; AliQueueEventAndNotifyAll_
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Success$ = 32
This$1 = 40
Last$2 = 48
Caller$ = 96
Queue$ = 104
Value$ = 112
Type$ = 120
?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z PROC ; AliDequeueEventOfTypeAndNotifyAll_
; File W:\cpp\void\alistar\alistar.c
; Line 98
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 100
	mov	DWORD PTR Success$[rsp], 0
; Line 101
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ZenAcquireNativeMutex@@YAHPEAX@Z	; ZenAcquireNativeMutex
	test	eax, eax
	je	$LN5@AliDequeue
; Line 102
	mov	rax, QWORD PTR Queue$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	$LN6@AliDequeue
; Line 104
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR This$1[rsp], rax
; Line 105
	mov	rax, QWORD PTR Queue$[rsp]
	imul	rax, QWORD PTR [rax+8], 1128		; 00000468H
	mov	rcx, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax-1128]
	mov	QWORD PTR Last$2[rsp], rax
; Line 106
	jmp	SHORT $LN4@AliDequeue
$LN2@AliDequeue:
	mov	rax, QWORD PTR This$1[rsp]
	add	rax, 1128				; 00000468H
	mov	QWORD PTR This$1[rsp], rax
$LN4@AliDequeue:
	mov	rax, QWORD PTR Last$2[rsp]
	cmp	QWORD PTR This$1[rsp], rax
	ja	SHORT $LN3@AliDequeue
; Line 107
	mov	rax, QWORD PTR This$1[rsp]
	mov	ecx, DWORD PTR Type$[rsp]
	cmp	DWORD PTR [rax+1108], ecx
	jne	SHORT $LN8@AliDequeue
; Line 108
	mov	rdi, QWORD PTR Value$[rsp]
	mov	rsi, QWORD PTR This$1[rsp]
	mov	ecx, 1128				; 00000468H
	rep movsb
; Line 109
	mov	rax, QWORD PTR Last$2[rsp]
	cmp	QWORD PTR This$1[rsp], rax
	je	SHORT $LN9@AliDequeue
; Line 110
	mov	rdi, QWORD PTR This$1[rsp]
	mov	rsi, QWORD PTR Last$2[rsp]
	mov	ecx, 1128				; 00000468H
	rep movsb
$LN9@AliDequeue:
; Line 112
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rax, QWORD PTR [rax+8]
	dec	rax
	mov	rcx, QWORD PTR Queue$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 113
	mov	DWORD PTR Success$[rsp], 1
; Line 114
	jmp	SHORT $LN3@AliDequeue
$LN8@AliDequeue:
; Line 116
	jmp	SHORT $LN2@AliDequeue
$LN3@AliDequeue:
; Line 117
	jmp	SHORT $LN7@AliDequeue
$LN6@AliDequeue:
; Line 120
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	?ZenResetNativeEvent@@YAHPEAX@Z		; ZenResetNativeEvent
$LN7@AliDequeue:
; Line 122
	mov	rax, QWORD PTR Queue$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z ; ZenReleaseNativeMutexEnsured
$LN5@AliDequeue:
; Line 124
	mov	eax, DWORD PTR Success$[rsp]
; Line 125
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?AliDequeueEventOfTypeAndNotifyAll_@@YAHUZenCaller@@PEAUAlistarQueue@@PEAUResponse@@H@Z ENDP ; AliDequeueEventOfTypeAndNotifyAll_
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$1 = 48
loc$2 = 56
cur$3 = 64
loc$4 = 72
end$5 = 80
end$6 = 88
$T7 = 96
$T8 = 128
$T9 = 160
$T10 = 192
$T11 = 224
$T12 = 256
__$ReturnAddress$ = 320
Core$ = 328
data$ = 336
?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z PROC ; AliConvertTexture
; File W:\cpp\void\alistar\alistar.c
; Line 39
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 40
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
; Line 41
	mov	rax, QWORD PTR data$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	$LN8@AliConvert
; Line 42
	mov	rax, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	mov	r8d, 1
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ; ZenCoreCreateSoftTextureForThisFrame
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 45
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR loc$4[rsp], rax
; Line 46
	mov	rax, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rax+4]
	imul	eax, DWORD PTR [rcx+8]
	sar	eax, 3
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR end$5[rsp], rax
; Line 47
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR cur$3[rsp], rax
	jmp	SHORT $LN4@AliConvert
$LN2@AliConvert:
	mov	rax, QWORD PTR cur$3[rsp]
	inc	rax
	mov	QWORD PTR cur$3[rsp], rax
$LN4@AliConvert:
	mov	rax, QWORD PTR end$5[rsp]
	cmp	QWORD PTR cur$3[rsp], rax
	jae	SHORT $LN3@AliConvert
; Line 48
	mov	rax, QWORD PTR cur$3[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR loc$4[rsp]
	call	?BitsToBytes@@YAHPEAEH@Z		; BitsToBytes
	cdqe
	mov	rcx, QWORD PTR loc$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR loc$4[rsp], rax
; Line 49
	jmp	SHORT $LN2@AliConvert
$LN3@AliConvert:
; Line 50
	jmp	$LN9@AliConvert
$LN8@AliConvert:
; Line 51
	mov	rax, QWORD PTR data$[rsp]
	cmp	DWORD PTR [rax], 8
	jne	SHORT $LN10@AliConvert
; Line 52
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	mov	r8d, 1
	mov	edx, 3
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ; ZenUnboundTexture
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 53
	jmp	$LN11@AliConvert
$LN10@AliConvert:
; Line 54
	mov	rax, QWORD PTR data$[rsp]
	cmp	DWORD PTR [rax], 24
	jne	$LN12@AliConvert
; Line 55
	mov	rax, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	mov	r8d, 4
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ; ZenCoreCreateSoftTextureForThisFrame
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 58
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR loc$2[rsp], rax
; Line 60
	mov	rax, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rax+4]
	imul	eax, DWORD PTR [rcx+8]
	imul	eax, eax, 3
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR end$6[rsp], rax
; Line 62
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR cur$1[rsp], rax
	jmp	SHORT $LN7@AliConvert
$LN5@AliConvert:
	mov	rax, QWORD PTR cur$1[rsp]
	add	rax, 3
	mov	QWORD PTR cur$1[rsp], rax
	mov	rax, QWORD PTR loc$2[rsp]
	add	rax, 4
	mov	QWORD PTR loc$2[rsp], rax
$LN7@AliConvert:
	mov	rax, QWORD PTR end$6[rsp]
	cmp	QWORD PTR cur$1[rsp], rax
	jae	$LN6@AliConvert
; Line 63
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR loc$2[rsp]
	mov	rdi, QWORD PTR cur$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 64
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR loc$2[rsp]
	mov	rdi, QWORD PTR cur$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 65
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR loc$2[rsp]
	mov	rdi, QWORD PTR cur$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 66
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR loc$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 67
	jmp	$LN5@AliConvert
$LN6@AliConvert:
$LN12@AliConvert:
$LN11@AliConvert:
$LN9@AliConvert:
; Line 70
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 71
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?AliConvertTexture@@YA?AUZenTexture@@PEAUZenCore@@UImageData@@@Z ENDP ; AliConvertTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 48
Memory$ = 56
$T1 = 64
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 168
__$ReturnAddress$ = 240
Core$ = 248
Format$ = 256
DimenX$ = 264
DimenY$ = 272
?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z PROC ; ZenCoreCreateSoftTextureForThisFrame
; File W:\cpp\void\alistar\alistar.c
; Line 30
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	DWORD PTR [rsp+32], 181			; 000000b5H
	mov	r9d, 30
	lea	r8, OFFSET FLAT:$SG173136
	lea	rdx, OFFSET FLAT:$SG173137
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR DimenY$[rsp]
	mov	edx, DWORD PTR DimenX$[rsp]
	mov	ecx, DWORD PTR Format$[rsp]
	call	?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z ; ZenComputeTrimmedSizeForTexture
	mov	DWORD PTR tv81[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR tv81[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugFrameAlloc
	mov	QWORD PTR Memory$[rsp], rax
; Line 31
	mov	rax, QWORD PTR Memory$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR DimenY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR DimenX$[rsp]
	mov	r8d, DWORD PTR Format$[rsp]
	mov	edx, 12
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ; ZenUnboundTexture
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 33
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z ; ZenZeroTextureMemory
; Line 34
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 35
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreCreateSoftTextureForThisFrame@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ENDP ; ZenCoreCreateSoftTextureForThisFrame
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bytes$ = 8
bits$ = 16
?BitsToBytes@@YAHPEAEH@Z PROC				; BitsToBytes
; File W:\cpp\void\alistar\alistar.c
; Line 19
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 128				; 00000080H
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 8
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 20
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 64					; 00000040H
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 4
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 21
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 32					; 00000020H
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 2
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 22
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 16
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR bits$[rsp]
	and	eax, 1
	imul	eax, eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR bytes$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 23
	mov	eax, 8
; Line 24
	ret	0
?BitsToBytes@@YAHPEAEH@Z ENDP				; BitsToBytes
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 48
tv165 = 52
$T1 = 56
$T2 = 80
$T3 = 112
$T4 = 144
read$ = 176
__$ArrayPad$ = 848
info$ = 896
size$ = 904
data$ = 912
?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z PROC		; ParseResponse
; File W:\cpp\void\alistar\alistar.h
; Line 1056
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 872				; 00000368H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r8d, 1128				; 00000468H
	xor	edx, edx
	mov	rcx, QWORD PTR info$[rsp]
	call	memset
; Line 1057
	lea	rax, QWORD PTR read$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 672				; 000002a0H
	rep stosb
; Line 1058
	mov	r8, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR size$[rsp]
	lea	rcx, QWORD PTR read$[rsp]
	call	?Apportion@@YAXPEAUxstate@@_KPEBX@Z	; Apportion
; Line 1060
	lea	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	lea	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseRespo
	lea	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv80[rsp], eax
	mov	eax, DWORD PTR tv80[rsp]
	dec	eax
	mov	DWORD PTR tv80[rsp], eax
	cmp	DWORD PTR tv80[rsp], 98			; 00000062H
	ja	$LN16@ParseRespo
	movsxd	rax, DWORD PTR tv80[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN18@ParseRespo[rcx+rax]
	mov	eax, DWORD PTR $LN19@ParseRespo[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@ParseRespo:
; Line 1061
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 1104				; 00000450H
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	$LN4@ParseRespo
$LN7@ParseRespo:
; Line 1062
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 1120				; 00000460H
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
	jmp	$LN4@ParseRespo
$LN8@ParseRespo:
; Line 1063
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 1112				; 00000458H
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParseRespo
$LN9@ParseRespo:
; Line 1065
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z ; ParseResponseCreateGame
; Line 1066
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 1
; Line 1067
	jmp	$LN4@ParseRespo
$LN10@ParseRespo:
; Line 1069
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z ; ParseResponseJoinGame
; Line 1070
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 2
; Line 1071
	jmp	$LN4@ParseRespo
$LN11@ParseRespo:
; Line 1073
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z ; ParseResponseGameInfo
; Line 1074
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 9
; Line 1075
	jmp	$LN4@ParseRespo
$LN12@ParseRespo:
; Line 1077
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z ; ParseResponseAvailableMaps
; Line 1078
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 17
; Line 1079
	jmp	$LN4@ParseRespo
$LN13@ParseRespo:
; Line 1081
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z ; ParseResponseObservation
; Line 1082
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 10
; Line 1083
	jmp	$LN4@ParseRespo
$LN14@ParseRespo:
; Line 1085
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z ; ParseResponseAction
; Line 1086
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 11
; Line 1087
	jmp	$LN4@ParseRespo
$LN15@ParseRespo:
; Line 1089
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z ; ParseResponseQuery
; Line 1090
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+1108], 14
; Line 1091
	jmp	$LN4@ParseRespo
$LN16@ParseRespo:
; Line 1093
	mov	DWORD PTR [rsp+32], 180			; 000000b4H
	mov	r9d, 1093				; 00000445H
	lea	r8, OFFSET FLAT:$SG172550
	lea	rdx, OFFSET FLAT:$SG172551
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv165[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR tv165[rsp]
	lea	r8, OFFSET FLAT:$SG172549
	mov	edx, 4
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ParseRespo:
; Line 1095
	jmp	$LN2@ParseRespo
$LN3@ParseRespo:
; Line 1096
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 872				; 00000368H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN19@ParseRespo:
	DD	$LN9@ParseRespo
	DD	$LN10@ParseRespo
	DD	$LN11@ParseRespo
	DD	$LN13@ParseRespo
	DD	$LN14@ParseRespo
	DD	$LN15@ParseRespo
	DD	$LN12@ParseRespo
	DD	$LN8@ParseRespo
	DD	$LN7@ParseRespo
	DD	$LN6@ParseRespo
	DD	$LN16@ParseRespo
$LN18@ParseRespo:
	DB	0
	DB	1
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	2
	DB	3
	DB	4
	DB	10
	DB	10
	DB	5
	DB	10
	DB	10
	DB	6
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	7
	DB	8
	DB	9
?ParseResponse@@YAXPEAUResponse@@_KPEBX@Z ENDP		; ParseResponse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 48
tv87 = 56
result$1 = 64
tv92 = 72
tv160 = 80
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
read$ = 240
val$ = 248
?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z PROC ; ParseResponseAction
; File W:\cpp\void\alistar\alistar.h
; Line 1024
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 1025
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	jmp	$LN4@ParseRespo
$LN6@ParseRespo:
; Line 1029
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN8@ParseRespo
	mov	QWORD PTR tv92[rsp], 0
	jmp	SHORT $LN9@ParseRespo
$LN8@ParseRespo:
	mov	r8d, 4
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv87[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv87[rsp]
	mov	QWORD PTR tv92[rsp], rax
$LN9@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR result$1[rsp], rax
; Line 1031
	mov	rdx, QWORD PTR result$1[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
; Line 1033
	mov	DWORD PTR [rsp+32], 179			; 000000b3H
	mov	r9d, 1033				; 00000409H
	lea	r8, OFFSET FLAT:$SG172492
	lea	rdx, OFFSET FLAT:$SG172493
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR result$1[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z ; AlistarActionResultW
	mov	QWORD PTR tv160[rsp], rax
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv160[rsp]
	lea	r8, OFFSET FLAT:$SG172491
	mov	edx, 2
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ParseRespo:
; Line 1036
	jmp	$LN2@ParseRespo
$LN3@ParseRespo:
; Line 1037
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?ParseResponseAction@@YAXPEAUxstate@@PEAUResponseAction@@@Z ENDP ; ParseResponseAction
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 48
tv280 = 52
tv87 = 56
tv158 = 64
tv200 = 72
tv239 = 80
tv92 = 88
tv163 = 96
tv205 = 104
tv244 = 112
$T1 = 120
$T2 = 144
$T3 = 176
$T4 = 208
read$ = 272
val$ = 280
?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z PROC ; ParseResponseObservation
; File W:\cpp\void\alistar\alistar.h
; Line 1010
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	r8d, 1104				; 00000450H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 1011
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	cmp	DWORD PTR tv73[rsp], 2
	je	$LN7@ParseRespo
	cmp	DWORD PTR tv73[rsp], 3
	je	$LN8@ParseRespo
	cmp	DWORD PTR tv73[rsp], 4
	je	$LN9@ParseRespo
	cmp	DWORD PTR tv73[rsp], 5
	je	$LN10@ParseRespo
	jmp	$LN11@ParseRespo
$LN6@ParseRespo:
; Line 1012
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN13@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN13@ParseRespo
	mov	QWORD PTR tv92[rsp], 0
	jmp	SHORT $LN14@ParseRespo
$LN13@ParseRespo:
	mov	r8d, 64					; 00000040H
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv87[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv87[rsp]
	mov	QWORD PTR tv92[rsp], rax
$LN14@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z ; ParseAction
	jmp	$LN4@ParseRespo
$LN7@ParseRespo:
; Line 1013
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN15@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN15@ParseRespo
	mov	QWORD PTR tv163[rsp], 0
	jmp	SHORT $LN16@ParseRespo
$LN15@ParseRespo:
	mov	r8d, 24
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv158[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv158[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR tv158[rsp]
	mov	QWORD PTR tv163[rsp], rax
$LN16@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 24
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z ; ParseErrorAction
	jmp	$LN4@ParseRespo
$LN8@ParseRespo:
; Line 1014
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z ; ParseObservation
	jmp	$LN4@ParseRespo
$LN9@ParseRespo:
; Line 1015
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+1088], 0
	je	SHORT $LN17@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+1088]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+1088]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN17@ParseRespo
	mov	QWORD PTR tv205[rsp], 0
	jmp	SHORT $LN18@ParseRespo
$LN17@ParseRespo:
	mov	r8d, 8
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+1088]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv200[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv200[rsp]
	mov	QWORD PTR [rax+1088], rcx
	mov	rax, QWORD PTR tv200[rsp]
	mov	QWORD PTR tv205[rsp], rax
$LN18@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+1088]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+1088]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+1088]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+1088]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z ; ParsePlayerResult
	jmp	$LN4@ParseRespo
$LN10@ParseRespo:
; Line 1016
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+1096], 0
	je	SHORT $LN19@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+1096]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+1096]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN19@ParseRespo
	mov	QWORD PTR tv244[rsp], 0
	jmp	SHORT $LN20@ParseRespo
$LN19@ParseRespo:
	mov	r8d, 16
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+1096]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv239[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv239[rsp]
	mov	QWORD PTR [rax+1096], rcx
	mov	rax, QWORD PTR tv239[rsp]
	mov	QWORD PTR tv244[rsp], rax
$LN20@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+1096]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+1096]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+1096]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx+1096]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z ; ParseChatReceived
	jmp	$LN4@ParseRespo
$LN11@ParseRespo:
; Line 1018
	mov	DWORD PTR [rsp+32], 178			; 000000b2H
	mov	r9d, 1018				; 000003faH
	lea	r8, OFFSET FLAT:$SG172469
	lea	rdx, OFFSET FLAT:$SG172470
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv280[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR tv280[rsp]
	lea	r8, OFFSET FLAT:$SG172468
	mov	edx, 4
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ParseRespo:
; Line 1020
	jmp	$LN2@ParseRespo
$LN3@ParseRespo:
; Line 1021
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ParseResponseObservation@@YAXPEAUxstate@@PEAUResponseObservation@@@Z ENDP ; ParseResponseObservation
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv94 = 40
tv131 = 48
read$ = 80
val$ = 88
?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z PROC ; ParseObservation
; File W:\cpp\void\alistar\alistar.h
; Line 991
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	r8d, 1072				; 00000430H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 992
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseObser:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseObser
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 9
	ja	$LN4@ParseObser
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN15@ParseObser[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@ParseObser:
; Line 993
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParseObser
$LN7@ParseObser:
; Line 994
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z ; ParsePlayerCommon
	jmp	$LN4@ParseObser
$LN8@ParseObser:
; Line 995
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN13@ParseObser
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN13@ParseObser
	mov	QWORD PTR tv131[rsp], 0
	jmp	SHORT $LN14@ParseObser
$LN13@ParseObser:
	mov	r8d, 4
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+48]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv94[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv94[rsp]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR tv94[rsp]
	mov	QWORD PTR tv131[rsp], rax
$LN14@ParseObser:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+48]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParseObser
$LN9@ParseObser:
; Line 996
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 56					; 00000038H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z ; ParseObservationRaw
	jmp	SHORT $LN4@ParseObser
$LN10@ParseObser:
; Line 997
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 112				; 00000070H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z ; AliParseObservationFeatureLayer
	jmp	SHORT $LN4@ParseObser
$LN11@ParseObser:
; Line 998
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 1024				; 00000400H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z ; AliParseObservationRender
$LN4@ParseObser:
; Line 999
	jmp	$LN2@ParseObser
$LN3@ParseObser:
; Line 1000
	add	rsp, 72					; 00000048H
	ret	0
$LN15@ParseObser:
	DD	$LN7@ParseObser
	DD	$LN4@ParseObser
	DD	$LN4@ParseObser
	DD	$LN4@ParseObser
	DD	$LN9@ParseObser
	DD	$LN10@ParseObser
	DD	$LN11@ParseObser
	DD	$LN4@ParseObser
	DD	$LN6@ParseObser
	DD	$LN8@ParseObser
?ParseObservation@@YAXPEAUxstate@@PEAUObservation@@@Z ENDP ; ParseObservation
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z PROC ; AliParseObservationRender
; File W:\cpp\void\alistar\alistar.h
; Line 975
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 976
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@AliParseOb:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@AliParseOb
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@AliParseOb
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@AliParseOb
	jmp	SHORT $LN4@AliParseOb
$LN6@AliParseOb:
; Line 977
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseOb
$LN7@AliParseOb:
; Line 978
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
$LN4@AliParseOb:
; Line 979
	jmp	SHORT $LN2@AliParseOb
$LN3@AliParseOb:
; Line 980
	add	rsp, 56					; 00000038H
	ret	0
?AliParseObservationRender@@YAXPEAUxstate@@PEAUObservationRender@@@Z ENDP ; AliParseObservationRender
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv90 = 40
tv95 = 48
read$ = 80
val$ = 88
?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z PROC ; ParseObservationRaw
; File W:\cpp\void\alistar\alistar.h
; Line 963
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	r8d, 56					; 00000038H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 964
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseObser:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseObser
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseObser
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN6@ParseObser
	jmp	$LN4@ParseObser
$LN6@ParseObser:
; Line 965
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z ; ParseMapState
	jmp	$LN4@ParseObser
$LN7@ParseObser:
; Line 966
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN9@ParseObser
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN9@ParseObser
	mov	QWORD PTR tv95[rsp], 0
	jmp	SHORT $LN10@ParseObser
$LN9@ParseObser:
	mov	r8d, 216				; 000000d8H
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv90[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv90[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv90[rsp]
	mov	QWORD PTR tv95[rsp], rax
$LN10@ParseObser:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 216				; 000000d8H
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z	; ParseUnit
$LN4@ParseObser:
; Line 967
	jmp	$LN2@ParseObser
$LN3@ParseObser:
; Line 968
	add	rsp, 72					; 00000048H
	ret	0
?ParseObservationRaw@@YAXPEAUxstate@@PEAUObservationRaw@@@Z ENDP ; ParseObservationRaw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z PROC	; ParseMapState
; File W:\cpp\void\alistar\alistar.h
; Line 955
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 956
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseMapSt:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseMapSt
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseMapSt
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseMapSt
	jmp	SHORT $LN4@ParseMapSt
$LN6@ParseMapSt:
; Line 957
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@ParseMapSt
$LN7@ParseMapSt:
; Line 958
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
$LN4@ParseMapSt:
; Line 959
	jmp	SHORT $LN2@ParseMapSt
$LN3@ParseMapSt:
; Line 960
	add	rsp, 56					; 00000038H
	ret	0
?ParseMapState@@YAXPEAUxstate@@PEAUMapState@@@Z ENDP	; ParseMapState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z PROC ; ParsePlayerResult
; File W:\cpp\void\alistar\alistar.h
; Line 947
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 948
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParsePlaye:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParsePlaye
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParsePlaye
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParsePlaye
	jmp	SHORT $LN4@ParsePlaye
$LN6@ParsePlaye:
; Line 949
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePlaye
$LN7@ParsePlaye:
; Line 950
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
$LN4@ParsePlaye:
; Line 951
	jmp	SHORT $LN2@ParsePlaye
$LN3@ParsePlaye:
; Line 952
	add	rsp, 56					; 00000038H
	ret	0
?ParsePlayerResult@@YAXPEAUxstate@@PEAUPlayerResult@@@Z ENDP ; ParsePlayerResult
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv240 = 40
tv278 = 48
tv245 = 56
tv283 = 64
read$ = 96
val$ = 104
?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z PROC		; ParseUnit
; File W:\cpp\void\alistar\alistar.h
; Line 897
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, 216				; 000000d8H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 898
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseUnit:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseUnit
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 43			; 0000002bH
	ja	$LN4@ParseUnit
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN53@ParseUnit[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@ParseUnit:
; Line 899
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN7@ParseUnit:
; Line 900
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN8@ParseUnit:
; Line 901
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN9@ParseUnit:
; Line 902
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 12
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN10@ParseUnit:
; Line 903
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN11@ParseUnit:
; Line 904
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 20
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN12@ParseUnit:
; Line 905
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN13@ParseUnit:
; Line 906
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 28
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN14@ParseUnit:
; Line 907
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN15@ParseUnit:
; Line 908
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 36					; 00000024H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN16@ParseUnit:
; Line 909
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 40					; 00000028H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN17@ParseUnit:
; Line 910
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 44					; 0000002cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	$LN4@ParseUnit
$LN18@ParseUnit:
; Line 911
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 48					; 00000030H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	$LN4@ParseUnit
$LN19@ParseUnit:
; Line 912
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 56					; 00000038H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	$LN4@ParseUnit
$LN20@ParseUnit:
; Line 913
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 64					; 00000040H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	$LN4@ParseUnit
$LN21@ParseUnit:
; Line 914
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 72					; 00000048H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN22@ParseUnit:
; Line 915
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 76					; 0000004cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN23@ParseUnit:
; Line 916
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 80					; 00000050H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN24@ParseUnit:
; Line 917
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 84					; 00000054H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN25@ParseUnit:
; Line 918
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 88					; 00000058H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN26@ParseUnit:
; Line 919
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 92					; 0000005cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN27@ParseUnit:
; Line 920
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN28@ParseUnit:
; Line 921
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 100				; 00000064H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN29@ParseUnit:
; Line 922
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 104				; 00000068H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN30@ParseUnit:
; Line 923
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 108				; 0000006cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN31@ParseUnit:
; Line 924
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 112				; 00000070H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN32@ParseUnit:
; Line 925
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 116				; 00000074H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN33@ParseUnit:
; Line 926
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 120				; 00000078H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN34@ParseUnit:
; Line 927
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 124				; 0000007cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN35@ParseUnit:
; Line 928
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 128				; 00000080H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN36@ParseUnit:
; Line 929
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 132				; 00000084H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN37@ParseUnit:
; Line 930
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 136				; 00000088H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN38@ParseUnit:
; Line 931
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 140				; 0000008cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN39@ParseUnit:
; Line 932
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 144				; 00000090H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN40@ParseUnit:
; Line 933
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 148				; 00000094H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN41@ParseUnit:
; Line 934
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 152				; 00000098H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN42@ParseUnit:
; Line 935
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 156				; 0000009cH
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	$LN4@ParseUnit
$LN43@ParseUnit:
; Line 936
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 160				; 000000a0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	$LN4@ParseUnit
$LN44@ParseUnit:
; Line 937
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 164				; 000000a4H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	$LN4@ParseUnit
$LN45@ParseUnit:
; Line 938
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 168				; 000000a8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z ; ParsePoint3D
	jmp	$LN4@ParseUnit
$LN46@ParseUnit:
; Line 939
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+184], 0
	je	SHORT $LN49@ParseUnit
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+184]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN49@ParseUnit
	mov	QWORD PTR tv245[rsp], 0
	jmp	SHORT $LN50@ParseUnit
$LN49@ParseUnit:
	mov	r8d, 4
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+184]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv240[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv240[rsp]
	mov	QWORD PTR [rax+184], rcx
	mov	rax, QWORD PTR tv240[rsp]
	mov	QWORD PTR tv245[rsp], rax
$LN50@ParseUnit:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+184]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+184]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+184]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+184]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParseUnit
$LN47@ParseUnit:
; Line 940
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+192], 0
	je	SHORT $LN51@ParseUnit
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN51@ParseUnit
	mov	QWORD PTR tv283[rsp], 0
	jmp	SHORT $LN52@ParseUnit
$LN51@ParseUnit:
	mov	r8d, 32					; 00000020H
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+192]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv278[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv278[rsp]
	mov	QWORD PTR [rax+192], rcx
	mov	rax, QWORD PTR tv278[rsp]
	mov	QWORD PTR tv283[rsp], rax
$LN52@ParseUnit:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+192]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z ; ParseUnitOrder
$LN4@ParseUnit:
; Line 943
	jmp	$LN2@ParseUnit
$LN3@ParseUnit:
; Line 944
	add	rsp, 88					; 00000058H
	ret	0
$LN53@ParseUnit:
	DD	$LN43@ParseUnit
	DD	$LN44@ParseUnit
	DD	$LN18@ParseUnit
	DD	$LN21@ParseUnit
	DD	$LN33@ParseUnit
	DD	$LN45@ParseUnit
	DD	$LN6@ParseUnit
	DD	$LN7@ParseUnit
	DD	$LN8@ParseUnit
	DD	$LN42@ParseUnit
	DD	$LN37@ParseUnit
	DD	$LN38@ParseUnit
	DD	$LN39@ParseUnit
	DD	$LN11@ParseUnit
	DD	$LN12@ParseUnit
	DD	$LN13@ParseUnit
	DD	$LN15@ParseUnit
	DD	$LN25@ParseUnit
	DD	$LN26@ParseUnit
	DD	$LN34@ParseUnit
	DD	$LN35@ParseUnit
	DD	$LN47@ParseUnit
	DD	$LN19@ParseUnit
	DD	$LN4@ParseUnit
	DD	$LN27@ParseUnit
	DD	$LN28@ParseUnit
	DD	$LN46@ParseUnit
	DD	$LN29@ParseUnit
	DD	$LN30@ParseUnit
	DD	$LN17@ParseUnit
	DD	$LN9@ParseUnit
	DD	$LN10@ParseUnit
	DD	$LN4@ParseUnit
	DD	$LN20@ParseUnit
	DD	$LN40@ParseUnit
	DD	$LN14@ParseUnit
	DD	$LN16@ParseUnit
	DD	$LN36@ParseUnit
	DD	$LN41@ParseUnit
	DD	$LN22@ParseUnit
	DD	$LN23@ParseUnit
	DD	$LN24@ParseUnit
	DD	$LN31@ParseUnit
	DD	$LN32@ParseUnit
?ParseUnit@@YAXPEAUxstate@@PEAUUnit@@@Z ENDP		; ParseUnit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z PROC	; ParseUnitOrder
; File W:\cpp\void\alistar\alistar.h
; Line 887
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 888
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseUnitO:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseUnitO
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseUnitO
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseUnitO
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN8@ParseUnitO
	cmp	DWORD PTR tv73[rsp], 4
	je	SHORT $LN9@ParseUnitO
	jmp	SHORT $LN4@ParseUnitO
$LN6@ParseUnitO:
; Line 889
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParseUnitO
$LN7@ParseUnitO:
; Line 890
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z ; ParsePoint3D
	jmp	SHORT $LN4@ParseUnitO
$LN8@ParseUnitO:
; Line 891
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	SHORT $LN4@ParseUnitO
$LN9@ParseUnitO:
; Line 892
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
$LN4@ParseUnitO:
; Line 893
	jmp	$LN2@ParseUnitO
$LN3@ParseUnitO:
; Line 894
	add	rsp, 56					; 00000038H
	ret	0
?ParseUnitOrder@@YAXPEAUxstate@@PEAUUnitOrder@@@Z ENDP	; ParseUnitOrder
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z PROC ; ParseChatReceived
; File W:\cpp\void\alistar\alistar.h
; Line 879
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 880
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseChatR:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseChatR
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseChatR
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseChatR
	jmp	SHORT $LN4@ParseChatR
$LN6@ParseChatR:
; Line 881
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParseChatR
$LN7@ParseChatR:
; Line 882
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParseChatR:
; Line 883
	jmp	SHORT $LN2@ParseChatR
$LN3@ParseChatR:
; Line 884
	add	rsp, 56					; 00000038H
	ret	0
?ParseChatReceived@@YAXPEAUxstate@@PEAUChatReceived@@@Z ENDP ; ParseChatReceived
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z PROC ; ParseErrorAction
; File W:\cpp\void\alistar\alistar.h
; Line 870
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 871
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseError:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseError
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseError
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseError
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN8@ParseError
	jmp	SHORT $LN4@ParseError
$LN6@ParseError:
; Line 872
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	SHORT $LN4@ParseError
$LN7@ParseError:
; Line 873
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	SHORT $LN4@ParseError
$LN8@ParseError:
; Line 874
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
$LN4@ParseError:
; Line 875
	jmp	SHORT $LN2@ParseError
$LN3@ParseError:
; Line 876
	add	rsp, 56					; 00000038H
	ret	0
?ParseErrorAction@@YAXPEAUxstate@@PEAUErrorAction@@@Z ENDP ; ParseErrorAction
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
map$ = 40
tv87 = 48
tv162 = 56
tv92 = 64
tv167 = 72
read$ = 96
val$ = 104
?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z PROC ; ParseResponseAvailableMaps
; File W:\cpp\void\alistar\alistar.h
; Line 851
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 852
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 853
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	cmp	DWORD PTR tv73[rsp], 2
	je	$LN7@ParseRespo
	jmp	$LN4@ParseRespo
$LN6@ParseRespo:
; Line 855
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN9@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN9@ParseRespo
	mov	QWORD PTR tv92[rsp], 0
	jmp	SHORT $LN10@ParseRespo
$LN9@ParseRespo:
	mov	r8d, 16
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv87[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv87[rsp]
	mov	QWORD PTR tv92[rsp], rax
$LN10@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR map$[rsp], rax
; Line 856
	mov	rax, QWORD PTR map$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR map$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 858
	mov	rax, QWORD PTR map$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
; Line 859
	jmp	$LN4@ParseRespo
$LN7@ParseRespo:
; Line 861
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN11@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN11@ParseRespo
	mov	QWORD PTR tv167[rsp], 0
	jmp	SHORT $LN12@ParseRespo
$LN11@ParseRespo:
	mov	r8d, 16
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv162[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv162[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv162[rsp]
	mov	QWORD PTR tv167[rsp], rax
$LN12@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR map$[rsp], rax
; Line 862
	mov	rax, QWORD PTR map$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR map$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 864
	mov	rax, QWORD PTR map$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParseRespo:
; Line 866
	jmp	$LN2@ParseRespo
$LN3@ParseRespo:
; Line 867
	add	rsp, 88					; 00000058H
	ret	0
?ParseResponseAvailableMaps@@YAXPEAUxstate@@PEAUResponseAvailableMaps@@@Z ENDP ; ParseResponseAvailableMaps
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
map$ = 40
tv87 = 48
tv162 = 56
tv205 = 64
tv248 = 72
tv92 = 80
tv167 = 88
tv210 = 96
tv253 = 104
read$ = 128
val$ = 136
?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z PROC ; ParseResponseGameInfo
; File W:\cpp\void\alistar\alistar.h
; Line 827
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 828
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 829
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	cmp	DWORD PTR tv73[rsp], 2
	je	$LN7@ParseRespo
	cmp	DWORD PTR tv73[rsp], 3
	je	$LN8@ParseRespo
	cmp	DWORD PTR tv73[rsp], 4
	je	$LN9@ParseRespo
	cmp	DWORD PTR tv73[rsp], 6
	je	$LN10@ParseRespo
	jmp	$LN4@ParseRespo
$LN6@ParseRespo:
; Line 831
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN12@ParseRespo
	mov	QWORD PTR tv92[rsp], 0
	jmp	SHORT $LN13@ParseRespo
$LN12@ParseRespo:
	mov	r8d, 16
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv87[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv87[rsp]
	mov	QWORD PTR tv92[rsp], rax
$LN13@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR map$[rsp], rax
; Line 832
	mov	rax, QWORD PTR map$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR map$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 834
	mov	rax, QWORD PTR map$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
; Line 835
	jmp	$LN4@ParseRespo
; Line 836
	jmp	$LN4@ParseRespo
$LN7@ParseRespo:
; Line 838
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN14@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN14@ParseRespo
	mov	QWORD PTR tv167[rsp], 0
	jmp	SHORT $LN15@ParseRespo
$LN14@ParseRespo:
	mov	r8d, 16
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv162[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv162[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv162[rsp]
	mov	QWORD PTR tv167[rsp], rax
$LN15@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR map$[rsp], rax
; Line 839
	mov	rax, QWORD PTR map$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR map$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 841
	mov	rax, QWORD PTR map$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
; Line 842
	jmp	$LN4@ParseRespo
; Line 843
	jmp	$LN4@ParseRespo
$LN8@ParseRespo:
; Line 844
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN16@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN16@ParseRespo
	mov	QWORD PTR tv210[rsp], 0
	jmp	SHORT $LN17@ParseRespo
$LN16@ParseRespo:
	mov	r8d, 32					; 00000020H
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv205[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv205[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR tv205[rsp]
	mov	QWORD PTR tv210[rsp], rax
$LN17@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z ; ParsePlayerInfo
	jmp	$LN4@ParseRespo
$LN9@ParseRespo:
; Line 845
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z ; ParseStartRaw
	jmp	$LN4@ParseRespo
$LN10@ParseRespo:
; Line 846
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN18@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN18@ParseRespo
	mov	QWORD PTR tv253[rsp], 0
	jmp	SHORT $LN19@ParseRespo
$LN18@ParseRespo:
	mov	r8d, 8
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv248[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv248[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR tv248[rsp]
	mov	QWORD PTR tv253[rsp], rax
$LN19@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParseRespo:
; Line 847
	jmp	$LN2@ParseRespo
$LN3@ParseRespo:
; Line 848
	add	rsp, 120				; 00000078H
	ret	0
?ParseResponseGameInfo@@YAXPEAUxstate@@PEAUResponseGameInfo@@@Z ENDP ; ParseResponseGameInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv134 = 40
tv139 = 48
read$ = 80
val$ = 88
?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z PROC	; ParseStartRaw
; File W:\cpp\void\alistar\alistar.h
; Line 815
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	r8d, 104				; 00000068H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 816
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseStart:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseStart
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 5
	ja	$LN4@ParseStart
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN15@ParseStart[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@ParseStart:
; Line 817
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ; ParseSize2DI
	jmp	$LN4@ParseStart
$LN7@ParseStart:
; Line 818
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@ParseStart
$LN8@ParseStart:
; Line 819
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@ParseStart
$LN9@ParseStart:
; Line 820
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 56					; 00000038H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@ParseStart
$LN10@ParseStart:
; Line 821
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 80					; 00000050H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z ; ParseRectangleI
	jmp	$LN4@ParseStart
$LN11@ParseStart:
; Line 822
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+96], 0
	je	SHORT $LN13@ParseStart
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN13@ParseStart
	mov	QWORD PTR tv139[rsp], 0
	jmp	SHORT $LN14@ParseStart
$LN13@ParseStart:
	mov	r8d, 8
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+96]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv134[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv134[rsp]
	mov	QWORD PTR [rax+96], rcx
	mov	rax, QWORD PTR tv134[rsp]
	mov	QWORD PTR tv139[rsp], rax
$LN14@ParseStart:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+96]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z ; ParsePoint2D
$LN4@ParseStart:
; Line 823
	jmp	$LN2@ParseStart
$LN3@ParseStart:
; Line 824
	add	rsp, 72					; 00000048H
	ret	0
	npad	1
$LN15@ParseStart:
	DD	$LN6@ParseStart
	DD	$LN7@ParseStart
	DD	$LN8@ParseStart
	DD	$LN9@ParseStart
	DD	$LN10@ParseStart
	DD	$LN11@ParseStart
?ParseStartRaw@@YAXPEAUxstate@@PEAUStartRaw@@@Z ENDP	; ParseStartRaw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z PROC ; ParsePlayerCommon
; File W:\cpp\void\alistar\alistar.h
; Line 798
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 44					; 0000002cH
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 799
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParsePlaye:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParsePlaye
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 10
	ja	$LN4@ParsePlaye
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN18@ParsePlaye[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@ParsePlaye:
; Line 800
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParsePlaye
$LN7@ParsePlaye:
; Line 801
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParsePlaye
$LN8@ParsePlaye:
; Line 802
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParsePlaye
$LN9@ParsePlaye:
; Line 803
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 12
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParsePlaye
$LN10@ParsePlaye:
; Line 804
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParsePlaye
$LN11@ParsePlaye:
; Line 805
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 20
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePlaye
$LN12@ParsePlaye:
; Line 806
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePlaye
$LN13@ParsePlaye:
; Line 807
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 28
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePlaye
$LN14@ParsePlaye:
; Line 808
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePlaye
$LN15@ParsePlaye:
; Line 809
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 36					; 00000024H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePlaye
$LN16@ParsePlaye:
; Line 810
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 40					; 00000028H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
$LN4@ParsePlaye:
; Line 811
	jmp	$LN2@ParsePlaye
$LN3@ParsePlaye:
; Line 812
	add	rsp, 56					; 00000038H
	ret	0
	npad	2
$LN18@ParsePlaye:
	DD	$LN6@ParsePlaye
	DD	$LN7@ParsePlaye
	DD	$LN8@ParsePlaye
	DD	$LN9@ParsePlaye
	DD	$LN10@ParsePlaye
	DD	$LN11@ParsePlaye
	DD	$LN12@ParsePlaye
	DD	$LN13@ParsePlaye
	DD	$LN14@ParsePlaye
	DD	$LN15@ParsePlaye
	DD	$LN16@ParsePlaye
?ParsePlayerCommon@@YAXPEAUxstate@@PEAUPlayerCommon@@@Z ENDP ; ParsePlayerCommon
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z PROC ; ParseResponseJoinGame
; File W:\cpp\void\alistar\alistar.h
; Line 789
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 790
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseRespo
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN8@ParseRespo
	jmp	SHORT $LN4@ParseRespo
$LN6@ParseRespo:
; Line 791
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParseRespo
$LN7@ParseRespo:
; Line 792
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParseRespo
$LN8@ParseRespo:
; Line 793
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParseRespo:
; Line 794
	jmp	SHORT $LN2@ParseRespo
$LN3@ParseRespo:
; Line 795
	add	rsp, 56					; 00000038H
	ret	0
?ParseResponseJoinGame@@YAXPEAUxstate@@PEAUResponseJoinGame@@@Z ENDP ; ParseResponseJoinGame
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z PROC ; ParseResponseCreateGame
; File W:\cpp\void\alistar\alistar.h
; Line 781
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 782
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseRespo
	jmp	SHORT $LN4@ParseRespo
$LN6@ParseRespo:
; Line 783
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParseRespo
$LN7@ParseRespo:
; Line 784
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParseRespo:
; Line 785
	jmp	SHORT $LN2@ParseRespo
$LN3@ParseRespo:
; Line 786
	add	rsp, 56					; 00000038H
	ret	0
?ParseResponseCreateGame@@YAXPEAUxstate@@PEAUResponseCreateGame@@@Z ENDP ; ParseResponseCreateGame
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z PROC ; ParsePlayerInfo
; File W:\cpp\void\alistar\alistar.h
; Line 768
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 769
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParsePlaye:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParsePlaye
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 6
	ja	$LN4@ParsePlaye
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN14@ParsePlaye[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@ParsePlaye:
; Line 770
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 20
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	$LN4@ParsePlaye
$LN7@ParsePlaye:
; Line 771
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParsePlaye
$LN8@ParsePlaye:
; Line 772
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParsePlaye
$LN9@ParsePlaye:
; Line 773
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 12
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParsePlaye
$LN10@ParsePlaye:
; Line 774
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParsePlaye
$LN11@ParsePlaye:
; Line 775
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParsePlaye
$LN12@ParsePlaye:
; Line 776
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParsePlaye:
; Line 777
	jmp	$LN2@ParsePlaye
$LN3@ParsePlaye:
; Line 778
	add	rsp, 56					; 00000038H
	ret	0
	npad	2
$LN14@ParsePlaye:
	DD	$LN6@ParsePlaye
	DD	$LN7@ParsePlaye
	DD	$LN8@ParsePlaye
	DD	$LN9@ParsePlaye
	DD	$LN10@ParsePlaye
	DD	$LN12@ParsePlaye
	DD	$LN11@ParsePlaye
?ParsePlayerInfo@@YAXPEAUxstate@@PEAUPlayerInfo@@@Z ENDP ; ParsePlayerInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z PROC	; ParseRequest
; File W:\cpp\void\alistar\alistar.h
; Line 760
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 761
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseReque:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseReque
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 11
	je	SHORT $LN6@ParseReque
	jmp	SHORT $LN4@ParseReque
$LN6@ParseReque:
; Line 762
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z ; ParseRequestAction
$LN4@ParseReque:
; Line 763
	jmp	SHORT $LN2@ParseReque
$LN3@ParseReque:
; Line 764
	add	rsp, 56					; 00000038H
	ret	0
?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z ENDP	; ParseRequest
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv87 = 40
tv92 = 48
read$ = 80
val$ = 88
?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z PROC ; ParseRequestAction
; File W:\cpp\void\alistar\alistar.h
; Line 753
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 754
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseReque:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseReque
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseReque
	jmp	$LN4@ParseReque
$LN6@ParseReque:
; Line 755
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@ParseReque
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN8@ParseReque
	mov	QWORD PTR tv92[rsp], 0
	jmp	SHORT $LN9@ParseReque
$LN8@ParseReque:
	mov	r8d, 64					; 00000040H
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv87[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv87[rsp]
	mov	QWORD PTR tv92[rsp], rax
$LN9@ParseReque:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z ; ParseAction
$LN4@ParseReque:
; Line 756
	jmp	$LN2@ParseReque
$LN3@ParseReque:
; Line 757
	add	rsp, 72					; 00000048H
	ret	0
?ParseRequestAction@@YAXPEAUxstate@@PEAURequestAction@@@Z ENDP ; ParseRequestAction
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z PROC	; ParseAction
; File W:\cpp\void\alistar\alistar.h
; Line 741
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 64					; 00000040H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 742
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseActio:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseActio
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseActio
	cmp	DWORD PTR tv73[rsp], 6
	je	SHORT $LN7@ParseActio
	cmp	DWORD PTR tv73[rsp], 7
	je	SHORT $LN8@ParseActio
	jmp	SHORT $LN4@ParseActio
$LN6@ParseActio:
; Line 743
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z ; ParseActionRaw
	jmp	SHORT $LN4@ParseActio
$LN7@ParseActio:
; Line 747
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 40					; 00000028H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z ; ParseActionChat
	jmp	SHORT $LN4@ParseActio
$LN8@ParseActio:
; Line 748
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 56					; 00000038H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
$LN4@ParseActio:
; Line 749
	jmp	SHORT $LN2@ParseActio
$LN3@ParseActio:
; Line 750
	add	rsp, 56					; 00000038H
	ret	0
?ParseAction@@YAXPEAUxstate@@PEAUAction@@@Z ENDP	; ParseAction
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z PROC	; ParseActionRaw
; File W:\cpp\void\alistar\alistar.h
; Line 734
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 735
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseActio:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseActio
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseActio
	jmp	SHORT $LN4@ParseActio
$LN6@ParseActio:
; Line 736
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z ; ParseActionRawUnitCommand
$LN4@ParseActio:
; Line 737
	jmp	SHORT $LN2@ParseActio
$LN3@ParseActio:
; Line 738
	add	rsp, 56					; 00000038H
	ret	0
?ParseActionRaw@@YAXPEAUxstate@@PEAUActionRaw@@@Z ENDP	; ParseActionRaw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv129 = 40
tv134 = 48
read$ = 80
val$ = 88
?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z PROC ; ParseActionRawUnitCommand
; File W:\cpp\void\alistar\alistar.h
; Line 723
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 724
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseActio:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseActio
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseActio
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseActio
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN8@ParseActio
	cmp	DWORD PTR tv73[rsp], 4
	je	SHORT $LN9@ParseActio
	cmp	DWORD PTR tv73[rsp], 5
	je	$LN10@ParseActio
	jmp	$LN4@ParseActio
$LN6@ParseActio:
; Line 725
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
	jmp	$LN4@ParseActio
$LN7@ParseActio:
; Line 726
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z ; ParsePoint2D
	jmp	$LN4@ParseActio
$LN8@ParseActio:
; Line 727
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	$LN4@ParseActio
$LN9@ParseActio:
; Line 728
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN12@ParseActio
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN12@ParseActio
	mov	QWORD PTR tv134[rsp], 0
	jmp	SHORT $LN13@ParseActio
$LN12@ParseActio:
	mov	r8d, 8
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv129[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv129[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR tv129[rsp]
	mov	QWORD PTR tv134[rsp], rax
$LN13@ParseActio:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	jmp	SHORT $LN4@ParseActio
$LN10@ParseActio:
; Line 729
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 28
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAH@Z	; GetVarintValue
$LN4@ParseActio:
; Line 730
	jmp	$LN2@ParseActio
$LN3@ParseActio:
; Line 731
	add	rsp, 72					; 00000048H
	ret	0
?ParseActionRawUnitCommand@@YAXPEAUxstate@@PEAUActionRawUnitCommand@@@Z ENDP ; ParseActionRawUnitCommand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z PROC ; ParseActionChat
; File W:\cpp\void\alistar\alistar.h
; Line 715
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 716
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseActio:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseActio
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseActio
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseActio
	jmp	SHORT $LN4@ParseActio
$LN6@ParseActio:
; Line 717
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
	jmp	SHORT $LN4@ParseActio
$LN7@ParseActio:
; Line 718
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ; GetStringValue
$LN4@ParseActio:
; Line 719
	jmp	SHORT $LN2@ParseActio
$LN3@ParseActio:
; Line 720
	add	rsp, 56					; 00000038H
	ret	0
?ParseActionChat@@YAXPEAUxstate@@PEAUActionChat@@@Z ENDP ; ParseActionChat
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv87 = 40
tv158 = 48
tv92 = 56
tv163 = 64
read$ = 96
val$ = 104
?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z PROC ; ParseResponseQuery
; File W:\cpp\void\alistar\alistar.h
; Line 706
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 707
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	cmp	DWORD PTR tv73[rsp], 3
	je	$LN7@ParseRespo
	jmp	$LN4@ParseRespo
$LN6@ParseRespo:
; Line 708
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN9@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN9@ParseRespo
	mov	QWORD PTR tv92[rsp], 0
	jmp	SHORT $LN10@ParseRespo
$LN9@ParseRespo:
	mov	r8d, 4
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv87[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv87[rsp]
	mov	QWORD PTR tv92[rsp], rax
$LN10@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z ; ParseResponseQueryPathing
	jmp	$LN4@ParseRespo
$LN7@ParseRespo:
; Line 709
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN11@ParseRespo
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN11@ParseRespo
	mov	QWORD PTR tv163[rsp], 0
	jmp	SHORT $LN12@ParseRespo
$LN11@ParseRespo:
	mov	r8d, 4
	mov	edx, 1
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv158[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR tv158[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR tv158[rsp]
	mov	QWORD PTR tv163[rsp], rax
$LN12@ParseRespo:
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR val$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z ; ParseResponseQueryBuildingPlacement
$LN4@ParseRespo:
; Line 710
	jmp	$LN2@ParseRespo
$LN3@ParseRespo:
; Line 711
	add	rsp, 88					; 00000058H
	ret	0
?ParseResponseQuery@@YAXPEAUxstate@@PEAUResponseQuery@@@Z ENDP ; ParseResponseQuery
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z PROC ; ParseResponseQueryBuildingPlacement
; File W:\cpp\void\alistar\alistar.h
; Line 699
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 4
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 700
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	jmp	SHORT $LN4@ParseRespo
$LN6@ParseRespo:
; Line 701
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetEnumValue@@YAHPEAUxstate@@PEAX@Z	; GetEnumValue
$LN4@ParseRespo:
; Line 702
	jmp	SHORT $LN2@ParseRespo
$LN3@ParseRespo:
; Line 703
	add	rsp, 56					; 00000038H
	ret	0
?ParseResponseQueryBuildingPlacement@@YAXPEAUxstate@@PEAUResponseQueryBuildingPlacement@@@Z ENDP ; ParseResponseQueryBuildingPlacement
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z PROC ; ParseResponseQueryPathing
; File W:\cpp\void\alistar\alistar.h
; Line 691
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 4
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 692
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRespo:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseRespo
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRespo
	jmp	SHORT $LN4@ParseRespo
$LN6@ParseRespo:
; Line 693
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
$LN4@ParseRespo:
; Line 694
	jmp	SHORT $LN2@ParseRespo
$LN3@ParseRespo:
; Line 695
	add	rsp, 56					; 00000038H
	ret	0
?ParseResponseQueryPathing@@YAXPEAUxstate@@PEAUResponseQueryPathing@@@Z ENDP ; ParseResponseQueryPathing
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 112
$T4 = 176
__$ReturnAddress$ = 272
?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ PROC	; CreateDefaultInterfaceOptions
; File W:\cpp\void\alistar\alistar.h
; Line 645
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	DWORD PTR [rax], 6
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	add	rax, 4
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 646
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 647
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 649
	mov	DWORD PTR $T1[rsp], 512			; 00000200H
	mov	DWORD PTR $T1[rsp+4], 512		; 00000200H
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	movss	xmm2, DWORD PTR __real@41000000
	mov	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z ; AliCameraSetupValueNoMinimap
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 652
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 653
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ ENDP	; CreateDefaultInterfaceOptions
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
$T3 = 160
__$ReturnAddress$ = 256
resolution$ = 264
width$ = 272
crop_to_playable_area$ = 280
allow_cheating_layers$ = 288
?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z PROC ; AliCameraSetupValueNoMinimap
; File W:\cpp\void\alistar\alistar.h
; Line 619
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 620
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	DWORD PTR [rax], 6
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	add	rax, 4
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 621
	mov	rdx, QWORD PTR resolution$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z	; ValueSize2DI
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T2[rsp]
	mov	edx, 2
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 622
	movss	xmm2, DWORD PTR width$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z ; AddFloat32Value
; Line 623
	mov	r8d, DWORD PTR crop_to_playable_area$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 624
	mov	r8d, DWORD PTR allow_cheating_layers$[rsp]
	mov	edx, 8
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 625
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 626
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?AliCameraSetupValueNoMinimap@@YA?AUxvalue@@Ui32x2@@MHH@Z ENDP ; AliCameraSetupValueNoMinimap
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 48
val$ = 56
?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z PROC		; ValueSize2DI
; File W:\cpp\void\alistar\alistar.h
; Line 608
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	DWORD PTR [rax], 6
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	add	rax, 4
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 609
	mov	r8d, DWORD PTR val$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 610
	mov	r8d, DWORD PTR val$[rsp+4]
	mov	edx, 2
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 611
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 612
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?ValueSize2DI@@YA?AUxvalue@@Ui32x2@@@Z ENDP		; ValueSize2DI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 48
race$ = 56
diff$ = 64
build$ = 72
name$ = 80
?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z PROC	; CreateComputerPlayerSetup
; File W:\cpp\void\alistar\alistar.h
; Line 590
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 591
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	DWORD PTR [rax], 6
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	add	rax, 4
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 592
	mov	r8d, 2
	mov	edx, 1
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 593
	mov	r8d, DWORD PTR race$[rsp]
	mov	edx, 2
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 594
	mov	r8d, DWORD PTR diff$[rsp]
	mov	edx, 3
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 595
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z ; AddStringValue
; Line 596
	mov	r8d, DWORD PTR build$[rsp]
	mov	edx, 5
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 597
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 598
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z ENDP	; CreateComputerPlayerSetup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 48
name$ = 56
?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z PROC	; CreateParticipantPlayerSetup
; File W:\cpp\void\alistar\alistar.h
; Line 583
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	DWORD PTR [rax], 6
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	add	rax, 4
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 584
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 585
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z ; AddStringValue
; Line 586
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 587
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z ENDP	; CreateParticipantPlayerSetup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
result$ = 32
?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z PROC	; AlistarActionResultW
; File W:\cpp\void\alistar\alistar.h
; Line 1290
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1291
	mov	eax, DWORD PTR result$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	mov	eax, DWORD PTR tv64[rsp]
	dec	eax
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 213		; 000000d5H
	ja	$LN2@AlistarAct
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN219@AlistarAct[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@AlistarAct:
; Line 1300
	lea	rax, OFFSET FLAT:$SG172694
	jmp	$LN1@AlistarAct
$LN5@AlistarAct:
; Line 1301
	lea	rax, OFFSET FLAT:$SG172696
	jmp	$LN1@AlistarAct
$LN6@AlistarAct:
; Line 1302
	lea	rax, OFFSET FLAT:$SG172698
	jmp	$LN1@AlistarAct
$LN7@AlistarAct:
; Line 1303
	lea	rax, OFFSET FLAT:$SG172700
	jmp	$LN1@AlistarAct
$LN8@AlistarAct:
; Line 1304
	lea	rax, OFFSET FLAT:$SG172702
	jmp	$LN1@AlistarAct
$LN9@AlistarAct:
; Line 1305
	lea	rax, OFFSET FLAT:$SG172704
	jmp	$LN1@AlistarAct
$LN10@AlistarAct:
; Line 1306
	lea	rax, OFFSET FLAT:$SG172706
	jmp	$LN1@AlistarAct
$LN11@AlistarAct:
; Line 1307
	lea	rax, OFFSET FLAT:$SG172708
	jmp	$LN1@AlistarAct
$LN12@AlistarAct:
; Line 1308
	lea	rax, OFFSET FLAT:$SG172710
	jmp	$LN1@AlistarAct
$LN13@AlistarAct:
; Line 1309
	lea	rax, OFFSET FLAT:$SG172712
	jmp	$LN1@AlistarAct
$LN14@AlistarAct:
; Line 1310
	lea	rax, OFFSET FLAT:$SG172714
	jmp	$LN1@AlistarAct
$LN15@AlistarAct:
; Line 1311
	lea	rax, OFFSET FLAT:$SG172716
	jmp	$LN1@AlistarAct
$LN16@AlistarAct:
; Line 1312
	lea	rax, OFFSET FLAT:$SG172718
	jmp	$LN1@AlistarAct
$LN17@AlistarAct:
; Line 1313
	lea	rax, OFFSET FLAT:$SG172720
	jmp	$LN1@AlistarAct
$LN18@AlistarAct:
; Line 1314
	lea	rax, OFFSET FLAT:$SG172722
	jmp	$LN1@AlistarAct
$LN19@AlistarAct:
; Line 1315
	lea	rax, OFFSET FLAT:$SG172724
	jmp	$LN1@AlistarAct
$LN20@AlistarAct:
; Line 1316
	lea	rax, OFFSET FLAT:$SG172726
	jmp	$LN1@AlistarAct
$LN21@AlistarAct:
; Line 1317
	lea	rax, OFFSET FLAT:$SG172728
	jmp	$LN1@AlistarAct
$LN22@AlistarAct:
; Line 1318
	lea	rax, OFFSET FLAT:$SG172730
	jmp	$LN1@AlistarAct
$LN23@AlistarAct:
; Line 1319
	lea	rax, OFFSET FLAT:$SG172732
	jmp	$LN1@AlistarAct
$LN24@AlistarAct:
; Line 1320
	lea	rax, OFFSET FLAT:$SG172734
	jmp	$LN1@AlistarAct
$LN25@AlistarAct:
; Line 1321
	lea	rax, OFFSET FLAT:$SG172736
	jmp	$LN1@AlistarAct
$LN26@AlistarAct:
; Line 1322
	lea	rax, OFFSET FLAT:$SG172738
	jmp	$LN1@AlistarAct
$LN27@AlistarAct:
; Line 1323
	lea	rax, OFFSET FLAT:$SG172740
	jmp	$LN1@AlistarAct
$LN28@AlistarAct:
; Line 1324
	lea	rax, OFFSET FLAT:$SG172742
	jmp	$LN1@AlistarAct
$LN29@AlistarAct:
; Line 1325
	lea	rax, OFFSET FLAT:$SG172744
	jmp	$LN1@AlistarAct
$LN30@AlistarAct:
; Line 1326
	lea	rax, OFFSET FLAT:$SG172746
	jmp	$LN1@AlistarAct
$LN31@AlistarAct:
; Line 1327
	lea	rax, OFFSET FLAT:$SG172748
	jmp	$LN1@AlistarAct
$LN32@AlistarAct:
; Line 1328
	lea	rax, OFFSET FLAT:$SG172750
	jmp	$LN1@AlistarAct
$LN33@AlistarAct:
; Line 1329
	lea	rax, OFFSET FLAT:$SG172752
	jmp	$LN1@AlistarAct
$LN34@AlistarAct:
; Line 1330
	lea	rax, OFFSET FLAT:$SG172754
	jmp	$LN1@AlistarAct
$LN35@AlistarAct:
; Line 1331
	lea	rax, OFFSET FLAT:$SG172756
	jmp	$LN1@AlistarAct
$LN36@AlistarAct:
; Line 1332
	lea	rax, OFFSET FLAT:$SG172758
	jmp	$LN1@AlistarAct
$LN37@AlistarAct:
; Line 1333
	lea	rax, OFFSET FLAT:$SG172760
	jmp	$LN1@AlistarAct
$LN38@AlistarAct:
; Line 1334
	lea	rax, OFFSET FLAT:$SG172762
	jmp	$LN1@AlistarAct
$LN39@AlistarAct:
; Line 1335
	lea	rax, OFFSET FLAT:$SG172764
	jmp	$LN1@AlistarAct
$LN40@AlistarAct:
; Line 1336
	lea	rax, OFFSET FLAT:$SG172766
	jmp	$LN1@AlistarAct
$LN41@AlistarAct:
; Line 1337
	lea	rax, OFFSET FLAT:$SG172768
	jmp	$LN1@AlistarAct
$LN42@AlistarAct:
; Line 1338
	lea	rax, OFFSET FLAT:$SG172770
	jmp	$LN1@AlistarAct
$LN43@AlistarAct:
; Line 1339
	lea	rax, OFFSET FLAT:$SG172772
	jmp	$LN1@AlistarAct
$LN44@AlistarAct:
; Line 1340
	lea	rax, OFFSET FLAT:$SG172774
	jmp	$LN1@AlistarAct
$LN45@AlistarAct:
; Line 1341
	lea	rax, OFFSET FLAT:$SG172776
	jmp	$LN1@AlistarAct
$LN46@AlistarAct:
; Line 1342
	lea	rax, OFFSET FLAT:$SG172778
	jmp	$LN1@AlistarAct
$LN47@AlistarAct:
; Line 1343
	lea	rax, OFFSET FLAT:$SG172780
	jmp	$LN1@AlistarAct
$LN48@AlistarAct:
; Line 1344
	lea	rax, OFFSET FLAT:$SG172782
	jmp	$LN1@AlistarAct
$LN49@AlistarAct:
; Line 1345
	lea	rax, OFFSET FLAT:$SG172784
	jmp	$LN1@AlistarAct
$LN50@AlistarAct:
; Line 1346
	lea	rax, OFFSET FLAT:$SG172786
	jmp	$LN1@AlistarAct
$LN51@AlistarAct:
; Line 1347
	lea	rax, OFFSET FLAT:$SG172788
	jmp	$LN1@AlistarAct
$LN52@AlistarAct:
; Line 1348
	lea	rax, OFFSET FLAT:$SG172790
	jmp	$LN1@AlistarAct
$LN53@AlistarAct:
; Line 1349
	lea	rax, OFFSET FLAT:$SG172792
	jmp	$LN1@AlistarAct
$LN54@AlistarAct:
; Line 1350
	lea	rax, OFFSET FLAT:$SG172794
	jmp	$LN1@AlistarAct
$LN55@AlistarAct:
; Line 1351
	lea	rax, OFFSET FLAT:$SG172796
	jmp	$LN1@AlistarAct
$LN56@AlistarAct:
; Line 1352
	lea	rax, OFFSET FLAT:$SG172798
	jmp	$LN1@AlistarAct
$LN57@AlistarAct:
; Line 1353
	lea	rax, OFFSET FLAT:$SG172800
	jmp	$LN1@AlistarAct
$LN58@AlistarAct:
; Line 1354
	lea	rax, OFFSET FLAT:$SG172802
	jmp	$LN1@AlistarAct
$LN59@AlistarAct:
; Line 1355
	lea	rax, OFFSET FLAT:$SG172804
	jmp	$LN1@AlistarAct
$LN60@AlistarAct:
; Line 1356
	lea	rax, OFFSET FLAT:$SG172806
	jmp	$LN1@AlistarAct
$LN61@AlistarAct:
; Line 1357
	lea	rax, OFFSET FLAT:$SG172808
	jmp	$LN1@AlistarAct
$LN62@AlistarAct:
; Line 1358
	lea	rax, OFFSET FLAT:$SG172810
	jmp	$LN1@AlistarAct
$LN63@AlistarAct:
; Line 1359
	lea	rax, OFFSET FLAT:$SG172812
	jmp	$LN1@AlistarAct
$LN64@AlistarAct:
; Line 1360
	lea	rax, OFFSET FLAT:$SG172814
	jmp	$LN1@AlistarAct
$LN65@AlistarAct:
; Line 1361
	lea	rax, OFFSET FLAT:$SG172816
	jmp	$LN1@AlistarAct
$LN66@AlistarAct:
; Line 1362
	lea	rax, OFFSET FLAT:$SG172818
	jmp	$LN1@AlistarAct
$LN67@AlistarAct:
; Line 1363
	lea	rax, OFFSET FLAT:$SG172820
	jmp	$LN1@AlistarAct
$LN68@AlistarAct:
; Line 1364
	lea	rax, OFFSET FLAT:$SG172822
	jmp	$LN1@AlistarAct
$LN69@AlistarAct:
; Line 1365
	lea	rax, OFFSET FLAT:$SG172824
	jmp	$LN1@AlistarAct
$LN70@AlistarAct:
; Line 1366
	lea	rax, OFFSET FLAT:$SG172826
	jmp	$LN1@AlistarAct
$LN71@AlistarAct:
; Line 1367
	lea	rax, OFFSET FLAT:$SG172828
	jmp	$LN1@AlistarAct
$LN72@AlistarAct:
; Line 1368
	lea	rax, OFFSET FLAT:$SG172830
	jmp	$LN1@AlistarAct
$LN73@AlistarAct:
; Line 1369
	lea	rax, OFFSET FLAT:$SG172832
	jmp	$LN1@AlistarAct
$LN74@AlistarAct:
; Line 1370
	lea	rax, OFFSET FLAT:$SG172834
	jmp	$LN1@AlistarAct
$LN75@AlistarAct:
; Line 1371
	lea	rax, OFFSET FLAT:$SG172836
	jmp	$LN1@AlistarAct
$LN76@AlistarAct:
; Line 1372
	lea	rax, OFFSET FLAT:$SG172838
	jmp	$LN1@AlistarAct
$LN77@AlistarAct:
; Line 1373
	lea	rax, OFFSET FLAT:$SG172840
	jmp	$LN1@AlistarAct
$LN78@AlistarAct:
; Line 1374
	lea	rax, OFFSET FLAT:$SG172842
	jmp	$LN1@AlistarAct
$LN79@AlistarAct:
; Line 1375
	lea	rax, OFFSET FLAT:$SG172844
	jmp	$LN1@AlistarAct
$LN80@AlistarAct:
; Line 1376
	lea	rax, OFFSET FLAT:$SG172846
	jmp	$LN1@AlistarAct
$LN81@AlistarAct:
; Line 1377
	lea	rax, OFFSET FLAT:$SG172848
	jmp	$LN1@AlistarAct
$LN82@AlistarAct:
; Line 1378
	lea	rax, OFFSET FLAT:$SG172850
	jmp	$LN1@AlistarAct
$LN83@AlistarAct:
; Line 1379
	lea	rax, OFFSET FLAT:$SG172852
	jmp	$LN1@AlistarAct
$LN84@AlistarAct:
; Line 1380
	lea	rax, OFFSET FLAT:$SG172854
	jmp	$LN1@AlistarAct
$LN85@AlistarAct:
; Line 1381
	lea	rax, OFFSET FLAT:$SG172856
	jmp	$LN1@AlistarAct
$LN86@AlistarAct:
; Line 1382
	lea	rax, OFFSET FLAT:$SG172858
	jmp	$LN1@AlistarAct
$LN87@AlistarAct:
; Line 1383
	lea	rax, OFFSET FLAT:$SG172860
	jmp	$LN1@AlistarAct
$LN88@AlistarAct:
; Line 1384
	lea	rax, OFFSET FLAT:$SG172862
	jmp	$LN1@AlistarAct
$LN89@AlistarAct:
; Line 1385
	lea	rax, OFFSET FLAT:$SG172864
	jmp	$LN1@AlistarAct
$LN90@AlistarAct:
; Line 1386
	lea	rax, OFFSET FLAT:$SG172866
	jmp	$LN1@AlistarAct
$LN91@AlistarAct:
; Line 1387
	lea	rax, OFFSET FLAT:$SG172868
	jmp	$LN1@AlistarAct
$LN92@AlistarAct:
; Line 1388
	lea	rax, OFFSET FLAT:$SG172870
	jmp	$LN1@AlistarAct
$LN93@AlistarAct:
; Line 1389
	lea	rax, OFFSET FLAT:$SG172872
	jmp	$LN1@AlistarAct
$LN94@AlistarAct:
; Line 1390
	lea	rax, OFFSET FLAT:$SG172874
	jmp	$LN1@AlistarAct
$LN95@AlistarAct:
; Line 1391
	lea	rax, OFFSET FLAT:$SG172876
	jmp	$LN1@AlistarAct
$LN96@AlistarAct:
; Line 1392
	lea	rax, OFFSET FLAT:$SG172878
	jmp	$LN1@AlistarAct
$LN97@AlistarAct:
; Line 1393
	lea	rax, OFFSET FLAT:$SG172880
	jmp	$LN1@AlistarAct
$LN98@AlistarAct:
; Line 1394
	lea	rax, OFFSET FLAT:$SG172882
	jmp	$LN1@AlistarAct
$LN99@AlistarAct:
; Line 1395
	lea	rax, OFFSET FLAT:$SG172884
	jmp	$LN1@AlistarAct
$LN100@AlistarAct:
; Line 1396
	lea	rax, OFFSET FLAT:$SG172886
	jmp	$LN1@AlistarAct
$LN101@AlistarAct:
; Line 1397
	lea	rax, OFFSET FLAT:$SG172888
	jmp	$LN1@AlistarAct
$LN102@AlistarAct:
; Line 1398
	lea	rax, OFFSET FLAT:$SG172890
	jmp	$LN1@AlistarAct
$LN103@AlistarAct:
; Line 1399
	lea	rax, OFFSET FLAT:$SG172892
	jmp	$LN1@AlistarAct
$LN104@AlistarAct:
; Line 1400
	lea	rax, OFFSET FLAT:$SG172894
	jmp	$LN1@AlistarAct
$LN105@AlistarAct:
; Line 1401
	lea	rax, OFFSET FLAT:$SG172896
	jmp	$LN1@AlistarAct
$LN106@AlistarAct:
; Line 1402
	lea	rax, OFFSET FLAT:$SG172898
	jmp	$LN1@AlistarAct
$LN107@AlistarAct:
; Line 1403
	lea	rax, OFFSET FLAT:$SG172900
	jmp	$LN1@AlistarAct
$LN108@AlistarAct:
; Line 1404
	lea	rax, OFFSET FLAT:$SG172902
	jmp	$LN1@AlistarAct
$LN109@AlistarAct:
; Line 1405
	lea	rax, OFFSET FLAT:$SG172904
	jmp	$LN1@AlistarAct
$LN110@AlistarAct:
; Line 1406
	lea	rax, OFFSET FLAT:$SG172906
	jmp	$LN1@AlistarAct
$LN111@AlistarAct:
; Line 1407
	lea	rax, OFFSET FLAT:$SG172908
	jmp	$LN1@AlistarAct
$LN112@AlistarAct:
; Line 1408
	lea	rax, OFFSET FLAT:$SG172910
	jmp	$LN1@AlistarAct
$LN113@AlistarAct:
; Line 1409
	lea	rax, OFFSET FLAT:$SG172912
	jmp	$LN1@AlistarAct
$LN114@AlistarAct:
; Line 1410
	lea	rax, OFFSET FLAT:$SG172914
	jmp	$LN1@AlistarAct
$LN115@AlistarAct:
; Line 1411
	lea	rax, OFFSET FLAT:$SG172916
	jmp	$LN1@AlistarAct
$LN116@AlistarAct:
; Line 1412
	lea	rax, OFFSET FLAT:$SG172918
	jmp	$LN1@AlistarAct
$LN117@AlistarAct:
; Line 1413
	lea	rax, OFFSET FLAT:$SG172920
	jmp	$LN1@AlistarAct
$LN118@AlistarAct:
; Line 1414
	lea	rax, OFFSET FLAT:$SG172922
	jmp	$LN1@AlistarAct
$LN119@AlistarAct:
; Line 1415
	lea	rax, OFFSET FLAT:$SG172924
	jmp	$LN1@AlistarAct
$LN120@AlistarAct:
; Line 1416
	lea	rax, OFFSET FLAT:$SG172926
	jmp	$LN1@AlistarAct
$LN121@AlistarAct:
; Line 1417
	lea	rax, OFFSET FLAT:$SG172928
	jmp	$LN1@AlistarAct
$LN122@AlistarAct:
; Line 1418
	lea	rax, OFFSET FLAT:$SG172930
	jmp	$LN1@AlistarAct
$LN123@AlistarAct:
; Line 1419
	lea	rax, OFFSET FLAT:$SG172932
	jmp	$LN1@AlistarAct
$LN124@AlistarAct:
; Line 1420
	lea	rax, OFFSET FLAT:$SG172934
	jmp	$LN1@AlistarAct
$LN125@AlistarAct:
; Line 1421
	lea	rax, OFFSET FLAT:$SG172936
	jmp	$LN1@AlistarAct
$LN126@AlistarAct:
; Line 1422
	lea	rax, OFFSET FLAT:$SG172938
	jmp	$LN1@AlistarAct
$LN127@AlistarAct:
; Line 1423
	lea	rax, OFFSET FLAT:$SG172940
	jmp	$LN1@AlistarAct
$LN128@AlistarAct:
; Line 1424
	lea	rax, OFFSET FLAT:$SG172942
	jmp	$LN1@AlistarAct
$LN129@AlistarAct:
; Line 1425
	lea	rax, OFFSET FLAT:$SG172944
	jmp	$LN1@AlistarAct
$LN130@AlistarAct:
; Line 1426
	lea	rax, OFFSET FLAT:$SG172946
	jmp	$LN1@AlistarAct
$LN131@AlistarAct:
; Line 1427
	lea	rax, OFFSET FLAT:$SG172948
	jmp	$LN1@AlistarAct
$LN132@AlistarAct:
; Line 1428
	lea	rax, OFFSET FLAT:$SG172950
	jmp	$LN1@AlistarAct
$LN133@AlistarAct:
; Line 1429
	lea	rax, OFFSET FLAT:$SG172952
	jmp	$LN1@AlistarAct
$LN134@AlistarAct:
; Line 1430
	lea	rax, OFFSET FLAT:$SG172954
	jmp	$LN1@AlistarAct
$LN135@AlistarAct:
; Line 1431
	lea	rax, OFFSET FLAT:$SG172956
	jmp	$LN1@AlistarAct
$LN136@AlistarAct:
; Line 1432
	lea	rax, OFFSET FLAT:$SG172958
	jmp	$LN1@AlistarAct
$LN137@AlistarAct:
; Line 1433
	lea	rax, OFFSET FLAT:$SG172960
	jmp	$LN1@AlistarAct
$LN138@AlistarAct:
; Line 1434
	lea	rax, OFFSET FLAT:$SG172962
	jmp	$LN1@AlistarAct
$LN139@AlistarAct:
; Line 1435
	lea	rax, OFFSET FLAT:$SG172964
	jmp	$LN1@AlistarAct
$LN140@AlistarAct:
; Line 1436
	lea	rax, OFFSET FLAT:$SG172966
	jmp	$LN1@AlistarAct
$LN141@AlistarAct:
; Line 1437
	lea	rax, OFFSET FLAT:$SG172968
	jmp	$LN1@AlistarAct
$LN142@AlistarAct:
; Line 1438
	lea	rax, OFFSET FLAT:$SG172970
	jmp	$LN1@AlistarAct
$LN143@AlistarAct:
; Line 1439
	lea	rax, OFFSET FLAT:$SG172972
	jmp	$LN1@AlistarAct
$LN144@AlistarAct:
; Line 1440
	lea	rax, OFFSET FLAT:$SG172974
	jmp	$LN1@AlistarAct
$LN145@AlistarAct:
; Line 1441
	lea	rax, OFFSET FLAT:$SG172976
	jmp	$LN1@AlistarAct
$LN146@AlistarAct:
; Line 1442
	lea	rax, OFFSET FLAT:$SG172978
	jmp	$LN1@AlistarAct
$LN147@AlistarAct:
; Line 1443
	lea	rax, OFFSET FLAT:$SG172980
	jmp	$LN1@AlistarAct
$LN148@AlistarAct:
; Line 1444
	lea	rax, OFFSET FLAT:$SG172982
	jmp	$LN1@AlistarAct
$LN149@AlistarAct:
; Line 1445
	lea	rax, OFFSET FLAT:$SG172984
	jmp	$LN1@AlistarAct
$LN150@AlistarAct:
; Line 1446
	lea	rax, OFFSET FLAT:$SG172986
	jmp	$LN1@AlistarAct
$LN151@AlistarAct:
; Line 1447
	lea	rax, OFFSET FLAT:$SG172988
	jmp	$LN1@AlistarAct
$LN152@AlistarAct:
; Line 1448
	lea	rax, OFFSET FLAT:$SG172990
	jmp	$LN1@AlistarAct
$LN153@AlistarAct:
; Line 1449
	lea	rax, OFFSET FLAT:$SG172992
	jmp	$LN1@AlistarAct
$LN154@AlistarAct:
; Line 1450
	lea	rax, OFFSET FLAT:$SG172994
	jmp	$LN1@AlistarAct
$LN155@AlistarAct:
; Line 1451
	lea	rax, OFFSET FLAT:$SG172996
	jmp	$LN1@AlistarAct
$LN156@AlistarAct:
; Line 1452
	lea	rax, OFFSET FLAT:$SG172998
	jmp	$LN1@AlistarAct
$LN157@AlistarAct:
; Line 1453
	lea	rax, OFFSET FLAT:$SG173000
	jmp	$LN1@AlistarAct
$LN158@AlistarAct:
; Line 1454
	lea	rax, OFFSET FLAT:$SG173002
	jmp	$LN1@AlistarAct
$LN159@AlistarAct:
; Line 1455
	lea	rax, OFFSET FLAT:$SG173004
	jmp	$LN1@AlistarAct
$LN160@AlistarAct:
; Line 1456
	lea	rax, OFFSET FLAT:$SG173006
	jmp	$LN1@AlistarAct
$LN161@AlistarAct:
; Line 1457
	lea	rax, OFFSET FLAT:$SG173008
	jmp	$LN1@AlistarAct
$LN162@AlistarAct:
; Line 1458
	lea	rax, OFFSET FLAT:$SG173010
	jmp	$LN1@AlistarAct
$LN163@AlistarAct:
; Line 1459
	lea	rax, OFFSET FLAT:$SG173012
	jmp	$LN1@AlistarAct
$LN164@AlistarAct:
; Line 1460
	lea	rax, OFFSET FLAT:$SG173014
	jmp	$LN1@AlistarAct
$LN165@AlistarAct:
; Line 1461
	lea	rax, OFFSET FLAT:$SG173016
	jmp	$LN1@AlistarAct
$LN166@AlistarAct:
; Line 1462
	lea	rax, OFFSET FLAT:$SG173018
	jmp	$LN1@AlistarAct
$LN167@AlistarAct:
; Line 1463
	lea	rax, OFFSET FLAT:$SG173020
	jmp	$LN1@AlistarAct
$LN168@AlistarAct:
; Line 1464
	lea	rax, OFFSET FLAT:$SG173022
	jmp	$LN1@AlistarAct
$LN169@AlistarAct:
; Line 1465
	lea	rax, OFFSET FLAT:$SG173024
	jmp	$LN1@AlistarAct
$LN170@AlistarAct:
; Line 1466
	lea	rax, OFFSET FLAT:$SG173026
	jmp	$LN1@AlistarAct
$LN171@AlistarAct:
; Line 1467
	lea	rax, OFFSET FLAT:$SG173028
	jmp	$LN1@AlistarAct
$LN172@AlistarAct:
; Line 1468
	lea	rax, OFFSET FLAT:$SG173030
	jmp	$LN1@AlistarAct
$LN173@AlistarAct:
; Line 1469
	lea	rax, OFFSET FLAT:$SG173032
	jmp	$LN1@AlistarAct
$LN174@AlistarAct:
; Line 1470
	lea	rax, OFFSET FLAT:$SG173034
	jmp	$LN1@AlistarAct
$LN175@AlistarAct:
; Line 1471
	lea	rax, OFFSET FLAT:$SG173036
	jmp	$LN1@AlistarAct
$LN176@AlistarAct:
; Line 1472
	lea	rax, OFFSET FLAT:$SG173038
	jmp	$LN1@AlistarAct
$LN177@AlistarAct:
; Line 1473
	lea	rax, OFFSET FLAT:$SG173040
	jmp	$LN1@AlistarAct
$LN178@AlistarAct:
; Line 1474
	lea	rax, OFFSET FLAT:$SG173042
	jmp	$LN1@AlistarAct
$LN179@AlistarAct:
; Line 1475
	lea	rax, OFFSET FLAT:$SG173044
	jmp	$LN1@AlistarAct
$LN180@AlistarAct:
; Line 1476
	lea	rax, OFFSET FLAT:$SG173046
	jmp	$LN1@AlistarAct
$LN181@AlistarAct:
; Line 1477
	lea	rax, OFFSET FLAT:$SG173048
	jmp	$LN1@AlistarAct
$LN182@AlistarAct:
; Line 1478
	lea	rax, OFFSET FLAT:$SG173050
	jmp	$LN1@AlistarAct
$LN183@AlistarAct:
; Line 1479
	lea	rax, OFFSET FLAT:$SG173052
	jmp	$LN1@AlistarAct
$LN184@AlistarAct:
; Line 1480
	lea	rax, OFFSET FLAT:$SG173054
	jmp	$LN1@AlistarAct
$LN185@AlistarAct:
; Line 1481
	lea	rax, OFFSET FLAT:$SG173056
	jmp	$LN1@AlistarAct
$LN186@AlistarAct:
; Line 1482
	lea	rax, OFFSET FLAT:$SG173058
	jmp	$LN1@AlistarAct
$LN187@AlistarAct:
; Line 1483
	lea	rax, OFFSET FLAT:$SG173060
	jmp	$LN1@AlistarAct
$LN188@AlistarAct:
; Line 1484
	lea	rax, OFFSET FLAT:$SG173062
	jmp	$LN1@AlistarAct
$LN189@AlistarAct:
; Line 1485
	lea	rax, OFFSET FLAT:$SG173064
	jmp	$LN1@AlistarAct
$LN190@AlistarAct:
; Line 1486
	lea	rax, OFFSET FLAT:$SG173066
	jmp	$LN1@AlistarAct
$LN191@AlistarAct:
; Line 1487
	lea	rax, OFFSET FLAT:$SG173068
	jmp	$LN1@AlistarAct
$LN192@AlistarAct:
; Line 1488
	lea	rax, OFFSET FLAT:$SG173070
	jmp	$LN1@AlistarAct
$LN193@AlistarAct:
; Line 1489
	lea	rax, OFFSET FLAT:$SG173072
	jmp	$LN1@AlistarAct
$LN194@AlistarAct:
; Line 1490
	lea	rax, OFFSET FLAT:$SG173074
	jmp	$LN1@AlistarAct
$LN195@AlistarAct:
; Line 1491
	lea	rax, OFFSET FLAT:$SG173076
	jmp	$LN1@AlistarAct
$LN196@AlistarAct:
; Line 1492
	lea	rax, OFFSET FLAT:$SG173078
	jmp	$LN1@AlistarAct
$LN197@AlistarAct:
; Line 1493
	lea	rax, OFFSET FLAT:$SG173080
	jmp	$LN1@AlistarAct
$LN198@AlistarAct:
; Line 1494
	lea	rax, OFFSET FLAT:$SG173082
	jmp	$LN1@AlistarAct
$LN199@AlistarAct:
; Line 1495
	lea	rax, OFFSET FLAT:$SG173084
	jmp	$LN1@AlistarAct
$LN200@AlistarAct:
; Line 1496
	lea	rax, OFFSET FLAT:$SG173086
	jmp	$LN1@AlistarAct
$LN201@AlistarAct:
; Line 1497
	lea	rax, OFFSET FLAT:$SG173088
	jmp	$LN1@AlistarAct
$LN202@AlistarAct:
; Line 1498
	lea	rax, OFFSET FLAT:$SG173090
	jmp	$LN1@AlistarAct
$LN203@AlistarAct:
; Line 1499
	lea	rax, OFFSET FLAT:$SG173092
	jmp	$LN1@AlistarAct
$LN204@AlistarAct:
; Line 1500
	lea	rax, OFFSET FLAT:$SG173094
	jmp	SHORT $LN1@AlistarAct
$LN205@AlistarAct:
; Line 1501
	lea	rax, OFFSET FLAT:$SG173096
	jmp	SHORT $LN1@AlistarAct
$LN206@AlistarAct:
; Line 1502
	lea	rax, OFFSET FLAT:$SG173098
	jmp	SHORT $LN1@AlistarAct
$LN207@AlistarAct:
; Line 1503
	lea	rax, OFFSET FLAT:$SG173100
	jmp	SHORT $LN1@AlistarAct
$LN208@AlistarAct:
; Line 1504
	lea	rax, OFFSET FLAT:$SG173102
	jmp	SHORT $LN1@AlistarAct
$LN209@AlistarAct:
; Line 1505
	lea	rax, OFFSET FLAT:$SG173104
	jmp	SHORT $LN1@AlistarAct
$LN210@AlistarAct:
; Line 1506
	lea	rax, OFFSET FLAT:$SG173106
	jmp	SHORT $LN1@AlistarAct
$LN211@AlistarAct:
; Line 1507
	lea	rax, OFFSET FLAT:$SG173108
	jmp	SHORT $LN1@AlistarAct
$LN212@AlistarAct:
; Line 1508
	lea	rax, OFFSET FLAT:$SG173110
	jmp	SHORT $LN1@AlistarAct
$LN213@AlistarAct:
; Line 1509
	lea	rax, OFFSET FLAT:$SG173112
	jmp	SHORT $LN1@AlistarAct
$LN214@AlistarAct:
; Line 1510
	lea	rax, OFFSET FLAT:$SG173114
	jmp	SHORT $LN1@AlistarAct
$LN215@AlistarAct:
; Line 1511
	lea	rax, OFFSET FLAT:$SG173116
	jmp	SHORT $LN1@AlistarAct
$LN216@AlistarAct:
; Line 1512
	lea	rax, OFFSET FLAT:$SG173118
	jmp	SHORT $LN1@AlistarAct
$LN217@AlistarAct:
; Line 1513
	lea	rax, OFFSET FLAT:$SG173120
	jmp	SHORT $LN1@AlistarAct
$LN2@AlistarAct:
; Line 1297
	lea	rax, OFFSET FLAT:$SG173121
$LN1@AlistarAct:
; Line 1298
	add	rsp, 24
	ret	0
	npad	3
$LN219@AlistarAct:
	DD	$LN4@AlistarAct
	DD	$LN5@AlistarAct
	DD	$LN6@AlistarAct
	DD	$LN7@AlistarAct
	DD	$LN8@AlistarAct
	DD	$LN9@AlistarAct
	DD	$LN10@AlistarAct
	DD	$LN11@AlistarAct
	DD	$LN12@AlistarAct
	DD	$LN13@AlistarAct
	DD	$LN14@AlistarAct
	DD	$LN15@AlistarAct
	DD	$LN16@AlistarAct
	DD	$LN17@AlistarAct
	DD	$LN18@AlistarAct
	DD	$LN19@AlistarAct
	DD	$LN20@AlistarAct
	DD	$LN21@AlistarAct
	DD	$LN22@AlistarAct
	DD	$LN23@AlistarAct
	DD	$LN24@AlistarAct
	DD	$LN25@AlistarAct
	DD	$LN26@AlistarAct
	DD	$LN27@AlistarAct
	DD	$LN28@AlistarAct
	DD	$LN29@AlistarAct
	DD	$LN30@AlistarAct
	DD	$LN31@AlistarAct
	DD	$LN32@AlistarAct
	DD	$LN33@AlistarAct
	DD	$LN34@AlistarAct
	DD	$LN35@AlistarAct
	DD	$LN36@AlistarAct
	DD	$LN37@AlistarAct
	DD	$LN38@AlistarAct
	DD	$LN39@AlistarAct
	DD	$LN40@AlistarAct
	DD	$LN41@AlistarAct
	DD	$LN42@AlistarAct
	DD	$LN43@AlistarAct
	DD	$LN44@AlistarAct
	DD	$LN45@AlistarAct
	DD	$LN46@AlistarAct
	DD	$LN47@AlistarAct
	DD	$LN48@AlistarAct
	DD	$LN49@AlistarAct
	DD	$LN50@AlistarAct
	DD	$LN51@AlistarAct
	DD	$LN52@AlistarAct
	DD	$LN53@AlistarAct
	DD	$LN54@AlistarAct
	DD	$LN55@AlistarAct
	DD	$LN56@AlistarAct
	DD	$LN57@AlistarAct
	DD	$LN58@AlistarAct
	DD	$LN59@AlistarAct
	DD	$LN60@AlistarAct
	DD	$LN61@AlistarAct
	DD	$LN62@AlistarAct
	DD	$LN63@AlistarAct
	DD	$LN64@AlistarAct
	DD	$LN65@AlistarAct
	DD	$LN66@AlistarAct
	DD	$LN67@AlistarAct
	DD	$LN68@AlistarAct
	DD	$LN69@AlistarAct
	DD	$LN70@AlistarAct
	DD	$LN71@AlistarAct
	DD	$LN72@AlistarAct
	DD	$LN73@AlistarAct
	DD	$LN74@AlistarAct
	DD	$LN75@AlistarAct
	DD	$LN76@AlistarAct
	DD	$LN77@AlistarAct
	DD	$LN78@AlistarAct
	DD	$LN79@AlistarAct
	DD	$LN80@AlistarAct
	DD	$LN81@AlistarAct
	DD	$LN82@AlistarAct
	DD	$LN83@AlistarAct
	DD	$LN84@AlistarAct
	DD	$LN85@AlistarAct
	DD	$LN86@AlistarAct
	DD	$LN87@AlistarAct
	DD	$LN88@AlistarAct
	DD	$LN89@AlistarAct
	DD	$LN90@AlistarAct
	DD	$LN91@AlistarAct
	DD	$LN92@AlistarAct
	DD	$LN93@AlistarAct
	DD	$LN94@AlistarAct
	DD	$LN95@AlistarAct
	DD	$LN96@AlistarAct
	DD	$LN97@AlistarAct
	DD	$LN98@AlistarAct
	DD	$LN99@AlistarAct
	DD	$LN100@AlistarAct
	DD	$LN101@AlistarAct
	DD	$LN102@AlistarAct
	DD	$LN103@AlistarAct
	DD	$LN104@AlistarAct
	DD	$LN105@AlistarAct
	DD	$LN106@AlistarAct
	DD	$LN107@AlistarAct
	DD	$LN108@AlistarAct
	DD	$LN109@AlistarAct
	DD	$LN110@AlistarAct
	DD	$LN111@AlistarAct
	DD	$LN112@AlistarAct
	DD	$LN113@AlistarAct
	DD	$LN114@AlistarAct
	DD	$LN115@AlistarAct
	DD	$LN116@AlistarAct
	DD	$LN117@AlistarAct
	DD	$LN118@AlistarAct
	DD	$LN119@AlistarAct
	DD	$LN120@AlistarAct
	DD	$LN121@AlistarAct
	DD	$LN122@AlistarAct
	DD	$LN123@AlistarAct
	DD	$LN124@AlistarAct
	DD	$LN125@AlistarAct
	DD	$LN126@AlistarAct
	DD	$LN127@AlistarAct
	DD	$LN128@AlistarAct
	DD	$LN129@AlistarAct
	DD	$LN130@AlistarAct
	DD	$LN131@AlistarAct
	DD	$LN132@AlistarAct
	DD	$LN133@AlistarAct
	DD	$LN134@AlistarAct
	DD	$LN135@AlistarAct
	DD	$LN136@AlistarAct
	DD	$LN137@AlistarAct
	DD	$LN138@AlistarAct
	DD	$LN139@AlistarAct
	DD	$LN140@AlistarAct
	DD	$LN141@AlistarAct
	DD	$LN142@AlistarAct
	DD	$LN143@AlistarAct
	DD	$LN144@AlistarAct
	DD	$LN145@AlistarAct
	DD	$LN146@AlistarAct
	DD	$LN147@AlistarAct
	DD	$LN148@AlistarAct
	DD	$LN149@AlistarAct
	DD	$LN150@AlistarAct
	DD	$LN151@AlistarAct
	DD	$LN152@AlistarAct
	DD	$LN153@AlistarAct
	DD	$LN154@AlistarAct
	DD	$LN155@AlistarAct
	DD	$LN156@AlistarAct
	DD	$LN157@AlistarAct
	DD	$LN158@AlistarAct
	DD	$LN159@AlistarAct
	DD	$LN160@AlistarAct
	DD	$LN161@AlistarAct
	DD	$LN162@AlistarAct
	DD	$LN163@AlistarAct
	DD	$LN164@AlistarAct
	DD	$LN165@AlistarAct
	DD	$LN166@AlistarAct
	DD	$LN167@AlistarAct
	DD	$LN168@AlistarAct
	DD	$LN169@AlistarAct
	DD	$LN170@AlistarAct
	DD	$LN171@AlistarAct
	DD	$LN172@AlistarAct
	DD	$LN173@AlistarAct
	DD	$LN174@AlistarAct
	DD	$LN175@AlistarAct
	DD	$LN176@AlistarAct
	DD	$LN177@AlistarAct
	DD	$LN178@AlistarAct
	DD	$LN179@AlistarAct
	DD	$LN180@AlistarAct
	DD	$LN181@AlistarAct
	DD	$LN182@AlistarAct
	DD	$LN183@AlistarAct
	DD	$LN184@AlistarAct
	DD	$LN185@AlistarAct
	DD	$LN186@AlistarAct
	DD	$LN187@AlistarAct
	DD	$LN188@AlistarAct
	DD	$LN189@AlistarAct
	DD	$LN190@AlistarAct
	DD	$LN191@AlistarAct
	DD	$LN192@AlistarAct
	DD	$LN193@AlistarAct
	DD	$LN194@AlistarAct
	DD	$LN195@AlistarAct
	DD	$LN196@AlistarAct
	DD	$LN197@AlistarAct
	DD	$LN198@AlistarAct
	DD	$LN199@AlistarAct
	DD	$LN200@AlistarAct
	DD	$LN201@AlistarAct
	DD	$LN202@AlistarAct
	DD	$LN203@AlistarAct
	DD	$LN204@AlistarAct
	DD	$LN205@AlistarAct
	DD	$LN206@AlistarAct
	DD	$LN207@AlistarAct
	DD	$LN208@AlistarAct
	DD	$LN209@AlistarAct
	DD	$LN210@AlistarAct
	DD	$LN211@AlistarAct
	DD	$LN212@AlistarAct
	DD	$LN213@AlistarAct
	DD	$LN214@AlistarAct
	DD	$LN215@AlistarAct
	DD	$LN216@AlistarAct
	DD	$LN217@AlistarAct
?AlistarActionResultW@@YAPEB_WW4ActionResult@@@Z ENDP	; AlistarActionResultW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pay$ = 32
$T1 = 88
$T2 = 144
$T3 = 208
ctx$ = 304
race$ = 312
name$ = 320
?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z PROC ; RequestJoinGameAsParticipant
; File W:\cpp\void\alistar\alistar.h
; Line 675
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	mov	DWORD PTR pay$[rsp], 6
	lea	rax, QWORD PTR pay$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 676
	mov	r8d, DWORD PTR race$[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 677
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, 7
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z ; AddStringValue
; Line 678
	lea	rcx, QWORD PTR $T3[rsp]
	call	?CreateDefaultInterfaceOptions@@YA?AUxvalue@@XZ ; CreateDefaultInterfaceOptions
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T2[rsp]
	mov	edx, 3
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 679
	lea	r8, QWORD PTR pay$[rsp]
	mov	edx, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z ; AlistarSendPayload
; Line 680
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?RequestJoinGameAsParticipant@@YAHPEAUAlistarContext@@HPEBD@Z ENDP ; RequestJoinGameAsParticipant
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pay$ = 48
$T1 = 104
$T2 = 160
$T3 = 224
$T4 = 288
$T5 = 352
$T6 = 408
ctx$ = 496
?RequestCreateGame@@YAHPEAUAlistarContext@@@Z PROC	; RequestCreateGame
; File W:\cpp\void\alistar\alistar.h
; Line 666
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 472				; 000001d8H
	mov	DWORD PTR pay$[rsp], 6
	lea	rax, QWORD PTR pay$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 667
	lea	r8, OFFSET FLAT:$SG171900
	mov	edx, 2
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z ; AddStringValue
; Line 668
	mov	r8d, 1
	mov	edx, 6
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 669
	lea	rdx, OFFSET FLAT:$SG171901
	lea	rcx, QWORD PTR $T5[rsp]
	call	?CreateParticipantPlayerSetup@@YA?AUxvalue@@PEBD@Z ; CreateParticipantPlayerSetup
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T2[rsp]
	mov	edx, 3
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 670
	lea	rax, OFFSET FLAT:$SG171902
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5
	mov	r8d, 7
	mov	edx, 2
	lea	rcx, QWORD PTR $T6[rsp]
	call	?CreateComputerPlayerSetup@@YA?AUxvalue@@HHHPEBD@Z ; CreateComputerPlayerSetup
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T4[rsp]
	mov	edx, 3
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 671
	lea	r8, QWORD PTR pay$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z ; AlistarSendPayload
; Line 672
	add	rsp, 472				; 000001d8H
	pop	rdi
	pop	rsi
	ret	0
?RequestCreateGame@@YAHPEAUAlistarContext@@@Z ENDP	; RequestCreateGame
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pay$ = 32
ctx$ = 112
?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z PROC	; RequestAvailableMaps
; File W:\cpp\void\alistar\alistar.h
; Line 661
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	DWORD PTR pay$[rsp], 6
	lea	rax, QWORD PTR pay$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 662
	lea	r8, QWORD PTR pay$[rsp]
	mov	edx, 17
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z ; AlistarSendPayload
; Line 663
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?RequestAvailableMaps@@YAHPEAUAlistarContext@@@Z ENDP	; RequestAvailableMaps
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pay$ = 32
ctx$ = 112
?RequestGameInfo@@YAHPEAUAlistarContext@@@Z PROC	; RequestGameInfo
; File W:\cpp\void\alistar\alistar.h
; Line 656
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	DWORD PTR pay$[rsp], 6
	lea	rax, QWORD PTR pay$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 657
	lea	r8, QWORD PTR pay$[rsp]
	mov	edx, 9
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z ; AlistarSendPayload
; Line 658
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?RequestGameInfo@@YAHPEAUAlistarContext@@@Z ENDP	; RequestGameInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pay$ = 32
ctx$ = 112
disable_fog$ = 120
game_loop$ = 128
?RequestObservation@@YAHPEAUAlistarContext@@HH@Z PROC	; RequestObservation
; File W:\cpp\void\alistar\alistar.h
; Line 683
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	DWORD PTR pay$[rsp], 6
	lea	rax, QWORD PTR pay$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 684
	mov	r8d, DWORD PTR disable_fog$[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR pay$[rsp]
	call	?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ; AddVarint32Value
; Line 686
	lea	r8, QWORD PTR pay$[rsp]
	mov	edx, 10
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z ; AlistarSendPayload
; Line 687
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?RequestObservation@@YAHPEAUAlistarContext@@HH@Z ENDP	; RequestObservation
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z PROC ; AliParseObservationFeatureLayer
; File W:\cpp\void\alistar\alistar.h
; Line 257
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 912				; 00000390H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 258
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@AliParseOb:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@AliParseOb
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@AliParseOb
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@AliParseOb
	jmp	SHORT $LN4@AliParseOb
$LN6@AliParseOb:
; Line 259
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z ; AliParseFeatureLayers
	jmp	SHORT $LN4@AliParseOb
$LN7@AliParseOb:
; Line 260
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 648				; 00000288H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z ; AliParseFeatureLayersMinimap
$LN4@AliParseOb:
; Line 261
	jmp	SHORT $LN2@AliParseOb
$LN3@AliParseOb:
; Line 262
	add	rsp, 56					; 00000038H
	ret	0
?AliParseObservationFeatureLayer@@YAXPEAUxstate@@PEAUObservationFeatureLayer@@@Z ENDP ; AliParseObservationFeatureLayer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z PROC ; AliParseFeatureLayersMinimap
; File W:\cpp\void\alistar\alistar.h
; Line 236
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 264				; 00000108H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 237
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@AliParseFe:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@AliParseFe
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 10
	ja	$LN4@AliParseFe
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN18@AliParseFe[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@AliParseFe:
; Line 238
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN7@AliParseFe:
; Line 239
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN8@AliParseFe:
; Line 240
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 48					; 00000030H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN9@AliParseFe:
; Line 241
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 72					; 00000048H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN10@AliParseFe:
; Line 242
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN11@AliParseFe:
; Line 243
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 120				; 00000078H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN12@AliParseFe:
; Line 244
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 144				; 00000090H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN13@AliParseFe:
; Line 245
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 168				; 000000a8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN14@AliParseFe:
; Line 246
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 192				; 000000c0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN15@AliParseFe:
; Line 247
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 216				; 000000d8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN16@AliParseFe:
; Line 248
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 240				; 000000f0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
$LN4@AliParseFe:
; Line 249
	jmp	$LN2@AliParseFe
$LN3@AliParseFe:
; Line 250
	add	rsp, 56					; 00000038H
	ret	0
	npad	1
$LN18@AliParseFe:
	DD	$LN6@AliParseFe
	DD	$LN7@AliParseFe
	DD	$LN8@AliParseFe
	DD	$LN9@AliParseFe
	DD	$LN10@AliParseFe
	DD	$LN11@AliParseFe
	DD	$LN12@AliParseFe
	DD	$LN16@AliParseFe
	DD	$LN13@AliParseFe
	DD	$LN14@AliParseFe
	DD	$LN15@AliParseFe
?AliParseFeatureLayersMinimap@@YAXPEAUxstate@@PEAUAliFeatureLayersMinimap@@@Z ENDP ; AliParseFeatureLayersMinimap
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z PROC ; AliParseFeatureLayers
; File W:\cpp\void\alistar\alistar.h
; Line 190
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 648				; 00000288H
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 191
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@AliParseFe:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	$LN3@AliParseFe
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	dec	eax
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 29
	ja	$LN4@AliParseFe
	movsxd	rax, DWORD PTR tv73[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN34@AliParseFe[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@AliParseFe:
; Line 192
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN7@AliParseFe:
; Line 193
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN8@AliParseFe:
; Line 194
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 48					; 00000030H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN9@AliParseFe:
; Line 195
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 72					; 00000048H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN10@AliParseFe:
; Line 196
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN11@AliParseFe:
; Line 197
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 120				; 00000078H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN12@AliParseFe:
; Line 198
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 144				; 00000090H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN13@AliParseFe:
; Line 199
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 168				; 000000a8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN14@AliParseFe:
; Line 200
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 192				; 000000c0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN15@AliParseFe:
; Line 201
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 216				; 000000d8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN16@AliParseFe:
; Line 202
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 240				; 000000f0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN17@AliParseFe:
; Line 203
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 264				; 00000108H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN18@AliParseFe:
; Line 204
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 288				; 00000120H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN19@AliParseFe:
; Line 205
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 312				; 00000138H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN20@AliParseFe:
; Line 206
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 336				; 00000150H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN21@AliParseFe:
; Line 207
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 360				; 00000168H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN22@AliParseFe:
; Line 208
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 384				; 00000180H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN23@AliParseFe:
; Line 209
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 408				; 00000198H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN24@AliParseFe:
; Line 210
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 432				; 000001b0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN25@AliParseFe:
; Line 211
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 456				; 000001c8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN26@AliParseFe:
; Line 212
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 480				; 000001e0H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN27@AliParseFe:
; Line 213
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 504				; 000001f8H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	$LN4@AliParseFe
$LN28@AliParseFe:
; Line 214
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 528				; 00000210H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN29@AliParseFe:
; Line 215
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 552				; 00000228H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN30@AliParseFe:
; Line 216
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 576				; 00000240H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN31@AliParseFe:
; Line 217
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 600				; 00000258H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
	jmp	SHORT $LN4@AliParseFe
$LN32@AliParseFe:
; Line 218
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 624				; 00000270H
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ; ParseImageData
$LN4@AliParseFe:
; Line 219
	jmp	$LN2@AliParseFe
$LN3@AliParseFe:
; Line 220
	add	rsp, 56					; 00000038H
	ret	0
	npad	1
$LN34@AliParseFe:
	DD	$LN6@AliParseFe
	DD	$LN7@AliParseFe
	DD	$LN8@AliParseFe
	DD	$LN9@AliParseFe
	DD	$LN10@AliParseFe
	DD	$LN11@AliParseFe
	DD	$LN12@AliParseFe
	DD	$LN13@AliParseFe
	DD	$LN15@AliParseFe
	DD	$LN17@AliParseFe
	DD	$LN19@AliParseFe
	DD	$LN4@AliParseFe
	DD	$LN4@AliParseFe
	DD	$LN20@AliParseFe
	DD	$LN21@AliParseFe
	DD	$LN4@AliParseFe
	DD	$LN14@AliParseFe
	DD	$LN16@AliParseFe
	DD	$LN18@AliParseFe
	DD	$LN22@AliParseFe
	DD	$LN23@AliParseFe
	DD	$LN24@AliParseFe
	DD	$LN25@AliParseFe
	DD	$LN26@AliParseFe
	DD	$LN28@AliParseFe
	DD	$LN27@AliParseFe
	DD	$LN29@AliParseFe
	DD	$LN30@AliParseFe
	DD	$LN31@AliParseFe
	DD	$LN32@AliParseFe
?AliParseFeatureLayers@@YAXPEAUxstate@@PEAUAliFeatureLayers@@@Z ENDP ; AliParseFeatureLayers
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z PROC	; ParseImageData
; File W:\cpp\void\alistar\alistar.h
; Line 152
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 153
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseImage:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseImage
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseImage
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseImage
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN8@ParseImage
	jmp	SHORT $LN4@ParseImage
$LN6@ParseImage:
; Line 154
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParseImage
$LN7@ParseImage:
; Line 155
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ; ParseSize2DI
	jmp	SHORT $LN4@ParseImage
$LN8@ParseImage:
; Line 156
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z ; GetBytesValue
$LN4@ParseImage:
; Line 157
	jmp	SHORT $LN2@ParseImage
$LN3@ParseImage:
; Line 158
	add	rsp, 56					; 00000038H
	ret	0
?ParseImageData@@YAXPEAUxstate@@PEAUImageData@@@Z ENDP	; ParseImageData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z PROC	; ParseRectangleI
; File W:\cpp\void\alistar\alistar.h
; Line 139
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 140
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParseRecta:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParseRecta
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParseRecta
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParseRecta
	jmp	SHORT $LN4@ParseRecta
$LN6@ParseRecta:
; Line 141
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ; ParsePoint2DI
	jmp	SHORT $LN4@ParseRecta
$LN7@ParseRecta:
; Line 142
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ; ParsePoint2DI
$LN4@ParseRecta:
; Line 143
	jmp	SHORT $LN2@ParseRecta
$LN3@ParseRecta:
; Line 144
	add	rsp, 56					; 00000038H
	ret	0
?ParseRectangleI@@YAXPEAUxstate@@PEATi32x4@@@Z ENDP	; ParseRectangleI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 48
val$ = 56
?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z PROC	; ParseSize2DI
; File W:\cpp\void\alistar\alistar.h
; Line 135
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rdx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ; ParsePoint2DI
; Line 136
	add	rsp, 40					; 00000028H
	ret	0
?ParseSize2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ENDP	; ParseSize2DI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z PROC	; ParsePoint3D
; File W:\cpp\void\alistar\alistar.h
; Line 126
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 127
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParsePoint:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParsePoint
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParsePoint
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParsePoint
	cmp	DWORD PTR tv73[rsp], 3
	je	SHORT $LN8@ParsePoint
	jmp	SHORT $LN4@ParsePoint
$LN6@ParsePoint:
; Line 128
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	SHORT $LN4@ParsePoint
$LN7@ParsePoint:
; Line 129
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	SHORT $LN4@ParsePoint
$LN8@ParsePoint:
; Line 130
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
$LN4@ParsePoint:
; Line 131
	jmp	SHORT $LN2@ParsePoint
$LN3@ParsePoint:
; Line 132
	add	rsp, 56					; 00000038H
	ret	0
?ParsePoint3D@@YAXPEAUxstate@@PEATf32x3@@@Z ENDP	; ParsePoint3D
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z PROC	; ParsePoint2D
; File W:\cpp\void\alistar\alistar.h
; Line 118
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 119
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParsePoint:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParsePoint
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParsePoint
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParsePoint
	jmp	SHORT $LN4@ParsePoint
$LN6@ParsePoint:
; Line 120
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
	jmp	SHORT $LN4@ParsePoint
$LN7@ParsePoint:
; Line 121
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z	; GetFloat32Value
$LN4@ParsePoint:
; Line 122
	jmp	SHORT $LN2@ParsePoint
$LN3@ParsePoint:
; Line 123
	add	rsp, 56					; 00000038H
	ret	0
?ParsePoint2D@@YAXPEAUxstate@@PEAUf32x2@@@Z ENDP	; ParsePoint2D
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
read$ = 64
val$ = 72
?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z PROC	; ParsePoint2DI
; File W:\cpp\void\alistar\alistar.h
; Line 110
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR val$[rsp]
	call	memset
; Line 111
	mov	rcx, QWORD PTR read$[rsp]
	call	?MessageCue@@YAXPEAUxstate@@@Z		; MessageCue
$LN2@ParsePoint:
	mov	rcx, QWORD PTR read$[rsp]
	call	?NextField@@YAHPEAUxstate@@@Z		; NextField
	test	eax, eax
	je	SHORT $LN3@ParsePoint
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetTag@@YAHPEAUxstate@@@Z		; GetTag
	mov	DWORD PTR tv73[rsp], eax
	cmp	DWORD PTR tv73[rsp], 1
	je	SHORT $LN6@ParsePoint
	cmp	DWORD PTR tv73[rsp], 2
	je	SHORT $LN7@ParsePoint
	jmp	SHORT $LN4@ParsePoint
$LN6@ParsePoint:
; Line 112
	mov	rax, QWORD PTR val$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
	jmp	SHORT $LN4@ParsePoint
$LN7@ParsePoint:
; Line 113
	mov	rax, QWORD PTR val$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
$LN4@ParsePoint:
; Line 114
	jmp	SHORT $LN2@ParsePoint
$LN3@ParsePoint:
; Line 115
	add	rsp, 56					; 00000038H
	ret	0
?ParsePoint2DI@@YAXPEAUxstate@@PEAUi32x2@@@Z ENDP	; ParsePoint2DI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
snd$ = 32
mem$ = 40
pars$ = 56
$T1 = 64
req$ = 80
$T2 = 136
$T3 = 160
read$ = 224
__$ArrayPad$ = 896
ctx$ = 944
tag$ = 952
pay$ = 960
?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z PROC ; AlistarSendPayload
; File W:\cpp\void\alistar\alistar.c
; Line 203
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 920				; 00000398H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 205
	mov	DWORD PTR req$[rsp], 6
	lea	rax, QWORD PTR req$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 206
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR pay$[rsp]
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	mov	edx, DWORD PTR tag$[rsp]
	lea	rcx, QWORD PTR req$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 209
	lea	rdx, QWORD PTR req$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z ; SerializeValue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR mem$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 211
	lea	rax, QWORD PTR read$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 672				; 000002a0H
	rep stosb
; Line 212
	mov	r8, QWORD PTR mem$[rsp+8]
	mov	rdx, QWORD PTR mem$[rsp]
	lea	rcx, QWORD PTR read$[rsp]
	call	?Apportion@@YAXPEAUxstate@@_KPEBX@Z	; Apportion
; Line 213
	lea	rax, QWORD PTR pars$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
; Line 214
	lea	rdx, QWORD PTR pars$[rsp]
	lea	rcx, QWORD PTR read$[rsp]
	call	?ParseRequest@@YAXPEAUxstate@@PEAURequest@@@Z ; ParseRequest
; Line 217
	mov	r9, QWORD PTR mem$[rsp]
	mov	r8, QWORD PTR mem$[rsp+8]
	mov	edx, 2
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	mg_websocket_write
	mov	DWORD PTR snd$[rsp], eax
; Line 219
	lea	rcx, QWORD PTR mem$[rsp]
	call	?DelBlock@@YAXPEAUxblock@@@Z		; DelBlock
; Line 221
	lea	rcx, QWORD PTR req$[rsp]
	call	?DelValue@@YAXPEAUxvalue@@@Z		; DelValue
; Line 223
	mov	eax, DWORD PTR snd$[rsp]
; Line 224
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 920				; 00000398H
	pop	rdi
	pop	rsi
	ret	0
?AlistarSendPayload@@YAHPEAUAlistarContext@@HPEAUxvalue@@@Z ENDP ; AlistarSendPayload
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 48
len$ = 56
cur$ = 64
?Apportion@@YAXPEAUxstate@@_KPEBX@Z PROC		; Apportion
; File W:\cpp\void\alistar\ali.c
; Line 923
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8, QWORD PTR cur$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z ; InternalPushStack
; Line 924
	add	rsp, 40					; 00000028H
	ret	0
?Apportion@@YAXPEAUxstate@@_KPEBX@Z ENDP		; Apportion
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
$T1 = 56
$T2 = 80
$T3 = 112
read$ = 176
?GetTag@@YAHPEAUxstate@@@Z PROC				; GetTag
; File W:\cpp\void\alistar\ali.c
; Line 913
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 914
	mov	DWORD PTR [rsp+32], 177			; 000000b1H
	mov	r9d, 914				; 00000392H
	lea	r8, OFFSET FLAT:$SG170755
	lea	rdx, OFFSET FLAT:$SG170756
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@GetTag
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@GetTag
$LN3@GetTag:
	mov	DWORD PTR tv70[rsp], 0
$LN4@GetTag:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170753
	mov	r8d, DWORD PTR tv70[rsp]
	lea	rdx, OFFSET FLAT:$SG170754
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 915
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	eax, DWORD PTR [rax+28]
; Line 916
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?GetTag@@YAHPEAUxstate@@@Z ENDP				; GetTag
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 8
?MessageCue@@YAXPEAUxstate@@@Z PROC			; MessageCue
; File W:\cpp\void\alistar\ali.c
; Line 900
	mov	QWORD PTR [rsp+8], rcx
; Line 902
	mov	rax, QWORD PTR read$[rsp]
	mov	eax, DWORD PTR [rax+668]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@MessageCue
; Line 905
	mov	rax, QWORD PTR read$[rsp]
	cmp	DWORD PTR [rax+664], 0
	je	SHORT $LN3@MessageCue
; Line 906
	mov	rax, QWORD PTR read$[rsp]
	mov	eax, DWORD PTR [rax+668]
	or	eax, 1
	mov	rcx, QWORD PTR read$[rsp]
	mov	DWORD PTR [rcx+668], eax
$LN3@MessageCue:
; Line 908
	mov	rax, QWORD PTR read$[rsp]
	mov	eax, DWORD PTR [rax+664]
	inc	eax
	mov	rcx, QWORD PTR read$[rsp]
	mov	DWORD PTR [rcx+664], eax
$LN2@MessageCue:
; Line 910
	ret	0
?MessageCue@@YAXPEAUxstate@@@Z ENDP			; MessageCue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv151 = 48
label$1 = 56
$T2 = 64
len$3 = 72
raw$4 = 80
$T5 = 88
label$6 = 96
$T7 = 104
$T8 = 128
$T9 = 160
read$ = 224
?NextField@@YAHPEAUxstate@@@Z PROC			; NextField
; File W:\cpp\void\alistar\ali.c
; Line 840
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 841
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 1
	test	eax, eax
	je	$LN2@NextField
; Line 846
	mov	rax, QWORD PTR read$[rsp]
	mov	eax, DWORD PTR [rax+668]
	and	eax, 1
	test	eax, eax
	je	$LN4@NextField
; Line 847
	mov	rax, QWORD PTR read$[rsp]
	mov	eax, DWORD PTR [rax+668]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR read$[rsp]
	mov	DWORD PTR [rcx+668], eax
; Line 850
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ; InternalConsumeLabel
	mov	QWORD PTR $T2[rsp], rax
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR label$1[rsp], rax
; Line 852
	cmp	DWORD PTR label$1[rsp], 8
	je	SHORT $LN6@NextField
	cmp	DWORD PTR label$1[rsp], 6
	je	SHORT $LN6@NextField
; Line 854
	lea	rcx, OFFSET FLAT:$SG170734
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
	jmp	$LN1@NextField
$LN6@NextField:
; Line 858
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rax+640]
	call	?GobbleVarint@@YA_KPEAUxstack@@@Z	; GobbleVarint
	mov	QWORD PTR len$3[rsp], rax
; Line 860
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	r8, QWORD PTR [rax+16]
	mov	rdx, QWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z ; InternalPushStack
; Line 862
	jmp	SHORT $LN5@NextField
$LN4@NextField:
; Line 865
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalGetUnknownValue@@YAXPEAUxstate@@@Z ; InternalGetUnknownValue
$LN5@NextField:
$LN2@NextField:
; Line 872
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rax+640]
	call	?StackCursorInBlock@@YAHPEAUxstack@@@Z	; StackCursorInBlock
	test	eax, eax
	je	$LN7@NextField
; Line 875
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rax+640]
	call	?GobbleVarint@@YA_KPEAUxstack@@@Z	; GobbleVarint
	mov	QWORD PTR raw$4[rsp], rax
; Line 878
	mov	rcx, QWORD PTR raw$4[rsp]
	call	?DecodeLabel@@YA?AUxlabel@@_K@Z		; DecodeLabel
	mov	QWORD PTR $T5[rsp], rax
	mov	rax, QWORD PTR $T5[rsp]
	mov	QWORD PTR label$6[rsp], rax
; Line 880
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	rcx, QWORD PTR label$6[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 881
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	eax, DWORD PTR [rax+32]
	or	eax, 1
	mov	rcx, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rcx+640]
	mov	DWORD PTR [rcx+32], eax
; Line 882
	mov	eax, 1
	jmp	$LN1@NextField
; Line 883
	jmp	$LN8@NextField
$LN7@NextField:
; Line 884
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rax+640]
	call	?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z ; StackCursorOnePastBlock
	test	eax, eax
	je	SHORT $LN9@NextField
; Line 886
	mov	rax, QWORD PTR read$[rsp]
	mov	rdx, QWORD PTR [rax+640]
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z ; InternalPullStack
; Line 888
	mov	rax, QWORD PTR read$[rsp]
	mov	eax, DWORD PTR [rax+664]
	dec	eax
	mov	rcx, QWORD PTR read$[rsp]
	mov	DWORD PTR [rcx+664], eax
; Line 890
	xor	eax, eax
	jmp	$LN1@NextField
; Line 891
	jmp	$LN10@NextField
$LN9@NextField:
; Line 892
	mov	DWORD PTR [rsp+32], 176			; 000000b0H
	mov	r9d, 892				; 0000037cH
	lea	r8, OFFSET FLAT:$SG170742
	lea	rdx, OFFSET FLAT:$SG170743
	lea	rcx, QWORD PTR $T9[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG170740
	test	rax, rax
	jne	SHORT $LN12@NextField
	mov	DWORD PTR tv151[rsp], 1
	jmp	SHORT $LN13@NextField
$LN12@NextField:
	mov	DWORD PTR tv151[rsp], 0
$LN13@NextField:
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170739
	mov	r8d, DWORD PTR tv151[rsp]
	lea	rdx, OFFSET FLAT:$SG170741
	lea	rcx, QWORD PTR $T8[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 893
	xor	eax, eax
$LN10@NextField:
$LN8@NextField:
$LN1@NextField:
; Line 895
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?NextField@@YAHPEAUxstate@@@Z ENDP			; NextField
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
label$ = 32
block$ = 40
len$ = 48
$T1 = 56
str$ = 64
read$ = 96
val$ = 104
?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z PROC		; GetBytesValue
; File W:\cpp\void\alistar\ali.c
; Line 816
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 818
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z	; GetStack
	mov	QWORD PTR block$[rsp], rax
; Line 821
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ; InternalConsumeLabel
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR label$[rsp], rax
; Line 823
	cmp	DWORD PTR label$[rsp], 8
	je	SHORT $LN2@GetBytesVa
	cmp	DWORD PTR label$[rsp], 7
	je	SHORT $LN2@GetBytesVa
; Line 825
	lea	rcx, OFFSET FLAT:$SG170718
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
	jmp	SHORT $LN1@GetBytesVa
$LN2@GetBytesVa:
; Line 829
	mov	rcx, QWORD PTR block$[rsp]
	call	?GobbleVarint@@YA_KPEAUxstack@@@Z	; GobbleVarint
	mov	QWORD PTR len$[rsp], rax
; Line 832
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
	mov	QWORD PTR str$[rsp], rax
; Line 834
	mov	rax, QWORD PTR read$[rsp]
	add	rax, 648				; 00000288H
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, rax
	call	?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z	; zsnew
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 835
	mov	eax, 1
$LN1@GetBytesVa:
; Line 836
	add	rsp, 88					; 00000058H
	ret	0
?GetBytesValue@@YAHPEAUxstate@@PEAPEAE@Z ENDP		; GetBytesValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
label$ = 32
block$ = 40
len$ = 48
$T1 = 56
str$ = 64
read$ = 96
val$ = 104
?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z PROC		; GetStringValue
; File W:\cpp\void\alistar\ali.c
; Line 791
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 793
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z	; GetStack
	mov	QWORD PTR block$[rsp], rax
; Line 796
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ; InternalConsumeLabel
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR label$[rsp], rax
; Line 798
	cmp	DWORD PTR label$[rsp], 8
	je	SHORT $LN2@GetStringV
	cmp	DWORD PTR label$[rsp], 7
	je	SHORT $LN2@GetStringV
; Line 800
	lea	rcx, OFFSET FLAT:$SG170706
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
	jmp	SHORT $LN1@GetStringV
$LN2@GetStringV:
; Line 804
	mov	rcx, QWORD PTR block$[rsp]
	call	?GobbleVarint@@YA_KPEAUxstack@@@Z	; GobbleVarint
	mov	QWORD PTR len$[rsp], rax
; Line 807
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
	mov	QWORD PTR str$[rsp], rax
; Line 809
	mov	rax, QWORD PTR read$[rsp]
	add	rax, 648				; 00000288H
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, rax
	call	?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z	; zsnew
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 811
	mov	eax, 1
$LN1@GetStringV:
; Line 812
	add	rsp, 88					; 00000058H
	ret	0
?GetStringValue@@YAHPEAUxstate@@PEAPEAD@Z ENDP		; GetStringValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 48
value$ = 56
?GetEnumValue@@YAHPEAUxstate@@PEAX@Z PROC		; GetEnumValue
; File W:\cpp\void\alistar\ali.c
; Line 786
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarintValue@@YAHPEAUxstate@@PEAI@Z	; GetVarintValue
; Line 787
	add	rsp, 40					; 00000028H
	ret	0
?GetEnumValue@@YAHPEAUxstate@@PEAX@Z ENDP		; GetEnumValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
label$ = 40
$T1 = 48
block$ = 56
read$ = 80
val$ = 88
?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z PROC		; GetFloat32Value
; File W:\cpp\void\alistar\ali.c
; Line 748
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 750
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z	; GetStack
	mov	QWORD PTR block$[rsp], rax
; Line 753
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ; InternalConsumeLabel
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR label$[rsp], rax
; Line 755
	cmp	DWORD PTR label$[rsp], 3
	je	SHORT $LN2@GetFloat32
	cmp	DWORD PTR label$[rsp], 9
	je	SHORT $LN2@GetFloat32
; Line 756
	lea	rcx, OFFSET FLAT:$SG170678
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
	jmp	SHORT $LN1@GetFloat32
$LN2@GetFloat32:
; Line 759
	mov	rcx, QWORD PTR block$[rsp]
	call	?GobbleFloat32@@YAMPEAUxstack@@@Z	; GobbleFloat32
	movss	DWORD PTR res$[rsp], xmm0
; Line 761
	cmp	QWORD PTR val$[rsp], 0
	je	SHORT $LN3@GetFloat32
	mov	rax, QWORD PTR val$[rsp]
	movss	xmm0, DWORD PTR res$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN3@GetFloat32:
; Line 762
	mov	eax, 1
$LN1@GetFloat32:
; Line 763
	add	rsp, 72					; 00000048H
	ret	0
?GetFloat32Value@@YAHPEAUxstate@@PEAM@Z ENDP		; GetFloat32Value
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 48
val$ = 56
?GetVarintValue@@YAHPEAUxstate@@PEAH@Z PROC		; GetVarintValue
; File W:\cpp\void\alistar\ali.c
; Line 742
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 743
	mov	rdx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z ; GetVarint32Value
; Line 744
	add	rsp, 40					; 00000028H
	ret	0
?GetVarintValue@@YAHPEAUxstate@@PEAH@Z ENDP		; GetVarintValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 48
val$ = 56
?GetVarintValue@@YAHPEAUxstate@@PEAI@Z PROC		; GetVarintValue
; File W:\cpp\void\alistar\ali.c
; Line 735
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 736
	mov	rdx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z ; GetVarint32Value
; Line 737
	add	rsp, 40					; 00000028H
	ret	0
?GetVarintValue@@YAHPEAUxstate@@PEAI@Z ENDP		; GetVarintValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
val64$ = 40
read$ = 64
val32$ = 72
?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z PROC		; GetVarint32Value
; File W:\cpp\void\alistar\ali.c
; Line 722
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 726
	lea	rdx, QWORD PTR val64$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ; GetVarint64Value
	mov	DWORD PTR res$[rsp], eax
; Line 728
	cmp	QWORD PTR val32$[rsp], 0
	je	SHORT $LN2@GetVarint3
	mov	rax, QWORD PTR val32$[rsp]
	mov	ecx, DWORD PTR val64$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@GetVarint3:
; Line 730
	mov	eax, DWORD PTR res$[rsp]
; Line 731
	add	rsp, 56					; 00000038H
	ret	0
?GetVarint32Value@@YAHPEAUxstate@@PEAI@Z ENDP		; GetVarint32Value
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
label$ = 40
block$ = 48
val$ = 56
read$ = 80
value$ = 88
?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z PROC		; GetVarint64Value
; File W:\cpp\void\alistar\ali.c
; Line 704
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 706
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z	; GetStack
	mov	QWORD PTR block$[rsp], rax
; Line 709
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ; InternalConsumeLabel
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR label$[rsp], rax
; Line 711
	cmp	DWORD PTR label$[rsp], 5
	je	SHORT $LN2@GetVarint6
	lea	rcx, OFFSET FLAT:$SG170649
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
	jmp	SHORT $LN1@GetVarint6
$LN2@GetVarint6:
; Line 714
	mov	rcx, QWORD PTR block$[rsp]
	call	?GobbleVarint@@YA_KPEAUxstack@@@Z	; GobbleVarint
	mov	QWORD PTR val$[rsp], rax
; Line 716
	cmp	QWORD PTR value$[rsp], 0
	je	SHORT $LN3@GetVarint6
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rax], rcx
$LN3@GetVarint6:
; Line 717
	mov	eax, 1
$LN1@GetVarint6:
; Line 718
	add	rsp, 72					; 00000048H
	ret	0
?GetVarint64Value@@YAHPEAUxstate@@PEA_K@Z ENDP		; GetVarint64Value
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
label$ = 48
tv71 = 56
isl$ = 60
tv88 = 64
block$ = 72
$T1 = 80
val$ = 88
$T2 = 96
$T3 = 128
$T4 = 160
read$ = 224
?InternalGetUnknownValue@@YAXPEAUxstate@@@Z PROC	; InternalGetUnknownValue
; File W:\cpp\void\alistar\ali.c
; Line 658
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 660
	mov	rcx, QWORD PTR read$[rsp]
	call	?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z	; GetStack
	mov	QWORD PTR block$[rsp], rax
; Line 663
	mov	rcx, QWORD PTR read$[rsp]
	call	?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ; InternalConsumeLabel
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR label$[rsp], rax
; Line 666
	cmp	DWORD PTR label$[rsp], 8
	je	SHORT $LN11@InternalGe
	cmp	DWORD PTR label$[rsp], 6
	je	SHORT $LN11@InternalGe
	cmp	DWORD PTR label$[rsp], 7
	je	SHORT $LN11@InternalGe
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN12@InternalGe
$LN11@InternalGe:
	mov	DWORD PTR tv71[rsp], 1
$LN12@InternalGe:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR isl$[rsp], eax
; Line 669
	cmp	DWORD PTR label$[rsp], 5
	je	SHORT $LN4@InternalGe
	cmp	DWORD PTR isl$[rsp], 0
	je	SHORT $LN2@InternalGe
$LN4@InternalGe:
; Line 670
	mov	rcx, QWORD PTR block$[rsp]
	call	?GobbleVarint@@YA_KPEAUxstack@@@Z	; GobbleVarint
	mov	QWORD PTR val$[rsp], rax
; Line 671
	cmp	DWORD PTR isl$[rsp], 0
	je	SHORT $LN5@InternalGe
	mov	rdx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
$LN5@InternalGe:
; Line 672
	jmp	$LN3@InternalGe
$LN2@InternalGe:
; Line 673
	cmp	DWORD PTR label$[rsp], 9
	jne	SHORT $LN6@InternalGe
; Line 674
	mov	edx, 4
	mov	rcx, QWORD PTR block$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
; Line 675
	jmp	$LN7@InternalGe
$LN6@InternalGe:
; Line 676
	cmp	DWORD PTR label$[rsp], 10
	jne	SHORT $LN8@InternalGe
; Line 677
	mov	edx, 8
	mov	rcx, QWORD PTR block$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
; Line 678
	jmp	$LN9@InternalGe
$LN8@InternalGe:
; Line 680
	mov	DWORD PTR [rsp+32], 175			; 000000afH
	mov	r9d, 680				; 000002a8H
	lea	r8, OFFSET FLAT:$SG170627
	lea	rdx, OFFSET FLAT:$SG170628
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG170625
	test	rax, rax
	jne	SHORT $LN13@InternalGe
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN14@InternalGe
$LN13@InternalGe:
	mov	DWORD PTR tv88[rsp], 0
$LN14@InternalGe:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170624
	mov	r8d, DWORD PTR tv88[rsp]
	lea	rdx, OFFSET FLAT:$SG170626
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN9@InternalGe:
$LN7@InternalGe:
$LN3@InternalGe:
; Line 682
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?InternalGetUnknownValue@@YAXPEAUxstate@@@Z ENDP	; InternalGetUnknownValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
$T1 = 52
label$ = 64
$T2 = 72
$T3 = 96
$T4 = 128
read$ = 192
?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z PROC	; InternalConsumeLabel
; File W:\cpp\void\alistar\ali.c
; Line 646
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	DWORD PTR [rsp+32], 174			; 000000aeH
	mov	r9d, 646				; 00000286H
	lea	r8, OFFSET FLAT:$SG170605
	lea	rdx, OFFSET FLAT:$SG170606
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@InternalCo
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@InternalCo
$LN3@InternalCo:
	mov	DWORD PTR tv70[rsp], 0
$LN4@InternalCo:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170603
	mov	r8d, DWORD PTR tv70[rsp]
	lea	rdx, OFFSET FLAT:$SG170604
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 649
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR label$[rsp], rax
; Line 651
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	eax, DWORD PTR [rax+32]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rcx+640]
	mov	DWORD PTR [rcx+32], eax
; Line 652
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 653
	mov	rax, QWORD PTR label$[rsp]
; Line 654
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?InternalConsumeLabel@@YA?AUxlabel@@PEAUxstate@@@Z ENDP	; InternalConsumeLabel
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 32
$T1 = 40
$T2 = 56
__$ReturnAddress$ = 112
tar$ = 120
?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z PROC	; SerializeValue
; File W:\cpp\void\alistar\ali.c
; Line 632
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	xor	edx, edx
	mov	rcx, QWORD PTR tar$[rsp]
	call	?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z ; ReadyValueForSerialization
; Line 635
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+12]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?NewBlock@@YA?AUxblock@@I@Z		; NewBlock
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 638
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR cur$[rsp], rax
; Line 640
	xor	r9d, r9d
	mov	r8, QWORD PTR tar$[rsp]
	lea	rdx, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z ; SerializeValueInternal
; Line 641
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 642
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?SerializeValue@@YA?AUxblock@@PEAUxvalue@@@Z ENDP	; SerializeValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
tv93 = 52
tv216 = 56
itr$1 = 64
tv78 = 72
tv76 = 80
tv146 = 88
tv144 = 96
tv173 = 104
tv171 = 112
tv190 = 120
tv188 = 128
tv208 = 136
tv206 = 144
$T2 = 152
$T3 = 176
$T4 = 208
mem$ = 272
cur$ = 280
tar$ = 288
inc$ = 296
?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z PROC ; SerializeValueInternal
; File W:\cpp\void\alistar\ali.c
; Line 587
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	mov	eax, DWORD PTR tv65[rsp]
	dec	eax
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 9
	ja	$LN21@SerializeV
	movsxd	rax, DWORD PTR tv65[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN27@SerializeV[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@SerializeV:
; Line 589
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN8@SerializeV
; Line 590
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 2
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	QWORD PTR tv78[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv76[rsp], rax
	mov	rdx, QWORD PTR tv78[rsp]
	mov	rcx, QWORD PTR tv76[rsp]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 591
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	edx, eax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
$LN8@SerializeV:
; Line 594
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR itr$1[rsp], rax
	jmp	SHORT $LN6@SerializeV
$LN4@SerializeV:
	mov	rax, QWORD PTR itr$1[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR itr$1[rsp], rax
$LN6@SerializeV:
	mov	rax, QWORD PTR tar$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@SerializeV
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	DWORD PTR tv93[rsp], eax
	jmp	SHORT $LN24@SerializeV
$LN23@SerializeV:
	mov	DWORD PTR tv93[rsp], 0
$LN24@SerializeV:
	movsxd	rax, DWORD PTR tv93[rsp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR tar$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR itr$1[rsp], rax
	jae	SHORT $LN5@SerializeV
; Line 595
	mov	r9d, 1
	mov	r8, QWORD PTR itr$1[rsp]
	mov	rdx, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR mem$[rsp]
	call	?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z ; SerializeValueInternal
; Line 596
	jmp	$LN4@SerializeV
$LN5@SerializeV:
; Line 597
	jmp	$LN2@SerializeV
$LN9@SerializeV:
; Line 599
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN10@SerializeV
; Line 600
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 2
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	QWORD PTR tv146[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv144[rsp], rax
	mov	rdx, QWORD PTR tv146[rsp]
	mov	rcx, QWORD PTR tv144[rsp]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 601
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	edx, eax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
$LN10@SerializeV:
; Line 603
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	r8d, eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	rdx, QWORD PTR [rax+48]
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memcpy
; Line 604
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR cur$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 605
	jmp	$LN2@SerializeV
$LN11@SerializeV:
$LN12@SerializeV:
$LN13@SerializeV:
; Line 607
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN14@SerializeV
; Line 608
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 1
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	QWORD PTR tv173[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv171[rsp], rax
	mov	rdx, QWORD PTR tv173[rsp]
	mov	rcx, QWORD PTR tv171[rsp]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
$LN14@SerializeV:
; Line 610
	mov	rax, QWORD PTR tar$[rsp]
	movsd	xmm1, QWORD PTR [rax+32]
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?WriteFloat64@@YAPEAEPEAEN@Z		; WriteFloat64
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 611
	jmp	$LN2@SerializeV
$LN15@SerializeV:
$LN16@SerializeV:
$LN17@SerializeV:
; Line 613
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN18@SerializeV
; Line 614
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 5
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	QWORD PTR tv190[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv188[rsp], rax
	mov	rdx, QWORD PTR tv190[rsp]
	mov	rcx, QWORD PTR tv188[rsp]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
$LN18@SerializeV:
; Line 616
	mov	rax, QWORD PTR tar$[rsp]
	cvtsd2ss xmm0, QWORD PTR [rax+32]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?WriteFloat32@@YAPEAEPEAEM@Z		; WriteFloat32
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 617
	jmp	$LN2@SerializeV
$LN19@SerializeV:
; Line 619
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN20@SerializeV
; Line 620
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	xor	ecx, ecx
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	QWORD PTR tv208[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv206[rsp], rax
	mov	rdx, QWORD PTR tv208[rsp]
	mov	rcx, QWORD PTR tv206[rsp]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
$LN20@SerializeV:
; Line 622
	mov	rax, QWORD PTR tar$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?WriteVarint@@YAPEAEPEAE_K@Z		; WriteVarint
	mov	rcx, QWORD PTR cur$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 623
	jmp	$LN2@SerializeV
$LN21@SerializeV:
; Line 625
	mov	DWORD PTR [rsp+32], 173			; 000000adH
	mov	r9d, 625				; 00000271H
	lea	r8, OFFSET FLAT:$SG170587
	lea	rdx, OFFSET FLAT:$SG170588
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG170585
	test	rax, rax
	jne	SHORT $LN25@SerializeV
	mov	DWORD PTR tv216[rsp], 1
	jmp	SHORT $LN26@SerializeV
$LN25@SerializeV:
	mov	DWORD PTR tv216[rsp], 0
$LN26@SerializeV:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170584
	mov	r8d, DWORD PTR tv216[rsp]
	lea	rdx, OFFSET FLAT:$SG170586
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN2@SerializeV:
; Line 628
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
$LN27@SerializeV:
	DD	$LN17@SerializeV
	DD	$LN13@SerializeV
	DD	$LN16@SerializeV
	DD	$LN12@SerializeV
	DD	$LN19@SerializeV
	DD	$LN7@SerializeV
	DD	$LN9@SerializeV
	DD	$LN21@SerializeV
	DD	$LN15@SerializeV
	DD	$LN11@SerializeV
?SerializeValueInternal@@YAXPEAUxblock@@PEAPEAEPEAUxvalue@@H@Z ENDP ; SerializeValueInternal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
itr$1 = 56
tv77 = 64
tv216 = 68
tv237 = 72
tv137 = 76
tv135 = 80
tv148 = 84
tv146 = 88
tv167 = 92
tv165 = 96
tv178 = 100
tv176 = 104
tv195 = 108
tv193 = 112
tv212 = 116
tv210 = 120
tv232 = 124
tv230 = 128
$T2 = 136
$T3 = 160
$T4 = 192
tar$ = 256
inc$ = 264
?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z PROC	; ReadyValueForSerialization
; File W:\cpp\void\alistar\ali.c
; Line 539
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	mov	eax, DWORD PTR tv65[rsp]
	dec	eax
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 9
	ja	$LN21@ReadyValue
	movsxd	rax, DWORD PTR tv65[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN27@ReadyValue[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@ReadyValue:
; Line 541
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 543
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR itr$1[rsp], rax
	jmp	SHORT $LN6@ReadyValue
$LN4@ReadyValue:
	mov	rax, QWORD PTR itr$1[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR itr$1[rsp], rax
$LN6@ReadyValue:
	mov	rax, QWORD PTR tar$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@ReadyValue
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN24@ReadyValue
$LN23@ReadyValue:
	mov	DWORD PTR tv77[rsp], 0
$LN24@ReadyValue:
	movsxd	rax, DWORD PTR tv77[rsp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR tar$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR itr$1[rsp], rax
	jae	SHORT $LN5@ReadyValue
; Line 544
	mov	edx, 1
	mov	rcx, QWORD PTR itr$1[rsp]
	call	?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z ; ReadyValueForSerialization
; Line 546
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR itr$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 547
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR itr$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 548
	jmp	$LN4@ReadyValue
$LN5@ReadyValue:
; Line 549
	cmp	DWORD PTR inc$[rsp], 0
	je	$LN8@ReadyValue
; Line 550
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 2
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv137[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv135[rsp], eax
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR tv135[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 551
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv148[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv146[rsp], eax
	mov	eax, DWORD PTR tv148[rsp]
	mov	ecx, DWORD PTR tv146[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN8@ReadyValue:
; Line 553
	jmp	$LN2@ReadyValue
$LN9@ReadyValue:
; Line 555
	mov	rax, QWORD PTR tar$[rsp]
	mov	rcx, QWORD PTR tar$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR tar$[rsp]
	mov	rcx, QWORD PTR tar$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+12], ecx
; Line 556
	cmp	DWORD PTR inc$[rsp], 0
	je	$LN10@ReadyValue
; Line 557
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 2
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv167[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv165[rsp], eax
	mov	eax, DWORD PTR tv167[rsp]
	mov	ecx, DWORD PTR tv165[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 558
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv178[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv176[rsp], eax
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR tv176[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN10@ReadyValue:
; Line 560
	jmp	$LN2@ReadyValue
$LN11@ReadyValue:
$LN12@ReadyValue:
$LN13@ReadyValue:
; Line 562
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+8], 4
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+12], 4
; Line 563
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN14@ReadyValue
; Line 564
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 5
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv195[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv193[rsp], eax
	mov	eax, DWORD PTR tv195[rsp]
	mov	ecx, DWORD PTR tv193[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN14@ReadyValue:
; Line 566
	jmp	$LN2@ReadyValue
$LN15@ReadyValue:
$LN16@ReadyValue:
$LN17@ReadyValue:
; Line 568
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+8], 8
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+12], 8
; Line 569
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN18@ReadyValue
; Line 570
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 1
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv212[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv210[rsp], eax
	mov	eax, DWORD PTR tv212[rsp]
	mov	ecx, DWORD PTR tv210[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN18@ReadyValue:
; Line 572
	jmp	$LN2@ReadyValue
$LN19@ReadyValue:
; Line 574
	mov	rax, QWORD PTR tar$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv216[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	ecx, DWORD PTR tv216[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR tar$[rsp]
	mov	ecx, DWORD PTR tv216[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 575
	cmp	DWORD PTR inc$[rsp], 0
	je	SHORT $LN20@ReadyValue
; Line 576
	mov	rax, QWORD PTR tar$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, 1
	call	?EncodeLabel@@YAIHH@Z			; EncodeLabel
	mov	eax, eax
	mov	ecx, eax
	call	?VarintSize@@YAH_K@Z			; VarintSize
	mov	DWORD PTR tv232[rsp], eax
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv230[rsp], eax
	mov	eax, DWORD PTR tv232[rsp]
	mov	ecx, DWORD PTR tv230[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN20@ReadyValue:
; Line 578
	jmp	$LN2@ReadyValue
$LN21@ReadyValue:
; Line 580
	mov	DWORD PTR [rsp+32], 172			; 000000acH
	mov	r9d, 580				; 00000244H
	lea	r8, OFFSET FLAT:$SG170550
	lea	rdx, OFFSET FLAT:$SG170551
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG170548
	test	rax, rax
	jne	SHORT $LN25@ReadyValue
	mov	DWORD PTR tv237[rsp], 1
	jmp	SHORT $LN26@ReadyValue
$LN25@ReadyValue:
	mov	DWORD PTR tv237[rsp], 0
$LN26@ReadyValue:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170547
	mov	r8d, DWORD PTR tv237[rsp]
	lea	rdx, OFFSET FLAT:$SG170549
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN2@ReadyValue:
; Line 583
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN27@ReadyValue:
	DD	$LN13@ReadyValue
	DD	$LN17@ReadyValue
	DD	$LN12@ReadyValue
	DD	$LN16@ReadyValue
	DD	$LN19@ReadyValue
	DD	$LN7@ReadyValue
	DD	$LN9@ReadyValue
	DD	$LN21@ReadyValue
	DD	$LN11@ReadyValue
	DD	$LN15@ReadyValue
?ReadyValueForSerialization@@YAXPEAUxvalue@@I@Z ENDP	; ReadyValueForSerialization
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
tv77 = 36
tv88 = 40
itr$1 = 48
tar$ = 80
?DelValue@@YAXPEAUxvalue@@@Z PROC			; DelValue
; File W:\cpp\void\alistar\ali.c
; Line 520
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR tar$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN7@DelValue
	cmp	DWORD PTR tv65[rsp], 7
	je	$LN8@DelValue
	jmp	$LN9@DelValue
$LN7@DelValue:
; Line 522
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 524
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR itr$1[rsp], rax
	jmp	SHORT $LN6@DelValue
$LN4@DelValue:
	mov	rax, QWORD PTR itr$1[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR itr$1[rsp], rax
$LN6@DelValue:
	mov	rax, QWORD PTR tar$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN11@DelValue
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN12@DelValue
$LN11@DelValue:
	mov	DWORD PTR tv77[rsp], 0
$LN12@DelValue:
	movsxd	rax, DWORD PTR tv77[rsp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR tar$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR itr$1[rsp], rax
	jae	SHORT $LN5@DelValue
; Line 525
	mov	rcx, QWORD PTR itr$1[rsp]
	call	?DelValue@@YAXPEAUxvalue@@@Z		; DelValue
; Line 526
	jmp	SHORT $LN4@DelValue
$LN5@DelValue:
; Line 527
	mov	rax, QWORD PTR tar$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN13@DelValue
	mov	rax, QWORD PTR tar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, 8
	mov	rcx, rax
	call	?mg_free@@YAXPEAX@Z			; mg_free
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN14@DelValue
$LN13@DelValue:
	mov	DWORD PTR tv88[rsp], 0
$LN14@DelValue:
; Line 528
	jmp	SHORT $LN2@DelValue
$LN8@DelValue:
; Line 530
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 531
	jmp	SHORT $LN2@DelValue
$LN9@DelValue:
; Line 533
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+12], 0
$LN2@DelValue:
; Line 536
	add	rsp, 72					; 00000048H
	ret	0
?DelValue@@YAXPEAUxvalue@@@Z ENDP			; DelValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
$T1 = 96
dst$ = 192
tag$ = 200
str$ = 208
?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z PROC	; AddStringValue
; File W:\cpp\void\alistar\ali.c
; Line 512
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	DWORD PTR val$[rsp], 7
	lea	rax, QWORD PTR val$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 513
	mov	eax, DWORD PTR tag$[rsp]
	mov	DWORD PTR val$[rsp+4], eax
; Line 514
	mov	rcx, QWORD PTR str$[rsp]
	call	strlen
	mov	DWORD PTR val$[rsp+40], eax
; Line 515
	mov	rax, QWORD PTR str$[rsp]
	mov	QWORD PTR val$[rsp+48], rax
; Line 516
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR val$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	edx, DWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 517
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AddStringValue@@YAPEAUxvalue@@PEAU1@HPEBD@Z ENDP	; AddStringValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
$T1 = 96
dst$ = 192
tag$ = 200
num$ = 208
?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z PROC		; AddFloat32Value
; File W:\cpp\void\alistar\ali.c
; Line 505
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	DWORD PTR val$[rsp], 3
	lea	rax, QWORD PTR val$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 506
	mov	eax, DWORD PTR tag$[rsp]
	mov	DWORD PTR val$[rsp+4], eax
; Line 507
	cvtss2sd xmm0, DWORD PTR num$[rsp]
	movsd	QWORD PTR val$[rsp+32], xmm0
; Line 508
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR val$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	edx, DWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 509
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AddFloat32Value@@YAPEAUxvalue@@PEAU1@HM@Z ENDP		; AddFloat32Value
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dst$ = 48
tag$ = 56
num$ = 64
?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z PROC	; AddVarint32Value
; File W:\cpp\void\alistar\ali.c
; Line 501
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	eax, DWORD PTR num$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	call	?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z ; AddVarint64Value
; Line 502
	add	rsp, 40					; 00000028H
	ret	0
?AddVarint32Value@@YAPEAUxvalue@@PEAU1@HI@Z ENDP	; AddVarint32Value
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
$T1 = 96
dst$ = 192
tag$ = 200
num$ = 208
?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z PROC	; AddVarint64Value
; File W:\cpp\void\alistar\ali.c
; Line 494
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	DWORD PTR val$[rsp], 5
	lea	rax, QWORD PTR val$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 52					; 00000034H
	rep stosb
; Line 495
	mov	eax, DWORD PTR tag$[rsp]
	mov	DWORD PTR val$[rsp+4], eax
; Line 496
	mov	rax, QWORD PTR num$[rsp]
	mov	QWORD PTR val$[rsp+24], rax
; Line 497
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR val$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 56					; 00000038H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	edx, DWORD PTR tag$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	call	?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z	; AddValue
; Line 498
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AddVarint64Value@@YAPEAUxvalue@@PEAU1@H_K@Z ENDP	; AddVarint64Value
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dst$ = 48
tag$ = 56
add$ = 64
?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z PROC		; AddValue
; File W:\cpp\void\alistar\ali.c
; Line 483
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 484
	mov	rax, QWORD PTR add$[rsp]
	mov	ecx, DWORD PTR tag$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 486
	mov	r8, QWORD PTR add$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR dst$[rsp]
	call	?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z ; AddValueArray
; Line 487
	add	rsp, 40					; 00000028H
	ret	0
?AddValue@@YAPEAUxvalue@@PEAU1@HU1@@Z ENDP		; AddValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
res$ = 40
tv82 = 48
dst$ = 80
len$ = 88
Array$ = 96
?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z PROC		; AddValueArray
; File W:\cpp\void\alistar\ali.c
; Line 473
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 475
	mov	rax, QWORD PTR dst$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN3@AddValueAr
	mov	rax, QWORD PTR dst$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN3@AddValueAr
	mov	QWORD PTR tv82[rsp], 0
	jmp	SHORT $LN4@AddValueAr
$LN3@AddValueAr:
	mov	r8d, 56					; 00000038H
	mov	edx, DWORD PTR len$[rsp]
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?stb__sbgrowf@@YAPEAXPEAXHH@Z		; stb__sbgrowf
	mov	QWORD PTR tv77[rsp], rax
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR tv77[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR tv77[rsp]
	mov	QWORD PTR tv82[rsp], rax
$LN4@AddValueAr:
	mov	rax, QWORD PTR dst$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	add	eax, DWORD PTR len$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dst$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	DWORD PTR [rdx+rcx-8], eax
	mov	rax, QWORD PTR dst$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+rcx-8]
	sub	eax, edx
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR dst$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR res$[rsp], rax
; Line 476
	movsxd	rax, DWORD PTR len$[rsp]
	imul	rax, rax, 56				; 00000038H
	mov	r8, rax
	mov	rdx, QWORD PTR Array$[rsp]
	mov	rcx, QWORD PTR res$[rsp]
	call	memcpy
; Line 478
	mov	rax, QWORD PTR res$[rsp]
; Line 479
	add	rsp, 72					; 00000048H
	ret	0
?AddValueArray@@YAPEAUxvalue@@PEAU1@H0@Z ENDP		; AddValueArray
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv85 = 48
$T1 = 56
$T2 = 80
$T3 = 112
read$ = 176
com$ = 184
?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z PROC	; InternalPullStack
; File W:\cpp\void\alistar\ali.c
; Line 454
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR read$[rsp]
	cmp	QWORD PTR [rax+640], 0
	je	$LN2@InternalPu
; Line 455
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	sub	rax, 40					; 00000028H
	mov	rcx, QWORD PTR read$[rsp]
	mov	QWORD PTR [rcx+640], rax
; Line 456
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	cmp	QWORD PTR [rcx+640], rax
	jb	$LN4@InternalPu
; Line 457
	mov	rdx, QWORD PTR com$[rsp]
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rax+640]
	call	?StackInBlockOf@@YAHPEAUxstack@@0@Z	; StackInBlockOf
	test	eax, eax
	je	SHORT $LN6@InternalPu
; Line 458
	mov	rax, QWORD PTR com$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR com$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rcx+640]
	mov	QWORD PTR [rcx+16], rax
; Line 459
	jmp	$LN7@InternalPu
$LN6@InternalPu:
; Line 460
	mov	DWORD PTR [rsp+32], 171			; 000000abH
	mov	r9d, 460				; 000001ccH
	lea	r8, OFFSET FLAT:$SG170451
	lea	rdx, OFFSET FLAT:$SG170452
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG170449
	test	rax, rax
	jne	SHORT $LN9@InternalPu
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN10@InternalPu
$LN9@InternalPu:
	mov	DWORD PTR tv85[rsp], 0
$LN10@InternalPu:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170448
	mov	r8d, DWORD PTR tv85[rsp]
	lea	rdx, OFFSET FLAT:$SG170450
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@InternalPu:
; Line 462
	jmp	SHORT $LN5@InternalPu
$LN4@InternalPu:
; Line 463
	mov	rax, QWORD PTR read$[rsp]
	mov	QWORD PTR [rax+640], 0
$LN5@InternalPu:
; Line 466
	mov	eax, 1
	jmp	SHORT $LN1@InternalPu
	jmp	SHORT $LN3@InternalPu
$LN2@InternalPu:
; Line 467
	lea	rcx, OFFSET FLAT:$SG170453
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
$LN3@InternalPu:
$LN1@InternalPu:
; Line 468
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?InternalPullStack@@YAHPEAUxstate@@PEAUxstack@@@Z ENDP	; InternalPullStack
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 48
len$ = 56
loc$ = 64
?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z PROC	; InternalPushStack
; File W:\cpp\void\alistar\ali.c
; Line 438
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR read$[rsp]
	cmp	QWORD PTR [rax+640], 0
	je	SHORT $LN2@InternalPu
; Line 439
	mov	rax, QWORD PTR read$[rsp]
	add	rax, 640				; 00000280H
	mov	rcx, QWORD PTR read$[rsp]
	cmp	QWORD PTR [rcx+640], rax
	jae	SHORT $LN4@InternalPu
; Line 440
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR read$[rsp]
	mov	QWORD PTR [rcx+640], rax
	jmp	SHORT $LN5@InternalPu
$LN4@InternalPu:
; Line 441
	lea	rcx, OFFSET FLAT:$SG170436
	call	?ReturnDecodeError@@YAHPEB_W@Z		; ReturnDecodeError
	jmp	SHORT $LN1@InternalPu
$LN5@InternalPu:
; Line 442
	jmp	SHORT $LN3@InternalPu
$LN2@InternalPu:
; Line 443
	mov	rax, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	mov	QWORD PTR [rcx+640], rax
$LN3@InternalPu:
; Line 446
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR read$[rsp]
	mov	rcx, QWORD PTR [rcx+640]
	mov	QWORD PTR [rcx], rax
; Line 447
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	rcx, QWORD PTR loc$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 448
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
	mov	rcx, QWORD PTR loc$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 449
	mov	eax, 1
$LN1@InternalPu:
; Line 450
	add	rsp, 40					; 00000028H
	ret	0
?InternalPushStack@@YAHPEAUxstate@@_KPEAE@Z ENDP	; InternalPushStack
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
stc$ = 64
?GobbleFloat32@@YAMPEAUxstack@@@Z PROC			; GobbleFloat32
; File W:\cpp\void\alistar\ali.c
; Line 408
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 409
	mov	rax, QWORD PTR stc$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?PeekFloat32@@YAMPEAE@Z			; PeekFloat32
	movss	DWORD PTR val$[rsp], xmm0
; Line 411
	mov	edx, 4
	mov	rcx, QWORD PTR stc$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
; Line 412
	movss	xmm0, DWORD PTR val$[rsp]
; Line 413
	add	rsp, 56					; 00000038H
	ret	0
?GobbleFloat32@@YAMPEAUxstack@@@Z ENDP			; GobbleFloat32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
val$ = 40
stc$ = 64
?GobbleVarint@@YA_KPEAUxstack@@@Z PROC			; GobbleVarint
; File W:\cpp\void\alistar\ali.c
; Line 395
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 399
	lea	rdx, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR stc$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?PeekVarint@@YAHPEAEPEA_K@Z		; PeekVarint
	mov	DWORD PTR len$[rsp], eax
; Line 401
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR stc$[rsp]
	call	?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z	; AdvanceCursor
; Line 403
	mov	rax, QWORD PTR val$[rsp]
; Line 404
	add	rsp, 56					; 00000038H
	ret	0
?GobbleVarint@@YA_KPEAUxstack@@@Z ENDP			; GobbleVarint
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 0
min$ = 8
loc$ = 16
max$ = 24
cur$ = 32
stc$ = 64
chl$ = 72
?StackInBlockOf@@YAHPEAUxstack@@0@Z PROC		; StackInBlockOf
; File W:\cpp\void\alistar\ali.c
; Line 369
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 370
	mov	rax, QWORD PTR stc$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR min$[rsp], rax
; Line 371
	mov	rax, QWORD PTR stc$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR stc$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR max$[rsp], rax
; Line 373
	mov	rax, QWORD PTR chl$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR loc$[rsp], rax
; Line 374
	mov	rax, QWORD PTR chl$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR cur$[rsp], rax
; Line 375
	mov	rax, QWORD PTR min$[rsp]
	cmp	QWORD PTR loc$[rsp], rax
	jb	SHORT $LN3@StackInBlo
	mov	rax, QWORD PTR min$[rsp]
	cmp	QWORD PTR cur$[rsp], rax
	jb	SHORT $LN3@StackInBlo
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR loc$[rsp], rax
	ja	SHORT $LN3@StackInBlo
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR cur$[rsp], rax
	ja	SHORT $LN3@StackInBlo
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@StackInBlo
$LN3@StackInBlo:
	mov	DWORD PTR tv74[rsp], 0
$LN4@StackInBlo:
	mov	eax, DWORD PTR tv74[rsp]
; Line 376
	add	rsp, 56					; 00000038H
	ret	0
?StackInBlockOf@@YAHPEAUxstack@@0@Z ENDP		; StackInBlockOf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
max$ = 8
stc$ = 32
?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z PROC	; StackCursorOnePastBlock
; File W:\cpp\void\alistar\ali.c
; Line 362
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 363
	mov	rax, QWORD PTR stc$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR stc$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR max$[rsp], rax
; Line 364
	mov	rax, QWORD PTR stc$[rsp]
	mov	rcx, QWORD PTR max$[rsp]
	cmp	QWORD PTR [rax+16], rcx
	jne	SHORT $LN3@StackCurso
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@StackCurso
$LN3@StackCurso:
	mov	DWORD PTR tv69[rsp], 0
$LN4@StackCurso:
	mov	eax, DWORD PTR tv69[rsp]
; Line 365
	add	rsp, 24
	ret	0
?StackCursorOnePastBlock@@YAHPEAUxstack@@@Z ENDP	; StackCursorOnePastBlock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 0
min$ = 8
max$ = 16
stc$ = 48
?StackCursorInBlock@@YAHPEAUxstack@@@Z PROC		; StackCursorInBlock
; File W:\cpp\void\alistar\ali.c
; Line 354
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 355
	mov	rax, QWORD PTR stc$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR min$[rsp], rax
; Line 356
	mov	rax, QWORD PTR stc$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR stc$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR max$[rsp], rax
; Line 357
	mov	rax, QWORD PTR stc$[rsp]
	mov	rcx, QWORD PTR min$[rsp]
	cmp	QWORD PTR [rax+16], rcx
	jb	SHORT $LN3@StackCurso
	mov	rax, QWORD PTR stc$[rsp]
	mov	rcx, QWORD PTR max$[rsp]
	cmp	QWORD PTR [rax+16], rcx
	jae	SHORT $LN3@StackCurso
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN4@StackCurso
$LN3@StackCurso:
	mov	DWORD PTR tv72[rsp], 0
$LN4@StackCurso:
	mov	eax, DWORD PTR tv72[rsp]
; Line 358
	add	rsp, 40					; 00000028H
	ret	0
?StackCursorInBlock@@YAHPEAUxstack@@@Z ENDP		; StackCursorInBlock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 0
stc$ = 32
val$ = 40
?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z PROC		; AdvanceCursor
; File W:\cpp\void\alistar\ali.c
; Line 338
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 339
	mov	rax, QWORD PTR stc$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR res$[rsp], rax
; Line 340
	mov	eax, DWORD PTR val$[rsp]
	mov	rcx, QWORD PTR stc$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR stc$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 341
	mov	rax, QWORD PTR res$[rsp]
; Line 342
	add	rsp, 24
	ret	0
?AdvanceCursor@@YAPEAEPEAUxstack@@_K@Z ENDP		; AdvanceCursor
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
read$ = 8
?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z PROC		; GetStack
; File W:\cpp\void\alistar\ali.c
; Line 333
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR read$[rsp]
	mov	rax, QWORD PTR [rax+640]
; Line 334
	ret	0
?GetStack@@YAPEAUxstack@@PEAUxstate@@@Z ENDP		; GetStack
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 48
?DelBlock@@YAXPEAUxblock@@@Z PROC			; DelBlock
; File W:\cpp\void\alistar\ali.c
; Line 326
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 327
	mov	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR [rax], 0
; Line 328
	mov	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 329
	add	rsp, 40					; 00000028H
	ret	0
?DelBlock@@YAXPEAUxblock@@@Z ENDP			; DelBlock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 48
sze$ = 56
?NewBlock@@YA?AUxblock@@I@Z PROC			; NewBlock
; File W:\cpp\void\alistar\ali.c
; Line 318
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 319
	mov	eax, DWORD PTR sze$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 320
	mov	eax, DWORD PTR sze$[rsp]
	mov	ecx, eax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 321
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 322
	add	rsp, 40					; 00000028H
	ret	0
?NewBlock@@YA?AUxblock@@I@Z ENDP			; NewBlock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bit$ = 0
fmt$ = 4
tag$ = 8
label$ = 16
raw$ = 48
?DecodeLabel@@YA?AUxlabel@@_K@Z PROC			; DecodeLabel
; File W:\cpp\void\alistar\ali.c
; Line 299
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 302
	mov	rax, QWORD PTR raw$[rsp]
	and	rax, 7
	mov	DWORD PTR fmt$[rsp], eax
; Line 303
	mov	rax, QWORD PTR raw$[rsp]
	shr	rax, 3
	mov	DWORD PTR tag$[rsp], eax
; Line 306
	cmp	DWORD PTR fmt$[rsp], 0
	jne	SHORT $LN2@DecodeLabe
	mov	DWORD PTR bit$[rsp], 5
	jmp	SHORT $LN3@DecodeLabe
$LN2@DecodeLabe:
; Line 307
	cmp	DWORD PTR fmt$[rsp], 1
	jne	SHORT $LN4@DecodeLabe
	mov	DWORD PTR bit$[rsp], 10
	jmp	SHORT $LN5@DecodeLabe
$LN4@DecodeLabe:
; Line 308
	cmp	DWORD PTR fmt$[rsp], 2
	jne	SHORT $LN6@DecodeLabe
	mov	DWORD PTR bit$[rsp], 8
	jmp	SHORT $LN7@DecodeLabe
$LN6@DecodeLabe:
; Line 309
	cmp	DWORD PTR fmt$[rsp], 5
	jne	SHORT $LN8@DecodeLabe
	mov	DWORD PTR bit$[rsp], 9
	jmp	SHORT $LN9@DecodeLabe
$LN8@DecodeLabe:
	mov	DWORD PTR bit$[rsp], 0
$LN9@DecodeLabe:
$LN7@DecodeLabe:
$LN5@DecodeLabe:
$LN3@DecodeLabe:
; Line 311
	mov	eax, DWORD PTR bit$[rsp]
	mov	DWORD PTR label$[rsp], eax
; Line 312
	mov	eax, DWORD PTR tag$[rsp]
	mov	DWORD PTR label$[rsp+4], eax
; Line 313
	mov	rax, QWORD PTR label$[rsp]
; Line 314
	add	rsp, 40					; 00000028H
	ret	0
?DecodeLabel@@YA?AUxlabel@@_K@Z ENDP			; DecodeLabel
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
raw$ = 0
bit$ = 32
tag$ = 40
?EncodeLabel@@YAIHH@Z PROC				; EncodeLabel
; File W:\cpp\void\alistar\ali.c
; Line 292
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 293
	mov	eax, DWORD PTR tag$[rsp]
	shl	eax, 3
	or	eax, DWORD PTR bit$[rsp]
	mov	DWORD PTR raw$[rsp], eax
; Line 294
	mov	eax, DWORD PTR raw$[rsp]
; Line 295
	add	rsp, 24
	ret	0
?EncodeLabel@@YAIHH@Z ENDP				; EncodeLabel
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 8
?PeekFloat32@@YAMPEAE@Z PROC				; PeekFloat32
; File W:\cpp\void\alistar\ali.c
; Line 280
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR cur$[rsp]
	movss	xmm0, DWORD PTR [rax]
; Line 281
	ret	0
?PeekFloat32@@YAMPEAE@Z ENDP				; PeekFloat32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 48
tv88 = 52
len$ = 56
res$ = 64
tst$ = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 232
cur$ = 288
val$ = 296
?WriteVarint@@YAPEAEPEAE_K@Z PROC			; WriteVarint
; File W:\cpp\void\alistar\ali.c
; Line 259
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
; Line 260
	mov	rdx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	call	?WriteVarint_@@YAPEAEPEAE_K@Z		; WriteVarint_
	mov	QWORD PTR res$[rsp], rax
; Line 265
	lea	rdx, QWORD PTR tst$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	call	?PeekVarint@@YAHPEAEPEA_K@Z		; PeekVarint
	mov	DWORD PTR len$[rsp], eax
; Line 266
	mov	DWORD PTR [rsp+32], 169			; 000000a9H
	mov	r9d, 266				; 0000010aH
	lea	r8, OFFSET FLAT:$SG170315
	lea	rdx, OFFSET FLAT:$SG170316
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR tst$[rsp], rax
	jne	SHORT $LN3@WriteVarin
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@WriteVarin
$LN3@WriteVarin:
	mov	DWORD PTR tv73[rsp], 0
$LN4@WriteVarin:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170313
	mov	r8d, DWORD PTR tv73[rsp]
	lea	rdx, OFFSET FLAT:$SG170314
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	mov	DWORD PTR [rsp+32], 170			; 000000aaH
	mov	r9d, 267				; 0000010bH
	lea	r8, OFFSET FLAT:$SG170319
	lea	rdx, OFFSET FLAT:$SG170320
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	mov	rdx, QWORD PTR res$[rsp]
	sub	rdx, rcx
	mov	rcx, rdx
	cmp	rax, rcx
	jne	SHORT $LN5@WriteVarin
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN6@WriteVarin
$LN5@WriteVarin:
	mov	DWORD PTR tv88[rsp], 0
$LN6@WriteVarin:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170317
	mov	r8d, DWORD PTR tv88[rsp]
	lea	rdx, OFFSET FLAT:$SG170318
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 270
	mov	rax, QWORD PTR res$[rsp]
; Line 271
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?WriteVarint@@YAPEAEPEAE_K@Z ENDP			; WriteVarint
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 8
val$ = 16
?WriteVarint_@@YAPEAEPEAE_K@Z PROC			; WriteVarint_
; File W:\cpp\void\alistar\ali.c
; Line 250
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	jmp	SHORT $LN4@WriteVarin
$LN2@WriteVarin:
	mov	rax, QWORD PTR val$[rsp]
	shr	rax, 7
	mov	QWORD PTR val$[rsp], rax
$LN4@WriteVarin:
	cmp	QWORD PTR val$[rsp], 128		; 00000080H
	jb	SHORT $LN3@WriteVarin
; Line 251
	mov	rax, QWORD PTR val$[rsp]
	bts	rax, 7
	mov	rcx, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
; Line 252
	jmp	SHORT $LN2@WriteVarin
$LN3@WriteVarin:
; Line 253
	mov	rax, QWORD PTR cur$[rsp]
	movzx	ecx, BYTE PTR val$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
; Line 254
	mov	rax, QWORD PTR cur$[rsp]
; Line 255
	ret	0
?WriteVarint_@@YAPEAEPEAE_K@Z ENDP			; WriteVarint_
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 8
val$ = 16
?WriteFloat64@@YAPEAEPEAEN@Z PROC			; WriteFloat64
; File W:\cpp\void\alistar\ali.c
; Line 242
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
; Line 243
	mov	rax, QWORD PTR cur$[rsp]
	movsd	xmm0, QWORD PTR val$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 244
	mov	rax, QWORD PTR cur$[rsp]
	add	rax, 4
	mov	QWORD PTR cur$[rsp], rax
; Line 245
	mov	rax, QWORD PTR cur$[rsp]
; Line 246
	ret	0
?WriteFloat64@@YAPEAEPEAEN@Z ENDP			; WriteFloat64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 8
val$ = 16
?WriteFloat32@@YAPEAEPEAEM@Z PROC			; WriteFloat32
; File W:\cpp\void\alistar\ali.c
; Line 234
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
; Line 235
	mov	rax, QWORD PTR cur$[rsp]
	movss	xmm0, DWORD PTR val$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 236
	mov	rax, QWORD PTR cur$[rsp]
	add	rax, 4
	mov	QWORD PTR cur$[rsp], rax
; Line 237
	mov	rax, QWORD PTR cur$[rsp]
; Line 238
	ret	0
?WriteFloat32@@YAPEAEPEAEM@Z ENDP			; WriteFloat32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 0
chr$ = 4
tv67 = 8
val$ = 16
bit$ = 24
cur$ = 48
res$ = 56
?PeekVarint@@YAHPEAEPEA_K@Z PROC			; PeekVarint
; File W:\cpp\void\alistar\ali.c
; Line 218
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 220
	mov	DWORD PTR len$[rsp], 0
; Line 221
	mov	QWORD PTR val$[rsp], 0
$LN4@PeekVarint:
; Line 223
	mov	rax, QWORD PTR cur$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv67[rsp], eax
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR chr$[rsp], eax
; Line 224
	mov	eax, DWORD PTR chr$[rsp]
	and	eax, 127				; 0000007fH
	cdqe
	mov	QWORD PTR bit$[rsp], rax
; Line 225
	imul	eax, DWORD PTR len$[rsp], 7
	movzx	ecx, al
	mov	rax, QWORD PTR bit$[rsp]
	shl	rax, cl
	mov	rcx, QWORD PTR val$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR val$[rsp], rax
; Line 226
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 227
	mov	eax, DWORD PTR chr$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN4@PeekVarint
; Line 228
	mov	rax, QWORD PTR res$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 229
	mov	eax, DWORD PTR len$[rsp]
; Line 230
	add	rsp, 40					; 00000028H
	ret	0
?PeekVarint@@YAHPEAEPEA_K@Z ENDP			; PeekVarint
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 0
val$ = 32
?VarintSize@@YAH_K@Z PROC				; VarintSize
; File W:\cpp\void\alistar\ali.c
; Line 211
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 212
	mov	DWORD PTR len$[rsp], 1
	jmp	SHORT $LN4@VarintSize
$LN2@VarintSize:
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
	mov	rax, QWORD PTR val$[rsp]
	shr	rax, 7
	mov	QWORD PTR val$[rsp], rax
$LN4@VarintSize:
	cmp	QWORD PTR val$[rsp], 128		; 00000080H
	jb	SHORT $LN3@VarintSize
	jmp	SHORT $LN2@VarintSize
$LN3@VarintSize:
; Line 213
	mov	eax, DWORD PTR len$[rsp]
; Line 214
	add	rsp, 24
	ret	0
?VarintSize@@YAH_K@Z ENDP				; VarintSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 48
$T1 = 56
$T2 = 80
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 200
msg$ = 256
?ReturnDecodeError@@YAHPEB_W@Z PROC			; ReturnDecodeError
; File W:\cpp\void\alistar\ali.c
; Line 204
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	mov	DWORD PTR [rsp+32], 167			; 000000a7H
	mov	r9d, 204				; 000000ccH
	lea	r8, OFFSET FLAT:$SG170260
	lea	rdx, OFFSET FLAT:$SG170261
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR msg$[rsp]
	lea	r8, OFFSET FLAT:$SG170259
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 205
	mov	DWORD PTR [rsp+32], 168			; 000000a8H
	mov	r9d, 205				; 000000cdH
	lea	r8, OFFSET FLAT:$SG170265
	lea	rdx, OFFSET FLAT:$SG170266
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG170263
	test	rax, rax
	jne	SHORT $LN3@ReturnDeco
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN4@ReturnDeco
$LN3@ReturnDeco:
	mov	DWORD PTR tv78[rsp], 0
$LN4@ReturnDeco:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG170262
	mov	r8d, DWORD PTR tv78[rsp]
	lea	rdx, OFFSET FLAT:$SG170264
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 206
	xor	eax, eax
; Line 207
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?ReturnDecodeError@@YAHPEB_W@Z ENDP			; ReturnDecodeError
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sze$1 = 32
tv182 = 36
blc$2 = 40
enc$ = 48
rem$3 = 56
res$4 = 64
res$5 = 72
res$6 = 80
mem$ = 112
len$ = 120
str$ = 128
?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z PROC		; zsnew
; File W:\cpp\void\alistar\ali.c
; Line 114
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 123
	mov	rax, QWORD PTR len$[rsp]
	add	rax, 8
	mov	QWORD PTR enc$[rsp], rax
; Line 125
	mov	rax, QWORD PTR mem$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	QWORD PTR enc$[rsp], rax
	jbe	$LN2@zsnew
; Line 130
	mov	rax, QWORD PTR mem$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR sze$1[rsp], eax
; Line 131
	mov	eax, DWORD PTR sze$1[rsp]
	shr	eax, 1
	mov	ecx, 512				; 00000200H
	mov	DWORD PTR tv182[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv182[rsp]
	shl	eax, cl
	mov	DWORD PTR sze$1[rsp], eax
; Line 132
	cmp	DWORD PTR sze$1[rsp], 65535		; 0000ffffH
	jbe	SHORT $LN4@zsnew
; Line 133
	mov	rax, QWORD PTR mem$[rsp]
	mov	eax, DWORD PTR [rax+4]
	inc	eax
	mov	rcx, QWORD PTR mem$[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN4@zsnew:
; Line 137
	mov	eax, DWORD PTR sze$1[rsp]
	cmp	QWORD PTR enc$[rsp], rax
	jbe	$LN5@zsnew
; Line 139
	mov	rax, QWORD PTR enc$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR blc$2[rsp], rax
; Line 142
	mov	rax, QWORD PTR mem$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN7@zsnew
; Line 145
	mov	rax, QWORD PTR mem$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR blc$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax
; Line 146
	mov	rax, QWORD PTR mem$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR blc$2[rsp]
	mov	QWORD PTR [rax], rcx
; Line 147
	jmp	SHORT $LN8@zsnew
$LN7@zsnew:
; Line 149
	mov	rax, QWORD PTR blc$2[rsp]
	mov	QWORD PTR [rax], 0
; Line 150
	mov	rax, QWORD PTR mem$[rsp]
	mov	DWORD PTR [rax], 0
; Line 151
	mov	rax, QWORD PTR mem$[rsp]
	mov	rcx, QWORD PTR blc$2[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN8@zsnew:
; Line 155
	mov	rax, QWORD PTR blc$2[rsp]
	add	rax, 8
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, rax
	call	?zsmov@@YAPEADPEAX_KPEBX@Z		; zsmov
	mov	QWORD PTR res$6[rsp], rax
; Line 157
	mov	rax, QWORD PTR res$6[rsp]
	jmp	$LN1@zsnew
; Line 158
	jmp	$LN6@zsnew
$LN5@zsnew:
; Line 163
	mov	eax, DWORD PTR sze$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR blc$2[rsp], rax
; Line 166
	mov	eax, DWORD PTR sze$1[rsp]
	sub	rax, QWORD PTR enc$[rsp]
	mov	QWORD PTR rem$3[rsp], rax
; Line 168
	mov	rax, QWORD PTR mem$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	QWORD PTR rem$3[rsp], rax
	jbe	SHORT $LN9@zsnew
; Line 170
	mov	rax, QWORD PTR blc$2[rsp]
	mov	rcx, QWORD PTR mem$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 171
	mov	rax, QWORD PTR mem$[rsp]
	mov	rcx, QWORD PTR blc$2[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 172
	jmp	SHORT $LN10@zsnew
$LN9@zsnew:
; Line 177
	mov	rax, QWORD PTR mem$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR blc$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax
; Line 178
	mov	rax, QWORD PTR mem$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR blc$2[rsp]
	mov	QWORD PTR [rax], rcx
$LN10@zsnew:
; Line 181
	mov	rax, QWORD PTR mem$[rsp]
	mov	ecx, DWORD PTR rem$3[rsp]
	mov	DWORD PTR [rax], ecx
; Line 185
	mov	rax, QWORD PTR blc$2[rsp]
	mov	rcx, QWORD PTR rem$3[rsp]
	lea	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR res$4[rsp], rax
; Line 186
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR res$4[rsp]
	call	?zsmov@@YAPEADPEAX_KPEBX@Z		; zsmov
	mov	QWORD PTR res$4[rsp], rax
; Line 188
	mov	rax, QWORD PTR res$4[rsp]
	jmp	SHORT $LN1@zsnew
$LN6@zsnew:
; Line 190
	jmp	SHORT $LN3@zsnew
$LN2@zsnew:
; Line 194
	mov	rax, QWORD PTR mem$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR mem$[rsp]
	mov	ecx, DWORD PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx+8]
	sub	rax, QWORD PTR enc$[rsp]
	mov	QWORD PTR res$5[rsp], rax
; Line 195
	mov	rax, QWORD PTR mem$[rsp]
	mov	ecx, DWORD PTR enc$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	rcx, QWORD PTR mem$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 197
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR res$5[rsp]
	call	?zsmov@@YAPEADPEAX_KPEBX@Z		; zsmov
	mov	QWORD PTR res$5[rsp], rax
; Line 198
	mov	rax, QWORD PTR res$5[rsp]
$LN3@zsnew:
$LN1@zsnew:
; Line 200
	add	rsp, 104				; 00000068H
	ret	0
?zsnew@@YAPEADPEAUzsarena@@_KPEBX@Z ENDP		; zsnew
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lbl$ = 32
mem$ = 64
len$ = 72
str$ = 80
?zsmov@@YAPEADPEAX_KPEBX@Z PROC				; zsmov
; File W:\cpp\void\alistar\ali.c
; Line 91
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 92
	mov	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR lbl$[rsp], rax
; Line 94
	mov	rax, QWORD PTR lbl$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 96
	mov	rax, QWORD PTR lbl$[rsp]
	add	rax, 4
	mov	r8, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, rax
	call	memmove
; Line 97
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR lbl$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax+4], 0
; Line 99
	mov	rax, QWORD PTR lbl$[rsp]
	add	rax, 4
; Line 100
	add	rsp, 56					; 00000038H
	ret	0
?zsmov@@YAPEADPEAX_KPEBX@Z ENDP				; zsmov
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
tv74 = 36
dbl_cur$ = 40
min_needed$ = 44
tv77 = 48
m$ = 52
p$ = 56
tv85 = 64
tv88 = 72
Array$ = 96
increment$ = 104
itemsize$ = 112
?stb__sbgrowf@@YAPEAXPEAXHH@Z PROC			; stb__sbgrowf
; File W:\cpp\void\vendor\stb\stretchy_buffer.h
; Line 204
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 205
	cmp	QWORD PTR Array$[rsp], 0
	je	SHORT $LN6@stb__sbgro
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Array$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	shl	eax, 1
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN7@stb__sbgro
$LN6@stb__sbgro:
	mov	DWORD PTR tv69[rsp], 0
$LN7@stb__sbgro:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR dbl_cur$[rsp], eax
; Line 206
	cmp	QWORD PTR Array$[rsp], 0
	je	SHORT $LN8@stb__sbgro
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Array$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv74[rsp], eax
	jmp	SHORT $LN9@stb__sbgro
$LN8@stb__sbgro:
	mov	DWORD PTR tv74[rsp], 0
$LN9@stb__sbgro:
	mov	eax, DWORD PTR increment$[rsp]
	mov	ecx, DWORD PTR tv74[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR min_needed$[rsp], eax
; Line 207
	mov	eax, DWORD PTR min_needed$[rsp]
	cmp	DWORD PTR dbl_cur$[rsp], eax
	jle	SHORT $LN10@stb__sbgro
	mov	eax, DWORD PTR dbl_cur$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN11@stb__sbgro
$LN10@stb__sbgro:
	mov	eax, DWORD PTR min_needed$[rsp]
	mov	DWORD PTR tv77[rsp], eax
$LN11@stb__sbgro:
	mov	eax, DWORD PTR tv77[rsp]
	mov	DWORD PTR m$[rsp], eax
; Line 208
	mov	eax, DWORD PTR itemsize$[rsp]
	imul	eax, DWORD PTR m$[rsp]
	cdqe
	add	rax, 8
	mov	QWORD PTR tv88[rsp], rax
	cmp	QWORD PTR Array$[rsp], 0
	je	SHORT $LN12@stb__sbgro
	mov	rax, QWORD PTR Array$[rsp]
	sub	rax, 8
	mov	QWORD PTR tv85[rsp], rax
	jmp	SHORT $LN13@stb__sbgro
$LN12@stb__sbgro:
	mov	QWORD PTR tv85[rsp], 0
$LN13@stb__sbgro:
	mov	rdx, QWORD PTR tv88[rsp]
	mov	rcx, QWORD PTR tv85[rsp]
	call	?mg_realloc@@YAPEAXPEAX_K@Z		; mg_realloc
	mov	QWORD PTR p$[rsp], rax
; Line 209
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stb__sbgro
; Line 210
	cmp	QWORD PTR Array$[rsp], 0
	jne	SHORT $LN4@stb__sbgro
; Line 211
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx+rax], 0
$LN4@stb__sbgro:
; Line 212
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	mov	edx, DWORD PTR m$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 213
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	jmp	SHORT $LN1@stb__sbgro
; Line 214
	jmp	SHORT $LN3@stb__sbgro
$LN2@stb__sbgro:
; Line 218
	mov	eax, 8
$LN3@stb__sbgro:
$LN1@stb__sbgro:
; Line 220
	add	rsp, 88					; 00000058H
	ret	0
?stb__sbgrowf@@YAPEAXPEAXHH@Z ENDP			; stb__sbgrowf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
dst$ = 64
end$ = 72
src$ = 80
?mg_str_append@@YA_KPEAPEADPEADPEBD@Z PROC		; mg_str_append
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21432
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 21433
	mov	rcx, QWORD PTR src$[rsp]
	call	strlen
	mov	QWORD PTR len$[rsp], rax
; Line 21434
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@mg_str_app
; Line 21436
	mov	rax, QWORD PTR dst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR len$[rsp]
	jbe	SHORT $LN3@mg_str_app
; Line 21437
	mov	rdx, QWORD PTR src$[rsp]
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcpy
; Line 21438
	mov	rax, QWORD PTR dst$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 21439
	jmp	SHORT $LN4@mg_str_app
$LN3@mg_str_app:
; Line 21440
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	mov	QWORD PTR [rax], rcx
$LN4@mg_str_app:
$LN2@mg_str_app:
; Line 21443
	mov	rax, QWORD PTR len$[rsp]
; Line 21444
	add	rsp, 56					; 00000038H
	ret	0
?mg_str_append@@YA_KPEAPEADPEADPEBD@Z ENDP		; mg_str_append
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
run_options$1 = 32
ports_option$ = 40
optname$2 = 48
options$ = 80
?legacy_init@@YAXPEAPEBD@Z PROC				; legacy_init
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 20375
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 20376
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR ports_option$[rsp], rax
; Line 20378
	cmp	QWORD PTR options$[rsp], 0
	je	SHORT $LN4@legacy_ini
; Line 20379
	mov	rax, QWORD PTR options$[rsp]
	mov	QWORD PTR run_options$1[rsp], rax
; Line 20380
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR optname$2[rsp], rax
$LN2@legacy_ini:
; Line 20383
	mov	rax, QWORD PTR run_options$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@legacy_ini
; Line 20384
	mov	rdx, QWORD PTR optname$2[rsp]
	mov	rax, QWORD PTR run_options$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN5@legacy_ini
; Line 20385
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR run_options$1[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR ports_option$[rsp], rax
$LN5@legacy_ini:
; Line 20387
	mov	rax, QWORD PTR run_options$1[rsp]
	add	rax, 16
	mov	QWORD PTR run_options$1[rsp], rax
; Line 20388
	jmp	SHORT $LN2@legacy_ini
$LN3@legacy_ini:
$LN4@legacy_ini:
; Line 20391
	mov	rcx, QWORD PTR ports_option$[rsp]
	call	?is_ssl_port_used@@YAHPEBD@Z		; is_ssl_port_used
	test	eax, eax
	je	SHORT $LN6@legacy_ini
; Line 20393
	mov	ecx, 2
	call	mg_init_library
; Line 20394
	jmp	SHORT $LN7@legacy_ini
$LN6@legacy_ini:
; Line 20396
	xor	ecx, ecx
	call	mg_init_library
$LN7@legacy_ini:
; Line 20398
	add	rsp, 72					; 00000048H
	ret	0
?legacy_init@@YAXPEAPEBD@Z ENDP				; legacy_init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dwVersion$ = 48
tv86 = 52
isWoW$ = 56
dwMinorVersion$ = 60
dwMajorVersion$ = 64
dwBuild$ = 68
wowRet$ = 72
tv93 = 80
tv95 = 88
name$ = 96
__$ArrayPad$ = 224
sysName$ = 256
?get_system_name@@YAXPEAPEAD@Z PROC			; get_system_name
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 20328
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 20331
	mov	DWORD PTR dwVersion$[rsp], 0
; Line 20332
	mov	DWORD PTR dwMajorVersion$[rsp], 0
; Line 20333
	mov	DWORD PTR dwMinorVersion$[rsp], 0
; Line 20334
	mov	DWORD PTR dwBuild$[rsp], 0
; Line 20335
	mov	DWORD PTR isWoW$[rsp], 0
; Line 20342
	call	QWORD PTR __imp_GetVersion
	mov	DWORD PTR dwVersion$[rsp], eax
; Line 20347
	mov	eax, DWORD PTR dwVersion$[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	and	rax, 255				; 000000ffH
	movzx	eax, al
	mov	DWORD PTR dwMajorVersion$[rsp], eax
; Line 20348
	mov	eax, DWORD PTR dwVersion$[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	shr	rax, 8
	and	rax, 255				; 000000ffH
	movzx	eax, al
	mov	DWORD PTR dwMinorVersion$[rsp], eax
; Line 20349
	cmp	DWORD PTR dwVersion$[rsp], -2147483648	; 80000000H
	jae	SHORT $LN3@get_system
	mov	eax, DWORD PTR dwVersion$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	mov	DWORD PTR tv86[rsp], eax
	jmp	SHORT $LN4@get_system
$LN3@get_system:
	mov	DWORD PTR tv86[rsp], 0
$LN4@get_system:
	mov	eax, DWORD PTR tv86[rsp]
	mov	DWORD PTR dwBuild$[rsp], eax
; Line 20352
	call	QWORD PTR __imp_GetCurrentProcess
	lea	rdx, QWORD PTR isWoW$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_IsWow64Process
	mov	DWORD PTR wowRet$[rsp], eax
; Line 20354
	cmp	DWORD PTR wowRet$[rsp], 0
	je	SHORT $LN7@get_system
	cmp	DWORD PTR isWoW$[rsp], 0
	je	SHORT $LN5@get_system
	lea	rax, OFFSET FLAT:$SG169522
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN6@get_system
$LN5@get_system:
	lea	rax, OFFSET FLAT:$SG169523
	mov	QWORD PTR tv93[rsp], rax
$LN6@get_system:
	mov	rax, QWORD PTR tv93[rsp]
	mov	QWORD PTR tv95[rsp], rax
	jmp	SHORT $LN8@get_system
$LN7@get_system:
	lea	rax, OFFSET FLAT:$SG169524
	mov	QWORD PTR tv95[rsp], rax
$LN8@get_system:
	mov	rax, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR dwMinorVersion$[rsp]
	mov	r8d, DWORD PTR dwMajorVersion$[rsp]
	lea	rdx, OFFSET FLAT:$SG169525
	lea	rcx, QWORD PTR name$[rsp]
	call	sprintf
; Line 20360
	lea	rcx, QWORD PTR name$[rsp]
	call	?mg_strdup@@YAPEADPEBD@Z		; mg_strdup
	mov	rcx, QWORD PTR sysName$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 20370
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	ret	0
?get_system_name@@YAXPEAPEAD@Z ENDP			; get_system_name
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv156 = 36
callback_ret$1 = 40
tmp_rh$ = 48
tv72 = 56
ssl_ctx$2 = 64
tv155 = 72
tv165 = 80
ctx$ = 112
?free_context@@YAXPEAUmg_context@@@Z PROC		; free_context
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 20188
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 20192
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN7@free_conte
; Line 20193
	jmp	$LN1@free_conte
$LN7@free_conte:
; Line 20197
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32104], 0
	je	SHORT $LN8@free_conte
; Line 20198
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32104]
	mov	QWORD PTR tv72[rsp], rax
	mov	rcx, QWORD PTR ctx$[rsp]
	call	QWORD PTR tv72[rsp]
$LN8@free_conte:
; Line 20204
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 20215
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 184				; 000000b8H
	mov	rcx, rax
	call	?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z ; pthread_cond_destroy
; Line 20216
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	mov	rcx, rax
	call	?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z ; pthread_cond_destroy
; Line 20217
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+120]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20221
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 31944				; 00007cc8H
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 20228
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@free_conte
$LN2@free_conte:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@free_conte:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@free_conte
; Line 20229
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rcx+rax*8+32152], 0
	je	SHORT $LN9@free_conte
; Line 20233
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8+32152]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN9@free_conte:
; Line 20235
	jmp	SHORT $LN2@free_conte
$LN3@free_conte:
$LN5@free_conte:
; Line 20238
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32664], 0
	je	SHORT $LN6@free_conte
; Line 20239
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32664]
	mov	QWORD PTR tmp_rh$[rsp], rax
; Line 20240
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	QWORD PTR [rax+32664], rcx
; Line 20241
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20242
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20243
	jmp	SHORT $LN5@free_conte
$LN6@free_conte:
; Line 20254
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32144], 0
	je	$LN10@free_conte
; Line 20255
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32144]
	mov	QWORD PTR ssl_ctx$2[rsp], rax
; Line 20256
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32032], 0
	jne	SHORT $LN13@free_conte
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN14@free_conte
$LN13@free_conte:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32032]
	mov	QWORD PTR tv155[rsp], rax
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rdx, QWORD PTR [rax+32136]
	lea	rcx, QWORD PTR ssl_ctx$2[rsp]
	call	QWORD PTR tv155[rsp]
	mov	DWORD PTR tv156[rsp], eax
$LN14@free_conte:
	mov	eax, DWORD PTR tv156[rsp]
	mov	DWORD PTR callback_ret$1[rsp], eax
; Line 20261
	cmp	DWORD PTR callback_ret$1[rsp], 0
	jne	SHORT $LN11@free_conte
; Line 20262
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv165[rsp], rax
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+32144]
	call	QWORD PTR tv165[rsp]
$LN11@free_conte:
$LN10@free_conte:
; Line 20270
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+104]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20273
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20276
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+31928]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20279
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN1@free_conte:
; Line 20280
	add	rsp, 104				; 00000068H
	ret	0
?free_context@@YAXPEAUmg_context@@@Z ENDP		; free_context
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
thread_func_param$ = 48
?master_thread@@YAIPEAX@Z PROC				; master_thread
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 20163
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 20164
	mov	rcx, QWORD PTR thread_func_param$[rsp]
	call	?master_thread_run@@YAXPEAUmg_context@@@Z ; master_thread_run
; Line 20165
	xor	eax, eax
; Line 20166
	add	rsp, 40					; 00000028H
	ret	0
?master_thread@@YAIPEAX@Z ENDP				; master_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
workerthreadcount$ = 36
pfd$ = 40
tv85 = 48
tv199 = 56
tls$ = 64
ctx$ = 128
?master_thread_run@@YAXPEAUmg_context@@@Z PROC		; master_thread_run
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19984
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 19990
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN19@master_thr
; Line 19991
	jmp	$LN1@master_thr
$LN19@master_thr:
; Line 19994
	lea	rcx, OFFSET FLAT:$SG169452
	call	?mg_set_thread_name@@YAXPEBD@Z		; mg_set_thread_name
; Line 19998
	call	QWORD PTR __imp_GetCurrentThread
	mov	edx, 1
	mov	rcx, rax
	call	QWORD PTR __imp_SetThreadPriority
; Line 20013
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateEventA
	mov	QWORD PTR tls$[rsp+16], rax
; Line 20015
	mov	DWORD PTR tls$[rsp], 1
; Line 20016
	lea	rdx, QWORD PTR tls$[rsp]
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20018
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32112], 0
	je	SHORT $LN20@master_thr
; Line 20020
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32112]
	mov	QWORD PTR tv85[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR ctx$[rsp]
	call	QWORD PTR tv85[rsp]
	mov	QWORD PTR tls$[rsp+8], rax
; Line 20021
	jmp	SHORT $LN21@master_thr
$LN20@master_thr:
; Line 20022
	mov	QWORD PTR tls$[rsp+8], 0
$LN21@master_thr:
; Line 20059
	xor	ecx, ecx
	call	time
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+31936], rax
; Line 20062
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR pfd$[rsp], rax
$LN2@master_thr:
; Line 20063
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	$LN3@master_thr
; Line 20064
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@master_thr
$LN4@master_thr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@master_thr:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN5@master_thr
; Line 20065
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR pfd$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [r8+rdx], rax
; Line 20066
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	ecx, 1
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	WORD PTR [rdx+rax+8], cx
; Line 20067
	jmp	SHORT $LN4@master_thr
$LN5@master_thr:
; Line 20073
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 40					; 00000028H
	mov	r9, rax
	mov	r8d, 2000				; 000007d0H
	mov	rax, QWORD PTR ctx$[rsp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR pfd$[rsp]
	call	?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z	; mg_poll
	test	eax, eax
	jle	SHORT $LN22@master_thr
; Line 20074
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@master_thr
$LN7@master_thr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@master_thr:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@master_thr
; Line 20081
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	SHORT $LN23@master_thr
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN23@master_thr
; Line 20082
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	rcx, rax
	call	?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z ; accept_new_connection
$LN23@master_thr:
; Line 20084
	jmp	SHORT $LN7@master_thr
$LN8@master_thr:
$LN22@master_thr:
; Line 20086
	jmp	$LN2@master_thr
$LN3@master_thr:
$LN12@master_thr:
; Line 20089
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@master_thr
; Line 20092
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?close_all_listening_sockets@@YAXPEAUmg_context@@@Z ; close_all_listening_sockets
; Line 20100
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 20101
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	mov	rcx, rax
	call	?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z ; pthread_cond_broadcast
; Line 20102
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 20106
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	mov	DWORD PTR workerthreadcount$[rsp], eax
; Line 20107
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@master_thr
$LN13@master_thr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@master_thr:
	mov	eax, DWORD PTR workerthreadcount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN14@master_thr
; Line 20108
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN24@master_thr
; Line 20109
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	?mg_join_thread@@YAHPEAX@Z		; mg_join_thread
$LN24@master_thr:
; Line 20111
	jmp	SHORT $LN13@master_thr
$LN14@master_thr:
$LN18@master_thr:
; Line 20140
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@master_thr
; Line 20143
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32120], 0
	je	SHORT $LN25@master_thr
; Line 20145
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32120]
	mov	QWORD PTR tv199[rsp], rax
	mov	r8, QWORD PTR tls$[rsp+8]
	xor	edx, edx
	mov	rcx, QWORD PTR ctx$[rsp]
	call	QWORD PTR tv199[rsp]
$LN25@master_thr:
; Line 20149
	mov	rcx, QWORD PTR tls$[rsp+16]
	call	QWORD PTR __imp_CloseHandle
; Line 20151
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20156
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+40], 2
$LN1@master_thr:
; Line 20157
	add	rsp, 120				; 00000078H
	ret	0
?master_thread_run@@YAXPEAUmg_context@@@Z ENDP		; master_thread_run
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
on$ = 68
so$ = 72
src_addr$ = 120
__$ArrayPad$ = 176
listener$ = 208
ctx$ = 216
?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z PROC ; accept_new_connection
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19897
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 19900
	mov	DWORD PTR len$[rsp], 16
; Line 19902
	mov	DWORD PTR on$[rsp], 1
; Line 19904
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	lea	rcx, QWORD PTR so$[rsp]
	call	memset
; Line 19907
	lea	r8, QWORD PTR len$[rsp]
	lea	rdx, QWORD PTR so$[rsp+24]
	mov	rax, QWORD PTR listener$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_accept
	mov	QWORD PTR so$[rsp], rax
	cmp	QWORD PTR so$[rsp], -1
	jne	SHORT $LN5@accept_new
	jmp	$LN6@accept_new
$LN5@accept_new:
; Line 19908
	lea	rdx, QWORD PTR so$[rsp+24]
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z ; check_acl
	cmp	eax, 1
	je	SHORT $LN7@accept_new
; Line 19909
	lea	r8, QWORD PTR so$[rsp+24]
	mov	edx, 50					; 00000032H
	lea	rcx, QWORD PTR src_addr$[rsp]
	call	?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ; sockaddr_to_string
; Line 19910
	lea	rax, QWORD PTR src_addr$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG169406
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169407
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19913				; 00004dc9H
	lea	r8, OFFSET FLAT:$SG169408
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 19914
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 19915
	jmp	$LN8@accept_new
$LN7@accept_new:
$LN4@accept_new:
; Line 19917
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@accept_new
; Line 19918
	mov	r8, QWORD PTR ctx$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR so$[rsp]
	call	?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z ; set_close_on_exec
; Line 19919
	mov	rax, QWORD PTR listener$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	mov	BYTE PTR so$[rsp+40], al
; Line 19920
	mov	rax, QWORD PTR listener$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	mov	BYTE PTR so$[rsp+41], al
; Line 19921
	lea	r8, QWORD PTR len$[rsp]
	lea	rdx, QWORD PTR so$[rsp+8]
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_getsockname
	test	eax, eax
	je	SHORT $LN9@accept_new
; Line 19922
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG169410
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169411
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19925				; 00004dd5H
	lea	r8, OFFSET FLAT:$SG169412
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN9@accept_new:
; Line 19930
	movzx	eax, WORD PTR so$[rsp+8]
	cmp	eax, 2
	je	SHORT $LN11@accept_new
	movzx	eax, WORD PTR so$[rsp+8]
	cmp	eax, 23
	jne	SHORT $LN10@accept_new
$LN11@accept_new:
; Line 19943
	mov	DWORD PTR [rsp+32], 4
	lea	r9, QWORD PTR on$[rsp]
	mov	r8d, 8
	mov	edx, 65535				; 0000ffffH
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_setsockopt
	test	eax, eax
	je	SHORT $LN12@accept_new
; Line 19944
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG169416
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169417
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19948				; 00004decH
	lea	r8, OFFSET FLAT:$SG169418
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN12@accept_new:
$LN10@accept_new:
; Line 19961
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+32152], 0
	je	$LN13@accept_new
	mov	eax, 8
	imul	rax, rax, 3
	lea	rdx, OFFSET FLAT:$SG169420
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+32152]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN13@accept_new
; Line 19962
	mov	edx, 1
	lea	rcx, QWORD PTR so$[rsp]
	call	?set_tcp_nodelay@@YAHPEBUsocket@@H@Z	; set_tcp_nodelay
	test	eax, eax
	je	SHORT $LN14@accept_new
; Line 19963
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG169422
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169423
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19967				; 00004dffH
	lea	r8, OFFSET FLAT:$SG169424
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN14@accept_new:
$LN13@accept_new:
; Line 19974
	mov	rcx, QWORD PTR so$[rsp]
	call	?set_non_blocking_mode@@YAH_K@Z		; set_non_blocking_mode
; Line 19976
	mov	BYTE PTR so$[rsp+42], 0
; Line 19977
	lea	rdx, QWORD PTR so$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z ; produce_socket
$LN8@accept_new:
$LN6@accept_new:
; Line 19979
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
?accept_new_connection@@YAXPEBUsocket@@PEAUmg_context@@@Z ENDP ; accept_new_connection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
thread_func_param$ = 48
?worker_thread@@YAIPEAX@Z PROC				; worker_thread
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19870
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 19871
	mov	rcx, QWORD PTR thread_func_param$[rsp]
	call	?worker_thread_run@@YAXPEAUmg_connection@@@Z ; worker_thread_run
; Line 19872
	xor	eax, eax
; Line 19873
	add	rsp, 40					; 00000028H
	ret	0
?worker_thread@@YAIPEAX@Z ENDP				; worker_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
thread_index$ = 56
tv85 = 64
tv254 = 72
tv287 = 80
tls$ = 88
client_cert$1 = 128
conn$ = 192
?worker_thread_run@@YAXPEAUmg_connection@@@Z PROC	; worker_thread_run
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19644
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 19645
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	QWORD PTR ctx$[rsp], rax
; Line 19649
	lea	rcx, OFFSET FLAT:$SG169360
	call	?mg_set_thread_name@@YAXPEBD@Z		; mg_set_thread_name
; Line 19651
	mov	DWORD PTR tls$[rsp], 0
; Line 19652
	lea	rcx, OFFSET FLAT:?thread_idx_max@@3_JC
	call	?mg_atomic_inc@@YA_JPEC_J@Z		; mg_atomic_inc
	mov	DWORD PTR tls$[rsp+4], eax
; Line 19654
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateEventA
	mov	QWORD PTR tls$[rsp+16], rax
; Line 19658
	lea	rdx, QWORD PTR tls$[rsp]
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 19661
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32112], 0
	je	SHORT $LN13@worker_thr
; Line 19664
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32112]
	mov	QWORD PTR tv85[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	QWORD PTR tv85[rsp]
	mov	QWORD PTR tls$[rsp+8], rax
; Line 19665
	jmp	SHORT $LN14@worker_thr
$LN13@worker_thr:
; Line 19667
	mov	QWORD PTR tls$[rsp+8], 0
$LN14@worker_thr:
; Line 19671
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR conn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 2520				; 000009d8H
	idiv	rcx
	mov	DWORD PTR thread_index$[rsp], eax
; Line 19673
	cmp	DWORD PTR thread_index$[rsp], 0
	jl	SHORT $LN16@worker_thr
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR thread_index$[rsp], eax
	jb	SHORT $LN15@worker_thr
$LN16@worker_thr:
; Line 19674
	mov	eax, DWORD PTR thread_index$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG169365
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19676				; 00004cdcH
	lea	r8, OFFSET FLAT:$SG169366
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 19677
	jmp	$LN1@worker_thr
$LN15@worker_thr:
; Line 19683
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+240]
	mov	ecx, eax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2400], rax
; Line 19684
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2400], 0
	jne	SHORT $LN17@worker_thr
; Line 19685
	mov	eax, DWORD PTR thread_index$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG169368
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19688				; 00004ce8H
	lea	r8, OFFSET FLAT:$SG169369
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 19689
	jmp	$LN1@worker_thr
$LN17@worker_thr:
; Line 19691
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR [rcx+240]
	mov	DWORD PTR [rax+2436], ecx
; Line 19693
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2280], rax
; Line 19695
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR tls$[rsp+8]
	mov	QWORD PTR [rax+2512], rcx
; Line 19697
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+32136]
	mov	QWORD PTR [rax+144], rcx
; Line 19701
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	mov	rcx, rax
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	test	eax, eax
	je	SHORT $LN18@worker_thr
; Line 19702
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2400]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19703
	lea	rax, OFFSET FLAT:$SG169371
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169372
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19703				; 00004cf7H
	lea	r8, OFFSET FLAT:$SG169373
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 19704
	jmp	$LN1@worker_thr
$LN18@worker_thr:
$LN2@worker_thr:
; Line 19714
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2296				; 000008f8H
	mov	r8d, DWORD PTR thread_index$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z ; consume_socket
	test	eax, eax
	je	$LN3@worker_thr
; Line 19717
	mov	QWORD PTR tls$[rsp+32], 0
; Line 19722
	xor	ecx, ecx
	call	time
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2344], rax
; Line 19728
	mov	rax, QWORD PTR conn$[rsp]
	movzx	ecx, WORD PTR [rax+2322]
	call	QWORD PTR __imp_ntohs
	movzx	eax, ax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+128], eax
; Line 19731
	mov	rax, QWORD PTR conn$[rsp]
	movzx	ecx, WORD PTR [rax+2306]
	call	QWORD PTR __imp_ntohs
	movzx	eax, ax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+132], eax
; Line 19734
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2320				; 00000910H
	mov	rcx, QWORD PTR conn$[rsp]
	add	rcx, 72					; 00000048H
	mov	r8, rax
	mov	edx, 48					; 00000030H
	call	?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ; sockaddr_to_string
$LN6@worker_thr:
; Line 19738
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN6@worker_thr
; Line 19742
	mov	rax, QWORD PTR conn$[rsp]
	movzx	eax, BYTE PTR [rax+2336]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+136], eax
; Line 19744
	mov	rax, QWORD PTR conn$[rsp]
	movzx	eax, BYTE PTR [rax+2336]
	test	eax, eax
	je	$LN19@worker_thr
; Line 19766
	mov	eax, 24
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	xor	r8d, r8d
	mov	rdx, QWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z ; sslize
	test	eax, eax
	je	$LN21@worker_thr
; Line 19771
	lea	rdx, QWORD PTR client_cert$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z ; ssl_get_client_cert_info
	test	eax, eax
	je	SHORT $LN23@worker_thr
; Line 19772
	mov	rax, QWORD PTR conn$[rsp]
	lea	rcx, QWORD PTR client_cert$1[rsp]
	mov	QWORD PTR [rax+1192], rcx
$LN23@worker_thr:
; Line 19791
	mov	rcx, QWORD PTR conn$[rsp]
	call	?init_connection@@YAXPEAUmg_connection@@@Z ; init_connection
; Line 19792
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax], 1
; Line 19794
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 19795
	mov	rcx, QWORD PTR conn$[rsp]
	call	?process_new_connection@@YAXPEAUmg_connection@@@Z ; process_new_connection
; Line 19799
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+1192], 0
	je	$LN24@worker_thr
; Line 19800
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	rcx, QWORD PTR [rax+8]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19801
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	rcx, QWORD PTR [rax+16]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19802
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	rcx, QWORD PTR [rax+24]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19803
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	rcx, QWORD PTR [rax+32]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19805
	mov	eax, 24
	imul	rax, rax, 11
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv254[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv254[rsp]
; Line 19807
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	QWORD PTR [rax], 0
; Line 19808
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	QWORD PTR [rax+8], 0
; Line 19809
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	QWORD PTR [rax+16], 0
; Line 19810
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	QWORD PTR [rax+24], 0
; Line 19811
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1192]
	mov	QWORD PTR [rax+32], 0
; Line 19812
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+1192], 0
$LN24@worker_thr:
; Line 19814
	jmp	SHORT $LN22@worker_thr
$LN21@worker_thr:
; Line 19816
	mov	rcx, QWORD PTR conn$[rsp]
	call	?close_connection@@YAXPEAUmg_connection@@@Z ; close_connection
$LN22@worker_thr:
; Line 19820
	jmp	SHORT $LN20@worker_thr
$LN19@worker_thr:
; Line 19822
	mov	rcx, QWORD PTR conn$[rsp]
	call	?init_connection@@YAXPEAUmg_connection@@@Z ; init_connection
; Line 19823
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax], 1
; Line 19825
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 19826
	mov	rcx, QWORD PTR conn$[rsp]
	call	?process_new_connection@@YAXPEAUmg_connection@@@Z ; process_new_connection
$LN20@worker_thr:
$LN9@worker_thr:
; Line 19829
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@worker_thr
; Line 19834
	jmp	$LN2@worker_thr
$LN3@worker_thr:
; Line 19837
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32120], 0
	je	SHORT $LN25@worker_thr
; Line 19838
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32120]
	mov	QWORD PTR tv287[rsp], rax
	mov	r8, QWORD PTR tls$[rsp+8]
	mov	edx, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	QWORD PTR tv287[rsp]
$LN25@worker_thr:
; Line 19842
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 19844
	mov	rcx, QWORD PTR tls$[rsp+16]
	call	QWORD PTR __imp_CloseHandle
; Line 19846
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 19849
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2436], 0
; Line 19850
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2400]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19851
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2400], 0
; Line 19854
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	cmp	QWORD PTR [rax+40], rcx
	je	SHORT $LN26@worker_thr
; Line 19855
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19856
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+40], 0
$LN26@worker_thr:
$LN12@worker_thr:
; Line 19863
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@worker_thr
$LN1@worker_thr:
; Line 19864
	add	rsp, 184				; 000000b8H
	ret	0
?worker_thread_run@@YAXPEAUmg_connection@@@Z ENDP	; worker_thread_run
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
queue_filled$ = 32
ctx$ = 80
sp$ = 88
?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z PROC	; produce_socket
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19601
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 19604
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 19606
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR [rcx+132]
	sub	eax, ecx
	mov	DWORD PTR queue_filled$[rsp], eax
$LN2@produce_so:
; Line 19610
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	SHORT $LN3@produce_so
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+236]
	cmp	DWORD PTR queue_filled$[rsp], eax
	jl	SHORT $LN3@produce_so
; Line 19611
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+232], 1
; Line 19617
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	add	rcx, 184				; 000000b8H
	mov	rdx, rax
	call	?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z ; pthread_cond_wait
; Line 19618
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+232], 0
; Line 19619
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR [rcx+132]
	sub	eax, ecx
	mov	DWORD PTR queue_filled$[rsp], eax
; Line 19620
	jmp	SHORT $LN2@produce_so
$LN3@produce_so:
; Line 19622
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+236]
	cmp	DWORD PTR queue_filled$[rsp], eax
	jge	SHORT $LN7@produce_so
; Line 19624
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	cdq
	mov	rcx, QWORD PTR ctx$[rsp]
	idiv	DWORD PTR [rcx+236]
	mov	eax, edx
	cdqe
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR sp$[rsp]
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 19625
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	inc	eax
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+128], eax
$LN6@produce_so:
; Line 19626
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN6@produce_so
$LN7@produce_so:
; Line 19629
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR [rcx+132]
	sub	eax, ecx
	mov	DWORD PTR queue_filled$[rsp], eax
; Line 19636
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	mov	rcx, rax
	call	?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z ; pthread_cond_signal
; Line 19637
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 19638
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?produce_socket@@YAXPEAUmg_context@@PEBUsocket@@@Z ENDP	; produce_socket
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv152 = 32
ctx$ = 80
sp$ = 88
thread_index$ = 96
?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z PROC ; consume_socket
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19564
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 19567
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
$LN4@consume_so:
; Line 19568
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@consume_so
$LN5@consume_so:
; Line 19572
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR [rcx+132]
	cmp	eax, ecx
	jne	SHORT $LN6@consume_so
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	SHORT $LN6@consume_so
; Line 19573
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	add	rcx, 136				; 00000088H
	mov	rdx, rax
	call	?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z ; pthread_cond_wait
; Line 19574
	jmp	SHORT $LN5@consume_so
$LN6@consume_so:
; Line 19577
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR [rcx+132]
	cmp	eax, ecx
	jle	$LN12@consume_so
; Line 19579
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+132]
	cdq
	mov	rcx, QWORD PTR ctx$[rsp]
	idiv	DWORD PTR [rcx+236]
	mov	eax, edx
	cdqe
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	mov	rdi, QWORD PTR sp$[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 19580
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+132]
	inc	eax
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+132], eax
$LN9@consume_so:
; Line 19582
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@consume_so
$LN10@consume_so:
; Line 19585
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+132]
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	eax, DWORD PTR [rcx+236]
	jle	SHORT $LN11@consume_so
; Line 19586
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+132]
	mov	rcx, QWORD PTR ctx$[rsp]
	sub	eax, DWORD PTR [rcx+236]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+132], eax
; Line 19587
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+128]
	mov	rcx, QWORD PTR ctx$[rsp]
	sub	eax, DWORD PTR [rcx+236]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+128], eax
; Line 19588
	jmp	SHORT $LN10@consume_so
$LN11@consume_so:
$LN12@consume_so:
; Line 19591
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 184				; 000000b8H
	mov	rcx, rax
	call	?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z ; pthread_cond_signal
; Line 19592
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 19594
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	SHORT $LN14@consume_so
	mov	DWORD PTR tv152[rsp], 1
	jmp	SHORT $LN15@consume_so
$LN14@consume_so:
	mov	DWORD PTR tv152[rsp], 0
$LN15@consume_so:
	mov	eax, DWORD PTR tv152[rsp]
; Line 19595
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?consume_socket@@YAHPEAUmg_context@@PEAUsocket@@H@Z ENDP ; consume_socket
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv139 = 48
ri$ = 56
reqerr$ = 64
tv230 = 68
tv245 = 72
discard_len$ = 76
keep_alive$ = 80
uri_type$ = 84
hostend$ = 88
ebuf$ = 96
__$ArrayPad$ = 208
conn$ = 240
?process_new_connection@@YAXPEAUmg_connection@@@Z PROC	; process_new_connection
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19308
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 19309
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	QWORD PTR ri$[rsp], rax
$LN4@process_ne:
; Line 19321
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@process_ne
$LN7@process_ne:
$LN10@process_ne:
; Line 19327
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@process_ne
; Line 19334
	lea	r9, QWORD PTR reqerr$[rsp]
	mov	r8d, 100				; 00000064H
	lea	rdx, QWORD PTR ebuf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ; get_request
	test	eax, eax
	jne	SHORT $LN25@process_ne
; Line 19338
	cmp	DWORD PTR reqerr$[rsp], 0
	jle	SHORT $LN27@process_ne
; Line 19340
	lea	r9, QWORD PTR ebuf$[rsp]
	lea	r8, OFFSET FLAT:$SG169263
	mov	edx, DWORD PTR reqerr$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN27@process_ne:
; Line 19343
	jmp	$LN26@process_ne
$LN25@process_ne:
; Line 19344
	lea	rdx, OFFSET FLAT:$SG169265
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	strcmp
	test	eax, eax
	je	SHORT $LN28@process_ne
	lea	rdx, OFFSET FLAT:$SG169266
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	strcmp
	test	eax, eax
	je	SHORT $LN28@process_ne
; Line 19346
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169267
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 100				; 00000064H
	lea	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 19352
	lea	r9, QWORD PTR ebuf$[rsp]
	lea	r8, OFFSET FLAT:$SG169268
	mov	edx, 505				; 000001f9H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN28@process_ne:
$LN26@process_ne:
; Line 19355
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR ebuf$[rsp+rax]
	test	eax, eax
	jne	$LN29@process_ne
; Line 19356
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?get_uri_type@@YAHPEBD@Z		; get_uri_type
	mov	DWORD PTR uri_type$[rsp], eax
; Line 19357
	mov	eax, DWORD PTR uri_type$[rsp]
	mov	DWORD PTR tv139[rsp], eax
	cmp	DWORD PTR tv139[rsp], 1
	je	SHORT $LN30@process_ne
	cmp	DWORD PTR tv139[rsp], 2
	je	SHORT $LN31@process_ne
	cmp	DWORD PTR tv139[rsp], 3
	je	SHORT $LN32@process_ne
	cmp	DWORD PTR tv139[rsp], 4
	je	SHORT $LN33@process_ne
	jmp	SHORT $LN36@process_ne
$LN30@process_ne:
; Line 19360
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+32], 0
; Line 19362
	jmp	$LN11@process_ne
$LN31@process_ne:
; Line 19365
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+32], rcx
; Line 19367
	jmp	$LN11@process_ne
$LN32@process_ne:
$LN33@process_ne:
; Line 19371
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z ; get_rel_url_at_current_server
	mov	QWORD PTR hostend$[rsp], rax
; Line 19373
	cmp	QWORD PTR hostend$[rsp], 0
	je	SHORT $LN34@process_ne
; Line 19374
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR hostend$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 19375
	jmp	SHORT $LN35@process_ne
$LN34@process_ne:
; Line 19376
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+32], 0
$LN35@process_ne:
; Line 19378
	jmp	SHORT $LN11@process_ne
$LN36@process_ne:
; Line 19380
	lea	rax, OFFSET FLAT:$SG169277
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 100				; 00000064H
	lea	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 19385
	lea	r9, QWORD PTR ebuf$[rsp]
	lea	r8, OFFSET FLAT:$SG169278
	mov	edx, 400				; 00000190H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 19386
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+32], 0
$LN11@process_ne:
; Line 19389
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+40], rcx
$LN29@process_ne:
; Line 19393
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR ebuf$[rsp+rax]
	test	eax, eax
	je	SHORT $LN37@process_ne
; Line 19394
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+4], -1
; Line 19396
	jmp	SHORT $LN38@process_ne
$LN37@process_ne:
; Line 19398
	mov	rcx, QWORD PTR conn$[rsp]
	call	?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z ; should_switch_to_protocol
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 19400
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 2
	jne	SHORT $LN39@process_ne
; Line 19407
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+4], 0
$LN39@process_ne:
$LN38@process_ne:
$LN15@process_ne:
; Line 19411
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN15@process_ne
; Line 19415
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR ebuf$[rsp+rax]
	test	eax, eax
	jne	SHORT $LN40@process_ne
; Line 19416
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN42@process_ne
; Line 19419
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_request_stat_log@@YAXPEAUmg_connection@@@Z ; handle_request_stat_log
; Line 19421
	jmp	SHORT $LN43@process_ne
$LN42@process_ne:
; Line 19423
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
$LN43@process_ne:
; Line 19425
	jmp	SHORT $LN41@process_ne
$LN40@process_ne:
; Line 19426
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
$LN41@process_ne:
; Line 19430
	mov	rcx, QWORD PTR conn$[rsp]
	call	?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z ; free_buffered_response_header_list
; Line 19432
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN44@process_ne
; Line 19433
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+48]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19436
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax+48], 0
$LN44@process_ne:
; Line 19445
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	$LN50@process_ne
	mov	rcx, QWORD PTR conn$[rsp]
	call	?should_keep_alive@@YAHPEBUmg_connection@@@Z ; should_keep_alive
	test	eax, eax
	je	$LN50@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2376], 0
	jl	$LN50@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2440], 0
	jle	$LN50@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 4
	je	SHORT $LN53@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 0
	jne	SHORT $LN52@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2376]
	cmp	QWORD PTR [rax+2384], rcx
	je	SHORT $LN51@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2440]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2376]
	mov	rcx, QWORD PTR conn$[rsp]
	movsxd	rcx, DWORD PTR [rcx+2444]
	cmp	rax, rcx
	jg	SHORT $LN50@process_ne
$LN53@process_ne:
$LN51@process_ne:
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN50@process_ne
	mov	DWORD PTR tv230[rsp], 1
	jmp	SHORT $LN54@process_ne
$LN50@process_ne:
$LN52@process_ne:
	mov	DWORD PTR tv230[rsp], 0
$LN54@process_ne:
	mov	eax, DWORD PTR tv230[rsp]
	mov	DWORD PTR keep_alive$[rsp], eax
; Line 19455
	cmp	DWORD PTR keep_alive$[rsp], 0
	je	$LN45@process_ne
; Line 19457
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2440]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2376]
	mov	rcx, QWORD PTR conn$[rsp]
	movsxd	rcx, DWORD PTR [rcx+2444]
	cmp	rax, rcx
	jge	SHORT $LN55@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2440]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2376]
	mov	DWORD PTR tv245[rsp], eax
	jmp	SHORT $LN56@process_ne
$LN55@process_ne:
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2444]
	mov	DWORD PTR tv245[rsp], eax
$LN56@process_ne:
	mov	eax, DWORD PTR tv245[rsp]
	mov	DWORD PTR discard_len$[rsp], eax
; Line 19461
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR discard_len$[rsp]
	mov	eax, DWORD PTR [rax+2444]
	sub	eax, ecx
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2444], eax
; Line 19463
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2444], 0
	jle	SHORT $LN46@process_ne
$LN18@process_ne:
; Line 19464
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@process_ne
; Line 19465
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2444]
	movsxd	rcx, DWORD PTR discard_len$[rsp]
	mov	rdx, QWORD PTR conn$[rsp]
	add	rcx, QWORD PTR [rdx+2400]
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2400]
	call	memmove
$LN46@process_ne:
$LN45@process_ne:
; Line 19474
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2444], 0
	jl	SHORT $LN48@process_ne
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2436]
	cmp	DWORD PTR [rax+2444], ecx
	jle	SHORT $LN47@process_ne
$LN48@process_ne:
$LN21@process_ne:
; Line 19475
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN21@process_ne
; Line 19478
	jmp	SHORT $LN6@process_ne
$LN47@process_ne:
; Line 19480
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2432]
	inc	eax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2432], eax
; Line 19481
	cmp	DWORD PTR keep_alive$[rsp], 0
	jne	$LN7@process_ne
$LN6@process_ne:
$LN24@process_ne:
; Line 19483
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN24@process_ne
; Line 19487
	mov	rcx, QWORD PTR conn$[rsp]
	call	?close_connection@@YAXPEAUmg_connection@@@Z ; close_connection
; Line 19493
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?process_new_connection@@YAXPEAUmg_connection@@@Z ENDP	; process_new_connection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
keep_alive_enabled$ = 36
conn_data$1 = 40
tv128 = 48
conn$ = 80
?init_connection@@YAXPEAUmg_connection@@@Z PROC		; init_connection
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19269
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 19271
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 10
	lea	rdx, OFFSET FLAT:$SG169219
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN6@init_conne
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN7@init_conne
$LN6@init_conne:
	mov	DWORD PTR tv72[rsp], 0
$LN7@init_conne:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR keep_alive_enabled$[rsp], eax
; Line 19274
	cmp	DWORD PTR keep_alive_enabled$[rsp], 0
	jne	SHORT $LN2@init_conne
; Line 19275
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
$LN2@init_conne:
; Line 19280
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2444], 0
; Line 19281
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2432], 0
; Line 19282
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax], 0
; Line 19283
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+1200], 0
; Line 19284
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_set_user_connection_data
; Line 19291
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32128], 0
	je	SHORT $LN3@init_conne
; Line 19292
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN4@init_conne
; Line 19293
	mov	QWORD PTR conn_data$1[rsp], 0
; Line 19294
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32128]
	mov	QWORD PTR tv128[rsp], rax
	lea	rdx, QWORD PTR conn_data$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv128[rsp]
; Line 19295
	mov	rdx, QWORD PTR conn_data$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_set_user_connection_data
$LN4@init_conne:
$LN3@init_conne:
; Line 19298
	add	rsp, 72					; 00000048H
	ret	0
?init_connection@@YAXPEAUmg_connection@@@Z ENDP		; init_connection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 64
i$ = 72
thread_data$ = 80
host$ = 88
tv201 = 96
error$ = 104
init$ = 128
client_options$ = 176
use_ssl$ = 184
error_buffer$ = 192
error_buffer_size$ = 200
path$ = 208
origin$ = 216
extensions$ = 224
data_func$ = 232
close_func$ = 240
user_data$ = 248
?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z PROC ; mg_connect_websocket_client_impl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18946
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 18947
	mov	QWORD PTR conn$[rsp], 0
; Line 18953
	mov	rax, QWORD PTR client_options$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR host$[rsp], rax
; Line 18959
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR init$[rsp]
	call	memset
; Line 18960
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR error$[rsp]
	call	memset
; Line 18961
	mov	rax, QWORD PTR error_buffer_size$[rsp]
	mov	QWORD PTR error$[rsp+16], rax
; Line 18962
	mov	rax, QWORD PTR error_buffer$[rsp]
	mov	QWORD PTR error$[rsp+8], rax
; Line 18970
	lea	r9, QWORD PTR error$[rsp]
	lea	r8, QWORD PTR init$[rsp]
	mov	edx, DWORD PTR use_ssl$[rsp]
	mov	rcx, QWORD PTR client_options$[rsp]
	call	?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z ; mg_connect_client_impl
	mov	QWORD PTR conn$[rsp], rax
; Line 18973
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN14@mg_connect
; Line 18975
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR error_buffer$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN15@mg_connect
; Line 18977
	lea	rax, OFFSET FLAT:$SG169143
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN15@mg_connect:
; Line 18983
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN14@mg_connect:
; Line 18986
	cmp	QWORD PTR origin$[rsp], 0
	je	$LN16@mg_connect
; Line 18987
	cmp	QWORD PTR extensions$[rsp], 0
	je	SHORT $LN18@mg_connect
; Line 18988
	mov	rax, QWORD PTR origin$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR extensions$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ?magic@?1??mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU2@H12PEAX@ZP6AXPEBU2@5@Z5@Z@4PEBDEB
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR host$[rsp]
	mov	r8, QWORD PTR path$[rsp]
	lea	rdx, OFFSET FLAT:$SG169148
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
	mov	DWORD PTR i$[rsp], eax
; Line 19003
	jmp	SHORT $LN19@mg_connect
$LN18@mg_connect:
; Line 19004
	mov	rax, QWORD PTR origin$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ?magic@?1??mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU2@H12PEAX@ZP6AXPEBU2@5@Z5@Z@4PEBDEB
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR host$[rsp]
	mov	r8, QWORD PTR path$[rsp]
	lea	rdx, OFFSET FLAT:$SG169149
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
	mov	DWORD PTR i$[rsp], eax
$LN19@mg_connect:
; Line 19018
	jmp	SHORT $LN17@mg_connect
$LN16@mg_connect:
; Line 19020
	cmp	QWORD PTR extensions$[rsp], 0
	je	SHORT $LN20@mg_connect
; Line 19021
	mov	rax, QWORD PTR extensions$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ?magic@?1??mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU2@H12PEAX@ZP6AXPEBU2@5@Z5@Z@4PEBDEB
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR host$[rsp]
	mov	r8, QWORD PTR path$[rsp]
	lea	rdx, OFFSET FLAT:$SG169152
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
	mov	DWORD PTR i$[rsp], eax
; Line 19034
	jmp	SHORT $LN21@mg_connect
$LN20@mg_connect:
; Line 19035
	mov	rax, QWORD PTR ?magic@?1??mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU2@H12PEAX@ZP6AXPEBU2@5@Z5@Z@4PEBDEB
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR host$[rsp]
	mov	r8, QWORD PTR path$[rsp]
	lea	rdx, OFFSET FLAT:$SG169153
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
	mov	DWORD PTR i$[rsp], eax
$LN21@mg_connect:
$LN17@mg_connect:
; Line 19048
	cmp	DWORD PTR i$[rsp], 0
	jg	SHORT $LN22@mg_connect
; Line 19049
	lea	rax, OFFSET FLAT:$SG169155
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169156
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 19055
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 19056
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN22@mg_connect:
; Line 19059
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2444], 0
; Line 19060
	lea	r9, QWORD PTR i$[rsp]
	mov	r8, QWORD PTR error_buffer_size$[rsp]
	mov	rdx, QWORD PTR error_buffer$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ; get_response
	test	eax, eax
	jne	SHORT $LN23@mg_connect
; Line 19061
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 19062
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN23@mg_connect:
; Line 19064
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+32], rcx
; Line 19065
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+40], rcx
; Line 19071
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1208], 101		; 00000065H
	je	SHORT $LN24@mg_connect
; Line 19076
	mov	rax, QWORD PTR error_buffer$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN25@mg_connect
; Line 19078
	lea	rax, OFFSET FLAT:$SG169160
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN25@mg_connect:
$LN4@mg_connect:
; Line 19085
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@mg_connect
; Line 19086
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 19087
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN24@mg_connect:
; Line 19090
	mov	edx, 32					; 00000020H
	mov	ecx, 1
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR thread_data$[rsp], rax
; Line 19092
	cmp	QWORD PTR thread_data$[rsp], 0
	jne	SHORT $LN26@mg_connect
$LN7@mg_connect:
; Line 19093
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@mg_connect
; Line 19094
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 19095
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN26@mg_connect:
; Line 19098
	mov	rax, QWORD PTR thread_data$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 19099
	mov	rax, QWORD PTR thread_data$[rsp]
	mov	rcx, QWORD PTR data_func$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 19100
	mov	rax, QWORD PTR thread_data$[rsp]
	mov	rcx, QWORD PTR close_func$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 19101
	mov	rax, QWORD PTR thread_data$[rsp]
	mov	rcx, QWORD PTR user_data$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 19103
	mov	edx, 8
	mov	ecx, 1
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR tv201[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR tv201[rsp]
	mov	QWORD PTR [rax+104], rcx
; Line 19105
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN27@mg_connect
$LN10@mg_connect:
; Line 19106
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@mg_connect
; Line 19107
	mov	rcx, QWORD PTR thread_data$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19108
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 19109
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN27@mg_connect:
; Line 19113
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR user_data$[rsp]
	mov	QWORD PTR [rax+32136], rcx
; Line 19114
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	DWORD PTR [rax], 3
; Line 19115
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	DWORD PTR [rax+96], 1
; Line 19123
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	r8, QWORD PTR [rax+104]
	mov	rdx, QWORD PTR thread_data$[rsp]
	lea	rcx, OFFSET FLAT:?websocket_client_thread@@YAIPEAX@Z ; websocket_client_thread
	call	?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z ; mg_start_thread_with_id
	test	eax, eax
	je	SHORT $LN28@mg_connect
; Line 19124
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	DWORD PTR [rax+96], 0
; Line 19125
	mov	rcx, QWORD PTR thread_data$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 19126
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 19127
	mov	QWORD PTR conn$[rsp], 0
$LN13@mg_connect:
; Line 19128
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@mg_connect
$LN28@mg_connect:
; Line 19146
	mov	rax, QWORD PTR conn$[rsp]
$LN1@mg_connect:
; Line 19147
	add	rsp, 168				; 000000a8H
	ret	0
?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z ENDP ; mg_connect_websocket_client_impl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cdata$ = 32
user_thread_ptr$ = 40
tv83 = 48
tv131 = 56
tv150 = 64
data$ = 96
?websocket_client_thread@@YAIPEAX@Z PROC		; websocket_client_thread
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18880
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 18881
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR cdata$[rsp], rax
; Line 18884
	mov	QWORD PTR user_thread_ptr$[rsp], 0
; Line 18895
	lea	rcx, OFFSET FLAT:$SG169099
	call	?mg_set_thread_name@@YAXPEBD@Z		; mg_set_thread_name
; Line 18897
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [rax+2272], 0
	je	SHORT $LN5@websocket_
; Line 18898
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32112], 0
	je	SHORT $LN6@websocket_
; Line 18901
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32112]
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	edx, 3
	mov	rcx, QWORD PTR [rax+2272]
	call	QWORD PTR tv83[rsp]
	mov	QWORD PTR user_thread_ptr$[rsp], rax
$LN6@websocket_:
$LN5@websocket_:
; Line 18906
	mov	rax, QWORD PTR cdata$[rsp]
	mov	r8, QWORD PTR [rax+24]
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z ; read_websocket
$LN4@websocket_:
; Line 18908
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@websocket_
; Line 18910
	mov	rax, QWORD PTR cdata$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN7@websocket_
; Line 18911
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv131[rsp], rax
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv131[rsp]
$LN7@websocket_:
; Line 18916
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+2272]
	mov	DWORD PTR [rax+40], 2
; Line 18918
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32120], 0
	je	SHORT $LN8@websocket_
; Line 18919
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32120]
	mov	QWORD PTR tv150[rsp], rax
	mov	rax, QWORD PTR cdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR user_thread_ptr$[rsp]
	mov	edx, 3
	mov	rcx, QWORD PTR [rax+2272]
	call	QWORD PTR tv150[rsp]
$LN8@websocket_:
; Line 18924
	mov	rcx, QWORD PTR cdata$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18927
	xor	eax, eax
; Line 18931
	add	rsp, 88					; 00000058H
	ret	0
?websocket_client_thread@@YAIPEAX@Z ENDP		; websocket_client_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cl$ = 48
endptr$1 = 56
conn$ = 80
ebuf$ = 88
ebuf_len$ = 96
err$ = 104
?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z PROC	; get_response
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18677
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 18680
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax], 2
; Line 18683
	mov	r9, QWORD PTR err$[rsp]
	mov	r8, QWORD PTR ebuf_len$[rsp]
	mov	rdx, QWORD PTR ebuf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ; get_message
	test	eax, eax
	jne	SHORT $LN2@get_respon
; Line 18684
	xor	eax, eax
	jmp	$LN1@get_respon
$LN2@get_respon:
; Line 18688
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 1208				; 000004b8H
	mov	r8, rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2436]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2400]
	call	?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z ; parse_http_response
	test	eax, eax
	jg	SHORT $LN3@get_respon
; Line 18689
	lea	rax, OFFSET FLAT:$SG169010
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169011
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18695
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 400			; 00000190H
; Line 18696
	xor	eax, eax
	jmp	$LN1@get_respon
$LN3@get_respon:
; Line 18705
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 1248				; 000004e0H
	lea	r8, OFFSET FLAT:$SG169014
	mov	rcx, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rcx+1240]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cl$[rsp], rax
	cmp	QWORD PTR cl$[rsp], 0
	je	$LN4@get_respon
	lea	rdx, OFFSET FLAT:$SG169015
	mov	rcx, QWORD PTR cl$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN4@get_respon
; Line 18706
	lea	rdx, OFFSET FLAT:$SG169017
	mov	rcx, QWORD PTR cl$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN6@get_respon
; Line 18707
	lea	rax, OFFSET FLAT:$SG169018
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169019
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18713
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 400			; 00000190H
; Line 18714
	xor	eax, eax
	jmp	$LN1@get_respon
$LN6@get_respon:
; Line 18716
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 1
; Line 18717
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], 0
; Line 18718
	jmp	$LN5@get_respon
$LN4@get_respon:
; Line 18721
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 1248				; 000004e0H
	lea	r8, OFFSET FLAT:$SG169022
	mov	rcx, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rcx+1240]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cl$[rsp], rax
	cmp	QWORD PTR cl$[rsp], 0
	je	$LN7@get_respon
; Line 18722
	mov	QWORD PTR endptr$1[rsp], 0
; Line 18723
	mov	r8d, 10
	lea	rdx, QWORD PTR endptr$1[rsp]
	mov	rcx, QWORD PTR cl$[rsp]
	call	_strtoi64
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2376], rax
; Line 18724
	mov	rax, QWORD PTR cl$[rsp]
	cmp	QWORD PTR endptr$1[rsp], rax
	je	SHORT $LN10@get_respon
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2376], 0
	jge	SHORT $LN9@get_respon
$LN10@get_respon:
; Line 18725
	lea	rax, OFFSET FLAT:$SG169025
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169026
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18731
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 411			; 0000019bH
; Line 18732
	xor	eax, eax
	jmp	$LN1@get_respon
$LN9@get_respon:
; Line 18735
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2376]
	mov	QWORD PTR [rax+1232], rcx
; Line 18738
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2376]
	mov	QWORD PTR [rax+120], rcx
; Line 18741
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1208], 304		; 00000130H
	jne	SHORT $LN11@get_respon
; Line 18742
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], 0
$LN11@get_respon:
; Line 18744
	jmp	SHORT $LN8@get_respon
$LN7@get_respon:
; Line 18749
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1208], 100		; 00000064H
	jl	SHORT $LN15@get_respon
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1208], 199		; 000000c7H
	jle	SHORT $LN14@get_respon
$LN15@get_respon:
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1208], 204		; 000000ccH
	je	SHORT $LN14@get_respon
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1208], 304		; 00000130H
	jne	SHORT $LN12@get_respon
$LN14@get_respon:
; Line 18750
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], 0
; Line 18751
	jmp	SHORT $LN13@get_respon
$LN12@get_respon:
; Line 18752
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], -1
$LN13@get_respon:
$LN8@get_respon:
$LN5@get_respon:
; Line 18756
	mov	eax, 1
$LN1@get_respon:
; Line 18757
	add	rsp, 72					; 00000048H
	ret	0
?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ENDP	; get_response
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cl$ = 48
endptr$1 = 56
conn$ = 80
ebuf$ = 88
ebuf_len$ = 96
err$ = 104
?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z PROC	; get_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18585
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 18588
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax], 1
; Line 18591
	mov	r9, QWORD PTR err$[rsp]
	mov	r8, QWORD PTR ebuf_len$[rsp]
	mov	rdx, QWORD PTR ebuf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ; get_message
	test	eax, eax
	jne	SHORT $LN2@get_reques
; Line 18592
	xor	eax, eax
	jmp	$LN1@get_reques
$LN2@get_reques:
; Line 18596
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	r8, rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2436]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2400]
	call	?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z ; parse_http_request
	test	eax, eax
	jg	SHORT $LN3@get_reques
; Line 18597
	lea	rax, OFFSET FLAT:$SG168980
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168981
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18603
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 400			; 00000190H
; Line 18604
	xor	eax, eax
	jmp	$LN1@get_reques
$LN3@get_reques:
; Line 18609
	mov	rcx, QWORD PTR conn$[rsp]
	call	?switch_domain_context@@YAHPEAUmg_connection@@@Z ; switch_domain_context
	test	eax, eax
	jne	SHORT $LN4@get_reques
; Line 18610
	lea	rax, OFFSET FLAT:$SG168983
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168984
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18616
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 400			; 00000190H
; Line 18617
	xor	eax, eax
	jmp	$LN1@get_reques
$LN4@get_reques:
; Line 18633
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 168				; 000000a8H
	lea	r8, OFFSET FLAT:$SG168987
	mov	rcx, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rcx+160]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cl$[rsp], rax
	cmp	QWORD PTR cl$[rsp], 0
	je	$LN5@get_reques
	lea	rdx, OFFSET FLAT:$SG168988
	mov	rcx, QWORD PTR cl$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN5@get_reques
; Line 18634
	lea	rdx, OFFSET FLAT:$SG168990
	mov	rcx, QWORD PTR cl$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN7@get_reques
; Line 18635
	lea	rax, OFFSET FLAT:$SG168991
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168992
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18641
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 400			; 00000190H
; Line 18642
	xor	eax, eax
	jmp	$LN1@get_reques
$LN7@get_reques:
; Line 18644
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 1
; Line 18645
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], 0
; Line 18646
	jmp	$LN6@get_reques
$LN5@get_reques:
; Line 18649
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 168				; 000000a8H
	lea	r8, OFFSET FLAT:$SG168995
	mov	rcx, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rcx+160]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cl$[rsp], rax
	cmp	QWORD PTR cl$[rsp], 0
	je	$LN8@get_reques
; Line 18651
	mov	QWORD PTR endptr$1[rsp], 0
; Line 18652
	mov	r8d, 10
	lea	rdx, QWORD PTR endptr$1[rsp]
	mov	rcx, QWORD PTR cl$[rsp]
	call	_strtoi64
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2376], rax
; Line 18653
	mov	rax, QWORD PTR cl$[rsp]
	cmp	QWORD PTR endptr$1[rsp], rax
	je	SHORT $LN11@get_reques
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2376], 0
	jge	SHORT $LN10@get_reques
$LN11@get_reques:
; Line 18654
	lea	rax, OFFSET FLAT:$SG168998
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168999
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18660
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 411			; 0000019bH
; Line 18661
	xor	eax, eax
	jmp	SHORT $LN1@get_reques
$LN10@get_reques:
; Line 18664
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2376]
	mov	QWORD PTR [rax+120], rcx
; Line 18665
	jmp	SHORT $LN9@get_reques
$LN8@get_reques:
; Line 18667
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], 0
$LN9@get_reques:
$LN6@get_reques:
; Line 18670
	mov	eax, 1
$LN1@get_reques:
; Line 18671
	add	rsp, 72					; 00000048H
	ret	0
?get_request@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ENDP	; get_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 64
ebuf$ = 72
ebuf_len$ = 80
err$ = 88
?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z PROC	; get_message
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18509
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 18510
	cmp	QWORD PTR ebuf_len$[rsp], 0
	jbe	SHORT $LN2@get_messag
; Line 18511
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ebuf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN2@get_messag:
; Line 18513
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 0
; Line 18515
	mov	rcx, QWORD PTR conn$[rsp]
	call	?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z ; reset_per_request_attributes
; Line 18517
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN3@get_messag
; Line 18518
	lea	rax, OFFSET FLAT:$SG168955
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168956
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18524
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 500			; 000001f4H
; Line 18525
	xor	eax, eax
	jmp	$LN1@get_messag
$LN3@get_messag:
; Line 18530
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2352				; 00000930H
	mov	rdx, rax
	mov	ecx, 1
	call	?mg_clock_gettime@@YAHKPEAUtimespec@@@Z	; mg_clock_gettime
; Line 18532
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2444				; 0000098cH
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9d, DWORD PTR [rax+2436]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+2400]
	mov	rdx, QWORD PTR conn$[rsp]
	xor	ecx, ecx
	call	?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z ; read_message
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2440], eax
; Line 18535
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2440], 0
	jl	SHORT $LN4@get_messag
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2440]
	cmp	DWORD PTR [rax+2444], ecx
	jge	SHORT $LN4@get_messag
; Line 18536
	lea	rax, OFFSET FLAT:$SG168958
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168959
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18542
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 500			; 000001f4H
; Line 18543
	xor	eax, eax
	jmp	$LN1@get_messag
$LN4@get_messag:
; Line 18546
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2440], 0
	jne	SHORT $LN5@get_messag
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2436]
	cmp	DWORD PTR [rax+2444], ecx
	jne	SHORT $LN5@get_messag
; Line 18547
	lea	rax, OFFSET FLAT:$SG168961
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168962
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18553
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 413			; 0000019dH
; Line 18554
	xor	eax, eax
	jmp	$LN1@get_messag
$LN5@get_messag:
; Line 18557
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2440], 0
	jg	$LN6@get_messag
; Line 18558
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2444], 0
	jle	SHORT $LN7@get_messag
; Line 18559
	lea	rax, OFFSET FLAT:$SG168966
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168967
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18565
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 400			; 00000190H
; Line 18566
	jmp	SHORT $LN8@get_messag
$LN7@get_messag:
; Line 18568
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 18569
	lea	rax, OFFSET FLAT:$SG168968
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168969
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18575
	mov	rax, QWORD PTR err$[rsp]
	mov	DWORD PTR [rax], 0
$LN8@get_messag:
; Line 18577
	xor	eax, eax
	jmp	SHORT $LN1@get_messag
$LN6@get_messag:
; Line 18579
	mov	eax, 1
$LN1@get_messag:
; Line 18580
	add	rsp, 56					; 00000038H
	ret	0
?get_message@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ENDP	; get_message
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 64
sock$ = 72
max_req_size$ = 80
tv221 = 84
len$ = 88
conn_size$ = 96
alloc_size$ = 104
ctx_size$ = 112
tv175 = 120
tv133 = 128
tv135 = 136
tv131 = 144
tv173 = 152
tv191 = 160
tv193 = 168
tv189 = 176
psa$ = 184
tv246 = 192
tv277 = 200
tv293 = 208
tv309 = 216
tv311 = 224
tv307 = 232
tv319 = 240
tv331 = 248
tv341 = 256
tv366 = 264
sa$ = 272
__$ArrayPad$ = 288
client_options$ = 336
use_ssl$ = 344
init$ = 352
error$ = 360
?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z PROC ; mg_connect_client_impl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17944
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17945
	mov	QWORD PTR conn$[rsp], 0
; Line 17951
	mov	eax, 24
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rcx, QWORD PTR [rcx+rax+16]
	call	atoi
	mov	DWORD PTR max_req_size$[rsp], eax
; Line 17955
	mov	QWORD PTR conn_size$[rsp], 2520		; 000009d8H
; Line 17956
	mov	QWORD PTR ctx_size$[rsp], 32704		; 00007fc0H
; Line 17957
	mov	rax, QWORD PTR ctx_size$[rsp]
	mov	rcx, QWORD PTR conn_size$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR max_req_size$[rsp]
	add	rax, rcx
	mov	QWORD PTR alloc_size$[rsp], rax
; Line 17961
	mov	rdx, QWORD PTR alloc_size$[rsp]
	mov	ecx, 1
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR conn$[rsp], rax
; Line 17963
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN2@mg_connect
; Line 17964
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 0
; Line 17965
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 17966
	mov	rax, QWORD PTR error$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jbe	SHORT $LN3@mg_connect
; Line 17967
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR error$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	BYTE PTR [rax+rcx], 0
$LN3@mg_connect:
$LN2@mg_connect:
; Line 17971
	cmp	QWORD PTR conn$[rsp], 0
	jne	$LN4@mg_connect
; Line 17972
	cmp	QWORD PTR error$[rsp], 0
	je	$LN5@mg_connect
; Line 17973
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 6
; Line 17974
	mov	rax, QWORD PTR error$[rsp]
	mov	ecx, DWORD PTR alloc_size$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 17975
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR tv133[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv135[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv131[rsp], rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168790
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv135[rsp]
	mov	r8, QWORD PTR tv131[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN5@mg_connect:
; Line 17982
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN4@mg_connect:
; Line 17991
	mov	rax, QWORD PTR conn_size$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2272], rax
; Line 17997
	mov	rax, QWORD PTR conn_size$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rcx, rax
	mov	rax, rcx
	add	rax, QWORD PTR ctx_size$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2400], rax
; Line 17998
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR max_req_size$[rsp]
	mov	DWORD PTR [rax+2436], ecx
; Line 17999
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	DWORD PTR [rax], 2
; Line 18000
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2280], rax
; Line 18002
	lea	rax, QWORD PTR sa$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR use_ssl$[rsp]
	mov	rax, QWORD PTR client_options$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR client_options$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z ; connect_socket
	test	eax, eax
	jne	SHORT $LN6@mg_connect
; Line 18011
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18012
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN6@mg_connect:
; Line 18040
	cmp	DWORD PTR use_ssl$[rsp], 0
	je	$LN7@mg_connect
	mov	eax, 24
	imul	rax, rax, 8
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv173[rsp], rax
	mov	eax, 24
	imul	rax, rax, 17
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
	mov	rcx, rax
	call	QWORD PTR tv173[rsp]
	mov	QWORD PTR tv175[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR tv175[rsp]
	mov	QWORD PTR [rax], rcx
	cmp	QWORD PTR tv175[rsp], 0
	jne	$LN7@mg_connect
; Line 18042
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN8@mg_connect
; Line 18043
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 3
; Line 18044
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR tv191[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv193[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv189[rsp], rax
	mov	rax, QWORD PTR tv191[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168794
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv193[rsp]
	mov	r8, QWORD PTR tv189[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN8@mg_connect:
; Line 18052
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 18053
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18054
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN7@mg_connect:
; Line 18067
	mov	DWORD PTR len$[rsp], 16
; Line 18068
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2320				; 00000910H
	mov	QWORD PTR psa$[rsp], rax
; Line 18071
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rax+2296], rcx
; Line 18072
	mov	rax, QWORD PTR conn$[rsp]
	lea	rcx, QWORD PTR sa$[rsp]
	lea	rdi, QWORD PTR [rax+2304]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 18074
	lea	r8, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR psa$[rsp]
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_getsockname
	test	eax, eax
	je	SHORT $LN9@mg_connect
; Line 18075
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168796
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168797
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 18078				; 0000469eH
	lea	r8, OFFSET FLAT:$SG168798
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN9@mg_connect:
; Line 18081
	cmp	DWORD PTR use_ssl$[rsp], 0
	je	SHORT $LN23@mg_connect
	mov	DWORD PTR tv221[rsp], 1
	jmp	SHORT $LN24@mg_connect
$LN23@mg_connect:
	mov	DWORD PTR tv221[rsp], 0
$LN24@mg_connect:
	mov	rax, QWORD PTR conn$[rsp]
	movzx	ecx, BYTE PTR tv221[rsp]
	mov	BYTE PTR [rax+2336], cl
; Line 18082
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	mov	rcx, rax
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	test	eax, eax
	je	$LN10@mg_connect
; Line 18083
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN11@mg_connect
; Line 18084
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 9
; Line 18085
	call	QWORD PTR __imp_GetLastError
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 18086
	lea	rax, OFFSET FLAT:$SG168801
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN11@mg_connect:
; Line 18093
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv246[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv246[rsp]
; Line 18095
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 18096
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18097
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN10@mg_connect:
; Line 18101
	cmp	DWORD PTR use_ssl$[rsp], 0
	je	$LN12@mg_connect
; Line 18109
	mov	rax, QWORD PTR client_options$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN13@mg_connect
; Line 18110
	xor	r9d, r9d
	mov	rax, QWORD PTR client_options$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2280]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z ; ssl_use_pem_file
	test	eax, eax
	jne	$LN14@mg_connect
; Line 18114
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN15@mg_connect
; Line 18115
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 18
; Line 18116
	lea	rax, OFFSET FLAT:$SG168806
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN15@mg_connect:
; Line 18123
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv277[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv277[rsp]
; Line 18124
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 18125
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18126
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN14@mg_connect:
$LN13@mg_connect:
; Line 18130
	mov	rax, QWORD PTR client_options$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	$LN16@mg_connect
; Line 18134
	mov	eax, 24
	imul	rax, rax, 21
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv293[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	xor	r8d, r8d
	mov	rcx, QWORD PTR client_options$[rsp]
	mov	rdx, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv293[rsp]
	cmp	eax, 1
	je	$LN18@mg_connect
; Line 18135
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN19@mg_connect
; Line 18136
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 19
; Line 18137
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR tv309[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv311[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv307[rsp], rax
	mov	rax, QWORD PTR tv309[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168811
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv311[rsp]
	mov	r8, QWORD PTR tv307[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN19@mg_connect:
; Line 18144
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv319[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv319[rsp]
; Line 18145
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 18146
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18147
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN18@mg_connect:
; Line 18149
	mov	eax, 24
	imul	rax, rax, 19
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv331[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv331[rsp]
; Line 18150
	jmp	SHORT $LN17@mg_connect
$LN16@mg_connect:
; Line 18151
	mov	eax, 24
	imul	rax, rax, 19
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv341[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv341[rsp]
$LN17@mg_connect:
; Line 18154
	mov	eax, 24
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	r8, QWORD PTR client_options$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z ; sslize
	test	eax, eax
	jne	$LN20@mg_connect
; Line 18155
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN21@mg_connect
; Line 18156
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 20
; Line 18157
	lea	rax, OFFSET FLAT:$SG168814
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN21@mg_connect:
; Line 18163
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv366[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv366[rsp]
; Line 18164
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 18165
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 18166
	xor	eax, eax
	jmp	SHORT $LN1@mg_connect
$LN20@mg_connect:
$LN12@mg_connect:
; Line 18171
	mov	rax, QWORD PTR conn$[rsp]
$LN1@mg_connect:
; Line 18172
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z ENDP ; mg_connect_client_impl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
tv90 = 40
tv128 = 48
tv134 = 56
tv154 = 64
conn$ = 96
?close_connection@@YAXPEAUmg_connection@@@Z PROC	; close_connection
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17804
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 17816
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_lock_connection
; Line 17819
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 17822
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32056], 0
	je	SHORT $LN2@close_conn
; Line 17823
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN3@close_conn
; Line 17824
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32056]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv78[rsp]
$LN3@close_conn:
$LN2@close_conn:
; Line 17831
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_set_user_connection_data
; Line 17843
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2288], 0
	je	$LN4@close_conn
; Line 17846
	mov	eax, 24
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv90[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv90[rsp]
; Line 17847
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv128[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv128[rsp]
; Line 17848
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv134[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv134[rsp]
; Line 17849
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2288], 0
$LN4@close_conn:
; Line 17852
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2296], -1
	je	SHORT $LN5@close_conn
; Line 17856
	mov	rcx, QWORD PTR conn$[rsp]
	call	?close_socket_gracefully@@YAXPEAUmg_connection@@@Z ; close_socket_gracefully
; Line 17858
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2296], -1
$LN5@close_conn:
; Line 17862
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32064], 0
	je	SHORT $LN6@close_conn
; Line 17863
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN7@close_conn
; Line 17864
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32064]
	mov	QWORD PTR tv154[rsp], rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv154[rsp]
$LN7@close_conn:
$LN6@close_conn:
; Line 17868
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_unlock_connection
; Line 17873
	add	rsp, 88					; 00000058H
	ret	0
?close_connection@@YAXPEAUmg_connection@@@Z ENDP	; close_connection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
linger$ = 80
linger_timeout$ = 84
error_code$ = 88
n$ = 92
opt_len$ = 96
buf$ = 112
__$ArrayPad$ = 8304
conn$ = 8336
?close_socket_gracefully@@YAXPEAUmg_connection@@@Z PROC	; close_socket_gracefully
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17680
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8328				; 00002088H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17686
	mov	DWORD PTR error_code$[rsp], 0
; Line 17687
	mov	DWORD PTR linger_timeout$[rsp], -2
; Line 17688
	mov	DWORD PTR opt_len$[rsp], 4
; Line 17690
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@close_sock
; Line 17691
	jmp	$LN1@close_sock
$LN5@close_sock:
; Line 17697
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2296]
	call	?set_blocking_mode@@YAH_K@Z		; set_blocking_mode
; Line 17700
	mov	edx, 1
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2296]
	call	QWORD PTR __imp_shutdown
$LN4@close_sock:
; Line 17710
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9d, 8192				; 00002000H
	lea	r8, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR conn$[rsp]
	xor	ecx, ecx
	call	?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z ; pull_inner
	mov	DWORD PTR n$[rsp], eax
; Line 17711
	cmp	DWORD PTR n$[rsp], 0
	jg	SHORT $LN4@close_sock
; Line 17714
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 5
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN6@close_sock
; Line 17715
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atoi
	mov	DWORD PTR linger_timeout$[rsp], eax
$LN6@close_sock:
; Line 17719
	cmp	DWORD PTR linger_timeout$[rsp], 0
	jl	SHORT $LN7@close_sock
; Line 17722
	mov	eax, 1
	mov	WORD PTR linger$[rsp], ax
; Line 17736
	mov	eax, DWORD PTR linger_timeout$[rsp]
	add	eax, 999				; 000003e7H
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	WORD PTR linger$[rsp+2], ax
; Line 17745
	jmp	SHORT $LN8@close_sock
$LN7@close_sock:
; Line 17746
	xor	eax, eax
	mov	WORD PTR linger$[rsp], ax
; Line 17747
	xor	eax, eax
	mov	WORD PTR linger$[rsp+2], ax
$LN8@close_sock:
; Line 17750
	cmp	DWORD PTR linger_timeout$[rsp], -1
	jge	SHORT $LN9@close_sock
; Line 17752
	jmp	$LN10@close_sock
$LN9@close_sock:
; Line 17761
	lea	rax, QWORD PTR opt_len$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR error_code$[rsp]
	mov	r8d, 4103				; 00001007H
	mov	edx, 65535				; 0000ffffH
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2296]
	call	QWORD PTR __imp_getsockopt
	test	eax, eax
	je	SHORT $LN11@close_sock
; Line 17765
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168679
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168680
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17768				; 00004568H
	lea	r8, OFFSET FLAT:$SG168681
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
	jmp	$LN12@close_sock
$LN11@close_sock:
; Line 17770
	cmp	DWORD PTR error_code$[rsp], 10054	; 00002746H
	jne	SHORT $LN13@close_sock
; Line 17776
	jmp	$LN14@close_sock
$LN13@close_sock:
; Line 17784
	mov	DWORD PTR [rsp+32], 4
	lea	r9, QWORD PTR linger$[rsp]
	mov	r8d, 128				; 00000080H
	mov	edx, 65535				; 0000ffffH
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2296]
	call	QWORD PTR __imp_setsockopt
	test	eax, eax
	je	SHORT $LN15@close_sock
; Line 17785
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	movzx	ecx, WORD PTR linger$[rsp+2]
	movzx	edx, WORD PTR linger$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	DWORD PTR [rsp+56], ecx
	mov	DWORD PTR [rsp+48], edx
	lea	rax, OFFSET FLAT:$SG168685
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168686
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17791				; 0000457fH
	lea	r8, OFFSET FLAT:$SG168687
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN15@close_sock:
$LN14@close_sock:
$LN12@close_sock:
$LN10@close_sock:
; Line 17796
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2296]
	call	QWORD PTR __imp_closesocket
; Line 17797
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2296], -1
$LN1@close_sock:
; Line 17798
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8328				; 00002088H
	ret	0
?close_socket_gracefully@@YAXPEAUmg_connection@@@Z ENDP	; close_socket_gracefully
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
so$ = 64
nodelay_on$ = 72
?set_tcp_nodelay@@YAHPEBUsocket@@H@Z PROC		; set_tcp_nodelay
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17658
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 17660
	mov	rax, QWORD PTR so$[rsp]
	movzx	eax, WORD PTR [rax+8]
	cmp	eax, 2
	je	SHORT $LN3@set_tcp_no
	mov	rax, QWORD PTR so$[rsp]
	movzx	eax, WORD PTR [rax+8]
	cmp	eax, 23
	jne	SHORT $LN2@set_tcp_no
$LN3@set_tcp_no:
; Line 17667
	mov	DWORD PTR [rsp+32], 4
	lea	r9, QWORD PTR nodelay_on$[rsp]
	mov	r8d, 1
	mov	edx, 6
	mov	rax, QWORD PTR so$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_setsockopt
	test	eax, eax
	je	SHORT $LN4@set_tcp_no
; Line 17669
	mov	eax, 1
	jmp	SHORT $LN1@set_tcp_no
$LN4@set_tcp_no:
$LN2@set_tcp_no:
; Line 17673
	xor	eax, eax
$LN1@set_tcp_no:
; Line 17674
	add	rsp, 56					; 00000038H
	ret	0
?set_tcp_nodelay@@YAHPEBUsocket@@H@Z ENDP		; set_tcp_nodelay
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z PROC ; reset_per_request_attributes
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17616
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 17617
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@reset_per_
; Line 17618
	jmp	$LN1@reset_per_
$LN2@reset_per_:
; Line 17621
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2384], 0
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2368], 0
; Line 17623
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2408], 0
; Line 17624
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], -1
; Line 17625
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], -1
; Line 17626
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 0
; Line 17627
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 0
; Line 17628
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2440], 0
; Line 17629
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 17630
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2452], 0
; Line 17631
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2420], 0
; Line 17633
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+120], -1
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+1232], -1
; Line 17634
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+48], 0
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+1224], 0
; Line 17635
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+160], 0
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+1240], 0
; Line 17636
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+1216], 0
; Line 17637
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+1208], 0
; Line 17639
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+64], 0
; Line 17640
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 17641
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 17644
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	cmp	QWORD PTR [rax+40], rcx
	je	SHORT $LN3@reset_per_
; Line 17645
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 17646
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+40], 0
$LN3@reset_per_:
; Line 17648
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+40], 0
$LN1@reset_per_:
; Line 17653
	add	rsp, 40					; 00000028H
	ret	0
?reset_per_request_attributes@@YAXPEAUmg_connection@@@Z ENDP ; reset_per_request_attributes
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
sa$ = 40
__$ArrayPad$ = 56
phys_ctx$ = 80
?set_acl_option@@YAHPEAUmg_context@@@Z PROC		; set_acl_option
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17602
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17604
	mov	r8d, 16
	xor	edx, edx
	lea	rcx, QWORD PTR sa$[rsp]
	call	memset
; Line 17608
	mov	eax, 2
	mov	WORD PTR sa$[rsp], ax
; Line 17610
	lea	rdx, QWORD PTR sa$[rsp]
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z ; check_acl
	cmp	eax, -1
	je	SHORT $LN3@set_acl_op
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@set_acl_op
$LN3@set_acl_op:
	mov	DWORD PTR tv71[rsp], 0
$LN4@set_acl_op:
	mov	eax, DWORD PTR tv71[rsp]
; Line 17611
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?set_acl_option@@YAHPEAUmg_context@@@Z ENDP		; set_acl_option
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
path$1 = 64
file$2 = 72
fc$3 = 112
__$ArrayPad$ = 2640
phys_ctx$ = 2672
dom_ctx$ = 2680
?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z PROC ; set_gpass_option
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17576
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2664				; 00000a68H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17577
	cmp	QWORD PTR phys_ctx$[rsp], 0
	je	$LN2@set_gpass_
; Line 17578
	mov	QWORD PTR file$2[rsp], 0
	mov	QWORD PTR file$2[rsp+8], 0
	mov	DWORD PTR file$2[rsp+16], 0
	mov	DWORD PTR file$2[rsp+20], 0
	mov	DWORD PTR file$2[rsp+24], 0
	mov	QWORD PTR file$2[rsp+32], 0
; Line 17581
	cmp	QWORD PTR dom_ctx$[rsp], 0
	jne	SHORT $LN3@set_gpass_
; Line 17582
	mov	rax, QWORD PTR phys_ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	QWORD PTR dom_ctx$[rsp], rax
$LN3@set_gpass_:
; Line 17584
	mov	eax, 8
	imul	rax, rax, 37				; 00000025H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR path$1[rsp], rax
; Line 17586
	cmp	QWORD PTR path$1[rsp], 0
	je	SHORT $LN4@set_gpass_
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	lea	rcx, QWORD PTR fc$3[rsp]
	call	?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z ; fake_connection
	lea	r8, QWORD PTR file$2[rsp]
	mov	rdx, QWORD PTR path$1[rsp]
	mov	rcx, rax
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	jne	SHORT $LN4@set_gpass_
; Line 17587
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR path$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168634
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17590				; 000044b6H
	lea	r8, OFFSET FLAT:$SG168635
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17591
	xor	eax, eax
	jmp	SHORT $LN1@set_gpass_
$LN4@set_gpass_:
; Line 17593
	mov	eax, 1
	jmp	SHORT $LN1@set_gpass_
$LN2@set_gpass_:
; Line 17595
	xor	eax, eax
$LN1@set_gpass_:
; Line 17596
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2664				; 00000a68H
	ret	0
?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z ENDP ; set_gpass_option
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv72 = 40
tv78 = 48
tv87 = 56
tv134 = 64
?uninitialize_openssl@@YAXXZ PROC			; uninitialize_openssl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17534
	sub	rsp, 88					; 00000058H
; Line 17547
	lea	rcx, OFFSET FLAT:?cryptolib_users@@3_JC
	call	?mg_atomic_dec@@YA_JPEC_J@Z		; mg_atomic_dec
	test	rax, rax
	jne	$LN5@uninitiali
; Line 17553
	mov	eax, 24
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv72[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv72[rsp]
; Line 17554
	mov	eax, 24
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv78[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv78[rsp]
; Line 17555
	mov	eax, 24
	imul	rax, rax, 7
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 17556
	mov	eax, 24
	imul	rax, rax, 8
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv87[rsp], rax
	mov	ecx, 1
	call	QWORD PTR tv87[rsp]
; Line 17557
	mov	eax, 24
	imul	rax, rax, 6
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 17558
	mov	eax, 24
	imul	rax, rax, 10
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 17559
	mov	eax, 24
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 17560
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv134[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv134[rsp]
; Line 17562
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@uninitiali
$LN2@uninitiali:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@uninitiali:
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@uninitiali
; Line 17563
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 17564
	jmp	SHORT $LN2@uninitiali
$LN3@uninitiali:
; Line 17565
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 17566
	mov	QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA, 0
$LN5@uninitiali:
; Line 17569
	add	rsp, 88					; 00000058H
	ret	0
?uninitialize_openssl@@YAXXZ ENDP			; uninitialize_openssl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
callback_ret$ = 48
chain$ = 56
tv84 = 64
tv151 = 68
ssl_ctx$ = 72
pem$ = 80
tv83 = 88
tv150 = 96
ebuf$ = 112
__$ArrayPad$ = 240
phys_ctx$ = 272
dom_ctx$ = 280
?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z PROC ; init_ssl_ctx
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17425
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17426
	mov	QWORD PTR ssl_ctx$[rsp], 0
; Line 17432
	cmp	QWORD PTR phys_ctx$[rsp], 0
	jne	SHORT $LN2@init_ssl_c
; Line 17433
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN2@init_ssl_c:
; Line 17436
	cmp	QWORD PTR dom_ctx$[rsp], 0
	jne	SHORT $LN3@init_ssl_c
; Line 17437
	mov	rax, QWORD PTR phys_ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	QWORD PTR dom_ctx$[rsp], rax
$LN3@init_ssl_c:
; Line 17440
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	?is_ssl_port_used@@YAHPEBD@Z		; is_ssl_port_used
	test	eax, eax
	jne	SHORT $LN4@init_ssl_c
; Line 17442
	mov	eax, 1
	jmp	$LN1@init_ssl_c
$LN4@init_ssl_c:
; Line 17446
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32032], 0
	jne	SHORT $LN18@init_ssl_c
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN19@init_ssl_c
$LN18@init_ssl_c:
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rax+32032]
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rdx, QWORD PTR [rax+32136]
	lea	rcx, QWORD PTR ssl_ctx$[rsp]
	call	QWORD PTR tv83[rsp]
	mov	DWORD PTR tv84[rsp], eax
$LN19@init_ssl_c:
	mov	eax, DWORD PTR tv84[rsp]
	mov	DWORD PTR callback_ret$[rsp], eax
; Line 17452
	cmp	DWORD PTR callback_ret$[rsp], 0
	jge	SHORT $LN5@init_ssl_c
; Line 17454
	mov	eax, DWORD PTR callback_ret$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG168567
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17456				; 00004430H
	lea	r8, OFFSET FLAT:$SG168568
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17457
	xor	eax, eax
	jmp	$LN1@init_ssl_c
	jmp	SHORT $LN6@init_ssl_c
$LN5@init_ssl_c:
; Line 17458
	cmp	DWORD PTR callback_ret$[rsp], 0
	jle	SHORT $LN7@init_ssl_c
; Line 17461
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR ssl_ctx$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 17462
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR ebuf$[rsp]
	call	?initialize_openssl@@YAHPEAD_K@Z	; initialize_openssl
	test	eax, eax
	jne	SHORT $LN8@init_ssl_c
; Line 17463
	lea	rax, QWORD PTR ebuf$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168571
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17463				; 00004437H
	lea	r8, OFFSET FLAT:$SG168572
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17464
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN8@init_ssl_c:
; Line 17466
	mov	eax, 1
	jmp	$LN1@init_ssl_c
$LN7@init_ssl_c:
$LN6@init_ssl_c:
; Line 17472
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32040], 0
	jne	SHORT $LN20@init_ssl_c
	mov	DWORD PTR tv151[rsp], 0
	jmp	SHORT $LN21@init_ssl_c
$LN20@init_ssl_c:
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rax+32040]
	mov	QWORD PTR tv150[rsp], rax
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	r8, QWORD PTR [rcx+32136]
	lea	rdx, QWORD PTR ssl_ctx$[rsp]
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR tv150[rsp]
	mov	DWORD PTR tv151[rsp], eax
$LN21@init_ssl_c:
	mov	eax, DWORD PTR tv151[rsp]
	mov	DWORD PTR callback_ret$[rsp], eax
; Line 17479
	cmp	DWORD PTR callback_ret$[rsp], 0
	jge	SHORT $LN9@init_ssl_c
; Line 17481
	mov	eax, DWORD PTR callback_ret$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG168575
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17484				; 0000444cH
	lea	r8, OFFSET FLAT:$SG168576
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17485
	xor	eax, eax
	jmp	$LN1@init_ssl_c
	jmp	SHORT $LN10@init_ssl_c
$LN9@init_ssl_c:
; Line 17486
	cmp	DWORD PTR callback_ret$[rsp], 0
	jle	SHORT $LN11@init_ssl_c
; Line 17488
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR ssl_ctx$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 17489
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR ebuf$[rsp]
	call	?initialize_openssl@@YAHPEAD_K@Z	; initialize_openssl
	test	eax, eax
	jne	SHORT $LN12@init_ssl_c
; Line 17490
	lea	rax, QWORD PTR ebuf$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168579
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17490				; 00004452H
	lea	r8, OFFSET FLAT:$SG168580
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17491
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN12@init_ssl_c:
; Line 17493
	mov	eax, 1
	jmp	$LN1@init_ssl_c
$LN11@init_ssl_c:
$LN10@init_ssl_c:
; Line 17502
	mov	eax, 8
	imul	rax, rax, 41				; 00000029H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR pem$[rsp], rax
	cmp	QWORD PTR pem$[rsp], 0
	jne	SHORT $LN13@init_ssl_c
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32016], 0
	jne	SHORT $LN13@init_ssl_c
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32024], 0
	jne	SHORT $LN13@init_ssl_c
; Line 17506
	mov	eax, 24
	imul	rax, rax, 41				; 00000029H
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168582
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17508				; 00004464H
	lea	r8, OFFSET FLAT:$SG168583
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17509
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN13@init_ssl_c:
; Line 17513
	mov	eax, 8
	imul	rax, rax, 42				; 0000002aH
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR chain$[rsp], rax
; Line 17514
	cmp	QWORD PTR chain$[rsp], 0
	jne	SHORT $LN14@init_ssl_c
; Line 17516
	mov	rax, QWORD PTR pem$[rsp]
	mov	QWORD PTR chain$[rsp], rax
$LN14@init_ssl_c:
; Line 17518
	cmp	QWORD PTR chain$[rsp], 0
	je	SHORT $LN15@init_ssl_c
	mov	rax, QWORD PTR chain$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN15@init_ssl_c
; Line 17520
	mov	QWORD PTR chain$[rsp], 0
$LN15@init_ssl_c:
; Line 17523
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR ebuf$[rsp]
	call	?initialize_openssl@@YAHPEAD_K@Z	; initialize_openssl
	test	eax, eax
	jne	SHORT $LN16@init_ssl_c
; Line 17524
	lea	rax, QWORD PTR ebuf$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168587
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17524				; 00004474H
	lea	r8, OFFSET FLAT:$SG168588
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17525
	xor	eax, eax
	jmp	SHORT $LN1@init_ssl_c
$LN16@init_ssl_c:
; Line 17528
	mov	r9, QWORD PTR chain$[rsp]
	mov	r8, QWORD PTR pem$[rsp]
	mov	rdx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z ; init_ssl_ctx_impl
$LN1@init_ssl_c:
; Line 17529
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	ret	0
?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z ENDP ; init_ssl_ctx
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
callback_ret$ = 48
should_verify_peer$ = 52
tv236 = 56
tv261 = 60
tv361 = 64
peer_certificate_optional$ = 68
tv473 = 72
ssl_cache_timeout$ = 76
protocol_ver$ = 80
tv145 = 84
use_default_verify_paths$ = 88
verify_depth$ = 92
tv68 = 96
tv75 = 104
tv94 = 112
tv143 = 120
tv147 = 128
tv157 = 136
tv167 = 144
tv177 = 152
tv187 = 160
tv197 = 168
tv207 = 176
tv214 = 184
tv224 = 192
tv235 = 200
tv260 = 208
tv292 = 216
tv290 = 224
tv307 = 232
tv305 = 240
tv325 = 248
ca_path$ = 256
ca_file$ = 264
tv378 = 272
tv396 = 280
tv405 = 288
tv414 = 296
tv439 = 304
tv455 = 312
tv485 = 320
tv493 = 328
now_mt$ = 336
md5state$ = 352
ssl_context_id$ = 448
__$ArrayPad$ = 464
phys_ctx$ = 496
dom_ctx$ = 504
pem$ = 512
chain$ = 520
?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z PROC ; init_ssl_ctx_impl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17182
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 488				; 000001e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17205
	mov	eax, 24
	imul	rax, rax, 8
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv75[rsp], rax
	mov	eax, 24
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
	mov	rcx, rax
	call	QWORD PTR tv75[rsp]
	mov	QWORD PTR tv68[rsp], rax
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR tv68[rsp]
	mov	QWORD PTR [rax], rcx
	cmp	QWORD PTR tv68[rsp], 0
	jne	SHORT $LN2@init_ssl_c
; Line 17206
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168517
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17208				; 00004338H
	lea	r8, OFFSET FLAT:$SG168518
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17209
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN2@init_ssl_c:
; Line 17214
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv94[rsp], rax
	xor	r9d, r9d
	mov	r8d, 1056964608				; 3f000000H
	mov	edx, 77					; 0000004dH
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv94[rsp]
; Line 17224
	mov	eax, 8
	imul	rax, rax, 52				; 00000034H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	atoi
	mov	DWORD PTR protocol_ver$[rsp], eax
; Line 17225
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv147[rsp], rax
	mov	ecx, DWORD PTR protocol_ver$[rsp]
	call	?ssl_get_protocol@@YAJH@Z		; ssl_get_protocol
	mov	DWORD PTR tv145[rsp], eax
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv143[rsp], rax
	xor	r9d, r9d
	mov	r8d, DWORD PTR tv145[rsp]
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR tv143[rsp]
	call	QWORD PTR tv147[rsp]
; Line 17226
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv157[rsp], rax
	xor	r9d, r9d
	mov	r8d, 1048576				; 00100000H
	mov	edx, 32					; 00000020H
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv157[rsp]
; Line 17227
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv167[rsp], rax
	xor	r9d, r9d
	mov	r8d, 4194304				; 00400000H
	mov	edx, 32					; 00000020H
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv167[rsp]
; Line 17228
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv177[rsp], rax
	xor	r9d, r9d
	mov	r8d, 65536				; 00010000H
	mov	edx, 32					; 00000020H
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv177[rsp]
; Line 17230
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv187[rsp], rax
	xor	r9d, r9d
	mov	r8d, 131072				; 00020000H
	mov	edx, 32					; 00000020H
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv187[rsp]
; Line 17233
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv197[rsp], rax
	xor	r9d, r9d
	mov	r8d, 1073741824				; 40000000H
	mov	edx, 32					; 00000020H
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv197[rsp]
; Line 17237
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv207[rsp], rax
	xor	r9d, r9d
	mov	r8d, 1
	mov	edx, 94					; 0000005eH
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv207[rsp]
; Line 17253
	mov	eax, 24
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv214[rsp], rax
	lea	rdx, OFFSET FLAT:?ssl_info_callback@@YAXPEBUssl_st@@HH@Z ; ssl_info_callback
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv214[rsp]
; Line 17255
	mov	eax, 24
	imul	rax, rax, 35				; 00000023H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv224[rsp], rax
	lea	r8, OFFSET FLAT:?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z ; ssl_servername_callback
	mov	edx, 53					; 00000035H
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv224[rsp]
; Line 17259
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32016], 0
	jne	SHORT $LN23@init_ssl_c
	mov	DWORD PTR tv236[rsp], 0
	jmp	SHORT $LN24@init_ssl_c
$LN23@init_ssl_c:
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rax+32016]
	mov	QWORD PTR tv235[rsp], rax
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rdx, QWORD PTR [rax+32136]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv235[rsp]
	mov	DWORD PTR tv236[rsp], eax
$LN24@init_ssl_c:
	mov	eax, DWORD PTR tv236[rsp]
	mov	DWORD PTR callback_ret$[rsp], eax
; Line 17267
	cmp	DWORD PTR callback_ret$[rsp], 0
	jge	SHORT $LN3@init_ssl_c
; Line 17268
	mov	eax, DWORD PTR callback_ret$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG168520
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17270				; 00004376H
	lea	r8, OFFSET FLAT:$SG168521
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17271
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN3@init_ssl_c:
; Line 17273
	cmp	DWORD PTR callback_ret$[rsp], 0
	jle	SHORT $LN4@init_ssl_c
; Line 17275
	mov	eax, 1
	jmp	$LN1@init_ssl_c
$LN4@init_ssl_c:
; Line 17279
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32024], 0
	jne	SHORT $LN25@init_ssl_c
	mov	DWORD PTR tv261[rsp], 0
	jmp	SHORT $LN26@init_ssl_c
$LN25@init_ssl_c:
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rax+32024]
	mov	QWORD PTR tv260[rsp], rax
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	r8, QWORD PTR [rcx+32136]
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR tv260[rsp]
	mov	DWORD PTR tv261[rsp], eax
$LN26@init_ssl_c:
	mov	eax, DWORD PTR tv261[rsp]
	mov	DWORD PTR callback_ret$[rsp], eax
; Line 17289
	cmp	DWORD PTR callback_ret$[rsp], 0
	jge	SHORT $LN5@init_ssl_c
; Line 17290
	mov	eax, DWORD PTR callback_ret$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG168524
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17292				; 0000438cH
	lea	r8, OFFSET FLAT:$SG168525
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17293
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN5@init_ssl_c:
; Line 17295
	cmp	DWORD PTR callback_ret$[rsp], 0
	jle	SHORT $LN6@init_ssl_c
; Line 17297
	mov	eax, 1
	jmp	$LN1@init_ssl_c
$LN6@init_ssl_c:
; Line 17302
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_init
; Line 17303
	lea	rdx, QWORD PTR now_mt$[rsp]
	mov	ecx, 1
	call	?mg_clock_gettime@@YAHKPEAUtimespec@@@Z	; mg_clock_gettime
; Line 17304
	mov	r8d, 16
	lea	rdx, QWORD PTR now_mt$[rsp]
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_append
; Line 17305
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+32152]
	call	strlen
	mov	QWORD PTR tv292[rsp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+32152]
	mov	QWORD PTR tv290[rsp], rax
	mov	r8, QWORD PTR tv292[rsp]
	mov	rdx, QWORD PTR tv290[rsp]
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_append
; Line 17308
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	strlen
	mov	QWORD PTR tv307[rsp], rax
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR tv305[rsp], rax
	mov	r8, QWORD PTR tv307[rsp]
	mov	rdx, QWORD PTR tv305[rsp]
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_append
; Line 17311
	mov	r8d, 32704				; 00007fc0H
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_append
; Line 17312
	mov	r8d, 560				; 00000230H
	mov	rdx, QWORD PTR dom_ctx$[rsp]
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_append
; Line 17313
	lea	rdx, QWORD PTR ssl_context_id$[rsp]
	lea	rcx, QWORD PTR md5state$[rsp]
	call	md5_finish
; Line 17315
	mov	eax, 24
	imul	rax, rax, 29
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv325[rsp], rax
	mov	r8d, 16
	lea	rdx, QWORD PTR ssl_context_id$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv325[rsp]
; Line 17319
	cmp	QWORD PTR pem$[rsp], 0
	je	SHORT $LN7@init_ssl_c
; Line 17320
	mov	r9, QWORD PTR chain$[rsp]
	mov	r8, QWORD PTR pem$[rsp]
	mov	rdx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z ; ssl_use_pem_file
	test	eax, eax
	jne	SHORT $LN8@init_ssl_c
; Line 17321
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN8@init_ssl_c:
$LN7@init_ssl_c:
; Line 17327
	mov	DWORD PTR should_verify_peer$[rsp], 0
; Line 17328
	mov	DWORD PTR peer_certificate_optional$[rsp], 0
; Line 17329
	mov	eax, 8
	imul	rax, rax, 45				; 0000002dH
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN9@init_ssl_c
; Line 17330
	mov	eax, 8
	imul	rax, rax, 45				; 0000002dH
	lea	rdx, OFFSET FLAT:$SG168532
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN10@init_ssl_c
; Line 17332
	mov	DWORD PTR should_verify_peer$[rsp], 1
; Line 17333
	jmp	SHORT $LN11@init_ssl_c
$LN10@init_ssl_c:
; Line 17335
	mov	eax, 8
	imul	rax, rax, 45				; 0000002dH
	lea	rdx, OFFSET FLAT:$SG168534
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN12@init_ssl_c
; Line 17337
	mov	DWORD PTR should_verify_peer$[rsp], 1
; Line 17338
	mov	DWORD PTR peer_certificate_optional$[rsp], 1
$LN12@init_ssl_c:
$LN11@init_ssl_c:
$LN9@init_ssl_c:
; Line 17342
	mov	eax, 8
	imul	rax, rax, 50				; 00000032H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN27@init_ssl_c
	mov	eax, 8
	imul	rax, rax, 50				; 00000032H
	lea	rdx, OFFSET FLAT:$SG168535
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN27@init_ssl_c
	mov	DWORD PTR tv361[rsp], 1
	jmp	SHORT $LN28@init_ssl_c
$LN27@init_ssl_c:
	mov	DWORD PTR tv361[rsp], 0
$LN28@init_ssl_c:
	mov	eax, DWORD PTR tv361[rsp]
	mov	DWORD PTR use_default_verify_paths$[rsp], eax
; Line 17347
	cmp	DWORD PTR should_verify_peer$[rsp], 0
	je	$LN13@init_ssl_c
; Line 17348
	mov	eax, 8
	imul	rax, rax, 47				; 0000002fH
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR ca_path$[rsp], rax
; Line 17349
	mov	eax, 8
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR ca_file$[rsp], rax
; Line 17351
	mov	eax, 24
	imul	rax, rax, 21
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv378[rsp], rax
	mov	r8, QWORD PTR ca_path$[rsp]
	mov	rdx, QWORD PTR ca_file$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv378[rsp]
	cmp	eax, 1
	je	SHORT $LN14@init_ssl_c
; Line 17352
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168538
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17358				; 000043ceH
	lea	r8, OFFSET FLAT:$SG168539
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17359
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN14@init_ssl_c:
; Line 17362
	cmp	DWORD PTR peer_certificate_optional$[rsp], 0
	je	SHORT $LN15@init_ssl_c
; Line 17363
	mov	eax, 24
	imul	rax, rax, 19
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv396[rsp], rax
	xor	r8d, r8d
	mov	edx, 1
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv396[rsp]
; Line 17364
	jmp	SHORT $LN16@init_ssl_c
$LN15@init_ssl_c:
; Line 17365
	mov	eax, 24
	imul	rax, rax, 19
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv405[rsp], rax
	xor	r8d, r8d
	mov	edx, 3
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv405[rsp]
$LN16@init_ssl_c:
; Line 17372
	cmp	DWORD PTR use_default_verify_paths$[rsp], 0
	je	SHORT $LN17@init_ssl_c
	mov	eax, 24
	imul	rax, rax, 22
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv414[rsp], rax
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv414[rsp]
	cmp	eax, 1
	je	SHORT $LN17@init_ssl_c
; Line 17373
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168543
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17375				; 000043dfH
	lea	r8, OFFSET FLAT:$SG168544
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 17376
	xor	eax, eax
	jmp	$LN1@init_ssl_c
$LN17@init_ssl_c:
; Line 17379
	mov	eax, 8
	imul	rax, rax, 49				; 00000031H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN18@init_ssl_c
; Line 17380
	mov	eax, 8
	imul	rax, rax, 49				; 00000031H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	atoi
	mov	DWORD PTR verify_depth$[rsp], eax
; Line 17381
	mov	eax, 24
	imul	rax, rax, 23
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv439[rsp], rax
	mov	edx, DWORD PTR verify_depth$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv439[rsp]
$LN18@init_ssl_c:
$LN13@init_ssl_c:
; Line 17385
	mov	eax, 8
	imul	rax, rax, 51				; 00000033H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN19@init_ssl_c
; Line 17388
	mov	eax, 24
	imul	rax, rax, 31
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv455[rsp], rax
	mov	eax, 8
	imul	rax, rax, 51				; 00000033H
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv455[rsp]
	cmp	eax, 1
	je	SHORT $LN20@init_ssl_c
; Line 17389
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168548
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17391				; 000043efH
	lea	r8, OFFSET FLAT:$SG168549
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN20@init_ssl_c:
$LN19@init_ssl_c:
; Line 17396
	mov	eax, 8
	imul	rax, rax, 46				; 0000002eH
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN29@init_ssl_c
	mov	eax, 8
	imul	rax, rax, 46				; 0000002eH
	mov	rcx, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	atoi
	mov	DWORD PTR tv473[rsp], eax
	jmp	SHORT $LN30@init_ssl_c
$LN29@init_ssl_c:
	mov	DWORD PTR tv473[rsp], 0
$LN30@init_ssl_c:
	mov	eax, DWORD PTR tv473[rsp]
	mov	DWORD PTR ssl_cache_timeout$[rsp], eax
; Line 17399
	cmp	DWORD PTR ssl_cache_timeout$[rsp], 0
	jle	SHORT $LN21@init_ssl_c
; Line 17400
	mov	eax, 24
	imul	rax, rax, 30
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv485[rsp], rax
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, 44					; 0000002cH
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv485[rsp]
; Line 17403
	mov	eax, 24
	imul	rax, rax, 42				; 0000002aH
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv493[rsp], rax
	mov	edx, DWORD PTR ssl_cache_timeout$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv493[rsp]
$LN21@init_ssl_c:
; Line 17416
	mov	eax, 1
$LN1@init_ssl_c:
; Line 17417
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 488				; 000001e8H
	ret	0
?init_ssl_ctx_impl@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z ENDP ; init_ssl_ctx_impl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 32
servername$ = 40
tv71 = 48
tv79 = 56
tv133 = 64
tv171 = 72
ssl$ = 96
ad$ = 104
arg$ = 112
?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z PROC ; ssl_servername_callback
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17006
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 17013
	mov	eax, 24
	imul	rax, rax, 33				; 00000021H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv71[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv71[rsp]
	mov	QWORD PTR conn$[rsp], rax
; Line 17019
	mov	eax, 24
	imul	rax, rax, 36				; 00000024H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv79[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv79[rsp]
	mov	QWORD PTR servername$[rsp], rax
; Line 17024
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN17@ssl_server
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2272], 0
	jne	SHORT $LN16@ssl_server
$LN17@ssl_server:
; Line 17026
	mov	eax, 3
	jmp	$LN1@ssl_server
$LN16@ssl_server:
; Line 17028
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2280], rax
; Line 17036
	cmp	QWORD PTR servername$[rsp], 0
	je	SHORT $LN19@ssl_server
	mov	rax, QWORD PTR servername$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN18@ssl_server
$LN19@ssl_server:
$LN4@ssl_server:
; Line 17037
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ssl_server
; Line 17038
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 17039
	mov	eax, 24
	imul	rax, rax, 37				; 00000025H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv133[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv133[rsp]
; Line 17040
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 17041
	mov	eax, 3
	jmp	$LN1@ssl_server
$LN18@ssl_server:
$LN7@ssl_server:
; Line 17044
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@ssl_server
$LN8@ssl_server:
; Line 17046
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	SHORT $LN9@ssl_server
; Line 17047
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR [rax+rcx+8]
	mov	rcx, QWORD PTR servername$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN20@ssl_server
$LN12@ssl_server:
; Line 17050
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@ssl_server
; Line 17052
	jmp	SHORT $LN9@ssl_server
$LN20@ssl_server:
; Line 17054
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 17055
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+552]
	mov	QWORD PTR [rcx+2280], rax
; Line 17056
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 17057
	jmp	$LN8@ssl_server
$LN9@ssl_server:
; Line 17059
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN21@ssl_server
$LN15@ssl_server:
; Line 17061
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN15@ssl_server
; Line 17063
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2280], rax
$LN21@ssl_server:
; Line 17065
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 17066
	mov	eax, 24
	imul	rax, rax, 37				; 00000025H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv171[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv171[rsp]
; Line 17067
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 17068
	xor	eax, eax
$LN1@ssl_server:
; Line 17069
	add	rsp, 88					; 00000058H
	ret	0
?ssl_servername_callback@@YAHPEAUssl_st@@PEAHPEAX@Z ENDP ; ssl_servername_callback
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
ssl$ = 64
what$ = 72
ret$ = 80
?ssl_info_callback@@YAXPEBUssl_st@@HH@Z PROC		; ssl_info_callback
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16990
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 16993
	mov	eax, DWORD PTR what$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@ssl_info_c
; Line 16994
	mov	eax, 24
	imul	rax, rax, 33				; 00000021H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv73[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv73[rsp]
$LN2@ssl_info_c:
; Line 16996
	mov	eax, DWORD PTR what$[rsp]
	and	eax, 32					; 00000020H
; Line 17001
	add	rsp, 56					; 00000038H
	ret	0
?ssl_info_callback@@YAXPEBUssl_st@@HH@Z ENDP		; ssl_info_callback
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 0
version_id$ = 32
?ssl_get_protocol@@YAJH@Z PROC				; ssl_get_protocol
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16957
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 16958
	mov	DWORD PTR ret$[rsp], -2147480577	; 80000bffH
; Line 16959
	cmp	DWORD PTR version_id$[rsp], 0
	jle	SHORT $LN2@ssl_get_pr
; Line 16960
	mov	eax, DWORD PTR ret$[rsp]
	bts	eax, 24
	mov	DWORD PTR ret$[rsp], eax
$LN2@ssl_get_pr:
; Line 16961
	cmp	DWORD PTR version_id$[rsp], 1
	jle	SHORT $LN3@ssl_get_pr
; Line 16962
	mov	eax, DWORD PTR ret$[rsp]
	bts	eax, 25
	mov	DWORD PTR ret$[rsp], eax
$LN3@ssl_get_pr:
; Line 16963
	cmp	DWORD PTR version_id$[rsp], 2
	jle	SHORT $LN4@ssl_get_pr
; Line 16964
	mov	eax, DWORD PTR ret$[rsp]
	bts	eax, 26
	mov	DWORD PTR ret$[rsp], eax
$LN4@ssl_get_pr:
; Line 16965
	cmp	DWORD PTR version_id$[rsp], 3
	jle	SHORT $LN5@ssl_get_pr
; Line 16966
	mov	eax, DWORD PTR ret$[rsp]
	bts	eax, 28
	mov	DWORD PTR ret$[rsp], eax
$LN5@ssl_get_pr:
; Line 16967
	cmp	DWORD PTR version_id$[rsp], 4
	jle	SHORT $LN6@ssl_get_pr
; Line 16968
	mov	eax, DWORD PTR ret$[rsp]
	bts	eax, 27
	mov	DWORD PTR ret$[rsp], eax
$LN6@ssl_get_pr:
; Line 16970
	cmp	DWORD PTR version_id$[rsp], 5
	jle	SHORT $LN7@ssl_get_pr
; Line 16971
	mov	eax, DWORD PTR ret$[rsp]
	bts	eax, 29
	mov	DWORD PTR ret$[rsp], eax
$LN7@ssl_get_pr:
; Line 16973
	mov	eax, DWORD PTR ret$[rsp]
; Line 16974
	add	rsp, 24
	ret	0
?ssl_get_protocol@@YAJH@Z ENDP				; ssl_get_protocol
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_locks$ = 64
i$ = 68
size$ = 72
tv165 = 80
tv171 = 88
ebuf$ = 112
ebuf_len$ = 120
?initialize_openssl@@YAHPEAD_K@Z PROC			; initialize_openssl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16761
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 16767
	cmp	QWORD PTR ebuf_len$[rsp], 0
	jbe	SHORT $LN17@initialize
; Line 16768
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ebuf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN17@initialize:
; Line 16772
	cmp	QWORD PTR ?cryptolib_dll_handle@@3PEAXEA, 0
	jne	$LN18@initialize
; Line 16773
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?tls_feature_missing@@3PAHA
	call	memset
; Line 16774
	lea	rax, OFFSET FLAT:?tls_feature_missing@@3PAHA
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	lea	r8, OFFSET FLAT:$SG168279
	mov	rdx, QWORD PTR ebuf_len$[rsp]
	mov	rcx, QWORD PTR ebuf$[rsp]
	call	?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z ; load_tls_dll
	mov	QWORD PTR ?cryptolib_dll_handle@@3PEAXEA, rax
; Line 16776
	cmp	QWORD PTR ?cryptolib_dll_handle@@3PEAXEA, 0
	jne	SHORT $LN19@initialize
; Line 16777
	lea	rax, OFFSET FLAT:$SG168281
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168282
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168283
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN4@initialize:
; Line 16784
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@initialize
; Line 16785
	xor	eax, eax
	jmp	$LN1@initialize
$LN19@initialize:
$LN18@initialize:
; Line 16790
	lea	rcx, OFFSET FLAT:?cryptolib_users@@3_JC
	call	?mg_atomic_inc@@YA_JPEC_J@Z		; mg_atomic_inc
	cmp	rax, 1
	jle	SHORT $LN20@initialize
; Line 16791
	mov	eax, 1
	jmp	$LN1@initialize
$LN20@initialize:
; Line 16798
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
	mov	DWORD PTR num_locks$[rsp], eax
; Line 16799
	cmp	DWORD PTR num_locks$[rsp], 0
	jge	SHORT $LN21@initialize
; Line 16800
	mov	DWORD PTR num_locks$[rsp], 0
$LN21@initialize:
; Line 16802
	movsxd	rax, DWORD PTR num_locks$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	QWORD PTR size$[rsp], rax
; Line 16805
	cmp	DWORD PTR num_locks$[rsp], 0
	jne	SHORT $LN22@initialize
; Line 16807
	mov	QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA, 0
; Line 16808
	jmp	$LN23@initialize
$LN22@initialize:
; Line 16810
	mov	rcx, QWORD PTR size$[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA, rax
; Line 16813
	cmp	QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA, 0
	jne	SHORT $LN24@initialize
; Line 16814
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168289
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168290
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN7@initialize:
; Line 16821
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@initialize
; Line 16822
	xor	eax, eax
	jmp	$LN1@initialize
$LN24@initialize:
; Line 16826
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@initialize
$LN8@initialize:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@initialize:
	mov	eax, DWORD PTR num_locks$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@initialize
; Line 16827
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	mov	rcx, rax
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	test	eax, eax
	je	SHORT $LN25@initialize
; Line 16828
	mov	eax, DWORD PTR num_locks$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, OFFSET FLAT:$SG168292
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168293
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN13@initialize:
; Line 16836
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@initialize
; Line 16837
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 16838
	xor	eax, eax
	jmp	$LN1@initialize
$LN25@initialize:
; Line 16840
	jmp	$LN8@initialize
$LN9@initialize:
$LN23@initialize:
; Line 16843
	mov	eax, 24
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv165[rsp], rax
	lea	rcx, OFFSET FLAT:?ssl_locking_callback@@YAXHHPEBDH@Z ; ssl_locking_callback
	call	QWORD PTR tv165[rsp]
; Line 16844
	mov	eax, 24
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv171[rsp], rax
	lea	rcx, OFFSET FLAT:?mg_current_thread_id@@YAKXZ ; mg_current_thread_id
	call	QWORD PTR tv171[rsp]
; Line 16848
	cmp	QWORD PTR ?ssllib_dll_handle@@3PEAXEA, 0
	jne	SHORT $LN26@initialize
; Line 16849
	lea	rax, OFFSET FLAT:?tls_feature_missing@@3PAHA
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	lea	r8, OFFSET FLAT:$SG168295
	mov	rdx, QWORD PTR ebuf_len$[rsp]
	mov	rcx, QWORD PTR ebuf$[rsp]
	call	?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z ; load_tls_dll
	mov	QWORD PTR ?ssllib_dll_handle@@3PEAXEA, rax
; Line 16851
	cmp	QWORD PTR ?ssllib_dll_handle@@3PEAXEA, 0
	jne	SHORT $LN27@initialize
; Line 16853
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN16@initialize:
; Line 16855
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@initialize
; Line 16856
	xor	eax, eax
	jmp	SHORT $LN1@initialize
$LN27@initialize:
$LN26@initialize:
; Line 16870
	mov	eax, 24
	imul	rax, rax, 10
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 16871
	mov	eax, 24
	imul	rax, rax, 15
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 16874
	mov	eax, 1
$LN1@initialize:
; Line 16875
	add	rsp, 104				; 00000068H
	ret	0
?initialize_openssl@@YAHPEAD_K@Z ENDP			; initialize_openssl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$ = 64
ok$ = 68
fp$ = 72
dll_handle$ = 80
cur_len$1 = 88
u$ = 96
ebuf$ = 128
ebuf_len$ = 136
dll_name$ = 144
sw$ = 152
feature_missing$ = 160
?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z PROC ; load_tls_dll
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16659
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 16667
	mov	DWORD PTR truncated$[rsp], 0
; Line 16669
	xor	edx, edx
	mov	rcx, QWORD PTR dll_name$[rsp]
	call	?dlopen@@YAPEAXPEBDH@Z			; dlopen
	mov	QWORD PTR dll_handle$[rsp], rax
	cmp	QWORD PTR dll_handle$[rsp], 0
	jne	SHORT $LN8@load_tls_d
; Line 16670
	mov	rax, QWORD PTR dll_name$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168220
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168221
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 16677
	xor	eax, eax
	jmp	$LN1@load_tls_d
$LN8@load_tls_d:
; Line 16680
	mov	DWORD PTR ok$[rsp], 1
; Line 16681
	mov	rax, QWORD PTR sw$[rsp]
	mov	QWORD PTR fp$[rsp], rax
	jmp	SHORT $LN4@load_tls_d
$LN2@load_tls_d:
	mov	rax, QWORD PTR fp$[rsp]
	add	rax, 24
	mov	QWORD PTR fp$[rsp], rax
$LN4@load_tls_d:
	mov	rax, QWORD PTR fp$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN3@load_tls_d
; Line 16684
	mov	rax, QWORD PTR fp$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR dll_handle$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR u$[rsp], rax
; Line 16693
	mov	rax, QWORD PTR fp$[rsp]
	mov	rcx, QWORD PTR u$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 16695
	cmp	QWORD PTR u$[rsp], 0
	jne	$LN9@load_tls_d
$LN7@load_tls_d:
; Line 16696
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@load_tls_d
; Line 16697
	cmp	QWORD PTR feature_missing$[rsp], 0
	je	SHORT $LN10@load_tls_d
; Line 16698
	mov	rax, QWORD PTR fp$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR feature_missing$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	inc	eax
	mov	rcx, QWORD PTR fp$[rsp]
	movsxd	rcx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR feature_missing$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN10@load_tls_d:
; Line 16700
	mov	rax, QWORD PTR fp$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jne	$LN11@load_tls_d
; Line 16702
	cmp	DWORD PTR ok$[rsp], 0
	je	SHORT $LN12@load_tls_d
; Line 16705
	mov	rax, QWORD PTR fp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR dll_name$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168227
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168228
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 16713
	mov	DWORD PTR ok$[rsp], 0
; Line 16714
	jmp	$LN13@load_tls_d
$LN12@load_tls_d:
; Line 16717
	mov	rcx, QWORD PTR ebuf$[rsp]
	call	strlen
	mov	QWORD PTR cur_len$1[rsp], rax
; Line 16718
	cmp	DWORD PTR truncated$[rsp], 0
	jne	$LN14@load_tls_d
	mov	rax, QWORD PTR cur_len$1[rsp]
	mov	rcx, QWORD PTR ebuf_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 3
	jbe	SHORT $LN14@load_tls_d
; Line 16719
	mov	rax, QWORD PTR cur_len$1[rsp]
	mov	rcx, QWORD PTR ebuf_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sub	rax, 3
	mov	rcx, QWORD PTR cur_len$1[rsp]
	mov	rdx, QWORD PTR ebuf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR fp$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, OFFSET FLAT:$SG168230
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8, rcx
	lea	rdx, QWORD PTR truncated$[rsp]
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 16725
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN15@load_tls_d
; Line 16727
	lea	rdx, OFFSET FLAT:$SG168232
	mov	rcx, QWORD PTR ebuf$[rsp]
	call	strcat
$LN15@load_tls_d:
$LN14@load_tls_d:
$LN13@load_tls_d:
$LN11@load_tls_d:
$LN9@load_tls_d:
; Line 16733
	jmp	$LN2@load_tls_d
$LN3@load_tls_d:
; Line 16735
	cmp	DWORD PTR ok$[rsp], 0
	jne	SHORT $LN16@load_tls_d
; Line 16736
	mov	rcx, QWORD PTR dll_handle$[rsp]
	call	?dlclose@@YAHPEAX@Z			; dlclose
; Line 16737
	xor	eax, eax
	jmp	SHORT $LN1@load_tls_d
$LN16@load_tls_d:
; Line 16740
	mov	rax, QWORD PTR dll_handle$[rsp]
$LN1@load_tls_d:
; Line 16741
	add	rsp, 120				; 00000078H
	ret	0
?load_tls_dll@@YAPEAXPEAD_KPEBDPEAUssl_func@@PEAH@Z ENDP ; load_tls_dll
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mode$ = 48
mutex_num$ = 56
file$ = 64
line$ = 72
?ssl_locking_callback@@YAXHHPEBDH@Z PROC		; ssl_locking_callback
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16637
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 16641
	mov	eax, DWORD PTR mode$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@ssl_lockin
; Line 16643
	movsxd	rax, DWORD PTR mutex_num$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 16644
	jmp	SHORT $LN3@ssl_lockin
$LN2@ssl_lockin:
; Line 16645
	movsxd	rax, DWORD PTR mutex_num$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ?ssl_mutexes@@3PEAUpthread_mutex_t@@EA
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
$LN3@ssl_lockin:
; Line 16647
	add	rsp, 40					; 00000028H
	ret	0
?ssl_locking_callback@@YAXHHPEBDH@Z ENDP		; ssl_locking_callback
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ilen$1 = 48
ulen$2 = 52
cert$ = 56
tmp_buf$3 = 64
str_serial$4 = 72
serial_bn$5 = 80
tv161 = 88
tv201 = 96
$T6 = 104
tv71 = 112
tv79 = 120
tv86 = 128
tv93 = 136
tv132 = 144
serial$7 = 152
tv140 = 160
tv148 = 168
tv154 = 176
subj$8 = 184
tv170 = 192
iss$9 = 200
tv183 = 208
tv195 = 216
tmp_p$10 = 224
tv210 = 232
digest$11 = 240
tv222 = 248
tv245 = 256
buf$12 = 272
str_buf$13 = 528
__$ArrayPad$ = 1552
conn$ = 1584
client_cert$ = 1592
?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z PROC ; ssl_get_client_cert_info
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16561
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1576				; 00000628H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 16562
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv71[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv71[rsp]
	mov	QWORD PTR cert$[rsp], rax
; Line 16563
	cmp	QWORD PTR cert$[rsp], 0
	je	$LN2@ssl_get_cl
; Line 16566
	mov	QWORD PTR str_serial$4[rsp], 0
; Line 16573
	mov	eax, 24
	imul	rax, rax, 17
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv79[rsp], rax
	lea	rcx, OFFSET FLAT:$SG168165
	call	QWORD PTR tv79[rsp]
	mov	QWORD PTR digest$11[rsp], rax
; Line 16576
	mov	eax, 24
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv86[rsp], rax
	mov	rcx, QWORD PTR cert$[rsp]
	call	QWORD PTR tv86[rsp]
	mov	QWORD PTR subj$8[rsp], rax
; Line 16577
	mov	eax, 24
	imul	rax, rax, 13
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv93[rsp], rax
	mov	rcx, QWORD PTR cert$[rsp]
	call	QWORD PTR tv93[rsp]
	mov	QWORD PTR iss$9[rsp], rax
; Line 16580
	mov	eax, 24
	imul	rax, rax, 15
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv132[rsp], rax
	mov	rcx, QWORD PTR cert$[rsp]
	call	QWORD PTR tv132[rsp]
	mov	QWORD PTR serial$7[rsp], rax
; Line 16583
	mov	eax, 24
	imul	rax, rax, 21
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv140[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR serial$7[rsp]
	call	QWORD PTR tv140[rsp]
	mov	QWORD PTR serial_bn$5[rsp], rax
; Line 16584
	cmp	QWORD PTR serial_bn$5[rsp], 0
	je	SHORT $LN3@ssl_get_cl
; Line 16585
	mov	eax, 24
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv148[rsp], rax
	mov	rcx, QWORD PTR serial_bn$5[rsp]
	call	QWORD PTR tv148[rsp]
	mov	QWORD PTR str_serial$4[rsp], rax
; Line 16586
	mov	eax, 24
	imul	rax, rax, 22
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv154[rsp], rax
	mov	rcx, QWORD PTR serial_bn$5[rsp]
	call	QWORD PTR tv154[rsp]
$LN3@ssl_get_cl:
; Line 16588
	cmp	QWORD PTR str_serial$4[rsp], 0
	je	SHORT $LN8@ssl_get_cl
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR str_serial$4[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	QWORD PTR tv161[rsp], rax
	jmp	SHORT $LN9@ssl_get_cl
$LN8@ssl_get_cl:
	mov	QWORD PTR tv161[rsp], 0
$LN9@ssl_get_cl:
	mov	rax, QWORD PTR client_cert$[rsp]
	mov	rcx, QWORD PTR tv161[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 16592
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv170[rsp], rax
	mov	r8d, 1024				; 00000400H
	lea	rdx, QWORD PTR str_buf$13[rsp]
	mov	rcx, QWORD PTR subj$8[rsp]
	call	QWORD PTR tv170[rsp]
; Line 16593
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	lea	rcx, QWORD PTR str_buf$13[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	rcx, QWORD PTR client_cert$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 16594
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv183[rsp], rax
	mov	r8d, 1024				; 00000400H
	lea	rdx, QWORD PTR str_buf$13[rsp]
	mov	rcx, QWORD PTR iss$9[rsp]
	call	QWORD PTR tv183[rsp]
; Line 16595
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	lea	rcx, QWORD PTR str_buf$13[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	rcx, QWORD PTR client_cert$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 16598
	mov	DWORD PTR ulen$2[rsp], 0
; Line 16602
	mov	eax, 24
	imul	rax, rax, 19
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv195[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR cert$[rsp]
	call	QWORD PTR tv195[rsp]
	mov	DWORD PTR ilen$1[rsp], eax
; Line 16603
	cmp	DWORD PTR ilen$1[rsp], 0
	jle	SHORT $LN10@ssl_get_cl
	mov	eax, DWORD PTR ilen$1[rsp]
	inc	eax
	mov	eax, eax
	mov	ecx, eax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR tv201[rsp], rax
	jmp	SHORT $LN11@ssl_get_cl
$LN10@ssl_get_cl:
	mov	QWORD PTR tv201[rsp], 0
$LN11@ssl_get_cl:
	mov	rax, QWORD PTR tv201[rsp]
	mov	QWORD PTR tmp_buf$3[rsp], rax
; Line 16607
	cmp	QWORD PTR tmp_buf$3[rsp], 0
	je	$LN4@ssl_get_cl
; Line 16608
	mov	rax, QWORD PTR tmp_buf$3[rsp]
	mov	QWORD PTR tmp_p$10[rsp], rax
; Line 16609
	mov	eax, 24
	imul	rax, rax, 19
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv210[rsp], rax
	lea	rdx, QWORD PTR tmp_p$10[rsp]
	mov	rcx, QWORD PTR cert$[rsp]
	call	QWORD PTR tv210[rsp]
; Line 16610
	mov	eax, 24
	imul	rax, rax, 18
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv222[rsp], rax
	mov	eax, DWORD PTR ilen$1[rsp]
	mov	QWORD PTR [rsp+40], 0
	mov	rcx, QWORD PTR digest$11[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR ulen$2[rsp]
	lea	r8, QWORD PTR buf$12[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR tmp_buf$3[rsp]
	call	QWORD PTR tv222[rsp]
	test	eax, eax
	jne	SHORT $LN5@ssl_get_cl
; Line 16612
	mov	DWORD PTR ulen$2[rsp], 0
$LN5@ssl_get_cl:
; Line 16614
	mov	rcx, QWORD PTR tmp_buf$3[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN4@ssl_get_cl:
; Line 16617
	mov	r9d, 1024				; 00000400H
	lea	r8, QWORD PTR str_buf$13[rsp]
	mov	edx, DWORD PTR ulen$2[rsp]
	lea	rcx, QWORD PTR buf$12[rsp]
	call	?hexdump2string@@YAHPEAXHPEADH@Z	; hexdump2string
	test	eax, eax
	jne	SHORT $LN6@ssl_get_cl
; Line 16618
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T6[rsp], rax
	cmp	QWORD PTR $T6[rsp], 1024		; 00000400H
	jae	SHORT $LN12@ssl_get_cl
	jmp	SHORT $LN13@ssl_get_cl
$LN12@ssl_get_cl:
	call	__report_rangecheckfailure
$LN13@ssl_get_cl:
	mov	rax, QWORD PTR $T6[rsp]
	mov	BYTE PTR str_buf$13[rsp+rax], 0
$LN6@ssl_get_cl:
; Line 16620
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	lea	rcx, QWORD PTR str_buf$13[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	rcx, QWORD PTR client_cert$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 16622
	mov	rax, QWORD PTR client_cert$[rsp]
	mov	rcx, QWORD PTR cert$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 16626
	mov	eax, 24
	imul	rax, rax, 23
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv245[rsp], rax
	mov	rcx, QWORD PTR str_serial$4[rsp]
	call	QWORD PTR tv245[rsp]
; Line 16627
	mov	eax, 1
	jmp	SHORT $LN1@ssl_get_cl
$LN2@ssl_get_cl:
; Line 16629
	xor	eax, eax
$LN1@ssl_get_cl:
$LN7@ssl_get_cl:
; Line 16630
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1576				; 00000628H
	ret	0
?ssl_get_client_cert_info@@YAHPEBUmg_connection@@PEAUmg_client_cert@@@Z ENDP ; ssl_get_client_cert_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
hexdigit$ = 8
__$ArrayPad$ = 32
mem$ = 80
memlen$ = 88
buf$ = 96
buflen$ = 104
?hexdump2string@@YAHPEAXHPEADH@Z PROC			; hexdump2string
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16534
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 16536
	lea	rax, QWORD PTR hexdigit$[rsp]
	lea	rcx, OFFSET FLAT:$SG168090
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 17
	rep movsb
; Line 16538
	cmp	DWORD PTR memlen$[rsp], 0
	jle	SHORT $LN6@hexdump2st
	cmp	DWORD PTR buflen$[rsp], 0
	jg	SHORT $LN5@hexdump2st
$LN6@hexdump2st:
; Line 16539
	xor	eax, eax
	jmp	$LN1@hexdump2st
$LN5@hexdump2st:
; Line 16541
	imul	eax, DWORD PTR memlen$[rsp], 3
	cmp	DWORD PTR buflen$[rsp], eax
	jge	SHORT $LN7@hexdump2st
; Line 16542
	xor	eax, eax
	jmp	$LN1@hexdump2st
$LN7@hexdump2st:
; Line 16545
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@hexdump2st
$LN2@hexdump2st:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@hexdump2st:
	mov	eax, DWORD PTR memlen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@hexdump2st
; Line 16546
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN8@hexdump2st
; Line 16547
	imul	eax, DWORD PTR i$[rsp], 3
	dec	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
$LN8@hexdump2st:
; Line 16549
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR mem$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sar	eax, 4
	and	eax, 15
	cdqe
	imul	ecx, DWORD PTR i$[rsp], 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR hexdigit$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 16550
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR mem$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	and	eax, 15
	cdqe
	imul	ecx, DWORD PTR i$[rsp], 3
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR hexdigit$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 16551
	jmp	SHORT $LN2@hexdump2st
$LN3@hexdump2st:
; Line 16552
	imul	eax, DWORD PTR memlen$[rsp], 3
	dec	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 16554
	mov	eax, 1
$LN1@hexdump2st:
; Line 16555
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?hexdump2string@@YAHPEAXHPEADH@Z ENDP			; hexdump2string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
err$ = 48
ret$ = 52
i$ = 56
tv78 = 60
trust_ret$1 = 64
to$2 = 68
timeout$ = 72
tv247 = 76
short_trust$ = 80
pollres$3 = 84
tv94 = 88
tv143 = 96
tv152 = 104
tv163 = 112
tv178 = 120
tv185 = 128
tv200 = 136
tv221 = 144
tv231 = 152
tv282 = 160
tv289 = 168
pfd$4 = 176
__$ArrayPad$ = 192
conn$ = 224
func$ = 232
client_options$ = 240
?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z PROC ; sslize
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16397
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 16400
	mov	DWORD PTR timeout$[rsp], 1024		; 00000400H
; Line 16403
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@sslize
; Line 16404
	xor	eax, eax
	jmp	$LN1@sslize
$LN5@sslize:
; Line 16407
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 53				; 00000035H
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN27@sslize
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 53				; 00000035H
	lea	rdx, OFFSET FLAT:$SG168038
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN27@sslize
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN28@sslize
$LN27@sslize:
	mov	DWORD PTR tv78[rsp], 0
$LN28@sslize:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR short_trust$[rsp], eax
; Line 16411
	cmp	DWORD PTR short_trust$[rsp], 0
	je	SHORT $LN6@sslize
; Line 16412
	mov	rcx, QWORD PTR conn$[rsp]
	call	?refresh_trust@@YAHPEAUmg_connection@@@Z ; refresh_trust
	mov	DWORD PTR trust_ret$1[rsp], eax
; Line 16413
	cmp	DWORD PTR trust_ret$1[rsp], 0
	jne	SHORT $LN7@sslize
; Line 16414
	mov	eax, DWORD PTR trust_ret$1[rsp]
	jmp	$LN1@sslize
$LN7@sslize:
$LN6@sslize:
; Line 16418
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 16419
	mov	eax, 24
	imul	rax, rax, 7
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv94[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv94[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2288], rax
; Line 16420
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 16421
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2288], 0
	jne	SHORT $LN8@sslize
; Line 16422
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168042
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16422				; 00004026H
	lea	r8, OFFSET FLAT:$SG168043
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16423
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv143[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv143[rsp]
; Line 16424
	xor	eax, eax
	jmp	$LN1@sslize
$LN8@sslize:
; Line 16426
	mov	eax, 24
	imul	rax, rax, 34				; 00000022H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv152[rsp], rax
	mov	r8, QWORD PTR conn$[rsp]
	xor	edx, edx
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv152[rsp]
; Line 16428
	mov	eax, 24
	imul	rax, rax, 6
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv163[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2296]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv163[rsp]
	mov	DWORD PTR ret$[rsp], eax
; Line 16429
	cmp	DWORD PTR ret$[rsp], 1
	je	$LN9@sslize
; Line 16430
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168045
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16430				; 0000402eH
	lea	r8, OFFSET FLAT:$SG168046
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16431
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv178[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv178[rsp]
; Line 16432
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2288], 0
; Line 16433
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv185[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv185[rsp]
; Line 16434
	xor	eax, eax
	jmp	$LN1@sslize
$LN9@sslize:
; Line 16437
	cmp	QWORD PTR client_options$[rsp], 0
	je	SHORT $LN10@sslize
; Line 16438
	mov	rax, QWORD PTR client_options$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN11@sslize
; Line 16439
	mov	eax, 24
	imul	rax, rax, 38				; 00000026H
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv200[rsp], rax
	mov	rax, QWORD PTR client_options$[rsp]
	mov	r9, QWORD PTR [rax+32]
	xor	r8d, r8d
	mov	edx, 55					; 00000037H
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv200[rsp]
$LN11@sslize:
$LN10@sslize:
; Line 16444
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN12@sslize
; Line 16447
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atoi
	mov	DWORD PTR to$2[rsp], eax
; Line 16448
	cmp	DWORD PTR to$2[rsp], 0
	jl	SHORT $LN13@sslize
; Line 16449
	mov	eax, DWORD PTR to$2[rsp]
	mov	DWORD PTR timeout$[rsp], eax
$LN13@sslize:
$LN12@sslize:
; Line 16456
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@sslize
$LN2@sslize:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 50					; 00000032H
	mov	DWORD PTR i$[rsp], eax
$LN4@sslize:
	mov	eax, DWORD PTR timeout$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	ja	$LN3@sslize
; Line 16457
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 16459
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv221[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv221[rsp]
	mov	DWORD PTR ret$[rsp], eax
; Line 16460
	cmp	DWORD PTR ret$[rsp], 1
	je	$LN14@sslize
; Line 16461
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, DWORD PTR ret$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv231[rsp]
	mov	DWORD PTR err$[rsp], eax
; Line 16465
	cmp	DWORD PTR err$[rsp], 7
	je	SHORT $LN18@sslize
	cmp	DWORD PTR err$[rsp], 8
	je	SHORT $LN18@sslize
	cmp	DWORD PTR err$[rsp], 2
	je	SHORT $LN18@sslize
	cmp	DWORD PTR err$[rsp], 3
	je	SHORT $LN18@sslize
	cmp	DWORD PTR err$[rsp], 4
	jne	$LN16@sslize
$LN18@sslize:
; Line 16466
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN19@sslize
; Line 16468
	jmp	$LN3@sslize
$LN19@sslize:
; Line 16470
	cmp	DWORD PTR err$[rsp], 4
	jne	SHORT $LN20@sslize
; Line 16472
	mov	ecx, 50					; 00000032H
	call	QWORD PTR __imp_Sleep
; Line 16473
	jmp	SHORT $LN21@sslize
$LN20@sslize:
; Line 16479
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2296]
	mov	QWORD PTR pfd$4[rsp], rax
; Line 16480
	cmp	DWORD PTR err$[rsp], 7
	je	SHORT $LN29@sslize
	cmp	DWORD PTR err$[rsp], 3
	je	SHORT $LN29@sslize
	mov	DWORD PTR tv247[rsp], 1
	jmp	SHORT $LN30@sslize
$LN29@sslize:
	mov	DWORD PTR tv247[rsp], 4
$LN30@sslize:
	movzx	eax, WORD PTR tv247[rsp]
	mov	WORD PTR pfd$4[rsp+8], ax
; Line 16484
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 40					; 00000028H
	mov	r9, rax
	mov	r8d, 50					; 00000032H
	mov	edx, 1
	lea	rcx, QWORD PTR pfd$4[rsp]
	call	?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z	; mg_poll
	mov	DWORD PTR pollres$3[rsp], eax
; Line 16486
	cmp	DWORD PTR pollres$3[rsp], 0
	jge	SHORT $LN22@sslize
; Line 16489
	jmp	SHORT $LN3@sslize
$LN22@sslize:
$LN21@sslize:
; Line 16491
	jmp	SHORT $LN17@sslize
$LN16@sslize:
; Line 16493
	cmp	DWORD PTR err$[rsp], 5
	jne	SHORT $LN23@sslize
; Line 16495
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG168062
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16495				; 0000406fH
	lea	r8, OFFSET FLAT:$SG168063
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16496
	jmp	SHORT $LN3@sslize
; Line 16498
	jmp	SHORT $LN24@sslize
$LN23@sslize:
; Line 16500
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168064
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16500				; 00004074H
	lea	r8, OFFSET FLAT:$SG168065
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16501
	jmp	SHORT $LN3@sslize
$LN24@sslize:
$LN17@sslize:
; Line 16504
	jmp	SHORT $LN15@sslize
$LN14@sslize:
; Line 16506
	jmp	SHORT $LN3@sslize
$LN15@sslize:
; Line 16508
	jmp	$LN2@sslize
$LN3@sslize:
; Line 16509
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 16511
	cmp	DWORD PTR ret$[rsp], 1
	je	SHORT $LN25@sslize
; Line 16512
	mov	eax, 24
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv282[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv282[rsp]
; Line 16513
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2288], 0
; Line 16514
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv289[rsp], rax
	xor	ecx, ecx
	call	QWORD PTR tv289[rsp]
; Line 16515
	xor	eax, eax
	jmp	SHORT $LN1@sslize
$LN25@sslize:
; Line 16518
	mov	eax, 1
$LN1@sslize:
; Line 16519
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?sslize@@YAHPEAUmg_connection@@P6AHPEAUssl_st@@@ZPEBUmg_client_options@@@Z ENDP ; sslize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
should_verify_peer$ = 48
chain$ = 56
t$ = 64
pem$ = 72
ca_path$1 = 80
ca_file$2 = 88
tv160 = 96
tv175 = 104
tv173 = 112
cert_buf$ = 120
__$ArrayPad$ = 168
conn$ = 192
?refresh_trust@@YAHPEAUmg_connection@@@Z PROC		; refresh_trust
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16317
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 16319
	mov	QWORD PTR t$[rsp], 0
; Line 16324
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 41				; 00000029H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR pem$[rsp], rax
	cmp	QWORD PTR pem$[rsp], 0
	jne	SHORT $LN2@refresh_tr
; Line 16327
	xor	eax, eax
	jmp	$LN1@refresh_tr
$LN2@refresh_tr:
; Line 16329
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 42				; 0000002aH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR chain$[rsp], rax
; Line 16330
	cmp	QWORD PTR chain$[rsp], 0
	jne	SHORT $LN3@refresh_tr
; Line 16332
	mov	rax, QWORD PTR pem$[rsp]
	mov	QWORD PTR chain$[rsp], rax
$LN3@refresh_tr:
; Line 16334
	mov	rax, QWORD PTR chain$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN4@refresh_tr
; Line 16335
	mov	QWORD PTR chain$[rsp], 0
$LN4@refresh_tr:
; Line 16338
	lea	rdx, QWORD PTR cert_buf$[rsp]
	mov	rcx, QWORD PTR pem$[rsp]
	call	stat
	cmp	eax, -1
	je	SHORT $LN5@refresh_tr
; Line 16339
	mov	rax, QWORD PTR cert_buf$[rsp+32]
	mov	QWORD PTR t$[rsp], rax
$LN5@refresh_tr:
; Line 16342
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 16343
	cmp	QWORD PTR t$[rsp], 0
	je	$LN6@refresh_tr
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR t$[rsp]
	cmp	QWORD PTR [rax+528], rcx
	je	$LN6@refresh_tr
; Line 16344
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+528], rcx
; Line 16346
	mov	DWORD PTR should_verify_peer$[rsp], 0
; Line 16347
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 45				; 0000002dH
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN7@refresh_tr
; Line 16349
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 45				; 0000002dH
	lea	rdx, OFFSET FLAT:$SG167974
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN8@refresh_tr
; Line 16350
	mov	DWORD PTR should_verify_peer$[rsp], 1
; Line 16351
	jmp	SHORT $LN9@refresh_tr
$LN8@refresh_tr:
; Line 16353
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 45				; 0000002dH
	lea	rdx, OFFSET FLAT:$SG167976
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN10@refresh_tr
; Line 16354
	mov	DWORD PTR should_verify_peer$[rsp], 1
$LN10@refresh_tr:
$LN9@refresh_tr:
$LN7@refresh_tr:
; Line 16358
	cmp	DWORD PTR should_verify_peer$[rsp], 0
	je	$LN11@refresh_tr
; Line 16359
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 47				; 0000002fH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR ca_path$1[rsp], rax
; Line 16360
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 48				; 00000030H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR ca_file$2[rsp], rax
; Line 16364
	mov	eax, 24
	imul	rax, rax, 21
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv160[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	r8, QWORD PTR ca_path$1[rsp]
	mov	rdx, QWORD PTR ca_file$2[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv160[rsp]
	cmp	eax, 1
	je	SHORT $LN12@refresh_tr
; Line 16365
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 16366
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR tv175[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	QWORD PTR tv173[rsp], rax
	mov	rax, QWORD PTR tv175[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167979
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16373				; 00003ff5H
	lea	r8, OFFSET FLAT:$SG167980
	mov	rdx, QWORD PTR tv173[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16374
	xor	eax, eax
	jmp	SHORT $LN1@refresh_tr
$LN12@refresh_tr:
$LN11@refresh_tr:
; Line 16378
	mov	r9, QWORD PTR chain$[rsp]
	mov	r8, QWORD PTR pem$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2280]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z ; ssl_use_pem_file
	test	eax, eax
	jne	SHORT $LN13@refresh_tr
; Line 16379
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 16380
	xor	eax, eax
	jmp	SHORT $LN1@refresh_tr
$LN13@refresh_tr:
$LN6@refresh_tr:
; Line 16383
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 16385
	mov	eax, 1
$LN1@refresh_tr:
; Line 16386
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	ret	0
?refresh_trust@@YAHPEAUmg_connection@@@Z ENDP		; refresh_trust
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
err$ = 32
tv77 = 40
tv76 = 48
?ssl_error@@YAPEBDXZ PROC				; ssl_error
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16525
	sub	rsp, 72					; 00000048H
; Line 16527
	mov	eax, 24
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
	mov	DWORD PTR err$[rsp], eax
; Line 16528
	cmp	DWORD PTR err$[rsp], 0
	jne	SHORT $LN3@ssl_error
	lea	rax, OFFSET FLAT:$SG168076
	mov	QWORD PTR tv77[rsp], rax
	jmp	SHORT $LN4@ssl_error
$LN3@ssl_error:
	mov	eax, 24
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	mov	ecx, DWORD PTR err$[rsp]
	call	QWORD PTR tv76[rsp]
	mov	QWORD PTR tv77[rsp], rax
$LN4@ssl_error:
	mov	rax, QWORD PTR tv77[rsp]
; Line 16529
	add	rsp, 72					; 00000048H
	ret	0
?ssl_error@@YAPEBDXZ ENDP				; ssl_error
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 64
tv93 = 72
tv143 = 80
tv161 = 88
phys_ctx$ = 112
dom_ctx$ = 120
pem$ = 128
chain$ = 136
?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z PROC ; ssl_use_pem_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16883
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 16884
	mov	eax, 24
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv73[rsp], rax
	mov	r8d, 1
	mov	rdx, QWORD PTR pem$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv73[rsp]
	test	eax, eax
	jne	SHORT $LN2@ssl_use_pe
; Line 16885
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR pem$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168317
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168318
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16889				; 000041f9H
	lea	r8, OFFSET FLAT:$SG168319
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16890
	xor	eax, eax
	jmp	$LN1@ssl_use_pe
$LN2@ssl_use_pe:
; Line 16894
	mov	eax, 24
	imul	rax, rax, 11
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv93[rsp], rax
	mov	r8d, 1
	mov	rdx, QWORD PTR pem$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv93[rsp]
	test	eax, eax
	jne	SHORT $LN3@ssl_use_pe
; Line 16895
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR pem$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168321
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168322
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16899				; 00004203H
	lea	r8, OFFSET FLAT:$SG168323
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16900
	xor	eax, eax
	jmp	$LN1@ssl_use_pe
$LN3@ssl_use_pe:
; Line 16903
	mov	eax, 24
	imul	rax, rax, 28
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv143[rsp], rax
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv143[rsp]
	test	eax, eax
	jne	SHORT $LN4@ssl_use_pe
; Line 16904
	mov	rax, QWORD PTR pem$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168325
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168326
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16907				; 0000420bH
	lea	r8, OFFSET FLAT:$SG168327
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16908
	xor	eax, eax
	jmp	$LN1@ssl_use_pe
$LN4@ssl_use_pe:
; Line 16919
	cmp	QWORD PTR chain$[rsp], 0
	je	SHORT $LN5@ssl_use_pe
; Line 16920
	mov	eax, 24
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv161[rsp], rax
	mov	rdx, QWORD PTR chain$[rsp]
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv161[rsp]
	test	eax, eax
	jne	SHORT $LN6@ssl_use_pe
; Line 16921
	call	?ssl_error@@YAPEBDXZ			; ssl_error
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR chain$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG168330
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168331
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16925				; 0000421dH
	lea	r8, OFFSET FLAT:$SG168332
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16926
	xor	eax, eax
	jmp	SHORT $LN1@ssl_use_pe
$LN6@ssl_use_pe:
$LN5@ssl_use_pe:
; Line 16929
	mov	eax, 1
$LN1@ssl_use_pe:
; Line 16930
	add	rsp, 104				; 00000068H
	ret	0
?ssl_use_pem_file@@YAHPEAUmg_context@@PEAUmg_domain_context@@PEBD2@Z ENDP ; ssl_use_pem_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tls$ = 32
key$ = 64
?tls_dtor@@YAXPEAX@Z PROC				; tls_dtor
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16261
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 16262
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR tls$[rsp], rax
; Line 16265
	cmp	QWORD PTR tls$[rsp], 0
	je	SHORT $LN2@tls_dtor
; Line 16266
	mov	rax, QWORD PTR tls$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	SHORT $LN3@tls_dtor
; Line 16267
	mov	rax, QWORD PTR tls$[rsp]
	mov	DWORD PTR [rax], -3
; Line 16268
	mov	rcx, QWORD PTR tls$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN3@tls_dtor:
$LN2@tls_dtor:
; Line 16271
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 16272
	add	rsp, 56					; 00000038H
	ret	0
?tls_dtor@@YAXPEAX@Z ENDP				; tls_dtor
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
matched$ = 52
flag$ = 56
allowed$ = 60
tv130 = 64
list$1 = 72
vec$ = 80
phys_ctx$ = 112
sa$ = 120
?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z PROC		; check_acl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16169
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 16173
	cmp	QWORD PTR phys_ctx$[rsp], 0
	je	$LN4@check_acl
; Line 16174
	mov	eax, 8
	imul	rax, rax, 39				; 00000027H
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+32152]
	mov	QWORD PTR list$1[rsp], rax
; Line 16177
	cmp	QWORD PTR list$1[rsp], 0
	jne	SHORT $LN10@check_acl
	mov	BYTE PTR tv70[rsp], 43			; 0000002bH
	jmp	SHORT $LN11@check_acl
$LN10@check_acl:
	mov	BYTE PTR tv70[rsp], 45			; 0000002dH
$LN11@check_acl:
	movsx	eax, BYTE PTR tv70[rsp]
	mov	DWORD PTR allowed$[rsp], eax
$LN2@check_acl:
; Line 16179
	xor	r8d, r8d
	lea	rdx, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR list$1[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR list$1[rsp], rax
	cmp	QWORD PTR list$1[rsp], 0
	je	$LN3@check_acl
; Line 16180
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vec$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR flag$[rsp], eax
; Line 16181
	mov	DWORD PTR matched$[rsp], -1
; Line 16182
	cmp	QWORD PTR vec$[rsp+8], 0
	jbe	SHORT $LN5@check_acl
	cmp	DWORD PTR flag$[rsp], 43		; 0000002bH
	je	SHORT $LN6@check_acl
	cmp	DWORD PTR flag$[rsp], 45		; 0000002dH
	jne	SHORT $LN5@check_acl
$LN6@check_acl:
; Line 16183
	mov	rax, QWORD PTR vec$[rsp]
	inc	rax
	mov	QWORD PTR vec$[rsp], rax
; Line 16184
	mov	rax, QWORD PTR vec$[rsp+8]
	dec	rax
	mov	QWORD PTR vec$[rsp+8], rax
; Line 16185
	mov	r8d, 1
	mov	rdx, QWORD PTR sa$[rsp]
	lea	rcx, QWORD PTR vec$[rsp]
	call	?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z ; parse_match_net
	mov	DWORD PTR matched$[rsp], eax
$LN5@check_acl:
; Line 16187
	cmp	DWORD PTR matched$[rsp], 0
	jge	SHORT $LN7@check_acl
; Line 16188
	lea	rax, OFFSET FLAT:$SG167933
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167934
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16190				; 00003f3eH
	lea	r8, OFFSET FLAT:$SG167935
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 16191
	mov	eax, -1
	jmp	SHORT $LN1@check_acl
$LN7@check_acl:
; Line 16193
	cmp	DWORD PTR matched$[rsp], 0
	je	SHORT $LN8@check_acl
; Line 16194
	mov	eax, DWORD PTR flag$[rsp]
	mov	DWORD PTR allowed$[rsp], eax
$LN8@check_acl:
; Line 16196
	jmp	$LN2@check_acl
$LN3@check_acl:
; Line 16198
	cmp	DWORD PTR allowed$[rsp], 43		; 0000002bH
	jne	SHORT $LN12@check_acl
	mov	DWORD PTR tv130[rsp], 1
	jmp	SHORT $LN13@check_acl
$LN12@check_acl:
	mov	DWORD PTR tv130[rsp], 0
$LN13@check_acl:
	mov	eax, DWORD PTR tv130[rsp]
	jmp	SHORT $LN1@check_acl
$LN4@check_acl:
; Line 16200
	mov	eax, -1
$LN1@check_acl:
; Line 16201
	add	rsp, 104				; 00000068H
	ret	0
?check_acl@@YAHPEAUmg_context@@PEBTusa@@@Z ENDP		; check_acl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
header_value$ = 32
conn$ = 64
header$ = 72
?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z PROC	; header_val
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 15986
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 15989
	mov	rdx, QWORD PTR header$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR header_value$[rsp], rax
	cmp	QWORD PTR header_value$[rsp], 0
	jne	SHORT $LN2@header_val
; Line 15990
	lea	rax, OFFSET FLAT:$SG167871
	jmp	SHORT $LN1@header_val
; Line 15991
	jmp	SHORT $LN3@header_val
$LN2@header_val:
; Line 15992
	mov	rax, QWORD PTR header_value$[rsp]
$LN3@header_val:
$LN1@header_val:
; Line 15994
	add	rsp, 56					; 00000038H
	ret	0
?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z ENDP	; header_val
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
portsTotal$ = 80
portsOk$ = 84
opt_listen_backlog$ = 88
len$ = 92
tv140 = 96
ip_version$ = 100
vec$ = 104
on$ = 120
tv194 = 124
tv244 = 128
err$1 = 132
list$ = 136
ptr$ = 144
opt_txt$ = 152
pfd$ = 160
tv196 = 168
tv246 = 176
so$ = 184
usa$ = 232
__$ArrayPad$ = 248
phys_ctx$ = 288
?set_ports_option@@YAHPEAUmg_context@@@Z PROC		; set_ports_option
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 15676
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 15678
	mov	DWORD PTR on$[rsp], 1
; Line 15690
	mov	DWORD PTR portsTotal$[rsp], 0
; Line 15691
	mov	DWORD PTR portsOk$[rsp], 0
; Line 15696
	cmp	QWORD PTR phys_ctx$[rsp], 0
	jne	SHORT $LN4@set_ports_
; Line 15697
	xor	eax, eax
	jmp	$LN1@set_ports_
$LN4@set_ports_:
; Line 15700
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	lea	rcx, QWORD PTR so$[rsp]
	call	memset
; Line 15701
	mov	r8d, 16
	xor	edx, edx
	lea	rcx, QWORD PTR usa$[rsp]
	call	memset
; Line 15702
	mov	DWORD PTR len$[rsp], 16
; Line 15703
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+32152]
	mov	QWORD PTR list$[rsp], rax
$LN34@set_ports_:
$LN33@set_ports_:
$LN32@set_ports_:
$LN31@set_ports_:
$LN30@set_ports_:
$LN29@set_ports_:
$LN28@set_ports_:
$LN27@set_ports_:
$LN26@set_ports_:
$LN25@set_ports_:
$LN24@set_ports_:
$LN2@set_ports_:
; Line 15705
	xor	r8d, r8d
	lea	rdx, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	$LN3@set_ports_
; Line 15707
	mov	eax, DWORD PTR portsTotal$[rsp]
	inc	eax
	mov	DWORD PTR portsTotal$[rsp], eax
; Line 15709
	lea	r8, QWORD PTR ip_version$[rsp]
	lea	rdx, QWORD PTR so$[rsp]
	lea	rcx, QWORD PTR vec$[rsp]
	call	?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z ; parse_port_string
	test	eax, eax
	jne	SHORT $LN5@set_ports_
; Line 15710
	lea	rax, OFFSET FLAT:$SG167821
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR portsTotal$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR vec$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR vec$[rsp+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167822
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15716				; 00003d64H
	lea	r8, OFFSET FLAT:$SG167823
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15717
	jmp	$LN2@set_ports_
$LN5@set_ports_:
; Line 15721
	movzx	eax, BYTE PTR so$[rsp+40]
	test	eax, eax
	je	SHORT $LN6@set_ports_
	mov	rax, QWORD PTR phys_ctx$[rsp]
	cmp	QWORD PTR [rax+32144], 0
	jne	SHORT $LN6@set_ports_
; Line 15723
	mov	eax, DWORD PTR portsTotal$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167825
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15725				; 00003d6dH
	lea	r8, OFFSET FLAT:$SG167826
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15726
	jmp	$LN24@set_ports_
$LN6@set_ports_:
; Line 15737
	cmp	DWORD PTR ip_version$[rsp], 99		; 00000063H
	jne	SHORT $LN22@set_ports_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN23@set_ports_
$LN22@set_ports_:
	mov	DWORD PTR tv140[rsp], 6
$LN23@set_ports_:
	movzx	eax, WORD PTR so$[rsp+8]
	mov	r8d, DWORD PTR tv140[rsp]
	mov	edx, 1
	mov	ecx, eax
	call	QWORD PTR __imp_socket
	mov	QWORD PTR so$[rsp], rax
	cmp	QWORD PTR so$[rsp], -1
	jne	SHORT $LN7@set_ports_
; Line 15739
	mov	eax, DWORD PTR portsTotal$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167828
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15741				; 00003d7dH
	lea	r8, OFFSET FLAT:$SG167829
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15742
	jmp	$LN25@set_ports_
$LN7@set_ports_:
; Line 15760
	mov	DWORD PTR [rsp+32], 4
	lea	r9, QWORD PTR on$[rsp]
	mov	r8d, -5
	mov	edx, 65535				; 0000ffffH
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_setsockopt
	test	eax, eax
	je	SHORT $LN8@set_ports_
; Line 15763
	mov	eax, DWORD PTR portsTotal$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167831
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15766				; 00003d96H
	lea	r8, OFFSET FLAT:$SG167832
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN8@set_ports_:
; Line 15790
	cmp	DWORD PTR ip_version$[rsp], 4
	jle	SHORT $LN9@set_ports_
; Line 15825
	lea	rax, OFFSET FLAT:$SG167834
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167835
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15825				; 00003dd1H
	lea	r8, OFFSET FLAT:$SG167836
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15826
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15827
	mov	QWORD PTR so$[rsp], -1
; Line 15828
	jmp	$LN26@set_ports_
$LN9@set_ports_:
; Line 15832
	movzx	eax, WORD PTR so$[rsp+8]
	cmp	eax, 2
	jne	$LN10@set_ports_
; Line 15834
	mov	DWORD PTR len$[rsp], 16
; Line 15835
	mov	r8d, DWORD PTR len$[rsp]
	lea	rdx, QWORD PTR so$[rsp+8]
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_bind
	test	eax, eax
	je	$LN12@set_ports_
; Line 15836
	call	_errno
	mov	ecx, DWORD PTR [rax]
	call	strerror
	mov	QWORD PTR tv196[rsp], rax
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR tv194[rsp], eax
	mov	rax, QWORD PTR tv196[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR tv194[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR vec$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR vec$[rsp+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167840
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15841				; 00003de1H
	lea	r8, OFFSET FLAT:$SG167841
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15842
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15843
	mov	QWORD PTR so$[rsp], -1
; Line 15844
	jmp	$LN27@set_ports_
$LN12@set_ports_:
; Line 15846
	jmp	SHORT $LN11@set_ports_
$LN10@set_ports_:
; Line 15881
	mov	eax, DWORD PTR portsTotal$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167842
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15884				; 00003e0cH
	lea	r8, OFFSET FLAT:$SG167843
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15885
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15886
	mov	QWORD PTR so$[rsp], -1
; Line 15887
	jmp	$LN28@set_ports_
$LN11@set_ports_:
; Line 15890
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax+32152]
	mov	QWORD PTR opt_txt$[rsp], rax
; Line 15891
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR opt_txt$[rsp]
	call	strtol
	mov	DWORD PTR opt_listen_backlog$[rsp], eax
; Line 15892
	cmp	DWORD PTR opt_listen_backlog$[rsp], 2147483647 ; 7fffffffH
	jg	SHORT $LN14@set_ports_
	cmp	DWORD PTR opt_listen_backlog$[rsp], 1
	jge	SHORT $LN13@set_ports_
$LN14@set_ports_:
; Line 15893
	mov	eax, 24
	imul	rax, rax, 7
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rdx, QWORD PTR opt_txt$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167846
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15896				; 00003e18H
	lea	r8, OFFSET FLAT:$SG167847
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15897
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15898
	mov	QWORD PTR so$[rsp], -1
; Line 15899
	jmp	$LN29@set_ports_
$LN13@set_ports_:
; Line 15902
	mov	edx, DWORD PTR opt_listen_backlog$[rsp]
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_listen
	test	eax, eax
	je	$LN15@set_ports_
; Line 15904
	call	_errno
	mov	ecx, DWORD PTR [rax]
	call	strerror
	mov	QWORD PTR tv246[rsp], rax
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR tv244[rsp], eax
	mov	rax, QWORD PTR tv246[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR tv244[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR vec$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR vec$[rsp+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167849
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15909				; 00003e25H
	lea	r8, OFFSET FLAT:$SG167850
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15910
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15911
	mov	QWORD PTR so$[rsp], -1
; Line 15912
	jmp	$LN30@set_ports_
$LN15@set_ports_:
; Line 15916
	lea	r8, QWORD PTR len$[rsp]
	lea	rdx, QWORD PTR usa$[rsp]
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_getsockname
	test	eax, eax
	jne	SHORT $LN17@set_ports_
	movzx	eax, WORD PTR usa$[rsp]
	movzx	ecx, WORD PTR so$[rsp+8]
	cmp	eax, ecx
	je	$LN16@set_ports_
$LN17@set_ports_:
; Line 15918
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR err$1[rsp], eax
; Line 15919
	call	_errno
	mov	ecx, DWORD PTR [rax]
	call	strerror
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR err$1[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR vec$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR vec$[rsp+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG167853
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15924				; 00003e34H
	lea	r8, OFFSET FLAT:$SG167854
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15925
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15926
	mov	QWORD PTR so$[rsp], -1
; Line 15927
	jmp	$LN31@set_ports_
$LN16@set_ports_:
; Line 15937
	movzx	eax, WORD PTR usa$[rsp+2]
	mov	WORD PTR so$[rsp+10], ax
; Line 15945
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	inc	eax
	mov	eax, eax
	imul	rax, rax, 48				; 00000030H
	mov	rdx, rax
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?mg_realloc@@YAPEAXPEAX_K@Z		; mg_realloc
	mov	QWORD PTR ptr$[rsp], rax
	cmp	QWORD PTR ptr$[rsp], 0
	jne	SHORT $LN18@set_ports_
; Line 15947
	lea	rax, OFFSET FLAT:$SG167856
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167857
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15947				; 00003e4bH
	lea	r8, OFFSET FLAT:$SG167858
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15948
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15949
	mov	QWORD PTR so$[rsp], -1
; Line 15950
	jmp	$LN32@set_ports_
$LN18@set_ports_:
; Line 15958
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	inc	eax
	mov	eax, eax
	imul	rax, rax, 16
	mov	rdx, rax
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?mg_realloc@@YAPEAXPEAX_K@Z		; mg_realloc
	mov	QWORD PTR pfd$[rsp], rax
	cmp	QWORD PTR pfd$[rsp], 0
	jne	SHORT $LN19@set_ports_
; Line 15960
	lea	rax, OFFSET FLAT:$SG167860
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167861
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 15960				; 00003e58H
	lea	r8, OFFSET FLAT:$SG167862
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 15961
	mov	rcx, QWORD PTR so$[rsp]
	call	QWORD PTR __imp_closesocket
; Line 15962
	mov	QWORD PTR so$[rsp], -1
; Line 15963
	mov	rcx, QWORD PTR ptr$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 15964
	jmp	$LN33@set_ports_
$LN19@set_ports_:
; Line 15967
	mov	r8, QWORD PTR phys_ctx$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR so$[rsp]
	call	?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z ; set_close_on_exec
; Line 15968
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR ptr$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 15969
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdx, QWORD PTR so$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 15970
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR pfd$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 15971
	mov	rax, QWORD PTR phys_ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	inc	eax
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 15972
	mov	eax, DWORD PTR portsOk$[rsp]
	inc	eax
	mov	DWORD PTR portsOk$[rsp], eax
; Line 15973
	jmp	$LN34@set_ports_
$LN3@set_ports_:
; Line 15975
	mov	eax, DWORD PTR portsTotal$[rsp]
	cmp	DWORD PTR portsOk$[rsp], eax
	je	SHORT $LN20@set_ports_
; Line 15976
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	?close_all_listening_sockets@@YAXPEAUmg_context@@@Z ; close_all_listening_sockets
; Line 15977
	mov	DWORD PTR portsOk$[rsp], 0
$LN20@set_ports_:
; Line 15980
	mov	eax, DWORD PTR portsOk$[rsp]
$LN1@set_ports_:
; Line 15981
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?set_ports_option@@YAHPEAUmg_context@@@Z ENDP		; set_ports_option
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
prevIsNumber$1 = 32
i$2 = 36
portslen$3 = 40
ports$ = 64
?is_ssl_port_used@@YAHPEBD@Z PROC			; is_ssl_port_used
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 15619
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 15620
	cmp	QWORD PTR ports$[rsp], 0
	je	$LN5@is_ssl_por
; Line 15656
	mov	rcx, QWORD PTR ports$[rsp]
	call	strlen
	mov	DWORD PTR portslen$3[rsp], eax
; Line 15657
	mov	BYTE PTR prevIsNumber$1[rsp], 0
; Line 15659
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@is_ssl_por
$LN2@is_ssl_por:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@is_ssl_por:
	mov	eax, DWORD PTR portslen$3[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN3@is_ssl_por
; Line 15660
	movsx	eax, BYTE PTR prevIsNumber$1[rsp]
	test	eax, eax
	je	SHORT $LN6@is_ssl_por
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR ports$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 115				; 00000073H
	je	SHORT $LN7@is_ssl_por
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR ports$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN6@is_ssl_por
$LN7@is_ssl_por:
; Line 15661
	mov	eax, 1
	jmp	SHORT $LN1@is_ssl_por
$LN6@is_ssl_por:
; Line 15663
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR ports$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@is_ssl_por
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR ports$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN8@is_ssl_por
; Line 15664
	mov	BYTE PTR prevIsNumber$1[rsp], 1
; Line 15665
	jmp	SHORT $LN9@is_ssl_por
$LN8@is_ssl_por:
; Line 15666
	mov	BYTE PTR prevIsNumber$1[rsp], 0
$LN9@is_ssl_por:
; Line 15668
	jmp	SHORT $LN2@is_ssl_por
$LN3@is_ssl_por:
$LN5@is_ssl_por:
; Line 15670
	xor	eax, eax
$LN1@is_ssl_por:
; Line 15671
	add	rsp, 56					; 00000038H
	ret	0
?is_ssl_port_used@@YAHPEBD@Z ENDP			; is_ssl_port_used
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
tv226 = 68
tv230 = 69
tv233 = 70
port$ = 72
ch$ = 76
portUL$ = 80
hostnlen$1 = 88
a$ = 96
b$ = 100
c$ = 104
d$ = 108
cb$ = 112
endptr$ = 120
hostname$2 = 128
__$ArrayPad$ = 384
vec$ = 416
so$ = 424
ip_version$ = 432
?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z PROC	; parse_port_string
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 15441
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 408				; 00000198H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 15455
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR so$[rsp]
	call	memset
; Line 15456
	mov	eax, 2
	mov	rcx, QWORD PTR so$[rsp]
	mov	WORD PTR [rcx+8], ax
; Line 15457
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 0
; Line 15460
	mov	DWORD PTR port$[rsp], 0
; Line 15461
	mov	DWORD PTR len$[rsp], 0
; Line 15474
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR port$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR c$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR b$[rsp]
	lea	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:$SG167742
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	sscanf
	cmp	eax, 5
	jne	SHORT $LN2@parse_port
; Line 15476
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 24
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 16
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 8
	or	eax, ecx
	or	eax, DWORD PTR d$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_htonl
	mov	rcx, QWORD PTR so$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 15478
	movzx	ecx, WORD PTR port$[rsp]
	call	QWORD PTR __imp_htons
	mov	rcx, QWORD PTR so$[rsp]
	mov	WORD PTR [rcx+10], ax
; Line 15479
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 4
; Line 15493
	jmp	$LN3@parse_port
$LN2@parse_port:
; Line 15494
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN4@parse_port
	mov	rax, QWORD PTR vec$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	lea	r9, QWORD PTR len$[rsp]
	lea	r8, QWORD PTR port$[rsp]
	lea	rdx, OFFSET FLAT:$SG167745
	mov	rcx, rax
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN4@parse_port
; Line 15502
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 15511
	movzx	ecx, WORD PTR port$[rsp]
	call	QWORD PTR __imp_htons
	mov	rcx, QWORD PTR so$[rsp]
	mov	WORD PTR [rcx+10], ax
; Line 15512
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 4
; Line 15515
	jmp	$LN5@parse_port
$LN4@parse_port:
; Line 15516
	xor	r8d, r8d
	lea	rdx, QWORD PTR endptr$[rsp]
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strtoul
	mov	DWORD PTR portUL$[rsp], eax
	mov	ecx, DWORD PTR portUL$[rsp]
	call	?is_valid_port@@YAHK@Z			; is_valid_port
	test	eax, eax
	je	SHORT $LN6@parse_port
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR endptr$[rsp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN6@parse_port
; Line 15517
	mov	rax, QWORD PTR vec$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR endptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$[rsp], eax
; Line 15518
	movzx	eax, WORD PTR portUL$[rsp]
	mov	DWORD PTR port$[rsp], eax
; Line 15520
	movzx	ecx, WORD PTR port$[rsp]
	call	QWORD PTR __imp_htons
	mov	rcx, QWORD PTR so$[rsp]
	mov	WORD PTR [rcx+10], ax
; Line 15521
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 4
	jmp	$LN7@parse_port
$LN6@parse_port:
; Line 15523
	mov	edx, 58					; 0000003aH
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strchr
	mov	QWORD PTR cb$[rsp], rax
	cmp	QWORD PTR cb$[rsp], 0
	je	$LN8@parse_port
; Line 15534
	mov	rax, QWORD PTR vec$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR cb$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR hostnlen$1[rsp], rax
; Line 15536
	mov	rax, QWORD PTR vec$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR hostnlen$1[rsp], rax
	jae	SHORT $LN11@parse_port
	cmp	QWORD PTR hostnlen$1[rsp], 256		; 00000100H
	jb	SHORT $LN10@parse_port
$LN11@parse_port:
; Line 15538
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 0
; Line 15539
	xor	eax, eax
	jmp	$LN1@parse_port
$LN10@parse_port:
; Line 15542
	mov	rax, QWORD PTR hostnlen$1[rsp]
	inc	rax
	mov	r8, rax
	mov	rax, QWORD PTR vec$[rsp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, QWORD PTR hostname$2[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 15544
	mov	rax, QWORD PTR so$[rsp]
	add	rax, 8
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 16
	mov	r8, rax
	lea	rdx, QWORD PTR hostname$2[rsp]
	mov	ecx, 2
	call	?mg_inet_pton@@YAHHPEBDPEAX_KH@Z	; mg_inet_pton
	test	eax, eax
	je	SHORT $LN12@parse_port
; Line 15547
	mov	rax, QWORD PTR cb$[rsp]
	inc	rax
	lea	r9, QWORD PTR len$[rsp]
	lea	r8, QWORD PTR port$[rsp]
	lea	rdx, OFFSET FLAT:$SG167756
	mov	rcx, rax
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN14@parse_port
; Line 15551
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 4
; Line 15552
	movzx	ecx, WORD PTR port$[rsp]
	call	QWORD PTR __imp_htons
	mov	rcx, QWORD PTR so$[rsp]
	mov	WORD PTR [rcx+10], ax
; Line 15553
	mov	rax, QWORD PTR hostnlen$1[rsp]
	inc	rax
	mov	ecx, DWORD PTR len$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 15554
	jmp	SHORT $LN15@parse_port
$LN14@parse_port:
; Line 15555
	mov	DWORD PTR len$[rsp], 0
$LN15@parse_port:
; Line 15571
	jmp	SHORT $LN13@parse_port
$LN12@parse_port:
; Line 15572
	mov	DWORD PTR len$[rsp], 0
$LN13@parse_port:
; Line 15592
	jmp	SHORT $LN9@parse_port
$LN8@parse_port:
; Line 15594
	mov	DWORD PTR len$[rsp], 0
$LN9@parse_port:
$LN7@parse_port:
$LN5@parse_port:
$LN3@parse_port:
; Line 15600
	cmp	DWORD PTR len$[rsp], 0
	jle	$LN16@parse_port
	mov	ecx, DWORD PTR port$[rsp]
	call	?is_valid_port@@YAHK@Z			; is_valid_port
	test	eax, eax
	je	$LN16@parse_port
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR vec$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	je	SHORT $LN17@parse_port
	movsxd	rax, DWORD PTR len$[rsp]
	inc	rax
	mov	rcx, QWORD PTR vec$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jne	$LN16@parse_port
$LN17@parse_port:
; Line 15602
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR vec$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jae	SHORT $LN21@parse_port
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv226[rsp], al
	jmp	SHORT $LN22@parse_port
$LN21@parse_port:
	mov	BYTE PTR tv226[rsp], 0
$LN22@parse_port:
	movsx	eax, BYTE PTR tv226[rsp]
	mov	DWORD PTR ch$[rsp], eax
; Line 15603
	cmp	DWORD PTR ch$[rsp], 115			; 00000073H
	jne	SHORT $LN23@parse_port
	mov	BYTE PTR tv230[rsp], 1
	jmp	SHORT $LN24@parse_port
$LN23@parse_port:
	mov	BYTE PTR tv230[rsp], 0
$LN24@parse_port:
	mov	rax, QWORD PTR so$[rsp]
	movzx	ecx, BYTE PTR tv230[rsp]
	mov	BYTE PTR [rax+40], cl
; Line 15604
	cmp	DWORD PTR ch$[rsp], 114			; 00000072H
	jne	SHORT $LN25@parse_port
	mov	BYTE PTR tv233[rsp], 1
	jmp	SHORT $LN26@parse_port
$LN25@parse_port:
	mov	BYTE PTR tv233[rsp], 0
$LN26@parse_port:
	mov	rax, QWORD PTR so$[rsp]
	movzx	ecx, BYTE PTR tv233[rsp]
	mov	BYTE PTR [rax+41], cl
; Line 15605
	cmp	DWORD PTR ch$[rsp], 0
	je	SHORT $LN19@parse_port
	cmp	DWORD PTR ch$[rsp], 115			; 00000073H
	je	SHORT $LN19@parse_port
	cmp	DWORD PTR ch$[rsp], 114			; 00000072H
	jne	SHORT $LN18@parse_port
$LN19@parse_port:
; Line 15606
	mov	eax, 1
	jmp	SHORT $LN1@parse_port
$LN18@parse_port:
$LN16@parse_port:
; Line 15611
	mov	rax, QWORD PTR ip_version$[rsp]
	mov	DWORD PTR [rax], 0
; Line 15612
	xor	eax, eax
$LN1@parse_port:
; Line 15613
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 408				; 00000198H
	ret	0
?parse_port_string@@YAHPEBUvec@@PEAUsocket@@PEAH@Z ENDP	; parse_port_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
ctx$ = 64
?close_all_listening_sockets@@YAXPEAUmg_context@@@Z PROC ; close_all_listening_sockets
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 15396
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 15398
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN5@close_all_
; Line 15399
	jmp	$LN1@close_all_
$LN5@close_all_:
; Line 15402
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@close_all_
$LN2@close_all_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@close_all_:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@close_all_
; Line 15403
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_closesocket
; Line 15416
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+rax], -1
; Line 15417
	jmp	SHORT $LN2@close_all_
$LN3@close_all_:
; Line 15418
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 15419
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 15420
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 15421
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+16], 0
$LN1@close_all_:
; Line 15422
	add	rsp, 56					; 00000038H
	ret	0
?close_all_listening_sockets@@YAXPEAUmg_context@@@Z ENDP ; close_all_listening_sockets
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
handler_info$ = 56
?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z PROC ; release_handler_ref
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14629
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 14630
	cmp	QWORD PTR handler_info$[rsp], 0
	je	SHORT $LN2@release_ha
; Line 14632
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 14633
	mov	rax, QWORD PTR handler_info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	dec	eax
	mov	rcx, QWORD PTR handler_info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 14634
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
$LN2@release_ha:
; Line 14636
	add	rsp, 40					; 00000028H
	ret	0
?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z ENDP ; release_handler_ref
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcallbacks$ = 32
tv69 = 40
conn$ = 64
cbdata$ = 72
?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z PROC ; experimental_websocket_client_close_wrapper
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14615
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 14616
	mov	rax, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR pcallbacks$[rsp], rax
; Line 14617
	mov	rax, QWORD PTR pcallbacks$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN2@experiment
; Line 14618
	mov	rax, QWORD PTR pcallbacks$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv69[rsp], rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv69[rsp]
$LN2@experiment:
; Line 14620
	add	rsp, 56					; 00000038H
	ret	0
?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z ENDP ; experimental_websocket_client_close_wrapper
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcallbacks$ = 32
tv73 = 40
conn$ = 64
bits$ = 72
data$ = 80
len$ = 88
cbdata$ = 96
?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z PROC ; experimental_websocket_client_data_wrapper
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14602
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 14603
	mov	rax, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR pcallbacks$[rsp], rax
; Line 14604
	mov	rax, QWORD PTR pcallbacks$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN2@experiment
; Line 14605
	mov	rax, QWORD PTR pcallbacks$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv73[rsp], rax
	mov	r9, QWORD PTR len$[rsp]
	mov	r8, QWORD PTR data$[rsp]
	mov	edx, DWORD PTR bits$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv73[rsp]
	jmp	SHORT $LN1@experiment
$LN2@experiment:
; Line 14608
	mov	eax, 1
$LN1@experiment:
; Line 14609
	add	rsp, 56					; 00000038H
	ret	0
?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z ENDP ; experimental_websocket_client_data_wrapper
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 8
path$ = 16
?is_in_script_path@@YAHPEBUmg_connection@@PEBD@Z PROC	; is_in_script_path
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14586
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 14591
	mov	eax, 1
; Line 14592
	ret	0
?is_in_script_path@@YAHPEBUmg_connection@@PEBD@Z ENDP	; is_in_script_path
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp_rh$1 = 32
step$2 = 40
matched$3 = 44
tv93 = 48
tv141 = 52
tv149 = 56
uri$4 = 64
request_info$ = 72
urilen$5 = 80
conn$ = 112
handler_type$ = 120
handler$ = 128
subprotocols$ = 136
connect_handler$ = 144
ready_handler$ = 152
data_handler$ = 160
close_handler$ = 168
auth_handler$ = 176
cbdata$ = 184
handler_info$ = 192
?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z PROC ; get_request_handler
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14511
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 14512
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_request_info
	mov	QWORD PTR request_info$[rsp], rax
; Line 14513
	cmp	QWORD PTR request_info$[rsp], 0
	je	$LN8@get_reques
; Line 14514
	mov	rax, QWORD PTR request_info$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR uri$4[rsp], rax
; Line 14515
	mov	rcx, QWORD PTR uri$4[rsp]
	call	strlen
	mov	QWORD PTR urilen$5[rsp], rax
; Line 14519
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN10@get_reques
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2272], 0
	je	SHORT $LN10@get_reques
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN9@get_reques
$LN10@get_reques:
; Line 14520
	xor	eax, eax
	jmp	$LN1@get_reques
$LN9@get_reques:
; Line 14523
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 14525
	mov	DWORD PTR step$2[rsp], 0
	jmp	SHORT $LN4@get_reques
$LN2@get_reques:
	mov	eax, DWORD PTR step$2[rsp]
	inc	eax
	mov	DWORD PTR step$2[rsp], eax
$LN4@get_reques:
	cmp	DWORD PTR step$2[rsp], 3
	jge	$LN3@get_reques
; Line 14526
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rax, QWORD PTR [rax+520]
	mov	QWORD PTR tmp_rh$1[rsp], rax
	jmp	SHORT $LN7@get_reques
$LN5@get_reques:
; Line 14527
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tmp_rh$1[rsp], rax
$LN7@get_reques:
; Line 14526
	cmp	QWORD PTR tmp_rh$1[rsp], 0
	je	$LN6@get_reques
; Line 14528
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	ecx, DWORD PTR handler_type$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	je	SHORT $LN11@get_reques
; Line 14529
	jmp	SHORT $LN5@get_reques
$LN11@get_reques:
; Line 14531
	cmp	DWORD PTR step$2[rsp], 0
	jne	SHORT $LN12@get_reques
; Line 14533
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR urilen$5[rsp]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN23@get_reques
	mov	rdx, QWORD PTR uri$4[rsp]
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN23@get_reques
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN24@get_reques
$LN23@get_reques:
	mov	DWORD PTR tv93[rsp], 0
$LN24@get_reques:
	mov	eax, DWORD PTR tv93[rsp]
	mov	DWORD PTR matched$3[rsp], eax
	jmp	$LN13@get_reques
$LN12@get_reques:
; Line 14535
	cmp	DWORD PTR step$2[rsp], 1
	jne	SHORT $LN14@get_reques
; Line 14538
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR urilen$5[rsp]
	cmp	QWORD PTR [rax+8], rcx
	jae	SHORT $LN25@get_reques
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR uri$4[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN25@get_reques
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR uri$4[rsp]
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN25@get_reques
	mov	DWORD PTR tv141[rsp], 1
	jmp	SHORT $LN26@get_reques
$LN25@get_reques:
	mov	DWORD PTR tv141[rsp], 0
$LN26@get_reques:
	mov	eax, DWORD PTR tv141[rsp]
	mov	DWORD PTR matched$3[rsp], eax
; Line 14542
	jmp	SHORT $LN15@get_reques
$LN14@get_reques:
; Line 14544
	mov	r8, QWORD PTR uri$4[rsp]
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?match_prefix@@YA_JPEBD_K0@Z		; match_prefix
	test	rax, rax
	jle	SHORT $LN27@get_reques
	mov	DWORD PTR tv149[rsp], 1
	jmp	SHORT $LN28@get_reques
$LN27@get_reques:
	mov	DWORD PTR tv149[rsp], 0
$LN28@get_reques:
	mov	eax, DWORD PTR tv149[rsp]
	mov	DWORD PTR matched$3[rsp], eax
$LN15@get_reques:
$LN13@get_reques:
; Line 14547
	cmp	DWORD PTR matched$3[rsp], 0
	je	$LN16@get_reques
; Line 14548
	cmp	DWORD PTR handler_type$[rsp], 1
	jne	SHORT $LN17@get_reques
; Line 14549
	mov	rax, QWORD PTR subprotocols$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax], rcx
; Line 14550
	mov	rax, QWORD PTR connect_handler$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax], rcx
; Line 14551
	mov	rax, QWORD PTR ready_handler$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax], rcx
; Line 14552
	mov	rax, QWORD PTR data_handler$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax], rcx
; Line 14553
	mov	rax, QWORD PTR close_handler$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN18@get_reques
$LN17@get_reques:
; Line 14554
	cmp	DWORD PTR handler_type$[rsp], 0
	jne	SHORT $LN19@get_reques
; Line 14555
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN21@get_reques
; Line 14557
	mov	DWORD PTR step$2[rsp], 2
; Line 14558
	jmp	SHORT $LN6@get_reques
$LN21@get_reques:
; Line 14560
	mov	rax, QWORD PTR handler$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax], rcx
; Line 14562
	mov	rax, QWORD PTR tmp_rh$1[rsp]
	mov	eax, DWORD PTR [rax+32]
	inc	eax
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 14563
	mov	rax, QWORD PTR handler_info$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	QWORD PTR [rax], rcx
; Line 14564
	jmp	SHORT $LN20@get_reques
$LN19@get_reques:
; Line 14565
	mov	rax, QWORD PTR auth_handler$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	QWORD PTR [rax], rcx
$LN20@get_reques:
$LN18@get_reques:
; Line 14567
	mov	rax, QWORD PTR cbdata$[rsp]
	mov	rcx, QWORD PTR tmp_rh$1[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	mov	QWORD PTR [rax], rcx
; Line 14568
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 14569
	mov	eax, 1
	jmp	SHORT $LN1@get_reques
$LN16@get_reques:
; Line 14571
	jmp	$LN5@get_reques
$LN6@get_reques:
; Line 14572
	jmp	$LN2@get_reques
$LN3@get_reques:
; Line 14574
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
$LN8@get_reques:
; Line 14576
	xor	eax, eax
$LN1@get_reques:
; Line 14577
	add	rsp, 104				; 00000068H
	ret	0
?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z ENDP ; get_request_handler
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp_rh$ = 48
lastref$ = 56
urilen$ = 64
phys_ctx$ = 96
dom_ctx$ = 104
uri$ = 112
handler_type$ = 120
is_delete_request$ = 128
handler$ = 136
subprotocols$ = 144
connect_handler$ = 152
ready_handler$ = 160
data_handler$ = 168
close_handler$ = 176
auth_handler$ = 184
cbdata$ = 192
?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z PROC ; mg_set_handler_type
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14233
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 14235
	mov	rcx, QWORD PTR uri$[rsp]
	call	strlen
	mov	QWORD PTR urilen$[rsp], rax
; Line 14237
	cmp	DWORD PTR handler_type$[rsp], 1
	jne	SHORT $LN8@mg_set_han
; Line 14244
	cmp	QWORD PTR handler$[rsp], 0
	je	SHORT $LN10@mg_set_han
; Line 14245
	jmp	$LN1@mg_set_han
$LN10@mg_set_han:
; Line 14249
	cmp	DWORD PTR is_delete_request$[rsp], 0
	jne	SHORT $LN11@mg_set_han
	cmp	QWORD PTR connect_handler$[rsp], 0
	jne	SHORT $LN11@mg_set_han
	cmp	QWORD PTR ready_handler$[rsp], 0
	jne	SHORT $LN11@mg_set_han
	cmp	QWORD PTR data_handler$[rsp], 0
	jne	SHORT $LN11@mg_set_han
	cmp	QWORD PTR close_handler$[rsp], 0
	jne	SHORT $LN11@mg_set_han
; Line 14250
	jmp	$LN1@mg_set_han
$LN11@mg_set_han:
; Line 14252
	cmp	QWORD PTR auth_handler$[rsp], 0
	je	SHORT $LN12@mg_set_han
; Line 14253
	jmp	$LN1@mg_set_han
$LN12@mg_set_han:
; Line 14254
	jmp	$LN9@mg_set_han
$LN8@mg_set_han:
; Line 14256
	cmp	DWORD PTR handler_type$[rsp], 0
	jne	SHORT $LN13@mg_set_han
; Line 14263
	cmp	QWORD PTR connect_handler$[rsp], 0
	jne	SHORT $LN16@mg_set_han
	cmp	QWORD PTR ready_handler$[rsp], 0
	jne	SHORT $LN16@mg_set_han
	cmp	QWORD PTR data_handler$[rsp], 0
	jne	SHORT $LN16@mg_set_han
	cmp	QWORD PTR close_handler$[rsp], 0
	je	SHORT $LN15@mg_set_han
$LN16@mg_set_han:
; Line 14264
	jmp	$LN1@mg_set_han
$LN15@mg_set_han:
; Line 14266
	cmp	DWORD PTR is_delete_request$[rsp], 0
	jne	SHORT $LN17@mg_set_han
	cmp	QWORD PTR handler$[rsp], 0
	jne	SHORT $LN17@mg_set_han
; Line 14267
	jmp	$LN1@mg_set_han
$LN17@mg_set_han:
; Line 14269
	cmp	QWORD PTR auth_handler$[rsp], 0
	je	SHORT $LN18@mg_set_han
; Line 14270
	jmp	$LN1@mg_set_han
$LN18@mg_set_han:
; Line 14271
	jmp	SHORT $LN14@mg_set_han
$LN13@mg_set_han:
; Line 14273
	cmp	DWORD PTR handler_type$[rsp], 2
	jne	SHORT $LN19@mg_set_han
; Line 14278
	cmp	QWORD PTR handler$[rsp], 0
	je	SHORT $LN21@mg_set_han
; Line 14279
	jmp	$LN1@mg_set_han
$LN21@mg_set_han:
; Line 14282
	cmp	QWORD PTR connect_handler$[rsp], 0
	jne	SHORT $LN23@mg_set_han
	cmp	QWORD PTR ready_handler$[rsp], 0
	jne	SHORT $LN23@mg_set_han
	cmp	QWORD PTR data_handler$[rsp], 0
	jne	SHORT $LN23@mg_set_han
	cmp	QWORD PTR close_handler$[rsp], 0
	je	SHORT $LN22@mg_set_han
$LN23@mg_set_han:
; Line 14283
	jmp	$LN1@mg_set_han
$LN22@mg_set_han:
; Line 14285
	cmp	DWORD PTR is_delete_request$[rsp], 0
	jne	SHORT $LN24@mg_set_han
	cmp	QWORD PTR auth_handler$[rsp], 0
	jne	SHORT $LN24@mg_set_han
; Line 14286
	jmp	$LN1@mg_set_han
$LN24@mg_set_han:
; Line 14288
	jmp	SHORT $LN20@mg_set_han
$LN19@mg_set_han:
; Line 14290
	jmp	$LN1@mg_set_han
$LN20@mg_set_han:
$LN14@mg_set_han:
$LN9@mg_set_han:
; Line 14293
	cmp	QWORD PTR phys_ctx$[rsp], 0
	je	SHORT $LN26@mg_set_han
	cmp	QWORD PTR dom_ctx$[rsp], 0
	jne	SHORT $LN25@mg_set_han
$LN26@mg_set_han:
; Line 14295
	jmp	$LN1@mg_set_han
$LN25@mg_set_han:
; Line 14298
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_lock_context
$LN4@mg_set_han:
; Line 14302
	mov	rax, QWORD PTR dom_ctx$[rsp]
	add	rax, 520				; 00000208H
	mov	QWORD PTR lastref$[rsp], rax
; Line 14303
	mov	rax, QWORD PTR dom_ctx$[rsp]
	mov	rax, QWORD PTR [rax+520]
	mov	QWORD PTR tmp_rh$[rsp], rax
	jmp	SHORT $LN7@mg_set_han
$LN5@mg_set_han:
; Line 14304
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tmp_rh$[rsp], rax
$LN7@mg_set_han:
; Line 14303
	cmp	QWORD PTR tmp_rh$[rsp], 0
	je	$LN6@mg_set_han
; Line 14306
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	ecx, DWORD PTR handler_type$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jne	$LN27@mg_set_han
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR urilen$[rsp], rax
	jne	$LN27@mg_set_han
	mov	rdx, QWORD PTR uri$[rsp]
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	$LN27@mg_set_han
; Line 14307
	cmp	DWORD PTR is_delete_request$[rsp], 0
	jne	$LN28@mg_set_han
; Line 14309
	cmp	DWORD PTR handler_type$[rsp], 0
	jne	SHORT $LN30@mg_set_han
; Line 14311
	mov	rax, QWORD PTR tmp_rh$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN32@mg_set_han
; Line 14312
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
; Line 14313
	mov	ecx, 1
	call	QWORD PTR __imp_Sleep
; Line 14314
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_lock_context
; Line 14316
	jmp	$LN6@mg_set_han
$LN32@mg_set_han:
; Line 14319
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR handler$[rsp]
	mov	QWORD PTR [rax+24], rcx
	jmp	SHORT $LN31@mg_set_han
$LN30@mg_set_han:
; Line 14320
	cmp	DWORD PTR handler_type$[rsp], 1
	jne	SHORT $LN33@mg_set_han
; Line 14321
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR subprotocols$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 14322
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR connect_handler$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 14323
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR ready_handler$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 14324
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR data_handler$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 14325
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR close_handler$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 14326
	jmp	SHORT $LN34@mg_set_han
$LN33@mg_set_han:
; Line 14327
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR auth_handler$[rsp]
	mov	QWORD PTR [rax+80], rcx
$LN34@mg_set_han:
$LN31@mg_set_han:
; Line 14329
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR [rax+88], rcx
; Line 14330
	jmp	SHORT $LN29@mg_set_han
$LN28@mg_set_han:
; Line 14332
	cmp	DWORD PTR handler_type$[rsp], 0
	jne	SHORT $LN35@mg_set_han
; Line 14334
	mov	rax, QWORD PTR tmp_rh$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN36@mg_set_han
; Line 14335
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	DWORD PTR [rax+36], 1
; Line 14336
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
; Line 14337
	mov	ecx, 1
	call	QWORD PTR __imp_Sleep
; Line 14338
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_lock_context
; Line 14340
	jmp	SHORT $LN6@mg_set_han
$LN36@mg_set_han:
$LN35@mg_set_han:
; Line 14344
	mov	rax, QWORD PTR lastref$[rsp]
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	QWORD PTR [rax], rcx
; Line 14345
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 14346
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN29@mg_set_han:
; Line 14348
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
; Line 14349
	jmp	$LN1@mg_set_han
$LN27@mg_set_han:
; Line 14351
	mov	rax, QWORD PTR tmp_rh$[rsp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR lastref$[rsp], rax
; Line 14352
	jmp	$LN5@mg_set_han
$LN6@mg_set_han:
; Line 14353
	cmp	QWORD PTR tmp_rh$[rsp], 0
	jne	$LN4@mg_set_han
; Line 14355
	cmp	DWORD PTR is_delete_request$[rsp], 0
	je	SHORT $LN37@mg_set_han
; Line 14358
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
; Line 14359
	jmp	$LN1@mg_set_han
$LN37@mg_set_han:
; Line 14362
	mov	edx, 104				; 00000068H
	mov	ecx, 1
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR tmp_rh$[rsp], rax
; Line 14366
	cmp	QWORD PTR tmp_rh$[rsp], 0
	jne	SHORT $LN38@mg_set_han
; Line 14367
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
; Line 14368
	lea	rax, OFFSET FLAT:$SG167310
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167311
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 14370				; 00003822H
	lea	r8, OFFSET FLAT:$SG167312
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 14371
	jmp	$LN1@mg_set_han
$LN38@mg_set_han:
; Line 14373
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	mov	rcx, QWORD PTR uri$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 14374
	mov	rax, QWORD PTR tmp_rh$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN39@mg_set_han
; Line 14375
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
; Line 14376
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 14377
	lea	rax, OFFSET FLAT:$SG167314
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167315
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 14379				; 0000382bH
	lea	r8, OFFSET FLAT:$SG167316
	mov	rdx, QWORD PTR phys_ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 14380
	jmp	$LN1@mg_set_han
$LN39@mg_set_han:
; Line 14382
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR urilen$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 14383
	cmp	DWORD PTR handler_type$[rsp], 0
	jne	SHORT $LN40@mg_set_han
; Line 14384
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 14385
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 14386
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR handler$[rsp]
	mov	QWORD PTR [rax+24], rcx
	jmp	SHORT $LN41@mg_set_han
$LN40@mg_set_han:
; Line 14387
	cmp	DWORD PTR handler_type$[rsp], 1
	jne	SHORT $LN42@mg_set_han
; Line 14388
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR subprotocols$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 14389
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR connect_handler$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 14390
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR ready_handler$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 14391
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR data_handler$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 14392
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR close_handler$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 14393
	jmp	SHORT $LN43@mg_set_han
$LN42@mg_set_han:
; Line 14394
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR auth_handler$[rsp]
	mov	QWORD PTR [rax+80], rcx
$LN43@mg_set_han:
$LN41@mg_set_han:
; Line 14396
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	rcx, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR [rax+88], rcx
; Line 14397
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	ecx, DWORD PTR handler_type$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 14398
	mov	rax, QWORD PTR tmp_rh$[rsp]
	mov	QWORD PTR [rax+96], 0
; Line 14400
	mov	rax, QWORD PTR lastref$[rsp]
	mov	rcx, QWORD PTR tmp_rh$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 14401
	mov	rcx, QWORD PTR phys_ctx$[rsp]
	call	mg_unlock_context
$LN1@mg_set_han:
; Line 14402
	add	rsp, 88					; 00000058H
	ret	0
?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z ENDP ; mg_set_handler_type
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$ = 48
slen1$1 = 56
redirect_code$ = 64
slen2$2 = 72
tv66 = 80
$T3 = 88
expect_proto$ = 96
target_url$ = 112
__$ArrayPad$ = 8304
conn$ = 8336
port$ = 8344
?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z PROC	; redirect_to_https_port
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14176
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8328				; 00002088H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 14178
	mov	DWORD PTR truncated$[rsp], 0
; Line 14179
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN9@redirect_t
	lea	rax, OFFSET FLAT:$SG167243
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN10@redirect_t
$LN9@redirect_t:
	lea	rax, OFFSET FLAT:$SG167244
	mov	QWORD PTR tv66[rsp], rax
$LN10@redirect_t:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR expect_proto$[rsp], rax
; Line 14183
	mov	DWORD PTR redirect_code$[rsp], 308	; 00000134H
; Line 14186
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 14191
	mov	QWORD PTR [rsp+40], 0
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR expect_proto$[rsp]
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR target_url$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z ; mg_construct_local_link
	test	eax, eax
	jge	SHORT $LN2@redirect_t
; Line 14192
	mov	DWORD PTR truncated$[rsp], 1
	jmp	$LN3@redirect_t
$LN2@redirect_t:
; Line 14193
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	$LN4@redirect_t
; Line 14194
	lea	rcx, QWORD PTR target_url$[rsp]
	call	strlen
	mov	QWORD PTR slen1$1[rsp], rax
; Line 14195
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	call	strlen
	mov	QWORD PTR slen2$2[rsp], rax
; Line 14196
	mov	rax, QWORD PTR slen1$1[rsp]
	mov	rcx, QWORD PTR slen2$2[rsp]
	lea	rax, QWORD PTR [rax+rcx+2]
	cmp	rax, 8192				; 00002000H
	jae	SHORT $LN5@redirect_t
; Line 14197
	mov	rax, QWORD PTR slen1$1[rsp]
	mov	BYTE PTR target_url$[rsp+rax], 63	; 0000003fH
; Line 14198
	mov	rax, QWORD PTR slen1$1[rsp]
	lea	rax, QWORD PTR target_url$[rsp+rax+1]
	mov	r8, QWORD PTR slen2$2[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rcx+56]
	mov	rcx, rax
	call	memcpy
; Line 14201
	mov	rax, QWORD PTR slen1$1[rsp]
	mov	rcx, QWORD PTR slen2$2[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 8192		; 00002000H
	jae	SHORT $LN11@redirect_t
	jmp	SHORT $LN12@redirect_t
$LN11@redirect_t:
	call	__report_rangecheckfailure
$LN12@redirect_t:
	mov	rax, QWORD PTR $T3[rsp]
	mov	BYTE PTR target_url$[rsp+rax], 0
; Line 14202
	jmp	SHORT $LN6@redirect_t
$LN5@redirect_t:
; Line 14203
	mov	DWORD PTR truncated$[rsp], 1
$LN6@redirect_t:
$LN4@redirect_t:
$LN3@redirect_t:
; Line 14209
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN7@redirect_t
; Line 14210
	lea	r9, OFFSET FLAT:$SG167251
	lea	r8, OFFSET FLAT:$SG167252
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 14211
	jmp	SHORT $LN1@redirect_t
$LN7@redirect_t:
; Line 14215
	mov	r8d, DWORD PTR redirect_code$[rsp]
	lea	rdx, QWORD PTR target_url$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_redirect
$LN1@redirect_t:
$LN8@redirect_t:
; Line 14216
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8328				; 00002088H
	ret	0
?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z ENDP	; redirect_to_https_port
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dom$1 = 32
sslhost$2 = 40
domName$3 = 48
domNameLen$4 = 56
host$ = 64
conn$ = 96
?switch_domain_context@@YAHPEAUmg_connection@@@Z PROC	; switch_domain_context
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14115
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 14118
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR host$[rsp]
	call	?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z ; get_host_from_request_info
; Line 14120
	cmp	QWORD PTR host$[rsp], 0
	je	$LN16@switch_dom
; Line 14121
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2288], 0
	je	$LN18@switch_dom
; Line 14124
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR sslhost$2[rsp], rax
; Line 14125
	cmp	QWORD PTR sslhost$2[rsp], 0
	je	SHORT $LN20@switch_dom
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rcx+2280], rax
	je	SHORT $LN20@switch_dom
; Line 14128
	mov	rcx, QWORD PTR sslhost$2[rsp]
	call	strlen
	cmp	rax, QWORD PTR host$[rsp+8]
	jne	SHORT $LN22@switch_dom
	mov	r8, QWORD PTR host$[rsp+8]
	mov	rdx, QWORD PTR sslhost$2[rsp]
	mov	rcx, QWORD PTR host$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	je	SHORT $LN21@switch_dom
$LN22@switch_dom:
$LN4@switch_dom:
; Line 14130
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@switch_dom
; Line 14134
	xor	eax, eax
	jmp	$LN1@switch_dom
$LN21@switch_dom:
$LN20@switch_dom:
; Line 14138
	jmp	$LN19@switch_dom
$LN18@switch_dom:
; Line 14139
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 32144				; 00007d90H
	mov	QWORD PTR dom$1[rsp], rax
$LN5@switch_dom:
; Line 14140
	cmp	QWORD PTR dom$1[rsp], 0
	je	$LN6@switch_dom
; Line 14141
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR dom$1[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR domName$3[rsp], rax
; Line 14142
	mov	rcx, QWORD PTR domName$3[rsp]
	call	strlen
	mov	QWORD PTR domNameLen$4[rsp], rax
; Line 14144
	mov	rax, QWORD PTR host$[rsp+8]
	cmp	QWORD PTR domNameLen$4[rsp], rax
	jne	SHORT $LN23@switch_dom
	mov	r8, QWORD PTR host$[rsp+8]
	mov	rdx, QWORD PTR domName$3[rsp]
	mov	rcx, QWORD PTR host$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	SHORT $LN23@switch_dom
$LN9@switch_dom:
; Line 14147
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@switch_dom
; Line 14151
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR dom$1[rsp]
	mov	QWORD PTR [rax+2280], rcx
; Line 14152
	jmp	SHORT $LN6@switch_dom
$LN23@switch_dom:
; Line 14154
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 14155
	mov	rax, QWORD PTR dom$1[rsp]
	mov	rax, QWORD PTR [rax+552]
	mov	QWORD PTR dom$1[rsp], rax
; Line 14156
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 14157
	jmp	$LN5@switch_dom
$LN6@switch_dom:
$LN19@switch_dom:
$LN12@switch_dom:
; Line 14160
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@switch_dom
; Line 14165
	jmp	SHORT $LN17@switch_dom
$LN16@switch_dom:
$LN15@switch_dom:
; Line 14166
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN15@switch_dom
; Line 14167
	mov	eax, 1
	jmp	SHORT $LN1@switch_dom
$LN17@switch_dom:
; Line 14170
	mov	eax, 1
$LN1@switch_dom:
; Line 14171
	add	rsp, 88					; 00000058H
	ret	0
?switch_domain_context@@YAHPEAUmg_connection@@@Z ENDP	; switch_domain_context
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
host_header$ = 32
pos$1 = 40
host$ = 64
ri$ = 72
?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z PROC ; get_host_from_request_info
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14077
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 14078
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 152				; 00000098H
	lea	r8, OFFSET FLAT:$SG167195
	mov	rcx, QWORD PTR ri$[rsp]
	mov	edx, DWORD PTR [rcx+144]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR host_header$[rsp], rax
; Line 14081
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR [rax], 0
; Line 14082
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 14084
	cmp	QWORD PTR host_header$[rsp], 0
	je	$LN5@get_host_f
; Line 14089
	mov	rax, QWORD PTR host_header$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 91					; 0000005bH
	jne	SHORT $LN6@get_host_f
; Line 14090
	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR host_header$[rsp]
	call	strchr
	mov	QWORD PTR pos$1[rsp], rax
; Line 14091
	cmp	QWORD PTR pos$1[rsp], 0
	jne	SHORT $LN8@get_host_f
$LN4@get_host_f:
; Line 14093
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@get_host_f
; Line 14094
	jmp	SHORT $LN1@get_host_f
$LN8@get_host_f:
; Line 14097
	mov	rax, QWORD PTR host$[rsp]
	mov	rcx, QWORD PTR host_header$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 14098
	mov	rax, QWORD PTR pos$1[rsp]
	inc	rax
	sub	rax, QWORD PTR host_header$[rsp]
	mov	rcx, QWORD PTR host$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 14099
	jmp	SHORT $LN7@get_host_f
$LN6@get_host_f:
; Line 14101
	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR host_header$[rsp]
	call	strchr
	mov	QWORD PTR pos$1[rsp], rax
; Line 14102
	cmp	QWORD PTR pos$1[rsp], 0
	je	SHORT $LN9@get_host_f
; Line 14103
	mov	rax, QWORD PTR host_header$[rsp]
	mov	rcx, QWORD PTR pos$1[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR host$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 14104
	jmp	SHORT $LN10@get_host_f
$LN9@get_host_f:
; Line 14105
	mov	rcx, QWORD PTR host_header$[rsp]
	call	strlen
	mov	rcx, QWORD PTR host$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN10@get_host_f:
; Line 14107
	mov	rax, QWORD PTR host$[rsp]
	mov	rcx, QWORD PTR host_header$[rsp]
	mov	QWORD PTR [rax], rcx
$LN7@get_host_f:
$LN5@get_host_f:
$LN1@get_host_f:
; Line 14110
	add	rsp, 56					; 00000038H
	ret	0
?get_host_from_request_info@@YAXPEAUvec@@PEBUmg_request_info@@@Z ENDP ; get_host_from_request_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
idx$ = 4
tv76 = 8
ctx$ = 32
?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z PROC ; get_first_ssl_listener_index
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14062
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 14064
	mov	DWORD PTR idx$[rsp], -1
; Line 14065
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN5@get_first_
; Line 14066
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_first_
$LN2@get_first_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_first_:
	cmp	DWORD PTR idx$[rsp], -1
	jne	SHORT $LN3@get_first_
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@get_first_
; Line 14067
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, BYTE PTR [rcx+rax+40]
	test	eax, eax
	je	SHORT $LN7@get_first_
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN8@get_first_
$LN7@get_first_:
	mov	DWORD PTR tv76[rsp], -1
$LN8@get_first_:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR idx$[rsp], eax
; Line 14068
	jmp	SHORT $LN2@get_first_
$LN3@get_first_:
$LN5@get_first_:
; Line 14070
	mov	eax, DWORD PTR idx$[rsp]
; Line 14071
	add	rsp, 24
	ret	0
?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z ENDP ; get_first_ssl_listener_index
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
clen$ = 36
buf$ = 64
buf_len$ = 72
boundary$ = 80
boundary_len$ = 88
?search_boundary@@YAPEBDPEBD_K01@Z PROC			; search_boundary
; File W:\cpp\void\alistar\vendor\civetweb\src\handle_form.inl
; Line 164
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 167
	mov	eax, DWORD PTR boundary_len$[rsp]
	mov	ecx, DWORD PTR buf_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 4
	mov	DWORD PTR clen$[rsp], eax
; Line 170
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@search_bou
$LN2@search_bou:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@search_bou:
	mov	eax, DWORD PTR clen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN3@search_bou
; Line 171
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG166848
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN5@search_bou
; Line 172
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	r8, QWORD PTR boundary_len$[rsp]
	mov	rdx, QWORD PTR boundary$[rsp]
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN6@search_bou
; Line 173
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@search_bou
$LN6@search_bou:
$LN5@search_bou:
; Line 176
	jmp	SHORT $LN2@search_bou
$LN3@search_bou:
; Line 177
	xor	eax, eax
$LN1@search_bou:
; Line 178
	add	rsp, 56					; 00000038H
	ret	0
?search_boundary@@YAPEBDPEBD_K01@Z ENDP			; search_boundary
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
conn$ = 64
path$ = 72
file_size$ = 80
fdh$ = 88
?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z PROC ; field_stored
; File W:\cpp\void\alistar\vendor\civetweb\src\handle_form.inl
; Line 151
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 156
	mov	rax, QWORD PTR fdh$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv71[rsp], rax
	mov	rax, QWORD PTR fdh$[rsp]
	mov	r8, QWORD PTR [rax+24]
	mov	rdx, QWORD PTR file_size$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	call	QWORD PTR tv71[rsp]
; Line 157
	add	rsp, 56					; 00000038H
	ret	0
?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z ENDP ; field_stored
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 48
key_dec$ = 64
__$ArrayPad$ = 1088
conn$ = 1120
key$ = 1128
key_len$ = 1136
value$ = 1144
value_len$ = 1152
fdh$ = 1160
?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z PROC ; unencoded_field_get
; File W:\cpp\void\alistar\vendor\civetweb\src\handle_form.inl
; Line 137
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1112				; 00000458H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 141
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1024				; 00000400H
	lea	r8, QWORD PTR key_dec$[rsp]
	mov	edx, DWORD PTR key_len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	call	mg_url_decode
; Line 143
	mov	rax, QWORD PTR fdh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv77[rsp], rax
	mov	rax, QWORD PTR fdh$[rsp]
	mov	r9, QWORD PTR [rax+24]
	mov	r8, QWORD PTR value_len$[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	lea	rcx, QWORD PTR key_dec$[rsp]
	call	QWORD PTR tv77[rsp]
; Line 144
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	ret	0
?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z ENDP ; unencoded_field_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value_dec$ = 64
value_dec_len$ = 72
ret$ = 76
tv144 = 80
key_dec$ = 96
__$ArrayPad$ = 1120
conn$ = 1152
key$ = 1160
key_len$ = 1168
value$ = 1176
value_len$ = 1184
fdh$ = 1192
?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z PROC ; url_encoded_field_get
; File W:\cpp\void\alistar\vendor\civetweb\src\handle_form.inl
; Line 96
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1144				; 00000478H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 99
	mov	rax, QWORD PTR value_len$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR value_dec$[rsp], rax
; Line 102
	cmp	QWORD PTR value_dec$[rsp], 0
	jne	SHORT $LN2@url_encode
; Line 104
	mov	rax, QWORD PTR value_len$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	DWORD PTR [rsp+48], eax
	lea	rax, OFFSET FLAT:$SG166809
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166810
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 107				; 0000006bH
	lea	r8, OFFSET FLAT:$SG166811
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 108
	mov	eax, 16
	jmp	$LN1@url_encode
$LN2@url_encode:
; Line 111
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1024				; 00000400H
	lea	r8, QWORD PTR key_dec$[rsp]
	mov	edx, DWORD PTR key_len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	call	mg_url_decode
; Line 113
	mov	rax, QWORD PTR value_len$[rsp]
	cmp	QWORD PTR [rax], 2
	jb	SHORT $LN3@url_encode
	mov	rax, QWORD PTR value_len$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR value$[rsp]
	movsx	eax, BYTE PTR [rcx+rax-2]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN3@url_encode
; Line 114
	mov	rax, QWORD PTR value_len$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 2
	mov	rcx, QWORD PTR value_len$[rsp]
	mov	QWORD PTR [rcx], rax
	jmp	SHORT $LN4@url_encode
$LN3@url_encode:
; Line 115
	mov	rax, QWORD PTR value_len$[rsp]
	cmp	QWORD PTR [rax], 1
	jb	SHORT $LN5@url_encode
	mov	rax, QWORD PTR value_len$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR value$[rsp]
	movsx	eax, BYTE PTR [rcx+rax-1]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@url_encode
; Line 116
	mov	rax, QWORD PTR value_len$[rsp]
	mov	rax, QWORD PTR [rax]
	dec	rax
	mov	rcx, QWORD PTR value_len$[rsp]
	mov	QWORD PTR [rcx], rax
$LN5@url_encode:
$LN4@url_encode:
; Line 117
	mov	rax, QWORD PTR value_len$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, eax
	mov	r8, QWORD PTR value_dec$[rsp]
	mov	rax, QWORD PTR value_len$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR value$[rsp]
	call	mg_url_decode
	mov	DWORD PTR value_dec_len$[rsp], eax
; Line 120
	mov	rax, QWORD PTR fdh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv144[rsp], rax
	movsxd	rax, DWORD PTR value_dec_len$[rsp]
	mov	rcx, QWORD PTR fdh$[rsp]
	mov	r9, QWORD PTR [rcx+24]
	mov	r8, rax
	mov	rdx, QWORD PTR value_dec$[rsp]
	lea	rcx, QWORD PTR key_dec$[rsp]
	call	QWORD PTR tv144[rsp]
	mov	DWORD PTR ret$[rsp], eax
; Line 125
	mov	rcx, QWORD PTR value_dec$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 127
	mov	eax, DWORD PTR ret$[rsp]
$LN1@url_encode:
; Line 128
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1144				; 00000478H
	ret	0
?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z ENDP ; url_encoded_field_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 48
key_dec_len$ = 52
filename_dec_len$ = 56
$T1 = 64
tv134 = 72
filename_dec$ = 80
key_dec$ = 1104
__$ArrayPad$ = 2128
conn$ = 2160
key$ = 2168
key_len$ = 2176
filename$ = 2184
filename_len$ = 2192
path$ = 2200
path_len$ = 2208
fdh$ = 2216
?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z PROC ; url_encoded_field_found
; File W:\cpp\void\alistar\vendor\civetweb\src\handle_form.inl
; Line 31
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2152				; 00000868H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 38
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1024				; 00000400H
	lea	r8, QWORD PTR key_dec$[rsp]
	mov	edx, DWORD PTR key_len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	call	mg_url_decode
	mov	DWORD PTR key_dec_len$[rsp], eax
; Line 41
	movsxd	rax, DWORD PTR key_dec_len$[rsp]
	cmp	rax, 1024				; 00000400H
	jae	SHORT $LN3@url_encode
	cmp	DWORD PTR key_dec_len$[rsp], 0
	jge	SHORT $LN2@url_encode
$LN3@url_encode:
; Line 42
	xor	eax, eax
	jmp	$LN1@url_encode
$LN2@url_encode:
; Line 45
	cmp	QWORD PTR filename$[rsp], 0
	je	$LN4@url_encode
; Line 46
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1024				; 00000400H
	lea	r8, QWORD PTR filename_dec$[rsp]
	mov	edx, DWORD PTR filename_len$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	call	mg_url_decode
	mov	DWORD PTR filename_dec_len$[rsp], eax
; Line 53
	movsxd	rax, DWORD PTR filename_dec_len$[rsp]
	cmp	rax, 1024				; 00000400H
	jae	SHORT $LN7@url_encode
	cmp	DWORD PTR filename_dec_len$[rsp], 0
	jge	SHORT $LN6@url_encode
$LN7@url_encode:
; Line 55
	lea	rax, OFFSET FLAT:$SG166776
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166777
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 55					; 00000037H
	lea	r8, OFFSET FLAT:$SG166778
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 56
	xor	eax, eax
	jmp	$LN1@url_encode
$LN6@url_encode:
; Line 58
	lea	rcx, QWORD PTR filename_dec$[rsp]
	call	?remove_dot_segments@@YAXPEAD@Z		; remove_dot_segments
; Line 60
	jmp	SHORT $LN5@url_encode
$LN4@url_encode:
; Line 61
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 1024		; 00000400H
	jae	SHORT $LN13@url_encode
	jmp	SHORT $LN14@url_encode
$LN13@url_encode:
	call	__report_rangecheckfailure
$LN14@url_encode:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR filename_dec$[rsp+rax], 0
$LN5@url_encode:
; Line 64
	mov	rax, QWORD PTR fdh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv134[rsp], rax
	mov	rax, QWORD PTR fdh$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path_len$[rsp]
	mov	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR filename_dec$[rsp]
	lea	rcx, QWORD PTR key_dec$[rsp]
	call	QWORD PTR tv134[rsp]
	mov	DWORD PTR ret$[rsp], eax
; Line 67
	mov	eax, DWORD PTR ret$[rsp]
	and	eax, 15
	cmp	eax, 1
	jne	SHORT $LN8@url_encode
; Line 68
	mov	rax, QWORD PTR fdh$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN9@url_encode
; Line 69
	lea	rax, OFFSET FLAT:$SG166781
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166782
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 71					; 00000047H
	lea	r8, OFFSET FLAT:$SG166783
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 72
	xor	eax, eax
	jmp	SHORT $LN1@url_encode
$LN9@url_encode:
$LN8@url_encode:
; Line 75
	mov	eax, DWORD PTR ret$[rsp]
	and	eax, 15
	cmp	eax, 2
	jne	SHORT $LN10@url_encode
; Line 76
	mov	rax, QWORD PTR fdh$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN11@url_encode
; Line 77
	lea	rax, OFFSET FLAT:$SG166786
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166787
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 79					; 0000004fH
	lea	r8, OFFSET FLAT:$SG166788
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 80
	xor	eax, eax
	jmp	SHORT $LN1@url_encode
$LN11@url_encode:
$LN10@url_encode:
; Line 84
	mov	eax, DWORD PTR ret$[rsp]
$LN1@url_encode:
$LN12@url_encode:
; Line 85
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2152				; 00000868H
	ret	0
?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z ENDP ; url_encoded_field_found
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mult$ = 32
throttle$ = 36
tv91 = 40
tv92 = 44
matched$1 = 48
v$ = 56
vec$ = 64
val$ = 80
spec$ = 112
rsa$ = 120
uri$ = 128
?set_throttle@@YAHPEBDPEBTusa@@0@Z PROC			; set_throttle
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14016
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 14017
	mov	DWORD PTR throttle$[rsp], 0
$LN17@set_thrott:
$LN2@set_thrott:
; Line 14022
	lea	r8, QWORD PTR val$[rsp]
	lea	rdx, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR spec$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR spec$[rsp], rax
	cmp	QWORD PTR spec$[rsp], 0
	je	$LN3@set_thrott
; Line 14023
	mov	BYTE PTR mult$[rsp], 44			; 0000002cH
; Line 14030
	cmp	QWORD PTR val$[rsp], 0
	je	SHORT $LN5@set_thrott
	lea	r9, QWORD PTR mult$[rsp]
	lea	r8, QWORD PTR v$[rsp]
	lea	rdx, OFFSET FLAT:$SG166738
	mov	rcx, QWORD PTR val$[rsp]
	call	sscanf
	cmp	eax, 1
	jl	SHORT $LN5@set_thrott
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v$[rsp]
	ja	SHORT $LN5@set_thrott
	lea	rcx, QWORD PTR mult$[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	cmp	eax, 107				; 0000006bH
	je	SHORT $LN4@set_thrott
	lea	rcx, QWORD PTR mult$[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	cmp	eax, 109				; 0000006dH
	je	SHORT $LN4@set_thrott
	movsx	eax, BYTE PTR mult$[rsp]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN4@set_thrott
$LN5@set_thrott:
; Line 14032
	jmp	$LN2@set_thrott
$LN4@set_thrott:
; Line 14034
	lea	rcx, QWORD PTR mult$[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	cmp	eax, 107				; 0000006bH
	jne	SHORT $LN15@set_thrott
	mov	DWORD PTR tv92[rsp], 1024		; 00000400H
	jmp	SHORT $LN16@set_thrott
$LN15@set_thrott:
	lea	rcx, QWORD PTR mult$[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	cmp	eax, 109				; 0000006dH
	jne	SHORT $LN13@set_thrott
	mov	DWORD PTR tv91[rsp], 1048576		; 00100000H
	jmp	SHORT $LN14@set_thrott
$LN13@set_thrott:
	mov	DWORD PTR tv91[rsp], 1
$LN14@set_thrott:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR tv92[rsp], eax
$LN16@set_thrott:
	cvtsi2sd xmm0, DWORD PTR tv92[rsp]
	movsd	xmm1, QWORD PTR v$[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR v$[rsp], xmm0
; Line 14037
	cmp	QWORD PTR vec$[rsp+8], 1
	jne	SHORT $LN6@set_thrott
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vec$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN6@set_thrott
; Line 14038
	cvttsd2si eax, QWORD PTR v$[rsp]
	mov	DWORD PTR throttle$[rsp], eax
; Line 14039
	jmp	SHORT $LN7@set_thrott
$LN6@set_thrott:
; Line 14040
	xor	r8d, r8d
	mov	rdx, QWORD PTR rsa$[rsp]
	lea	rcx, QWORD PTR vec$[rsp]
	call	?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z ; parse_match_net
	mov	DWORD PTR matched$1[rsp], eax
; Line 14041
	cmp	DWORD PTR matched$1[rsp], 0
	jl	SHORT $LN8@set_thrott
; Line 14043
	cmp	DWORD PTR matched$1[rsp], 0
	je	SHORT $LN10@set_thrott
; Line 14044
	cvttsd2si eax, QWORD PTR v$[rsp]
	mov	DWORD PTR throttle$[rsp], eax
$LN10@set_thrott:
; Line 14045
	jmp	SHORT $LN9@set_thrott
$LN8@set_thrott:
; Line 14046
	mov	r8, QWORD PTR uri$[rsp]
	mov	rdx, QWORD PTR vec$[rsp+8]
	mov	rcx, QWORD PTR vec$[rsp]
	call	?match_prefix@@YA_JPEBD_K0@Z		; match_prefix
	test	rax, rax
	jle	SHORT $LN11@set_thrott
; Line 14047
	cvttsd2si eax, QWORD PTR v$[rsp]
	mov	DWORD PTR throttle$[rsp], eax
$LN11@set_thrott:
$LN9@set_thrott:
$LN7@set_thrott:
; Line 14050
	jmp	$LN17@set_thrott
$LN3@set_thrott:
; Line 14052
	mov	eax, DWORD PTR throttle$[rsp]
; Line 14053
	add	rsp, 104				; 00000068H
	ret	0
?set_throttle@@YAHPEBDPEBTusa@@0@Z ENDP			; set_throttle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
slash$ = 68
a$ = 72
b$ = 76
c$ = 80
d$ = 84
tv145 = 88
tv148 = 92
tv177 = 96
mask$1 = 100
ip$2 = 104
net$3 = 108
vec$ = 128
sa$ = 136
no_strict$ = 144
?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z PROC		; parse_match_net
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13907
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 13912
	lea	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR slash$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR c$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR b$[rsp]
	lea	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:$SG166714
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	sscanf
	cmp	eax, 5
	je	SHORT $LN2@parse_matc
; Line 13915
	mov	DWORD PTR slash$[rsp], 32		; 00000020H
; Line 13917
	lea	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR c$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR b$[rsp]
	lea	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:$SG166716
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	sscanf
	cmp	eax, 4
	je	SHORT $LN3@parse_matc
; Line 13920
	mov	DWORD PTR n$[rsp], 0
$LN3@parse_matc:
$LN2@parse_matc:
; Line 13924
	cmp	DWORD PTR n$[rsp], 0
	jle	$LN4@parse_matc
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR vec$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jne	$LN4@parse_matc
; Line 13925
	cmp	DWORD PTR a$[rsp], 256			; 00000100H
	jae	$LN5@parse_matc
	cmp	DWORD PTR b$[rsp], 256			; 00000100H
	jae	$LN5@parse_matc
	cmp	DWORD PTR c$[rsp], 256			; 00000100H
	jae	$LN5@parse_matc
	cmp	DWORD PTR d$[rsp], 256			; 00000100H
	jae	$LN5@parse_matc
	cmp	DWORD PTR slash$[rsp], 33		; 00000021H
	jae	$LN5@parse_matc
; Line 13927
	mov	rax, QWORD PTR sa$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 2
	jne	$LN6@parse_matc
; Line 13928
	mov	rax, QWORD PTR sa$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	QWORD PTR __imp_ntohl
	mov	DWORD PTR ip$2[rsp], eax
; Line 13929
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 24
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 16
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 8
	or	eax, ecx
	or	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR net$3[rsp], eax
; Line 13931
	cmp	DWORD PTR slash$[rsp], 0
	je	SHORT $LN8@parse_matc
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR slash$[rsp]
	mov	ecx, -1					; ffffffffH
	mov	DWORD PTR tv177[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv177[rsp]
	shl	eax, cl
	mov	DWORD PTR tv145[rsp], eax
	jmp	SHORT $LN9@parse_matc
$LN8@parse_matc:
	mov	DWORD PTR tv145[rsp], 0
$LN9@parse_matc:
	mov	eax, DWORD PTR tv145[rsp]
	mov	DWORD PTR mask$1[rsp], eax
; Line 13932
	mov	eax, DWORD PTR mask$1[rsp]
	mov	ecx, DWORD PTR ip$2[rsp]
	and	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR net$3[rsp]
	jne	SHORT $LN10@parse_matc
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN11@parse_matc
$LN10@parse_matc:
	mov	DWORD PTR tv148[rsp], 0
$LN11@parse_matc:
	mov	eax, DWORD PTR tv148[rsp]
	jmp	SHORT $LN1@parse_matc
$LN6@parse_matc:
; Line 13934
	xor	eax, eax
	jmp	SHORT $LN1@parse_matc
$LN5@parse_matc:
$LN4@parse_matc:
; Line 14010
	mov	eax, -1
$LN1@parse_matc:
; Line 14011
	add	rsp, 120				; 00000078H
	ret	0
?parse_match_net@@YAHPEBUvec@@PEBTusa@@H@Z ENDP		; parse_match_net
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
should_upgrade$ = 36
connection_header_count$ = 40
upgrade_to$ = 48
connection_headers$ = 64
__$ArrayPad$ = 128
conn$ = 160
?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z PROC ; should_switch_to_protocol
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13853
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 13866
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	r9d, 8
	lea	r8, QWORD PTR connection_headers$[rsp]
	lea	rdx, OFFSET FLAT:$SG166683
	mov	rcx, rax
	call	?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z ; get_req_headers
	mov	DWORD PTR connection_header_count$[rsp], eax
; Line 13870
	mov	DWORD PTR should_upgrade$[rsp], 0
; Line 13871
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@should_swi
$LN2@should_swi:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@should_swi:
	mov	eax, DWORD PTR connection_header_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@should_swi
; Line 13872
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:$SG166685
	mov	rcx, QWORD PTR connection_headers$[rsp+rax*8]
	call	?mg_strcasestr@@YAPEBDPEBD0@Z		; mg_strcasestr
	test	rax, rax
	je	SHORT $LN5@should_swi
; Line 13873
	mov	DWORD PTR should_upgrade$[rsp], 1
$LN5@should_swi:
; Line 13875
	jmp	SHORT $LN2@should_swi
$LN3@should_swi:
; Line 13876
	cmp	DWORD PTR should_upgrade$[rsp], 0
	jne	SHORT $LN6@should_swi
; Line 13877
	xor	eax, eax
	jmp	SHORT $LN1@should_swi
$LN6@should_swi:
; Line 13880
	lea	rdx, OFFSET FLAT:$SG166687
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR upgrade_to$[rsp], rax
; Line 13881
	cmp	QWORD PTR upgrade_to$[rsp], 0
	jne	SHORT $LN7@should_swi
; Line 13883
	mov	eax, -1
	jmp	SHORT $LN1@should_swi
$LN7@should_swi:
; Line 13887
	lea	rdx, OFFSET FLAT:$SG166690
	mov	rcx, QWORD PTR upgrade_to$[rsp]
	call	?mg_strcasestr@@YAPEBDPEBD0@Z		; mg_strcasestr
	test	rax, rax
	je	SHORT $LN8@should_swi
; Line 13894
	mov	eax, 1
	jmp	SHORT $LN1@should_swi
$LN8@should_swi:
; Line 13896
	lea	rdx, OFFSET FLAT:$SG166692
	mov	rcx, QWORD PTR upgrade_to$[rsp]
	call	?mg_strcasestr@@YAPEBDPEBD0@Z		; mg_strcasestr
	test	rax, rax
	je	SHORT $LN9@should_swi
; Line 13897
	mov	eax, 2
	jmp	SHORT $LN1@should_swi
$LN9@should_swi:
; Line 13901
	mov	eax, -1
$LN1@should_swi:
; Line 13902
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
?should_switch_to_protocol@@YAHPEBUmg_connection@@@Z ENDP ; should_switch_to_protocol
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
idx$1 = 32
curSubProtocol$2 = 40
headerNo$3 = 48
nbSubprotocolHeader$4 = 52
len$5 = 56
acceptedWebSocketSubprotocol$6 = 64
version$ = 72
sep$7 = 80
websock_key$ = 88
key1$8 = 96
key2$9 = 104
protocol$10 = 112
tv194 = 120
lua_websock$ = 128
tv215 = 136
tv224 = 144
protocols$11 = 160
key3$12 = 672
__$ArrayPad$ = 680
conn$ = 704
path$ = 712
is_callback_resource$ = 720
subprotocols$ = 728
ws_connect_handler$ = 736
ws_ready_handler$ = 744
ws_data_handler$ = 752
ws_close_handler$ = 760
cbData$ = 768
?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z PROC ; handle_websocket_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13650
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 696				; 000002b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 13651
	lea	rdx, OFFSET FLAT:$SG166638
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR websock_key$[rsp], rax
; Line 13652
	lea	rdx, OFFSET FLAT:$SG166639
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR version$[rsp], rax
; Line 13653
	mov	QWORD PTR lua_websock$[rsp], 0
; Line 13661
	cmp	QWORD PTR websock_key$[rsp], 0
	jne	$LN12@handle_web
; Line 13668
	lea	rdx, OFFSET FLAT:$SG166641
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR key1$8[rsp], rax
; Line 13669
	lea	rdx, OFFSET FLAT:$SG166642
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR key2$9[rsp], rax
; Line 13672
	cmp	QWORD PTR key1$8[rsp], 0
	je	SHORT $LN13@handle_web
	cmp	QWORD PTR key2$9[rsp], 0
	je	SHORT $LN13@handle_web
; Line 13674
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2376], 8
; Line 13675
	mov	r8d, 8
	lea	rdx, QWORD PTR key3$12[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	cmp	eax, 8
	jne	SHORT $LN14@handle_web
; Line 13677
	lea	r9, OFFSET FLAT:$SG166645
	lea	r8, OFFSET FLAT:$SG166646
	mov	edx, 426				; 000001aaH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 13681
	jmp	$LN1@handle_web
$LN14@handle_web:
$LN13@handle_web:
; Line 13685
	lea	r9, OFFSET FLAT:$SG166647
	lea	r8, OFFSET FLAT:$SG166648
	mov	edx, 400				; 00000190H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 13686
	jmp	$LN1@handle_web
$LN12@handle_web:
; Line 13691
	cmp	QWORD PTR version$[rsp], 0
	je	SHORT $LN16@handle_web
	lea	rdx, OFFSET FLAT:$SG166651
	mov	rcx, QWORD PTR version$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN15@handle_web
$LN16@handle_web:
; Line 13693
	lea	r9, OFFSET FLAT:$SG166652
	lea	r8, OFFSET FLAT:$SG166653
	mov	edx, 426				; 000001aaH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 13694
	jmp	$LN1@handle_web
$LN15@handle_web:
; Line 13701
	cmp	DWORD PTR is_callback_resource$[rsp], 0
	je	$LN17@handle_web
; Line 13704
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR protocols$11[rsp]
	lea	rdx, OFFSET FLAT:$SG166655
	mov	rcx, rax
	call	?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z ; get_req_headers
	mov	DWORD PTR nbSubprotocolHeader$4[rsp], eax
; Line 13709
	cmp	DWORD PTR nbSubprotocolHeader$4[rsp], 0
	jle	$LN18@handle_web
	cmp	QWORD PTR subprotocols$[rsp], 0
	je	$LN18@handle_web
; Line 13714
	mov	QWORD PTR acceptedWebSocketSubprotocol$6[rsp], 0
; Line 13717
	mov	DWORD PTR headerNo$3[rsp], 0
	jmp	SHORT $LN4@handle_web
$LN2@handle_web:
	mov	eax, DWORD PTR headerNo$3[rsp]
	inc	eax
	mov	DWORD PTR headerNo$3[rsp], eax
$LN4@handle_web:
	mov	eax, DWORD PTR nbSubprotocolHeader$4[rsp]
	cmp	DWORD PTR headerNo$3[rsp], eax
	jge	$LN3@handle_web
; Line 13719
	movsxd	rax, DWORD PTR headerNo$3[rsp]
	mov	rax, QWORD PTR protocols$11[rsp+rax*8]
	mov	QWORD PTR protocol$10[rsp], rax
; Line 13720
	mov	rax, QWORD PTR protocol$10[rsp]
	mov	QWORD PTR curSubProtocol$2[rsp], rax
$LN5@handle_web:
; Line 13723
	cmp	QWORD PTR acceptedWebSocketSubprotocol$6[rsp], 0
	jne	$LN6@handle_web
	mov	rax, QWORD PTR curSubProtocol$2[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN6@handle_web
$LN7@handle_web:
; Line 13725
	mov	rax, QWORD PTR curSubProtocol$2[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN19@handle_web
	mov	rax, QWORD PTR curSubProtocol$2[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN8@handle_web
$LN19@handle_web:
; Line 13726
	mov	rax, QWORD PTR curSubProtocol$2[rsp]
	inc	rax
	mov	QWORD PTR curSubProtocol$2[rsp], rax
	jmp	SHORT $LN7@handle_web
$LN8@handle_web:
; Line 13727
	mov	edx, 44					; 0000002cH
	mov	rcx, QWORD PTR curSubProtocol$2[rsp]
	call	strchr
	mov	QWORD PTR sep$7[rsp], rax
; Line 13728
	cmp	QWORD PTR sep$7[rsp], 0
	je	SHORT $LN20@handle_web
; Line 13729
	mov	rax, QWORD PTR curSubProtocol$2[rsp]
	mov	rcx, QWORD PTR sep$7[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$5[rsp], rax
; Line 13730
	jmp	SHORT $LN21@handle_web
$LN20@handle_web:
; Line 13731
	mov	rcx, QWORD PTR curSubProtocol$2[rsp]
	call	strlen
	mov	QWORD PTR len$5[rsp], rax
$LN21@handle_web:
; Line 13734
	mov	DWORD PTR idx$1[rsp], 0
	jmp	SHORT $LN11@handle_web
$LN9@handle_web:
	mov	eax, DWORD PTR idx$1[rsp]
	inc	eax
	mov	DWORD PTR idx$1[rsp], eax
$LN11@handle_web:
	mov	rax, QWORD PTR subprotocols$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR idx$1[rsp], eax
	jge	SHORT $LN10@handle_web
; Line 13738
	movsxd	rax, DWORD PTR idx$1[rsp]
	mov	rcx, QWORD PTR subprotocols$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	strlen
	cmp	rax, QWORD PTR len$5[rsp]
	jne	SHORT $LN22@handle_web
	movsxd	rax, DWORD PTR idx$1[rsp]
	mov	rcx, QWORD PTR subprotocols$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	r8, QWORD PTR len$5[rsp]
	mov	rdx, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR curSubProtocol$2[rsp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN22@handle_web
; Line 13742
	movsxd	rax, DWORD PTR idx$1[rsp]
	mov	rcx, QWORD PTR subprotocols$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR acceptedWebSocketSubprotocol$6[rsp], rax
; Line 13744
	jmp	SHORT $LN10@handle_web
$LN22@handle_web:
; Line 13746
	jmp	$LN9@handle_web
$LN10@handle_web:
; Line 13747
	mov	rax, QWORD PTR len$5[rsp]
	mov	rcx, QWORD PTR curSubProtocol$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR curSubProtocol$2[rsp], rax
; Line 13748
	jmp	$LN5@handle_web
$LN6@handle_web:
; Line 13749
	jmp	$LN2@handle_web
$LN3@handle_web:
; Line 13751
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR acceptedWebSocketSubprotocol$6[rsp]
	mov	QWORD PTR [rax+1200], rcx
$LN18@handle_web:
; Line 13760
	cmp	QWORD PTR ws_connect_handler$[rsp], 0
	je	SHORT $LN23@handle_web
	mov	rax, QWORD PTR ws_connect_handler$[rsp]
	mov	QWORD PTR tv194[rsp], rax
	mov	rdx, QWORD PTR cbData$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv194[rsp]
	test	eax, eax
	je	SHORT $LN23@handle_web
; Line 13766
	jmp	$LN1@handle_web
$LN23@handle_web:
$LN17@handle_web:
; Line 13791
	cmp	DWORD PTR is_callback_resource$[rsp], 0
	jne	SHORT $LN24@handle_web
	cmp	QWORD PTR lua_websock$[rsp], 0
	jne	SHORT $LN24@handle_web
; Line 13796
	lea	r9, OFFSET FLAT:$SG166663
	lea	r8, OFFSET FLAT:$SG166664
	mov	edx, 404				; 00000194H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 13797
	jmp	$LN1@handle_web
$LN24@handle_web:
; Line 13801
	mov	rdx, QWORD PTR websock_key$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z ; send_websocket_handshake
	test	eax, eax
	jne	SHORT $LN25@handle_web
; Line 13802
	lea	r9, OFFSET FLAT:$SG166666
	lea	r8, OFFSET FLAT:$SG166667
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 13803
	jmp	$LN1@handle_web
$LN25@handle_web:
; Line 13807
	cmp	DWORD PTR is_callback_resource$[rsp], 0
	je	SHORT $LN26@handle_web
; Line 13808
	cmp	QWORD PTR ws_ready_handler$[rsp], 0
	je	SHORT $LN27@handle_web
; Line 13809
	mov	rax, QWORD PTR ws_ready_handler$[rsp]
	mov	QWORD PTR tv215[rsp], rax
	mov	rdx, QWORD PTR cbData$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv215[rsp]
$LN27@handle_web:
$LN26@handle_web:
; Line 13821
	cmp	DWORD PTR is_callback_resource$[rsp], 0
	je	SHORT $LN28@handle_web
; Line 13822
	mov	r8, QWORD PTR cbData$[rsp]
	mov	rdx, QWORD PTR ws_data_handler$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z ; read_websocket
$LN28@handle_web:
; Line 13838
	cmp	QWORD PTR ws_close_handler$[rsp], 0
	je	SHORT $LN29@handle_web
; Line 13839
	mov	rax, QWORD PTR ws_close_handler$[rsp]
	mov	QWORD PTR tv224[rsp], rax
	mov	rdx, QWORD PTR cbData$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv224[rsp]
$LN29@handle_web:
$LN1@handle_web:
; Line 13841
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 696				; 000002b8H
	ret	0
?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z ENDP ; handle_websocket_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 0
i$ = 8
in$ = 32
in_len$ = 40
masking_key$ = 48
out$ = 56
?mask_data@@YAXPEBD_KIPEAD@Z PROC			; mask_data
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13581
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 13582
	mov	QWORD PTR i$[rsp], 0
; Line 13584
	mov	QWORD PTR i$[rsp], 0
; Line 13585
	cmp	QWORD PTR in_len$[rsp], 3
	jbe	SHORT $LN6@mask_data
	mov	rax, QWORD PTR in$[rsp]
	cdq
	and	rdx, 3
	add	rax, rdx
	and	rax, 3
	sub	rax, rdx
	test	rax, rax
	jne	SHORT $LN6@mask_data
$LN2@mask_data:
; Line 13587
	mov	rax, QWORD PTR in_len$[rsp]
	sub	rax, 3
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN3@mask_data
; Line 13588
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR masking_key$[rsp]
	mov	eax, DWORD PTR [rax]
	xor	eax, ecx
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	DWORD PTR [rcx], eax
; Line 13590
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 4
	mov	QWORD PTR i$[rsp], rax
; Line 13591
	jmp	SHORT $LN2@mask_data
$LN3@mask_data:
$LN6@mask_data:
; Line 13593
	mov	rax, QWORD PTR in_len$[rsp]
	cmp	QWORD PTR i$[rsp], rax
	je	SHORT $LN7@mask_data
$LN4@mask_data:
; Line 13595
	mov	rax, QWORD PTR in_len$[rsp]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN5@mask_data
; Line 13596
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv77[rsp], eax
	xor	edx, edx
	mov	rax, QWORD PTR i$[rsp]
	mov	ecx, 4
	div	rcx
	mov	rax, rdx
	movzx	eax, BYTE PTR masking_key$[rsp+rax]
	mov	ecx, DWORD PTR tv77[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	BYTE PTR [rcx], al
; Line 13599
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
; Line 13600
	jmp	SHORT $LN4@mask_data
$LN5@mask_data:
$LN7@mask_data:
; Line 13602
	add	rsp, 24
	ret	0
?mask_data@@YAXPEBD_KIPEAD@Z ENDP			; mask_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
retval$ = 32
len$1 = 36
headerLen$ = 40
len1$2 = 48
len2$3 = 52
header$ = 56
__$ArrayPad$ = 72
conn$ = 96
opcode$ = 104
data$ = 112
dataLen$ = 120
masking_key$ = 128
?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z PROC ; mg_websocket_write_exec
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13454
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 13476
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_lock_connection
; Line 13511
	mov	eax, DWORD PTR opcode$[rsp]
	and	eax, 15
	movzx	eax, al
	bts	eax, 7
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR header$[rsp+rcx], al
; Line 13518
	cmp	QWORD PTR dataLen$[rsp], 126		; 0000007eH
	jae	SHORT $LN2@mg_websock
; Line 13520
	mov	eax, 1
	imul	rax, rax, 1
	movzx	ecx, BYTE PTR dataLen$[rsp]
	mov	BYTE PTR header$[rsp+rax], cl
; Line 13521
	mov	QWORD PTR headerLen$[rsp], 2
	jmp	$LN3@mg_websock
$LN2@mg_websock:
; Line 13522
	cmp	QWORD PTR dataLen$[rsp], 65535		; 0000ffffH
	ja	SHORT $LN4@mg_websock
; Line 13524
	movzx	ecx, WORD PTR dataLen$[rsp]
	call	QWORD PTR __imp_htons
	mov	WORD PTR len$1[rsp], ax
; Line 13525
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR header$[rsp+rax], 126		; 0000007eH
; Line 13526
	lea	rax, QWORD PTR header$[rsp+2]
	mov	r8d, 2
	lea	rdx, QWORD PTR len$1[rsp]
	mov	rcx, rax
	call	memcpy
; Line 13527
	mov	QWORD PTR headerLen$[rsp], 4
; Line 13528
	jmp	SHORT $LN5@mg_websock
$LN4@mg_websock:
; Line 13530
	mov	rax, QWORD PTR dataLen$[rsp]
	shr	rax, 32					; 00000020H
	mov	ecx, eax
	call	QWORD PTR __imp_htonl
	mov	DWORD PTR len1$2[rsp], eax
; Line 13531
	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR dataLen$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	ecx, eax
	call	QWORD PTR __imp_htonl
	mov	DWORD PTR len2$3[rsp], eax
; Line 13532
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR header$[rsp+rax], 127		; 0000007fH
; Line 13533
	lea	rax, QWORD PTR header$[rsp+2]
	mov	r8d, 4
	lea	rdx, QWORD PTR len1$2[rsp]
	mov	rcx, rax
	call	memcpy
; Line 13534
	lea	rax, QWORD PTR header$[rsp+6]
	mov	r8d, 4
	lea	rdx, QWORD PTR len2$3[rsp]
	mov	rcx, rax
	call	memcpy
; Line 13535
	mov	QWORD PTR headerLen$[rsp], 10
$LN5@mg_websock:
$LN3@mg_websock:
; Line 13538
	cmp	DWORD PTR masking_key$[rsp], 0
	je	SHORT $LN6@mg_websock
; Line 13540
	mov	eax, 1
	imul	rax, rax, 1
	movzx	eax, BYTE PTR header$[rsp+rax]
	bts	eax, 7
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR header$[rsp+rcx], al
; Line 13541
	mov	rax, QWORD PTR headerLen$[rsp]
	lea	rax, QWORD PTR header$[rsp+rax]
	mov	r8d, 4
	lea	rdx, QWORD PTR masking_key$[rsp]
	mov	rcx, rax
	call	memcpy
; Line 13542
	mov	rax, QWORD PTR headerLen$[rsp]
	add	rax, 4
	mov	QWORD PTR headerLen$[rsp], rax
$LN6@mg_websock:
; Line 13545
	mov	r8, QWORD PTR headerLen$[rsp]
	lea	rdx, QWORD PTR header$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR retval$[rsp], eax
; Line 13546
	mov	eax, DWORD PTR headerLen$[rsp]
	cmp	DWORD PTR retval$[rsp], eax
	je	SHORT $LN7@mg_websock
; Line 13548
	mov	DWORD PTR retval$[rsp], -1
; Line 13549
	jmp	SHORT $LN8@mg_websock
$LN7@mg_websock:
; Line 13550
	cmp	QWORD PTR dataLen$[rsp], 0
	jbe	SHORT $LN9@mg_websock
; Line 13557
	mov	r8, QWORD PTR dataLen$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR retval$[rsp], eax
$LN9@mg_websock:
$LN8@mg_websock:
; Line 13563
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_unlock_connection
; Line 13565
	mov	eax, DWORD PTR retval$[rsp]
; Line 13566
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z ENDP ; mg_websocket_write_exec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mop$ = 48
n$ = 52
len$ = 56
data_len$ = 64
buf$ = 72
data$1 = 80
ping_count$ = 88
header_len$ = 96
mask_len$ = 104
enable_ping_pong$ = 112
body_len$ = 120
ret$ = 128
timeout$ = 136
i$ = 144
tv81 = 152
tv172 = 156
error$ = 160
mask$ = 164
exit_by_callback$ = 168
l1$2 = 172
l2$3 = 176
tv205 = 184
tv327 = 192
mem$ = 208
__$ArrayPad$ = 4304
conn$ = 4336
ws_data_handler$ = 4344
callback_data$ = 4352
?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z PROC ; read_websocket
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13063
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4328				; 000010e8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 13068
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2440]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2400]
	mov	QWORD PTR buf$[rsp], rax
; Line 13076
	mov	QWORD PTR mask_len$[rsp], 0
; Line 13077
	mov	QWORD PTR data_len$[rsp], 0
; Line 13091
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
; Line 13092
	mov	DWORD PTR enable_ping_pong$[rsp], 0
; Line 13093
	mov	DWORD PTR ping_count$[rsp], 0
; Line 13095
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 14
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN42@read_webso
; Line 13096
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 14
	lea	rdx, OFFSET FLAT:$SG166469
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN86@read_webso
	mov	DWORD PTR tv81[rsp], 1
	jmp	SHORT $LN87@read_webso
$LN86@read_webso:
	mov	DWORD PTR tv81[rsp], 0
$LN87@read_webso:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR enable_ping_pong$[rsp], eax
$LN42@read_webso:
; Line 13101
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 13
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN43@read_webso
; Line 13102
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atoi
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN43@read_webso:
; Line 13104
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR timeout$[rsp]
	jb	SHORT $LN44@read_webso
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN44@read_webso
; Line 13105
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atoi
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN44@read_webso:
; Line 13107
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR timeout$[rsp]
	jb	SHORT $LN45@read_webso
; Line 13108
	mov	eax, 24
	imul	rax, rax, 11
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rcx, QWORD PTR [rcx+rax+16]
	call	atof
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN45@read_webso:
$LN4@read_webso:
; Line 13112
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@read_webso
; Line 13115
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2428], 1
; Line 13116
	lea	rcx, OFFSET FLAT:$SG166473
	call	?mg_set_thread_name@@YAXPEBD@Z		; mg_set_thread_name
$LN5@read_webso:
; Line 13121
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	$LN6@read_webso
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2416], 0
	jne	$LN6@read_webso
; Line 13122
	mov	QWORD PTR header_len$[rsp], 0
; Line 13124
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2440]
	mov	eax, DWORD PTR [rax+2444]
	sub	eax, ecx
	cdqe
	mov	QWORD PTR body_len$[rsp], rax
	cmp	QWORD PTR body_len$[rsp], 2
	jb	$LN46@read_webso
; Line 13125
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	and	eax, 127				; 0000007fH
	cdqe
	mov	QWORD PTR len$[rsp], rax
; Line 13126
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN88@read_webso
	mov	DWORD PTR tv172[rsp], 4
	jmp	SHORT $LN89@read_webso
$LN88@read_webso:
	mov	DWORD PTR tv172[rsp], 0
$LN89@read_webso:
	movsxd	rax, DWORD PTR tv172[rsp]
	mov	QWORD PTR mask_len$[rsp], rax
; Line 13127
	cmp	QWORD PTR len$[rsp], 126		; 0000007eH
	jae	SHORT $LN47@read_webso
	mov	rax, QWORD PTR mask_len$[rsp]
	cmp	QWORD PTR body_len$[rsp], rax
	jb	SHORT $LN47@read_webso
; Line 13129
	mov	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR data_len$[rsp], rax
; Line 13130
	mov	rax, QWORD PTR mask_len$[rsp]
	add	rax, 2
	mov	QWORD PTR header_len$[rsp], rax
	jmp	$LN48@read_webso
$LN47@read_webso:
; Line 13131
	cmp	QWORD PTR len$[rsp], 126		; 0000007eH
	jne	SHORT $LN49@read_webso
	mov	rax, QWORD PTR mask_len$[rsp]
	add	rax, 4
	cmp	QWORD PTR body_len$[rsp], rax
	jb	SHORT $LN49@read_webso
; Line 13133
	mov	rax, QWORD PTR mask_len$[rsp]
	add	rax, 4
	mov	QWORD PTR header_len$[rsp], rax
; Line 13134
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	rax, 8
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR buf$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	rax, rcx
	mov	QWORD PTR data_len$[rsp], rax
	jmp	$LN50@read_webso
$LN49@read_webso:
; Line 13135
	mov	rax, QWORD PTR mask_len$[rsp]
	add	rax, 10
	cmp	QWORD PTR body_len$[rsp], rax
	jb	$LN51@read_webso
; Line 13138
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 4
	mov	rdx, rax
	lea	rcx, QWORD PTR l1$2[rsp]
	call	memcpy
; Line 13139
	mov	eax, 1
	imul	rax, rax, 6
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 4
	mov	rdx, rax
	lea	rcx, QWORD PTR l2$3[rsp]
	call	memcpy
; Line 13140
	mov	rax, QWORD PTR mask_len$[rsp]
	add	rax, 10
	mov	QWORD PTR header_len$[rsp], rax
; Line 13141
	mov	ecx, DWORD PTR l1$2[rsp]
	call	QWORD PTR __imp_ntohl
	mov	eax, eax
	shl	rax, 32					; 00000020H
	mov	QWORD PTR tv205[rsp], rax
	mov	ecx, DWORD PTR l2$3[rsp]
	call	QWORD PTR __imp_ntohl
	mov	eax, eax
	mov	rcx, QWORD PTR tv205[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR data_len$[rsp], rax
; Line 13143
	cmp	QWORD PTR data_len$[rsp], 2147418112	; 7fff0000H
	jbe	SHORT $LN52@read_webso
; Line 13145
	lea	rax, OFFSET FLAT:$SG166481
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166482
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 13148				; 0000335cH
	lea	r8, OFFSET FLAT:$SG166483
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 13149
	jmp	$LN6@read_webso
$LN52@read_webso:
$LN51@read_webso:
$LN50@read_webso:
$LN48@read_webso:
$LN46@read_webso:
; Line 13154
	cmp	QWORD PTR header_len$[rsp], 0
	jbe	$LN53@read_webso
	mov	rax, QWORD PTR header_len$[rsp]
	cmp	QWORD PTR body_len$[rsp], rax
	jb	$LN53@read_webso
; Line 13156
	lea	rax, QWORD PTR mem$[rsp]
	mov	QWORD PTR data$1[rsp], rax
; Line 13158
	cmp	QWORD PTR data_len$[rsp], 4096		; 00001000H
	jbe	SHORT $LN55@read_webso
; Line 13159
	mov	rcx, QWORD PTR data_len$[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR data$1[rsp], rax
; Line 13161
	cmp	QWORD PTR data$1[rsp], 0
	jne	SHORT $LN56@read_webso
; Line 13164
	lea	rax, OFFSET FLAT:$SG166488
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166489
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 13167				; 0000336fH
	lea	r8, OFFSET FLAT:$SG166490
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 13168
	jmp	$LN6@read_webso
$LN56@read_webso:
$LN55@read_webso:
; Line 13173
	cmp	QWORD PTR mask_len$[rsp], 0
	jbe	SHORT $LN57@read_webso
; Line 13174
	mov	rax, QWORD PTR header_len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR mask_len$[rsp]
	mov	r8d, 4
	mov	rdx, rax
	lea	rcx, QWORD PTR mask$[rsp]
	call	memcpy
; Line 13175
	jmp	SHORT $LN58@read_webso
$LN57@read_webso:
; Line 13176
	mov	r8d, 4
	xor	edx, edx
	lea	rcx, QWORD PTR mask$[rsp]
	call	memset
$LN58@read_webso:
; Line 13182
	mov	rax, QWORD PTR header_len$[rsp]
	mov	rcx, QWORD PTR data_len$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR body_len$[rsp]
	jbe	$LN59@read_webso
; Line 13183
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR mop$[rsp], al
; Line 13185
	mov	rax, QWORD PTR header_len$[rsp]
	mov	rcx, QWORD PTR body_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
; Line 13186
	mov	rax, QWORD PTR header_len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR len$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$1[rsp]
	call	memcpy
; Line 13187
	mov	DWORD PTR error$[rsp], 0
$LN7@read_webso:
; Line 13188
	mov	rax, QWORD PTR data_len$[rsp]
	cmp	QWORD PTR len$[rsp], rax
	jae	SHORT $LN8@read_webso
; Line 13189
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR data_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR data$1[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsd	xmm0, QWORD PTR timeout$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9d, eax
	mov	r8, rcx
	mov	rdx, QWORD PTR conn$[rsp]
	xor	ecx, ecx
	call	?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z ; pull_inner
	mov	DWORD PTR n$[rsp], eax
; Line 13194
	cmp	DWORD PTR n$[rsp], -2
	jg	SHORT $LN61@read_webso
; Line 13195
	mov	DWORD PTR error$[rsp], 1
; Line 13196
	jmp	SHORT $LN8@read_webso
	jmp	SHORT $LN62@read_webso
$LN61@read_webso:
; Line 13197
	cmp	DWORD PTR n$[rsp], 0
	jle	SHORT $LN63@read_webso
; Line 13198
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
$LN63@read_webso:
$LN62@read_webso:
; Line 13203
	jmp	$LN7@read_webso
$LN8@read_webso:
; Line 13204
	cmp	DWORD PTR error$[rsp], 0
	je	SHORT $LN65@read_webso
; Line 13205
	lea	rax, OFFSET FLAT:$SG166500
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166501
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 13208				; 00003398H
	lea	r8, OFFSET FLAT:$SG166502
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 13209
	lea	rax, QWORD PTR mem$[rsp]
	cmp	QWORD PTR data$1[rsp], rax
	je	SHORT $LN66@read_webso
; Line 13210
	mov	rcx, QWORD PTR data$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN66@read_webso:
; Line 13212
	jmp	$LN6@read_webso
$LN65@read_webso:
; Line 13215
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2440]
	mov	DWORD PTR [rax+2444], ecx
; Line 13217
	jmp	$LN60@read_webso
$LN59@read_webso:
; Line 13219
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR mop$[rsp], al
; Line 13225
	mov	rax, QWORD PTR header_len$[rsp]
	mov	rcx, QWORD PTR data_len$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
; Line 13230
	mov	rax, QWORD PTR header_len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR data_len$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$1[rsp]
	call	memcpy
; Line 13233
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR body_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR buf$[rsp]
	call	memmove
; Line 13236
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+2444]
	sub	eax, ecx
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2444], eax
$LN60@read_webso:
; Line 13240
	cmp	QWORD PTR mask_len$[rsp], 0
	jbe	SHORT $LN67@read_webso
; Line 13241
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN11@read_webso
$LN9@read_webso:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN11@read_webso:
	mov	rax, QWORD PTR data_len$[rsp]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN10@read_webso
; Line 13242
	mov	rax, QWORD PTR i$[rsp]
	and	rax, 3
	movzx	eax, BYTE PTR mask$[rsp+rax]
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$1[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movzx	ecx, BYTE PTR [rcx]
	xor	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$1[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	BYTE PTR [rcx], al
; Line 13243
	jmp	SHORT $LN9@read_webso
$LN10@read_webso:
$LN67@read_webso:
; Line 13246
	mov	DWORD PTR exit_by_callback$[rsp], 0
; Line 13247
	cmp	DWORD PTR enable_ping_pong$[rsp], 0
	je	SHORT $LN68@read_webso
	movzx	eax, BYTE PTR mop$[rsp]
	and	eax, 15
	cmp	eax, 10
	jne	SHORT $LN68@read_webso
$LN14@read_webso:
; Line 13249
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN14@read_webso
; Line 13253
	mov	DWORD PTR ping_count$[rsp], 0
; Line 13254
	jmp	$LN69@read_webso
$LN68@read_webso:
; Line 13255
	cmp	DWORD PTR enable_ping_pong$[rsp], 0
	je	SHORT $LN70@read_webso
	movzx	eax, BYTE PTR mop$[rsp]
	and	eax, 15
	cmp	eax, 9
	jne	SHORT $LN70@read_webso
$LN17@read_webso:
; Line 13257
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN17@read_webso
; Line 13260
	mov	r9, QWORD PTR data_len$[rsp]
	mov	r8, QWORD PTR data$1[rsp]
	mov	edx, 10
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_websocket_write
	mov	DWORD PTR ret$[rsp], eax
; Line 13264
	cmp	DWORD PTR ret$[rsp], 0
	jg	SHORT $LN72@read_webso
$LN20@read_webso:
; Line 13266
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN20@read_webso
; Line 13267
	jmp	$LN6@read_webso
$LN72@read_webso:
; Line 13270
	jmp	SHORT $LN71@read_webso
$LN70@read_webso:
; Line 13273
	cmp	QWORD PTR ws_data_handler$[rsp], 0
	je	SHORT $LN73@read_webso
; Line 13354
	mov	rax, QWORD PTR ws_data_handler$[rsp]
	mov	QWORD PTR tv327[rsp], rax
	movzx	eax, BYTE PTR mop$[rsp]
	mov	rcx, QWORD PTR callback_data$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR data_len$[rsp]
	mov	r8, QWORD PTR data$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv327[rsp]
	test	eax, eax
	jne	SHORT $LN74@read_webso
; Line 13359
	mov	DWORD PTR exit_by_callback$[rsp], 1
$LN74@read_webso:
$LN73@read_webso:
$LN71@read_webso:
$LN69@read_webso:
; Line 13365
	lea	rax, QWORD PTR mem$[rsp]
	cmp	QWORD PTR data$1[rsp], rax
	je	SHORT $LN75@read_webso
; Line 13366
	mov	rcx, QWORD PTR data$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN75@read_webso:
; Line 13369
	cmp	DWORD PTR exit_by_callback$[rsp], 0
	je	SHORT $LN76@read_webso
$LN23@read_webso:
; Line 13370
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN23@read_webso
; Line 13373
	jmp	$LN6@read_webso
$LN76@read_webso:
; Line 13375
	movzx	eax, BYTE PTR mop$[rsp]
	and	eax, 15
	cmp	eax, 8
	jne	SHORT $LN77@read_webso
$LN26@read_webso:
; Line 13377
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN26@read_webso
; Line 13380
	jmp	$LN6@read_webso
$LN77@read_webso:
; Line 13384
	jmp	$LN54@read_webso
$LN53@read_webso:
; Line 13387
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2444]
	mov	eax, DWORD PTR [rax+2436]
	sub	eax, ecx
	mov	rcx, QWORD PTR conn$[rsp]
	movsxd	rcx, DWORD PTR [rcx+2444]
	mov	rdx, QWORD PTR conn$[rsp]
	add	rcx, QWORD PTR [rdx+2400]
	movsd	xmm0, QWORD PTR timeout$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9d, eax
	mov	r8, rcx
	mov	rdx, QWORD PTR conn$[rsp]
	xor	ecx, ecx
	call	?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z ; pull_inner
	mov	DWORD PTR n$[rsp], eax
; Line 13392
	cmp	DWORD PTR n$[rsp], -2
	jg	SHORT $LN78@read_webso
$LN29@read_webso:
; Line 13394
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN29@read_webso
; Line 13397
	jmp	$LN6@read_webso
$LN78@read_webso:
; Line 13399
	cmp	DWORD PTR n$[rsp], 0
	jle	SHORT $LN79@read_webso
; Line 13400
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2444]
	add	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2444], eax
; Line 13402
	mov	DWORD PTR ping_count$[rsp], 0
; Line 13403
	jmp	SHORT $LN80@read_webso
$LN79@read_webso:
; Line 13405
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	SHORT $LN81@read_webso
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2416], 0
	jne	SHORT $LN81@read_webso
; Line 13406
	cmp	DWORD PTR ping_count$[rsp], 5
	jle	SHORT $LN82@read_webso
$LN32@read_webso:
; Line 13408
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN32@read_webso
; Line 13413
	jmp	SHORT $LN6@read_webso
$LN82@read_webso:
; Line 13415
	cmp	DWORD PTR enable_ping_pong$[rsp], 0
	je	SHORT $LN83@read_webso
$LN35@read_webso:
; Line 13417
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN35@read_webso
; Line 13420
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 9
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_websocket_write
	mov	DWORD PTR ret$[rsp], eax
; Line 13425
	cmp	DWORD PTR ret$[rsp], 0
	jg	SHORT $LN84@read_webso
$LN38@read_webso:
; Line 13427
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN38@read_webso
; Line 13428
	jmp	SHORT $LN6@read_webso
$LN84@read_webso:
; Line 13430
	mov	eax, DWORD PTR ping_count$[rsp]
	inc	eax
	mov	DWORD PTR ping_count$[rsp], eax
$LN83@read_webso:
$LN81@read_webso:
$LN80@read_webso:
$LN54@read_webso:
; Line 13437
	jmp	$LN5@read_webso
$LN6@read_webso:
; Line 13440
	lea	rcx, OFFSET FLAT:$SG166522
	call	?mg_set_thread_name@@YAXPEBD@Z		; mg_set_thread_name
; Line 13441
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2428], 0
$LN41@read_webso:
; Line 13442
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN41@read_webso
; Line 13445
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4328				; 000010e8H
	ret	0
?read_websocket@@YAXPEAUmg_connection@@P6AH0HPEAD_KPEAX@Z3@Z ENDP ; read_websocket
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$ = 64
dst_len$ = 72
sha_ctx$ = 80
sha$ = 176
b64_sha$ = 200
buf$ = 240
__$ArrayPad$ = 352
conn$ = 384
websock_key$ = 392
?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z PROC ; send_websocket_handshake
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12994
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 376				; 00000178H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12997
	mov	QWORD PTR dst_len$[rsp], 40		; 00000028H
; Line 13004
	mov	rax, QWORD PTR ?magic@?1??send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z@4PEBDEB
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR websock_key$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166372
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 100				; 00000064H
	lea	r8, QWORD PTR buf$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 13005
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN5@send_webso
; Line 13006
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 13007
	xor	eax, eax
	jmp	$LN1@send_webso
$LN5@send_webso:
$LN4@send_webso:
; Line 13010
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@send_webso
; Line 13020
	lea	rcx, QWORD PTR sha_ctx$[rsp]
	call	?SHA1_Init@@YAXPEAUSHA_CTX@@@Z		; SHA1_Init
; Line 13021
	lea	rcx, QWORD PTR buf$[rsp]
	call	strlen
	mov	r8d, eax
	lea	rdx, QWORD PTR buf$[rsp]
	lea	rcx, QWORD PTR sha_ctx$[rsp]
	call	?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z	; SHA1_Update
; Line 13022
	lea	rdx, QWORD PTR sha_ctx$[rsp]
	lea	rcx, QWORD PTR sha$[rsp]
	call	?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z	; SHA1_Final
; Line 13024
	lea	r9, QWORD PTR dst_len$[rsp]
	lea	r8, QWORD PTR b64_sha$[rsp]
	mov	edx, 20
	lea	rcx, QWORD PTR sha$[rsp]
	call	mg_base64_encode
; Line 13025
	lea	r8, QWORD PTR b64_sha$[rsp]
	lea	rdx, OFFSET FLAT:$SG166374
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 13037
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+1200], 0
	je	SHORT $LN6@send_webso
; Line 13038
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+1200]
	lea	rdx, OFFSET FLAT:$SG166377
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 13041
	jmp	SHORT $LN7@send_webso
$LN6@send_webso:
; Line 13042
	lea	r8, OFFSET FLAT:$SG166378
	lea	rdx, OFFSET FLAT:$SG166379
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN7@send_webso:
; Line 13045
	mov	eax, 1
$LN1@send_webso:
; Line 13046
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 376				; 00000178H
	ret	0
?send_websocket_handshake@@YAHPEAUmg_connection@@PEBD@Z ENDP ; send_websocket_handshake
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv71 = 36
tv75 = 40
finalcount$ = 48
__$ArrayPad$ = 56
digest$ = 80
context$ = 88
?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z PROC		; SHA1_Final
; File W:\cpp\void\alistar\vendor\civetweb\src\sha1.inl
; Line 299
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 303
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@SHA1_Final
$LN2@SHA1_Final:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@SHA1_Final:
	cmp	DWORD PTR i$[rsp], 8
	jae	SHORT $LN3@SHA1_Final
; Line 304
	mov	rax, QWORD PTR context$[rsp]
	add	rax, 20
	mov	QWORD PTR tv75[rsp], rax
	cmp	DWORD PTR i$[rsp], 4
	jb	SHORT $LN11@SHA1_Final
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN12@SHA1_Final
$LN11@SHA1_Final:
	mov	DWORD PTR tv71[rsp], 1
$LN12@SHA1_Final:
	movsxd	rax, DWORD PTR tv71[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 3
	mov	edx, 3
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	rdx, QWORD PTR tv75[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	shr	eax, cl
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR i$[rsp]
	mov	BYTE PTR finalcount$[rsp+rcx], al
; Line 307
	jmp	SHORT $LN2@SHA1_Final
$LN3@SHA1_Final:
; Line 308
	mov	r8d, 1
	lea	rdx, OFFSET FLAT:$SG166350
	mov	rcx, QWORD PTR context$[rsp]
	call	?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z	; SHA1_Update
$LN5@SHA1_Final:
; Line 309
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR context$[rsp]
	mov	eax, DWORD PTR [rcx+rax+20]
	and	eax, 504				; 000001f8H
	cmp	eax, 448				; 000001c0H
	je	SHORT $LN6@SHA1_Final
; Line 310
	mov	r8d, 1
	lea	rdx, OFFSET FLAT:$SG166351
	mov	rcx, QWORD PTR context$[rsp]
	call	?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z	; SHA1_Update
; Line 311
	jmp	SHORT $LN5@SHA1_Final
$LN6@SHA1_Final:
; Line 312
	mov	r8d, 8
	lea	rdx, QWORD PTR finalcount$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z	; SHA1_Update
; Line 313
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@SHA1_Final
$LN7@SHA1_Final:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@SHA1_Final:
	cmp	DWORD PTR i$[rsp], 20
	jae	SHORT $LN8@SHA1_Final
; Line 314
	mov	eax, DWORD PTR i$[rsp]
	shr	eax, 2
	mov	eax, eax
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 3
	mov	edx, 3
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	rdx, QWORD PTR context$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	shr	eax, cl
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR digest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 316
	jmp	SHORT $LN7@SHA1_Final
$LN8@SHA1_Final:
; Line 319
	mov	r8d, 92					; 0000005cH
	xor	edx, edx
	mov	rcx, QWORD PTR context$[rsp]
	call	memset
; Line 320
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?SHA1_Final@@YAXPEAEPEAUSHA_CTX@@@Z ENDP		; SHA1_Final
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
j$ = 36
tv74 = 40
tv163 = 48
context$ = 80
data$ = 88
len$ = 96
?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z PROC		; SHA1_Update
; File W:\cpp\void\alistar\vendor\civetweb\src\sha1.inl
; Line 272
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 275
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR context$[rsp]
	mov	eax, DWORD PTR [rcx+rax+20]
	mov	DWORD PTR j$[rsp], eax
; Line 276
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 3
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR context$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx+20]
	add	ecx, eax
	mov	DWORD PTR tv74[rsp], ecx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR context$[rsp]
	mov	edx, DWORD PTR tv74[rsp]
	mov	DWORD PTR [rcx+rax+20], edx
	mov	eax, DWORD PTR j$[rsp]
	cmp	DWORD PTR tv74[rsp], eax
	jae	SHORT $LN5@SHA1_Updat
; Line 277
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR context$[rsp]
	mov	eax, DWORD PTR [rcx+rax+20]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rdx+rcx+20], eax
$LN5@SHA1_Updat:
; Line 279
	mov	eax, DWORD PTR len$[rsp]
	shr	eax, 29
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR context$[rsp]
	add	eax, DWORD PTR [rdx+rcx+20]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rdx+rcx+20], eax
; Line 280
	mov	eax, DWORD PTR j$[rsp]
	shr	eax, 3
	and	eax, 63					; 0000003fH
	mov	DWORD PTR j$[rsp], eax
; Line 281
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 63					; 0000003fH
	jbe	$LN6@SHA1_Updat
; Line 282
	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 283
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR context$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+28]
	mov	r8d, eax
	mov	rdx, QWORD PTR data$[rsp]
	call	memcpy
; Line 284
	mov	rax, QWORD PTR context$[rsp]
	add	rax, 28
	mov	rcx, QWORD PTR context$[rsp]
	mov	rdx, rax
	call	?SHA1_Transform@@YAXQEAIQEBE@Z		; SHA1_Transform
; Line 285
	jmp	SHORT $LN4@SHA1_Updat
$LN2@SHA1_Updat:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR i$[rsp], eax
$LN4@SHA1_Updat:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 63					; 0000003fH
	cmp	eax, DWORD PTR len$[rsp]
	jae	SHORT $LN3@SHA1_Updat
; Line 286
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR context$[rsp]
	mov	rdx, rax
	call	?SHA1_Transform@@YAXQEAIQEBE@Z		; SHA1_Transform
; Line 287
	jmp	SHORT $LN2@SHA1_Updat
$LN3@SHA1_Updat:
; Line 288
	mov	DWORD PTR j$[rsp], 0
; Line 289
	jmp	SHORT $LN7@SHA1_Updat
$LN6@SHA1_Updat:
; Line 290
	mov	DWORD PTR i$[rsp], 0
$LN7@SHA1_Updat:
; Line 292
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, DWORD PTR j$[rsp]
	mov	r8, QWORD PTR context$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+28]
	mov	QWORD PTR tv163[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv163[rsp]
	mov	rcx, rax
	call	memcpy
; Line 293
	add	rsp, 72					; 00000048H
	ret	0
?SHA1_Update@@YAXPEAUSHA_CTX@@PEBEI@Z ENDP		; SHA1_Update
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 8
?SHA1_Init@@YAXPEAUSHA_CTX@@@Z PROC			; SHA1_Init
; File W:\cpp\void\alistar\vendor\civetweb\src\sha1.inl
; Line 259
	mov	QWORD PTR [rsp+8], rcx
; Line 261
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax], 1732584193		; 67452301H
; Line 262
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax], -271733879		; efcdab89H
; Line 263
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax], -1732584194	; 98badcfeH
; Line 264
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax], 271733878		; 10325476H
; Line 265
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax], -1009589776	; c3d2e1f0H
; Line 266
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax+20], 0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR context$[rsp]
	mov	DWORD PTR [rcx+rax+20], 0
; Line 267
	ret	0
?SHA1_Init@@YAXPEAUSHA_CTX@@@Z ENDP			; SHA1_Init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 32
b$ = 36
c$ = 40
d$ = 44
e$ = 48
tv394 = 52
tv434 = 56
tv474 = 60
tv514 = 64
tv553 = 68
tv592 = 72
tv631 = 76
tv670 = 80
tv709 = 84
tv748 = 88
tv787 = 92
tv826 = 96
tv865 = 100
tv904 = 104
tv943 = 108
tv982 = 112
tv1021 = 116
tv1060 = 120
tv1099 = 124
tv1138 = 128
tv1177 = 132
tv1216 = 136
tv1255 = 140
tv1294 = 144
tv1335 = 148
tv1376 = 152
tv1417 = 156
tv1458 = 160
tv1499 = 164
tv1540 = 168
tv1581 = 172
tv1622 = 176
tv1663 = 180
tv1704 = 184
tv1745 = 188
tv1786 = 192
tv1827 = 196
tv1868 = 200
tv1909 = 204
tv1950 = 208
tv1991 = 212
tv2032 = 216
tv2073 = 220
tv2114 = 224
tv2153 = 228
tv2192 = 232
tv2231 = 236
tv2270 = 240
tv2309 = 244
tv2348 = 248
tv2387 = 252
tv2426 = 256
tv2465 = 260
tv2504 = 264
tv2543 = 268
tv2582 = 272
tv2621 = 276
tv2660 = 280
tv2699 = 284
tv2738 = 288
tv2777 = 292
tv2816 = 296
tv2855 = 300
tv2894 = 304
tv79 = 308
tv95 = 312
tv143 = 316
tv159 = 320
tv175 = 324
tv191 = 328
tv207 = 332
tv223 = 336
tv239 = 340
tv255 = 344
tv271 = 348
tv287 = 352
tv303 = 356
tv319 = 360
tv335 = 364
tv351 = 368
block$ = 384
__$ArrayPad$ = 448
state$ = 480
buffer$ = 488
?SHA1_Transform@@YAXQEAIQEBE@Z PROC			; SHA1_Transform
; File W:\cpp\void\alistar\vendor\civetweb\src\sha1.inl
; Line 151
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 472				; 000001d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 156
	mov	r8d, 64					; 00000040H
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR block$[rsp]
	call	memcpy
; Line 159
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR a$[rsp], eax
; Line 160
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR b$[rsp], eax
; Line 161
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR c$[rsp], eax
; Line 162
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR d$[rsp], eax
; Line 163
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR e$[rsp], eax
; Line 166
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR tv79[rsp], eax
	xor	edx, edx
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv79[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR a$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 167
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR tv95[rsp], eax
	mov	edx, 1
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv95[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR e$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 168
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR tv143[rsp], eax
	mov	edx, 2
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv143[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR d$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 169
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR tv159[rsp], eax
	mov	edx, 3
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv159[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR c$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 170
	mov	eax, DWORD PTR e$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR e$[rsp]
	mov	DWORD PTR tv175[rsp], eax
	mov	edx, 4
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv175[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR b$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 171
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR tv191[rsp], eax
	mov	edx, 5
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv191[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR a$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 172
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR tv207[rsp], eax
	mov	edx, 6
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv207[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR e$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 173
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR tv223[rsp], eax
	mov	edx, 7
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv223[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR d$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 174
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR tv239[rsp], eax
	mov	edx, 8
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv239[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR c$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 175
	mov	eax, DWORD PTR e$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR e$[rsp]
	mov	DWORD PTR tv255[rsp], eax
	mov	edx, 9
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv255[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR b$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 176
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR tv271[rsp], eax
	mov	edx, 10
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv271[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR a$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 177
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR tv287[rsp], eax
	mov	edx, 11
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv287[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR e$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 178
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR tv303[rsp], eax
	mov	edx, 12
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv303[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR d$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 179
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR tv319[rsp], eax
	mov	edx, 13
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv319[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR c$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 180
	mov	eax, DWORD PTR e$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR e$[rsp]
	mov	DWORD PTR tv335[rsp], eax
	mov	edx, 14
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv335[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR b$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 181
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR tv351[rsp], eax
	mov	edx, 15
	lea	rcx, QWORD PTR block$[rsp]
	call	?blk0@@YAIPEATCHAR64LONG16@@H@Z		; blk0
	mov	ecx, DWORD PTR tv351[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	mov	edx, DWORD PTR a$[rsp]
	shr	edx, 27
	or	ecx, edx
	add	ecx, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1518500249]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 182
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv394[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR tv394[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv394[rsp]
	add	eax, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1518500249]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 183
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv434[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR tv434[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	and	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv434[rsp]
	add	eax, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1518500249]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 184
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv474[rsp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, DWORD PTR tv474[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv474[rsp]
	add	eax, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1518500249]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 185
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv514[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, DWORD PTR tv514[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv514[rsp]
	add	eax, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1518500249]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 186
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv553[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, DWORD PTR tv553[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv553[rsp]
	add	eax, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 187
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv592[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, DWORD PTR tv592[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv592[rsp]
	add	eax, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 188
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv631[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, DWORD PTR tv631[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv631[rsp]
	add	eax, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 189
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv670[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, DWORD PTR tv670[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv670[rsp]
	add	eax, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 190
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv709[rsp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, DWORD PTR tv709[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv709[rsp]
	add	eax, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 191
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv748[rsp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, DWORD PTR tv748[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv748[rsp]
	add	eax, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 192
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv787[rsp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, DWORD PTR tv787[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv787[rsp]
	add	eax, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 193
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv826[rsp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, DWORD PTR tv826[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv826[rsp]
	add	eax, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 194
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv865[rsp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, DWORD PTR tv865[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv865[rsp]
	add	eax, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 195
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv904[rsp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, DWORD PTR tv904[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv904[rsp]
	add	eax, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 196
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv943[rsp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, DWORD PTR tv943[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv943[rsp]
	add	eax, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 197
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv982[rsp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, DWORD PTR tv982[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv982[rsp]
	add	eax, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 198
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1021[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR tv1021[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv1021[rsp]
	add	eax, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 199
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1060[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR tv1060[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv1060[rsp]
	add	eax, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 200
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1099[rsp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, DWORD PTR tv1099[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv1099[rsp]
	add	eax, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 201
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1138[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, DWORD PTR tv1138[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv1138[rsp]
	add	eax, DWORD PTR e$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 202
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1177[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, DWORD PTR tv1177[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv1177[rsp]
	add	eax, DWORD PTR d$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 203
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1216[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, DWORD PTR tv1216[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv1216[rsp]
	add	eax, DWORD PTR c$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 204
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1255[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, DWORD PTR tv1255[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv1255[rsp]
	add	eax, DWORD PTR b$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 205
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1294[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, DWORD PTR tv1294[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv1294[rsp]
	add	eax, DWORD PTR a$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 206
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1335[rsp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, DWORD PTR tv1335[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR c$[rsp]
	mov	r8d, DWORD PTR b$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR d$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1335[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 207
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1376[rsp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, DWORD PTR tv1376[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR b$[rsp]
	mov	r8d, DWORD PTR a$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR c$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1376[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 208
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1417[rsp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, DWORD PTR tv1417[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR a$[rsp]
	mov	r8d, DWORD PTR e$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR b$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1417[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 209
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1458[rsp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, DWORD PTR tv1458[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	mov	r8d, DWORD PTR d$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR a$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1458[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 210
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1499[rsp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, DWORD PTR tv1499[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR e$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1499[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 211
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1540[rsp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, DWORD PTR tv1540[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR c$[rsp]
	mov	r8d, DWORD PTR b$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR d$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1540[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 212
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1581[rsp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, DWORD PTR tv1581[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR b$[rsp]
	mov	r8d, DWORD PTR a$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR c$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1581[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 213
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1622[rsp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, DWORD PTR tv1622[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR a$[rsp]
	mov	r8d, DWORD PTR e$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR b$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1622[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 214
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1663[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR tv1663[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	mov	r8d, DWORD PTR d$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR a$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1663[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 215
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1704[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR tv1704[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR e$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1704[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 216
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1745[rsp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, DWORD PTR tv1745[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR c$[rsp]
	mov	r8d, DWORD PTR b$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR d$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1745[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 217
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1786[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, DWORD PTR tv1786[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR b$[rsp]
	mov	r8d, DWORD PTR a$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR c$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1786[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 218
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1827[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, DWORD PTR tv1827[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR a$[rsp]
	mov	r8d, DWORD PTR e$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR b$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1827[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 219
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1868[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, DWORD PTR tv1868[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	mov	r8d, DWORD PTR d$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR a$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1868[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 220
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1909[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, DWORD PTR tv1909[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR e$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1909[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 221
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1950[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, DWORD PTR tv1950[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR c$[rsp]
	mov	r8d, DWORD PTR b$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR d$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1950[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 222
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv1991[rsp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, DWORD PTR tv1991[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR b$[rsp]
	mov	r8d, DWORD PTR a$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR c$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv1991[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 223
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2032[rsp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, DWORD PTR tv2032[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR a$[rsp]
	mov	r8d, DWORD PTR e$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR b$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv2032[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 224
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2073[rsp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, DWORD PTR tv2073[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	mov	r8d, DWORD PTR d$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR a$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv2073[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 225
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2114[rsp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, DWORD PTR tv2114[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	or	r8d, edx
	mov	edx, r8d
	and	edx, DWORD PTR e$[rsp]
	or	edx, ecx
	mov	ecx, edx
	add	ecx, DWORD PTR tv2114[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 226
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2153[rsp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, DWORD PTR tv2153[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv2153[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 227
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2192[rsp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, DWORD PTR tv2192[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv2192[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 228
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2231[rsp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, DWORD PTR tv2231[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv2231[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 229
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2270[rsp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, DWORD PTR tv2270[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv2270[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 230
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2309[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR tv2309[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv2309[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 231
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2348[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR tv2348[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv2348[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 232
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 2
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2387[rsp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, DWORD PTR tv2387[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv2387[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 233
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 3
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2426[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, DWORD PTR tv2426[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv2426[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 234
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 4
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 4
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2465[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, DWORD PTR tv2465[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv2465[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 235
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 5
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 5
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2504[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, DWORD PTR tv2504[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv2504[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 236
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 6
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 6
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2543[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, DWORD PTR tv2543[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv2543[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 237
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 7
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 7
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2582[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, DWORD PTR tv2582[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv2582[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 238
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 8
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 8
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2621[rsp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, DWORD PTR tv2621[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv2621[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 239
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 9
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 9
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2660[rsp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, DWORD PTR tv2660[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv2660[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 240
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 10
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 10
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2699[rsp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, DWORD PTR tv2699[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv2699[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 241
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 11
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 11
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2738[rsp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, DWORD PTR tv2738[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR a$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	add	ecx, DWORD PTR tv2738[rsp]
	add	eax, DWORD PTR e$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 242
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 12
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 12
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2777[rsp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, DWORD PTR tv2777[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR e$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR a$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR c$[rsp]
	add	ecx, DWORD PTR tv2777[rsp]
	add	eax, DWORD PTR d$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 243
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 13
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 13
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2816[rsp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, DWORD PTR tv2816[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR d$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR d$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR b$[rsp]
	add	ecx, DWORD PTR tv2816[rsp]
	add	eax, DWORD PTR c$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR e$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 244
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 14
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 0
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 14
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2855[rsp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, DWORD PTR tv2855[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR c$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR e$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR a$[rsp]
	add	ecx, DWORD PTR tv2855[rsp]
	add	eax, DWORD PTR b$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR d$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR d$[rsp], eax
; Line 245
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	ecx, DWORD PTR block$[rsp+rcx]
	mov	eax, DWORD PTR block$[rsp+rax]
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	xor	eax, DWORD PTR block$[rsp+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 15
	xor	eax, DWORD PTR block$[rsp+rcx]
	shl	eax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	edx, DWORD PTR block$[rsp+rdx]
	mov	ecx, DWORD PTR block$[rsp+rcx]
	xor	ecx, edx
	mov	edx, 4
	imul	rdx, rdx, 1
	xor	ecx, DWORD PTR block$[rsp+rdx]
	mov	edx, 4
	imul	rdx, rdx, 15
	xor	ecx, DWORD PTR block$[rsp+rdx]
	shr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR tv2894[rsp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, DWORD PTR tv2894[rsp]
	mov	DWORD PTR block$[rsp+rax], ecx
	mov	eax, DWORD PTR b$[rsp]
	shr	eax, 27
	mov	ecx, DWORD PTR b$[rsp]
	shl	ecx, 5
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR e$[rsp]
	add	ecx, DWORD PTR tv2894[rsp]
	add	eax, DWORD PTR a$[rsp]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR c$[rsp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 248
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR a$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR state$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 249
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR b$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR state$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 250
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR c$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR state$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 251
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR d$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR state$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 252
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR state$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR e$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR state$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 253
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 472				; 000001d8H
	ret	0
?SHA1_Transform@@YAXQEAIQEBE@Z ENDP			; SHA1_Transform
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 8
i$ = 16
?blk0@@YAIPEATCHAR64LONG16@@H@Z PROC			; blk0
; File W:\cpp\void\alistar\vendor\civetweb\src\sha1.inl
; Line 114
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 116
	movzx	eax, BYTE PTR ?n@?1??blk0@@YAIPEATCHAR64LONG16@@H@Z@4IB
	cmp	eax, 1
	jne	SHORT $LN2@blk0
; Line 118
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	shl	eax, 24
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR block$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	shr	ecx, 8
	or	eax, ecx
	and	eax, -16711936				; ff00ff00H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR block$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	shl	ecx, 8
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	edx, DWORD PTR [r8+rdx*4]
	shr	edx, 24
	or	ecx, edx
	and	ecx, 16711935				; 00ff00ffH
	or	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR block$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN2@blk0:
; Line 121
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
; Line 122
	ret	0
?blk0@@YAIPEATCHAR64LONG16@@H@Z ENDP			; blk0
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
link_buf$ = 32
__$ArrayPad$ = 1600
conn$ = 1632
path$ = 1640
?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z PROC	; dav_proppatch
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12905
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1624				; 00000658H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12908
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@dav_proppa
	cmp	QWORD PTR path$[rsp], 0
	je	SHORT $LN3@dav_proppa
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN2@dav_proppa
$LN3@dav_proppa:
; Line 12909
	jmp	$LN1@dav_proppa
$LN2@dav_proppa:
; Line 12913
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 12914
	mov	edx, 207				; 000000cfH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12915
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 12916
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12917
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166242
	lea	rdx, OFFSET FLAT:$SG166243
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12921
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12923
	mov	r8d, 1560				; 00000618H
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_request_link
; Line 12926
	lea	r8, QWORD PTR link_buf$[rsp]
	lea	rdx, OFFSET FLAT:$SG166244
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 12931
	lea	rdx, OFFSET FLAT:$SG166245
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 12934
	lea	r8, OFFSET FLAT:$SG166246
	lea	rdx, OFFSET FLAT:$SG166247
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN1@dav_proppa:
; Line 12935
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1624				; 00000658H
	ret	0
?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z ENDP	; dav_proppatch
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lock_index$ = 32
dav_lock$ = 40
link_buf$ = 48
__$ArrayPad$ = 1616
conn$ = 1648
path$ = 1656
?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z PROC	; dav_unlock_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12872
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1640				; 00000668H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12875
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 248				; 000000f8H
	mov	QWORD PTR dav_lock$[rsp], rax
; Line 12878
	cmp	QWORD PTR path$[rsp], 0
	je	SHORT $LN6@dav_unlock
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	SHORT $LN6@dav_unlock
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN5@dav_unlock
$LN6@dav_unlock:
; Line 12879
	jmp	$LN1@dav_unlock
$LN5@dav_unlock:
; Line 12882
	mov	r8d, 1560				; 00000618H
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_request_link
; Line 12884
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 12886
	mov	DWORD PTR lock_index$[rsp], 0
	jmp	SHORT $LN4@dav_unlock
$LN2@dav_unlock:
	mov	eax, DWORD PTR lock_index$[rsp]
	inc	eax
	mov	DWORD PTR lock_index$[rsp], eax
$LN4@dav_unlock:
	cmp	DWORD PTR lock_index$[rsp], 10
	jge	SHORT $LN3@dav_unlock
; Line 12887
	movsxd	rax, DWORD PTR lock_index$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+41]
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	SHORT $LN7@dav_unlock
; Line 12889
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 12890
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 12891
	mov	edx, 204				; 000000ccH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12892
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12893
	jmp	SHORT $LN1@dav_unlock
$LN7@dav_unlock:
; Line 12895
	jmp	$LN2@dav_unlock
$LN3@dav_unlock:
; Line 12896
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 12899
	lea	r9, OFFSET FLAT:$SG166233
	lea	r8, OFFSET FLAT:$SG166234
	mov	edx, 423				; 000001a7H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN1@dav_unlock:
; Line 12900
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1640				; 00000668H
	ret	0
?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z ENDP	; dav_unlock_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
lock_index$ = 68
dav_lock$ = 72
new_locktime$ = 80
oldest_locktime$1 = 88
LOCK_DURATION_NS$ = 96
s$2 = 104
link_buf$ = 144
__$ArrayPad$ = 1712
conn$ = 1744
path$ = 1752
?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z PROC	; dav_lock_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12743
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1736				; 000006c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12747
	mov	DWORD PTR lock_index$[rsp], -1
; Line 12749
	mov	rax, 60000000000			; 0000000df8475800H
	mov	QWORD PTR LOCK_DURATION_NS$[rsp], rax
; Line 12751
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 248				; 000000f8H
	mov	QWORD PTR dav_lock$[rsp], rax
; Line 12753
	cmp	QWORD PTR path$[rsp], 0
	je	SHORT $LN14@dav_lock_f
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	SHORT $LN14@dav_lock_f
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN13@dav_lock_f
$LN14@dav_lock_f:
; Line 12754
	jmp	$LN1@dav_lock_f
$LN13@dav_lock_f:
; Line 12756
	mov	r8d, 1560				; 00000618H
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_request_link
; Line 12764
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 12765
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR new_locktime$[rsp], rax
$LN2@dav_lock_f:
; Line 12768
	cmp	DWORD PTR lock_index$[rsp], 0
	jge	$LN3@dav_lock_f
; Line 12770
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@dav_lock_f
$LN4@dav_lock_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@dav_lock_f:
	cmp	DWORD PTR i$[rsp], 10
	jge	$LN5@dav_lock_f
; Line 12771
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+41]
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	$LN15@dav_lock_f
; Line 12772
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1601]
	mov	rdx, rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN16@dav_lock_f
; Line 12774
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	mov	rdx, QWORD PTR new_locktime$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 12775
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR lock_index$[rsp], eax
; Line 12776
	jmp	$LN5@dav_lock_f
; Line 12777
	jmp	$LN17@dav_lock_f
$LN16@dav_lock_f:
; Line 12780
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	add	rax, QWORD PTR LOCK_DURATION_NS$[rsp]
	cmp	QWORD PTR new_locktime$[rsp], rax
	jbe	SHORT $LN18@dav_lock_f
; Line 12782
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR [rax+rcx+41], 0
; Line 12783
	jmp	SHORT $LN19@dav_lock_f
$LN18@dav_lock_f:
; Line 12785
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 12786
	lea	r9, OFFSET FLAT:$SG166208
	lea	r8, OFFSET FLAT:$SG166209
	mov	edx, 423				; 000001a7H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12787
	jmp	$LN1@dav_lock_f
$LN19@dav_lock_f:
$LN17@dav_lock_f:
$LN15@dav_lock_f:
; Line 12791
	jmp	$LN4@dav_lock_f
$LN5@dav_lock_f:
; Line 12794
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@dav_lock_f
$LN7@dav_lock_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@dav_lock_f:
	cmp	DWORD PTR i$[rsp], 10
	jge	$LN8@dav_lock_f
; Line 12795
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	eax, BYTE PTR [rax+rcx+41]
	test	eax, eax
	jne	$LN20@dav_lock_f
; Line 12797
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 3168				; 00000c60H
	mov	rdx, QWORD PTR dav_lock$[rsp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 12798
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	mov	r8, QWORD PTR [rcx+rax]
	lea	rdx, OFFSET FLAT:$SG166211
	lea	rcx, QWORD PTR s$2[rsp]
	call	sprintf
; Line 12799
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rsp+48], 0
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, OFFSET FLAT:$SG166212
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR s$2[rsp]
	lea	r8, OFFSET FLAT:$SG166213
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, rax
	call	mg_md5
; Line 12806
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+41]
	mov	r8d, 1560				; 00000618H
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, rax
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 12809
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1601]
	mov	r8d, 1560				; 00000618H
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rcx+64]
	mov	rcx, rax
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 12812
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR lock_index$[rsp], eax
; Line 12813
	jmp	SHORT $LN8@dav_lock_f
$LN20@dav_lock_f:
; Line 12815
	jmp	$LN7@dav_lock_f
$LN8@dav_lock_f:
; Line 12816
	cmp	DWORD PTR lock_index$[rsp], 0
	jge	$LN21@dav_lock_f
; Line 12818
	mov	eax, 3168				; 00000c60H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dav_lock$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR oldest_locktime$1[rsp], rax
; Line 12819
	mov	DWORD PTR lock_index$[rsp], 0
; Line 12820
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN12@dav_lock_f
$LN10@dav_lock_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@dav_lock_f:
	cmp	DWORD PTR i$[rsp], 10
	jge	SHORT $LN11@dav_lock_f
; Line 12821
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	mov	rdx, QWORD PTR oldest_locktime$1[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jae	SHORT $LN22@dav_lock_f
; Line 12822
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR oldest_locktime$1[rsp], rax
; Line 12823
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR lock_index$[rsp], eax
$LN22@dav_lock_f:
; Line 12825
	jmp	SHORT $LN10@dav_lock_f
$LN11@dav_lock_f:
; Line 12827
	movsxd	rax, DWORD PTR lock_index$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR [rax+rcx+41], 0
$LN21@dav_lock_f:
; Line 12829
	jmp	$LN2@dav_lock_f
$LN3@dav_lock_f:
; Line 12830
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 12833
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 12834
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12835
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 12836
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12837
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166216
	lea	rdx, OFFSET FLAT:$SG166217
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12841
	movsxd	rax, DWORD PTR lock_index$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, -1
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG166218
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12842
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12845
	movsxd	rax, DWORD PTR lock_index$[rsp]
	imul	rax, rax, 3168				; 00000c60H
	mov	rcx, QWORD PTR dav_lock$[rsp]
	lea	rax, QWORD PTR [rcx+rax+41]
	movsxd	rcx, DWORD PTR lock_index$[rsp]
	imul	rcx, rcx, 3168				; 00000c60H
	mov	rdx, QWORD PTR dav_lock$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+8]
	movsxd	rdx, DWORD PTR lock_index$[rsp]
	imul	rdx, rdx, 3168				; 00000c60H
	mov	r8, QWORD PTR dav_lock$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+1601]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 60					; 0000003cH
	mov	r8, rdx
	lea	rdx, OFFSET FLAT:$SG166219
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN1@dav_lock_f:
; Line 12867
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1736				; 000006c8H
	ret	0
?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z ENDP	; dav_lock_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
depth$ = 32
conn$ = 64
path$ = 72
filep$ = 80
?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z PROC ; handle_propfind
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12702
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 12703
	lea	rdx, OFFSET FLAT:$SG166162
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR depth$[rsp], rax
; Line 12705
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@handle_pro
	cmp	QWORD PTR path$[rsp], 0
	je	SHORT $LN3@handle_pro
	cmp	QWORD PTR filep$[rsp], 0
	je	SHORT $LN3@handle_pro
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN2@handle_pro
$LN3@handle_pro:
; Line 12706
	jmp	$LN1@handle_pro
$LN2@handle_pro:
; Line 12710
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 12711
	mov	edx, 207				; 000000cfH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12712
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 12713
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12714
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166165
	lea	rdx, OFFSET FLAT:$SG166166
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12718
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12721
	lea	rdx, OFFSET FLAT:$SG166167
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 12726
	mov	r9, QWORD PTR filep$[rsp]
	lea	r8, OFFSET FLAT:$SG166168
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z ; print_props
; Line 12733
	mov	rax, QWORD PTR filep$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN4@handle_pro
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 35				; 00000023H
	lea	rdx, OFFSET FLAT:$SG166170
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN4@handle_pro
	cmp	QWORD PTR depth$[rsp], 0
	je	SHORT $LN5@handle_pro
	lea	rdx, OFFSET FLAT:$SG166172
	mov	rcx, QWORD PTR depth$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN4@handle_pro
$LN5@handle_pro:
; Line 12734
	lea	r9, OFFSET FLAT:?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z ; print_dav_dir_entry
	mov	r8, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z ; scan_directory
$LN4@handle_pro:
; Line 12737
	lea	r8, OFFSET FLAT:$SG166173
	lea	rdx, OFFSET FLAT:$SG166174
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN1@handle_pro:
; Line 12738
	add	rsp, 56					; 00000038H
	ret	0
?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z ENDP ; handle_propfind
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 32
de$ = 64
data$ = 72
?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z PROC		; print_dav_dir_entry
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12686
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 12687
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR conn$[rsp], rax
; Line 12689
	cmp	QWORD PTR de$[rsp], 0
	je	SHORT $LN3@print_dav_
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@print_dav_
	mov	rax, QWORD PTR de$[rsp]
	add	rax, 8
	mov	r9, rax
	mov	rax, QWORD PTR de$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z ; print_props
	test	eax, eax
	jne	SHORT $LN2@print_dav_
$LN3@print_dav_:
; Line 12692
	mov	eax, 1
	jmp	SHORT $LN1@print_dav_
$LN2@print_dav_:
; Line 12694
	xor	eax, eax
$LN1@print_dav_:
; Line 12695
	add	rsp, 56					; 00000038H
	ret	0
?print_dav_dir_entry@@YAHPEAUde@@PEAX@Z ENDP		; print_dav_dir_entry
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
link_concat$ = 56
dav_lock$1 = 64
tv129 = 72
tv68 = 80
link_concat_len$ = 88
tv135 = 96
mtime$ = 112
link_buf$ = 176
__$ArrayPad$ = 1744
conn$ = 1776
uri$ = 1784
name$ = 1792
filep$ = 1800
?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z PROC ; print_props
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12604
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1768				; 000006e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12611
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN6@print_prop
	cmp	QWORD PTR uri$[rsp], 0
	je	SHORT $LN6@print_prop
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN6@print_prop
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN5@print_prop
$LN6@print_prop:
; Line 12612
	xor	eax, eax
	jmp	$LN1@print_prop
$LN5@print_prop:
; Line 12615
	mov	rcx, QWORD PTR uri$[rsp]
	call	strlen
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR tv68[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	QWORD PTR link_concat_len$[rsp], rax
; Line 12616
	mov	rcx, QWORD PTR link_concat_len$[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR link_concat$[rsp], rax
; Line 12617
	cmp	QWORD PTR link_concat$[rsp], 0
	jne	SHORT $LN7@print_prop
; Line 12618
	xor	eax, eax
	jmp	$LN1@print_prop
$LN7@print_prop:
; Line 12620
	mov	rdx, QWORD PTR uri$[rsp]
	mov	rcx, QWORD PTR link_concat$[rsp]
	call	strcpy
; Line 12621
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR link_concat$[rsp]
	call	strcat
; Line 12624
	mov	rax, QWORD PTR link_concat$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1560				; 00000618H
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z ; mg_construct_local_link
; Line 12637
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 8
	mov	r8, rax
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR mtime$[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 12638
	mov	rax, QWORD PTR filep$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv135[rsp], rax
	mov	rax, QWORD PTR filep$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN10@print_prop
	lea	rax, OFFSET FLAT:$SG166142
	mov	QWORD PTR tv129[rsp], rax
	jmp	SHORT $LN11@print_prop
$LN10@print_prop:
	lea	rax, OFFSET FLAT:$SG166143
	mov	QWORD PTR tv129[rsp], rax
$LN11@print_prop:
	lea	rax, QWORD PTR mtime$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv135[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv129[rsp]
	lea	r8, QWORD PTR link_buf$[rsp]
	lea	rdx, OFFSET FLAT:$SG166144
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 12652
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@print_prop
$LN2@print_prop:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN4@print_prop:
	cmp	QWORD PTR i$[rsp], 10
	jae	$LN3@print_prop
; Line 12653
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 248				; 000000f8H
	mov	QWORD PTR dav_lock$1[rsp], rax
; Line 12654
	imul	rax, QWORD PTR i$[rsp], 3168		; 00000c60H
	mov	rcx, QWORD PTR dav_lock$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+41]
	lea	rdx, QWORD PTR link_buf$[rsp]
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	SHORT $LN8@print_prop
; Line 12655
	imul	rax, QWORD PTR i$[rsp], 3168		; 00000c60H
	mov	rcx, QWORD PTR dav_lock$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	imul	rcx, QWORD PTR i$[rsp], 3168		; 00000c60H
	mov	rdx, QWORD PTR dav_lock$1[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1601]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 60					; 0000003cH
	mov	r8, rcx
	lea	rdx, OFFSET FLAT:$SG166146
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN8@print_prop:
; Line 12670
	jmp	$LN2@print_prop
$LN3@print_prop:
; Line 12672
	lea	rdx, OFFSET FLAT:$SG166147
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 12679
	mov	rcx, QWORD PTR link_concat$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 12680
	mov	eax, 1
$LN1@print_prop:
; Line 12681
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1768				; 000006e8H
	ret	0
?print_props@@YAHPEAUmg_connection@@PEBD1PEAUmg_file_stat@@@Z ENDP ; print_props
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
?send_options@@YAXPEAUmg_connection@@@Z PROC		; send_options
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12573
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 12574
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@send_optio
	cmp	QWORD PTR ?all_methods@@3PEADEA, 0
	jne	SHORT $LN2@send_optio
$LN3@send_optio:
; Line 12575
	jmp	$LN1@send_optio
$LN2@send_optio:
; Line 12582
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12583
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166113
	lea	rdx, OFFSET FLAT:$SG166114
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12585
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN4@send_optio
; Line 12587
	mov	r9d, -1
	mov	r8, QWORD PTR ?all_methods@@3PEADEA
	lea	rdx, OFFSET FLAT:$SG166117
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12588
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166118
	lea	rdx, OFFSET FLAT:$SG166119
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12589
	jmp	SHORT $LN5@send_optio
$LN4@send_optio:
; Line 12591
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166120
	lea	rdx, OFFSET FLAT:$SG166121
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN5@send_optio:
; Line 12593
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12594
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
$LN1@send_optio:
; Line 12595
	add	rsp, 40					; 00000028H
	ret	0
?send_options@@YAXPEAUmg_connection@@@Z ENDP		; send_options
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
curtime$ = 48
date$ = 64
__$ArrayPad$ = 128
conn$ = 160
path$ = 168
filep$ = 176
?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z PROC ; handle_ssi_file_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12531
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12533
	xor	ecx, ecx
	call	time
	mov	QWORD PTR curtime$[rsp], rax
; Line 12535
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@handle_ssi
	cmp	QWORD PTR path$[rsp], 0
	je	SHORT $LN3@handle_ssi
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN2@handle_ssi
$LN3@handle_ssi:
; Line 12536
	jmp	$LN1@handle_ssi
$LN2@handle_ssi:
; Line 12539
	mov	r9, QWORD PTR filep$[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN4@handle_ssi
; Line 12542
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG166105
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12547
	jmp	$LN5@handle_ssi
$LN4@handle_ssi:
; Line 12550
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 12551
	lea	r8, QWORD PTR curtime$[rsp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR date$[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 12552
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, rax
	call	?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z ; fclose_on_exec
; Line 12555
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12556
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 12557
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12558
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_cors_header@@YAXPEAUmg_connection@@@Z ; send_cors_header
; Line 12559
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG166106
	lea	rdx, OFFSET FLAT:$SG166107
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12560
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12563
	xor	r9d, r9d
	mov	r8, QWORD PTR filep$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z ; send_ssi_file
; Line 12564
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN5@handle_ssi:
$LN1@handle_ssi:
; Line 12566
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ENDP ; handle_ssi_file_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filep$ = 48
?mg_fgetc@@YAHPEAUmg_file@@@Z PROC			; mg_fgetc
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12408
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 12409
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN2@mg_fgetc
; Line 12410
	mov	eax, -1
	jmp	SHORT $LN1@mg_fgetc
$LN2@mg_fgetc:
; Line 12413
	mov	rax, QWORD PTR filep$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN3@mg_fgetc
; Line 12414
	mov	rax, QWORD PTR filep$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	fgetc
	jmp	SHORT $LN1@mg_fgetc
; Line 12415
	jmp	SHORT $LN4@mg_fgetc
$LN3@mg_fgetc:
; Line 12416
	mov	eax, -1
$LN4@mg_fgetc:
$LN1@mg_fgetc:
; Line 12418
	add	rsp, 40					; 00000028H
	ret	0
?mg_fgetc@@YAHPEAUmg_file@@@Z ENDP			; mg_fgetc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 64
file$ = 72
cmd$ = 112
__$ArrayPad$ = 1136
conn$ = 1168
tag$ = 1176
?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z PROC		; do_ssi_exec
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12384
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 1152				; 00000480H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12385
	movzx	eax, BYTE PTR $SG166024
	mov	BYTE PTR cmd$[rsp], al
	lea	rax, QWORD PTR cmd$[rsp+1]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1023				; 000003ffH
	rep stosb
; Line 12386
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 12388
	lea	r8, QWORD PTR cmd$[rsp]
	lea	rdx, OFFSET FLAT:$SG166027
	mov	rcx, QWORD PTR tag$[rsp]
	call	sscanf
	cmp	eax, 1
	je	SHORT $LN2@do_ssi_exe
; Line 12389
	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166028
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12389				; 00003065H
	lea	r8, OFFSET FLAT:$SG166029
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12390
	jmp	$LN3@do_ssi_exe
$LN2@do_ssi_exe:
; Line 12391
	mov	eax, 1
	imul	rax, rax, 1023				; 000003ffH
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 1024		; 00000400H
	jae	SHORT $LN7@do_ssi_exe
	jmp	SHORT $LN8@do_ssi_exe
$LN7@do_ssi_exe:
	call	__report_rangecheckfailure
$LN8@do_ssi_exe:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR cmd$[rsp+rax], 0
; Line 12392
	lea	rdx, OFFSET FLAT:$SG166032
	lea	rcx, QWORD PTR cmd$[rsp]
	call	_popen
	mov	QWORD PTR file$[rsp+32], rax
	cmp	QWORD PTR file$[rsp+32], 0
	jne	SHORT $LN4@do_ssi_exe
; Line 12393
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR cmd$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166033
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12396				; 0000306cH
	lea	r8, OFFSET FLAT:$SG166034
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12397
	jmp	SHORT $LN5@do_ssi_exe
$LN4@do_ssi_exe:
; Line 12398
	mov	DWORD PTR [rsp+32], 0
	mov	r9, 9223372036854775807			; 7fffffffffffffffH
	xor	r8d, r8d
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z ; send_file_data
; Line 12399
	mov	rcx, QWORD PTR file$[rsp+32]
	call	_pclose
$LN5@do_ssi_exe:
$LN3@do_ssi_exe:
$LN6@do_ssi_exe:
; Line 12402
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1152				; 00000480H
	pop	rdi
	ret	0
?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z ENDP		; do_ssi_exec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$ = 64
$T1 = 72
$T2 = 80
$T3 = 88
p$ = 96
len$ = 104
file$ = 112
path$ = 160
file_name$ = 672
__$ArrayPad$ = 8864
conn$ = 8896
ssi$ = 8904
tag$ = 8912
include_level$ = 8920
?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z PROC	; do_ssi_include
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12302
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8888				; 000022b8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12304
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 12306
	mov	DWORD PTR truncated$[rsp], 0
; Line 12308
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@do_ssi_inc
; Line 12309
	jmp	$LN1@do_ssi_inc
$LN2@do_ssi_inc:
; Line 12315
	lea	r8, QWORD PTR file_name$[rsp]
	lea	rdx, OFFSET FLAT:$SG165987
	mov	rcx, QWORD PTR tag$[rsp]
	call	sscanf
	cmp	eax, 1
	jne	$LN3@do_ssi_inc
; Line 12317
	mov	eax, 1
	imul	rax, rax, 511				; 000001ffH
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 8192		; 00002000H
	jae	SHORT $LN18@do_ssi_inc
	jmp	SHORT $LN19@do_ssi_inc
$LN18@do_ssi_inc:
	call	__report_rangecheckfailure
$LN19@do_ssi_inc:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR file_name$[rsp+rax], 0
; Line 12318
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	lea	rdx, QWORD PTR file_name$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165988
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 512				; 00000200H
	lea	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
	jmp	$LN4@do_ssi_inc
$LN3@do_ssi_inc:
; Line 12326
	lea	r8, QWORD PTR file_name$[rsp]
	lea	rdx, OFFSET FLAT:$SG165991
	mov	rcx, QWORD PTR tag$[rsp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN5@do_ssi_inc
; Line 12329
	mov	eax, 1
	imul	rax, rax, 511				; 000001ffH
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 8192		; 00002000H
	jae	SHORT $LN20@do_ssi_inc
	jmp	SHORT $LN21@do_ssi_inc
$LN20@do_ssi_inc:
	call	__report_rangecheckfailure
$LN21@do_ssi_inc:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR file_name$[rsp+rax], 0
; Line 12330
	lea	rax, QWORD PTR file_name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165992
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 512				; 00000200H
	lea	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 12333
	jmp	$LN6@do_ssi_inc
$LN5@do_ssi_inc:
; Line 12334
	lea	r8, QWORD PTR file_name$[rsp]
	lea	rdx, OFFSET FLAT:$SG165996
	mov	rcx, QWORD PTR tag$[rsp]
	call	sscanf
	cmp	eax, 1
	je	SHORT $LN9@do_ssi_inc
	lea	r8, QWORD PTR file_name$[rsp]
	lea	rdx, OFFSET FLAT:$SG165997
	mov	rcx, QWORD PTR tag$[rsp]
	call	sscanf
	cmp	eax, 1
	jne	$LN7@do_ssi_inc
$LN9@do_ssi_inc:
; Line 12336
	mov	eax, 1
	imul	rax, rax, 511				; 000001ffH
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 8192		; 00002000H
	jae	SHORT $LN22@do_ssi_inc
	jmp	SHORT $LN23@do_ssi_inc
$LN22@do_ssi_inc:
	call	__report_rangecheckfailure
$LN23@do_ssi_inc:
	mov	rax, QWORD PTR $T3[rsp]
	mov	BYTE PTR file_name$[rsp+rax], 0
; Line 12337
	mov	rax, QWORD PTR ssi$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165998
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 512				; 00000200H
	lea	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 12339
	cmp	DWORD PTR truncated$[rsp], 0
	jne	$LN10@do_ssi_inc
; Line 12340
	mov	edx, 47					; 0000002fH
	lea	rcx, QWORD PTR path$[rsp]
	call	?strrchr@@YAPEADQEADH@Z			; strrchr
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN11@do_ssi_inc
; Line 12341
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN11@do_ssi_inc:
; Line 12343
	lea	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	QWORD PTR len$[rsp], rax
; Line 12344
	mov	eax, 512				; 00000200H
	sub	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	lea	rcx, QWORD PTR path$[rsp+rcx]
	lea	rdx, QWORD PTR file_name$[rsp]
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, OFFSET FLAT:$SG166001
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, rax
	mov	r8, rcx
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN10@do_ssi_inc:
; Line 12352
	jmp	SHORT $LN8@do_ssi_inc
$LN7@do_ssi_inc:
; Line 12353
	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166002
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12353				; 00003041H
	lea	r8, OFFSET FLAT:$SG166003
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12354
	jmp	$LN1@do_ssi_inc
$LN8@do_ssi_inc:
$LN6@do_ssi_inc:
$LN4@do_ssi_inc:
; Line 12357
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN12@do_ssi_inc
; Line 12358
	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166005
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12358				; 00003046H
	lea	r8, OFFSET FLAT:$SG166006
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12359
	jmp	$LN1@do_ssi_inc
$LN12@do_ssi_inc:
; Line 12362
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 1
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN13@do_ssi_inc
; Line 12363
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tag$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166009
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12367				; 0000304fH
	lea	r8, OFFSET FLAT:$SG166010
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12368
	jmp	$LN14@do_ssi_inc
$LN13@do_ssi_inc:
; Line 12369
	mov	rdx, QWORD PTR conn$[rsp]
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z ; fclose_on_exec
; Line 12371
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 34				; 00000022H
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jle	SHORT $LN15@do_ssi_inc
; Line 12372
	mov	eax, DWORD PTR include_level$[rsp]
	inc	eax
	mov	r9d, eax
	lea	r8, QWORD PTR file$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z ; send_ssi_file
; Line 12373
	jmp	SHORT $LN16@do_ssi_inc
$LN15@do_ssi_inc:
; Line 12374
	mov	DWORD PTR [rsp+32], 0
	mov	r9, 9223372036854775807			; 7fffffffffffffffH
	xor	r8d, r8d
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z ; send_file_data
$LN16@do_ssi_inc:
; Line 12376
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN14@do_ssi_inc:
$LN1@do_ssi_inc:
$LN17@do_ssi_inc:
; Line 12378
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8888				; 000022b8H
	ret	0
?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z ENDP	; do_ssi_include
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
in_tag$ = 68
ch$ = 72
in_ssi_tag$ = 76
$T1 = 80
buf$ = 96
__$ArrayPad$ = 8288
conn$ = 8320
path$ = 8328
filep$ = 8336
include_level$ = 8344
?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z PROC ; send_ssi_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12426
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8312				; 00002078H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12430
	cmp	DWORD PTR include_level$[rsp], 10
	jle	SHORT $LN4@send_ssi_f
; Line 12431
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166066
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12431				; 0000308fH
	lea	r8, OFFSET FLAT:$SG166067
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12432
	jmp	$LN1@send_ssi_f
$LN4@send_ssi_f:
; Line 12435
	mov	DWORD PTR len$[rsp], 0
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR in_ssi_tag$[rsp], eax
	mov	eax, DWORD PTR in_ssi_tag$[rsp]
	mov	DWORD PTR in_tag$[rsp], eax
$LN2@send_ssi_f:
; Line 12438
	mov	rcx, QWORD PTR filep$[rsp]
	call	?mg_fgetc@@YAHPEAUmg_file@@@Z		; mg_fgetc
	mov	DWORD PTR ch$[rsp], eax
	cmp	DWORD PTR ch$[rsp], -1
	je	$LN3@send_ssi_f
; Line 12440
	cmp	DWORD PTR in_tag$[rsp], 0
	je	$LN5@send_ssi_f
; Line 12443
	cmp	DWORD PTR ch$[rsp], 62			; 0000003eH
	jne	$LN7@send_ssi_f
; Line 12445
	movsxd	rax, DWORD PTR len$[rsp]
	mov	BYTE PTR buf$[rsp+rax], 62		; 0000003eH
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 12447
	cmp	DWORD PTR in_ssi_tag$[rsp], 0
	je	$LN9@send_ssi_f
; Line 12449
	movsxd	rax, DWORD PTR len$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 8192		; 00002000H
	jae	SHORT $LN23@send_ssi_f
	jmp	SHORT $LN24@send_ssi_f
$LN23@send_ssi_f:
	call	__report_rangecheckfailure
$LN24@send_ssi_f:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
; Line 12451
	cmp	DWORD PTR len$[rsp], 12
	jle	SHORT $LN11@send_ssi_f
	lea	rax, QWORD PTR buf$[rsp+5]
	mov	r8d, 7
	lea	rdx, OFFSET FLAT:$SG166076
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN11@send_ssi_f
; Line 12452
	mov	eax, DWORD PTR include_level$[rsp]
	inc	eax
	lea	rcx, QWORD PTR buf$[rsp+12]
	mov	r9d, eax
	mov	r8, rcx
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?do_ssi_include@@YAXPEAUmg_connection@@PEBDPEADH@Z ; do_ssi_include
	jmp	SHORT $LN12@send_ssi_f
$LN11@send_ssi_f:
; Line 12454
	cmp	DWORD PTR len$[rsp], 9
	jle	SHORT $LN13@send_ssi_f
	lea	rax, QWORD PTR buf$[rsp+5]
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG166079
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN13@send_ssi_f
; Line 12455
	lea	rax, QWORD PTR buf$[rsp+9]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?do_ssi_exec@@YAXPEAUmg_connection@@PEAD@Z ; do_ssi_exec
; Line 12457
	jmp	SHORT $LN14@send_ssi_f
$LN13@send_ssi_f:
; Line 12458
	lea	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166080
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12462				; 000030aeH
	lea	r8, OFFSET FLAT:$SG166081
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN14@send_ssi_f:
$LN12@send_ssi_f:
; Line 12464
	mov	DWORD PTR len$[rsp], 0
; Line 12465
	mov	DWORD PTR in_tag$[rsp], 0
	mov	eax, DWORD PTR in_tag$[rsp]
	mov	DWORD PTR in_ssi_tag$[rsp], eax
; Line 12467
	jmp	SHORT $LN10@send_ssi_f
$LN9@send_ssi_f:
; Line 12470
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
; Line 12471
	mov	DWORD PTR len$[rsp], 0
; Line 12472
	mov	DWORD PTR in_tag$[rsp], 0
$LN10@send_ssi_f:
; Line 12475
	jmp	$LN8@send_ssi_f
$LN7@send_ssi_f:
; Line 12477
	mov	eax, DWORD PTR ch$[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	BYTE PTR buf$[rsp+rcx], al
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 12479
	cmp	DWORD PTR len$[rsp], 5
	jne	SHORT $LN15@send_ssi_f
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG166083
	lea	rcx, QWORD PTR buf$[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN15@send_ssi_f
; Line 12481
	mov	DWORD PTR in_ssi_tag$[rsp], 1
$LN15@send_ssi_f:
; Line 12484
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 2
	cmp	eax, 8192				; 00002000H
	jle	SHORT $LN16@send_ssi_f
; Line 12486
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166085
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 12486				; 000030c6H
	lea	r8, OFFSET FLAT:$SG166086
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 12487
	jmp	$LN1@send_ssi_f
$LN16@send_ssi_f:
$LN8@send_ssi_f:
; Line 12491
	jmp	$LN6@send_ssi_f
$LN5@send_ssi_f:
; Line 12494
	cmp	DWORD PTR ch$[rsp], 60			; 0000003cH
	jne	SHORT $LN17@send_ssi_f
; Line 12496
	mov	DWORD PTR in_tag$[rsp], 1
; Line 12498
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN19@send_ssi_f
; Line 12501
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
$LN19@send_ssi_f:
; Line 12504
	mov	DWORD PTR len$[rsp], 1
; Line 12505
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR buf$[rsp+rax], 60		; 0000003cH
; Line 12507
	jmp	SHORT $LN18@send_ssi_f
$LN17@send_ssi_f:
; Line 12510
	mov	eax, DWORD PTR ch$[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	BYTE PTR buf$[rsp+rcx], al
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 12512
	cmp	DWORD PTR len$[rsp], 8192		; 00002000H
	jne	SHORT $LN20@send_ssi_f
; Line 12513
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
; Line 12514
	mov	DWORD PTR len$[rsp], 0
$LN20@send_ssi_f:
$LN18@send_ssi_f:
$LN6@send_ssi_f:
; Line 12518
	jmp	$LN2@send_ssi_f
$LN3@send_ssi_f:
; Line 12521
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN21@send_ssi_f
; Line 12522
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
$LN21@send_ssi_f:
$LN1@send_ssi_f:
$LN22@send_ssi_f:
; Line 12524
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8312				; 00002078H
	ret	0
?send_ssi_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@H@Z ENDP ; send_ssi_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
de$ = 48
__$ArrayPad$ = 88
conn$ = 112
path$ = 120
?delete_file@@YAXPEAUmg_connection@@PEBD@Z PROC		; delete_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12234
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12236
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR de$[rsp+8]
	call	memset
; Line 12237
	lea	r8, QWORD PTR de$[rsp+8]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	jne	SHORT $LN5@delete_fil
; Line 12239
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165941
	mov	edx, 404				; 00000194H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12243
	jmp	$LN1@delete_fil
$LN5@delete_fil:
$LN4@delete_fil:
; Line 12246
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@delete_fil
; Line 12248
	cmp	DWORD PTR de$[rsp+24], 0
	je	SHORT $LN6@delete_fil
; Line 12249
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_directory@@YAHPEAUmg_connection@@PEBD@Z ; remove_directory
	test	eax, eax
	je	SHORT $LN7@delete_fil
; Line 12251
	lea	r9, OFFSET FLAT:$SG165945
	lea	r8, OFFSET FLAT:$SG165946
	mov	edx, 204				; 000000ccH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12252
	jmp	SHORT $LN8@delete_fil
$LN7@delete_fil:
; Line 12254
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165947
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN8@delete_fil:
; Line 12256
	jmp	$LN1@delete_fil
$LN6@delete_fil:
; Line 12261
	mov	edx, 2
	mov	rcx, QWORD PTR path$[rsp]
	call	_access
	test	eax, eax
	je	SHORT $LN9@delete_fil
; Line 12263
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165949
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12268
	jmp	$LN1@delete_fil
$LN9@delete_fil:
; Line 12272
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_remove@@YAHPEBUmg_connection@@PEBD@Z ; mg_remove
	test	eax, eax
	jne	SHORT $LN10@delete_fil
; Line 12274
	mov	edx, 204				; 000000ccH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12275
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 12276
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12277
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG165952
	lea	rdx, OFFSET FLAT:$SG165953
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12278
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12280
	jmp	SHORT $LN11@delete_fil
$LN10@delete_fil:
; Line 12282
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165954
	mov	edx, 423				; 000001a7H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN11@delete_fil:
$LN1@delete_fil:
; Line 12288
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?delete_file@@YAXPEAUmg_connection@@PEBD@Z ENDP		; delete_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rc$ = 48
tv185 = 52
tv181 = 56
r2$ = 64
range$ = 72
r1$ = 80
tv183 = 88
file$ = 96
__$ArrayPad$ = 136
conn$ = 160
path$ = 168
?put_file@@YAXPEAUmg_connection@@PEBD@Z PROC		; put_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12099
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 12100
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 12105
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@put_file
; Line 12106
	jmp	$LN1@put_file
$LN5@put_file:
$LN4@put_file:
; Line 12109
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@put_file
; Line 12111
	lea	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN6@put_file
; Line 12113
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 200		; 000000c8H
; Line 12115
	cmp	DWORD PTR file$[rsp+16], 0
	je	SHORT $LN8@put_file
; Line 12118
	mov	DWORD PTR rc$[rsp], 0
; Line 12120
	jmp	SHORT $LN9@put_file
$LN8@put_file:
; Line 12125
	mov	edx, 2
	mov	rcx, QWORD PTR path$[rsp]
	call	_access
	test	eax, eax
	jne	SHORT $LN10@put_file
; Line 12127
	mov	DWORD PTR rc$[rsp], 1
; Line 12128
	jmp	SHORT $LN11@put_file
$LN10@put_file:
; Line 12129
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165912
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12134
	jmp	$LN1@put_file
$LN11@put_file:
$LN9@put_file:
; Line 12137
	jmp	SHORT $LN7@put_file
$LN6@put_file:
; Line 12139
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 201		; 000000c9H
; Line 12140
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?put_dir@@YAHPEAUmg_connection@@PEBD@Z	; put_dir
	mov	DWORD PTR rc$[rsp], eax
$LN7@put_file:
; Line 12143
	cmp	DWORD PTR rc$[rsp], 0
	jne	SHORT $LN12@put_file
; Line 12147
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2448]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12148
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 12149
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12150
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG165914
	lea	rdx, OFFSET FLAT:$SG165915
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12153
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12157
	jmp	$LN1@put_file
$LN12@put_file:
; Line 12160
	cmp	DWORD PTR rc$[rsp], -1
	jne	SHORT $LN13@put_file
; Line 12162
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165917
	mov	edx, 414				; 0000019eH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12167
	jmp	$LN1@put_file
$LN13@put_file:
; Line 12170
	cmp	DWORD PTR rc$[rsp], -2
	jne	SHORT $LN14@put_file
; Line 12172
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165919
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12177
	jmp	$LN1@put_file
$LN14@put_file:
; Line 12183
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 2
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	je	SHORT $LN16@put_file
	cmp	QWORD PTR file$[rsp+32], 0
	jne	SHORT $LN15@put_file
$LN16@put_file:
; Line 12184
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 12185
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165922
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12190
	jmp	$LN1@put_file
$LN15@put_file:
; Line 12193
	mov	rdx, QWORD PTR conn$[rsp]
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z ; fclose_on_exec
; Line 12194
	lea	rdx, OFFSET FLAT:$SG165923
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR range$[rsp], rax
; Line 12195
	mov	QWORD PTR r2$[rsp], 0
	mov	rax, QWORD PTR r2$[rsp]
	mov	QWORD PTR r1$[rsp], rax
; Line 12196
	cmp	QWORD PTR range$[rsp], 0
	je	$LN17@put_file
	lea	r8, QWORD PTR r2$[rsp]
	lea	rdx, QWORD PTR r1$[rsp]
	mov	rcx, QWORD PTR range$[rsp]
	call	?parse_range_header@@YAHPEBDPEA_J1@Z	; parse_range_header
	test	eax, eax
	jle	$LN17@put_file
; Line 12197
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 206		; 000000ceH
; Line 12198
	mov	rax, QWORD PTR r1$[rsp]
	mov	QWORD PTR tv183[rsp], rax
	mov	rcx, QWORD PTR file$[rsp+32]
	call	_fileno
	mov	DWORD PTR tv181[rsp], eax
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv183[rsp]
	mov	ecx, DWORD PTR tv181[rsp]
	call	_lseeki64
	cmp	rax, -1
	jne	SHORT $LN22@put_file
	mov	DWORD PTR tv185[rsp], -1
	jmp	SHORT $LN23@put_file
$LN22@put_file:
	mov	DWORD PTR tv185[rsp], 0
$LN23@put_file:
	cmp	DWORD PTR tv185[rsp], 0
	je	SHORT $LN18@put_file
; Line 12199
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165926
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12203
	jmp	$LN1@put_file
$LN18@put_file:
$LN17@put_file:
; Line 12207
	xor	r9d, r9d
	mov	r8, -1
	mov	rdx, QWORD PTR file$[rsp+32]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z ; forward_body_data
	test	eax, eax
	jne	SHORT $LN19@put_file
; Line 12211
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 12212
	jmp	$LN1@put_file
$LN19@put_file:
; Line 12215
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
	test	eax, eax
	je	SHORT $LN20@put_file
; Line 12218
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 507		; 000001fbH
$LN20@put_file:
; Line 12222
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2448]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12223
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 12224
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 12225
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG165929
	lea	rdx, OFFSET FLAT:$SG165930
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12228
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
$LN1@put_file:
; Line 12229
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
?put_file@@YAXPEAUmg_connection@@PEBD@Z ENDP		; put_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
do_overwrite$ = 64
local_dest$1 = 72
dest_uri_type$ = 80
len$2 = 84
trunc_check$3 = 88
destination_ok$ = 92
tv199 = 96
tv205 = 100
ok$4 = 104
rc$ = 108
http_status$ = 112
destination_hdr$ = 120
lastErr$5 = 128
h$6 = 136
overwrite_hdr$ = 144
root$ = 152
ignored$ = 160
dest_path$ = 192
wDest$7 = 976
wSource$8 = 1504
__$ArrayPad$ = 2032
conn$ = 2064
path$ = 2072
do_copy$ = 2080
?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z PROC	; dav_move_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11935
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2056				; 00000808H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11940
	mov	DWORD PTR http_status$[rsp], 400	; 00000190H
; Line 11941
	mov	DWORD PTR do_overwrite$[rsp], 0
; Line 11942
	mov	DWORD PTR destination_ok$[rsp], 0
; Line 11946
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@dav_move_f
; Line 11947
	jmp	$LN1@dav_move_f
$LN5@dav_move_f:
; Line 11950
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR root$[rsp], rax
; Line 11951
	lea	rdx, OFFSET FLAT:$SG165847
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR overwrite_hdr$[rsp], rax
; Line 11952
	lea	rdx, OFFSET FLAT:$SG165848
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR destination_hdr$[rsp], rax
; Line 11953
	cmp	QWORD PTR overwrite_hdr$[rsp], 0
	je	SHORT $LN6@dav_move_f
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR overwrite_hdr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	toupper
	cmp	eax, 84					; 00000054H
	jne	SHORT $LN6@dav_move_f
; Line 11954
	mov	DWORD PTR do_overwrite$[rsp], 1
$LN6@dav_move_f:
; Line 11957
	cmp	QWORD PTR destination_hdr$[rsp], 0
	je	SHORT $LN8@dav_move_f
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR destination_hdr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN7@dav_move_f
$LN8@dav_move_f:
; Line 11958
	lea	r9, OFFSET FLAT:$SG165852
	lea	r8, OFFSET FLAT:$SG165853
	mov	edx, 400				; 00000190H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11959
	jmp	$LN1@dav_move_f
$LN7@dav_move_f:
; Line 11962
	cmp	QWORD PTR root$[rsp], 0
	je	$LN9@dav_move_f
; Line 11963
	mov	QWORD PTR local_dest$1[rsp], 0
; Line 11964
	mov	rcx, QWORD PTR destination_hdr$[rsp]
	call	?get_uri_type@@YAHPEBD@Z		; get_uri_type
	mov	DWORD PTR dest_uri_type$[rsp], eax
; Line 11965
	cmp	DWORD PTR dest_uri_type$[rsp], 2
	jne	SHORT $LN10@dav_move_f
; Line 11966
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR destination_hdr$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	QWORD PTR local_dest$1[rsp], rax
	jmp	$LN11@dav_move_f
$LN10@dav_move_f:
; Line 11967
	cmp	DWORD PTR dest_uri_type$[rsp], 3
	je	SHORT $LN13@dav_move_f
	cmp	DWORD PTR dest_uri_type$[rsp], 4
	jne	SHORT $LN12@dav_move_f
$LN13@dav_move_f:
; Line 11968
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR destination_hdr$[rsp]
	call	?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z ; get_rel_url_at_current_server
	mov	QWORD PTR h$6[rsp], rax
; Line 11970
	cmp	QWORD PTR h$6[rsp], 0
	je	SHORT $LN14@dav_move_f
; Line 11971
	mov	rcx, QWORD PTR h$6[rsp]
	call	strlen
	mov	DWORD PTR len$2[rsp], eax
; Line 11972
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	cdqe
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR local_dest$1[rsp], rax
; Line 11973
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8, QWORD PTR local_dest$1[rsp]
	mov	edx, DWORD PTR len$2[rsp]
	mov	rcx, QWORD PTR h$6[rsp]
	call	mg_url_decode
$LN14@dav_move_f:
$LN12@dav_move_f:
$LN11@dav_move_f:
; Line 11976
	cmp	QWORD PTR local_dest$1[rsp], 0
	je	$LN15@dav_move_f
; Line 11977
	mov	rcx, QWORD PTR local_dest$1[rsp]
	call	?remove_dot_segments@@YAXPEAD@Z		; remove_dot_segments
; Line 11978
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR local_dest$1[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN16@dav_move_f
; Line 11979
	mov	DWORD PTR trunc_check$3[rsp], 0
; Line 11980
	mov	rax, QWORD PTR local_dest$1[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR root$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165862
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR dest_path$[rsp]
	lea	rdx, QWORD PTR trunc_check$3[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 11987
	cmp	DWORD PTR trunc_check$3[rsp], 0
	jne	SHORT $LN17@dav_move_f
; Line 11988
	mov	DWORD PTR destination_ok$[rsp], 1
$LN17@dav_move_f:
$LN16@dav_move_f:
; Line 11991
	mov	rcx, QWORD PTR local_dest$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN15@dav_move_f:
$LN9@dav_move_f:
; Line 11995
	cmp	DWORD PTR destination_ok$[rsp], 0
	jne	SHORT $LN18@dav_move_f
; Line 11996
	lea	r9, OFFSET FLAT:$SG165865
	lea	r8, OFFSET FLAT:$SG165866
	mov	edx, 502				; 000001f6H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11997
	jmp	$LN1@dav_move_f
$LN18@dav_move_f:
; Line 12001
	lea	r8, QWORD PTR ignored$[rsp]
	lea	rdx, QWORD PTR dest_path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN19@dav_move_f
; Line 12003
	cmp	DWORD PTR do_overwrite$[rsp], 0
	je	SHORT $LN20@dav_move_f
; Line 12005
	lea	rcx, QWORD PTR dest_path$[rsp]
	call	remove
	test	eax, eax
	je	SHORT $LN22@dav_move_f
; Line 12007
	lea	r9, QWORD PTR dest_path$[rsp]
	lea	r8, OFFSET FLAT:$SG165871
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12011
	jmp	$LN1@dav_move_f
$LN22@dav_move_f:
; Line 12013
	jmp	SHORT $LN21@dav_move_f
$LN20@dav_move_f:
; Line 12015
	lea	r9, QWORD PTR dest_path$[rsp]
	lea	r8, OFFSET FLAT:$SG165872
	mov	edx, 412				; 0000019cH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12019
	jmp	$LN1@dav_move_f
$LN21@dav_move_f:
$LN19@dav_move_f:
$LN4@dav_move_f:
; Line 12024
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@dav_move_f
; Line 12032
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wSource$8[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 12033
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wDest$7[rsp]
	lea	rdx, QWORD PTR dest_path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 12034
	cmp	DWORD PTR do_copy$[rsp], 0
	je	SHORT $LN23@dav_move_f
; Line 12035
	cmp	DWORD PTR do_overwrite$[rsp], 0
	je	SHORT $LN31@dav_move_f
	mov	DWORD PTR tv199[rsp], 0
	jmp	SHORT $LN32@dav_move_f
$LN31@dav_move_f:
	mov	DWORD PTR tv199[rsp], 1
$LN32@dav_move_f:
	mov	r8d, DWORD PTR tv199[rsp]
	lea	rdx, QWORD PTR wDest$7[rsp]
	lea	rcx, QWORD PTR wSource$8[rsp]
	call	QWORD PTR __imp_CopyFileW
	mov	DWORD PTR ok$4[rsp], eax
; Line 12036
	jmp	SHORT $LN24@dav_move_f
$LN23@dav_move_f:
; Line 12037
	cmp	DWORD PTR do_overwrite$[rsp], 0
	je	SHORT $LN33@dav_move_f
	mov	DWORD PTR tv205[rsp], 1
	jmp	SHORT $LN34@dav_move_f
$LN33@dav_move_f:
	mov	DWORD PTR tv205[rsp], 0
$LN34@dav_move_f:
	mov	r8d, DWORD PTR tv205[rsp]
	lea	rdx, QWORD PTR wDest$7[rsp]
	lea	rcx, QWORD PTR wSource$8[rsp]
	call	QWORD PTR __imp_MoveFileExW
	mov	DWORD PTR ok$4[rsp], eax
$LN24@dav_move_f:
; Line 12041
	cmp	DWORD PTR ok$4[rsp], 0
	je	SHORT $LN25@dav_move_f
; Line 12042
	mov	DWORD PTR rc$[rsp], 0
; Line 12043
	jmp	SHORT $LN26@dav_move_f
$LN25@dav_move_f:
; Line 12044
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR lastErr$5[rsp], eax
; Line 12045
	cmp	DWORD PTR lastErr$5[rsp], 183		; 000000b7H
	jne	SHORT $LN27@dav_move_f
; Line 12046
	lea	r9, QWORD PTR dest_path$[rsp]
	lea	r8, OFFSET FLAT:$SG165878
	mov	edx, 412				; 0000019cH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 12050
	jmp	SHORT $LN1@dav_move_f
$LN27@dav_move_f:
; Line 12052
	mov	DWORD PTR rc$[rsp], -1
; Line 12053
	mov	DWORD PTR http_status$[rsp], 400	; 00000190H
$LN26@dav_move_f:
; Line 12084
	cmp	DWORD PTR rc$[rsp], 0
	jne	SHORT $LN28@dav_move_f
; Line 12086
	mov	edx, 204				; 000000ccH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 12087
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG165881
	lea	rdx, OFFSET FLAT:$SG165882
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 12090
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 12091
	jmp	SHORT $LN29@dav_move_f
$LN28@dav_move_f:
; Line 12092
	lea	r8, OFFSET FLAT:$SG165883
	mov	edx, DWORD PTR http_status$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN29@dav_move_f:
$LN1@dav_move_f:
; Line 12094
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2056				; 00000808H
	ret	0
?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z ENDP	; dav_move_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
port$ = 36
hostbegin$ = 40
server_domain_len$ = 48
request_domain_len$ = 56
hostend$ = 64
tv72 = 72
portbegin$ = 80
auth_domain_check_enabled$ = 88
server_domain$ = 96
tv195 = 104
portend$ = 112
uri$ = 144
conn$ = 152
?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z PROC ; get_rel_url_at_current_server
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18405
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 18408
	mov	QWORD PTR request_domain_len$[rsp], 0
; Line 18409
	mov	DWORD PTR port$[rsp], 0
; Line 18411
	mov	QWORD PTR hostbegin$[rsp], 0
; Line 18412
	mov	QWORD PTR hostend$[rsp], 0
; Line 18416
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 33				; 00000021H
	lea	rdx, OFFSET FLAT:$SG168929
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN23@get_rel_ur
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN24@get_rel_ur
$LN23@get_rel_ur:
	mov	DWORD PTR tv72[rsp], 0
$LN24@get_rel_ur:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR auth_domain_check_enabled$[rsp], eax
; Line 18421
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_rel_ur
$LN2@get_rel_ur:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_rel_ur:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN3@get_rel_ur
; Line 18425
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 24
	lea	r8, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	mov	QWORD PTR tv195[rsp], r8
	mov	r8, QWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv195[rsp]
	mov	rdx, QWORD PTR [rax+rdx]
	mov	rcx, QWORD PTR uri$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	$LN5@get_rel_ur
; Line 18427
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR uri$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR hostbegin$[rsp], rax
; Line 18428
	mov	edx, 47					; 0000002fH
	mov	rcx, QWORD PTR hostbegin$[rsp]
	call	strchr
	mov	QWORD PTR hostend$[rsp], rax
; Line 18429
	cmp	QWORD PTR hostend$[rsp], 0
	jne	SHORT $LN6@get_rel_ur
; Line 18430
	xor	eax, eax
	jmp	$LN1@get_rel_ur
$LN6@get_rel_ur:
; Line 18432
	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR hostbegin$[rsp]
	call	strchr
	mov	QWORD PTR portbegin$[rsp], rax
; Line 18433
	cmp	QWORD PTR portbegin$[rsp], 0
	je	SHORT $LN9@get_rel_ur
	mov	rax, QWORD PTR hostend$[rsp]
	cmp	QWORD PTR portbegin$[rsp], rax
	jbe	SHORT $LN7@get_rel_ur
$LN9@get_rel_ur:
; Line 18434
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR port$[rsp], eax
; Line 18435
	mov	rax, QWORD PTR hostbegin$[rsp]
	mov	rcx, QWORD PTR hostend$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR request_domain_len$[rsp], rax
; Line 18436
	jmp	SHORT $LN8@get_rel_ur
$LN7@get_rel_ur:
; Line 18437
	mov	rax, QWORD PTR portbegin$[rsp]
	inc	rax
	mov	r8d, 10
	lea	rdx, QWORD PTR portend$[rsp]
	mov	rcx, rax
	call	strtoul
	mov	DWORD PTR port$[rsp], eax
; Line 18439
	mov	rax, QWORD PTR hostend$[rsp]
	cmp	QWORD PTR portend$[rsp], rax
	jne	SHORT $LN11@get_rel_ur
	cmp	DWORD PTR port$[rsp], 0
	jbe	SHORT $LN11@get_rel_ur
	mov	ecx, DWORD PTR port$[rsp]
	call	?is_valid_port@@YAHK@Z			; is_valid_port
	test	eax, eax
	jne	SHORT $LN10@get_rel_ur
$LN11@get_rel_ur:
; Line 18440
	xor	eax, eax
	jmp	$LN1@get_rel_ur
$LN10@get_rel_ur:
; Line 18442
	mov	rax, QWORD PTR hostbegin$[rsp]
	mov	rcx, QWORD PTR portbegin$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR request_domain_len$[rsp], rax
$LN8@get_rel_ur:
; Line 18445
	jmp	SHORT $LN3@get_rel_ur
$LN5@get_rel_ur:
; Line 18447
	jmp	$LN2@get_rel_ur
$LN3@get_rel_ur:
; Line 18449
	cmp	DWORD PTR port$[rsp], 0
	jne	SHORT $LN12@get_rel_ur
; Line 18451
	xor	eax, eax
	jmp	$LN1@get_rel_ur
$LN12@get_rel_ur:
; Line 18456
	mov	rax, QWORD PTR conn$[rsp]
	movzx	ecx, WORD PTR [rax+2306]
	call	QWORD PTR __imp_ntohs
	movzx	eax, ax
	cmp	eax, DWORD PTR port$[rsp]
	je	SHORT $LN13@get_rel_ur
; Line 18458
	xor	eax, eax
	jmp	$LN1@get_rel_ur
$LN13@get_rel_ur:
; Line 18469
	cmp	DWORD PTR auth_domain_check_enabled$[rsp], 0
	je	$LN14@get_rel_ur
; Line 18470
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR server_domain$[rsp], rax
; Line 18471
	mov	rcx, QWORD PTR server_domain$[rsp]
	call	strlen
	mov	QWORD PTR server_domain_len$[rsp], rax
; Line 18472
	cmp	QWORD PTR server_domain_len$[rsp], 0
	je	SHORT $LN16@get_rel_ur
	cmp	QWORD PTR hostbegin$[rsp], 0
	jne	SHORT $LN15@get_rel_ur
$LN16@get_rel_ur:
; Line 18473
	xor	eax, eax
	jmp	$LN1@get_rel_ur
$LN15@get_rel_ur:
; Line 18476
	mov	rax, QWORD PTR server_domain_len$[rsp]
	cmp	QWORD PTR request_domain_len$[rsp], rax
	jne	SHORT $LN17@get_rel_ur
	mov	r8, QWORD PTR server_domain_len$[rsp]
	mov	rdx, QWORD PTR hostbegin$[rsp]
	mov	rcx, QWORD PTR server_domain$[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN17@get_rel_ur
; Line 18478
	jmp	SHORT $LN18@get_rel_ur
$LN17@get_rel_ur:
; Line 18479
	mov	rax, QWORD PTR server_domain_len$[rsp]
	add	rax, 2
	cmp	QWORD PTR request_domain_len$[rsp], rax
	jae	SHORT $LN19@get_rel_ur
; Line 18484
	xor	eax, eax
	jmp	SHORT $LN1@get_rel_ur
$LN19@get_rel_ur:
; Line 18486
	mov	rax, QWORD PTR server_domain_len$[rsp]
	mov	rcx, QWORD PTR request_domain_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR hostbegin$[rsp]
	movsx	eax, BYTE PTR [rcx+rax-1]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN20@get_rel_ur
; Line 18490
	xor	eax, eax
	jmp	SHORT $LN1@get_rel_ur
$LN20@get_rel_ur:
; Line 18493
	mov	rax, QWORD PTR request_domain_len$[rsp]
	mov	rcx, QWORD PTR hostbegin$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR server_domain_len$[rsp]
	mov	r8, QWORD PTR server_domain_len$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR server_domain$[rsp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN21@get_rel_ur
; Line 18498
	xor	eax, eax
	jmp	SHORT $LN1@get_rel_ur
$LN21@get_rel_ur:
$LN18@get_rel_ur:
$LN14@get_rel_ur:
; Line 18503
	mov	rax, QWORD PTR hostend$[rsp]
$LN1@get_rel_ur:
; Line 18504
	add	rsp, 136				; 00000088H
	ret	0
?get_rel_url_at_current_server@@YAPEBDPEBDPEBUmg_connection@@@Z ENDP ; get_rel_url_at_current_server
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
port$ = 36
portbegin$ = 40
hostend$ = 48
tv168 = 56
portend$ = 64
uri$ = 96
?get_uri_type@@YAHPEBD@Z PROC				; get_uri_type
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18335
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 18345
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR uri$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN8@get_uri_ty
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR uri$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN8@get_uri_ty
; Line 18347
	mov	eax, 1
	jmp	$LN1@get_uri_ty
$LN8@get_uri_ty:
; Line 18356
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_uri_ty
$LN2@get_uri_ty:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_uri_ty:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR uri$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@get_uri_ty
; Line 18357
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR uri$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 33					; 00000021H
	jge	SHORT $LN9@get_uri_ty
; Line 18359
	xor	eax, eax
	jmp	$LN1@get_uri_ty
$LN9@get_uri_ty:
; Line 18362
	jmp	SHORT $LN2@get_uri_ty
$LN3@get_uri_ty:
; Line 18365
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR uri$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN10@get_uri_ty
; Line 18367
	mov	eax, 2
	jmp	$LN1@get_uri_ty
$LN10@get_uri_ty:
; Line 18374
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@get_uri_ty
$LN5@get_uri_ty:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@get_uri_ty:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN6@get_uri_ty
; Line 18378
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 24
	lea	r8, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	mov	QWORD PTR tv168[rsp], r8
	mov	r8, QWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv168[rsp]
	mov	rdx, QWORD PTR [rax+rdx]
	mov	rcx, QWORD PTR uri$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	$LN11@get_uri_ty
; Line 18380
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR uri$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, 47					; 0000002fH
	mov	rcx, rax
	call	strchr
	mov	QWORD PTR hostend$[rsp], rax
; Line 18381
	cmp	QWORD PTR hostend$[rsp], 0
	jne	SHORT $LN12@get_uri_ty
; Line 18382
	xor	eax, eax
	jmp	$LN1@get_uri_ty
$LN12@get_uri_ty:
; Line 18384
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?abs_uri_protocols@@3QBU<unnamed-type-abs_uri_protocols>@@B
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR uri$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, 58					; 0000003aH
	mov	rcx, rax
	call	strchr
	mov	QWORD PTR portbegin$[rsp], rax
; Line 18385
	cmp	QWORD PTR portbegin$[rsp], 0
	jne	SHORT $LN13@get_uri_ty
; Line 18386
	mov	eax, 3
	jmp	SHORT $LN1@get_uri_ty
$LN13@get_uri_ty:
; Line 18389
	mov	rax, QWORD PTR portbegin$[rsp]
	inc	rax
	mov	r8d, 10
	lea	rdx, QWORD PTR portend$[rsp]
	mov	rcx, rax
	call	strtoul
	mov	DWORD PTR port$[rsp], eax
; Line 18390
	mov	rax, QWORD PTR hostend$[rsp]
	cmp	QWORD PTR portend$[rsp], rax
	jne	SHORT $LN15@get_uri_ty
	cmp	DWORD PTR port$[rsp], 0
	jbe	SHORT $LN15@get_uri_ty
	mov	ecx, DWORD PTR port$[rsp]
	call	?is_valid_port@@YAHK@Z			; is_valid_port
	test	eax, eax
	jne	SHORT $LN14@get_uri_ty
$LN15@get_uri_ty:
; Line 18391
	xor	eax, eax
	jmp	SHORT $LN1@get_uri_ty
$LN14@get_uri_ty:
; Line 18394
	mov	eax, 4
	jmp	SHORT $LN1@get_uri_ty
$LN11@get_uri_ty:
; Line 18396
	jmp	$LN5@get_uri_ty
$LN6@get_uri_ty:
; Line 18398
	xor	eax, eax
$LN1@get_uri_ty:
; Line 18399
	add	rsp, 88					; 00000058H
	ret	0
?get_uri_type@@YAHPEBD@Z ENDP				; get_uri_type
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
http_status$1 = 64
tv153 = 68
body_len$ = 72
rc$ = 76
de$ = 80
__$ArrayPad$ = 120
conn$ = 144
path$ = 152
?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z PROC		; dav_mkcol
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11856
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11860
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN7@dav_mkcol
; Line 11861
	jmp	$LN1@dav_mkcol
$LN7@dav_mkcol:
; Line 11867
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR de$[rsp+8]
	call	memset
; Line 11868
	lea	r8, QWORD PTR de$[rsp+8]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	jne	SHORT $LN8@dav_mkcol
; Line 11869
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG165798
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165799
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11873				; 00002e61H
	lea	r8, OFFSET FLAT:$SG165800
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN8@dav_mkcol:
; Line 11876
	cmp	QWORD PTR de$[rsp+16], 0
	je	SHORT $LN9@dav_mkcol
; Line 11880
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165802
	mov	edx, 405				; 00000195H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11882
	jmp	$LN1@dav_mkcol
$LN9@dav_mkcol:
; Line 11885
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2440]
	mov	eax, DWORD PTR [rax+2444]
	sub	eax, ecx
	mov	DWORD PTR body_len$[rsp], eax
; Line 11886
	cmp	DWORD PTR body_len$[rsp], 0
	jle	SHORT $LN10@dav_mkcol
; Line 11887
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165804
	mov	edx, 415				; 0000019fH
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11889
	jmp	$LN1@dav_mkcol
$LN10@dav_mkcol:
; Line 11892
	mov	r8d, 493				; 000001edH
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z ; mg_mkdir
	mov	DWORD PTR rc$[rsp], eax
$LN4@dav_mkcol:
; Line 11893
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@dav_mkcol
; Line 11894
	cmp	DWORD PTR rc$[rsp], 0
	jne	SHORT $LN11@dav_mkcol
; Line 11896
	mov	edx, 201				; 000000c9H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 11897
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 11898
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 11899
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG165807
	lea	rdx, OFFSET FLAT:$SG165808
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 11902
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 11903
	jmp	SHORT $LN12@dav_mkcol
$LN11@dav_mkcol:
; Line 11904
	mov	DWORD PTR http_status$1[rsp], 500	; 000001f4H
; Line 11905
	call	_errno
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv153[rsp], eax
	cmp	DWORD PTR tv153[rsp], 2
	je	SHORT $LN15@dav_mkcol
	cmp	DWORD PTR tv153[rsp], 13
	je	SHORT $LN14@dav_mkcol
	cmp	DWORD PTR tv153[rsp], 17
	je	SHORT $LN13@dav_mkcol
	jmp	SHORT $LN5@dav_mkcol
$LN13@dav_mkcol:
; Line 11907
	mov	DWORD PTR http_status$1[rsp], 405	; 00000195H
; Line 11908
	jmp	SHORT $LN5@dav_mkcol
$LN14@dav_mkcol:
; Line 11910
	mov	DWORD PTR http_status$1[rsp], 403	; 00000193H
; Line 11911
	jmp	SHORT $LN5@dav_mkcol
$LN15@dav_mkcol:
; Line 11913
	mov	DWORD PTR http_status$1[rsp], 409	; 00000199H
$LN5@dav_mkcol:
; Line 11917
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165812
	mov	edx, DWORD PTR http_status$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN12@dav_mkcol:
$LN1@dav_mkcol:
; Line 11923
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z ENDP		; dav_mkcol
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 80
status$ = 88
fdin$ = 96
buf$ = 104
fdout$ = 112
fderr$ = 120
data_len$ = 128
headers_len$ = 132
in$ = 136
buflen$ = 144
proc$ = 152
out$ = 160
p$ = 168
status_text$ = 176
err$ = 184
no_buffering$ = 192
pid$ = 200
truncated$ = 208
cfg_buffering$ = 216
$T1 = 224
pbuf$ = 232
blk$ = 240
fout$ = 296
ri$ = 336
dir$ = 1536
__$ArrayPad$ = 2320
conn$ = 2352
prog$ = 2360
cgi_config_idx$ = 2368
?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z PROC	; handle_cgi_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11530
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2344				; 00000928H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11534
	mov	DWORD PTR fdin$[rsp], -1
	mov	DWORD PTR fdin$[rsp+4], -1
	mov	DWORD PTR fdout$[rsp], -1
	mov	DWORD PTR fdout$[rsp+4], -1
	mov	DWORD PTR fderr$[rsp], -1
	mov	DWORD PTR fderr$[rsp+4], -1
; Line 11539
	mov	QWORD PTR in$[rsp], 0
	mov	QWORD PTR out$[rsp], 0
	mov	QWORD PTR err$[rsp], 0
; Line 11540
	mov	QWORD PTR fout$[rsp], 0
	mov	QWORD PTR fout$[rsp+8], 0
	mov	DWORD PTR fout$[rsp+16], 0
	mov	DWORD PTR fout$[rsp+20], 0
	mov	DWORD PTR fout$[rsp+24], 0
	mov	QWORD PTR fout$[rsp+32], 0
; Line 11541
	mov	QWORD PTR pid$[rsp], -1
; Line 11542
	mov	QWORD PTR proc$[rsp], 0
; Line 11543
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 24
	movsxd	rcx, ecx
	mov	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR cfg_buffering$[rsp], rax
; Line 11544
	mov	DWORD PTR no_buffering$[rsp], 0
; Line 11557
	cmp	QWORD PTR cfg_buffering$[rsp], 0
	je	SHORT $LN31@handle_cgi
; Line 11558
	lea	rdx, OFFSET FLAT:$SG165696
	mov	rcx, QWORD PTR cfg_buffering$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN32@handle_cgi
; Line 11559
	mov	DWORD PTR no_buffering$[rsp], 1
$LN32@handle_cgi:
$LN31@handle_cgi:
; Line 11563
	mov	QWORD PTR buf$[rsp], 0
; Line 11564
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+240]
	mov	QWORD PTR buflen$[rsp], rax
; Line 11565
	movzx	r9d, BYTE PTR cgi_config_idx$[rsp]
	lea	r8, QWORD PTR blk$[rsp]
	mov	rdx, QWORD PTR prog$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z ; prepare_cgi_environment
	mov	DWORD PTR i$[rsp], eax
; Line 11566
	cmp	DWORD PTR i$[rsp], 0
	je	SHORT $LN33@handle_cgi
; Line 11567
	mov	QWORD PTR blk$[rsp+8], 0
; Line 11568
	mov	QWORD PTR blk$[rsp+32], 0
; Line 11569
	jmp	$LN34@handle_cgi
	jmp	$done$81
$LN33@handle_cgi:
; Line 11575
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165699
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR dir$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 11577
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN35@handle_cgi
; Line 11578
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165701
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11578				; 00002d3aH
	lea	r8, OFFSET FLAT:$SG165702
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11579
	lea	r9, OFFSET FLAT:$SG165703
	lea	r8, OFFSET FLAT:$SG165704
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11580
	jmp	$LN36@handle_cgi
	jmp	$done$81
$LN35@handle_cgi:
; Line 11583
	mov	edx, 47					; 0000002fH
	lea	rcx, QWORD PTR dir$[rsp]
	call	?strrchr@@YAPEADQEADH@Z			; strrchr
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN37@handle_cgi
; Line 11584
	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
; Line 11585
	jmp	SHORT $LN38@handle_cgi
$LN37@handle_cgi:
; Line 11586
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR dir$[rsp+rax], 46		; 0000002eH
; Line 11587
	mov	QWORD PTR $T1[rsp], 1
	cmp	QWORD PTR $T1[rsp], 780			; 0000030cH
	jae	SHORT $LN79@handle_cgi
	jmp	SHORT $LN80@handle_cgi
$LN79@handle_cgi:
	call	__report_rangecheckfailure
$LN80@handle_cgi:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR dir$[rsp+rax], 0
; Line 11588
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR p$[rsp], rax
$LN38@handle_cgi:
; Line 11591
	mov	r8d, 32768				; 00008000H
	mov	edx, 8192				; 00002000H
	lea	rcx, QWORD PTR fdin$[rsp]
	call	_pipe
	test	eax, eax
	jne	SHORT $LN40@handle_cgi
	mov	r8d, 32768				; 00008000H
	mov	edx, 8192				; 00002000H
	lea	rcx, QWORD PTR fdout$[rsp]
	call	_pipe
	test	eax, eax
	jne	SHORT $LN40@handle_cgi
	mov	r8d, 32768				; 00008000H
	mov	edx, 8192				; 00002000H
	lea	rcx, QWORD PTR fderr$[rsp]
	call	_pipe
	test	eax, eax
	je	SHORT $LN39@handle_cgi
$LN40@handle_cgi:
; Line 11592
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR status$[rsp], rax
; Line 11593
	mov	rax, QWORD PTR status$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165710
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11597				; 00002d4dH
	lea	r8, OFFSET FLAT:$SG165711
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11598
	mov	r9, QWORD PTR status$[rsp]
	lea	r8, OFFSET FLAT:$SG165712
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11602
	jmp	$LN41@handle_cgi
	jmp	$done$81
$LN39@handle_cgi:
; Line 11605
	mov	ecx, 16
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR proc$[rsp], rax
; Line 11607
	cmp	QWORD PTR proc$[rsp], 0
	jne	SHORT $LN42@handle_cgi
; Line 11608
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165715
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11608				; 00002d58H
	lea	r8, OFFSET FLAT:$SG165716
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11609
	mov	r9, QWORD PTR prog$[rsp]
	lea	r8, OFFSET FLAT:$SG165717
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11610
	jmp	$LN43@handle_cgi
	jmp	$done$81
$LN42@handle_cgi:
$LN4@handle_cgi:
; Line 11613
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@handle_cgi
; Line 11614
	movzx	eax, BYTE PTR cgi_config_idx$[rsp]
	mov	BYTE PTR [rsp+64], al
	lea	rax, QWORD PTR dir$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR fderr$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR fdout$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR fdin$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR blk$[rsp+32]
	mov	r8, QWORD PTR blk$[rsp+8]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z ; spawn_process
	mov	QWORD PTR pid$[rsp], rax
; Line 11617
	cmp	QWORD PTR pid$[rsp], -1
	jne	$LN44@handle_cgi
; Line 11618
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR status$[rsp], rax
; Line 11619
	mov	rax, QWORD PTR status$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165720
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11623				; 00002d67H
	lea	r8, OFFSET FLAT:$SG165721
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11624
	lea	r8, OFFSET FLAT:$SG165722
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11625
	mov	rcx, QWORD PTR proc$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 11626
	mov	QWORD PTR proc$[rsp], 0
; Line 11627
	jmp	$LN45@handle_cgi
	jmp	$done$81
$LN44@handle_cgi:
; Line 11631
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR pid$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 11632
	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+8], 1
; Line 11653
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR fdin$[rsp+rax]
	call	_close
; Line 11654
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR fdout$[rsp+rax]
	call	_close
; Line 11655
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR fderr$[rsp+rax]
	call	_close
; Line 11656
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR fderr$[rsp+rax], -1
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR fdout$[rsp+rax], -1
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR fdin$[rsp+rax], -1
; Line 11660
	mov	eax, 4
	imul	rax, rax, 1
	lea	rdx, OFFSET FLAT:$SG165726
	mov	ecx, DWORD PTR fdin$[rsp+rax]
	call	_fdopen
	mov	QWORD PTR in$[rsp], rax
	cmp	QWORD PTR in$[rsp], 0
	je	SHORT $LN47@handle_cgi
	mov	eax, 4
	imul	rax, rax, 0
	lea	rdx, OFFSET FLAT:$SG165727
	mov	ecx, DWORD PTR fdout$[rsp+rax]
	call	_fdopen
	mov	QWORD PTR out$[rsp], rax
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN47@handle_cgi
	mov	eax, 4
	imul	rax, rax, 0
	lea	rdx, OFFSET FLAT:$SG165728
	mov	ecx, DWORD PTR fderr$[rsp+rax]
	call	_fdopen
	mov	QWORD PTR err$[rsp], rax
	cmp	QWORD PTR err$[rsp], 0
	jne	SHORT $LN46@handle_cgi
$LN47@handle_cgi:
; Line 11661
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR status$[rsp], rax
; Line 11662
	mov	rax, QWORD PTR status$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165729
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11665				; 00002d91H
	lea	r8, OFFSET FLAT:$SG165730
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11666
	mov	r9, QWORD PTR status$[rsp]
	lea	r8, OFFSET FLAT:$SG165731
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11670
	jmp	$LN48@handle_cgi
	jmp	$done$81
$LN46@handle_cgi:
; Line 11673
	xor	edx, edx
	mov	rcx, QWORD PTR in$[rsp]
	call	setbuf
; Line 11674
	xor	edx, edx
	mov	rcx, QWORD PTR out$[rsp]
	call	setbuf
; Line 11675
	xor	edx, edx
	mov	rcx, QWORD PTR err$[rsp]
	call	setbuf
; Line 11676
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR fout$[rsp+32], rax
; Line 11678
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2376], 0
	jne	SHORT $LN50@handle_cgi
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 0
	je	SHORT $LN49@handle_cgi
$LN50@handle_cgi:
$LN7@handle_cgi:
; Line 11679
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@handle_cgi
; Line 11683
	xor	r9d, r9d
	mov	r8, -1
	mov	rdx, QWORD PTR in$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z ; forward_body_data
	test	eax, eax
	jne	SHORT $LN51@handle_cgi
; Line 11685
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165736
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11688				; 00002da8H
	lea	r8, OFFSET FLAT:$SG165737
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11689
	jmp	$LN52@handle_cgi
	jmp	$done$81
$LN51@handle_cgi:
$LN49@handle_cgi:
; Line 11694
	mov	rcx, QWORD PTR in$[rsp]
	call	fclose
; Line 11695
	mov	QWORD PTR in$[rsp], 0
; Line 11696
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR fdin$[rsp+rax], -1
; Line 11702
	mov	DWORD PTR data_len$[rsp], 0
; Line 11703
	mov	rcx, QWORD PTR buflen$[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR buf$[rsp], rax
; Line 11704
	cmp	QWORD PTR buf$[rsp], 0
	jne	SHORT $LN53@handle_cgi
; Line 11705
	mov	r9d, DWORD PTR buflen$[rsp]
	lea	r8, OFFSET FLAT:$SG165740
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11709
	mov	eax, DWORD PTR buflen$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165741
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11714				; 00002dc2H
	lea	r8, OFFSET FLAT:$SG165742
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11715
	jmp	$LN54@handle_cgi
	jmp	$done$81
$LN53@handle_cgi:
$LN10@handle_cgi:
; Line 11718
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@handle_cgi
; Line 11719
	lea	rax, QWORD PTR data_len$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR buflen$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z ; read_message
	mov	DWORD PTR headers_len$[rsp], eax
$LN13@handle_cgi:
; Line 11720
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@handle_cgi
; Line 11722
	cmp	DWORD PTR headers_len$[rsp], 0
	jg	$LN55@handle_cgi
; Line 11726
	mov	r9d, DWORD PTR buflen$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR err$[rsp]
	call	?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z ; pull_all
	mov	DWORD PTR i$[rsp], eax
; Line 11727
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN56@handle_cgi
; Line 11730
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165747
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11735				; 00002dd7H
	lea	r8, OFFSET FLAT:$SG165748
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11737
	mov	r9, QWORD PTR prog$[rsp]
	lea	r8, OFFSET FLAT:$SG165749
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11741
	jmp	SHORT $LN57@handle_cgi
$LN56@handle_cgi:
; Line 11744
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR data_len$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR buflen$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG165750
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11749				; 00002de5H
	lea	r8, OFFSET FLAT:$SG165751
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11751
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR data_len$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR buflen$[rsp]
	lea	r8, OFFSET FLAT:$SG165752
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN57@handle_cgi:
; Line 11761
	jmp	$LN58@handle_cgi
	jmp	$done$81
$LN55@handle_cgi:
; Line 11764
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR pbuf$[rsp], rax
; Line 11765
	mov	eax, DWORD PTR headers_len$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 11766
	lea	rdx, QWORD PTR ri$[rsp+152]
	lea	rcx, QWORD PTR pbuf$[rsp]
	call	?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z ; parse_http_headers
	mov	DWORD PTR ri$[rsp+144], eax
; Line 11769
	lea	rax, OFFSET FLAT:$SG165754
	mov	QWORD PTR status_text$[rsp], rax
; Line 11771
	lea	r8, OFFSET FLAT:$SG165757
	mov	edx, DWORD PTR ri$[rsp+144]
	lea	rcx, QWORD PTR ri$[rsp+152]
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR status$[rsp], rax
	cmp	QWORD PTR status$[rsp], 0
	je	SHORT $LN59@handle_cgi
; Line 11772
	mov	rcx, QWORD PTR status$[rsp]
	call	atoi
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2448], eax
; Line 11773
	mov	rax, QWORD PTR status$[rsp]
	mov	QWORD PTR status_text$[rsp], rax
$LN14@handle_cgi:
; Line 11774
	mov	rax, QWORD PTR status_text$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isdigit
	test	eax, eax
	jne	SHORT $LN61@handle_cgi
	mov	rax, QWORD PTR status_text$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN15@handle_cgi
$LN61@handle_cgi:
; Line 11775
	mov	rax, QWORD PTR status_text$[rsp]
	inc	rax
	mov	QWORD PTR status_text$[rsp], rax
; Line 11776
	jmp	SHORT $LN14@handle_cgi
$LN15@handle_cgi:
; Line 11777
	jmp	SHORT $LN60@handle_cgi
$LN59@handle_cgi:
; Line 11778
	lea	r8, OFFSET FLAT:$SG165761
	mov	edx, DWORD PTR ri$[rsp+144]
	lea	rcx, QWORD PTR ri$[rsp+152]
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	test	rax, rax
	je	SHORT $LN62@handle_cgi
; Line 11779
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 307		; 00000133H
; Line 11780
	jmp	SHORT $LN63@handle_cgi
$LN62@handle_cgi:
; Line 11781
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 200		; 000000c8H
$LN63@handle_cgi:
$LN60@handle_cgi:
; Line 11784
	mov	rcx, QWORD PTR conn$[rsp]
	call	?should_keep_alive@@YAHPEBUmg_connection@@@Z ; should_keep_alive
	test	eax, eax
	jne	SHORT $LN64@handle_cgi
; Line 11785
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
$LN64@handle_cgi:
$LN18@handle_cgi:
; Line 11788
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@handle_cgi
; Line 11790
	mov	r9, QWORD PTR status_text$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8d, DWORD PTR [rax+2448]
	lea	rdx, OFFSET FLAT:$SG165763
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 11793
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN21@handle_cgi
$LN19@handle_cgi:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@handle_cgi:
	mov	eax, DWORD PTR ri$[rsp+144]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN20@handle_cgi
$LN24@handle_cgi:
; Line 11794
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN24@handle_cgi
; Line 11797
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	r9, QWORD PTR ri$[rsp+rax+160]
	mov	r8, QWORD PTR ri$[rsp+rcx+152]
	lea	rdx, OFFSET FLAT:$SG165764
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 11801
	jmp	SHORT $LN19@handle_cgi
$LN20@handle_cgi:
; Line 11802
	mov	r8d, 2
	lea	rdx, OFFSET FLAT:$SG165765
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
; Line 11805
	mov	eax, DWORD PTR headers_len$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR headers_len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
$LN27@handle_cgi:
; Line 11808
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN27@handle_cgi
; Line 11809
	mov	eax, DWORD PTR no_buffering$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, 9223372036854775807			; 7fffffffffffffffH
	xor	r8d, r8d
	lea	rdx, QWORD PTR fout$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z ; send_file_data
$LN30@handle_cgi:
; Line 11810
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN30@handle_cgi
$LN34@handle_cgi:
$LN36@handle_cgi:
$LN41@handle_cgi:
$LN43@handle_cgi:
$LN45@handle_cgi:
$LN48@handle_cgi:
$LN52@handle_cgi:
$LN54@handle_cgi:
$LN58@handle_cgi:
$done$81:
; Line 11813
	mov	rcx, QWORD PTR blk$[rsp+32]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 11814
	mov	rcx, QWORD PTR blk$[rsp+8]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 11816
	cmp	QWORD PTR pid$[rsp], -1
	je	SHORT $LN65@handle_cgi
; Line 11817
	mov	rcx, QWORD PTR proc$[rsp]
	call	?abort_cgi_process@@YAHPEAX@Z		; abort_cgi_process
$LN65@handle_cgi:
; Line 11820
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR fdin$[rsp+rax], -1
	je	SHORT $LN66@handle_cgi
; Line 11821
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR fdin$[rsp+rax]
	call	_close
$LN66@handle_cgi:
; Line 11823
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR fdout$[rsp+rax], -1
	je	SHORT $LN67@handle_cgi
; Line 11824
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR fdout$[rsp+rax]
	call	_close
$LN67@handle_cgi:
; Line 11826
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR fderr$[rsp+rax], -1
	je	SHORT $LN68@handle_cgi
; Line 11827
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR fderr$[rsp+rax]
	call	_close
$LN68@handle_cgi:
; Line 11830
	cmp	QWORD PTR in$[rsp], 0
	je	SHORT $LN69@handle_cgi
; Line 11831
	mov	rcx, QWORD PTR in$[rsp]
	call	fclose
	jmp	SHORT $LN70@handle_cgi
$LN69@handle_cgi:
; Line 11832
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR fdin$[rsp+rax], -1
	je	SHORT $LN71@handle_cgi
; Line 11833
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR fdin$[rsp+rax]
	call	_close
$LN71@handle_cgi:
$LN70@handle_cgi:
; Line 11836
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN72@handle_cgi
; Line 11837
	mov	rcx, QWORD PTR out$[rsp]
	call	fclose
	jmp	SHORT $LN73@handle_cgi
$LN72@handle_cgi:
; Line 11838
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR fdout$[rsp+rax], -1
	je	SHORT $LN74@handle_cgi
; Line 11839
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR fdout$[rsp+rax]
	call	_close
$LN74@handle_cgi:
$LN73@handle_cgi:
; Line 11842
	cmp	QWORD PTR err$[rsp], 0
	je	SHORT $LN75@handle_cgi
; Line 11843
	mov	rcx, QWORD PTR err$[rsp]
	call	fclose
	jmp	SHORT $LN76@handle_cgi
$LN75@handle_cgi:
; Line 11844
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR fderr$[rsp+rax], -1
	je	SHORT $LN77@handle_cgi
; Line 11845
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR fderr$[rsp+rax]
	call	_close
$LN77@handle_cgi:
$LN76@handle_cgi:
; Line 11848
	mov	rcx, QWORD PTR buf$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN78@handle_cgi:
; Line 11849
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2344				; 00000928H
	ret	0
?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z ENDP	; handle_cgi_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
status$ = 32
proc$ = 40
ret_pid$ = 48
refs$ = 56
data$ = 80
?abort_cgi_process@@YAHPEAX@Z PROC			; abort_cgi_process
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11493
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 11497
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR proc$[rsp], rax
; Line 11498
	mov	DWORD PTR status$[rsp], 0
; Line 11502
	mov	r8d, 1
	lea	rdx, QWORD PTR status$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?waitpid@@YAPEAXPEAXPEAHH@Z		; waitpid
	mov	QWORD PTR ret_pid$[rsp], rax
; Line 11503
	cmp	QWORD PTR ret_pid$[rsp], -1
	je	SHORT $LN10@abort_cgi_
	cmp	DWORD PTR status$[rsp], 0
	jne	SHORT $LN10@abort_cgi_
$LN4@abort_cgi_:
; Line 11505
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@abort_cgi_
; Line 11506
	mov	edx, 22
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?kill@@YAHPEAXH@Z			; kill
$LN5@abort_cgi_:
; Line 11509
	xor	r8d, r8d
	lea	rdx, QWORD PTR status$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?waitpid@@YAPEAXPEAXPEAHH@Z		; waitpid
	cmp	rax, -1
	je	SHORT $LN6@abort_cgi_
; Line 11510
	jmp	SHORT $LN5@abort_cgi_
$LN6@abort_cgi_:
; Line 11511
	jmp	SHORT $LN11@abort_cgi_
$LN10@abort_cgi_:
$LN9@abort_cgi_:
; Line 11512
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@abort_cgi_
$LN11@abort_cgi_:
; Line 11515
	mov	rax, QWORD PTR proc$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?mg_atomic_dec@@YA_JPEC_J@Z		; mg_atomic_dec
	mov	QWORD PTR refs$[rsp], rax
; Line 11516
	cmp	QWORD PTR refs$[rsp], 0
	jne	SHORT $LN12@abort_cgi_
; Line 11518
	mov	rcx, QWORD PTR data$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN12@abort_cgi_:
; Line 11521
	xor	eax, eax
; Line 11522
	add	rsp, 72					; 00000048H
	ret	0
?abort_cgi_process@@YAHPEAX@Z ENDP			; abort_cgi_process
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 64
i$ = 72
p$ = 80
uri_len$ = 88
tv246 = 92
truncated$ = 96
index_file$1 = 104
tv272 = 112
tv248 = 120
var_vec$ = 128
src_addr$ = 144
http_var_name$ = 208
__$ArrayPad$ = 336
conn$ = 368
prog$ = 376
env$ = 384
cgi_config_idx$ = 392
?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z PROC ; prepare_cgi_environment
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11298
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 360				; 00000168H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11304
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN11@prepare_cg
	cmp	QWORD PTR prog$[rsp], 0
	je	SHORT $LN11@prepare_cg
	cmp	QWORD PTR env$[rsp], 0
	jne	SHORT $LN10@prepare_cg
$LN11@prepare_cg:
; Line 11305
	mov	eax, -1
	jmp	$LN1@prepare_cg
$LN10@prepare_cg:
; Line 11308
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 11309
	mov	rax, QWORD PTR env$[rsp]
	mov	QWORD PTR [rax+16], 4096		; 00001000H
; Line 11310
	mov	rax, QWORD PTR env$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 11311
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	rcx, QWORD PTR env$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 11312
	mov	rax, QWORD PTR env$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN12@prepare_cg
; Line 11313
	lea	rax, OFFSET FLAT:$SG165487
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165488
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11315				; 00002c33H
	lea	r8, OFFSET FLAT:$SG165489
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11316
	mov	eax, -1
	jmp	$LN1@prepare_cg
$LN12@prepare_cg:
; Line 11318
	mov	rax, QWORD PTR env$[rsp]
	mov	QWORD PTR [rax+40], 256			; 00000100H
; Line 11319
	mov	rax, QWORD PTR env$[rsp]
	mov	QWORD PTR [rax+48], 0
; Line 11320
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+40]
	shl	rax, 3
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	rcx, QWORD PTR env$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 11322
	mov	rax, QWORD PTR env$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN13@prepare_cg
; Line 11323
	lea	rax, OFFSET FLAT:$SG165491
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165492
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11325				; 00002c3dH
	lea	r8, OFFSET FLAT:$SG165493
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11326
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 11327
	mov	eax, -1
	jmp	$LN1@prepare_cg
$LN13@prepare_cg:
; Line 11330
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	r8, QWORD PTR [rax+rcx+8]
	lea	rdx, OFFSET FLAT:$SG165494
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11331
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	r8, QWORD PTR [rax+rcx+8]
	lea	rdx, OFFSET FLAT:$SG165495
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11332
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	r8, QWORD PTR [rax+rcx+8]
	lea	rdx, OFFSET FLAT:$SG165496
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11333
	call	mg_version
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG165497
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11336
	lea	r8, OFFSET FLAT:$SG165498
	lea	rdx, OFFSET FLAT:$SG165499
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11337
	lea	r8, OFFSET FLAT:$SG165500
	lea	rdx, OFFSET FLAT:$SG165501
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11338
	lea	r8, OFFSET FLAT:$SG165502
	lea	rdx, OFFSET FLAT:$SG165503
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11340
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8d, DWORD PTR [rax+132]
	lea	rdx, OFFSET FLAT:$SG165504
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11342
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2320				; 00000910H
	mov	r8, rax
	mov	edx, 50					; 00000032H
	lea	rcx, QWORD PTR src_addr$[rsp]
	call	?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ; sockaddr_to_string
; Line 11343
	lea	r8, QWORD PTR src_addr$[rsp]
	lea	rdx, OFFSET FLAT:$SG165505
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11345
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:$SG165506
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11346
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8d, DWORD PTR [rax+128]
	lea	rdx, OFFSET FLAT:$SG165507
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11348
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+24]
	lea	rdx, OFFSET FLAT:$SG165508
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11349
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+40]
	lea	rdx, OFFSET FLAT:$SG165509
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11350
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+32]
	lea	rdx, OFFSET FLAT:$SG165510
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11353
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	strlen
	mov	DWORD PTR uri_len$[rsp], eax
; Line 11354
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2408], 0
	jne	$LN14@prepare_cg
; Line 11355
	mov	eax, DWORD PTR uri_len$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN16@prepare_cg
; Line 11357
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+40]
	lea	rdx, OFFSET FLAT:$SG165515
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11358
	jmp	SHORT $LN17@prepare_cg
$LN16@prepare_cg:
; Line 11360
	mov	edx, 47					; 0000002fH
	mov	rcx, QWORD PTR prog$[rsp]
	call	strrchr
	mov	QWORD PTR index_file$1[rsp], rax
; Line 11361
	cmp	QWORD PTR index_file$1[rsp], 0
	je	SHORT $LN18@prepare_cg
; Line 11362
	mov	rax, QWORD PTR index_file$1[rsp]
	inc	rax
	mov	r9, rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+40]
	lea	rdx, OFFSET FLAT:$SG165517
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN18@prepare_cg:
$LN17@prepare_cg:
; Line 11368
	jmp	SHORT $LN15@prepare_cg
$LN14@prepare_cg:
; Line 11370
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv248[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2408]
	call	strlen
	mov	ecx, DWORD PTR uri_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv246[rsp], eax
	mov	r9, QWORD PTR tv248[rsp]
	mov	r8d, DWORD PTR tv246[rsp]
	lea	rdx, OFFSET FLAT:$SG165518
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN15@prepare_cg:
; Line 11376
	mov	r8, QWORD PTR prog$[rsp]
	lea	rdx, OFFSET FLAT:$SG165519
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11377
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2408], 0
	jne	SHORT $LN19@prepare_cg
; Line 11378
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	r8, QWORD PTR [rax+rcx+8]
	lea	rdx, OFFSET FLAT:$SG165522
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11379
	jmp	SHORT $LN20@prepare_cg
$LN19@prepare_cg:
; Line 11380
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rdx+2408]
	mov	r8, QWORD PTR [rax+rcx+8]
	lea	rdx, OFFSET FLAT:$SG165523
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN20@prepare_cg:
; Line 11386
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2288], 0
	jne	SHORT $LN37@prepare_cg
	lea	rax, OFFSET FLAT:$SG165524
	mov	QWORD PTR tv272[rsp], rax
	jmp	SHORT $LN38@prepare_cg
$LN37@prepare_cg:
	lea	rax, OFFSET FLAT:$SG165525
	mov	QWORD PTR tv272[rsp], rax
$LN38@prepare_cg:
	mov	r8, QWORD PTR tv272[rsp]
	lea	rdx, OFFSET FLAT:$SG165526
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11388
	lea	rdx, OFFSET FLAT:$SG165528
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN21@prepare_cg
; Line 11389
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165529
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN21@prepare_cg:
; Line 11391
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN22@prepare_cg
; Line 11392
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+56]
	lea	rdx, OFFSET FLAT:$SG165531
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN22@prepare_cg:
; Line 11394
	lea	rdx, OFFSET FLAT:$SG165533
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN23@prepare_cg
; Line 11395
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165534
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN23@prepare_cg:
; Line 11397
	lea	rcx, OFFSET FLAT:$SG165536
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN24@prepare_cg
; Line 11398
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165537
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN24@prepare_cg:
; Line 11400
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2408], 0
	je	SHORT $LN25@prepare_cg
; Line 11401
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+2408]
	lea	rdx, OFFSET FLAT:$SG165539
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN25@prepare_cg:
; Line 11404
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2448], 0
	jle	SHORT $LN26@prepare_cg
; Line 11406
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8d, DWORD PTR [rax+2448]
	lea	rdx, OFFSET FLAT:$SG165541
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN26@prepare_cg:
; Line 11410
	lea	rcx, OFFSET FLAT:$SG165543
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN27@prepare_cg
; Line 11411
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165544
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN27@prepare_cg:
; Line 11413
	lea	rcx, OFFSET FLAT:$SG165546
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN28@prepare_cg
; Line 11414
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165547
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN28@prepare_cg:
; Line 11416
	lea	rcx, OFFSET FLAT:$SG165549
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN29@prepare_cg
; Line 11417
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165550
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN29@prepare_cg:
; Line 11419
	lea	rcx, OFFSET FLAT:$SG165552
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN30@prepare_cg
; Line 11420
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165553
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN30@prepare_cg:
; Line 11422
	lea	rcx, OFFSET FLAT:$SG165555
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN31@prepare_cg
; Line 11423
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165556
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN31@prepare_cg:
; Line 11431
	lea	rcx, OFFSET FLAT:$SG165558
	call	getenv
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN32@prepare_cg
; Line 11432
	mov	r8, QWORD PTR s$[rsp]
	lea	rdx, OFFSET FLAT:$SG165559
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN32@prepare_cg:
; Line 11435
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN33@prepare_cg
; Line 11436
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+64]
	lea	rdx, OFFSET FLAT:$SG165561
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11437
	lea	r8, OFFSET FLAT:$SG165562
	lea	rdx, OFFSET FLAT:$SG165563
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
$LN33@prepare_cg:
; Line 11441
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@prepare_cg
$LN2@prepare_cg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@prepare_cg:
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+160]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@prepare_cg
; Line 11443
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rcx+rax+168]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165564
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 128				; 00000080H
	lea	r8, QWORD PTR http_var_name$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 11450
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN34@prepare_cg
; Line 11451
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rcx+rax+168]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG165566
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165567
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11454				; 00002cbeH
	lea	r8, OFFSET FLAT:$SG165568
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11455
	jmp	$LN2@prepare_cg
$LN34@prepare_cg:
; Line 11459
	lea	rax, QWORD PTR http_var_name$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN7@prepare_cg
$LN5@prepare_cg:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN7@prepare_cg:
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@prepare_cg
; Line 11460
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN35@prepare_cg
; Line 11461
	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 95			; 0000005fH
$LN35@prepare_cg:
; Line 11463
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	toupper
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx], al
; Line 11464
	jmp	SHORT $LN5@prepare_cg
$LN6@prepare_cg:
; Line 11466
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rcx+rax+176]
	lea	r8, QWORD PTR http_var_name$[rsp]
	lea	rdx, OFFSET FLAT:$SG165570
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11470
	jmp	$LN2@prepare_cg
$LN3@prepare_cg:
; Line 11473
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 21
	movsxd	rcx, ecx
	mov	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR s$[rsp], rax
$LN8@prepare_cg:
; Line 11474
	xor	r8d, r8d
	lea	rdx, QWORD PTR var_vec$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN9@prepare_cg
; Line 11475
	mov	r9, QWORD PTR var_vec$[rsp]
	mov	r8d, DWORD PTR var_vec$[rsp+8]
	lea	rdx, OFFSET FLAT:$SG165571
	mov	rcx, QWORD PTR env$[rsp]
	call	?addenv@@YAXPEAUcgi_environment@@PEBDZZ	; addenv
; Line 11476
	jmp	SHORT $LN8@prepare_cg
$LN9@prepare_cg:
; Line 11478
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rcx+rax*8], 0
; Line 11479
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	BYTE PTR [rcx+rax], 0
; Line 11481
	xor	eax, eax
$LN1@prepare_cg:
; Line 11482
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 360				; 00000168H
	ret	0
?prepare_cgi_environment@@YAHPEAUmg_connection@@PEBDPEAUcgi_environment@@E@Z ENDP ; prepare_cgi_environment
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$ = 64
n$ = 72
added$ = 80
i$ = 88
space$ = 96
ap$ = 104
env$ = 128
fmt$ = 136
?addenv@@YAXPEAUcgi_environment@@PEBDZZ PROC		; addenv
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11225
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 120				; 00000078H
; Line 11227
	mov	DWORD PTR truncated$[rsp], 0
; Line 11231
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rax+40]
	sub	rax, rcx
	cmp	rax, 2
	jae	SHORT $LN8@addenv
; Line 11232
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG165443
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165444
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11235				; 00002be3H
	lea	r8, OFFSET FLAT:$SG165445
	xor	edx, edx
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11236
	jmp	$LN1@addenv
$LN8@addenv:
; Line 11240
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	mov	QWORD PTR space$[rsp], rax
$LN4@addenv:
; Line 11244
	cmp	QWORD PTR space$[rsp], 2
	ja	$LN9@addenv
; Line 11246
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 4096				; 00001000H
	mov	QWORD PTR n$[rsp], rax
; Line 11247
	mov	rdx, QWORD PTR n$[rsp]
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?mg_realloc@@YAPEAXPEAX_K@Z		; mg_realloc
	mov	QWORD PTR added$[rsp], rax
; Line 11248
	cmp	QWORD PTR added$[rsp], 0
	jne	SHORT $LN10@addenv
; Line 11250
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG165448
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165449
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 11254				; 00002bf6H
	lea	r8, OFFSET FLAT:$SG165450
	xor	edx, edx
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 11255
	jmp	$LN1@addenv
$LN10@addenv:
; Line 11258
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR added$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 11259
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR n$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 11260
	mov	QWORD PTR i$[rsp], 0
	mov	QWORD PTR n$[rsp], 0
	jmp	SHORT $LN7@addenv
$LN5@addenv:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN7@addenv:
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN6@addenv
; Line 11261
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR added$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rdx, QWORD PTR i$[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
; Line 11262
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR added$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	strlen
	mov	rcx, QWORD PTR n$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	QWORD PTR n$[rsp], rax
; Line 11263
	jmp	SHORT $LN5@addenv
$LN6@addenv:
; Line 11264
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	mov	QWORD PTR space$[rsp], rax
$LN9@addenv:
; Line 11268
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR env$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR added$[rsp], rax
; Line 11271
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 11272
	mov	rax, QWORD PTR space$[rsp]
	dec	rax
	mov	rcx, QWORD PTR ap$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR fmt$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	mov	r8, QWORD PTR added$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rax, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z ; mg_vsnprintf
; Line 11273
	mov	QWORD PTR ap$[rsp], 0
; Line 11276
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN11@addenv
; Line 11278
	mov	QWORD PTR space$[rsp], 0
$LN11@addenv:
; Line 11280
	cmp	DWORD PTR truncated$[rsp], 0
	jne	$LN4@addenv
; Line 11283
	mov	rcx, QWORD PTR added$[rsp]
	call	strlen
	inc	rax
	mov	QWORD PTR n$[rsp], rax
; Line 11284
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+24]
	add	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR env$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 11287
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR env$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rdx, QWORD PTR added$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 11288
	mov	rax, QWORD PTR env$[rsp]
	mov	rax, QWORD PTR [rax+48]
	inc	rax
	mov	rcx, QWORD PTR env$[rsp]
	mov	QWORD PTR [rcx+48], rax
$LN1@addenv:
; Line 11289
	add	rsp, 120				; 00000078H
	ret	0
?addenv@@YAXPEAUcgi_environment@@PEBDZZ ENDP		; addenv
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nread$1 = 48
success$ = 52
tv131 = 56
expect$ = 64
buf$ = 80
__$ArrayPad$ = 8272
conn$ = 8304
fp$ = 8312
sock$ = 8320
ssl$ = 8328
?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z PROC ; forward_body_data
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11125
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8296				; 00002068H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11128
	mov	DWORD PTR success$[rsp], 0
; Line 11130
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@forward_bo
; Line 11131
	xor	eax, eax
	jmp	$LN1@forward_bo
$LN5@forward_bo:
; Line 11134
	lea	rdx, OFFSET FLAT:$SG165379
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR expect$[rsp], rax
; Line 11136
	cmp	QWORD PTR fp$[rsp], 0
	jne	SHORT $LN6@forward_bo
; Line 11137
	lea	r9, OFFSET FLAT:$SG165381
	lea	r8, OFFSET FLAT:$SG165382
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11138
	xor	eax, eax
	jmp	$LN1@forward_bo
$LN6@forward_bo:
; Line 11141
	cmp	QWORD PTR expect$[rsp], 0
	je	SHORT $LN7@forward_bo
	lea	rdx, OFFSET FLAT:$SG165385
	mov	rcx, QWORD PTR expect$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN7@forward_bo
; Line 11144
	lea	r8, OFFSET FLAT:$SG165386
	mov	edx, 417				; 000001a1H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11145
	jmp	$LN8@forward_bo
$LN7@forward_bo:
; Line 11146
	cmp	QWORD PTR expect$[rsp], 0
	je	SHORT $LN9@forward_bo
; Line 11147
	lea	r8, OFFSET FLAT:$SG165389
	lea	rdx, OFFSET FLAT:$SG165390
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 11148
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 100		; 00000064H
; Line 11149
	jmp	SHORT $LN10@forward_bo
$LN9@forward_bo:
; Line 11150
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 200		; 000000c8H
$LN10@forward_bo:
; Line 11155
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2384], 0
	je	SHORT $LN11@forward_bo
; Line 11156
	lea	r9, OFFSET FLAT:$SG165392
	lea	r8, OFFSET FLAT:$SG165393
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 11157
	xor	eax, eax
	jmp	$LN1@forward_bo
$LN11@forward_bo:
$LN2@forward_bo:
; Line 11161
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR nread$1[rsp], eax
; Line 11162
	cmp	DWORD PTR nread$1[rsp], 0
	jg	SHORT $LN12@forward_bo
; Line 11163
	cmp	DWORD PTR nread$1[rsp], 0
	jne	SHORT $LN16@forward_bo
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN17@forward_bo
$LN16@forward_bo:
	mov	DWORD PTR tv131[rsp], 0
$LN17@forward_bo:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR success$[rsp], eax
; Line 11164
	jmp	SHORT $LN3@forward_bo
$LN12@forward_bo:
; Line 11166
	mov	eax, DWORD PTR nread$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ssl$[rsp]
	mov	r8, QWORD PTR sock$[rsp]
	mov	rdx, QWORD PTR fp$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z ; push_all
	cmp	eax, DWORD PTR nread$1[rsp]
	je	SHORT $LN13@forward_bo
; Line 11167
	jmp	SHORT $LN3@forward_bo
$LN13@forward_bo:
; Line 11169
	jmp	$LN2@forward_bo
$LN3@forward_bo:
; Line 11172
	cmp	DWORD PTR success$[rsp], 0
	jne	SHORT $LN14@forward_bo
; Line 11176
	lea	r9, OFFSET FLAT:$SG165397
	lea	r8, OFFSET FLAT:$SG165398
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN14@forward_bo:
$LN8@forward_bo:
; Line 11180
	mov	eax, DWORD PTR success$[rsp]
$LN1@forward_bo:
; Line 11181
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8296				; 00002068H
	ret	0
?forward_body_data@@YAHPEAUmg_connection@@PEAU_iobuf@@_KPEAUssl_st@@@Z ENDP ; forward_body_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 48
request_len$ = 52
request_timeout$ = 56
last_action_time$ = 64
__$ArrayPad$ = 80
fp$ = 112
conn$ = 120
buf$ = 128
bufsiz$ = 136
nread$ = 144
?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z PROC ; read_message
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 11052
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11053
	mov	DWORD PTR n$[rsp], 0
; Line 11057
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN4@read_messa
; Line 11058
	xor	eax, eax
	jmp	$LN1@read_messa
$LN4@read_messa:
; Line 11061
	mov	r8d, 16
	xor	edx, edx
	lea	rcx, QWORD PTR last_action_time$[rsp]
	call	memset
; Line 11063
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN5@read_messa
; Line 11065
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	xor	edx, edx
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	strtod
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR request_timeout$[rsp], xmm0
; Line 11067
	jmp	SHORT $LN6@read_messa
$LN5@read_messa:
; Line 11068
	mov	eax, 24
	imul	rax, rax, 11
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	xor	edx, edx
	mov	rcx, QWORD PTR [rcx+rax+16]
	call	strtod
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR request_timeout$[rsp], xmm0
$LN6@read_messa:
; Line 11072
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2432], 0
	jle	SHORT $LN7@read_messa
; Line 11073
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 12
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN8@read_messa
; Line 11074
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 12
	xor	edx, edx
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	strtod
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR request_timeout$[rsp], xmm0
$LN8@read_messa:
$LN7@read_messa:
; Line 11080
	mov	rax, QWORD PTR nread$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?get_http_header_len@@YAHPEBDH@Z	; get_http_header_len
	mov	DWORD PTR request_len$[rsp], eax
$LN2@read_messa:
; Line 11082
	cmp	DWORD PTR request_len$[rsp], 0
	jne	$LN3@read_messa
; Line 11084
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN9@read_messa
; Line 11086
	mov	eax, -1
	jmp	$LN1@read_messa
$LN9@read_messa:
; Line 11089
	mov	rax, QWORD PTR nread$[rsp]
	mov	ecx, DWORD PTR bufsiz$[rsp]
	cmp	DWORD PTR [rax], ecx
	jl	SHORT $LN10@read_messa
; Line 11091
	mov	eax, -2
	jmp	$LN1@read_messa
$LN10@read_messa:
; Line 11094
	mov	rax, QWORD PTR nread$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR bufsiz$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR nread$[rsp]
	movsxd	rcx, DWORD PTR [rcx]
	mov	rdx, QWORD PTR buf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsd	xmm0, QWORD PTR request_timeout$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9d, eax
	mov	r8, rcx
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR fp$[rsp]
	call	?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z ; pull_inner
	mov	DWORD PTR n$[rsp], eax
; Line 11096
	cmp	DWORD PTR n$[rsp], -2
	jne	SHORT $LN11@read_messa
; Line 11098
	mov	eax, -1
	jmp	$LN1@read_messa
$LN11@read_messa:
; Line 11102
	lea	rdx, QWORD PTR last_action_time$[rsp]
	mov	ecx, 1
	call	?mg_clock_gettime@@YAHKPEAUtimespec@@@Z	; mg_clock_gettime
; Line 11104
	cmp	DWORD PTR n$[rsp], 0
	jle	SHORT $LN12@read_messa
; Line 11105
	mov	rax, QWORD PTR nread$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR nread$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 11106
	mov	rax, QWORD PTR nread$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?get_http_header_len@@YAHPEBDH@Z	; get_http_header_len
	mov	DWORD PTR request_len$[rsp], eax
$LN12@read_messa:
; Line 11109
	cmp	DWORD PTR request_len$[rsp], 0
	jne	SHORT $LN13@read_messa
	movsd	xmm0, QWORD PTR request_timeout$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN13@read_messa
; Line 11111
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2352				; 00000930H
	mov	rdx, rax
	lea	rcx, QWORD PTR last_action_time$[rsp]
	call	?mg_difftimespec@@YANPEBUtimespec@@0@Z	; mg_difftimespec
	comisd	xmm0, QWORD PTR request_timeout$[rsp]
	jbe	SHORT $LN14@read_messa
; Line 11113
	mov	eax, -1
	jmp	SHORT $LN1@read_messa
$LN14@read_messa:
$LN13@read_messa:
; Line 11116
	jmp	$LN2@read_messa
$LN3@read_messa:
; Line 11118
	mov	eax, DWORD PTR request_len$[rsp]
$LN1@read_messa:
; Line 11119
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?read_message@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHPEAH@Z ENDP ; read_message
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
response_length$ = 32
l$ = 36
init_skip$ = 40
tmp$ = 48
tmp2$ = 56
buf$ = 80
len$ = 88
ri$ = 96
?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z PROC ; parse_http_response
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10942
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 10944
	mov	DWORD PTR init_skip$[rsp], 0
; Line 10949
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 10950
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+32], 0
$LN2@parse_http:
; Line 10955
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN3@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	je	SHORT $LN3@parse_http
; Line 10956
	mov	rax, QWORD PTR buf$[rsp]
	inc	rax
	mov	QWORD PTR buf$[rsp], rax
; Line 10957
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 10958
	mov	eax, DWORD PTR init_skip$[rsp]
	inc	eax
	mov	DWORD PTR init_skip$[rsp], eax
; Line 10959
	jmp	SHORT $LN2@parse_http
$LN3@parse_http:
; Line 10961
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN9@parse_http
; Line 10963
	xor	eax, eax
	jmp	$LN1@parse_http
$LN9@parse_http:
; Line 10967
	mov	rax, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	iscntrl
	test	eax, eax
	je	SHORT $LN10@parse_http
; Line 10968
	mov	eax, -1
	jmp	$LN1@parse_http
$LN10@parse_http:
; Line 10972
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?get_http_header_len@@YAHPEBDH@Z	; get_http_header_len
	mov	DWORD PTR response_length$[rsp], eax
; Line 10973
	cmp	DWORD PTR response_length$[rsp], 0
	jg	SHORT $LN11@parse_http
; Line 10974
	mov	eax, DWORD PTR response_length$[rsp]
	jmp	$LN1@parse_http
$LN11@parse_http:
; Line 10976
	mov	eax, DWORD PTR response_length$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 10978
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN13@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN13@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN12@parse_http
$LN13@parse_http:
; Line 10979
	mov	eax, -1
	jmp	$LN1@parse_http
$LN12@parse_http:
; Line 10984
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG165332
	mov	rcx, QWORD PTR buf$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN14@parse_http
; Line 10986
	mov	eax, -1
	jmp	$LN1@parse_http
$LN14@parse_http:
; Line 10988
	mov	rax, QWORD PTR buf$[rsp]
	add	rax, 5
	mov	QWORD PTR buf$[rsp], rax
; Line 10989
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	isgraph
	test	eax, eax
	jne	SHORT $LN15@parse_http
; Line 10991
	mov	eax, -1
	jmp	$LN1@parse_http
$LN15@parse_http:
; Line 10993
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 10995
	xor	edx, edx
	lea	rcx, QWORD PTR buf$[rsp]
	call	?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z ; skip_to_end_of_word_and_terminate
	test	eax, eax
	jg	SHORT $LN16@parse_http
; Line 10996
	mov	eax, -1
	jmp	$LN1@parse_http
$LN16@parse_http:
; Line 11000
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR tmp$[rsp], rax
; Line 11002
	xor	edx, edx
	lea	rcx, QWORD PTR buf$[rsp]
	call	?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z ; skip_to_end_of_word_and_terminate
	test	eax, eax
	jg	SHORT $LN17@parse_http
; Line 11003
	mov	eax, -1
	jmp	$LN1@parse_http
$LN17@parse_http:
; Line 11006
	mov	r8d, 10
	lea	rdx, QWORD PTR tmp2$[rsp]
	mov	rcx, QWORD PTR tmp$[rsp]
	call	strtol
	mov	DWORD PTR l$[rsp], eax
; Line 11007
	cmp	DWORD PTR l$[rsp], 100			; 00000064H
	jl	SHORT $LN19@parse_http
	cmp	DWORD PTR l$[rsp], 1000			; 000003e8H
	jge	SHORT $LN19@parse_http
	mov	rax, QWORD PTR tmp$[rsp]
	mov	rcx, QWORD PTR tmp2$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 3
	jne	SHORT $LN19@parse_http
	mov	rax, QWORD PTR tmp2$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN18@parse_http
$LN19@parse_http:
; Line 11009
	mov	eax, -1
	jmp	$LN1@parse_http
$LN18@parse_http:
; Line 11011
	mov	rax, QWORD PTR ri$[rsp]
	mov	ecx, DWORD PTR l$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 11014
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN4@parse_http:
; Line 11018
	mov	rax, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isprint
	test	eax, eax
	je	SHORT $LN5@parse_http
; Line 11019
	mov	rax, QWORD PTR buf$[rsp]
	inc	rax
	mov	QWORD PTR buf$[rsp], rax
; Line 11020
	jmp	SHORT $LN4@parse_http
$LN5@parse_http:
; Line 11021
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN20@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN20@parse_http
; Line 11022
	mov	eax, -1
	jmp	SHORT $LN1@parse_http
$LN20@parse_http:
$LN8@parse_http:
; Line 11026
	mov	rax, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rax], 0
; Line 11027
	mov	rax, QWORD PTR buf$[rsp]
	inc	rax
	mov	QWORD PTR buf$[rsp], rax
; Line 11028
	mov	rax, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	jne	SHORT $LN8@parse_http
; Line 11031
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 40					; 00000028H
	mov	rdx, rax
	lea	rcx, QWORD PTR buf$[rsp]
	call	?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z ; parse_http_headers
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 11032
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jge	SHORT $LN21@parse_http
; Line 11034
	mov	eax, -1
	jmp	SHORT $LN1@parse_http
$LN21@parse_http:
; Line 11037
	mov	eax, DWORD PTR init_skip$[rsp]
	mov	ecx, DWORD PTR response_length$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN1@parse_http:
; Line 11038
	add	rsp, 72					; 00000048H
	ret	0
?parse_http_response@@YAHPEADHPEAUmg_response_info@@@Z ENDP ; parse_http_response
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
request_length$ = 32
init_skip$ = 36
buf$ = 64
len$ = 72
ri$ = 80
?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z PROC ; parse_http_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10856
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 10858
	mov	DWORD PTR init_skip$[rsp], 0
; Line 10862
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax+32], 0
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rax+48], 0
; Line 10864
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+144], 0
$LN2@parse_http:
; Line 10869
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN3@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	je	SHORT $LN3@parse_http
; Line 10870
	mov	rax, QWORD PTR buf$[rsp]
	inc	rax
	mov	QWORD PTR buf$[rsp], rax
; Line 10871
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 10872
	mov	eax, DWORD PTR init_skip$[rsp]
	inc	eax
	mov	DWORD PTR init_skip$[rsp], eax
; Line 10873
	jmp	SHORT $LN2@parse_http
$LN3@parse_http:
; Line 10875
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN4@parse_http
; Line 10877
	xor	eax, eax
	jmp	$LN1@parse_http
$LN4@parse_http:
; Line 10881
	mov	rax, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	iscntrl
	test	eax, eax
	je	SHORT $LN5@parse_http
; Line 10882
	mov	eax, -1
	jmp	$LN1@parse_http
$LN5@parse_http:
; Line 10886
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?get_http_header_len@@YAHPEBDH@Z	; get_http_header_len
	mov	DWORD PTR request_length$[rsp], eax
; Line 10887
	cmp	DWORD PTR request_length$[rsp], 0
	jg	SHORT $LN6@parse_http
; Line 10888
	mov	eax, DWORD PTR request_length$[rsp]
	jmp	$LN1@parse_http
$LN6@parse_http:
; Line 10890
	mov	eax, DWORD PTR request_length$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 10892
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN8@parse_http
	mov	rax, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN7@parse_http
$LN8@parse_http:
; Line 10893
	mov	eax, -1
	jmp	$LN1@parse_http
$LN7@parse_http:
; Line 10897
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 10899
	xor	edx, edx
	lea	rcx, QWORD PTR buf$[rsp]
	call	?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z ; skip_to_end_of_word_and_terminate
	test	eax, eax
	jg	SHORT $LN9@parse_http
; Line 10900
	mov	eax, -1
	jmp	$LN1@parse_http
$LN9@parse_http:
; Line 10904
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 10906
	xor	edx, edx
	lea	rcx, QWORD PTR buf$[rsp]
	call	?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z ; skip_to_end_of_word_and_terminate
	test	eax, eax
	jg	SHORT $LN10@parse_http
; Line 10907
	mov	eax, -1
	jmp	$LN1@parse_http
$LN10@parse_http:
; Line 10911
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 10913
	mov	edx, 1
	lea	rcx, QWORD PTR buf$[rsp]
	call	?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z ; skip_to_end_of_word_and_terminate
	test	eax, eax
	jg	SHORT $LN11@parse_http
; Line 10914
	mov	eax, -1
	jmp	$LN1@parse_http
$LN11@parse_http:
; Line 10918
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG165300
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	strncmp
	test	eax, eax
	je	SHORT $LN12@parse_http
; Line 10920
	mov	eax, -1
	jmp	SHORT $LN1@parse_http
$LN12@parse_http:
; Line 10922
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+32]
	add	rax, 5
	mov	rcx, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 10925
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?is_valid_http_method@@YAHPEBD@Z	; is_valid_http_method
	test	eax, eax
	jne	SHORT $LN13@parse_http
; Line 10926
	mov	eax, -1
	jmp	SHORT $LN1@parse_http
$LN13@parse_http:
; Line 10930
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 152				; 00000098H
	mov	rdx, rax
	lea	rcx, QWORD PTR buf$[rsp]
	call	?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z ; parse_http_headers
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx+144], eax
; Line 10931
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax+144], 0
	jge	SHORT $LN14@parse_http
; Line 10933
	mov	eax, -1
	jmp	SHORT $LN1@parse_http
$LN14@parse_http:
; Line 10936
	mov	eax, DWORD PTR init_skip$[rsp]
	mov	ecx, DWORD PTR request_length$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN1@parse_http:
; Line 10937
	add	rsp, 56					; 00000038H
	ret	0
?parse_http_request@@YAHPEADHPEAUmg_request_info@@@Z ENDP ; parse_http_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
method$ = 64
?is_valid_http_method@@YAHPEBD@Z PROC			; is_valid_http_method
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10840
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 10841
	mov	rcx, QWORD PTR method$[rsp]
	call	?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z ; get_http_method_info
	test	rax, rax
	je	SHORT $LN3@is_valid_h
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@is_valid_h
$LN3@is_valid_h:
	mov	DWORD PTR tv67[rsp], 0
$LN4@is_valid_h:
	mov	eax, DWORD PTR tv67[rsp]
; Line 10842
	add	rsp, 56					; 00000038H
	ret	0
?is_valid_http_method@@YAHPEBD@Z ENDP			; is_valid_http_method
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
method$ = 64
?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z PROC ; get_http_method_info
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10821
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 10826
	lea	rax, OFFSET FLAT:?http_methods@@3QBUmg_http_method_info@@B
	mov	QWORD PTR m$[rsp], rax
$LN2@get_http_m:
; Line 10828
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@get_http_m
; Line 10829
	mov	rdx, QWORD PTR method$[rsp]
	mov	rax, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN4@get_http_m
; Line 10830
	mov	rax, QWORD PTR m$[rsp]
	jmp	SHORT $LN1@get_http_m
$LN4@get_http_m:
; Line 10832
	mov	rax, QWORD PTR m$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR m$[rsp], rax
; Line 10833
	jmp	SHORT $LN2@get_http_m
$LN3@get_http_m:
; Line 10834
	xor	eax, eax
$LN1@get_http_m:
; Line 10835
	add	rsp, 56					; 00000038H
	ret	0
?get_http_method_info@@YAPEBUmg_http_method_info@@PEBD@Z ENDP ; get_http_method_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ppw$ = 48
eol$ = 56
?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z PROC	; skip_to_end_of_word_and_terminate
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10621
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@skip_to_en:
; Line 10624
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isgraph
	test	eax, eax
	je	SHORT $LN3@skip_to_en
; Line 10625
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR ppw$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 10626
	jmp	SHORT $LN2@skip_to_en
$LN3@skip_to_en:
; Line 10629
	cmp	DWORD PTR eol$[rsp], 0
	je	SHORT $LN7@skip_to_en
; Line 10631
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN9@skip_to_en
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN9@skip_to_en
; Line 10632
	mov	eax, -1
	jmp	SHORT $LN1@skip_to_en
$LN9@skip_to_en:
; Line 10634
	jmp	SHORT $LN8@skip_to_en
$LN7@skip_to_en:
; Line 10636
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN10@skip_to_en
; Line 10637
	mov	eax, -1
	jmp	SHORT $LN1@skip_to_en
$LN10@skip_to_en:
$LN8@skip_to_en:
$LN6@skip_to_en:
; Line 10643
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	BYTE PTR [rax], 0
; Line 10644
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR ppw$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 10645
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	jne	SHORT $LN6@skip_to_en
; Line 10648
	cmp	DWORD PTR eol$[rsp], 0
	jne	SHORT $LN11@skip_to_en
; Line 10650
	mov	rax, QWORD PTR ppw$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isgraph
	test	eax, eax
	jne	SHORT $LN12@skip_to_en
; Line 10651
	mov	eax, -1
	jmp	SHORT $LN1@skip_to_en
$LN12@skip_to_en:
$LN11@skip_to_en:
; Line 10656
	mov	eax, 1
$LN1@skip_to_en:
; Line 10657
	add	rsp, 40					; 00000028H
	ret	0
?skip_to_end_of_word_and_terminate@@YAHPEAPEADH@Z ENDP	; skip_to_end_of_word_and_terminate
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 64
conn$ = 96
path$ = 104
?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z PROC	; remove_bad_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10550
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 10551
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_remove@@YAHPEBUmg_connection@@PEBD@Z ; mg_remove
	mov	DWORD PTR r$[rsp], eax
; Line 10552
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN2@remove_bad
; Line 10553
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG165163
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165164
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 10556				; 0000293cH
	lea	r8, OFFSET FLAT:$SG165165
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN2@remove_bad:
; Line 10558
	add	rsp, 88					; 00000058H
	ret	0
?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ENDP	; remove_bad_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
p$ = 40
len$ = 48
s$ = 56
$T1 = 64
file$ = 72
buf$ = 112
__$ArrayPad$ = 896
conn$ = 928
path$ = 936
?put_dir@@YAHPEAUmg_connection@@PEBD@Z PROC		; put_dir
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10513
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 920				; 00000398H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10516
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 10518
	mov	DWORD PTR res$[rsp], 1
; Line 10520
	mov	rax, QWORD PTR path$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN4@put_dir
$LN2@put_dir:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN4@put_dir:
	mov	edx, 47					; 0000002fH
	mov	rcx, QWORD PTR s$[rsp]
	call	strchr
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	je	$LN3@put_dir
; Line 10521
	mov	rax, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
; Line 10522
	cmp	QWORD PTR len$[rsp], 780		; 0000030cH
	jb	SHORT $LN8@put_dir
; Line 10524
	mov	DWORD PTR res$[rsp], -1
; Line 10525
	jmp	$LN3@put_dir
$LN8@put_dir:
; Line 10527
	mov	r8, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	lea	rcx, QWORD PTR buf$[rsp]
	call	memcpy
; Line 10528
	mov	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 780			; 0000030cH
	jae	SHORT $LN12@put_dir
	jmp	SHORT $LN13@put_dir
$LN12@put_dir:
	call	__report_rangecheckfailure
$LN13@put_dir:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
$LN7@put_dir:
; Line 10531
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@put_dir
; Line 10532
	lea	r8, QWORD PTR file$[rsp]
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	jne	SHORT $LN9@put_dir
	mov	r8d, 493				; 000001edH
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z ; mg_mkdir
	test	eax, eax
	je	SHORT $LN9@put_dir
; Line 10534
	mov	DWORD PTR res$[rsp], -2
; Line 10535
	jmp	SHORT $LN3@put_dir
$LN9@put_dir:
; Line 10539
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN10@put_dir
; Line 10540
	mov	DWORD PTR res$[rsp], 0
$LN10@put_dir:
; Line 10542
	jmp	$LN2@put_dir
$LN3@put_dir:
; Line 10544
	mov	eax, DWORD PTR res$[rsp]
$LN11@put_dir:
; Line 10545
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 920				; 00000398H
	ret	0
?put_dir@@YAHPEAUmg_connection@@PEBD@Z ENDP		; put_dir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lm$ = 32
etag$ = 96
__$ArrayPad$ = 160
conn$ = 192
filep$ = 200
?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z PROC ; handle_not_modified_static_file_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10425
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10428
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@handle_not
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN2@handle_not
$LN3@handle_not:
; Line 10429
	jmp	$LN1@handle_not
$LN2@handle_not:
; Line 10432
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 8
	mov	r8, rax
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR lm$[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 10433
	mov	rax, QWORD PTR filep$[rsp]
	mov	r8, rax
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR etag$[rsp]
	call	?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z ; construct_etag
; Line 10436
	mov	edx, 304				; 00000130H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 10437
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 10438
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 10439
	mov	r9d, -1
	lea	r8, QWORD PTR lm$[rsp]
	lea	rdx, OFFSET FLAT:$SG165098
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 10440
	mov	r9d, -1
	lea	r8, QWORD PTR etag$[rsp]
	lea	rdx, OFFSET FLAT:$SG165099
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 10443
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
$LN1@handle_not:
; Line 10444
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	ret	0
?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z ENDP ; handle_not_modified_static_file_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
inm$ = 40
ims$ = 48
etag$ = 64
__$ArrayPad$ = 128
conn$ = 160
filestat$ = 168
?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z PROC ; is_not_modified
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10410
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10412
	lea	rdx, OFFSET FLAT:$SG165088
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR ims$[rsp], rax
; Line 10413
	lea	rdx, OFFSET FLAT:$SG165089
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR inm$[rsp], rax
; Line 10414
	mov	r8, QWORD PTR filestat$[rsp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR etag$[rsp]
	call	?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z ; construct_etag
; Line 10416
	cmp	QWORD PTR inm$[rsp], 0
	je	SHORT $LN3@is_not_mod
	mov	rdx, QWORD PTR inm$[rsp]
	lea	rcx, QWORD PTR etag$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN5@is_not_mod
$LN3@is_not_mod:
	cmp	QWORD PTR ims$[rsp], 0
	je	SHORT $LN4@is_not_mod
	mov	rcx, QWORD PTR ims$[rsp]
	call	?parse_date_string@@YA_JPEBD@Z		; parse_date_string
	mov	rcx, QWORD PTR filestat$[rsp]
	cmp	QWORD PTR [rcx+8], rax
	jle	SHORT $LN5@is_not_mod
$LN4@is_not_mod:
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@is_not_mod
$LN5@is_not_mod:
	mov	DWORD PTR tv83[rsp], 1
$LN6@is_not_mod:
	mov	eax, DWORD PTR tv83[rsp]
; Line 10419
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z ENDP ; is_not_modified
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cl$ = 64
truncated$ = 72
r1$ = 80
tv74 = 88
n$ = 92
trunc$1 = 96
r2$ = 104
encoding$ = 112
is_head_request$ = 120
range_hdr$ = 128
$T2 = 136
tv204 = 144
tv208 = 152
mime_vec$ = 160
file_stat$3 = 176
len$4 = 208
lm$ = 240
etag$ = 304
range$ = 368
gz_path$ = 496
__$ArrayPad$ = 1280
conn$ = 1328
path$ = 1336
filep$ = 1344
mime_type$ = 1352
additional_headers$ = 1360
?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z PROC ; handle_static_file_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10165
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1304				; 00000518H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10173
	mov	QWORD PTR encoding$[rsp], 0
; Line 10183
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@handle_sta
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	SHORT $LN3@handle_sta
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN2@handle_sta
$LN3@handle_sta:
; Line 10184
	jmp	$LN1@handle_sta
$LN2@handle_sta:
; Line 10187
	lea	rdx, OFFSET FLAT:$SG165034
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN21@handle_sta
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN22@handle_sta
$LN21@handle_sta:
	mov	DWORD PTR tv74[rsp], 0
$LN22@handle_sta:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR is_head_request$[rsp], eax
; Line 10189
	cmp	QWORD PTR mime_type$[rsp], 0
	jne	SHORT $LN4@handle_sta
; Line 10190
	lea	r8, QWORD PTR mime_vec$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z ; get_mime_type
; Line 10191
	jmp	SHORT $LN5@handle_sta
$LN4@handle_sta:
; Line 10192
	mov	rax, QWORD PTR mime_type$[rsp]
	mov	QWORD PTR mime_vec$[rsp], rax
; Line 10193
	mov	rcx, QWORD PTR mime_type$[rsp]
	call	strlen
	mov	QWORD PTR mime_vec$[rsp+8], rax
$LN5@handle_sta:
; Line 10195
	mov	rax, QWORD PTR filep$[rsp]
	mov	rcx, 9223372036854775807		; 7fffffffffffffffH
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN6@handle_sta
; Line 10196
	mov	rax, QWORD PTR filep$[rsp]
	mov	r9, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:$SG165038
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 10200
	jmp	$LN1@handle_sta
$LN6@handle_sta:
; Line 10202
	mov	rax, QWORD PTR filep$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR cl$[rsp], rax
; Line 10203
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 200		; 000000c8H
; Line 10204
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 128			; 00000080H
	jae	SHORT $LN23@handle_sta
	jmp	SHORT $LN24@handle_sta
$LN23@handle_sta:
	call	__report_rangecheckfailure
$LN24@handle_sta:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR range$[rsp+rax], 0
; Line 10216
	lea	rdx, OFFSET FLAT:$SG165039
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR range_hdr$[rsp], rax
; Line 10219
	mov	rax, QWORD PTR filep$[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	$LN7@handle_sta
; Line 10220
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165042
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR gz_path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 10222
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN9@handle_sta
; Line 10223
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165044
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 10227
	jmp	$LN1@handle_sta
$LN9@handle_sta:
; Line 10230
	lea	rax, QWORD PTR gz_path$[rsp]
	mov	QWORD PTR path$[rsp], rax
; Line 10231
	lea	rax, OFFSET FLAT:$SG165045
	mov	QWORD PTR encoding$[rsp], rax
; Line 10237
	jmp	$LN8@handle_sta
$LN7@handle_sta:
; Line 10238
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2420], 0
	je	$LN10@handle_sta
	cmp	QWORD PTR range_hdr$[rsp], 0
	jne	$LN10@handle_sta
	mov	rax, QWORD PTR filep$[rsp]
	cmp	QWORD PTR [rax], 1024			; 00000400H
	jb	$LN10@handle_sta
; Line 10241
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165047
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR gz_path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 10244
	cmp	DWORD PTR truncated$[rsp], 0
	jne	SHORT $LN11@handle_sta
	lea	r8, QWORD PTR file_stat$3[rsp]
	lea	rdx, QWORD PTR gz_path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN11@handle_sta
	cmp	DWORD PTR file_stat$3[rsp+16], 0
	jne	SHORT $LN11@handle_sta
; Line 10245
	mov	DWORD PTR file_stat$3[rsp+20], 1
; Line 10246
	lea	rax, QWORD PTR file_stat$3[rsp]
	mov	rdi, QWORD PTR filep$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 10247
	mov	rax, QWORD PTR filep$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR cl$[rsp], rax
; Line 10248
	lea	rax, QWORD PTR gz_path$[rsp]
	mov	QWORD PTR path$[rsp], rax
; Line 10249
	lea	rax, OFFSET FLAT:$SG165049
	mov	QWORD PTR encoding$[rsp], rax
$LN11@handle_sta:
$LN10@handle_sta:
$LN8@handle_sta:
; Line 10258
	mov	r9, QWORD PTR filep$[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN12@handle_sta
; Line 10259
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG165051
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 10264
	jmp	$LN1@handle_sta
$LN12@handle_sta:
; Line 10267
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, rax
	call	?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z ; fclose_on_exec
; Line 10271
	mov	QWORD PTR r2$[rsp], 0
	mov	rax, QWORD PTR r2$[rsp]
	mov	QWORD PTR r1$[rsp], rax
; Line 10274
	cmp	QWORD PTR range_hdr$[rsp], 0
	je	$LN13@handle_sta
	lea	r8, QWORD PTR r2$[rsp]
	lea	rdx, QWORD PTR r1$[rsp]
	mov	rcx, QWORD PTR range_hdr$[rsp]
	call	?parse_range_header@@YAHPEBDPEA_J1@Z	; parse_range_header
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR n$[rsp], 0
	jle	$LN13@handle_sta
	cmp	QWORD PTR r1$[rsp], 0
	jl	$LN13@handle_sta
	cmp	QWORD PTR r2$[rsp], 0
	jl	$LN13@handle_sta
; Line 10277
	mov	rax, QWORD PTR filep$[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN14@handle_sta
; Line 10278
	lea	r9, OFFSET FLAT:$SG165054
	lea	r8, OFFSET FLAT:$SG165055
	mov	edx, 416				; 000001a0H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 10283
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 10285
	jmp	$LN1@handle_sta
$LN14@handle_sta:
; Line 10287
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 206		; 000000ceH
; Line 10288
	cmp	DWORD PTR n$[rsp], 2
	jne	SHORT $LN27@handle_sta
	mov	rax, QWORD PTR cl$[rsp]
	cmp	QWORD PTR r2$[rsp], rax
	jle	SHORT $LN25@handle_sta
	mov	rax, QWORD PTR cl$[rsp]
	mov	QWORD PTR tv204[rsp], rax
	jmp	SHORT $LN26@handle_sta
$LN25@handle_sta:
	mov	rax, QWORD PTR r2$[rsp]
	mov	QWORD PTR tv204[rsp], rax
$LN26@handle_sta:
	mov	rax, QWORD PTR r1$[rsp]
	mov	rcx, QWORD PTR tv204[rsp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	mov	QWORD PTR tv208[rsp], rax
	jmp	SHORT $LN28@handle_sta
$LN27@handle_sta:
	mov	rax, QWORD PTR r1$[rsp]
	mov	rcx, QWORD PTR cl$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv208[rsp], rax
$LN28@handle_sta:
	mov	rax, QWORD PTR tv208[rsp]
	mov	QWORD PTR cl$[rsp], rax
; Line 10289
	mov	rax, QWORD PTR r1$[rsp]
	mov	rcx, QWORD PTR cl$[rsp]
	lea	rax, QWORD PTR [rax+rcx-1]
	mov	rcx, QWORD PTR filep$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+56], rcx
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR r1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165056
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 128				; 00000080H
	lea	r8, QWORD PTR range$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN13@handle_sta:
; Line 10315
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 8
	mov	r8, rax
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR lm$[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 10316
	mov	rax, QWORD PTR filep$[rsp]
	mov	r8, rax
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR etag$[rsp]
	call	?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z ; construct_etag
; Line 10319
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2448]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 10320
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 10321
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 10322
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_cors_header@@YAXPEAUmg_connection@@@Z ; send_cors_header
; Line 10323
	mov	r9d, DWORD PTR mime_vec$[rsp+8]
	mov	r8, QWORD PTR mime_vec$[rsp]
	lea	rdx, OFFSET FLAT:$SG165057
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 10327
	mov	r9d, -1
	lea	r8, QWORD PTR lm$[rsp]
	lea	rdx, OFFSET FLAT:$SG165058
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 10328
	mov	r9d, -1
	lea	r8, QWORD PTR etag$[rsp]
	lea	rdx, OFFSET FLAT:$SG165059
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 10348
	mov	DWORD PTR trunc$1[rsp], 0
; Line 10349
	mov	rax, QWORD PTR cl$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165060
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	lea	r8, QWORD PTR len$4[rsp]
	lea	rdx, QWORD PTR trunc$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 10351
	cmp	DWORD PTR trunc$1[rsp], 0
	jne	SHORT $LN15@handle_sta
; Line 10352
	mov	r9d, -1
	lea	r8, QWORD PTR len$4[rsp]
	lea	rdx, OFFSET FLAT:$SG165062
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN15@handle_sta:
; Line 10355
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG165063
	lea	rdx, OFFSET FLAT:$SG165064
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 10358
	cmp	QWORD PTR encoding$[rsp], 0
	je	SHORT $LN16@handle_sta
; Line 10359
	mov	r9d, -1
	mov	r8, QWORD PTR encoding$[rsp]
	lea	rdx, OFFSET FLAT:$SG165066
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN16@handle_sta:
; Line 10361
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR range$[rsp+rax]
	test	eax, eax
	je	SHORT $LN17@handle_sta
; Line 10362
	mov	r9d, -1
	lea	r8, QWORD PTR range$[rsp]
	lea	rdx, OFFSET FLAT:$SG165068
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN17@handle_sta:
; Line 10367
	cmp	QWORD PTR additional_headers$[rsp], 0
	je	SHORT $LN18@handle_sta
	mov	rax, QWORD PTR additional_headers$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN18@handle_sta
; Line 10368
	mov	rdx, QWORD PTR additional_headers$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add_lines
$LN18@handle_sta:
; Line 10372
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 10374
	cmp	DWORD PTR is_head_request$[rsp], 0
	jne	SHORT $LN19@handle_sta
; Line 10383
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR cl$[rsp]
	mov	r8, QWORD PTR r1$[rsp]
	mov	rdx, QWORD PTR filep$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z ; send_file_data
$LN19@handle_sta:
; Line 10386
	mov	rax, QWORD PTR filep$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN1@handle_sta:
$LN20@handle_sta:
; Line 10387
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1304				; 00000518H
	pop	rdi
	pop	rsi
	ret	0
?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z ENDP ; handle_static_file_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filep$ = 8
conn$ = 16
?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z PROC ; fclose_on_exec
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10137
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 10138
	cmp	QWORD PTR filep$[rsp], 0
	je	SHORT $LN2@fclose_on_
	mov	rax, QWORD PTR filep$[rsp]
$LN2@fclose_on_:
; Line 10150
	ret	0
?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z ENDP ; fclose_on_exec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 80
buf_len$ = 88
filestat$ = 96
?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z PROC	; construct_etag
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10122
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 10123
	cmp	QWORD PTR filestat$[rsp], 0
	je	SHORT $LN2@construct_
	cmp	QWORD PTR buf$[rsp], 0
	je	SHORT $LN2@construct_
; Line 10124
	mov	rax, QWORD PTR filestat$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR filestat$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG164995
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR buf_len$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN2@construct_:
; Line 10132
	add	rsp, 72					; 00000048H
	ret	0
?construct_etag@@YAXPEAD_KPEBUmg_file_stat@@@Z ENDP	; construct_etag
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
header$ = 48
a$ = 56
b$ = 64
?parse_range_header@@YAHPEBDPEA_J1@Z PROC		; parse_range_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10110
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10111
	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	lea	rdx, OFFSET FLAT:$SG164987
	mov	rcx, QWORD PTR header$[rsp]
	call	sscanf
; Line 10117
	add	rsp, 40					; 00000028H
	ret	0
?parse_range_header@@YAHPEBDPEA_J1@Z ENDP		; parse_range_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
to_read$ = 64
num_read$ = 68
tv90 = 72
num_written$ = 76
tv71 = 80
size$ = 88
tv74 = 96
tv75 = 104
tv140 = 112
buf$ = 128
__$ArrayPad$ = 8320
conn$ = 8352
filep$ = 8360
offset$ = 8368
len$ = 8376
no_buffering$ = 8384
?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z PROC ; send_file_data
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10000
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8344				; 00002098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10005
	cmp	QWORD PTR filep$[rsp], 0
	je	SHORT $LN5@send_file_
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN4@send_file_
$LN5@send_file_:
; Line 10006
	jmp	$LN1@send_file_
$LN4@send_file_:
; Line 10010
	mov	rax, QWORD PTR filep$[rsp]
	mov	rcx, 9223372036854775807		; 7fffffffffffffffH
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN13@send_file_
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	mov	QWORD PTR tv71[rsp], rax
	jmp	SHORT $LN14@send_file_
$LN13@send_file_:
	mov	rax, QWORD PTR filep$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv71[rsp], rax
$LN14@send_file_:
	mov	rax, QWORD PTR tv71[rsp]
	mov	QWORD PTR size$[rsp], rax
; Line 10012
	cmp	QWORD PTR offset$[rsp], 0
	jge	SHORT $LN17@send_file_
	mov	QWORD PTR tv75[rsp], 0
	jmp	SHORT $LN18@send_file_
$LN17@send_file_:
	mov	rax, QWORD PTR size$[rsp]
	cmp	QWORD PTR offset$[rsp], rax
	jle	SHORT $LN15@send_file_
	mov	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN16@send_file_
$LN15@send_file_:
	mov	rax, QWORD PTR offset$[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN16@send_file_:
	mov	rax, QWORD PTR tv74[rsp]
	mov	QWORD PTR tv75[rsp], rax
$LN18@send_file_:
	mov	rax, QWORD PTR tv75[rsp]
	mov	QWORD PTR offset$[rsp], rax
; Line 10014
	cmp	QWORD PTR len$[rsp], 0
	jle	$LN6@send_file_
	mov	rax, QWORD PTR filep$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	$LN6@send_file_
; Line 10060
	cmp	QWORD PTR offset$[rsp], 0
	jle	$LN7@send_file_
	mov	rax, QWORD PTR filep$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	_fileno
	xor	r8d, r8d
	mov	rdx, QWORD PTR offset$[rsp]
	mov	ecx, eax
	call	_lseeki64
	cmp	rax, -1
	jne	SHORT $LN19@send_file_
	mov	DWORD PTR tv90[rsp], -1
	jmp	SHORT $LN20@send_file_
$LN19@send_file_:
	mov	DWORD PTR tv90[rsp], 0
$LN20@send_file_:
	cmp	DWORD PTR tv90[rsp], 0
	je	SHORT $LN7@send_file_
; Line 10061
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164974
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164975
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 10064				; 00002750H
	lea	r8, OFFSET FLAT:$SG164976
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 10065
	lea	r9, OFFSET FLAT:$SG164977
	lea	r8, OFFSET FLAT:$SG164978
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 10070
	jmp	$LN8@send_file_
$LN7@send_file_:
$LN2@send_file_:
; Line 10071
	cmp	QWORD PTR len$[rsp], 0
	jle	$LN3@send_file_
; Line 10082
	cmp	DWORD PTR no_buffering$[rsp], 0
	je	SHORT $LN21@send_file_
	mov	QWORD PTR tv140[rsp], 1
	jmp	SHORT $LN22@send_file_
$LN21@send_file_:
	mov	QWORD PTR tv140[rsp], 8192		; 00002000H
$LN22@send_file_:
	mov	eax, DWORD PTR tv140[rsp]
	mov	DWORD PTR to_read$[rsp], eax
; Line 10083
	movsxd	rax, DWORD PTR to_read$[rsp]
	cmp	rax, QWORD PTR len$[rsp]
	jle	SHORT $LN9@send_file_
; Line 10084
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR to_read$[rsp], eax
$LN9@send_file_:
; Line 10090
	movsxd	rax, DWORD PTR to_read$[rsp]
	mov	rcx, QWORD PTR filep$[rsp]
	mov	r9, QWORD PTR [rcx+32]
	mov	r8, rax
	mov	edx, 1
	lea	rcx, QWORD PTR buf$[rsp]
	call	fread
	mov	DWORD PTR num_read$[rsp], eax
	cmp	DWORD PTR num_read$[rsp], 0
	jg	SHORT $LN10@send_file_
; Line 10091
	jmp	SHORT $LN3@send_file_
$LN10@send_file_:
; Line 10096
	movsxd	rax, DWORD PTR num_read$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR num_written$[rsp], eax
	mov	eax, DWORD PTR num_read$[rsp]
	cmp	DWORD PTR num_written$[rsp], eax
	je	SHORT $LN11@send_file_
; Line 10097
	jmp	SHORT $LN3@send_file_
$LN11@send_file_:
; Line 10101
	movsxd	rax, DWORD PTR num_written$[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
; Line 10102
	jmp	$LN2@send_file_
$LN3@send_file_:
$LN8@send_file_:
$LN6@send_file_:
$LN1@send_file_:
; Line 10105
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8344				; 00002098H
	ret	0
?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z ENDP ; send_file_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv171 = 64
p$ = 72
i$ = 80
title$ = 88
esc$ = 96
sort_direction$ = 104
tv196 = 108
data$ = 112
tv188 = 136
tv191 = 144
curtime$ = 152
date$ = 160
__$ArrayPad$ = 224
conn$ = 256
dir$ = 264
?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z PROC ; handle_directory_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9884
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9887
	mov	QWORD PTR data$[rsp], 0
	mov	QWORD PTR data$[rsp+8], 0
	mov	QWORD PTR data$[rsp+16], 128		; 00000080H
; Line 9890
	xor	ecx, ecx
	call	time
	mov	QWORD PTR curtime$[rsp], rax
; Line 9892
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN8@handle_dir
; Line 9893
	jmp	$LN1@handle_dir
$LN8@handle_dir:
; Line 9896
	lea	r9, OFFSET FLAT:?dir_scan_callback@@YAHPEAUde@@PEAX@Z ; dir_scan_callback
	lea	r8, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z ; scan_directory
	test	eax, eax
	jne	SHORT $LN9@handle_dir
; Line 9897
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR dir$[rsp]
	lea	r8, OFFSET FLAT:$SG164923
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 9902
	jmp	$LN1@handle_dir
$LN9@handle_dir:
; Line 9905
	lea	r8, QWORD PTR curtime$[rsp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR date$[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 9907
	mov	QWORD PTR esc$[rsp], 0
; Line 9908
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR title$[rsp], rax
; Line 9909
	lea	rdx, OFFSET FLAT:$SG164925
	mov	rcx, QWORD PTR title$[rsp]
	call	strcspn
	mov	rcx, QWORD PTR title$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN10@handle_dir
; Line 9911
	mov	rcx, QWORD PTR title$[rsp]
	call	strlen
	imul	rax, rax, 5
	inc	rax
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR esc$[rsp], rax
; Line 9912
	cmp	QWORD PTR esc$[rsp], 0
	je	$LN11@handle_dir
; Line 9913
	mov	QWORD PTR i$[rsp], 0
	mov	rax, QWORD PTR esc$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@handle_dir
$LN2@handle_dir:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
$LN4@handle_dir:
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR title$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@handle_dir
; Line 9914
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR title$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR p$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 9915
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN13@handle_dir
; Line 9916
	lea	rdx, OFFSET FLAT:$SG164930
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
	jmp	SHORT $LN14@handle_dir
$LN13@handle_dir:
; Line 9917
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN15@handle_dir
; Line 9918
	lea	rdx, OFFSET FLAT:$SG164933
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
	jmp	SHORT $LN16@handle_dir
$LN15@handle_dir:
; Line 9919
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN17@handle_dir
; Line 9920
	lea	rdx, OFFSET FLAT:$SG164935
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
$LN17@handle_dir:
$LN16@handle_dir:
$LN14@handle_dir:
; Line 9922
	jmp	$LN2@handle_dir
$LN3@handle_dir:
; Line 9923
	jmp	SHORT $LN12@handle_dir
$LN11@handle_dir:
; Line 9924
	lea	rax, OFFSET FLAT:$SG164936
	mov	QWORD PTR title$[rsp], rax
$LN12@handle_dir:
$LN10@handle_dir:
; Line 9928
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN20@handle_dir
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN20@handle_dir
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 100				; 00000064H
	jne	SHORT $LN20@handle_dir
	mov	BYTE PTR tv171[rsp], 97			; 00000061H
	jmp	SHORT $LN21@handle_dir
$LN20@handle_dir:
	mov	BYTE PTR tv171[rsp], 100		; 00000064H
$LN21@handle_dir:
	movsx	eax, BYTE PTR tv171[rsp]
	mov	DWORD PTR sort_direction$[rsp], eax
; Line 9934
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 9937
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 9938
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 9939
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 9940
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG164937
	lea	rdx, OFFSET FLAT:$SG164938
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 9946
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 9949
	mov	eax, DWORD PTR sort_direction$[rsp]
	mov	DWORD PTR tv196[rsp], eax
	cmp	QWORD PTR esc$[rsp], 0
	je	SHORT $LN22@handle_dir
	mov	rax, QWORD PTR esc$[rsp]
	mov	QWORD PTR tv188[rsp], rax
	jmp	SHORT $LN23@handle_dir
$LN22@handle_dir:
	mov	rax, QWORD PTR title$[rsp]
	mov	QWORD PTR tv188[rsp], rax
$LN23@handle_dir:
	cmp	QWORD PTR esc$[rsp], 0
	je	SHORT $LN24@handle_dir
	mov	rax, QWORD PTR esc$[rsp]
	mov	QWORD PTR tv191[rsp], rax
	jmp	SHORT $LN25@handle_dir
$LN24@handle_dir:
	mov	rax, QWORD PTR title$[rsp]
	mov	QWORD PTR tv191[rsp], rax
$LN25@handle_dir:
	mov	eax, DWORD PTR sort_direction$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sort_direction$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR tv196[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv188[rsp]
	mov	r8, QWORD PTR tv191[rsp]
	lea	rdx, OFFSET FLAT:$SG164939
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 9962
	mov	rcx, QWORD PTR esc$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9965
	lea	rax, OFFSET FLAT:$SG164940
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164941
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG164942
	lea	r8, OFFSET FLAT:$SG164943
	lea	rdx, OFFSET FLAT:$SG164944
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 9974
	cmp	QWORD PTR data$[rsp], 0
	je	$LN18@handle_dir
; Line 9975
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:?compare_dir_entries@@YAHPEBX0PEAX@Z ; compare_dir_entries
	mov	r8d, 40					; 00000028H
	mov	rdx, QWORD PTR data$[rsp+8]
	mov	rcx, QWORD PTR data$[rsp]
	call	?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z	; mg_sort
; Line 9980
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@handle_dir
$LN5@handle_dir:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN7@handle_dir:
	mov	rax, QWORD PTR data$[rsp+8]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN6@handle_dir
; Line 9981
	imul	rax, QWORD PTR i$[rsp], 40		; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z ; print_dir_entry
; Line 9982
	imul	rax, QWORD PTR i$[rsp], 40		; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9983
	jmp	SHORT $LN5@handle_dir
$LN6@handle_dir:
; Line 9984
	mov	rcx, QWORD PTR data$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN18@handle_dir:
; Line 9987
	lea	r8, OFFSET FLAT:$SG164946
	lea	rdx, OFFSET FLAT:$SG164947
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 9988
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2448], 200		; 000000c8H
$LN1@handle_dir:
; Line 9989
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	ret	0
?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z ENDP ; handle_directory_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dsd$ = 32
entries$ = 40
tv88 = 48
de$ = 96
data$ = 104
?dir_scan_callback@@YAHPEAUde@@PEAX@Z PROC		; dir_scan_callback
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9853
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 9854
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR dsd$[rsp], rax
; Line 9855
	mov	rax, QWORD PTR dsd$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR entries$[rsp], rax
; Line 9857
	cmp	QWORD PTR entries$[rsp], 0
	je	SHORT $LN3@dir_scan_c
	mov	rax, QWORD PTR dsd$[rsp]
	mov	rcx, QWORD PTR dsd$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+8], rcx
	jb	SHORT $LN2@dir_scan_c
$LN3@dir_scan_c:
; Line 9860
	mov	rax, QWORD PTR dsd$[rsp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 1
	imul	rax, rax, 40				; 00000028H
	mov	rdx, rax
	mov	rcx, QWORD PTR entries$[rsp]
	call	?mg_realloc@@YAPEAXPEAX_K@Z		; mg_realloc
	mov	QWORD PTR entries$[rsp], rax
; Line 9863
	cmp	QWORD PTR entries$[rsp], 0
	jne	SHORT $LN4@dir_scan_c
; Line 9865
	mov	eax, 1
	jmp	$LN1@dir_scan_c
$LN4@dir_scan_c:
; Line 9867
	mov	rax, QWORD PTR dsd$[rsp]
	mov	rcx, QWORD PTR entries$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 9868
	mov	rax, QWORD PTR dsd$[rsp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 1
	mov	rcx, QWORD PTR dsd$[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN2@dir_scan_c:
; Line 9870
	mov	rax, QWORD PTR de$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_strdup@@YAPEADPEBD@Z		; mg_strdup
	mov	QWORD PTR tv88[rsp], rax
	mov	rax, QWORD PTR dsd$[rsp]
	imul	rax, QWORD PTR [rax+8], 40		; 00000028H
	mov	rcx, QWORD PTR entries$[rsp]
	mov	rdx, QWORD PTR tv88[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 9871
	mov	rax, QWORD PTR dsd$[rsp]
	imul	rax, QWORD PTR [rax+8], 40		; 00000028H
	mov	rcx, QWORD PTR entries$[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN5@dir_scan_c
; Line 9873
	mov	eax, 1
	jmp	SHORT $LN1@dir_scan_c
$LN5@dir_scan_c:
; Line 9875
	mov	rax, QWORD PTR dsd$[rsp]
	imul	rax, QWORD PTR [rax+8], 40		; 00000028H
	mov	rcx, QWORD PTR entries$[rsp]
	mov	rdx, QWORD PTR de$[rsp]
	lea	rdi, QWORD PTR [rcx+rax+8]
	lea	rsi, QWORD PTR [rdx+8]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 9876
	mov	rax, QWORD PTR dsd$[rsp]
	mov	rax, QWORD PTR [rax+8]
	inc	rax
	mov	rcx, QWORD PTR dsd$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 9878
	xor	eax, eax
$LN1@dir_scan_c:
; Line 9879
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?dir_scan_callback@@YAHPEAUde@@PEAX@Z ENDP		; dir_scan_callback
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ok$ = 64
dp$ = 72
truncated$ = 80
dirp$ = 88
de$ = 96
path$ = 144
__$ArrayPad$ = 928
conn$ = 960
dir$ = 968
?remove_directory@@YAHPEAUmg_connection@@PEBD@Z PROC	; remove_directory
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9778
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 952				; 000003b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9784
	mov	DWORD PTR ok$[rsp], 1
; Line 9786
	mov	rdx, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z ; mg_opendir
	mov	QWORD PTR dirp$[rsp], rax
	cmp	QWORD PTR dirp$[rsp], 0
	jne	SHORT $LN4@remove_dir
; Line 9787
	xor	eax, eax
	jmp	$LN1@remove_dir
; Line 9788
	jmp	$LN5@remove_dir
$LN4@remove_dir:
$LN17@remove_dir:
$LN16@remove_dir:
$LN2@remove_dir:
; Line 9790
	mov	rcx, QWORD PTR dirp$[rsp]
	call	?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z	; mg_readdir
	mov	QWORD PTR dp$[rsp], rax
	cmp	QWORD PTR dp$[rsp], 0
	je	$LN3@remove_dir
; Line 9793
	mov	rax, QWORD PTR dp$[rsp]
	lea	rdx, OFFSET FLAT:$SG164862
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	je	SHORT $LN7@remove_dir
	mov	rax, QWORD PTR dp$[rsp]
	lea	rdx, OFFSET FLAT:$SG164863
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	SHORT $LN6@remove_dir
$LN7@remove_dir:
; Line 9794
	jmp	SHORT $LN2@remove_dir
$LN6@remove_dir:
; Line 9797
	mov	rax, QWORD PTR dp$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR dir$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164864
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 9805
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR de$[rsp+8]
	call	memset
; Line 9807
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN8@remove_dir
; Line 9809
	mov	DWORD PTR ok$[rsp], 0
; Line 9810
	jmp	$LN16@remove_dir
$LN8@remove_dir:
; Line 9813
	lea	r8, QWORD PTR de$[rsp+8]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	jne	SHORT $LN9@remove_dir
; Line 9814
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164867
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164868
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 9818				; 0000265aH
	lea	r8, OFFSET FLAT:$SG164869
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 9819
	mov	DWORD PTR ok$[rsp], 0
$LN9@remove_dir:
; Line 9822
	cmp	DWORD PTR de$[rsp+24], 0
	je	SHORT $LN10@remove_dir
; Line 9823
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_directory@@YAHPEAUmg_connection@@PEBD@Z ; remove_directory
	test	eax, eax
	jne	SHORT $LN12@remove_dir
; Line 9824
	mov	DWORD PTR ok$[rsp], 0
$LN12@remove_dir:
; Line 9826
	jmp	SHORT $LN11@remove_dir
$LN10@remove_dir:
; Line 9828
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_remove@@YAHPEBUmg_connection@@PEBD@Z ; mg_remove
	test	eax, eax
	jne	SHORT $LN13@remove_dir
; Line 9829
	mov	DWORD PTR ok$[rsp], 0
$LN13@remove_dir:
$LN11@remove_dir:
; Line 9832
	jmp	$LN17@remove_dir
$LN3@remove_dir:
; Line 9833
	mov	rcx, QWORD PTR dirp$[rsp]
	call	?mg_closedir@@YAHPEAUDIR@@@Z		; mg_closedir
; Line 9835
	mov	rcx, QWORD PTR dir$[rsp]
	call	_rmdir
	test	eax, eax
	je	SHORT $LN15@remove_dir
	xor	eax, eax
$LN15@remove_dir:
$LN5@remove_dir:
; Line 9838
	mov	eax, DWORD PTR ok$[rsp]
$LN1@remove_dir:
; Line 9839
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 952				; 000003b8H
	ret	0
?remove_directory@@YAHPEAUmg_connection@@PEBD@Z ENDP	; remove_directory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dp$ = 64
truncated$ = 72
dirp$ = 80
tv151 = 88
de$ = 96
path$ = 144
__$ArrayPad$ = 928
conn$ = 960
dir$ = 968
data$ = 976
cb$ = 984
?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z PROC ; scan_directory
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9722
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 952				; 000003b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9729
	mov	rdx, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z ; mg_opendir
	mov	QWORD PTR dirp$[rsp], rax
	cmp	QWORD PTR dirp$[rsp], 0
	jne	SHORT $LN4@scan_direc
; Line 9730
	xor	eax, eax
	jmp	$LN1@scan_direc
; Line 9731
	jmp	$LN5@scan_direc
$LN4@scan_direc:
$LN13@scan_direc:
$LN12@scan_direc:
$LN2@scan_direc:
; Line 9733
	mov	rcx, QWORD PTR dirp$[rsp]
	call	?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z	; mg_readdir
	mov	QWORD PTR dp$[rsp], rax
	cmp	QWORD PTR dp$[rsp], 0
	je	$LN3@scan_direc
; Line 9736
	mov	rax, QWORD PTR dp$[rsp]
	lea	rdx, OFFSET FLAT:$SG164834
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	je	SHORT $LN7@scan_direc
	mov	rax, QWORD PTR dp$[rsp]
	lea	rdx, OFFSET FLAT:$SG164835
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	je	SHORT $LN7@scan_direc
	mov	rax, QWORD PTR dp$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z ; must_hide_file
	test	eax, eax
	je	SHORT $LN6@scan_direc
$LN7@scan_direc:
; Line 9737
	jmp	SHORT $LN2@scan_direc
$LN6@scan_direc:
; Line 9740
	mov	rax, QWORD PTR dp$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR dir$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164836
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 9748
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR de$[rsp+8]
	call	memset
; Line 9750
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN8@scan_direc
; Line 9752
	jmp	$LN12@scan_direc
$LN8@scan_direc:
; Line 9755
	lea	r8, QWORD PTR de$[rsp+8]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	jne	SHORT $LN9@scan_direc
; Line 9756
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164839
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164840
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 9760				; 00002620H
	lea	r8, OFFSET FLAT:$SG164841
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN9@scan_direc:
; Line 9762
	mov	rax, QWORD PTR dp$[rsp]
	mov	QWORD PTR de$[rsp], rax
; Line 9763
	mov	rax, QWORD PTR cb$[rsp]
	mov	QWORD PTR tv151[rsp], rax
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR de$[rsp]
	call	QWORD PTR tv151[rsp]
	test	eax, eax
	je	SHORT $LN10@scan_direc
; Line 9765
	jmp	SHORT $LN3@scan_direc
$LN10@scan_direc:
; Line 9767
	jmp	$LN13@scan_direc
$LN3@scan_direc:
; Line 9768
	mov	rcx, QWORD PTR dirp$[rsp]
	call	?mg_closedir@@YAHPEAUDIR@@@Z		; mg_closedir
$LN5@scan_direc:
; Line 9770
	mov	eax, 1
$LN1@scan_direc:
; Line 9771
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 952				; 000003b8H
	ret	0
?scan_directory@@YAHPEAUmg_connection@@PEBDPEAXP6AHPEAUde@@2@Z@Z ENDP ; scan_directory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
pw_pattern$1 = 40
pattern$2 = 48
conn$ = 80
path$ = 88
?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z PROC	; must_hide_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9705
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9706
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@must_hide_
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	SHORT $LN2@must_hide_
; Line 9707
	lea	rax, OFFSET FLAT:$SG164812
	mov	QWORD PTR pw_pattern$1[rsp], rax
; Line 9708
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 44				; 0000002cH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR pattern$2[rsp], rax
; Line 9709
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR pw_pattern$1[rsp]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jg	SHORT $LN4@must_hide_
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR pattern$2[rsp]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jg	SHORT $LN4@must_hide_
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN5@must_hide_
$LN4@must_hide_:
	mov	DWORD PTR tv79[rsp], 1
$LN5@must_hide_:
	mov	eax, DWORD PTR tv79[rsp]
	jmp	SHORT $LN1@must_hide_
$LN2@must_hide_:
; Line 9712
	xor	eax, eax
$LN1@must_hide_:
; Line 9713
	add	rsp, 72					; 00000048H
	ret	0
?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z ENDP	; must_hide_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmp_result$1 = 32
b$2 = 40
a$3 = 48
query_string$ = 56
tv129 = 64
tv130 = 68
tv143 = 72
tv144 = 76
tv156 = 80
tv65 = 88
p1$ = 112
p2$ = 120
arg$ = 128
?compare_dir_entries@@YAHPEBX0PEAX@Z PROC		; compare_dir_entries
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9658
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 9659
	cmp	QWORD PTR arg$[rsp], 0
	je	SHORT $LN13@compare_di
	mov	rax, QWORD PTR arg$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN14@compare_di
$LN13@compare_di:
	lea	rax, OFFSET FLAT:$SG164793
	mov	QWORD PTR tv65[rsp], rax
$LN14@compare_di:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR query_string$[rsp], rax
; Line 9660
	cmp	QWORD PTR p1$[rsp], 0
	je	$LN2@compare_di
	cmp	QWORD PTR p2$[rsp], 0
	je	$LN2@compare_di
; Line 9661
	mov	rax, QWORD PTR p1$[rsp]
	mov	QWORD PTR a$3[rsp], rax
	mov	rax, QWORD PTR p2$[rsp]
	mov	QWORD PTR b$2[rsp], rax
; Line 9662
	mov	DWORD PTR cmp_result$1[rsp], 0
; Line 9664
	cmp	QWORD PTR query_string$[rsp], 0
	je	SHORT $LN4@compare_di
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR query_string$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN3@compare_di
$LN4@compare_di:
; Line 9665
	lea	rax, OFFSET FLAT:$SG164797
	mov	QWORD PTR query_string$[rsp], rax
$LN3@compare_di:
; Line 9669
	mov	rax, QWORD PTR a$3[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN5@compare_di
	mov	rax, QWORD PTR b$2[rsp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN5@compare_di
; Line 9670
	mov	eax, -1
	jmp	$LN1@compare_di
	jmp	SHORT $LN6@compare_di
$LN5@compare_di:
; Line 9671
	mov	rax, QWORD PTR a$3[rsp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN7@compare_di
	mov	rax, QWORD PTR b$2[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN7@compare_di
; Line 9672
	mov	eax, 1
	jmp	$LN1@compare_di
$LN7@compare_di:
$LN6@compare_di:
; Line 9676
	mov	rax, QWORD PTR query_string$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN8@compare_di
; Line 9677
	mov	rax, QWORD PTR a$3[rsp]
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN17@compare_di
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN18@compare_di
$LN17@compare_di:
	mov	rax, QWORD PTR a$3[rsp]
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax+8], rcx
	jbe	SHORT $LN15@compare_di
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN16@compare_di
$LN15@compare_di:
	mov	DWORD PTR tv129[rsp], -1
$LN16@compare_di:
	mov	eax, DWORD PTR tv129[rsp]
	mov	DWORD PTR tv130[rsp], eax
$LN18@compare_di:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR cmp_result$1[rsp], eax
	jmp	SHORT $LN9@compare_di
$LN8@compare_di:
; Line 9680
	mov	rax, QWORD PTR query_string$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 100				; 00000064H
	jne	SHORT $LN10@compare_di
; Line 9681
	mov	rax, QWORD PTR a$3[rsp]
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jne	SHORT $LN21@compare_di
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN22@compare_di
$LN21@compare_di:
	mov	rax, QWORD PTR a$3[rsp]
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jle	SHORT $LN19@compare_di
	mov	DWORD PTR tv143[rsp], 1
	jmp	SHORT $LN20@compare_di
$LN19@compare_di:
	mov	DWORD PTR tv143[rsp], -1
$LN20@compare_di:
	mov	eax, DWORD PTR tv143[rsp]
	mov	DWORD PTR tv144[rsp], eax
$LN22@compare_di:
	mov	eax, DWORD PTR tv144[rsp]
	mov	DWORD PTR cmp_result$1[rsp], eax
$LN10@compare_di:
$LN9@compare_di:
; Line 9692
	cmp	DWORD PTR cmp_result$1[rsp], 0
	jne	SHORT $LN11@compare_di
; Line 9693
	mov	rax, QWORD PTR b$2[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR a$3[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	mov	DWORD PTR cmp_result$1[rsp], eax
$LN11@compare_di:
; Line 9697
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR query_string$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 100				; 00000064H
	jne	SHORT $LN23@compare_di
	mov	eax, DWORD PTR cmp_result$1[rsp]
	neg	eax
	mov	DWORD PTR tv156[rsp], eax
	jmp	SHORT $LN24@compare_di
$LN23@compare_di:
	mov	eax, DWORD PTR cmp_result$1[rsp]
	mov	DWORD PTR tv156[rsp], eax
$LN24@compare_di:
	mov	eax, DWORD PTR tv156[rsp]
	jmp	SHORT $LN1@compare_di
$LN2@compare_di:
; Line 9699
	xor	eax, eax
$LN1@compare_di:
; Line 9700
	add	rsp, 104				; 00000068H
	ret	0
?compare_dir_entries@@YAHPEBX0PEAX@Z ENDP		; compare_dir_entries
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 64
href$ = 72
namesize$ = 80
i$ = 88
esc$ = 96
tv82 = 104
escsize$ = 112
tm$ = 120
tv228 = 128
tv232 = 136
tv237 = 144
tv75 = 152
tv77 = 160
size$ = 176
mod$ = 240
__$ArrayPad$ = 304
conn$ = 336
de$ = 344
?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z PROC	; print_dir_entry
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9551
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9563
	mov	rax, QWORD PTR de$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strlen
	inc	rax
	mov	QWORD PTR namesize$[rsp], rax
; Line 9564
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv77[rsp], rax
	lea	rdx, OFFSET FLAT:$SG164747
	mov	rax, QWORD PTR de$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcspn
	mov	QWORD PTR tv75[rsp], rax
	mov	rax, QWORD PTR tv75[rsp]
	mov	rcx, QWORD PTR tv77[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN23@print_dir_
	imul	rax, QWORD PTR namesize$[rsp], 5
	mov	QWORD PTR tv82[rsp], rax
	jmp	SHORT $LN24@print_dir_
$LN23@print_dir_:
	mov	QWORD PTR tv82[rsp], 0
$LN24@print_dir_:
	mov	rax, QWORD PTR tv82[rsp]
	mov	QWORD PTR escsize$[rsp], rax
; Line 9565
	imul	rax, QWORD PTR namesize$[rsp], 3
	add	rax, QWORD PTR escsize$[rsp]
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR href$[rsp], rax
; Line 9566
	cmp	QWORD PTR href$[rsp], 0
	jne	SHORT $LN5@print_dir_
; Line 9567
	mov	eax, -1
	jmp	$LN1@print_dir_
$LN5@print_dir_:
; Line 9569
	imul	rax, QWORD PTR namesize$[rsp], 3
	mov	r8, rax
	mov	rdx, QWORD PTR href$[rsp]
	mov	rax, QWORD PTR de$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	mg_url_encode
; Line 9570
	mov	QWORD PTR esc$[rsp], 0
; Line 9571
	cmp	QWORD PTR escsize$[rsp], 0
	jbe	$LN6@print_dir_
; Line 9573
	imul	rax, QWORD PTR namesize$[rsp], 3
	mov	rcx, QWORD PTR href$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR esc$[rsp], rax
; Line 9574
	mov	QWORD PTR i$[rsp], 0
	mov	rax, QWORD PTR esc$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@print_dir_
$LN2@print_dir_:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
$LN4@print_dir_:
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR i$[rsp]
	movsx	eax, BYTE PTR [rax+rcx]
	test	eax, eax
	je	$LN3@print_dir_
; Line 9575
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR i$[rsp]
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR p$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 9576
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN7@print_dir_
; Line 9577
	lea	rdx, OFFSET FLAT:$SG164752
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
	jmp	SHORT $LN8@print_dir_
$LN7@print_dir_:
; Line 9578
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN9@print_dir_
; Line 9579
	lea	rdx, OFFSET FLAT:$SG164755
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
	jmp	SHORT $LN10@print_dir_
$LN9@print_dir_:
; Line 9580
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN11@print_dir_
; Line 9581
	lea	rdx, OFFSET FLAT:$SG164757
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
$LN11@print_dir_:
$LN10@print_dir_:
$LN8@print_dir_:
; Line 9583
	jmp	$LN2@print_dir_
$LN3@print_dir_:
$LN6@print_dir_:
; Line 9586
	mov	rax, QWORD PTR de$[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN12@print_dir_
; Line 9587
	lea	rax, OFFSET FLAT:$SG164760
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164761
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 9593
	jmp	$LN13@print_dir_
$LN12@print_dir_:
; Line 9596
	mov	rax, QWORD PTR de$[rsp]
	cmp	QWORD PTR [rax+8], 1024			; 00000400H
	jae	SHORT $LN14@print_dir_
; Line 9597
	mov	rax, QWORD PTR de$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG164764
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
	jmp	$LN15@print_dir_
$LN14@print_dir_:
; Line 9603
	mov	rax, QWORD PTR de$[rsp]
	cmp	QWORD PTR [rax+8], 1048576		; 00100000H
	jae	SHORT $LN16@print_dir_
; Line 9604
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax+8]
	test	rax, rax
	jl	SHORT $LN35@print_dir_
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN36@print_dir_
$LN35@print_dir_:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN36@print_dir_:
	divsd	xmm0, QWORD PTR __real@4090000000000000
	movsd	QWORD PTR [rsp+40], xmm0
	lea	rax, OFFSET FLAT:$SG164767
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
	jmp	$LN17@print_dir_
$LN16@print_dir_:
; Line 9610
	mov	rax, QWORD PTR de$[rsp]
	cmp	QWORD PTR [rax+8], 1073741824		; 40000000H
	jae	SHORT $LN18@print_dir_
; Line 9611
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax+8]
	test	rax, rax
	jl	SHORT $LN33@print_dir_
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN34@print_dir_
$LN33@print_dir_:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN34@print_dir_:
	divsd	xmm0, QWORD PTR __real@4130000000000000
	movsd	QWORD PTR [rsp+40], xmm0
	lea	rax, OFFSET FLAT:$SG164770
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 9617
	jmp	SHORT $LN19@print_dir_
$LN18@print_dir_:
; Line 9618
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax+8]
	test	rax, rax
	jl	SHORT $LN31@print_dir_
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN32@print_dir_
$LN31@print_dir_:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN32@print_dir_:
	divsd	xmm0, QWORD PTR __real@41d0000000000000
	movsd	QWORD PTR [rsp+40], xmm0
	lea	rax, OFFSET FLAT:$SG164771
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN19@print_dir_:
$LN17@print_dir_:
$LN15@print_dir_:
$LN13@print_dir_:
; Line 9633
	mov	rax, QWORD PTR de$[rsp]
	add	rax, 16
	mov	rcx, rax
	call	localtime
	mov	QWORD PTR tm$[rsp], rax
; Line 9635
	cmp	QWORD PTR tm$[rsp], 0
	je	SHORT $LN20@print_dir_
; Line 9636
	mov	r9, QWORD PTR tm$[rsp]
	lea	r8, OFFSET FLAT:$SG164774
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR mod$[rsp]
	call	strftime
; Line 9637
	jmp	SHORT $LN21@print_dir_
$LN20@print_dir_:
; Line 9638
	mov	r8d, 64					; 00000040H
	lea	rdx, OFFSET FLAT:$SG164775
	lea	rcx, QWORD PTR mod$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
$LN21@print_dir_:
; Line 9640
	mov	rax, QWORD PTR de$[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN25@print_dir_
	lea	rax, OFFSET FLAT:$SG164776
	mov	QWORD PTR tv228[rsp], rax
	jmp	SHORT $LN26@print_dir_
$LN25@print_dir_:
	lea	rax, OFFSET FLAT:$SG164777
	mov	QWORD PTR tv228[rsp], rax
$LN26@print_dir_:
	cmp	QWORD PTR esc$[rsp], 0
	je	SHORT $LN27@print_dir_
	mov	rax, QWORD PTR esc$[rsp]
	mov	QWORD PTR tv232[rsp], rax
	jmp	SHORT $LN28@print_dir_
$LN27@print_dir_:
	mov	rax, QWORD PTR de$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv232[rsp], rax
$LN28@print_dir_:
	mov	rax, QWORD PTR de$[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN29@print_dir_
	lea	rax, OFFSET FLAT:$SG164778
	mov	QWORD PTR tv237[rsp], rax
	jmp	SHORT $LN30@print_dir_
$LN29@print_dir_:
	lea	rax, OFFSET FLAT:$SG164779
	mov	QWORD PTR tv237[rsp], rax
$LN30@print_dir_:
	lea	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR mod$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv228[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv232[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv237[rsp]
	mov	r8, QWORD PTR href$[rsp]
	lea	rdx, OFFSET FLAT:$SG164780
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 9649
	mov	rcx, QWORD PTR href$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9650
	xor	eax, eax
$LN1@print_dir_:
; Line 9651
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
?print_dir_entry@@YAHPEAUmg_connection@@PEAUde@@@Z ENDP	; print_dir_entry
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn_ret$ = 64
sockerr$ = 68
ip_ver$ = 72
nonstop$1 = 76
ms_wait$2 = 80
pollres$3 = 84
len$4 = 88
ret$5 = 92
tv236 = 96
tv186 = 104
tv188 = 112
tv184 = 120
tv210 = 128
tv212 = 136
tv208 = 144
psockerr$6 = 152
tv282 = 160
tv284 = 168
tv280 = 176
pfd$7 = 184
__$ArrayPad$ = 200
ctx$ = 224
host$ = 232
port$ = 240
use_ssl$ = 248
error$ = 256
sock$ = 264
sa$ = 272
?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z PROC ; connect_socket
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9237
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9238
	mov	DWORD PTR ip_ver$[rsp], 0
; Line 9239
	mov	DWORD PTR conn_ret$[rsp], -1
; Line 9240
	mov	DWORD PTR sockerr$[rsp], 0
; Line 9241
	mov	rax, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rax], -1
; Line 9242
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR sa$[rsp]
	call	memset
; Line 9244
	cmp	QWORD PTR host$[rsp], 0
	jne	SHORT $LN2@connect_so
; Line 9245
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN3@connect_so
; Line 9246
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 1
; Line 9247
	lea	rax, OFFSET FLAT:$SG164668
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164669
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN3@connect_so:
; Line 9254
	xor	eax, eax
	jmp	$LN1@connect_so
$LN2@connect_so:
; Line 9275
	cmp	DWORD PTR port$[rsp], 0
	jle	SHORT $LN5@connect_so
	mov	ecx, DWORD PTR port$[rsp]
	call	?is_valid_port@@YAHK@Z			; is_valid_port
	test	eax, eax
	jne	SHORT $LN4@connect_so
$LN5@connect_so:
; Line 9276
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN6@connect_so
; Line 9277
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 1
; Line 9278
	lea	rax, OFFSET FLAT:$SG164673
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164674
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN6@connect_so:
; Line 9285
	xor	eax, eax
	jmp	$LN1@connect_so
$LN4@connect_so:
; Line 9303
	cmp	DWORD PTR use_ssl$[rsp], 0
	je	SHORT $LN7@connect_so
	mov	eax, 24
	imul	rax, rax, 17
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	cmp	QWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN7@connect_so
; Line 9304
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN8@connect_so
; Line 9305
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 8
; Line 9306
	lea	rax, OFFSET FLAT:$SG164677
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164678
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN8@connect_so:
; Line 9313
	xor	eax, eax
	jmp	$LN1@connect_so
$LN7@connect_so:
; Line 9330
	mov	rax, QWORD PTR sa$[rsp]
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 16
	mov	r8, rax
	mov	rdx, QWORD PTR host$[rsp]
	mov	ecx, 2
	call	?mg_inet_pton@@YAHHPEBDPEAX_KH@Z	; mg_inet_pton
	test	eax, eax
	je	SHORT $LN9@connect_so
; Line 9331
	movzx	ecx, WORD PTR port$[rsp]
	call	QWORD PTR __imp_htons
	mov	rcx, QWORD PTR sa$[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 9332
	mov	DWORD PTR ip_ver$[rsp], 4
$LN9@connect_so:
; Line 9353
	cmp	DWORD PTR ip_ver$[rsp], 0
	jne	SHORT $LN10@connect_so
; Line 9354
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN11@connect_so
; Line 9355
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 15
; Line 9356
	lea	rax, OFFSET FLAT:$SG164682
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164683
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN11@connect_so:
; Line 9363
	xor	eax, eax
	jmp	$LN1@connect_so
$LN10@connect_so:
; Line 9366
	cmp	DWORD PTR ip_ver$[rsp], 4
	jne	SHORT $LN12@connect_so
; Line 9367
	xor	r8d, r8d
	mov	edx, 1
	mov	ecx, 2
	call	QWORD PTR __imp_socket
	mov	rcx, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rcx], rax
$LN12@connect_so:
; Line 9380
	mov	rax, QWORD PTR sock$[rsp]
	cmp	QWORD PTR [rax], -1
	jne	$LN13@connect_so
; Line 9381
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN14@connect_so
; Line 9382
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 9
; Line 9383
	call	QWORD PTR __imp_GetLastError
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 9384
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR tv186[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv188[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv184[rsp], rax
	mov	rax, QWORD PTR tv186[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164687
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv188[rsp]
	mov	r8, QWORD PTR tv184[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN14@connect_so:
; Line 9391
	xor	eax, eax
	jmp	$LN1@connect_so
$LN13@connect_so:
; Line 9394
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?set_non_blocking_mode@@YAH_K@Z		; set_non_blocking_mode
	test	eax, eax
	je	$LN15@connect_so
; Line 9395
	cmp	QWORD PTR error$[rsp], 0
	je	$LN16@connect_so
; Line 9396
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 9
; Line 9397
	call	QWORD PTR __imp_GetLastError
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 9398
	call	QWORD PTR __imp_GetLastError
	mov	ecx, eax
	call	strerror
	mov	QWORD PTR tv210[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv212[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv208[rsp], rax
	mov	rax, QWORD PTR tv210[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164690
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv212[rsp]
	mov	r8, QWORD PTR tv208[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN16@connect_so:
; Line 9405
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_closesocket
; Line 9406
	mov	rax, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rax], -1
; Line 9407
	xor	eax, eax
	jmp	$LN1@connect_so
$LN15@connect_so:
; Line 9410
	mov	r8, QWORD PTR ctx$[rsp]
	xor	edx, edx
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z ; set_close_on_exec
; Line 9412
	cmp	DWORD PTR ip_ver$[rsp], 4
	jne	SHORT $LN17@connect_so
; Line 9414
	mov	rax, QWORD PTR sa$[rsp]
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_connect
	mov	DWORD PTR conn_ret$[rsp], eax
$LN17@connect_so:
; Line 9435
	cmp	DWORD PTR conn_ret$[rsp], 0
	je	SHORT $LN18@connect_so
; Line 9436
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR sockerr$[rsp], eax
$LN18@connect_so:
; Line 9440
	cmp	DWORD PTR conn_ret$[rsp], 0
	je	$LN19@connect_so
	cmp	DWORD PTR sockerr$[rsp], 10035		; 00002733H
	jne	$LN19@connect_so
; Line 9445
	lea	rax, QWORD PTR sockerr$[rsp]
	mov	QWORD PTR psockerr$6[rsp], rax
; Line 9449
	mov	DWORD PTR len$4[rsp], 4
; Line 9457
	mov	DWORD PTR ms_wait$2[rsp], 10000		; 00002710H
; Line 9459
	mov	DWORD PTR nonstop$1[rsp], 0
; Line 9466
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR pfd$7[rsp+rax], rcx
; Line 9467
	mov	eax, 16
	imul	rax, rax, 0
	mov	ecx, 4
	mov	WORD PTR pfd$7[rsp+rax+8], cx
; Line 9468
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN26@connect_so
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv236[rsp], rax
	jmp	SHORT $LN27@connect_so
$LN26@connect_so:
	lea	rax, QWORD PTR nonstop$1[rsp]
	mov	QWORD PTR tv236[rsp], rax
$LN27@connect_so:
	mov	r9, QWORD PTR tv236[rsp]
	mov	r8d, DWORD PTR ms_wait$2[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR pfd$7[rsp]
	call	?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z	; mg_poll
	mov	DWORD PTR pollres$3[rsp], eax
; Line 9470
	cmp	DWORD PTR pollres$3[rsp], 1
	je	$LN20@connect_so
; Line 9472
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN21@connect_so
; Line 9473
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 16
; Line 9474
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164696
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN21@connect_so:
; Line 9482
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_closesocket
; Line 9483
	mov	rax, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rax], -1
; Line 9484
	xor	eax, eax
	jmp	$LN1@connect_so
$LN20@connect_so:
; Line 9488
	lea	rax, QWORD PTR len$4[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR psockerr$6[rsp]
	mov	r8d, 4103				; 00001007H
	mov	edx, 65535				; 0000ffffH
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_getsockopt
	mov	DWORD PTR ret$5[rsp], eax
; Line 9493
	cmp	DWORD PTR ret$5[rsp], 0
	jne	SHORT $LN22@connect_so
	cmp	DWORD PTR sockerr$[rsp], 0
	jne	SHORT $LN22@connect_so
; Line 9494
	mov	DWORD PTR conn_ret$[rsp], 0
$LN22@connect_so:
$LN19@connect_so:
; Line 9498
	cmp	DWORD PTR conn_ret$[rsp], 0
	je	$LN23@connect_so
; Line 9500
	cmp	QWORD PTR error$[rsp], 0
	je	$LN24@connect_so
; Line 9501
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 17
; Line 9502
	call	QWORD PTR __imp_GetLastError
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 9503
	mov	ecx, DWORD PTR sockerr$[rsp]
	call	strerror
	mov	QWORD PTR tv282[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv284[rsp], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv280[rsp], rax
	mov	rax, QWORD PTR tv282[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164700
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv284[rsp]
	mov	r8, QWORD PTR tv280[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN24@connect_so:
; Line 9512
	mov	rax, QWORD PTR sock$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_closesocket
; Line 9513
	mov	rax, QWORD PTR sock$[rsp]
	mov	QWORD PTR [rax], -1
; Line 9514
	xor	eax, eax
	jmp	SHORT $LN1@connect_so
$LN23@connect_so:
; Line 9517
	mov	eax, 1
$LN1@connect_so:
; Line 9518
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?connect_socket@@YAHPEAUmg_context@@PEBDHHPEAUmg_error_data@@PEA_KPEATusa@@@Z ENDP ; connect_socket
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
func_ret$ = 32
gai_ret$ = 36
res$ = 40
ressave$ = 48
hints$ = 56
af$ = 128
src$ = 136
dst$ = 144
dstlen$ = 152
resolve_src$ = 160
?mg_inet_pton@@YAHHPEBDPEAX_KH@Z PROC			; mg_inet_pton
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9188
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 120				; 00000078H
; Line 9190
	mov	DWORD PTR func_ret$[rsp], 0
; Line 9193
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	lea	rcx, QWORD PTR hints$[rsp]
	call	memset
; Line 9194
	mov	eax, DWORD PTR af$[rsp]
	mov	DWORD PTR hints$[rsp+4], eax
; Line 9195
	cmp	DWORD PTR resolve_src$[rsp], 0
	jne	SHORT $LN4@mg_inet_pt
; Line 9196
	mov	DWORD PTR hints$[rsp], 4
$LN4@mg_inet_pt:
; Line 9199
	lea	r9, QWORD PTR res$[rsp]
	lea	r8, QWORD PTR hints$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR src$[rsp]
	call	QWORD PTR __imp_getaddrinfo
	mov	DWORD PTR gai_ret$[rsp], eax
; Line 9200
	cmp	DWORD PTR gai_ret$[rsp], 0
	je	SHORT $LN5@mg_inet_pt
; Line 9208
	xor	eax, eax
	jmp	$LN1@mg_inet_pt
$LN5@mg_inet_pt:
; Line 9211
	mov	rax, QWORD PTR res$[rsp]
	mov	QWORD PTR ressave$[rsp], rax
$LN2@mg_inet_pt:
; Line 9213
	cmp	QWORD PTR res$[rsp], 0
	je	SHORT $LN3@mg_inet_pt
; Line 9215
	mov	rax, QWORD PTR res$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cmp	QWORD PTR dstlen$[rsp], rax
	jb	SHORT $LN6@mg_inet_pt
	mov	rax, QWORD PTR res$[rsp]
	mov	rax, QWORD PTR [rax+32]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR af$[rsp]
	jne	SHORT $LN6@mg_inet_pt
; Line 9216
	mov	rax, QWORD PTR res$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR res$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR dst$[rsp]
	call	memcpy
; Line 9217
	mov	DWORD PTR func_ret$[rsp], 1
$LN6@mg_inet_pt:
; Line 9219
	mov	rax, QWORD PTR res$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR res$[rsp], rax
; Line 9220
	jmp	SHORT $LN2@mg_inet_pt
$LN3@mg_inet_pt:
; Line 9222
	mov	rcx, QWORD PTR ressave$[rsp]
	call	QWORD PTR __imp_freeaddrinfo
; Line 9223
	mov	eax, DWORD PTR func_ret$[rsp]
$LN1@mg_inet_pt:
; Line 9224
	add	rsp, 120				; 00000078H
	ret	0
?mg_inet_pton@@YAHHPEBDPEAX_KH@Z ENDP			; mg_inet_pton
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
port$ = 32
?is_valid_port@@YAHK@Z PROC				; is_valid_port
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9181
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 9182
	cmp	DWORD PTR port$[rsp], 65535		; 0000ffffH
	ja	SHORT $LN3@is_valid_p
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@is_valid_p
$LN3@is_valid_p:
	mov	DWORD PTR tv65[rsp], 0
$LN4@is_valid_p:
	mov	eax, DWORD PTR tv65[rsp]
; Line 9183
	add	rsp, 24
	ret	0
?is_valid_port@@YAHK@Z ENDP				; is_valid_port
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 32
passfile$1 = 40
file$2 = 48
__$ArrayPad$ = 88
conn$ = 112
?is_authorized_for_put@@YAHPEAUmg_connection@@@Z PROC	; is_authorized_for_put
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8984
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8985
	mov	DWORD PTR ret$[rsp], 0
; Line 8987
	cmp	QWORD PTR conn$[rsp], 0
	je	$LN5@is_authori
; Line 8988
	mov	QWORD PTR file$2[rsp], 0
	mov	QWORD PTR file$2[rsp+8], 0
	mov	DWORD PTR file$2[rsp+16], 0
	mov	DWORD PTR file$2[rsp+20], 0
	mov	DWORD PTR file$2[rsp+24], 0
	mov	QWORD PTR file$2[rsp+32], 0
; Line 8989
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR passfile$1[rsp], rax
; Line 8992
	cmp	QWORD PTR passfile$1[rsp], 0
	je	SHORT $LN6@is_authori
	lea	r9, QWORD PTR file$2[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR passfile$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	je	SHORT $LN6@is_authori
; Line 8993
	xor	r8d, r8d
	lea	rdx, QWORD PTR file$2[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z ; authorize
	mov	DWORD PTR ret$[rsp], eax
; Line 8994
	lea	rcx, QWORD PTR file$2[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN6@is_authori:
$LN5@is_authori:
$LN4@is_authori:
; Line 8998
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@is_authori
; Line 8999
	mov	eax, DWORD PTR ret$[rsp]
; Line 9000
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?is_authorized_for_put@@YAHPEAUmg_connection@@@Z ENDP	; is_authorized_for_put
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
trunc$ = 64
nonce$ = 72
buf$ = 80
__$ArrayPad$ = 208
conn$ = 240
realm$ = 248
?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z PROC ; send_authorization_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8923
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8924
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+31936]
	mov	QWORD PTR nonce$[rsp], rax
; Line 8925
	mov	DWORD PTR trunc$[rsp], 0
; Line 8928
	cmp	QWORD PTR realm$[rsp], 0
	jne	SHORT $LN2@send_autho
; Line 8929
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR realm$[rsp], rax
$LN2@send_autho:
; Line 8932
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_lock_context
; Line 8933
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	eax, DWORD PTR [rax+544]
	mov	rcx, QWORD PTR nonce$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nonce$[rsp], rax
; Line 8934
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	eax, DWORD PTR [rax+544]
	inc	eax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2280]
	mov	DWORD PTR [rcx+544], eax
; Line 8935
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	mg_unlock_context
; Line 8937
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rax, QWORD PTR [rax+536]
	mov	rcx, QWORD PTR nonce$[rsp]
	xor	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nonce$[rsp], rax
; Line 8938
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 8941
	mov	edx, 401				; 00000191H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 8942
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 8943
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 8944
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG164503
	lea	rdx, OFFSET FLAT:$SG164504
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 8947
	mov	rax, QWORD PTR nonce$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR realm$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164505
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 128				; 00000080H
	lea	r8, QWORD PTR buf$[rsp]
	lea	rdx, QWORD PTR trunc$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 8956
	cmp	DWORD PTR trunc$[rsp], 0
	jne	SHORT $LN3@send_autho
; Line 8958
	mov	r9d, -1
	lea	r8, QWORD PTR buf$[rsp]
	lea	rdx, OFFSET FLAT:$SG164507
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN3@send_autho:
; Line 8962
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 8963
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z ENDP ; send_authorization_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
authorized$ = 64
truncated$ = 68
list$ = 72
uri_vec$ = 80
filename_vec$ = 96
file$ = 112
fname$ = 160
__$ArrayPad$ = 944
conn$ = 976
path$ = 984
?check_authorization@@YAHPEAUmg_connection@@PEBD@Z PROC	; check_authorization
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8867
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 968				; 000003c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8872
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 8873
	mov	DWORD PTR authorized$[rsp], 1
; Line 8875
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN5@check_auth
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN4@check_auth
$LN5@check_auth:
; Line 8876
	xor	eax, eax
	jmp	$LN1@check_auth
$LN4@check_auth:
; Line 8879
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR list$[rsp], rax
$LN2@check_auth:
; Line 8880
	lea	r8, QWORD PTR filename_vec$[rsp]
	lea	rdx, QWORD PTR uri_vec$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	$LN3@check_auth
; Line 8881
	mov	r8, QWORD PTR uri_vec$[rsp+8]
	mov	rdx, QWORD PTR uri_vec$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	memcmp
	test	eax, eax
	jne	$LN6@check_auth
; Line 8882
	mov	rax, QWORD PTR filename_vec$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR filename_vec$[rsp+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG164486
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR fname$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 8891
	cmp	DWORD PTR truncated$[rsp], 0
	jne	SHORT $LN8@check_auth
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 1
	lea	rdx, QWORD PTR fname$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN7@check_auth
$LN8@check_auth:
; Line 8892
	call	_errno
	mov	ecx, DWORD PTR [rax]
	call	strerror
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR fname$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164489
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164490
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 8896				; 000022c0H
	lea	r8, OFFSET FLAT:$SG164491
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN7@check_auth:
; Line 8898
	jmp	SHORT $LN3@check_auth
$LN6@check_auth:
; Line 8900
	jmp	$LN2@check_auth
$LN3@check_auth:
; Line 8902
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?is_file_opened@@YAHPEBUmg_file_access@@@Z ; is_file_opened
	test	eax, eax
	jne	SHORT $LN9@check_auth
; Line 8903
	lea	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ; open_auth_file
$LN9@check_auth:
; Line 8906
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?is_file_opened@@YAHPEBUmg_file_access@@@Z ; is_file_opened
	test	eax, eax
	je	SHORT $LN10@check_auth
; Line 8907
	xor	r8d, r8d
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z ; authorize
	mov	DWORD PTR authorized$[rsp], eax
; Line 8908
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN10@check_auth:
; Line 8911
	mov	eax, DWORD PTR authorized$[rsp]
$LN1@check_auth:
; Line 8917
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 968				; 000003c8H
	ret	0
?check_authorization@@YAHPEAUmg_connection@@PEBD@Z ENDP	; check_authorization
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
workdata$ = 32
buf$ = 704
__$ArrayPad$ = 8896
conn$ = 8928
filep$ = 8936
realm$ = 8944
?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z PROC ; authorize
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8810
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8920				; 000022d8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8814
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@authorize
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN2@authorize
$LN3@authorize:
; Line 8815
	xor	eax, eax
	jmp	$LN1@authorize
$LN2@authorize:
; Line 8818
	mov	r8d, 664				; 00000298H
	xor	edx, edx
	lea	rcx, QWORD PTR workdata$[rsp]
	call	memset
; Line 8819
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR workdata$[rsp], rax
; Line 8821
	lea	r9, QWORD PTR workdata$[rsp+8]
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z ; parse_auth_header
	test	eax, eax
	jne	SHORT $LN4@authorize
; Line 8822
	xor	eax, eax
	jmp	SHORT $LN1@authorize
$LN4@authorize:
; Line 8826
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR workdata$[rsp+8]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+64], rax
; Line 8829
	cmp	QWORD PTR realm$[rsp], 0
	je	SHORT $LN5@authorize
; Line 8830
	mov	rax, QWORD PTR realm$[rsp]
	mov	QWORD PTR workdata$[rsp+80], rax
; Line 8831
	jmp	SHORT $LN6@authorize
$LN5@authorize:
; Line 8832
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR workdata$[rsp+80], rax
$LN6@authorize:
; Line 8835
	mov	r8d, 9
	lea	rdx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR filep$[rsp]
	call	?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z ; read_auth_file
$LN1@authorize:
; Line 8836
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8920				; 000022d8H
	ret	0
?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z ENDP ; authorize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
is_authorized$ = 64
l$ = 72
tv242 = 80
tv260 = 84
fp$ = 88
md5$1 = 128
__$ArrayPad$ = 168
filep$ = 192
workdata$ = 200
depth$ = 208
?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z PROC ; read_auth_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8680
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8681
	mov	DWORD PTR is_authorized$[rsp], 0
; Line 8685
	cmp	QWORD PTR filep$[rsp], 0
	je	SHORT $LN9@read_auth_
	cmp	QWORD PTR workdata$[rsp], 0
	je	SHORT $LN9@read_auth_
	cmp	DWORD PTR depth$[rsp], 0
	jne	SHORT $LN8@read_auth_
$LN9@read_auth_:
; Line 8686
	xor	eax, eax
	jmp	$LN1@read_auth_
$LN8@read_auth_:
$LN35@read_auth_:
$LN34@read_auth_:
$LN33@read_auth_:
$LN32@read_auth_:
$LN31@read_auth_:
$LN30@read_auth_:
$LN2@read_auth_:
; Line 8690
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	r8, QWORD PTR filep$[rsp]
	mov	edx, 552				; 00000228H
	mov	rcx, rax
	call	?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z	; mg_fgets
	test	rax, rax
	je	$LN3@read_auth_
; Line 8691
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	strlen
	mov	QWORD PTR l$[rsp], rax
$LN4@read_auth_:
; Line 8692
	cmp	QWORD PTR l$[rsp], 0
	jbe	SHORT $LN5@read_auth_
; Line 8694
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR workdata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax+87]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	jne	SHORT $LN12@read_auth_
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR workdata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax+87]
	mov	ecx, eax
	call	iscntrl
	test	eax, eax
	je	SHORT $LN10@read_auth_
$LN12@read_auth_:
; Line 8695
	mov	rax, QWORD PTR l$[rsp]
	dec	rax
	mov	QWORD PTR l$[rsp], rax
; Line 8696
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR workdata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax+88], 0
; Line 8697
	jmp	SHORT $LN11@read_auth_
$LN10@read_auth_:
; Line 8698
	jmp	SHORT $LN5@read_auth_
$LN11@read_auth_:
; Line 8699
	jmp	SHORT $LN4@read_auth_
$LN5@read_auth_:
; Line 8700
	cmp	QWORD PTR l$[rsp], 1
	jae	SHORT $LN13@read_auth_
; Line 8701
	jmp	$LN2@read_auth_
$LN13@read_auth_:
; Line 8704
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	QWORD PTR [rcx+640], rax
; Line 8706
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rcx+640]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	jne	$LN14@read_auth_
; Line 8710
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rcx+640]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 35					; 00000023H
	jne	SHORT $LN15@read_auth_
; Line 8712
	jmp	$LN30@read_auth_
	jmp	$LN16@read_auth_
$LN15@read_auth_:
; Line 8713
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+640]
	inc	rax
	mov	r8d, 8
	lea	rdx, OFFSET FLAT:$SG164416
	mov	rcx, rax
	call	strncmp
	test	eax, eax
	jne	$LN17@read_auth_
; Line 8714
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+640]
	add	rax, 9
	lea	r9, QWORD PTR fp$[rsp]
	mov	r8d, 1
	mov	rdx, rax
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	je	SHORT $LN18@read_auth_
; Line 8718
	mov	eax, DWORD PTR depth$[rsp]
	dec	eax
	mov	r8d, eax
	mov	rdx, QWORD PTR workdata$[rsp]
	lea	rcx, QWORD PTR fp$[rsp]
	call	?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z ; read_auth_file
	mov	DWORD PTR is_authorized$[rsp], eax
; Line 8719
	lea	rcx, QWORD PTR fp$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 8726
	cmp	DWORD PTR is_authorized$[rsp], 0
	je	SHORT $LN20@read_auth_
; Line 8727
	mov	eax, DWORD PTR is_authorized$[rsp]
	jmp	$LN1@read_auth_
$LN20@read_auth_:
; Line 8729
	jmp	SHORT $LN19@read_auth_
$LN18@read_auth_:
; Line 8730
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164420
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164421
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 8733				; 0000221dH
	lea	r8, OFFSET FLAT:$SG164422
	xor	edx, edx
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN19@read_auth_:
; Line 8735
	jmp	$LN31@read_auth_
$LN17@read_auth_:
$LN16@read_auth_:
; Line 8739
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164423
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164424
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 8742				; 00002226H
	lea	r8, OFFSET FLAT:$SG164425
	xor	edx, edx
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 8743
	jmp	$LN32@read_auth_
$LN14@read_auth_:
; Line 8746
	mov	edx, 58					; 0000003aH
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax+640]
	call	strchr
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	QWORD PTR [rcx+648], rax
; Line 8747
	mov	rax, QWORD PTR workdata$[rsp]
	cmp	QWORD PTR [rax+648], 0
	jne	SHORT $LN21@read_auth_
; Line 8748
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164427
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164428
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 8751				; 0000222fH
	lea	r8, OFFSET FLAT:$SG164429
	xor	edx, edx
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 8752
	jmp	$LN33@read_auth_
$LN21@read_auth_:
; Line 8754
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+648]
	mov	BYTE PTR [rax], 0
; Line 8755
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+648]
	inc	rax
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	QWORD PTR [rcx+648], rax
; Line 8757
	mov	edx, 58					; 0000003aH
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax+648]
	call	strchr
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	QWORD PTR [rcx+656], rax
; Line 8758
	mov	rax, QWORD PTR workdata$[rsp]
	cmp	QWORD PTR [rax+656], 0
	jne	SHORT $LN22@read_auth_
; Line 8759
	mov	rax, QWORD PTR workdata$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG164431
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164432
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 8762				; 0000223aH
	lea	r8, OFFSET FLAT:$SG164433
	xor	edx, edx
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 8763
	jmp	$LN34@read_auth_
$LN22@read_auth_:
; Line 8765
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+656]
	mov	BYTE PTR [rax], 0
; Line 8766
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+656]
	inc	rax
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	QWORD PTR [rcx+656], rax
; Line 8769
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rdx, QWORD PTR [rax+640]
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	strcmp
	test	eax, eax
	jne	$LN23@read_auth_
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rdx, QWORD PTR [rax+648]
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	strcmp
	test	eax, eax
	jne	$LN23@read_auth_
; Line 8770
	mov	rax, QWORD PTR workdata$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv242[rsp], eax
	cmp	DWORD PTR tv242[rsp], 1
	je	SHORT $LN24@read_auth_
	cmp	DWORD PTR tv242[rsp], 2
	je	$LN25@read_auth_
	jmp	$LN26@read_auth_
$LN24@read_auth_:
; Line 8778
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164436
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR workdata$[rsp]
	mov	r9, QWORD PTR [rax+80]
	lea	r8, OFFSET FLAT:$SG164437
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rdx, QWORD PTR [rax+640]
	lea	rcx, QWORD PTR md5$1[rsp]
	call	mg_md5
; Line 8785
	mov	r8d, 33					; 00000021H
	lea	rdx, QWORD PTR md5$1[rsp]
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rax+656]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN28@read_auth_
	mov	DWORD PTR tv260[rsp], 1
	jmp	SHORT $LN29@read_auth_
$LN28@read_auth_:
	mov	DWORD PTR tv260[rsp], 0
$LN29@read_auth_:
	mov	eax, DWORD PTR tv260[rsp]
	jmp	$LN1@read_auth_
$LN25@read_auth_:
; Line 8788
	mov	rax, QWORD PTR workdata$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	r9, QWORD PTR [rcx+72]
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	r8, QWORD PTR [rcx+32]
	mov	rcx, QWORD PTR workdata$[rsp]
	mov	rdx, QWORD PTR [rcx+656]
	mov	rcx, QWORD PTR [rax+16]
	call	?check_password_digest@@YAHPEBD0000000@Z ; check_password_digest
	jmp	SHORT $LN1@read_auth_
$LN26@read_auth_:
; Line 8798
	xor	eax, eax
	jmp	SHORT $LN1@read_auth_
$LN23@read_auth_:
; Line 8801
	jmp	$LN35@read_auth_
$LN3@read_auth_:
; Line 8803
	mov	eax, DWORD PTR is_authorized$[rsp]
$LN1@read_auth_:
; Line 8804
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	ret	0
?read_auth_file@@YAHPEAUmg_file@@PEAUread_auth_file_struct@@H@Z ENDP ; read_auth_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
name$ = 40
value$ = 48
tv229 = 56
auth_header$ = 64
nonce$ = 72
split$1 = 80
userpw_b64$2 = 88
buf_len_r$3 = 96
userpw_b64_len$4 = 104
conn$ = 128
buf$ = 136
buf_size$ = 144
ah$ = 152
?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z PROC ; parse_auth_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8503
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 8508
	cmp	QWORD PTR ah$[rsp], 0
	je	SHORT $LN8@parse_auth
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN7@parse_auth
$LN8@parse_auth:
; Line 8509
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN7@parse_auth:
; Line 8512
	mov	r8d, 72					; 00000048H
	xor	edx, edx
	mov	rcx, QWORD PTR ah$[rsp]
	call	memset
; Line 8513
	lea	rdx, OFFSET FLAT:$SG164314
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR auth_header$[rsp], rax
; Line 8515
	cmp	QWORD PTR auth_header$[rsp], 0
	jne	SHORT $LN9@parse_auth
; Line 8517
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN9@parse_auth:
; Line 8519
	mov	r8d, 6
	lea	rdx, OFFSET FLAT:$SG164318
	mov	rcx, QWORD PTR auth_header$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	$LN10@parse_auth
; Line 8522
	mov	rax, QWORD PTR auth_header$[rsp]
	add	rax, 6
	mov	QWORD PTR userpw_b64$2[rsp], rax
; Line 8523
	mov	rcx, QWORD PTR userpw_b64$2[rsp]
	call	strlen
	mov	QWORD PTR userpw_b64_len$4[rsp], rax
; Line 8524
	mov	rax, QWORD PTR buf_size$[rsp]
	mov	QWORD PTR buf_len_r$3[rsp], rax
; Line 8527
	lea	r9, QWORD PTR buf_len_r$3[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR userpw_b64_len$4[rsp]
	mov	rcx, QWORD PTR userpw_b64$2[rsp]
	call	mg_base64_decode
	cmp	eax, -1
	je	SHORT $LN12@parse_auth
; Line 8528
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN12@parse_auth:
; Line 8530
	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR buf$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	mov	QWORD PTR split$1[rsp], rax
; Line 8531
	cmp	QWORD PTR split$1[rsp], 0
	jne	SHORT $LN13@parse_auth
; Line 8532
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN13@parse_auth:
; Line 8536
	mov	rax, QWORD PTR split$1[rsp]
	mov	BYTE PTR [rax], 0
; Line 8539
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 8540
	mov	rax, QWORD PTR ah$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 8541
	mov	rax, QWORD PTR split$1[rsp]
	inc	rax
	mov	rcx, QWORD PTR ah$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 8543
	mov	eax, 1
	jmp	$LN1@parse_auth
	jmp	SHORT $LN11@parse_auth
$LN10@parse_auth:
; Line 8545
	mov	r8d, 7
	lea	rdx, OFFSET FLAT:$SG164323
	mov	rcx, QWORD PTR auth_header$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	SHORT $LN14@parse_auth
; Line 8547
	mov	rax, QWORD PTR ah$[rsp]
	mov	DWORD PTR [rax+8], 2
; Line 8549
	jmp	SHORT $LN15@parse_auth
$LN14@parse_auth:
; Line 8551
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN15@parse_auth:
$LN11@parse_auth:
; Line 8555
	mov	rax, QWORD PTR auth_header$[rsp]
	add	rax, 7
	mov	r8, QWORD PTR buf_size$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR buf$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 8556
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN2@parse_auth:
$LN5@parse_auth:
; Line 8561
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	je	SHORT $LN6@parse_auth
; Line 8562
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 8563
	jmp	SHORT $LN5@parse_auth
$LN6@parse_auth:
; Line 8564
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG164324
	lea	rdx, OFFSET FLAT:$SG164325
	lea	rcx, QWORD PTR s$[rsp]
	call	?skip_quoted@@YAPEADPEAPEADPEBD1D@Z	; skip_quoted
	mov	QWORD PTR name$[rsp], rax
; Line 8567
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN16@parse_auth
; Line 8568
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 8569
	mov	r9b, 92					; 0000005cH
	lea	r8, OFFSET FLAT:$SG164328
	lea	rdx, OFFSET FLAT:$SG164329
	lea	rcx, QWORD PTR s$[rsp]
	call	?skip_quoted@@YAPEADPEAPEADPEBD1D@Z	; skip_quoted
	mov	QWORD PTR value$[rsp], rax
; Line 8570
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN18@parse_auth
; Line 8571
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN18@parse_auth:
; Line 8573
	jmp	SHORT $LN17@parse_auth
$LN16@parse_auth:
; Line 8574
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG164331
	lea	rdx, OFFSET FLAT:$SG164332
	lea	rcx, QWORD PTR s$[rsp]
	call	?skip_quoted@@YAPEADPEAPEADPEBD1D@Z	; skip_quoted
	mov	QWORD PTR value$[rsp], rax
$LN17@parse_auth:
; Line 8577
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN19@parse_auth
; Line 8578
	jmp	$LN3@parse_auth
$LN19@parse_auth:
; Line 8581
	lea	rdx, OFFSET FLAT:$SG164336
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN20@parse_auth
; Line 8582
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN21@parse_auth
$LN20@parse_auth:
; Line 8583
	lea	rdx, OFFSET FLAT:$SG164339
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN22@parse_auth
; Line 8584
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+32], rcx
	jmp	$LN23@parse_auth
$LN22@parse_auth:
; Line 8585
	lea	rdx, OFFSET FLAT:$SG164342
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN24@parse_auth
; Line 8586
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+40], rcx
	jmp	$LN25@parse_auth
$LN24@parse_auth:
; Line 8587
	lea	rdx, OFFSET FLAT:$SG164345
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN26@parse_auth
; Line 8588
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+24], rcx
	jmp	SHORT $LN27@parse_auth
$LN26@parse_auth:
; Line 8589
	lea	rdx, OFFSET FLAT:$SG164348
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN28@parse_auth
; Line 8590
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+48], rcx
	jmp	SHORT $LN29@parse_auth
$LN28@parse_auth:
; Line 8591
	lea	rdx, OFFSET FLAT:$SG164351
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN30@parse_auth
; Line 8592
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+56], rcx
	jmp	SHORT $LN31@parse_auth
$LN30@parse_auth:
; Line 8593
	lea	rdx, OFFSET FLAT:$SG164353
	mov	rcx, QWORD PTR name$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN32@parse_auth
; Line 8594
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN32@parse_auth:
$LN31@parse_auth:
$LN29@parse_auth:
$LN27@parse_auth:
$LN25@parse_auth:
$LN23@parse_auth:
$LN21@parse_auth:
; Line 8596
	jmp	$LN2@parse_auth
$LN3@parse_auth:
; Line 8600
	mov	rax, QWORD PTR ah$[rsp]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN33@parse_auth
; Line 8601
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN33@parse_auth:
; Line 8603
	mov	QWORD PTR s$[rsp], 0
; Line 8604
	mov	r8d, 10
	lea	rdx, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR ah$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	_strtoui64
	mov	QWORD PTR nonce$[rsp], rax
; Line 8605
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN35@parse_auth
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN34@parse_auth
$LN35@parse_auth:
; Line 8606
	xor	eax, eax
	jmp	$LN1@parse_auth
$LN34@parse_auth:
; Line 8610
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	rax, QWORD PTR [rax+536]
	mov	rcx, QWORD PTR nonce$[rsp]
	xor	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nonce$[rsp], rax
; Line 8620
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+31936]
	cmp	QWORD PTR nonce$[rsp], rax
	jae	SHORT $LN36@parse_auth
; Line 8623
	xor	eax, eax
	jmp	SHORT $LN1@parse_auth
$LN36@parse_auth:
; Line 8627
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2280]
	mov	ecx, DWORD PTR [rcx+544]
	add	rcx, QWORD PTR [rax+31936]
	mov	rax, rcx
	cmp	QWORD PTR nonce$[rsp], rax
	jb	SHORT $LN37@parse_auth
; Line 8629
	xor	eax, eax
	jmp	SHORT $LN1@parse_auth
$LN37@parse_auth:
; Line 8635
	mov	rax, QWORD PTR ah$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN39@parse_auth
	mov	DWORD PTR tv229[rsp], 1
	jmp	SHORT $LN40@parse_auth
$LN39@parse_auth:
	mov	DWORD PTR tv229[rsp], 0
$LN40@parse_auth:
	mov	eax, DWORD PTR tv229[rsp]
$LN1@parse_auth:
; Line 8636
	add	rsp, 120				; 00000078H
	ret	0
?parse_auth_header@@YAHPEAUmg_connection@@PEAD_KPEAUah@@@Z ENDP ; parse_auth_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$1 = 64
e$2 = 72
p$3 = 80
gpass$4 = 88
name$5 = 96
__$ArrayPad$ = 880
conn$ = 912
path$ = 920
filep$ = 928
?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z PROC ; open_auth_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8419
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 904				; 00000388H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8420
	cmp	QWORD PTR conn$[rsp], 0
	je	$LN5@open_auth_
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	$LN5@open_auth_
; Line 8423
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 37				; 00000025H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR gpass$4[rsp], rax
; Line 8426
	cmp	QWORD PTR gpass$4[rsp], 0
	je	SHORT $LN6@open_auth_
; Line 8428
	mov	r9, QWORD PTR filep$[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR gpass$4[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
; Line 8440
	jmp	$LN7@open_auth_
$LN6@open_auth_:
; Line 8441
	mov	rax, QWORD PTR filep$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN9@open_auth_
	mov	rax, QWORD PTR filep$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN9@open_auth_
; Line 8442
	lea	rax, OFFSET FLAT:$SG164257
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164258
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR name$5[rsp]
	lea	rdx, QWORD PTR truncated$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 8450
	cmp	DWORD PTR truncated$1[rsp], 0
	jne	SHORT $LN12@open_auth_
	mov	r9, QWORD PTR filep$[rsp]
	mov	r8d, 1
	lea	rdx, QWORD PTR name$5[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
$LN12@open_auth_:
; Line 8458
	jmp	$LN10@open_auth_
$LN9@open_auth_:
; Line 8460
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR p$3[rsp], rax
	mov	rcx, QWORD PTR p$3[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$3[rsp]
	lea	rax, QWORD PTR [rcx+rax-1]
	mov	QWORD PTR e$2[rsp], rax
	jmp	SHORT $LN4@open_auth_
$LN2@open_auth_:
	mov	rax, QWORD PTR e$2[rsp]
	dec	rax
	mov	QWORD PTR e$2[rsp], rax
$LN4@open_auth_:
	mov	rax, QWORD PTR p$3[rsp]
	cmp	QWORD PTR e$2[rsp], rax
	jbe	SHORT $LN3@open_auth_
; Line 8461
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR e$2[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN13@open_auth_
; Line 8462
	jmp	SHORT $LN3@open_auth_
$LN13@open_auth_:
; Line 8464
	jmp	SHORT $LN2@open_auth_
$LN3@open_auth_:
; Line 8465
	mov	rax, QWORD PTR p$3[rsp]
	mov	rcx, QWORD PTR e$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	lea	rcx, OFFSET FLAT:$SG164262
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR p$3[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG164263
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR name$5[rsp]
	lea	rdx, QWORD PTR truncated$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 8474
	cmp	DWORD PTR truncated$1[rsp], 0
	jne	SHORT $LN15@open_auth_
	mov	r9, QWORD PTR filep$[rsp]
	mov	r8d, 1
	lea	rdx, QWORD PTR name$5[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
$LN15@open_auth_:
$LN10@open_auth_:
$LN7@open_auth_:
$LN5@open_auth_:
; Line 8484
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 904				; 00000388H
	ret	0
?open_auth_file@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ENDP ; open_auth_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv95 = 112
ha2$ = 120
expected_response$ = 160
__$ArrayPad$ = 200
method$ = 224
ha1$ = 232
uri$ = 240
nonce$ = 248
nc$ = 256
cnonce$ = 264
qop$ = 272
response$ = 280
?check_password_digest@@YAHPEBD0000000@Z PROC		; check_password_digest
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8379
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8384
	cmp	QWORD PTR method$[rsp], 0
	je	SHORT $LN3@check_pass
	cmp	QWORD PTR nonce$[rsp], 0
	je	SHORT $LN3@check_pass
	cmp	QWORD PTR nc$[rsp], 0
	je	SHORT $LN3@check_pass
	cmp	QWORD PTR cnonce$[rsp], 0
	je	SHORT $LN3@check_pass
	cmp	QWORD PTR qop$[rsp], 0
	je	SHORT $LN3@check_pass
	cmp	QWORD PTR response$[rsp], 0
	jne	SHORT $LN2@check_pass
$LN3@check_pass:
; Line 8385
	xor	eax, eax
	jmp	$LN1@check_pass
$LN2@check_pass:
; Line 8389
	mov	rcx, QWORD PTR response$[rsp]
	call	strlen
	cmp	rax, 32					; 00000020H
	je	SHORT $LN4@check_pass
; Line 8390
	xor	eax, eax
	jmp	$LN1@check_pass
$LN4@check_pass:
; Line 8393
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR uri$[rsp]
	lea	r8, OFFSET FLAT:$SG164231
	mov	rdx, QWORD PTR method$[rsp]
	lea	rcx, QWORD PTR ha2$[rsp]
	call	mg_md5
; Line 8394
	mov	QWORD PTR [rsp+96], 0
	lea	rax, QWORD PTR ha2$[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, OFFSET FLAT:$SG164232
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR qop$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, OFFSET FLAT:$SG164233
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR cnonce$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:$SG164234
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR nc$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164235
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR nonce$[rsp]
	lea	r8, OFFSET FLAT:$SG164236
	mov	rdx, QWORD PTR ha1$[rsp]
	lea	rcx, QWORD PTR expected_response$[rsp]
	call	mg_md5
; Line 8408
	lea	rdx, QWORD PTR expected_response$[rsp]
	mov	rcx, QWORD PTR response$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN6@check_pass
	mov	DWORD PTR tv95[rsp], 1
	jmp	SHORT $LN7@check_pass
$LN6@check_pass:
	mov	DWORD PTR tv95[rsp], 0
$LN7@check_pass:
	mov	eax, DWORD PTR tv95[rsp]
$LN1@check_pass:
; Line 8409
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?check_password_digest@@YAHPEBD0000000@Z ENDP		; check_password_digest
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
to$ = 32
p$ = 40
len$ = 48
?bin2str@@YAXPEADPEBE_K@Z PROC				; bin2str
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8334
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 8337
	jmp	SHORT $LN4@bin2str
$LN2@bin2str:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN4@bin2str:
	mov	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR tv67[rsp], rax
	mov	rax, QWORD PTR len$[rsp]
	dec	rax
	mov	QWORD PTR len$[rsp], rax
	cmp	QWORD PTR tv67[rsp], 0
	je	SHORT $LN3@bin2str
; Line 8338
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sar	eax, 4
	cdqe
	mov	rcx, QWORD PTR to$[rsp]
	mov	rdx, QWORD PTR ?hex@?1??bin2str@@YAXPEADPEBE_K@Z@4PEBDEB
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR to$[rsp]
	inc	rax
	mov	QWORD PTR to$[rsp], rax
; Line 8339
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	and	eax, 15
	cdqe
	mov	rcx, QWORD PTR to$[rsp]
	mov	rdx, QWORD PTR ?hex@?1??bin2str@@YAXPEADPEBE_K@Z@4PEBDEB
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR to$[rsp]
	inc	rax
	mov	QWORD PTR to$[rsp], rax
; Line 8340
	jmp	$LN2@bin2str
$LN3@bin2str:
; Line 8341
	mov	rax, QWORD PTR to$[rsp]
	mov	BYTE PTR [rax], 0
; Line 8342
	add	rsp, 24
	ret	0
?bin2str@@YAXPEADPEBE_K@Z ENDP				; bin2str
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
path_len$ = 40
ext$ = 48
ext_vec$ = 56
mime_vec$ = 72
conn$ = 128
path$ = 136
vec$ = 144
?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z PROC ; get_mime_type
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8299
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 8304
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	QWORD PTR path_len$[rsp], rax
; Line 8306
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN5@get_mime_t
	cmp	QWORD PTR vec$[rsp], 0
	jne	SHORT $LN4@get_mime_t
$LN5@get_mime_t:
; Line 8307
	cmp	QWORD PTR vec$[rsp], 0
	je	SHORT $LN6@get_mime_t
; Line 8308
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR vec$[rsp]
	call	memset
$LN6@get_mime_t:
; Line 8310
	jmp	$LN1@get_mime_t
$LN4@get_mime_t:
; Line 8315
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 40				; 00000028H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR list$[rsp], rax
$LN2@get_mime_t:
; Line 8316
	lea	r8, QWORD PTR mime_vec$[rsp]
	lea	rdx, QWORD PTR ext_vec$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@get_mime_t
; Line 8318
	mov	rax, QWORD PTR path_len$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR ext_vec$[rsp+8]
	mov	QWORD PTR ext$[rsp], rax
; Line 8319
	mov	r8, QWORD PTR ext_vec$[rsp+8]
	mov	rdx, QWORD PTR ext_vec$[rsp]
	mov	rcx, QWORD PTR ext$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	SHORT $LN7@get_mime_t
; Line 8320
	lea	rax, QWORD PTR mime_vec$[rsp]
	mov	rdi, QWORD PTR vec$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 8321
	jmp	SHORT $LN1@get_mime_t
$LN7@get_mime_t:
; Line 8323
	jmp	SHORT $LN2@get_mime_t
$LN3@get_mime_t:
; Line 8325
	mov	rcx, QWORD PTR path$[rsp]
	call	mg_get_builtin_mime_type
	mov	rcx, QWORD PTR vec$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 8326
	mov	rax, QWORD PTR vec$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strlen
	mov	rcx, QWORD PTR vec$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN1@get_mime_t:
; Line 8327
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?get_mime_type@@YAXPEAUmg_connection@@PEBDPEAUvec@@@Z ENDP ; get_mime_type
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
in$ = 32
out_end$ = 40
in_ahead$1 = 48
inout$ = 80
?remove_dot_segments@@YAXPEAD@Z PROC			; remove_dot_segments
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8014
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8018
	mov	rax, QWORD PTR inout$[rsp]
	mov	QWORD PTR out_end$[rsp], rax
; Line 8019
	mov	rax, QWORD PTR inout$[rsp]
	mov	QWORD PTR in$[rsp], rax
; Line 8021
	cmp	QWORD PTR in$[rsp], 0
	jne	SHORT $LN26@remove_dot
; Line 8023
	jmp	$LN1@remove_dot
$LN26@remove_dot:
$LN2@remove_dot:
; Line 8026
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@remove_dot
; Line 8027
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN27@remove_dot
; Line 8028
	mov	rax, QWORD PTR in$[rsp]
	mov	BYTE PTR [rax], 47			; 0000002fH
$LN27@remove_dot:
; Line 8030
	mov	rax, QWORD PTR in$[rsp]
	inc	rax
	mov	QWORD PTR in$[rsp], rax
; Line 8031
	jmp	SHORT $LN2@remove_dot
$LN3@remove_dot:
; Line 8039
	mov	rax, QWORD PTR inout$[rsp]
	mov	QWORD PTR in$[rsp], rax
$LN4@remove_dot:
; Line 8046
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN5@remove_dot
; Line 8051
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG163914
	mov	rcx, QWORD PTR in$[rsp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN28@remove_dot
; Line 8052
	mov	rax, QWORD PTR in$[rsp]
	add	rax, 3
	mov	QWORD PTR in$[rsp], rax
	jmp	$LN29@remove_dot
$LN28@remove_dot:
; Line 8053
	mov	r8d, 2
	lea	rdx, OFFSET FLAT:$SG163917
	mov	rcx, QWORD PTR in$[rsp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN30@remove_dot
; Line 8054
	mov	rax, QWORD PTR in$[rsp]
	add	rax, 2
	mov	QWORD PTR in$[rsp], rax
; Line 8055
	jmp	$LN31@remove_dot
$LN30@remove_dot:
; Line 8062
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG163920
	mov	rcx, QWORD PTR in$[rsp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN32@remove_dot
; Line 8063
	mov	rax, QWORD PTR in$[rsp]
	add	rax, 2
	mov	QWORD PTR in$[rsp], rax
	jmp	$LN33@remove_dot
$LN32@remove_dot:
; Line 8064
	lea	rdx, OFFSET FLAT:$SG163923
	mov	rcx, QWORD PTR in$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN34@remove_dot
; Line 8065
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR in$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 8066
	jmp	$LN35@remove_dot
$LN34@remove_dot:
; Line 8075
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG163926
	mov	rcx, QWORD PTR in$[rsp]
	call	strncmp
	test	eax, eax
	jne	SHORT $LN36@remove_dot
; Line 8076
	mov	rax, QWORD PTR in$[rsp]
	add	rax, 3
	mov	QWORD PTR in$[rsp], rax
; Line 8077
	mov	rax, QWORD PTR out_end$[rsp]
	cmp	QWORD PTR inout$[rsp], rax
	je	SHORT $LN38@remove_dot
$LN8@remove_dot:
; Line 8080
	mov	rax, QWORD PTR out_end$[rsp]
	dec	rax
	mov	QWORD PTR out_end$[rsp], rax
; Line 8081
	mov	rax, QWORD PTR out_end$[rsp]
	cmp	QWORD PTR inout$[rsp], rax
	je	SHORT $LN39@remove_dot
	mov	rax, QWORD PTR out_end$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN8@remove_dot
$LN39@remove_dot:
$LN38@remove_dot:
; Line 8082
	jmp	$LN37@remove_dot
$LN36@remove_dot:
; Line 8083
	lea	rdx, OFFSET FLAT:$SG163931
	mov	rcx, QWORD PTR in$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN40@remove_dot
; Line 8084
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR in$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 8085
	mov	rax, QWORD PTR out_end$[rsp]
	cmp	QWORD PTR inout$[rsp], rax
	je	SHORT $LN42@remove_dot
$LN11@remove_dot:
; Line 8088
	mov	rax, QWORD PTR out_end$[rsp]
	dec	rax
	mov	QWORD PTR out_end$[rsp], rax
; Line 8089
	mov	rax, QWORD PTR out_end$[rsp]
	cmp	QWORD PTR inout$[rsp], rax
	je	SHORT $LN43@remove_dot
	mov	rax, QWORD PTR out_end$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN11@remove_dot
$LN43@remove_dot:
$LN42@remove_dot:
; Line 8091
	jmp	SHORT $LN41@remove_dot
$LN40@remove_dot:
; Line 8097
	lea	rdx, OFFSET FLAT:$SG163937
	mov	rcx, QWORD PTR in$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN46@remove_dot
	lea	rdx, OFFSET FLAT:$SG163938
	mov	rcx, QWORD PTR in$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN44@remove_dot
$LN46@remove_dot:
; Line 8098
	mov	rax, QWORD PTR in$[rsp]
	mov	BYTE PTR [rax], 0
; Line 8099
	jmp	SHORT $LN45@remove_dot
$LN44@remove_dot:
$LN14@remove_dot:
; Line 8109
	mov	rax, QWORD PTR out_end$[rsp]
	mov	rcx, QWORD PTR in$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
; Line 8110
	mov	rax, QWORD PTR out_end$[rsp]
	inc	rax
	mov	QWORD PTR out_end$[rsp], rax
; Line 8111
	mov	rax, QWORD PTR in$[rsp]
	inc	rax
	mov	QWORD PTR in$[rsp], rax
; Line 8112
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN47@remove_dot
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN14@remove_dot
$LN47@remove_dot:
$LN45@remove_dot:
$LN41@remove_dot:
$LN37@remove_dot:
$LN35@remove_dot:
$LN33@remove_dot:
$LN31@remove_dot:
$LN29@remove_dot:
; Line 8114
	jmp	$LN4@remove_dot
$LN5@remove_dot:
; Line 8121
	mov	rax, QWORD PTR out_end$[rsp]
	mov	BYTE PTR [rax], 0
; Line 8128
	mov	rax, QWORD PTR inout$[rsp]
	mov	QWORD PTR in$[rsp], rax
	mov	rax, QWORD PTR in$[rsp]
	mov	QWORD PTR out_end$[rsp], rax
$LN15@remove_dot:
; Line 8129
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN16@remove_dot
; Line 8130
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN48@remove_dot
; Line 8132
	mov	rax, QWORD PTR in$[rsp]
	mov	QWORD PTR in_ahead$1[rsp], rax
$LN19@remove_dot:
; Line 8134
	mov	rax, QWORD PTR in_ahead$1[rsp]
	inc	rax
	mov	QWORD PTR in_ahead$1[rsp], rax
; Line 8135
	mov	rax, QWORD PTR in_ahead$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN19@remove_dot
; Line 8136
	mov	rax, QWORD PTR in_ahead$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN50@remove_dot
; Line 8137
	mov	rax, QWORD PTR in_ahead$1[rsp]
	mov	QWORD PTR in$[rsp], rax
; Line 8138
	mov	rax, QWORD PTR inout$[rsp]
	cmp	QWORD PTR out_end$[rsp], rax
	je	SHORT $LN52@remove_dot
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR out_end$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN52@remove_dot
; Line 8140
	mov	rax, QWORD PTR out_end$[rsp]
	dec	rax
	mov	QWORD PTR out_end$[rsp], rax
$LN52@remove_dot:
; Line 8141
	jmp	SHORT $LN51@remove_dot
$LN50@remove_dot:
; Line 8142
	mov	rax, QWORD PTR in_ahead$1[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN53@remove_dot
; Line 8143
	mov	rax, QWORD PTR in_ahead$1[rsp]
	mov	QWORD PTR in$[rsp], rax
; Line 8144
	jmp	SHORT $LN54@remove_dot
$LN53@remove_dot:
$LN22@remove_dot:
; Line 8146
	mov	rax, QWORD PTR out_end$[rsp]
	mov	BYTE PTR [rax], 46			; 0000002eH
	mov	rax, QWORD PTR out_end$[rsp]
	inc	rax
	mov	QWORD PTR out_end$[rsp], rax
; Line 8147
	mov	rax, QWORD PTR in$[rsp]
	inc	rax
	mov	QWORD PTR in$[rsp], rax
; Line 8148
	mov	rax, QWORD PTR in_ahead$1[rsp]
	cmp	QWORD PTR in$[rsp], rax
	jne	SHORT $LN22@remove_dot
$LN54@remove_dot:
$LN51@remove_dot:
; Line 8149
	jmp	SHORT $LN49@remove_dot
$LN48@remove_dot:
; Line 8150
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN55@remove_dot
; Line 8152
	mov	rax, QWORD PTR out_end$[rsp]
	mov	BYTE PTR [rax], 47			; 0000002fH
	mov	rax, QWORD PTR out_end$[rsp]
	inc	rax
	mov	QWORD PTR out_end$[rsp], rax
$LN25@remove_dot:
; Line 8154
	mov	rax, QWORD PTR in$[rsp]
	inc	rax
	mov	QWORD PTR in$[rsp], rax
; Line 8155
	mov	rax, QWORD PTR in$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN25@remove_dot
; Line 8156
	jmp	SHORT $LN56@remove_dot
$LN55@remove_dot:
; Line 8157
	mov	rax, QWORD PTR out_end$[rsp]
	mov	rcx, QWORD PTR in$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR out_end$[rsp]
	inc	rax
	mov	QWORD PTR out_end$[rsp], rax
; Line 8158
	mov	rax, QWORD PTR in$[rsp]
	inc	rax
	mov	QWORD PTR in$[rsp], rax
$LN56@remove_dot:
$LN49@remove_dot:
; Line 8160
	jmp	$LN15@remove_dot
$LN16@remove_dot:
; Line 8161
	mov	rax, QWORD PTR out_end$[rsp]
	mov	BYTE PTR [rax], 0
$LN1@remove_dot:
; Line 8162
	add	rsp, 72					; 00000048H
	ret	0
?remove_dot_segments@@YAXPEAD@Z ENDP			; remove_dot_segments
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
year$ = 64
day$ = 68
hour$ = 72
minute$ = 76
second$ = 80
month$ = 84
result$ = 88
tm$ = 96
month_str$ = 136
__$ArrayPad$ = 168
datetime$ = 192
?parse_date_string@@YA_JPEBD@Z PROC			; parse_date_string
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7950
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7951
	lea	rax, QWORD PTR month_str$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
; Line 7953
	mov	QWORD PTR result$[rsp], 0
; Line 7983
	lea	rax, QWORD PTR second$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR minute$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR hour$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR year$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR month_str$[rsp]
	lea	r8, QWORD PTR day$[rsp]
	lea	rdx, OFFSET FLAT:$SG163875
	mov	rcx, QWORD PTR datetime$[rsp]
	call	sscanf
	cmp	eax, 6
	je	$LN3@parse_date
	lea	rax, QWORD PTR second$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR minute$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR hour$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR year$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR month_str$[rsp]
	lea	r8, QWORD PTR day$[rsp]
	lea	rdx, OFFSET FLAT:$SG163876
	mov	rcx, QWORD PTR datetime$[rsp]
	call	sscanf
	cmp	eax, 6
	je	$LN3@parse_date
	lea	rax, QWORD PTR second$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR minute$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR hour$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR year$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR month_str$[rsp]
	lea	r8, QWORD PTR day$[rsp]
	lea	rdx, OFFSET FLAT:$SG163877
	mov	rcx, QWORD PTR datetime$[rsp]
	call	sscanf
	cmp	eax, 6
	je	SHORT $LN3@parse_date
	lea	rax, QWORD PTR second$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR minute$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR hour$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR year$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR month_str$[rsp]
	lea	r8, QWORD PTR day$[rsp]
	lea	rdx, OFFSET FLAT:$SG163878
	mov	rcx, QWORD PTR datetime$[rsp]
	call	sscanf
	cmp	eax, 6
	jne	SHORT $LN2@parse_date
$LN3@parse_date:
; Line 7992
	lea	rcx, QWORD PTR month_str$[rsp]
	call	?get_month_index@@YAHPEBD@Z		; get_month_index
	mov	DWORD PTR month$[rsp], eax
; Line 7993
	cmp	DWORD PTR month$[rsp], 0
	jl	SHORT $LN4@parse_date
	cmp	DWORD PTR year$[rsp], 1970		; 000007b2H
	jl	SHORT $LN4@parse_date
; Line 7994
	mov	r8d, 36					; 00000024H
	xor	edx, edx
	lea	rcx, QWORD PTR tm$[rsp]
	call	memset
; Line 7995
	mov	eax, DWORD PTR year$[rsp]
	sub	eax, 1900				; 0000076cH
	mov	DWORD PTR tm$[rsp+20], eax
; Line 7996
	mov	eax, DWORD PTR month$[rsp]
	mov	DWORD PTR tm$[rsp+16], eax
; Line 7997
	mov	eax, DWORD PTR day$[rsp]
	mov	DWORD PTR tm$[rsp+12], eax
; Line 7998
	mov	eax, DWORD PTR hour$[rsp]
	mov	DWORD PTR tm$[rsp+8], eax
; Line 7999
	mov	eax, DWORD PTR minute$[rsp]
	mov	DWORD PTR tm$[rsp+4], eax
; Line 8000
	mov	eax, DWORD PTR second$[rsp]
	mov	DWORD PTR tm$[rsp], eax
; Line 8001
	lea	rcx, QWORD PTR tm$[rsp]
	call	_mkgmtime
	mov	QWORD PTR result$[rsp], rax
$LN4@parse_date:
$LN2@parse_date:
; Line 8005
	mov	rax, QWORD PTR result$[rsp]
; Line 8006
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?parse_date_string@@YA_JPEBD@Z ENDP			; parse_date_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?get_month_index@@YAHPEBD@Z PROC			; get_month_index
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7934
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7937
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_month_
$LN2@get_month_:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN4@get_month_:
	cmp	QWORD PTR i$[rsp], 12
	jae	SHORT $LN3@get_month_
; Line 7938
	lea	rax, OFFSET FLAT:?month_names@@3QAY03$$CBDA
	mov	rcx, QWORD PTR i$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR s$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN5@get_month_
; Line 7939
	mov	eax, DWORD PTR i$[rsp]
	jmp	SHORT $LN1@get_month_
$LN5@get_month_:
; Line 7941
	jmp	SHORT $LN2@get_month_
$LN3@get_month_:
; Line 7943
	mov	eax, -1
$LN1@get_month_:
; Line 7944
	add	rsp, 56					; 00000038H
	ret	0
?get_month_index@@YAHPEBD@Z ENDP			; get_month_index
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
i$ = 36
buf$ = 64
buflen$ = 72
?get_http_header_len@@YAHPEBDH@Z PROC			; get_http_header_len
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7897
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7899
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_http_h
$LN2@get_http_h:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_http_h:
	mov	eax, DWORD PTR buflen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@get_http_h
; Line 7901
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR c$1[rsp], al
; Line 7904
	movzx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN5@get_http_h
	movsx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 13
	je	SHORT $LN5@get_http_h
	movsx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 10
	je	SHORT $LN5@get_http_h
	movzx	eax, BYTE PTR c$1[rsp]
	mov	ecx, eax
	call	isprint
	test	eax, eax
	jne	SHORT $LN5@get_http_h
; Line 7906
	mov	eax, -1
	jmp	$LN1@get_http_h
$LN5@get_http_h:
; Line 7909
	mov	eax, DWORD PTR buflen$[rsp]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@get_http_h
; Line 7910
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN7@get_http_h
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN7@get_http_h
; Line 7913
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	jmp	SHORT $LN1@get_http_h
$LN7@get_http_h:
$LN6@get_http_h:
; Line 7917
	mov	eax, DWORD PTR buflen$[rsp]
	sub	eax, 3
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN8@get_http_h
; Line 7919
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	jne	SHORT $LN9@get_http_h
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN9@get_http_h
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	jne	SHORT $LN9@get_http_h
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	rcx, QWORD PTR buf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN9@get_http_h
; Line 7921
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	jmp	SHORT $LN1@get_http_h
$LN9@get_http_h:
$LN8@get_http_h:
; Line 7924
	jmp	$LN2@get_http_h
$LN3@get_http_h:
; Line 7926
	xor	eax, eax
$LN1@get_http_h:
; Line 7927
	add	rsp, 56					; 00000038H
	ret	0
?get_http_header_len@@YAHPEBDH@Z ENDP			; get_http_header_len
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sep_pos$ = 64
tmp_str$ = 72
truncated$ = 80
tv79 = 84
uri_len$1 = 88
tv182 = 92
tv188 = 96
tv194 = 100
tv221 = 104
tv289 = 108
does_exist$2 = 112
is_script$3 = 116
uri$ = 120
tmp_str_len$ = 128
is_uri_end_slash$4 = 136
allow_substitute_script_subresources$ = 140
root$ = 144
rewrite$ = 152
subres_name_len$5 = 160
script_name_len$6 = 168
accept_encoding$ = 176
match_len$ = 184
subres_name$7 = 192
tv325 = 200
a$ = 208
b$ = 224
tmp_filestat$8 = 240
gz_path$ = 272
__$ArrayPad$ = 1056
conn$ = 1104
filename$ = 1112
filename_buf_len$ = 1120
filestat$ = 1128
is_found$ = 1136
is_script_resource$ = 1144
is_websocket_request$ = 1152
is_put_or_delete_request$ = 1160
is_webdav_request$ = 1168
is_template_text$ = 1176
?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z PROC ; interpret_uri
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7577
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1080				; 00000438H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7581
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR uri$[rsp], rax
; Line 7582
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR root$[rsp], rax
; Line 7598
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR filestat$[rsp]
	call	memset
; Line 7599
	mov	rax, QWORD PTR filename$[rsp]
	mov	BYTE PTR [rax], 0
; Line 7600
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7601
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7602
	mov	rax, QWORD PTR is_template_text$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7606
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z ; is_put_or_delete_method
	mov	rcx, QWORD PTR is_put_or_delete_request$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7609
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z ; is_civetweb_webdav_method
	mov	rcx, QWORD PTR is_webdav_request$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7614
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN48@interpret_
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN49@interpret_
$LN48@interpret_:
	mov	DWORD PTR tv79[rsp], 0
$LN49@interpret_:
	mov	rax, QWORD PTR is_websocket_request$[rsp]
	mov	ecx, DWORD PTR tv79[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7616
	mov	rax, QWORD PTR is_websocket_request$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN12@interpret_
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 54				; 00000036H
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN12@interpret_
; Line 7617
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 54				; 00000036H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR root$[rsp], rax
$LN12@interpret_:
; Line 7625
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2420], 0
; Line 7626
	lea	rdx, OFFSET FLAT:$SG163795
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR accept_encoding$[rsp], rax
	cmp	QWORD PTR accept_encoding$[rsp], 0
	je	SHORT $LN13@interpret_
; Line 7627
	lea	rdx, OFFSET FLAT:$SG163797
	mov	rcx, QWORD PTR accept_encoding$[rsp]
	call	strstr
	test	rax, rax
	je	SHORT $LN14@interpret_
; Line 7628
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2420], 1
$LN14@interpret_:
$LN13@interpret_:
; Line 7637
	cmp	QWORD PTR root$[rsp], 0
	jne	SHORT $LN15@interpret_
; Line 7640
	jmp	$LN1@interpret_
$LN15@interpret_:
; Line 7647
	mov	DWORD PTR truncated$[rsp], 0
; Line 7648
	mov	rax, QWORD PTR filename_buf_len$[rsp]
	dec	rax
	mov	rcx, QWORD PTR uri$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR root$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, OFFSET FLAT:$SG163799
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	mov	r8, QWORD PTR filename$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 7651
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN16@interpret_
; Line 7652
	jmp	$LN17@interpret_
	jmp	$interpret_cleanup$60
$LN16@interpret_:
; Line 7656
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 43				; 0000002bH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR rewrite$[rsp], rax
$LN2@interpret_:
; Line 7657
	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR rewrite$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR rewrite$[rsp], rax
	cmp	QWORD PTR rewrite$[rsp], 0
	je	$LN3@interpret_
; Line 7658
	mov	r8, QWORD PTR uri$[rsp]
	mov	rdx, QWORD PTR a$[rsp+8]
	mov	rcx, QWORD PTR a$[rsp]
	call	?match_prefix@@YA_JPEBD_K0@Z		; match_prefix
	mov	QWORD PTR match_len$[rsp], rax
	cmp	QWORD PTR match_len$[rsp], 0
	jle	SHORT $LN18@interpret_
; Line 7659
	mov	rax, QWORD PTR match_len$[rsp]
	mov	rcx, QWORD PTR uri$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR filename_buf_len$[rsp]
	dec	rcx
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR b$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR b$[rsp+8]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG163803
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, QWORD PTR filename$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 7667
	jmp	SHORT $LN3@interpret_
$LN18@interpret_:
; Line 7669
	jmp	$LN2@interpret_
$LN3@interpret_:
; Line 7671
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN19@interpret_
; Line 7672
	jmp	$LN20@interpret_
	jmp	$interpret_cleanup$60
$LN19@interpret_:
; Line 7678
	mov	r8, QWORD PTR filestat$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	$LN21@interpret_
; Line 7679
	mov	rcx, QWORD PTR uri$[rsp]
	call	strlen
	mov	DWORD PTR uri_len$1[rsp], eax
; Line 7680
	cmp	DWORD PTR uri_len$1[rsp], 0
	jle	SHORT $LN50@interpret_
	mov	eax, DWORD PTR uri_len$1[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR uri$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN50@interpret_
	mov	DWORD PTR tv182[rsp], 1
	jmp	SHORT $LN51@interpret_
$LN50@interpret_:
	mov	DWORD PTR tv182[rsp], 0
$LN51@interpret_:
	mov	eax, DWORD PTR tv182[rsp]
	mov	DWORD PTR is_uri_end_slash$4[rsp], eax
; Line 7683
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 1
; Line 7686
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z ; extention_matches_script
	test	eax, eax
	je	SHORT $LN22@interpret_
; Line 7698
	mov	rax, QWORD PTR is_put_or_delete_request$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN52@interpret_
	mov	DWORD PTR tv188[rsp], 1
	jmp	SHORT $LN53@interpret_
$LN52@interpret_:
	mov	DWORD PTR tv188[rsp], 0
$LN53@interpret_:
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	ecx, DWORD PTR tv188[rsp]
	mov	DWORD PTR [rax], ecx
$LN22@interpret_:
; Line 7702
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z ; extention_matches_template_text
	test	eax, eax
	je	SHORT $LN23@interpret_
; Line 7708
	mov	rax, QWORD PTR is_put_or_delete_request$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN54@interpret_
	mov	DWORD PTR tv194[rsp], 1
	jmp	SHORT $LN55@interpret_
$LN54@interpret_:
	mov	DWORD PTR tv194[rsp], 0
$LN55@interpret_:
	mov	rax, QWORD PTR is_template_text$[rsp]
	mov	ecx, DWORD PTR tv194[rsp]
	mov	DWORD PTR [rax], ecx
$LN23@interpret_:
; Line 7715
	mov	rax, QWORD PTR filestat$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	$LN24@interpret_
	cmp	DWORD PTR is_uri_end_slash$4[rsp], 0
	je	$LN24@interpret_
	mov	rax, QWORD PTR is_webdav_request$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	$LN24@interpret_
; Line 7719
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR tmp_filestat$8[rsp]
	call	memset
; Line 7721
	lea	r9, QWORD PTR tmp_filestat$8[rsp]
	mov	r8, QWORD PTR filename_buf_len$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z ; substitute_index_file
	test	eax, eax
	je	$LN25@interpret_
; Line 7726
	lea	rax, QWORD PTR tmp_filestat$8[rsp]
	mov	rdi, QWORD PTR filestat$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 7728
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z ; extention_matches_script
	test	eax, eax
	je	SHORT $LN26@interpret_
; Line 7730
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 1
	jmp	SHORT $LN27@interpret_
$LN26@interpret_:
; Line 7731
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z ; extention_matches_template_text
	test	eax, eax
	je	SHORT $LN28@interpret_
; Line 7733
	mov	rax, QWORD PTR is_template_text$[rsp]
	mov	DWORD PTR [rax], 1
; Line 7734
	jmp	SHORT $LN29@interpret_
$LN28@interpret_:
; Line 7736
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7737
	mov	r8, QWORD PTR filestat$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN56@interpret_
	mov	DWORD PTR tv221[rsp], 1
	jmp	SHORT $LN57@interpret_
$LN56@interpret_:
	mov	DWORD PTR tv221[rsp], 0
$LN57@interpret_:
	mov	rax, QWORD PTR is_found$[rsp]
	mov	ecx, DWORD PTR tv221[rsp]
	mov	DWORD PTR [rax], ecx
$LN29@interpret_:
$LN27@interpret_:
$LN25@interpret_:
$LN24@interpret_:
; Line 7743
	jmp	$LN1@interpret_
$LN21@interpret_:
; Line 7753
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2420], 0
	je	$LN30@interpret_
; Line 7754
	mov	rax, QWORD PTR filename$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG163816
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR gz_path$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 7757
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN31@interpret_
; Line 7758
	jmp	$LN32@interpret_
	jmp	$interpret_cleanup$60
$LN31@interpret_:
; Line 7761
	mov	r8, QWORD PTR filestat$[rsp]
	lea	rdx, QWORD PTR gz_path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN33@interpret_
; Line 7762
	cmp	QWORD PTR filestat$[rsp], 0
	je	SHORT $LN34@interpret_
; Line 7763
	mov	rax, QWORD PTR filestat$[rsp]
	mov	DWORD PTR [rax+20], 1
; Line 7764
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 1
$LN34@interpret_:
; Line 7767
	jmp	$LN1@interpret_
$LN33@interpret_:
$LN30@interpret_:
; Line 7774
	mov	rcx, QWORD PTR filename$[rsp]
	call	strlen
	mov	QWORD PTR tmp_str_len$[rsp], rax
; Line 7775
	mov	rax, QWORD PTR tmp_str_len$[rsp]
	add	rax, 781				; 0000030dH
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR tmp_str$[rsp], rax
; Line 7777
	cmp	QWORD PTR tmp_str$[rsp], 0
	jne	SHORT $LN35@interpret_
; Line 7779
	jmp	$LN36@interpret_
	jmp	$interpret_cleanup$60
$LN35@interpret_:
; Line 7781
	mov	rax, QWORD PTR tmp_str_len$[rsp]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR tmp_str$[rsp]
	call	memcpy
; Line 7784
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 63				; 0000003fH
	lea	rdx, OFFSET FLAT:$SG163823
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN58@interpret_
	mov	DWORD PTR tv289[rsp], 1
	jmp	SHORT $LN59@interpret_
$LN58@interpret_:
	mov	DWORD PTR tv289[rsp], 0
$LN59@interpret_:
	mov	eax, DWORD PTR tv289[rsp]
	mov	DWORD PTR allow_substitute_script_subresources$[rsp], eax
; Line 7787
	mov	rax, QWORD PTR is_webdav_request$[rsp]
; Line 7793
	mov	rax, QWORD PTR tmp_str_len$[rsp]
	mov	QWORD PTR sep_pos$[rsp], rax
$LN4@interpret_:
; Line 7794
	cmp	QWORD PTR sep_pos$[rsp], 0
	jbe	$LN5@interpret_
; Line 7795
	mov	rax, QWORD PTR sep_pos$[rsp]
	dec	rax
	mov	QWORD PTR sep_pos$[rsp], rax
; Line 7796
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR tmp_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	$LN38@interpret_
; Line 7797
	mov	DWORD PTR is_script$3[rsp], 0
	mov	DWORD PTR does_exist$2[rsp], 0
; Line 7799
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR tmp_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 7800
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tmp_str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN39@interpret_
; Line 7801
	mov	rdx, QWORD PTR tmp_str$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z ; extention_matches_script
	mov	DWORD PTR is_script$3[rsp], eax
; Line 7802
	mov	r8, QWORD PTR filestat$[rsp]
	mov	rdx, QWORD PTR tmp_str$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	mov	DWORD PTR does_exist$2[rsp], eax
$LN39@interpret_:
; Line 7805
	cmp	DWORD PTR does_exist$2[rsp], 0
	je	$LN40@interpret_
	cmp	DWORD PTR is_script$3[rsp], 0
	je	$LN40@interpret_
; Line 7806
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 7807
	mov	rax, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR sep_pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	rcx, rax
	call	strlen
	inc	rax
	mov	rcx, QWORD PTR filename$[rsp]
	mov	rdx, QWORD PTR sep_pos$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx+1]
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rdi, QWORD PTR sep_pos$[rsp]
	lea	rdx, QWORD PTR [rdx+rdi+2]
	mov	QWORD PTR tv325[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv325[rsp]
	mov	rcx, rax
	call	memmove
; Line 7810
	mov	rax, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR sep_pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2408], rax
; Line 7811
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax+1], 47			; 0000002fH
; Line 7812
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 1
; Line 7813
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 1
; Line 7814
	jmp	$LN5@interpret_
$LN40@interpret_:
; Line 7817
	cmp	DWORD PTR allow_substitute_script_subresources$[rsp], 0
	je	$LN41@interpret_
; Line 7818
	mov	rax, QWORD PTR tmp_str_len$[rsp]
	add	rax, 780				; 0000030cH
	mov	r9, QWORD PTR filestat$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR tmp_str$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z ; substitute_index_file
	test	eax, eax
	je	$LN42@interpret_
; Line 7822
	mov	rdx, QWORD PTR tmp_str$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z ; extention_matches_script
	test	eax, eax
	je	$LN43@interpret_
; Line 7824
	mov	rcx, QWORD PTR tmp_str$[rsp]
	call	strlen
	mov	QWORD PTR script_name_len$6[rsp], rax
; Line 7828
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR subres_name$7[rsp], rax
; Line 7829
	mov	rcx, QWORD PTR subres_name$7[rsp]
	call	strlen
	mov	QWORD PTR subres_name_len$5[rsp], rax
$LN8@interpret_:
; Line 7831
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN8@interpret_
; Line 7837
	mov	rax, QWORD PTR script_name_len$6[rsp]
	mov	rcx, QWORD PTR subres_name_len$5[rsp]
	lea	rax, QWORD PTR [rax+rcx+2]
	cmp	rax, QWORD PTR filename_buf_len$[rsp]
	jb	SHORT $LN45@interpret_
; Line 7838
	mov	rcx, QWORD PTR tmp_str$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 7839
	jmp	$LN46@interpret_
	jmp	$interpret_cleanup$60
$LN45@interpret_:
; Line 7842
	mov	rax, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR script_name_len$6[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2408], rax
; Line 7844
	mov	r8, QWORD PTR subres_name_len$5[rsp]
	mov	rdx, QWORD PTR subres_name$7[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2408]
	call	memmove
; Line 7845
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2408]
	mov	rcx, QWORD PTR subres_name_len$5[rsp]
	mov	BYTE PTR [rax+rcx], 0
; Line 7846
	mov	rax, QWORD PTR script_name_len$6[rsp]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR tmp_str$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	call	memcpy
; Line 7848
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 1
; Line 7849
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 1
; Line 7850
	jmp	SHORT $LN5@interpret_
; Line 7852
	jmp	SHORT $LN44@interpret_
$LN43@interpret_:
$LN11@interpret_:
; Line 7854
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN11@interpret_
; Line 7859
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 7860
	mov	rax, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rax+2408], 0
; Line 7861
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7862
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7863
	jmp	SHORT $LN5@interpret_
$LN44@interpret_:
$LN42@interpret_:
$LN41@interpret_:
; Line 7868
	mov	rax, QWORD PTR sep_pos$[rsp]
	mov	rcx, QWORD PTR tmp_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 47			; 0000002fH
$LN38@interpret_:
; Line 7870
	jmp	$LN4@interpret_
$LN5@interpret_:
; Line 7872
	mov	rcx, QWORD PTR tmp_str$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 7876
	jmp	SHORT $LN1@interpret_
$LN17@interpret_:
$LN20@interpret_:
$LN32@interpret_:
$LN36@interpret_:
$LN46@interpret_:
$interpret_cleanup$60:
; Line 7881
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR filestat$[rsp]
	call	memset
; Line 7882
	mov	rax, QWORD PTR filename$[rsp]
	mov	BYTE PTR [rax], 0
; Line 7883
	mov	rax, QWORD PTR is_found$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7884
	mov	rax, QWORD PTR is_script_resource$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7885
	mov	rax, QWORD PTR is_websocket_request$[rsp]
	mov	DWORD PTR [rax], 0
; Line 7886
	mov	rax, QWORD PTR is_put_or_delete_request$[rsp]
	mov	DWORD PTR [rax], 0
$LN1@interpret_:
; Line 7888
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1080				; 00000438H
	pop	rdi
	pop	rsi
	ret	0
?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z ENDP ; interpret_uri
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
found$ = 32
n$ = 40
list$ = 48
filename_vec$ = 56
conn$ = 96
path$ = 104
path_len$ = 112
filestat$ = 120
?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z PROC ; substitute_index_file
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7522
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 7523
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 38				; 00000026H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR list$[rsp], rax
; Line 7525
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	QWORD PTR n$[rsp], rax
; Line 7526
	mov	DWORD PTR found$[rsp], 0
$LN2@substitute:
; Line 7531
	cmp	QWORD PTR n$[rsp], 0
	jbe	SHORT $LN3@substitute
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax-1]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN3@substitute
; Line 7532
	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	mov	QWORD PTR n$[rsp], rax
; Line 7533
	jmp	SHORT $LN2@substitute
$LN3@substitute:
; Line 7534
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 47			; 0000002fH
$LN10@substitute:
$LN4@substitute:
; Line 7538
	xor	r8d, r8d
	lea	rdx, QWORD PTR filename_vec$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN5@substitute
; Line 7540
	mov	rax, QWORD PTR filename_vec$[rsp+8]
	inc	rax
	mov	rcx, QWORD PTR n$[rsp]
	inc	rcx
	mov	rdx, QWORD PTR path_len$[rsp]
	sub	rdx, rcx
	mov	rcx, rdx
	cmp	rax, rcx
	jbe	SHORT $LN6@substitute
; Line 7541
	jmp	SHORT $LN4@substitute
$LN6@substitute:
; Line 7545
	mov	rax, QWORD PTR filename_vec$[rsp+8]
	inc	rax
	mov	rcx, QWORD PTR path$[rsp]
	mov	rdx, QWORD PTR n$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx+1]
	mov	r8, rax
	mov	rdx, QWORD PTR filename_vec$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 7548
	mov	r8, QWORD PTR filestat$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN7@substitute
; Line 7550
	mov	DWORD PTR found$[rsp], 1
; Line 7551
	jmp	SHORT $LN5@substitute
$LN7@substitute:
; Line 7553
	jmp	$LN10@substitute
$LN5@substitute:
; Line 7556
	cmp	DWORD PTR found$[rsp], 0
	jne	SHORT $LN8@substitute
; Line 7557
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
$LN8@substitute:
; Line 7560
	mov	eax, DWORD PTR found$[rsp]
; Line 7561
	add	rsp, 88					; 00000058H
	ret	0
?substitute_index_file@@YAHPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@@Z ENDP ; substitute_index_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
filename$ = 56
?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z PROC ; extention_matches_template_text
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7498
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7507
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 34				; 00000022H
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jle	SHORT $LN2@extention_
; Line 7508
	mov	eax, 1
	jmp	SHORT $LN1@extention_
$LN2@extention_:
; Line 7510
	xor	eax, eax
$LN1@extention_:
; Line 7511
	add	rsp, 40					; 00000028H
	ret	0
?extention_matches_template_text@@YAHPEAUmg_connection@@PEBD@Z ENDP ; extention_matches_template_text
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cgi_config_idx$ = 32
inc$ = 33
max$ = 34
conn$ = 64
filename$ = 72
?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z PROC ; extention_matches_script
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7452
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7472
	mov	BYTE PTR inc$[rsp], 5
; Line 7473
	mov	BYTE PTR max$[rsp], 10
; Line 7474
	mov	BYTE PTR cgi_config_idx$[rsp], 0
	jmp	SHORT $LN4@extention_
$LN2@extention_:
	movzx	eax, BYTE PTR inc$[rsp]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR cgi_config_idx$[rsp], al
$LN4@extention_:
	movzx	eax, BYTE PTR cgi_config_idx$[rsp]
	movzx	ecx, BYTE PTR max$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN3@extention_
; Line 7476
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 20
	movsxd	rcx, ecx
	cmp	QWORD PTR [rax+rcx*8+8], 0
	je	SHORT $LN5@extention_
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 20
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8+8]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jle	SHORT $LN5@extention_
; Line 7480
	mov	eax, 1
	jmp	SHORT $LN1@extention_
$LN5@extention_:
; Line 7482
	jmp	SHORT $LN2@extention_
$LN3@extention_:
; Line 7489
	xor	eax, eax
$LN1@extention_:
; Line 7490
	add	rsp, 56					; 00000038H
	ret	0
?extention_matches_script@@YAHPEAUmg_connection@@PEBD@Z ENDP ; extention_matches_script
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv92 = 32
s$1 = 40
conn$ = 64
?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z PROC ; is_civetweb_webdav_method
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7427
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7433
	cmp	QWORD PTR conn$[rsp], 0
	je	$LN2@is_civetwe
; Line 7434
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR s$1[rsp], rax
; Line 7435
	cmp	QWORD PTR s$1[rsp], 0
	je	$LN3@is_civetwe
; Line 7437
	lea	rdx, OFFSET FLAT:$SG163705
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_civetwe
	lea	rdx, OFFSET FLAT:$SG163706
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_civetwe
	lea	rdx, OFFSET FLAT:$SG163707
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_civetwe
	lea	rdx, OFFSET FLAT:$SG163708
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_civetwe
	lea	rdx, OFFSET FLAT:$SG163709
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_civetwe
	lea	rdx, OFFSET FLAT:$SG163710
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_civetwe
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN6@is_civetwe
$LN5@is_civetwe:
	mov	DWORD PTR tv92[rsp], 1
$LN6@is_civetwe:
	mov	eax, DWORD PTR tv92[rsp]
	jmp	SHORT $LN1@is_civetwe
$LN3@is_civetwe:
$LN2@is_civetwe:
; Line 7442
	xor	eax, eax
$LN1@is_civetwe:
; Line 7443
	add	rsp, 56					; 00000038H
	ret	0
?is_civetweb_webdav_method@@YAHPEBUmg_connection@@@Z ENDP ; is_civetweb_webdav_method
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv136 = 32
s$1 = 40
conn$ = 64
?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z PROC	; is_put_or_delete_method
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7409
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7410
	cmp	QWORD PTR conn$[rsp], 0
	je	$LN2@is_put_or_
; Line 7411
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR s$1[rsp], rax
; Line 7412
	cmp	QWORD PTR s$1[rsp], 0
	je	$LN3@is_put_or_
; Line 7414
	lea	rdx, OFFSET FLAT:$SG163690
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	$LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163691
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	$LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163692
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	$LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163693
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163694
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163695
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163696
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163697
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_put_or_
	lea	rdx, OFFSET FLAT:$SG163698
	mov	rcx, QWORD PTR s$1[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN5@is_put_or_
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN6@is_put_or_
$LN5@is_put_or_:
	mov	DWORD PTR tv136[rsp], 1
$LN6@is_put_or_:
	mov	eax, DWORD PTR tv136[rsp]
	jmp	SHORT $LN1@is_put_or_
$LN3@is_put_or_:
$LN2@is_put_or_:
; Line 7421
	xor	eax, eax
$LN1@is_put_or_:
; Line 7422
	add	rsp, 56					; 00000038H
	ret	0
?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z ENDP	; is_put_or_delete_method
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
letter$ = 8
?b64reverse@@YAED@Z PROC				; b64reverse
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7306
	mov	BYTE PTR [rsp+8], cl
; Line 7307
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN2@b64reverse
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN2@b64reverse
; Line 7308
	movsx	eax, BYTE PTR letter$[rsp]
	sub	eax, 65					; 00000041H
	jmp	SHORT $LN1@b64reverse
$LN2@b64reverse:
; Line 7310
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN3@b64reverse
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN3@b64reverse
; Line 7311
	movsx	eax, BYTE PTR letter$[rsp]
	sub	eax, 71					; 00000047H
	jmp	SHORT $LN1@b64reverse
$LN3@b64reverse:
; Line 7313
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN4@b64reverse
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN4@b64reverse
; Line 7314
	movsx	eax, BYTE PTR letter$[rsp]
	add	eax, 4
	jmp	SHORT $LN1@b64reverse
$LN4@b64reverse:
; Line 7316
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN5@b64reverse
; Line 7317
	mov	al, 62					; 0000003eH
	jmp	SHORT $LN1@b64reverse
$LN5@b64reverse:
; Line 7319
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN6@b64reverse
; Line 7320
	mov	al, 63					; 0000003fH
	jmp	SHORT $LN1@b64reverse
$LN6@b64reverse:
; Line 7322
	movsx	eax, BYTE PTR letter$[rsp]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN7@b64reverse
; Line 7323
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@b64reverse
$LN7@b64reverse:
; Line 7325
	mov	al, 254					; 000000feH
$LN1@b64reverse:
; Line 7326
	ret	0
?b64reverse@@YAED@Z ENDP				; b64reverse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
buf$ = 80
?url_decode_in_place@@YAXPEAD@Z PROC			; url_decode_in_place
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7028
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 7029
	mov	rcx, QWORD PTR buf$[rsp]
	call	strlen
	mov	DWORD PTR len$[rsp], eax
; Line 7030
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, eax
	mov	r8, QWORD PTR buf$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	mg_url_decode
; Line 7031
	add	rsp, 72					; 00000048H
	ret	0
?url_decode_in_place@@YAXPEAD@Z ENDP			; url_decode_in_place
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
buf$ = 56
mem$ = 64
__$ArrayPad$ = 8256
conn$ = 8288
fmt$ = 8296
ap$ = 8304
?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z PROC	; mg_vprintf
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6964
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8280				; 00002058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6966
	mov	QWORD PTR buf$[rsp], 0
; Line 6969
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR mem$[rsp]
	lea	rcx, QWORD PTR buf$[rsp]
	call	?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z	; alloc_vprintf
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN2@mg_vprintf
; Line 6970
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR len$[rsp], eax
$LN2@mg_vprintf:
; Line 6972
	lea	rax, QWORD PTR mem$[rsp]
	cmp	QWORD PTR buf$[rsp], rax
	je	SHORT $LN3@mg_vprintf
; Line 6973
	mov	rcx, QWORD PTR buf$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN3@mg_vprintf:
; Line 6976
	mov	eax, DWORD PTR len$[rsp]
; Line 6977
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8280				; 00002058H
	ret	0
?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z ENDP	; mg_vprintf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
ap_copy$ = 40
out_buf$ = 64
prealloc_buf$ = 72
prealloc_size$ = 80
fmt$ = 88
ap$ = 96
?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z PROC		; alloc_vprintf
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6891
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6901
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR ap_copy$[rsp], rax
; Line 6902
	mov	r9, QWORD PTR ap_copy$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 6903
	mov	QWORD PTR ap_copy$[rsp], 0
; Line 6905
	cmp	DWORD PTR len$[rsp], 0
	jge	SHORT $LN2@alloc_vpri
; Line 6910
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR ap_copy$[rsp], rax
; Line 6911
	mov	r8, QWORD PTR ap_copy$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR out_buf$[rsp]
	call	?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z	; alloc_vprintf2
	mov	DWORD PTR len$[rsp], eax
; Line 6912
	mov	QWORD PTR ap_copy$[rsp], 0
	jmp	$LN3@alloc_vpri
$LN2@alloc_vpri:
; Line 6914
	movsxd	rax, DWORD PTR len$[rsp]
	cmp	rax, QWORD PTR prealloc_size$[rsp]
	jb	SHORT $LN4@alloc_vpri
; Line 6917
	movsxd	rax, DWORD PTR len$[rsp]
	inc	rax
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	rcx, QWORD PTR out_buf$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6918
	mov	rax, QWORD PTR out_buf$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN6@alloc_vpri
; Line 6920
	mov	eax, -1
	jmp	$LN1@alloc_vpri
$LN6@alloc_vpri:
; Line 6923
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR ap_copy$[rsp], rax
; Line 6924
	movsxd	rax, DWORD PTR len$[rsp]
	inc	rax
	mov	r9, QWORD PTR ap_copy$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR out_buf$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	_vsnprintf
	test	eax, eax
	je	SHORT $LN8@alloc_vpri
	xor	eax, eax
$LN8@alloc_vpri:
; Line 6926
	mov	QWORD PTR ap_copy$[rsp], 0
; Line 6928
	jmp	SHORT $LN5@alloc_vpri
$LN4@alloc_vpri:
; Line 6931
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR ap_copy$[rsp], rax
; Line 6932
	mov	r9, QWORD PTR ap_copy$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	rdx, QWORD PTR prealloc_size$[rsp]
	mov	rcx, QWORD PTR prealloc_buf$[rsp]
	call	_vsnprintf
	test	eax, eax
	je	SHORT $LN9@alloc_vpri
	xor	eax, eax
$LN9@alloc_vpri:
; Line 6934
	mov	QWORD PTR ap_copy$[rsp], 0
; Line 6935
	mov	rax, QWORD PTR out_buf$[rsp]
	mov	rcx, QWORD PTR prealloc_buf$[rsp]
	mov	QWORD PTR [rax], rcx
$LN5@alloc_vpri:
$LN3@alloc_vpri:
; Line 6938
	mov	eax, DWORD PTR len$[rsp]
$LN1@alloc_vpri:
; Line 6939
	add	rsp, 56					; 00000038H
	ret	0
?alloc_vprintf@@YAHPEAPEADPEAD_KPEBD1@Z ENDP		; alloc_vprintf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
size$ = 40
ap_copy$ = 48
buf$ = 80
fmt$ = 88
ap$ = 96
?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z PROC		; alloc_vprintf2
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6854
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6856
	mov	QWORD PTR size$[rsp], 2048		; 00000800H
; Line 6857
	mov	DWORD PTR len$[rsp], -1
; Line 6859
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@alloc_vpri:
; Line 6860
	cmp	DWORD PTR len$[rsp], 0
	jge	$LN3@alloc_vpri
; Line 6861
	mov	rax, QWORD PTR buf$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN4@alloc_vpri
; Line 6862
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN4@alloc_vpri:
; Line 6865
	mov	rax, QWORD PTR size$[rsp]
	shl	rax, 2
	mov	QWORD PTR size$[rsp], rax
; Line 6866
	mov	rcx, QWORD PTR size$[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	rcx, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6867
	mov	rax, QWORD PTR buf$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@alloc_vpri
; Line 6868
	jmp	SHORT $LN3@alloc_vpri
$LN5@alloc_vpri:
; Line 6871
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR ap_copy$[rsp], rax
; Line 6872
	mov	rax, QWORD PTR size$[rsp]
	dec	rax
	mov	r9, QWORD PTR ap_copy$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 6873
	mov	QWORD PTR ap_copy$[rsp], 0
; Line 6874
	mov	rax, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR size$[rsp]
	mov	BYTE PTR [rax+rcx-1], 0
; Line 6875
	jmp	$LN2@alloc_vpri
$LN3@alloc_vpri:
; Line 6877
	mov	eax, DWORD PTR len$[rsp]
; Line 6878
	add	rsp, 72					; 00000048H
	ret	0
?alloc_vprintf2@@YAHPEAPEADPEBDPEAD@Z ENDP		; alloc_vprintf2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
conn$ = 64
?handle_request_stat_log@@YAXPEAUmg_connection@@@Z PROC	; handle_request_stat_log
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6567
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6573
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_request@@YAXPEAUmg_connection@@@Z ; handle_request
$LN4@handle_req:
; Line 6587
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@handle_req
; Line 6589
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+31992], 0
	je	SHORT $LN8@handle_req
; Line 6590
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+31992]
	mov	QWORD PTR tv77[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2448]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv77[rsp]
$LN7@handle_req:
; Line 6591
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@handle_req
$LN8@handle_req:
; Line 6593
	mov	rcx, QWORD PTR conn$[rsp]
	call	?log_access@@YAXPEBUmg_connection@@@Z	; log_access
; Line 6594
	add	rsp, 56					; 00000038H
	ret	0
?handle_request_stat_log@@YAXPEAUmg_connection@@@Z ENDP	; handle_request_stat_log
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ri$ = 144
ok$1 = 152
tv193 = 156
$T2 = 160
tm$ = 168
tv160 = 176
tv164 = 184
tv169 = 192
tv174 = 200
tv180 = 208
user_agent$ = 216
referer$ = 224
tv191 = 232
tv189 = 240
tv205 = 248
fi$ = 256
date$ = 304
src_addr$ = 368
log_buf$ = 432
__$ArrayPad$ = 4528
conn$ = 4560
?log_access@@YAXPEBUmg_connection@@@Z PROC		; log_access
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 16003
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4552				; 000011c8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 16019
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@log_access
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN2@log_access
$LN3@log_access:
; Line 16020
	jmp	$LN1@log_access
$LN2@log_access:
; Line 16024
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 4096		; 00001000H
	jae	SHORT $LN20@log_access
	jmp	SHORT $LN21@log_access
$LN20@log_access:
	call	__report_rangecheckfailure
$LN21@log_access:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR log_buf$[rsp+rax], 0
; Line 16069
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 18
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN4@log_access
; Line 16074
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 18
	lea	r9, QWORD PTR fi$[rsp]
	mov	r8d, 4
	mov	rdx, QWORD PTR [rax+rcx+8]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN6@log_access
; Line 16075
	mov	QWORD PTR fi$[rsp+32], 0
$LN6@log_access:
; Line 16077
	jmp	SHORT $LN5@log_access
$LN4@log_access:
; Line 16078
	mov	QWORD PTR fi$[rsp+32], 0
$LN5@log_access:
; Line 16084
	cmp	QWORD PTR fi$[rsp+32], 0
	jne	SHORT $LN7@log_access
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32008], 0
	jne	SHORT $LN7@log_access
; Line 16085
	jmp	$LN1@log_access
$LN7@log_access:
; Line 16089
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR log_buf$[rsp+rax]
	test	eax, eax
	jne	$LN8@log_access
; Line 16093
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2344				; 00000928H
	mov	rcx, rax
	call	localtime
	mov	QWORD PTR tm$[rsp], rax
; Line 16095
	cmp	QWORD PTR tm$[rsp], 0
	je	SHORT $LN9@log_access
; Line 16096
	mov	r9, QWORD PTR tm$[rsp]
	lea	r8, OFFSET FLAT:$SG167896
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR date$[rsp]
	call	strftime
; Line 16097
	jmp	SHORT $LN10@log_access
$LN9@log_access:
; Line 16098
	mov	r8d, 64					; 00000040H
	lea	rdx, OFFSET FLAT:$SG167897
	lea	rcx, QWORD PTR date$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
$LN10@log_access:
; Line 16101
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	QWORD PTR ri$[rsp], rax
; Line 16103
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2320				; 00000910H
	mov	r8, rax
	mov	edx, 50					; 00000032H
	lea	rcx, QWORD PTR src_addr$[rsp]
	call	?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ; sockaddr_to_string
; Line 16104
	lea	rdx, OFFSET FLAT:$SG167898
	mov	rcx, QWORD PTR conn$[rsp]
	call	?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z ; header_val
	mov	QWORD PTR referer$[rsp], rax
; Line 16105
	lea	rdx, OFFSET FLAT:$SG167899
	mov	rcx, QWORD PTR conn$[rsp]
	call	?header_val@@YAPEBDPEBUmg_connection@@PEBD@Z ; header_val
	mov	QWORD PTR user_agent$[rsp], rax
; Line 16107
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2368]
	mov	QWORD PTR tv191[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2448]
	mov	DWORD PTR tv193[rsp], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv189[rsp], rax
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN22@log_access
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv160[rsp], rax
	jmp	SHORT $LN23@log_access
$LN22@log_access:
	lea	rax, OFFSET FLAT:$SG167900
	mov	QWORD PTR tv160[rsp], rax
$LN23@log_access:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN24@log_access
	lea	rax, OFFSET FLAT:$SG167901
	mov	QWORD PTR tv164[rsp], rax
	jmp	SHORT $LN25@log_access
$LN24@log_access:
	lea	rax, OFFSET FLAT:$SG167902
	mov	QWORD PTR tv164[rsp], rax
$LN25@log_access:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN26@log_access
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv169[rsp], rax
	jmp	SHORT $LN27@log_access
$LN26@log_access:
	lea	rax, OFFSET FLAT:$SG167903
	mov	QWORD PTR tv169[rsp], rax
$LN27@log_access:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN28@log_access
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv174[rsp], rax
	jmp	SHORT $LN29@log_access
$LN28@log_access:
	lea	rax, OFFSET FLAT:$SG167904
	mov	QWORD PTR tv174[rsp], rax
$LN29@log_access:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN30@log_access
	lea	rax, OFFSET FLAT:$SG167905
	mov	QWORD PTR tv180[rsp], rax
	jmp	SHORT $LN31@log_access
$LN30@log_access:
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv180[rsp], rax
$LN31@log_access:
	mov	rax, QWORD PTR user_agent$[rsp]
	mov	QWORD PTR [rsp+128], rax
	mov	rax, QWORD PTR referer$[rsp]
	mov	QWORD PTR [rsp+120], rax
	mov	rax, QWORD PTR tv191[rsp]
	mov	QWORD PTR [rsp+112], rax
	mov	eax, DWORD PTR tv193[rsp]
	mov	DWORD PTR [rsp+104], eax
	mov	rax, QWORD PTR tv189[rsp]
	mov	QWORD PTR [rsp+96], rax
	mov	rax, QWORD PTR tv160[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR tv164[rsp]
	mov	QWORD PTR [rsp+80], rax
	mov	rax, QWORD PTR tv169[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR tv174[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR date$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR tv180[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR src_addr$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167906
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4096				; 00001000H
	lea	r8, QWORD PTR log_buf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN8@log_access:
; Line 16128
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32008], 0
	je	SHORT $LN11@log_access
; Line 16129
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32008]
	mov	QWORD PTR tv205[rsp], rax
	lea	rdx, QWORD PTR log_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv205[rsp]
	test	eax, eax
	je	SHORT $LN12@log_access
; Line 16131
	cmp	QWORD PTR fi$[rsp+32], 0
	je	SHORT $LN13@log_access
; Line 16132
	lea	rcx, QWORD PTR fi$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN13@log_access:
; Line 16134
	jmp	$LN1@log_access
$LN12@log_access:
$LN11@log_access:
; Line 16139
	cmp	QWORD PTR fi$[rsp+32], 0
	je	$LN14@log_access
; Line 16140
	mov	DWORD PTR ok$1[rsp], 1
; Line 16141
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 16142
	lea	r8, QWORD PTR log_buf$[rsp]
	lea	rdx, OFFSET FLAT:$SG167912
	mov	rcx, QWORD PTR fi$[rsp+32]
	call	fprintf
	cmp	eax, 1
	jge	SHORT $LN15@log_access
; Line 16143
	mov	DWORD PTR ok$1[rsp], 0
$LN15@log_access:
; Line 16145
	mov	rcx, QWORD PTR fi$[rsp+32]
	call	fflush
	test	eax, eax
	je	SHORT $LN16@log_access
; Line 16146
	mov	DWORD PTR ok$1[rsp], 0
$LN16@log_access:
; Line 16148
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 16149
	lea	rcx, QWORD PTR fi$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
	test	eax, eax
	je	SHORT $LN17@log_access
; Line 16150
	mov	DWORD PTR ok$1[rsp], 0
$LN17@log_access:
; Line 16152
	cmp	DWORD PTR ok$1[rsp], 0
	jne	SHORT $LN18@log_access
; Line 16153
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167916
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16155				; 00003f1bH
	lea	r8, OFFSET FLAT:$SG167917
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN18@log_access:
$LN14@log_access:
$LN1@log_access:
$LN19@log_access:
; Line 16158
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4552				; 000011c8H
	ret	0
?log_access@@YAXPEBUmg_connection@@@Z ENDP		; log_access
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ri$ = 96
i$ = 104
is_websocket_request$ = 108
is_callback_resource$ = 112
is_script_resource$ = 116
is_put_or_delete_request$ = 120
is_webdav_request$ = 124
uri_len$ = 128
new_path$1 = 136
ssl_index$ = 144
tv321 = 148
tv323 = 152
is_found$ = 156
is_template_text_file$ = 160
cors_meth_cfg$2 = 168
cors_hdr_cfg$3 = 176
handler_info$ = 184
buflen$4 = 192
port$5 = 200
handler_type$ = 204
tmp$ = 208
cors_orig_cfg$6 = 216
callback_handler$ = 224
callback_data$ = 232
$T7 = 240
tv73 = 248
cors_acrm$8 = 256
tv291 = 264
cors_acrh$9 = 272
tv311 = 280
auth_handler$ = 288
auth_callback_data$ = 296
ws_close_handler$ = 304
ws_data_handler$ = 312
ws_ready_handler$ = 320
ws_connect_handler$ = 328
tv219 = 336
tv232 = 344
cors_origin$10 = 352
curtime$ = 360
tv298 = 368
webdav_enable$11 = 376
tv383 = 384
tv429 = 392
subprotocols$ = 400
file$ = 408
date$ = 448
path$ = 512
__$ArrayPad$ = 1296
conn$ = 1328
?handle_request@@YAXPEAUmg_connection@@@Z PROC		; handle_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14645
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1320				; 00000528H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 14646
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	QWORD PTR ri$[rsp], rax
; Line 14649
	mov	DWORD PTR is_found$[rsp], 0
	mov	DWORD PTR is_script_resource$[rsp], 0
	mov	DWORD PTR is_websocket_request$[rsp], 0
; Line 14650
	mov	DWORD PTR is_put_or_delete_request$[rsp], 0
	mov	DWORD PTR is_callback_resource$[rsp], 0
; Line 14651
	mov	DWORD PTR is_template_text_file$[rsp], 0
	mov	DWORD PTR is_webdav_request$[rsp], 0
; Line 14653
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 14654
	mov	QWORD PTR callback_handler$[rsp], 0
; Line 14655
	mov	QWORD PTR handler_info$[rsp], 0
; Line 14657
	mov	QWORD PTR ws_connect_handler$[rsp], 0
; Line 14658
	mov	QWORD PTR ws_ready_handler$[rsp], 0
; Line 14659
	mov	QWORD PTR ws_data_handler$[rsp], 0
; Line 14660
	mov	QWORD PTR ws_close_handler$[rsp], 0
; Line 14661
	mov	QWORD PTR callback_data$[rsp], 0
; Line 14662
	mov	QWORD PTR auth_handler$[rsp], 0
; Line 14663
	mov	QWORD PTR auth_callback_data$[rsp], 0
; Line 14665
	xor	ecx, ecx
	call	time
	mov	QWORD PTR curtime$[rsp], rax
; Line 14669
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T7[rsp], rax
	cmp	QWORD PTR $T7[rsp], 780			; 0000030cH
	jae	SHORT $LN166@handle_req
	jmp	SHORT $LN167@handle_req
$LN166@handle_req:
	call	__report_rangecheckfailure
$LN167@handle_req:
	mov	rax, QWORD PTR $T7[rsp]
	mov	BYTE PTR path$[rsp+rax], 0
; Line 14672
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 14677
	mov	edx, 63					; 0000003fH
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	strchr
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+56], rcx
	cmp	QWORD PTR tv73[rsp], 0
	je	SHORT $LN95@handle_req
; Line 14678
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+56]
	inc	rax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+56], rax
$LN95@handle_req:
; Line 14682
	mov	rax, QWORD PTR conn$[rsp]
	movzx	eax, BYTE PTR [rax+2336]
	test	eax, eax
	jne	$LN96@handle_req
	mov	rax, QWORD PTR conn$[rsp]
	movzx	eax, BYTE PTR [rax+2337]
	test	eax, eax
	je	$LN96@handle_req
; Line 14683
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?get_first_ssl_listener_index@@YAHPEBUmg_context@@@Z ; get_first_ssl_listener_index
	mov	DWORD PTR ssl_index$[rsp], eax
; Line 14684
	cmp	DWORD PTR ssl_index$[rsp], 0
	jl	SHORT $LN97@handle_req
; Line 14685
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	movsxd	rcx, DWORD PTR ssl_index$[rsp]
	imul	rcx, rcx, 48				; 00000030H
	mov	rax, QWORD PTR [rax+8]
	movzx	ecx, WORD PTR [rax+rcx+10]
	call	QWORD PTR __imp_ntohs
	movzx	eax, ax
	mov	DWORD PTR port$5[rsp], eax
; Line 14687
	mov	edx, DWORD PTR port$5[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?redirect_to_https_port@@YAXPEAUmg_connection@@H@Z ; redirect_to_https_port
; Line 14688
	jmp	SHORT $LN98@handle_req
$LN97@handle_req:
; Line 14691
	lea	r9, OFFSET FLAT:$SG167569
	lea	r8, OFFSET FLAT:$SG167570
	mov	edx, 503				; 000001f7H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 14695
	lea	rax, OFFSET FLAT:$SG167571
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167572
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 14697				; 00003969H
	lea	r8, OFFSET FLAT:$SG167573
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN98@handle_req:
; Line 14699
	jmp	$LN1@handle_req
$LN96@handle_req:
; Line 14701
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strlen
	mov	DWORD PTR uri_len$[rsp], eax
; Line 14704
	mov	rcx, QWORD PTR conn$[rsp]
	call	?should_decode_url@@YAHPEBUmg_connection@@@Z ; should_decode_url
	test	eax, eax
	je	SHORT $LN99@handle_req
; Line 14705
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?url_decode_in_place@@YAXPEAD@Z		; url_decode_in_place
$LN99@handle_req:
; Line 14709
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN100@handle_req
; Line 14710
	mov	rcx, QWORD PTR conn$[rsp]
	call	?should_decode_query_string@@YAHPEBUmg_connection@@@Z ; should_decode_query_string
	test	eax, eax
	je	SHORT $LN101@handle_req
; Line 14711
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	call	?url_decode_in_place@@YAXPEAD@Z		; url_decode_in_place
$LN101@handle_req:
$LN100@handle_req:
; Line 14721
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?mg_strdup@@YAPEADPEBD@Z		; mg_strdup
	mov	QWORD PTR tmp$[rsp], rax
; Line 14722
	cmp	QWORD PTR tmp$[rsp], 0
	jne	SHORT $LN102@handle_req
; Line 14724
	jmp	$LN1@handle_req
$LN102@handle_req:
; Line 14726
	mov	rcx, QWORD PTR tmp$[rsp]
	call	?remove_dot_segments@@YAXPEAD@Z		; remove_dot_segments
; Line 14727
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR tmp$[rsp]
	mov	QWORD PTR [rax+24], rcx
$LN4@handle_req:
; Line 14730
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@handle_req
; Line 14733
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2320				; 00000910H
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2280]
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	QWORD PTR tv219[rsp], rdx
	mov	r8, QWORD PTR ri$[rsp]
	mov	r8, QWORD PTR [r8+24]
	mov	rdx, rax
	mov	rax, QWORD PTR tv219[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	?set_throttle@@YAHPEBDPEBTusa@@0@Z	; set_throttle
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2452], eax
; Line 14738
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+31984], 0
	je	$LN103@handle_req
; Line 14742
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+31984]
	mov	QWORD PTR tv232[rsp], rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv232[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 14743
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN104@handle_req
; Line 14746
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax+2448], ecx
; Line 14747
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2416], 0
	jne	SHORT $LN106@handle_req
; Line 14748
	mov	rcx, QWORD PTR conn$[rsp]
	call	?discard_unread_request_data@@YAXPEAUmg_connection@@@Z ; discard_unread_request_data
$LN106@handle_req:
$LN7@handle_req:
; Line 14750
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@handle_req
; Line 14751
	jmp	$LN1@handle_req
	jmp	SHORT $LN105@handle_req
$LN104@handle_req:
; Line 14752
	cmp	DWORD PTR i$[rsp], 0
	jne	SHORT $LN107@handle_req
; Line 14754
	jmp	SHORT $LN108@handle_req
$LN107@handle_req:
$LN10@handle_req:
; Line 14756
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@handle_req
; Line 14757
	jmp	$LN1@handle_req
$LN108@handle_req:
$LN105@handle_req:
$LN103@handle_req:
; Line 14767
	lea	rdx, OFFSET FLAT:$SG167585
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	$LN109@handle_req
; Line 14771
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 56				; 00000038H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR cors_meth_cfg$2[rsp], rax
; Line 14773
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 55				; 00000037H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR cors_orig_cfg$6[rsp], rax
; Line 14775
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 152				; 00000098H
	lea	r8, OFFSET FLAT:$SG167586
	mov	rcx, QWORD PTR ri$[rsp]
	mov	edx, DWORD PTR [rcx+144]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cors_origin$10[rsp], rax
; Line 14777
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 152				; 00000098H
	lea	r8, OFFSET FLAT:$SG167587
	mov	rcx, QWORD PTR ri$[rsp]
	mov	edx, DWORD PTR [rcx+144]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cors_acrm$8[rsp], rax
; Line 14786
	cmp	QWORD PTR cors_meth_cfg$2[rsp], 0
	je	$LN110@handle_req
	mov	rax, QWORD PTR cors_meth_cfg$2[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN110@handle_req
	cmp	QWORD PTR cors_orig_cfg$6[rsp], 0
	je	$LN110@handle_req
	mov	rax, QWORD PTR cors_orig_cfg$6[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN110@handle_req
	cmp	QWORD PTR cors_origin$10[rsp], 0
	je	$LN110@handle_req
	cmp	QWORD PTR cors_acrm$8[rsp], 0
	je	$LN110@handle_req
; Line 14789
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 152				; 00000098H
	lea	r8, OFFSET FLAT:$SG167589
	mov	rcx, QWORD PTR ri$[rsp]
	mov	edx, DWORD PTR [rcx+144]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR cors_acrh$9[rsp], rax
; Line 14794
	lea	r8, QWORD PTR curtime$[rsp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR date$[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 14795
	mov	rcx, QWORD PTR conn$[rsp]
	call	?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z ; suggest_connection_header
	mov	QWORD PTR tv298[rsp], rax
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cors_meth_cfg$2[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN168@handle_req
	mov	rax, QWORD PTR cors_acrm$8[rsp]
	mov	QWORD PTR tv291[rsp], rax
	jmp	SHORT $LN169@handle_req
$LN168@handle_req:
	mov	rax, QWORD PTR cors_meth_cfg$2[rsp]
	mov	QWORD PTR tv291[rsp], rax
$LN169@handle_req:
	mov	rax, QWORD PTR tv298[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv291[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR cors_orig_cfg$6[rsp]
	lea	r8, QWORD PTR date$[rsp]
	lea	rdx, OFFSET FLAT:$SG167590
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 14807
	cmp	QWORD PTR cors_acrh$9[rsp], 0
	je	$LN111@handle_req
; Line 14809
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 57				; 00000039H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR cors_hdr_cfg$3[rsp], rax
; Line 14812
	cmp	QWORD PTR cors_hdr_cfg$3[rsp], 0
	je	SHORT $LN112@handle_req
	mov	rax, QWORD PTR cors_hdr_cfg$3[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN112@handle_req
; Line 14818
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cors_hdr_cfg$3[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN170@handle_req
	mov	rax, QWORD PTR cors_acrh$9[rsp]
	mov	QWORD PTR tv311[rsp], rax
	jmp	SHORT $LN171@handle_req
$LN170@handle_req:
	mov	rax, QWORD PTR cors_hdr_cfg$3[rsp]
	mov	QWORD PTR tv311[rsp], rax
$LN171@handle_req:
	mov	r8, QWORD PTR tv311[rsp]
	lea	rdx, OFFSET FLAT:$SG167593
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN112@handle_req:
$LN111@handle_req:
; Line 14824
	lea	rdx, OFFSET FLAT:$SG167594
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 14825
	lea	rdx, OFFSET FLAT:$SG167595
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN13@handle_req:
; Line 14826
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@handle_req
; Line 14827
	jmp	$LN1@handle_req
$LN110@handle_req:
$LN109@handle_req:
; Line 14836
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN172@handle_req
	mov	DWORD PTR tv321[rsp], 1
	jmp	SHORT $LN173@handle_req
$LN172@handle_req:
	mov	DWORD PTR tv321[rsp], 0
$LN173@handle_req:
	mov	eax, DWORD PTR tv321[rsp]
	mov	DWORD PTR is_websocket_request$[rsp], eax
; Line 14838
	cmp	DWORD PTR is_websocket_request$[rsp], 0
	je	SHORT $LN174@handle_req
	mov	DWORD PTR tv323[rsp], 1
	jmp	SHORT $LN175@handle_req
$LN174@handle_req:
	mov	DWORD PTR tv323[rsp], 0
$LN175@handle_req:
	mov	eax, DWORD PTR tv323[rsp]
	mov	DWORD PTR handler_type$[rsp], eax
; Line 14848
	lea	rax, QWORD PTR handler_info$[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR callback_data$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR ws_close_handler$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ws_data_handler$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR ws_ready_handler$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR ws_connect_handler$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR subprotocols$[rsp]
	lea	r8, QWORD PTR callback_handler$[rsp]
	mov	edx, DWORD PTR handler_type$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z ; get_request_handler
	test	eax, eax
	je	SHORT $LN114@handle_req
; Line 14862
	mov	DWORD PTR is_callback_resource$[rsp], 1
; Line 14863
	mov	DWORD PTR is_script_resource$[rsp], 1
; Line 14864
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_put_or_delete_method@@YAHPEBUmg_connection@@@Z ; is_put_or_delete_method
	mov	DWORD PTR is_put_or_delete_request$[rsp], eax
; Line 14867
	mov	DWORD PTR is_webdav_request$[rsp], 0
; Line 14868
	jmp	SHORT $LN115@handle_req
$LN114@handle_req:
$no_callback_resource$176:
; Line 14874
	mov	DWORD PTR is_callback_resource$[rsp], 0
; Line 14875
	lea	rax, QWORD PTR is_template_text_file$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR is_webdav_request$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR is_put_or_delete_request$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR is_websocket_request$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR is_script_resource$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR is_found$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 780				; 0000030cH
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?interpret_uri@@YAXPEAUmg_connection@@PEAD_KPEAUmg_file_stat@@PEAH44444@Z ; interpret_uri
$LN115@handle_req:
; Line 14888
	cmp	DWORD PTR is_webdav_request$[rsp], 0
	je	SHORT $LN116@handle_req
; Line 14890
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 36				; 00000024H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR webdav_enable$11[rsp], rax
; Line 14891
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR webdav_enable$11[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 121				; 00000079H
	je	SHORT $LN117@handle_req
; Line 14892
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+16]
	lea	r8, OFFSET FLAT:$SG167601
	mov	edx, 405				; 00000195H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN16@handle_req:
; Line 14896
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@handle_req
; Line 14897
	jmp	$LN1@handle_req
$LN117@handle_req:
$LN116@handle_req:
; Line 14903
	mov	QWORD PTR [rsp+80], 0
	lea	rax, QWORD PTR auth_callback_data$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR auth_handler$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_request_handler@@YAHPEAUmg_connection@@HPEAP6AH0PEAX@ZPEAPEAUmg_websocket_subprotocols@@PEAP6AHPEBU1@1@ZPEAP6AX01@ZPEAP6AH0HPEAD_K1@ZPEAP6AX41@Z2PEAPEAXPEAPEAUmg_handler_info@@@Z ; get_request_handler
	test	eax, eax
	je	SHORT $LN118@handle_req
; Line 14914
	mov	rax, QWORD PTR auth_handler$[rsp]
	mov	QWORD PTR tv383[rsp], rax
	mov	rdx, QWORD PTR auth_callback_data$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv383[rsp]
	test	eax, eax
	jne	SHORT $LN120@handle_req
; Line 14917
	mov	rdx, QWORD PTR handler_info$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z ; release_handler_ref
$LN19@handle_req:
; Line 14918
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN19@handle_req
; Line 14919
	jmp	$LN1@handle_req
$LN120@handle_req:
; Line 14921
	jmp	$LN119@handle_req
$LN118@handle_req:
; Line 14922
	cmp	DWORD PTR is_put_or_delete_request$[rsp], 0
	je	$LN121@handle_req
	cmp	DWORD PTR is_script_resource$[rsp], 0
	jne	$LN121@handle_req
	cmp	DWORD PTR is_callback_resource$[rsp], 0
	jne	$LN121@handle_req
; Line 14930
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN124@handle_req
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 30
	cmp	QWORD PTR [rax+rcx+8], 0
	jne	SHORT $LN123@handle_req
$LN124@handle_req:
; Line 14937
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+16]
	lea	r8, OFFSET FLAT:$SG167609
	mov	edx, 405				; 00000195H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN22@handle_req:
; Line 14941
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN22@handle_req
; Line 14942
	jmp	$LN1@handle_req
$LN123@handle_req:
; Line 14949
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_authorized_for_put@@YAHPEAUmg_connection@@@Z ; is_authorized_for_put
	test	eax, eax
	jne	SHORT $LN125@handle_req
; Line 14950
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z ; send_authorization_request
$LN25@handle_req:
; Line 14951
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN25@handle_req
; Line 14952
	jmp	$LN1@handle_req
$LN125@handle_req:
; Line 14956
	jmp	SHORT $LN122@handle_req
$LN121@handle_req:
; Line 14960
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?check_authorization@@YAHPEAUmg_connection@@PEBD@Z ; check_authorization
	test	eax, eax
	jne	SHORT $LN126@handle_req
; Line 14961
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z ; send_authorization_request
; Line 14964
	mov	rdx, QWORD PTR handler_info$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z ; release_handler_ref
$LN28@handle_req:
; Line 14965
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN28@handle_req
; Line 14966
	jmp	$LN1@handle_req
$LN126@handle_req:
$LN122@handle_req:
$LN119@handle_req:
; Line 14973
	cmp	DWORD PTR is_callback_resource$[rsp], 0
	je	$LN127@handle_req
; Line 14975
	cmp	DWORD PTR is_websocket_request$[rsp], 0
	jne	$LN128@handle_req
; Line 14976
	mov	rax, QWORD PTR callback_handler$[rsp]
	mov	QWORD PTR tv429[rsp], rax
	mov	rdx, QWORD PTR callback_data$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv429[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 14979
	mov	rdx, QWORD PTR handler_info$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?release_handler_ref@@YAXPEAUmg_connection@@PEAUmg_handler_info@@@Z ; release_handler_ref
; Line 14981
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN130@handle_req
; Line 14985
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax+2448], ecx
; Line 14986
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2416], 0
	jne	SHORT $LN132@handle_req
; Line 14987
	mov	rcx, QWORD PTR conn$[rsp]
	call	?discard_unread_request_data@@YAXPEAUmg_connection@@@Z ; discard_unread_request_data
$LN132@handle_req:
; Line 14989
	jmp	SHORT $LN131@handle_req
$LN130@handle_req:
; Line 15007
	mov	QWORD PTR callback_handler$[rsp], 0
; Line 15018
	jmp	$no_callback_resource$176
$LN131@handle_req:
; Line 15020
	jmp	SHORT $LN129@handle_req
$LN128@handle_req:
; Line 15022
	mov	rax, QWORD PTR callback_data$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR ws_close_handler$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ws_data_handler$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR ws_ready_handler$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ws_connect_handler$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR subprotocols$[rsp]
	mov	r8d, DWORD PTR is_callback_resource$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z ; handle_websocket_request
$LN129@handle_req:
$LN31@handle_req:
; Line 15033
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN31@handle_req
; Line 15034
	jmp	$LN1@handle_req
$LN127@handle_req:
; Line 15039
	cmp	DWORD PTR is_websocket_request$[rsp], 0
	je	$LN133@handle_req
; Line 15041
	cmp	DWORD PTR is_script_resource$[rsp], 0
	je	$LN135@handle_req
; Line 15043
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_in_script_path@@YAHPEBUmg_connection@@PEBD@Z ; is_in_script_path
	test	eax, eax
	je	SHORT $LN137@handle_req
; Line 15045
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32136]
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_websocket_request@@YAXPEAUmg_connection@@PEBDHPEAUmg_websocket_subprotocols@@P6AHPEBU1@PEAX@ZP6AX04@ZP6AH0HPEAD_K4@ZP6AX34@Z4@Z ; handle_websocket_request
; Line 15054
	jmp	SHORT $LN138@handle_req
$LN137@handle_req:
; Line 15056
	lea	r9, OFFSET FLAT:$SG167624
	lea	r8, OFFSET FLAT:$SG167625
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN138@handle_req:
; Line 15058
	jmp	SHORT $LN136@handle_req
$LN135@handle_req:
; Line 15059
	lea	r9, OFFSET FLAT:$SG167626
	lea	r8, OFFSET FLAT:$SG167627
	mov	edx, 404				; 00000194H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN136@handle_req:
$LN34@handle_req:
; Line 15061
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN34@handle_req
; Line 15062
	jmp	$LN1@handle_req
; Line 15063
	jmp	SHORT $LN134@handle_req
$LN133@handle_req:
; Line 15075
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 17
	cmp	QWORD PTR [rax+rcx+8], 0
	jne	SHORT $LN139@handle_req
; Line 15076
	lea	r9, OFFSET FLAT:$SG167629
	lea	r8, OFFSET FLAT:$SG167630
	mov	edx, 404				; 00000194H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN37@handle_req:
; Line 15077
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN37@handle_req
; Line 15078
	jmp	$LN1@handle_req
$LN139@handle_req:
$LN134@handle_req:
; Line 15082
	cmp	DWORD PTR is_script_resource$[rsp], 0
	je	SHORT $LN140@handle_req
; Line 15084
	lea	r8, QWORD PTR file$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ; handle_file_based_request
$LN40@handle_req:
; Line 15085
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN40@handle_req
; Line 15086
	jmp	$LN1@handle_req
$LN140@handle_req:
; Line 15093
	cmp	DWORD PTR is_put_or_delete_request$[rsp], 0
	je	$LN141@handle_req
; Line 15096
	lea	rdx, OFFSET FLAT:$SG167634
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN142@handle_req
; Line 15097
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?put_file@@YAXPEAUmg_connection@@PEBD@Z	; put_file
$LN43@handle_req:
; Line 15098
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN43@handle_req
; Line 15101
	jmp	$LN1@handle_req
$LN142@handle_req:
; Line 15104
	lea	rdx, OFFSET FLAT:$SG167636
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN143@handle_req
; Line 15105
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?delete_file@@YAXPEAUmg_connection@@PEBD@Z ; delete_file
$LN46@handle_req:
; Line 15106
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN46@handle_req
; Line 15109
	jmp	$LN1@handle_req
$LN143@handle_req:
; Line 15112
	lea	rdx, OFFSET FLAT:$SG167638
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN144@handle_req
; Line 15113
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?dav_mkcol@@YAXPEAUmg_connection@@PEBD@Z ; dav_mkcol
$LN49@handle_req:
; Line 15114
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN49@handle_req
; Line 15117
	jmp	$LN1@handle_req
$LN144@handle_req:
; Line 15120
	lea	rdx, OFFSET FLAT:$SG167640
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN145@handle_req
; Line 15121
	xor	r8d, r8d
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z ; dav_move_file
$LN52@handle_req:
; Line 15122
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN52@handle_req
; Line 15125
	jmp	$LN1@handle_req
$LN145@handle_req:
; Line 15127
	lea	rdx, OFFSET FLAT:$SG167642
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN146@handle_req
; Line 15128
	mov	r8d, 1
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?dav_move_file@@YAXPEAUmg_connection@@PEBDH@Z ; dav_move_file
$LN55@handle_req:
; Line 15129
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN55@handle_req
; Line 15132
	jmp	$LN1@handle_req
$LN146@handle_req:
; Line 15135
	lea	rdx, OFFSET FLAT:$SG167644
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN147@handle_req
; Line 15136
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?dav_lock_file@@YAXPEAUmg_connection@@PEBD@Z ; dav_lock_file
$LN58@handle_req:
; Line 15137
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN58@handle_req
; Line 15140
	jmp	$LN1@handle_req
$LN147@handle_req:
; Line 15143
	lea	rdx, OFFSET FLAT:$SG167646
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN148@handle_req
; Line 15144
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?dav_unlock_file@@YAXPEAUmg_connection@@PEBD@Z ; dav_unlock_file
$LN61@handle_req:
; Line 15145
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN61@handle_req
; Line 15148
	jmp	$LN1@handle_req
$LN148@handle_req:
; Line 15151
	lea	rdx, OFFSET FLAT:$SG167648
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN149@handle_req
; Line 15152
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?dav_proppatch@@YAXPEAUmg_connection@@PEBD@Z ; dav_proppatch
$LN64@handle_req:
; Line 15153
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN64@handle_req
; Line 15156
	jmp	$LN1@handle_req
$LN149@handle_req:
; Line 15161
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+16]
	lea	r8, OFFSET FLAT:$SG167649
	mov	edx, 405				; 00000195H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN67@handle_req:
; Line 15165
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN67@handle_req
; Line 15168
	jmp	$LN1@handle_req
$LN141@handle_req:
; Line 15173
	cmp	DWORD PTR is_found$[rsp], 0
	je	SHORT $LN151@handle_req
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?must_hide_file@@YAHPEAUmg_connection@@PEBD@Z ; must_hide_file
	test	eax, eax
	je	SHORT $LN150@handle_req
$LN151@handle_req:
; Line 15174
	lea	r9, OFFSET FLAT:$SG167652
	lea	r8, OFFSET FLAT:$SG167653
	mov	edx, 404				; 00000194H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN70@handle_req:
; Line 15175
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN70@handle_req
; Line 15178
	jmp	$LN1@handle_req
$LN150@handle_req:
; Line 15183
	cmp	DWORD PTR file$[rsp+16], 0
	je	$LN152@handle_req
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strlen
	mov	DWORD PTR uri_len$[rsp], eax
	cmp	DWORD PTR uri_len$[rsp], 0
	jle	$LN152@handle_req
	mov	eax, DWORD PTR uri_len$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	je	$LN152@handle_req
; Line 15186
	mov	QWORD PTR buflen$4[rsp], 1562		; 0000061aH
; Line 15189
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN153@handle_req
; Line 15190
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	strlen
	mov	rcx, QWORD PTR buflen$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buflen$4[rsp], rax
$LN153@handle_req:
; Line 15192
	mov	rcx, QWORD PTR buflen$4[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR new_path$1[rsp], rax
; Line 15193
	cmp	QWORD PTR new_path$1[rsp], 0
	jne	SHORT $LN154@handle_req
; Line 15194
	lea	r8, OFFSET FLAT:$SG167658
	mov	edx, 500				; 000001f4H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
; Line 15195
	jmp	$LN155@handle_req
$LN154@handle_req:
; Line 15196
	mov	rax, QWORD PTR buflen$4[rsp]
	dec	rax
	mov	r8, rax
	mov	rdx, QWORD PTR new_path$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_request_link
; Line 15197
	lea	rdx, OFFSET FLAT:$SG167659
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	strcat
; Line 15198
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN156@handle_req
; Line 15200
	lea	rdx, OFFSET FLAT:$SG167661
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	strcat
; Line 15201
	mov	rax, QWORD PTR ri$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	strcat
$LN156@handle_req:
; Line 15203
	mov	r8d, 301				; 0000012dH
	mov	rdx, QWORD PTR new_path$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_redirect
; Line 15204
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN155@handle_req:
$LN73@handle_req:
; Line 15206
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN73@handle_req
; Line 15209
	jmp	$LN1@handle_req
$LN152@handle_req:
; Line 15214
	lea	rdx, OFFSET FLAT:$SG167663
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN157@handle_req
; Line 15215
	lea	r8, QWORD PTR file$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_propfind@@YAXPEAUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; handle_propfind
$LN76@handle_req:
; Line 15216
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN76@handle_req
; Line 15217
	jmp	$LN1@handle_req
$LN157@handle_req:
; Line 15220
	lea	rdx, OFFSET FLAT:$SG167665
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN158@handle_req
; Line 15226
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_options@@YAXPEAUmg_connection@@@Z	; send_options
$LN79@handle_req:
; Line 15227
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN79@handle_req
; Line 15228
	jmp	$LN1@handle_req
$LN158@handle_req:
; Line 15232
	lea	rdx, OFFSET FLAT:$SG167667
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	je	SHORT $LN159@handle_req
	lea	rdx, OFFSET FLAT:$SG167668
	mov	rax, QWORD PTR ri$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	je	SHORT $LN159@handle_req
; Line 15233
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+16]
	lea	r8, OFFSET FLAT:$SG167669
	mov	edx, 405				; 00000195H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN82@handle_req:
; Line 15237
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN82@handle_req
; Line 15238
	jmp	$LN1@handle_req
$LN159@handle_req:
; Line 15242
	cmp	DWORD PTR file$[rsp+16], 0
	je	SHORT $LN160@handle_req
; Line 15246
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 35				; 00000023H
	lea	rdx, OFFSET FLAT:$SG167673
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN161@handle_req
; Line 15248
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z ; handle_directory_request
; Line 15249
	jmp	SHORT $LN162@handle_req
$LN161@handle_req:
; Line 15250
	lea	r9, OFFSET FLAT:$SG167674
	lea	r8, OFFSET FLAT:$SG167675
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN162@handle_req:
$LN85@handle_req:
; Line 15255
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN85@handle_req
; Line 15256
	jmp	$LN1@handle_req
$LN160@handle_req:
; Line 15260
	cmp	DWORD PTR is_template_text_file$[rsp], 0
	je	SHORT $LN163@handle_req
; Line 15262
	lea	r8, QWORD PTR file$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ; handle_file_based_request
$LN88@handle_req:
; Line 15263
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN88@handle_req
; Line 15266
	jmp	SHORT $LN1@handle_req
$LN163@handle_req:
; Line 15271
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2424], 0
	jne	SHORT $LN164@handle_req
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z ; is_not_modified
	test	eax, eax
	je	SHORT $LN164@handle_req
; Line 15273
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z ; handle_not_modified_static_file_request
$LN91@handle_req:
; Line 15274
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN91@handle_req
; Line 15277
	jmp	SHORT $LN1@handle_req
$LN164@handle_req:
; Line 15282
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	lea	r8, QWORD PTR file$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z ; handle_static_file_request
$LN94@handle_req:
; Line 15283
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN94@handle_req
$LN1@handle_req:
$LN165@handle_req:
; Line 15288
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1320				; 00000528H
	ret	0
?handle_request@@YAXPEAUmg_connection@@@Z ENDP		; handle_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffered_len$ = 32
nread$ = 40
len64$ = 48
content_len$ = 56
n$ = 64
tv65 = 72
left_to_read$1 = 80
tv142 = 88
body$ = 96
conn$ = 128
buf$ = 136
len$ = 144
?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z PROC	; mg_read_inner
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6499
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 6501
	cmp	QWORD PTR len$[rsp], 2147483647		; 7fffffffH
	jbe	SHORT $LN11@mg_read_in
	mov	QWORD PTR tv65[rsp], 2147483647		; 7fffffffH
	jmp	SHORT $LN12@mg_read_in
$LN11@mg_read_in:
	mov	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN12@mg_read_in:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR len64$[rsp], rax
; Line 6507
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@mg_read_in
; Line 6508
	xor	eax, eax
	jmp	$LN1@mg_read_in
$LN2@mg_read_in:
; Line 6513
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2376]
	mov	QWORD PTR content_len$[rsp], rax
; Line 6514
	cmp	QWORD PTR content_len$[rsp], 0
	jge	SHORT $LN3@mg_read_in
; Line 6516
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	mov	QWORD PTR content_len$[rsp], rax
$LN3@mg_read_in:
; Line 6519
	mov	QWORD PTR nread$[rsp], 0
; Line 6520
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR content_len$[rsp]
	cmp	QWORD PTR [rax+2384], rcx
	jge	$LN4@mg_read_in
; Line 6522
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2384]
	mov	rcx, QWORD PTR content_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR left_to_read$1[rsp], rax
; Line 6523
	mov	rax, QWORD PTR len64$[rsp]
	cmp	QWORD PTR left_to_read$1[rsp], rax
	jge	SHORT $LN5@mg_read_in
; Line 6527
	mov	rax, QWORD PTR left_to_read$1[rsp]
	mov	QWORD PTR len64$[rsp], rax
$LN5@mg_read_in:
; Line 6531
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2444]
	mov	rcx, QWORD PTR conn$[rsp]
	movsxd	rcx, DWORD PTR [rcx+2440]
	sub	rax, rcx
	mov	rcx, QWORD PTR conn$[rsp]
	sub	rax, QWORD PTR [rcx+2384]
	mov	QWORD PTR buffered_len$[rsp], rax
; Line 6533
	cmp	QWORD PTR buffered_len$[rsp], 0
	jle	$LN6@mg_read_in
; Line 6534
	mov	rax, QWORD PTR buffered_len$[rsp]
	cmp	QWORD PTR len64$[rsp], rax
	jge	SHORT $LN7@mg_read_in
; Line 6535
	mov	rax, QWORD PTR len64$[rsp]
	mov	QWORD PTR buffered_len$[rsp], rax
$LN7@mg_read_in:
; Line 6537
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+2440]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2400]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2384]
	mov	QWORD PTR body$[rsp], rax
; Line 6538
	mov	r8, QWORD PTR buffered_len$[rsp]
	mov	rdx, QWORD PTR body$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	memcpy
; Line 6539
	mov	rax, QWORD PTR buffered_len$[rsp]
	mov	rcx, QWORD PTR len64$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len64$[rsp], rax
; Line 6540
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2384]
	add	rax, QWORD PTR buffered_len$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2384], rax
; Line 6541
	mov	rax, QWORD PTR buffered_len$[rsp]
	mov	rcx, QWORD PTR nread$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nread$[rsp], rax
; Line 6542
	mov	rax, QWORD PTR buffered_len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf$[rsp], rax
$LN6@mg_read_in:
; Line 6548
	mov	r9d, DWORD PTR len64$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR conn$[rsp]
	xor	ecx, ecx
	call	?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z ; pull_all
	cdqe
	mov	QWORD PTR n$[rsp], rax
	cmp	QWORD PTR n$[rsp], 0
	jl	SHORT $LN8@mg_read_in
; Line 6549
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2384]
	add	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2384], rax
; Line 6550
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR nread$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nread$[rsp], rax
; Line 6551
	jmp	SHORT $LN9@mg_read_in
$LN8@mg_read_in:
; Line 6552
	cmp	QWORD PTR nread$[rsp], 0
	jle	SHORT $LN13@mg_read_in
	mov	rax, QWORD PTR nread$[rsp]
	mov	QWORD PTR tv142[rsp], rax
	jmp	SHORT $LN14@mg_read_in
$LN13@mg_read_in:
	mov	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR tv142[rsp], rax
$LN14@mg_read_in:
	mov	rax, QWORD PTR tv142[rsp]
	mov	QWORD PTR nread$[rsp], rax
$LN9@mg_read_in:
$LN4@mg_read_in:
; Line 6555
	mov	eax, DWORD PTR nread$[rsp]
$LN1@mg_read_in:
; Line 6556
	add	rsp, 120				; 00000078H
	ret	0
?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z ENDP	; mg_read_inner
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 32
__$ArrayPad$ = 8224
conn$ = 8256
?discard_unread_request_data@@YAXPEAUmg_connection@@@Z PROC ; discard_unread_request_data
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6489
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8248				; 00002038H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN2@discard_un:
; Line 6492
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	test	eax, eax
	jle	SHORT $LN3@discard_un
; Line 6493
	jmp	SHORT $LN2@discard_un
$LN3@discard_un:
; Line 6494
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8248				; 00002038H
	ret	0
?discard_unread_request_data@@YAXPEAUmg_connection@@@Z ENDP ; discard_unread_request_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nread$ = 48
n$ = 52
timeout$ = 56
start_time$ = 64
now$ = 72
timeout_ns$ = 80
fp$ = 112
conn$ = 120
buf$ = 128
len$ = 136
?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z PROC ; pull_all
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6444
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 6445
	mov	DWORD PTR nread$[rsp], 0
; Line 6446
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
; Line 6447
	mov	QWORD PTR start_time$[rsp], 0
	mov	QWORD PTR now$[rsp], 0
	mov	QWORD PTR timeout_ns$[rsp], 0
; Line 6449
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN4@pull_all
; Line 6450
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atoi
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN4@pull_all:
; Line 6452
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR timeout$[rsp]
	jb	SHORT $LN5@pull_all
; Line 6453
	mov	eax, 24
	imul	rax, rax, 11
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	xor	edx, edx
	mov	rcx, QWORD PTR [rcx+rax+16]
	call	strtod
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN5@pull_all:
; Line 6456
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR start_time$[rsp], rax
; Line 6457
	movsd	xmm0, QWORD PTR timeout$[rsp]
	mulsd	xmm0, QWORD PTR __real@41cdcd6500000000
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN17@pull_all
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN17@pull_all
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN17@pull_all:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR timeout_ns$[rsp], rax
$LN16@pull_all:
$LN2@pull_all:
; Line 6459
	cmp	DWORD PTR len$[rsp], 0
	jle	$LN3@pull_all
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	$LN3@pull_all
; Line 6460
	movsxd	rax, DWORD PTR nread$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsd	xmm0, QWORD PTR timeout$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR fp$[rsp]
	call	?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z ; pull_inner
	mov	DWORD PTR n$[rsp], eax
; Line 6461
	cmp	DWORD PTR n$[rsp], -2
	jne	SHORT $LN6@pull_all
; Line 6462
	cmp	DWORD PTR nread$[rsp], 0
	jne	SHORT $LN8@pull_all
; Line 6463
	mov	DWORD PTR nread$[rsp], -1
$LN8@pull_all:
; Line 6465
	jmp	SHORT $LN3@pull_all
	jmp	SHORT $LN7@pull_all
$LN6@pull_all:
; Line 6466
	cmp	DWORD PTR n$[rsp], -1
	jne	SHORT $LN9@pull_all
; Line 6468
	movsd	xmm0, QWORD PTR timeout$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN11@pull_all
; Line 6469
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR now$[rsp], rax
; Line 6470
	mov	rax, QWORD PTR start_time$[rsp]
	mov	rcx, QWORD PTR now$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR timeout_ns$[rsp]
	ja	SHORT $LN12@pull_all
; Line 6471
	jmp	$LN2@pull_all
$LN12@pull_all:
$LN11@pull_all:
; Line 6474
	jmp	SHORT $LN3@pull_all
	jmp	SHORT $LN10@pull_all
$LN9@pull_all:
; Line 6475
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN13@pull_all
; Line 6476
	jmp	SHORT $LN3@pull_all
; Line 6477
	jmp	SHORT $LN14@pull_all
$LN13@pull_all:
; Line 6478
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR nread$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nread$[rsp], eax
; Line 6479
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
$LN14@pull_all:
$LN10@pull_all:
$LN7@pull_all:
; Line 6481
	jmp	$LN16@pull_all
$LN3@pull_all:
; Line 6483
	mov	eax, DWORD PTR nread$[rsp]
; Line 6484
	add	rsp, 104				; 00000068H
	ret	0
?pull_all@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADH@Z ENDP ; pull_all
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nread$ = 32
err$ = 36
ssl_pending$1 = 40
pollres$2 = 44
tv73 = 48
tv151 = 52
tv213 = 56
pollres$3 = 60
tv85 = 64
tv157 = 72
tv167 = 80
pfd$4 = 88
pfd$5 = 104
__$ArrayPad$ = 120
fp$ = 144
conn$ = 152
buf$ = 160
len$ = 168
timeout$ = 176
?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z PROC ; pull_inner
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6219
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6220
	mov	DWORD PTR err$[rsp], 0
; Line 6233
	cmp	QWORD PTR fp$[rsp], 0
	je	SHORT $LN8@pull_inner
; Line 6238
	mov	rcx, QWORD PTR fp$[rsp]
	call	_fileno
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	ecx, eax
	call	_read
	mov	DWORD PTR nread$[rsp], eax
; Line 6240
	cmp	DWORD PTR nread$[rsp], 0
	jge	SHORT $LN45@pull_inner
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN46@pull_inner
$LN45@pull_inner:
	mov	DWORD PTR tv73[rsp], 0
$LN46@pull_inner:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR err$[rsp], eax
; Line 6241
	cmp	DWORD PTR nread$[rsp], 0
	jne	SHORT $LN10@pull_inner
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN10@pull_inner
; Line 6243
	mov	eax, -2
	jmp	$LN1@pull_inner
$LN10@pull_inner:
; Line 6244
	jmp	$LN9@pull_inner
$LN8@pull_inner:
; Line 6302
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2288], 0
	je	$LN11@pull_inner
; Line 6307
	mov	eax, 24
	imul	rax, rax, 18
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv85[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv85[rsp]
	mov	DWORD PTR ssl_pending$1[rsp], eax
	cmp	DWORD PTR ssl_pending$1[rsp], 0
	jle	SHORT $LN13@pull_inner
; Line 6311
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR ssl_pending$1[rsp], eax
	jle	SHORT $LN15@pull_inner
; Line 6312
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR ssl_pending$1[rsp], eax
$LN15@pull_inner:
; Line 6314
	mov	DWORD PTR pollres$2[rsp], 1
; Line 6315
	jmp	$LN14@pull_inner
$LN13@pull_inner:
; Line 6316
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2296]
	mov	QWORD PTR pfd$4[rsp+rax], rcx
; Line 6317
	mov	eax, 16
	imul	rax, rax, 0
	mov	ecx, 1
	mov	WORD PTR pfd$4[rsp+rax+8], cx
; Line 6318
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 40					; 00000028H
	movsd	xmm0, QWORD PTR timeout$[rsp]
	mulsd	xmm0, QWORD PTR __real@408f400000000000
	cvttsd2si ecx, xmm0
	mov	r9, rax
	mov	r8d, ecx
	mov	edx, 1
	lea	rcx, QWORD PTR pfd$4[rsp]
	call	?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z	; mg_poll
	mov	DWORD PTR pollres$2[rsp], eax
; Line 6322
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN16@pull_inner
; Line 6323
	mov	eax, -2
	jmp	$LN1@pull_inner
$LN16@pull_inner:
$LN14@pull_inner:
; Line 6326
	cmp	DWORD PTR pollres$2[rsp], 0
	jle	$LN17@pull_inner
; Line 6327
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 6328
	mov	eax, 24
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv157[rsp], rax
	cmp	DWORD PTR ssl_pending$1[rsp], 0
	jle	SHORT $LN47@pull_inner
	mov	eax, DWORD PTR ssl_pending$1[rsp]
	mov	DWORD PTR tv151[rsp], eax
	jmp	SHORT $LN48@pull_inner
$LN47@pull_inner:
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv151[rsp], eax
$LN48@pull_inner:
	mov	r8d, DWORD PTR tv151[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv157[rsp]
	mov	DWORD PTR nread$[rsp], eax
; Line 6330
	cmp	DWORD PTR nread$[rsp], 0
	jg	$LN19@pull_inner
; Line 6331
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, DWORD PTR nread$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2288]
	call	QWORD PTR tv167[rsp]
	mov	DWORD PTR err$[rsp], eax
; Line 6332
	cmp	DWORD PTR err$[rsp], 5
	jne	SHORT $LN21@pull_inner
	cmp	DWORD PTR nread$[rsp], -1
	jne	SHORT $LN21@pull_inner
; Line 6333
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR err$[rsp], eax
; Line 6334
	jmp	SHORT $LN22@pull_inner
$LN21@pull_inner:
; Line 6335
	cmp	DWORD PTR err$[rsp], 2
	je	SHORT $LN25@pull_inner
	cmp	DWORD PTR err$[rsp], 3
	jne	SHORT $LN23@pull_inner
$LN25@pull_inner:
; Line 6336
	mov	DWORD PTR nread$[rsp], 0
; Line 6337
	jmp	SHORT $LN24@pull_inner
$LN23@pull_inner:
$LN4@pull_inner:
; Line 6339
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@pull_inner
; Line 6340
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 6341
	mov	eax, -2
	jmp	$LN1@pull_inner
$LN24@pull_inner:
$LN22@pull_inner:
; Line 6343
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 6344
	jmp	SHORT $LN20@pull_inner
$LN19@pull_inner:
; Line 6345
	mov	DWORD PTR err$[rsp], 0
$LN20@pull_inner:
; Line 6346
	jmp	SHORT $LN18@pull_inner
$LN17@pull_inner:
; Line 6347
	cmp	DWORD PTR pollres$2[rsp], 0
	jge	SHORT $LN26@pull_inner
; Line 6349
	mov	eax, -2
	jmp	$LN1@pull_inner
; Line 6350
	jmp	SHORT $LN27@pull_inner
$LN26@pull_inner:
; Line 6352
	mov	DWORD PTR nread$[rsp], 0
$LN27@pull_inner:
$LN18@pull_inner:
; Line 6356
	jmp	$LN12@pull_inner
$LN11@pull_inner:
; Line 6360
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2296]
	mov	QWORD PTR pfd$5[rsp+rax], rcx
; Line 6361
	mov	eax, 16
	imul	rax, rax, 0
	mov	ecx, 1
	mov	WORD PTR pfd$5[rsp+rax+8], cx
; Line 6362
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	add	rax, 40					; 00000028H
	movsd	xmm0, QWORD PTR timeout$[rsp]
	mulsd	xmm0, QWORD PTR __real@408f400000000000
	cvttsd2si ecx, xmm0
	mov	r9, rax
	mov	r8d, ecx
	mov	edx, 1
	lea	rcx, QWORD PTR pfd$5[rsp]
	call	?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z	; mg_poll
	mov	DWORD PTR pollres$3[rsp], eax
; Line 6366
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN28@pull_inner
; Line 6367
	mov	eax, -2
	jmp	$LN1@pull_inner
$LN28@pull_inner:
; Line 6369
	cmp	DWORD PTR pollres$3[rsp], 0
	jle	SHORT $LN29@pull_inner
; Line 6370
	xor	r9d, r9d
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2296]
	call	QWORD PTR __imp_recv
	mov	DWORD PTR nread$[rsp], eax
; Line 6371
	cmp	DWORD PTR nread$[rsp], 0
	jge	SHORT $LN49@pull_inner
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR tv213[rsp], eax
	jmp	SHORT $LN50@pull_inner
$LN49@pull_inner:
	mov	DWORD PTR tv213[rsp], 0
$LN50@pull_inner:
	mov	eax, DWORD PTR tv213[rsp]
	mov	DWORD PTR err$[rsp], eax
; Line 6372
	cmp	DWORD PTR nread$[rsp], 0
	jg	SHORT $LN31@pull_inner
; Line 6374
	mov	eax, -2
	jmp	$LN1@pull_inner
$LN31@pull_inner:
; Line 6375
	jmp	SHORT $LN30@pull_inner
$LN29@pull_inner:
; Line 6376
	cmp	DWORD PTR pollres$3[rsp], 0
	jge	SHORT $LN32@pull_inner
; Line 6378
	mov	eax, -2
	jmp	$LN1@pull_inner
; Line 6379
	jmp	SHORT $LN33@pull_inner
$LN32@pull_inner:
; Line 6381
	mov	DWORD PTR nread$[rsp], 0
$LN33@pull_inner:
$LN30@pull_inner:
$LN12@pull_inner:
$LN9@pull_inner:
; Line 6385
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN34@pull_inner
; Line 6386
	mov	eax, -2
	jmp	SHORT $LN1@pull_inner
$LN34@pull_inner:
; Line 6389
	cmp	DWORD PTR nread$[rsp], 0
	jg	SHORT $LN36@pull_inner
	cmp	DWORD PTR nread$[rsp], 0
	jne	SHORT $LN35@pull_inner
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN35@pull_inner
$LN36@pull_inner:
; Line 6391
	mov	eax, DWORD PTR nread$[rsp]
	jmp	SHORT $LN1@pull_inner
$LN35@pull_inner:
; Line 6394
	cmp	DWORD PTR nread$[rsp], 0
	jge	SHORT $LN37@pull_inner
; Line 6397
	cmp	DWORD PTR err$[rsp], 10035		; 00002733H
	jne	SHORT $LN38@pull_inner
; Line 6400
	mov	eax, -2
	jmp	SHORT $LN1@pull_inner
	jmp	SHORT $LN39@pull_inner
$LN38@pull_inner:
; Line 6401
	cmp	DWORD PTR err$[rsp], 10060		; 0000274cH
	jne	SHORT $LN40@pull_inner
; Line 6404
	xor	eax, eax
	jmp	SHORT $LN1@pull_inner
	jmp	SHORT $LN41@pull_inner
$LN40@pull_inner:
; Line 6405
	cmp	DWORD PTR err$[rsp], 10053		; 00002745H
	jne	SHORT $LN42@pull_inner
; Line 6407
	mov	eax, -2
	jmp	SHORT $LN1@pull_inner
; Line 6408
	jmp	SHORT $LN43@pull_inner
$LN42@pull_inner:
$LN7@pull_inner:
; Line 6409
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@pull_inner
; Line 6410
	mov	eax, -2
	jmp	SHORT $LN1@pull_inner
$LN43@pull_inner:
$LN41@pull_inner:
$LN39@pull_inner:
$LN37@pull_inner:
; Line 6438
	mov	eax, -1
$LN1@pull_inner:
; Line 6439
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?pull_inner@@YAHPEAU_iobuf@@PEAUmg_connection@@PEADHN@Z ENDP ; pull_inner
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nwritten$ = 64
n$ = 68
timeout$ = 72
ctx$ = 96
fp$ = 104
sock$ = 112
ssl$ = 120
buf$ = 128
len$ = 136
?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z PROC ; push_all
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6172
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 6173
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
; Line 6174
	mov	DWORD PTR nwritten$[rsp], 0
; Line 6176
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN4@push_all
; Line 6177
	mov	eax, -1
	jmp	$LN1@push_all
$LN4@push_all:
; Line 6180
	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rcx+rax+32152], 0
	je	SHORT $LN5@push_all
; Line 6181
	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+32152]
	call	atoi
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN5@push_all:
; Line 6183
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR timeout$[rsp]
	jb	SHORT $LN6@push_all
; Line 6184
	mov	eax, 24
	imul	rax, rax, 11
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	xor	edx, edx
	mov	rcx, QWORD PTR [rcx+rax+16]
	call	strtod
	divsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR timeout$[rsp], xmm0
$LN6@push_all:
$LN2@push_all:
; Line 6188
	cmp	DWORD PTR len$[rsp], 0
	jle	$LN3@push_all
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	$LN3@push_all
; Line 6189
	movsxd	rax, DWORD PTR nwritten$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsd	xmm0, QWORD PTR timeout$[rsp]
	movsd	QWORD PTR [rsp+48], xmm0
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ssl$[rsp]
	mov	r8, QWORD PTR sock$[rsp]
	mov	rdx, QWORD PTR fp$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z ; push_inner
	mov	DWORD PTR n$[rsp], eax
; Line 6190
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN7@push_all
; Line 6191
	cmp	DWORD PTR nwritten$[rsp], 0
	jne	SHORT $LN9@push_all
; Line 6192
	mov	DWORD PTR nwritten$[rsp], -1
$LN9@push_all:
; Line 6194
	jmp	SHORT $LN3@push_all
	jmp	SHORT $LN8@push_all
$LN7@push_all:
; Line 6195
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN10@push_all
; Line 6196
	jmp	SHORT $LN3@push_all
; Line 6197
	jmp	SHORT $LN11@push_all
$LN10@push_all:
; Line 6198
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR nwritten$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nwritten$[rsp], eax
; Line 6199
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
$LN11@push_all:
$LN8@push_all:
; Line 6201
	jmp	$LN2@push_all
$LN3@push_all:
; Line 6203
	mov	eax, DWORD PTR nwritten$[rsp]
$LN1@push_all:
; Line 6204
	add	rsp, 88					; 00000058H
	ret	0
?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z ENDP ; push_all
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
err$ = 36
tv155 = 40
now$ = 48
ms_wait$ = 56
pollres$1 = 60
start$ = 64
timeout_ns$ = 72
tv82 = 80
tv91 = 88
pfd$2 = 96
__$ArrayPad$ = 112
ctx$ = 144
fp$ = 152
sock$ = 160
ssl$ = 168
buf$ = 176
len$ = 184
timeout$ = 192
?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z PROC ; push_inner
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6007
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6008
	mov	QWORD PTR start$[rsp], 0
	mov	QWORD PTR now$[rsp], 0
	mov	QWORD PTR timeout_ns$[rsp], 0
; Line 6010
	mov	DWORD PTR ms_wait$[rsp], 2000		; 000007d0H
; Line 6018
	movsd	xmm0, QWORD PTR timeout$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN11@push_inner
; Line 6019
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR now$[rsp], rax
; Line 6020
	mov	rax, QWORD PTR now$[rsp]
	mov	QWORD PTR start$[rsp], rax
; Line 6021
	movsd	xmm0, QWORD PTR timeout$[rsp]
	mulsd	xmm0, QWORD PTR __real@41cdcd6500000000
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN41@push_inner
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN41@push_inner
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN41@push_inner:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR timeout_ns$[rsp], rax
$LN11@push_inner:
; Line 6024
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN12@push_inner
; Line 6025
	mov	eax, -2
	jmp	$LN1@push_inner
$LN12@push_inner:
$LN2@push_inner:
; Line 6055
	cmp	QWORD PTR ssl$[rsp], 0
	je	$LN13@push_inner
; Line 6056
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 6057
	mov	eax, 24
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv82[rsp], rax
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv82[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 6058
	cmp	DWORD PTR n$[rsp], 0
	jg	$LN15@push_inner
; Line 6059
	mov	eax, 24
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv91[rsp], rax
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR ssl$[rsp]
	call	QWORD PTR tv91[rsp]
	mov	DWORD PTR err$[rsp], eax
; Line 6060
	cmp	DWORD PTR err$[rsp], 5
	jne	SHORT $LN17@push_inner
	cmp	DWORD PTR n$[rsp], -1
	jne	SHORT $LN17@push_inner
; Line 6061
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR err$[rsp], eax
; Line 6062
	jmp	SHORT $LN18@push_inner
$LN17@push_inner:
; Line 6063
	cmp	DWORD PTR err$[rsp], 2
	je	SHORT $LN21@push_inner
	cmp	DWORD PTR err$[rsp], 3
	jne	SHORT $LN19@push_inner
$LN21@push_inner:
; Line 6064
	mov	DWORD PTR n$[rsp], 0
; Line 6065
	jmp	SHORT $LN20@push_inner
$LN19@push_inner:
$LN7@push_inner:
; Line 6066
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@push_inner
; Line 6067
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 6068
	mov	eax, -2
	jmp	$LN1@push_inner
$LN20@push_inner:
$LN18@push_inner:
; Line 6070
	mov	eax, 24
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?crypto_sw@@3PAUssl_func@@A
	call	QWORD PTR [rcx+rax+16]
; Line 6071
	jmp	SHORT $LN16@push_inner
$LN15@push_inner:
; Line 6072
	mov	DWORD PTR err$[rsp], 0
$LN16@push_inner:
; Line 6074
	jmp	$LN14@push_inner
$LN13@push_inner:
; Line 6077
	cmp	QWORD PTR fp$[rsp], 0
	je	SHORT $LN22@push_inner
; Line 6078
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR fp$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR buf$[rsp]
	call	fwrite
	mov	DWORD PTR n$[rsp], eax
; Line 6079
	mov	rcx, QWORD PTR fp$[rsp]
	call	ferror
	test	eax, eax
	je	SHORT $LN24@push_inner
; Line 6080
	mov	DWORD PTR n$[rsp], -1
; Line 6081
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR err$[rsp], eax
; Line 6082
	jmp	SHORT $LN25@push_inner
$LN24@push_inner:
; Line 6083
	mov	DWORD PTR err$[rsp], 0
$LN25@push_inner:
; Line 6085
	jmp	SHORT $LN23@push_inner
$LN22@push_inner:
; Line 6086
	xor	r9d, r9d
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_send
	mov	DWORD PTR n$[rsp], eax
; Line 6087
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN39@push_inner
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR tv155[rsp], eax
	jmp	SHORT $LN40@push_inner
$LN39@push_inner:
	mov	DWORD PTR tv155[rsp], 0
$LN40@push_inner:
	mov	eax, DWORD PTR tv155[rsp]
	mov	DWORD PTR err$[rsp], eax
; Line 6089
	cmp	DWORD PTR err$[rsp], 10035		; 00002733H
	jne	SHORT $LN26@push_inner
; Line 6090
	mov	DWORD PTR err$[rsp], 0
; Line 6091
	mov	DWORD PTR n$[rsp], 0
$LN26@push_inner:
; Line 6099
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN27@push_inner
; Line 6101
	mov	eax, -2
	jmp	$LN1@push_inner
$LN27@push_inner:
$LN23@push_inner:
$LN14@push_inner:
; Line 6105
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN28@push_inner
; Line 6106
	mov	eax, -2
	jmp	$LN1@push_inner
$LN28@push_inner:
; Line 6109
	cmp	DWORD PTR n$[rsp], 0
	jg	SHORT $LN30@push_inner
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN29@push_inner
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN29@push_inner
$LN30@push_inner:
; Line 6111
	mov	eax, DWORD PTR n$[rsp]
	jmp	$LN1@push_inner
$LN29@push_inner:
; Line 6113
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN31@push_inner
$LN10@push_inner:
; Line 6115
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@push_inner
; Line 6123
	mov	eax, -2
	jmp	$LN1@push_inner
$LN31@push_inner:
; Line 6129
	cmp	QWORD PTR fp$[rsp], 0
	je	SHORT $LN32@push_inner
; Line 6132
	mov	ecx, 5
	call	QWORD PTR __imp_Sleep
; Line 6133
	jmp	SHORT $LN33@push_inner
$LN32@push_inner:
; Line 6138
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sock$[rsp]
	mov	QWORD PTR pfd$2[rsp+rax], rcx
; Line 6139
	mov	eax, 16
	imul	rax, rax, 0
	mov	ecx, 4
	mov	WORD PTR pfd$2[rsp+rax+8], cx
; Line 6140
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 40					; 00000028H
	mov	r9, rax
	mov	r8d, DWORD PTR ms_wait$[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR pfd$2[rsp]
	call	?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z	; mg_poll
	mov	DWORD PTR pollres$1[rsp], eax
; Line 6141
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN34@push_inner
; Line 6142
	mov	eax, -2
	jmp	SHORT $LN1@push_inner
$LN34@push_inner:
; Line 6144
	cmp	DWORD PTR pollres$1[rsp], 0
	jle	SHORT $LN35@push_inner
; Line 6145
	jmp	$LN2@push_inner
$LN35@push_inner:
$LN33@push_inner:
; Line 6149
	movsd	xmm0, QWORD PTR timeout$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN36@push_inner
; Line 6150
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR now$[rsp], rax
; Line 6151
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR now$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR timeout_ns$[rsp]
	jbe	SHORT $LN37@push_inner
; Line 6153
	jmp	SHORT $LN3@push_inner
$LN37@push_inner:
$LN36@push_inner:
; Line 6156
	jmp	$LN2@push_inner
$LN3@push_inner:
; Line 6161
	mov	eax, -1
$LN1@push_inner:
; Line 6162
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?push_inner@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDHN@Z ENDP ; push_inner
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ms_now$ = 32
check_pollerr$ = 36
result$1 = 40
pfd$ = 64
n$ = 72
milliseconds$ = 80
stop_flag$ = 88
?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z PROC		; mg_poll
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5942
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5946
	mov	DWORD PTR ms_now$[rsp], 2000		; 000007d0H
; Line 5948
	mov	DWORD PTR check_pollerr$[rsp], 0
; Line 5949
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN5@mg_poll
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN5@mg_poll
; Line 5951
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	or	eax, 8
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	WORD PTR [rdx+rcx+8], ax
; Line 5952
	mov	DWORD PTR check_pollerr$[rsp], 1
$LN5@mg_poll:
$LN4@mg_poll:
; Line 5958
	mov	rax, QWORD PTR stop_flag$[rsp]
	mov	eax, DWORD PTR [rax]
	test	eax, eax
	je	SHORT $LN6@mg_poll
; Line 5960
	mov	eax, -2
	jmp	$LN1@mg_poll
$LN6@mg_poll:
; Line 5963
	cmp	DWORD PTR milliseconds$[rsp], 0
	jl	SHORT $LN7@mg_poll
	mov	eax, DWORD PTR ms_now$[rsp]
	cmp	DWORD PTR milliseconds$[rsp], eax
	jge	SHORT $LN7@mg_poll
; Line 5964
	mov	eax, DWORD PTR milliseconds$[rsp]
	mov	DWORD PTR ms_now$[rsp], eax
$LN7@mg_poll:
; Line 5967
	mov	r8d, DWORD PTR ms_now$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pfd$[rsp]
	call	?poll@@YAHPEAUmg_pollfd@@IH@Z		; poll
	mov	DWORD PTR result$1[rsp], eax
; Line 5968
	cmp	DWORD PTR result$1[rsp], 0
	je	SHORT $LN8@mg_poll
; Line 5972
	cmp	DWORD PTR check_pollerr$[rsp], 0
	je	SHORT $LN9@mg_poll
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	and	eax, 13
	cmp	eax, 8
	jne	SHORT $LN9@mg_poll
; Line 5975
	mov	eax, -1
	jmp	SHORT $LN1@mg_poll
$LN9@mg_poll:
; Line 5977
	mov	eax, DWORD PTR result$1[rsp]
	jmp	SHORT $LN1@mg_poll
$LN8@mg_poll:
; Line 5981
	cmp	DWORD PTR milliseconds$[rsp], 0
	jle	SHORT $LN10@mg_poll
; Line 5982
	mov	eax, DWORD PTR ms_now$[rsp]
	mov	ecx, DWORD PTR milliseconds$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR milliseconds$[rsp], eax
$LN10@mg_poll:
; Line 5985
	cmp	DWORD PTR milliseconds$[rsp], 0
	jg	$LN4@mg_poll
; Line 5988
	xor	eax, eax
$LN1@mg_poll:
; Line 5989
	add	rsp, 56					; 00000038H
	ret	0
?mg_poll@@YAHPEAUmg_pollfd@@IHPEDH@Z ENDP		; mg_poll
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
now$ = 32
?get_random@@YA_KXZ PROC				; get_random
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5910
	sub	rsp, 56					; 00000038H
; Line 5913
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR now$[rsp], rax
; Line 5915
	cmp	QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA, 0
	jne	SHORT $LN2@get_random
; Line 5918
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA, rax
; Line 5919
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR ?lcg@?1??get_random@@YA_KXZ@4_KA, rax
; Line 5920
	jmp	SHORT $LN3@get_random
$LN2@get_random:
; Line 5922
	mov	rax, QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA
	shr	rax, 1
	mov	rcx, QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA
	shr	rcx, 1
	mov	rdx, QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA
	xor	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA
	shr	rdx, 3
	xor	rcx, rdx
	mov	rdx, QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA
	shr	rdx, 4
	xor	rcx, rdx
	and	rcx, 1
	shl	rcx, 63					; 0000003fH
	or	rax, rcx
	mov	QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA, rax
; Line 5925
	mov	rax, 6364136223846793005		; 5851f42d4c957f2dH
	mov	rcx, QWORD PTR ?lcg@?1??get_random@@YA_KXZ@4_KA
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, 1442695040888963407		; 14057b7ef767814fH
	add	rax, rcx
	mov	QWORD PTR ?lcg@?1??get_random@@YA_KXZ@4_KA, rax
$LN3@get_random:
; Line 5933
	mov	rax, QWORD PTR ?lcg@?1??get_random@@YA_KXZ@4_KA
	mov	rcx, QWORD PTR ?lfsr@?1??get_random@@YA_KXZ@4_KA
	xor	rcx, rax
	mov	rax, rcx
	xor	rax, QWORD PTR now$[rsp]
; Line 5934
	add	rsp, 56					; 00000038H
	ret	0
?get_random@@YA_KXZ ENDP				; get_random
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
non_blocking$ = 32
sock$ = 64
?set_non_blocking_mode@@YAH_K@Z PROC			; set_non_blocking_mode
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5639
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5640
	mov	DWORD PTR non_blocking$[rsp], 1
; Line 5641
	lea	r8, QWORD PTR non_blocking$[rsp]
	mov	edx, -2147195266			; ffffffff8004667eH
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_ioctlsocket
; Line 5642
	add	rsp, 56					; 00000038H
	ret	0
?set_non_blocking_mode@@YAH_K@Z ENDP			; set_non_blocking_mode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
non_blocking$ = 32
sock$ = 64
?set_blocking_mode@@YAH_K@Z PROC			; set_blocking_mode
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5631
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5632
	mov	DWORD PTR non_blocking$[rsp], 0
; Line 5633
	lea	r8, QWORD PTR non_blocking$[rsp]
	mov	edx, -2147195266			; ffffffff8004667eH
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_ioctlsocket
; Line 5634
	add	rsp, 56					; 00000038H
	ret	0
?set_blocking_mode@@YAH_K@Z ENDP			; set_blocking_mode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
truncated$ = 80
me$ = 88
interp$ = 96
interp_arg$ = 104
$T1 = 112
$T2 = 120
$T3 = 128
pi$ = 136
si$ = 160
file$ = 272
buf$ = 320
cmdline$ = 1104
full_dir$ = 1888
__$ArrayPad$ = 2672
conn$ = 2704
prog$ = 2712
envblk$ = 2720
envp$ = 2728
fdin$ = 2736
fdout$ = 2744
fderr$ = 2752
dir$ = 2760
cgi_config_idx$ = 2768
?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z PROC ; spawn_process
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5465
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2688				; 00000a80H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5468
	mov	QWORD PTR interp_arg$[rsp], 0
; Line 5471
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 5473
	lea	rax, QWORD PTR pi$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
; Line 5477
	mov	r8d, 104				; 00000068H
	xor	edx, edx
	lea	rcx, QWORD PTR si$[rsp]
	call	memset
; Line 5478
	mov	DWORD PTR si$[rsp], 104			; 00000068H
; Line 5480
	mov	DWORD PTR si$[rsp+60], 257		; 00000101H
; Line 5481
	xor	eax, eax
	mov	WORD PTR si$[rsp+64], ax
; Line 5483
	call	QWORD PTR __imp_GetCurrentProcess
	mov	QWORD PTR me$[rsp], rax
; Line 5484
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fdin$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	_get_osfhandle
	mov	DWORD PTR [rsp+48], 2
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR si$[rsp+80]
	mov	r8, QWORD PTR me$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR me$[rsp]
	call	QWORD PTR __imp_DuplicateHandle
; Line 5491
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fdout$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	_get_osfhandle
	mov	DWORD PTR [rsp+48], 2
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR si$[rsp+88]
	mov	r8, QWORD PTR me$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR me$[rsp]
	call	QWORD PTR __imp_DuplicateHandle
; Line 5498
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fderr$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	_get_osfhandle
	mov	DWORD PTR [rsp+48], 2
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR si$[rsp+96]
	mov	r8, QWORD PTR me$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR me$[rsp]
	call	QWORD PTR __imp_DuplicateHandle
; Line 5509
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fdin$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	_get_osfhandle
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	QWORD PTR __imp_SetHandleInformation
; Line 5512
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fdout$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	_get_osfhandle
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	QWORD PTR __imp_SetHandleInformation
; Line 5515
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fderr$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	_get_osfhandle
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	QWORD PTR __imp_SetHandleInformation
; Line 5521
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 22
	movsxd	rcx, ecx
	mov	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR interp$[rsp], rax
; Line 5522
	cmp	QWORD PTR interp$[rsp], 0
	je	SHORT $LN5@spawn_proc
; Line 5525
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 23
	movsxd	rcx, ecx
	mov	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR interp_arg$[rsp], rax
; Line 5527
	jmp	$LN6@spawn_proc
$LN5@spawn_proc:
; Line 5530
	mov	QWORD PTR $T1[rsp], 1
	cmp	QWORD PTR $T1[rsp], 780			; 0000030cH
	jae	SHORT $LN21@spawn_proc
	jmp	SHORT $LN22@spawn_proc
$LN21@spawn_proc:
	call	__report_rangecheckfailure
$LN22@spawn_proc:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR buf$[rsp+rax], 0
; Line 5533
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR dir$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG162993
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR cmdline$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 5536
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN7@spawn_proc
; Line 5537
	mov	QWORD PTR pi$[rsp], -1
; Line 5538
	jmp	$LN8@spawn_proc
	jmp	$spawn_cleanup$27
$LN7@spawn_proc:
; Line 5542
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 1
	lea	rdx, QWORD PTR cmdline$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	je	SHORT $LN9@spawn_proc
; Line 5545
	lea	r8, QWORD PTR file$[rsp]
	mov	edx, 780				; 0000030cH
	lea	rcx, QWORD PTR buf$[rsp]
	call	?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z	; mg_fgets
; Line 5546
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 5547
	mov	eax, 1
	imul	rax, rax, 779				; 0000030bH
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 780			; 0000030cH
	jae	SHORT $LN23@spawn_proc
	jmp	SHORT $LN24@spawn_proc
$LN23@spawn_proc:
	call	__report_rangecheckfailure
$LN24@spawn_proc:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
$LN9@spawn_proc:
; Line 5550
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR buf$[rsp+rax]
	cmp	eax, 35					; 00000023H
	jne	SHORT $LN10@spawn_proc
	mov	eax, 1
	imul	rax, rax, 1
	movsx	eax, BYTE PTR buf$[rsp+rax]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN10@spawn_proc
; Line 5551
	lea	rax, QWORD PTR buf$[rsp+2]
	mov	rcx, rax
	call	?trim_trailing_whitespaces@@YAXPEAD@Z	; trim_trailing_whitespaces
; Line 5552
	jmp	SHORT $LN11@spawn_proc
$LN10@spawn_proc:
; Line 5553
	mov	eax, 1
	imul	rax, rax, 2
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 780			; 0000030cH
	jae	SHORT $LN25@spawn_proc
	jmp	SHORT $LN26@spawn_proc
$LN25@spawn_proc:
	call	__report_rangecheckfailure
$LN26@spawn_proc:
	mov	rax, QWORD PTR $T3[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
$LN11@spawn_proc:
; Line 5555
	lea	rax, QWORD PTR buf$[rsp+2]
	mov	QWORD PTR interp$[rsp], rax
$LN6@spawn_proc:
; Line 5558
	xor	r9d, r9d
	lea	r8, QWORD PTR full_dir$[rsp]
	mov	edx, 780				; 0000030cH
	mov	rcx, QWORD PTR dir$[rsp]
	call	QWORD PTR __imp_GetFullPathNameA
; Line 5560
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR interp$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN12@spawn_proc
; Line 5562
	cmp	QWORD PTR interp_arg$[rsp], 0
	je	SHORT $LN14@spawn_proc
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR interp_arg$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN14@spawn_proc
; Line 5563
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR full_dir$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR interp_arg$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR interp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG163003
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR cmdline$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 5572
	jmp	SHORT $LN15@spawn_proc
$LN14@spawn_proc:
; Line 5573
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR full_dir$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR interp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG163004
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR cmdline$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN15@spawn_proc:
; Line 5582
	jmp	SHORT $LN13@spawn_proc
$LN12@spawn_proc:
; Line 5584
	mov	rax, QWORD PTR prog$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR full_dir$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG163005
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 780				; 0000030cH
	lea	r8, QWORD PTR cmdline$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN13@spawn_proc:
; Line 5593
	cmp	DWORD PTR truncated$[rsp], 0
	je	SHORT $LN16@spawn_proc
; Line 5594
	mov	QWORD PTR pi$[rsp], -1
; Line 5595
	jmp	$LN17@spawn_proc
	jmp	$spawn_cleanup$27
$LN16@spawn_proc:
$LN4@spawn_proc:
; Line 5598
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@spawn_proc
; Line 5609
	lea	rax, QWORD PTR pi$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR si$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], 0
	mov	rax, QWORD PTR envblk$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	DWORD PTR [rsp+40], 512			; 00000200H
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, QWORD PTR cmdline$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateProcessA
	test	eax, eax
	jne	SHORT $LN18@spawn_proc
; Line 5610
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR [rsp+56], eax
	lea	rax, QWORD PTR cmdline$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG163009
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG163010
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5611				; 000015ebH
	lea	r8, OFFSET FLAT:$SG163011
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 5612
	mov	QWORD PTR pi$[rsp], -1
$LN18@spawn_proc:
$LN8@spawn_proc:
$LN17@spawn_proc:
$spawn_cleanup$27:
; Line 5617
	mov	rcx, QWORD PTR si$[rsp+88]
	call	QWORD PTR __imp_CloseHandle
; Line 5618
	mov	rcx, QWORD PTR si$[rsp+96]
	call	QWORD PTR __imp_CloseHandle
; Line 5619
	mov	rcx, QWORD PTR si$[rsp+80]
	call	QWORD PTR __imp_CloseHandle
; Line 5620
	cmp	QWORD PTR pi$[rsp+8], 0
	je	SHORT $LN19@spawn_proc
; Line 5621
	mov	rcx, QWORD PTR pi$[rsp+8]
	call	QWORD PTR __imp_CloseHandle
$LN19@spawn_proc:
; Line 5624
	mov	rax, QWORD PTR pi$[rsp]
$LN20@spawn_proc:
; Line 5625
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2688				; 00000a80H
	pop	rdi
	ret	0
?spawn_process@@YAPEAXPEAUmg_connection@@PEBDPEADQEAPEADQEAH441E@Z ENDP ; spawn_process
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
s$ = 64
?trim_trailing_whitespaces@@YAXPEAD@Z PROC		; trim_trailing_whitespaces
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5447
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5448
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR e$[rsp], rax
$LN2@trim_trail:
; Line 5449
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR e$[rsp], rax
	jbe	SHORT $LN3@trim_trail
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR e$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	je	SHORT $LN3@trim_trail
; Line 5450
	mov	rax, QWORD PTR e$[rsp]
	dec	rax
	mov	QWORD PTR e$[rsp], rax
	mov	rax, QWORD PTR e$[rsp]
	mov	BYTE PTR [rax], 0
; Line 5451
	jmp	SHORT $LN2@trim_trail
$LN3@trim_trail:
; Line 5452
	add	rsp, 56					; 00000038H
	ret	0
?trim_trailing_whitespaces@@YAXPEAD@Z ENDP		; trim_trailing_whitespaces
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
timeout$ = 32
waitres$ = 36
pid$ = 64
status$ = 72
flags$ = 80
?waitpid@@YAPEAXPEAXPEAHH@Z PROC			; waitpid
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5424
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5425
	mov	DWORD PTR timeout$[rsp], -1		; ffffffffH
; Line 5430
	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 1
	cmp	eax, 1
	jne	SHORT $LN2@waitpid
; Line 5431
	mov	DWORD PTR timeout$[rsp], 0
$LN2@waitpid:
; Line 5434
	mov	edx, DWORD PTR timeout$[rsp]
	mov	rcx, QWORD PTR pid$[rsp]
	call	QWORD PTR __imp_WaitForSingleObject
	mov	DWORD PTR waitres$[rsp], eax
; Line 5435
	cmp	DWORD PTR waitres$[rsp], 0
	jne	SHORT $LN3@waitpid
; Line 5436
	mov	rax, QWORD PTR pid$[rsp]
	jmp	SHORT $LN1@waitpid
$LN3@waitpid:
; Line 5438
	cmp	DWORD PTR waitres$[rsp], 258		; 00000102H
	jne	SHORT $LN4@waitpid
; Line 5439
	xor	eax, eax
	jmp	SHORT $LN1@waitpid
$LN4@waitpid:
; Line 5441
	mov	rax, -1
$LN1@waitpid:
; Line 5442
	add	rsp, 56					; 00000038H
	ret	0
?waitpid@@YAPEAXPEAXPEAHH@Z ENDP			; waitpid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pid$ = 48
sig_num$ = 56
?kill@@YAHPEAXH@Z PROC					; kill
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5410
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5411
	mov	edx, DWORD PTR sig_num$[rsp]
	mov	rcx, QWORD PTR pid$[rsp]
	call	QWORD PTR __imp_TerminateProcess
; Line 5412
	mov	rcx, QWORD PTR pid$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 5413
	xor	eax, eax
; Line 5414
	add	rsp, 40					; 00000028H
	ret	0
?kill@@YAHPEAXH@Z ENDP					; kill
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
handle$ = 64
?dlclose@@YAHPEAX@Z PROC				; dlclose
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5383
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5386
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_FreeLibrary
	test	eax, eax
	je	SHORT $LN2@dlclose
; Line 5387
	mov	DWORD PTR result$[rsp], 0
; Line 5388
	jmp	SHORT $LN3@dlclose
$LN2@dlclose:
; Line 5389
	mov	DWORD PTR result$[rsp], -1
$LN3@dlclose:
; Line 5392
	mov	eax, DWORD PTR result$[rsp]
; Line 5393
	add	rsp, 56					; 00000038H
	ret	0
?dlclose@@YAHPEAX@Z ENDP				; dlclose
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
wbuf$ = 32
__$ArrayPad$ = 560
dll_name$ = 592
flags$ = 600
?dlopen@@YAPEAXPEBDH@Z PROC				; dlopen
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5372
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 584				; 00000248H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5375
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wbuf$[rsp]
	mov	rdx, QWORD PTR dll_name$[rsp]
	xor	ecx, ecx
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 5376
	lea	rcx, QWORD PTR wbuf$[rsp]
	call	QWORD PTR __imp_LoadLibraryW
; Line 5377
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 584				; 00000248H
	ret	0
?dlopen@@YAPEAXPEBDH@Z ENDP				; dlopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dwevent$ = 32
result$ = 36
threadid$ = 64
?mg_join_thread@@YAHPEAX@Z PROC				; mg_join_thread
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5344
	mov	DWORD PTR result$[rsp], -1
; Line 5345
	mov	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR threadid$[rsp]
	call	QWORD PTR __imp_WaitForSingleObject
	mov	DWORD PTR dwevent$[rsp], eax
; Line 5346
	cmp	DWORD PTR dwevent$[rsp], -1		; ffffffffH
	jne	SHORT $LN5@mg_join_th
$LN4@mg_join_th:
; Line 5347
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@mg_join_th
; Line 5348
	jmp	SHORT $LN6@mg_join_th
$LN5@mg_join_th:
; Line 5349
	cmp	DWORD PTR dwevent$[rsp], 0
	jne	SHORT $LN7@mg_join_th
; Line 5350
	mov	rcx, QWORD PTR threadid$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 5351
	mov	DWORD PTR result$[rsp], 0
$LN7@mg_join_th:
$LN6@mg_join_th:
; Line 5355
	mov	eax, DWORD PTR result$[rsp]
; Line 5356
	add	rsp, 56					; 00000038H
	ret	0
?mg_join_thread@@YAHPEAX@Z ENDP				; mg_join_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
uip$ = 56
threadhandle$ = 64
f$ = 96
p$ = 104
threadidptr$ = 112
?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z PROC	; mg_start_thread_with_id
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5321
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5324
	mov	DWORD PTR result$[rsp], -1
; Line 5326
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR f$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	_beginthreadex
	mov	QWORD PTR uip$[rsp], rax
; Line 5327
	mov	rax, QWORD PTR uip$[rsp]
	mov	QWORD PTR threadhandle$[rsp], rax
; Line 5328
	cmp	QWORD PTR uip$[rsp], 0
	je	SHORT $LN2@mg_start_t
	cmp	QWORD PTR threadidptr$[rsp], 0
	je	SHORT $LN2@mg_start_t
; Line 5329
	mov	rax, QWORD PTR threadidptr$[rsp]
	mov	rcx, QWORD PTR threadhandle$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 5330
	mov	DWORD PTR result$[rsp], 0
$LN2@mg_start_t:
; Line 5333
	mov	eax, DWORD PTR result$[rsp]
; Line 5334
	add	rsp, 88					; 00000058H
	ret	0
?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z ENDP	; mg_start_thread_with_id
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sock$ = 48
conn$ = 56
ctx$ = 64
?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z PROC ; set_close_on_exec
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5288
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5292
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR sock$[rsp]
	call	QWORD PTR __imp_SetHandleInformation
; Line 5293
	add	rsp, 40					; 00000028H
	ret	0
?set_close_on_exec@@YAX_KPEBUmg_connection@@PEAUmg_context@@@Z ENDP ; set_close_on_exec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
__i$1 = 52
__i$2 = 56
__i$3 = 60
result$ = 64
maxfd$ = 72
tv$ = 80
rset$ = 96
wset$ = 624
eset$ = 1152
__$ArrayPad$ = 1680
pfd$ = 1712
n$ = 1720
milliseconds$ = 1728
?poll@@YAHPEAUmg_pollfd@@IH@Z PROC			; poll
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5218
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1704				; 000006a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5225
	mov	QWORD PTR maxfd$[rsp], 0
; Line 5227
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR tv$[rsp]
	call	memset
; Line 5228
	mov	eax, DWORD PTR milliseconds$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	DWORD PTR tv$[rsp], eax
; Line 5229
	mov	eax, DWORD PTR milliseconds$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	mov	eax, edx
	imul	eax, eax, 1000				; 000003e8H
	mov	DWORD PTR tv$[rsp+4], eax
; Line 5230
	mov	DWORD PTR rset$[rsp], 0
; Line 5231
	mov	DWORD PTR wset$[rsp], 0
; Line 5232
	mov	DWORD PTR eset$[rsp], 0
; Line 5234
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@poll
$LN2@poll:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@poll:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN3@poll
; Line 5235
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	and	eax, 13
	test	eax, eax
	je	$LN26@poll
; Line 5236
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN27@poll
$LN7@poll:
; Line 5237
	mov	DWORD PTR __i$1[rsp], 0
	jmp	SHORT $LN10@poll
$LN8@poll:
	mov	eax, DWORD PTR __i$1[rsp]
	inc	eax
	mov	DWORD PTR __i$1[rsp], eax
$LN10@poll:
	mov	eax, DWORD PTR rset$[rsp]
	cmp	DWORD PTR __i$1[rsp], eax
	jae	SHORT $LN9@poll
	mov	eax, DWORD PTR __i$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx]
	cmp	QWORD PTR rset$[rsp+rax*8+8], rcx
	jne	SHORT $LN28@poll
	jmp	SHORT $LN9@poll
$LN28@poll:
	jmp	SHORT $LN8@poll
$LN9@poll:
	mov	eax, DWORD PTR rset$[rsp]
	cmp	DWORD PTR __i$1[rsp], eax
	jne	SHORT $LN29@poll
	cmp	DWORD PTR rset$[rsp], 64		; 00000040H
	jae	SHORT $LN30@poll
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	ecx, DWORD PTR __i$1[rsp]
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	rax, QWORD PTR [rdx+rax]
	mov	QWORD PTR rset$[rsp+rcx*8+8], rax
	mov	eax, DWORD PTR rset$[rsp]
	inc	eax
	mov	DWORD PTR rset$[rsp], eax
$LN30@poll:
$LN29@poll:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@poll
$LN27@poll:
; Line 5239
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	and	eax, 4
	test	eax, eax
	je	$LN31@poll
$LN13@poll:
; Line 5240
	mov	DWORD PTR __i$2[rsp], 0
	jmp	SHORT $LN16@poll
$LN14@poll:
	mov	eax, DWORD PTR __i$2[rsp]
	inc	eax
	mov	DWORD PTR __i$2[rsp], eax
$LN16@poll:
	mov	eax, DWORD PTR wset$[rsp]
	cmp	DWORD PTR __i$2[rsp], eax
	jae	SHORT $LN15@poll
	mov	eax, DWORD PTR __i$2[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx]
	cmp	QWORD PTR wset$[rsp+rax*8+8], rcx
	jne	SHORT $LN32@poll
	jmp	SHORT $LN15@poll
$LN32@poll:
	jmp	SHORT $LN14@poll
$LN15@poll:
	mov	eax, DWORD PTR wset$[rsp]
	cmp	DWORD PTR __i$2[rsp], eax
	jne	SHORT $LN33@poll
	cmp	DWORD PTR wset$[rsp], 64		; 00000040H
	jae	SHORT $LN34@poll
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	ecx, DWORD PTR __i$2[rsp]
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	rax, QWORD PTR [rdx+rax]
	mov	QWORD PTR wset$[rsp+rcx*8+8], rax
	mov	eax, DWORD PTR wset$[rsp]
	inc	eax
	mov	DWORD PTR wset$[rsp], eax
$LN34@poll:
$LN33@poll:
	xor	eax, eax
	test	eax, eax
	jne	$LN13@poll
$LN31@poll:
$LN19@poll:
; Line 5243
	mov	DWORD PTR __i$3[rsp], 0
	jmp	SHORT $LN22@poll
$LN20@poll:
	mov	eax, DWORD PTR __i$3[rsp]
	inc	eax
	mov	DWORD PTR __i$3[rsp], eax
$LN22@poll:
	mov	eax, DWORD PTR eset$[rsp]
	cmp	DWORD PTR __i$3[rsp], eax
	jae	SHORT $LN21@poll
	mov	eax, DWORD PTR __i$3[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx]
	cmp	QWORD PTR eset$[rsp+rax*8+8], rcx
	jne	SHORT $LN35@poll
	jmp	SHORT $LN21@poll
$LN35@poll:
	jmp	SHORT $LN20@poll
$LN21@poll:
	mov	eax, DWORD PTR eset$[rsp]
	cmp	DWORD PTR __i$3[rsp], eax
	jne	SHORT $LN36@poll
	cmp	DWORD PTR eset$[rsp], 64		; 00000040H
	jae	SHORT $LN37@poll
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	ecx, DWORD PTR __i$3[rsp]
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	rax, QWORD PTR [rdx+rax]
	mov	QWORD PTR eset$[rsp+rcx*8+8], rax
	mov	eax, DWORD PTR eset$[rsp]
	inc	eax
	mov	DWORD PTR eset$[rsp], eax
$LN37@poll:
$LN36@poll:
	xor	eax, eax
	test	eax, eax
	jne	$LN19@poll
$LN26@poll:
; Line 5245
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	xor	ecx, ecx
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	WORD PTR [rdx+rax+10], cx
; Line 5247
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	mov	rdx, QWORD PTR maxfd$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jbe	SHORT $LN38@poll
; Line 5248
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR maxfd$[rsp], rax
$LN38@poll:
; Line 5250
	jmp	$LN2@poll
$LN3@poll:
; Line 5252
	mov	eax, DWORD PTR maxfd$[rsp]
	inc	eax
	lea	rcx, QWORD PTR tv$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR eset$[rsp]
	lea	r8, QWORD PTR wset$[rsp]
	lea	rdx, QWORD PTR rset$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_select
	mov	DWORD PTR result$[rsp], eax
	cmp	DWORD PTR result$[rsp], 0
	jle	$LN39@poll
; Line 5253
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@poll
$LN23@poll:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@poll:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN24@poll
; Line 5254
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	lea	rdx, QWORD PTR rset$[rsp]
	mov	rcx, QWORD PTR pfd$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	__WSAFDIsSet
	test	eax, eax
	je	SHORT $LN40@poll
; Line 5255
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	or	eax, 1
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	WORD PTR [rdx+rcx+10], ax
$LN40@poll:
; Line 5257
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	lea	rdx, QWORD PTR wset$[rsp]
	mov	rcx, QWORD PTR pfd$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	__WSAFDIsSet
	test	eax, eax
	je	SHORT $LN41@poll
; Line 5258
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	or	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	WORD PTR [rdx+rcx+10], ax
$LN41@poll:
; Line 5260
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	lea	rdx, QWORD PTR eset$[rsp]
	mov	rcx, QWORD PTR pfd$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	__WSAFDIsSet
	test	eax, eax
	je	SHORT $LN42@poll
; Line 5261
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pfd$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	or	eax, 8
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR pfd$[rsp]
	mov	WORD PTR [rdx+rcx+10], ax
$LN42@poll:
; Line 5263
	jmp	$LN23@poll
$LN24@poll:
$LN39@poll:
; Line 5273
	mov	eax, DWORD PTR result$[rsp]
; Line 5274
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1704				; 000006a8H
	ret	0
?poll@@YAHPEAUmg_pollfd@@IH@Z ENDP			; poll
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 64
dir$ = 96
?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z PROC		; mg_readdir
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5174
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5175
	mov	QWORD PTR result$[rsp], 0
; Line 5177
	cmp	QWORD PTR dir$[rsp], 0
	je	$LN2@mg_readdir
; Line 5178
	mov	rax, QWORD PTR dir$[rsp]
	cmp	QWORD PTR [rax], -1
	je	$LN4@mg_readdir
; Line 5179
	mov	rax, QWORD PTR dir$[rsp]
	add	rax, 600				; 00000258H
	mov	QWORD PTR result$[rsp], rax
; Line 5180
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	add	rcx, 52					; 00000034H
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 780			; 0000030cH
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -1
	mov	r8, rcx
	xor	edx, edx
	mov	ecx, 65001				; 0000fde9H
	call	QWORD PTR __imp_WideCharToMultiByte
; Line 5189
	mov	rax, QWORD PTR dir$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_FindNextFileW
	test	eax, eax
	jne	SHORT $LN6@mg_readdir
; Line 5190
	mov	rax, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_FindClose
; Line 5191
	mov	rax, QWORD PTR dir$[rsp]
	mov	QWORD PTR [rax], -1
$LN6@mg_readdir:
; Line 5194
	jmp	SHORT $LN5@mg_readdir
$LN4@mg_readdir:
; Line 5195
	mov	ecx, 2
	call	QWORD PTR __imp_SetLastError
$LN5@mg_readdir:
; Line 5197
	jmp	SHORT $LN3@mg_readdir
$LN2@mg_readdir:
; Line 5198
	mov	ecx, 160				; 000000a0H
	call	QWORD PTR __imp_SetLastError
$LN3@mg_readdir:
; Line 5201
	mov	rax, QWORD PTR result$[rsp]
; Line 5202
	add	rsp, 88					; 00000058H
	ret	0
?mg_readdir@@YAPEAUdirent@@PEAUDIR@@@Z ENDP		; mg_readdir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tv71 = 36
dir$ = 64
?mg_closedir@@YAHPEAUDIR@@@Z PROC			; mg_closedir
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5154
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5155
	mov	DWORD PTR result$[rsp], 0
; Line 5157
	cmp	QWORD PTR dir$[rsp], 0
	je	SHORT $LN2@mg_closedi
; Line 5158
	mov	rax, QWORD PTR dir$[rsp]
	cmp	QWORD PTR [rax], -1
	je	SHORT $LN4@mg_closedi
; Line 5159
	mov	rax, QWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_FindClose
	test	eax, eax
	je	SHORT $LN6@mg_closedi
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN7@mg_closedi
$LN6@mg_closedi:
	mov	DWORD PTR tv71[rsp], -1
$LN7@mg_closedi:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR result$[rsp], eax
$LN4@mg_closedi:
; Line 5161
	mov	rcx, QWORD PTR dir$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 5162
	jmp	SHORT $LN3@mg_closedi
$LN2@mg_closedi:
; Line 5163
	mov	DWORD PTR result$[rsp], -1
; Line 5164
	mov	ecx, 160				; 000000a0H
	call	QWORD PTR __imp_SetLastError
$LN3@mg_closedi:
; Line 5167
	mov	eax, DWORD PTR result$[rsp]
; Line 5168
	add	rsp, 56					; 00000038H
	ret	0
?mg_closedir@@YAHPEAUDIR@@@Z ENDP			; mg_closedir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 32
attrs$ = 40
wpath$ = 48
__$ArrayPad$ = 576
conn$ = 608
name$ = 616
?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z PROC	; mg_opendir
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5124
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 600				; 00000258H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5125
	mov	QWORD PTR dir$[rsp], 0
; Line 5129
	cmp	QWORD PTR name$[rsp], 0
	jne	SHORT $LN2@mg_opendir
; Line 5130
	mov	ecx, 160				; 000000a0H
	call	QWORD PTR __imp_SetLastError
	jmp	$LN3@mg_opendir
$LN2@mg_opendir:
; Line 5131
	mov	ecx, 1384				; 00000568H
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR dir$[rsp], rax
	cmp	QWORD PTR dir$[rsp], 0
	jne	SHORT $LN4@mg_opendir
; Line 5132
	mov	ecx, 8
	call	QWORD PTR __imp_SetLastError
; Line 5133
	jmp	$LN5@mg_opendir
$LN4@mg_opendir:
; Line 5134
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wpath$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 5135
	lea	rcx, QWORD PTR wpath$[rsp]
	call	QWORD PTR __imp_GetFileAttributesW
	mov	DWORD PTR attrs$[rsp], eax
; Line 5137
	lea	rcx, QWORD PTR wpath$[rsp]
	call	wcslen
	add	rax, 2
	cmp	rax, 260				; 00000104H
	jae	SHORT $LN6@mg_opendir
	cmp	DWORD PTR attrs$[rsp], -1		; ffffffffH
	je	SHORT $LN6@mg_opendir
	mov	eax, DWORD PTR attrs$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN6@mg_opendir
; Line 5138
	lea	rdx, OFFSET FLAT:$SG162748
	lea	rcx, QWORD PTR wpath$[rsp]
	call	wcscat
; Line 5139
	mov	rax, QWORD PTR dir$[rsp]
	add	rax, 8
	mov	rdx, rax
	lea	rcx, QWORD PTR wpath$[rsp]
	call	QWORD PTR __imp_FindFirstFileW
	mov	rcx, QWORD PTR dir$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 5140
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dir$[rsp]
	mov	BYTE PTR [rcx+rax+600], 0
; Line 5141
	jmp	SHORT $LN7@mg_opendir
$LN6@mg_opendir:
; Line 5142
	mov	rcx, QWORD PTR dir$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 5143
	mov	QWORD PTR dir$[rsp], 0
$LN7@mg_opendir:
$LN5@mg_opendir:
$LN3@mg_opendir:
; Line 5147
	mov	rax, QWORD PTR dir$[rsp]
; Line 5148
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 600				; 00000258H
	ret	0
?mg_opendir@@YAPEAUDIR@@PEBUmg_connection@@PEBD@Z ENDP	; mg_opendir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
wbuf$ = 48
__$ArrayPad$ = 576
conn$ = 608
path$ = 616
mode$ = 624
?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z PROC		; mg_mkdir
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5103
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 600				; 00000258H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5106
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wbuf$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 5107
	xor	edx, edx
	lea	rcx, QWORD PTR wbuf$[rsp]
	call	QWORD PTR __imp_CreateDirectoryW
	test	eax, eax
	je	SHORT $LN3@mg_mkdir
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@mg_mkdir
$LN3@mg_mkdir:
	mov	DWORD PTR tv72[rsp], -1
$LN4@mg_mkdir:
	mov	eax, DWORD PTR tv72[rsp]
; Line 5108
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 600				; 00000258H
	ret	0
?mg_mkdir@@YAHPEBUmg_connection@@PEBDH@Z ENDP		; mg_mkdir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
wbuf$ = 48
__$ArrayPad$ = 576
conn$ = 608
path$ = 616
?mg_remove@@YAHPEBUmg_connection@@PEBD@Z PROC		; mg_remove
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5094
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 600				; 00000258H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5096
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wbuf$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 5097
	lea	rcx, QWORD PTR wbuf$[rsp]
	call	QWORD PTR __imp_DeleteFileW
	test	eax, eax
	je	SHORT $LN3@mg_remove
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN4@mg_remove
$LN3@mg_remove:
	mov	DWORD PTR tv71[rsp], -1
$LN4@mg_remove:
	mov	eax, DWORD PTR tv71[rsp]
; Line 5098
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 600				; 00000258H
	ret	0
?mg_remove@@YAHPEBUmg_connection@@PEBD@Z ENDP		; mg_remove
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 0
tv72 = 4
diff$ = 8
s1$ = 32
s2$ = 40
?mg_wcscasecmp@@YAHPEB_W0@Z PROC			; mg_wcscasecmp
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4964
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
$LN4@mg_wcscase:
; Line 4968
	mov	rax, QWORD PTR s1$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN7@mg_wcscase
	mov	rax, QWORD PTR s1$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN7@mg_wcscase
	mov	rax, QWORD PTR s1$[rsp]
	movzx	eax, WORD PTR [rax]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN8@mg_wcscase
$LN7@mg_wcscase:
	mov	rax, QWORD PTR s1$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
$LN8@mg_wcscase:
	mov	rax, QWORD PTR s2$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN9@mg_wcscase
	mov	rax, QWORD PTR s2$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN9@mg_wcscase
	mov	rax, QWORD PTR s2$[rsp]
	movzx	eax, WORD PTR [rax]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN10@mg_wcscase
$LN9@mg_wcscase:
	mov	rax, QWORD PTR s2$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv81[rsp], eax
$LN10@mg_wcscase:
	mov	eax, DWORD PTR tv81[rsp]
	mov	ecx, DWORD PTR tv72[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 4970
	mov	rax, QWORD PTR s1$[rsp]
	add	rax, 2
	mov	QWORD PTR s1$[rsp], rax
; Line 4971
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4972
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN5@mg_wcscase
	mov	eax, 2
	imul	rax, rax, -1
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN4@mg_wcscase
$LN5@mg_wcscase:
; Line 4974
	mov	eax, DWORD PTR diff$[rsp]
; Line 4975
	add	rsp, 24
	ret	0
?mg_wcscasecmp@@YAHPEB_W0@Z ENDP			; mg_wcscasecmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv141 = 40
path$ = 64
?change_slashes_to_backslashes@@YAXPEAD@Z PROC		; change_slashes_to_backslashes
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4943
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4946
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@change_sla
$LN2@change_sla:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@change_sla:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN3@change_sla
; Line 4947
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN7@change_sla
; Line 4948
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	mov	BYTE PTR [rcx+rax], 92			; 0000005cH
$LN7@change_sla:
; Line 4953
	cmp	DWORD PTR i$[rsp], 0
	jle	$LN8@change_sla
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN8@change_sla
$LN5@change_sla:
; Line 4954
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN9@change_sla
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN6@change_sla
$LN9@change_sla:
; Line 4955
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	rcx, rax
	call	strlen
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+2]
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR path$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+1]
	mov	QWORD PTR tv141[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv141[rsp]
	mov	rcx, rax
	call	memmove
; Line 4956
	jmp	SHORT $LN5@change_sla
$LN6@change_sla:
$LN8@change_sla:
; Line 4958
	jmp	$LN2@change_sla
$LN3@change_sla:
; Line 4959
	add	rsp, 56					; 00000038H
	ret	0
?change_slashes_to_backslashes@@YAXPEAD@Z ENDP		; change_slashes_to_backslashes
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cv$ = 48
?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z PROC	; pthread_cond_destroy
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4889
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4890
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 4892
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 4893
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 4895
	xor	eax, eax
; Line 4896
	add	rsp, 40					; 00000028H
	ret	0
?pthread_cond_destroy@@YAHPEAUpthread_cond_t@@@Z ENDP	; pthread_cond_destroy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cv$ = 48
?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z PROC	; pthread_cond_broadcast
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4875
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4876
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
$LN2@pthread_co:
; Line 4877
	mov	rax, QWORD PTR cv$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN3@pthread_co
; Line 4878
	mov	rcx, QWORD PTR cv$[rsp]
	call	?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z ; pthread_cond_signal
; Line 4879
	jmp	SHORT $LN2@pthread_co
$LN3@pthread_co:
; Line 4880
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 4882
	xor	eax, eax
; Line 4883
	add	rsp, 40					; 00000028H
	ret	0
?pthread_cond_broadcast@@YAHPEAUpthread_cond_t@@@Z ENDP	; pthread_cond_broadcast
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ok$ = 32
tv78 = 36
wkup$ = 40
cv$ = 64
?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z PROC	; pthread_cond_signal
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4854
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4855
	mov	QWORD PTR wkup$[rsp], 0
; Line 4856
	mov	DWORD PTR ok$[rsp], 0
; Line 4858
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 4859
	mov	rax, QWORD PTR cv$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN2@pthread_co
; Line 4860
	mov	rax, QWORD PTR cv$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR wkup$[rsp], rax
; Line 4861
	mov	rax, QWORD PTR cv$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR cv$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rcx+40], rax
; Line 4863
	mov	rcx, QWORD PTR wkup$[rsp]
	call	QWORD PTR __imp_SetEvent
	mov	DWORD PTR ok$[rsp], eax
$LN2@pthread_co:
; Line 4866
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 4868
	cmp	DWORD PTR ok$[rsp], 0
	je	SHORT $LN4@pthread_co
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN5@pthread_co
$LN4@pthread_co:
	mov	DWORD PTR tv78[rsp], 1
$LN5@pthread_co:
	mov	eax, DWORD PTR tv78[rsp]
; Line 4869
	add	rsp, 56					; 00000038H
	ret	0
?pthread_cond_signal@@YAHPEAUpthread_cond_t@@@Z ENDP	; pthread_cond_signal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cv$ = 48
mutex$ = 56
?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z PROC ; pthread_cond_wait
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4846
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4847
	xor	r8d, r8d
	mov	rdx, QWORD PTR mutex$[rsp]
	mov	rcx, QWORD PTR cv$[rsp]
	call	?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z ; pthread_cond_timedwait
; Line 4848
	add	rsp, 40					; 00000028H
	ret	0
?pthread_cond_wait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@@Z ENDP ; pthread_cond_wait
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ok$ = 32
ptls$ = 40
tls$ = 48
mswaitrel$ = 56
tv91 = 60
tv140 = 64
nswaitrel$ = 72
nsnow$ = 80
nswaitabs$ = 88
cv$ = 112
mutex$ = 120
abstime$ = 128
?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z PROC ; pthread_cond_timedwait
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4786
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4788
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_getspecific@@YAPEAXK@Z		; pthread_getspecific
	mov	QWORD PTR tls$[rsp], rax
; Line 4794
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 4796
	mov	rax, QWORD PTR cv$[rsp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR ptls$[rsp], rax
; Line 4797
	jmp	SHORT $LN4@pthread_co
$LN2@pthread_co:
	mov	rax, QWORD PTR ptls$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 24
	mov	QWORD PTR ptls$[rsp], rax
$LN4@pthread_co:
	mov	rax, QWORD PTR ptls$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@pthread_co
; Line 4798
	jmp	SHORT $LN2@pthread_co
$LN3@pthread_co:
; Line 4799
	mov	rax, QWORD PTR tls$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 4800
	mov	rax, QWORD PTR ptls$[rsp]
	mov	rcx, QWORD PTR tls$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4801
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 4803
	cmp	QWORD PTR abstime$[rsp], 0
	je	SHORT $LN8@pthread_co
; Line 4804
	call	?mg_get_current_time_ns@@YA_KXZ		; mg_get_current_time_ns
	mov	QWORD PTR nsnow$[rsp], rax
; Line 4805
	mov	rax, QWORD PTR abstime$[rsp]
	imul	rax, QWORD PTR [rax], 1000000000	; 3b9aca00H
	mov	rcx, QWORD PTR abstime$[rsp]
	movsxd	rcx, DWORD PTR [rcx+8]
	add	rax, rcx
	mov	QWORD PTR nswaitabs$[rsp], rax
; Line 4807
	mov	rax, QWORD PTR nsnow$[rsp]
	mov	rcx, QWORD PTR nswaitabs$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nswaitrel$[rsp], rax
; Line 4808
	cmp	QWORD PTR nswaitrel$[rsp], 0
	jge	SHORT $LN10@pthread_co
; Line 4809
	mov	QWORD PTR nswaitrel$[rsp], 0
$LN10@pthread_co:
; Line 4811
	mov	rax, QWORD PTR nswaitrel$[rsp]
	cdq
	mov	ecx, 1000000				; 000f4240H
	idiv	rcx
	mov	DWORD PTR mswaitrel$[rsp], eax
; Line 4812
	jmp	SHORT $LN9@pthread_co
$LN8@pthread_co:
; Line 4813
	mov	DWORD PTR mswaitrel$[rsp], -1		; ffffffffH
$LN9@pthread_co:
; Line 4816
	mov	rcx, QWORD PTR mutex$[rsp]
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 4817
	mov	edx, DWORD PTR mswaitrel$[rsp]
	mov	rax, QWORD PTR tls$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_WaitForSingleObject
	test	eax, eax
	jne	SHORT $LN15@pthread_co
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN16@pthread_co
$LN15@pthread_co:
	mov	DWORD PTR tv91[rsp], 0
$LN16@pthread_co:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR ok$[rsp], eax
; Line 4819
	cmp	DWORD PTR ok$[rsp], 0
	jne	$LN11@pthread_co
; Line 4820
	mov	DWORD PTR ok$[rsp], 1
; Line 4821
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 4822
	mov	rax, QWORD PTR cv$[rsp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR ptls$[rsp], rax
; Line 4823
	jmp	SHORT $LN7@pthread_co
$LN5@pthread_co:
	mov	rax, QWORD PTR ptls$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 24
	mov	QWORD PTR ptls$[rsp], rax
$LN7@pthread_co:
	mov	rax, QWORD PTR ptls$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@pthread_co
; Line 4824
	mov	rax, QWORD PTR ptls$[rsp]
	mov	rcx, QWORD PTR tls$[rsp]
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN12@pthread_co
; Line 4825
	mov	rax, QWORD PTR ptls$[rsp]
	mov	rcx, QWORD PTR tls$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax], rcx
; Line 4826
	mov	DWORD PTR ok$[rsp], 0
; Line 4827
	jmp	SHORT $LN6@pthread_co
$LN12@pthread_co:
; Line 4829
	jmp	SHORT $LN5@pthread_co
$LN6@pthread_co:
; Line 4830
	mov	rax, QWORD PTR cv$[rsp]
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 4831
	cmp	DWORD PTR ok$[rsp], 0
	je	SHORT $LN13@pthread_co
; Line 4832
	mov	edx, -1					; ffffffffH
	mov	rax, QWORD PTR tls$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_WaitForSingleObject
$LN13@pthread_co:
$LN11@pthread_co:
; Line 4837
	mov	rcx, QWORD PTR mutex$[rsp]
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 4839
	cmp	DWORD PTR ok$[rsp], 0
	je	SHORT $LN17@pthread_co
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN18@pthread_co
$LN17@pthread_co:
	mov	DWORD PTR tv140[rsp], -1
$LN18@pthread_co:
	mov	eax, DWORD PTR tv140[rsp]
; Line 4840
	add	rsp, 104				; 00000068H
	ret	0
?pthread_cond_timedwait@@YAHPEAUpthread_cond_t@@PEAUpthread_mutex_t@@PEBUtimespec@@@Z ENDP ; pthread_cond_timedwait
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cv$ = 48
unused$ = 56
?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z PROC	; pthread_cond_init
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4773
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4775
	mov	rax, QWORD PTR cv$[rsp]
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	mov	rcx, rax
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
; Line 4776
	mov	rax, QWORD PTR cv$[rsp]
	mov	QWORD PTR [rax+40], 0
; Line 4777
	xor	eax, eax
; Line 4778
	add	rsp, 40					; 00000028H
	ret	0
?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z ENDP	; pthread_cond_init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mutex$ = 48
?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z PROC	; pthread_mutex_destroy
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4748
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4749
	mov	rax, QWORD PTR mutex$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_DeleteCriticalSection
; Line 4750
	xor	eax, eax
; Line 4751
	add	rsp, 40					; 00000028H
	ret	0
?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ENDP	; pthread_mutex_destroy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mutex$ = 48
unused$ = 56
?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z PROC ; pthread_mutex_init
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4738
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4741
	mov	rax, QWORD PTR mutex$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_InitializeCriticalSection
; Line 4742
	xor	eax, eax
; Line 4743
	add	rsp, 40					; 00000028H
	ret	0
?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ENDP ; pthread_mutex_init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
scope$ = 68
len$ = 72
page_handler_found$ = 76
has_body$ = 80
tstr$ = 88
tv70 = 96
tv134 = 100
handled_by_callback$ = 104
tv152 = 108
truncated$ = 112
error_handler$ = 120
ap$ = 128
$T1 = 136
$T2 = 144
tv132 = 152
error_page_file_ext$ = 160
status_text$3 = 168
error_page_file$ = 176
path_buf$ = 224
errmsg_buf$ = 1008
__$ArrayPad$ = 9200
conn$ = 9232
status$ = 9240
fmt$ = 9248
args$ = 9256
?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z PROC ; mg_send_http_error_impl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4379
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 9224				; 00002408H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4387
	mov	QWORD PTR error_handler$[rsp], 0
; Line 4388
	mov	QWORD PTR error_page_file$[rsp], 0
	mov	QWORD PTR error_page_file$[rsp+8], 0
	mov	DWORD PTR error_page_file$[rsp+16], 0
	mov	DWORD PTR error_page_file$[rsp+20], 0
	mov	DWORD PTR error_page_file$[rsp+24], 0
	mov	QWORD PTR error_page_file$[rsp+32], 0
; Line 4391
	mov	DWORD PTR handled_by_callback$[rsp], 0
; Line 4393
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN28@mg_send_ht
	cmp	QWORD PTR fmt$[rsp], 0
	jne	SHORT $LN27@mg_send_ht
$LN28@mg_send_ht:
; Line 4394
	mov	eax, -2
	jmp	$LN1@mg_send_ht
$LN27@mg_send_ht:
; Line 4398
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR status$[rsp]
	mov	DWORD PTR [rax+2448], ecx
; Line 4401
	cmp	DWORD PTR status$[rsp], 199		; 000000c7H
	jle	SHORT $LN46@mg_send_ht
	cmp	DWORD PTR status$[rsp], 204		; 000000ccH
	je	SHORT $LN46@mg_send_ht
	cmp	DWORD PTR status$[rsp], 304		; 00000130H
	je	SHORT $LN46@mg_send_ht
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN47@mg_send_ht
$LN46@mg_send_ht:
	mov	DWORD PTR tv70[rsp], 0
$LN47@mg_send_ht:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR has_body$[rsp], eax
; Line 4405
	cmp	DWORD PTR has_body$[rsp], 0
	jne	SHORT $LN30@mg_send_ht
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2424], 0
	jne	SHORT $LN29@mg_send_ht
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32088], 0
	je	SHORT $LN29@mg_send_ht
$LN30@mg_send_ht:
; Line 4408
	mov	rax, QWORD PTR args$[rsp]
	mov	QWORD PTR ap$[rsp], rax
; Line 4409
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 8192				; 00002000H
	lea	r8, QWORD PTR errmsg_buf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z ; mg_vsnprintf
; Line 4410
	mov	QWORD PTR ap$[rsp], 0
$LN4@mg_send_ht:
; Line 4412
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@mg_send_ht
$LN29@mg_send_ht:
; Line 4419
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2424], 0
	jne	$LN31@mg_send_ht
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32088], 0
	je	SHORT $LN31@mg_send_ht
; Line 4421
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2424], 1
; Line 4422
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32088]
	mov	QWORD PTR tv132[rsp], rax
	lea	r8, QWORD PTR errmsg_buf$[rsp]
	mov	edx, DWORD PTR status$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv132[rsp]
	test	eax, eax
	jne	SHORT $LN48@mg_send_ht
	mov	DWORD PTR tv134[rsp], 1
	jmp	SHORT $LN49@mg_send_ht
$LN48@mg_send_ht:
	mov	DWORD PTR tv134[rsp], 0
$LN49@mg_send_ht:
	mov	eax, DWORD PTR tv134[rsp]
	mov	DWORD PTR handled_by_callback$[rsp], eax
; Line 4425
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2424], 0
$LN31@mg_send_ht:
; Line 4428
	cmp	DWORD PTR handled_by_callback$[rsp], 0
	jne	$LN32@mg_send_ht
; Line 4430
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2424], 0
	je	SHORT $LN33@mg_send_ht
$LN7@mg_send_ht:
; Line 4431
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@mg_send_ht
; Line 4435
	jmp	$LN34@mg_send_ht
$LN33@mg_send_ht:
; Line 4437
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 58				; 0000003aH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR error_handler$[rsp], rax
; Line 4438
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 38				; 00000026H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR error_page_file_ext$[rsp], rax
; Line 4439
	mov	DWORD PTR page_handler_found$[rsp], 0
; Line 4441
	cmp	QWORD PTR error_handler$[rsp], 0
	je	$LN35@mg_send_ht
; Line 4442
	mov	DWORD PTR scope$[rsp], 1
	jmp	SHORT $LN10@mg_send_ht
$LN8@mg_send_ht:
	mov	eax, DWORD PTR scope$[rsp]
	inc	eax
	mov	DWORD PTR scope$[rsp], eax
$LN10@mg_send_ht:
	cmp	DWORD PTR scope$[rsp], 3
	jg	$LN9@mg_send_ht
	cmp	DWORD PTR page_handler_found$[rsp], 0
	jne	$LN9@mg_send_ht
; Line 4443
	mov	eax, DWORD PTR scope$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	cmp	DWORD PTR tv152[rsp], 1
	je	SHORT $LN36@mg_send_ht
	cmp	DWORD PTR tv152[rsp], 2
	je	SHORT $LN37@mg_send_ht
	jmp	$LN38@mg_send_ht
$LN36@mg_send_ht:
; Line 4445
	mov	eax, DWORD PTR status$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR error_handler$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG162507
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 748				; 000002ecH
	lea	r8, QWORD PTR path_buf$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 4452
	jmp	$LN11@mg_send_ht
$LN37@mg_send_ht:
; Line 4456
	mov	eax, DWORD PTR status$[rsp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR error_handler$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG162509
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 748				; 000002ecH
	lea	r8, QWORD PTR path_buf$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 4463
	jmp	SHORT $LN11@mg_send_ht
$LN38@mg_send_ht:
; Line 4465
	mov	rax, QWORD PTR error_handler$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG162511
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 748				; 000002ecH
	lea	r8, QWORD PTR path_buf$[rsp]
	lea	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN11@mg_send_ht:
; Line 4483
	mov	eax, 1
	imul	rax, rax, 748				; 000002ecH
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 780			; 0000030cH
	jae	SHORT $LN50@mg_send_ht
	jmp	SHORT $LN51@mg_send_ht
$LN50@mg_send_ht:
	call	__report_rangecheckfailure
$LN51@mg_send_ht:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR path_buf$[rsp+rax], 0
; Line 4484
	lea	rcx, QWORD PTR path_buf$[rsp]
	call	strlen
	mov	DWORD PTR len$[rsp], eax
; Line 4485
	cmp	DWORD PTR len$[rsp], 748		; 000002ecH
	jle	SHORT $LN39@mg_send_ht
; Line 4486
	mov	DWORD PTR len$[rsp], 748		; 000002ecH
$LN39@mg_send_ht:
; Line 4490
	mov	edx, 46					; 0000002eH
	mov	rcx, QWORD PTR error_page_file_ext$[rsp]
	call	strchr
	mov	QWORD PTR tstr$[rsp], rax
$LN13@mg_send_ht:
; Line 4492
	cmp	QWORD PTR tstr$[rsp], 0
	je	$LN14@mg_send_ht
; Line 4493
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN17@mg_send_ht
$LN15@mg_send_ht:
; Line 4495
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@mg_send_ht:
; Line 4494
	cmp	DWORD PTR i$[rsp], 32			; 00000020H
	jge	SHORT $LN16@mg_send_ht
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR tstr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN16@mg_send_ht
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR tstr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN16@mg_send_ht
; Line 4499
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR tstr$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR path_buf$[rsp+rcx], al
; Line 4500
	jmp	SHORT $LN15@mg_send_ht
$LN16@mg_send_ht:
; Line 4504
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	cdqe
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 780			; 0000030cH
	jae	SHORT $LN52@mg_send_ht
	jmp	SHORT $LN53@mg_send_ht
$LN52@mg_send_ht:
	call	__report_rangecheckfailure
$LN53@mg_send_ht:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR path_buf$[rsp+rax], 0
; Line 4506
	lea	r8, QWORD PTR error_page_file$[rsp]
	lea	rdx, QWORD PTR path_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	SHORT $LN40@mg_send_ht
$LN20@mg_send_ht:
; Line 4507
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN20@mg_send_ht
; Line 4509
	mov	DWORD PTR page_handler_found$[rsp], 1
; Line 4510
	jmp	SHORT $LN14@mg_send_ht
$LN40@mg_send_ht:
$LN23@mg_send_ht:
; Line 4512
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN23@mg_send_ht
; Line 4517
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR tstr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, 46					; 0000002eH
	mov	rcx, rax
	call	strchr
	mov	QWORD PTR tstr$[rsp], rax
; Line 4518
	jmp	$LN13@mg_send_ht
$LN14@mg_send_ht:
; Line 4519
	jmp	$LN8@mg_send_ht
$LN9@mg_send_ht:
$LN35@mg_send_ht:
; Line 4522
	cmp	DWORD PTR page_handler_found$[rsp], 0
	je	SHORT $LN41@mg_send_ht
; Line 4523
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2424], 1
; Line 4524
	lea	r8, QWORD PTR error_page_file$[rsp]
	lea	rdx, QWORD PTR path_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ; handle_file_based_request
; Line 4525
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2424], 0
; Line 4526
	xor	eax, eax
	jmp	$LN1@mg_send_ht
$LN41@mg_send_ht:
$LN34@mg_send_ht:
; Line 4532
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 4533
	mov	edx, DWORD PTR status$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 4534
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 4535
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 4536
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_cors_header@@YAXPEAUmg_connection@@@Z ; send_cors_header
; Line 4537
	cmp	DWORD PTR has_body$[rsp], 0
	je	SHORT $LN42@mg_send_ht
; Line 4538
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG162516
	lea	rdx, OFFSET FLAT:$SG162517
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN42@mg_send_ht:
; Line 4543
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 4546
	cmp	DWORD PTR has_body$[rsp], 0
	je	SHORT $LN43@mg_send_ht
; Line 4548
	mov	edx, DWORD PTR status$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_response_code_text
	mov	QWORD PTR status_text$3[rsp], rax
; Line 4549
	mov	r9, QWORD PTR status_text$3[rsp]
	mov	r8d, DWORD PTR status$[rsp]
	lea	rdx, OFFSET FLAT:$SG162520
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 4550
	lea	rcx, QWORD PTR errmsg_buf$[rsp]
	call	strlen
	mov	r8, rax
	lea	rdx, QWORD PTR errmsg_buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
; Line 4552
	jmp	SHORT $LN44@mg_send_ht
$LN43@mg_send_ht:
$LN26@mg_send_ht:
; Line 4554
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN26@mg_send_ht
$LN44@mg_send_ht:
$LN32@mg_send_ht:
; Line 4557
	xor	eax, eax
$LN1@mg_send_ht:
$LN45@mg_send_ht:
; Line 4558
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 9224				; 00002408H
	ret	0
?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z ENDP ; mg_send_http_error_impl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cgi_config_idx$ = 48
inc$ = 49
max$ = 50
conn$ = 80
path$ = 88
file$ = 96
?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z PROC ; handle_file_based_request
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 15296
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 15301
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN6@handle_fil
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN5@handle_fil
$LN6@handle_fil:
; Line 15302
	jmp	$LN1@handle_fil
$LN5@handle_fil:
; Line 15350
	mov	BYTE PTR inc$[rsp], 5
; Line 15351
	mov	BYTE PTR max$[rsp], 10
; Line 15352
	mov	BYTE PTR cgi_config_idx$[rsp], 0
	jmp	SHORT $LN4@handle_fil
$LN2@handle_fil:
	movzx	eax, BYTE PTR inc$[rsp]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR cgi_config_idx$[rsp], al
$LN4@handle_fil:
	movzx	eax, BYTE PTR cgi_config_idx$[rsp]
	movzx	ecx, BYTE PTR max$[rsp]
	cmp	eax, ecx
	jge	$LN3@handle_fil
; Line 15353
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 20
	movsxd	rcx, ecx
	cmp	QWORD PTR [rax+rcx*8+8], 0
	je	SHORT $LN7@handle_fil
; Line 15357
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	movzx	ecx, BYTE PTR cgi_config_idx$[rsp]
	add	ecx, 20
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8+8]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jle	SHORT $LN8@handle_fil
; Line 15358
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_in_script_path@@YAHPEBUmg_connection@@PEBD@Z ; is_in_script_path
	test	eax, eax
	je	SHORT $LN9@handle_fil
; Line 15360
	movzx	r8d, BYTE PTR cgi_config_idx$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_cgi_request@@YAXPEAUmg_connection@@PEBDE@Z ; handle_cgi_request
; Line 15361
	jmp	SHORT $LN10@handle_fil
$LN9@handle_fil:
; Line 15363
	lea	r9, OFFSET FLAT:$SG167695
	lea	r8, OFFSET FLAT:$SG167696
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN10@handle_fil:
; Line 15365
	jmp	$LN1@handle_fil
$LN8@handle_fil:
$LN7@handle_fil:
; Line 15368
	jmp	$LN2@handle_fil
$LN3@handle_fil:
; Line 15371
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 34				; 00000022H
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	?match_prefix_strlen@@YA_JPEBD0@Z	; match_prefix_strlen
	test	rax, rax
	jle	SHORT $LN11@handle_fil
; Line 15372
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_in_script_path@@YAHPEBUmg_connection@@PEBD@Z ; is_in_script_path
	test	eax, eax
	je	SHORT $LN12@handle_fil
; Line 15373
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_ssi_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ; handle_ssi_file_request
; Line 15374
	jmp	SHORT $LN13@handle_fil
$LN12@handle_fil:
; Line 15376
	lea	r9, OFFSET FLAT:$SG167700
	lea	r8, OFFSET FLAT:$SG167701
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN13@handle_fil:
; Line 15378
	jmp	SHORT $LN1@handle_fil
$LN11@handle_fil:
; Line 15382
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2424], 0
	jne	SHORT $LN14@handle_fil
	mov	rax, QWORD PTR file$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z ; is_not_modified
	test	eax, eax
	je	SHORT $LN14@handle_fil
; Line 15384
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z ; handle_not_modified_static_file_request
; Line 15385
	jmp	SHORT $LN1@handle_fil
$LN14@handle_fil:
; Line 15389
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z ; handle_static_file_request
$LN1@handle_fil:
; Line 15390
	add	rsp, 72					; 00000048H
	ret	0
?handle_file_based_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@@Z ENDP ; handle_file_based_request
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cors_orig_cfg$ = 32
origin_hdr$ = 40
conn$ = 64
?send_cors_header@@YAXPEAUmg_connection@@@Z PROC	; send_cors_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4150
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4151
	lea	rdx, OFFSET FLAT:$SG162284
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR origin_hdr$[rsp], rax
; Line 4152
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 55				; 00000037H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR cors_orig_cfg$[rsp], rax
; Line 4155
	cmp	QWORD PTR cors_orig_cfg$[rsp], 0
	je	SHORT $LN2@send_cors_
	mov	rax, QWORD PTR cors_orig_cfg$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN2@send_cors_
	cmp	QWORD PTR origin_hdr$[rsp], 0
	je	SHORT $LN2@send_cors_
	mov	rax, QWORD PTR origin_hdr$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN2@send_cors_
; Line 4160
	mov	r9d, -1
	mov	r8, QWORD PTR cors_orig_cfg$[rsp]
	lea	rdx, OFFSET FLAT:$SG162286
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN2@send_cors_:
; Line 4165
	add	rsp, 56					; 00000038H
	ret	0
?send_cors_header@@YAXPEAUmg_connection@@@Z ENDP	; send_cors_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
max_age$1 = 48
header$ = 56
val$2 = 64
__$ArrayPad$ = 128
conn$ = 160
?send_additional_header@@YAXPEAUmg_connection@@@Z PROC	; send_additional_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4123
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4124
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 62				; 0000003eH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR header$[rsp], rax
; Line 4127
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 61				; 0000003dH
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN2@send_addit
; Line 4128
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 61				; 0000003dH
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atol
	mov	DWORD PTR max_age$1[rsp], eax
; Line 4129
	cmp	DWORD PTR max_age$1[rsp], 0
	jl	SHORT $LN3@send_addit
; Line 4131
	mov	eax, DWORD PTR max_age$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG162276
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR val$2[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 4137
	mov	r9d, -1
	lea	r8, QWORD PTR val$2[rsp]
	lea	rdx, OFFSET FLAT:$SG162277
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN3@send_addit:
$LN2@send_addit:
; Line 4142
	cmp	QWORD PTR header$[rsp], 0
	je	SHORT $LN4@send_addit
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR header$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN4@send_addit
; Line 4143
	mov	rdx, QWORD PTR header$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add_lines
$LN4@send_addit:
; Line 4145
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
?send_additional_header@@YAXPEAUmg_connection@@@Z ENDP	; send_additional_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
max_age$ = 48
cache_control$ = 56
val$ = 64
__$ArrayPad$ = 128
conn$ = 160
?send_static_cache_header@@YAXPEAUmg_connection@@@Z PROC ; send_static_cache_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4075
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4080
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 60				; 0000003cH
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR cache_control$[rsp], rax
; Line 4084
	cmp	QWORD PTR cache_control$[rsp], 0
	je	SHORT $LN2@send_stati
; Line 4085
	mov	r9d, -1
	mov	r8, QWORD PTR cache_control$[rsp]
	lea	rdx, OFFSET FLAT:$SG162263
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 4086
	jmp	$LN1@send_stati
$LN2@send_stati:
; Line 4091
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 59				; 0000003bH
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	atoi
	mov	DWORD PTR max_age$[rsp], eax
; Line 4092
	cmp	DWORD PTR max_age$[rsp], 0
	jg	SHORT $LN3@send_stati
; Line 4097
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 4098
	jmp	SHORT $LN1@send_stati
$LN3@send_stati:
; Line 4110
	mov	eax, DWORD PTR max_age$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG162265
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, QWORD PTR val$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 4112
	mov	r9d, -1
	lea	r8, QWORD PTR val$[rsp]
	lea	rdx, OFFSET FLAT:$SG162266
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN1@send_stati:
; Line 4118
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
?send_static_cache_header@@YAXPEAUmg_connection@@@Z ENDP ; send_static_cache_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
?send_no_cache_header@@YAXPEAUmg_connection@@@Z PROC	; send_no_cache_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4057
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4059
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG162248
	lea	rdx, OFFSET FLAT:$SG162249
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 4064
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG162250
	lea	rdx, OFFSET FLAT:$SG162251
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 4066
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@send_no_ca
; Line 4068
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG162253
	lea	rdx, OFFSET FLAT:$SG162254
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN2@send_no_ca:
; Line 4070
	add	rsp, 40					; 00000028H
	ret	0
?send_no_cache_header@@YAXPEAUmg_connection@@@Z ENDP	; send_no_cache_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
num_headers$ = 4
dp$1 = 8
buf$ = 32
hdr$ = 40
?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z PROC	; parse_http_headers
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10666
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 10668
	mov	DWORD PTR num_headers$[rsp], 0
; Line 10670
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@parse_http
$LN2@parse_http:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@parse_http:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	$LN3@parse_http
; Line 10671
	mov	rax, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dp$1[rsp], rax
$LN5@parse_http:
; Line 10674
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN6@parse_http
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 33					; 00000021H
	jl	SHORT $LN6@parse_http
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 126				; 0000007eH
	jg	SHORT $LN6@parse_http
; Line 10675
	mov	rax, QWORD PTR dp$1[rsp]
	inc	rax
	mov	QWORD PTR dp$1[rsp], rax
; Line 10676
	jmp	SHORT $LN5@parse_http
$LN6@parse_http:
; Line 10677
	mov	rax, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR dp$1[rsp], rax
	jne	SHORT $LN14@parse_http
; Line 10679
	jmp	$LN3@parse_http
$LN14@parse_http:
$LN7@parse_http:
; Line 10683
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN8@parse_http
; Line 10684
	mov	rax, QWORD PTR dp$1[rsp]
	mov	BYTE PTR [rax], 0
; Line 10685
	mov	rax, QWORD PTR dp$1[rsp]
	inc	rax
	mov	QWORD PTR dp$1[rsp], rax
; Line 10686
	jmp	SHORT $LN7@parse_http
$LN8@parse_http:
; Line 10687
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN15@parse_http
; Line 10689
	mov	eax, -1
	jmp	$LN1@parse_http
$LN15@parse_http:
; Line 10694
	mov	rax, QWORD PTR dp$1[rsp]
	mov	BYTE PTR [rax], 0
; Line 10695
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR hdr$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+rax], rdx
$LN23@parse_http:
$LN11@parse_http:
; Line 10699
	mov	rax, QWORD PTR dp$1[rsp]
	inc	rax
	mov	QWORD PTR dp$1[rsp], rax
; Line 10700
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN11@parse_http
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 9
	je	SHORT $LN23@parse_http
; Line 10703
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR hdr$[rsp]
	mov	rdx, QWORD PTR dp$1[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN12@parse_http:
; Line 10706
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN13@parse_http
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN13@parse_http
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN13@parse_http
; Line 10707
	mov	rax, QWORD PTR dp$1[rsp]
	inc	rax
	mov	QWORD PTR dp$1[rsp], rax
; Line 10708
	jmp	SHORT $LN12@parse_http
$LN13@parse_http:
; Line 10711
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	jne	SHORT $LN16@parse_http
; Line 10712
	mov	rax, QWORD PTR dp$1[rsp]
	mov	BYTE PTR [rax], 0
; Line 10713
	mov	rax, QWORD PTR dp$1[rsp]
	inc	rax
	mov	QWORD PTR dp$1[rsp], rax
; Line 10714
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN17@parse_http
; Line 10716
	mov	eax, -1
	jmp	$LN1@parse_http
$LN17@parse_http:
$LN16@parse_http:
; Line 10722
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR num_headers$[rsp], eax
; Line 10724
	mov	rax, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN18@parse_http
; Line 10725
	mov	rax, QWORD PTR dp$1[rsp]
	mov	BYTE PTR [rax], 0
; Line 10726
	mov	rax, QWORD PTR dp$1[rsp]
	inc	rax
	mov	QWORD PTR dp$1[rsp], rax
; Line 10727
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR dp$1[rsp]
	mov	QWORD PTR [rax], rcx
; Line 10729
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	je	SHORT $LN21@parse_http
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dp$1[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN20@parse_http
$LN21@parse_http:
; Line 10731
	jmp	SHORT $LN3@parse_http
$LN20@parse_http:
; Line 10733
	jmp	SHORT $LN19@parse_http
$LN18@parse_http:
; Line 10734
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR dp$1[rsp]
	mov	QWORD PTR [rax], rcx
; Line 10735
	jmp	SHORT $LN3@parse_http
$LN19@parse_http:
; Line 10737
	jmp	$LN2@parse_http
$LN3@parse_http:
; Line 10738
	mov	eax, DWORD PTR num_headers$[rsp]
$LN1@parse_http:
; Line 10739
	add	rsp, 24
	ret	0
?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z ENDP	; parse_http_headers
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
status_code$ = 48
http_version$ = 56
status_txt$ = 64
conn$ = 96
?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z PROC ; send_http1_response_status_line
; File W:\cpp\void\alistar\vendor\civetweb\src\response.inl
; Line 42
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 44
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR http_version$[rsp], rax
; Line 45
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2448]
	mov	DWORD PTR status_code$[rsp], eax
; Line 47
	cmp	DWORD PTR status_code$[rsp], 100	; 00000064H
	jl	SHORT $LN3@send_http1
	cmp	DWORD PTR status_code$[rsp], 999	; 000003e7H
	jle	SHORT $LN2@send_http1
$LN3@send_http1:
; Line 49
	mov	DWORD PTR status_code$[rsp], 500	; 000001f4H
$LN2@send_http1:
; Line 51
	cmp	QWORD PTR http_version$[rsp], 0
	jne	SHORT $LN4@send_http1
; Line 52
	lea	rax, OFFSET FLAT:$SG162163
	mov	QWORD PTR http_version$[rsp], rax
$LN4@send_http1:
; Line 56
	mov	rax, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rax+2448]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_response_code_text
	mov	QWORD PTR status_txt$[rsp], rax
; Line 60
	mov	rax, QWORD PTR status_txt$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR status_code$[rsp]
	mov	r8, QWORD PTR http_version$[rsp]
	lea	rdx, OFFSET FLAT:$SG162165
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
	cmp	eax, 10
	jge	SHORT $LN5@send_http1
; Line 62
	xor	eax, eax
	jmp	SHORT $LN1@send_http1
$LN5@send_http1:
; Line 64
	mov	eax, 1
$LN1@send_http1:
; Line 65
	add	rsp, 88					; 00000058H
	ret	0
?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z ENDP ; send_http1_response_status_line
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z PROC ; free_buffered_response_header_list
; File W:\cpp\void\alistar\vendor\civetweb\src\response.inl
; Line 18
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@free_buffe:
; Line 20
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+1240], 0
	jle	$LN3@free_buffe
; Line 21
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+1240]
	dec	eax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+1240], eax
; Line 22
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+1240]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+1248]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 25
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+1240]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+rax+1248], 0
; Line 27
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+1240]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+1256]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 30
	mov	rax, QWORD PTR conn$[rsp]
	movsxd	rax, DWORD PTR [rax+1240]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+rax+1256], 0
; Line 32
	jmp	$LN2@free_buffe
$LN3@free_buffe:
; Line 36
	add	rsp, 40					; 00000028H
	ret	0
?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z ENDP ; free_buffered_response_header_list
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
conn$ = 64
?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z PROC ; suggest_connection_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4047
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4048
	mov	rcx, QWORD PTR conn$[rsp]
	call	?should_keep_alive@@YAHPEBUmg_connection@@@Z ; should_keep_alive
	test	eax, eax
	je	SHORT $LN3@suggest_co
	lea	rax, OFFSET FLAT:$SG162144
	mov	QWORD PTR tv67[rsp], rax
	jmp	SHORT $LN4@suggest_co
$LN3@suggest_co:
	lea	rax, OFFSET FLAT:$SG162145
	mov	QWORD PTR tv67[rsp], rax
$LN4@suggest_co:
	mov	rax, QWORD PTR tv67[rsp]
; Line 4049
	add	rsp, 56					; 00000038H
	ret	0
?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z ENDP ; suggest_connection_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
conn$ = 64
?should_decode_query_string@@YAHPEBUmg_connection@@@Z PROC ; should_decode_query_string
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4035
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4036
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@should_dec
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN2@should_dec
$LN3@should_dec:
; Line 4037
	xor	eax, eax
	jmp	SHORT $LN1@should_dec
$LN2@should_dec:
; Line 4040
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 16
	lea	rdx, OFFSET FLAT:$SG162140
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN5@should_dec
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@should_dec
$LN5@should_dec:
	mov	DWORD PTR tv75[rsp], 0
$LN6@should_dec:
	mov	eax, DWORD PTR tv75[rsp]
$LN1@should_dec:
; Line 4042
	add	rsp, 56					; 00000038H
	ret	0
?should_decode_query_string@@YAHPEBUmg_connection@@@Z ENDP ; should_decode_query_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
conn$ = 64
?should_decode_url@@YAHPEBUmg_connection@@@Z PROC	; should_decode_url
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4024
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4025
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@should_dec
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	jne	SHORT $LN2@should_dec
$LN3@should_dec:
; Line 4026
	xor	eax, eax
	jmp	SHORT $LN1@should_dec
$LN2@should_dec:
; Line 4029
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 15
	lea	rdx, OFFSET FLAT:$SG162134
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN5@should_dec
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@should_dec
$LN5@should_dec:
	mov	DWORD PTR tv75[rsp], 0
$LN6@should_dec:
	mov	eax, DWORD PTR tv75[rsp]
$LN1@should_dec:
; Line 4030
	add	rsp, 56					; 00000038H
	ret	0
?should_decode_url@@YAHPEBUmg_connection@@@Z ENDP	; should_decode_url
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
header$ = 32
http_version$ = 40
conn$ = 64
?should_keep_alive@@YAHPEBUmg_connection@@@Z PROC	; should_keep_alive
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3985
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3990
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@should_kee
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2416], 0
	je	SHORT $LN2@should_kee
$LN3@should_kee:
; Line 3992
	xor	eax, eax
	jmp	$LN1@should_kee
$LN2@should_kee:
; Line 3995
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 10
	lea	rdx, OFFSET FLAT:$SG162122
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	je	SHORT $LN4@should_kee
; Line 3997
	xor	eax, eax
	jmp	SHORT $LN1@should_kee
$LN4@should_kee:
; Line 4001
	lea	rdx, OFFSET FLAT:$SG162123
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR header$[rsp], rax
; Line 4002
	cmp	QWORD PTR header$[rsp], 0
	je	SHORT $LN5@should_kee
; Line 4004
	lea	rdx, OFFSET FLAT:$SG162126
	mov	rcx, QWORD PTR header$[rsp]
	call	?header_has_option@@YAHPEBD0@Z		; header_has_option
	test	eax, eax
	je	SHORT $LN6@should_kee
; Line 4005
	mov	eax, 1
	jmp	SHORT $LN1@should_kee
$LN6@should_kee:
; Line 4007
	xor	eax, eax
	jmp	SHORT $LN1@should_kee
$LN5@should_kee:
; Line 4011
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_http_version@@YAPEBDPEBUmg_connection@@@Z ; get_http_version
	mov	QWORD PTR http_version$[rsp], rax
; Line 4012
	cmp	QWORD PTR http_version$[rsp], 0
	je	SHORT $LN7@should_kee
	lea	rdx, OFFSET FLAT:$SG162128
	mov	rcx, QWORD PTR http_version$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN7@should_kee
; Line 4014
	mov	eax, 1
	jmp	SHORT $LN1@should_kee
$LN7@should_kee:
; Line 4018
	xor	eax, eax
$LN1@should_kee:
; Line 4019
	add	rsp, 56					; 00000038H
	ret	0
?should_keep_alive@@YAHPEBUmg_connection@@@Z ENDP	; should_keep_alive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pattern$ = 48
str$ = 56
?match_prefix_strlen@@YA_JPEBD0@Z PROC			; match_prefix_strlen
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 255
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 256
	cmp	QWORD PTR pattern$[rsp], 0
	jne	SHORT $LN2@match_pref
; Line 257
	mov	rax, -1
	jmp	SHORT $LN1@match_pref
$LN2@match_pref:
; Line 259
	mov	rcx, QWORD PTR pattern$[rsp]
	call	strlen
	xor	r9d, r9d
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR pattern$[rsp]
	call	?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z ; mg_match_alternatives
$LN1@match_pref:
; Line 260
	add	rsp, 40					; 00000028H
	ret	0
?match_prefix_strlen@@YA_JPEBD0@Z ENDP			; match_prefix_strlen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pattern$ = 48
pattern_len$ = 56
str$ = 64
?match_prefix@@YA_JPEBD_K0@Z PROC			; match_prefix
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 245
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 246
	cmp	QWORD PTR pattern$[rsp], 0
	jne	SHORT $LN2@match_pref
; Line 247
	mov	rax, -1
	jmp	SHORT $LN1@match_pref
$LN2@match_pref:
; Line 249
	xor	r9d, r9d
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR pattern_len$[rsp]
	mov	rcx, QWORD PTR pattern$[rsp]
	call	?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z ; mg_match_alternatives
$LN1@match_pref:
; Line 250
	add	rsp, 40					; 00000028H
	ret	0
?match_prefix@@YA_JPEBD_K0@Z ENDP			; match_prefix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e1$ = 0
e2$ = 8
p1$ = 32
p2$ = 40
user$ = 48
?match_compare@@YAHPEBX0PEAX@Z PROC			; match_compare
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 171
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 172
	mov	rax, QWORD PTR p1$[rsp]
	mov	QWORD PTR e1$[rsp], rax
; Line 173
	mov	rax, QWORD PTR p2$[rsp]
	mov	QWORD PTR e2$[rsp], rax
; Line 178
	mov	rax, QWORD PTR e1$[rsp]
	mov	rcx, QWORD PTR e2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN2@match_comp
; Line 179
	mov	eax, 1
	jmp	SHORT $LN1@match_comp
$LN2@match_comp:
; Line 181
	mov	rax, QWORD PTR e1$[rsp]
	mov	rcx, QWORD PTR e2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@match_comp
; Line 182
	mov	eax, -1
	jmp	SHORT $LN1@match_comp
$LN3@match_comp:
; Line 184
	xor	eax, eax
$LN1@match_comp:
; Line 185
	add	rsp, 24
	ret	0
?match_compare@@YAHPEBX0PEAX@Z ENDP			; match_compare
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
left_size$1 = 32
match_alternative$ = 40
ret$2 = 48
pat$ = 80
pat_len$ = 88
str$ = 96
mcx$ = 104
?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z PROC ; mg_match_alternatives
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 135
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 136
	mov	r8, QWORD PTR pat_len$[rsp]
	mov	edx, 124				; 0000007cH
	mov	rcx, QWORD PTR pat$[rsp]
	call	memchr
	mov	QWORD PTR match_alternative$[rsp], rax
; Line 138
	cmp	QWORD PTR mcx$[rsp], 0
	je	SHORT $LN4@mg_match_a
; Line 139
	mov	rcx, QWORD PTR mcx$[rsp]
	call	?match_context_reset@@YAXPEAUmg_match_context@@@Z ; match_context_reset
$LN4@mg_match_a:
$LN2@mg_match_a:
; Line 142
	cmp	QWORD PTR match_alternative$[rsp], 0
	je	$LN3@mg_match_a
; Line 144
	mov	rax, QWORD PTR pat$[rsp]
	mov	rcx, QWORD PTR match_alternative$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR left_size$1[rsp], rax
; Line 147
	mov	r9, QWORD PTR mcx$[rsp]
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR left_size$1[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	call	?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z ; mg_match_impl
	mov	QWORD PTR ret$2[rsp], rax
; Line 148
	cmp	QWORD PTR ret$2[rsp], 0
	jl	SHORT $LN5@mg_match_a
; Line 150
	mov	rax, QWORD PTR ret$2[rsp]
	jmp	SHORT $LN1@mg_match_a
$LN5@mg_match_a:
; Line 154
	cmp	QWORD PTR mcx$[rsp], 0
	je	SHORT $LN6@mg_match_a
; Line 155
	mov	rcx, QWORD PTR mcx$[rsp]
	call	?match_context_reset@@YAXPEAUmg_match_context@@@Z ; match_context_reset
$LN6@mg_match_a:
; Line 159
	mov	rax, QWORD PTR pat$[rsp]
	mov	rcx, QWORD PTR left_size$1[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	QWORD PTR pat$[rsp], rax
; Line 160
	mov	rax, QWORD PTR left_size$1[rsp]
	inc	rax
	mov	rcx, QWORD PTR pat_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pat_len$[rsp], rax
; Line 161
	mov	r8, QWORD PTR pat_len$[rsp]
	mov	edx, 124				; 0000007cH
	mov	rcx, QWORD PTR pat$[rsp]
	call	memchr
	mov	QWORD PTR match_alternative$[rsp], rax
; Line 162
	jmp	$LN2@mg_match_a
$LN3@mg_match_a:
; Line 165
	mov	r9, QWORD PTR mcx$[rsp]
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR pat_len$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	call	?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z ; mg_match_impl
$LN1@mg_match_a:
; Line 166
	add	rsp, 72					; 00000048H
	ret	0
?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z ENDP ; mg_match_alternatives
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i_str$ = 32
i_pat$ = 40
len$1 = 48
tv66 = 56
case_sensitive$ = 60
tv197 = 64
ret$2 = 72
i_str_start$3 = 80
tv142 = 88
tv175 = 96
tv180 = 104
pat$ = 128
pat_len$ = 136
str$ = 144
mcx$ = 152
?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z PROC ; mg_match_impl
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 33
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 35
	mov	QWORD PTR i_pat$[rsp], 0
; Line 36
	mov	QWORD PTR i_str$[rsp], 0
; Line 38
	cmp	QWORD PTR mcx$[rsp], 0
	je	SHORT $LN28@mg_match_i
	mov	rax, QWORD PTR mcx$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN29@mg_match_i
$LN28@mg_match_i:
	mov	DWORD PTR tv66[rsp], 0
$LN29@mg_match_i:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR case_sensitive$[rsp], eax
$LN2@mg_match_i:
; Line 40
	mov	rax, QWORD PTR pat_len$[rsp]
	cmp	QWORD PTR i_pat$[rsp], rax
	jae	$LN3@mg_match_i
; Line 44
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	jne	$LN10@mg_match_i
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN10@mg_match_i
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	je	$LN10@mg_match_i
; Line 45
	mov	rax, QWORD PTR i_str$[rsp]
	mov	QWORD PTR i_str_start$3[rsp], rax
$LN6@mg_match_i:
; Line 48
	mov	rax, QWORD PTR i_pat$[rsp]
	inc	rax
	mov	QWORD PTR i_pat$[rsp], rax
; Line 49
	mov	rax, QWORD PTR i_str$[rsp]
	inc	rax
	mov	QWORD PTR i_str$[rsp], rax
; Line 51
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN11@mg_match_i
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN11@mg_match_i
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN11@mg_match_i
	mov	rax, QWORD PTR pat_len$[rsp]
	cmp	QWORD PTR i_pat$[rsp], rax
	jb	SHORT $LN6@mg_match_i
$LN11@mg_match_i:
; Line 54
	cmp	QWORD PTR mcx$[rsp], 0
	je	SHORT $LN12@mg_match_i
; Line 55
	mov	rax, QWORD PTR i_str_start$3[rsp]
	mov	rcx, QWORD PTR i_str$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i_str_start$3[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, QWORD PTR mcx$[rsp]
	mov	rdx, rax
	call	?match_context_push@@YAXPEBD_KPEAUmg_match_context@@@Z ; match_context_push
$LN12@mg_match_i:
; Line 59
	mov	rax, QWORD PTR pat_len$[rsp]
	cmp	QWORD PTR i_pat$[rsp], rax
	jne	SHORT $LN13@mg_match_i
; Line 60
	mov	rax, QWORD PTR i_str$[rsp]
	jmp	$LN1@mg_match_i
$LN13@mg_match_i:
$LN10@mg_match_i:
; Line 65
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 36					; 00000024H
	jne	SHORT $LN14@mg_match_i
; Line 66
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN30@mg_match_i
	mov	rax, QWORD PTR i_str$[rsp]
	mov	QWORD PTR tv142[rsp], rax
	jmp	SHORT $LN31@mg_match_i
$LN30@mg_match_i:
	mov	QWORD PTR tv142[rsp], -1
$LN31@mg_match_i:
	mov	rax, QWORD PTR tv142[rsp]
	jmp	$LN1@mg_match_i
$LN14@mg_match_i:
; Line 70
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	jne	$LN15@mg_match_i
; Line 74
	mov	rax, QWORD PTR i_pat$[rsp]
	inc	rax
	mov	QWORD PTR i_pat$[rsp], rax
; Line 75
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN16@mg_match_i
	mov	rax, QWORD PTR pat_len$[rsp]
	cmp	QWORD PTR i_pat$[rsp], rax
	jae	SHORT $LN16@mg_match_i
; Line 77
	mov	rax, QWORD PTR i_pat$[rsp]
	inc	rax
	mov	QWORD PTR i_pat$[rsp], rax
; Line 78
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	strlen
	mov	QWORD PTR len$1[rsp], rax
; Line 79
	jmp	SHORT $LN17@mg_match_i
$LN16@mg_match_i:
; Line 81
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, OFFSET FLAT:$SG162042
	mov	rcx, rax
	call	strcspn
	mov	QWORD PTR len$1[rsp], rax
$LN17@mg_match_i:
; Line 84
	mov	rax, QWORD PTR pat_len$[rsp]
	cmp	QWORD PTR i_pat$[rsp], rax
	jne	SHORT $LN18@mg_match_i
; Line 86
	cmp	QWORD PTR mcx$[rsp], 0
	je	SHORT $LN19@mg_match_i
; Line 87
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR mcx$[rsp]
	mov	rdx, QWORD PTR len$1[rsp]
	mov	rcx, rax
	call	?match_context_push@@YAXPEBD_KPEAUmg_match_context@@@Z ; match_context_push
$LN19@mg_match_i:
; Line 89
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR i_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	$LN1@mg_match_i
$LN18@mg_match_i:
$LN9@mg_match_i:
; Line 94
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	add	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR i_pat$[rsp]
	mov	rdx, QWORD PTR pat_len$[rsp]
	sub	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR i_pat$[rsp]
	mov	r8, QWORD PTR pat$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv175[rsp], rdx
	mov	r9, QWORD PTR mcx$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv175[rsp]
	mov	rcx, rax
	call	?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z ; mg_match_impl
	mov	QWORD PTR ret$2[rsp], rax
; Line 98
	cmp	QWORD PTR ret$2[rsp], -1
	jne	SHORT $LN20@mg_match_i
	mov	rax, QWORD PTR len$1[rsp]
	mov	QWORD PTR tv180[rsp], rax
	mov	rax, QWORD PTR len$1[rsp]
	dec	rax
	mov	QWORD PTR len$1[rsp], rax
	cmp	QWORD PTR tv180[rsp], 0
	ja	$LN9@mg_match_i
$LN20@mg_match_i:
; Line 101
	cmp	QWORD PTR ret$2[rsp], 0
	jl	SHORT $LN21@mg_match_i
; Line 102
	cmp	QWORD PTR mcx$[rsp], 0
	je	SHORT $LN22@mg_match_i
; Line 103
	mov	rax, QWORD PTR i_str$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR mcx$[rsp]
	mov	rdx, QWORD PTR len$1[rsp]
	mov	rcx, rax
	call	?match_context_push@@YAXPEBD_KPEAUmg_match_context@@@Z ; match_context_push
$LN22@mg_match_i:
; Line 105
	mov	rax, QWORD PTR ret$2[rsp]
	mov	rcx, QWORD PTR i_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	add	rax, QWORD PTR len$1[rsp]
	jmp	$LN1@mg_match_i
$LN21@mg_match_i:
; Line 108
	mov	rax, -1
	jmp	$LN1@mg_match_i
$LN15@mg_match_i:
; Line 113
	cmp	DWORD PTR case_sensitive$[rsp], 0
	je	SHORT $LN23@mg_match_i
; Line 114
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR i_str$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN25@mg_match_i
; Line 116
	mov	rax, -1
	jmp	SHORT $LN1@mg_match_i
$LN25@mg_match_i:
; Line 117
	jmp	SHORT $LN24@mg_match_i
$LN23@mg_match_i:
; Line 118
	mov	rax, QWORD PTR i_pat$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?lowercase@@YAHPEBD@Z			; lowercase
	mov	DWORD PTR tv197[rsp], eax
	mov	rcx, QWORD PTR i_str$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	?lowercase@@YAHPEBD@Z			; lowercase
	mov	ecx, DWORD PTR tv197[rsp]
	cmp	ecx, eax
	je	SHORT $LN26@mg_match_i
; Line 120
	mov	rax, -1
	jmp	SHORT $LN1@mg_match_i
$LN26@mg_match_i:
$LN24@mg_match_i:
; Line 123
	mov	rax, QWORD PTR i_pat$[rsp]
	inc	rax
	mov	QWORD PTR i_pat$[rsp], rax
; Line 124
	mov	rax, QWORD PTR i_str$[rsp]
	inc	rax
	mov	QWORD PTR i_str$[rsp], rax
; Line 125
	jmp	$LN2@mg_match_i
$LN3@mg_match_i:
; Line 126
	mov	rax, QWORD PTR i_str$[rsp]
$LN1@mg_match_i:
; Line 127
	add	rsp, 120				; 00000078H
	ret	0
?mg_match_impl@@YA_JPEBD_K0PEAUmg_match_context@@@Z ENDP ; mg_match_impl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 8
len$ = 16
mcx$ = 24
?match_context_push@@YAXPEBD_KPEAUmg_match_context@@@Z PROC ; match_context_push
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 19
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 20
	mov	rax, QWORD PTR mcx$[rsp]
	cmp	QWORD PTR [rax+8], 32			; 00000020H
	jae	SHORT $LN2@match_cont
; Line 21
	mov	rax, QWORD PTR mcx$[rsp]
	imul	rax, QWORD PTR [rax+8], 16
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	mov	QWORD PTR [rcx+rax+16], rdx
; Line 22
	mov	rax, QWORD PTR mcx$[rsp]
	imul	rax, QWORD PTR [rax+8], 16
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	QWORD PTR [rcx+rax+24], rdx
; Line 23
	mov	rax, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [rax+8]
	inc	rax
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN2@match_cont:
; Line 25
	ret	0
?match_context_push@@YAXPEBD_KPEAUmg_match_context@@@Z ENDP ; match_context_push
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mcx$ = 48
?match_context_reset@@YAXPEAUmg_match_context@@@Z PROC	; match_context_reset
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 10
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11
	mov	rax, QWORD PTR mcx$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 12
	mov	rax, QWORD PTR mcx$[rsp]
	add	rax, 16
	mov	r8d, 512				; 00000200H
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 13
	add	rsp, 40					; 00000028H
	ret	0
?match_context_reset@@YAXPEAUmg_match_context@@@Z ENDP	; match_context_reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gap$ = 0
k$ = 4
j$ = 8
Aidx$ = 12
i$ = 16
cmpres$1 = 20
tmp$ = 24
cmp$2 = 32
tv94 = 40
A102549$ = 48
__$ArrayPad$ = 88
data$ = 112
elemcount$ = 120
elemsize$ = 128
compfunc$ = 136
userarg$ = 144
?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z PROC		; mg_sort
; File W:\cpp\void\alistar\vendor\civetweb\src\sort.inl
; Line 10
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
; Line 17
	mov	DWORD PTR A102549$[rbp], 1
	mov	DWORD PTR A102549$[rbp+4], 4
	mov	DWORD PTR A102549$[rbp+8], 10
	mov	DWORD PTR A102549$[rbp+12], 23
	mov	DWORD PTR A102549$[rbp+16], 57		; 00000039H
	mov	DWORD PTR A102549$[rbp+20], 132		; 00000084H
	mov	DWORD PTR A102549$[rbp+24], 301		; 0000012dH
	mov	DWORD PTR A102549$[rbp+28], 701		; 000002bdH
	mov	DWORD PTR A102549$[rbp+32], 1750	; 000006d6H
; Line 19
	mov	rax, QWORD PTR elemsize$[rbp]
	add	rax, 15
	cmp	rax, QWORD PTR elemsize$[rbp]
	ja	SHORT $LN18@mg_sort
	mov	rax, 1152921504606846960		; 0ffffffffffffff0H
$LN18@mg_sort:
	and	rax, -16
	call	__chkstk
	sub	rsp, rax
	lea	rax, QWORD PTR [rsp+32]
	mov	QWORD PTR tmp$[rbp], rax
; Line 21
	mov	DWORD PTR Aidx$[rbp], 8
	jmp	SHORT $LN4@mg_sort
$LN2@mg_sort:
	mov	eax, DWORD PTR Aidx$[rbp]
	dec	eax
	mov	DWORD PTR Aidx$[rbp], eax
$LN4@mg_sort:
	cmp	DWORD PTR Aidx$[rbp], 0
	jl	$LN3@mg_sort
; Line 22
	movsxd	rax, DWORD PTR Aidx$[rbp]
	mov	eax, DWORD PTR A102549$[rbp+rax*4]
	mov	DWORD PTR gap$[rbp], eax
; Line 23
	mov	eax, DWORD PTR elemcount$[rbp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR gap$[rbp], eax
	jle	SHORT $LN14@mg_sort
; Line 24
	jmp	SHORT $LN2@mg_sort
$LN14@mg_sort:
; Line 26
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN7@mg_sort
$LN5@mg_sort:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN7@mg_sort:
	mov	eax, DWORD PTR gap$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN6@mg_sort
; Line 27
	mov	eax, DWORD PTR i$[rbp]
	mov	DWORD PTR j$[rbp], eax
	jmp	SHORT $LN10@mg_sort
$LN8@mg_sort:
	mov	eax, DWORD PTR gap$[rbp]
	mov	ecx, DWORD PTR j$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rbp], eax
$LN10@mg_sort:
	mov	eax, DWORD PTR elemcount$[rbp]
	cmp	DWORD PTR j$[rbp], eax
	jge	$LN9@mg_sort
; Line 28
	movsxd	rax, DWORD PTR j$[rbp]
	mov	rcx, QWORD PTR elemsize$[rbp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR elemsize$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tmp$[rbp]
	call	memcpy
; Line 30
	mov	eax, DWORD PTR j$[rbp]
	mov	DWORD PTR k$[rbp], eax
	jmp	SHORT $LN13@mg_sort
$LN11@mg_sort:
	mov	eax, DWORD PTR gap$[rbp]
	mov	ecx, DWORD PTR k$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rbp], eax
$LN13@mg_sort:
	mov	eax, DWORD PTR gap$[rbp]
	cmp	DWORD PTR k$[rbp], eax
	jl	$LN12@mg_sort
; Line 31
	mov	eax, DWORD PTR gap$[rbp]
	mov	ecx, DWORD PTR k$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR elemsize$[rbp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cmp$2[rbp], rax
; Line 33
	mov	rax, QWORD PTR compfunc$[rbp]
	mov	QWORD PTR tv94[rbp], rax
	mov	r8, QWORD PTR userarg$[rbp]
	mov	rdx, QWORD PTR tmp$[rbp]
	mov	rcx, QWORD PTR cmp$2[rbp]
	call	QWORD PTR tv94[rbp]
	mov	DWORD PTR cmpres$1[rbp], eax
; Line 34
	cmp	DWORD PTR cmpres$1[rbp], 0
	jle	SHORT $LN15@mg_sort
; Line 35
	movsxd	rax, DWORD PTR k$[rbp]
	mov	rcx, QWORD PTR elemsize$[rbp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR elemsize$[rbp]
	mov	rdx, QWORD PTR cmp$2[rbp]
	mov	rcx, rax
	call	memcpy
; Line 38
	jmp	SHORT $LN16@mg_sort
$LN15@mg_sort:
; Line 39
	jmp	SHORT $LN12@mg_sort
$LN16@mg_sort:
; Line 41
	jmp	$LN11@mg_sort
$LN12@mg_sort:
; Line 42
	movsxd	rax, DWORD PTR k$[rbp]
	mov	rcx, QWORD PTR elemsize$[rbp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR elemsize$[rbp]
	mov	rdx, QWORD PTR tmp$[rbp]
	mov	rcx, rax
	call	memcpy
; Line 43
	jmp	$LN8@mg_sort
$LN9@mg_sort:
; Line 44
	jmp	$LN5@mg_sort
$LN6@mg_sort:
; Line 45
	jmp	$LN2@mg_sort
$LN3@mg_sort:
; Line 46
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+96]
	pop	rbp
	ret	0
?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z ENDP		; mg_sort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
opt_vec$ = 32
eq_vec$ = 48
header$ = 80
option$ = 88
?header_has_option@@YAHPEBD0@Z PROC			; header_has_option
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3957
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN2@header_has:
; Line 3964
	lea	r8, QWORD PTR eq_vec$[rsp]
	lea	rdx, QWORD PTR opt_vec$[rsp]
	mov	rcx, QWORD PTR header$[rsp]
	call	?next_option@@YAPEBDPEBDPEAUvec@@1@Z	; next_option
	mov	QWORD PTR header$[rsp], rax
	cmp	QWORD PTR header$[rsp], 0
	je	SHORT $LN3@header_has
; Line 3965
	mov	r8, QWORD PTR opt_vec$[rsp+8]
	mov	rdx, QWORD PTR opt_vec$[rsp]
	mov	rcx, QWORD PTR option$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	SHORT $LN4@header_has
; Line 3966
	mov	eax, 1
	jmp	SHORT $LN1@header_has
$LN4@header_has:
; Line 3967
	jmp	SHORT $LN2@header_has
$LN3@header_has:
; Line 3969
	xor	eax, eax
$LN1@header_has:
; Line 3970
	add	rsp, 72					; 00000048H
	ret	0
?header_has_option@@YAHPEBD0@Z ENDP			; header_has_option
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
end$ = 32
list$ = 64
val$ = 72
eq_val$ = 80
?next_option@@YAPEBDPEBDPEAUvec@@1@Z PROC		; next_option
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3900
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$reparse$16:
; Line 3904
	cmp	QWORD PTR val$[rsp], 0
	je	SHORT $LN7@next_optio
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN7@next_optio
	mov	rax, QWORD PTR list$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN6@next_optio
$LN7@next_optio:
; Line 3906
	xor	eax, eax
	jmp	$LN1@next_optio
$LN6@next_optio:
$LN2@next_optio:
; Line 3910
	mov	rax, QWORD PTR list$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN8@next_optio
	mov	rax, QWORD PTR list$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 9
	jne	SHORT $LN3@next_optio
$LN8@next_optio:
; Line 3911
	mov	rax, QWORD PTR list$[rsp]
	inc	rax
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN2@next_optio
$LN3@next_optio:
; Line 3913
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3914
	mov	edx, 44					; 0000002cH
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strchr
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN9@next_optio
; Line 3916
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR list$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 3917
	mov	rax, QWORD PTR list$[rsp]
	inc	rax
	mov	QWORD PTR list$[rsp], rax
; Line 3918
	jmp	SHORT $LN10@next_optio
$LN9@next_optio:
; Line 3920
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strlen
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR list$[rsp], rax
; Line 3921
	mov	rax, QWORD PTR val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR list$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN10@next_optio:
; Line 3925
	mov	rax, QWORD PTR val$[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	DWORD PTR end$[rsp], eax
$LN4@next_optio:
; Line 3926
	cmp	DWORD PTR end$[rsp], 0
	jl	SHORT $LN5@next_optio
	movsxd	rax, DWORD PTR end$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN11@next_optio
	movsxd	rax, DWORD PTR end$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 9
	jne	SHORT $LN5@next_optio
$LN11@next_optio:
; Line 3927
	mov	eax, DWORD PTR end$[rsp]
	dec	eax
	mov	DWORD PTR end$[rsp], eax
	jmp	SHORT $LN4@next_optio
$LN5@next_optio:
; Line 3928
	movsxd	rax, DWORD PTR end$[rsp]
	inc	rax
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 3930
	mov	rax, QWORD PTR val$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN12@next_optio
; Line 3932
	jmp	$reparse$16
$LN12@next_optio:
; Line 3935
	cmp	QWORD PTR eq_val$[rsp], 0
	je	$LN13@next_optio
; Line 3938
	mov	rax, QWORD PTR eq_val$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 3939
	mov	rax, QWORD PTR val$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, 61					; 0000003dH
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memchr
	mov	rcx, QWORD PTR eq_val$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3940
	mov	rax, QWORD PTR eq_val$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN14@next_optio
; Line 3941
	mov	rax, QWORD PTR eq_val$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR eq_val$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3942
	mov	rax, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR eq_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	rcx, QWORD PTR val$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR eq_val$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 3943
	mov	rax, QWORD PTR eq_val$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	dec	rax
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN14@next_optio:
$LN13@next_optio:
; Line 3947
	mov	rax, QWORD PTR list$[rsp]
$LN1@next_optio:
; Line 3948
	add	rsp, 56					; 00000038H
	ret	0
?next_option@@YAPEBDPEBDPEAUvec@@1@Z ENDP		; next_option
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 8
?get_http_version@@YAPEBDPEBUmg_connection@@@Z PROC	; get_http_version
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3877
	mov	QWORD PTR [rsp+8], rcx
; Line 3878
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@get_http_v
; Line 3879
	xor	eax, eax
	jmp	SHORT $LN1@get_http_v
$LN2@get_http_v:
; Line 3882
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN3@get_http_v
; Line 3883
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+48]
	jmp	SHORT $LN1@get_http_v
$LN3@get_http_v:
; Line 3885
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	SHORT $LN4@get_http_v
; Line 3886
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+1224]
	jmp	SHORT $LN1@get_http_v
$LN4@get_http_v:
; Line 3888
	xor	eax, eax
$LN1@get_http_v:
; Line 3889
	ret	0
?get_http_version@@YAPEBDPEBUmg_connection@@@Z ENDP	; get_http_version
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
cnt$ = 36
ri$ = 64
name$ = 72
output$ = 80
output_max_size$ = 88
?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z PROC ; get_req_headers
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3840
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3842
	mov	DWORD PTR cnt$[rsp], 0
; Line 3843
	cmp	QWORD PTR ri$[rsp], 0
	je	$LN5@get_req_he
; Line 3844
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_req_he
$LN2@get_req_he:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_req_he:
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax+144]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@get_req_he
	mov	eax, DWORD PTR output_max_size$[rsp]
	cmp	DWORD PTR cnt$[rsp], eax
	jge	SHORT $LN3@get_req_he
; Line 3845
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR ri$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+152]
	mov	rcx, QWORD PTR name$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN6@get_req_he
; Line 3846
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	movsxd	rcx, DWORD PTR cnt$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	r8, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [r8+rax+160]
	mov	QWORD PTR [rdx+rcx*8], rax
	mov	eax, DWORD PTR cnt$[rsp]
	inc	eax
	mov	DWORD PTR cnt$[rsp], eax
$LN6@get_req_he:
; Line 3848
	jmp	SHORT $LN2@get_req_he
$LN3@get_req_he:
$LN5@get_req_he:
; Line 3850
	mov	eax, DWORD PTR cnt$[rsp]
; Line 3851
	add	rsp, 56					; 00000038H
	ret	0
?get_req_headers@@YAHPEBUmg_request_info@@PEBDPEAPEBDH@Z ENDP ; get_req_headers
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
hdr$ = 64
num_hdr$ = 72
name$ = 80
?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z PROC		; get_header
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3821
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3823
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_header
$LN2@get_header:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_header:
	mov	eax, DWORD PTR num_hdr$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@get_header
; Line 3824
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR hdr$[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR name$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN5@get_header
; Line 3825
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR hdr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	jmp	SHORT $LN1@get_header
$LN5@get_header:
; Line 3827
	jmp	SHORT $LN2@get_header
$LN3@get_header:
; Line 3829
	xor	eax, eax
$LN1@get_header:
; Line 3830
	add	rsp, 56					; 00000038H
	ret	0
?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ENDP		; get_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
end_word$ = 40
begin_word$ = 48
end_off$1 = 56
end_whitespace$ = 64
buf$ = 96
delimiters$ = 104
whitespace$ = 112
quotechar$ = 120
?skip_quoted@@YAPEADPEAPEADPEBD1D@Z PROC		; skip_quoted
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3761
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3764
	mov	rax, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR begin_word$[rsp], rax
; Line 3765
	mov	rdx, QWORD PTR delimiters$[rsp]
	mov	rcx, QWORD PTR begin_word$[rsp]
	call	strcspn
	mov	rcx, QWORD PTR begin_word$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR end_word$[rsp], rax
; Line 3768
	mov	rax, QWORD PTR begin_word$[rsp]
	cmp	QWORD PTR end_word$[rsp], rax
	jbe	$LN10@skip_quote
; Line 3769
	mov	rax, QWORD PTR end_word$[rsp]
	dec	rax
	mov	QWORD PTR p$[rsp], rax
$LN2@skip_quote:
; Line 3770
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR quotechar$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN3@skip_quote
; Line 3776
	mov	rax, QWORD PTR end_word$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN11@skip_quote
; Line 3777
	mov	rax, QWORD PTR end_word$[rsp]
	inc	rax
	mov	rdx, QWORD PTR delimiters$[rsp]
	mov	rcx, rax
	call	strcspn
	mov	QWORD PTR end_off$1[rsp], rax
; Line 3778
	mov	rax, QWORD PTR end_off$1[rsp]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR end_word$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	memmove
; Line 3779
	mov	rax, QWORD PTR end_off$1[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 3780
	mov	rax, QWORD PTR end_word$[rsp]
	mov	rcx, QWORD PTR end_off$1[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	QWORD PTR end_word$[rsp], rax
; Line 3781
	jmp	SHORT $LN12@skip_quote
$LN11@skip_quote:
; Line 3782
	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0
; Line 3783
	jmp	SHORT $LN3@skip_quote
$LN12@skip_quote:
; Line 3785
	jmp	$LN2@skip_quote
$LN3@skip_quote:
; Line 3786
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN6@skip_quote
$LN4@skip_quote:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN6@skip_quote:
	mov	rax, QWORD PTR end_word$[rsp]
	cmp	QWORD PTR p$[rsp], rax
	jae	SHORT $LN5@skip_quote
; Line 3787
	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0
; Line 3788
	jmp	SHORT $LN4@skip_quote
$LN5@skip_quote:
$LN10@skip_quote:
; Line 3791
	mov	rax, QWORD PTR end_word$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN13@skip_quote
; Line 3792
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR end_word$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3793
	jmp	SHORT $LN14@skip_quote
$LN13@skip_quote:
; Line 3801
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR end_word$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR whitespace$[rsp]
	mov	rcx, rax
	call	strspn
	mov	rcx, QWORD PTR end_word$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	QWORD PTR end_whitespace$[rsp], rax
; Line 3807
	mov	rax, QWORD PTR end_word$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN9@skip_quote
$LN7@skip_quote:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN9@skip_quote:
	mov	rax, QWORD PTR end_whitespace$[rsp]
	cmp	QWORD PTR p$[rsp], rax
	jae	SHORT $LN8@skip_quote
; Line 3808
	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0
; Line 3809
	jmp	SHORT $LN7@skip_quote
$LN8@skip_quote:
; Line 3811
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR end_whitespace$[rsp]
	mov	QWORD PTR [rax], rcx
$LN14@skip_quote:
; Line 3814
	mov	rax, QWORD PTR begin_word$[rsp]
; Line 3815
	add	rsp, 88					; 00000058H
	ret	0
?skip_quoted@@YAPEADPEAPEADPEBD1D@Z ENDP		; skip_quoted
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv150 = 80
i$1 = 84
j$2 = 88
uri_encoded$3 = 96
default_port$4 = 104
tv81 = 108
tv178 = 112
port$5 = 116
truncated$6 = 120
ri$7 = 128
auth_domain_check_enabled$8 = 136
uri$9 = 144
server_domain$10 = 152
tv71 = 160
tv77 = 168
tv78 = 176
uri_encoded_len$11 = 184
$T12 = 192
proto$13 = 200
portstr$14 = 208
server_ip$15 = 224
__$ArrayPad$ = 272
conn$ = 304
buf$ = 312
buflen$ = 320
define_proto$ = 328
define_port$ = 336
define_uri$ = 344
?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z PROC ; mg_construct_local_link
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3607
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3608
	cmp	QWORD PTR buflen$[rsp], 1
	jb	SHORT $LN7@mg_constru
	cmp	QWORD PTR buf$[rsp], 0
	je	SHORT $LN7@mg_constru
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@mg_constru
$LN7@mg_constru:
; Line 3609
	mov	eax, -1
	jmp	$LN1@mg_constru
; Line 3610
	jmp	$LN6@mg_constru
$LN5@mg_constru:
; Line 3612
	mov	DWORD PTR truncated$6[rsp], 0
; Line 3613
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	QWORD PTR ri$7[rsp], rax
; Line 3615
	cmp	QWORD PTR define_proto$[rsp], 0
	je	SHORT $LN23@mg_constru
	mov	rax, QWORD PTR define_proto$[rsp]
	mov	QWORD PTR tv71[rsp], rax
	jmp	SHORT $LN24@mg_constru
$LN23@mg_constru:
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_proto_name@@YAPEBDPEBUmg_connection@@@Z ; get_proto_name
	mov	QWORD PTR tv71[rsp], rax
$LN24@mg_constru:
	mov	rax, QWORD PTR tv71[rsp]
	mov	QWORD PTR proto$13[rsp], rax
; Line 3617
	cmp	QWORD PTR define_uri$[rsp], 0
	je	SHORT $LN27@mg_constru
	mov	rax, QWORD PTR define_uri$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	jmp	SHORT $LN28@mg_constru
$LN27@mg_constru:
	mov	rax, QWORD PTR ri$7[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN25@mg_constru
	mov	rax, QWORD PTR ri$7[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv77[rsp], rax
	jmp	SHORT $LN26@mg_constru
$LN25@mg_constru:
	mov	rax, QWORD PTR ri$7[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv77[rsp], rax
$LN26@mg_constru:
	mov	rax, QWORD PTR tv77[rsp]
	mov	QWORD PTR tv78[rsp], rax
$LN28@mg_constru:
	mov	rax, QWORD PTR tv78[rsp]
	mov	QWORD PTR uri$9[rsp], rax
; Line 3621
	cmp	DWORD PTR define_port$[rsp], 0
	jle	SHORT $LN29@mg_constru
	mov	eax, DWORD PTR define_port$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN30@mg_constru
$LN29@mg_constru:
	mov	rax, QWORD PTR ri$7[rsp]
	mov	eax, DWORD PTR [rax+116]
	mov	DWORD PTR tv81[rsp], eax
$LN30@mg_constru:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR port$5[rsp], eax
; Line 3622
	mov	DWORD PTR default_port$4[rsp], 80	; 00000050H
; Line 3626
	cmp	QWORD PTR uri$9[rsp], 0
	jne	SHORT $LN8@mg_constru
; Line 3627
	mov	eax, -1
	jmp	$LN1@mg_constru
$LN8@mg_constru:
; Line 3630
	mov	rcx, QWORD PTR uri$9[rsp]
	call	strlen
	imul	rax, rax, 3
	inc	rax
	mov	QWORD PTR uri_encoded_len$11[rsp], rax
; Line 3631
	mov	rcx, QWORD PTR uri_encoded_len$11[rsp]
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR uri_encoded$3[rsp], rax
; Line 3632
	cmp	QWORD PTR uri_encoded$3[rsp], 0
	jne	SHORT $LN9@mg_constru
; Line 3633
	mov	eax, -1
	jmp	$LN1@mg_constru
$LN9@mg_constru:
; Line 3635
	mov	r8, QWORD PTR uri_encoded_len$11[rsp]
	mov	rdx, QWORD PTR uri_encoded$3[rsp]
	mov	rcx, QWORD PTR uri$9[rsp]
	call	mg_url_encode
; Line 3638
	mov	DWORD PTR j$2[rsp], 0
	mov	eax, DWORD PTR j$2[rsp]
	mov	DWORD PTR i$1[rsp], eax
	jmp	SHORT $LN4@mg_constru
$LN2@mg_constru:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN4@mg_constru:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@mg_constru
; Line 3639
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG161837
	mov	rcx, rax
	call	strncmp
	test	eax, eax
	jne	SHORT $LN10@mg_constru
; Line 3640
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	mov	BYTE PTR [rcx+rax], 47			; 0000002fH
; Line 3641
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 3
	mov	DWORD PTR i$1[rsp], eax
; Line 3642
	jmp	SHORT $LN11@mg_constru
$LN10@mg_constru:
; Line 3643
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv150[rsp], al
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	movzx	edx, BYTE PTR tv150[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN11@mg_constru:
; Line 3645
	jmp	$LN2@mg_constru
$LN3@mg_constru:
; Line 3646
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 3674
	cmp	QWORD PTR define_proto$[rsp], 0
	je	SHORT $LN12@mg_constru
; Line 3677
	lea	rdx, OFFSET FLAT:$SG161842
	mov	rcx, QWORD PTR define_proto$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN15@mg_constru
	lea	rdx, OFFSET FLAT:$SG161843
	mov	rcx, QWORD PTR define_proto$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN14@mg_constru
$LN15@mg_constru:
; Line 3678
	mov	DWORD PTR default_port$4[rsp], 443	; 000001bbH
$LN14@mg_constru:
; Line 3679
	jmp	SHORT $LN13@mg_constru
$LN12@mg_constru:
; Line 3680
	mov	rax, QWORD PTR ri$7[rsp]
	cmp	DWORD PTR [rax+120], 0
	je	SHORT $LN16@mg_constru
; Line 3683
	mov	DWORD PTR default_port$4[rsp], 443	; 000001bbH
$LN16@mg_constru:
$LN13@mg_constru:
; Line 3690
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 33				; 00000021H
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN31@mg_constru
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 33				; 00000021H
	lea	rdx, OFFSET FLAT:$SG161845
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN31@mg_constru
	mov	DWORD PTR tv178[rsp], 1
	jmp	SHORT $LN32@mg_constru
$LN31@mg_constru:
	mov	DWORD PTR tv178[rsp], 0
$LN32@mg_constru:
	mov	eax, DWORD PTR tv178[rsp]
	mov	DWORD PTR auth_domain_check_enabled$8[rsp], eax
; Line 3695
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR server_domain$10[rsp], rax
; Line 3701
	mov	eax, DWORD PTR default_port$4[rsp]
	cmp	DWORD PTR port$5[rsp], eax
	je	SHORT $LN17@mg_constru
; Line 3702
	mov	r8d, DWORD PTR port$5[rsp]
	lea	rdx, OFFSET FLAT:$SG161848
	lea	rcx, QWORD PTR portstr$14[rsp]
	call	sprintf
; Line 3703
	jmp	SHORT $LN18@mg_constru
$LN17@mg_constru:
; Line 3704
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T12[rsp], rax
	cmp	QWORD PTR $T12[rsp], 16
	jae	SHORT $LN33@mg_constru
	jmp	SHORT $LN34@mg_constru
$LN33@mg_constru:
	call	__report_rangecheckfailure
$LN34@mg_constru:
	mov	rax, QWORD PTR $T12[rsp]
	mov	BYTE PTR portstr$14[rsp+rax], 0
$LN18@mg_constru:
; Line 3707
	cmp	DWORD PTR auth_domain_check_enabled$8[rsp], 0
	je	SHORT $LN20@mg_constru
	cmp	QWORD PTR server_domain$10[rsp], 0
	jne	SHORT $LN19@mg_constru
$LN20@mg_constru:
; Line 3709
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2304				; 00000900H
	mov	r8, rax
	mov	edx, 48					; 00000030H
	lea	rcx, QWORD PTR server_ip$15[rsp]
	call	?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ; sockaddr_to_string
; Line 3713
	lea	rax, QWORD PTR server_ip$15[rsp]
	mov	QWORD PTR server_domain$10[rsp], rax
$LN19@mg_constru:
; Line 3716
	mov	rax, QWORD PTR uri_encoded$3[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR portstr$14[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR server_domain$10[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR proto$13[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG161851
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR buflen$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	lea	rdx, QWORD PTR truncated$6[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 3734
	mov	rcx, QWORD PTR uri_encoded$3[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 3735
	cmp	DWORD PTR truncated$6[rsp], 0
	je	SHORT $LN21@mg_constru
; Line 3736
	mov	eax, -1
	jmp	SHORT $LN1@mg_constru
$LN21@mg_constru:
; Line 3738
	xor	eax, eax
$LN6@mg_constru:
$LN1@mg_constru:
$LN22@mg_constru:
; Line 3741
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z ENDP ; mg_construct_local_link
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
ri$ = 8
tv72 = 16
tv73 = 24
proto$ = 32
conn$ = 64
?get_proto_name@@YAPEBDPEBUmg_connection@@@Z PROC	; get_proto_name
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3575
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3586
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	QWORD PTR ri$[rsp], rax
; Line 3588
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN7@get_proto_
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax+120], 0
	je	SHORT $LN3@get_proto_
	lea	rax, OFFSET FLAT:$SG161798
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@get_proto_
$LN3@get_proto_:
	lea	rax, OFFSET FLAT:$SG161799
	mov	QWORD PTR tv69[rsp], rax
$LN4@get_proto_:
	mov	rax, QWORD PTR tv69[rsp]
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN8@get_proto_
$LN7@get_proto_:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax+120], 0
	je	SHORT $LN5@get_proto_
	lea	rax, OFFSET FLAT:$SG161800
	mov	QWORD PTR tv72[rsp], rax
	jmp	SHORT $LN6@get_proto_
$LN5@get_proto_:
	lea	rax, OFFSET FLAT:$SG161801
	mov	QWORD PTR tv72[rsp], rax
$LN6@get_proto_:
	mov	rax, QWORD PTR tv72[rsp]
	mov	QWORD PTR tv73[rsp], rax
$LN8@get_proto_:
	mov	rax, QWORD PTR tv73[rsp]
	mov	QWORD PTR proto$[rsp], rax
; Line 3592
	mov	rax, QWORD PTR proto$[rsp]
; Line 3597
	add	rsp, 56					; 00000038H
	ret	0
?get_proto_name@@YAPEBDPEBUmg_connection@@@Z ENDP	; get_proto_name
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fc$ = 24
ctx$ = 32
?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z PROC ; fake_connection
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3471
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
; Line 3473
	lea	rax, OFFSET FLAT:?conn_zero@?1??fake_connection@@YAPEAUmg_connection@@PEAU2@PEAUmg_context@@@Z@4U2@B
	mov	rdi, QWORD PTR fc$[rsp]
	mov	rsi, rax
	mov	ecx, 2520				; 000009d8H
	rep movsb
; Line 3474
	mov	rax, QWORD PTR fc$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+2272], rcx
; Line 3475
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR fc$[rsp]
	mov	QWORD PTR [rcx+2280], rax
; Line 3476
	mov	rax, QWORD PTR fc$[rsp]
; Line 3477
	pop	rdi
	pop	rsi
	ret	0
?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z ENDP ; fake_connection
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
tv159 = 40
tv88 = 48
timestamp$ = 56
fi$ = 64
src_addr$ = 104
buf$ = 160
__$ArrayPad$ = 8352
conn$ = 8384
func$ = 8392
line$ = 8400
fmt$ = 8408
ap$ = 8416
?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z PROC ; mg_cry_internal_impl
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3387
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8376				; 000020b8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3401
	mov	r9, QWORD PTR ap$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 8192				; 00002000H
	lea	rcx, QWORD PTR buf$[rsp]
	call	_vsnprintf
	test	eax, eax
	je	SHORT $LN14@mg_cry_int
	xor	eax, eax
$LN14@mg_cry_int:
; Line 3407
	mov	eax, 1
	imul	rax, rax, 8191				; 00001fffH
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 8192		; 00002000H
	jae	SHORT $LN15@mg_cry_int
	jmp	SHORT $LN16@mg_cry_int
$LN15@mg_cry_int:
	call	__report_rangecheckfailure
$LN16@mg_cry_int:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
$LN4@mg_cry_int:
; Line 3409
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@mg_cry_int
; Line 3411
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@mg_cry_int
; Line 3412
	lea	rcx, QWORD PTR buf$[rsp]
	call	puts
; Line 3413
	jmp	$LN1@mg_cry_int
$LN5@mg_cry_int:
; Line 3420
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32000], 0
	je	SHORT $LN7@mg_cry_int
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rax, QWORD PTR [rax+32000]
	mov	QWORD PTR tv88[rsp], rax
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	QWORD PTR tv88[rsp]
	test	eax, eax
	jne	$LN6@mg_cry_int
$LN7@mg_cry_int:
; Line 3422
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 19
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN8@mg_cry_int
; Line 3427
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 19
	lea	r9, QWORD PTR fi$[rsp]
	mov	r8d, 4
	mov	rdx, QWORD PTR [rax+rcx+8]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN10@mg_cry_int
; Line 3428
	mov	QWORD PTR fi$[rsp+32], 0
$LN10@mg_cry_int:
; Line 3430
	jmp	SHORT $LN9@mg_cry_int
$LN8@mg_cry_int:
; Line 3431
	mov	QWORD PTR fi$[rsp+32], 0
$LN9@mg_cry_int:
; Line 3434
	cmp	QWORD PTR fi$[rsp+32], 0
	je	$LN11@mg_cry_int
; Line 3435
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 3436
	xor	ecx, ecx
	call	time
	mov	QWORD PTR timestamp$[rsp], rax
; Line 3438
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2320				; 00000910H
	mov	r8, rax
	mov	edx, 50					; 00000032H
	lea	rcx, QWORD PTR src_addr$[rsp]
	call	?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ; sockaddr_to_string
; Line 3439
	lea	r9, QWORD PTR src_addr$[rsp]
	mov	r8d, DWORD PTR timestamp$[rsp]
	lea	rdx, OFFSET FLAT:$SG161741
	mov	rcx, QWORD PTR fi$[rsp+32]
	call	fprintf
; Line 3444
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN12@mg_cry_int
; Line 3445
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN17@mg_cry_int
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv159[rsp], rax
	jmp	SHORT $LN18@mg_cry_int
$LN17@mg_cry_int:
	lea	rax, OFFSET FLAT:$SG161743
	mov	QWORD PTR tv159[rsp], rax
$LN18@mg_cry_int:
	mov	r9, QWORD PTR tv159[rsp]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+16]
	lea	rdx, OFFSET FLAT:$SG161744
	mov	rcx, QWORD PTR fi$[rsp+32]
	call	fprintf
$LN12@mg_cry_int:
; Line 3453
	lea	r8, QWORD PTR buf$[rsp]
	lea	rdx, OFFSET FLAT:$SG161745
	mov	rcx, QWORD PTR fi$[rsp+32]
	call	fprintf
; Line 3454
	mov	rdx, QWORD PTR fi$[rsp+32]
	mov	ecx, 10
	call	fputc
; Line 3455
	mov	rcx, QWORD PTR fi$[rsp+32]
	call	fflush
; Line 3456
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 3457
	lea	rcx, QWORD PTR fi$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
$LN11@mg_cry_int:
$LN6@mg_cry_int:
$LN1@mg_cry_int:
$LN13@mg_cry_int:
; Line 3461
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8376				; 000020b8H
	ret	0
?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z ENDP ; mg_cry_internal_impl
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ts_now$ = 8
ts_before$ = 16
?mg_difftimespec@@YANPEBUtimespec@@0@Z PROC		; mg_difftimespec
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3365
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 3366
	mov	rax, QWORD PTR ts_now$[rsp]
	mov	rcx, QWORD PTR ts_before$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR __real@3e112e0be826d695
	mov	rax, QWORD PTR ts_now$[rsp]
	mov	rcx, QWORD PTR ts_before$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cvtsi2sd xmm1, rax
	addsd	xmm0, xmm1
; Line 3368
	ret	0
?mg_difftimespec@@YANPEBUtimespec@@0@Z ENDP		; mg_difftimespec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
tm$ = 40
buf$ = 64
buf_len$ = 72
t$ = 80
?gmt_time_string@@YAXPEAD_KPEA_J@Z PROC			; gmt_time_string
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3342
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3346
	cmp	QWORD PTR t$[rsp], 0
	je	SHORT $LN5@gmt_time_s
	mov	rcx, QWORD PTR t$[rsp]
	call	gmtime
	mov	QWORD PTR tv67[rsp], rax
	jmp	SHORT $LN6@gmt_time_s
$LN5@gmt_time_s:
	mov	QWORD PTR tv67[rsp], 0
$LN6@gmt_time_s:
	mov	rax, QWORD PTR tv67[rsp]
	mov	QWORD PTR tm$[rsp], rax
; Line 3347
	cmp	QWORD PTR tm$[rsp], 0
	je	SHORT $LN2@gmt_time_s
; Line 3355
	mov	r9, QWORD PTR tm$[rsp]
	lea	r8, OFFSET FLAT:$SG161704
	mov	rdx, QWORD PTR buf_len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	strftime
; Line 3356
	jmp	SHORT $LN3@gmt_time_s
$LN2@gmt_time_s:
; Line 3357
	mov	r8, QWORD PTR buf_len$[rsp]
	lea	rdx, OFFSET FLAT:$SG161705
	mov	rcx, QWORD PTR buf$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
$LN3@gmt_time_s:
; Line 3359
	add	rsp, 56					; 00000038H
	ret	0
?gmt_time_string@@YAXPEAD_KPEA_J@Z ENDP			; gmt_time_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 80
len$ = 88
usa$ = 96
?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z PROC		; sockaddr_to_string
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3293
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3294
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 3296
	cmp	QWORD PTR usa$[rsp], 0
	jne	SHORT $LN2@sockaddr_t
; Line 3297
	jmp	SHORT $LN1@sockaddr_t
$LN2@sockaddr_t:
; Line 3300
	mov	rax, QWORD PTR usa$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 2
	jne	SHORT $LN3@sockaddr_t
; Line 3301
	mov	rax, QWORD PTR usa$[rsp]
	mov	DWORD PTR [rsp+48], 2
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	mov	edx, 16
	mov	rcx, rax
	call	QWORD PTR __imp_getnameinfo
$LN3@sockaddr_t:
$LN1@sockaddr_t:
; Line 3335
	add	rsp, 72					; 00000048H
	ret	0
?sockaddr_to_string@@YAXPEAD_KPEBTusa@@@Z ENDP		; sockaddr_to_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
name$ = 64
?get_option_index@@YAHPEBD@Z PROC			; get_option_index
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3160
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3163
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@get_option
$LN2@get_option:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@get_option:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN3@get_option
; Line 3164
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN5@get_option
; Line 3165
	mov	eax, DWORD PTR i$[rsp]
	jmp	SHORT $LN1@get_option
$LN5@get_option:
; Line 3167
	jmp	SHORT $LN2@get_option
$LN3@get_option:
; Line 3168
	mov	eax, -1
$LN1@get_option:
; Line 3169
	add	rsp, 56					; 00000038H
	ret	0
?get_option_index@@YAHPEBD@Z ENDP			; get_option_index
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
small_len$ = 40
big_len$ = 48
big_str$ = 80
small_str$ = 88
?mg_strcasestr@@YAPEBDPEBD0@Z PROC			; mg_strcasestr
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3076
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3077
	mov	rcx, QWORD PTR big_str$[rsp]
	call	strlen
	mov	QWORD PTR big_len$[rsp], rax
	mov	rcx, QWORD PTR small_str$[rsp]
	call	strlen
	mov	QWORD PTR small_len$[rsp], rax
; Line 3079
	mov	rax, QWORD PTR small_len$[rsp]
	cmp	QWORD PTR big_len$[rsp], rax
	jb	SHORT $LN5@mg_strcase
; Line 3080
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_strcase
$LN2@mg_strcase:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN4@mg_strcase:
	mov	rax, QWORD PTR small_len$[rsp]
	mov	rcx, QWORD PTR big_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR i$[rsp], rax
	ja	SHORT $LN3@mg_strcase
; Line 3081
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR big_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR small_len$[rsp]
	mov	rdx, QWORD PTR small_str$[rsp]
	mov	rcx, rax
	call	mg_strncasecmp
	test	eax, eax
	jne	SHORT $LN6@mg_strcase
; Line 3082
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR big_str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@mg_strcase
$LN6@mg_strcase:
; Line 3084
	jmp	SHORT $LN2@mg_strcase
$LN3@mg_strcase:
$LN5@mg_strcase:
; Line 3087
	xor	eax, eax
$LN1@mg_strcase:
; Line 3088
	add	rsp, 72					; 00000048H
	ret	0
?mg_strcasestr@@YAPEBDPEBD0@Z ENDP			; mg_strcasestr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 48
?mg_strdup@@YAPEADPEBD@Z PROC				; mg_strdup
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3069
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3070
	mov	rcx, QWORD PTR str$[rsp]
	call	strlen
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR str$[rsp]
	call	?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z ; mg_strndup_ctx
; Line 3071
	add	rsp, 40					; 00000028H
	ret	0
?mg_strdup@@YAPEADPEBD@Z ENDP				; mg_strdup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 48
ctx$ = 56
?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z PROC	; mg_strdup_ctx
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3063
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3064
	mov	rcx, QWORD PTR str$[rsp]
	call	strlen
	mov	r8, QWORD PTR ctx$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR str$[rsp]
	call	?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z ; mg_strndup_ctx
; Line 3065
	add	rsp, 40					; 00000028H
	ret	0
?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ENDP	; mg_strdup_ctx
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
ptr$ = 64
len$ = 72
ctx$ = 80
?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z PROC	; mg_strndup_ctx
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3048
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3053
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@mg_strndup
; Line 3054
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR ptr$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
$LN2@mg_strndup:
; Line 3057
	mov	rax, QWORD PTR p$[rsp]
; Line 3058
	add	rsp, 56					; 00000038H
	ret	0
?mg_strndup_ctx@@YAPEADPEBD_KPEAUmg_context@@@Z ENDP	; mg_strndup_ctx
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?lowercase@@YAHPEBD@Z PROC				; lowercase
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3013
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3014
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	tolower
; Line 3015
	add	rsp, 40					; 00000028H
	ret	0
?lowercase@@YAHPEBD@Z ENDP				; lowercase
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 0
dst$ = 32
src$ = 40
n$ = 48
?mg_strlcpy@@YAXPEADPEBD_K@Z PROC			; mg_strlcpy
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3003
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3004
	jmp	SHORT $LN4@mg_strlcpy
$LN2@mg_strlcpy:
	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	mov	QWORD PTR n$[rsp], rax
$LN4@mg_strlcpy:
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@mg_strlcpy
	cmp	QWORD PTR n$[rsp], 1
	jbe	SHORT $LN3@mg_strlcpy
; Line 3005
	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv71[rsp], al
	mov	rax, QWORD PTR src$[rsp]
	inc	rax
	mov	QWORD PTR src$[rsp], rax
	mov	rax, QWORD PTR dst$[rsp]
	movzx	ecx, BYTE PTR tv71[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR dst$[rsp]
	inc	rax
	mov	QWORD PTR dst$[rsp], rax
; Line 3006
	jmp	SHORT $LN2@mg_strlcpy
$LN3@mg_strlcpy:
; Line 3007
	mov	rax, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rax], 0
; Line 3008
	add	rsp, 24
	ret	0
?mg_strlcpy@@YAXPEADPEBD_K@Z ENDP			; mg_strlcpy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 32
fileacc$ = 64
?mg_fclose@@YAHPEAUmg_file_access@@@Z PROC		; mg_fclose
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 2987
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2988
	mov	DWORD PTR ret$[rsp], -1
; Line 2989
	cmp	QWORD PTR fileacc$[rsp], 0
	je	SHORT $LN2@mg_fclose
; Line 2990
	mov	rax, QWORD PTR fileacc$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@mg_fclose
; Line 2991
	mov	rax, QWORD PTR fileacc$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	fclose
	mov	DWORD PTR ret$[rsp], eax
$LN3@mg_fclose:
; Line 2994
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR fileacc$[rsp]
	call	memset
$LN2@mg_fclose:
; Line 2996
	mov	eax, DWORD PTR ret$[rsp]
; Line 2997
	add	rsp, 56					; 00000038H
	ret	0
?mg_fclose@@YAHPEAUmg_file_access@@@Z ENDP		; mg_fclose
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 32
found$ = 36
tv142 = 40
wbuf$1 = 48
__$ArrayPad$ = 576
conn$ = 608
path$ = 616
mode$ = 624
filep$ = 632
?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z PROC ; mg_fopen
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 2919
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 600				; 00000258H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2922
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN4@mg_fopen
; Line 2923
	xor	eax, eax
	jmp	$LN1@mg_fopen
$LN4@mg_fopen:
; Line 2925
	mov	rax, QWORD PTR filep$[rsp]
	mov	QWORD PTR [rax+32], 0
; Line 2927
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z ; mg_path_suspicious
	test	eax, eax
	je	SHORT $LN5@mg_fopen
; Line 2928
	xor	eax, eax
	jmp	$LN1@mg_fopen
$LN5@mg_fopen:
; Line 2933
	mov	rax, QWORD PTR filep$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	mov	DWORD PTR found$[rsp], eax
; Line 2935
	cmp	DWORD PTR mode$[rsp], 1
	jne	SHORT $LN6@mg_fopen
	cmp	DWORD PTR found$[rsp], 0
	jne	SHORT $LN6@mg_fopen
; Line 2937
	xor	eax, eax
	jmp	$LN1@mg_fopen
$LN6@mg_fopen:
; Line 2943
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wbuf$1[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 2944
	mov	eax, DWORD PTR mode$[rsp]
	mov	DWORD PTR tv82[rsp], eax
	cmp	DWORD PTR tv82[rsp], 1
	je	SHORT $LN7@mg_fopen
	cmp	DWORD PTR tv82[rsp], 2
	je	SHORT $LN8@mg_fopen
	cmp	DWORD PTR tv82[rsp], 4
	je	SHORT $LN9@mg_fopen
	jmp	SHORT $LN2@mg_fopen
$LN7@mg_fopen:
; Line 2946
	lea	rdx, OFFSET FLAT:$SG161516
	lea	rcx, QWORD PTR wbuf$1[rsp]
	call	_wfopen
	mov	rcx, QWORD PTR filep$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 2947
	jmp	SHORT $LN2@mg_fopen
$LN8@mg_fopen:
; Line 2949
	lea	rdx, OFFSET FLAT:$SG161518
	lea	rcx, QWORD PTR wbuf$1[rsp]
	call	_wfopen
	mov	rcx, QWORD PTR filep$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 2950
	jmp	SHORT $LN2@mg_fopen
$LN9@mg_fopen:
; Line 2952
	lea	rdx, OFFSET FLAT:$SG161520
	lea	rcx, QWORD PTR wbuf$1[rsp]
	call	_wfopen
	mov	rcx, QWORD PTR filep$[rsp]
	mov	QWORD PTR [rcx+32], rax
$LN2@mg_fopen:
; Line 2971
	cmp	DWORD PTR found$[rsp], 0
	jne	SHORT $LN10@mg_fopen
; Line 2975
	mov	rax, QWORD PTR filep$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	mov	DWORD PTR found$[rsp], eax
$LN10@mg_fopen:
; Line 2980
	mov	rax, QWORD PTR filep$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN12@mg_fopen
	mov	DWORD PTR tv142[rsp], 1
	jmp	SHORT $LN13@mg_fopen
$LN12@mg_fopen:
	mov	DWORD PTR tv142[rsp], 0
$LN13@mg_fopen:
	mov	eax, DWORD PTR tv142[rsp]
$LN1@mg_fopen:
; Line 2981
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 600				; 00000258H
	ret	0
?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ENDP ; mg_fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
conn$ = 32
path$ = 40
?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z PROC	; mg_path_suspicious
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 2872
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2873
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 2876
	cmp	QWORD PTR c$[rsp], 0
	je	SHORT $LN5@mg_path_su
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN4@mg_path_su
$LN5@mg_path_su:
; Line 2878
	mov	eax, 1
	jmp	$LN1@mg_path_su
$LN4@mg_path_su:
$LN2@mg_path_su:
; Line 2882
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@mg_path_su
; Line 2883
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN6@mg_path_su
; Line 2885
	mov	eax, 1
	jmp	SHORT $LN1@mg_path_su
$LN6@mg_path_su:
; Line 2887
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 62					; 0000003eH
	je	SHORT $LN8@mg_path_su
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 60					; 0000003cH
	je	SHORT $LN8@mg_path_su
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 124				; 0000007cH
	jne	SHORT $LN7@mg_path_su
$LN8@mg_path_su:
; Line 2889
	mov	eax, 1
	jmp	SHORT $LN1@mg_path_su
$LN7@mg_path_su:
; Line 2891
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN10@mg_path_su
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN9@mg_path_su
$LN10@mg_path_su:
; Line 2893
	mov	eax, 1
	jmp	SHORT $LN1@mg_path_su
$LN9@mg_path_su:
; Line 2895
	mov	rax, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN11@mg_path_su
; Line 2897
	mov	eax, 1
	jmp	SHORT $LN1@mg_path_su
$LN11@mg_path_su:
; Line 2899
	mov	rax, QWORD PTR c$[rsp]
	inc	rax
	mov	QWORD PTR c$[rsp], rax
; Line 2900
	jmp	$LN2@mg_path_su
$LN3@mg_path_su:
; Line 2904
	xor	eax, eax
$LN1@mg_path_su:
; Line 2905
	add	rsp, 24
	ret	0
?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z ENDP	; mg_path_suspicious
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
creation_time$ = 40
info$ = 48
wbuf$ = 96
__$ArrayPad$ = 624
conn$ = 656
path$ = 664
filep$ = 672
?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z PROC ; mg_stat
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5046
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 648				; 00000288H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5052
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN2@mg_stat
; Line 5053
	xor	eax, eax
	jmp	$LN1@mg_stat
$LN2@mg_stat:
; Line 5055
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR filep$[rsp]
	call	memset
; Line 5057
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_path_suspicious@@YAHPEBUmg_connection@@PEBD@Z ; mg_path_suspicious
	test	eax, eax
	je	SHORT $LN3@mg_stat
; Line 5058
	xor	eax, eax
	jmp	$LN1@mg_stat
$LN3@mg_stat:
; Line 5061
	mov	r9d, 260				; 00000104H
	lea	r8, QWORD PTR wbuf$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ; path_to_unicode
; Line 5065
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	QWORD PTR len$[rsp], rax
; Line 5067
	cmp	QWORD PTR len$[rsp], 0
	jbe	$LN4@mg_stat
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax-1]
	cmp	eax, 32					; 00000020H
	je	$LN4@mg_stat
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax-1]
	cmp	eax, 46					; 0000002eH
	je	$LN4@mg_stat
	lea	r8, QWORD PTR info$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR wbuf$[rsp]
	call	QWORD PTR __imp_GetFileAttributesExW
	test	eax, eax
	je	$LN4@mg_stat
; Line 5068
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+28]
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	mov	rcx, QWORD PTR filep$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 5069
	mov	eax, DWORD PTR info$[rsp+20]
	mov	ecx, DWORD PTR info$[rsp+24]
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	mov	rcx, 116444736000000000			; 019db1ded53e8000H
	sub	rax, rcx
	xor	edx, edx
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rcx, QWORD PTR filep$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 5077
	mov	eax, DWORD PTR info$[rsp+4]
	mov	ecx, DWORD PTR info$[rsp+8]
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	mov	rcx, 116444736000000000			; 019db1ded53e8000H
	sub	rax, rcx
	xor	edx, edx
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	QWORD PTR creation_time$[rsp], rax
; Line 5079
	mov	rax, QWORD PTR filep$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR creation_time$[rsp], rax
	jle	SHORT $LN5@mg_stat
; Line 5080
	mov	rax, QWORD PTR filep$[rsp]
	mov	rcx, QWORD PTR creation_time$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN5@mg_stat:
; Line 5083
	mov	eax, DWORD PTR info$[rsp]
	and	eax, 16
	mov	rcx, QWORD PTR filep$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5084
	mov	eax, 1
	jmp	SHORT $LN1@mg_stat
$LN4@mg_stat:
; Line 5087
	xor	eax, eax
$LN1@mg_stat:
; Line 5088
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 648				; 00000288H
	ret	0
?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ENDP ; mg_stat
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
fileacc$ = 32
?is_file_opened@@YAHPEBUmg_file_access@@@Z PROC		; is_file_opened
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 2854
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2855
	cmp	QWORD PTR fileacc$[rsp], 0
	jne	SHORT $LN2@is_file_op
; Line 2856
	xor	eax, eax
	jmp	SHORT $LN1@is_file_op
$LN2@is_file_op:
; Line 2859
	mov	rax, QWORD PTR fileacc$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN4@is_file_op
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@is_file_op
$LN4@is_file_op:
	mov	DWORD PTR tv67[rsp], 0
$LN5@is_file_op:
	mov	eax, DWORD PTR tv67[rsp]
$LN1@is_file_op:
; Line 2860
	add	rsp, 24
	ret	0
?is_file_opened@@YAHPEBUmg_file_access@@@Z ENDP		; is_file_opened
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$1 = 48
threadName$ = 72
__$ArrayPad$ = 96
name$ = 128
?mg_set_thread_name@@YAXPEBD@Z PROC			; mg_set_thread_name
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 2781
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2784
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG161471
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 17
	lea	r8, QWORD PTR threadName$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
	npad	1
; Line 2792
	mov	DWORD PTR info$1[rsp], 4096		; 00001000H
; Line 2793
	lea	rax, QWORD PTR threadName$[rsp]
	mov	QWORD PTR info$1[rsp+8], rax
; Line 2794
	mov	DWORD PTR info$1[rsp+16], -1		; ffffffffH
; Line 2795
	mov	DWORD PTR info$1[rsp+20], 0
; Line 2797
	lea	r9, QWORD PTR info$1[rsp]
	mov	r8d, 3
	xor	edx, edx
	mov	ecx, 1080890248				; 406d1388H
	call	QWORD PTR __imp_RaiseException
	jmp	SHORT $LN4@mg_set_thr
$LN6@mg_set_thr:
$LN4@mg_set_thr:
; Line 2823
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?mg_set_thread_name@@YAXPEBD@Z ENDP			; mg_set_thread_name
_TEXT	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
info$1 = 48
threadName$ = 72
__$ArrayPad$ = 96
name$ = 128
?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA PROC	; `mg_set_thread_name'::`1'::filt$0
	push	rbp
	sub	rsp, 48					; 00000030H
	mov	rbp, rdx
$LN5@filt$0:
; Line 2801
	mov	eax, 1
$LN7@filt$0:
	add	rsp, 48					; 00000030H
	pop	rbp
	ret	0
	int	3
?filt$0@?0??mg_set_thread_name@@YAXPEBD@Z@4HA ENDP	; `mg_set_thread_name'::`1'::filt$0
text$x	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ap$ = 48
tv80 = 56
tv78 = 64
fc$1 = 80
__$ArrayPad$ = 2608
conn$ = 2640
ctx$ = 2648
func$ = 2656
line$ = 2664
fmt$ = 2672
?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ PROC ; mg_cry_internal_wrap
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3487
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2632				; 00000a48H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3489
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 3490
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@mg_cry_int
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN2@mg_cry_int
; Line 3492
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR tv80[rsp], rax
	mov	rdx, QWORD PTR ctx$[rsp]
	lea	rcx, QWORD PTR fc$1[rsp]
	call	?fake_connection@@YAPEAUmg_connection@@PEAU1@PEAUmg_context@@@Z ; fake_connection
	mov	QWORD PTR tv78[rsp], rax
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8d, DWORD PTR line$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR tv78[rsp]
	call	?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z ; mg_cry_internal_impl
; Line 3493
	jmp	SHORT $LN3@mg_cry_int
$LN2@mg_cry_int:
; Line 3494
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8d, DWORD PTR line$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z ; mg_cry_internal_impl
$LN3@mg_cry_int:
; Line 3496
	mov	QWORD PTR ap$[rsp], 0
; Line 3497
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2632				; 00000a48H
	ret	0
?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ENDP ; mg_cry_internal_wrap
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
a$ = 36
b$ = 40
c$ = 44
d$ = 48
X$ = 56
i$1 = 64
xp$2 = 72
xbuf$ = 80
__$ArrayPad$ = 144
pms$ = 176
data$ = 184
?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z PROC		; md5_process
; File W:\cpp\void\alistar\vendor\civetweb\src\md5.inl
; Line 213
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 214
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	mov	DWORD PTR a$[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	mov	DWORD PTR c$[rsp], eax
; Line 215
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	mov	DWORD PTR d$[rsp], eax
; Line 235
	movzx	eax, BYTE PTR ?w@?2??md5_process@@YAXPEAUmd5_state_s@@PEBE@Z@4HB
	test	eax, eax
	je	SHORT $LN5@md5_proces
; Line 243
	mov	rax, QWORD PTR data$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN7@md5_proces
; Line 249
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR X$[rsp], rax
; Line 250
	jmp	SHORT $LN8@md5_proces
$LN7@md5_proces:
; Line 252
	mov	r8d, 64					; 00000040H
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR xbuf$[rsp]
	call	memcpy
; Line 253
	lea	rax, QWORD PTR xbuf$[rsp]
	mov	QWORD PTR X$[rsp], rax
$LN8@md5_proces:
; Line 255
	jmp	$LN6@md5_proces
$LN5@md5_proces:
; Line 266
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR xp$2[rsp], rax
; Line 270
	lea	rax, QWORD PTR xbuf$[rsp]
	mov	QWORD PTR X$[rsp], rax
; Line 274
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@md5_proces
$LN2@md5_proces:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	rax, QWORD PTR xp$2[rsp]
	add	rax, 4
	mov	QWORD PTR xp$2[rsp], rax
$LN4@md5_proces:
	cmp	DWORD PTR i$1[rsp], 16
	jge	SHORT $LN3@md5_proces
; Line 275
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR xp$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR xp$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR xp$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR xp$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 24
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	DWORD PTR xbuf$[rsp+rcx*4], eax
	jmp	$LN2@md5_proces
$LN3@md5_proces:
$LN6@md5_proces:
; Line 293
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	and	ecx, DWORD PTR d$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -680876936				; ffffffffd76aa478H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 25
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 294
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	and	ecx, DWORD PTR c$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -389564586				; ffffffffe8c7b756H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 12
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 20
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 295
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	and	ecx, DWORD PTR b$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+606105819]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 17
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 15
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 296
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	and	ecx, DWORD PTR a$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1044525330			; ffffffffc1bdceeeH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 22
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 10
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 297
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	and	ecx, DWORD PTR d$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -176418897				; fffffffff57c0fafH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 25
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 298
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	and	ecx, DWORD PTR c$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1200080426]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 12
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 20
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 299
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	and	ecx, DWORD PTR b$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1473231341			; ffffffffa8304613H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 17
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 15
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 300
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	and	ecx, DWORD PTR a$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -45705983				; fffffffffd469501H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 22
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 10
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 301
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	and	ecx, DWORD PTR d$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1770035416]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 25
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 302
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	and	ecx, DWORD PTR c$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1958414417			; ffffffff8b44f7afH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 12
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 20
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 303
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	and	ecx, DWORD PTR b$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -42063				; ffffffffffff5bb1H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 17
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 15
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 304
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	and	ecx, DWORD PTR a$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1990404162			; ffffffff895cd7beH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 22
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 10
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 305
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	and	ecx, DWORD PTR d$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1804603682]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 25
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 306
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	and	ecx, DWORD PTR c$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -40341101				; fffffffffd987193H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 12
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 20
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 307
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	and	ecx, DWORD PTR b$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1502002290			; ffffffffa679438eH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 17
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 15
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 308
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	and	ecx, DWORD PTR a$[rsp]
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1236535329]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 22
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 10
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 320
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -165796510				; fffffffff61e2562H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 27
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 321
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1069501632			; ffffffffc040b340H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 9
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 23
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 322
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+643717713]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 18
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 323
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -373897302				; ffffffffe9b6c7aaH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 20
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 12
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 324
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -701558691				; ffffffffd62f105dH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 27
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 325
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+38016083]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 9
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 23
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 326
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -660478335				; ffffffffd8a1e681H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 18
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 327
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -405537848				; ffffffffe7d3fbc8H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 20
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 12
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 328
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+568446438]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 27
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 329
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1019803690			; ffffffffc33707d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 9
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 23
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 330
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -187363961				; fffffffff4d50d87H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 18
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 331
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1163531501]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 20
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 12
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 332
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	not	ecx
	mov	edx, DWORD PTR c$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1444681467			; ffffffffa9e3e905H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 27
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 333
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	not	ecx
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -51403784				; fffffffffcefa3f8H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 9
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 23
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 334
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	not	ecx
	mov	edx, DWORD PTR a$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1735328473]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 18
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 335
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	not	ecx
	mov	edx, DWORD PTR d$[rsp]
	and	edx, ecx
	mov	ecx, edx
	or	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1926607734			; ffffffff8d2a4c8aH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 20
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 12
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 347
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -378558				; fffffffffffa3942H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 28
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 348
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -2022574463			; ffffffff8771f681H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 11
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 21
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 349
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1839030562]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 16
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 350
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -35309556				; fffffffffde5380cH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 23
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 9
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 351
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1530992060			; ffffffffa4beea44H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 28
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 352
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1272893353]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 11
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 21
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 353
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -155497632				; fffffffff6bb4b60H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 16
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 354
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1094730640			; ffffffffbebfbc70H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 23
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 9
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 355
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+681279174]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 28
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 356
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -358537222				; ffffffffeaa127faH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 11
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 21
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 357
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -722521979				; ffffffffd4ef3085H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 16
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 358
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+76029189]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 23
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 9
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 359
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -640364487				; ffffffffd9d4d039H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 28
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 360
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -421815835				; ffffffffe6db99e5H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 11
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 21
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 361
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+530742520]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 16
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 362
	mov	eax, DWORD PTR d$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	xor	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -995338651				; ffffffffc4ac5665H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 23
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 9
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 374
	mov	eax, DWORD PTR d$[rsp]
	not	eax
	mov	ecx, DWORD PTR b$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -198630844				; fffffffff4292244H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 6
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 26
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 375
	mov	eax, DWORD PTR c$[rsp]
	not	eax
	mov	ecx, DWORD PTR a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1126891415]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 22
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 376
	mov	eax, DWORD PTR b$[rsp]
	not	eax
	mov	ecx, DWORD PTR d$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1416354905			; ffffffffab9423a7H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 15
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 17
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 377
	mov	eax, DWORD PTR a$[rsp]
	not	eax
	mov	ecx, DWORD PTR c$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -57434055				; fffffffffc93a039H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 21
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 11
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 378
	mov	eax, DWORD PTR d$[rsp]
	not	eax
	mov	ecx, DWORD PTR b$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1700485571]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 6
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 26
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 379
	mov	eax, DWORD PTR c$[rsp]
	not	eax
	mov	ecx, DWORD PTR a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1894986606			; ffffffff8f0ccc92H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 22
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 380
	mov	eax, DWORD PTR b$[rsp]
	not	eax
	mov	ecx, DWORD PTR d$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1051523				; ffffffffffeff47dH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 15
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 17
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 381
	mov	eax, DWORD PTR a$[rsp]
	not	eax
	mov	ecx, DWORD PTR c$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -2054922799			; ffffffff85845dd1H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 21
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 11
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 382
	mov	eax, DWORD PTR d$[rsp]
	not	eax
	mov	ecx, DWORD PTR b$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1873313359]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 6
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 26
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 383
	mov	eax, DWORD PTR c$[rsp]
	not	eax
	mov	ecx, DWORD PTR a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -30611744				; fffffffffe2ce6e0H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 22
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 384
	mov	eax, DWORD PTR b$[rsp]
	not	eax
	mov	ecx, DWORD PTR d$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1560198380			; ffffffffa3014314H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 15
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 17
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 385
	mov	eax, DWORD PTR a$[rsp]
	not	eax
	mov	ecx, DWORD PTR c$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1309151649]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 21
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 11
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 386
	mov	eax, DWORD PTR d$[rsp]
	not	eax
	mov	ecx, DWORD PTR b$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -145523070				; fffffffff7537e82H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 6
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 26
	or	eax, ecx
	add	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR a$[rsp], eax
; Line 387
	mov	eax, DWORD PTR c$[rsp]
	not	eax
	mov	ecx, DWORD PTR a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -1120210379			; ffffffffbd3af235H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 22
	or	eax, ecx
	add	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR d$[rsp], eax
; Line 388
	mov	eax, DWORD PTR b$[rsp]
	not	eax
	mov	ecx, DWORD PTR d$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR a$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+718787259]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 15
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 17
	or	eax, ecx
	add	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 389
	mov	eax, DWORD PTR a$[rsp]
	not	eax
	mov	ecx, DWORD PTR c$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR X$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	mov	edx, -343485551				; ffffffffeb86d391H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR t$[rsp]
	shl	eax, 21
	mov	ecx, DWORD PTR t$[rsp]
	shr	ecx, 11
	or	eax, ecx
	add	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 395
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	add	eax, DWORD PTR a$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 396
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	add	eax, DWORD PTR b$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 397
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	add	eax, DWORD PTR c$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 398
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax+8]
	add	eax, DWORD PTR d$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 399
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	ret	0
?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z ENDP		; md5_process
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
data$ = 40
__$ArrayPad$ = 48
pms$ = 80
digest$ = 88
md5_finish PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\md5.inl
; Line 451
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 461
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@md5_finish
$LN2@md5_finish:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@md5_finish:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@md5_finish
; Line 462
	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 2
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 3
	shl	ecx, 3
	mov	rdx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	shr	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR data$[rsp+rcx], al
	jmp	SHORT $LN2@md5_finish
$LN3@md5_finish:
; Line 464
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	shr	eax, 3
	mov	ecx, 55					; 00000037H
	sub	ecx, eax
	mov	eax, ecx
	and	eax, 63					; 0000003fH
	inc	eax
	mov	eax, eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:?pad@?1??md5_finish@@9@4QBEB
	mov	rcx, QWORD PTR pms$[rsp]
	call	md5_append
; Line 466
	mov	r8d, 8
	lea	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR pms$[rsp]
	call	md5_append
; Line 467
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@md5_finish
$LN5@md5_finish:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@md5_finish:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@md5_finish
; Line 468
	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 2
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 3
	shl	ecx, 3
	mov	rdx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4+8]
	shr	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR digest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@md5_finish
$LN6@md5_finish:
; Line 469
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
md5_finish ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nbits$ = 32
left$ = 40
p$ = 48
offset$ = 56
copy$1 = 64
tv139 = 72
pms$ = 96
data$ = 104
nbytes$ = 112
md5_append PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\md5.inl
; Line 413
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 414
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 415
	mov	rax, QWORD PTR nbytes$[rsp]
	mov	QWORD PTR left$[rsp], rax
; Line 416
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	shr	eax, 3
	and	eax, 63					; 0000003fH
	mov	eax, eax
	mov	QWORD PTR offset$[rsp], rax
; Line 417
	mov	rax, QWORD PTR nbytes$[rsp]
	shl	rax, 3
	mov	DWORD PTR nbits$[rsp], eax
; Line 419
	cmp	QWORD PTR nbytes$[rsp], 0
	ja	SHORT $LN5@md5_append
; Line 420
	jmp	$LN1@md5_append
$LN5@md5_append:
; Line 423
	mov	rax, QWORD PTR nbytes$[rsp]
	shr	rax, 29
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pms$[rsp]
	add	eax, DWORD PTR [rdx+rcx]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 424
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR nbits$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 425
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	edx, DWORD PTR nbits$[rsp]
	cmp	DWORD PTR [rcx+rax], edx
	jae	SHORT $LN6@md5_append
; Line 426
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pms$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN6@md5_append:
; Line 429
	cmp	QWORD PTR offset$[rsp], 0
	je	$LN7@md5_append
; Line 430
	mov	rax, QWORD PTR nbytes$[rsp]
	mov	rcx, QWORD PTR offset$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN11@md5_append
	mov	eax, 64					; 00000040H
	sub	rax, QWORD PTR offset$[rsp]
	mov	QWORD PTR tv139[rsp], rax
	jmp	SHORT $LN12@md5_append
$LN11@md5_append:
	mov	rax, QWORD PTR nbytes$[rsp]
	mov	QWORD PTR tv139[rsp], rax
$LN12@md5_append:
	mov	rax, QWORD PTR tv139[rsp]
	mov	QWORD PTR copy$1[rsp], rax
; Line 432
	mov	rax, QWORD PTR pms$[rsp]
	mov	rcx, QWORD PTR offset$[rsp]
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	r8, QWORD PTR copy$1[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, rax
	call	memcpy
; Line 433
	mov	rax, QWORD PTR copy$1[rsp]
	mov	rcx, QWORD PTR offset$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, 64					; 00000040H
	jae	SHORT $LN8@md5_append
; Line 434
	jmp	$LN1@md5_append
$LN8@md5_append:
; Line 435
	mov	rax, QWORD PTR copy$1[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 436
	mov	rax, QWORD PTR copy$1[rsp]
	mov	rcx, QWORD PTR left$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR left$[rsp], rax
; Line 437
	mov	rax, QWORD PTR pms$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rcx, QWORD PTR pms$[rsp]
	call	?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z ; md5_process
$LN7@md5_append:
; Line 441
	jmp	SHORT $LN4@md5_append
$LN2@md5_append:
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR p$[rsp], rax
	mov	rax, QWORD PTR left$[rsp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR left$[rsp], rax
$LN4@md5_append:
	cmp	QWORD PTR left$[rsp], 64		; 00000040H
	jb	SHORT $LN3@md5_append
; Line 442
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR pms$[rsp]
	call	?md5_process@@YAXPEAUmd5_state_s@@PEBE@Z ; md5_process
	jmp	SHORT $LN2@md5_append
$LN3@md5_append:
; Line 445
	cmp	QWORD PTR left$[rsp], 0
	je	SHORT $LN9@md5_append
; Line 446
	mov	rax, QWORD PTR pms$[rsp]
	add	rax, 24
	mov	r8, QWORD PTR left$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, rax
	call	memcpy
$LN9@md5_append:
$LN1@md5_append:
; Line 447
	add	rsp, 88					; 00000058H
	ret	0
md5_append ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pms$ = 8
md5_init PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\md5.inl
; Line 403
	mov	QWORD PTR [rsp+8], rcx
; Line 404
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rcx+rax], 0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rcx+rax], 0
; Line 405
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rcx+rax+8], 1732584193	; 67452301H
; Line 406
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rcx+rax+8], -271733879	; efcdab89H
; Line 407
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rcx+rax+8], -1732584194	; 98badcfeH
; Line 408
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pms$[rsp]
	mov	DWORD PTR [rcx+rax+8], 271733878	; 10325476H
; Line 409
	ret	0
md5_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tsnow$ = 32
__$ArrayPad$ = 48
?mg_get_current_time_ns@@YA_KXZ PROC			; mg_get_current_time_ns
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1677
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1679
	lea	rdx, QWORD PTR tsnow$[rsp]
	mov	ecx, 2
	call	?mg_clock_gettime@@YAHKPEAUtimespec@@@Z	; mg_clock_gettime
; Line 1680
	imul	rax, QWORD PTR tsnow$[rsp], 1000000000	; 3b9aca00H
	movsxd	rcx, DWORD PTR tsnow$[rsp+8]
	add	rax, rcx
; Line 1681
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?mg_get_current_time_ns@@YA_KXZ ENDP			; mg_get_current_time_ns
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?mg_current_thread_id@@YAKXZ PROC			; mg_current_thread_id
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1627
	sub	rsp, 40					; 00000028H
; Line 1629
	call	QWORD PTR __imp_GetCurrentThreadId
; Line 1671
	add	rsp, 40					; 00000028H
	ret	0
?mg_current_thread_id@@YAKXZ ENDP			; mg_current_thread_id
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ap$ = 48
conn$ = 80
truncated$ = 88
buf$ = 96
buflen$ = 104
fmt$ = 112
?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ PROC ; mg_snprintf
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3149
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3152
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 3153
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR buflen$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	mov	rdx, QWORD PTR truncated$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z ; mg_vsnprintf
; Line 3154
	mov	QWORD PTR ap$[rsp], 0
; Line 3155
	add	rsp, 72					; 00000048H
	ret	0
?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ENDP ; mg_snprintf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
tv74 = 68
ok$ = 72
tv81 = 80
tv90 = 88
conn$ = 112
truncated$ = 120
buf$ = 128
buflen$ = 136
fmt$ = 144
ap$ = 152
?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z PROC ; mg_vsnprintf
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3100
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3103
	cmp	QWORD PTR buflen$[rsp], 0
	jne	SHORT $LN2@mg_vsnprin
; Line 3104
	cmp	QWORD PTR truncated$[rsp], 0
	je	SHORT $LN3@mg_vsnprin
; Line 3105
	mov	rax, QWORD PTR truncated$[rsp]
	mov	DWORD PTR [rax], 1
$LN3@mg_vsnprin:
; Line 3107
	jmp	$LN1@mg_vsnprin
$LN2@mg_vsnprin:
; Line 3117
	mov	r9, QWORD PTR ap$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	rdx, QWORD PTR buflen$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	_vsnprintf
	mov	DWORD PTR n$[rsp], eax
; Line 3118
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN9@mg_vsnprin
	movsxd	rax, DWORD PTR n$[rsp]
	cmp	rax, QWORD PTR buflen$[rsp]
	jae	SHORT $LN9@mg_vsnprin
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN10@mg_vsnprin
$LN9@mg_vsnprin:
	mov	DWORD PTR tv74[rsp], 0
$LN10@mg_vsnprin:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR ok$[rsp], eax
; Line 3124
	cmp	DWORD PTR ok$[rsp], 0
	je	SHORT $LN4@mg_vsnprin
; Line 3125
	cmp	QWORD PTR truncated$[rsp], 0
	je	SHORT $LN6@mg_vsnprin
; Line 3126
	mov	rax, QWORD PTR truncated$[rsp]
	mov	DWORD PTR [rax], 0
$LN6@mg_vsnprin:
; Line 3128
	jmp	$LN5@mg_vsnprin
$LN4@mg_vsnprin:
; Line 3129
	cmp	QWORD PTR truncated$[rsp], 0
	je	SHORT $LN7@mg_vsnprin
; Line 3130
	mov	rax, QWORD PTR truncated$[rsp]
	mov	DWORD PTR [rax], 1
$LN7@mg_vsnprin:
; Line 3132
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR tv90[rsp], rax
	cmp	QWORD PTR buflen$[rsp], 200		; 000000c8H
	jbe	SHORT $LN11@mg_vsnprin
	mov	QWORD PTR tv81[rsp], 200		; 000000c8H
	jmp	SHORT $LN12@mg_vsnprin
$LN11@mg_vsnprin:
	mov	rax, QWORD PTR buflen$[rsp]
	dec	rax
	mov	QWORD PTR tv81[rsp], rax
$LN12@mg_vsnprin:
	mov	rax, QWORD PTR tv90[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG161608
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3135				; 00000c3fH
	lea	r8, OFFSET FLAT:$SG161609
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 3136
	mov	eax, DWORD PTR buflen$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN5@mg_vsnprin:
; Line 3138
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN1@mg_vsnprin:
; Line 3139
	add	rsp, 104				; 00000068H
	ret	0
?mg_vsnprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBD2@Z ENDP ; mg_vsnprintf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
?mg_free@@YAXPEAX@Z PROC				; mg_free
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1493
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1494
	mov	rcx, QWORD PTR a$[rsp]
	call	free
; Line 1495
	add	rsp, 40					; 00000028H
	ret	0
?mg_free@@YAXPEAX@Z ENDP				; mg_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
?mg_realloc@@YAPEAXPEAX_K@Z PROC			; mg_realloc
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1487
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1488
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	realloc
; Line 1489
	add	rsp, 40					; 00000028H
	ret	0
?mg_realloc@@YAPEAXPEAX_K@Z ENDP			; mg_realloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
?mg_calloc@@YAPEAX_K0@Z PROC				; mg_calloc
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1481
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1482
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	calloc
; Line 1483
	add	rsp, 40					; 00000028H
	ret	0
?mg_calloc@@YAPEAX_K0@Z ENDP				; mg_calloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
?mg_malloc@@YAPEAX_K@Z PROC				; mg_malloc
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1475
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1476
	mov	rcx, QWORD PTR a$[rsp]
	call	malloc
; Line 1477
	add	rsp, 40					; 00000028H
	ret	0
?mg_malloc@@YAPEAX_K@Z ENDP				; mg_malloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 0
addr$ = 32
?mg_atomic_dec@@YA_JPEC_J@Z PROC			; mg_atomic_dec
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1145
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1149
	mov	rax, QWORD PTR addr$[rsp]
	mov	rcx, -1
	lock xadd QWORD PTR [rax], rcx
	dec	rcx
	mov	rax, rcx
	mov	QWORD PTR ret$[rsp], rax
; Line 1161
	mov	rax, QWORD PTR ret$[rsp]
; Line 1162
	add	rsp, 24
	ret	0
?mg_atomic_dec@@YA_JPEC_J@Z ENDP			; mg_atomic_dec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 0
addr$ = 32
?mg_atomic_inc@@YA_JPEC_J@Z PROC			; mg_atomic_inc
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1122
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1126
	mov	rax, QWORD PTR addr$[rsp]
	mov	ecx, 1
	lock xadd QWORD PTR [rax], rcx
	inc	rcx
	mov	rax, rcx
	mov	QWORD PTR ret$[rsp], rax
; Line 1138
	mov	rax, QWORD PTR ret$[rsp]
; Line 1139
	add	rsp, 24
	ret	0
?mg_atomic_inc@@YA_JPEC_J@Z ENDP			; mg_atomic_inc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?mg_global_unlock@@YAXXZ PROC				; mg_global_unlock
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1103
	sub	rsp, 40					; 00000028H
; Line 1104
	lea	rcx, OFFSET FLAT:?global_lock_mutex@@3Upthread_mutex_t@@A
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
; Line 1105
	add	rsp, 40					; 00000028H
	ret	0
?mg_global_unlock@@YAXXZ ENDP				; mg_global_unlock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?mg_global_lock@@YAXXZ PROC				; mg_global_lock
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1095
	sub	rsp, 40					; 00000028H
; Line 1096
	lea	rcx, OFFSET FLAT:?global_lock_mutex@@3Upthread_mutex_t@@A
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
; Line 1097
	add	rsp, 40					; 00000028H
	ret	0
?mg_global_lock@@YAXXZ ENDP				; mg_global_lock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
key$ = 48
?pthread_getspecific@@YAPEAXK@Z PROC			; pthread_getspecific
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1063
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1064
	mov	ecx, DWORD PTR key$[rsp]
	call	QWORD PTR __imp_TlsGetValue
; Line 1065
	add	rsp, 40					; 00000028H
	ret	0
?pthread_getspecific@@YAPEAXK@Z ENDP			; pthread_getspecific
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
key$ = 64
value$ = 72
?pthread_setspecific@@YAHKPEAX@Z PROC			; pthread_setspecific
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1055
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1056
	mov	rdx, QWORD PTR value$[rsp]
	mov	ecx, DWORD PTR key$[rsp]
	call	QWORD PTR __imp_TlsSetValue
	test	eax, eax
	je	SHORT $LN3@pthread_se
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN4@pthread_se
$LN3@pthread_se:
	mov	DWORD PTR tv68[rsp], 1
$LN4@pthread_se:
	mov	eax, DWORD PTR tv68[rsp]
; Line 1057
	add	rsp, 56					; 00000038H
	ret	0
?pthread_setspecific@@YAHKPEAX@Z ENDP			; pthread_setspecific
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
key$ = 64
?pthread_key_delete@@YAHK@Z PROC			; pthread_key_delete
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1047
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1048
	mov	ecx, DWORD PTR key$[rsp]
	call	QWORD PTR __imp_TlsFree
	test	eax, eax
	je	SHORT $LN3@pthread_ke
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@pthread_ke
$LN3@pthread_ke:
	mov	DWORD PTR tv67[rsp], 1
$LN4@pthread_ke:
	mov	eax, DWORD PTR tv67[rsp]
; Line 1049
	add	rsp, 56					; 00000038H
	ret	0
?pthread_key_delete@@YAHK@Z ENDP			; pthread_key_delete
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
key$ = 64
_ignored$ = 72
?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z PROC		; pthread_key_create
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 1033
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1036
	cmp	QWORD PTR key$[rsp], 0
	je	SHORT $LN2@pthread_ke
; Line 1037
	call	QWORD PTR __imp_TlsAlloc
	mov	rcx, QWORD PTR key$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1038
	mov	rax, QWORD PTR key$[rsp]
	cmp	DWORD PTR [rax], -1			; ffffffffH
	je	SHORT $LN4@pthread_ke
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN5@pthread_ke
$LN4@pthread_ke:
	mov	DWORD PTR tv67[rsp], -1
$LN5@pthread_ke:
	mov	eax, DWORD PTR tv67[rsp]
	jmp	SHORT $LN1@pthread_ke
$LN2@pthread_ke:
; Line 1040
	mov	eax, -2
$LN1@pthread_ke:
; Line 1041
	add	rsp, 56					; 00000038H
	ret	0
?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z ENDP		; pthread_key_create
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 48
size$ = 56
filep$ = 64
?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z PROC		; mg_fgets
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8641
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 8642
	cmp	QWORD PTR filep$[rsp], 0
	jne	SHORT $LN2@mg_fgets
; Line 8643
	xor	eax, eax
	jmp	SHORT $LN1@mg_fgets
$LN2@mg_fgets:
; Line 8646
	mov	rax, QWORD PTR filep$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN3@mg_fgets
; Line 8647
	mov	rax, QWORD PTR filep$[rsp]
	mov	r8, QWORD PTR [rax+32]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	fgets
	jmp	SHORT $LN1@mg_fgets
; Line 8648
	jmp	SHORT $LN4@mg_fgets
$LN3@mg_fgets:
; Line 8649
	xor	eax, eax
$LN4@mg_fgets:
$LN1@mg_fgets:
; Line 8651
	add	rsp, 40					; 00000028H
	ret	0
?mg_fgets@@YAPEBDPEAD_KPEAUmg_file@@@Z ENDP		; mg_fgets
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
long_len$ = 64
err$ = 68
fcompare$ = 72
tv154 = 80
wbuf2$ = 96
buf$ = 624
buf2$ = 1408
__$ArrayPad$ = 2192
conn$ = 2224
path$ = 2232
wbuf$ = 2240
wbuf_len$ = 2248
?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z PROC ; path_to_unicode
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4985
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2216				; 000008a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4989
	lea	rax, OFFSET FLAT:?mg_wcscasecmp@@YAHPEB_W0@Z ; mg_wcscasecmp
	mov	QWORD PTR fcompare$[rsp], rax
; Line 4991
	mov	r8d, 780				; 0000030cH
	mov	rdx, QWORD PTR path$[rsp]
	lea	rcx, QWORD PTR buf$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 4992
	lea	rcx, QWORD PTR buf$[rsp]
	call	?change_slashes_to_backslashes@@YAXPEAD@Z ; change_slashes_to_backslashes
; Line 4996
	mov	rax, QWORD PTR wbuf_len$[rsp]
	shl	rax, 1
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR wbuf$[rsp]
	call	memset
; Line 4997
	mov	eax, DWORD PTR wbuf_len$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR wbuf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -1
	lea	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	mov	ecx, 65001				; 0000fde9H
	call	QWORD PTR __imp_MultiByteToWideChar
; Line 4998
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 780			; 0000030cH
	lea	rax, QWORD PTR buf2$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR wbuf_len$[rsp]
	mov	r8, QWORD PTR wbuf$[rsp]
	xor	edx, edx
	mov	ecx, 65001				; 0000fde9H
	call	QWORD PTR __imp_WideCharToMultiByte
; Line 5000
	lea	rdx, QWORD PTR buf2$[rsp]
	lea	rcx, QWORD PTR buf$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN2@path_to_un
; Line 5001
	mov	eax, 2
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR wbuf$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN2@path_to_un:
; Line 5013
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@path_to_un
; Line 5015
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 8
	cmp	QWORD PTR [rax+rcx+8], 0
	je	SHORT $LN4@path_to_un
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 8
	lea	rdx, OFFSET FLAT:$SG162681
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN4@path_to_un
; Line 5018
	lea	rax, OFFSET FLAT:wcscmp
	mov	QWORD PTR fcompare$[rsp], rax
$LN4@path_to_un:
$LN3@path_to_un:
; Line 5024
	mov	r8d, 522				; 0000020aH
	xor	edx, edx
	lea	rcx, QWORD PTR wbuf2$[rsp]
	call	memset
; Line 5025
	mov	r8d, 260				; 00000104H
	lea	rdx, QWORD PTR wbuf2$[rsp]
	mov	rcx, QWORD PTR wbuf$[rsp]
	call	QWORD PTR __imp_GetLongPathNameW
	mov	DWORD PTR long_len$[rsp], eax
; Line 5026
	cmp	DWORD PTR long_len$[rsp], 0
	jne	SHORT $LN5@path_to_un
; Line 5027
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR err$[rsp], eax
; Line 5028
	cmp	DWORD PTR err$[rsp], 2
	jne	SHORT $LN6@path_to_un
; Line 5030
	jmp	SHORT $LN1@path_to_un
$LN6@path_to_un:
$LN5@path_to_un:
; Line 5033
	mov	eax, DWORD PTR long_len$[rsp]
	cmp	rax, 261				; 00000105H
	jae	SHORT $LN8@path_to_un
	mov	rax, QWORD PTR fcompare$[rsp]
	mov	QWORD PTR tv154[rsp], rax
	lea	rdx, QWORD PTR wbuf2$[rsp]
	mov	rcx, QWORD PTR wbuf$[rsp]
	call	QWORD PTR tv154[rsp]
	test	eax, eax
	je	SHORT $LN7@path_to_un
$LN8@path_to_un:
; Line 5035
	mov	eax, 2
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR wbuf$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN7@path_to_un:
$LN1@path_to_un:
; Line 5037
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2216				; 000008a8H
	ret	0
?path_to_unicode@@YAXPEBUmg_connection@@PEBDPEA_W_K@Z ENDP ; path_to_unicode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mutex$ = 48
?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z PROC	; pthread_mutex_unlock
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4764
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4765
	mov	rax, QWORD PTR mutex$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_LeaveCriticalSection
; Line 4766
	xor	eax, eax
; Line 4767
	add	rsp, 40					; 00000028H
	ret	0
?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ENDP	; pthread_mutex_unlock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mutex$ = 48
?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z PROC	; pthread_mutex_lock
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4756
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4757
	mov	rax, QWORD PTR mutex$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_EnterCriticalSection
; Line 4758
	xor	eax, eax
; Line 4759
	add	rsp, 40					; 00000028H
	ret	0
?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ENDP	; pthread_mutex_lock
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
li$ = 48
ok$ = 56
tv159 = 60
li2$ = 64
d$ = 72
ft$ = 80
t_user$1 = 88
t_kernel$2 = 96
t_user$3 = 104
t_kernel$4 = 112
t_exit$5 = 120
t_create$6 = 128
t_exit$7 = 136
t_create$8 = 144
clk_id$ = 176
tp$ = 184
?mg_clock_gettime@@YAHKPEAUtimespec@@@Z PROC		; mg_clock_gettime
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 721
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 168				; 000000a8H
; Line 724
	mov	DWORD PTR ok$[rsp], 0
; Line 729
	cmp	DWORD PTR ?initialized@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4HA, 0
	jne	SHORT $LN2@mg_clock_g
; Line 730
	lea	rcx, QWORD PTR li$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 731
	mov	rax, QWORD PTR li$[rsp]
	test	rax, rax
	jl	SHORT $LN19@mg_clock_g
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN20@mg_clock_g
$LN19@mg_clock_g:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN20@mg_clock_g:
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR ?perfcnt_per_sec@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4NA, xmm0
; Line 732
	mov	DWORD PTR ?initialized@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4HA, 1
$LN2@mg_clock_g:
; Line 735
	cmp	QWORD PTR tp$[rsp], 0
	je	$LN3@mg_clock_g
; Line 736
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR tp$[rsp]
	call	memset
; Line 738
	cmp	DWORD PTR clk_id$[rsp], 2
	jne	SHORT $LN4@mg_clock_g
; Line 741
	lea	rcx, QWORD PTR ft$[rsp]
	call	QWORD PTR __imp_GetSystemTimeAsFileTime
; Line 742
	mov	eax, DWORD PTR ft$[rsp]
	mov	DWORD PTR li$[rsp], eax
; Line 743
	mov	eax, DWORD PTR ft$[rsp+4]
	mov	DWORD PTR li$[rsp+4], eax
; Line 744
	mov	rax, 116444736000000000			; 019db1ded53e8000H
	mov	rcx, QWORD PTR li$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR li$[rsp], rax
; Line 745
	xor	edx, edx
	mov	rax, QWORD PTR li$[rsp]
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rcx, QWORD PTR tp$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 746
	xor	edx, edx
	mov	rax, QWORD PTR li$[rsp]
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rax, rdx
	imul	eax, eax, 100				; 00000064H
	mov	rcx, QWORD PTR tp$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 747
	mov	DWORD PTR ok$[rsp], 1
	jmp	$LN5@mg_clock_g
$LN4@mg_clock_g:
; Line 750
	cmp	DWORD PTR clk_id$[rsp], 1
	jne	$LN6@mg_clock_g
; Line 753
	lea	rcx, QWORD PTR li$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 754
	mov	rax, QWORD PTR li$[rsp]
	test	rax, rax
	jl	SHORT $LN17@mg_clock_g
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN18@mg_clock_g
$LN17@mg_clock_g:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN18@mg_clock_g:
	mulsd	xmm0, QWORD PTR ?perfcnt_per_sec@?1??mg_clock_gettime@@YAHKPEAUtimespec@@@Z@4NA
	movsd	QWORD PTR d$[rsp], xmm0
; Line 755
	cvttsd2si rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR tp$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 756
	mov	rax, QWORD PTR tp$[rsp]
	cvtsi2sd xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR d$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR d$[rsp], xmm0
; Line 757
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR __real@41cdcd6500000000
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR tp$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 758
	mov	DWORD PTR ok$[rsp], 1
	jmp	$LN7@mg_clock_g
$LN6@mg_clock_g:
; Line 761
	cmp	DWORD PTR clk_id$[rsp], 3
	jne	$LN8@mg_clock_g
; Line 765
	call	QWORD PTR __imp_GetCurrentThread
	lea	rcx, QWORD PTR t_user$1[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR t_kernel$2[rsp]
	lea	r8, QWORD PTR t_exit$5[rsp]
	lea	rdx, QWORD PTR t_create$6[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_GetThreadTimes
	test	eax, eax
	je	SHORT $LN10@mg_clock_g
; Line 770
	mov	eax, DWORD PTR t_user$1[rsp]
	mov	DWORD PTR li$[rsp], eax
; Line 771
	mov	eax, DWORD PTR t_user$1[rsp+4]
	mov	DWORD PTR li$[rsp+4], eax
; Line 772
	mov	eax, DWORD PTR t_kernel$2[rsp]
	mov	DWORD PTR li2$[rsp], eax
; Line 773
	mov	eax, DWORD PTR t_kernel$2[rsp+4]
	mov	DWORD PTR li2$[rsp+4], eax
; Line 774
	mov	rax, QWORD PTR li2$[rsp]
	mov	rcx, QWORD PTR li$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR li$[rsp], rax
; Line 775
	xor	edx, edx
	mov	rax, QWORD PTR li$[rsp]
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rcx, QWORD PTR tp$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 776
	xor	edx, edx
	mov	rax, QWORD PTR li$[rsp]
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rax, rdx
	imul	eax, eax, 100				; 00000064H
	mov	rcx, QWORD PTR tp$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 777
	mov	DWORD PTR ok$[rsp], 1
$LN10@mg_clock_g:
; Line 778
	jmp	$LN9@mg_clock_g
$LN8@mg_clock_g:
; Line 781
	cmp	DWORD PTR clk_id$[rsp], 4
	jne	$LN11@mg_clock_g
; Line 785
	call	QWORD PTR __imp_GetCurrentProcess
	lea	rcx, QWORD PTR t_user$3[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR t_kernel$4[rsp]
	lea	r8, QWORD PTR t_exit$7[rsp]
	lea	rdx, QWORD PTR t_create$8[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_GetProcessTimes
	test	eax, eax
	je	SHORT $LN13@mg_clock_g
; Line 790
	mov	eax, DWORD PTR t_user$3[rsp]
	mov	DWORD PTR li$[rsp], eax
; Line 791
	mov	eax, DWORD PTR t_user$3[rsp+4]
	mov	DWORD PTR li$[rsp+4], eax
; Line 792
	mov	eax, DWORD PTR t_kernel$4[rsp]
	mov	DWORD PTR li2$[rsp], eax
; Line 793
	mov	eax, DWORD PTR t_kernel$4[rsp+4]
	mov	DWORD PTR li2$[rsp+4], eax
; Line 794
	mov	rax, QWORD PTR li2$[rsp]
	mov	rcx, QWORD PTR li$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR li$[rsp], rax
; Line 795
	xor	edx, edx
	mov	rax, QWORD PTR li$[rsp]
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rcx, QWORD PTR tp$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 796
	xor	edx, edx
	mov	rax, QWORD PTR li$[rsp]
	mov	ecx, 10000000				; 00989680H
	div	rcx
	mov	rax, rdx
	imul	eax, eax, 100				; 00000064H
	mov	rcx, QWORD PTR tp$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 797
	mov	DWORD PTR ok$[rsp], 1
$LN13@mg_clock_g:
$LN11@mg_clock_g:
$LN9@mg_clock_g:
$LN7@mg_clock_g:
$LN5@mg_clock_g:
$LN3@mg_clock_g:
; Line 809
	cmp	DWORD PTR ok$[rsp], 0
	je	SHORT $LN15@mg_clock_g
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN16@mg_clock_g
$LN15@mg_clock_g:
	mov	DWORD PTR tv159[rsp], -1
$LN16@mg_clock_g:
	mov	eax, DWORD PTR tv159[rsp]
; Line 810
	add	rsp, 168				; 000000a8H
	ret	0
?mg_clock_gettime@@YAHKPEAUtimespec@@@Z ENDP		; mg_clock_gettime
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Time$ = 48
time	PROC
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
; Line 521
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 522
	mov	rcx, QWORD PTR _Time$[rsp]
	call	_time64
; Line 523
	add	rsp, 40					; 00000028H
	ret	0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Tm$ = 48
_mkgmtime PROC
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
; Line 506
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 507
	mov	rcx, QWORD PTR _Tm$[rsp]
	call	_mkgmtime64
; Line 508
	add	rsp, 40					; 00000028H
	ret	0
_mkgmtime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Time$ = 48
localtime PROC
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
; Line 498
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 499
	mov	rcx, QWORD PTR _Time$[rsp]
	call	_localtime64
; Line 500
	add	rsp, 40					; 00000028H
	ret	0
localtime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Time$ = 48
gmtime	PROC
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
; Line 490
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 491
	mov	rcx, QWORD PTR _Time$[rsp]
	call	_gmtime64
; Line 492
	add	rsp, 40					; 00000028H
	ret	0
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Time1$ = 48
_Time2$ = 56
difftime PROC
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
; Line 483
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 484
	mov	rdx, QWORD PTR _Time2$[rsp]
	mov	rcx, QWORD PTR _Time1$[rsp]
	call	_difftime64
; Line 485
	add	rsp, 40					; 00000028H
	ret	0
difftime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_FileName$ = 48
_Stat$ = 56
stat	PROC
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\sys\stat.h
; Line 239
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 241
	mov	rdx, QWORD PTR _Stat$[rsp]
	mov	rcx, QWORD PTR _FileName$[rsp]
	call	_stat64i32
; Line 242
	add	rsp, 40					; 00000028H
	ret	0
stat	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
new_dom$ = 64
idx$ = 72
i$ = 76
name$ = 80
dom$ = 88
value$ = 96
default_value$ = 104
tv146 = 112
tv171 = 120
tv268 = 128
ctx$ = 160
options$ = 168
error$ = 176
mg_start_domain2 PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21161
$LN37:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 21169
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN13@mg_start_d
; Line 21170
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 0
; Line 21171
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 21172
	mov	rax, QWORD PTR error$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jbe	SHORT $LN14@mg_start_d
; Line 21173
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	BYTE PTR [rax], 0
$LN14@mg_start_d:
$LN13@mg_start_d:
; Line 21177
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN16@mg_start_d
	cmp	QWORD PTR options$[rsp], 0
	jne	SHORT $LN15@mg_start_d
$LN16@mg_start_d:
; Line 21178
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN17@mg_start_d
; Line 21179
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 1
; Line 21180
	lea	rax, OFFSET FLAT:$SG169752
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169753
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN17@mg_start_d:
; Line 21187
	mov	eax, -1
	jmp	$LN1@mg_start_d
$LN15@mg_start_d:
; Line 21190
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	je	SHORT $LN18@mg_start_d
; Line 21191
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN19@mg_start_d
; Line 21192
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 7
; Line 21193
	lea	rax, OFFSET FLAT:$SG169756
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169757
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN19@mg_start_d:
; Line 21200
	mov	eax, -7
	jmp	$LN1@mg_start_d
$LN18@mg_start_d:
; Line 21203
	mov	edx, 560				; 00000230H
	mov	ecx, 1
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR new_dom$[rsp], rax
; Line 21206
	cmp	QWORD PTR new_dom$[rsp], 0
	jne	SHORT $LN20@mg_start_d
; Line 21208
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN21@mg_start_d
; Line 21209
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 6
; Line 21210
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 560			; 00000230H
; Line 21211
	lea	rax, OFFSET FLAT:$SG169760
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169761
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN21@mg_start_d:
; Line 21218
	mov	eax, -6
	jmp	$LN1@mg_start_d
$LN20@mg_start_d:
$LN2@mg_start_d:
; Line 21222
	cmp	QWORD PTR options$[rsp], 0
	je	$LN3@mg_start_d
	mov	rax, QWORD PTR options$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv146[rsp], rax
	mov	rax, QWORD PTR options$[rsp]
	add	rax, 8
	mov	QWORD PTR options$[rsp], rax
	mov	rax, QWORD PTR tv146[rsp]
	mov	QWORD PTR name$[rsp], rax
	cmp	QWORD PTR name$[rsp], 0
	je	$LN3@mg_start_d
; Line 21223
	mov	rcx, QWORD PTR name$[rsp]
	call	?get_option_index@@YAHPEBD@Z		; get_option_index
	mov	DWORD PTR idx$[rsp], eax
; Line 21224
	cmp	DWORD PTR idx$[rsp], -1
	jne	$LN22@mg_start_d
; Line 21225
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169764
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21225				; 000052e9H
	lea	r8, OFFSET FLAT:$SG169765
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21226
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN24@mg_start_d
; Line 21227
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 21228
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], -1			; ffffffffH
; Line 21229
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169767
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN24@mg_start_d:
; Line 21236
	mov	rcx, QWORD PTR new_dom$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 21237
	mov	eax, -2
	jmp	$LN1@mg_start_d
	jmp	$LN23@mg_start_d
$LN22@mg_start_d:
; Line 21238
	mov	rax, QWORD PTR options$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv171[rsp], rax
	mov	rax, QWORD PTR options$[rsp]
	add	rax, 8
	mov	QWORD PTR options$[rsp], rax
	mov	rax, QWORD PTR tv171[rsp]
	mov	QWORD PTR value$[rsp], rax
	cmp	QWORD PTR value$[rsp], 0
	jne	$LN25@mg_start_d
; Line 21239
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169769
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21239				; 000052f7H
	lea	r8, OFFSET FLAT:$SG169770
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21240
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN26@mg_start_d
; Line 21241
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 21242
	mov	rax, QWORD PTR error$[rsp]
	mov	ecx, DWORD PTR idx$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 21243
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169772
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN26@mg_start_d:
; Line 21250
	mov	rcx, QWORD PTR new_dom$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 21251
	mov	eax, -2
	jmp	$LN1@mg_start_d
$LN25@mg_start_d:
$LN23@mg_start_d:
; Line 21253
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR new_dom$[rsp]
	cmp	QWORD PTR [rcx+rax*8+8], 0
	je	SHORT $LN27@mg_start_d
; Line 21255
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169774
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21255				; 00005307H
	lea	r8, OFFSET FLAT:$SG169775
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21256
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR new_dom$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8+8]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN27@mg_start_d:
; Line 21258
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	movsxd	rcx, DWORD PTR idx$[rsp]
	mov	rdx, QWORD PTR new_dom$[rsp]
	mov	QWORD PTR [rdx+rcx*8+8], rax
$LN6@mg_start_d:
; Line 21259
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN6@mg_start_d
; Line 21260
	jmp	$LN2@mg_start_d
$LN3@mg_start_d:
; Line 21264
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR new_dom$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	$LN28@mg_start_d
; Line 21265
	lea	rax, OFFSET FLAT:$SG169777
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169778
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21265				; 00005311H
	lea	r8, OFFSET FLAT:$SG169779
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21266
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN29@mg_start_d
; Line 21267
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 4
; Line 21268
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 32			; 00000020H
; Line 21269
	mov	eax, 24
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169781
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN29@mg_start_d:
; Line 21276
	mov	rcx, QWORD PTR new_dom$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 21277
	mov	eax, -4
	jmp	$LN1@mg_start_d
$LN28@mg_start_d:
; Line 21282
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@mg_start_d
$LN7@mg_start_d:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@mg_start_d:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN8@mg_start_d
; Line 21283
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+32152]
	mov	QWORD PTR default_value$[rsp], rax
; Line 21284
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR new_dom$[rsp]
	cmp	QWORD PTR [rcx+rax*8+8], 0
	jne	SHORT $LN30@mg_start_d
	cmp	QWORD PTR default_value$[rsp], 0
	je	SHORT $LN30@mg_start_d
; Line 21285
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR default_value$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR new_dom$[rsp]
	mov	QWORD PTR [rdx+rcx*8+8], rax
$LN30@mg_start_d:
; Line 21287
	jmp	SHORT $LN7@mg_start_d
$LN8@mg_start_d:
; Line 21289
	mov	rax, QWORD PTR new_dom$[rsp]
	mov	QWORD PTR [rax+520], 0
; Line 21290
	mov	rax, QWORD PTR new_dom$[rsp]
	mov	QWORD PTR [rax+552], 0
; Line 21291
	mov	rax, QWORD PTR new_dom$[rsp]
	mov	DWORD PTR [rax+544], 0
; Line 21292
	call	?get_random@@YA_KXZ			; get_random
	mov	QWORD PTR tv268[rsp], rax
	call	?get_random@@YA_KXZ			; get_random
	shl	rax, 31
	mov	rcx, QWORD PTR tv268[rsp]
	xor	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR new_dom$[rsp]
	mov	QWORD PTR [rcx+536], rax
; Line 21299
	mov	rdx, QWORD PTR new_dom$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z ; init_ssl_ctx
	test	eax, eax
	jne	SHORT $LN31@mg_start_d
; Line 21301
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN32@mg_start_d
; Line 21302
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 3
; Line 21303
	lea	rax, OFFSET FLAT:$SG169785
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169786
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN32@mg_start_d:
; Line 21310
	mov	rcx, QWORD PTR new_dom$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 21311
	mov	eax, -3
	jmp	$LN1@mg_start_d
$LN31@mg_start_d:
; Line 21316
	mov	rcx, QWORD PTR ctx$[rsp]
	call	mg_lock_context
; Line 21318
	mov	DWORD PTR idx$[rsp], 0
; Line 21319
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	QWORD PTR dom$[rsp], rax
$LN10@mg_start_d:
; Line 21321
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	ecx, 8
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR dom$[rsp]
	mov	rdx, QWORD PTR [rdx+rax+8]
	mov	rax, QWORD PTR new_dom$[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	$LN33@mg_start_d
; Line 21324
	mov	eax, 8
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR new_dom$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169788
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21326				; 0000534eH
	lea	r8, OFFSET FLAT:$SG169789
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21327
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN34@mg_start_d
; Line 21328
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 5
; Line 21329
	mov	eax, 24
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	edx, 8
	imul	rdx, rdx, 32				; 00000020H
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR new_dom$[rsp]
	mov	rax, QWORD PTR [rax+rdx+8]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169791
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN34@mg_start_d:
; Line 21337
	mov	rcx, QWORD PTR new_dom$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 21338
	mov	rcx, QWORD PTR ctx$[rsp]
	call	mg_unlock_context
; Line 21339
	mov	eax, -5
	jmp	SHORT $LN1@mg_start_d
$LN33@mg_start_d:
; Line 21343
	mov	eax, DWORD PTR idx$[rsp]
	inc	eax
	mov	DWORD PTR idx$[rsp], eax
; Line 21345
	mov	rax, QWORD PTR dom$[rsp]
	cmp	QWORD PTR [rax+552], 0
	jne	SHORT $LN35@mg_start_d
; Line 21346
	mov	rax, QWORD PTR dom$[rsp]
	mov	rcx, QWORD PTR new_dom$[rsp]
	mov	QWORD PTR [rax+552], rcx
; Line 21347
	jmp	SHORT $LN11@mg_start_d
$LN35@mg_start_d:
; Line 21349
	mov	rax, QWORD PTR dom$[rsp]
	mov	rax, QWORD PTR [rax+552]
	mov	QWORD PTR dom$[rsp], rax
; Line 21350
	jmp	$LN10@mg_start_d
$LN11@mg_start_d:
; Line 21352
	mov	rcx, QWORD PTR ctx$[rsp]
	call	mg_unlock_context
; Line 21355
	mov	eax, DWORD PTR idx$[rsp]
$LN1@mg_start_d:
; Line 21356
	add	rsp, 152				; 00000098H
	ret	0
mg_start_domain2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 64
i$ = 72
ok$ = 76
itmp$ = 80
idx$ = 84
workerthreadcount$ = 88
error_no$1 = 92
options$ = 96
name$ = 104
tv150 = 112
tv156 = 116
tv163 = 120
tv171 = 124
error_id$2 = 128
tv66 = 136
err_msg$3 = 144
tv209 = 152
value$ = 160
default_value$ = 168
err_msg$4 = 176
err_msg$5 = 184
err_msg$6 = 192
err_msg$7 = 200
err_msg$8 = 208
err_msg$9 = 216
exit_callback$ = 224
tv217 = 232
tv244 = 240
tv650 = 248
tls$ = 256
init$ = 336
error$ = 344
mg_start2 PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 20403
$LN71:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 20409
	mov	QWORD PTR exit_callback$[rsp], 0
; Line 20410
	cmp	QWORD PTR init$[rsp], 0
	je	SHORT $LN59@mg_start2
	mov	rax, QWORD PTR init$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN60@mg_start2
$LN59@mg_start2:
	mov	QWORD PTR tv66[rsp], 0
$LN60@mg_start2:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR options$[rsp], rax
; Line 20415
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN13@mg_start2
; Line 20416
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 0
; Line 20417
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 20418
	mov	rax, QWORD PTR error$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jbe	SHORT $LN14@mg_start2
; Line 20419
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	BYTE PTR [rax], 0
$LN14@mg_start2:
$LN13@mg_start2:
; Line 20423
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jne	SHORT $LN15@mg_start2
; Line 20427
	mov	rcx, QWORD PTR options$[rsp]
	call	?legacy_init@@YAXPEAPEBD@Z		; legacy_init
$LN15@mg_start2:
; Line 20429
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jne	SHORT $LN16@mg_start2
; Line 20430
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN17@mg_start2
; Line 20431
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 8
; Line 20432
	lea	rax, OFFSET FLAT:$SG169612
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169613
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN17@mg_start2:
; Line 20439
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN16@mg_start2:
; Line 20443
	mov	edx, 32704				; 00007fc0H
	mov	ecx, 1
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR ctx$[rsp], rax
; Line 20444
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN18@mg_start2
; Line 20445
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN19@mg_start2
; Line 20446
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 6
; Line 20447
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 32704		; 00007fc0H
; Line 20448
	lea	rax, OFFSET FLAT:$SG169616
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169617
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN19@mg_start2:
; Line 20455
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN18@mg_start2:
; Line 20459
	call	?get_random@@YA_KXZ			; get_random
	xor	rax, QWORD PTR options$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+32680], rax
; Line 20465
	lea	rcx, OFFSET FLAT:?thread_idx_max@@3_JC
	call	?mg_atomic_inc@@YA_JPEC_J@Z		; mg_atomic_inc
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 20466
	mov	DWORD PTR tls$[rsp], -1
; Line 20467
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+112]
	mov	DWORD PTR tls$[rsp+4], eax
; Line 20469
	mov	QWORD PTR tls$[rsp+16], 0
; Line 20471
	lea	rdx, QWORD PTR tls$[rsp]
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20473
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 48					; 00000030H
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	mov	rcx, rax
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	test	eax, eax
	jne	SHORT $LN61@mg_start2
	mov	DWORD PTR tv150[rsp], 1
	jmp	SHORT $LN62@mg_start2
$LN61@mg_start2:
	mov	DWORD PTR tv150[rsp], 0
$LN62@mg_start2:
	mov	eax, DWORD PTR tv150[rsp]
	mov	DWORD PTR ok$[rsp], eax
; Line 20475
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 184				; 000000b8H
	xor	edx, edx
	mov	rcx, rax
	call	?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z ; pthread_cond_init
	test	eax, eax
	jne	SHORT $LN63@mg_start2
	mov	DWORD PTR tv156[rsp], 1
	jmp	SHORT $LN64@mg_start2
$LN63@mg_start2:
	mov	DWORD PTR tv156[rsp], 0
$LN64@mg_start2:
	mov	eax, DWORD PTR tv156[rsp]
	mov	ecx, DWORD PTR ok$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ok$[rsp], eax
; Line 20476
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 136				; 00000088H
	xor	edx, edx
	mov	rcx, rax
	call	?pthread_cond_init@@YAHPEAUpthread_cond_t@@PEBX@Z ; pthread_cond_init
	test	eax, eax
	jne	SHORT $LN65@mg_start2
	mov	DWORD PTR tv163[rsp], 1
	jmp	SHORT $LN66@mg_start2
$LN65@mg_start2:
	mov	DWORD PTR tv163[rsp], 0
$LN66@mg_start2:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR ok$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ok$[rsp], eax
; Line 20477
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+232], 0
; Line 20479
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 31944				; 00007cc8H
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	mov	rcx, rax
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	test	eax, eax
	jne	SHORT $LN67@mg_start2
	mov	DWORD PTR tv171[rsp], 1
	jmp	SHORT $LN68@mg_start2
$LN67@mg_start2:
	mov	DWORD PTR tv171[rsp], 0
$LN68@mg_start2:
	mov	eax, DWORD PTR tv171[rsp]
	mov	ecx, DWORD PTR ok$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ok$[rsp], eax
; Line 20483
	cmp	DWORD PTR ok$[rsp], 0
	jne	$LN20@mg_start2
; Line 20484
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR error_id$2[rsp], eax
; Line 20485
	lea	rax, OFFSET FLAT:$SG169619
	mov	QWORD PTR err_msg$3[rsp], rax
; Line 20490
	mov	rax, QWORD PTR err_msg$3[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169620
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20490				; 0000500aH
	lea	r8, OFFSET FLAT:$SG169621
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20491
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN21@mg_start2
; Line 20492
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 9
; Line 20493
	mov	rax, QWORD PTR error$[rsp]
	mov	ecx, DWORD PTR error_id$2[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 20494
	mov	rax, QWORD PTR err_msg$3[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169623
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN21@mg_start2:
; Line 20502
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 20503
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20504
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN20@mg_start2:
; Line 20507
	cmp	QWORD PTR init$[rsp], 0
	je	SHORT $LN22@mg_start2
	mov	rax, QWORD PTR init$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN22@mg_start2
; Line 20509
	mov	rax, QWORD PTR init$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR ctx$[rsp]
	lea	rdi, QWORD PTR [rcx+31984]
	mov	rsi, rax
	mov	ecx, 152				; 00000098H
	rep movsb
; Line 20510
	mov	rax, QWORD PTR init$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR exit_callback$[rsp], rax
; Line 20514
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+32104], 0
$LN22@mg_start2:
; Line 20516
	cmp	QWORD PTR init$[rsp], 0
	je	SHORT $LN69@mg_start2
	mov	rax, QWORD PTR init$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv209[rsp], rax
	jmp	SHORT $LN70@mg_start2
$LN69@mg_start2:
	mov	QWORD PTR tv209[rsp], 0
$LN70@mg_start2:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR tv209[rsp]
	mov	QWORD PTR [rax+32136], rcx
; Line 20517
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+32664], 0
; Line 20518
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+32696], 0
$LN2@mg_start2:
; Line 20525
	cmp	QWORD PTR options$[rsp], 0
	je	$LN3@mg_start2
	mov	rax, QWORD PTR options$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv217[rsp], rax
	mov	rax, QWORD PTR options$[rsp]
	add	rax, 8
	mov	QWORD PTR options$[rsp], rax
	mov	rax, QWORD PTR tv217[rsp]
	mov	QWORD PTR name$[rsp], rax
	cmp	QWORD PTR name$[rsp], 0
	je	$LN3@mg_start2
; Line 20526
	mov	rcx, QWORD PTR name$[rsp]
	call	?get_option_index@@YAHPEBD@Z		; get_option_index
	mov	DWORD PTR idx$[rsp], eax
; Line 20527
	cmp	DWORD PTR idx$[rsp], -1
	jne	$LN23@mg_start2
; Line 20528
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169627
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20528				; 00005030H
	lea	r8, OFFSET FLAT:$SG169628
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20529
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN25@mg_start2
; Line 20530
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 20531
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], -1			; ffffffffH
; Line 20532
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169630
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN25@mg_start2:
; Line 20540
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20541
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20542
	xor	eax, eax
	jmp	$LN1@mg_start2
	jmp	$LN24@mg_start2
$LN23@mg_start2:
; Line 20544
	mov	rax, QWORD PTR options$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv244[rsp], rax
	mov	rax, QWORD PTR options$[rsp]
	add	rax, 8
	mov	QWORD PTR options$[rsp], rax
	mov	rax, QWORD PTR tv244[rsp]
	mov	QWORD PTR value$[rsp], rax
	cmp	QWORD PTR value$[rsp], 0
	jne	$LN26@mg_start2
; Line 20545
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169632
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20545				; 00005041H
	lea	r8, OFFSET FLAT:$SG169633
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20546
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN27@mg_start2
; Line 20547
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 20548
	mov	rax, QWORD PTR error$[rsp]
	mov	ecx, DWORD PTR idx$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 20549
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169635
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN27@mg_start2:
; Line 20557
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20558
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20559
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN26@mg_start2:
$LN24@mg_start2:
; Line 20561
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rcx+rax*8+32152], 0
	je	SHORT $LN28@mg_start2
; Line 20564
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169637
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20564				; 00005054H
	lea	r8, OFFSET FLAT:$SG169638
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20565
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8+32152]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN28@mg_start2:
; Line 20567
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	movsxd	rcx, DWORD PTR idx$[rsp]
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rdx+rcx*8+32152], rax
$LN6@mg_start2:
; Line 20568
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN6@mg_start2
; Line 20569
	jmp	$LN2@mg_start2
$LN3@mg_start2:
; Line 20572
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@mg_start2
$LN7@mg_start2:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@mg_start2:
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN8@mg_start2
; Line 20573
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR default_value$[rsp], rax
; Line 20574
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rcx+rax*8+32152], 0
	jne	SHORT $LN29@mg_start2
	cmp	QWORD PTR default_value$[rsp], 0
	je	SHORT $LN29@mg_start2
; Line 20575
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR default_value$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rdx+rcx*8+32152], rax
$LN29@mg_start2:
; Line 20577
	jmp	SHORT $LN7@mg_start2
$LN8@mg_start2:
; Line 20580
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+32152]
	call	atoi
	mov	DWORD PTR itmp$[rsp], eax
; Line 20581
	cmp	DWORD PTR itmp$[rsp], 1024		; 00000400H
	jge	$LN30@mg_start2
; Line 20582
	mov	eax, 24
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169641
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20584				; 00005068H
	lea	r8, OFFSET FLAT:$SG169642
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20585
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN31@mg_start2
; Line 20586
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 20587
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 4
; Line 20588
	mov	eax, 24
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169644
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN31@mg_start2:
; Line 20596
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20597
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20598
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN30@mg_start2:
; Line 20600
	mov	rax, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR itmp$[rsp]
	mov	DWORD PTR [rax+240], ecx
; Line 20604
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+32152]
	call	atoi
	mov	DWORD PTR itmp$[rsp], eax
; Line 20605
	cmp	DWORD PTR itmp$[rsp], 1
	jge	$LN32@mg_start2
; Line 20606
	mov	eax, 24
	imul	rax, rax, 6
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169646
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20608				; 00005080H
	lea	r8, OFFSET FLAT:$SG169647
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20609
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN33@mg_start2
; Line 20610
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 20611
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 6
; Line 20612
	mov	eax, 24
	imul	rax, rax, 6
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169649
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN33@mg_start2:
; Line 20620
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20621
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20622
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN32@mg_start2:
; Line 20624
	mov	eax, DWORD PTR itmp$[rsp]
	mov	edx, 48					; 00000030H
	mov	ecx, eax
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+120], rax
; Line 20626
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+120], 0
	jne	$LN34@mg_start2
; Line 20627
	mov	eax, 24
	imul	rax, rax, 6
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169651
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20629				; 00005095H
	lea	r8, OFFSET FLAT:$SG169652
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20630
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN35@mg_start2
; Line 20631
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 6
; Line 20632
	imul	eax, DWORD PTR itmp$[rsp], 48		; 00000030H
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 20633
	mov	eax, 24
	imul	rax, rax, 6
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169654
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN35@mg_start2:
; Line 20641
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20642
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20643
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN34@mg_start2:
; Line 20645
	mov	rax, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR itmp$[rsp]
	mov	DWORD PTR [rax+236], ecx
; Line 20649
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+32152]
	call	atoi
	mov	DWORD PTR workerthreadcount$[rsp], eax
; Line 20651
	cmp	DWORD PTR workerthreadcount$[rsp], 65536 ; 00010000H
	jg	SHORT $LN37@mg_start2
	cmp	DWORD PTR workerthreadcount$[rsp], 0
	jg	$LN36@mg_start2
$LN37@mg_start2:
; Line 20652
	cmp	DWORD PTR workerthreadcount$[rsp], 0
	jg	SHORT $LN38@mg_start2
; Line 20653
	lea	rax, OFFSET FLAT:$SG169659
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169660
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20653				; 000050adH
	lea	r8, OFFSET FLAT:$SG169661
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20654
	jmp	SHORT $LN39@mg_start2
$LN38@mg_start2:
; Line 20655
	lea	rax, OFFSET FLAT:$SG169662
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169663
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20655				; 000050afH
	lea	r8, OFFSET FLAT:$SG169664
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN39@mg_start2:
; Line 20657
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN40@mg_start2
; Line 20658
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 2
; Line 20659
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 1
; Line 20660
	mov	eax, 24
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:?config_options@@3QBUmg_option@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169666
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN40@mg_start2:
; Line 20668
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20669
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20670
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN36@mg_start2:
; Line 20694
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 31928				; 00007cb8H
	mov	rcx, rax
	call	?get_system_name@@YAXPEAPEAD@Z		; get_system_name
; Line 20789
	xor	edx, edx
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?set_gpass_option@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z ; set_gpass_option
	test	eax, eax
	jne	$LN41@mg_start2
; Line 20790
	lea	rax, OFFSET FLAT:$SG169668
	mov	QWORD PTR err_msg$4[rsp], rax
; Line 20792
	mov	rax, QWORD PTR err_msg$4[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169669
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20792				; 00005138H
	lea	r8, OFFSET FLAT:$SG169670
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20794
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN42@mg_start2
; Line 20795
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 13
; Line 20796
	mov	rax, QWORD PTR err_msg$4[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169672
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN42@mg_start2:
; Line 20803
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20804
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20805
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN41@mg_start2:
; Line 20831
	xor	edx, edx
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?init_ssl_ctx@@YAHPEAUmg_context@@PEAUmg_domain_context@@@Z ; init_ssl_ctx
	test	eax, eax
	jne	$LN43@mg_start2
; Line 20832
	lea	rax, OFFSET FLAT:$SG169674
	mov	QWORD PTR err_msg$5[rsp], rax
; Line 20834
	mov	rax, QWORD PTR err_msg$5[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169675
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20834				; 00005162H
	lea	r8, OFFSET FLAT:$SG169676
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20836
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN44@mg_start2
; Line 20837
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 3
; Line 20838
	mov	rax, QWORD PTR err_msg$5[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169678
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN44@mg_start2:
; Line 20846
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20847
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20848
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN43@mg_start2:
; Line 20852
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?set_ports_option@@YAHPEAUmg_context@@@Z ; set_ports_option
	test	eax, eax
	jne	$LN45@mg_start2
; Line 20853
	lea	rax, OFFSET FLAT:$SG169680
	mov	QWORD PTR err_msg$6[rsp], rax
; Line 20855
	mov	rax, QWORD PTR err_msg$6[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169681
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20855				; 00005177H
	lea	r8, OFFSET FLAT:$SG169682
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20857
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN46@mg_start2
; Line 20858
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 10
; Line 20859
	mov	rax, QWORD PTR err_msg$6[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169684
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN46@mg_start2:
; Line 20867
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20868
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20869
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN45@mg_start2:
; Line 20894
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?set_acl_option@@YAHPEAUmg_context@@@Z	; set_acl_option
	test	eax, eax
	jne	$LN47@mg_start2
; Line 20895
	lea	rax, OFFSET FLAT:$SG169686
	mov	QWORD PTR err_msg$7[rsp], rax
; Line 20897
	mov	rax, QWORD PTR err_msg$7[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169687
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20897				; 000051a1H
	lea	r8, OFFSET FLAT:$SG169688
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20899
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN48@mg_start2
; Line 20900
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 12
; Line 20901
	mov	rax, QWORD PTR err_msg$7[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169690
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN48@mg_start2:
; Line 20909
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20910
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20911
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN47@mg_start2:
; Line 20914
	mov	rax, QWORD PTR ctx$[rsp]
	mov	ecx, DWORD PTR workerthreadcount$[rsp]
	mov	DWORD PTR [rax+96], ecx
; Line 20915
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	mov	edx, 8
	mov	ecx, eax
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+104], rax
; Line 20919
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	$LN49@mg_start2
; Line 20920
	lea	rax, OFFSET FLAT:$SG169692
	mov	QWORD PTR err_msg$8[rsp], rax
; Line 20921
	mov	rax, QWORD PTR err_msg$8[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169693
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20921				; 000051b9H
	lea	r8, OFFSET FLAT:$SG169694
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20923
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN50@mg_start2
; Line 20924
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 6
; Line 20925
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	shl	eax, 3
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 20927
	mov	rax, QWORD PTR err_msg$8[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169696
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN50@mg_start2:
; Line 20935
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20936
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20937
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN49@mg_start2:
; Line 20939
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	mov	edx, 2520				; 000009d8H
	mov	ecx, eax
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 20943
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	$LN51@mg_start2
; Line 20944
	lea	rax, OFFSET FLAT:$SG169698
	mov	QWORD PTR err_msg$9[rsp], rax
; Line 20946
	mov	rax, QWORD PTR err_msg$9[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169699
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 20946				; 000051d2H
	lea	r8, OFFSET FLAT:$SG169700
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 20948
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN52@mg_start2
; Line 20949
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 6
; Line 20950
	mov	rax, QWORD PTR ctx$[rsp]
	imul	eax, DWORD PTR [rax+96], 2520		; 000009d8H
	mov	rcx, QWORD PTR error$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 20952
	mov	rax, QWORD PTR err_msg$9[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169702
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN52@mg_start2:
; Line 20960
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 20961
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 20962
	xor	eax, eax
	jmp	$LN1@mg_start2
$LN51@mg_start2:
; Line 21073
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+32096], 0
	je	SHORT $LN53@mg_start2
; Line 21074
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32096]
	mov	QWORD PTR tv650[rsp], rax
	mov	rcx, QWORD PTR ctx$[rsp]
	call	QWORD PTR tv650[rsp]
$LN53@mg_start2:
; Line 21079
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR exit_callback$[rsp]
	mov	QWORD PTR [rax+32104], rcx
; Line 21080
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax], 1
; Line 21083
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@mg_start2
$LN10@mg_start2:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@mg_start2:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN11@mg_start2
; Line 21085
	mov	eax, DWORD PTR i$[rsp]
	imul	rax, rax, 2520				; 000009d8H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rdx, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rcx+rax+2272], rdx
; Line 21089
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 2520				; 000009d8H
	mov	rdx, QWORD PTR ctx$[rsp]
	add	rcx, QWORD PTR [rdx+32]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, OFFSET FLAT:?worker_thread@@YAIPEAX@Z ; worker_thread
	call	?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z ; mg_start_thread_with_id
	test	eax, eax
	je	$LN54@mg_start2
; Line 21091
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR error_no$1[rsp], eax
; Line 21094
	cmp	DWORD PTR i$[rsp], 0
	jbe	SHORT $LN55@mg_start2
; Line 21097
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	ecx, DWORD PTR error_no$1[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG169707
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21100				; 0000526cH
	lea	r8, OFFSET FLAT:$SG169708
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21107
	jmp	$LN56@mg_start2
$LN55@mg_start2:
; Line 21110
	mov	eax, DWORD PTR error_no$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG169709
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 21112				; 00005278H
	lea	r8, OFFSET FLAT:$SG169710
	mov	rdx, QWORD PTR ctx$[rsp]
	xor	ecx, ecx
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 21114
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN57@mg_start2
; Line 21115
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 9
; Line 21116
	mov	rax, QWORD PTR error$[rsp]
	mov	ecx, DWORD PTR error_no$1[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 21117
	mov	eax, DWORD PTR error_no$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG169712
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN57@mg_start2:
; Line 21126
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
; Line 21127
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 21128
	xor	eax, eax
	jmp	SHORT $LN1@mg_start2
$LN56@mg_start2:
; Line 21130
	jmp	SHORT $LN11@mg_start2
$LN54@mg_start2:
; Line 21132
	jmp	$LN10@mg_start2
$LN11@mg_start2:
; Line 21135
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 88					; 00000058H
	mov	r8, rax
	mov	rdx, QWORD PTR ctx$[rsp]
	lea	rcx, OFFSET FLAT:?master_thread@@YAIPEAX@Z ; master_thread
	call	?mg_start_thread_with_id@@YAHP6AIPEAX@Z0PEAPEAX@Z ; mg_start_thread_with_id
; Line 21137
	xor	edx, edx
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_setspecific@@YAHKPEAX@Z	; pthread_setspecific
; Line 21138
	mov	rax, QWORD PTR ctx$[rsp]
$LN1@mg_start2:
; Line 21139
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
mg_start2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
is_ssl$ = 80
is_ws$ = 84
tv149 = 88
tv153 = 96
tv157 = 104
tv163 = 112
opts$ = 120
host$ = 176
protocol$ = 184
port$ = 192
path$ = 200
init$ = 208
error$ = 216
mg_connect_client2 PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18227
$LN24:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 18233
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN2@mg_connect
; Line 18234
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 0
; Line 18235
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 18236
	mov	rax, QWORD PTR error$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jbe	SHORT $LN3@mg_connect
; Line 18237
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	BYTE PTR [rax], 0
$LN3@mg_connect:
$LN2@mg_connect:
; Line 18241
	cmp	QWORD PTR host$[rsp], 0
	je	SHORT $LN5@mg_connect
	cmp	QWORD PTR protocol$[rsp], 0
	jne	SHORT $LN4@mg_connect
$LN5@mg_connect:
; Line 18242
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN6@mg_connect
; Line 18243
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 1
; Line 18244
	lea	rax, OFFSET FLAT:$SG168851
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168852
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN6@mg_connect:
; Line 18251
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN4@mg_connect:
; Line 18255
	lea	rdx, OFFSET FLAT:$SG168855
	mov	rcx, QWORD PTR protocol$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN7@mg_connect
; Line 18256
	mov	DWORD PTR is_ssl$[rsp], 0
; Line 18257
	mov	DWORD PTR is_ws$[rsp], 0
	jmp	$LN8@mg_connect
$LN7@mg_connect:
; Line 18258
	lea	rdx, OFFSET FLAT:$SG168858
	mov	rcx, QWORD PTR protocol$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN9@mg_connect
; Line 18259
	mov	DWORD PTR is_ssl$[rsp], 1
; Line 18260
	mov	DWORD PTR is_ws$[rsp], 0
	jmp	$LN10@mg_connect
$LN9@mg_connect:
; Line 18262
	lea	rdx, OFFSET FLAT:$SG168861
	mov	rcx, QWORD PTR protocol$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN11@mg_connect
; Line 18263
	mov	DWORD PTR is_ssl$[rsp], 0
; Line 18264
	mov	DWORD PTR is_ws$[rsp], 1
	jmp	$LN12@mg_connect
$LN11@mg_connect:
; Line 18265
	lea	rdx, OFFSET FLAT:$SG168864
	mov	rcx, QWORD PTR protocol$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN13@mg_connect
; Line 18266
	mov	DWORD PTR is_ssl$[rsp], 1
; Line 18267
	mov	DWORD PTR is_ws$[rsp], 1
; Line 18269
	jmp	SHORT $LN14@mg_connect
$LN13@mg_connect:
; Line 18270
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN15@mg_connect
; Line 18271
	mov	rax, QWORD PTR error$[rsp]
	mov	DWORD PTR [rax], 1
; Line 18272
	mov	rax, QWORD PTR protocol$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG168866
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR error$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	rax, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
$LN15@mg_connect:
; Line 18279
	xor	eax, eax
	jmp	$LN1@mg_connect
$LN14@mg_connect:
$LN12@mg_connect:
$LN10@mg_connect:
$LN8@mg_connect:
; Line 18286
	cmp	DWORD PTR is_ws$[rsp], 0
	je	$LN16@mg_connect
; Line 18288
	mov	rax, QWORD PTR init$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv163[rsp], rax
	cmp	QWORD PTR path$[rsp], 0
	je	SHORT $LN18@mg_connect
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR tv149[rsp], rax
	jmp	SHORT $LN19@mg_connect
$LN18@mg_connect:
	lea	rax, OFFSET FLAT:$SG168868
	mov	QWORD PTR tv149[rsp], rax
$LN19@mg_connect:
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN20@mg_connect
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv153[rsp], rax
	jmp	SHORT $LN21@mg_connect
$LN20@mg_connect:
	mov	QWORD PTR tv153[rsp], 0
$LN21@mg_connect:
	cmp	QWORD PTR error$[rsp], 0
	je	SHORT $LN22@mg_connect
	mov	rax, QWORD PTR error$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv157[rsp], rax
	jmp	SHORT $LN23@mg_connect
$LN22@mg_connect:
	mov	QWORD PTR tv157[rsp], 0
$LN23@mg_connect:
	mov	rax, QWORD PTR tv163[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, OFFSET FLAT:?experimental_websocket_client_close_wrapper@@YAXPEBUmg_connection@@PEAX@Z ; experimental_websocket_client_close_wrapper
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?experimental_websocket_client_data_wrapper@@YAHPEAUmg_connection@@HPEAD_KPEAX@Z ; experimental_websocket_client_data_wrapper
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR tv149[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv153[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv157[rsp]
	mov	r8d, DWORD PTR is_ssl$[rsp]
	mov	edx, DWORD PTR port$[rsp]
	mov	rcx, QWORD PTR host$[rsp]
	call	mg_connect_websocket_client
	jmp	SHORT $LN1@mg_connect
$LN16@mg_connect:
; Line 18307
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR opts$[rsp]
	call	memset
; Line 18308
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR opts$[rsp], rax
; Line 18309
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR opts$[rsp+8], eax
; Line 18311
	mov	r9, QWORD PTR error$[rsp]
	mov	r8, QWORD PTR init$[rsp]
	mov	edx, DWORD PTR is_ssl$[rsp]
	lea	rcx, QWORD PTR opts$[rsp]
	call	?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z ; mg_connect_client_impl
$LN1@mg_connect:
; Line 18312
	add	rsp, 168				; 000000a8H
	ret	0
mg_connect_client2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
connection_info_length$ = 144
state$ = 152
ri$ = 160
end$ = 168
conn$ = 176
tv145 = 184
tv143 = 188
close_time$1 = 192
start_time$2 = 200
append_eoobj$ = 208
tv156 = 216
tv161 = 224
tv165 = 232
tv176 = 240
$T3 = 248
time_diff$4 = 256
tv230 = 264
tv251 = 272
tv275 = 280
tv294 = 288
tv141 = 296
tv184 = 304
tv186 = 312
now$5 = 320
tv259 = 328
tv283 = 336
tv285 = 344
state_str$ = 352
close_time_str$6 = 368
start_time_str$7 = 432
block$ = 496
__$ArrayPad$ = 752
ctx$ = 784
idx$ = 792
buffer$ = 800
buflen$ = 808
mg_get_connection_info PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21997
$LN36:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 768				; 00000300H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 22000
	mov	QWORD PTR append_eoobj$[rsp], 0
; Line 22001
	mov	QWORD PTR connection_info_length$[rsp], 0
; Line 22002
	mov	DWORD PTR state$[rsp], 0
; Line 22003
	lea	rax, OFFSET FLAT:$SG169946
	mov	QWORD PTR state_str$[rsp], rax
; Line 22011
	cmp	QWORD PTR buffer$[rsp], 0
	je	SHORT $LN4@mg_get_con
	cmp	DWORD PTR buflen$[rsp], 1
	jge	SHORT $LN2@mg_get_con
$LN4@mg_get_con:
; Line 22012
	mov	DWORD PTR buflen$[rsp], 0
; Line 22013
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR end$[rsp], rax
; Line 22014
	jmp	SHORT $LN3@mg_get_con
$LN2@mg_get_con:
; Line 22015
	mov	rax, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rax], 0
; Line 22016
	movsxd	rax, DWORD PTR buflen$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR end$[rsp], rax
$LN3@mg_get_con:
; Line 22018
	cmp	DWORD PTR buflen$[rsp], 5
	jle	SHORT $LN5@mg_get_con
; Line 22020
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR append_eoobj$[rsp], rax
; Line 22021
	mov	rax, QWORD PTR end$[rsp]
	sub	rax, 5
	mov	QWORD PTR end$[rsp], rax
$LN5@mg_get_con:
; Line 22024
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN7@mg_get_con
	cmp	DWORD PTR idx$[rsp], 0
	jge	SHORT $LN6@mg_get_con
$LN7@mg_get_con:
; Line 22026
	xor	eax, eax
	jmp	$LN1@mg_get_con
$LN6@mg_get_con:
; Line 22029
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR idx$[rsp], eax
	jb	SHORT $LN8@mg_get_con
; Line 22031
	xor	eax, eax
	jmp	$LN1@mg_get_con
$LN8@mg_get_con:
; Line 22036
	movsxd	rax, DWORD PTR idx$[rsp]
	imul	rax, rax, 2520				; 000009d8H
	mov	rcx, QWORD PTR ctx$[rsp]
	add	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR conn$[rsp], rax
; Line 22039
	lea	r8, OFFSET FLAT:$SG169954
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
; Line 22042
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
	mov	QWORD PTR ri$[rsp], rax
; Line 22083
	cmp	DWORD PTR state$[rsp], 3
	jl	$LN9@mg_get_con
	cmp	DWORD PTR state$[rsp], 9
	jge	$LN9@mg_get_con
; Line 22084
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2432]
	mov	DWORD PTR tv145[rsp], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax+112]
	mov	DWORD PTR tv143[rsp], eax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_proto_name@@YAPEBDPEBUmg_connection@@@Z ; get_proto_name
	mov	QWORD PTR tv141[rsp], rax
	mov	rax, QWORD PTR ri$[rsp]
	add	rax, 56					; 00000038H
	lea	rcx, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+128], rcx
	mov	ecx, DWORD PTR tv145[rsp]
	mov	DWORD PTR [rsp+120], ecx
	lea	rcx, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+112], rcx
	lea	rcx, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+104], rcx
	mov	ecx, DWORD PTR tv143[rsp]
	mov	DWORD PTR [rsp+96], ecx
	lea	rcx, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+88], rcx
	mov	QWORD PTR [rsp+80], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR tv141[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169956
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 22108
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
$LN9@mg_get_con:
; Line 22112
	cmp	DWORD PTR state$[rsp], 4
	jl	$LN10@mg_get_con
	cmp	DWORD PTR state$[rsp], 6
	jge	$LN10@mg_get_con
; Line 22113
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN18@mg_get_con
	lea	rax, OFFSET FLAT:$SG169958
	mov	QWORD PTR tv156[rsp], rax
	jmp	SHORT $LN19@mg_get_con
$LN18@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169959
	mov	QWORD PTR tv156[rsp], rax
$LN19@mg_get_con:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN20@mg_get_con
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv161[rsp], rax
	jmp	SHORT $LN21@mg_get_con
$LN20@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169960
	mov	QWORD PTR tv161[rsp], rax
$LN21@mg_get_con:
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN22@mg_get_con
	lea	rax, OFFSET FLAT:$SG169961
	mov	QWORD PTR tv165[rsp], rax
	jmp	SHORT $LN23@mg_get_con
$LN22@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169962
	mov	QWORD PTR tv165[rsp], rax
$LN23@mg_get_con:
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv184[rsp], rax
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv186[rsp], rax
	cmp	QWORD PTR connection_info_length$[rsp], 1
	jbe	SHORT $LN24@mg_get_con
	lea	rax, OFFSET FLAT:$SG169963
	mov	QWORD PTR tv176[rsp], rax
	jmp	SHORT $LN25@mg_get_con
$LN24@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169964
	mov	QWORD PTR tv176[rsp], rax
$LN25@mg_get_con:
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+120], rax
	mov	rax, QWORD PTR tv156[rsp]
	mov	QWORD PTR [rsp+112], rax
	mov	rax, QWORD PTR tv161[rsp]
	mov	QWORD PTR [rsp+104], rax
	mov	rax, QWORD PTR tv165[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR tv184[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR tv186[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv176[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169965
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 22133
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
$LN10@mg_get_con:
; Line 22137
	cmp	DWORD PTR state$[rsp], 2
	jl	$LN11@mg_get_con
	cmp	DWORD PTR state$[rsp], 9
	jge	$LN11@mg_get_con
; Line 22138
	lea	rax, QWORD PTR start_time_str$7[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
; Line 22139
	lea	rax, QWORD PTR close_time_str$6[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
; Line 22140
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2344]
	mov	QWORD PTR start_time$2[rsp], rax
; Line 22141
	mov	QWORD PTR close_time$1[rsp], 0
; Line 22144
	lea	r8, QWORD PTR start_time$2[rsp]
	mov	edx, 63					; 0000003fH
	lea	rcx, QWORD PTR start_time_str$7[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 22150
	cmp	QWORD PTR close_time$1[rsp], 0
	je	SHORT $LN12@mg_get_con
; Line 22151
	mov	rdx, QWORD PTR start_time$2[rsp]
	mov	rcx, QWORD PTR close_time$1[rsp]
	call	difftime
	movsd	QWORD PTR time_diff$4[rsp], xmm0
; Line 22152
	lea	r8, QWORD PTR close_time$1[rsp]
	mov	edx, 63					; 0000003fH
	lea	rcx, QWORD PTR close_time_str$6[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 22155
	jmp	SHORT $LN13@mg_get_con
$LN12@mg_get_con:
; Line 22156
	xor	ecx, ecx
	call	time
	mov	QWORD PTR now$5[rsp], rax
; Line 22157
	mov	rdx, QWORD PTR start_time$2[rsp]
	mov	rcx, QWORD PTR now$5[rsp]
	call	difftime
	movsd	QWORD PTR time_diff$4[rsp], xmm0
; Line 22158
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 64			; 00000040H
	jae	SHORT $LN26@mg_get_con
	jmp	SHORT $LN27@mg_get_con
$LN26@mg_get_con:
	call	__report_rangecheckfailure
$LN27@mg_get_con:
	mov	rax, QWORD PTR $T3[rsp]
	mov	BYTE PTR close_time_str$6[rsp+rax], 0
$LN13@mg_get_con:
; Line 22161
	cmp	QWORD PTR connection_info_length$[rsp], 1
	jbe	SHORT $LN28@mg_get_con
	lea	rax, OFFSET FLAT:$SG169969
	mov	QWORD PTR tv230[rsp], rax
	jmp	SHORT $LN29@mg_get_con
$LN28@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169970
	mov	QWORD PTR tv230[rsp], rax
$LN29@mg_get_con:
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR close_time_str$6[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR start_time_str$7[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+72], rax
	movsd	xmm0, QWORD PTR time_diff$4[rsp]
	movsd	QWORD PTR [rsp+64], xmm0
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv230[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169971
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 22179
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
$LN11@mg_get_con:
; Line 22183
	mov	rax, QWORD PTR ri$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	$LN14@mg_get_con
	cmp	DWORD PTR state$[rsp], 9
	jge	$LN14@mg_get_con
; Line 22184
	mov	rax, QWORD PTR ri$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv259[rsp], rax
	cmp	QWORD PTR connection_info_length$[rsp], 1
	jbe	SHORT $LN30@mg_get_con
	lea	rax, OFFSET FLAT:$SG169973
	mov	QWORD PTR tv251[rsp], rax
	jmp	SHORT $LN31@mg_get_con
$LN30@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169974
	mov	QWORD PTR tv251[rsp], rax
$LN31@mg_get_con:
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR tv259[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv251[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169975
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 22196
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
$LN14@mg_get_con:
; Line 22200
	cmp	DWORD PTR state$[rsp], 3
	jl	$LN15@mg_get_con
; Line 22201
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2368]
	mov	QWORD PTR tv283[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2384]
	mov	QWORD PTR tv285[rsp], rax
	cmp	QWORD PTR connection_info_length$[rsp], 1
	jbe	SHORT $LN32@mg_get_con
	lea	rax, OFFSET FLAT:$SG169977
	mov	QWORD PTR tv275[rsp], rax
	jmp	SHORT $LN33@mg_get_con
$LN32@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169978
	mov	QWORD PTR tv275[rsp], rax
$LN33@mg_get_con:
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+88], rax
	mov	rax, QWORD PTR tv283[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR tv285[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv275[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169979
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 22216
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
$LN15@mg_get_con:
; Line 22220
	cmp	QWORD PTR connection_info_length$[rsp], 1
	jbe	SHORT $LN34@mg_get_con
	lea	rax, OFFSET FLAT:$SG169980
	mov	QWORD PTR tv294[rsp], rax
	jmp	SHORT $LN35@mg_get_con
$LN34@mg_get_con:
	lea	rax, OFFSET FLAT:$SG169981
	mov	QWORD PTR tv294[rsp], rax
$LN35@mg_get_con:
	mov	rax, QWORD PTR state_str$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_connection_info@@9@4QBDB
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv294[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169982
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 22228
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR connection_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR connection_info_length$[rsp], rax
; Line 22231
	cmp	QWORD PTR append_eoobj$[rsp], 0
	je	SHORT $LN16@mg_get_con
; Line 22232
	lea	rdx, OFFSET FLAT:?eoobj@?1??mg_get_connection_info@@9@4QBDB
	mov	rcx, QWORD PTR append_eoobj$[rsp]
	call	strcat
$LN16@mg_get_con:
; Line 22234
	mov	rax, QWORD PTR connection_info_length$[rsp]
	add	rax, 5
	mov	QWORD PTR connection_info_length$[rsp], rax
; Line 22236
	mov	eax, DWORD PTR connection_info_length$[rsp]
$LN1@mg_get_con:
$LN17@mg_get_con:
; Line 22237
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 768				; 00000300H
	pop	rdi
	ret	0
mg_get_connection_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 8
mg_disable_connection_keep_alive PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21981
	mov	QWORD PTR [rsp+8], rcx
; Line 21983
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@mg_disable
; Line 21984
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
$LN2@mg_disable:
; Line 21986
	ret	0
mg_disable_connection_keep_alive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 8
buffer$ = 16
buflen$ = 24
mg_get_context_info PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21782
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 21971
	cmp	QWORD PTR buffer$[rsp], 0
	je	SHORT $LN2@mg_get_con
	cmp	DWORD PTR buflen$[rsp], 0
	jle	SHORT $LN2@mg_get_con
; Line 21972
	mov	rax, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rax], 0
$LN2@mg_get_con:
; Line 21974
	xor	eax, eax
; Line 21976
	ret	0
mg_get_context_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
system_info_length$ = 144
end$ = 152
dwVersion$1 = 160
dwMinorVersion$2 = 164
dwMajorVersion$3 = 168
append_eoobj$ = 176
tv169 = 184
tv174 = 192
tv179 = 200
tv184 = 208
tv189 = 216
tv194 = 224
tv199 = 232
tv204 = 240
tv209 = 248
version$4 = 256
bd$5 = 264
si$6 = 272
block$ = 320
__$ArrayPad$ = 576
buffer$ = 608
buflen$ = 616
mg_get_system_info PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21451
$LN27:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 600				; 00000258H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 21452
	mov	QWORD PTR append_eoobj$[rsp], 0
; Line 21453
	mov	QWORD PTR system_info_length$[rsp], 0
; Line 21461
	cmp	QWORD PTR buffer$[rsp], 0
	je	SHORT $LN4@mg_get_sys
	cmp	DWORD PTR buflen$[rsp], 1
	jge	SHORT $LN2@mg_get_sys
$LN4@mg_get_sys:
; Line 21462
	mov	DWORD PTR buflen$[rsp], 0
; Line 21463
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR end$[rsp], rax
; Line 21464
	jmp	SHORT $LN3@mg_get_sys
$LN2@mg_get_sys:
; Line 21465
	mov	rax, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rax], 0
; Line 21466
	movsxd	rax, DWORD PTR buflen$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR end$[rsp], rax
$LN3@mg_get_sys:
; Line 21468
	cmp	DWORD PTR buflen$[rsp], 5
	jle	SHORT $LN5@mg_get_sys
; Line 21470
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR append_eoobj$[rsp], rax
; Line 21471
	cmp	QWORD PTR end$[rsp], 0
	je	SHORT $LN6@mg_get_sys
; Line 21472
	mov	rax, QWORD PTR end$[rsp]
	sub	rax, 5
	mov	QWORD PTR end$[rsp], rax
$LN6@mg_get_sys:
$LN5@mg_get_sys:
; Line 21476
	lea	r8, OFFSET FLAT:$SG169879
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21480
	call	mg_version
	mov	QWORD PTR version$4[rsp], rax
; Line 21481
	mov	rax, QWORD PTR version$4[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169880
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21488
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21494
	mov	DWORD PTR dwVersion$1[rsp], 0
; Line 21495
	mov	DWORD PTR dwMajorVersion$3[rsp], 0
; Line 21496
	mov	DWORD PTR dwMinorVersion$2[rsp], 0
; Line 21499
	lea	rcx, QWORD PTR si$6[rsp]
	call	QWORD PTR __imp_GetSystemInfo
; Line 21506
	call	QWORD PTR __imp_GetVersion
	mov	DWORD PTR dwVersion$1[rsp], eax
; Line 21511
	mov	eax, DWORD PTR dwVersion$1[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	and	rax, 255				; 000000ffH
	movzx	eax, al
	mov	DWORD PTR dwMajorVersion$3[rsp], eax
; Line 21512
	mov	eax, DWORD PTR dwVersion$1[rsp]
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	shr	rax, 8
	and	rax, 255				; 000000ffH
	movzx	eax, al
	mov	DWORD PTR dwMinorVersion$2[rsp], eax
; Line 21514
	mov	eax, DWORD PTR dwMinorVersion$2[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR dwMajorVersion$3[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169881
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21522
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21524
	movzx	eax, WORD PTR si$6[rsp]
	mov	ecx, DWORD PTR si$6[rsp+24]
	mov	DWORD PTR [rsp+64], ecx
	mov	ecx, DWORD PTR si$6[rsp+32]
	mov	DWORD PTR [rsp+56], ecx
	mov	DWORD PTR [rsp+48], eax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169882
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21533
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21565
	mov	ecx, 256				; 00000100H
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN9@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169883
	mov	QWORD PTR tv169[rsp], rax
	jmp	SHORT $LN10@mg_get_sys
$LN9@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169884
	mov	QWORD PTR tv169[rsp], rax
$LN10@mg_get_sys:
	mov	ecx, 128				; 00000080H
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN11@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169885
	mov	QWORD PTR tv174[rsp], rax
	jmp	SHORT $LN12@mg_get_sys
$LN11@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169886
	mov	QWORD PTR tv174[rsp], rax
$LN12@mg_get_sys:
	mov	ecx, 64					; 00000040H
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN13@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169887
	mov	QWORD PTR tv179[rsp], rax
	jmp	SHORT $LN14@mg_get_sys
$LN13@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169888
	mov	QWORD PTR tv179[rsp], rax
$LN14@mg_get_sys:
	mov	ecx, 32					; 00000020H
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN15@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169889
	mov	QWORD PTR tv184[rsp], rax
	jmp	SHORT $LN16@mg_get_sys
$LN15@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169890
	mov	QWORD PTR tv184[rsp], rax
$LN16@mg_get_sys:
	mov	ecx, 16
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN17@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169891
	mov	QWORD PTR tv189[rsp], rax
	jmp	SHORT $LN18@mg_get_sys
$LN17@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169892
	mov	QWORD PTR tv189[rsp], rax
$LN18@mg_get_sys:
	mov	ecx, 8
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN19@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169893
	mov	QWORD PTR tv194[rsp], rax
	jmp	SHORT $LN20@mg_get_sys
$LN19@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169894
	mov	QWORD PTR tv194[rsp], rax
$LN20@mg_get_sys:
	mov	ecx, 4
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN21@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169895
	mov	QWORD PTR tv199[rsp], rax
	jmp	SHORT $LN22@mg_get_sys
$LN21@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169896
	mov	QWORD PTR tv199[rsp], rax
$LN22@mg_get_sys:
	mov	ecx, 2
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN23@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169897
	mov	QWORD PTR tv204[rsp], rax
	jmp	SHORT $LN24@mg_get_sys
$LN23@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169898
	mov	QWORD PTR tv204[rsp], rax
$LN24@mg_get_sys:
	mov	ecx, 1
	call	mg_check_feature
	test	eax, eax
	je	SHORT $LN25@mg_get_sys
	lea	rax, OFFSET FLAT:$SG169899
	mov	QWORD PTR tv209[rsp], rax
	jmp	SHORT $LN26@mg_get_sys
$LN25@mg_get_sys:
	lea	rax, OFFSET FLAT:$SG169900
	mov	QWORD PTR tv209[rsp], rax
$LN26@mg_get_sys:
	mov	ecx, -1					; ffffffffH
	call	mg_check_feature
	mov	rcx, QWORD PTR tv169[rsp]
	mov	QWORD PTR [rsp+128], rcx
	mov	rcx, QWORD PTR tv174[rsp]
	mov	QWORD PTR [rsp+120], rcx
	mov	rcx, QWORD PTR tv179[rsp]
	mov	QWORD PTR [rsp+112], rcx
	mov	rcx, QWORD PTR tv184[rsp]
	mov	QWORD PTR [rsp+104], rcx
	mov	rcx, QWORD PTR tv189[rsp]
	mov	QWORD PTR [rsp+96], rcx
	mov	rcx, QWORD PTR tv194[rsp]
	mov	QWORD PTR [rsp+88], rcx
	mov	rcx, QWORD PTR tv199[rsp]
	mov	QWORD PTR [rsp+80], rcx
	mov	rcx, QWORD PTR tv204[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR tv209[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], eax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169901
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21584
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21625
	lea	rax, OFFSET FLAT:$SG169902
	mov	QWORD PTR bd$5[rsp], rax
; Line 21633
	mov	rax, QWORD PTR bd$5[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169903
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21636
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21643
	mov	DWORD PTR [rsp+56], 193431937		; 0b878981H
	mov	DWORD PTR [rsp+48], 1934		; 0000078eH
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169904
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21651
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21745
	mov	DWORD PTR [rsp+136], 8
	mov	DWORD PTR [rsp+128], 8
	mov	DWORD PTR [rsp+120], 8
	mov	DWORD PTR [rsp+112], 2
	mov	DWORD PTR [rsp+104], 1
	mov	DWORD PTR [rsp+96], 8
	mov	DWORD PTR [rsp+88], 8
	mov	DWORD PTR [rsp+80], 4
	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 4
	mov	DWORD PTR [rsp+56], 4
	mov	DWORD PTR [rsp+48], 2
	lea	rax, OFFSET FLAT:?eol@?1??mg_get_system_info@@9@4QBDB
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169905
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR block$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 21765
	lea	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR end$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?mg_str_append@@YA_KPEAPEADPEADPEBD@Z	; mg_str_append
	mov	rcx, QWORD PTR system_info_length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21769
	cmp	QWORD PTR append_eoobj$[rsp], 0
	je	SHORT $LN7@mg_get_sys
; Line 21770
	lea	rdx, OFFSET FLAT:?eoobj@?1??mg_get_system_info@@9@4QBDB
	mov	rcx, QWORD PTR append_eoobj$[rsp]
	call	strcat
$LN7@mg_get_sys:
; Line 21772
	mov	rax, QWORD PTR system_info_length$[rsp]
	add	rax, 5
	mov	QWORD PTR system_info_length$[rsp], rax
; Line 21774
	mov	eax, DWORD PTR system_info_length$[rsp]
; Line 21775
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 600				; 00000258H
	ret	0
mg_get_system_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
feature$ = 8
mg_check_feature PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21369
	mov	DWORD PTR [rsp+8], ecx
; Line 21426
	mov	eax, DWORD PTR feature$[rsp]
	and	eax, 1610612887				; 60000097H
; Line 21427
	ret	0
mg_check_feature ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
has_date$ = 36
has_connection$ = 40
curtime$1 = 48
date$2 = 64
__$ArrayPad$ = 128
conn$ = 160
mg_response_header_send PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\response.inl
; Line 271
$LN15:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 274
	mov	DWORD PTR has_date$[rsp], 0
; Line 275
	mov	DWORD PTR has_connection$[rsp], 0
; Line 278
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN5@mg_respons
; Line 280
	mov	eax, -1
	jmp	$LN1@mg_respons
$LN5@mg_respons:
; Line 283
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN7@mg_respons
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN6@mg_respons
$LN7@mg_respons:
; Line 285
	mov	eax, -2
	jmp	$LN1@mg_respons
$LN6@mg_respons:
; Line 287
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+8], 1
	je	SHORT $LN8@mg_respons
; Line 289
	mov	eax, -3
	jmp	$LN1@mg_respons
$LN8@mg_respons:
; Line 293
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+8], 2
; Line 304
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_http1_response_status_line@@YAHPEAUmg_connection@@@Z ; send_http1_response_status_line
	test	eax, eax
	jne	SHORT $LN9@mg_respons
; Line 305
	mov	eax, -4
	jmp	$LN1@mg_respons
$LN9@mg_respons:
; Line 307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_respons
$LN2@mg_respons:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@mg_respons:
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+1240]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@mg_respons
; Line 308
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rdx+rax+1256]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+rcx+1248]
	lea	rdx, OFFSET FLAT:$SG162235
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
; Line 314
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+1248]
	lea	rcx, OFFSET FLAT:$SG162237
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN10@mg_respons
; Line 315
	mov	DWORD PTR has_date$[rsp], 1
$LN10@mg_respons:
; Line 317
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+1248]
	lea	rcx, OFFSET FLAT:$SG162239
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN11@mg_respons
; Line 319
	mov	DWORD PTR has_connection$[rsp], 1
$LN11@mg_respons:
; Line 321
	jmp	$LN2@mg_respons
$LN3@mg_respons:
; Line 323
	cmp	DWORD PTR has_date$[rsp], 0
	jne	SHORT $LN12@mg_respons
; Line 324
	xor	ecx, ecx
	call	time
	mov	QWORD PTR curtime$1[rsp], rax
; Line 326
	lea	r8, QWORD PTR curtime$1[rsp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR date$2[rsp]
	call	?gmt_time_string@@YAXPEAD_KPEA_J@Z	; gmt_time_string
; Line 327
	lea	r8, QWORD PTR date$2[rsp]
	lea	rdx, OFFSET FLAT:$SG162241
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN12@mg_respons:
; Line 329
	cmp	DWORD PTR has_connection$[rsp], 0
	jne	SHORT $LN13@mg_respons
; Line 330
	mov	rcx, QWORD PTR conn$[rsp]
	call	?suggest_connection_header@@YAPEBDPEBUmg_connection@@@Z ; suggest_connection_header
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG162243
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_printf
$LN13@mg_respons:
; Line 334
	mov	r8d, 2
	lea	rdx, OFFSET FLAT:$SG162244
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
; Line 335
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+8], 3
; Line 338
	xor	eax, eax
$LN1@mg_respons:
; Line 339
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	ret	0
mg_response_header_send ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
ret$ = 36
num_hdr$ = 40
lret$1 = 44
workbuffer$ = 48
parse$ = 56
add_hdr$ = 64
__$ArrayPad$ = 1088
conn$ = 1120
http1_headers$ = 1128
mg_response_header_add_lines PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\response.inl
; Line 221
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1112				; 00000458H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 228
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR http1_headers$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	mov	QWORD PTR workbuffer$[rsp], rax
; Line 229
	cmp	QWORD PTR workbuffer$[rsp], 0
	jne	SHORT $LN5@mg_respons
; Line 231
	mov	eax, -5
	jmp	$LN1@mg_respons
$LN5@mg_respons:
; Line 235
	mov	rax, QWORD PTR workbuffer$[rsp]
	mov	QWORD PTR parse$[rsp], rax
; Line 236
	lea	rdx, QWORD PTR add_hdr$[rsp]
	lea	rcx, QWORD PTR parse$[rsp]
	call	?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z ; parse_http_headers
	mov	DWORD PTR num_hdr$[rsp], eax
; Line 237
	mov	eax, DWORD PTR num_hdr$[rsp]
	mov	DWORD PTR ret$[rsp], eax
; Line 239
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_respons
$LN2@mg_respons:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@mg_respons:
	mov	eax, DWORD PTR num_hdr$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@mg_respons
; Line 240
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	r9d, -1
	mov	r8, QWORD PTR add_hdr$[rsp+rax+8]
	mov	rdx, QWORD PTR add_hdr$[rsp+rcx]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
	mov	DWORD PTR lret$1[rsp], eax
; Line 242
	cmp	DWORD PTR ret$[rsp], 0
	jle	SHORT $LN6@mg_respons
	cmp	DWORD PTR lret$1[rsp], 0
	jge	SHORT $LN6@mg_respons
; Line 244
	mov	eax, DWORD PTR lret$1[rsp]
	mov	DWORD PTR ret$[rsp], eax
$LN6@mg_respons:
; Line 246
	jmp	SHORT $LN2@mg_respons
$LN3@mg_respons:
; Line 249
	mov	rcx, QWORD PTR workbuffer$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 250
	mov	eax, DWORD PTR ret$[rsp]
$LN1@mg_respons:
; Line 251
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	ret	0
mg_response_header_add_lines ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hidx$ = 32
hbuf$1 = 40
conn$ = 64
header$ = 72
value$ = 80
value_len$ = 88
mg_response_header_add PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\response.inl
; Line 134
$LN14:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 139
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@mg_respons
	cmp	QWORD PTR header$[rsp], 0
	je	SHORT $LN3@mg_respons
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN2@mg_respons
$LN3@mg_respons:
; Line 141
	mov	eax, -1
	jmp	$LN1@mg_respons
$LN2@mg_respons:
; Line 144
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN5@mg_respons
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN4@mg_respons
$LN5@mg_respons:
; Line 146
	mov	eax, -2
	jmp	$LN1@mg_respons
$LN4@mg_respons:
; Line 148
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+8], 1
	je	SHORT $LN6@mg_respons
; Line 150
	mov	eax, -3
	jmp	$LN1@mg_respons
$LN6@mg_respons:
; Line 154
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+1240]
	mov	DWORD PTR hidx$[rsp], eax
; Line 155
	cmp	DWORD PTR hidx$[rsp], 64		; 00000040H
	jl	SHORT $LN7@mg_respons
; Line 157
	mov	eax, -4
	jmp	$LN1@mg_respons
$LN7@mg_respons:
; Line 161
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR header$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	movsxd	rcx, DWORD PTR hidx$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rdx+rcx+1248], rax
; Line 163
	cmp	DWORD PTR value_len$[rsp], 0
	jl	SHORT $LN8@mg_respons
; Line 164
	mov	eax, DWORD PTR value_len$[rsp]
	inc	eax
	mov	eax, eax
	mov	ecx, eax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR hbuf$1[rsp], rax
; Line 166
	cmp	QWORD PTR hbuf$1[rsp], 0
	je	SHORT $LN10@mg_respons
; Line 167
	mov	eax, DWORD PTR value_len$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR hbuf$1[rsp]
	call	memcpy
; Line 168
	movsxd	rax, DWORD PTR value_len$[rsp]
	mov	rcx, QWORD PTR hbuf$1[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN10@mg_respons:
; Line 170
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR hbuf$1[rsp]
	mov	QWORD PTR [rcx+rax+1256], rdx
; Line 171
	jmp	SHORT $LN9@mg_respons
$LN8@mg_respons:
; Line 172
	mov	rax, QWORD PTR conn$[rsp]
	mov	rdx, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR value$[rsp]
	call	?mg_strdup_ctx@@YAPEADPEBDPEAUmg_context@@@Z ; mg_strdup_ctx
	movsxd	rcx, DWORD PTR hidx$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rdx+rcx+1256], rax
$LN9@mg_respons:
; Line 177
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rcx+rax+1248], 0
	je	SHORT $LN12@mg_respons
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rcx+rax+1256], 0
	jne	SHORT $LN11@mg_respons
$LN12@mg_respons:
; Line 179
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+1248]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 180
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+rax+1248], 0
; Line 181
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+1256]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 182
	movsxd	rax, DWORD PTR hidx$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+rax+1256], 0
; Line 183
	mov	eax, -5
	jmp	SHORT $LN1@mg_respons
$LN11@mg_respons:
; Line 187
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+1240]
	inc	eax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+1240], eax
; Line 198
	xor	eax, eax
$LN1@mg_respons:
; Line 199
	add	rsp, 56					; 00000038H
	ret	0
mg_response_header_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 32
conn$ = 64
status$ = 72
mg_response_header_start PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\response.inl
; Line 81
$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 82
	mov	DWORD PTR ret$[rsp], 0
; Line 83
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@mg_respons
	cmp	DWORD PTR status$[rsp], 100		; 00000064H
	jl	SHORT $LN3@mg_respons
	cmp	DWORD PTR status$[rsp], 999		; 000003e7H
	jle	SHORT $LN2@mg_respons
$LN3@mg_respons:
; Line 85
	mov	eax, -1
	jmp	SHORT $LN1@mg_respons
$LN2@mg_respons:
; Line 88
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN5@mg_respons
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 1
	jne	SHORT $LN4@mg_respons
$LN5@mg_respons:
; Line 90
	mov	eax, -2
	jmp	SHORT $LN1@mg_respons
$LN4@mg_respons:
; Line 92
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN6@mg_respons
; Line 94
	mov	eax, -3
	jmp	SHORT $LN1@mg_respons
$LN6@mg_respons:
; Line 96
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR status$[rsp]
	mov	DWORD PTR [rax+2448], ecx
; Line 97
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 102
	mov	rcx, QWORD PTR conn$[rsp]
	call	?free_buffered_response_header_list@@YAXPEAUmg_connection@@@Z ; free_buffered_response_header_list
; Line 110
	mov	eax, DWORD PTR ret$[rsp]
$LN1@mg_respons:
; Line 111
	add	rsp, 56					; 00000038H
	ret	0
mg_response_header_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv140 = 48
ret$ = 52
new_timeout$ = 56
err$ = 64
save_timeout$ = 72
txt$ = 80
__$ArrayPad$ = 112
conn$ = 144
ebuf$ = 152
ebuf_len$ = 160
timeout$ = 168
mg_get_response PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18765
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 18771
	cmp	QWORD PTR ebuf_len$[rsp], 0
	jbe	SHORT $LN2@mg_get_res
; Line 18772
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ebuf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN2@mg_get_res:
; Line 18775
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN3@mg_get_res
; Line 18776
	lea	rax, OFFSET FLAT:$SG169045
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169046
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18782
	mov	eax, -1
	jmp	$LN1@mg_get_res
$LN3@mg_get_res:
; Line 18786
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2444], 0
; Line 18789
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rax, QWORD PTR [rax+rcx+8]
	mov	QWORD PTR save_timeout$[rsp], rax
; Line 18791
	cmp	DWORD PTR timeout$[rsp], 0
	jl	SHORT $LN4@mg_get_res
; Line 18792
	mov	eax, DWORD PTR timeout$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG169049
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	lea	r8, QWORD PTR txt$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18793
	lea	rax, QWORD PTR txt$[rsp]
	mov	QWORD PTR new_timeout$[rsp], rax
; Line 18794
	jmp	SHORT $LN5@mg_get_res
$LN4@mg_get_res:
; Line 18795
	mov	QWORD PTR new_timeout$[rsp], 0
$LN5@mg_get_res:
; Line 18798
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR new_timeout$[rsp]
	mov	QWORD PTR [rax+rcx+8], rdx
; Line 18799
	lea	r9, QWORD PTR err$[rsp]
	mov	r8, QWORD PTR ebuf_len$[rsp]
	mov	rdx, QWORD PTR ebuf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ; get_response
	mov	DWORD PTR ret$[rsp], eax
; Line 18800
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR save_timeout$[rsp]
	mov	QWORD PTR [rax+rcx+8], rdx
; Line 18803
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+32], rcx
; Line 18804
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+40], rcx
; Line 18808
	cmp	DWORD PTR ret$[rsp], 0
	jne	SHORT $LN7@mg_get_res
	mov	DWORD PTR tv140[rsp], -1
	jmp	SHORT $LN8@mg_get_res
$LN7@mg_get_res:
	mov	DWORD PTR tv140[rsp], 1
$LN8@mg_get_res:
	mov	eax, DWORD PTR tv140[rsp]
$LN1@mg_get_res:
; Line 18809
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
mg_get_response ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
client_options$ = 96
error_buffer$ = 104
error_buffer_size$ = 112
path$ = 120
origin$ = 128
extensions$ = 136
data_func$ = 144
close_func$ = 152
user_data$ = 160
mg_connect_websocket_client_secure_extensions PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19249
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 19250
	cmp	QWORD PTR client_options$[rsp], 0
	jne	SHORT $LN2@mg_connect
; Line 19251
	xor	eax, eax
	jmp	SHORT $LN1@mg_connect
$LN2@mg_connect:
; Line 19253
	mov	rax, QWORD PTR user_data$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR close_func$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR data_func$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR extensions$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR origin$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR client_options$[rsp]
	call	?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z ; mg_connect_websocket_client_impl
$LN1@mg_connect:
; Line 19263
	add	rsp, 88					; 00000058H
	ret	0
mg_connect_websocket_client_secure_extensions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
client_options$ = 96
error_buffer$ = 104
error_buffer_size$ = 112
path$ = 120
origin$ = 128
data_func$ = 136
close_func$ = 144
user_data$ = 152
mg_connect_websocket_client_secure PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19190
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 19191
	cmp	QWORD PTR client_options$[rsp], 0
	jne	SHORT $LN2@mg_connect
; Line 19192
	xor	eax, eax
	jmp	SHORT $LN1@mg_connect
$LN2@mg_connect:
; Line 19194
	mov	rax, QWORD PTR user_data$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR close_func$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR data_func$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR origin$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR client_options$[rsp]
	call	?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z ; mg_connect_websocket_client_impl
$LN1@mg_connect:
; Line 19204
	add	rsp, 88					; 00000058H
	ret	0
mg_connect_websocket_client_secure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
error$ = 32
init$ = 56
client_options$ = 96
error_buffer$ = 104
error_buffer_size$ = 112
mg_connect_client_secure PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18179
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 18183
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR init$[rsp]
	call	memset
; Line 18184
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR error$[rsp]
	call	memset
; Line 18185
	mov	rax, QWORD PTR error_buffer_size$[rsp]
	mov	QWORD PTR error$[rsp+16], rax
; Line 18186
	mov	rax, QWORD PTR error_buffer$[rsp]
	mov	QWORD PTR error$[rsp+8], rax
; Line 18187
	lea	r9, QWORD PTR error$[rsp]
	lea	r8, QWORD PTR init$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR client_options$[rsp]
	call	?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z ; mg_connect_client_impl
; Line 18188
	add	rsp, 88					; 00000058H
	ret	0
mg_connect_client_secure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
error$ = 32
init$ = 56
opts$ = 80
host$ = 144
port$ = 152
use_ssl$ = 160
error_buffer$ = 168
error_buffer_size$ = 176
mg_connect_client PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18197
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 18202
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR init$[rsp]
	call	memset
; Line 18204
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR error$[rsp]
	call	memset
; Line 18205
	mov	rax, QWORD PTR error_buffer_size$[rsp]
	mov	QWORD PTR error$[rsp+16], rax
; Line 18206
	mov	rax, QWORD PTR error_buffer$[rsp]
	mov	QWORD PTR error$[rsp+8], rax
; Line 18208
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR opts$[rsp]
	call	memset
; Line 18209
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR opts$[rsp], rax
; Line 18210
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR opts$[rsp+8], eax
; Line 18211
	cmp	DWORD PTR use_ssl$[rsp], 0
	je	SHORT $LN2@mg_connect
; Line 18212
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR opts$[rsp+32], rax
$LN2@mg_connect:
; Line 18215
	lea	r9, QWORD PTR error$[rsp]
	lea	r8, QWORD PTR init$[rsp]
	mov	edx, DWORD PTR use_ssl$[rsp]
	lea	rcx, QWORD PTR opts$[rsp]
	call	?mg_connect_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAUmg_init_data@@PEAUmg_error_data@@@Z ; mg_connect_client_impl
; Line 18216
	add	rsp, 136				; 00000088H
	ret	0
mg_connect_client ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
client_options$ = 80
host$ = 144
port$ = 152
use_ssl$ = 160
error_buffer$ = 168
error_buffer_size$ = 176
path$ = 184
origin$ = 192
extensions$ = 200
data_func$ = 208
close_func$ = 216
user_data$ = 224
mg_connect_websocket_client_extensions PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19219
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 19221
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR client_options$[rsp]
	call	memset
; Line 19222
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR client_options$[rsp], rax
; Line 19223
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR client_options$[rsp+8], eax
; Line 19225
	mov	rax, QWORD PTR user_data$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR close_func$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR data_func$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR extensions$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR origin$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	mov	edx, DWORD PTR use_ssl$[rsp]
	lea	rcx, QWORD PTR client_options$[rsp]
	call	?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z ; mg_connect_websocket_client_impl
; Line 19235
	add	rsp, 136				; 00000088H
	ret	0
mg_connect_websocket_client_extensions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
client_options$ = 80
host$ = 144
port$ = 152
use_ssl$ = 160
error_buffer$ = 168
error_buffer_size$ = 176
path$ = 184
origin$ = 192
data_func$ = 200
close_func$ = 208
user_data$ = 216
mg_connect_websocket_client PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 19161
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 19163
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR client_options$[rsp]
	call	memset
; Line 19164
	mov	rax, QWORD PTR host$[rsp]
	mov	QWORD PTR client_options$[rsp], rax
; Line 19165
	mov	eax, DWORD PTR port$[rsp]
	mov	DWORD PTR client_options$[rsp+8], eax
; Line 19167
	mov	rax, QWORD PTR user_data$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR close_func$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR data_func$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR origin$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR error_buffer_size$[rsp]
	mov	r8, QWORD PTR error_buffer$[rsp]
	mov	edx, DWORD PTR use_ssl$[rsp]
	lea	rcx, QWORD PTR client_options$[rsp]
	call	?mg_connect_websocket_client_impl@@YAPEAUmg_connection@@PEBUmg_client_options@@HPEAD_KPEBD33P6AHPEAU1@H12PEAX@ZP6AXPEBU1@5@Z5@Z ; mg_connect_websocket_client_impl
; Line 19177
	add	rsp, 136				; 00000088H
	ret	0
mg_connect_websocket_client ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
diff$ = 32
tv69 = 36
tv71 = 40
tv67 = 48
s1$ = 80
s2$ = 88
len$ = 96
mg_strncasecmp PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3020
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3021
	mov	DWORD PTR diff$[rsp], 0
; Line 3023
	cmp	QWORD PTR len$[rsp], 0
	jbe	$LN5@mg_strncas
$LN4@mg_strncas:
; Line 3025
	mov	rax, QWORD PTR s1$[rsp]
	mov	QWORD PTR tv67[rsp], rax
	mov	rax, QWORD PTR s1$[rsp]
	inc	rax
	mov	QWORD PTR s1$[rsp], rax
	mov	rax, QWORD PTR s2$[rsp]
	mov	QWORD PTR tv71[rsp], rax
	mov	rax, QWORD PTR s2$[rsp]
	inc	rax
	mov	QWORD PTR s2$[rsp], rax
	mov	rcx, QWORD PTR tv71[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	mov	DWORD PTR tv69[rsp], eax
	mov	rcx, QWORD PTR tv67[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	mov	ecx, DWORD PTR tv69[rsp]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 3026
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN6@mg_strncas
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR s1$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN6@mg_strncas
	mov	rax, QWORD PTR len$[rsp]
	dec	rax
	mov	QWORD PTR len$[rsp], rax
	cmp	QWORD PTR len$[rsp], 0
	ja	$LN4@mg_strncas
$LN6@mg_strncas:
$LN5@mg_strncas:
; Line 3029
	mov	eax, DWORD PTR diff$[rsp]
; Line 3030
	add	rsp, 72					; 00000048H
	ret	0
mg_strncasecmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
diff$ = 32
tv68 = 36
tv70 = 40
tv66 = 48
s1$ = 80
s2$ = 88
mg_strcasecmp PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3035
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN4@mg_strcase:
; Line 3039
	mov	rax, QWORD PTR s1$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR s1$[rsp]
	inc	rax
	mov	QWORD PTR s1$[rsp], rax
	mov	rax, QWORD PTR s2$[rsp]
	mov	QWORD PTR tv70[rsp], rax
	mov	rax, QWORD PTR s2$[rsp]
	inc	rax
	mov	QWORD PTR s2$[rsp], rax
	mov	rcx, QWORD PTR tv70[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	mov	DWORD PTR tv68[rsp], eax
	mov	rcx, QWORD PTR tv66[rsp]
	call	?lowercase@@YAHPEBD@Z			; lowercase
	mov	ecx, DWORD PTR tv68[rsp]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 3040
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN5@mg_strcase
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR s1$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN4@mg_strcase
$LN5@mg_strcase:
; Line 3042
	mov	eax, DWORD PTR diff$[rsp]
; Line 3043
	add	rsp, 72					; 00000048H
	ret	0
mg_strcasecmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ap$ = 48
conn$ = 80
fmt$ = 88
mg_cry	PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3502
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 3504
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 3505
	mov	rax, QWORD PTR ap$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG161778
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_impl@@YAXPEBUmg_connection@@PEBDI1PEAD@Z ; mg_cry_internal_impl
; Line 3506
	mov	QWORD PTR ap$[rsp], 0
; Line 3507
	add	rsp, 72					; 00000048H
	ret	0
mg_cry	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
j$2 = 56
ret$ = 64
pat_len$ = 72
elmsize$3 = 80
pat$ = 112
str$ = 120
mcx$ = 128
mg_match PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\match.inl
; Line 195
$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 196
	mov	rcx, QWORD PTR pat$[rsp]
	call	strlen
	mov	QWORD PTR pat_len$[rsp], rax
; Line 197
	mov	r9, QWORD PTR mcx$[rsp]
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, QWORD PTR pat_len$[rsp]
	mov	rcx, QWORD PTR pat$[rsp]
	call	?mg_match_alternatives@@YA_JPEBD_K0PEAUmg_match_context@@@Z ; mg_match_alternatives
	mov	QWORD PTR ret$[rsp], rax
; Line 198
	cmp	QWORD PTR mcx$[rsp], 0
	je	$LN7@mg_match
; Line 199
	cmp	QWORD PTR ret$[rsp], 0
	jge	SHORT $LN8@mg_match
; Line 201
	mov	rcx, QWORD PTR mcx$[rsp]
	call	?match_context_reset@@YAXPEAUmg_match_context@@@Z ; match_context_reset
; Line 202
	jmp	$LN9@mg_match
$LN8@mg_match:
; Line 208
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR mcx$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR mcx$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+16]
	sub	rax, rcx
	mov	QWORD PTR elmsize$3[rsp], rax
; Line 212
	mov	rax, QWORD PTR mcx$[rsp]
	add	rax, 16
	mov	QWORD PTR [rsp+32], 0
	lea	r9, OFFSET FLAT:?match_compare@@YAHPEBX0PEAX@Z ; match_compare
	mov	r8, QWORD PTR elmsize$3[rsp]
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	rdx, QWORD PTR [rcx+8]
	mov	rcx, rax
	call	?mg_sort@@YAXPEAX_K1P6AHPEBX20@Z0@Z	; mg_sort
; Line 215
	mov	QWORD PTR i$1[rsp], 1
$LN2@mg_match:
; Line 216
	mov	rax, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR i$1[rsp], rax
	jae	$LN3@mg_match
; Line 218
	mov	rax, QWORD PTR i$1[rsp]
	dec	rax
	imul	rax, rax, 16
	mov	rcx, QWORD PTR i$1[rsp]
	dec	rcx
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [rdx+rax+16]
	mov	rdx, QWORD PTR mcx$[rsp]
	add	rax, QWORD PTR [rdx+rcx+24]
	imul	rcx, QWORD PTR i$1[rsp], 16
	mov	rdx, QWORD PTR mcx$[rsp]
	cmp	rax, QWORD PTR [rdx+rcx+16]
	jne	$LN10@mg_match
; Line 220
	imul	rax, QWORD PTR i$1[rsp], 16
	mov	rcx, QWORD PTR i$1[rsp]
	dec	rcx
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR mcx$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx+24]
	mov	rdx, QWORD PTR mcx$[rsp]
	add	rcx, QWORD PTR [rdx+rax+24]
	mov	rax, rcx
	mov	rcx, QWORD PTR i$1[rsp]
	dec	rcx
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR mcx$[rsp]
	mov	QWORD PTR [rdx+rcx+24], rax
; Line 223
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR j$2[rsp], rax
	jmp	SHORT $LN6@mg_match
$LN4@mg_match:
	mov	rax, QWORD PTR j$2[rsp]
	inc	rax
	mov	QWORD PTR j$2[rsp], rax
$LN6@mg_match:
	mov	rax, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR j$2[rsp], rax
	jae	SHORT $LN5@mg_match
; Line 224
	imul	rax, QWORD PTR j$2[rsp], 16
	mov	rcx, QWORD PTR j$2[rsp]
	dec	rcx
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR mcx$[rsp]
	mov	r8, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [r8+rax+24]
	mov	QWORD PTR [rdx+rcx+24], rax
; Line 225
	imul	rax, QWORD PTR j$2[rsp], 16
	mov	rcx, QWORD PTR j$2[rsp]
	dec	rcx
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR mcx$[rsp]
	mov	r8, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [r8+rax+16]
	mov	QWORD PTR [rdx+rcx+16], rax
; Line 226
	jmp	SHORT $LN4@mg_match
$LN5@mg_match:
; Line 229
	mov	rax, QWORD PTR mcx$[rsp]
	mov	rax, QWORD PTR [rax+8]
	dec	rax
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 230
	mov	rax, QWORD PTR mcx$[rsp]
	imul	rax, QWORD PTR [rax+8], 16
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	QWORD PTR [rcx+rax+16], 0
; Line 231
	mov	rax, QWORD PTR mcx$[rsp]
	imul	rax, QWORD PTR [rax+8], 16
	mov	rcx, QWORD PTR mcx$[rsp]
	mov	QWORD PTR [rcx+rax+24], 0
; Line 233
	jmp	SHORT $LN11@mg_match
$LN10@mg_match:
; Line 234
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN11@mg_match:
; Line 236
	jmp	$LN2@mg_match
$LN3@mg_match:
$LN9@mg_match:
$LN7@mg_match:
; Line 239
	mov	rax, QWORD PTR ret$[rsp]
; Line 240
	add	rsp, 104				; 00000068H
	ret	0
mg_match ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ap$ = 32
p$ = 40
tv74 = 48
ctx$ = 64
hash$ = 160
__$ArrayPad$ = 176
buf$ = 208
mg_md5	PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8349
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8355
	lea	rcx, QWORD PTR ctx$[rsp]
	call	md5_init
; Line 8357
	lea	rax, QWORD PTR buf$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
$LN2@mg_md5:
; Line 8358
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@mg_md5
	mov	rax, QWORD PTR ap$[rsp]
	add	rax, 8
	mov	QWORD PTR ap$[rsp], rax
	mov	rax, QWORD PTR ap$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN6@mg_md5
$LN5@mg_md5:
	mov	rax, QWORD PTR ap$[rsp]
	add	rax, 8
	mov	QWORD PTR ap$[rsp], rax
	mov	rax, QWORD PTR ap$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv74[rsp], rax
$LN6@mg_md5:
	mov	rax, QWORD PTR tv74[rsp]
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN3@mg_md5
; Line 8359
	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	r8, rax
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR ctx$[rsp]
	call	md5_append
; Line 8360
	jmp	SHORT $LN2@mg_md5
$LN3@mg_md5:
; Line 8361
	mov	QWORD PTR ap$[rsp], 0
; Line 8363
	lea	rdx, QWORD PTR hash$[rsp]
	lea	rcx, QWORD PTR ctx$[rsp]
	call	md5_finish
; Line 8364
	mov	r8d, 16
	lea	rdx, QWORD PTR hash$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?bin2str@@YAXPEADPEBE_K@Z		; bin2str
; Line 8365
	mov	rax, QWORD PTR buf$[rsp]
; Line 8366
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
mg_md5	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
b$ = 33
d$ = 34
a$ = 35
dst_len_used$ = 40
i$ = 48
dst_len_limit$ = 56
tv80 = 64
tv93 = 68
tv138 = 72
src$ = 96
src_len$ = 104
dst$ = 112
dst_len$ = 120
mg_base64_decode PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7334
$LN25:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 7337
	mov	QWORD PTR dst_len_limit$[rsp], -1
; Line 7338
	mov	QWORD PTR dst_len_used$[rsp], 0
; Line 7340
	cmp	QWORD PTR dst_len$[rsp], 0
	je	SHORT $LN5@mg_base64_
; Line 7341
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dst_len_limit$[rsp], rax
; Line 7342
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	QWORD PTR [rax], 0
$LN5@mg_base64_:
; Line 7345
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_base64_
$LN2@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 4
	mov	QWORD PTR i$[rsp], rax
$LN4@mg_base64_:
	mov	rax, QWORD PTR src_len$[rsp]
	cmp	QWORD PTR i$[rsp], rax
	jae	$LN3@mg_base64_
; Line 7347
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, BYTE PTR [rax]
	call	?b64reverse@@YAED@Z			; b64reverse
	mov	BYTE PTR a$[rsp], al
; Line 7348
	movzx	eax, BYTE PTR a$[rsp]
	cmp	eax, 254				; 000000feH
	jl	SHORT $LN6@mg_base64_
; Line 7349
	mov	eax, DWORD PTR i$[rsp]
	jmp	$LN1@mg_base64_
$LN6@mg_base64_:
; Line 7352
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	cmp	rax, QWORD PTR src_len$[rsp]
	jb	SHORT $LN19@mg_base64_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN20@mg_base64_
$LN19@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax+1]
	mov	DWORD PTR tv80[rsp], eax
$LN20@mg_base64_:
	movzx	ecx, BYTE PTR tv80[rsp]
	call	?b64reverse@@YAED@Z			; b64reverse
	mov	BYTE PTR b$[rsp], al
; Line 7353
	movzx	eax, BYTE PTR b$[rsp]
	cmp	eax, 254				; 000000feH
	jl	SHORT $LN7@mg_base64_
; Line 7354
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	jmp	$LN1@mg_base64_
$LN7@mg_base64_:
; Line 7357
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 2
	cmp	rax, QWORD PTR src_len$[rsp]
	jb	SHORT $LN21@mg_base64_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN22@mg_base64_
$LN21@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax+2]
	mov	DWORD PTR tv93[rsp], eax
$LN22@mg_base64_:
	movzx	ecx, BYTE PTR tv93[rsp]
	call	?b64reverse@@YAED@Z			; b64reverse
	mov	BYTE PTR c$[rsp], al
; Line 7358
	movzx	eax, BYTE PTR c$[rsp]
	cmp	eax, 254				; 000000feH
	jne	SHORT $LN8@mg_base64_
; Line 7359
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	jmp	$LN1@mg_base64_
$LN8@mg_base64_:
; Line 7362
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 3
	cmp	rax, QWORD PTR src_len$[rsp]
	jb	SHORT $LN23@mg_base64_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN24@mg_base64_
$LN23@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax+3]
	mov	DWORD PTR tv138[rsp], eax
$LN24@mg_base64_:
	movzx	ecx, BYTE PTR tv138[rsp]
	call	?b64reverse@@YAED@Z			; b64reverse
	mov	BYTE PTR d$[rsp], al
; Line 7363
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 254				; 000000feH
	jne	SHORT $LN9@mg_base64_
; Line 7364
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	jmp	$LN1@mg_base64_
$LN9@mg_base64_:
; Line 7368
	mov	rax, QWORD PTR dst_len_limit$[rsp]
	cmp	QWORD PTR dst_len_used$[rsp], rax
	jae	SHORT $LN10@mg_base64_
; Line 7369
	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sar	ecx, 4
	lea	eax, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR dst_len_used$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	BYTE PTR [rcx], al
$LN10@mg_base64_:
; Line 7371
	mov	rax, QWORD PTR dst_len_used$[rsp]
	inc	rax
	mov	QWORD PTR dst_len_used$[rsp], rax
; Line 7373
	movzx	eax, BYTE PTR c$[rsp]
	cmp	eax, 255				; 000000ffH
	je	$LN11@mg_base64_
; Line 7374
	mov	rax, QWORD PTR dst_len_limit$[rsp]
	cmp	QWORD PTR dst_len_used$[rsp], rax
	jae	SHORT $LN12@mg_base64_
; Line 7376
	movzx	eax, BYTE PTR b$[rsp]
	shl	eax, 4
	movzx	ecx, BYTE PTR c$[rsp]
	sar	ecx, 2
	add	eax, ecx
	mov	rcx, QWORD PTR dst_len_used$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	BYTE PTR [rcx], al
$LN12@mg_base64_:
; Line 7378
	mov	rax, QWORD PTR dst_len_used$[rsp]
	inc	rax
	mov	QWORD PTR dst_len_used$[rsp], rax
; Line 7379
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN13@mg_base64_
; Line 7380
	mov	rax, QWORD PTR dst_len_limit$[rsp]
	cmp	QWORD PTR dst_len_used$[rsp], rax
	jae	SHORT $LN14@mg_base64_
; Line 7381
	movzx	eax, BYTE PTR c$[rsp]
	shl	eax, 6
	movzx	ecx, BYTE PTR d$[rsp]
	add	eax, ecx
	mov	rcx, QWORD PTR dst_len_used$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	BYTE PTR [rcx], al
$LN14@mg_base64_:
; Line 7383
	mov	rax, QWORD PTR dst_len_used$[rsp]
	inc	rax
	mov	QWORD PTR dst_len_used$[rsp], rax
$LN13@mg_base64_:
$LN11@mg_base64_:
; Line 7386
	jmp	$LN2@mg_base64_
$LN3@mg_base64_:
; Line 7389
	mov	rax, QWORD PTR dst_len_limit$[rsp]
	cmp	QWORD PTR dst_len_used$[rsp], rax
	jae	SHORT $LN15@mg_base64_
; Line 7390
	mov	rax, QWORD PTR dst_len_used$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
$LN15@mg_base64_:
; Line 7392
	mov	rax, QWORD PTR dst_len_used$[rsp]
	inc	rax
	mov	QWORD PTR dst_len_used$[rsp], rax
; Line 7393
	cmp	QWORD PTR dst_len$[rsp], 0
	je	SHORT $LN16@mg_base64_
; Line 7394
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	rcx, QWORD PTR dst_len_used$[rsp]
	mov	QWORD PTR [rax], rcx
$LN16@mg_base64_:
; Line 7397
	mov	rax, QWORD PTR dst_len_limit$[rsp]
	cmp	QWORD PTR dst_len_used$[rsp], rax
	jbe	SHORT $LN17@mg_base64_
; Line 7399
	xor	eax, eax
	jmp	SHORT $LN1@mg_base64_
$LN17@mg_base64_:
; Line 7403
	mov	eax, -1
$LN1@mg_base64_:
; Line 7404
	add	rsp, 88					; 00000058H
	ret	0
mg_base64_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv84 = 0
tv91 = 4
a$ = 8
b$ = 12
c$ = 16
j$ = 24
i$ = 32
expected_len$1 = 40
src$ = 64
src_len$ = 72
dst$ = 80
dst_len$ = 88
mg_base64_encode PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7256
$LN18:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7262
	cmp	QWORD PTR dst_len$[rsp], 0
	je	SHORT $LN7@mg_base64_
; Line 7266
	mov	rax, QWORD PTR src_len$[rsp]
	add	rax, 2
	xor	edx, edx
	mov	ecx, 3
	div	rcx
	lea	rax, QWORD PTR [rax*4+1]
	mov	QWORD PTR expected_len$1[rsp], rax
; Line 7267
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	rcx, QWORD PTR expected_len$1[rsp]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN8@mg_base64_
; Line 7268
	mov	rax, QWORD PTR dst_len$[rsp]
	cmp	QWORD PTR [rax], 0
	jbe	SHORT $LN9@mg_base64_
; Line 7269
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN9@mg_base64_:
; Line 7271
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	rcx, QWORD PTR expected_len$1[rsp]
	mov	QWORD PTR [rax], rcx
; Line 7272
	xor	eax, eax
	jmp	$LN1@mg_base64_
$LN8@mg_base64_:
$LN7@mg_base64_:
; Line 7276
	mov	QWORD PTR j$[rsp], 0
	mov	rax, QWORD PTR j$[rsp]
	mov	QWORD PTR i$[rsp], rax
	jmp	SHORT $LN4@mg_base64_
$LN2@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 3
	mov	QWORD PTR i$[rsp], rax
$LN4@mg_base64_:
	mov	rax, QWORD PTR src_len$[rsp]
	cmp	QWORD PTR i$[rsp], rax
	jae	$LN3@mg_base64_
; Line 7277
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR a$[rsp], eax
; Line 7278
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	cmp	rax, QWORD PTR src_len$[rsp]
	jb	SHORT $LN14@mg_base64_
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN15@mg_base64_
$LN14@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax+1]
	mov	DWORD PTR tv84[rsp], eax
$LN15@mg_base64_:
	mov	eax, DWORD PTR tv84[rsp]
	mov	DWORD PTR b$[rsp], eax
; Line 7279
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 2
	cmp	rax, QWORD PTR src_len$[rsp]
	jb	SHORT $LN16@mg_base64_
	mov	DWORD PTR tv91[rsp], 0
	jmp	SHORT $LN17@mg_base64_
$LN16@mg_base64_:
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax+2]
	mov	DWORD PTR tv91[rsp], eax
$LN17@mg_base64_:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR c$[rsp], eax
; Line 7281
	mov	eax, DWORD PTR a$[rsp]
	sar	eax, 2
	cdqe
	mov	rcx, QWORD PTR j$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ?b64@?1??mg_base64_encode@@9@4PEBDEB
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR j$[rsp]
	inc	rax
	mov	QWORD PTR j$[rsp], rax
; Line 7282
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 3
	shl	eax, 4
	mov	ecx, DWORD PTR b$[rsp]
	sar	ecx, 4
	or	eax, ecx
	cdqe
	mov	rcx, QWORD PTR j$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ?b64@?1??mg_base64_encode@@9@4PEBDEB
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR j$[rsp]
	inc	rax
	mov	QWORD PTR j$[rsp], rax
; Line 7283
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	cmp	rax, QWORD PTR src_len$[rsp]
	jae	SHORT $LN10@mg_base64_
; Line 7284
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 15
	shl	eax, 2
	mov	ecx, DWORD PTR c$[rsp]
	sar	ecx, 6
	or	eax, ecx
	cdqe
	mov	rcx, QWORD PTR j$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ?b64@?1??mg_base64_encode@@9@4PEBDEB
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR j$[rsp]
	inc	rax
	mov	QWORD PTR j$[rsp], rax
$LN10@mg_base64_:
; Line 7286
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 2
	cmp	rax, QWORD PTR src_len$[rsp]
	jae	SHORT $LN11@mg_base64_
; Line 7287
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 63					; 0000003fH
	cdqe
	mov	rcx, QWORD PTR j$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ?b64@?1??mg_base64_encode@@9@4PEBDEB
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR j$[rsp]
	inc	rax
	mov	QWORD PTR j$[rsp], rax
$LN11@mg_base64_:
; Line 7289
	jmp	$LN2@mg_base64_
$LN3@mg_base64_:
$LN5@mg_base64_:
; Line 7290
	xor	edx, edx
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, 4
	div	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN6@mg_base64_
; Line 7291
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 61			; 0000003dH
	mov	rax, QWORD PTR j$[rsp]
	inc	rax
	mov	QWORD PTR j$[rsp], rax
; Line 7292
	jmp	SHORT $LN5@mg_base64_
$LN6@mg_base64_:
; Line 7293
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR j$[rsp]
	inc	rax
	mov	QWORD PTR j$[rsp], rax
; Line 7295
	cmp	QWORD PTR dst_len$[rsp], 0
	je	SHORT $LN12@mg_base64_
; Line 7296
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rax], rcx
$LN12@mg_base64_:
; Line 7300
	mov	eax, -1
$LN1@mg_base64_:
; Line 7301
	add	rsp, 56					; 00000038H
	ret	0
mg_base64_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv135 = 32
pos$ = 40
end$ = 48
src$ = 80
dst$ = 88
dst_len$ = 96
mg_url_encode PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9523
$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9526
	mov	rax, QWORD PTR dst$[rsp]
	mov	QWORD PTR pos$[rsp], rax
; Line 9527
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR dst_len$[rsp]
	lea	rax, QWORD PTR [rax+rcx-1]
	mov	QWORD PTR end$[rsp], rax
; Line 9529
	jmp	SHORT $LN4@mg_url_enc
$LN2@mg_url_enc:
	mov	rax, QWORD PTR src$[rsp]
	inc	rax
	mov	QWORD PTR src$[rsp], rax
	mov	rax, QWORD PTR pos$[rsp]
	inc	rax
	mov	QWORD PTR pos$[rsp], rax
$LN4@mg_url_enc:
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@mg_url_enc
	mov	rax, QWORD PTR end$[rsp]
	cmp	QWORD PTR pos$[rsp], rax
	jae	$LN3@mg_url_enc
; Line 9531
	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isalnum
	test	eax, eax
	jne	SHORT $LN7@mg_url_enc
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR ?dont_escape@?1??mg_url_encode@@9@4PEBDEB
	call	strchr
	test	rax, rax
	je	SHORT $LN5@mg_url_enc
$LN7@mg_url_enc:
; Line 9532
	mov	rax, QWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	jmp	$LN6@mg_url_enc
$LN5@mg_url_enc:
; Line 9533
	mov	rax, QWORD PTR pos$[rsp]
	add	rax, 2
	cmp	rax, QWORD PTR end$[rsp]
	jae	SHORT $LN8@mg_url_enc
; Line 9534
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pos$[rsp]
	mov	BYTE PTR [rcx+rax], 37			; 00000025H
; Line 9535
	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax]
	sar	eax, 4
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pos$[rsp]
	mov	r8, QWORD PTR ?hex@?1??mg_url_encode@@9@4PEBDEB
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 9536
	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 15
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pos$[rsp]
	mov	r8, QWORD PTR ?hex@?1??mg_url_encode@@9@4PEBDEB
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 9537
	mov	rax, QWORD PTR pos$[rsp]
	add	rax, 2
	mov	QWORD PTR pos$[rsp], rax
; Line 9538
	jmp	SHORT $LN9@mg_url_enc
$LN8@mg_url_enc:
; Line 9539
	jmp	SHORT $LN3@mg_url_enc
$LN9@mg_url_enc:
$LN6@mg_url_enc:
; Line 9541
	jmp	$LN2@mg_url_enc
$LN3@mg_url_enc:
; Line 9543
	mov	rax, QWORD PTR pos$[rsp]
	mov	BYTE PTR [rax], 0
; Line 9544
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@mg_url_enc
	mov	rax, QWORD PTR dst$[rsp]
	mov	rcx, QWORD PTR pos$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@mg_url_enc
$LN11@mg_url_enc:
	mov	DWORD PTR tv135[rsp], -1
$LN12@mg_url_enc:
	mov	eax, DWORD PTR tv135[rsp]
; Line 9545
	add	rsp, 72					; 00000048H
	ret	0
mg_url_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
j$ = 36
a$ = 40
b$ = 44
tv146 = 48
tv153 = 52
tv176 = 56
src$ = 80
src_len$ = 88
dst$ = 96
dst_len$ = 104
is_form_url_encoded$ = 112
mg_url_decode PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7000
$LN16:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 7004
	mov	DWORD PTR j$[rsp], 0
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN4@mg_url_dec
$LN2@mg_url_dec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@mg_url_dec:
	mov	eax, DWORD PTR src_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@mg_url_dec
	mov	eax, DWORD PTR dst_len$[rsp]
	dec	eax
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@mg_url_dec
; Line 7007
	mov	eax, DWORD PTR src_len$[rsp]
	sub	eax, 2
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@mg_url_dec
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	$LN5@mg_url_dec
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	isxdigit
	test	eax, eax
	je	$LN5@mg_url_dec
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	isxdigit
	test	eax, eax
	je	$LN5@mg_url_dec
; Line 7008
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	tolower
	mov	DWORD PTR a$[rsp], eax
; Line 7009
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	tolower
	mov	DWORD PTR b$[rsp], eax
; Line 7010
	mov	ecx, DWORD PTR a$[rsp]
	call	isdigit
	test	eax, eax
	je	SHORT $LN10@mg_url_dec
	mov	eax, DWORD PTR a$[rsp]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR tv146[rsp], eax
	jmp	SHORT $LN11@mg_url_dec
$LN10@mg_url_dec:
	mov	eax, DWORD PTR a$[rsp]
	sub	eax, 87					; 00000057H
	mov	DWORD PTR tv146[rsp], eax
$LN11@mg_url_dec:
	mov	ecx, DWORD PTR b$[rsp]
	call	isdigit
	test	eax, eax
	je	SHORT $LN12@mg_url_dec
	mov	eax, DWORD PTR b$[rsp]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR tv153[rsp], eax
	jmp	SHORT $LN13@mg_url_dec
$LN12@mg_url_dec:
	mov	eax, DWORD PTR b$[rsp]
	sub	eax, 87					; 00000057H
	mov	DWORD PTR tv153[rsp], eax
$LN13@mg_url_dec:
	mov	eax, DWORD PTR tv146[rsp]
	shl	eax, 4
	or	eax, DWORD PTR tv153[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 7011
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN6@mg_url_dec
$LN5@mg_url_dec:
; Line 7012
	cmp	DWORD PTR is_form_url_encoded$[rsp], 0
	je	SHORT $LN7@mg_url_dec
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN7@mg_url_dec
; Line 7013
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
; Line 7014
	jmp	SHORT $LN8@mg_url_dec
$LN7@mg_url_dec:
; Line 7015
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
	mov	r8, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN8@mg_url_dec:
$LN6@mg_url_dec:
; Line 7017
	jmp	$LN2@mg_url_dec
$LN3@mg_url_dec:
; Line 7019
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7021
	mov	eax, DWORD PTR src_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN14@mg_url_dec
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN15@mg_url_dec
$LN14@mg_url_dec:
	mov	DWORD PTR tv176[rsp], -1
$LN15@mg_url_dec:
	mov	eax, DWORD PTR tv176[rsp]
; Line 7022
	add	rsp, 72					; 00000048H
	ret	0
mg_url_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mg_version PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3516
	lea	rax, OFFSET FLAT:$SG161782
; Line 3517
	ret	0
mg_version ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 48
conn$ = 80
response_code$ = 88
mg_get_response_code_text PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4177
$LN81:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4182
	mov	eax, DWORD PTR response_code$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 400		; 00000190H
	jg	SHORT $LN76@mg_get_res
	cmp	DWORD PTR tv64[rsp], 400		; 00000190H
	je	$LN25@mg_get_res
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 100				; 00000064H
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 208		; 000000d0H
	ja	$LN68@mg_get_res
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN79@mg_get_res[rcx+rax]
	mov	eax, DWORD PTR $LN80@mg_get_res[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN76@mg_get_res:
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 401				; 00000191H
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 110		; 0000006eH
	ja	$LN68@mg_get_res
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN77@mg_get_res[rcx+rax]
	mov	eax, DWORD PTR $LN78@mg_get_res[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@mg_get_res:
; Line 4185
	lea	rax, OFFSET FLAT:$SG162298
	jmp	$LN1@mg_get_res
$LN5@mg_get_res:
; Line 4187
	lea	rax, OFFSET FLAT:$SG162300
	jmp	$LN1@mg_get_res
$LN6@mg_get_res:
; Line 4189
	lea	rax, OFFSET FLAT:$SG162302
	jmp	$LN1@mg_get_res
$LN7@mg_get_res:
; Line 4193
	lea	rax, OFFSET FLAT:$SG162304
	jmp	$LN1@mg_get_res
$LN8@mg_get_res:
; Line 4195
	lea	rax, OFFSET FLAT:$SG162306
	jmp	$LN1@mg_get_res
$LN9@mg_get_res:
; Line 4197
	lea	rax, OFFSET FLAT:$SG162308
	jmp	$LN1@mg_get_res
$LN10@mg_get_res:
; Line 4199
	lea	rax, OFFSET FLAT:$SG162310
	jmp	$LN1@mg_get_res
$LN11@mg_get_res:
; Line 4201
	lea	rax, OFFSET FLAT:$SG162312
	jmp	$LN1@mg_get_res
$LN12@mg_get_res:
; Line 4203
	lea	rax, OFFSET FLAT:$SG162314
	jmp	$LN1@mg_get_res
$LN13@mg_get_res:
; Line 4205
	lea	rax, OFFSET FLAT:$SG162316
	jmp	$LN1@mg_get_res
$LN14@mg_get_res:
; Line 4207
	lea	rax, OFFSET FLAT:$SG162318
	jmp	$LN1@mg_get_res
$LN15@mg_get_res:
; Line 4210
	lea	rax, OFFSET FLAT:$SG162320
	jmp	$LN1@mg_get_res
$LN16@mg_get_res:
; Line 4213
	lea	rax, OFFSET FLAT:$SG162322
	jmp	$LN1@mg_get_res
$LN17@mg_get_res:
; Line 4217
	lea	rax, OFFSET FLAT:$SG162324
	jmp	$LN1@mg_get_res
$LN18@mg_get_res:
; Line 4219
	lea	rax, OFFSET FLAT:$SG162326
	jmp	$LN1@mg_get_res
$LN19@mg_get_res:
; Line 4221
	lea	rax, OFFSET FLAT:$SG162328
	jmp	$LN1@mg_get_res
$LN20@mg_get_res:
; Line 4223
	lea	rax, OFFSET FLAT:$SG162330
	jmp	$LN1@mg_get_res
$LN21@mg_get_res:
; Line 4225
	lea	rax, OFFSET FLAT:$SG162332
	jmp	$LN1@mg_get_res
$LN22@mg_get_res:
; Line 4227
	lea	rax, OFFSET FLAT:$SG162334
	jmp	$LN1@mg_get_res
$LN23@mg_get_res:
; Line 4229
	lea	rax, OFFSET FLAT:$SG162336
	jmp	$LN1@mg_get_res
$LN24@mg_get_res:
; Line 4231
	lea	rax, OFFSET FLAT:$SG162338
	jmp	$LN1@mg_get_res
$LN25@mg_get_res:
; Line 4235
	lea	rax, OFFSET FLAT:$SG162340
	jmp	$LN1@mg_get_res
$LN26@mg_get_res:
; Line 4237
	lea	rax, OFFSET FLAT:$SG162342
	jmp	$LN1@mg_get_res
$LN27@mg_get_res:
; Line 4239
	lea	rax, OFFSET FLAT:$SG162344
	jmp	$LN1@mg_get_res
$LN28@mg_get_res:
; Line 4241
	lea	rax, OFFSET FLAT:$SG162346
	jmp	$LN1@mg_get_res
$LN29@mg_get_res:
; Line 4243
	lea	rax, OFFSET FLAT:$SG162348
	jmp	$LN1@mg_get_res
$LN30@mg_get_res:
; Line 4245
	lea	rax, OFFSET FLAT:$SG162350
	jmp	$LN1@mg_get_res
$LN31@mg_get_res:
; Line 4247
	lea	rax, OFFSET FLAT:$SG162352
	jmp	$LN1@mg_get_res
$LN32@mg_get_res:
; Line 4249
	lea	rax, OFFSET FLAT:$SG162354
	jmp	$LN1@mg_get_res
$LN33@mg_get_res:
; Line 4251
	lea	rax, OFFSET FLAT:$SG162356
	jmp	$LN1@mg_get_res
$LN34@mg_get_res:
; Line 4253
	lea	rax, OFFSET FLAT:$SG162358
	jmp	$LN1@mg_get_res
$LN35@mg_get_res:
; Line 4255
	lea	rax, OFFSET FLAT:$SG162360
	jmp	$LN1@mg_get_res
$LN36@mg_get_res:
; Line 4257
	lea	rax, OFFSET FLAT:$SG162362
	jmp	$LN1@mg_get_res
$LN37@mg_get_res:
; Line 4259
	lea	rax, OFFSET FLAT:$SG162364
	jmp	$LN1@mg_get_res
$LN38@mg_get_res:
; Line 4261
	lea	rax, OFFSET FLAT:$SG162366
	jmp	$LN1@mg_get_res
$LN39@mg_get_res:
; Line 4263
	lea	rax, OFFSET FLAT:$SG162368
	jmp	$LN1@mg_get_res
$LN40@mg_get_res:
; Line 4265
	lea	rax, OFFSET FLAT:$SG162370
	jmp	$LN1@mg_get_res
$LN41@mg_get_res:
; Line 4267
	lea	rax, OFFSET FLAT:$SG162372
	jmp	$LN1@mg_get_res
$LN42@mg_get_res:
; Line 4270
	lea	rax, OFFSET FLAT:$SG162374
	jmp	$LN1@mg_get_res
$LN43@mg_get_res:
; Line 4273
	lea	rax, OFFSET FLAT:$SG162376
	jmp	$LN1@mg_get_res
$LN44@mg_get_res:
; Line 4275
	lea	rax, OFFSET FLAT:$SG162378
	jmp	$LN1@mg_get_res
$LN45@mg_get_res:
; Line 4278
	lea	rax, OFFSET FLAT:$SG162380
	jmp	$LN1@mg_get_res
$LN46@mg_get_res:
; Line 4280
	lea	rax, OFFSET FLAT:$SG162382
	jmp	$LN1@mg_get_res
$LN47@mg_get_res:
; Line 4284
	lea	rax, OFFSET FLAT:$SG162384
	jmp	$LN1@mg_get_res
$LN48@mg_get_res:
; Line 4287
	lea	rax, OFFSET FLAT:$SG162386
	jmp	$LN1@mg_get_res
$LN49@mg_get_res:
; Line 4289
	lea	rax, OFFSET FLAT:$SG162388
	jmp	$LN1@mg_get_res
$LN50@mg_get_res:
; Line 4292
	lea	rax, OFFSET FLAT:$SG162390
	jmp	$LN1@mg_get_res
$LN51@mg_get_res:
; Line 4295
	lea	rax, OFFSET FLAT:$SG162392
	jmp	$LN1@mg_get_res
$LN52@mg_get_res:
; Line 4300
	lea	rax, OFFSET FLAT:$SG162394
	jmp	$LN1@mg_get_res
$LN53@mg_get_res:
; Line 4302
	lea	rax, OFFSET FLAT:$SG162396
	jmp	$LN1@mg_get_res
$LN54@mg_get_res:
; Line 4304
	lea	rax, OFFSET FLAT:$SG162398
	jmp	$LN1@mg_get_res
$LN55@mg_get_res:
; Line 4306
	lea	rax, OFFSET FLAT:$SG162400
	jmp	$LN1@mg_get_res
$LN56@mg_get_res:
; Line 4308
	lea	rax, OFFSET FLAT:$SG162402
	jmp	$LN1@mg_get_res
$LN57@mg_get_res:
; Line 4310
	lea	rax, OFFSET FLAT:$SG162404
	jmp	$LN1@mg_get_res
$LN58@mg_get_res:
; Line 4312
	lea	rax, OFFSET FLAT:$SG162406
	jmp	$LN1@mg_get_res
$LN59@mg_get_res:
; Line 4314
	lea	rax, OFFSET FLAT:$SG162408
	jmp	$LN1@mg_get_res
$LN60@mg_get_res:
; Line 4317
	lea	rax, OFFSET FLAT:$SG162410
	jmp	$LN1@mg_get_res
$LN61@mg_get_res:
; Line 4320
	lea	rax, OFFSET FLAT:$SG162412
	jmp	$LN1@mg_get_res
$LN62@mg_get_res:
; Line 4322
	lea	rax, OFFSET FLAT:$SG162414
	jmp	$LN1@mg_get_res
$LN63@mg_get_res:
; Line 4328
	lea	rax, OFFSET FLAT:$SG162416
	jmp	$LN1@mg_get_res
$LN64@mg_get_res:
; Line 4330
	lea	rax, OFFSET FLAT:$SG162418
	jmp	$LN1@mg_get_res
$LN65@mg_get_res:
; Line 4332
	lea	rax, OFFSET FLAT:$SG162420
	jmp	$LN1@mg_get_res
$LN66@mg_get_res:
; Line 4334
	lea	rax, OFFSET FLAT:$SG162422
	jmp	$LN1@mg_get_res
$LN67@mg_get_res:
; Line 4336
	lea	rax, OFFSET FLAT:$SG162424
	jmp	$LN1@mg_get_res
$LN68@mg_get_res:
; Line 4340
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN69@mg_get_res
; Line 4341
	mov	eax, DWORD PTR response_code$[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	rax, OFFSET FLAT:$SG162427
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4343				; 000010f7H
	lea	r8, OFFSET FLAT:$SG162428
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN69@mg_get_res:
; Line 4347
	cmp	DWORD PTR response_code$[rsp], 100	; 00000064H
	jl	SHORT $LN70@mg_get_res
	cmp	DWORD PTR response_code$[rsp], 200	; 000000c8H
	jge	SHORT $LN70@mg_get_res
; Line 4349
	lea	rax, OFFSET FLAT:$SG162430
	jmp	SHORT $LN1@mg_get_res
$LN70@mg_get_res:
; Line 4351
	cmp	DWORD PTR response_code$[rsp], 200	; 000000c8H
	jl	SHORT $LN71@mg_get_res
	cmp	DWORD PTR response_code$[rsp], 300	; 0000012cH
	jge	SHORT $LN71@mg_get_res
; Line 4353
	lea	rax, OFFSET FLAT:$SG162432
	jmp	SHORT $LN1@mg_get_res
$LN71@mg_get_res:
; Line 4355
	cmp	DWORD PTR response_code$[rsp], 300	; 0000012cH
	jl	SHORT $LN72@mg_get_res
	cmp	DWORD PTR response_code$[rsp], 400	; 00000190H
	jge	SHORT $LN72@mg_get_res
; Line 4357
	lea	rax, OFFSET FLAT:$SG162434
	jmp	SHORT $LN1@mg_get_res
$LN72@mg_get_res:
; Line 4359
	cmp	DWORD PTR response_code$[rsp], 400	; 00000190H
	jl	SHORT $LN73@mg_get_res
	cmp	DWORD PTR response_code$[rsp], 500	; 000001f4H
	jge	SHORT $LN73@mg_get_res
; Line 4361
	lea	rax, OFFSET FLAT:$SG162436
	jmp	SHORT $LN1@mg_get_res
$LN73@mg_get_res:
; Line 4363
	cmp	DWORD PTR response_code$[rsp], 500	; 000001f4H
	jl	SHORT $LN74@mg_get_res
	cmp	DWORD PTR response_code$[rsp], 600	; 00000258H
	jge	SHORT $LN74@mg_get_res
; Line 4365
	lea	rax, OFFSET FLAT:$SG162438
	jmp	SHORT $LN1@mg_get_res
$LN74@mg_get_res:
; Line 4369
	lea	rax, OFFSET FLAT:$SG162439
$LN1@mg_get_res:
; Line 4371
	add	rsp, 72					; 00000048H
	ret	0
	npad	3
$LN80@mg_get_res:
	DD	$LN4@mg_get_res
	DD	$LN5@mg_get_res
	DD	$LN6@mg_get_res
	DD	$LN7@mg_get_res
	DD	$LN8@mg_get_res
	DD	$LN9@mg_get_res
	DD	$LN10@mg_get_res
	DD	$LN11@mg_get_res
	DD	$LN12@mg_get_res
	DD	$LN13@mg_get_res
	DD	$LN14@mg_get_res
	DD	$LN15@mg_get_res
	DD	$LN16@mg_get_res
	DD	$LN17@mg_get_res
	DD	$LN18@mg_get_res
	DD	$LN19@mg_get_res
	DD	$LN20@mg_get_res
	DD	$LN21@mg_get_res
	DD	$LN22@mg_get_res
	DD	$LN23@mg_get_res
	DD	$LN24@mg_get_res
	DD	$LN68@mg_get_res
$LN79@mg_get_res:
	DB	0
	DB	1
	DB	2
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	12
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	13
	DB	14
	DB	15
	DB	16
	DB	17
	DB	18
	DB	21
	DB	19
	DB	20
	npad	3
$LN78@mg_get_res:
	DD	$LN26@mg_get_res
	DD	$LN27@mg_get_res
	DD	$LN28@mg_get_res
	DD	$LN29@mg_get_res
	DD	$LN30@mg_get_res
	DD	$LN31@mg_get_res
	DD	$LN32@mg_get_res
	DD	$LN33@mg_get_res
	DD	$LN34@mg_get_res
	DD	$LN35@mg_get_res
	DD	$LN36@mg_get_res
	DD	$LN37@mg_get_res
	DD	$LN38@mg_get_res
	DD	$LN39@mg_get_res
	DD	$LN40@mg_get_res
	DD	$LN41@mg_get_res
	DD	$LN42@mg_get_res
	DD	$LN63@mg_get_res
	DD	$LN64@mg_get_res
	DD	$LN65@mg_get_res
	DD	$LN43@mg_get_res
	DD	$LN44@mg_get_res
	DD	$LN45@mg_get_res
	DD	$LN46@mg_get_res
	DD	$LN47@mg_get_res
	DD	$LN48@mg_get_res
	DD	$LN49@mg_get_res
	DD	$LN50@mg_get_res
	DD	$LN66@mg_get_res
	DD	$LN51@mg_get_res
	DD	$LN52@mg_get_res
	DD	$LN53@mg_get_res
	DD	$LN54@mg_get_res
	DD	$LN55@mg_get_res
	DD	$LN56@mg_get_res
	DD	$LN57@mg_get_res
	DD	$LN58@mg_get_res
	DD	$LN59@mg_get_res
	DD	$LN60@mg_get_res
	DD	$LN67@mg_get_res
	DD	$LN61@mg_get_res
	DD	$LN62@mg_get_res
	DD	$LN68@mg_get_res
$LN77@mg_get_res:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	15
	DB	16
	DB	17
	DB	18
	DB	19
	DB	20
	DB	21
	DB	22
	DB	23
	DB	42					; 0000002aH
	DB	24
	DB	42					; 0000002aH
	DB	25
	DB	26
	DB	42					; 0000002aH
	DB	27
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	28
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	29
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	30
	DB	31
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
mg_get_response_code_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
path_len$ = 40
ext$ = 48
path$ = 80
mg_get_builtin_mime_type PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8277
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8281
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	QWORD PTR path_len$[rsp], rax
; Line 8283
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_get_bui
$LN2@mg_get_bui:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN4@mg_get_bui:
	imul	rax, QWORD PTR i$[rsp], 24
	lea	rcx, OFFSET FLAT:?builtin_mime_types@@3QBU<unnamed-type-builtin_mime_types>@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN3@mg_get_bui
; Line 8284
	imul	rax, QWORD PTR i$[rsp], 24
	lea	rcx, OFFSET FLAT:?builtin_mime_types@@3QBU<unnamed-type-builtin_mime_types>@@B
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR path_len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ext$[rsp], rax
; Line 8286
	imul	rax, QWORD PTR i$[rsp], 24
	lea	rcx, OFFSET FLAT:?builtin_mime_types@@3QBU<unnamed-type-builtin_mime_types>@@B
	mov	rax, QWORD PTR [rcx+rax+8]
	cmp	QWORD PTR path_len$[rsp], rax
	jbe	SHORT $LN5@mg_get_bui
	imul	rax, QWORD PTR i$[rsp], 24
	lea	rcx, OFFSET FLAT:?builtin_mime_types@@3QBU<unnamed-type-builtin_mime_types>@@B
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR ext$[rsp]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN5@mg_get_bui
; Line 8287
	imul	rax, QWORD PTR i$[rsp], 24
	lea	rcx, OFFSET FLAT:?builtin_mime_types@@3QBU<unnamed-type-builtin_mime_types>@@B
	mov	rax, QWORD PTR [rcx+rax+16]
	jmp	SHORT $LN1@mg_get_bui
$LN5@mg_get_bui:
; Line 8289
	jmp	$LN2@mg_get_bui
$LN3@mg_get_bui:
; Line 8291
	lea	rax, OFFSET FLAT:$SG164136
$LN1@mg_get_bui:
; Line 8292
	add	rsp, 72					; 00000048H
	ret	0
mg_get_builtin_mime_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
f$ = 64
p$ = 72
mg_start_thread PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 5298
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5308
	mov	r8, QWORD PTR p$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR f$[rsp]
	call	_beginthread
	cmp	rax, -1
	jne	SHORT $LN3@mg_start_t
	mov	DWORD PTR tv69[rsp], -1
	jmp	SHORT $LN4@mg_start_t
$LN3@mg_start_t:
	mov	DWORD PTR tv69[rsp], 0
$LN4@mg_start_t:
	mov	eax, DWORD PTR tv69[rsp]
; Line 5313
	add	rsp, 56					; 00000038H
	ret	0
mg_start_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf_fill$ = 64
r$ = 68
field_storage$ = 72
boundary$1 = 80
fbeg$2 = 88
bl$3 = 96
nbeg$4 = 104
d$5 = 112
field_count$ = 116
file_size$ = 120
all_data_read$6 = 128
get_block$7 = 132
hend$8 = 136
val$9 = 144
towrite$10 = 152
val$11 = 160
get_block$12 = 168
all_data_read$13 = 172
end_of_key_value_pair_found$14 = 176
next$15 = 184
hbuf$16 = 192
part_no$17 = 200
used$18 = 208
content_type$ = 216
fend$19 = 224
nend$20 = 232
next$21 = 240
next$22 = 248
data$23 = 256
tv69 = 264
tv238 = 268
tv387 = 272
tv498 = 276
n$24 = 280
vallen$25 = 288
vallen$26 = 296
content_disp$27 = 304
has_body_data$ = 312
fnlen$28 = 320
to_read$29 = 328
used$30 = 336
keylen$31 = 344
n$32 = 352
$T33 = 360
keylen$34 = 368
tv325 = 376
tv328 = 384
n$35 = 392
$T36 = 400
$T37 = 408
$T38 = 416
tv747 = 424
tv794 = 432
tv797 = 440
$T39 = 448
tv864 = 456
tv872 = 464
tv875 = 472
to_read$40 = 480
tv332 = 488
to_read$41 = 496
tv754 = 504
tv801 = 512
tv879 = 520
fstore$ = 528
part_header$42 = 576
path$ = 1776
buf$ = 2288
__$ArrayPad$ = 10480
conn$ = 10512
fdh$ = 10520
mg_handle_form_request PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\handle_form.inl
; Line 183
$LN183:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 10504				; 00002908H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 188
	mov	DWORD PTR buf_fill$[rsp], 0
; Line 190
	mov	DWORD PTR field_count$[rsp], 0
; Line 191
	mov	QWORD PTR fstore$[rsp], 0
	mov	QWORD PTR fstore$[rsp+8], 0
	mov	DWORD PTR fstore$[rsp+16], 0
	mov	DWORD PTR fstore$[rsp+20], 0
	mov	DWORD PTR fstore$[rsp+24], 0
	mov	QWORD PTR fstore$[rsp+32], 0
; Line 192
	mov	QWORD PTR file_size$[rsp], 0
; Line 195
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+120], 0
	jg	SHORT $LN149@mg_handle_
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 0
	jne	SHORT $LN149@mg_handle_
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN150@mg_handle_
$LN149@mg_handle_:
	mov	DWORD PTR tv69[rsp], 1
$LN150@mg_handle_:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR has_body_data$[rsp], eax
; Line 213
	cmp	DWORD PTR has_body_data$[rsp], 0
	jne	$LN27@mg_handle_
; Line 216
	lea	rdx, OFFSET FLAT:$SG166999
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	strcmp
	test	eax, eax
	je	SHORT $LN28@mg_handle_
; Line 219
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN28@mg_handle_:
; Line 226
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR data$23[rsp], rax
; Line 227
	cmp	QWORD PTR data$23[rsp], 0
	jne	SHORT $LN29@mg_handle_
; Line 229
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN29@mg_handle_:
$LN2@mg_handle_:
; Line 233
	mov	rax, QWORD PTR data$23[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@mg_handle_
; Line 234
	mov	edx, 61					; 0000003dH
	mov	rcx, QWORD PTR data$23[rsp]
	call	strchr
	mov	QWORD PTR val$11[rsp], rax
; Line 238
	cmp	QWORD PTR val$11[rsp], 0
	jne	SHORT $LN30@mg_handle_
; Line 239
	jmp	$LN3@mg_handle_
$LN30@mg_handle_:
; Line 241
	mov	rax, QWORD PTR data$23[rsp]
	mov	rcx, QWORD PTR val$11[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR keylen$31[rsp], rax
; Line 256
	mov	r8d, 512				; 00000200H
	xor	edx, edx
	lea	rcx, QWORD PTR path$[rsp]
	call	memset
; Line 257
	mov	eax, DWORD PTR field_count$[rsp]
	inc	eax
	mov	DWORD PTR field_count$[rsp], eax
; Line 258
	mov	rax, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 511			; 000001ffH
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR keylen$31[rsp]
	mov	rdx, QWORD PTR data$23[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z ; url_encoded_field_found
	mov	DWORD PTR field_storage$[rsp], eax
; Line 267
	mov	rax, QWORD PTR val$11[rsp]
	inc	rax
	mov	QWORD PTR val$11[rsp], rax
; Line 268
	mov	edx, 38					; 00000026H
	mov	rcx, QWORD PTR val$11[rsp]
	call	strchr
	mov	QWORD PTR next$22[rsp], rax
; Line 269
	cmp	QWORD PTR next$22[rsp], 0
	je	SHORT $LN31@mg_handle_
; Line 270
	mov	rax, QWORD PTR val$11[rsp]
	mov	rcx, QWORD PTR next$22[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR vallen$25[rsp], rax
; Line 271
	jmp	SHORT $LN32@mg_handle_
$LN31@mg_handle_:
; Line 272
	mov	rcx, QWORD PTR val$11[rsp]
	call	strlen
	mov	QWORD PTR vallen$25[rsp], rax
$LN32@mg_handle_:
; Line 275
	cmp	DWORD PTR field_storage$[rsp], 1
	jne	SHORT $LN33@mg_handle_
; Line 277
	mov	rax, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR vallen$25[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR val$11[rsp]
	mov	r8, QWORD PTR keylen$31[rsp]
	mov	rdx, QWORD PTR data$23[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z ; url_encoded_field_get
	mov	DWORD PTR r$[rsp], eax
; Line 279
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN34@mg_handle_
; Line 281
	jmp	$LN3@mg_handle_
$LN34@mg_handle_:
; Line 283
	cmp	DWORD PTR r$[rsp], 8
	jne	SHORT $LN35@mg_handle_
; Line 285
	mov	DWORD PTR field_storage$[rsp], 0
$LN35@mg_handle_:
$LN33@mg_handle_:
; Line 289
	cmp	QWORD PTR next$22[rsp], 0
	je	SHORT $LN36@mg_handle_
; Line 290
	mov	rax, QWORD PTR next$22[rsp]
	inc	rax
	mov	QWORD PTR next$22[rsp], rax
; Line 291
	jmp	SHORT $LN37@mg_handle_
$LN36@mg_handle_:
; Line 293
	mov	rax, QWORD PTR vallen$25[rsp]
	mov	rcx, QWORD PTR val$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR next$22[rsp], rax
$LN37@mg_handle_:
; Line 297
	cmp	DWORD PTR field_storage$[rsp], 2
	jne	$LN38@mg_handle_
; Line 299
	lea	r9, QWORD PTR fstore$[rsp]
	mov	r8d, 2
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN39@mg_handle_
; Line 300
	mov	QWORD PTR fstore$[rsp+32], 0
$LN39@mg_handle_:
; Line 302
	mov	QWORD PTR file_size$[rsp], 0
; Line 303
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	$LN40@mg_handle_
; Line 304
	mov	r9, QWORD PTR fstore$[rsp+32]
	mov	r8, QWORD PTR vallen$25[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR val$11[rsp]
	call	fwrite
	mov	QWORD PTR n$32[rsp], rax
; Line 306
	mov	rax, QWORD PTR vallen$25[rsp]
	cmp	QWORD PTR n$32[rsp], rax
	jne	SHORT $LN43@mg_handle_
	mov	rcx, QWORD PTR fstore$[rsp+32]
	call	ferror
	test	eax, eax
	je	SHORT $LN42@mg_handle_
$LN43@mg_handle_:
; Line 307
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167015
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167016
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 310				; 00000136H
	lea	r8, OFFSET FLAT:$SG167017
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 311
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 312
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN42@mg_handle_:
; Line 314
	mov	rax, QWORD PTR n$32[rsp]
	mov	rcx, QWORD PTR file_size$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR file_size$[rsp], rax
; Line 316
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	$LN44@mg_handle_
; Line 317
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
	mov	DWORD PTR r$[rsp], eax
; Line 318
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN45@mg_handle_
; Line 320
	mov	r9, QWORD PTR fdh$[rsp]
	mov	r8, QWORD PTR file_size$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z ; field_stored
	mov	DWORD PTR r$[rsp], eax
; Line 321
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN47@mg_handle_
; Line 323
	jmp	$LN3@mg_handle_
$LN47@mg_handle_:
; Line 326
	jmp	SHORT $LN46@mg_handle_
$LN45@mg_handle_:
; Line 327
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167022
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167023
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 330				; 0000014aH
	lea	r8, OFFSET FLAT:$SG167024
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 331
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN46@mg_handle_:
; Line 333
	mov	QWORD PTR fstore$[rsp+32], 0
$LN44@mg_handle_:
; Line 336
	jmp	SHORT $LN41@mg_handle_
$LN40@mg_handle_:
; Line 337
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167025
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167026
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 340				; 00000154H
	lea	r8, OFFSET FLAT:$SG167027
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN41@mg_handle_:
$LN38@mg_handle_:
; Line 359
	mov	eax, DWORD PTR field_storage$[rsp]
	and	eax, 16
	cmp	eax, 16
	jne	SHORT $LN48@mg_handle_
; Line 361
	jmp	SHORT $LN3@mg_handle_
$LN48@mg_handle_:
; Line 365
	mov	rax, QWORD PTR next$22[rsp]
	mov	QWORD PTR data$23[rsp], rax
; Line 366
	jmp	$LN2@mg_handle_
$LN3@mg_handle_:
; Line 368
	mov	eax, DWORD PTR field_count$[rsp]
	jmp	$LN1@mg_handle_
$LN27@mg_handle_:
; Line 371
	lea	rdx, OFFSET FLAT:$SG167029
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_header
	mov	QWORD PTR content_type$[rsp], rax
; Line 377
	cmp	QWORD PTR content_type$[rsp], 0
	je	SHORT $LN50@mg_handle_
	mov	r8d, 33					; 00000021H
	lea	rdx, OFFSET FLAT:$SG167032
	mov	rcx, QWORD PTR content_type$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	je	SHORT $LN50@mg_handle_
	mov	r8d, 31
	lea	rdx, OFFSET FLAT:$SG167033
	mov	rcx, QWORD PTR content_type$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	$LN49@mg_handle_
$LN50@mg_handle_:
; Line 382
	mov	DWORD PTR all_data_read$6[rsp], 0
$LN4@mg_handle_:
; Line 394
	mov	DWORD PTR end_of_key_value_pair_found$14[rsp], 0
; Line 397
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	cmp	rax, 8191				; 00001fffH
	jae	$LN51@mg_handle_
; Line 399
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	ecx, 8191				; 00001fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR to_read$40[rsp], rax
; Line 400
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	lea	rax, QWORD PTR buf$[rsp+rax]
	mov	r8, QWORD PTR to_read$40[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR r$[rsp], eax
; Line 401
	cmp	DWORD PTR r$[rsp], 0
	jl	SHORT $LN53@mg_handle_
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN52@mg_handle_
	cmp	DWORD PTR all_data_read$6[rsp], 0
	je	SHORT $LN52@mg_handle_
$LN53@mg_handle_:
; Line 403
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN52@mg_handle_:
; Line 405
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN54@mg_handle_
; Line 411
	cmp	DWORD PTR buf_fill$[rsp], 0
	jne	SHORT $LN151@mg_handle_
	mov	DWORD PTR tv238[rsp], 1
	jmp	SHORT $LN152@mg_handle_
$LN151@mg_handle_:
	mov	DWORD PTR tv238[rsp], 0
$LN152@mg_handle_:
	mov	eax, DWORD PTR tv238[rsp]
	mov	DWORD PTR all_data_read$6[rsp], eax
$LN54@mg_handle_:
; Line 413
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 414
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	QWORD PTR $T33[rsp], rax
	cmp	QWORD PTR $T33[rsp], 8192		; 00002000H
	jae	SHORT $LN153@mg_handle_
	jmp	SHORT $LN154@mg_handle_
$LN153@mg_handle_:
	call	__report_rangecheckfailure
$LN154@mg_handle_:
	mov	rax, QWORD PTR $T33[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
; Line 415
	cmp	DWORD PTR buf_fill$[rsp], 1
	jge	SHORT $LN55@mg_handle_
; Line 416
	jmp	$LN5@mg_handle_
$LN55@mg_handle_:
$LN51@mg_handle_:
; Line 420
	mov	edx, 61					; 0000003dH
	lea	rcx, QWORD PTR buf$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	mov	QWORD PTR val$9[rsp], rax
; Line 422
	cmp	QWORD PTR val$9[rsp], 0
	jne	SHORT $LN56@mg_handle_
; Line 423
	jmp	$LN5@mg_handle_
$LN56@mg_handle_:
; Line 425
	lea	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR val$9[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR keylen$34[rsp], rax
; Line 426
	mov	rax, QWORD PTR val$9[rsp]
	inc	rax
	mov	QWORD PTR val$9[rsp], rax
; Line 429
	mov	r8d, 512				; 00000200H
	xor	edx, edx
	lea	rcx, QWORD PTR path$[rsp]
	call	memset
; Line 430
	mov	eax, DWORD PTR field_count$[rsp]
	inc	eax
	mov	DWORD PTR field_count$[rsp], eax
; Line 431
	mov	rax, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 511			; 000001ffH
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR keylen$34[rsp]
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z ; url_encoded_field_found
	mov	DWORD PTR field_storage$[rsp], eax
; Line 441
	mov	eax, DWORD PTR field_storage$[rsp]
	and	eax, 16
	cmp	eax, 16
	jne	SHORT $LN57@mg_handle_
; Line 443
	jmp	$LN5@mg_handle_
$LN57@mg_handle_:
; Line 447
	cmp	DWORD PTR field_storage$[rsp], 2
	jne	$LN58@mg_handle_
; Line 448
	lea	r9, QWORD PTR fstore$[rsp]
	mov	r8d, 2
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN59@mg_handle_
; Line 449
	mov	QWORD PTR fstore$[rsp+32], 0
$LN59@mg_handle_:
; Line 451
	mov	QWORD PTR file_size$[rsp], 0
; Line 452
	cmp	QWORD PTR fstore$[rsp+32], 0
	jne	SHORT $LN60@mg_handle_
; Line 453
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167044
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167045
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 456				; 000001c8H
	lea	r8, OFFSET FLAT:$SG167046
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN60@mg_handle_:
$LN58@mg_handle_:
; Line 461
	mov	DWORD PTR get_block$12[rsp], 0
$LN9@mg_handle_:
; Line 464
	mov	edx, 38					; 00000026H
	mov	rcx, QWORD PTR val$9[rsp]
	call	strchr
	mov	QWORD PTR next$15[rsp], rax
; Line 465
	cmp	QWORD PTR next$15[rsp], 0
	je	SHORT $LN61@mg_handle_
; Line 466
	mov	rax, QWORD PTR val$9[rsp]
	mov	rcx, QWORD PTR next$15[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR vallen$26[rsp], rax
; Line 467
	mov	DWORD PTR end_of_key_value_pair_found$14[rsp], 1
; Line 468
	jmp	SHORT $LN62@mg_handle_
$LN61@mg_handle_:
; Line 469
	mov	rcx, QWORD PTR val$9[rsp]
	call	strlen
	mov	QWORD PTR vallen$26[rsp], rax
; Line 470
	mov	eax, DWORD PTR all_data_read$6[rsp]
	mov	DWORD PTR end_of_key_value_pair_found$14[rsp], eax
$LN62@mg_handle_:
; Line 473
	cmp	DWORD PTR field_storage$[rsp], 1
	jne	$LN63@mg_handle_
; Line 481
	mov	rax, QWORD PTR val$9[rsp]
	mov	QWORD PTR tv332[rsp], rax
	cmp	DWORD PTR get_block$12[rsp], 0
	jle	SHORT $LN155@mg_handle_
	mov	QWORD PTR tv325[rsp], 0
	jmp	SHORT $LN156@mg_handle_
$LN155@mg_handle_:
	mov	rax, QWORD PTR keylen$34[rsp]
	mov	QWORD PTR tv325[rsp], rax
$LN156@mg_handle_:
	cmp	DWORD PTR get_block$12[rsp], 0
	jle	SHORT $LN157@mg_handle_
	mov	QWORD PTR tv328[rsp], 0
	jmp	SHORT $LN158@mg_handle_
$LN157@mg_handle_:
	lea	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR tv328[rsp], rax
$LN158@mg_handle_:
	mov	rax, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR vallen$26[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv332[rsp]
	mov	r8, QWORD PTR tv325[rsp]
	mov	rdx, QWORD PTR tv328[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?url_encoded_field_get@@YAHPEBUmg_connection@@PEBD_K1PEA_KPEAUmg_form_data_handler@@@Z ; url_encoded_field_get
	mov	DWORD PTR r$[rsp], eax
; Line 489
	mov	eax, DWORD PTR get_block$12[rsp]
	inc	eax
	mov	DWORD PTR get_block$12[rsp], eax
; Line 490
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN64@mg_handle_
; Line 492
	jmp	$LN8@mg_handle_
$LN64@mg_handle_:
; Line 494
	cmp	DWORD PTR r$[rsp], 8
	jne	SHORT $LN65@mg_handle_
; Line 496
	mov	DWORD PTR field_storage$[rsp], 0
$LN65@mg_handle_:
$LN63@mg_handle_:
; Line 500
	cmp	QWORD PTR next$15[rsp], 0
	je	SHORT $LN66@mg_handle_
; Line 501
	mov	rax, QWORD PTR next$15[rsp]
	inc	rax
	mov	QWORD PTR next$15[rsp], rax
; Line 502
	jmp	SHORT $LN67@mg_handle_
$LN66@mg_handle_:
; Line 504
	mov	rax, QWORD PTR vallen$26[rsp]
	mov	rcx, QWORD PTR val$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR next$15[rsp], rax
$LN67@mg_handle_:
; Line 508
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	$LN68@mg_handle_
; Line 509
	mov	r9, QWORD PTR fstore$[rsp+32]
	mov	r8, QWORD PTR vallen$26[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR val$9[rsp]
	call	fwrite
	mov	QWORD PTR n$35[rsp], rax
; Line 511
	mov	rax, QWORD PTR vallen$26[rsp]
	cmp	QWORD PTR n$35[rsp], rax
	jne	SHORT $LN70@mg_handle_
	mov	rcx, QWORD PTR fstore$[rsp+32]
	call	ferror
	test	eax, eax
	je	SHORT $LN69@mg_handle_
$LN70@mg_handle_:
; Line 512
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167057
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167058
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 515				; 00000203H
	lea	r8, OFFSET FLAT:$SG167059
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 516
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 517
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN69@mg_handle_:
; Line 519
	mov	rax, QWORD PTR n$35[rsp]
	mov	rcx, QWORD PTR file_size$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR file_size$[rsp], rax
$LN68@mg_handle_:
; Line 523
	cmp	DWORD PTR end_of_key_value_pair_found$14[rsp], 0
	jne	$LN71@mg_handle_
; Line 524
	lea	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR next$15[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR used$18[rsp], rax
; Line 525
	mov	eax, 8192				; 00002000H
	sub	rax, QWORD PTR used$18[rsp]
	mov	rcx, QWORD PTR used$18[rsp]
	lea	rcx, QWORD PTR buf$[rsp+rcx]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR buf$[rsp]
	call	memmove
; Line 528
	lea	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR next$15[rsp], rax
; Line 529
	mov	eax, DWORD PTR used$18[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 530
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	cmp	rax, 8191				; 00001fffH
	jae	$LN72@mg_handle_
; Line 532
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	ecx, 8191				; 00001fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR to_read$41[rsp], rax
; Line 533
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	lea	rax, QWORD PTR buf$[rsp+rax]
	mov	r8, QWORD PTR to_read$41[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR r$[rsp], eax
; Line 534
	cmp	DWORD PTR r$[rsp], 0
	jl	SHORT $LN74@mg_handle_
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN73@mg_handle_
	cmp	DWORD PTR all_data_read$6[rsp], 0
	je	SHORT $LN73@mg_handle_
$LN74@mg_handle_:
; Line 537
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	SHORT $LN75@mg_handle_
; Line 538
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 539
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN75@mg_handle_:
; Line 541
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN73@mg_handle_:
; Line 544
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN76@mg_handle_
; Line 550
	cmp	DWORD PTR buf_fill$[rsp], 0
	jne	SHORT $LN159@mg_handle_
	mov	DWORD PTR tv387[rsp], 1
	jmp	SHORT $LN160@mg_handle_
$LN159@mg_handle_:
	mov	DWORD PTR tv387[rsp], 0
$LN160@mg_handle_:
	mov	eax, DWORD PTR tv387[rsp]
	mov	DWORD PTR all_data_read$6[rsp], eax
$LN76@mg_handle_:
; Line 552
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 553
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	QWORD PTR $T36[rsp], rax
	cmp	QWORD PTR $T36[rsp], 8192		; 00002000H
	jae	SHORT $LN161@mg_handle_
	jmp	SHORT $LN162@mg_handle_
$LN161@mg_handle_:
	call	__report_rangecheckfailure
$LN162@mg_handle_:
	mov	rax, QWORD PTR $T36[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
; Line 554
	cmp	DWORD PTR buf_fill$[rsp], 1
	jge	SHORT $LN77@mg_handle_
; Line 555
	jmp	SHORT $LN8@mg_handle_
$LN77@mg_handle_:
; Line 557
	lea	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR val$9[rsp], rax
$LN72@mg_handle_:
$LN71@mg_handle_:
; Line 561
	cmp	DWORD PTR end_of_key_value_pair_found$14[rsp], 0
	je	$LN9@mg_handle_
$LN8@mg_handle_:
; Line 564
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	$LN78@mg_handle_
; Line 565
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
	mov	DWORD PTR r$[rsp], eax
; Line 566
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN79@mg_handle_
; Line 568
	mov	r9, QWORD PTR fdh$[rsp]
	mov	r8, QWORD PTR file_size$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z ; field_stored
	mov	DWORD PTR r$[rsp], eax
; Line 569
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN81@mg_handle_
; Line 571
	jmp	$LN5@mg_handle_
$LN81@mg_handle_:
; Line 573
	jmp	SHORT $LN80@mg_handle_
$LN79@mg_handle_:
; Line 574
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167071
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167072
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 577				; 00000241H
	lea	r8, OFFSET FLAT:$SG167073
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 578
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN80@mg_handle_:
; Line 580
	mov	QWORD PTR fstore$[rsp+32], 0
$LN78@mg_handle_:
; Line 584
	cmp	DWORD PTR all_data_read$6[rsp], 0
	je	SHORT $LN82@mg_handle_
	cmp	DWORD PTR buf_fill$[rsp], 0
	jne	SHORT $LN82@mg_handle_
; Line 586
	jmp	SHORT $LN5@mg_handle_
$LN82@mg_handle_:
; Line 590
	lea	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR next$15[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR used$18[rsp], rax
; Line 591
	mov	eax, 8192				; 00002000H
	sub	rax, QWORD PTR used$18[rsp]
	mov	rcx, QWORD PTR used$18[rsp]
	lea	rcx, QWORD PTR buf$[rsp+rcx]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR buf$[rsp]
	call	memmove
; Line 592
	mov	eax, DWORD PTR used$18[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 593
	jmp	$LN4@mg_handle_
$LN5@mg_handle_:
; Line 595
	mov	eax, DWORD PTR field_count$[rsp]
	jmp	$LN1@mg_handle_
$LN49@mg_handle_:
; Line 598
	mov	r8d, 20
	lea	rdx, OFFSET FLAT:$SG167076
	mov	rcx, QWORD PTR content_type$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	$LN83@mg_handle_
; Line 610
	mov	DWORD PTR all_data_read$13[rsp], 0
; Line 612
	mov	r8d, 1192				; 000004a8H
	xor	edx, edx
	lea	rcx, QWORD PTR part_header$42[rsp]
	call	memset
; Line 615
	mov	QWORD PTR bl$3[rsp], 20
$LN10@mg_handle_:
; Line 616
	mov	rax, QWORD PTR bl$3[rsp]
	mov	rcx, QWORD PTR content_type$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN11@mg_handle_
; Line 617
	mov	rax, QWORD PTR bl$3[rsp]
	inc	rax
	mov	QWORD PTR bl$3[rsp], rax
; Line 618
	jmp	SHORT $LN10@mg_handle_
$LN11@mg_handle_:
; Line 621
	mov	rax, QWORD PTR bl$3[rsp]
	mov	rcx, QWORD PTR content_type$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 9
	lea	rdx, OFFSET FLAT:$SG167078
	mov	rcx, rax
	call	mg_strncasecmp
	test	eax, eax
	je	SHORT $LN84@mg_handle_
; Line 623
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN84@mg_handle_:
; Line 627
	mov	rax, QWORD PTR content_type$[rsp]
	mov	rcx, QWORD PTR bl$3[rsp]
	lea	rax, QWORD PTR [rax+rcx+9]
	mov	QWORD PTR fbeg$2[rsp], rax
; Line 628
	mov	rcx, QWORD PTR fbeg$2[rsp]
	call	strlen
	mov	QWORD PTR bl$3[rsp], rax
; Line 629
	mov	rax, QWORD PTR bl$3[rsp]
	inc	rax
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR boundary$1[rsp], rax
; Line 630
	cmp	QWORD PTR boundary$1[rsp], 0
	jne	SHORT $LN85@mg_handle_
; Line 632
	mov	eax, DWORD PTR bl$3[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, OFFSET FLAT:$SG167080
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167081
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 635				; 0000027bH
	lea	r8, OFFSET FLAT:$SG167082
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 636
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN85@mg_handle_:
; Line 638
	mov	r8, QWORD PTR bl$3[rsp]
	mov	rdx, QWORD PTR fbeg$2[rsp]
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	memcpy
; Line 639
	mov	rax, QWORD PTR bl$3[rsp]
	mov	rcx, QWORD PTR boundary$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 643
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR boundary$1[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	$LN86@mg_handle_
; Line 644
	mov	rax, QWORD PTR boundary$1[rsp]
	inc	rax
	mov	edx, 34					; 00000022H
	mov	rcx, rax
	call	?strchr@@YAPEADQEADH@Z			; strchr
	mov	QWORD PTR hbuf$16[rsp], rax
; Line 645
	cmp	QWORD PTR hbuf$16[rsp], 0
	je	SHORT $LN88@mg_handle_
	mov	rax, QWORD PTR hbuf$16[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	je	SHORT $LN87@mg_handle_
$LN88@mg_handle_:
; Line 647
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 648
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN87@mg_handle_:
; Line 650
	mov	rax, QWORD PTR hbuf$16[rsp]
	mov	BYTE PTR [rax], 0
; Line 651
	mov	rax, QWORD PTR boundary$1[rsp]
	inc	rax
	mov	r8, QWORD PTR bl$3[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	memmove
; Line 652
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	strlen
	mov	QWORD PTR bl$3[rsp], rax
$LN86@mg_handle_:
; Line 656
	cmp	QWORD PTR bl$3[rsp], 70			; 00000046H
	jbe	SHORT $LN89@mg_handle_
; Line 668
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 669
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN89@mg_handle_:
; Line 671
	cmp	QWORD PTR bl$3[rsp], 4
	jae	SHORT $LN90@mg_handle_
; Line 674
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 675
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN90@mg_handle_:
; Line 678
	mov	DWORD PTR part_no$17[rsp], 0
	jmp	SHORT $LN14@mg_handle_
$LN12@mg_handle_:
	mov	eax, DWORD PTR part_no$17[rsp]
	inc	eax
	mov	DWORD PTR part_no$17[rsp], eax
$LN14@mg_handle_:
; Line 681
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	ecx, 8191				; 00001fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR to_read$29[rsp], rax
; Line 686
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	lea	rax, QWORD PTR buf$[rsp+rax]
	mov	r8, QWORD PTR to_read$29[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR r$[rsp], eax
; Line 687
	cmp	DWORD PTR r$[rsp], 0
	jl	SHORT $LN92@mg_handle_
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN91@mg_handle_
	cmp	DWORD PTR all_data_read$13[rsp], 0
	je	SHORT $LN91@mg_handle_
$LN92@mg_handle_:
; Line 689
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 690
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN91@mg_handle_:
; Line 692
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN93@mg_handle_
; Line 693
	cmp	DWORD PTR buf_fill$[rsp], 0
	jne	SHORT $LN163@mg_handle_
	mov	DWORD PTR tv498[rsp], 1
	jmp	SHORT $LN164@mg_handle_
$LN163@mg_handle_:
	mov	DWORD PTR tv498[rsp], 0
$LN164@mg_handle_:
	mov	eax, DWORD PTR tv498[rsp]
	mov	DWORD PTR all_data_read$13[rsp], eax
$LN93@mg_handle_:
; Line 696
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 697
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	QWORD PTR $T37[rsp], rax
	cmp	QWORD PTR $T37[rsp], 8192		; 00002000H
	jae	SHORT $LN165@mg_handle_
	jmp	SHORT $LN166@mg_handle_
$LN165@mg_handle_:
	call	__report_rangecheckfailure
$LN166@mg_handle_:
	mov	rax, QWORD PTR $T37[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
; Line 698
	cmp	DWORD PTR buf_fill$[rsp], 1
	jge	SHORT $LN94@mg_handle_
; Line 700
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 701
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN94@mg_handle_:
; Line 704
	cmp	DWORD PTR part_no$17[rsp], 0
	jne	$LN95@mg_handle_
; Line 705
	mov	DWORD PTR d$5[rsp], 0
$LN15@mg_handle_:
; Line 706
	mov	eax, DWORD PTR buf_fill$[rsp]
	cmp	DWORD PTR d$5[rsp], eax
	jge	SHORT $LN16@mg_handle_
	movsxd	rax, DWORD PTR d$5[rsp]
	movsx	eax, BYTE PTR buf$[rsp+rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN16@mg_handle_
; Line 707
	mov	eax, DWORD PTR d$5[rsp]
	inc	eax
	mov	DWORD PTR d$5[rsp], eax
; Line 708
	jmp	SHORT $LN15@mg_handle_
$LN16@mg_handle_:
; Line 709
	cmp	DWORD PTR d$5[rsp], 0
	jle	$LN96@mg_handle_
	movsxd	rax, DWORD PTR d$5[rsp]
	movsx	eax, BYTE PTR buf$[rsp+rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN96@mg_handle_
; Line 710
	mov	eax, DWORD PTR d$5[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	movsxd	rcx, DWORD PTR d$5[rsp]
	lea	rcx, QWORD PTR buf$[rsp+rcx]
	mov	r8d, eax
	mov	rdx, rcx
	lea	rcx, QWORD PTR buf$[rsp]
	call	memmove
; Line 711
	mov	eax, DWORD PTR d$5[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 712
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	QWORD PTR $T38[rsp], rax
	cmp	QWORD PTR $T38[rsp], 8192		; 00002000H
	jae	SHORT $LN167@mg_handle_
	jmp	SHORT $LN168@mg_handle_
$LN167@mg_handle_:
	call	__report_rangecheckfailure
$LN168@mg_handle_:
	mov	rax, QWORD PTR $T38[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
$LN96@mg_handle_:
$LN95@mg_handle_:
; Line 716
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR buf$[rsp+rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN98@mg_handle_
	mov	eax, 1
	imul	rax, rax, 1
	movsx	eax, BYTE PTR buf$[rsp+rax]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN97@mg_handle_
$LN98@mg_handle_:
; Line 718
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 719
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN97@mg_handle_:
; Line 721
	lea	rax, QWORD PTR buf$[rsp+2]
	mov	r8, QWORD PTR bl$3[rsp]
	mov	rdx, QWORD PTR boundary$1[rsp]
	mov	rcx, rax
	call	strncmp
	test	eax, eax
	je	SHORT $LN99@mg_handle_
; Line 723
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 724
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN99@mg_handle_:
; Line 726
	mov	rax, QWORD PTR bl$3[rsp]
	movsx	eax, BYTE PTR buf$[rsp+rax+2]
	cmp	eax, 13
	jne	SHORT $LN101@mg_handle_
	mov	rax, QWORD PTR bl$3[rsp]
	movsx	eax, BYTE PTR buf$[rsp+rax+3]
	cmp	eax, 10
	je	SHORT $LN100@mg_handle_
$LN101@mg_handle_:
; Line 730
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	rcx, QWORD PTR bl$3[rsp]
	add	rcx, 6
	cmp	rax, rcx
	jne	SHORT $LN103@mg_handle_
	mov	rax, QWORD PTR bl$3[rsp]
	lea	rax, QWORD PTR buf$[rsp+rax+2]
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG167101
	mov	rcx, rax
	call	strncmp
	test	eax, eax
	je	SHORT $LN102@mg_handle_
$LN103@mg_handle_:
; Line 732
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 733
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN102@mg_handle_:
; Line 736
	jmp	$LN13@mg_handle_
$LN100@mg_handle_:
; Line 740
	mov	rax, QWORD PTR bl$3[rsp]
	lea	rax, QWORD PTR buf$[rsp+rax+4]
	mov	QWORD PTR hbuf$16[rsp], rax
; Line 741
	lea	rdx, OFFSET FLAT:$SG167102
	mov	rcx, QWORD PTR hbuf$16[rsp]
	call	?strstr@@YAPEADQEADQEBD@Z		; strstr
	mov	QWORD PTR hend$8[rsp], rax
; Line 742
	cmp	QWORD PTR hend$8[rsp], 0
	jne	SHORT $LN104@mg_handle_
; Line 744
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 745
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN104@mg_handle_:
; Line 748
	lea	rdx, QWORD PTR part_header$42[rsp+152]
	lea	rcx, QWORD PTR hbuf$16[rsp]
	call	?parse_http_headers@@YAHPEAPEADQEAUmg_header@@@Z ; parse_http_headers
	mov	DWORD PTR part_header$42[rsp+144], eax
; Line 750
	mov	rax, QWORD PTR hend$8[rsp]
	add	rax, 2
	cmp	rax, QWORD PTR hbuf$16[rsp]
	je	SHORT $LN105@mg_handle_
; Line 752
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 753
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN105@mg_handle_:
; Line 757
	mov	rax, QWORD PTR hend$8[rsp]
	add	rax, 4
	mov	QWORD PTR hend$8[rsp], rax
; Line 761
	lea	r8, OFFSET FLAT:$SG167105
	mov	edx, DWORD PTR part_header$42[rsp+144]
	lea	rcx, QWORD PTR part_header$42[rsp+152]
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	mov	QWORD PTR content_disp$27[rsp], rax
; Line 764
	cmp	QWORD PTR content_disp$27[rsp], 0
	jne	SHORT $LN106@mg_handle_
; Line 766
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 767
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN106@mg_handle_:
; Line 772
	lea	rdx, OFFSET FLAT:$SG167107
	mov	rcx, QWORD PTR content_disp$27[rsp]
	call	strstr
	mov	QWORD PTR nbeg$4[rsp], rax
$LN17@mg_handle_:
; Line 773
	cmp	QWORD PTR nbeg$4[rsp], 0
	je	SHORT $LN18@mg_handle_
	mov	rax, QWORD PTR nbeg$4[rsp]
	dec	rax
	lea	rdx, OFFSET FLAT:$SG167108
	mov	rcx, rax
	call	strcspn
	test	rax, rax
	je	SHORT $LN18@mg_handle_
; Line 775
	mov	rax, QWORD PTR nbeg$4[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG167109
	mov	rcx, rax
	call	strstr
	mov	QWORD PTR nbeg$4[rsp], rax
; Line 776
	jmp	SHORT $LN17@mg_handle_
$LN18@mg_handle_:
; Line 780
	mov	rax, QWORD PTR nbeg$4[rsp]
	mov	QWORD PTR nend$20[rsp], rax
; Line 785
	cmp	QWORD PTR nbeg$4[rsp], 0
	je	SHORT $LN107@mg_handle_
; Line 786
	mov	rax, QWORD PTR nbeg$4[rsp]
	add	rax, 6
	mov	QWORD PTR nbeg$4[rsp], rax
; Line 787
	mov	edx, 34					; 00000022H
	mov	rcx, QWORD PTR nbeg$4[rsp]
	call	strchr
	mov	QWORD PTR nend$20[rsp], rax
; Line 788
	cmp	QWORD PTR nend$20[rsp], 0
	jne	SHORT $LN109@mg_handle_
; Line 790
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 791
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN109@mg_handle_:
; Line 793
	jmp	$LN108@mg_handle_
$LN107@mg_handle_:
; Line 795
	lea	rdx, OFFSET FLAT:$SG167113
	mov	rcx, QWORD PTR content_disp$27[rsp]
	call	strstr
	mov	QWORD PTR nbeg$4[rsp], rax
$LN19@mg_handle_:
; Line 796
	cmp	QWORD PTR nbeg$4[rsp], 0
	je	SHORT $LN20@mg_handle_
	mov	rax, QWORD PTR nbeg$4[rsp]
	dec	rax
	lea	rdx, OFFSET FLAT:$SG167114
	mov	rcx, rax
	call	strcspn
	test	rax, rax
	je	SHORT $LN20@mg_handle_
; Line 798
	mov	rax, QWORD PTR nbeg$4[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG167115
	mov	rcx, rax
	call	strstr
	mov	QWORD PTR nbeg$4[rsp], rax
; Line 799
	jmp	SHORT $LN19@mg_handle_
$LN20@mg_handle_:
; Line 800
	cmp	QWORD PTR nbeg$4[rsp], 0
	jne	SHORT $LN110@mg_handle_
; Line 802
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 803
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN110@mg_handle_:
; Line 805
	mov	rax, QWORD PTR nbeg$4[rsp]
	add	rax, 5
	mov	QWORD PTR nbeg$4[rsp], rax
; Line 814
	lea	rdx, OFFSET FLAT:$SG167117
	mov	rcx, QWORD PTR nbeg$4[rsp]
	call	strcspn
	mov	rcx, QWORD PTR nbeg$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nend$20[rsp], rax
$LN108@mg_handle_:
; Line 819
	lea	rdx, OFFSET FLAT:$SG167118
	mov	rcx, QWORD PTR content_disp$27[rsp]
	call	strstr
	mov	QWORD PTR fbeg$2[rsp], rax
$LN21@mg_handle_:
; Line 820
	cmp	QWORD PTR fbeg$2[rsp], 0
	je	SHORT $LN22@mg_handle_
	mov	rax, QWORD PTR fbeg$2[rsp]
	dec	rax
	lea	rdx, OFFSET FLAT:$SG167119
	mov	rcx, rax
	call	strcspn
	test	rax, rax
	je	SHORT $LN22@mg_handle_
; Line 822
	mov	rax, QWORD PTR fbeg$2[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG167120
	mov	rcx, rax
	call	strstr
	mov	QWORD PTR fbeg$2[rsp], rax
; Line 823
	jmp	SHORT $LN21@mg_handle_
$LN22@mg_handle_:
; Line 827
	mov	rax, QWORD PTR fbeg$2[rsp]
	mov	QWORD PTR fend$19[rsp], rax
; Line 830
	cmp	QWORD PTR fbeg$2[rsp], 0
	je	SHORT $LN111@mg_handle_
; Line 831
	mov	rax, QWORD PTR fbeg$2[rsp]
	add	rax, 10
	mov	QWORD PTR fbeg$2[rsp], rax
; Line 832
	mov	edx, 34					; 00000022H
	mov	rcx, QWORD PTR fbeg$2[rsp]
	call	strchr
	mov	QWORD PTR fend$19[rsp], rax
; Line 834
	cmp	QWORD PTR fend$19[rsp], 0
	jne	SHORT $LN112@mg_handle_
; Line 837
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 838
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN112@mg_handle_:
$LN111@mg_handle_:
; Line 844
	cmp	QWORD PTR fbeg$2[rsp], 0
	jne	$LN113@mg_handle_
; Line 846
	lea	rdx, OFFSET FLAT:$SG167124
	mov	rcx, QWORD PTR content_disp$27[rsp]
	call	strstr
	mov	QWORD PTR fbeg$2[rsp], rax
$LN23@mg_handle_:
; Line 847
	cmp	QWORD PTR fbeg$2[rsp], 0
	je	SHORT $LN24@mg_handle_
	mov	rax, QWORD PTR fbeg$2[rsp]
	dec	rax
	lea	rdx, OFFSET FLAT:$SG167125
	mov	rcx, rax
	call	strcspn
	test	rax, rax
	je	SHORT $LN24@mg_handle_
; Line 849
	mov	rax, QWORD PTR fbeg$2[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG167126
	mov	rcx, rax
	call	strstr
	mov	QWORD PTR fbeg$2[rsp], rax
; Line 850
	jmp	SHORT $LN23@mg_handle_
$LN24@mg_handle_:
; Line 851
	cmp	QWORD PTR fbeg$2[rsp], 0
	je	SHORT $LN114@mg_handle_
; Line 852
	mov	rax, QWORD PTR fbeg$2[rsp]
	add	rax, 9
	mov	QWORD PTR fbeg$2[rsp], rax
; Line 853
	lea	rdx, OFFSET FLAT:$SG167128
	mov	rcx, QWORD PTR fbeg$2[rsp]
	call	strcspn
	mov	rcx, QWORD PTR fbeg$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR fend$19[rsp], rax
$LN114@mg_handle_:
$LN113@mg_handle_:
; Line 857
	cmp	QWORD PTR fbeg$2[rsp], 0
	je	SHORT $LN117@mg_handle_
	cmp	QWORD PTR fend$19[rsp], 0
	jne	SHORT $LN115@mg_handle_
$LN117@mg_handle_:
; Line 858
	mov	QWORD PTR fbeg$2[rsp], 0
; Line 859
	mov	QWORD PTR fend$19[rsp], 0
; Line 860
	mov	QWORD PTR fnlen$28[rsp], 0
; Line 861
	jmp	SHORT $LN116@mg_handle_
$LN115@mg_handle_:
; Line 862
	mov	rax, QWORD PTR fbeg$2[rsp]
	mov	rcx, QWORD PTR fend$19[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR fnlen$28[rsp], rax
$LN116@mg_handle_:
; Line 868
	mov	rax, QWORD PTR nend$20[rsp]
	cmp	QWORD PTR fbeg$2[rsp], rax
	jg	SHORT $LN118@mg_handle_
	mov	rax, QWORD PTR fend$19[rsp]
	cmp	QWORD PTR nbeg$4[rsp], rax
	jg	SHORT $LN118@mg_handle_
; Line 870
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 871
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN118@mg_handle_:
; Line 875
	mov	r8d, 512				; 00000200H
	xor	edx, edx
	lea	rcx, QWORD PTR path$[rsp]
	call	memset
; Line 876
	mov	eax, DWORD PTR field_count$[rsp]
	inc	eax
	mov	DWORD PTR field_count$[rsp], eax
; Line 877
	mov	rax, QWORD PTR fnlen$28[rsp]
	mov	QWORD PTR tv754[rsp], rax
	cmp	QWORD PTR fnlen$28[rsp], 0
	jbe	SHORT $LN169@mg_handle_
	mov	rax, QWORD PTR fbeg$2[rsp]
	mov	QWORD PTR tv747[rsp], rax
	jmp	SHORT $LN170@mg_handle_
$LN169@mg_handle_:
	mov	QWORD PTR tv747[rsp], 0
$LN170@mg_handle_:
	mov	rax, QWORD PTR nbeg$4[rsp]
	mov	rcx, QWORD PTR nend$20[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	QWORD PTR [rsp+48], 511			; 000001ffH
	lea	rcx, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR tv754[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR tv747[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR nbeg$4[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?url_encoded_field_found@@YAHPEBUmg_connection@@PEBD_K12PEAD2PEAUmg_form_data_handler@@@Z ; url_encoded_field_found
	mov	DWORD PTR field_storage$[rsp], eax
; Line 888
	lea	rax, QWORD PTR buf$[rsp]
	sub	rax, QWORD PTR hbuf$16[rsp]
	movsxd	rcx, DWORD PTR buf_fill$[rsp]
	add	rax, rcx
	mov	r9, QWORD PTR bl$3[rsp]
	mov	r8, QWORD PTR boundary$1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR hbuf$16[rsp]
	call	?search_boundary@@YAPEBDPEBD_K01@Z	; search_boundary
	mov	QWORD PTR next$21[rsp], rax
; Line 894
	cmp	DWORD PTR field_storage$[rsp], 2
	jne	$LN119@mg_handle_
; Line 896
	lea	r9, QWORD PTR fstore$[rsp]
	mov	r8d, 2
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN120@mg_handle_
; Line 897
	mov	QWORD PTR fstore$[rsp+32], 0
$LN120@mg_handle_:
; Line 899
	mov	QWORD PTR file_size$[rsp], 0
; Line 901
	cmp	QWORD PTR fstore$[rsp+32], 0
	jne	SHORT $LN121@mg_handle_
; Line 902
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167136
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167137
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 905				; 00000389H
	lea	r8, OFFSET FLAT:$SG167138
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
$LN121@mg_handle_:
$LN119@mg_handle_:
; Line 910
	mov	DWORD PTR get_block$7[rsp], 0
$LN25@mg_handle_:
; Line 911
	cmp	QWORD PTR next$21[rsp], 0
	jne	$LN26@mg_handle_
; Line 914
	lea	rax, QWORD PTR buf$[rsp]
	sub	rax, QWORD PTR hend$8[rsp]
	movsxd	rcx, DWORD PTR buf_fill$[rsp]
	add	rax, rcx
	mov	QWORD PTR towrite$10[rsp], rax
; Line 916
	mov	rax, QWORD PTR bl$3[rsp]
	add	rax, 4
	cmp	QWORD PTR towrite$10[rsp], rax
	jae	SHORT $LN122@mg_handle_
; Line 919
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 920
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN122@mg_handle_:
; Line 926
	mov	rax, QWORD PTR bl$3[rsp]
	add	rax, 4
	mov	rcx, QWORD PTR towrite$10[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR towrite$10[rsp], rax
; Line 928
	cmp	DWORD PTR field_storage$[rsp], 1
	jne	$LN123@mg_handle_
; Line 929
	mov	rax, QWORD PTR hend$8[rsp]
	mov	QWORD PTR tv801[rsp], rax
	cmp	DWORD PTR get_block$7[rsp], 0
	jle	SHORT $LN171@mg_handle_
	mov	QWORD PTR tv794[rsp], 0
	jmp	SHORT $LN172@mg_handle_
$LN171@mg_handle_:
	mov	rax, QWORD PTR nbeg$4[rsp]
	mov	rcx, QWORD PTR nend$20[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv794[rsp], rax
$LN172@mg_handle_:
	cmp	DWORD PTR get_block$7[rsp], 0
	jle	SHORT $LN173@mg_handle_
	mov	QWORD PTR tv797[rsp], 0
	jmp	SHORT $LN174@mg_handle_
$LN173@mg_handle_:
	mov	rax, QWORD PTR nbeg$4[rsp]
	mov	QWORD PTR tv797[rsp], rax
$LN174@mg_handle_:
	mov	rax, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR towrite$10[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv801[rsp]
	mov	r8, QWORD PTR tv794[rsp]
	mov	rdx, QWORD PTR tv797[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z ; unencoded_field_get
	mov	DWORD PTR r$[rsp], eax
; Line 937
	mov	eax, DWORD PTR get_block$7[rsp]
	inc	eax
	mov	DWORD PTR get_block$7[rsp], eax
; Line 938
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN124@mg_handle_
; Line 940
	jmp	$LN26@mg_handle_
$LN124@mg_handle_:
; Line 942
	cmp	DWORD PTR r$[rsp], 8
	jne	SHORT $LN125@mg_handle_
; Line 944
	mov	DWORD PTR field_storage$[rsp], 0
$LN125@mg_handle_:
$LN123@mg_handle_:
; Line 949
	cmp	DWORD PTR field_storage$[rsp], 2
	jne	$LN126@mg_handle_
; Line 950
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	$LN127@mg_handle_
; Line 953
	mov	r9, QWORD PTR fstore$[rsp+32]
	mov	r8, QWORD PTR towrite$10[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR hend$8[rsp]
	call	fwrite
	mov	QWORD PTR n$24[rsp], rax
; Line 954
	mov	rax, QWORD PTR towrite$10[rsp]
	cmp	QWORD PTR n$24[rsp], rax
	jne	SHORT $LN129@mg_handle_
	mov	rcx, QWORD PTR fstore$[rsp+32]
	call	ferror
	test	eax, eax
	je	SHORT $LN128@mg_handle_
$LN129@mg_handle_:
; Line 955
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167147
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167148
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 958				; 000003beH
	lea	r8, OFFSET FLAT:$SG167149
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 959
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 960
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN128@mg_handle_:
; Line 962
	mov	rax, QWORD PTR n$24[rsp]
	mov	rcx, QWORD PTR file_size$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR file_size$[rsp], rax
$LN127@mg_handle_:
$LN126@mg_handle_:
; Line 967
	mov	rax, QWORD PTR bl$3[rsp]
	add	rax, 4
	mov	rcx, QWORD PTR towrite$10[rsp]
	mov	rdx, QWORD PTR hend$8[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR buf$[rsp]
	call	memmove
; Line 968
	mov	rax, QWORD PTR bl$3[rsp]
	add	rax, 4
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 969
	lea	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR hend$8[rsp], rax
; Line 972
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	ecx, 8191				; 00001fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR to_read$29[rsp], rax
; Line 973
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	lea	rax, QWORD PTR buf$[rsp+rax]
	mov	r8, QWORD PTR to_read$29[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR r$[rsp], eax
; Line 974
	cmp	DWORD PTR r$[rsp], 0
	jl	SHORT $LN131@mg_handle_
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN130@mg_handle_
	cmp	DWORD PTR all_data_read$13[rsp], 0
	je	SHORT $LN130@mg_handle_
$LN131@mg_handle_:
; Line 977
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	SHORT $LN132@mg_handle_
; Line 978
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 979
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN132@mg_handle_:
; Line 982
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 983
	mov	eax, -1
	jmp	$LN1@mg_handle_
$LN130@mg_handle_:
; Line 987
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 988
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	QWORD PTR $T39[rsp], rax
	cmp	QWORD PTR $T39[rsp], 8192		; 00002000H
	jae	SHORT $LN175@mg_handle_
	jmp	SHORT $LN176@mg_handle_
$LN175@mg_handle_:
	call	__report_rangecheckfailure
$LN176@mg_handle_:
	mov	rax, QWORD PTR $T39[rsp]
	mov	BYTE PTR buf$[rsp+rax], 0
; Line 992
	movsxd	rax, DWORD PTR buf_fill$[rsp]
	mov	r9, QWORD PTR bl$3[rsp]
	mov	r8, QWORD PTR boundary$1[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR buf$[rsp]
	call	?search_boundary@@YAPEBDPEBD_K01@Z	; search_boundary
	mov	QWORD PTR next$21[rsp], rax
; Line 994
	cmp	QWORD PTR next$21[rsp], 0
	jne	SHORT $LN133@mg_handle_
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN133@mg_handle_
; Line 996
	mov	DWORD PTR all_data_read$13[rsp], 1
$LN133@mg_handle_:
; Line 998
	jmp	$LN25@mg_handle_
$LN26@mg_handle_:
; Line 1000
	cmp	QWORD PTR next$21[rsp], 0
	je	SHORT $LN177@mg_handle_
	mov	rax, QWORD PTR hend$8[rsp]
	mov	rcx, QWORD PTR next$21[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv864[rsp], rax
	jmp	SHORT $LN178@mg_handle_
$LN177@mg_handle_:
	mov	QWORD PTR tv864[rsp], 0
$LN178@mg_handle_:
	mov	rax, QWORD PTR tv864[rsp]
	mov	QWORD PTR towrite$10[rsp], rax
; Line 1002
	cmp	DWORD PTR field_storage$[rsp], 1
	jne	$LN134@mg_handle_
; Line 1004
	mov	rax, QWORD PTR hend$8[rsp]
	mov	QWORD PTR tv879[rsp], rax
	cmp	DWORD PTR get_block$7[rsp], 0
	jle	SHORT $LN179@mg_handle_
	mov	QWORD PTR tv872[rsp], 0
	jmp	SHORT $LN180@mg_handle_
$LN179@mg_handle_:
	mov	rax, QWORD PTR nbeg$4[rsp]
	mov	rcx, QWORD PTR nend$20[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv872[rsp], rax
$LN180@mg_handle_:
	cmp	DWORD PTR get_block$7[rsp], 0
	jle	SHORT $LN181@mg_handle_
	mov	QWORD PTR tv875[rsp], 0
	jmp	SHORT $LN182@mg_handle_
$LN181@mg_handle_:
	mov	rax, QWORD PTR nbeg$4[rsp]
	mov	QWORD PTR tv875[rsp], rax
$LN182@mg_handle_:
	mov	rax, QWORD PTR fdh$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR towrite$10[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv879[rsp]
	mov	r8, QWORD PTR tv872[rsp]
	mov	rdx, QWORD PTR tv875[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?unencoded_field_get@@YAHPEBUmg_connection@@PEBD_K12PEAUmg_form_data_handler@@@Z ; unencoded_field_get
	mov	DWORD PTR r$[rsp], eax
; Line 1012
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN135@mg_handle_
; Line 1014
	jmp	$LN13@mg_handle_
$LN135@mg_handle_:
; Line 1016
	cmp	DWORD PTR r$[rsp], 8
	jne	SHORT $LN136@mg_handle_
; Line 1018
	mov	DWORD PTR field_storage$[rsp], 0
$LN136@mg_handle_:
$LN134@mg_handle_:
; Line 1023
	cmp	DWORD PTR field_storage$[rsp], 2
	jne	$LN137@mg_handle_
; Line 1025
	cmp	QWORD PTR fstore$[rsp+32], 0
	je	$LN138@mg_handle_
; Line 1026
	mov	r9, QWORD PTR fstore$[rsp+32]
	mov	r8, QWORD PTR towrite$10[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR hend$8[rsp]
	call	fwrite
	mov	QWORD PTR n$24[rsp], rax
; Line 1027
	mov	rax, QWORD PTR towrite$10[rsp]
	cmp	QWORD PTR n$24[rsp], rax
	jne	SHORT $LN141@mg_handle_
	mov	rcx, QWORD PTR fstore$[rsp+32]
	call	ferror
	test	eax, eax
	je	SHORT $LN139@mg_handle_
$LN141@mg_handle_:
; Line 1028
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167162
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167163
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1031				; 00000407H
	lea	r8, OFFSET FLAT:$SG167164
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 1032
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 1033
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
; Line 1034
	jmp	$LN140@mg_handle_
$LN139@mg_handle_:
; Line 1035
	mov	rax, QWORD PTR n$24[rsp]
	mov	rcx, QWORD PTR file_size$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR file_size$[rsp], rax
; Line 1036
	lea	rcx, QWORD PTR fstore$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
	mov	DWORD PTR r$[rsp], eax
; Line 1037
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN142@mg_handle_
; Line 1039
	mov	r9, QWORD PTR fdh$[rsp]
	mov	r8, QWORD PTR file_size$[rsp]
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?field_stored@@YAHPEBUmg_connection@@PEBD_JPEAUmg_form_data_handler@@@Z ; field_stored
	mov	DWORD PTR r$[rsp], eax
; Line 1040
	cmp	DWORD PTR r$[rsp], 16
	jne	SHORT $LN144@mg_handle_
; Line 1042
	jmp	$LN13@mg_handle_
$LN144@mg_handle_:
; Line 1044
	jmp	SHORT $LN143@mg_handle_
$LN142@mg_handle_:
; Line 1045
	lea	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG167168
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG167169
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1048				; 00000418H
	lea	r8, OFFSET FLAT:$SG167170
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 1049
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
$LN143@mg_handle_:
$LN140@mg_handle_:
; Line 1052
	mov	QWORD PTR fstore$[rsp+32], 0
$LN138@mg_handle_:
$LN137@mg_handle_:
; Line 1058
	mov	eax, DWORD PTR field_storage$[rsp]
	and	eax, 16
	cmp	eax, 16
	jne	SHORT $LN145@mg_handle_
; Line 1060
	jmp	SHORT $LN13@mg_handle_
$LN145@mg_handle_:
; Line 1064
	cmp	QWORD PTR next$21[rsp], 0
	je	SHORT $LN146@mg_handle_
; Line 1065
	lea	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR next$21[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 2
	mov	QWORD PTR used$30[rsp], rax
; Line 1066
	mov	eax, 8192				; 00002000H
	sub	rax, QWORD PTR used$30[rsp]
	mov	rcx, QWORD PTR used$30[rsp]
	lea	rcx, QWORD PTR buf$[rsp+rcx]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR buf$[rsp]
	call	memmove
; Line 1067
	mov	eax, DWORD PTR used$30[rsp]
	mov	ecx, DWORD PTR buf_fill$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_fill$[rsp], eax
; Line 1068
	jmp	SHORT $LN147@mg_handle_
$LN146@mg_handle_:
; Line 1069
	mov	DWORD PTR buf_fill$[rsp], 0
$LN147@mg_handle_:
; Line 1071
	jmp	$LN12@mg_handle_
$LN13@mg_handle_:
; Line 1074
	mov	rcx, QWORD PTR boundary$1[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 1075
	mov	eax, DWORD PTR field_count$[rsp]
	jmp	SHORT $LN1@mg_handle_
$LN83@mg_handle_:
; Line 1079
	mov	eax, -1
$LN1@mg_handle_:
$LN148@mg_handle_:
; Line 1080
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 10504				; 00002908H
	ret	0
mg_handle_form_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
tv140 = 40
conn$ = 64
mg_close_connection PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 17878
$LN16:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 17879
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN6@mg_close_c
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2272], 0
	jne	SHORT $LN5@mg_close_c
$LN6@mg_close_c:
; Line 17880
	jmp	$LN1@mg_close_c
$LN5@mg_close_c:
; Line 17884
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN7@mg_close_c
; Line 17885
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2428], 0
	je	SHORT $LN8@mg_close_c
; Line 17887
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 17888
	jmp	$LN1@mg_close_c
$LN8@mg_close_c:
$LN7@mg_close_c:
; Line 17891
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN9@mg_close_c
; Line 17896
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	DWORD PTR [rax+40], 1
; Line 17897
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2416], 1
; Line 17905
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@mg_close_c
$LN2@mg_close_c:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@mg_close_c:
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN3@mg_close_c
; Line 17906
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?mg_join_thread@@YAHPEAX@Z		; mg_join_thread
; Line 17907
	jmp	SHORT $LN2@mg_close_c
$LN3@mg_close_c:
$LN9@mg_close_c:
; Line 17911
	mov	rcx, QWORD PTR conn$[rsp]
	call	?close_connection@@YAXPEAUmg_connection@@@Z ; close_connection
; Line 17916
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 2
	je	SHORT $LN11@mg_close_c
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN10@mg_close_c
$LN11@mg_close_c:
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	QWORD PTR [rax+32144], 0
	je	SHORT $LN10@mg_close_c
; Line 17917
	mov	eax, 24
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:?ssl_sw@@3PAUssl_func@@A
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR [rax+32144]
	call	QWORD PTR tv140[rsp]
$LN10@mg_close_c:
; Line 17922
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN12@mg_close_c
; Line 17923
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	rcx, QWORD PTR [rax+104]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 17924
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 17925
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
	jmp	SHORT $LN13@mg_close_c
$LN12@mg_close_c:
; Line 17926
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	cmp	DWORD PTR [rax], 2
	jne	SHORT $LN14@mg_close_c
; Line 17927
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	mov	rcx, rax
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 17928
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
$LN14@mg_close_c:
$LN13@mg_close_c:
$LN1@mg_close_c:
; Line 17936
	add	rsp, 56					; 00000038H
	ret	0
mg_close_connection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
reqerr$ = 52
conn$ = 56
ap$ = 64
host$ = 96
port$ = 104
use_ssl$ = 112
ebuf$ = 120
ebuf_len$ = 128
fmt$ = 136
mg_download PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 18820
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 18826
	cmp	QWORD PTR ebuf_len$[rsp], 0
	jbe	SHORT $LN2@mg_downloa
; Line 18827
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ebuf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN2@mg_downloa:
; Line 18830
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 18833
	mov	rax, QWORD PTR ebuf_len$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf$[rsp]
	mov	r8d, DWORD PTR use_ssl$[rsp]
	mov	edx, DWORD PTR port$[rsp]
	mov	rcx, QWORD PTR host$[rsp]
	call	mg_connect_client
	mov	QWORD PTR conn$[rsp], rax
; Line 18835
	cmp	QWORD PTR conn$[rsp], 0
	je	$LN3@mg_downloa
; Line 18836
	mov	r8, QWORD PTR ap$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z ; mg_vprintf
	mov	DWORD PTR i$[rsp], eax
; Line 18837
	cmp	DWORD PTR i$[rsp], 0
	jg	SHORT $LN4@mg_downloa
; Line 18838
	lea	rax, OFFSET FLAT:$SG169071
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG169072
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ebuf_len$[rsp]
	mov	r8, QWORD PTR ebuf$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 18844
	jmp	SHORT $LN5@mg_downloa
$LN4@mg_downloa:
; Line 18846
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2444], 0
; Line 18847
	lea	r9, QWORD PTR reqerr$[rsp]
	mov	r8, QWORD PTR ebuf_len$[rsp]
	mov	rdx, QWORD PTR ebuf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?get_response@@YAHPEAUmg_connection@@PEAD_KPEAH@Z ; get_response
; Line 18850
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+40], rcx
$LN5@mg_downloa:
$LN3@mg_downloa:
; Line 18855
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ebuf$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN6@mg_downloa
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN6@mg_downloa
; Line 18856
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_close_connection
; Line 18857
	mov	QWORD PTR conn$[rsp], 0
$LN6@mg_downloa:
; Line 18860
	mov	QWORD PTR ap$[rsp], 0
; Line 18861
	mov	rax, QWORD PTR conn$[rsp]
; Line 18862
	add	rsp, 88					; 00000058H
	ret	0
mg_download ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
name_len$ = 36
s$ = 40
p$ = 48
end$ = 56
cookie_header$ = 80
var_name$ = 88
dst$ = 96
dst_size$ = 104
mg_get_cookie PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7207
$LN18:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 7209
	mov	DWORD PTR len$[rsp], -1
; Line 7211
	cmp	QWORD PTR dst$[rsp], 0
	je	SHORT $LN6@mg_get_coo
	cmp	QWORD PTR dst_size$[rsp], 0
	jne	SHORT $LN5@mg_get_coo
$LN6@mg_get_coo:
; Line 7212
	mov	eax, -2
	jmp	$LN1@mg_get_coo
$LN5@mg_get_coo:
; Line 7215
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7216
	cmp	QWORD PTR var_name$[rsp], 0
	je	SHORT $LN8@mg_get_coo
	mov	rax, QWORD PTR cookie_header$[rsp]
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN7@mg_get_coo
$LN8@mg_get_coo:
; Line 7217
	mov	eax, -1
	jmp	$LN1@mg_get_coo
$LN7@mg_get_coo:
; Line 7220
	mov	rcx, QWORD PTR var_name$[rsp]
	call	strlen
	mov	DWORD PTR name_len$[rsp], eax
; Line 7221
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR end$[rsp], rax
; Line 7222
	jmp	SHORT $LN4@mg_get_coo
$LN2@mg_get_coo:
	movsxd	rax, DWORD PTR name_len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rsp], rax
$LN4@mg_get_coo:
	mov	rdx, QWORD PTR var_name$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?mg_strcasestr@@YAPEBDPEBD0@Z		; mg_strcasestr
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	$LN3@mg_get_coo
; Line 7223
	movsxd	rax, DWORD PTR name_len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	$LN9@mg_get_coo
; Line 7225
	mov	rax, QWORD PTR cookie_header$[rsp]
	cmp	QWORD PTR s$[rsp], rax
	je	SHORT $LN11@mg_get_coo
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	$LN10@mg_get_coo
$LN11@mg_get_coo:
; Line 7226
	mov	eax, DWORD PTR name_len$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rsp], rax
; Line 7227
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR s$[rsp]
	call	strchr
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN12@mg_get_coo
; Line 7228
	mov	rax, QWORD PTR end$[rsp]
	mov	QWORD PTR p$[rsp], rax
$LN12@mg_get_coo:
; Line 7230
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 59					; 0000003bH
	jne	SHORT $LN13@mg_get_coo
; Line 7231
	mov	rax, QWORD PTR p$[rsp]
	dec	rax
	mov	QWORD PTR p$[rsp], rax
$LN13@mg_get_coo:
; Line 7233
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN14@mg_get_coo
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN14@mg_get_coo
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	cmp	QWORD PTR p$[rsp], rax
	jbe	SHORT $LN14@mg_get_coo
; Line 7234
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 7235
	mov	rax, QWORD PTR p$[rsp]
	dec	rax
	mov	QWORD PTR p$[rsp], rax
$LN14@mg_get_coo:
; Line 7237
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR dst_size$[rsp]
	jae	SHORT $LN15@mg_get_coo
; Line 7238
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$[rsp], eax
; Line 7239
	movsxd	rax, DWORD PTR len$[rsp]
	inc	rax
	mov	r8, rax
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR dst$[rsp]
	call	?mg_strlcpy@@YAXPEADPEBD_K@Z		; mg_strlcpy
; Line 7240
	jmp	SHORT $LN16@mg_get_coo
$LN15@mg_get_coo:
; Line 7241
	mov	DWORD PTR len$[rsp], -3
$LN16@mg_get_coo:
; Line 7243
	jmp	SHORT $LN3@mg_get_coo
$LN10@mg_get_coo:
$LN9@mg_get_coo:
; Line 7246
	jmp	$LN2@mg_get_coo
$LN3@mg_get_coo:
; Line 7247
	mov	eax, DWORD PTR len$[rsp]
$LN1@mg_get_coo:
; Line 7248
	add	rsp, 72					; 00000048H
	ret	0
mg_get_cookie ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num$ = 32
i$ = 36
b$ = 40
data$ = 64
form_fields$ = 72
num_form_fields$ = 80
mg_split_form_urlencoded PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7107
$LN31:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7110
	mov	DWORD PTR num$[rsp], 0
; Line 7112
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN14@mg_split_f
; Line 7114
	mov	eax, -1
	jmp	$LN1@mg_split_f
$LN14@mg_split_f:
; Line 7117
	cmp	QWORD PTR form_fields$[rsp], 0
	jne	SHORT $LN15@mg_split_f
	cmp	DWORD PTR num_form_fields$[rsp], 0
	jne	SHORT $LN15@mg_split_f
; Line 7119
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR data$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN16@mg_split_f
; Line 7120
	xor	eax, eax
	jmp	$LN1@mg_split_f
$LN16@mg_split_f:
; Line 7123
	mov	DWORD PTR num$[rsp], 1
$LN2@mg_split_f:
; Line 7124
	mov	rax, QWORD PTR data$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@mg_split_f
; Line 7125
	mov	rax, QWORD PTR data$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN17@mg_split_f
; Line 7126
	mov	eax, DWORD PTR num$[rsp]
	inc	eax
	mov	DWORD PTR num$[rsp], eax
$LN17@mg_split_f:
; Line 7128
	mov	rax, QWORD PTR data$[rsp]
	inc	rax
	mov	QWORD PTR data$[rsp], rax
; Line 7129
	jmp	SHORT $LN2@mg_split_f
$LN3@mg_split_f:
; Line 7130
	mov	eax, DWORD PTR num$[rsp]
	jmp	$LN1@mg_split_f
$LN15@mg_split_f:
; Line 7133
	cmp	QWORD PTR form_fields$[rsp], 0
	je	SHORT $LN19@mg_split_f
	cmp	DWORD PTR num_form_fields$[rsp], 0
	jg	SHORT $LN18@mg_split_f
$LN19@mg_split_f:
; Line 7135
	mov	eax, -1
	jmp	$LN1@mg_split_f
$LN18@mg_split_f:
; Line 7138
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@mg_split_f
$LN4@mg_split_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@mg_split_f:
	mov	eax, DWORD PTR num_form_fields$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@mg_split_f
$LN7@mg_split_f:
; Line 7140
	mov	rax, QWORD PTR data$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN20@mg_split_f
	mov	rax, QWORD PTR data$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 9
	jne	SHORT $LN8@mg_split_f
$LN20@mg_split_f:
; Line 7142
	mov	rax, QWORD PTR data$[rsp]
	inc	rax
	mov	QWORD PTR data$[rsp], rax
; Line 7143
	jmp	SHORT $LN7@mg_split_f
$LN8@mg_split_f:
; Line 7144
	mov	rax, QWORD PTR data$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN21@mg_split_f
; Line 7146
	jmp	$LN5@mg_split_f
$LN21@mg_split_f:
; Line 7148
	movsxd	rax, DWORD PTR num$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 7151
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR b$[rsp], rax
$LN9@mg_split_f:
; Line 7152
	mov	rax, QWORD PTR b$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN10@mg_split_f
	mov	rax, QWORD PTR b$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 38					; 00000026H
	je	SHORT $LN10@mg_split_f
	mov	rax, QWORD PTR b$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 61					; 0000003dH
	je	SHORT $LN10@mg_split_f
; Line 7153
	mov	rax, QWORD PTR b$[rsp]
	inc	rax
	mov	QWORD PTR b$[rsp], rax
; Line 7154
	jmp	SHORT $LN9@mg_split_f
$LN10@mg_split_f:
; Line 7156
	mov	rax, QWORD PTR b$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN22@mg_split_f
; Line 7158
	movsxd	rax, DWORD PTR num$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	mov	QWORD PTR [rcx+rax+8], 0
	jmp	SHORT $LN23@mg_split_f
$LN22@mg_split_f:
; Line 7159
	mov	rax, QWORD PTR b$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN24@mg_split_f
; Line 7161
	movsxd	rax, DWORD PTR num$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	mov	QWORD PTR [rcx+rax+8], 0
; Line 7162
	jmp	SHORT $LN25@mg_split_f
$LN24@mg_split_f:
; Line 7164
	mov	rax, QWORD PTR b$[rsp]
	mov	BYTE PTR [rax], 0
; Line 7166
	mov	rax, QWORD PTR b$[rsp]
	inc	rax
	mov	QWORD PTR data$[rsp], rax
; Line 7167
	movsxd	rax, DWORD PTR num$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN25@mg_split_f:
$LN23@mg_split_f:
; Line 7171
	mov	eax, DWORD PTR num$[rsp]
	inc	eax
	mov	DWORD PTR num$[rsp], eax
; Line 7174
	mov	edx, 38					; 00000026H
	mov	rcx, QWORD PTR data$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	mov	QWORD PTR b$[rsp], rax
; Line 7175
	cmp	QWORD PTR b$[rsp], 0
	jne	SHORT $LN26@mg_split_f
; Line 7177
	jmp	SHORT $LN5@mg_split_f
; Line 7178
	jmp	SHORT $LN27@mg_split_f
$LN26@mg_split_f:
; Line 7180
	mov	rax, QWORD PTR b$[rsp]
	mov	BYTE PTR [rax], 0
; Line 7182
	mov	rax, QWORD PTR b$[rsp]
	inc	rax
	mov	QWORD PTR data$[rsp], rax
$LN27@mg_split_f:
; Line 7184
	jmp	$LN4@mg_split_f
$LN5@mg_split_f:
; Line 7187
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@mg_split_f
$LN11@mg_split_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@mg_split_f:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@mg_split_f
; Line 7188
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN28@mg_split_f
; Line 7189
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	?url_decode_in_place@@YAXPEAD@Z		; url_decode_in_place
$LN28@mg_split_f:
; Line 7191
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN29@mg_split_f
; Line 7192
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR form_fields$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	?url_decode_in_place@@YAXPEAD@Z		; url_decode_in_place
$LN29@mg_split_f:
; Line 7194
	jmp	SHORT $LN11@mg_split_f
$LN12@mg_split_f:
; Line 7197
	mov	eax, DWORD PTR num$[rsp]
$LN1@mg_split_f:
; Line 7198
	add	rsp, 56					; 00000038H
	ret	0
mg_split_form_urlencoded ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
p$ = 56
name_len$ = 64
s$ = 72
e$ = 80
tv95 = 88
data$ = 112
data_len$ = 120
name$ = 128
dst$ = 136
dst_len$ = 144
occurrence$ = 152
mg_get_var2 PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7052
$LN17:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 7057
	cmp	QWORD PTR dst$[rsp], 0
	je	SHORT $LN7@mg_get_var
	cmp	QWORD PTR dst_len$[rsp], 0
	jne	SHORT $LN5@mg_get_var
$LN7@mg_get_var:
; Line 7058
	mov	DWORD PTR len$[rsp], -2
	jmp	$LN6@mg_get_var
$LN5@mg_get_var:
; Line 7059
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN10@mg_get_var
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN10@mg_get_var
	cmp	QWORD PTR data_len$[rsp], 0
	jne	SHORT $LN8@mg_get_var
$LN10@mg_get_var:
; Line 7060
	mov	DWORD PTR len$[rsp], -1
; Line 7061
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7062
	jmp	$LN9@mg_get_var
$LN8@mg_get_var:
; Line 7063
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	QWORD PTR name_len$[rsp], rax
; Line 7064
	mov	rax, QWORD PTR data_len$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR e$[rsp], rax
; Line 7065
	mov	DWORD PTR len$[rsp], -1
; Line 7066
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dst$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7069
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@mg_get_var
$LN2@mg_get_var:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN4@mg_get_var:
	mov	rax, QWORD PTR name_len$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR e$[rsp]
	jae	$LN3@mg_get_var
; Line 7071
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR p$[rsp], rax
	je	SHORT $LN12@mg_get_var
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 38					; 00000026H
	jne	$LN11@mg_get_var
$LN12@mg_get_var:
	mov	rax, QWORD PTR name_len$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 61					; 0000003dH
	jne	$LN11@mg_get_var
	mov	r8, QWORD PTR name_len$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	mg_strncasecmp
	test	eax, eax
	jne	$LN11@mg_get_var
	mov	rax, QWORD PTR occurrence$[rsp]
	mov	QWORD PTR tv95[rsp], rax
	mov	rax, QWORD PTR occurrence$[rsp]
	dec	rax
	mov	QWORD PTR occurrence$[rsp], rax
	cmp	QWORD PTR tv95[rsp], 0
	jne	$LN11@mg_get_var
; Line 7073
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR name_len$[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	QWORD PTR p$[rsp], rax
; Line 7076
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, 38					; 00000026H
	mov	rcx, QWORD PTR p$[rsp]
	call	memchr
	mov	QWORD PTR s$[rsp], rax
; Line 7077
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN13@mg_get_var
; Line 7078
	mov	rax, QWORD PTR e$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN13@mg_get_var:
; Line 7081
	mov	rax, QWORD PTR p$[rsp]
	cmp	QWORD PTR s$[rsp], rax
	jae	SHORT $LN14@mg_get_var
; Line 7082
	mov	eax, -3
	jmp	SHORT $LN1@mg_get_var
$LN14@mg_get_var:
; Line 7086
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR dst_len$[rsp]
	mov	r8, QWORD PTR dst$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR p$[rsp]
	call	mg_url_decode
	mov	DWORD PTR len$[rsp], eax
; Line 7090
	cmp	DWORD PTR len$[rsp], -1
	jne	SHORT $LN15@mg_get_var
; Line 7091
	mov	DWORD PTR len$[rsp], -2
$LN15@mg_get_var:
; Line 7093
	jmp	SHORT $LN3@mg_get_var
$LN11@mg_get_var:
; Line 7095
	jmp	$LN2@mg_get_var
$LN3@mg_get_var:
$LN9@mg_get_var:
$LN6@mg_get_var:
; Line 7098
	mov	eax, DWORD PTR len$[rsp]
$LN1@mg_get_var:
; Line 7099
	add	rsp, 104				; 00000068H
	ret	0
mg_get_var2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 64
data_len$ = 72
name$ = 80
dst$ = 88
dst_len$ = 96
mg_get_var PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 7040
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7041
	mov	QWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR dst_len$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR dst$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	rdx, QWORD PTR data_len$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	mg_get_var2
; Line 7042
	add	rsp, 56					; 00000038H
	ret	0
mg_get_var ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
name$ = 56
mg_get_header PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3856
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3857
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@mg_get_hea
; Line 3858
	xor	eax, eax
	jmp	SHORT $LN1@mg_get_hea
$LN2@mg_get_hea:
; Line 3861
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN3@mg_get_hea
; Line 3862
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 168				; 000000a8H
	mov	r8, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rcx+160]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	jmp	SHORT $LN1@mg_get_hea
$LN3@mg_get_hea:
; Line 3866
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	SHORT $LN4@mg_get_hea
; Line 3867
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 1248				; 000004e0H
	mov	r8, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	edx, DWORD PTR [rcx+1240]
	mov	rcx, rax
	call	?get_header@@YAPEBDPEBUmg_header@@HPEBD@Z ; get_header
	jmp	SHORT $LN1@mg_get_hea
$LN4@mg_get_hea:
; Line 3871
	xor	eax, eax
$LN1@mg_get_hea:
; Line 3872
	add	rsp, 40					; 00000028H
	ret	0
mg_get_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
x$2 = 40
chunkSize$3 = 44
read_ret$4 = 48
all_read$5 = 56
end$6 = 64
$T7 = 72
$T8 = 80
lenbuf$9 = 96
__$ArrayPad$ = 160
conn$ = 192
buf$ = 200
len$ = 208
mg_read	PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6619
$LN32:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6620
	cmp	QWORD PTR len$[rsp], 2147483647		; 7fffffffH
	jbe	SHORT $LN7@mg_read
; Line 6621
	mov	QWORD PTR len$[rsp], 2147483647		; 7fffffffH
$LN7@mg_read:
; Line 6624
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN8@mg_read
; Line 6625
	xor	eax, eax
	jmp	$LN1@mg_read
$LN8@mg_read:
; Line 6628
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 0
	je	$LN9@mg_read
; Line 6629
	mov	QWORD PTR all_read$5[rsp], 0
$LN2@mg_read:
; Line 6631
	cmp	QWORD PTR len$[rsp], 0
	jbe	$LN3@mg_read
; Line 6632
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 3
	jl	SHORT $LN10@mg_read
; Line 6634
	xor	eax, eax
	jmp	$LN1@mg_read
$LN10@mg_read:
; Line 6636
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2392], 1
	je	SHORT $LN11@mg_read
; Line 6638
	mov	eax, -1
	jmp	$LN1@mg_read
$LN11@mg_read:
; Line 6641
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2376]
	cmp	QWORD PTR [rax+2384], rcx
	je	$LN12@mg_read
; Line 6643
	mov	rax, QWORD PTR all_read$5[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR len$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z ; mg_read_inner
	mov	DWORD PTR read_ret$4[rsp], eax
; Line 6645
	cmp	DWORD PTR read_ret$4[rsp], 1
	jge	SHORT $LN14@mg_read
; Line 6647
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 2
; Line 6648
	mov	eax, -1
	jmp	$LN1@mg_read
$LN14@mg_read:
; Line 6651
	movsxd	rax, DWORD PTR read_ret$4[rsp]
	mov	rcx, QWORD PTR all_read$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR all_read$5[rsp], rax
; Line 6652
	movsxd	rax, DWORD PTR read_ret$4[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
; Line 6654
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rcx+2376]
	cmp	QWORD PTR [rax+2384], rcx
	jne	$LN15@mg_read
; Line 6658
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2376]
	add	rax, 2
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2376], rax
; Line 6660
	mov	r8d, 2
	lea	rdx, QWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z ; mg_read_inner
	cmp	eax, 2
	jne	SHORT $LN17@mg_read
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR x$2[rsp+rax]
	cmp	eax, 13
	jne	SHORT $LN17@mg_read
	mov	eax, 1
	imul	rax, rax, 1
	movsx	eax, BYTE PTR x$2[rsp+rax]
	cmp	eax, 10
	je	SHORT $LN16@mg_read
$LN17@mg_read:
; Line 6662
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 2
; Line 6663
	mov	eax, -1
	jmp	$LN1@mg_read
$LN16@mg_read:
$LN15@mg_read:
; Line 6667
	jmp	$LN13@mg_read
$LN12@mg_read:
; Line 6671
	mov	QWORD PTR end$6[rsp], 0
; Line 6672
	mov	DWORD PTR chunkSize$3[rsp], 0
; Line 6674
	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@mg_read
$LN4@mg_read:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN6@mg_read:
	cmp	QWORD PTR i$1[rsp], 63			; 0000003fH
	jae	$LN5@mg_read
; Line 6675
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2376]
	inc	rax
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2376], rax
; Line 6676
	mov	rax, QWORD PTR i$1[rsp]
	lea	rax, QWORD PTR lenbuf$9[rsp+rax]
	mov	r8d, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z ; mg_read_inner
	cmp	eax, 1
	je	SHORT $LN18@mg_read
; Line 6677
	mov	rax, QWORD PTR i$1[rsp]
	mov	QWORD PTR $T7[rsp], rax
	cmp	QWORD PTR $T7[rsp], 64			; 00000040H
	jae	SHORT $LN28@mg_read
	jmp	SHORT $LN29@mg_read
$LN28@mg_read:
	call	__report_rangecheckfailure
$LN29@mg_read:
	mov	rax, QWORD PTR $T7[rsp]
	mov	BYTE PTR lenbuf$9[rsp+rax], 0
$LN18@mg_read:
; Line 6680
	cmp	QWORD PTR i$1[rsp], 0
	jbe	SHORT $LN19@mg_read
	mov	rax, QWORD PTR i$1[rsp]
	movsx	eax, BYTE PTR lenbuf$9[rsp+rax]
	cmp	eax, 13
	jne	SHORT $LN19@mg_read
	mov	rax, QWORD PTR i$1[rsp]
	movsx	eax, BYTE PTR lenbuf$9[rsp+rax-1]
	cmp	eax, 13
	je	SHORT $LN19@mg_read
; Line 6681
	jmp	$LN4@mg_read
$LN19@mg_read:
; Line 6684
	cmp	QWORD PTR i$1[rsp], 1
	jbe	SHORT $LN20@mg_read
	mov	rax, QWORD PTR i$1[rsp]
	movsx	eax, BYTE PTR lenbuf$9[rsp+rax]
	cmp	eax, 10
	jne	SHORT $LN20@mg_read
	mov	rax, QWORD PTR i$1[rsp]
	movsx	eax, BYTE PTR lenbuf$9[rsp+rax-1]
	cmp	eax, 13
	jne	SHORT $LN20@mg_read
; Line 6685
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR $T8[rsp], rax
	cmp	QWORD PTR $T8[rsp], 64			; 00000040H
	jae	SHORT $LN30@mg_read
	jmp	SHORT $LN31@mg_read
$LN30@mg_read:
	call	__report_rangecheckfailure
$LN31@mg_read:
	mov	rax, QWORD PTR $T8[rsp]
	mov	BYTE PTR lenbuf$9[rsp+rax], 0
; Line 6686
	mov	r8d, 16
	lea	rdx, QWORD PTR end$6[rsp]
	lea	rcx, QWORD PTR lenbuf$9[rsp]
	call	strtoul
	mov	DWORD PTR chunkSize$3[rsp], eax
; Line 6687
	cmp	DWORD PTR chunkSize$3[rsp], 0
	jne	SHORT $LN21@mg_read
; Line 6689
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 3
$LN21@mg_read:
; Line 6691
	jmp	SHORT $LN5@mg_read
$LN20@mg_read:
; Line 6693
	mov	rax, QWORD PTR i$1[rsp]
	movzx	eax, BYTE PTR lenbuf$9[rsp+rax]
	mov	ecx, eax
	call	isxdigit
	test	eax, eax
	jne	SHORT $LN22@mg_read
; Line 6695
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 2
; Line 6696
	mov	eax, -1
	jmp	$LN1@mg_read
$LN22@mg_read:
; Line 6698
	jmp	$LN4@mg_read
$LN5@mg_read:
; Line 6699
	cmp	QWORD PTR end$6[rsp], 0
	je	SHORT $LN24@mg_read
	mov	rax, QWORD PTR end$6[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN23@mg_read
$LN24@mg_read:
; Line 6701
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 2
; Line 6702
	mov	eax, -1
	jmp	$LN1@mg_read
$LN23@mg_read:
; Line 6704
	cmp	DWORD PTR chunkSize$3[rsp], 0
	jne	SHORT $LN25@mg_read
; Line 6706
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2376]
	add	rax, 2
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2376], rax
; Line 6708
	mov	r8d, 2
	lea	rdx, QWORD PTR lenbuf$9[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z ; mg_read_inner
	cmp	eax, 2
	jne	SHORT $LN26@mg_read
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lenbuf$9[rsp+rax]
	cmp	eax, 13
	jne	SHORT $LN26@mg_read
	mov	eax, 1
	imul	rax, rax, 1
	movsx	eax, BYTE PTR lenbuf$9[rsp+rax]
	cmp	eax, 10
	jne	SHORT $LN26@mg_read
; Line 6709
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2392], 4
$LN26@mg_read:
; Line 6711
	jmp	SHORT $LN3@mg_read
$LN25@mg_read:
; Line 6715
	mov	eax, DWORD PTR chunkSize$3[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2376]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2376], rax
$LN13@mg_read:
; Line 6717
	jmp	$LN2@mg_read
$LN3@mg_read:
; Line 6719
	mov	eax, DWORD PTR all_read$5[rsp]
	jmp	SHORT $LN1@mg_read
$LN9@mg_read:
; Line 6721
	mov	r8, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_read_inner@@YAHPEAUmg_connection@@PEAX_K@Z ; mg_read_inner
$LN1@mg_read:
$LN27@mg_read:
; Line 6722
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	ret	0
mg_read	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 48
n$ = 52
len$ = 56
fi$ = 64
buf$ = 112
__$ArrayPad$ = 8304
conn$ = 8336
path$ = 8344
mg_store_body PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10563
$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8328				; 00002088H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10565
	mov	QWORD PTR len$[rsp], 0
; Line 10569
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2384], 0
	je	SHORT $LN4@mg_store_b
; Line 10570
	lea	rax, OFFSET FLAT:$SG165181
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG165182
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 10570				; 0000294aH
	lea	r8, OFFSET FLAT:$SG165183
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 10571
	mov	rax, -11
	jmp	$LN1@mg_store_b
$LN4@mg_store_b:
; Line 10574
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?put_dir@@YAHPEAUmg_connection@@PEBD@Z	; put_dir
	mov	DWORD PTR ret$[rsp], eax
; Line 10575
	cmp	DWORD PTR ret$[rsp], 0
	jge	SHORT $LN5@mg_store_b
; Line 10578
	movsxd	rax, DWORD PTR ret$[rsp]
	jmp	$LN1@mg_store_b
$LN5@mg_store_b:
; Line 10580
	cmp	DWORD PTR ret$[rsp], 1
	je	SHORT $LN6@mg_store_b
; Line 10582
	xor	eax, eax
	jmp	$LN1@mg_store_b
$LN6@mg_store_b:
; Line 10585
	lea	r9, QWORD PTR fi$[rsp]
	mov	r8d, 2
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN7@mg_store_b
; Line 10586
	mov	rax, -12
	jmp	$LN1@mg_store_b
$LN7@mg_store_b:
; Line 10589
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR ret$[rsp], eax
$LN2@mg_store_b:
; Line 10590
	cmp	DWORD PTR ret$[rsp], 0
	jle	$LN3@mg_store_b
; Line 10591
	movsxd	rax, DWORD PTR ret$[rsp]
	mov	r9, QWORD PTR fi$[rsp+32]
	mov	r8, rax
	mov	edx, 1
	lea	rcx, QWORD PTR buf$[rsp]
	call	fwrite
	mov	DWORD PTR n$[rsp], eax
; Line 10592
	mov	eax, DWORD PTR ret$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN8@mg_store_b
; Line 10593
	lea	rcx, QWORD PTR fi$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 10595
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
; Line 10596
	mov	rax, -13
	jmp	SHORT $LN1@mg_store_b
$LN8@mg_store_b:
; Line 10598
	movsxd	rax, DWORD PTR ret$[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$[rsp], rax
; Line 10599
	mov	r8d, 8192				; 00002000H
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_read
	mov	DWORD PTR ret$[rsp], eax
; Line 10600
	jmp	$LN2@mg_store_b
$LN3@mg_store_b:
; Line 10605
	lea	rcx, QWORD PTR fi$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
	test	eax, eax
	je	SHORT $LN9@mg_store_b
; Line 10606
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?remove_bad_file@@YAXPEBUmg_connection@@PEBD@Z ; remove_bad_file
; Line 10607
	mov	rax, -14
	jmp	SHORT $LN1@mg_store_b
$LN9@mg_store_b:
; Line 10610
	mov	rax, QWORD PTR len$[rsp]
$LN1@mg_store_b:
; Line 10611
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8328				; 00002088H
	ret	0
mg_store_body ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
__$ArrayPad$ = 88
conn$ = 112
path$ = 120
mime_type$ = 128
additional_headers$ = 136
mg_send_mime_file2 PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10470
$LN12:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10471
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 10473
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@mg_send_mi
; Line 10475
	jmp	$LN1@mg_send_mi
$LN2@mg_send_mi:
; Line 10478
	lea	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_stat@@YAHPEBUmg_connection@@PEBDPEAUmg_file_stat@@@Z ; mg_stat
	test	eax, eax
	je	$LN3@mg_send_mi
; Line 10480
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?is_not_modified@@YAHPEBUmg_connection@@PEBUmg_file_stat@@@Z ; is_not_modified
	test	eax, eax
	je	SHORT $LN5@mg_send_mi
; Line 10482
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_not_modified_static_file_request@@YAXPEAUmg_connection@@PEAUmg_file@@@Z ; handle_not_modified_static_file_request
; Line 10483
	jmp	$LN6@mg_send_mi
$LN5@mg_send_mi:
; Line 10485
	cmp	DWORD PTR file$[rsp+16], 0
	je	SHORT $LN7@mg_send_mi
; Line 10486
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2280]
	mov	ecx, 8
	imul	rcx, rcx, 35				; 00000023H
	lea	rdx, OFFSET FLAT:$SG165128
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	mg_strcasecmp
	test	eax, eax
	jne	SHORT $LN9@mg_send_mi
; Line 10488
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_directory_request@@YAXPEAUmg_connection@@PEBD@Z ; handle_directory_request
; Line 10489
	jmp	SHORT $LN10@mg_send_mi
$LN9@mg_send_mi:
; Line 10490
	lea	r9, OFFSET FLAT:$SG165129
	lea	r8, OFFSET FLAT:$SG165130
	mov	edx, 403				; 00000193H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN10@mg_send_mi:
; Line 10495
	jmp	SHORT $LN8@mg_send_mi
$LN7@mg_send_mi:
; Line 10496
	mov	rax, QWORD PTR additional_headers$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR mime_type$[rsp]
	lea	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?handle_static_file_request@@YAXPEAUmg_connection@@PEBDPEAUmg_file@@11@Z ; handle_static_file_request
$LN8@mg_send_mi:
$LN6@mg_send_mi:
; Line 10499
	jmp	SHORT $LN4@mg_send_mi
$LN3@mg_send_mi:
; Line 10500
	lea	r9, OFFSET FLAT:$SG165131
	lea	r8, OFFSET FLAT:$SG165132
	mov	edx, 404				; 00000194H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_http_error
$LN4@mg_send_mi:
$LN1@mg_send_mi:
; Line 10502
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
mg_send_mime_file2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
path$ = 56
mime_type$ = 64
mg_send_mime_file PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10460
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10461
	xor	r9d, r9d
	mov	r8, QWORD PTR mime_type$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_mime_file2
; Line 10462
	add	rsp, 40					; 00000028H
	ret	0
mg_send_mime_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
auth$ = 32
file$ = 40
__$ArrayPad$ = 80
conn$ = 112
realm$ = 120
filename$ = 128
mg_check_digest_access_authentication PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8844
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 8845
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 8848
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN3@mg_check_d
	cmp	QWORD PTR filename$[rsp], 0
	jne	SHORT $LN2@mg_check_d
$LN3@mg_check_d:
; Line 8849
	mov	eax, -1
	jmp	SHORT $LN1@mg_check_d
$LN2@mg_check_d:
; Line 8851
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN4@mg_check_d
; Line 8852
	mov	eax, -2
	jmp	SHORT $LN1@mg_check_d
$LN4@mg_check_d:
; Line 8855
	mov	r8, QWORD PTR realm$[rsp]
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?authorize@@YAHPEAUmg_connection@@PEAUmg_file@@PEBD@Z ; authorize
	mov	DWORD PTR auth$[rsp], eax
; Line 8857
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 8859
	mov	eax, DWORD PTR auth$[rsp]
$LN1@mg_check_d:
; Line 8860
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
mg_check_digest_access_authentication ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
realm$ = 56
mg_send_digest_access_authentication_request PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 8972
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 8973
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@mg_send_di
	mov	rax, QWORD PTR conn$[rsp]
	cmp	QWORD PTR [rax+2280], 0
	je	SHORT $LN2@mg_send_di
; Line 8974
	mov	rdx, QWORD PTR realm$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_authorization_request@@YAXPEAUmg_connection@@PEBD@Z ; send_authorization_request
; Line 8975
	xor	eax, eax
	jmp	SHORT $LN1@mg_send_di
$LN2@mg_send_di:
; Line 8977
	mov	eax, -1
$LN1@mg_send_di:
; Line 8978
	add	rsp, 40					; 00000028H
	ret	0
mg_send_digest_access_authentication_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
target_url$ = 56
redirect_code$ = 64
mg_send_http_redirect PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4621
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4641
	cmp	DWORD PTR redirect_code$[rsp], 0
	jne	SHORT $LN2@mg_send_ht
; Line 4642
	mov	DWORD PTR redirect_code$[rsp], 307	; 00000133H
$LN2@mg_send_ht:
; Line 4648
	cmp	DWORD PTR redirect_code$[rsp], 301	; 0000012dH
	je	SHORT $LN3@mg_send_ht
	cmp	DWORD PTR redirect_code$[rsp], 302	; 0000012eH
	je	SHORT $LN3@mg_send_ht
	cmp	DWORD PTR redirect_code$[rsp], 303	; 0000012fH
	je	SHORT $LN3@mg_send_ht
	cmp	DWORD PTR redirect_code$[rsp], 307	; 00000133H
	je	SHORT $LN3@mg_send_ht
	cmp	DWORD PTR redirect_code$[rsp], 308	; 00000134H
	je	SHORT $LN3@mg_send_ht
; Line 4650
	mov	eax, -2
	jmp	$LN1@mg_send_ht
$LN3@mg_send_ht:
; Line 4654
	cmp	QWORD PTR target_url$[rsp], 0
	je	SHORT $LN5@mg_send_ht
	mov	rax, QWORD PTR target_url$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN4@mg_send_ht
$LN5@mg_send_ht:
; Line 4655
	lea	rax, OFFSET FLAT:$SG162562
	mov	QWORD PTR target_url$[rsp], rax
$LN4@mg_send_ht:
; Line 4695
	mov	edx, DWORD PTR redirect_code$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 4696
	mov	r9d, -1
	mov	r8, QWORD PTR target_url$[rsp]
	lea	rdx, OFFSET FLAT:$SG162563
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 4697
	cmp	DWORD PTR redirect_code$[rsp], 301	; 0000012dH
	je	SHORT $LN8@mg_send_ht
	cmp	DWORD PTR redirect_code$[rsp], 308	; 00000134H
	jne	SHORT $LN6@mg_send_ht
$LN8@mg_send_ht:
; Line 4699
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_static_cache_header@@YAXPEAUmg_connection@@@Z ; send_static_cache_header
; Line 4700
	jmp	SHORT $LN7@mg_send_ht
$LN6@mg_send_ht:
; Line 4702
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
$LN7@mg_send_ht:
; Line 4704
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 4705
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_cors_header@@YAXPEAUmg_connection@@@Z ; send_cors_header
; Line 4710
	mov	r9d, 1
	lea	r8, OFFSET FLAT:$SG162567
	lea	rdx, OFFSET FLAT:$SG162568
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 4712
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 4722
	mov	eax, 1
$LN1@mg_send_ht:
; Line 4723
	add	rsp, 40					; 00000028H
	ret	0
mg_send_http_redirect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
trunc$1 = 48
len$2 = 56
__$ArrayPad$ = 88
conn$ = 112
mime_type$ = 120
content_length$ = 128
mg_send_http_ok PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4579
$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4580
	cmp	QWORD PTR mime_type$[rsp], 0
	je	SHORT $LN3@mg_send_ht
	mov	rax, QWORD PTR mime_type$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN2@mg_send_ht
$LN3@mg_send_ht:
; Line 4582
	lea	rax, OFFSET FLAT:$SG162543
	mov	QWORD PTR mime_type$[rsp], rax
$LN2@mg_send_ht:
; Line 4585
	mov	edx, 200				; 000000c8H
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_start
; Line 4586
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_no_cache_header@@YAXPEAUmg_connection@@@Z ; send_no_cache_header
; Line 4587
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_additional_header@@YAXPEAUmg_connection@@@Z ; send_additional_header
; Line 4588
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_cors_header@@YAXPEAUmg_connection@@@Z ; send_cors_header
; Line 4589
	mov	r9d, -1
	mov	r8, QWORD PTR mime_type$[rsp]
	lea	rdx, OFFSET FLAT:$SG162544
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
; Line 4590
	cmp	QWORD PTR content_length$[rsp], 0
	jge	SHORT $LN4@mg_send_ht
; Line 4592
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@mg_send_ht
; Line 4594
	mov	r9d, -1
	lea	r8, OFFSET FLAT:$SG162548
	lea	rdx, OFFSET FLAT:$SG162549
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN6@mg_send_ht:
; Line 4596
	jmp	SHORT $LN5@mg_send_ht
$LN4@mg_send_ht:
; Line 4598
	mov	DWORD PTR trunc$1[rsp], 0
; Line 4599
	mov	rax, QWORD PTR content_length$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG162550
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	lea	r8, QWORD PTR len$2[rsp]
	lea	rdx, QWORD PTR trunc$1[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_snprintf@@YAXPEBUmg_connection@@PEAHPEAD_KPEBDZZ ; mg_snprintf
; Line 4605
	cmp	DWORD PTR trunc$1[rsp], 0
	jne	SHORT $LN7@mg_send_ht
; Line 4608
	mov	r9d, -1
	lea	r8, QWORD PTR len$2[rsp]
	lea	rdx, OFFSET FLAT:$SG162552
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_add
$LN7@mg_send_ht:
$LN5@mg_send_ht:
; Line 4611
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_response_header_send
; Line 4613
	xor	eax, eax
; Line 4614
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
mg_send_http_ok ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 32
ap$ = 40
conn$ = 64
status$ = 72
fmt$ = 80
mg_send_http_error PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 4563
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 4567
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 4568
	mov	r9, QWORD PTR ap$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR status$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_send_http_error_impl@@YAHPEAUmg_connection@@HPEBDPEAD@Z ; mg_send_http_error_impl
	mov	DWORD PTR ret$[rsp], eax
; Line 4569
	mov	QWORD PTR ap$[rsp], 0
; Line 4571
	mov	eax, DWORD PTR ret$[rsp]
; Line 4572
	add	rsp, 56					; 00000038H
	ret	0
mg_send_http_error ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
__$ArrayPad$ = 88
conn$ = 112
path$ = 120
mg_send_file_body PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10392
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10393
	mov	QWORD PTR file$[rsp], 0
	mov	QWORD PTR file$[rsp+8], 0
	mov	DWORD PTR file$[rsp+16], 0
	mov	DWORD PTR file$[rsp+20], 0
	mov	DWORD PTR file$[rsp+24], 0
	mov	QWORD PTR file$[rsp+32], 0
; Line 10394
	lea	r9, QWORD PTR file$[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_fopen@@YAHPEBUmg_connection@@PEBDHPEAUmg_file@@@Z ; mg_fopen
	test	eax, eax
	jne	SHORT $LN2@mg_send_fi
; Line 10395
	mov	eax, -1
	jmp	SHORT $LN1@mg_send_fi
$LN2@mg_send_fi:
; Line 10397
	mov	rdx, QWORD PTR conn$[rsp]
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?fclose_on_exec@@YAXPEAUmg_file_access@@PEAUmg_connection@@@Z ; fclose_on_exec
; Line 10398
	mov	DWORD PTR [rsp+32], 0
	mov	r9, 9223372036854775807			; 7fffffffffffffffH
	xor	r8d, r8d
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?send_file_data@@YAXPEAUmg_connection@@PEAUmg_file@@_J2H@Z ; send_file_data
; Line 10399
	lea	rcx, QWORD PTR file$[rsp+32]
	call	?mg_fclose@@YAHPEAUmg_file_access@@@Z	; mg_fclose
; Line 10400
	xor	eax, eax
$LN1@mg_send_fi:
; Line 10401
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
mg_send_file_body ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
path$ = 56
mg_send_file PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 10451
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10452
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_send_mime_file2
; Line 10453
	add	rsp, 40					; 00000028H
	ret	0
mg_send_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ret$ = 32
t$ = 36
lenbuf_len$ = 40
lenbuf$ = 48
__$ArrayPad$ = 64
conn$ = 96
chunk$ = 104
chunk_len$ = 112
mg_send_chunk PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6810
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6817
	mov	r8d, DWORD PTR chunk_len$[rsp]
	lea	rdx, OFFSET FLAT:$SG163396
	lea	rcx, QWORD PTR lenbuf$[rsp]
	call	sprintf
; Line 6818
	lea	rcx, QWORD PTR lenbuf$[rsp]
	call	strlen
	mov	QWORD PTR lenbuf_len$[rsp], rax
; Line 6821
	mov	r8, QWORD PTR lenbuf_len$[rsp]
	lea	rdx, QWORD PTR lenbuf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR ret$[rsp], eax
; Line 6822
	mov	eax, DWORD PTR lenbuf_len$[rsp]
	cmp	DWORD PTR ret$[rsp], eax
	je	SHORT $LN2@mg_send_ch
; Line 6823
	mov	eax, -1
	jmp	$LN1@mg_send_ch
$LN2@mg_send_ch:
; Line 6825
	mov	eax, DWORD PTR ret$[rsp]
	mov	DWORD PTR t$[rsp], eax
; Line 6827
	mov	eax, DWORD PTR chunk_len$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR chunk$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR ret$[rsp], eax
; Line 6828
	mov	eax, DWORD PTR chunk_len$[rsp]
	cmp	DWORD PTR ret$[rsp], eax
	je	SHORT $LN3@mg_send_ch
; Line 6829
	mov	eax, -1
	jmp	SHORT $LN1@mg_send_ch
$LN3@mg_send_ch:
; Line 6831
	mov	eax, DWORD PTR ret$[rsp]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t$[rsp], eax
; Line 6833
	mov	r8d, 2
	lea	rdx, OFFSET FLAT:$SG163399
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_write
	mov	DWORD PTR ret$[rsp], eax
; Line 6834
	cmp	DWORD PTR ret$[rsp], 2
	je	SHORT $LN4@mg_send_ch
; Line 6835
	mov	eax, -1
	jmp	SHORT $LN1@mg_send_ch
$LN4@mg_send_ch:
; Line 6837
	mov	eax, DWORD PTR ret$[rsp]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t$[rsp], eax
; Line 6839
	mov	eax, DWORD PTR t$[rsp]
$LN1@mg_send_ch:
; Line 6840
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
mg_send_chunk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
ap$ = 40
conn$ = 64
fmt$ = 72
mg_printf PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6982
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 6986
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR ap$[rsp], rax
; Line 6987
	mov	r8, QWORD PTR ap$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_vprintf@@YAHPEAUmg_connection@@PEBDPEAD@Z ; mg_vprintf
	mov	DWORD PTR result$[rsp], eax
; Line 6988
	mov	QWORD PTR ap$[rsp], 0
; Line 6990
	mov	eax, DWORD PTR result$[rsp]
; Line 6991
	add	rsp, 56					; 00000038H
	ret	0
mg_printf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
mg_unlock_context PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12968
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 12969
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN2@mg_unlock_
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN2@mg_unlock_
; Line 12970
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 31944				; 00007cc8H
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
$LN2@mg_unlock_:
; Line 12972
	add	rsp, 40					; 00000028H
	ret	0
mg_unlock_context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
mg_lock_context PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12959
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 12960
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN2@mg_lock_co
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN2@mg_lock_co
; Line 12961
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 31944				; 00007cc8H
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
$LN2@mg_lock_co:
; Line 12963
	add	rsp, 40					; 00000028H
	ret	0
mg_lock_context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
mg_unlock_connection PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12950
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 12951
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@mg_unlock_
; Line 12952
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	mov	rcx, rax
	call	?pthread_mutex_unlock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_unlock
$LN2@mg_unlock_:
; Line 12954
	add	rsp, 40					; 00000028H
	ret	0
mg_unlock_connection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
mg_lock_connection PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 12941
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 12942
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@mg_lock_co
; Line 12943
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 2472				; 000009a8H
	mov	rcx, rax
	call	?pthread_mutex_lock@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_lock
$LN2@mg_lock_co:
; Line 12945
	add	rsp, 40					; 00000028H
	ret	0
mg_lock_connection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
masking_key$ = 48
retval$ = 52
masked_data$ = 56
conn$ = 80
opcode$ = 88
data$ = 96
dataLen$ = 104
mg_websocket_client_write PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13610
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 13611
	mov	DWORD PTR retval$[rsp], -1
; Line 13612
	mov	rax, QWORD PTR dataLen$[rsp]
	add	rax, 7
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	shl	rax, 2
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR masked_data$[rsp], rax
; Line 13614
	mov	DWORD PTR masking_key$[rsp], 0
; Line 13616
	cmp	QWORD PTR masked_data$[rsp], 0
	jne	SHORT $LN5@mg_websock
; Line 13618
	lea	rax, OFFSET FLAT:$SG166597
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG166598
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 13621				; 00003535H
	lea	r8, OFFSET FLAT:$SG166599
	xor	edx, edx
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_cry_internal_wrap@@YAXPEBUmg_connection@@PEAUmg_context@@PEBDI2ZZ ; mg_cry_internal_wrap
; Line 13622
	mov	eax, -1
	jmp	SHORT $LN1@mg_websock
$LN5@mg_websock:
$LN4@mg_websock:
; Line 13627
	call	?get_random@@YA_KXZ			; get_random
	mov	DWORD PTR masking_key$[rsp], eax
; Line 13628
	cmp	DWORD PTR masking_key$[rsp], 0
	je	SHORT $LN4@mg_websock
; Line 13630
	mov	r9, QWORD PTR masked_data$[rsp]
	mov	r8d, DWORD PTR masking_key$[rsp]
	mov	rdx, QWORD PTR dataLen$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?mask_data@@YAXPEBD_KIPEAD@Z		; mask_data
; Line 13632
	mov	eax, DWORD PTR masking_key$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR dataLen$[rsp]
	mov	r8, QWORD PTR masked_data$[rsp]
	mov	edx, DWORD PTR opcode$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z ; mg_websocket_write_exec
	mov	DWORD PTR retval$[rsp], eax
; Line 13634
	mov	rcx, QWORD PTR masked_data$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 13636
	mov	eax, DWORD PTR retval$[rsp]
$LN1@mg_websock:
; Line 13637
	add	rsp, 72					; 00000048H
	ret	0
mg_websocket_client_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 64
opcode$ = 72
data$ = 80
dataLen$ = 88
mg_websocket_write PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 13574
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 13575
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR dataLen$[rsp]
	mov	r8, QWORD PTR data$[rsp]
	mov	edx, DWORD PTR opcode$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_websocket_write_exec@@YAHPEAUmg_connection@@HPEBD_KI@Z ; mg_websocket_write_exec
; Line 13576
	add	rsp, 56					; 00000038H
	ret	0
mg_websocket_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
total$ = 48
allowed$ = 52
n$ = 56
tv138 = 60
now$ = 64
conn$ = 96
buf$ = 104
len$ = 112
mg_write PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 6727
$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 6731
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN4@mg_write
; Line 6732
	xor	eax, eax
	jmp	$LN1@mg_write
$LN4@mg_write:
; Line 6734
	cmp	QWORD PTR len$[rsp], 2147483647		; 7fffffffH
	jbe	SHORT $LN5@mg_write
; Line 6735
	mov	eax, -1
	jmp	$LN1@mg_write
$LN5@mg_write:
; Line 6739
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+8], 10
; Line 6746
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax+2452], 0
	jle	$LN6@mg_write
; Line 6747
	xor	ecx, ecx
	call	time
	mov	QWORD PTR now$[rsp], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2456]
	cmp	QWORD PTR now$[rsp], rax
	je	SHORT $LN8@mg_write
; Line 6748
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR now$[rsp]
	mov	QWORD PTR [rax+2456], rcx
; Line 6749
	mov	rax, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rax+2464], 0
$LN8@mg_write:
; Line 6751
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR [rcx+2464]
	mov	eax, DWORD PTR [rax+2452]
	sub	eax, ecx
	mov	DWORD PTR allowed$[rsp], eax
; Line 6752
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR allowed$[rsp], eax
	jle	SHORT $LN9@mg_write
; Line 6753
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR allowed$[rsp], eax
$LN9@mg_write:
; Line 6756
	mov	eax, DWORD PTR allowed$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+2288]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+2296]
	xor	edx, edx
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z ; push_all
	mov	DWORD PTR total$[rsp], eax
; Line 6763
	mov	eax, DWORD PTR allowed$[rsp]
	cmp	DWORD PTR total$[rsp], eax
	jne	$LN10@mg_write
; Line 6765
	movsxd	rax, DWORD PTR total$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf$[rsp], rax
; Line 6766
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2464]
	add	eax, DWORD PTR total$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	DWORD PTR [rcx+2464], eax
$LN2@mg_write:
; Line 6768
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR total$[rsp], eax
	jge	$LN3@mg_write
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	eax, DWORD PTR [rax+40]
	test	eax, eax
	jne	$LN3@mg_write
; Line 6769
	mov	eax, DWORD PTR total$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rcx+2452], eax
	jle	SHORT $LN14@mg_write
	mov	eax, DWORD PTR total$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN15@mg_write
$LN14@mg_write:
	mov	rax, QWORD PTR conn$[rsp]
	mov	eax, DWORD PTR [rax+2452]
	mov	DWORD PTR tv138[rsp], eax
$LN15@mg_write:
	mov	eax, DWORD PTR tv138[rsp]
	mov	DWORD PTR allowed$[rsp], eax
; Line 6773
	mov	eax, DWORD PTR allowed$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+2288]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+2296]
	xor	edx, edx
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z ; push_all
	mov	DWORD PTR n$[rsp], eax
; Line 6780
	mov	eax, DWORD PTR allowed$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN11@mg_write
; Line 6781
	jmp	SHORT $LN3@mg_write
$LN11@mg_write:
; Line 6783
	mov	ecx, 1000				; 000003e8H
	call	QWORD PTR __imp_Sleep
; Line 6784
	mov	rax, QWORD PTR conn$[rsp]
	mov	ecx, DWORD PTR allowed$[rsp]
	mov	DWORD PTR [rax+2464], ecx
; Line 6785
	xor	ecx, ecx
	call	time
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2456], rax
; Line 6786
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf$[rsp], rax
; Line 6787
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR total$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$[rsp], eax
; Line 6788
	jmp	$LN2@mg_write
$LN3@mg_write:
$LN10@mg_write:
; Line 6790
	jmp	SHORT $LN7@mg_write
$LN6@mg_write:
; Line 6791
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR conn$[rsp]
	mov	r9, QWORD PTR [rax+2288]
	mov	rax, QWORD PTR conn$[rsp]
	mov	r8, QWORD PTR [rax+2296]
	xor	edx, edx
	mov	rax, QWORD PTR conn$[rsp]
	mov	rcx, QWORD PTR [rax+2272]
	call	?push_all@@YAHPEAUmg_context@@PEAU_iobuf@@_KPEAUssl_st@@PEBDH@Z ; push_all
	mov	DWORD PTR total$[rsp], eax
$LN7@mg_write:
; Line 6798
	cmp	DWORD PTR total$[rsp], 0
	jle	SHORT $LN12@mg_write
; Line 6799
	movsxd	rax, DWORD PTR total$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	add	rax, QWORD PTR [rcx+2368]
	mov	rcx, QWORD PTR conn$[rsp]
	mov	QWORD PTR [rcx+2368], rax
$LN12@mg_write:
; Line 6801
	mov	eax, DWORD PTR total$[rsp]
$LN1@mg_write:
; Line 6802
	add	rsp, 88					; 00000058H
	ret	0
mg_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 8
mg_get_response_info PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3562
	mov	QWORD PTR [rsp+8], rcx
; Line 3563
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@mg_get_res
; Line 3564
	xor	eax, eax
	jmp	SHORT $LN1@mg_get_res
$LN2@mg_get_res:
; Line 3566
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 2
	je	SHORT $LN3@mg_get_res
; Line 3567
	xor	eax, eax
	jmp	SHORT $LN1@mg_get_res
$LN3@mg_get_res:
; Line 3569
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 1208				; 000004b8H
$LN1@mg_get_res:
; Line 3570
	ret	0
mg_get_response_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 8
mg_get_request_info PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3522
	mov	QWORD PTR [rsp+8], rcx
; Line 3523
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN2@mg_get_req
; Line 3524
	xor	eax, eax
	jmp	SHORT $LN1@mg_get_req
$LN2@mg_get_req:
; Line 3553
	mov	rax, QWORD PTR conn$[rsp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN3@mg_get_req
; Line 3554
	xor	eax, eax
	jmp	SHORT $LN1@mg_get_req
$LN3@mg_get_req:
; Line 3556
	mov	rax, QWORD PTR conn$[rsp]
	add	rax, 16
$LN1@mg_get_req:
; Line 3557
	ret	0
mg_get_request_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
temp_file_offs$ = 52
fp$ = 56
temp_file$ = 64
result$ = 72
found$ = 76
temp_buf_len$1 = 80
$T2 = 88
$T3 = 96
$T4 = 104
st$ = 112
d$ = 160
u$ = 416
h$ = 672
line$ = 928
__$ArrayPad$ = 1440
fname$ = 1472
domain$ = 1480
user$ = 1488
ha1$ = 1496
mg_modify_passwords_file_ha1 PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9009
$LN43:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 1456				; 000005b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9010
	mov	DWORD PTR found$[rsp], 0
	mov	DWORD PTR result$[rsp], 1
; Line 9012
	lea	rax, QWORD PTR st$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 48					; 00000030H
	rep stosb
; Line 9013
	mov	QWORD PTR fp$[rsp], 0
; Line 9014
	mov	QWORD PTR temp_file$[rsp], 0
; Line 9015
	mov	DWORD PTR temp_file_offs$[rsp], 0
; Line 9018
	cmp	QWORD PTR ha1$[rsp], 0
	je	SHORT $LN10@mg_modify_
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ha1$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN10@mg_modify_
; Line 9019
	mov	QWORD PTR ha1$[rsp], 0
$LN10@mg_modify_:
; Line 9023
	cmp	QWORD PTR fname$[rsp], 0
	je	SHORT $LN12@mg_modify_
	cmp	QWORD PTR domain$[rsp], 0
	je	SHORT $LN12@mg_modify_
	cmp	QWORD PTR user$[rsp], 0
	jne	SHORT $LN11@mg_modify_
$LN12@mg_modify_:
; Line 9024
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN11@mg_modify_:
; Line 9029
	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR user$[rsp]
	call	strchr
	test	rax, rax
	je	SHORT $LN13@mg_modify_
; Line 9030
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN13@mg_modify_:
; Line 9032
	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR domain$[rsp]
	call	strchr
	test	rax, rax
	je	SHORT $LN14@mg_modify_
; Line 9033
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN14@mg_modify_:
; Line 9038
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_modify_
$LN2@mg_modify_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@mg_modify_:
	cmp	DWORD PTR i$[rsp], 255			; 000000ffH
	jge	SHORT $LN3@mg_modify_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@mg_modify_
; Line 9039
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	iscntrl
	test	eax, eax
	je	SHORT $LN15@mg_modify_
; Line 9040
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN15@mg_modify_:
; Line 9042
	jmp	SHORT $LN2@mg_modify_
$LN3@mg_modify_:
; Line 9043
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN16@mg_modify_
; Line 9044
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN16@mg_modify_:
; Line 9046
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@mg_modify_
$LN5@mg_modify_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@mg_modify_:
	cmp	DWORD PTR i$[rsp], 255			; 000000ffH
	jge	SHORT $LN6@mg_modify_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR domain$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN6@mg_modify_
; Line 9047
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR domain$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	iscntrl
	test	eax, eax
	je	SHORT $LN17@mg_modify_
; Line 9048
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN17@mg_modify_:
; Line 9050
	jmp	SHORT $LN5@mg_modify_
$LN6@mg_modify_:
; Line 9051
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR domain$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN18@mg_modify_
; Line 9052
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN18@mg_modify_:
; Line 9056
	mov	rcx, QWORD PTR fname$[rsp]
	call	strlen
	cmp	rax, 780				; 0000030cH
	jb	SHORT $LN19@mg_modify_
; Line 9057
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN19@mg_modify_:
; Line 9061
	lea	rdx, QWORD PTR st$[rsp]
	mov	rcx, QWORD PTR fname$[rsp]
	call	stat
	test	eax, eax
	jne	$LN20@mg_modify_
; Line 9062
	mov	eax, DWORD PTR st$[rsp+20]
	add	eax, 1024				; 00000400H
	mov	DWORD PTR temp_buf_len$1[rsp], eax
; Line 9065
	movsxd	rax, DWORD PTR temp_buf_len$1[rsp]
	mov	edx, 1
	mov	rcx, rax
	call	?mg_calloc@@YAPEAX_K0@Z			; mg_calloc
	mov	QWORD PTR temp_file$[rsp], rax
; Line 9066
	cmp	QWORD PTR temp_file$[rsp], 0
	jne	SHORT $LN21@mg_modify_
; Line 9068
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN21@mg_modify_:
; Line 9072
	lea	rdx, OFFSET FLAT:$SG164574
	mov	rcx, QWORD PTR fname$[rsp]
	call	fopen
	mov	QWORD PTR fp$[rsp], rax
; Line 9073
	cmp	QWORD PTR fp$[rsp], 0
	jne	SHORT $LN22@mg_modify_
; Line 9075
	mov	rcx, QWORD PTR temp_file$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9076
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN22@mg_modify_:
$LN42@mg_modify_:
$LN8@mg_modify_:
; Line 9081
	mov	r8, QWORD PTR fp$[rsp]
	mov	edx, 512				; 00000200H
	lea	rcx, QWORD PTR line$[rsp]
	call	fgets
	test	rax, rax
	je	$LN9@mg_modify_
	mov	eax, DWORD PTR temp_file_offs$[rsp]
	add	eax, 600				; 00000258H
	cmp	eax, DWORD PTR temp_buf_len$1[rsp]
	jge	$LN9@mg_modify_
; Line 9083
	lea	rax, QWORD PTR h$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR d$[rsp]
	lea	r8, QWORD PTR u$[rsp]
	lea	rdx, OFFSET FLAT:$SG164577
	lea	rcx, QWORD PTR line$[rsp]
	call	sscanf
	cmp	eax, 3
	je	SHORT $LN23@mg_modify_
; Line 9084
	jmp	SHORT $LN8@mg_modify_
$LN23@mg_modify_:
; Line 9086
	mov	eax, 1
	imul	rax, rax, 255				; 000000ffH
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 256			; 00000100H
	jae	SHORT $LN36@mg_modify_
	jmp	SHORT $LN37@mg_modify_
$LN36@mg_modify_:
	call	__report_rangecheckfailure
$LN37@mg_modify_:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR u$[rsp+rax], 0
; Line 9087
	mov	eax, 1
	imul	rax, rax, 255				; 000000ffH
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 256			; 00000100H
	jae	SHORT $LN38@mg_modify_
	jmp	SHORT $LN39@mg_modify_
$LN38@mg_modify_:
	call	__report_rangecheckfailure
$LN39@mg_modify_:
	mov	rax, QWORD PTR $T3[rsp]
	mov	BYTE PTR d$[rsp+rax], 0
; Line 9088
	mov	eax, 1
	imul	rax, rax, 255				; 000000ffH
	mov	QWORD PTR $T4[rsp], rax
	cmp	QWORD PTR $T4[rsp], 256			; 00000100H
	jae	SHORT $LN40@mg_modify_
	jmp	SHORT $LN41@mg_modify_
$LN40@mg_modify_:
	call	__report_rangecheckfailure
$LN41@mg_modify_:
	mov	rax, QWORD PTR $T4[rsp]
	mov	BYTE PTR h$[rsp+rax], 0
; Line 9090
	mov	rdx, QWORD PTR user$[rsp]
	lea	rcx, QWORD PTR u$[rsp]
	call	strcmp
	test	eax, eax
	jne	$LN24@mg_modify_
	mov	rdx, QWORD PTR domain$[rsp]
	lea	rcx, QWORD PTR d$[rsp]
	call	strcmp
	test	eax, eax
	jne	$LN24@mg_modify_
; Line 9093
	cmp	QWORD PTR ha1$[rsp], 0
	je	SHORT $LN26@mg_modify_
	cmp	DWORD PTR found$[rsp], 0
	jne	SHORT $LN26@mg_modify_
; Line 9094
	movsxd	rax, DWORD PTR temp_file_offs$[rsp]
	mov	rcx, QWORD PTR temp_file$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR ha1$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR domain$[rsp]
	mov	r8, QWORD PTR user$[rsp]
	lea	rdx, OFFSET FLAT:$SG164581
	mov	rcx, rax
	call	sprintf
	mov	DWORD PTR i$[rsp], eax
; Line 9099
	cmp	DWORD PTR i$[rsp], 1
	jge	SHORT $LN27@mg_modify_
; Line 9100
	mov	rcx, QWORD PTR fp$[rsp]
	call	fclose
; Line 9101
	mov	rcx, QWORD PTR temp_file$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9102
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN27@mg_modify_:
; Line 9104
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR temp_file_offs$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR temp_file_offs$[rsp], eax
$LN26@mg_modify_:
; Line 9106
	mov	DWORD PTR found$[rsp], 1
; Line 9107
	jmp	SHORT $LN25@mg_modify_
$LN24@mg_modify_:
; Line 9109
	movsxd	rax, DWORD PTR temp_file_offs$[rsp]
	mov	rcx, QWORD PTR temp_file$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rcx, QWORD PTR h$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR d$[rsp]
	lea	r8, QWORD PTR u$[rsp]
	lea	rdx, OFFSET FLAT:$SG164583
	mov	rcx, rax
	call	sprintf
	mov	DWORD PTR i$[rsp], eax
; Line 9110
	cmp	DWORD PTR i$[rsp], 1
	jge	SHORT $LN28@mg_modify_
; Line 9111
	mov	rcx, QWORD PTR fp$[rsp]
	call	fclose
; Line 9112
	mov	rcx, QWORD PTR temp_file$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9113
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN28@mg_modify_:
; Line 9115
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR temp_file_offs$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR temp_file_offs$[rsp], eax
$LN25@mg_modify_:
; Line 9117
	jmp	$LN42@mg_modify_
$LN9@mg_modify_:
; Line 9118
	mov	rcx, QWORD PTR fp$[rsp]
	call	fclose
$LN20@mg_modify_:
; Line 9122
	lea	rdx, OFFSET FLAT:$SG164585
	mov	rcx, QWORD PTR fname$[rsp]
	call	fopen
	mov	QWORD PTR fp$[rsp], rax
; Line 9123
	cmp	QWORD PTR fp$[rsp], 0
	jne	SHORT $LN29@mg_modify_
; Line 9124
	mov	rcx, QWORD PTR temp_file$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9125
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN29@mg_modify_:
; Line 9135
	cmp	QWORD PTR temp_file$[rsp], 0
	je	SHORT $LN30@mg_modify_
	cmp	DWORD PTR temp_file_offs$[rsp], 0
	jle	SHORT $LN30@mg_modify_
; Line 9138
	movsxd	rax, DWORD PTR temp_file_offs$[rsp]
	mov	r9, QWORD PTR fp$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR temp_file$[rsp]
	call	fwrite
	movsxd	rcx, DWORD PTR temp_file_offs$[rsp]
	cmp	rax, rcx
	je	SHORT $LN31@mg_modify_
; Line 9139
	mov	DWORD PTR result$[rsp], 0
$LN31@mg_modify_:
$LN30@mg_modify_:
; Line 9144
	cmp	QWORD PTR ha1$[rsp], 0
	je	SHORT $LN32@mg_modify_
	cmp	DWORD PTR found$[rsp], 0
	jne	SHORT $LN32@mg_modify_
; Line 9145
	mov	rax, QWORD PTR ha1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR domain$[rsp]
	mov	r8, QWORD PTR user$[rsp]
	lea	rdx, OFFSET FLAT:$SG164591
	mov	rcx, QWORD PTR fp$[rsp]
	call	fprintf
	cmp	eax, 6
	jge	SHORT $LN33@mg_modify_
; Line 9146
	mov	DWORD PTR result$[rsp], 0
$LN33@mg_modify_:
$LN32@mg_modify_:
; Line 9151
	mov	rcx, QWORD PTR fp$[rsp]
	call	fclose
	test	eax, eax
	je	SHORT $LN34@mg_modify_
; Line 9152
	mov	DWORD PTR result$[rsp], 0
$LN34@mg_modify_:
; Line 9155
	mov	rcx, QWORD PTR temp_file$[rsp]
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 9156
	mov	eax, DWORD PTR result$[rsp]
$LN1@mg_modify_:
$LN35@mg_modify_:
; Line 9157
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1456				; 000005b0H
	pop	rdi
	ret	0
mg_modify_passwords_file_ha1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ha1buf$ = 64
__$ArrayPad$ = 104
fname$ = 128
domain$ = 136
user$ = 144
pass$ = 152
mg_modify_passwords_file PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 9165
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9167
	cmp	QWORD PTR fname$[rsp], 0
	je	SHORT $LN3@mg_modify_
	cmp	QWORD PTR domain$[rsp], 0
	je	SHORT $LN3@mg_modify_
	cmp	QWORD PTR user$[rsp], 0
	jne	SHORT $LN2@mg_modify_
$LN3@mg_modify_:
; Line 9168
	xor	eax, eax
	jmp	$LN1@mg_modify_
$LN2@mg_modify_:
; Line 9170
	cmp	QWORD PTR pass$[rsp], 0
	je	SHORT $LN5@mg_modify_
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pass$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN4@mg_modify_
$LN5@mg_modify_:
; Line 9171
	xor	r9d, r9d
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR domain$[rsp]
	mov	rcx, QWORD PTR fname$[rsp]
	call	mg_modify_passwords_file_ha1
	jmp	SHORT $LN1@mg_modify_
$LN4@mg_modify_:
; Line 9174
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR pass$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG164604
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR domain$[rsp]
	lea	r8, OFFSET FLAT:$SG164605
	mov	rdx, QWORD PTR user$[rsp]
	lea	rcx, QWORD PTR ha1buf$[rsp]
	call	mg_md5
; Line 9175
	lea	r9, QWORD PTR ha1buf$[rsp]
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR domain$[rsp]
	mov	rcx, QWORD PTR fname$[rsp]
	call	mg_modify_passwords_file_ha1
$LN1@mg_modify_:
; Line 9176
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
mg_modify_passwords_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cnt$ = 32
i$ = 36
ctx$ = 64
size$ = 72
ports$ = 80
mg_get_server_ports PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3251
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3252
	mov	DWORD PTR cnt$[rsp], 0
; Line 3254
	cmp	DWORD PTR size$[rsp], 0
	jg	SHORT $LN5@mg_get_ser
; Line 3255
	mov	eax, -1
	jmp	$LN1@mg_get_ser
$LN5@mg_get_ser:
; Line 3257
	movsxd	rax, DWORD PTR size$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR ports$[rsp]
	call	memset
; Line 3258
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN6@mg_get_ser
; Line 3259
	mov	eax, -1
	jmp	$LN1@mg_get_ser
$LN6@mg_get_ser:
; Line 3261
	mov	rax, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN7@mg_get_ser
; Line 3262
	mov	eax, -1
	jmp	$LN1@mg_get_ser
$LN7@mg_get_ser:
; Line 3265
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@mg_get_ser
$LN2@mg_get_ser:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@mg_get_ser:
	mov	eax, DWORD PTR size$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@mg_get_ser
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@mg_get_ser
; Line 3267
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	ecx, WORD PTR [rcx+rax+10]
	call	QWORD PTR __imp_ntohs
	movzx	eax, ax
	movsxd	rcx, DWORD PTR cnt$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR ports$[rsp]
	mov	DWORD PTR [rdx+rcx+4], eax
; Line 3269
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, BYTE PTR [rcx+rax+40]
	movsxd	rcx, DWORD PTR cnt$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR ports$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 3270
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, BYTE PTR [rcx+rax+41]
	movsxd	rcx, DWORD PTR cnt$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR ports$[rsp]
	mov	DWORD PTR [rdx+rcx+12], eax
; Line 3272
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax+8]
	cmp	eax, 2
	jne	SHORT $LN8@mg_get_ser
; Line 3274
	movsxd	rax, DWORD PTR cnt$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ports$[rsp]
	mov	DWORD PTR [rcx+rax], 1
; Line 3275
	mov	eax, DWORD PTR cnt$[rsp]
	inc	eax
	mov	DWORD PTR cnt$[rsp], eax
	jmp	SHORT $LN9@mg_get_ser
$LN8@mg_get_ser:
; Line 3276
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax+8]
	cmp	eax, 23
	jne	SHORT $LN10@mg_get_ser
; Line 3278
	movsxd	rax, DWORD PTR cnt$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ports$[rsp]
	mov	DWORD PTR [rcx+rax], 3
; Line 3279
	mov	eax, DWORD PTR cnt$[rsp]
	inc	eax
	mov	DWORD PTR cnt$[rsp], eax
$LN10@mg_get_ser:
$LN9@mg_get_ser:
; Line 3281
	jmp	$LN2@mg_get_ser
$LN3@mg_get_ser:
; Line 3283
	mov	eax, DWORD PTR cnt$[rsp]
$LN1@mg_get_ser:
; Line 3284
	add	rsp, 56					; 00000038H
	ret	0
mg_get_server_ports ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mg_get_valid_options PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 2835
	lea	rax, OFFSET FLAT:?config_options@@3QBUmg_option@@B
; Line 2836
	ret	0
mg_get_valid_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 64
buf$ = 72
buflen$ = 80
mg_get_request_link PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3746
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3747
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], -1
	xor	r9d, r9d
	mov	r8, QWORD PTR buflen$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR conn$[rsp]
	call	?mg_construct_local_link@@YAHPEBUmg_connection@@PEAD_KPEBDH3@Z ; mg_construct_local_link
; Line 3748
	add	rsp, 56					; 00000038H
	ret	0
mg_get_request_link ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 8
mg_get_user_connection_data PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3239
	mov	QWORD PTR [rsp+8], rcx
; Line 3240
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@mg_get_use
; Line 3241
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+152]
	jmp	SHORT $LN1@mg_get_use
$LN2@mg_get_use:
; Line 3243
	xor	eax, eax
$LN1@mg_get_use:
; Line 3244
	ret	0
mg_get_user_connection_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$1 = 0
const_conn$ = 32
data$ = 40
mg_set_user_connection_data PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3226
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3227
	cmp	QWORD PTR const_conn$[rsp], 0
	je	SHORT $LN2@mg_set_use
; Line 3231
	mov	rax, QWORD PTR const_conn$[rsp]
	mov	QWORD PTR conn$1[rsp], rax
; Line 3232
	mov	rax, QWORD PTR conn$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rax+152], rcx
$LN2@mg_set_use:
; Line 3234
	add	rsp, 24
	ret	0
mg_set_user_connection_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tls$1 = 32
conn$ = 64
mg_get_thread_pointer PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3210
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3212
	cmp	QWORD PTR conn$[rsp], 0
	je	SHORT $LN2@mg_get_thr
; Line 3214
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2512]
	jmp	SHORT $LN1@mg_get_thr
; Line 3215
	jmp	SHORT $LN3@mg_get_thr
$LN2@mg_get_thr:
; Line 3217
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_getspecific@@YAPEAXK@Z		; pthread_getspecific
	mov	QWORD PTR tls$1[rsp], rax
; Line 3219
	mov	rax, QWORD PTR tls$1[rsp]
	mov	rax, QWORD PTR [rax+8]
$LN3@mg_get_thr:
$LN1@mg_get_thr:
; Line 3221
	add	rsp, 56					; 00000038H
	ret	0
mg_get_thread_pointer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
conn$ = 48
mg_get_user_context_data PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3203
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3204
	mov	rcx, QWORD PTR conn$[rsp]
	call	mg_get_context
	mov	rcx, rax
	call	mg_get_user_data
; Line 3205
	add	rsp, 40					; 00000028H
	ret	0
mg_get_user_context_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
ctx$ = 32
mg_get_user_data PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3196
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3197
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN3@mg_get_use
	mov	QWORD PTR tv66[rsp], 0
	jmp	SHORT $LN4@mg_get_use
$LN3@mg_get_use:
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+32136]
	mov	QWORD PTR tv66[rsp], rax
$LN4@mg_get_use:
	mov	rax, QWORD PTR tv66[rsp]
; Line 3198
	add	rsp, 24
	ret	0
mg_get_user_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
conn$ = 32
mg_get_context PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3189
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3190
	cmp	QWORD PTR conn$[rsp], 0
	jne	SHORT $LN3@mg_get_con
	mov	QWORD PTR tv66[rsp], 0
	jmp	SHORT $LN4@mg_get_con
$LN3@mg_get_con:
	mov	rax, QWORD PTR conn$[rsp]
	mov	rax, QWORD PTR [rax+2272]
	mov	QWORD PTR tv66[rsp], rax
$LN4@mg_get_con:
	mov	rax, QWORD PTR tv66[rsp]
; Line 3191
	add	rsp, 24
	ret	0
mg_get_context ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
ctx$ = 64
name$ = 72
mg_get_option PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 3174
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3176
	mov	rcx, QWORD PTR name$[rsp]
	call	?get_option_index@@YAHPEBD@Z		; get_option_index
	mov	DWORD PTR i$[rsp], eax
	cmp	DWORD PTR i$[rsp], -1
	jne	SHORT $LN2@mg_get_opt
; Line 3177
	xor	eax, eax
	jmp	SHORT $LN1@mg_get_opt
	jmp	SHORT $LN3@mg_get_opt
$LN2@mg_get_opt:
; Line 3178
	cmp	QWORD PTR ctx$[rsp], 0
	je	SHORT $LN6@mg_get_opt
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	cmp	QWORD PTR [rcx+rax*8+32152], 0
	jne	SHORT $LN4@mg_get_opt
$LN6@mg_get_opt:
; Line 3179
	lea	rax, OFFSET FLAT:$SG161641
	jmp	SHORT $LN1@mg_get_opt
; Line 3180
	jmp	SHORT $LN5@mg_get_opt
$LN4@mg_get_opt:
; Line 3181
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+32152]
$LN5@mg_get_opt:
$LN3@mg_get_opt:
$LN1@mg_get_opt:
; Line 3183
	add	rsp, 56					; 00000038H
	ret	0
mg_get_option ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 112
ctx$ = 144
uri$ = 152
handler$ = 160
cbdata$ = 168
mg_set_auth_handler PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14482
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 14483
	cmp	QWORD PTR handler$[rsp], 0
	jne	SHORT $LN3@mg_set_aut
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@mg_set_aut
$LN3@mg_set_aut:
	mov	DWORD PTR tv73[rsp], 0
$LN4@mg_set_aut:
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR [rsp+96], rcx
	mov	rcx, QWORD PTR handler$[rsp]
	mov	QWORD PTR [rsp+88], rcx
	mov	QWORD PTR [rsp+80], 0
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	ecx, DWORD PTR tv73[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, 2
	mov	r8, QWORD PTR uri$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z ; mg_set_handler_type
; Line 14496
	add	rsp, 136				; 00000088H
	ret	0
mg_set_auth_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 112
is_delete_request$ = 116
ctx$ = 144
uri$ = 152
subprotocols$ = 160
connect_handler$ = 168
ready_handler$ = 176
data_handler$ = 184
close_handler$ = 192
cbdata$ = 200
mg_set_websocket_handler_with_subprotocols PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14457
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 14458
	cmp	QWORD PTR connect_handler$[rsp], 0
	jne	SHORT $LN3@mg_set_web
	cmp	QWORD PTR ready_handler$[rsp], 0
	jne	SHORT $LN3@mg_set_web
	cmp	QWORD PTR data_handler$[rsp], 0
	jne	SHORT $LN3@mg_set_web
	cmp	QWORD PTR close_handler$[rsp], 0
	jne	SHORT $LN3@mg_set_web
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@mg_set_web
$LN3@mg_set_web:
	mov	DWORD PTR tv68[rsp], 0
$LN4@mg_set_web:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR is_delete_request$[rsp], eax
; Line 14461
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR [rsp+96], rcx
	mov	QWORD PTR [rsp+88], 0
	mov	rcx, QWORD PTR close_handler$[rsp]
	mov	QWORD PTR [rsp+80], rcx
	mov	rcx, QWORD PTR data_handler$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR ready_handler$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR connect_handler$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR subprotocols$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], 0
	mov	ecx, DWORD PTR is_delete_request$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, 1
	mov	r8, QWORD PTR uri$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z ; mg_set_handler_type
; Line 14474
	add	rsp, 136				; 00000088H
	ret	0
mg_set_websocket_handler_with_subprotocols ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
uri$ = 88
connect_handler$ = 96
ready_handler$ = 104
data_handler$ = 112
close_handler$ = 120
cbdata$ = 128
mg_set_websocket_handler PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14435
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 14436
	mov	rax, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR close_handler$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR data_handler$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ready_handler$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR connect_handler$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR uri$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	call	mg_set_websocket_handler_with_subprotocols
; Line 14444
	add	rsp, 72					; 00000048H
	ret	0
mg_set_websocket_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 112
tv81 = 120
ctx$ = 144
uri$ = 152
handler$ = 160
cbdata$ = 168
mg_set_request_handler PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 14410
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 14411
	mov	rax, QWORD PTR handler$[rsp]
	mov	QWORD PTR tv81[rsp], rax
	cmp	QWORD PTR handler$[rsp], 0
	jne	SHORT $LN3@mg_set_req
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@mg_set_req
$LN3@mg_set_req:
	mov	DWORD PTR tv73[rsp], 0
$LN4@mg_set_req:
	mov	rax, QWORD PTR ctx$[rsp]
	add	rax, 32144				; 00007d90H
	mov	rcx, QWORD PTR cbdata$[rsp]
	mov	QWORD PTR [rsp+96], rcx
	mov	QWORD PTR [rsp+88], 0
	mov	QWORD PTR [rsp+80], 0
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	rcx, QWORD PTR tv81[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR tv73[rsp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	mov	r8, QWORD PTR uri$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?mg_set_handler_type@@YAXPEAUmg_context@@PEAUmg_domain_context@@PEBDHHP6AHPEAUmg_connection@@PEAX@ZPEAUmg_websocket_subprotocols@@P6AHPEBU3@4@ZP6AX34@ZP6AH3HPEAD_K4@ZP6AX74@Z54@Z ; mg_set_handler_type
; Line 14424
	add	rsp, 136				; 00000088H
	ret	0
mg_set_request_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 48
options$ = 56
mg_start_domain PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21361
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 21362
	xor	r8d, r8d
	mov	rdx, QWORD PTR options$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	call	mg_start_domain2
; Line 21363
	add	rsp, 40					; 00000028H
	ret	0
mg_start_domain ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mt$ = 32
ctx$ = 64
mg_stop	PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 20285
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 20287
	cmp	QWORD PTR ctx$[rsp], 0
	jne	SHORT $LN4@mg_stop
; Line 20288
	jmp	SHORT $LN1@mg_stop
$LN4@mg_stop:
; Line 20293
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR mt$[rsp], rax
; Line 20294
	cmp	QWORD PTR mt$[rsp], 0
	jne	SHORT $LN5@mg_stop
; Line 20295
	jmp	SHORT $LN1@mg_stop
$LN5@mg_stop:
; Line 20298
	mov	rax, QWORD PTR ctx$[rsp]
	mov	QWORD PTR [rax+88], 0
; Line 20301
	mov	rax, QWORD PTR ctx$[rsp]
	mov	DWORD PTR [rax+40], 1
$LN2@mg_stop:
; Line 20309
	mov	rax, QWORD PTR ctx$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cmp	eax, 2
	je	SHORT $LN3@mg_stop
; Line 20310
	mov	ecx, 10
	call	QWORD PTR __imp_Sleep
; Line 20311
	jmp	SHORT $LN2@mg_stop
$LN3@mg_stop:
; Line 20314
	mov	rcx, QWORD PTR mt$[rsp]
	call	?mg_join_thread@@YAHPEAX@Z		; mg_join_thread
; Line 20322
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?free_context@@YAXPEAUmg_context@@@Z	; free_context
$LN1@mg_stop:
; Line 20323
	add	rsp, 56					; 00000038H
	ret	0
mg_stop	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
init$ = 32
callbacks$ = 80
user_data$ = 88
options$ = 96
mg_start PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 21146
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 21147
	lea	rax, QWORD PTR init$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
; Line 21148
	mov	rax, QWORD PTR callbacks$[rsp]
	mov	QWORD PTR init$[rsp], rax
; Line 21149
	mov	rax, QWORD PTR user_data$[rsp]
	mov	QWORD PTR init$[rsp+8], rax
; Line 21150
	mov	rax, QWORD PTR options$[rsp]
	mov	QWORD PTR init$[rsp+16], rax
; Line 21152
	xor	edx, edx
	lea	rcx, QWORD PTR init$[rsp]
	call	mg_start2
; Line 21153
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
mg_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mg_exit_library PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 22415
$LN6:
	sub	rsp, 40					; 00000028H
; Line 22416
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jg	SHORT $LN2@mg_exit_li
; Line 22417
	xor	eax, eax
	jmp	$LN1@mg_exit_li
$LN2@mg_exit_li:
; Line 22420
	call	?mg_global_lock@@YAXXZ			; mg_global_lock
; Line 22422
	mov	eax, DWORD PTR ?mg_init_library_called@@3HA
	dec	eax
	mov	DWORD PTR ?mg_init_library_called@@3HA, eax
; Line 22423
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jne	SHORT $LN3@mg_exit_li
; Line 22425
	cmp	DWORD PTR ?mg_openssl_initialized@@3HA, 0
	je	SHORT $LN4@mg_exit_li
; Line 22426
	call	?uninitialize_openssl@@YAXXZ		; uninitialize_openssl
; Line 22427
	mov	DWORD PTR ?mg_openssl_initialized@@3HA, 0
$LN4@mg_exit_li:
; Line 22432
	call	QWORD PTR __imp_WSACleanup
; Line 22433
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 22438
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_key_delete@@YAHK@Z		; pthread_key_delete
; Line 22443
	mov	rcx, QWORD PTR ?all_methods@@3PEADEA
	call	?mg_free@@YAXPEAX@Z			; mg_free
; Line 22444
	mov	QWORD PTR ?all_methods@@3PEADEA, 0
; Line 22446
	call	?mg_global_unlock@@YAXXZ		; mg_global_unlock
; Line 22447
	lea	rcx, OFFSET FLAT:?global_lock_mutex@@3Upthread_mutex_t@@A
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 22448
	mov	eax, 1
	jmp	SHORT $LN1@mg_exit_li
$LN3@mg_exit_li:
; Line 22451
	call	?mg_global_unlock@@YAXXZ		; mg_global_unlock
; Line 22452
	mov	eax, 1
$LN1@mg_exit_li:
; Line 22453
	add	rsp, 40					; 00000028H
	ret	0
mg_exit_library ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
len$2 = 36
wsa$3 = 40
file_mutex_init$4 = 44
features_inited$ = 48
failed$5 = 52
key_create$6 = 56
features_to_init$ = 60
sl$7 = 64
data$8 = 80
ebuf$9 = 496
__$ArrayPad$ = 624
features$ = 656
mg_init_library PROC
; File W:\cpp\void\alistar\vendor\civetweb\src\civetweb.c
; Line 22286
$LN32:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 648				; 00000288H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 22287
	mov	eax, DWORD PTR features$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, eax
	call	mg_check_feature
	mov	DWORD PTR features_to_init$[rsp], eax
; Line 22288
	mov	eax, DWORD PTR features_to_init$[rsp]
	mov	DWORD PTR features_inited$[rsp], eax
; Line 22290
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jg	SHORT $LN11@mg_init_li
; Line 22292
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?global_lock_mutex@@3Upthread_mutex_t@@A
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	test	eax, eax
	je	SHORT $LN12@mg_init_li
; Line 22293
	xor	eax, eax
	jmp	$LN1@mg_init_li
$LN12@mg_init_li:
$LN11@mg_init_li:
; Line 22297
	call	?mg_global_lock@@YAXXZ			; mg_global_lock
; Line 22299
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jg	$LN13@mg_init_li
; Line 22303
	mov	DWORD PTR file_mutex_init$4[rsp], 1
; Line 22304
	mov	DWORD PTR wsa$3[rsp], 1
; Line 22308
	mov	DWORD PTR failed$5[rsp], 1
; Line 22309
	lea	rdx, OFFSET FLAT:?tls_dtor@@YAXPEAX@Z	; tls_dtor
	lea	rcx, OFFSET FLAT:?sTlsKey@@3KA
	call	?pthread_key_create@@YAHPEAKP6AXPEAX@Z@Z ; pthread_key_create
	mov	DWORD PTR key_create$6[rsp], eax
; Line 22311
	cmp	DWORD PTR key_create$6[rsp], 0
	jne	SHORT $LN14@mg_init_li
; Line 22313
	lea	rdx, OFFSET FLAT:?pthread_mutex_attr@@3PEAUpthread_mutex_undefined_struct@@EA
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_init@@YAHPEAUpthread_mutex_t@@PEAX@Z ; pthread_mutex_init
	mov	DWORD PTR file_mutex_init$4[rsp], eax
; Line 22315
	cmp	DWORD PTR file_mutex_init$4[rsp], 0
	jne	SHORT $LN15@mg_init_li
; Line 22318
	lea	rdx, QWORD PTR data$8[rsp]
	mov	cx, 514					; 00000202H
	call	QWORD PTR __imp_WSAStartup
	mov	DWORD PTR wsa$3[rsp], eax
	mov	eax, DWORD PTR wsa$3[rsp]
	mov	DWORD PTR failed$5[rsp], eax
$LN15@mg_init_li:
$LN14@mg_init_li:
; Line 22329
	cmp	DWORD PTR failed$5[rsp], 0
	je	SHORT $LN16@mg_init_li
; Line 22331
	cmp	DWORD PTR wsa$3[rsp], 0
	jne	SHORT $LN17@mg_init_li
; Line 22332
	call	QWORD PTR __imp_WSACleanup
$LN17@mg_init_li:
; Line 22334
	cmp	DWORD PTR file_mutex_init$4[rsp], 0
	jne	SHORT $LN18@mg_init_li
; Line 22335
	lea	rcx, OFFSET FLAT:?global_log_file_lock@@3Upthread_mutex_t@@A
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
$LN18@mg_init_li:
; Line 22342
	cmp	DWORD PTR key_create$6[rsp], 0
	jne	SHORT $LN19@mg_init_li
; Line 22343
	mov	ecx, DWORD PTR ?sTlsKey@@3KA
	call	?pthread_key_delete@@YAHK@Z		; pthread_key_delete
$LN19@mg_init_li:
; Line 22345
	call	?mg_global_unlock@@YAXXZ		; mg_global_unlock
; Line 22346
	lea	rcx, OFFSET FLAT:?global_lock_mutex@@3Upthread_mutex_t@@A
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 22347
	xor	eax, eax
	jmp	$LN1@mg_init_li
$LN16@mg_init_li:
; Line 22350
	mov	DWORD PTR len$2[rsp], 1
; Line 22351
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@mg_init_li
$LN2@mg_init_li:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@mg_init_li:
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?http_methods@@3QBUmg_http_method_info@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN3@mg_init_li
; Line 22352
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?http_methods@@3QBUmg_http_method_info@@B
	mov	rcx, QWORD PTR [rcx+rax]
	call	strlen
	mov	QWORD PTR sl$7[rsp], rax
; Line 22353
	mov	eax, DWORD PTR sl$7[rsp]
	mov	ecx, DWORD PTR len$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$2[rsp], eax
; Line 22354
	cmp	DWORD PTR i$1[rsp], 0
	jle	SHORT $LN20@mg_init_li
; Line 22355
	mov	eax, DWORD PTR len$2[rsp]
	add	eax, 2
	mov	DWORD PTR len$2[rsp], eax
$LN20@mg_init_li:
; Line 22357
	jmp	SHORT $LN2@mg_init_li
$LN3@mg_init_li:
; Line 22358
	movsxd	rax, DWORD PTR len$2[rsp]
	mov	rcx, rax
	call	?mg_malloc@@YAPEAX_K@Z			; mg_malloc
	mov	QWORD PTR ?all_methods@@3PEADEA, rax
; Line 22359
	cmp	QWORD PTR ?all_methods@@3PEADEA, 0
	jne	SHORT $LN21@mg_init_li
; Line 22361
	call	?mg_global_unlock@@YAXXZ		; mg_global_unlock
; Line 22362
	lea	rcx, OFFSET FLAT:?global_lock_mutex@@3Upthread_mutex_t@@A
	call	?pthread_mutex_destroy@@YAHPEAUpthread_mutex_t@@@Z ; pthread_mutex_destroy
; Line 22363
	xor	eax, eax
	jmp	$LN1@mg_init_li
$LN21@mg_init_li:
; Line 22365
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ?all_methods@@3PEADEA
	mov	BYTE PTR [rcx+rax], 0
; Line 22366
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN7@mg_init_li
$LN5@mg_init_li:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN7@mg_init_li:
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?http_methods@@3QBUmg_http_method_info@@B
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN6@mg_init_li
; Line 22367
	cmp	DWORD PTR i$1[rsp], 0
	jle	SHORT $LN22@mg_init_li
; Line 22368
	lea	rdx, OFFSET FLAT:$SG170035
	mov	rcx, QWORD PTR ?all_methods@@3PEADEA
	call	strcat
; Line 22369
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?http_methods@@3QBUmg_http_method_info@@B
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR ?all_methods@@3PEADEA
	call	strcat
; Line 22370
	jmp	SHORT $LN23@mg_init_li
$LN22@mg_init_li:
; Line 22371
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?http_methods@@3QBUmg_http_method_info@@B
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR ?all_methods@@3PEADEA
	call	strcpy
$LN23@mg_init_li:
; Line 22373
	jmp	SHORT $LN5@mg_init_li
$LN6@mg_init_li:
$LN13@mg_init_li:
; Line 22384
	mov	eax, DWORD PTR features_to_init$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN24@mg_init_li
; Line 22385
	cmp	DWORD PTR ?mg_openssl_initialized@@3HA, 0
	jne	SHORT $LN25@mg_init_li
; Line 22387
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR ebuf$9[rsp]
	call	?initialize_openssl@@YAHPEAD_K@Z	; initialize_openssl
	test	eax, eax
	je	SHORT $LN27@mg_init_li
; Line 22388
	mov	DWORD PTR ?mg_openssl_initialized@@3HA, 1
; Line 22389
	jmp	SHORT $LN28@mg_init_li
$LN27@mg_init_li:
$LN10@mg_init_li:
; Line 22391
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@mg_init_li
; Line 22392
	mov	eax, DWORD PTR features_inited$[rsp]
	and	eax, -3					; fffffffdH
	mov	DWORD PTR features_inited$[rsp], eax
$LN28@mg_init_li:
$LN25@mg_init_li:
$LN24@mg_init_li:
; Line 22401
	cmp	DWORD PTR ?mg_init_library_called@@3HA, 0
	jg	SHORT $LN29@mg_init_li
; Line 22402
	mov	DWORD PTR ?mg_init_library_called@@3HA, 1
; Line 22403
	jmp	SHORT $LN30@mg_init_li
$LN29@mg_init_li:
; Line 22404
	mov	eax, DWORD PTR ?mg_init_library_called@@3HA
	inc	eax
	mov	DWORD PTR ?mg_init_library_called@@3HA, eax
$LN30@mg_init_li:
; Line 22406
	call	?mg_global_unlock@@YAXXZ		; mg_global_unlock
; Line 22408
	mov	eax, DWORD PTR features_inited$[rsp]
$LN1@mg_init_li:
; Line 22409
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 648				; 00000288H
	ret	0
mg_init_library ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
GetArgumentCount$ = 48
GetArgument$ = 56
main	PROC
; File W:\cpp\void\detroit\brazen-entry.h
; Line 11
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
	mov	rdx, QWORD PTR GetArgument$[rsp]
	mov	ecx, DWORD PTR GetArgumentCount$[rsp]
	call	?ZenMain@@YAXHPEAPEAD@Z			; ZenMain
; Line 12
	xor	eax, eax
; Line 13
	add	rsp, 40					; 00000028H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
_$ = 176
__formal$ = 184
?ZenMain@@YAXHPEAPEAD@Z PROC				; ZenMain
; File W:\cpp\void\alistar\simple.c
; Line 10
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 11
	lea	rcx, OFFSET FLAT:?Ali@@3UAlistarContext@@A
	call	?AlistarCreateContext@@YAHPEAUAlistarContext@@@Z ; AlistarCreateContext
; Line 12
	mov	r8d, 5679				; 0000162fH
	mov	edx, 1
	lea	rcx, OFFSET FLAT:?Ali@@3UAlistarContext@@A
	call	?AlistarEstablishConnection@@YAHPEAUAlistarContext@@HH@Z ; AlistarEstablishConnection
$LN2@ZenMain:
; Line 15
	lea	rcx, OFFSET FLAT:?Ali@@3UAlistarContext@@A
	call	?AlistarTick@@YAHPEAUAlistarContext@@@Z	; AlistarTick
	test	eax, eax
	je	SHORT $LN5@ZenMain
; Line 17
	mov	DWORD PTR [rsp+32], 195			; 000000c3H
	mov	r9d, 17
	lea	r8, OFFSET FLAT:$SG173461
	lea	rdx, OFFSET FLAT:$SG173462
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG173460
	mov	edx, 2
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ZenMain:
; Line 19
	mov	ecx, 250				; 000000faH
	call	QWORD PTR __imp_Sleep
; Line 20
	jmp	$LN2@ZenMain
; Line 22
	lea	rcx, OFFSET FLAT:?Ali@@3UAlistarContext@@A
	call	?AlistarObliterateConnection@@YAXPEAUAlistarContext@@@Z ; AlistarObliterateConnection
; Line 24
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenMain@@YAXHPEAPEAD@Z ENDP				; ZenMain
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Member$ = 32
Tree$ = 64
Type$ = 72
PointerToValue$ = 80
Name$ = 88
?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z PROC	; AddMember
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 71
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 6
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Member$[rsp], rax
; Line 72
	mov	rax, QWORD PTR Member$[rsp]
	mov	rcx, QWORD PTR Type$[rsp]
	mov	QWORD PTR [rax+136], rcx
; Line 73
	mov	rax, QWORD PTR Member$[rsp]
	mov	rcx, QWORD PTR PointerToValue$[rsp]
	mov	QWORD PTR [rax+160], rcx
; Line 74
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Member$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 76
	mov	rax, QWORD PTR Tree$[rsp]
	movsxd	rax, DWORD PTR [rax+168]
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	rdx, QWORD PTR Member$[rsp]
	mov	QWORD PTR [rcx+rax*8+176], rdx
	mov	rax, QWORD PTR Tree$[rsp]
	mov	eax, DWORD PTR [rax+168]
	inc	eax
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 77
	mov	rax, QWORD PTR Member$[rsp]
; Line 78
	add	rsp, 56					; 00000038H
	ret	0
?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z ENDP	; AddMember
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Value$ = 32
Tree$ = 64
IntValue$ = 72
Name$ = 80
?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z PROC	; AddValue
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 61
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 5
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Value$[rsp], rax
; Line 62
	mov	rax, QWORD PTR Value$[rsp]
	lea	rcx, OFFSET FLAT:?TypeInteger@@3UReflectTree@@A
	mov	QWORD PTR [rax+136], rcx
; Line 63
	mov	rax, QWORD PTR Value$[rsp]
	mov	ecx, DWORD PTR IntValue$[rsp]
	mov	DWORD PTR [rax+152], ecx
; Line 64
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Value$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 66
	mov	rax, QWORD PTR Tree$[rsp]
	movsxd	rax, DWORD PTR [rax+168]
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	rdx, QWORD PTR Value$[rsp]
	mov	QWORD PTR [rcx+rax*8+176], rdx
	mov	rax, QWORD PTR Tree$[rsp]
	mov	eax, DWORD PTR [rax+168]
	inc	eax
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 67
	mov	rax, QWORD PTR Value$[rsp]
; Line 68
	add	rsp, 56					; 00000038H
	ret	0
?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z ENDP	; AddValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Tree$ = 32
Name$ = 64
?CreateStruct@@YAPEAUReflectTree@@PEBD@Z PROC		; CreateStruct
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 55
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 8
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Tree$[rsp], rax
; Line 56
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Tree$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 57
	mov	rax, QWORD PTR Tree$[rsp]
; Line 58
	add	rsp, 56					; 00000038H
	ret	0
?CreateStruct@@YAPEAUReflectTree@@PEBD@Z ENDP		; CreateStruct
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Tree$ = 32
Name$ = 64
?CreateEnum@@YAPEAUReflectTree@@PEBD@Z PROC		; CreateEnum
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 49
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 7
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Tree$[rsp], rax
; Line 50
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Tree$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 51
	mov	rax, QWORD PTR Tree$[rsp]
; Line 52
	add	rsp, 56					; 00000038H
	ret	0
?CreateEnum@@YAPEAUReflectTree@@PEBD@Z ENDP		; CreateEnum
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Tree$ = 32
Kind$ = 64
?NewReflectTree@@YAPEAUReflectTree@@H@Z PROC		; NewReflectTree
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 42
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	ecx, 432				; 000001b0H
	call	malloc
	mov	QWORD PTR Tree$[rsp], rax
; Line 43
	mov	r8d, 432				; 000001b0H
	xor	edx, edx
	mov	rcx, QWORD PTR Tree$[rsp]
	call	memset
; Line 44
	mov	eax, DWORD PTR Kind$[rsp]
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -65536				; ffff0000H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 45
	mov	rax, QWORD PTR Tree$[rsp]
; Line 46
	add	rsp, 56					; 00000038H
	ret	0
?NewReflectTree@@YAPEAUReflectTree@@H@Z ENDP		; NewReflectTree
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Format$ = 48
DimenX$ = 56
DimenY$ = 64
?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z PROC		; ZenComputeTrimmedSizeForTexture
; File W:\cpp\void\detroit\brazen-core.h
; Line 323
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 325
	mov	ecx, DWORD PTR Format$[rsp]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	imul	eax, DWORD PTR DimenX$[rsp]
	imul	eax, DWORD PTR DimenY$[rsp]
; Line 326
	add	rsp, 40					; 00000028H
	ret	0
?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z ENDP		; ZenComputeTrimmedSizeForTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Texture$ = 48
?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z PROC	; ZenZeroTextureMemory
; File W:\cpp\void\detroit\brazen-core.h
; Line 316
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 317
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR [rcx+8]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 318
	add	rsp, 40					; 00000028H
	ret	0
?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z ENDP	; ZenZeroTextureMemory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memory$ = 32
Caller$ = 64
Core$ = 72
Size$ = 80
?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z PROC ; ZenCoreDebugFrameAlloc
; File W:\cpp\void\detroit\brazen-core.h
; Line 131
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 132
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 16
	mov	edx, DWORD PTR Size$[rsp]
	mov	rcx, rax
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR Memory$[rsp], rax
; Line 135
	cmp	QWORD PTR Memory$[rsp], 0
	je	SHORT $LN2@ZenCoreDeb
	mov	eax, DWORD PTR Size$[rsp]
	mov	r8d, eax
	xor	edx, edx
	mov	rcx, QWORD PTR Memory$[rsp]
	call	memset
$LN2@ZenCoreDeb:
; Line 137
	mov	rax, QWORD PTR Memory$[rsp]
; Line 138
	add	rsp, 56					; 00000038H
	ret	0
?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ENDP ; ZenCoreDebugFrameAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 8
File$ = 16
Func$ = 24
Line$ = 32
Guid$ = 40
?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z PROC	; ZenCreateCallerInfo
; File W:\cpp\void\detroit\brazen-core.h
; Line 88
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rcx, QWORD PTR File$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rcx, QWORD PTR Func$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Line$[rsp]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Guid$[rsp]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 89
	ret	0
?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ENDP	; ZenCreateCallerInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
Released$ = 52
$T1 = 56
$T2 = 80
$T3 = 112
Mutex$ = 176
?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z PROC		; ZenReleaseNativeMutexEnsured
; File W:\cpp\void\detroit\brazen-window.h
; Line 75
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 76
	mov	rcx, QWORD PTR Mutex$[rsp]
	call	?ZenReleaseNativeMutex@@YAHPEAX@Z	; ZenReleaseNativeMutex
	mov	DWORD PTR Released$[rsp], eax
; Line 77
	mov	DWORD PTR [rsp+32], 49			; 00000031H
	mov	r9d, 77					; 0000004dH
	lea	r8, OFFSET FLAT:$SG93893
	lea	rdx, OFFSET FLAT:$SG93894
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	cmp	DWORD PTR Released$[rsp], 0
	je	SHORT $LN3@ZenRelease
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@ZenRelease
$LN3@ZenRelease:
	mov	DWORD PTR tv69[rsp], 0
$LN4@ZenRelease:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG93891
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG93892
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 79
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenReleaseNativeMutexEnsured@@YAXPEAX@Z ENDP		; ZenReleaseNativeMutexEnsured
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Mutex$ = 48
?ZenReleaseNativeMutex@@YAHPEAX@Z PROC			; ZenReleaseNativeMutex
; File W:\cpp\void\detroit\brazen-window.h
; Line 70
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR Mutex$[rsp]
	call	QWORD PTR __imp_ReleaseMutex
; Line 71
	add	rsp, 40					; 00000028H
	ret	0
?ZenReleaseNativeMutex@@YAHPEAX@Z ENDP			; ZenReleaseNativeMutex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Code$1 = 32
Mutex$ = 64
?ZenAcquireNativeMutex@@YAHPEAX@Z PROC			; ZenAcquireNativeMutex
; File W:\cpp\void\detroit\brazen-window.h
; Line 60
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@ZenAcquire:
; Line 62
	mov	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR Mutex$[rsp]
	call	QWORD PTR __imp_WaitForSingleObject
	mov	DWORD PTR Code$1[rsp], eax
; Line 63
	cmp	DWORD PTR Code$1[rsp], 0
	jne	SHORT $LN5@ZenAcquire
	mov	eax, 1
	jmp	SHORT $LN1@ZenAcquire
$LN5@ZenAcquire:
; Line 64
	cmp	DWORD PTR Code$1[rsp], 128		; 00000080H
	jne	SHORT $LN6@ZenAcquire
	xor	eax, eax
	jmp	SHORT $LN1@ZenAcquire
$LN6@ZenAcquire:
; Line 65
	jmp	SHORT $LN2@ZenAcquire
$LN1@ZenAcquire:
; Line 66
	add	rsp, 56					; 00000038H
	ret	0
?ZenAcquireNativeMutex@@YAHPEAX@Z ENDP			; ZenAcquireNativeMutex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
InitialOwner$ = 48
Name$ = 56
?ZenCreateNativeMutex@@YAPEAXHPEBD@Z PROC		; ZenCreateNativeMutex
; File W:\cpp\void\detroit\brazen-window.h
; Line 55
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
	mov	r8, QWORD PTR Name$[rsp]
	mov	edx, DWORD PTR InitialOwner$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateMutexA
; Line 56
	add	rsp, 40					; 00000028H
	ret	0
?ZenCreateNativeMutex@@YAPEAXHPEBD@Z ENDP		; ZenCreateNativeMutex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Event$ = 48
?ZenProduceNativeEvent@@YAHPEAX@Z PROC			; ZenProduceNativeEvent
; File W:\cpp\void\detroit\brazen-window.h
; Line 50
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR Event$[rsp]
	call	QWORD PTR __imp_SetEvent
; Line 51
	add	rsp, 40					; 00000028H
	ret	0
?ZenProduceNativeEvent@@YAHPEAX@Z ENDP			; ZenProduceNativeEvent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Code$1 = 32
Event$ = 64
?ZenConsumeNativeEvent@@YAHPEAX@Z PROC			; ZenConsumeNativeEvent
; File W:\cpp\void\detroit\brazen-window.h
; Line 40
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@ZenConsume:
; Line 42
	mov	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR Event$[rsp]
	call	QWORD PTR __imp_WaitForSingleObject
	mov	DWORD PTR Code$1[rsp], eax
; Line 43
	cmp	DWORD PTR Code$1[rsp], 0
	jne	SHORT $LN5@ZenConsume
	mov	eax, 1
	jmp	SHORT $LN1@ZenConsume
$LN5@ZenConsume:
; Line 44
	cmp	DWORD PTR Code$1[rsp], 128		; 00000080H
	jne	SHORT $LN6@ZenConsume
	xor	eax, eax
	jmp	SHORT $LN1@ZenConsume
$LN6@ZenConsume:
; Line 45
	jmp	SHORT $LN2@ZenConsume
$LN1@ZenConsume:
; Line 46
	add	rsp, 56					; 00000038H
	ret	0
?ZenConsumeNativeEvent@@YAHPEAX@Z ENDP			; ZenConsumeNativeEvent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Event$ = 48
?ZenResetNativeEvent@@YAHPEAX@Z PROC			; ZenResetNativeEvent
; File W:\cpp\void\detroit\brazen-window.h
; Line 35
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR Event$[rsp]
	call	QWORD PTR __imp_ResetEvent
; Line 36
	add	rsp, 40					; 00000028H
	ret	0
?ZenResetNativeEvent@@YAHPEAX@Z ENDP			; ZenResetNativeEvent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
tv72 = 36
AutoReset$ = 64
IsSignaled$ = 72
Name$ = 80
?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z PROC		; ZenCreateNativeEvent
; File W:\cpp\void\detroit\brazen-window.h
; Line 30
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR IsSignaled$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	cmp	DWORD PTR AutoReset$[rsp], 0
	jne	SHORT $LN3@ZenCreateN
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@ZenCreateN
$LN3@ZenCreateN:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ZenCreateN:
	mov	r9, QWORD PTR Name$[rsp]
	mov	r8d, DWORD PTR tv72[rsp]
	mov	edx, DWORD PTR tv68[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateEventA
; Line 31
	add	rsp, 56					; 00000038H
	ret	0
?ZenCreateNativeEvent@@YAPEAXHHPEBD@Z ENDP		; ZenCreateNativeEvent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv87 = 48
tv81 = 52
tv83 = 56
tv79 = 60
tv85 = 64
Texture$ = 96
FileName$ = 104
?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z PROC	; ZenWriteTextureToFile
; File W:\cpp\void\detroit\brazen-texture.h
; Line 61
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 64
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv87[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv85[rsp], rax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR tv81[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv83[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv79[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR tv85[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR tv81[rsp]
	mov	r8d, DWORD PTR tv83[rsp]
	mov	edx, DWORD PTR tv79[rsp]
	mov	rcx, QWORD PTR FileName$[rsp]
	call	stbi_write_png
	test	eax, eax
	je	SHORT $LN2@ZenWriteTe
; Line 67
	mov	eax, 1
	jmp	SHORT $LN1@ZenWriteTe
$LN2@ZenWriteTe:
; Line 70
	xor	eax, eax
$LN1@ZenWriteTe:
; Line 71
	add	rsp, 88					; 00000058H
	ret	0
?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ENDP	; ZenWriteTextureToFile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
Stride$ = 36
__$ReturnAddress$ = 64
Access$ = 72
Format$ = 80
DimenX$ = 88
DimenY$ = 96
Memory$ = 104
?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z PROC	; ZenUnboundTexture
; File W:\cpp\void\detroit\brazen-texture.h
; Line 32
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR Memory$[rsp], 0
	je	SHORT $LN3@ZenUnbound
	mov	ecx, DWORD PTR Format$[rsp]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	ecx, DWORD PTR DimenX$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@ZenUnbound
$LN3@ZenUnbound:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ZenUnbound:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR Stride$[rsp], eax
; Line 35
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Access$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 36
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Format$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 37
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR DimenX$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 38
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR DimenY$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 39
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Stride$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 40
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rcx, QWORD PTR Memory$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 41
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 42
	add	rsp, 56					; 00000038H
	ret	0
?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ENDP	; ZenUnboundTexture
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__ESTANDARD_BASIS_COLOR@@YAXXZ
text$di	SEGMENT
??__ESTANDARD_BASIS_COLOR@@YAXXZ PROC			; `dynamic initializer for 'STANDARD_BASIS_COLOR'', COMDAT
; File W:\cpp\void\detroit\brazen-color.h
; Line 27
	push	rsi
	push	rdi
; Line 24
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBTf32x4@@B
	lea	rcx, OFFSET FLAT:?COLOR_RED@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 25
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBTf32x4@@B+16
	lea	rcx, OFFSET FLAT:?COLOR_GREEN@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 26
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBTf32x4@@B+32
	lea	rcx, OFFSET FLAT:?COLOR_BLUE@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	pop	rdi
	pop	rsi
	ret	0
??__ESTANDARD_BASIS_COLOR@@YAXXZ ENDP			; `dynamic initializer for 'STANDARD_BASIS_COLOR''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 48
Result$1 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Arena$ = 192
Commit$ = 200
?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z PROC		; ZenArenaAlloc
; File W:\cpp\void\detroit\brazen-memory.h
; Line 53
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR Arena$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR Commit$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	cmp	eax, DWORD PTR [rcx]
	ja	SHORT $LN2@ZenArenaAl
; Line 54
	mov	rax, QWORD PTR Arena$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR Arena$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR Result$1[rsp], rax
; Line 55
	mov	rax, QWORD PTR Arena$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR Commit$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 56
	mov	rax, QWORD PTR Result$1[rsp]
	jmp	$LN1@ZenArenaAl
	jmp	$LN3@ZenArenaAl
$LN2@ZenArenaAl:
; Line 57
	mov	DWORD PTR [rsp+32], 39			; 00000027H
	mov	r9d, 57					; 00000039H
	lea	r8, OFFSET FLAT:$SG93395
	lea	rdx, OFFSET FLAT:$SG93396
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG93393
	test	rax, rax
	jne	SHORT $LN5@ZenArenaAl
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN6@ZenArenaAl
$LN5@ZenArenaAl:
	mov	DWORD PTR tv78[rsp], 0
$LN6@ZenArenaAl:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG93392
	mov	r8d, DWORD PTR tv78[rsp]
	lea	rdx, OFFSET FLAT:$SG93394
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN3@ZenArenaAl:
; Line 58
	xor	eax, eax
$LN1@ZenArenaAl:
; Line 59
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z ENDP		; ZenArenaAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 80
col$ = 84
pos$1 = 88
y$2 = 92
x$3 = 96
DCY$4 = 100
bitCnt$5 = 104
bitBuf$6 = 108
j$7 = 112
i$ = 116
k$ = 120
yy$8 = 124
xx$9 = 128
DCU$10 = 132
DCV$11 = 136
yti$12 = 140
uvti$13 = 144
p$14 = 148
r$15 = 152
g$16 = 156
b$17 = 160
p$18 = 164
r$19 = 168
g$20 = 172
b$21 = 176
tv70 = 180
tv72 = 184
tv75 = 188
tv76 = 192
tv81 = 196
tv130 = 200
tv131 = 204
tv147 = 208
tv148 = 212
tv204 = 216
tv374 = 220
tv376 = 224
subsample$ = 228
tv391 = 232
clamped_row$22 = 236
tv395 = 240
tv404 = 244
tv573 = 248
clamped_row$23 = 252
tv577 = 256
tv586 = 260
dataR$24 = 264
ofsG$25 = 272
ofsB$26 = 276
base_p$27 = 280
base_p$28 = 284
dataG$29 = 288
dataB$30 = 296
tv212 = 304
tv219 = 312
tv292 = 320
tv299 = 328
tv307 = 336
tv314 = 344
tv324 = 352
tv331 = 360
tv341 = 368
tv348 = 376
tv358 = 384
tv365 = 392
tv372 = 400
fdtbl_Y$ = 416
fdtbl_UV$ = 672
subU$31 = 928
subV$32 = 1184
Y$33 = 1440
U$34 = 1696
V$35 = 1952
Y$36 = 2208
U$37 = 3232
V$38 = 4256
head1$39 = 5280
YTable$ = 5312
UVTable$ = 5376
__$ArrayPad$ = 5440
s$ = 5472
width$ = 5480
height$ = 5488
comp$ = 5496
data$ = 5504
quality$ = 5512
?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z PROC ; stbi_write_jpg_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1398
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 5464				; 00001558H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1474
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR width$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR height$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	jg	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 1
	jge	SHORT $LN41@stbi_write
$LN42@stbi_write:
; Line 1475
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN41@stbi_write:
; Line 1478
	cmp	DWORD PTR quality$[rsp], 0
	je	SHORT $LN46@stbi_write
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN47@stbi_write
$LN46@stbi_write:
	mov	DWORD PTR tv70[rsp], 90			; 0000005aH
$LN47@stbi_write:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1479
	cmp	DWORD PTR quality$[rsp], 90		; 0000005aH
	jg	SHORT $LN48@stbi_write
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN49@stbi_write
$LN48@stbi_write:
	mov	DWORD PTR tv72[rsp], 0
$LN49@stbi_write:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR subsample$[rsp], eax
; Line 1480
	cmp	DWORD PTR quality$[rsp], 1
	jge	SHORT $LN52@stbi_write
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN53@stbi_write
$LN52@stbi_write:
	cmp	DWORD PTR quality$[rsp], 100		; 00000064H
	jle	SHORT $LN50@stbi_write
	mov	DWORD PTR tv75[rsp], 100		; 00000064H
	jmp	SHORT $LN51@stbi_write
$LN50@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN51@stbi_write:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR tv76[rsp], eax
$LN53@stbi_write:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1481
	cmp	DWORD PTR quality$[rsp], 50		; 00000032H
	jge	SHORT $LN54@stbi_write
	mov	eax, 5000				; 00001388H
	cdq
	idiv	DWORD PTR quality$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN55@stbi_write
$LN54@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	shl	eax, 1
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv81[rsp], eax
$LN55@stbi_write:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1483
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_write:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	$LN3@stbi_write
; Line 1484
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR yti$12[rsp], eax
; Line 1485
	cmp	DWORD PTR yti$12[rsp], 1
	jge	SHORT $LN58@stbi_write
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN59@stbi_write
$LN58@stbi_write:
	cmp	DWORD PTR yti$12[rsp], 255		; 000000ffH
	jle	SHORT $LN56@stbi_write
	mov	DWORD PTR tv130[rsp], 255		; 000000ffH
	jmp	SHORT $LN57@stbi_write
$LN56@stbi_write:
	mov	eax, DWORD PTR yti$12[rsp]
	mov	DWORD PTR tv130[rsp], eax
$LN57@stbi_write:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR tv131[rsp], eax
$LN59@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv131[rsp]
	mov	BYTE PTR YTable$[rsp+rax], cl
; Line 1486
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR uvti$13[rsp], eax
; Line 1487
	cmp	DWORD PTR uvti$13[rsp], 1
	jge	SHORT $LN62@stbi_write
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN63@stbi_write
$LN62@stbi_write:
	cmp	DWORD PTR uvti$13[rsp], 255		; 000000ffH
	jle	SHORT $LN60@stbi_write
	mov	DWORD PTR tv147[rsp], 255		; 000000ffH
	jmp	SHORT $LN61@stbi_write
$LN60@stbi_write:
	mov	eax, DWORD PTR uvti$13[rsp]
	mov	DWORD PTR tv147[rsp], eax
$LN61@stbi_write:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN63@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv148[rsp]
	mov	BYTE PTR UVTable$[rsp+rax], cl
; Line 1488
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1490
	mov	DWORD PTR row$[rsp], 0
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR row$[rsp], 8
	jge	$LN6@stbi_write
; Line 1491
	mov	DWORD PTR col$[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi_write:
	cmp	DWORD PTR col$[rsp], 8
	jge	$LN9@stbi_write
; Line 1492
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR YTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_Y$[rsp+rax*4], xmm0
; Line 1493
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR UVTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_UV$[rsp+rax*4], xmm0
; Line 1494
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 1495
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1501
	mov	BYTE PTR head1$39[rsp], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+1], 192		; 000000c0H
	mov	BYTE PTR head1$39[rsp+2], 0
	mov	BYTE PTR head1$39[rsp+3], 17
	mov	BYTE PTR head1$39[rsp+4], 8
	mov	eax, DWORD PTR height$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+5], al
	mov	eax, DWORD PTR height$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+6], al
	mov	eax, DWORD PTR width$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+7], al
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+8], al
; Line 1502
	mov	BYTE PTR head1$39[rsp+9], 3
	mov	BYTE PTR head1$39[rsp+10], 1
	cmp	DWORD PTR subsample$[rsp], 0
	je	SHORT $LN64@stbi_write
	mov	DWORD PTR tv204[rsp], 34		; 00000022H
	jmp	SHORT $LN65@stbi_write
$LN64@stbi_write:
	mov	DWORD PTR tv204[rsp], 17
$LN65@stbi_write:
	movzx	eax, BYTE PTR tv204[rsp]
	mov	BYTE PTR head1$39[rsp+11], al
	mov	BYTE PTR head1$39[rsp+12], 0
	mov	BYTE PTR head1$39[rsp+13], 2
	mov	BYTE PTR head1$39[rsp+14], 17
	mov	BYTE PTR head1$39[rsp+15], 1
	mov	BYTE PTR head1$39[rsp+16], 3
	mov	BYTE PTR head1$39[rsp+17], 17
	mov	BYTE PTR head1$39[rsp+18], 1
	mov	BYTE PTR head1$39[rsp+19], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+20], 196		; 000000c4H
	mov	BYTE PTR head1$39[rsp+21], 1
	mov	BYTE PTR head1$39[rsp+22], 162		; 000000a2H
	mov	BYTE PTR head1$39[rsp+23], 0
; Line 1503
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv212[rsp], rax
	mov	r8d, 25
	lea	rdx, OFFSET FLAT:?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv212[rsp]
; Line 1504
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv219[rsp], rax
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR YTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv219[rsp]
; Line 1505
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1506
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv292[rsp], rax
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR UVTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv292[rsp]
; Line 1507
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv299[rsp], rax
	mov	r8d, 24
	lea	rdx, QWORD PTR head1$39[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv299[rsp]
; Line 1508
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv307[rsp], rax
	lea	rax, OFFSET FLAT:?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv307[rsp]
; Line 1509
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv314[rsp], rax
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv314[rsp]
; Line 1510
	mov	dl, 16
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1511
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv324[rsp], rax
	lea	rax, OFFSET FLAT:?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv324[rsp]
; Line 1512
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv331[rsp], rax
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv331[rsp]
; Line 1513
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1514
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv341[rsp], rax
	lea	rax, OFFSET FLAT:?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv341[rsp]
; Line 1515
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv348[rsp], rax
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv348[rsp]
; Line 1516
	mov	dl, 17
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1517
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv358[rsp], rax
	lea	rax, OFFSET FLAT:?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv358[rsp]
; Line 1518
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv365[rsp], rax
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv365[rsp]
; Line 1519
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv372[rsp], rax
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv372[rsp]
; Line 1525
	mov	DWORD PTR DCY$4[rsp], 0
	mov	DWORD PTR DCU$10[rsp], 0
	mov	DWORD PTR DCV$11[rsp], 0
; Line 1526
	mov	DWORD PTR bitBuf$6[rsp], 0
	mov	DWORD PTR bitCnt$5[rsp], 0
; Line 1528
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN66@stbi_write
	mov	DWORD PTR tv374[rsp], 1
	jmp	SHORT $LN67@stbi_write
$LN66@stbi_write:
	mov	DWORD PTR tv374[rsp], 0
$LN67@stbi_write:
	mov	eax, DWORD PTR tv374[rsp]
	mov	DWORD PTR ofsG$25[rsp], eax
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN68@stbi_write
	mov	DWORD PTR tv376[rsp], 2
	jmp	SHORT $LN69@stbi_write
$LN68@stbi_write:
	mov	DWORD PTR tv376[rsp], 0
$LN69@stbi_write:
	mov	eax, DWORD PTR tv376[rsp]
	mov	DWORD PTR ofsB$26[rsp], eax
; Line 1529
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR dataR$24[rsp], rax
; Line 1530
	movsxd	rax, DWORD PTR ofsG$25[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataG$29[rsp], rax
; Line 1531
	movsxd	rax, DWORD PTR ofsB$26[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataB$30[rsp], rax
; Line 1533
	cmp	DWORD PTR subsample$[rsp], 0
	je	$LN43@stbi_write
; Line 1534
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	mov	DWORD PTR y$2[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN12@stbi_write
; Line 1535
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	mov	DWORD PTR x$3[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN15@stbi_write
; Line 1537
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN19@stbi_write
$LN17@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN19@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN18@stbi_write
; Line 1539
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN70@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv391[rsp], eax
	jmp	SHORT $LN71@stbi_write
$LN70@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv391[rsp], eax
$LN71@stbi_write:
	mov	eax, DWORD PTR tv391[rsp]
	mov	DWORD PTR clamped_row$22[rsp], eax
; Line 1540
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN72@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv395[rsp], eax
	jmp	SHORT $LN73@stbi_write
$LN72@stbi_write:
	mov	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv395[rsp], eax
$LN73@stbi_write:
	mov	eax, DWORD PTR tv395[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$27[rsp], eax
; Line 1541
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN22@stbi_write
$LN20@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN22@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN21@stbi_write
; Line 1543
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN74@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv404[rsp], eax
	jmp	SHORT $LN75@stbi_write
$LN74@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv404[rsp], eax
$LN75@stbi_write:
	mov	eax, DWORD PTR tv404[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$14[rsp], eax
; Line 1544
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$15[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$16[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$17[rsp], xmm0
; Line 1545
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$16[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$36[rsp+rax*4], xmm0
; Line 1546
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$37[rsp+rax*4], xmm0
; Line 1547
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$17[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$38[rsp+rax*4], xmm0
; Line 1548
	jmp	$LN20@stbi_write
$LN21@stbi_write:
; Line 1549
	jmp	$LN17@stbi_write
$LN18@stbi_write:
; Line 1550
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 16
	lea	r9, QWORD PTR Y$36[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1551
	lea	rax, QWORD PTR Y$36[rsp+32]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1552
	lea	rax, QWORD PTR Y$36[rsp+512]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1553
	lea	rax, QWORD PTR Y$36[rsp+544]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1559
	mov	DWORD PTR yy$8[rsp], 0
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN25@stbi_write
$LN23@stbi_write:
	mov	eax, DWORD PTR yy$8[rsp]
	inc	eax
	mov	DWORD PTR yy$8[rsp], eax
$LN25@stbi_write:
	cmp	DWORD PTR yy$8[rsp], 8
	jge	$LN24@stbi_write
; Line 1560
	mov	DWORD PTR xx$9[rsp], 0
	jmp	SHORT $LN28@stbi_write
$LN26@stbi_write:
	mov	eax, DWORD PTR xx$9[rsp]
	inc	eax
	mov	DWORD PTR xx$9[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN28@stbi_write:
	cmp	DWORD PTR xx$9[rsp], 8
	jge	$LN27@stbi_write
; Line 1561
	imul	eax, DWORD PTR yy$8[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR xx$9[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR j$7[rsp], eax
; Line 1562
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR U$37[rsp+rax*4]
	addss	xmm0, DWORD PTR U$37[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subU$31[rsp+rax*4], xmm0
; Line 1563
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR V$38[rsp+rax*4]
	addss	xmm0, DWORD PTR V$38[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subV$32[rsp+rax*4], xmm0
; Line 1564
	jmp	$LN26@stbi_write
$LN27@stbi_write:
; Line 1565
	jmp	$LN23@stbi_write
$LN24@stbi_write:
; Line 1566
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subU$31[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1567
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subV$32[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1569
	jmp	$LN14@stbi_write
$LN15@stbi_write:
; Line 1570
	jmp	$LN11@stbi_write
$LN12@stbi_write:
; Line 1571
	jmp	$LN44@stbi_write
$LN43@stbi_write:
; Line 1572
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN31@stbi_write
$LN29@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	mov	DWORD PTR y$2[rsp], eax
$LN31@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN30@stbi_write
; Line 1573
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN32@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	mov	DWORD PTR x$3[rsp], eax
$LN34@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN33@stbi_write
; Line 1575
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN37@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN37@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN36@stbi_write
; Line 1577
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN76@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv573[rsp], eax
	jmp	SHORT $LN77@stbi_write
$LN76@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv573[rsp], eax
$LN77@stbi_write:
	mov	eax, DWORD PTR tv573[rsp]
	mov	DWORD PTR clamped_row$23[rsp], eax
; Line 1578
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN78@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv577[rsp], eax
	jmp	SHORT $LN79@stbi_write
$LN78@stbi_write:
	mov	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv577[rsp], eax
$LN79@stbi_write:
	mov	eax, DWORD PTR tv577[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$28[rsp], eax
; Line 1579
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN40@stbi_write
$LN38@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN40@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN39@stbi_write
; Line 1581
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN80@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv586[rsp], eax
	jmp	SHORT $LN81@stbi_write
$LN80@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv586[rsp], eax
$LN81@stbi_write:
	mov	eax, DWORD PTR tv586[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$28[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$18[rsp], eax
; Line 1582
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$19[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$20[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$21[rsp], xmm0
; Line 1583
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$20[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$33[rsp+rax*4], xmm0
; Line 1584
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$34[rsp+rax*4], xmm0
; Line 1585
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$21[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$35[rsp+rax*4], xmm0
; Line 1586
	jmp	$LN38@stbi_write
$LN39@stbi_write:
; Line 1587
	jmp	$LN35@stbi_write
$LN36@stbi_write:
; Line 1589
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR Y$33[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1590
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR U$34[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1591
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR V$35[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1592
	jmp	$LN32@stbi_write
$LN33@stbi_write:
; Line 1593
	jmp	$LN29@stbi_write
$LN30@stbi_write:
$LN44@stbi_write:
; Line 1597
	lea	r9, OFFSET FLAT:?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1601
	mov	dl, 255					; 000000ffH
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1602
	mov	dl, 217					; 000000d9H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1604
	mov	eax, 1
$LN1@stbi_write:
; Line 1605
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 5464				; 00001558H
	ret	0
?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ENDP ; stbi_write_jpg_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dataOff$ = 64
i$ = 68
end0pos$ = 72
nrzeroes$1 = 76
y$ = 80
x$ = 84
j$ = 88
v$2 = 92
nrmarker$3 = 96
EOB$ = 100
tv224 = 104
diff$ = 108
bits$4 = 112
M16zeroes$ = 116
bits$5 = 120
n$ = 124
startpos$6 = 128
lng$7 = 132
tv195 = 136
DU$ = 144
__$ArrayPad$ = 400
s$ = 448
bitBuf$ = 456
bitCnt$ = 464
CDU$ = 472
du_stride$ = 480
fdtbl$ = 488
DC$ = 496
HTDC$ = 504
HTAC$ = 512
?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z PROC ; stbiw__jpg_processDU
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1328
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1329
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp+2], ax
; Line 1330
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp+2], ax
; Line 1335
	mov	DWORD PTR dataOff$[rsp], 0
	mov	eax, DWORD PTR du_stride$[rsp]
	shl	eax, 3
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN4@stbiw__jpg
$LN2@stbiw__jpg:
	mov	eax, DWORD PTR du_stride$[rsp]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dataOff$[rsp], eax
$LN4@stbiw__jpg:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR dataOff$[rsp], eax
	jge	$LN3@stbiw__jpg
; Line 1336
	mov	eax, DWORD PTR dataOff$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, 6
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, 5
	movsxd	rdx, edx
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [r8+rdx*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, 4
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR dataOff$[rsp]
	add	r9d, 3
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, 2
	movsxd	r10, r10d
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	r11d, DWORD PTR dataOff$[rsp]
	inc	r11d
	movsxd	r11, r11d
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rbx+r11*4]
	movsxd	r11, DWORD PTR dataOff$[rsp]
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [rdi+r11*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], r8
	mov	r8, r10
	mov	rdx, rbx
	mov	rcx, rdi
	call	?stbiw__jpg_DCT@@YAXPEAM0000000@Z	; stbiw__jpg_DCT
; Line 1337
	jmp	$LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1339
	mov	DWORD PTR dataOff$[rsp], 0
	jmp	SHORT $LN7@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR dataOff$[rsp]
	inc	eax
	mov	DWORD PTR dataOff$[rsp], eax
$LN7@stbiw__jpg:
	cmp	DWORD PTR dataOff$[rsp], 8
	jge	$LN6@stbiw__jpg
; Line 1340
	imul	eax, DWORD PTR du_stride$[rsp], 7
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	imul	ecx, DWORD PTR du_stride$[rsp], 6
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	imul	edx, DWORD PTR du_stride$[rsp], 5
	mov	ebx, DWORD PTR dataOff$[rsp]
	add	ebx, edx
	mov	edx, ebx
	movsxd	rdx, edx
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [rbx+rdx*4]
	mov	ebx, DWORD PTR dataOff$[rsp]
	mov	edi, DWORD PTR du_stride$[rsp]
	lea	ebx, DWORD PTR [rbx+rdi*4]
	movsxd	rbx, ebx
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rdi+rbx*4]
	imul	edi, DWORD PTR du_stride$[rsp], 3
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, edi
	mov	edi, r8d
	movsxd	rdi, edi
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [r8+rdi*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	mov	r9d, DWORD PTR du_stride$[rsp]
	lea	r8d, DWORD PTR [r8+r9*2]
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR du_stride$[rsp]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, r9d
	mov	r9d, r10d
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	QWORD PTR tv195[rsp], r9
	movsxd	r10, DWORD PTR dataOff$[rsp]
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], rbx
	mov	r9, rdi
	mov	rax, QWORD PTR tv195[rsp]
	mov	rdx, rax
	mov	rcx, r10
	call	?stbiw__jpg_DCT@@YAXPEAM0000000@Z	; stbiw__jpg_DCT
; Line 1342
	jmp	$LN5@stbiw__jpg
$LN6@stbiw__jpg:
; Line 1344
	mov	DWORD PTR y$[rsp], 0
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stbiw__jpg
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN10@stbiw__jpg:
	cmp	DWORD PTR y$[rsp], 8
	jge	$LN9@stbiw__jpg
; Line 1345
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN13@stbiw__jpg
$LN11@stbiw__jpg:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbiw__jpg:
	cmp	DWORD PTR x$[rsp], 8
	jge	$LN12@stbiw__jpg
; Line 1347
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR du_stride$[rsp]
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 1348
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR CDU$[rsp]
	mov	rbx, QWORD PTR fdtbl$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	mulss	xmm0, DWORD PTR [rbx+rcx*4]
	movss	DWORD PTR v$2[rsp], xmm0
; Line 1351
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v$2[rsp]
	jbe	SHORT $LN32@stbiw__jpg
	movss	xmm0, DWORD PTR v$2[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
	jmp	SHORT $LN33@stbiw__jpg
$LN32@stbiw__jpg:
	movss	xmm0, DWORD PTR v$2[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
$LN33@stbiw__jpg:
	cvttss2si eax, DWORD PTR tv224[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	lea	rdx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR DU$[rsp+rcx*4], eax
; Line 1352
	jmp	$LN11@stbiw__jpg
$LN12@stbiw__jpg:
; Line 1353
	jmp	$LN8@stbiw__jpg
$LN9@stbiw__jpg:
; Line 1356
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR DC$[rsp]
	mov	eax, DWORD PTR DU$[rsp+rax]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 1357
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN26@stbiw__jpg
; Line 1358
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTDC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1359
	jmp	SHORT $LN27@stbiw__jpg
$LN26@stbiw__jpg:
; Line 1361
	lea	rdx, QWORD PTR bits$4[rsp]
	mov	ecx, DWORD PTR diff$[rsp]
	call	?stbiw__jpg_calcBits@@YAXHQEAG@Z	; stbiw__jpg_calcBits
; Line 1362
	mov	eax, 2
	imul	rax, rax, 1
	movzx	eax, WORD PTR bits$4[rsp+rax]
	mov	rcx, QWORD PTR HTDC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1363
	lea	r9, QWORD PTR bits$4[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
$LN27@stbiw__jpg:
; Line 1366
	mov	DWORD PTR end0pos$[rsp], 63		; 0000003fH
; Line 1367
	jmp	SHORT $LN16@stbiw__jpg
$LN14@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	dec	eax
	mov	DWORD PTR end0pos$[rsp], eax
$LN16@stbiw__jpg:
	cmp	DWORD PTR end0pos$[rsp], 0
	jle	SHORT $LN15@stbiw__jpg
	movsxd	rax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN15@stbiw__jpg
; Line 1368
	jmp	SHORT $LN14@stbiw__jpg
$LN15@stbiw__jpg:
; Line 1370
	cmp	DWORD PTR end0pos$[rsp], 0
	jne	SHORT $LN28@stbiw__jpg
; Line 1371
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1372
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
	jmp	$LN1@stbiw__jpg
$LN28@stbiw__jpg:
; Line 1374
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN19@stbiw__jpg
$LN17@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	$LN18@stbiw__jpg
; Line 1375
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR startpos$6[rsp], eax
; Line 1378
	jmp	SHORT $LN22@stbiw__jpg
$LN20@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbiw__jpg:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN21@stbiw__jpg
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN21@stbiw__jpg
; Line 1379
	jmp	SHORT $LN20@stbiw__jpg
$LN21@stbiw__jpg:
; Line 1380
	mov	eax, DWORD PTR startpos$6[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nrzeroes$1[rsp], eax
; Line 1381
	cmp	DWORD PTR nrzeroes$1[rsp], 16
	jl	SHORT $LN29@stbiw__jpg
; Line 1382
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	sar	eax, 4
	mov	DWORD PTR lng$7[rsp], eax
; Line 1384
	mov	DWORD PTR nrmarker$3[rsp], 1
	jmp	SHORT $LN25@stbiw__jpg
$LN23@stbiw__jpg:
	mov	eax, DWORD PTR nrmarker$3[rsp]
	inc	eax
	mov	DWORD PTR nrmarker$3[rsp], eax
$LN25@stbiw__jpg:
	mov	eax, DWORD PTR lng$7[rsp]
	cmp	DWORD PTR nrmarker$3[rsp], eax
	jg	SHORT $LN24@stbiw__jpg
; Line 1385
	lea	r9, QWORD PTR M16zeroes$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
	jmp	SHORT $LN23@stbiw__jpg
$LN24@stbiw__jpg:
; Line 1386
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	and	eax, 15
	mov	DWORD PTR nrzeroes$1[rsp], eax
$LN29@stbiw__jpg:
; Line 1388
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rdx, QWORD PTR bits$5[rsp]
	mov	ecx, DWORD PTR DU$[rsp+rax*4]
	call	?stbiw__jpg_calcBits@@YAXHQEAG@Z	; stbiw__jpg_calcBits
; Line 1389
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	shl	eax, 4
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	ecx, WORD PTR bits$5[rsp+rcx]
	add	eax, ecx
	cdqe
	mov	rcx, QWORD PTR HTAC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1390
	lea	r9, QWORD PTR bits$5[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1391
	jmp	$LN17@stbiw__jpg
$LN18@stbiw__jpg:
; Line 1392
	cmp	DWORD PTR end0pos$[rsp], 63		; 0000003fH
	je	SHORT $LN30@stbiw__jpg
; Line 1393
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
$LN30@stbiw__jpg:
; Line 1395
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
$LN1@stbiw__jpg:
; Line 1396
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rbx
	ret	0
?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ENDP ; stbiw__jpg_processDU
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp1$ = 0
tv66 = 4
tv69 = 8
tv140 = 12
val$ = 32
bits$ = 40
?stbiw__jpg_calcBits@@YAXHQEAG@Z PROC			; stbiw__jpg_calcBits
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1319
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN5@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	neg	eax
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN6@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN6@stbiw__jpg:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tmp1$[rsp], eax
; Line 1320
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN7@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN8@stbiw__jpg
$LN7@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR val$[rsp], eax
; Line 1321
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN2@stbiw__jpg:
; Line 1322
	mov	eax, DWORD PTR tmp1$[rsp]
	sar	eax, 1
	mov	DWORD PTR tmp1$[rsp], eax
	cmp	DWORD PTR tmp1$[rsp], 0
	je	SHORT $LN3@stbiw__jpg
; Line 1323
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	inc	ax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1324
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1325
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 1
	mov	DWORD PTR tv140[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv140[rsp]
	shl	eax, cl
	dec	eax
	mov	ecx, DWORD PTR val$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1326
	add	rsp, 24
	ret	0
?stbiw__jpg_calcBits@@YAXHQEAG@Z ENDP			; stbiw__jpg_calcBits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp10$ = 0
tmp12$ = 4
tmp11$ = 8
d0$ = 12
d2$ = 16
d4$ = 20
d6$ = 24
tmp13$ = 28
tmp7$ = 32
d7$ = 36
d1$ = 40
d5$ = 44
d3$ = 48
tmp0$ = 52
tmp3$ = 56
tmp1$ = 60
tmp2$ = 64
z1$ = 68
tmp5$ = 72
tmp6$ = 76
z5$ = 80
z3$ = 84
z13$ = 88
z2$ = 92
z11$ = 96
z4$ = 100
tmp4$ = 104
d0p$ = 128
d1p$ = 136
d2p$ = 144
d3p$ = 152
d4p$ = 160
d5p$ = 168
d6p$ = 176
d7p$ = 184
?stbiw__jpg_DCT@@YAXPEAM0000000@Z PROC			; stbiw__jpg_DCT
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1270
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1271
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d0$[rsp], xmm0
	mov	rax, QWORD PTR d1p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d1$[rsp], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d2$[rsp], xmm0
	mov	rax, QWORD PTR d3p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d3$[rsp], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d4$[rsp], xmm0
	mov	rax, QWORD PTR d5p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d5$[rsp], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d6$[rsp], xmm0
	mov	rax, QWORD PTR d7p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d7$[rsp], xmm0
; Line 1274
	movss	xmm0, DWORD PTR d0$[rsp]
	addss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp0$[rsp], xmm0
; Line 1275
	movss	xmm0, DWORD PTR d0$[rsp]
	subss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp7$[rsp], xmm0
; Line 1276
	movss	xmm0, DWORD PTR d1$[rsp]
	addss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp1$[rsp], xmm0
; Line 1277
	movss	xmm0, DWORD PTR d1$[rsp]
	subss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp6$[rsp], xmm0
; Line 1278
	movss	xmm0, DWORD PTR d2$[rsp]
	addss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp2$[rsp], xmm0
; Line 1279
	movss	xmm0, DWORD PTR d2$[rsp]
	subss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp5$[rsp], xmm0
; Line 1280
	movss	xmm0, DWORD PTR d3$[rsp]
	addss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp3$[rsp], xmm0
; Line 1281
	movss	xmm0, DWORD PTR d3$[rsp]
	subss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp4$[rsp], xmm0
; Line 1284
	movss	xmm0, DWORD PTR tmp0$[rsp]
	addss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1285
	movss	xmm0, DWORD PTR tmp0$[rsp]
	subss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp13$[rsp], xmm0
; Line 1286
	movss	xmm0, DWORD PTR tmp1$[rsp]
	addss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1287
	movss	xmm0, DWORD PTR tmp1$[rsp]
	subss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1289
	movss	xmm0, DWORD PTR tmp10$[rsp]
	addss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d0$[rsp], xmm0
; Line 1290
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d4$[rsp], xmm0
; Line 1292
	movss	xmm0, DWORD PTR tmp12$[rsp]
	addss	xmm0, DWORD PTR tmp13$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z1$[rsp], xmm0
; Line 1293
	movss	xmm0, DWORD PTR tmp13$[rsp]
	addss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d2$[rsp], xmm0
; Line 1294
	movss	xmm0, DWORD PTR tmp13$[rsp]
	subss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d6$[rsp], xmm0
; Line 1297
	movss	xmm0, DWORD PTR tmp4$[rsp]
	addss	xmm0, DWORD PTR tmp5$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1298
	movss	xmm0, DWORD PTR tmp5$[rsp]
	addss	xmm0, DWORD PTR tmp6$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1299
	movss	xmm0, DWORD PTR tmp6$[rsp]
	addss	xmm0, DWORD PTR tmp7$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1302
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3ec3ef15
	movss	DWORD PTR z5$[rsp], xmm0
; Line 1303
	movss	xmm0, DWORD PTR tmp10$[rsp]
	mulss	xmm0, DWORD PTR __real@3f0a8bd4
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z2$[rsp], xmm0
; Line 1304
	movss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3fa73d75
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z4$[rsp], xmm0
; Line 1305
	movss	xmm0, DWORD PTR tmp11$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z3$[rsp], xmm0
; Line 1307
	movss	xmm0, DWORD PTR tmp7$[rsp]
	addss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z11$[rsp], xmm0
; Line 1308
	movss	xmm0, DWORD PTR tmp7$[rsp]
	subss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z13$[rsp], xmm0
; Line 1310
	movss	xmm0, DWORD PTR z13$[rsp]
	addss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d5p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1311
	movss	xmm0, DWORD PTR z13$[rsp]
	subss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d3p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1312
	movss	xmm0, DWORD PTR z11$[rsp]
	addss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d1p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1313
	movss	xmm0, DWORD PTR z11$[rsp]
	subss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d7p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1315
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR d0$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR d2$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1316
	add	rsp, 120				; 00000078H
	ret	0
?stbiw__jpg_DCT@@YAXPEAM0000000@Z ENDP			; stbiw__jpg_DCT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
bitCnt$ = 36
bitBuf$ = 40
s$ = 64
bitBufP$ = 72
bitCntP$ = 80
bs$ = 88
?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z PROC ; stbiw__jpg_writeBits
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1253
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1254
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitBuf$[rsp], eax
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1255
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1256
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 24
	sub	ecx, DWORD PTR bitCnt$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitBuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitBuf$[rsp], eax
$LN2@stbiw__jpg:
; Line 1257
	cmp	DWORD PTR bitCnt$[rsp], 8
	jl	SHORT $LN3@stbiw__jpg
; Line 1258
	mov	eax, DWORD PTR bitBuf$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c$1[rsp], al
; Line 1259
	movzx	edx, BYTE PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1260
	movzx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@stbiw__jpg
; Line 1261
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
$LN4@stbiw__jpg:
; Line 1263
	mov	eax, DWORD PTR bitBuf$[rsp]
	shl	eax, 8
	mov	DWORD PTR bitBuf$[rsp], eax
; Line 1264
	mov	eax, DWORD PTR bitCnt$[rsp]
	sub	eax, 8
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1265
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1266
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	ecx, DWORD PTR bitBuf$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1267
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1268
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ENDP ; stbiw__jpg_writeBits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$ = 64
filter_type$1 = 72
zlen$ = 76
j$ = 80
force_filter$ = 84
i$2 = 88
est$3 = 92
best_filter$4 = 96
line_buffer$ = 104
filt$ = 112
best_filter_val$5 = 120
out$ = 128
zlib$ = 136
ctype$ = 144
sig$ = 168
__$ArrayPad$ = 176
pixels$ = 208
stride_bytes$ = 216
x$ = 224
y$ = 232
n$ = 240
out_len$ = 248
stbi_write_png_to_mem PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1129
$LN23:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1130
	mov	eax, DWORD PTR stbi_write_force_png_filter
	mov	DWORD PTR force_filter$[rsp], eax
; Line 1131
	mov	DWORD PTR ctype$[rsp], -1
	mov	DWORD PTR ctype$[rsp+4], 0
	mov	DWORD PTR ctype$[rsp+8], 4
	mov	DWORD PTR ctype$[rsp+12], 2
	mov	DWORD PTR ctype$[rsp+16], 6
; Line 1132
	mov	BYTE PTR sig$[rsp], 137			; 00000089H
	mov	BYTE PTR sig$[rsp+1], 80		; 00000050H
	mov	BYTE PTR sig$[rsp+2], 78		; 0000004eH
	mov	BYTE PTR sig$[rsp+3], 71		; 00000047H
	mov	BYTE PTR sig$[rsp+4], 13
	mov	BYTE PTR sig$[rsp+5], 10
	mov	BYTE PTR sig$[rsp+6], 26
	mov	BYTE PTR sig$[rsp+7], 10
; Line 1137
	cmp	DWORD PTR stride_bytes$[rsp], 0
	jne	SHORT $LN11@stbi_write
; Line 1138
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR stride_bytes$[rsp], eax
$LN11@stbi_write:
; Line 1140
	cmp	DWORD PTR force_filter$[rsp], 5
	jl	SHORT $LN12@stbi_write
; Line 1141
	mov	DWORD PTR force_filter$[rsp], -1
$LN12@stbi_write:
; Line 1144
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	cdqe
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR filt$[rsp], rax
	cmp	QWORD PTR filt$[rsp], 0
	jne	SHORT $LN13@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN13@stbi_write:
; Line 1145
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR line_buffer$[rsp], rax
	cmp	QWORD PTR line_buffer$[rsp], 0
	jne	SHORT $LN14@stbi_write
	mov	rcx, QWORD PTR filt$[rsp]
	call	free
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN14@stbi_write:
; Line 1146
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi_write
; Line 1148
	cmp	DWORD PTR force_filter$[rsp], -1
	jle	SHORT $LN15@stbi_write
; Line 1149
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
; Line 1150
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1151
	jmp	$LN16@stbi_write
$LN15@stbi_write:
; Line 1152
	mov	DWORD PTR best_filter$4[rsp], 0
	mov	DWORD PTR best_filter_val$5[rsp], 2147483647 ; 7fffffffH
; Line 1153
	mov	DWORD PTR filter_type$1[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR filter_type$1[rsp]
	inc	eax
	mov	DWORD PTR filter_type$1[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR filter_type$1[rsp], 5
	jge	$LN6@stbi_write
; Line 1154
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1157
	mov	DWORD PTR est$3[rsp], 0
; Line 1158
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN9@stbi_write
; Line 1159
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	abs
	mov	ecx, DWORD PTR est$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR est$3[rsp], eax
; Line 1160
	jmp	SHORT $LN8@stbi_write
$LN9@stbi_write:
; Line 1161
	mov	eax, DWORD PTR best_filter_val$5[rsp]
	cmp	DWORD PTR est$3[rsp], eax
	jge	SHORT $LN17@stbi_write
; Line 1162
	mov	eax, DWORD PTR est$3[rsp]
	mov	DWORD PTR best_filter_val$5[rsp], eax
; Line 1163
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR best_filter$4[rsp], eax
$LN17@stbi_write:
; Line 1165
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1166
	mov	eax, DWORD PTR best_filter$4[rsp]
	cmp	DWORD PTR filter_type$1[rsp], eax
	je	SHORT $LN18@stbi_write
; Line 1167
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1168
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
$LN18@stbi_write:
$LN16@stbi_write:
; Line 1172
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR filt$[rsp]
	movzx	edx, BYTE PTR filter_type$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 1173
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR n$[rsp]
	inc	ecx
	mov	edx, DWORD PTR j$[rsp]
	imul	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR filt$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	mov	r8, rax
	mov	rdx, QWORD PTR line_buffer$[rsp]
	call	memmove
; Line 1174
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1175
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	free
; Line 1176
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR stbi_write_png_compression_level
	lea	r8, QWORD PTR zlen$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR filt$[rsp]
	call	stbi_zlib_compress
	mov	QWORD PTR zlib$[rsp], rax
; Line 1177
	mov	rcx, QWORD PTR filt$[rsp]
	call	free
; Line 1178
	cmp	QWORD PTR zlib$[rsp], 0
	jne	SHORT $LN19@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN19@stbi_write:
; Line 1181
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	cdqe
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR out$[rsp], rax
; Line 1182
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN20@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN20@stbi_write:
; Line 1183
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1185
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
; Line 1186
	mov	r8d, 8
	lea	rdx, QWORD PTR sig$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 8
	mov	QWORD PTR o$[rsp], rax
; Line 1187
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 13
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1188
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG92903
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG92904
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG92905
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG92906
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1189
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1191
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 8
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1192
	movsxd	rax, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR ctype$[rsp+rax*4]
	and	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1193
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1194
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1195
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1196
	mov	edx, 13
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1198
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG92907
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG92908
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG92909
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG92910
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1200
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR zlib$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
; Line 1201
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
; Line 1202
	mov	rcx, QWORD PTR zlib$[rsp]
	call	free
; Line 1203
	mov	edx, DWORD PTR zlen$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1205
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1206
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG92911
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG92912
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG92913
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG92914
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1207
	xor	edx, edx
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1209
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR o$[rsp], rax
	je	SHORT $LN22@stbi_write
	mov	r8d, 1209				; 000004b9H
	lea	rdx, OFFSET FLAT:$SG92915
	lea	rcx, OFFSET FLAT:$SG92916
	call	_wassert
	xor	eax, eax
$LN22@stbi_write:
; Line 1211
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi_write:
; Line 1212
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
stbi_write_png_to_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 40
signed_stride$ = 48
tv87 = 52
tv188 = 56
type$ = 60
tv72 = 64
tv78 = 68
tv161 = 72
tv275 = 76
tv256 = 80
tv307 = 84
tv65 = 88
mymap$ = 96
pixels$ = 128
stride_bytes$ = 136
width$ = 144
height$ = 152
y$ = 160
n$ = 168
filter_type$ = 176
line_buffer$ = 184
?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z PROC	; stbiw__encode_png_line
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1093
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1096
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN41@stbiw__enc
	lea	rax, OFFSET FLAT:?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN42@stbiw__enc
$LN41@stbiw__enc:
	lea	rax, OFFSET FLAT:?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
	mov	QWORD PTR tv65[rsp], rax
$LN42@stbiw__enc:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR mymap$[rsp], rax
; Line 1098
	movsxd	rax, DWORD PTR filter_type$[rsp]
	mov	rcx, QWORD PTR mymap$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR type$[rsp], eax
; Line 1099
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN43@stbiw__enc
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN44@stbiw__enc
$LN43@stbiw__enc:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN44@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	imul	eax, DWORD PTR tv72[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
; Line 1100
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN45@stbiw__enc
	mov	eax, DWORD PTR stride_bytes$[rsp]
	neg	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN46@stbiw__enc
$LN45@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN46@stbiw__enc:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR signed_stride$[rsp], eax
; Line 1102
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN27@stbiw__enc
; Line 1103
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	memcpy
; Line 1104
	jmp	$LN1@stbiw__enc
$LN27@stbiw__enc:
; Line 1108
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__enc
$LN2@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__enc:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbiw__enc
; Line 1109
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	dec	eax
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 5
	ja	$LN5@stbiw__enc
	movsxd	rax, DWORD PTR tv87[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN48@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN28@stbiw__enc:
; Line 1110
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN29@stbiw__enc:
; Line 1111
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN30@stbiw__enc:
; Line 1112
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN31@stbiw__enc:
; Line 1113
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv161[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv161[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN32@stbiw__enc:
; Line 1114
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN33@stbiw__enc:
; Line 1115
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbiw__enc:
; Line 1117
	jmp	$LN2@stbiw__enc
$LN3@stbiw__enc:
; Line 1118
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	dec	eax
	mov	DWORD PTR tv188[rsp], eax
	cmp	DWORD PTR tv188[rsp], 5
	ja	$LN7@stbiw__enc
	movsxd	rax, DWORD PTR tv188[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN47@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN34@stbiw__enc:
; Line 1119
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN11@stbiw__enc
$LN9@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN11@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN10@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN9@stbiw__enc
$LN10@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN35@stbiw__enc:
; Line 1120
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN14@stbiw__enc
$LN12@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN14@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN13@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbiw__enc
$LN13@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN36@stbiw__enc:
; Line 1121
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN17@stbiw__enc
$LN15@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN16@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbiw__enc
$LN16@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN37@stbiw__enc:
; Line 1122
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN20@stbiw__enc
$LN18@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN19@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv256[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR n$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR n$[rsp]
	mov	r9d, DWORD PTR i$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR z$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv275[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv275[rsp]
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv256[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN18@stbiw__enc
$LN19@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN38@stbiw__enc:
; Line 1123
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN23@stbiw__enc
$LN21@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN23@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN22@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN21@stbiw__enc
$LN22@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN39@stbiw__enc:
; Line 1124
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN26@stbiw__enc
$LN24@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN25@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv307[rsp], eax
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv307[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbiw__enc
$LN25@stbiw__enc:
$LN7@stbiw__enc:
$LN1@stbiw__enc:
; Line 1126
	add	rsp, 120				; 00000078H
	ret	0
	npad	1
$LN48@stbiw__enc:
	DD	$LN28@stbiw__enc
	DD	$LN29@stbiw__enc
	DD	$LN30@stbiw__enc
	DD	$LN31@stbiw__enc
	DD	$LN32@stbiw__enc
	DD	$LN33@stbiw__enc
$LN47@stbiw__enc:
	DD	$LN34@stbiw__enc
	DD	$LN35@stbiw__enc
	DD	$LN36@stbiw__enc
	DD	$LN37@stbiw__enc
	DD	$LN38@stbiw__enc
	DD	$LN39@stbiw__enc
?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ENDP	; stbiw__encode_png_line
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
?stbiw__paeth@@YAEHHH@Z PROC				; stbiw__paeth
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1084
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1085
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 1086
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN2@stbiw__pae:
; Line 1087
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbiw__pae
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN3@stbiw__pae:
; Line 1088
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 255				; 000000ffH
$LN1@stbiw__pae:
; Line 1089
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__paeth@@YAEHHH@Z ENDP				; stbiw__paeth
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
crc$ = 32
data$ = 64
len$ = 72
?stbiw__wpcrc@@YAXPEAPEAEH@Z PROC			; stbiw__wpcrc
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1078
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1079
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 4
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rcx
	mov	rcx, rdx
	sub	rcx, 4
	mov	edx, eax
	call	?stbiw__crc32@@YAIPEAEH@Z		; stbiw__crc32
	mov	DWORD PTR crc$[rsp], eax
; Line 1080
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1081
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__wpcrc@@YAXPEAPEAEH@Z ENDP			; stbiw__wpcrc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
crc$ = 4
buffer$ = 32
len$ = 40
?stbiw__crc32@@YAIPEAEH@Z PROC				; stbiw__crc32
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1025
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1065
	mov	DWORD PTR crc$[rsp], -1			; ffffffffH
; Line 1067
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__crc
$LN2@stbiw__crc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__crc:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__crc
; Line 1068
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR crc$[rsp]
	and	edx, 255				; 000000ffH
	xor	ecx, edx
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	DWORD PTR crc$[rsp], eax
	jmp	SHORT $LN2@stbiw__crc
$LN3@stbiw__crc:
; Line 1069
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
; Line 1071
	add	rsp, 24
	ret	0
?stbiw__crc32@@YAIPEAEH@Z ENDP				; stbiw__crc32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitcount$ = 32
out$ = 40
bitbuf$ = 48
j$ = 52
i$ = 56
h$1 = 60
tv768 = 64
blocklen$2 = 68
hash_table$ = 72
best$3 = 80
s1$4 = 84
s2$5 = 88
hlist$6 = 96
n$7 = 104
d$8 = 108
blocklen$9 = 112
tv190 = 116
d$10 = 120
tv313 = 124
bestloc$11 = 128
tv365 = 136
tv370 = 140
tv368 = 144
tv386 = 148
tv388 = 152
tv393 = 156
tv391 = 160
tv409 = 164
tv411 = 168
tv416 = 172
tv414 = 176
tv430 = 180
tv432 = 184
tv437 = 188
tv435 = 192
tv480 = 196
tv482 = 200
tv487 = 204
tv485 = 208
tv530 = 212
tv532 = 216
tv537 = 220
tv535 = 224
tv554 = 228
tv556 = 232
tv561 = 236
tv559 = 240
tv586 = 244
tv588 = 248
tv593 = 252
tv591 = 256
tv610 = 260
tv612 = 264
tv617 = 268
tv615 = 272
tv629 = 276
tv631 = 280
tv636 = 284
tv634 = 288
tv647 = 292
tv649 = 296
tv654 = 300
tv652 = 304
tv665 = 308
tv667 = 312
tv672 = 316
tv670 = 320
tv683 = 324
tv685 = 328
tv690 = 332
tv688 = 336
tv1461 = 340
tv722 = 344
tv1229 = 348
tv1234 = 352
e$12 = 356
tv363 = 360
tv444 = 368
tv445 = 376
tv698 = 384
tv700 = 392
tv84 = 400
tv143 = 408
tv206 = 416
tv237 = 424
tv271 = 432
tv331 = 440
tv446 = 448
tv568 = 456
tv624 = 464
tv702 = 472
tv725 = 480
tv752 = 488
tv782 = 496
tv811 = 504
tv841 = 512
tv871 = 520
tv899 = 528
tv935 = 536
tv965 = 544
tv994 = 552
tv1024 = 560
data$ = 592
data_len$ = 600
out_len$ = 608
quality$ = 616
stbi_zlib_compress PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 896
$LN100:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 584				; 00000248H
; Line 905
	mov	DWORD PTR bitbuf$[rsp], 0
; Line 906
	mov	DWORD PTR bitcount$[rsp], 0
; Line 907
	mov	QWORD PTR out$[rsp], 0
; Line 908
	mov	ecx, 131072				; 00020000H
	call	malloc
	mov	QWORD PTR hash_table$[rsp], rax
; Line 909
	cmp	QWORD PTR hash_table$[rsp], 0
	jne	SHORT $LN35@stbi_zlib_
; Line 910
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN35@stbi_zlib_:
; Line 911
	cmp	DWORD PTR quality$[rsp], 5
	jge	SHORT $LN36@stbi_zlib_
	mov	DWORD PTR quality$[rsp], 5
$LN36@stbi_zlib_:
; Line 913
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN50@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN50@stbi_zlib_
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN51@stbi_zlib_
$LN50@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv84[rsp], rax
$LN51@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 120			; 00000078H
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 914
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN52@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN52@stbi_zlib_
	mov	QWORD PTR tv143[rsp], 0
	jmp	SHORT $LN53@stbi_zlib_
$LN52@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv143[rsp], rax
$LN53@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 94			; 0000005eH
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 915
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1229[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1229[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 916
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1234[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1234[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 2
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 918
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_zlib_
$LN2@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN3@stbi_zlib_
; Line 919
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stbi_zlib_
$LN3@stbi_zlib_:
; Line 921
	mov	DWORD PTR i$[rsp], 0
$LN5@stbi_zlib_:
; Line 922
	mov	eax, DWORD PTR data_len$[rsp]
	sub	eax, 3
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi_zlib_
; Line 924
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?stbiw__zhash@@YAIPEAE@Z		; stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
	mov	DWORD PTR best$3[rsp], 3
; Line 925
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 926
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 927
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN54@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN55@stbi_zlib_
$LN54@stbi_zlib_:
	mov	DWORD PTR tv190[rsp], 0
$LN55@stbi_zlib_:
	mov	eax, DWORD PTR tv190[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 928
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi_zlib_
$LN7@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi_zlib_
; Line 929
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32768				; 00008000H
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN37@stbi_zlib_
; Line 930
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv206[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv206[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?stbiw__zlib_countm@@YAIPEAE0H@Z	; stbiw__zlib_countm
	mov	DWORD PTR d$10[rsp], eax
; Line 931
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR d$10[rsp], eax
	jl	SHORT $LN38@stbi_zlib_
	mov	eax, DWORD PTR d$10[rsp]
	mov	DWORD PTR best$3[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR bestloc$11[rsp], rax
$LN38@stbi_zlib_:
$LN37@stbi_zlib_:
; Line 933
	jmp	$LN7@stbi_zlib_
$LN8@stbi_zlib_:
; Line 935
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN39@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	shl	edx, 1
	cmp	DWORD PTR [rax+rcx-8], edx
	jne	SHORT $LN39@stbi_zlib_
; Line 936
	movsxd	rax, DWORD PTR quality$[rsp]
	shl	rax, 3
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR quality$[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	QWORD PTR tv237[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR tv237[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	memmove
; Line 937
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN39@stbi_zlib_:
; Line 939
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN56@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN56@stbi_zlib_
	mov	QWORD PTR tv271[rsp], 0
	jmp	SHORT $LN57@stbi_zlib_
$LN56@stbi_zlib_:
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 8
	mov	edx, 1
	mov	rcx, rax
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv271[rsp], rax
$LN57@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	r8d, 4
	imul	r8, r8, 1
	movsxd	rdx, DWORD PTR [rdx+r8-8]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8]
	mov	QWORD PTR [rcx+rdx*8], rax
	mov	eax, 4
	imul	rax, rax, 1
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 941
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN40@stbi_zlib_
; Line 943
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	rcx, rax
	call	?stbiw__zhash@@YAIPEAE@Z		; stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
; Line 944
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 945
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN58@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv313[rsp], eax
	jmp	SHORT $LN59@stbi_zlib_
$LN58@stbi_zlib_:
	mov	DWORD PTR tv313[rsp], 0
$LN59@stbi_zlib_:
	mov	eax, DWORD PTR tv313[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 946
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN12@stbi_zlib_
$LN10@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN12@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN11@stbi_zlib_
; Line 947
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32767				; 00007fffH
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN41@stbi_zlib_
; Line 948
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv331[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv331[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?stbiw__zlib_countm@@YAIPEAE0H@Z	; stbiw__zlib_countm
	mov	DWORD PTR e$12[rsp], eax
; Line 949
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR e$12[rsp], eax
	jle	SHORT $LN42@stbi_zlib_
; Line 950
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 951
	jmp	SHORT $LN11@stbi_zlib_
$LN42@stbi_zlib_:
$LN41@stbi_zlib_:
; Line 954
	jmp	$LN10@stbi_zlib_
$LN11@stbi_zlib_:
$LN40@stbi_zlib_:
; Line 957
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN43@stbi_zlib_
; Line 958
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR bestloc$11[rsp]
	mov	DWORD PTR d$8[rsp], eax
; Line 959
	cmp	DWORD PTR d$8[rsp], 32767		; 00007fffH
	jg	SHORT $LN60@stbi_zlib_
	cmp	DWORD PTR best$3[rsp], 258		; 00000102H
	jle	SHORT $LN61@stbi_zlib_
$LN60@stbi_zlib_:
	mov	r8d, 959				; 000003bfH
	lea	rdx, OFFSET FLAT:$SG92720
	lea	rcx, OFFSET FLAT:$SG92721
	call	_wassert
	xor	eax, eax
$LN61@stbi_zlib_:
; Line 960
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi_zlib_
$LN13@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR best$3[rsp], eax
	jle	SHORT $LN14@stbi_zlib_
	jmp	SHORT $LN13@stbi_zlib_
$LN14@stbi_zlib_:
; Line 961
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 143				; 0000008fH
	jg	$LN66@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 305				; 00000131H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv365[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv363[rsp], eax
	mov	eax, DWORD PTR tv363[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv365[rsp]
	shl	eax, cl
	mov	DWORD PTR tv370[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv368[rsp], eax
	mov	eax, DWORD PTR tv370[rsp]
	mov	ecx, DWORD PTR tv368[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv446[rsp], rax
	jmp	$LN67@stbi_zlib_
$LN66@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 255				; 000000ffH
	jg	$LN64@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 513				; 00000201H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv388[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv386[rsp], eax
	mov	eax, DWORD PTR tv386[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv388[rsp]
	shl	eax, cl
	mov	DWORD PTR tv393[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv391[rsp], eax
	mov	eax, DWORD PTR tv393[rsp]
	mov	ecx, DWORD PTR tv391[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv445[rsp], rax
	jmp	$LN65@stbi_zlib_
$LN64@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 279				; 00000117H
	jg	$LN62@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	edx, 7
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv411[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv409[rsp], eax
	mov	eax, DWORD PTR tv409[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv411[rsp]
	shl	eax, cl
	mov	DWORD PTR tv416[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv414[rsp], eax
	mov	eax, DWORD PTR tv416[rsp]
	mov	ecx, DWORD PTR tv414[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv444[rsp], rax
	jmp	$LN63@stbi_zlib_
$LN62@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 169				; 000000a9H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv432[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv430[rsp], eax
	mov	eax, DWORD PTR tv430[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv432[rsp]
	shl	eax, cl
	mov	DWORD PTR tv437[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv435[rsp], eax
	mov	eax, DWORD PTR tv437[rsp]
	mov	ecx, DWORD PTR tv435[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv444[rsp], rax
$LN63@stbi_zlib_:
	mov	rax, QWORD PTR tv444[rsp]
	mov	QWORD PTR tv445[rsp], rax
$LN65@stbi_zlib_:
	mov	rax, QWORD PTR tv445[rsp]
	mov	QWORD PTR tv446[rsp], rax
$LN67@stbi_zlib_:
; Line 962
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN45@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR best$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN45@stbi_zlib_:
; Line 963
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi_zlib_
$LN16@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR d$8[rsp], eax
	jle	SHORT $LN17@stbi_zlib_
	jmp	SHORT $LN16@stbi_zlib_
$LN17@stbi_zlib_:
; Line 964
	mov	edx, 5
	mov	ecx, DWORD PTR j$[rsp]
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv482[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv480[rsp], eax
	mov	eax, DWORD PTR tv480[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv482[rsp]
	shl	eax, cl
	mov	DWORD PTR tv487[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv485[rsp], eax
	mov	eax, DWORD PTR tv487[rsp]
	mov	ecx, DWORD PTR tv485[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 5
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 965
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN46@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR d$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN46@stbi_zlib_:
; Line 966
	mov	eax, DWORD PTR best$3[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
; Line 967
	jmp	$LN44@stbi_zlib_
$LN43@stbi_zlib_:
; Line 968
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	$LN68@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv532[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv530[rsp], eax
	mov	eax, DWORD PTR tv530[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv532[rsp]
	shl	eax, cl
	mov	DWORD PTR tv537[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv535[rsp], eax
	mov	eax, DWORD PTR tv537[rsp]
	mov	ecx, DWORD PTR tv535[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv568[rsp], rax
	jmp	$LN69@stbi_zlib_
$LN68@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv556[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv554[rsp], eax
	mov	eax, DWORD PTR tv554[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv556[rsp]
	shl	eax, cl
	mov	DWORD PTR tv561[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv559[rsp], eax
	mov	eax, DWORD PTR tv561[rsp]
	mov	ecx, DWORD PTR tv559[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv568[rsp], rax
$LN69@stbi_zlib_:
; Line 969
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN44@stbi_zlib_:
; Line 971
	jmp	$LN5@stbi_zlib_
$LN6@stbi_zlib_:
; Line 973
	jmp	SHORT $LN21@stbi_zlib_
$LN19@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN20@stbi_zlib_
; Line 974
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	$LN70@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv588[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv586[rsp], eax
	mov	eax, DWORD PTR tv586[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv588[rsp]
	shl	eax, cl
	mov	DWORD PTR tv593[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv591[rsp], eax
	mov	eax, DWORD PTR tv593[rsp]
	mov	ecx, DWORD PTR tv591[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv624[rsp], rax
	jmp	$LN71@stbi_zlib_
$LN70@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv612[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv610[rsp], eax
	mov	eax, DWORD PTR tv610[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv612[rsp]
	shl	eax, cl
	mov	DWORD PTR tv617[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv615[rsp], eax
	mov	eax, DWORD PTR tv617[rsp]
	mov	ecx, DWORD PTR tv615[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv624[rsp], rax
$LN71@stbi_zlib_:
	jmp	$LN19@stbi_zlib_
$LN20@stbi_zlib_:
; Line 975
	xor	eax, eax
	test	eax, eax
	je	$LN76@stbi_zlib_
	mov	edx, 8
	mov	ecx, 304				; 00000130H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv631[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv629[rsp], eax
	mov	eax, DWORD PTR tv629[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv631[rsp]
	shl	eax, cl
	mov	DWORD PTR tv636[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv634[rsp], eax
	mov	eax, DWORD PTR tv636[rsp]
	mov	ecx, DWORD PTR tv634[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv702[rsp], rax
	jmp	$LN77@stbi_zlib_
$LN76@stbi_zlib_:
	xor	eax, eax
	test	eax, eax
	je	$LN74@stbi_zlib_
	mov	edx, 9
	mov	ecx, 512				; 00000200H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv649[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv647[rsp], eax
	mov	eax, DWORD PTR tv647[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv649[rsp]
	shl	eax, cl
	mov	DWORD PTR tv654[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv652[rsp], eax
	mov	eax, DWORD PTR tv654[rsp]
	mov	ecx, DWORD PTR tv652[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv700[rsp], rax
	jmp	$LN75@stbi_zlib_
$LN74@stbi_zlib_:
	xor	eax, eax
	cmp	eax, 1
	je	$LN72@stbi_zlib_
	mov	edx, 7
	xor	ecx, ecx
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv667[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv665[rsp], eax
	mov	eax, DWORD PTR tv665[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv667[rsp]
	shl	eax, cl
	mov	DWORD PTR tv672[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv670[rsp], eax
	mov	eax, DWORD PTR tv672[rsp]
	mov	ecx, DWORD PTR tv670[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv698[rsp], rax
	jmp	$LN73@stbi_zlib_
$LN72@stbi_zlib_:
	mov	edx, 8
	mov	ecx, 168				; 000000a8H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv685[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv683[rsp], eax
	mov	eax, DWORD PTR tv683[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv685[rsp]
	shl	eax, cl
	mov	DWORD PTR tv690[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv688[rsp], eax
	mov	eax, DWORD PTR tv690[rsp]
	mov	ecx, DWORD PTR tv688[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv698[rsp], rax
$LN73@stbi_zlib_:
	mov	rax, QWORD PTR tv698[rsp]
	mov	QWORD PTR tv700[rsp], rax
$LN75@stbi_zlib_:
	mov	rax, QWORD PTR tv700[rsp]
	mov	QWORD PTR tv702[rsp], rax
$LN77@stbi_zlib_:
$LN22@stbi_zlib_:
; Line 977
	cmp	DWORD PTR bitcount$[rsp], 0
	je	SHORT $LN23@stbi_zlib_
; Line 978
	mov	eax, DWORD PTR bitcount$[rsp]
	xor	ecx, ecx
	mov	DWORD PTR tv1461[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1461[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN22@stbi_zlib_
$LN23@stbi_zlib_:
; Line 980
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN26@stbi_zlib_
$LN24@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN25@stbi_zlib_
; Line 981
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN78@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, 8
	mov	rcx, rax
	call	free
	mov	DWORD PTR tv722[rsp], 0
	jmp	SHORT $LN79@stbi_zlib_
$LN78@stbi_zlib_:
	mov	DWORD PTR tv722[rsp], 0
$LN79@stbi_zlib_:
	jmp	SHORT $LN24@stbi_zlib_
$LN25@stbi_zlib_:
; Line 982
	mov	rcx, QWORD PTR hash_table$[rsp]
	call	free
; Line 985
	mov	eax, 4
	imul	rax, rax, 1
	mov	QWORD PTR tv725[rsp], rax
	mov	ecx, DWORD PTR data_len$[rsp]
	add	ecx, 32766				; 00007ffeH
	mov	eax, ecx
	cdq
	mov	ecx, 32767				; 00007fffH
	idiv	ecx
	imul	eax, eax, 5
	mov	ecx, DWORD PTR data_len$[rsp]
	lea	eax, DWORD PTR [rcx+rax+2]
	mov	rcx, QWORD PTR out$[rsp]
	mov	rdx, QWORD PTR tv725[rsp]
	cmp	DWORD PTR [rcx+rdx-8], eax
	jle	$LN47@stbi_zlib_
; Line 986
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rcx+rax-8], 2
; Line 987
	mov	DWORD PTR j$[rsp], 0
$LN27@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN28@stbi_zlib_
; Line 988
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR blocklen$2[rsp], eax
; Line 989
	cmp	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
	jle	SHORT $LN48@stbi_zlib_
	mov	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
$LN48@stbi_zlib_:
; Line 990
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN80@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN80@stbi_zlib_
	mov	QWORD PTR tv752[rsp], 0
	jmp	SHORT $LN81@stbi_zlib_
$LN80@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv752[rsp], rax
$LN81@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR blocklen$2[rsp]
	jne	SHORT $LN82@stbi_zlib_
	mov	BYTE PTR tv768[rsp], 1
	jmp	SHORT $LN83@stbi_zlib_
$LN82@stbi_zlib_:
	mov	BYTE PTR tv768[rsp], 0
$LN83@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv768[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 991
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN84@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN84@stbi_zlib_
	mov	QWORD PTR tv782[rsp], 0
	jmp	SHORT $LN85@stbi_zlib_
$LN84@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv782[rsp], rax
$LN85@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 992
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN86@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN86@stbi_zlib_
	mov	QWORD PTR tv811[rsp], 0
	jmp	SHORT $LN87@stbi_zlib_
$LN86@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv811[rsp], rax
$LN87@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 993
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN88@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN88@stbi_zlib_
	mov	QWORD PTR tv841[rsp], 0
	jmp	SHORT $LN89@stbi_zlib_
$LN88@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv841[rsp], rax
$LN89@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 994
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN90@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN90@stbi_zlib_
	mov	QWORD PTR tv871[rsp], 0
	jmp	SHORT $LN91@stbi_zlib_
$LN90@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv871[rsp], rax
$LN91@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 995
	movsxd	rax, DWORD PTR blocklen$2[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$[rsp]
	movsxd	rdx, DWORD PTR [r8+rdx-8]
	mov	r8, QWORD PTR out$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv899[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv899[rsp]
	mov	rcx, rax
	call	memcpy
; Line 996
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	add	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 997
	mov	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 998
	jmp	$LN27@stbi_zlib_
$LN28@stbi_zlib_:
$LN47@stbi_zlib_:
; Line 1003
	mov	DWORD PTR s1$4[rsp], 1
	mov	DWORD PTR s2$5[rsp], 0
; Line 1004
	mov	eax, DWORD PTR data_len$[rsp]
	cdq
	mov	ecx, 5552				; 000015b0H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$9[rsp], eax
; Line 1005
	mov	DWORD PTR j$[rsp], 0
$LN30@stbi_zlib_:
; Line 1006
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN31@stbi_zlib_
; Line 1007
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi_zlib_
$LN32@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$9[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi_zlib_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$4[rsp], eax
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, DWORD PTR s2$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$5[rsp], eax
	jmp	SHORT $LN32@stbi_zlib_
$LN33@stbi_zlib_:
; Line 1008
	xor	edx, edx
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$4[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$5[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$5[rsp], eax
; Line 1009
	mov	eax, DWORD PTR blocklen$9[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 1010
	mov	DWORD PTR blocklen$9[rsp], 5552		; 000015b0H
; Line 1011
	jmp	$LN30@stbi_zlib_
$LN31@stbi_zlib_:
; Line 1012
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN92@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN92@stbi_zlib_
	mov	QWORD PTR tv935[rsp], 0
	jmp	SHORT $LN93@stbi_zlib_
$LN92@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv935[rsp], rax
$LN93@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1013
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN94@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN94@stbi_zlib_
	mov	QWORD PTR tv965[rsp], 0
	jmp	SHORT $LN95@stbi_zlib_
$LN94@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv965[rsp], rax
$LN95@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1014
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN96@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN96@stbi_zlib_
	mov	QWORD PTR tv994[rsp], 0
	jmp	SHORT $LN97@stbi_zlib_
$LN96@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv994[rsp], rax
$LN97@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1015
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN98@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN98@stbi_zlib_
	mov	QWORD PTR tv1024[rsp], 0
	jmp	SHORT $LN99@stbi_zlib_
$LN98@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv1024[rsp], rax
$LN99@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1017
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rdx+rax-8]
	mov	DWORD PTR [rcx], eax
; Line 1019
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	sub	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR out$[rsp]
	call	memmove
; Line 1020
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
$LN1@stbi_zlib_:
; Line 1022
	add	rsp, 584				; 00000248H
	ret	0
stbi_zlib_compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
data$ = 32
?stbiw__zhash@@YAIPEAE@Z PROC				; stbiw__zhash
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 868
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 869
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 870
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 871
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 872
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 873
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 874
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 875
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 876
	mov	eax, DWORD PTR hash$[rsp]
; Line 877
	add	rsp, 24
	ret	0
?stbiw__zhash@@YAIPEAE@Z ENDP				; stbiw__zhash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
a$ = 32
b$ = 40
limit$ = 48
?stbiw__zlib_countm@@YAIPEAE0H@Z PROC			; stbiw__zlib_countm
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 860
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__zli
$LN2@stbiw__zli:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__zli:
	mov	eax, DWORD PTR limit$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__zli
	cmp	DWORD PTR i$[rsp], 258			; 00000102H
	jge	SHORT $LN3@stbiw__zli
; Line 863
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbiw__zli
	jmp	SHORT $LN3@stbiw__zli
$LN5@stbiw__zli:
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 864
	mov	eax, DWORD PTR i$[rsp]
; Line 865
	add	rsp, 24
	ret	0
?stbiw__zlib_countm@@YAIPEAE0H@Z ENDP			; stbiw__zlib_countm
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 0
tv66 = 4
code$ = 32
codebits$ = 40
?stbiw__zlib_bitrev@@YAHHH@Z PROC			; stbiw__zlib_bitrev
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 850
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 851
	mov	DWORD PTR res$[rsp], 0
$LN2@stbiw__zli:
; Line 852
	mov	eax, DWORD PTR codebits$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR codebits$[rsp]
	dec	eax
	mov	DWORD PTR codebits$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN3@stbiw__zli
; Line 853
	mov	eax, DWORD PTR res$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR code$[rsp]
	and	ecx, 1
	or	eax, ecx
	mov	DWORD PTR res$[rsp], eax
; Line 854
	mov	eax, DWORD PTR code$[rsp]
	sar	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 855
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 856
	mov	eax, DWORD PTR res$[rsp]
; Line 857
	add	rsp, 24
	ret	0
?stbiw__zlib_bitrev@@YAHHH@Z ENDP			; stbiw__zlib_bitrev
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
data$ = 64
bitbuffer$ = 72
bitcount$ = 80
?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z PROC		; stbiw__zlib_flushf
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 840
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@stbiw__zli:
; Line 841
	mov	rax, QWORD PTR bitcount$[rsp]
	cmp	DWORD PTR [rax], 8
	jl	$LN3@stbiw__zli
; Line 842
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN5@stbiw__zli
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN5@stbiw__zli
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbiw__zli
$LN5@stbiw__zli:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR data$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv78[rsp], rax
$LN6@stbiw__zli:
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 843
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 8
	mov	rcx, QWORD PTR bitbuffer$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 844
	mov	rax, QWORD PTR bitcount$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 8
	mov	rcx, QWORD PTR bitcount$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 845
	jmp	$LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 846
	mov	rax, QWORD PTR data$[rsp]
; Line 847
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ENDP		; stbiw__zlib_flushf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
m$ = 36
p$ = 40
tv81 = 48
tv84 = 56
Array$ = 80
increment$ = 88
itemsize$ = 96
?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z PROC			; stbiw__sbgrowf
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 827
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 828
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stbiw__sbg
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	ecx, DWORD PTR increment$[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN6@stbiw__sbg
$LN5@stbiw__sbg:
	mov	eax, DWORD PTR increment$[rsp]
	inc	eax
	mov	DWORD PTR tv71[rsp], eax
$LN6@stbiw__sbg:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR m$[rsp], eax
; Line 829
	mov	eax, DWORD PTR itemsize$[rsp]
	imul	eax, DWORD PTR m$[rsp]
	cdqe
	add	rax, 8
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stbiw__sbg
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 8
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN8@stbiw__sbg
$LN7@stbiw__sbg:
	mov	QWORD PTR tv81[rsp], 0
$LN8@stbiw__sbg:
	mov	rdx, QWORD PTR tv84[rsp]
	mov	rcx, QWORD PTR tv81[rsp]
	call	realloc
	mov	QWORD PTR p$[rsp], rax
; Line 830
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN9@stbiw__sbg
	mov	r8d, 830				; 0000033eH
	lea	rdx, OFFSET FLAT:$SG92475
	lea	rcx, OFFSET FLAT:$SG92476
	call	_wassert
	xor	eax, eax
$LN9@stbiw__sbg:
; Line 831
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stbiw__sbg
; Line 832
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN3@stbiw__sbg
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx+rax], 0
$LN3@stbiw__sbg:
; Line 833
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR Array$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 834
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, DWORD PTR m$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN2@stbiw__sbg:
; Line 836
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
; Line 837
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z ENDP			; stbiw__sbgrowf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv138 = 52
len$2 = 56
scratch$3 = 64
tv87 = 72
tv131 = 80
header$4 = 96
buffer$5 = 176
__$ArrayPad$ = 304
s$ = 352
x$ = 360
y$ = 368
comp$ = 376
data$ = 384
?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z PROC ; stbi_write_hdr_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 762
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 763
	cmp	DWORD PTR y$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN5@stbi_write
$LN7@stbi_write:
; Line 764
	xor	eax, eax
	jmp	$LN1@stbi_write
	jmp	$LN6@stbi_write
$LN5@stbi_write:
; Line 767
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR scratch$3[rsp], rax
; Line 770
	lea	rax, QWORD PTR header$4[rsp]
	lea	rcx, OFFSET FLAT:$SG92432
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 66					; 00000042H
	rep movsb
; Line 771
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv87[rsp], rax
	mov	r8d, 65					; 00000041H
	lea	rdx, QWORD PTR header$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv87[rsp]
; Line 776
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	lea	rdx, OFFSET FLAT:$SG92433
	lea	rcx, QWORD PTR buffer$5[rsp]
	call	sprintf
	mov	DWORD PTR len$2[rsp], eax
; Line 778
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv131[rsp], rax
	mov	r8d, DWORD PTR len$2[rsp]
	lea	rdx, QWORD PTR buffer$5[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv131[rsp]
; Line 780
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stbi_write
; Line 781
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN9@stbi_write
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	sub	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN9@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv138[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR tv138[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR scratch$3[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z ; stbiw__write_hdr_scanline
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 782
	mov	rcx, QWORD PTR scratch$3[rsp]
	call	free
; Line 783
	mov	eax, 1
$LN6@stbi_write:
$LN1@stbi_write:
; Line 785
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ENDP ; stbi_write_hdr_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
r$1 = 36
rgbe$ = 40
scanlineheader$ = 44
c$2 = 48
len$3 = 52
len$4 = 56
comp$5 = 64
tv77 = 72
tv159 = 76
tv156 = 80
tv234 = 88
linear$ = 96
__$ArrayPad$ = 112
s$ = 144
width$ = 152
ncomp$ = 160
scratch$ = 168
scanline$ = 176
?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z PROC ; stbiw__write_hdr_scanline
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 673
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 674
	mov	BYTE PTR scanlineheader$[rsp], 2
	mov	BYTE PTR scanlineheader$[rsp+1], 2
	mov	BYTE PTR scanlineheader$[rsp+2], 0
	mov	BYTE PTR scanlineheader$[rsp+3], 0
; Line 679
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 680
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 683
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN27@stbiw__wri
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN25@stbiw__wri
$LN27@stbiw__wri:
; Line 684
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbiw__wri
; Line 685
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 3
	je	SHORT $LN29@stbiw__wri
	cmp	DWORD PTR tv77[rsp], 4
	je	SHORT $LN28@stbiw__wri
	jmp	$LN30@stbiw__wri
$LN28@stbiw__wri:
$LN29@stbiw__wri:
; Line 687
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 688
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 689
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 690
	jmp	SHORT $LN5@stbiw__wri
$LN30@stbiw__wri:
; Line 692
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN5@stbiw__wri:
; Line 695
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z	; stbiw__linear_to_rgbe
; Line 696
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv156[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv156[rsp]
; Line 697
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
; Line 698
	jmp	$LN26@stbiw__wri
$LN25@stbiw__wri:
; Line 701
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbiw__wri
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN8@stbiw__wri
; Line 702
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 3
	je	SHORT $LN32@stbiw__wri
	cmp	DWORD PTR tv159[rsp], 4
	je	SHORT $LN31@stbiw__wri
	jmp	$LN33@stbiw__wri
$LN31@stbiw__wri:
$LN32@stbiw__wri:
; Line 704
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 705
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 706
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 707
	jmp	SHORT $LN10@stbiw__wri
$LN33@stbiw__wri:
; Line 709
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN10@stbiw__wri:
; Line 712
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z	; stbiw__linear_to_rgbe
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	imul	ecx, DWORD PTR width$[rsp], 0
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 714
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, DWORD PTR width$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 715
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR width$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 716
	mov	eax, 1
	imul	rax, rax, 3
	imul	ecx, DWORD PTR width$[rsp], 3
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 717
	jmp	$LN7@stbiw__wri
$LN8@stbiw__wri:
; Line 719
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv234[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR scanlineheader$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv234[rsp]
; Line 722
	mov	DWORD PTR c$2[rsp], 0
	jmp	SHORT $LN14@stbiw__wri
$LN12@stbiw__wri:
	mov	eax, DWORD PTR c$2[rsp]
	inc	eax
	mov	DWORD PTR c$2[rsp], eax
$LN14@stbiw__wri:
	cmp	DWORD PTR c$2[rsp], 4
	jge	$LN13@stbiw__wri
; Line 723
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR c$2[rsp]
	cdqe
	mov	rcx, QWORD PTR scratch$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR comp$5[rsp], rax
; Line 725
	mov	DWORD PTR x$[rsp], 0
$LN15@stbiw__wri:
; Line 726
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN16@stbiw__wri
; Line 728
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN17@stbiw__wri:
; Line 729
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	SHORT $LN18@stbiw__wri
; Line 730
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
; Line 731
	jmp	SHORT $LN18@stbiw__wri
$LN34@stbiw__wri:
; Line 732
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
; Line 733
	jmp	SHORT $LN17@stbiw__wri
$LN18@stbiw__wri:
; Line 734
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jl	SHORT $LN35@stbiw__wri
; Line 735
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN35@stbiw__wri:
$LN19@stbiw__wri:
; Line 737
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN20@stbiw__wri
; Line 738
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
; Line 739
	cmp	DWORD PTR len$3[rsp], 128		; 00000080H
	jle	SHORT $LN36@stbiw__wri
	mov	DWORD PTR len$3[rsp], 128		; 00000080H
$LN36@stbiw__wri:
; Line 740
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z ; stbiw__write_dump_data
; Line 741
	mov	eax, DWORD PTR len$3[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 742
	jmp	SHORT $LN19@stbiw__wri
$LN20@stbiw__wri:
; Line 744
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	$LN37@stbiw__wri
$LN21@stbiw__wri:
; Line 746
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR r$1[rsp], eax
	jge	SHORT $LN22@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR x$[rsp]
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN22@stbiw__wri
; Line 747
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
	jmp	SHORT $LN21@stbiw__wri
$LN22@stbiw__wri:
$LN23@stbiw__wri:
; Line 749
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN24@stbiw__wri
; Line 750
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$4[rsp], eax
; Line 751
	cmp	DWORD PTR len$4[rsp], 127		; 0000007fH
	jle	SHORT $LN38@stbiw__wri
	mov	DWORD PTR len$4[rsp], 127		; 0000007fH
$LN38@stbiw__wri:
; Line 752
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	edx, DWORD PTR len$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z ; stbiw__write_run_data
; Line 753
	mov	eax, DWORD PTR len$4[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 754
	jmp	SHORT $LN23@stbiw__wri
$LN24@stbiw__wri:
$LN37@stbiw__wri:
; Line 756
	jmp	$LN15@stbiw__wri
$LN16@stbiw__wri:
; Line 757
	jmp	$LN12@stbiw__wri
$LN13@stbiw__wri:
$LN26@stbiw__wri:
; Line 759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z ENDP ; stbiw__write_hdr_scanline
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
tv77 = 40
tv84 = 48
s$ = 80
length$ = 88
data$ = 96
?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z PROC ; stbiw__write_dump_data
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 665
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 666
	mov	eax, DWORD PTR length$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 667
	cmp	DWORD PTR length$[rsp], 128		; 00000080H
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 667				; 0000029bH
	lea	rdx, OFFSET FLAT:$SG92358
	lea	rcx, OFFSET FLAT:$SG92359
	call	_wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 668
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv77[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv77[rsp]
; Line 669
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv84[rsp], rax
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv84[rsp]
; Line 670
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z ENDP ; stbiw__write_dump_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
tv79 = 40
tv86 = 48
s$ = 80
length$ = 88
databyte$ = 96
?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z PROC ; stbiw__write_run_data
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 657
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 658
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 659
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:$SG92347
	lea	rcx, OFFSET FLAT:$SG92348
	call	_wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 660
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv79[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv79[rsp]
; Line 661
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv86[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR databyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv86[rsp]
; Line 662
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z ENDP ; stbiw__write_run_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
maxcomp$ = 32
normalize$1 = 36
tv77 = 40
tv93 = 44
tv94 = 48
exponent$ = 52
rgbe$ = 80
linear$ = 88
?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z PROC		; stbiw__linear_to_rgbe
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 640
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 642
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR linear$[rsp]
	mov	r8, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	comiss	xmm0, DWORD PTR [r8+rcx]
	jbe	SHORT $LN5@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv77[rsp], xmm0
	jmp	SHORT $LN6@stbiw__lin
$LN5@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv77[rsp], xmm0
$LN6@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	comiss	xmm0, DWORD PTR tv77[rsp]
	jbe	SHORT $LN9@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv94[rsp], xmm0
	jmp	SHORT $LN10@stbiw__lin
$LN9@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR linear$[rsp]
	mov	r8, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	comiss	xmm0, DWORD PTR [r8+rcx]
	jbe	SHORT $LN7@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv93[rsp], xmm0
	jmp	SHORT $LN8@stbiw__lin
$LN7@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv93[rsp], xmm0
$LN8@stbiw__lin:
	movss	xmm0, DWORD PTR tv93[rsp]
	movss	DWORD PTR tv94[rsp], xmm0
$LN10@stbiw__lin:
	movss	xmm0, DWORD PTR tv94[rsp]
	movss	DWORD PTR maxcomp$[rsp], xmm0
; Line 644
	movss	xmm0, DWORD PTR __real@0a4fb11f
	comiss	xmm0, DWORD PTR maxcomp$[rsp]
	jbe	SHORT $LN2@stbiw__lin
; Line 645
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 646
	jmp	$LN3@stbiw__lin
$LN2@stbiw__lin:
; Line 647
	cvtss2sd xmm0, DWORD PTR maxcomp$[rsp]
	lea	rdx, QWORD PTR exponent$[rsp]
	call	frexp
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@43800000
	divss	xmm0, DWORD PTR maxcomp$[rsp]
	movss	DWORD PTR normalize$1[rsp], xmm0
; Line 649
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 650
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 651
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 652
	mov	eax, DWORD PTR exponent$[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN3@stbiw__lin:
; Line 654
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z ENDP		; stbiw__linear_to_rgbe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$1 = 192
len$2 = 196
i$3 = 200
has_alpha$ = 204
header$4 = 208
header$5 = 209
j$6 = 212
colorbytes$ = 216
diff$7 = 220
tv66 = 224
tv69 = 228
tv71 = 232
format$ = 236
jdir$8 = 240
jend$9 = 244
begin$10 = 248
row$11 = 256
prev$12 = 264
s$ = 288
x$ = 296
y$ = 304
comp$ = 312
data$ = 320
?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z PROC ; stbi_write_tga_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 533
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
; Line 534
	cmp	DWORD PTR comp$[rsp], 2
	je	SHORT $LN33@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	je	SHORT $LN33@stbi_write
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN33@stbi_write:
	mov	DWORD PTR tv66[rsp], 1
$LN34@stbi_write:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR has_alpha$[rsp], eax
; Line 535
	cmp	DWORD PTR has_alpha$[rsp], 0
	je	SHORT $LN35@stbi_write
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN36@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN36@stbi_write:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR colorbytes$[rsp], eax
; Line 536
	cmp	DWORD PTR colorbytes$[rsp], 2
	jge	SHORT $LN37@stbi_write
	mov	DWORD PTR tv71[rsp], 3
	jmp	SHORT $LN38@stbi_write
$LN37@stbi_write:
	mov	DWORD PTR tv71[rsp], 2
$LN38@stbi_write:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR format$[rsp], eax
; Line 538
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN18@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN17@stbi_write
$LN18@stbi_write:
; Line 539
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN17@stbi_write:
; Line 541
	cmp	DWORD PTR stbi_write_tga_with_rle, 0
	jne	$LN19@stbi_write
; Line 542
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	DWORD PTR [rsp+176], eax
	mov	DWORD PTR [rsp+168], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	QWORD PTR [rsp+144], 0
	mov	QWORD PTR [rsp+136], 0
	mov	QWORD PTR [rsp+128], 0
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR [rsp+104], eax
	mov	QWORD PTR [rsp+96], 0
	mov	QWORD PTR [rsp+88], 0
	lea	rax, OFFSET FLAT:$SG92288
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	eax, DWORD PTR has_alpha$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
	jmp	$LN1@stbi_write
; Line 544
	jmp	$LN20@stbi_write
$LN19@stbi_write:
; Line 548
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	edx, DWORD PTR format$[rsp]
	add	edx, 8
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+88], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], edx
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG92289
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ ; stbiw__writef
; Line 550
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN21@stbi_write
; Line 551
	mov	DWORD PTR j$6[rsp], 0
; Line 552
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR jend$9[rsp], eax
; Line 553
	mov	DWORD PTR jdir$8[rsp], 1
; Line 554
	jmp	SHORT $LN22@stbi_write
$LN21@stbi_write:
; Line 555
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$6[rsp], eax
; Line 556
	mov	DWORD PTR jend$9[rsp], -1
; Line 557
	mov	DWORD PTR jdir$8[rsp], -1
$LN22@stbi_write:
; Line 559
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR jdir$8[rsp]
	mov	ecx, DWORD PTR j$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$6[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR jend$9[rsp]
	cmp	DWORD PTR j$6[rsp], eax
	je	$LN3@stbi_write
; Line 560
	mov	eax, DWORD PTR j$6[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row$11[rsp], rax
; Line 563
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$3[rsp], eax
$LN7@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN6@stbi_write
; Line 564
	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR row$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR begin$10[rsp], rax
; Line 565
	mov	DWORD PTR diff$7[rsp], 1
; Line 566
	mov	DWORD PTR len$2[rsp], 1
; Line 568
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN23@stbi_write
; Line 569
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 570
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	inc	ecx
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	mov	DWORD PTR diff$7[rsp], eax
; Line 571
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN24@stbi_write
; Line 572
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR prev$12[rsp], rax
; Line 573
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	$LN9@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	$LN9@stbi_write
; Line 574
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR prev$12[rsp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN26@stbi_write
; Line 575
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR prev$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prev$12[rsp], rax
; Line 576
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 577
	jmp	SHORT $LN27@stbi_write
$LN26@stbi_write:
; Line 578
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 579
	jmp	SHORT $LN9@stbi_write
$LN27@stbi_write:
; Line 581
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 582
	jmp	$LN25@stbi_write
$LN24@stbi_write:
; Line 583
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN12@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	SHORT $LN12@stbi_write
; Line 584
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN28@stbi_write
; Line 585
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 586
	jmp	SHORT $LN29@stbi_write
$LN28@stbi_write:
; Line 587
	jmp	SHORT $LN12@stbi_write
$LN29@stbi_write:
; Line 589
	jmp	$LN11@stbi_write
$LN12@stbi_write:
$LN25@stbi_write:
$LN23@stbi_write:
; Line 593
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN30@stbi_write
; Line 594
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$4[rsp], al
; Line 595
	movzx	edx, BYTE PTR header$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
; Line 596
	mov	DWORD PTR k$1[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN15@stbi_write
; Line 597
	mov	eax, DWORD PTR k$1[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR begin$10[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
; Line 598
	jmp	SHORT $LN14@stbi_write
$LN15@stbi_write:
; Line 599
	jmp	SHORT $LN31@stbi_write
$LN30@stbi_write:
; Line 600
	mov	eax, DWORD PTR len$2[rsp]
	sub	eax, 129				; 00000081H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$5[rsp], al
; Line 601
	movzx	edx, BYTE PTR header$5[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
; Line 602
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
$LN31@stbi_write:
; Line 604
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 605
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 606
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN20@stbi_write:
; Line 608
	mov	eax, 1
$LN1@stbi_write:
; Line 609
	add	rsp, 280				; 00000118H
	ret	0
?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ENDP ; stbi_write_tga_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pad$1 = 368
s$ = 400
x$ = 408
y$ = 416
comp$ = 424
data$ = 432
?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z PROC ; stbi_write_bmp_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 493
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
; Line 494
	cmp	DWORD PTR comp$[rsp], 4
	je	$LN2@stbi_write
; Line 496
	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	imul	eax, eax, 3
	and	eax, 3
	mov	DWORD PTR pad$1[rsp], eax
; Line 497
	imul	eax, DWORD PTR x$[rsp], 3
	add	eax, DWORD PTR pad$1[rsp]
	imul	eax, DWORD PTR y$[rsp]
	add	eax, 54					; 00000036H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	QWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 24
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 40			; 00000028H
	mov	DWORD PTR [rsp+128], 54			; 00000036H
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG92221
	mov	QWORD PTR [rsp+80], rax
	mov	eax, DWORD PTR pad$1[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	QWORD PTR [rsp+64], 0
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
	jmp	$LN1@stbi_write
; Line 501
	jmp	$LN3@stbi_write
$LN2@stbi_write:
; Line 505
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	lea	eax, DWORD PTR [rax*4+122]
	mov	QWORD PTR [rsp+352], 0
	mov	QWORD PTR [rsp+344], 0
	mov	QWORD PTR [rsp+336], 0
	mov	QWORD PTR [rsp+328], 0
	mov	QWORD PTR [rsp+320], 0
	mov	QWORD PTR [rsp+312], 0
	mov	QWORD PTR [rsp+304], 0
	mov	QWORD PTR [rsp+296], 0
	mov	QWORD PTR [rsp+288], 0
	mov	QWORD PTR [rsp+280], 0
	mov	QWORD PTR [rsp+272], 0
	mov	QWORD PTR [rsp+264], 0
	mov	QWORD PTR [rsp+256], 0
	mov	DWORD PTR [rsp+248], -16777216		; ff000000H
	mov	DWORD PTR [rsp+240], 255		; 000000ffH
	mov	DWORD PTR [rsp+232], 65280		; 0000ff00H
	mov	DWORD PTR [rsp+224], 16711680		; 00ff0000H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	DWORD PTR [rsp+176], 3
	mov	DWORD PTR [rsp+168], 32			; 00000020H
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 108		; 0000006cH
	mov	DWORD PTR [rsp+128], 122		; 0000007aH
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG92222
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	DWORD PTR [rsp+64], 1
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
$LN3@stbi_write:
$LN1@stbi_write:
; Line 510
	add	rsp, 392				; 00000188H
	ret	0
?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ENDP ; stbi_write_bmp_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 80
s$ = 112
rgb_dir$ = 120
vdir$ = 128
x$ = 136
y$ = 144
comp$ = 152
expand_mono$ = 160
data$ = 168
alpha$ = 176
pad$ = 184
fmt$ = 192
?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ PROC ; stbiw__outfile
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 479
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 480
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN4@stbiw__out
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN2@stbiw__out
$LN4@stbiw__out:
; Line 481
	xor	eax, eax
	jmp	$LN1@stbiw__out
; Line 482
	jmp	$LN3@stbiw__out
$LN2@stbiw__out:
; Line 484
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$1[rsp], rax
; Line 485
	mov	r8, QWORD PTR v$1[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ; stbiw__writefv
; Line 486
	mov	QWORD PTR v$1[rsp], 0
; Line 487
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR pad$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR alpha$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR vdir$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z ; stbiw__write_pixels
; Line 488
	mov	eax, 1
$LN3@stbiw__out:
$LN1@stbiw__out:
; Line 490
	add	rsp, 104				; 00000068H
	ret	0
?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ENDP ; stbiw__outfile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
i$ = 52
j_end$ = 56
zero$ = 60
d$1 = 64
tv91 = 72
s$ = 96
rgb_dir$ = 104
vdir$ = 112
x$ = 120
y$ = 128
comp$ = 136
data$ = 144
write_alpha$ = 152
scanline_pad$ = 160
expand_mono$ = 168
?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z PROC ; stbiw__write_pixels
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 452
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 453
	mov	DWORD PTR zero$[rsp], 0
; Line 456
	cmp	DWORD PTR y$[rsp], 0
	jg	SHORT $LN8@stbiw__wri
; Line 457
	jmp	$LN1@stbiw__wri
$LN8@stbiw__wri:
; Line 459
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN9@stbiw__wri
; Line 460
	imul	eax, DWORD PTR vdir$[rsp], -1
	mov	DWORD PTR vdir$[rsp], eax
$LN9@stbiw__wri:
; Line 462
	cmp	DWORD PTR vdir$[rsp], 0
	jge	SHORT $LN10@stbiw__wri
; Line 463
	mov	DWORD PTR j_end$[rsp], -1
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 464
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 465
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR j_end$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
$LN11@stbiw__wri:
; Line 468
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR vdir$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR j_end$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	je	$LN3@stbiw__wri
; Line 469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbiw__wri
$LN5@stbiw__wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbiw__wri
; Line 470
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	add	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR d$1[rsp], rax
; Line 471
	mov	rax, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR write_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
; Line 472
	jmp	SHORT $LN5@stbiw__wri
$LN6@stbiw__wri:
; Line 473
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
; Line 474
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv91[rsp], rax
	mov	r8d, DWORD PTR scanline_pad$[rsp]
	lea	rdx, QWORD PTR zero$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv91[rsp]
; Line 475
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 476
	add	rsp, 88					; 00000058H
	ret	0
?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z ENDP ; stbiw__write_pixels
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bg$ = 32
px$ = 36
k$ = 40
tv71 = 44
tv128 = 48
s$ = 80
rgb_dir$ = 88
comp$ = 96
write_alpha$ = 104
expand_mono$ = 112
d$ = 120
?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z PROC ; stbiw__write_pixel
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 419
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 420
	mov	BYTE PTR bg$[rsp], 255			; 000000ffH
	mov	BYTE PTR bg$[rsp+1], 0
	mov	BYTE PTR bg$[rsp+2], 255		; 000000ffH
; Line 423
	cmp	DWORD PTR write_alpha$[rsp], 0
	jge	SHORT $LN7@stbiw__wri
; Line 424
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN7@stbiw__wri:
; Line 426
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	cmp	DWORD PTR tv71[rsp], 1
	je	SHORT $LN9@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 2
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 3
	je	$LN14@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 4
	je	SHORT $LN12@stbiw__wri
	jmp	$LN2@stbiw__wri
$LN8@stbiw__wri:
$LN9@stbiw__wri:
; Line 429
	cmp	DWORD PTR expand_mono$[rsp], 0
	je	SHORT $LN10@stbiw__wri
; Line 430
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 432
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN11@stbiw__wri:
; Line 433
	jmp	$LN2@stbiw__wri
$LN12@stbiw__wri:
; Line 435
	cmp	DWORD PTR write_alpha$[rsp], 0
	jne	$LN13@stbiw__wri
; Line 437
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN6@stbiw__wri
$LN4@stbiw__wri:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN6@stbiw__wri:
	cmp	DWORD PTR k$[rsp], 3
	jge	SHORT $LN5@stbiw__wri
; Line 438
	movsxd	rax, DWORD PTR k$[rsp]
	movzx	eax, BYTE PTR bg$[rsp+rax]
	mov	DWORD PTR tv128[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR d$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	movzx	edx, BYTE PTR bg$[rsp+rdx]
	sub	ecx, edx
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	imul	ecx, edx
	mov	eax, ecx
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	ecx, DWORD PTR tv128[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR px$[rsp+rcx], al
	jmp	SHORT $LN4@stbiw__wri
$LN5@stbiw__wri:
; Line 439
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	movzx	r9d, BYTE PTR px$[rsp+rax]
	movzx	r8d, BYTE PTR px$[rsp+rcx]
	movzx	edx, BYTE PTR px$[rsp+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
; Line 440
	jmp	SHORT $LN2@stbiw__wri
$LN13@stbiw__wri:
$LN14@stbiw__wri:
; Line 444
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
$LN2@stbiw__wri:
; Line 447
	cmp	DWORD PTR write_alpha$[rsp], 0
	jle	SHORT $LN15@stbiw__wri
; Line 448
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN15@stbiw__wri:
; Line 449
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ENDP ; stbiw__write_pixel
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
a$ = 72
b$ = 80
c$ = 88
?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z PROC	; stbiw__write3
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 407
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 409
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	add	rax, 3
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 410
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN2@stbiw__wri:
; Line 411
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR n$[rsp], eax
; Line 412
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 3
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 413
	mov	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 414
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 415
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 416
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ENDP	; stbiw__write3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
a$ = 56
?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z PROC	; stbiw__write1
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 400
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 401
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	inc	rax
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 402
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN2@stbiw__wri:
; Line 403
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 404
	add	rsp, 40					; 00000028H
	ret	0
?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ENDP	; stbiw__write1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s$ = 64
c$ = 72
?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z PROC	; stbiw__putc
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 395
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 396
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv70[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv70[rsp]
; Line 397
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ENDP	; stbiw__putc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
s$ = 64
?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z PROC ; stbiw__write_flush
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 387
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 388
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+80], 0
	je	SHORT $LN2@stbiw__wri
; Line 389
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+80]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv74[rsp]
; Line 390
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+80], 0
$LN2@stbiw__wri:
; Line 392
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ENDP ; stbiw__write_flush
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
s$ = 64
fmt$ = 72
?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ PROC	; stbiw__writef
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 379
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 381
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 382
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ; stbiw__writefv
; Line 383
	mov	QWORD PTR v$[rsp], 0
; Line 384
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ ENDP	; stbiw__writef
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
b$2 = 36
tv69 = 40
x$3 = 44
b$4 = 48
tv76 = 52
tv92 = 56
x$5 = 60
tv147 = 64
tv68 = 68
tv85 = 72
tv140 = 80
tv173 = 88
s$ = 112
fmt$ = 120
v$ = 128
?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z PROC ; stbiw__writefv
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 350
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
$LN2@stbiw__wri:
; Line 351
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stbiw__wri
; Line 352
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	rax, QWORD PTR fmt$[rsp]
	inc	rax
	mov	QWORD PTR fmt$[rsp], rax
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 32			; 00000020H
	je	SHORT $LN6@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 49			; 00000031H
	je	SHORT $LN7@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 50			; 00000032H
	je	$LN8@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 52			; 00000034H
	je	$LN9@stbiw__wri
	jmp	$LN10@stbiw__wri
$LN6@stbiw__wri:
; Line 353
	jmp	$LN4@stbiw__wri
$LN7@stbiw__wri:
; Line 354
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN12@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN13@stbiw__wri
$LN12@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv76[rsp], eax
$LN13@stbiw__wri:
	mov	eax, DWORD PTR tv76[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR x$1[rsp], al
; Line 355
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv85[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR x$1[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv85[rsp]
; Line 356
	jmp	$LN4@stbiw__wri
$LN8@stbiw__wri:
; Line 357
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN14@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv92[rsp], eax
	jmp	SHORT $LN15@stbiw__wri
$LN14@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv92[rsp], eax
$LN15@stbiw__wri:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR x$5[rsp], eax
; Line 359
	mov	eax, DWORD PTR x$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 360
	mov	eax, DWORD PTR x$5[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 361
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv140[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv140[rsp]
; Line 362
	jmp	$LN4@stbiw__wri
$LN9@stbiw__wri:
; Line 363
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv147[rsp], eax
	jmp	SHORT $LN17@stbiw__wri
$LN16@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv147[rsp], eax
$LN17@stbiw__wri:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR x$3[rsp], eax
; Line 365
	mov	eax, DWORD PTR x$3[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 366
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 367
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 368
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 369
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv173[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR b$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv173[rsp]
; Line 370
	jmp	SHORT $LN4@stbiw__wri
$LN10@stbiw__wri:
; Line 372
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbiw__wri
	mov	r8d, 372				; 00000174H
	lea	rdx, OFFSET FLAT:$SG92099
	lea	rcx, OFFSET FLAT:$SG92100
	call	_wassert
	xor	eax, eax
$LN18@stbiw__wri:
; Line 373
	jmp	SHORT $LN1@stbiw__wri
$LN4@stbiw__wri:
; Line 375
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 376
	add	rsp, 104				; 00000068H
	ret	0
?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ENDP ; stbiw__writefv
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z PROC ; stbi__end_write_file
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 341
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	fclose
; Line 342
	add	rsp, 40					; 00000028H
	ret	0
?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ENDP ; stbi__end_write_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
f$ = 40
s$ = 64
filename$ = 72
?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z PROC ; stbi__start_write_file
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 333
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 334
	lea	rdx, OFFSET FLAT:$SG92034
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 335
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__stdio_write@@YAXPEAX0H@Z ; stbi__stdio_write
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 336
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stbi__star
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@stbi__star
$LN3@stbi__star:
	mov	DWORD PTR tv71[rsp], 0
$LN4@stbi__star:
	mov	eax, DWORD PTR tv71[rsp]
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ENDP ; stbi__start_write_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stbiw__fopen
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 305
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 324
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN2@stbiw__fop
; Line 325
	mov	QWORD PTR f$[rsp], 0
$LN2@stbiw__fop:
; Line 329
	mov	rax, QWORD PTR f$[rsp]
; Line 330
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stbiw__fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
data$ = 56
size$ = 64
?stbi__stdio_write@@YAXPEAX0H@Z PROC			; stbi__stdio_write
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 285
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 286
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR context$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	fwrite
; Line 287
	add	rsp, 40					; 00000028H
	ret	0
?stbi__stdio_write@@YAXPEAX0H@Z ENDP			; stbi__stdio_write
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
c$ = 16
context$ = 24
?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z PROC ; stbi__start_write_callbacks
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 277
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 278
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 279
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 280
	ret	0
?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ENDP ; stbi__start_write_callbacks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag$ = 8
stbi_flip_vertically_on_write PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 263
	mov	DWORD PTR [rsp+8], ecx
; Line 264
	mov	eax, DWORD PTR flag$[rsp]
	mov	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, eax
; Line 265
	ret	0
stbi_flip_vertically_on_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
quality$ = 224
stbi_write_jpg_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1608
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1609
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1610
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 1611
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ; stbi_write_jpg_core
; Line 1612
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_jpg_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_hdr_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 789
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 790
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 791
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ; stbi_write_hdr_core
; Line 792
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_hdr_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_tga_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 612
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 613
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 614
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 615
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ; stbi_write_tga_core
; Line 616
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_tga_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_bmp_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 514
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 515
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 516
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ; stbi_write_bmp_core
; Line 517
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_bmp_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
tv76 = 64
func$ = 96
context$ = 104
x$ = 112
y$ = 120
comp$ = 128
data$ = 136
stride_bytes$ = 144
stbi_write_png_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1232
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1234
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1235
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1236
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv76[rsp], rax
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR png$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR tv76[rsp]
; Line 1237
	mov	rcx, QWORD PTR png$[rsp]
	call	free
; Line 1238
	mov	eax, 1
$LN1@stbi_write:
; Line 1239
	add	rsp, 88					; 00000058H
	ret	0
stbi_write_png_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
quality$ = 232
stbi_write_jpg PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1617
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1618
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1619
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 1620
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ; stbi_write_jpg_core
	mov	DWORD PTR r$1[rsp], eax
; Line 1621
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 1622
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 1623
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 1624
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 1625
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_jpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_hdr PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 795
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 796
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 797
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 798
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ; stbi_write_hdr_core
	mov	DWORD PTR r$1[rsp], eax
; Line 799
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 800
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 801
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 802
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 803
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_tga PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 620
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 621
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 622
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 623
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ; stbi_write_tga_core
	mov	DWORD PTR r$1[rsp], eax
; Line 624
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 625
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 626
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 627
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 628
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_tga ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_bmp PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 521
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 522
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 523
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 524
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ; stbi_write_bmp_core
	mov	DWORD PTR r$1[rsp], eax
; Line 525
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 526
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 527
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 528
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 529
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_bmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
f$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
data$ = 128
stride_bytes$ = 136
stbi_write_png PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1216
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1219
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1220
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1222
	lea	rdx, OFFSET FLAT:$SG92930
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1223
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN3@stbi_write
	mov	rcx, QWORD PTR png$[rsp]
	call	free
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN3@stbi_write:
; Line 1224
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR png$[rsp]
	call	fwrite
; Line 1225
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1226
	mov	rcx, QWORD PTR png$[rsp]
	call	free
; Line 1227
	mov	eax, 1
$LN1@stbi_write:
; Line 1228
	add	rsp, 88					; 00000058H
	ret	0
stbi_write_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__is_16_main@@YAHPEAUstbi__context@@@Z PROC	; stbi__is_16_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7584
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7586
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_is16@@YAHPEAUstbi__context@@@Z ; stbi__png_is16
	test	eax, eax
	je	SHORT $LN2@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN2@stbi__is_1:
; Line 7590
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_is16@@YAHPEAUstbi__context@@@Z ; stbi__psd_is16
	test	eax, eax
	je	SHORT $LN3@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN3@stbi__is_1:
; Line 7594
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z ; stbi__pnm_is16
	test	eax, eax
	je	SHORT $LN4@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN4@stbi__is_1:
; Line 7596
	xor	eax, eax
$LN1@stbi__is_1:
; Line 7597
	add	rsp, 40					; 00000028H
	ret	0
?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ENDP	; stbi__is_16_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__info_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7542
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7544
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__jpeg_info
	test	eax, eax
	je	SHORT $LN2@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN2@stbi__info:
; Line 7548
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__png_info
	test	eax, eax
	je	SHORT $LN3@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN3@stbi__info:
; Line 7552
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__gif_info
	test	eax, eax
	je	SHORT $LN4@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN4@stbi__info:
; Line 7556
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__bmp_info
	test	eax, eax
	je	SHORT $LN5@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN5@stbi__info:
; Line 7560
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__psd_info
	test	eax, eax
	je	SHORT $LN6@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN6@stbi__info:
; Line 7564
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pic_info
	test	eax, eax
	je	SHORT $LN7@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN7@stbi__info:
; Line 7568
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	test	eax, eax
	je	SHORT $LN8@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN8@stbi__info:
; Line 7572
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__hdr_info
	test	eax, eax
	je	SHORT $LN9@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN9@stbi__info:
; Line 7577
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__tga_info
	test	eax, eax
	je	SHORT $LN10@stbi__info
; Line 7578
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN10@stbi__info:
; Line 7580
	lea	rcx, OFFSET FLAT:$SG91839
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
$LN1@stbi__info:
; Line 7581
	add	rsp, 40					; 00000028H
	ret	0
?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__info_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
s$ = 64
c$ = 72
?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z PROC ; stbi__pnm_getinteger
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7483
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7484
	mov	DWORD PTR value$[rsp], 0
$LN2@stbi__pnm_:
; Line 7486
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	?stbi__pnm_isdigit@@YAHD@Z		; stbi__pnm_isdigit
	test	eax, eax
	je	SHORT $LN3@stbi__pnm_
; Line 7487
	imul	eax, DWORD PTR value$[rsp], 10
	mov	rcx, QWORD PTR c$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR value$[rsp], eax
; Line 7488
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
; Line 7489
	jmp	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7491
	mov	eax, DWORD PTR value$[rsp]
; Line 7492
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ENDP ; stbi__pnm_getinteger
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 0
c$ = 32
?stbi__pnm_isdigit@@YAHD@Z PROC				; stbi__pnm_isdigit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7478
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7479
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv68[rsp]
; Line 7480
	add	rsp, 24
	ret	0
?stbi__pnm_isdigit@@YAHD@Z ENDP				; stbi__pnm_isdigit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z PROC ; stbi__pnm_skip_whitespace
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7464
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stbi__pnm_:
$LN5@stbi__pnm_:
; Line 7466
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	?stbi__pnm_isspace@@YAHD@Z		; stbi__pnm_isspace
	test	eax, eax
	je	SHORT $LN6@stbi__pnm_
; Line 7467
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7469
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN10@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN9@stbi__pnm_
$LN10@stbi__pnm_:
; Line 7470
	jmp	SHORT $LN3@stbi__pnm_
$LN9@stbi__pnm_:
$LN7@stbi__pnm_:
; Line 7472
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN8@stbi__pnm_
; Line 7473
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN7@stbi__pnm_
$LN8@stbi__pnm_:
; Line 7474
	jmp	$LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7475
	add	rsp, 40					; 00000028H
	ret	0
?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ENDP ; stbi__pnm_skip_whitespace
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
c$ = 32
?stbi__pnm_isspace@@YAHD@Z PROC				; stbi__pnm_isspace
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7459
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7460
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 9
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 11
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 12
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	je	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv76[rsp], 1
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv76[rsp]
; Line 7461
	add	rsp, 24
	ret	0
?stbi__pnm_isspace@@YAHD@Z ENDP				; stbi__pnm_isspace
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f1$1 = 32
tv152 = 36
output$ = 64
input$ = 72
req_comp$ = 80
?stbi__hdr_convert@@YAXPEAMPEAEH@Z PROC			; stbi__hdr_convert
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7054
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7055
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN4@stbi__hdr_
; Line 7058
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 136				; 00000088H
	mov	edx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	call	ldexp
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR f1$1[rsp], xmm0
; Line 7059
	cmp	DWORD PTR req_comp$[rsp], 2
	jg	SHORT $LN6@stbi__hdr_
; Line 7060
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
	jmp	$LN7@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7062
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7063
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7064
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
$LN7@stbi__hdr_:
; Line 7066
	cmp	DWORD PTR req_comp$[rsp], 2
	jne	SHORT $LN8@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN8@stbi__hdr_:
; Line 7067
	cmp	DWORD PTR req_comp$[rsp], 4
	jne	SHORT $LN9@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN9@stbi__hdr_:
; Line 7068
	jmp	$LN5@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7069
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	cmp	DWORD PTR tv152[rsp], 1
	je	$LN13@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 2
	je	SHORT $LN12@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 3
	je	SHORT $LN11@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 4
	je	SHORT $LN10@stbi__hdr_
	jmp	$LN2@stbi__hdr_
$LN10@stbi__hdr_:
; Line 7070
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN11@stbi__hdr_:
; Line 7071
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7072
	jmp	SHORT $LN2@stbi__hdr_
$LN12@stbi__hdr_:
; Line 7073
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN13@stbi__hdr_:
; Line 7074
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
$LN2@stbi__hdr_:
$LN5@stbi__hdr_:
; Line 7078
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_convert@@YAXPEAMPEAEH@Z ENDP			; stbi__hdr_convert
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
len$ = 36
z$ = 64
buffer$ = 72
?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z PROC ; stbi__hdr_gettoken
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7032
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7033
	mov	DWORD PTR len$[rsp], 0
; Line 7034
	mov	BYTE PTR c$[rsp], 0
; Line 7036
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
$LN2@stbi__hdr_:
; Line 7038
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__hdr_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__hdr_
; Line 7039
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 7040
	cmp	DWORD PTR len$[rsp], 1023		; 000003ffH
	jne	SHORT $LN6@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7042
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN5@stbi__hdr_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 10
	je	SHORT $LN5@stbi__hdr_
; Line 7043
	jmp	SHORT $LN4@stbi__hdr_
$LN5@stbi__hdr_:
; Line 7044
	jmp	SHORT $LN3@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7046
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7047
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7049
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7050
	mov	rax, QWORD PTR buffer$[rsp]
; Line 7051
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ENDP ; stbi__hdr_gettoken
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
signature$ = 72
?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z PROC	; stbi__hdr_test_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7010
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR signature$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@stbi__hdr_
; Line 7013
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR signature$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__hdr_
; Line 7014
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN5@stbi__hdr_:
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7015
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7016
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7017
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ENDP	; stbi__hdr_test_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
g$ = 64
out$ = 72
delays$ = 80
?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z PROC ; stbi__load_gif_main_outofmem
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6875
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6876
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	free
; Line 6877
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	free
; Line 6878
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	free
; Line 6880
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN2@stbi__load
	mov	rcx, QWORD PTR out$[rsp]
	call	free
$LN2@stbi__load:
; Line 6881
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	free
$LN3@stbi__load:
; Line 6882
	lea	rcx, OFFSET FLAT:$SG91365
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
	mov	DWORD PTR tv78[rsp], 0
$LN6@stbi__load:
	movsxd	rax, DWORD PTR tv78[rsp]
; Line 6883
	add	rsp, 56					; 00000038H
	ret	0
?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ENDP ; stbi__load_gif_main_outofmem
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pi$ = 32
pcount$ = 36
len$1 = 40
dispose$ = 44
tv234 = 48
w$2 = 52
tv83 = 56
tv143 = 60
tv252 = 64
x$3 = 68
y$4 = 72
h$5 = 76
tv299 = 80
tv318 = 84
first_frame$ = 88
tv413 = 92
tag$6 = 96
tv582 = 100
ext$7 = 104
o$8 = 112
s$ = 144
g$ = 152
comp$ = 160
req_comp$ = 168
two_back$ = 176
?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z PROC ; stbi__gif_load_next
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6701
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 6709
	mov	DWORD PTR first_frame$[rsp], 0
; Line 6710
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	$LN18@stbi__gif_
; Line 6711
	xor	r9d, r9d
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ; stbi__gif_header
	test	eax, eax
	jne	SHORT $LN20@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN20@stbi__gif_:
; Line 6712
	xor	r9d, r9d
	mov	rax, QWORD PTR g$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR g$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, 4
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN21@stbi__gif_
; Line 6713
	lea	rcx, OFFSET FLAT:$SG91319
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN55@stbi__gif_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN56@stbi__gif_
$LN55@stbi__gif_:
	mov	DWORD PTR tv83[rsp], 0
$LN56@stbi__gif_:
	movsxd	rax, DWORD PTR tv83[rsp]
	jmp	$LN1@stbi__gif_
$LN21@stbi__gif_:
; Line 6714
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6715
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 6716
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 6717
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 6718
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN22@stbi__gif_
$LN23@stbi__gif_:
; Line 6719
	lea	rcx, OFFSET FLAT:$SG91322
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN57@stbi__gif_
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN58@stbi__gif_
$LN57@stbi__gif_:
	mov	DWORD PTR tv143[rsp], 0
$LN58@stbi__gif_:
	movsxd	rax, DWORD PTR tv143[rsp]
	jmp	$LN1@stbi__gif_
$LN22@stbi__gif_:
; Line 6724
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
; Line 6725
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 6726
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 6727
	mov	DWORD PTR first_frame$[rsp], 1
; Line 6728
	jmp	$LN19@stbi__gif_
$LN18@stbi__gif_:
; Line 6730
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 28
	sar	eax, 2
	mov	DWORD PTR dispose$[rsp], eax
; Line 6731
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6733
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN24@stbi__gif_
	cmp	QWORD PTR two_back$[rsp], 0
	jne	SHORT $LN24@stbi__gif_
; Line 6734
	mov	DWORD PTR dispose$[rsp], 2
$LN24@stbi__gif_:
; Line 6737
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN25@stbi__gif_
; Line 6738
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN3@stbi__gif_
; Line 6739
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN27@stbi__gif_
; Line 6740
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR two_back$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN27@stbi__gif_:
; Line 6742
	jmp	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6743
	jmp	$LN26@stbi__gif_
$LN25@stbi__gif_:
	cmp	DWORD PTR dispose$[rsp], 2
	jne	SHORT $LN28@stbi__gif_
; Line 6745
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN5@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN7@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN6@stbi__gif_
; Line 6746
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN30@stbi__gif_
; Line 6747
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN30@stbi__gif_:
; Line 6749
	jmp	SHORT $LN5@stbi__gif_
$LN6@stbi__gif_:
$LN28@stbi__gif_:
$LN26@stbi__gif_:
; Line 6758
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	mov	rax, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcpy
$LN19@stbi__gif_:
; Line 6762
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
$LN8@stbi__gif_:
; Line 6765
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tag$6[rsp], eax
; Line 6766
	mov	eax, DWORD PTR tag$6[rsp]
	mov	DWORD PTR tv234[rsp], eax
	cmp	DWORD PTR tv234[rsp], 33		; 00000021H
	je	$LN44@stbi__gif_
	cmp	DWORD PTR tv234[rsp], 44		; 0000002cH
	je	SHORT $LN31@stbi__gif_
	cmp	DWORD PTR tv234[rsp], 59		; 0000003bH
	je	$LN52@stbi__gif_
	jmp	$LN53@stbi__gif_
$LN31@stbi__gif_:
; Line 6772
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR x$3[rsp], eax
; Line 6773
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR y$4[rsp], eax
; Line 6774
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR w$2[rsp], eax
; Line 6775
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR h$5[rsp], eax
; Line 6776
	mov	eax, DWORD PTR w$2[rsp]
	mov	ecx, DWORD PTR x$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jg	SHORT $LN33@stbi__gif_
	mov	eax, DWORD PTR h$5[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN32@stbi__gif_
$LN33@stbi__gif_:
; Line 6777
	lea	rcx, OFFSET FLAT:$SG91333
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN59@stbi__gif_
	mov	DWORD PTR tv252[rsp], 0
	jmp	SHORT $LN60@stbi__gif_
$LN59@stbi__gif_:
	mov	DWORD PTR tv252[rsp], 0
$LN60@stbi__gif_:
	movsxd	rax, DWORD PTR tv252[rsp]
	jmp	$LN1@stbi__gif_
$LN32@stbi__gif_:
; Line 6779
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34916], eax
; Line 6780
	mov	eax, DWORD PTR x$3[rsp]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34892], eax
; Line 6781
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34896], eax
; Line 6782
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34892]
	mov	ecx, DWORD PTR w$2[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34900], eax
; Line 6783
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR h$5[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34904], eax
; Line 6784
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6785
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34896]
	mov	DWORD PTR [rax+34912], ecx
; Line 6791
	cmp	DWORD PTR w$2[rsp], 0
	jne	SHORT $LN34@stbi__gif_
; Line 6792
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	mov	DWORD PTR [rax+34912], ecx
$LN34@stbi__gif_:
; Line 6794
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34888], eax
; Line 6796
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN35@stbi__gif_
; Line 6797
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34916]
	shl	eax, 3
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6798
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 3
; Line 6799
	jmp	SHORT $LN36@stbi__gif_
$LN35@stbi__gif_:
; Line 6800
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34916]
	mov	DWORD PTR [rax+34884], ecx
; Line 6801
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 0
$LN36@stbi__gif_:
; Line 6804
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN37@stbi__gif_
; Line 6805
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN61@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR tv299[rsp], eax
	jmp	SHORT $LN62@stbi__gif_
$LN61@stbi__gif_:
	mov	DWORD PTR tv299[rsp], -1
$LN62@stbi__gif_:
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv582[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv582[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 1076				; 00000434H
	mov	r9d, DWORD PTR tv299[rsp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ; stbi__gif_parse_colortable
; Line 6806
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 1076				; 00000434H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
	jmp	SHORT $LN38@stbi__gif_
$LN37@stbi__gif_:
; Line 6807
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN39@stbi__gif_
; Line 6808
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 52					; 00000034H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
; Line 6809
	jmp	SHORT $LN40@stbi__gif_
$LN39@stbi__gif_:
; Line 6810
	lea	rcx, OFFSET FLAT:$SG91341
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN63@stbi__gif_
	mov	DWORD PTR tv318[rsp], 0
	jmp	SHORT $LN64@stbi__gif_
$LN63@stbi__gif_:
	mov	DWORD PTR tv318[rsp], 0
$LN64@stbi__gif_:
	movsxd	rax, DWORD PTR tv318[rsp]
	jmp	$LN1@stbi__gif_
$LN40@stbi__gif_:
$LN38@stbi__gif_:
; Line 6812
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z ; stbi__process_gif_raster
	mov	QWORD PTR o$8[rsp], rax
; Line 6813
	cmp	QWORD PTR o$8[rsp], 0
	jne	SHORT $LN41@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN41@stbi__gif_:
; Line 6816
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6817
	cmp	DWORD PTR first_frame$[rsp], 0
	je	$LN42@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+36], 0
	jle	$LN42@stbi__gif_
; Line 6819
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN15@stbi__gif_
$LN13@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN15@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	$LN14@stbi__gif_
; Line 6820
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN43@stbi__gif_
; Line 6821
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 6822
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN43@stbi__gif_:
; Line 6824
	jmp	$LN13@stbi__gif_
$LN14@stbi__gif_:
$LN42@stbi__gif_:
; Line 6827
	mov	rax, QWORD PTR o$8[rsp]
	jmp	$LN1@stbi__gif_
$LN44@stbi__gif_:
; Line 6833
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR ext$7[rsp], eax
; Line 6834
	cmp	DWORD PTR ext$7[rsp], 249		; 000000f9H
	jne	$LN45@stbi__gif_
; Line 6835
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
; Line 6836
	cmp	DWORD PTR len$1[rsp], 4
	jne	$LN46@stbi__gif_
; Line 6837
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 6838
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	imul	eax, eax, 10
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34920], eax
; Line 6841
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN48@stbi__gif_
; Line 6842
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
$LN48@stbi__gif_:
; Line 6844
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN49@stbi__gif_
; Line 6845
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 6846
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN51@stbi__gif_
; Line 6847
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 0
$LN51@stbi__gif_:
; Line 6849
	jmp	SHORT $LN50@stbi__gif_
$LN49@stbi__gif_:
; Line 6851
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6852
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
$LN50@stbi__gif_:
; Line 6854
	jmp	SHORT $LN47@stbi__gif_
$LN46@stbi__gif_:
; Line 6855
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6856
	jmp	SHORT $LN11@stbi__gif_
$LN47@stbi__gif_:
$LN45@stbi__gif_:
$LN16@stbi__gif_:
; Line 6859
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
	cmp	DWORD PTR len$1[rsp], 0
	je	SHORT $LN17@stbi__gif_
; Line 6860
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6861
	jmp	SHORT $LN16@stbi__gif_
$LN17@stbi__gif_:
; Line 6862
	jmp	SHORT $LN11@stbi__gif_
$LN52@stbi__gif_:
; Line 6866
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN53@stbi__gif_:
; Line 6869
	lea	rcx, OFFSET FLAT:$SG91355
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN65@stbi__gif_
	mov	DWORD PTR tv413[rsp], 0
	jmp	SHORT $LN66@stbi__gif_
$LN65@stbi__gif_:
	mov	DWORD PTR tv413[rsp], 0
$LN66@stbi__gif_:
	movsxd	rax, DWORD PTR tv413[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN11@stbi__gif_:
; Line 6871
	jmp	$LN8@stbi__gif_
$LN1@stbi__gif_:
; Line 6872
	add	rsp, 136				; 00000088H
	ret	0
?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ENDP ; stbi__gif_load_next
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lzw_cs$ = 32
tv194 = 33
avail$ = 36
len$ = 40
codesize$ = 44
init_code$ = 48
code$1 = 52
valid_bits$ = 56
bits$ = 60
clear$ = 64
oldcode$ = 68
codemask$ = 72
first$ = 76
tv163 = 80
tv177 = 84
tv199 = 88
tv212 = 92
p$ = 96
tv244 = 104
tv248 = 108
tv275 = 112
tv302 = 116
tv172 = 120
s$ = 144
g$ = 152
?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z PROC ; stbi__process_gif_raster
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6614
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 6621
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR lzw_cs$[rsp], al
; Line 6622
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	cmp	eax, 12
	jle	SHORT $LN10@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 6623
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv244[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv244[rsp]
	shl	eax, cl
	mov	DWORD PTR clear$[rsp], eax
; Line 6624
	mov	DWORD PTR first$[rsp], 1
; Line 6625
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6626
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv248[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv248[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6627
	mov	DWORD PTR bits$[rsp], 0
; Line 6628
	mov	DWORD PTR valid_bits$[rsp], 0
; Line 6629
	mov	DWORD PTR init_code$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR init_code$[rsp]
	inc	eax
	mov	DWORD PTR init_code$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR init_code$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 6630
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	ecx, -1
	mov	rdx, QWORD PTR g$[rsp]
	mov	WORD PTR [rdx+rax*4+2100], cx
; Line 6631
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2102], dl
; Line 6632
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2103], dl
; Line 6633
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 6636
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6637
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6639
	mov	DWORD PTR len$[rsp], 0
$LN5@stbi__proc:
; Line 6641
	mov	eax, DWORD PTR codesize$[rsp]
	cmp	DWORD PTR valid_bits$[rsp], eax
	jge	SHORT $LN11@stbi__proc
; Line 6642
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN13@stbi__proc
; Line 6643
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6644
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN14@stbi__proc
; Line 6645
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
$LN13@stbi__proc:
; Line 6647
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6648
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR valid_bits$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bits$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bits$[rsp], eax
; Line 6649
	mov	eax, DWORD PTR valid_bits$[rsp]
	add	eax, 8
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6650
	jmp	$LN12@stbi__proc
$LN11@stbi__proc:
; Line 6651
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR bits$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$1[rsp], eax
; Line 6652
	mov	eax, DWORD PTR codesize$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR bits$[rsp]
	sar	eax, cl
	mov	DWORD PTR bits$[rsp], eax
; Line 6653
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, DWORD PTR valid_bits$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6655
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN15@stbi__proc
; Line 6656
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6657
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv275[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv275[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6658
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6659
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6660
	mov	DWORD PTR first$[rsp], 0
	jmp	$LN16@stbi__proc
$LN15@stbi__proc:
; Line 6661
	mov	eax, DWORD PTR clear$[rsp]
	inc	eax
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN17@stbi__proc
; Line 6662
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN8@stbi__proc:
; Line 6663
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN9@stbi__proc
; Line 6664
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
	jmp	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
; Line 6665
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
	jmp	$LN18@stbi__proc
$LN17@stbi__proc:
; Line 6666
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jg	$LN19@stbi__proc
; Line 6667
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN21@stbi__proc
; Line 6668
	lea	rcx, OFFSET FLAT:$SG91254
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN28@stbi__proc
	mov	DWORD PTR tv163[rsp], 0
	jmp	SHORT $LN29@stbi__proc
$LN28@stbi__proc:
	mov	DWORD PTR tv163[rsp], 0
$LN29@stbi__proc:
	movsxd	rax, DWORD PTR tv163[rsp]
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 6671
	cmp	DWORD PTR oldcode$[rsp], 0
	jl	$LN22@stbi__proc
; Line 6672
	movsxd	rax, DWORD PTR avail$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+2100]
	mov	QWORD PTR tv172[rsp], rax
	mov	eax, DWORD PTR avail$[rsp]
	inc	eax
	mov	DWORD PTR avail$[rsp], eax
	mov	rax, QWORD PTR tv172[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 6673
	cmp	DWORD PTR avail$[rsp], 8192		; 00002000H
	jle	SHORT $LN24@stbi__proc
; Line 6674
	lea	rcx, OFFSET FLAT:$SG91258
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN30@stbi__proc
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN31@stbi__proc
$LN30@stbi__proc:
	mov	DWORD PTR tv177[rsp], 0
$LN31@stbi__proc:
	movsxd	rax, DWORD PTR tv177[rsp]
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 6677
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR oldcode$[rsp]
	mov	WORD PTR [rax], cx
; Line 6678
	movsxd	rax, DWORD PTR oldcode$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rdx+rax*4+2102]
	mov	BYTE PTR [rcx+2], al
; Line 6679
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN32@stbi__proc
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	BYTE PTR tv194[rsp], al
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
	movsxd	rax, DWORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2102]
	mov	BYTE PTR tv194[rsp], al
$LN33@stbi__proc:
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR tv194[rsp]
	mov	BYTE PTR [rax+3], cl
	jmp	SHORT $LN23@stbi__proc
$LN22@stbi__proc:
; Line 6680
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN25@stbi__proc
; Line 6681
	lea	rcx, OFFSET FLAT:$SG91260
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__proc
	mov	DWORD PTR tv199[rsp], 0
	jmp	SHORT $LN35@stbi__proc
$LN34@stbi__proc:
	mov	DWORD PTR tv199[rsp], 0
$LN35@stbi__proc:
	movsxd	rax, DWORD PTR tv199[rsp]
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
$LN23@stbi__proc:
; Line 6683
	movzx	edx, WORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	call	?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ; stbi__out_gif_code
; Line 6685
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR avail$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN26@stbi__proc
	cmp	DWORD PTR avail$[rsp], 4095		; 00000fffH
	jg	SHORT $LN26@stbi__proc
; Line 6686
	mov	eax, DWORD PTR codesize$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6687
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv302[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv302[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
$LN26@stbi__proc:
; Line 6690
	mov	eax, DWORD PTR code$1[rsp]
	mov	DWORD PTR oldcode$[rsp], eax
; Line 6691
	jmp	SHORT $LN20@stbi__proc
$LN19@stbi__proc:
; Line 6692
	lea	rcx, OFFSET FLAT:$SG91262
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN37@stbi__proc
$LN36@stbi__proc:
	mov	DWORD PTR tv212[rsp], 0
$LN37@stbi__proc:
	movsxd	rax, DWORD PTR tv212[rsp]
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
$LN18@stbi__proc:
$LN16@stbi__proc:
$LN12@stbi__proc:
; Line 6695
	jmp	$LN5@stbi__proc
$LN1@stbi__proc:
; Line 6696
	add	rsp, 136				; 00000088H
	ret	0
?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z ENDP ; stbi__process_gif_raster
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
idx$ = 32
tv256 = 36
c$ = 40
p$ = 48
g$ = 80
code$ = 88
?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z PROC		; stbi__out_gif_code
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6577
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6583
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movsx	eax, WORD PTR [rcx+rax*4+2100]
	test	eax, eax
	jl	SHORT $LN4@stbi__out_
; Line 6584
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, WORD PTR [rcx+rax*4+2100]
	mov	rcx, QWORD PTR g$[rsp]
	call	?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ; stbi__out_gif_code
$LN4@stbi__out_:
; Line 6586
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	SHORT $LN5@stbi__out_
	jmp	$LN1@stbi__out_
$LN5@stbi__out_:
; Line 6588
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34912]
	mov	DWORD PTR idx$[rsp], eax
; Line 6589
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 6590
	mov	eax, DWORD PTR idx$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax], 1
; Line 6592
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2103]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+34872]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR c$[rsp], rax
; Line 6593
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 128				; 00000080H
	jle	$LN6@stbi__out_
; Line 6594
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6595
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6596
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6597
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN6@stbi__out_:
; Line 6599
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	add	eax, 4
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34908], eax
; Line 6601
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34900]
	cmp	DWORD PTR [rax+34908], ecx
	jl	$LN7@stbi__out_
; Line 6602
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6603
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34912]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34884]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
$LN2@stbi__out_:
; Line 6605
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	$LN3@stbi__out_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+34880], 0
	jle	SHORT $LN3@stbi__out_
; Line 6606
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	mov	ecx, 1
	mov	DWORD PTR tv256[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv256[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+34916]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6607
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34884]
	sar	eax, 1
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
; Line 6608
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	dec	eax
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34880], eax
; Line 6609
	jmp	$LN2@stbi__out_
$LN3@stbi__out_:
$LN7@stbi__out_:
$LN1@stbi__out_:
; Line 6611
	add	rsp, 72					; 00000048H
	ret	0
?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ENDP		; stbi__out_gif_code
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$ = 32
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z PROC ; stbi__gif_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6562
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6563
	mov	ecx, 34928				; 00008870H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR g$[rsp], rax
; Line 6564
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG91187
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6565
	mov	r9d, 1
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ; stbi__gif_header
	test	eax, eax
	jne	SHORT $LN3@stbi__gif_
; Line 6566
	mov	rcx, QWORD PTR g$[rsp]
	call	free
; Line 6567
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6568
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN3@stbi__gif_:
; Line 6570
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN4@stbi__gif_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__gif_:
; Line 6571
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__gif_:
; Line 6572
	mov	rcx, QWORD PTR g$[rsp]
	call	free
; Line 6573
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6574
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z ENDP ; stbi__gif_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
version$ = 32
tv224 = 36
s$ = 64
g$ = 72
comp$ = 80
is_info$ = 88
?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z PROC ; stbi__gif_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6531
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6533
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6534
	lea	rcx, OFFSET FLAT:$SG91164
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6536
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR version$[rsp], al
; Line 6537
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 55					; 00000037H
	je	SHORT $LN4@stbi__gif_
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 57					; 00000039H
	je	SHORT $LN4@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG91166
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6538
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG91168
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6540
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:$SG91169
	mov	QWORD PTR [rax+rcx], rdx
; Line 6541
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 6542
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 6543
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 6544
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 6545
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 6546
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
; Line 6548
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG91171
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN6@stbi__gif_:
; Line 6549
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG91173
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN7@stbi__gif_:
; Line 6551
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN8@stbi__gif_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN8@stbi__gif_:
; Line 6553
	cmp	DWORD PTR is_info$[rsp], 0
	je	SHORT $LN9@stbi__gif_
	mov	eax, 1
	jmp	SHORT $LN1@stbi__gif_
$LN9@stbi__gif_:
; Line 6555
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN10@stbi__gif_
; Line 6556
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv224[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv224[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 52					; 00000034H
	mov	r9d, -1
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ; stbi__gif_parse_colortable
$LN10@stbi__gif_:
; Line 6558
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6559
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ENDP ; stbi__gif_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv93 = 36
s$ = 64
pal$ = 72
num_entries$ = 80
transp$ = 88
?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z PROC ; stbi__gif_parse_colortable
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6520
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6522
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR num_entries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__gif_
; Line 6523
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 6524
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 6525
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 6526
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR transp$[rsp], eax
	jne	SHORT $LN6@stbi__gif_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN6@stbi__gif_:
	mov	DWORD PTR tv93[rsp], 255		; 000000ffH
$LN7@stbi__gif_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pal$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	edx, BYTE PTR tv93[rsp]
	mov	BYTE PTR [rax+rcx], dl
; Line 6527
	jmp	$LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6528
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ENDP ; stbi__gif_parse_colortable
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
s$ = 64
?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z PROC	; stbi__gif_test_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6503
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6505
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6506
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 6507
	cmp	DWORD PTR sz$[rsp], 57			; 00000039H
	je	SHORT $LN4@stbi__gif_
	cmp	DWORD PTR sz$[rsp], 55			; 00000037H
	je	SHORT $LN4@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6508
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6509
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6510
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z ENDP	; stbi__gif_test_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$1 = 32
count$2 = 36
i$3 = 40
dest$4 = 48
num_packets$ = 56
left$5 = 60
left$6 = 64
packet_idx$7 = 68
y$ = 72
act_comp$ = 76
tv157 = 80
x$8 = 84
i$9 = 88
packet$10 = 96
tv69 = 104
tv130 = 108
tv138 = 112
tv143 = 116
tv161 = 120
tv182 = 124
tv214 = 128
tv225 = 132
tv247 = 136
packet$11 = 144
chained$ = 152
value$12 = 156
value$13 = 160
tv76 = 168
packets$ = 176
__$ArrayPad$ = 208
s$ = 240
width$ = 248
height$ = 256
comp$ = 264
result$ = 272
?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z PROC ; stbi__pic_load_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6313
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6314
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
$LN4@stbi__pic_:
; Line 6322
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN29@stbi__pic_
; Line 6323
	lea	rcx, OFFSET FLAT:$SG91009
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__pic_
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN51@stbi__pic_
$LN50@stbi__pic_:
	mov	DWORD PTR tv69[rsp], 0
$LN51@stbi__pic_:
	movsxd	rax, DWORD PTR tv69[rsp]
	jmp	$LN1@stbi__pic_
$LN29@stbi__pic_:
; Line 6325
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR tv76[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
	mov	rax, QWORD PTR tv76[rsp]
	mov	QWORD PTR packet$11[rsp], rax
; Line 6327
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 6328
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx], al
; Line 6329
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 6330
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 6332
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 6334
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN30@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91011
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN52@stbi__pic_
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN53@stbi__pic_
$LN52@stbi__pic_:
	mov	DWORD PTR tv130[rsp], 0
$LN53@stbi__pic_:
	movsxd	rax, DWORD PTR tv130[rsp]
	jmp	$LN1@stbi__pic_
$LN30@stbi__pic_:
; Line 6335
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN31@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91013
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN54@stbi__pic_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN55@stbi__pic_
$LN54@stbi__pic_:
	mov	DWORD PTR tv138[rsp], 0
$LN55@stbi__pic_:
	movsxd	rax, DWORD PTR tv138[rsp]
	jmp	$LN1@stbi__pic_
$LN31@stbi__pic_:
; Line 6336
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 6338
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN56@stbi__pic_
	mov	DWORD PTR tv143[rsp], 4
	jmp	SHORT $LN57@stbi__pic_
$LN56@stbi__pic_:
	mov	DWORD PTR tv143[rsp], 3
$LN57@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv143[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6340
	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN7@stbi__pic_
$LN5@stbi__pic_:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN7@stbi__pic_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN6@stbi__pic_
; Line 6343
	mov	DWORD PTR packet_idx$7[rsp], 0
	jmp	SHORT $LN10@stbi__pic_
$LN8@stbi__pic_:
	mov	eax, DWORD PTR packet_idx$7[rsp]
	inc	eax
	mov	DWORD PTR packet_idx$7[rsp], eax
$LN10@stbi__pic_:
	mov	eax, DWORD PTR num_packets$[rsp]
	cmp	DWORD PTR packet_idx$7[rsp], eax
	jge	$LN9@stbi__pic_
; Line 6344
	movsxd	rax, DWORD PTR packet_idx$7[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$10[rsp], rax
; Line 6345
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$4[rsp], rax
; Line 6347
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	BYTE PTR tv157[rsp], al
	cmp	BYTE PTR tv157[rsp], 0
	je	SHORT $LN33@stbi__pic_
	cmp	BYTE PTR tv157[rsp], 1
	je	$LN35@stbi__pic_
	cmp	BYTE PTR tv157[rsp], 2
	je	$LN39@stbi__pic_
; Line 6349
	lea	rcx, OFFSET FLAT:$SG91015
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__pic_
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN59@stbi__pic_
$LN58@stbi__pic_:
	mov	DWORD PTR tv161[rsp], 0
$LN59@stbi__pic_:
	movsxd	rax, DWORD PTR tv161[rsp]
	jmp	$LN1@stbi__pic_
$LN33@stbi__pic_:
; Line 6354
	mov	DWORD PTR x$8[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN13@stbi__pic_:
	mov	eax, DWORD PTR x$8[rsp]
	inc	eax
	mov	DWORD PTR x$8[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN15@stbi__pic_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$8[rsp], eax
	jge	SHORT $LN14@stbi__pic_
; Line 6355
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN34@stbi__pic_
; Line 6356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN34@stbi__pic_:
	jmp	SHORT $LN13@stbi__pic_
$LN14@stbi__pic_:
; Line 6357
	jmp	$LN11@stbi__pic_
$LN35@stbi__pic_:
; Line 6362
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$5[rsp], eax
$LN16@stbi__pic_:
; Line 6364
	cmp	DWORD PTR left$5[rsp], 0
	jle	$LN17@stbi__pic_
; Line 6367
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR count$1[rsp], al
; Line 6368
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN36@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91020
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__pic_
	mov	DWORD PTR tv182[rsp], 0
	jmp	SHORT $LN61@stbi__pic_
$LN60@stbi__pic_:
	mov	DWORD PTR tv182[rsp], 0
$LN61@stbi__pic_:
	movsxd	rax, DWORD PTR tv182[rsp]
	jmp	$LN1@stbi__pic_
$LN36@stbi__pic_:
; Line 6370
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	eax, DWORD PTR left$5[rsp]
	jle	SHORT $LN37@stbi__pic_
; Line 6371
	movzx	eax, BYTE PTR left$5[rsp]
	mov	BYTE PTR count$1[rsp], al
$LN37@stbi__pic_:
; Line 6373
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN38@stbi__pic_
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN38@stbi__pic_:
; Line 6375
	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN20@stbi__pic_
$LN18@stbi__pic_:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN20@stbi__pic_:
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jge	SHORT $LN19@stbi__pic_
; Line 6376
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	?stbi__copyval@@YAXHPEAEPEBE@Z		; stbi__copyval
	jmp	SHORT $LN18@stbi__pic_
$LN19@stbi__pic_:
; Line 6377
	movzx	eax, BYTE PTR count$1[rsp]
	mov	ecx, DWORD PTR left$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$5[rsp], eax
; Line 6378
	jmp	$LN16@stbi__pic_
$LN17@stbi__pic_:
; Line 6380
	jmp	$LN11@stbi__pic_
$LN39@stbi__pic_:
; Line 6383
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$6[rsp], eax
$LN21@stbi__pic_:
; Line 6384
	cmp	DWORD PTR left$6[rsp], 0
	jle	$LN22@stbi__pic_
; Line 6385
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR count$2[rsp], eax
; Line 6386
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN40@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91025
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__pic_
	mov	DWORD PTR tv214[rsp], 0
	jmp	SHORT $LN63@stbi__pic_
$LN62@stbi__pic_:
	mov	DWORD PTR tv214[rsp], 0
$LN63@stbi__pic_:
	movsxd	rax, DWORD PTR tv214[rsp]
	jmp	$LN1@stbi__pic_
$LN40@stbi__pic_:
; Line 6388
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jl	$LN41@stbi__pic_
; Line 6391
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jne	SHORT $LN43@stbi__pic_
; Line 6392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR count$2[rsp], eax
	jmp	SHORT $LN44@stbi__pic_
$LN43@stbi__pic_:
; Line 6394
	mov	eax, DWORD PTR count$2[rsp]
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR count$2[rsp], eax
$LN44@stbi__pic_:
; Line 6395
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN45@stbi__pic_
; Line 6396
	lea	rcx, OFFSET FLAT:$SG91031
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__pic_
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN65@stbi__pic_
$LN64@stbi__pic_:
	mov	DWORD PTR tv225[rsp], 0
$LN65@stbi__pic_:
	movsxd	rax, DWORD PTR tv225[rsp]
	jmp	$LN1@stbi__pic_
$LN45@stbi__pic_:
; Line 6398
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN46@stbi__pic_
; Line 6399
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN46@stbi__pic_:
; Line 6401
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN25@stbi__pic_
$LN23@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN25@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN24@stbi__pic_
; Line 6402
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	?stbi__copyval@@YAXHPEAEPEBE@Z		; stbi__copyval
	jmp	SHORT $LN23@stbi__pic_
$LN24@stbi__pic_:
; Line 6403
	jmp	$LN42@stbi__pic_
$LN41@stbi__pic_:
; Line 6404
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
; Line 6405
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN47@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91034
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__pic_
	mov	DWORD PTR tv247[rsp], 0
	jmp	SHORT $LN67@stbi__pic_
$LN66@stbi__pic_:
	mov	DWORD PTR tv247[rsp], 0
$LN67@stbi__pic_:
	movsxd	rax, DWORD PTR tv247[rsp]
	jmp	SHORT $LN1@stbi__pic_
$LN47@stbi__pic_:
; Line 6407
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN28@stbi__pic_
$LN26@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN28@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN27@stbi__pic_
; Line 6408
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN48@stbi__pic_
; Line 6409
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN48@stbi__pic_:
	jmp	SHORT $LN26@stbi__pic_
$LN27@stbi__pic_:
$LN42@stbi__pic_:
; Line 6411
	mov	eax, DWORD PTR count$2[rsp]
	mov	ecx, DWORD PTR left$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$6[rsp], eax
; Line 6412
	jmp	$LN21@stbi__pic_
$LN22@stbi__pic_:
$LN11@stbi__pic_:
; Line 6416
	jmp	$LN8@stbi__pic_
$LN9@stbi__pic_:
; Line 6417
	jmp	$LN5@stbi__pic_
$LN6@stbi__pic_:
; Line 6419
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6420
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z ENDP ; stbi__pic_load_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
mask$ = 4
channel$ = 32
dest$ = 40
src$ = 48
?stbi__copyval@@YAXHPEAEPEBE@Z PROC			; stbi__copyval
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6304
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 6305
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__copy
$LN2@stbi__copy:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__copy:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__copy
; Line 6308
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__copy
; Line 6309
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	r8, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__copy:
	jmp	SHORT $LN2@stbi__copy
$LN3@stbi__copy:
; Line 6310
	add	rsp, 24
	ret	0
?stbi__copyval@@YAXHPEAEPEBE@Z ENDP			; stbi__copyval
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
mask$ = 36
tv75 = 40
s$ = 64
channel$ = 72
dest$ = 80
?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z PROC	; stbi__readval
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6290
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6291
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6293
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__read
$LN2@stbi__read:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__read:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__read
; Line 6294
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__read
; Line 6295
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN6@stbi__read
	lea	rcx, OFFSET FLAT:$SG90927
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__read
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN9@stbi__read
$LN8@stbi__read:
	mov	DWORD PTR tv75[rsp], 0
$LN9@stbi__read:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbi__read
$LN6@stbi__read:
; Line 6296
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__read:
; Line 6298
	jmp	SHORT $LN2@stbi__read
$LN3@stbi__read:
; Line 6300
	mov	rax, QWORD PTR dest$[rsp]
$LN1@stbi__read:
; Line 6301
	add	rsp, 56					; 00000038H
	ret	0
?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ENDP	; stbi__readval
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z PROC	; stbi__pic_test_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6269
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6272
	lea	rdx, OFFSET FLAT:$SG90895
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN5@stbi__pic_
; Line 6273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
; Line 6275
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 84			; 00000054H
	jge	SHORT $LN3@stbi__pic_
; Line 6276
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6278
	lea	rdx, OFFSET FLAT:$SG90897
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN6@stbi__pic_
; Line 6279
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6281
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6282
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z ENDP	; stbi__pic_test_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
str$ = 72
?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z PROC	; stbi__pic_is4
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6259
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6261
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__pic_
; Line 6262
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__pic_
; Line 6263
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6265
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6266
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ENDP	; stbi__pic_is4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$1 = 32
len$ = 36
count$ = 40
nleft$ = 44
s$ = 64
p$ = 72
pixelCount$ = 80
?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z PROC ; stbi__psd_decode_rle
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6011
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6014
	mov	DWORD PTR count$[rsp], 0
$LN2@stbi__psd_:
; Line 6015
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR pixelCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$[rsp], eax
	cmp	DWORD PTR nleft$[rsp], 0
	jle	$LN3@stbi__psd_
; Line 6016
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6017
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jne	SHORT $LN8@stbi__psd_
	jmp	$LN9@stbi__psd_
$LN8@stbi__psd_:
; Line 6019
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jge	SHORT $LN10@stbi__psd_
; Line 6021
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6022
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN12@stbi__psd_
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN12@stbi__psd_:
; Line 6023
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN4@stbi__psd_:
; Line 6024
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN5@stbi__psd_
; Line 6025
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx], al
; Line 6026
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6027
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6028
	jmp	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 6029
	jmp	SHORT $LN11@stbi__psd_
$LN10@stbi__psd_:
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jle	SHORT $LN13@stbi__psd_
; Line 6033
	mov	eax, 257				; 00000101H
	sub	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR len$[rsp], eax
; Line 6034
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN14@stbi__psd_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN14@stbi__psd_:
; Line 6035
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR val$1[rsp], al
; Line 6036
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN6@stbi__psd_:
; Line 6037
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN7@stbi__psd_
; Line 6038
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
; Line 6039
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6040
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6041
	jmp	SHORT $LN6@stbi__psd_
$LN7@stbi__psd_:
$LN13@stbi__psd_:
$LN11@stbi__psd_:
$LN9@stbi__psd_:
; Line 6043
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6045
	mov	eax, 1
$LN1@stbi__psd_:
; Line 6046
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z ENDP ; stbi__psd_decode_rle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
px$ = 32
fiveBitMask$ = 36
r$ = 40
g$ = 44
b$ = 48
s$ = 80
out$ = 88
?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z PROC ; stbi__tga_read_rgb16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5775
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5776
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	WORD PTR px$[rsp], ax
; Line 5777
	mov	eax, 31
	mov	WORD PTR fiveBitMask$[rsp], ax
; Line 5779
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 10
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 5780
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 5
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR g$[rsp], eax
; Line 5781
	movzx	eax, WORD PTR px$[rsp]
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 5783
	imul	eax, DWORD PTR r$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5784
	imul	eax, DWORD PTR g$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5785
	imul	eax, DWORD PTR b$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5791
	add	rsp, 72					; 00000048H
	ret	0
?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ENDP ; stbi__tga_read_rgb16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
bits_per_pixel$ = 32
is_grey$ = 40
is_rgb16$ = 48
?stbi__tga_get_comp@@YAHHHPEAH@Z PROC			; stbi__tga_get_comp
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5662
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5664
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN4@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbi__tga_:
; Line 5665
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 8
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 24
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $LN12@stbi__tga_
$LN5@stbi__tga_:
; Line 5666
	mov	eax, 1
	jmp	SHORT $LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5667
	cmp	DWORD PTR is_grey$[rsp], 0
	je	SHORT $LN7@stbi__tga_
	mov	eax, 2
	jmp	SHORT $LN1@stbi__tga_
$LN7@stbi__tga_:
$LN8@stbi__tga_:
; Line 5669
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN9@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 1
$LN9@stbi__tga_:
; Line 5670
	mov	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN10@stbi__tga_:
$LN11@stbi__tga_:
; Line 5672
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5673
	xor	eax, eax
$LN1@stbi__tga_:
; Line 5675
	add	rsp, 24
	ret	0
?stbi__tga_get_comp@@YAHHHPEAH@Z ENDP			; stbi__tga_get_comp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsz$ = 32
compress$1 = 36
i$2 = 40
tv75 = 44
tv128 = 48
tv138 = 52
tv159 = 56
tv172 = 60
tv178 = 64
tv188 = 68
tv231 = 72
tv236 = 76
tv243 = 80
s$ = 112
info$ = 120
?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z PROC ; stbi__bmp_parse_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5385
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5387
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN6@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN5@stbi__bmp_
$LN6@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG90265
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN32@stbi__bmp_
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN33@stbi__bmp_
$LN32@stbi__bmp_:
	mov	DWORD PTR tv75[rsp], 0
$LN33@stbi__bmp_:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	$LN1@stbi__bmp_
$LN5@stbi__bmp_:
; Line 5388
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5389
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5390
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5391
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR hsz$[rsp], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR hsz$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 5393
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 5394
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+32], 14
; Line 5396
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jge	SHORT $LN7@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90267
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__bmp_
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN35@stbi__bmp_
$LN34@stbi__bmp_:
	mov	DWORD PTR tv128[rsp], 0
$LN35@stbi__bmp_:
	movsxd	rax, DWORD PTR tv128[rsp]
	jmp	$LN1@stbi__bmp_
$LN7@stbi__bmp_:
; Line 5398
	cmp	DWORD PTR hsz$[rsp], 12
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN8@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90269
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__bmp_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN37@stbi__bmp_
$LN36@stbi__bmp_:
	mov	DWORD PTR tv138[rsp], 0
$LN37@stbi__bmp_:
	movsxd	rax, DWORD PTR tv138[rsp]
	jmp	$LN1@stbi__bmp_
$LN8@stbi__bmp_:
; Line 5399
	cmp	DWORD PTR hsz$[rsp], 12
	jne	SHORT $LN9@stbi__bmp_
; Line 5400
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5401
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5402
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5403
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5404
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN10@stbi__bmp_:
; Line 5406
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	je	SHORT $LN11@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90273
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN38@stbi__bmp_
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
	mov	DWORD PTR tv159[rsp], 0
$LN39@stbi__bmp_:
	movsxd	rax, DWORD PTR tv159[rsp]
	jmp	$LN1@stbi__bmp_
$LN11@stbi__bmp_:
; Line 5407
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5408
	cmp	DWORD PTR hsz$[rsp], 12
	je	$LN12@stbi__bmp_
; Line 5409
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR compress$1[rsp], eax
; Line 5410
	cmp	DWORD PTR compress$1[rsp], 1
	je	SHORT $LN14@stbi__bmp_
	cmp	DWORD PTR compress$1[rsp], 2
	jne	SHORT $LN13@stbi__bmp_
$LN14@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG90277
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN40@stbi__bmp_
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN41@stbi__bmp_
$LN40@stbi__bmp_:
	mov	DWORD PTR tv172[rsp], 0
$LN41@stbi__bmp_:
	movsxd	rax, DWORD PTR tv172[rsp]
	jmp	$LN1@stbi__bmp_
$LN13@stbi__bmp_:
; Line 5411
	cmp	DWORD PTR compress$1[rsp], 4
	jl	SHORT $LN15@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90279
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN42@stbi__bmp_
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN43@stbi__bmp_
$LN42@stbi__bmp_:
	mov	DWORD PTR tv178[rsp], 0
$LN43@stbi__bmp_:
	movsxd	rax, DWORD PTR tv178[rsp]
	jmp	$LN1@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5412
	cmp	DWORD PTR compress$1[rsp], 3
	jne	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	je	SHORT $LN16@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90281
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN44@stbi__bmp_
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
	mov	DWORD PTR tv188[rsp], 0
$LN45@stbi__bmp_:
	movsxd	rax, DWORD PTR tv188[rsp]
	jmp	$LN1@stbi__bmp_
$LN16@stbi__bmp_:
; Line 5413
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5414
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5415
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5416
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5417
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5418
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN19@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	$LN17@stbi__bmp_
$LN19@stbi__bmp_:
; Line 5419
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	SHORT $LN20@stbi__bmp_
; Line 5420
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5421
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5422
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5423
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
$LN20@stbi__bmp_:
; Line 5425
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN22@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	$LN21@stbi__bmp_
$LN22@stbi__bmp_:
; Line 5426
	cmp	DWORD PTR compress$1[rsp], 0
	jne	SHORT $LN23@stbi__bmp_
; Line 5427
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ; stbi__bmp_set_mask_defaults
	jmp	$LN24@stbi__bmp_
$LN23@stbi__bmp_:
; Line 5428
	cmp	DWORD PTR compress$1[rsp], 3
	jne	$LN25@stbi__bmp_
; Line 5429
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5430
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5431
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5432
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, 12
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 5434
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN27@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN27@stbi__bmp_
; Line 5436
	lea	rcx, OFFSET FLAT:$SG90293
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN46@stbi__bmp_
	mov	DWORD PTR tv231[rsp], 0
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
	mov	DWORD PTR tv231[rsp], 0
$LN47@stbi__bmp_:
	movsxd	rax, DWORD PTR tv231[rsp]
	jmp	$LN1@stbi__bmp_
$LN27@stbi__bmp_:
; Line 5438
	jmp	SHORT $LN26@stbi__bmp_
$LN25@stbi__bmp_:
; Line 5439
	lea	rcx, OFFSET FLAT:$SG90294
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN48@stbi__bmp_
	mov	DWORD PTR tv236[rsp], 0
	jmp	SHORT $LN49@stbi__bmp_
$LN48@stbi__bmp_:
	mov	DWORD PTR tv236[rsp], 0
$LN49@stbi__bmp_:
	movsxd	rax, DWORD PTR tv236[rsp]
	jmp	$LN1@stbi__bmp_
$LN26@stbi__bmp_:
$LN24@stbi__bmp_:
$LN21@stbi__bmp_:
; Line 5441
	jmp	$LN18@stbi__bmp_
$LN17@stbi__bmp_:
; Line 5444
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN28@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN28@stbi__bmp_
; Line 5445
	lea	rcx, OFFSET FLAT:$SG90296
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__bmp_
	mov	DWORD PTR tv243[rsp], 0
	jmp	SHORT $LN51@stbi__bmp_
$LN50@stbi__bmp_:
	mov	DWORD PTR tv243[rsp], 0
$LN51@stbi__bmp_:
	movsxd	rax, DWORD PTR tv243[rsp]
	jmp	$LN1@stbi__bmp_
$LN28@stbi__bmp_:
; Line 5446
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5447
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5448
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5449
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 5450
	cmp	DWORD PTR compress$1[rsp], 3
	je	SHORT $LN29@stbi__bmp_
; Line 5451
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ; stbi__bmp_set_mask_defaults
$LN29@stbi__bmp_:
; Line 5452
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5453
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbi__bmp_:
	cmp	DWORD PTR i$2[rsp], 12
	jge	SHORT $LN3@stbi__bmp_
; Line 5454
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	jmp	SHORT $LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5455
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	jne	SHORT $LN30@stbi__bmp_
; Line 5456
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5457
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5458
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5459
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
$LN30@stbi__bmp_:
$LN18@stbi__bmp_:
$LN12@stbi__bmp_:
; Line 5463
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 5464
	add	rsp, 104				; 00000068H
	ret	0
?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ENDP ; stbi__bmp_parse_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
compress$ = 16
?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z PROC ; stbi__bmp_set_mask_defaults
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5359
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 5361
	cmp	DWORD PTR compress$[rsp], 3
	jne	SHORT $LN2@stbi__bmp_
; Line 5362
	mov	eax, 1
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5364
	cmp	DWORD PTR compress$[rsp], 0
	jne	$LN3@stbi__bmp_
; Line 5365
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN4@stbi__bmp_
; Line 5366
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 31744		; 00007c00H
; Line 5367
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 992			; 000003e0H
; Line 5368
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 31
	jmp	SHORT $LN5@stbi__bmp_
$LN4@stbi__bmp_:
; Line 5369
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	SHORT $LN6@stbi__bmp_
; Line 5370
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 16711680		; 00ff0000H
; Line 5371
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 65280		; 0000ff00H
; Line 5372
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 255			; 000000ffH
; Line 5373
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], -16777216		; ff000000H
; Line 5374
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 5375
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 5379
	mov	eax, 1
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5381
	xor	eax, eax
$LN1@stbi__bmp_:
; Line 5382
	ret	0
?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ENDP ; stbi__bmp_set_mask_defaults
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
shift$ = 56
bits$ = 64
?stbi__shiftsigned@@YAHIHH@Z PROC			; stbi__shiftsigned
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5332
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 5341
	cmp	DWORD PTR shift$[rsp], 0
	jge	SHORT $LN2@stbi__shif
; Line 5342
	mov	eax, DWORD PTR shift$[rsp]
	neg	eax
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, cl
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN3@stbi__shif
$LN2@stbi__shif:
; Line 5344
	mov	eax, DWORD PTR shift$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
$LN3@stbi__shif:
; Line 5345
	cmp	DWORD PTR v$[rsp], 256			; 00000100H
	jb	SHORT $LN5@stbi__shif
	mov	r8d, 5345				; 000014e1H
	lea	rdx, OFFSET FLAT:$SG90197
	lea	rcx, OFFSET FLAT:$SG90198
	call	_wassert
	xor	eax, eax
$LN5@stbi__shif:
; Line 5346
	mov	eax, 8
	sub	eax, DWORD PTR bits$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
; Line 5347
	cmp	DWORD PTR bits$[rsp], 0
	jl	SHORT $LN6@stbi__shif
	cmp	DWORD PTR bits$[rsp], 8
	jle	SHORT $LN7@stbi__shif
$LN6@stbi__shif:
	mov	r8d, 5347				; 000014e3H
	lea	rdx, OFFSET FLAT:$SG90199
	lea	rcx, OFFSET FLAT:$SG90200
	call	_wassert
	xor	eax, eax
$LN7@stbi__shif:
; Line 5348
	movsxd	rax, DWORD PTR bits$[rsp]
	lea	rcx, OFFSET FLAT:?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
	mov	edx, DWORD PTR v$[rsp]
	imul	edx, DWORD PTR [rcx+rax*4]
	mov	eax, edx
	movsxd	rcx, DWORD PTR bits$[rsp]
	lea	rdx, OFFSET FLAT:?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
	mov	ecx, DWORD PTR [rdx+rcx*4]
	sar	eax, cl
; Line 5349
	add	rsp, 40					; 00000028H
	ret	0
?stbi__shiftsigned@@YAHIHH@Z ENDP			; stbi__shiftsigned
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
?stbi__bitcount@@YAHI@Z PROC				; stbi__bitcount
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5319
	mov	DWORD PTR [rsp+8], ecx
; Line 5320
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5321
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5322
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR a$[rsp], eax
; Line 5323
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5324
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5325
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
; Line 5326
	ret	0
?stbi__bitcount@@YAHI@Z ENDP				; stbi__bitcount
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
z$ = 32
?stbi__high_bit@@YAHI@Z PROC				; stbi__high_bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5307
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5308
	mov	DWORD PTR n$[rsp], 0
; Line 5309
	cmp	DWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbi__high
	mov	eax, -1
	jmp	$LN1@stbi__high
$LN2@stbi__high:
; Line 5310
	cmp	DWORD PTR z$[rsp], 65536		; 00010000H
	jb	SHORT $LN3@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 16
	mov	DWORD PTR z$[rsp], eax
$LN3@stbi__high:
; Line 5311
	cmp	DWORD PTR z$[rsp], 256			; 00000100H
	jb	SHORT $LN4@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 8
	mov	DWORD PTR z$[rsp], eax
$LN4@stbi__high:
; Line 5312
	cmp	DWORD PTR z$[rsp], 16
	jb	SHORT $LN5@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 4
	mov	DWORD PTR z$[rsp], eax
$LN5@stbi__high:
; Line 5313
	cmp	DWORD PTR z$[rsp], 4
	jb	SHORT $LN6@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 2
	mov	DWORD PTR z$[rsp], eax
$LN6@stbi__high:
; Line 5314
	cmp	DWORD PTR z$[rsp], 2
	jb	SHORT $LN7@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbi__high:
; Line 5315
	mov	eax, DWORD PTR n$[rsp]
$LN1@stbi__high:
; Line 5316
	add	rsp, 24
	ret	0
?stbi__high_bit@@YAHI@Z ENDP				; stbi__high_bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tv83 = 36
r$ = 40
s$ = 64
?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z PROC	; stbi__bmp_test_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5286
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	je	SHORT $LN2@stbi__bmp_
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5287
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN3@stbi__bmp_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5288
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5289
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5290
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5291
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5292
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR sz$[rsp], eax
; Line 5293
	cmp	DWORD PTR sz$[rsp], 12
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 40			; 00000028H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 56			; 00000038H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 108			; 0000006cH
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 124			; 0000007cH
	je	SHORT $LN5@stbi__bmp_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@stbi__bmp_
$LN5@stbi__bmp_:
	mov	DWORD PTR tv83[rsp], 1
$LN6@stbi__bmp_:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 5294
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__bmp_:
; Line 5295
	add	rsp, 56					; 00000038H
	ret	0
?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z ENDP	; stbi__bmp_test_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z PROC	; stbi__png_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5247
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5248
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ; stbi__parse_png_file
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5249
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5250
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5252
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__png_:
; Line 5253
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__png_:
; Line 5254
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__png_:
; Line 5255
	mov	eax, 1
$LN1@stbi__png_:
; Line 5256
	add	rsp, 40					; 00000028H
	ret	0
?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ENDP	; stbi__png_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
tv85 = 52
result$ = 56
p$ = 80
x$ = 88
y$ = 96
n$ = 104
req_comp$ = 112
ri$ = 120
?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__do_png
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5200
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5201
	mov	QWORD PTR result$[rsp], 0
; Line 5202
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN3@stbi__do_p
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN2@stbi__do_p
$LN3@stbi__do_p:
	lea	rcx, OFFSET FLAT:$SG90108
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__do_p
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN16@stbi__do_p
$LN15@stbi__do_p:
	mov	DWORD PTR tv69[rsp], 0
$LN16@stbi__do_p:
	movsxd	rax, DWORD PTR tv69[rsp]
	jmp	$LN1@stbi__do_p
$LN2@stbi__do_p:
; Line 5203
	mov	r8d, DWORD PTR req_comp$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ; stbi__parse_png_file
	test	eax, eax
	je	$LN4@stbi__do_p
; Line 5204
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 8
	jg	SHORT $LN5@stbi__do_p
; Line 5205
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
	jmp	SHORT $LN6@stbi__do_p
$LN5@stbi__do_p:
; Line 5206
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN7@stbi__do_p
; Line 5207
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
	jmp	SHORT $LN8@stbi__do_p
$LN7@stbi__do_p:
; Line 5209
	lea	rcx, OFFSET FLAT:$SG90114
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__do_p
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN18@stbi__do_p
$LN17@stbi__do_p:
	mov	DWORD PTR tv85[rsp], 0
$LN18@stbi__do_p:
	movsxd	rax, DWORD PTR tv85[rsp]
	jmp	$LN1@stbi__do_p
$LN8@stbi__do_p:
$LN6@stbi__do_p:
; Line 5210
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR result$[rsp], rax
; Line 5211
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5212
	cmp	DWORD PTR req_comp$[rsp], 0
	je	$LN9@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	$LN9@stbi__do_p
; Line 5213
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 8
	jne	SHORT $LN10@stbi__do_p
; Line 5214
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN11@stbi__do_p
$LN10@stbi__do_p:
; Line 5216
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format16@@YAPEAGPEAGHHII@Z ; stbi__convert_format16
	mov	QWORD PTR result$[rsp], rax
$LN11@stbi__do_p:
; Line 5217
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 5218
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN12@stbi__do_p
	mov	rax, QWORD PTR result$[rsp]
	jmp	$LN1@stbi__do_p
$LN12@stbi__do_p:
$LN9@stbi__do_p:
; Line 5220
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 5221
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 5222
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN13@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN13@stbi__do_p:
$LN4@stbi__do_p:
; Line 5224
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5225
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5226
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5228
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__do_p:
; Line 5229
	add	rsp, 72					; 00000048H
	ret	0
?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__do_png
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pal_img_n$ = 64
s$ = 72
has_trans$ = 80
i$ = 84
c$1 = 88
k$ = 96
idata_limit$ = 100
ioff$ = 104
color$ = 108
tv78 = 112
pal_len$ = 116
first$ = 120
tc$ = 124
interlace$ = 128
raw_len$2 = 132
is_iphone$ = 136
tv197 = 140
tv194 = 144
tv337 = 148
tv386 = 152
tv485 = 156
comp$3 = 160
filter$4 = 164
bpl$5 = 168
p$6 = 176
idata_limit_old$7 = 184
tc16$ = 188
palette$ = 208
__$ArrayPad$ = 1232
z$ = 1264
scan$ = 1272
req_comp$ = 1280
?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z PROC	; stbi__parse_png_file
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5024
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 1248				; 000004e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5025
	mov	BYTE PTR pal_img_n$[rsp], 0
; Line 5026
	mov	BYTE PTR has_trans$[rsp], 0
	lea	rax, QWORD PTR tc$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 3
	rep stosb
; Line 5028
	mov	DWORD PTR ioff$[rsp], 0
	mov	DWORD PTR idata_limit$[rsp], 0
	mov	DWORD PTR pal_len$[rsp], 0
; Line 5029
	mov	DWORD PTR first$[rsp], 1
	mov	DWORD PTR interlace$[rsp], 0
	mov	DWORD PTR color$[rsp], 0
	mov	DWORD PTR is_iphone$[rsp], 0
; Line 5030
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 5032
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5033
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5034
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5036
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ; stbi__check_png_header
	test	eax, eax
	jne	SHORT $LN21@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN21@stbi__pars:
; Line 5038
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN22@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
$LN2@stbi__pars:
; Line 5041
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z ; stbi__get_chunk_header
	mov	QWORD PTR c$1[rsp], rax
; Line 5042
	mov	eax, DWORD PTR c$1[rsp+4]
	mov	DWORD PTR tv78[rsp], eax
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	ja	SHORT $LN105@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	je	SHORT $LN24@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1130840649		; 43674249H
	je	SHORT $LN23@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229209940		; 49444154H
	je	$LN61@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229278788		; 49454e44H
	je	$LN70@stbi__pars
	jmp	$LN91@stbi__pars
$LN105@stbi__pars:
	cmp	DWORD PTR tv78[rsp], 1347179589		; 504c5445H
	je	$LN45@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1951551059		; 74524e53H
	je	$LN49@stbi__pars
	jmp	$LN91@stbi__pars
$LN23@stbi__pars:
; Line 5044
	mov	DWORD PTR is_iphone$[rsp], 1
; Line 5045
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5046
	jmp	$LN5@stbi__pars
$LN24@stbi__pars:
; Line 5049
	cmp	DWORD PTR first$[rsp], 0
	jne	SHORT $LN25@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89993
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN25@stbi__pars:
; Line 5050
	mov	DWORD PTR first$[rsp], 0
; Line 5051
	cmp	DWORD PTR c$1[rsp], 13
	je	SHORT $LN26@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89995
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN26@stbi__pars:
; Line 5052
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5053
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5054
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN27@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89997
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN27@stbi__pars:
; Line 5055
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN28@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89999
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN28@stbi__pars:
; Line 5056
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+32], eax
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 1
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 4
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 8
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	je	SHORT $LN29@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90001
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN29@stbi__pars:
; Line 5057
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR color$[rsp], eax
	cmp	DWORD PTR color$[rsp], 6
	jle	SHORT $LN30@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90003
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN30@stbi__pars:
; Line 5058
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN31@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN31@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90005
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN31@stbi__pars:
; Line 5059
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN32@stbi__pars
	mov	BYTE PTR pal_img_n$[rsp], 3
	jmp	SHORT $LN33@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN34@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90009
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN34@stbi__pars:
$LN33@stbi__pars:
; Line 5060
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR comp$3[rsp], eax
	cmp	DWORD PTR comp$3[rsp], 0
	je	SHORT $LN35@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90011
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN35@stbi__pars:
; Line 5061
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR filter$4[rsp], eax
	cmp	DWORD PTR filter$4[rsp], 0
	je	SHORT $LN36@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90013
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN36@stbi__pars:
; Line 5062
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR interlace$[rsp], eax
	cmp	DWORD PTR interlace$[rsp], 1
	jle	SHORT $LN37@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90015
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN37@stbi__pars:
; Line 5063
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN39@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN38@stbi__pars
$LN39@stbi__pars:
	lea	rcx, OFFSET FLAT:$SG90018
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN38@stbi__pars:
; Line 5064
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	jne	$LN40@stbi__pars
; Line 5065
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN95@stbi__pars
	mov	DWORD PTR tv194[rsp], 3
	jmp	SHORT $LN96@stbi__pars
$LN95@stbi__pars:
	mov	DWORD PTR tv194[rsp], 1
$LN96@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN97@stbi__pars
	mov	DWORD PTR tv197[rsp], 1
	jmp	SHORT $LN98@stbi__pars
$LN97@stbi__pars:
	mov	DWORD PTR tv197[rsp], 0
$LN98@stbi__pars:
	mov	eax, DWORD PTR tv197[rsp]
	mov	ecx, DWORD PTR tv194[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5066
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN42@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90022
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN42@stbi__pars:
; Line 5067
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN43@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN43@stbi__pars:
; Line 5068
	jmp	SHORT $LN41@stbi__pars
$LN40@stbi__pars:
; Line 5071
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 5072
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN44@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90025
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN44@stbi__pars:
$LN41@stbi__pars:
; Line 5075
	jmp	$LN5@stbi__pars
$LN45@stbi__pars:
; Line 5079
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN46@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90028
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN46@stbi__pars:
; Line 5080
	cmp	DWORD PTR c$1[rsp], 768			; 00000300H
	jbe	SHORT $LN47@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90030
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 5081
	xor	edx, edx
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, 3
	div	ecx
	mov	DWORD PTR pal_len$[rsp], eax
; Line 5082
	imul	eax, DWORD PTR pal_len$[rsp], 3
	cmp	eax, DWORD PTR c$1[rsp]
	je	SHORT $LN48@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90032
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 5083
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stbi__pars
$LN7@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stbi__pars:
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@stbi__pars
; Line 5084
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5085
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5086
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5087
	mov	eax, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	mov	eax, eax
	mov	BYTE PTR palette$[rsp+rax], 255		; 000000ffH
; Line 5088
	jmp	$LN7@stbi__pars
$LN8@stbi__pars:
; Line 5089
	jmp	$LN5@stbi__pars
$LN49@stbi__pars:
; Line 5093
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN50@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90035
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN50@stbi__pars:
; Line 5094
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN51@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90037
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 5095
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	$LN52@stbi__pars
; Line 5096
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN54@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 4
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN54@stbi__pars:
; Line 5097
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN55@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90042
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN55@stbi__pars:
; Line 5098
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR c$1[rsp], eax
	jbe	SHORT $LN56@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90044
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 5099
	mov	BYTE PTR pal_img_n$[rsp], 4
; Line 5100
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__pars
$LN10@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__pars:
	mov	eax, DWORD PTR c$1[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN11@stbi__pars
; Line 5101
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
	jmp	SHORT $LN10@stbi__pars
$LN11@stbi__pars:
; Line 5102
	jmp	$LN53@stbi__pars
$LN52@stbi__pars:
; Line 5103
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN57@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90046
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN57@stbi__pars:
; Line 5104
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, 1
	cmp	DWORD PTR c$1[rsp], eax
	je	SHORT $LN58@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90048
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN58@stbi__pars:
; Line 5105
	mov	BYTE PTR has_trans$[rsp], 1
; Line 5106
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN59@stbi__pars
; Line 5107
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN15@stbi__pars
$LN13@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	WORD PTR tc16$[rsp+rcx*2], ax
	jmp	SHORT $LN13@stbi__pars
$LN14@stbi__pars:
; Line 5108
	jmp	SHORT $LN60@stbi__pars
$LN59@stbi__pars:
; Line 5109
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__pars
$LN16@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN17@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	and	eax, 255				; 000000ffH
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rcx, DWORD PTR [rcx+32]
	lea	rdx, OFFSET FLAT:?stbi__depth_scale_table@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR tc$[rsp+rcx], al
	jmp	SHORT $LN16@stbi__pars
$LN17@stbi__pars:
$LN60@stbi__pars:
$LN53@stbi__pars:
; Line 5112
	jmp	$LN5@stbi__pars
$LN61@stbi__pars:
; Line 5116
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN62@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90053
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 5117
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN63@stbi__pars
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN63@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90055
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
; Line 5118
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN64@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN64@stbi__pars:
; Line 5119
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ioff$[rsp]
	jge	SHORT $LN65@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN65@stbi__pars:
; Line 5120
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	$LN66@stbi__pars
; Line 5121
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	DWORD PTR idata_limit_old$7[rsp], eax
; Line 5123
	cmp	DWORD PTR idata_limit$[rsp], 0
	jne	SHORT $LN67@stbi__pars
	cmp	DWORD PTR c$1[rsp], 4096		; 00001000H
	jbe	SHORT $LN99@stbi__pars
	mov	eax, DWORD PTR c$1[rsp]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN100@stbi__pars
$LN99@stbi__pars:
	mov	DWORD PTR tv337[rsp], 4096		; 00001000H
$LN100@stbi__pars:
	mov	eax, DWORD PTR tv337[rsp]
	mov	DWORD PTR idata_limit$[rsp], eax
$LN67@stbi__pars:
$LN19@stbi__pars:
; Line 5124
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	SHORT $LN20@stbi__pars
; Line 5125
	mov	eax, DWORD PTR idata_limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR idata_limit$[rsp], eax
	jmp	SHORT $LN19@stbi__pars
$LN20@stbi__pars:
; Line 5127
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	realloc
	mov	QWORD PTR p$6[rsp], rax
	cmp	QWORD PTR p$6[rsp], 0
	jne	SHORT $LN68@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90061
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 5128
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN66@stbi__pars:
; Line 5130
	mov	eax, DWORD PTR ioff$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	r8d, DWORD PTR c$1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
	test	eax, eax
	jne	SHORT $LN69@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90063
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN69@stbi__pars:
; Line 5131
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ioff$[rsp], eax
; Line 5132
	jmp	$LN5@stbi__pars
$LN70@stbi__pars:
; Line 5137
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN71@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90066
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN71@stbi__pars:
; Line 5138
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN72@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN72@stbi__pars:
; Line 5139
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN73@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90069
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN73@stbi__pars:
; Line 5141
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+32]
	add	eax, 7
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR bpl$5[rsp], eax
; Line 5142
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR bpl$5[rsp]
	imul	ecx, DWORD PTR [rax+4]
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR raw_len$2[rsp], eax
; Line 5143
	cmp	DWORD PTR is_iphone$[rsp], 0
	jne	SHORT $LN101@stbi__pars
	mov	DWORD PTR tv386[rsp], 1
	jmp	SHORT $LN102@stbi__pars
$LN101@stbi__pars:
	mov	DWORD PTR tv386[rsp], 0
$LN102@stbi__pars:
	mov	eax, DWORD PTR tv386[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR raw_len$2[rsp]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	edx, DWORD PTR ioff$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbi_zlib_decode_malloc_guesssize_headerflag
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 5144
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN74@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN74@stbi__pars:
; Line 5145
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	free
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5146
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN78@stbi__pars
	cmp	DWORD PTR req_comp$[rsp], 3
	je	SHORT $LN78@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN77@stbi__pars
$LN78@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN75@stbi__pars
$LN77@stbi__pars:
; Line 5147
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
	jmp	SHORT $LN76@stbi__pars
$LN75@stbi__pars:
; Line 5149
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+12], ecx
$LN76@stbi__pars:
; Line 5150
	mov	eax, DWORD PTR interlace$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z ; stbi__create_png_image
	test	eax, eax
	jne	SHORT $LN79@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN79@stbi__pars:
; Line 5151
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN80@stbi__pars
; Line 5152
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN81@stbi__pars
; Line 5153
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc16$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z ; stbi__compute_transparency16
	test	eax, eax
	jne	SHORT $LN83@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN83@stbi__pars:
; Line 5154
	jmp	SHORT $LN82@stbi__pars
$LN81@stbi__pars:
; Line 5155
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z ; stbi__compute_transparency
	test	eax, eax
	jne	SHORT $LN84@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN84@stbi__pars:
$LN82@stbi__pars:
$LN80@stbi__pars:
; Line 5158
	cmp	DWORD PTR is_iphone$[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN103@stbi__pars
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv485[rsp], eax
	jmp	SHORT $LN104@stbi__pars
$LN103@stbi__pars:
	mov	eax, DWORD PTR ?stbi__de_iphone_flag_global@@3HA
	mov	DWORD PTR tv485[rsp], eax
$LN104@stbi__pars:
	cmp	DWORD PTR tv485[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 2
	jle	SHORT $LN85@stbi__pars
; Line 5159
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__de_iphone@@YAXPEAUstbi__png@@@Z	; stbi__de_iphone
$LN85@stbi__pars:
; Line 5160
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN86@stbi__pars
; Line 5162
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5163
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5164
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN88@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
$LN88@stbi__pars:
; Line 5165
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR pal_len$[rsp]
	lea	rdx, QWORD PTR palette$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z ; stbi__expand_png_palette
	test	eax, eax
	jne	SHORT $LN89@stbi__pars
; Line 5166
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN89@stbi__pars:
	jmp	SHORT $LN87@stbi__pars
$LN86@stbi__pars:
; Line 5167
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN90@stbi__pars
; Line 5169
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN90@stbi__pars:
$LN87@stbi__pars:
; Line 5171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	free
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5173
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 5174
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN91@stbi__pars:
; Line 5179
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN92@stbi__pars
	lea	rcx, OFFSET FLAT:$SG90089
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN92@stbi__pars:
; Line 5180
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 536870912				; 20000000H
	test	eax, eax
	jne	$LN93@stbi__pars
; Line 5184
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5185
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5186
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5187
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5189
	lea	rcx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN93@stbi__pars:
; Line 5191
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN5@stbi__pars:
; Line 5195
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 5196
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 5197
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1248				; 000004e0H
	pop	rdi
	ret	0
?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ENDP	; stbi__parse_png_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$1 = 32
half$2 = 33
p$ = 40
t$3 = 48
i$ = 52
t$4 = 56
t$5 = 57
pixel_count$ = 60
tv133 = 64
s$ = 72
z$ = 96
?stbi__de_iphone@@YAXPEAUstbi__png@@@Z PROC		; stbi__de_iphone
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4979
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4980
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4981
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4982
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4984
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 3
	jne	$LN11@stbi__de_i
; Line 4985
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__de_i
$LN2@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__de_i
; Line 4986
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$4[rsp], al
; Line 4987
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4988
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$4[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4989
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4990
	jmp	SHORT $LN2@stbi__de_i
$LN3@stbi__de_i:
; Line 4991
	jmp	$LN12@stbi__de_i
$LN11@stbi__de_i:
; Line 4992
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 4
	je	SHORT $LN18@stbi__de_i
	mov	r8d, 4992				; 00001380H
	lea	rdx, OFFSET FLAT:$SG89895
	lea	rcx, OFFSET FLAT:$SG89896
	call	_wassert
	xor	eax, eax
$LN18@stbi__de_i:
; Line 4993
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN19@stbi__de_i
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN20@stbi__de_i
$LN19@stbi__de_i:
	mov	eax, DWORD PTR ?stbi__unpremultiply_on_load_global@@3HA
	mov	DWORD PTR tv133[rsp], eax
$LN20@stbi__de_i:
	cmp	DWORD PTR tv133[rsp], 0
	je	$LN13@stbi__de_i
; Line 4995
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__de_i
$LN5@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__de_i
; Line 4996
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR a$1[rsp], al
; Line 4997
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$3[rsp], al
; Line 4998
	movzx	eax, BYTE PTR a$1[rsp]
	test	eax, eax
	je	$LN15@stbi__de_i
; Line 4999
	movzx	eax, BYTE PTR a$1[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR half$2[rsp], al
; Line 5000
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5001
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5002
	movzx	eax, BYTE PTR t$3[rsp]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5003
	jmp	SHORT $LN16@stbi__de_i
$LN15@stbi__de_i:
; Line 5004
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5005
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN16@stbi__de_i:
; Line 5007
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5008
	jmp	$LN5@stbi__de_i
$LN6@stbi__de_i:
; Line 5009
	jmp	SHORT $LN14@stbi__de_i
$LN13@stbi__de_i:
; Line 5011
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__de_i
$LN8@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN9@stbi__de_i
; Line 5012
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
; Line 5013
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5014
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5015
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5016
	jmp	SHORT $LN8@stbi__de_i
$LN9@stbi__de_i:
$LN14@stbi__de_i:
$LN12@stbi__de_i:
; Line 5019
	add	rsp, 88					; 00000058H
	ret	0
?stbi__de_iphone@@YAXPEAUstbi__png@@@Z ENDP		; stbi__de_iphone
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
?stbi__unpremultiply_on_load_thread@@YAXH@Z PROC	; stbi__unpremultiply_on_load_thread
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4959
	mov	DWORD PTR [rsp+8], ecx
; Line 4960
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4961
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4962
	ret	0
?stbi__unpremultiply_on_load_thread@@YAXH@Z ENDP	; stbi__unpremultiply_on_load_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
n$1 = 36
n$2 = 40
pixel_count$ = 44
p$ = 48
orig$ = 56
temp_out$ = 64
a$ = 96
palette$ = 104
len$ = 112
pal_img_n$ = 120
?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z PROC ; stbi__expand_png_palette
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4902
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4903
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4904
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR orig$[rsp], rax
; Line 4906
	xor	r8d, r8d
	mov	edx, DWORD PTR pal_img_n$[rsp]
	mov	ecx, DWORD PTR pixel_count$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR p$[rsp], rax
; Line 4907
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN8@stbi__expa
	lea	rcx, OFFSET FLAT:$SG89849
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__expa
$LN8@stbi__expa:
; Line 4910
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR temp_out$[rsp], rax
; Line 4912
	cmp	DWORD PTR pal_img_n$[rsp], 3
	jne	$LN9@stbi__expa
; Line 4913
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__expa
$LN2@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN3@stbi__expa
; Line 4914
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$2[rsp], eax
; Line 4915
	movsxd	rax, DWORD PTR n$2[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4916
	mov	eax, DWORD PTR n$2[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4917
	mov	eax, DWORD PTR n$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4918
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4919
	jmp	$LN2@stbi__expa
$LN3@stbi__expa:
; Line 4920
	jmp	$LN10@stbi__expa
$LN9@stbi__expa:
; Line 4921
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__expa
$LN5@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__expa
; Line 4922
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 4923
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4924
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4925
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4926
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4927
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4928
	jmp	$LN5@stbi__expa
$LN6@stbi__expa:
$LN10@stbi__expa:
; Line 4930
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	free
; Line 4931
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR temp_out$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4935
	mov	eax, 1
$LN1@stbi__expa:
; Line 4936
	add	rsp, 88					; 00000058H
	ret	0
?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z ENDP ; stbi__expand_png_palette
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z PROC ; stbi__compute_transparency16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4877
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4878
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4879
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4880
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4884
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4884				; 00001314H
	lea	rdx, OFFSET FLAT:$SG89822
	lea	rcx, OFFSET FLAT:$SG89823
	call	_wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4886
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4887
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4888
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 65535		; 0000ffffH
$LN14@stbi__comp:
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, WORD PTR tv87[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 4889
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4890
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4891
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4893
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4894
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN10@stbi__comp:
; Line 4895
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
; Line 4896
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4898
	mov	eax, 1
; Line 4899
	add	rsp, 72					; 00000048H
	ret	0
?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z ENDP ; stbi__compute_transparency16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z PROC ; stbi__compute_transparency
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4852
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4853
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4854
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4855
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4859
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4859				; 000012fbH
	lea	rdx, OFFSET FLAT:$SG89799
	lea	rcx, OFFSET FLAT:$SG89800
	call	_wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4861
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4863
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 255		; 000000ffH
$LN14@stbi__comp:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR tv87[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4864
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
; Line 4865
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4866
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4867
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4868
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4869
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN10@stbi__comp:
; Line 4870
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4871
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4873
	mov	eax, 1
; Line 4874
	add	rsp, 72					; 00000048H
	ret	0
?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z ENDP ; stbi__compute_transparency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 64
j$1 = 68
x$2 = 72
i$3 = 76
out_bytes$ = 80
y$4 = 84
tv65 = 88
img_len$5 = 92
final$ = 96
bytes$ = 104
out_y$6 = 108
out_x$7 = 112
tv280 = 120
yspc$8 = 128
xspc$9 = 160
yorig$10 = 192
xorig$11 = 224
__$ArrayPad$ = 256
a$ = 288
image_data$ = 296
image_data_len$ = 304
out_n$ = 312
depth$ = 320
color$ = 328
interlaced$ = 336
?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z PROC ; stbi__create_png_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4807
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4808
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN16@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN17@stbi__crea
$LN16@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN17@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4809
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR out_bytes$[rsp], eax
; Line 4812
	cmp	DWORD PTR interlaced$[rsp], 0
	jne	SHORT $LN11@stbi__crea
; Line 4813
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], edx
	mov	edx, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ; stbi__create_png_image_raw
	jmp	$LN1@stbi__crea
$LN11@stbi__crea:
; Line 4816
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	xor	r9d, r9d
	mov	r8d, DWORD PTR out_bytes$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR [rcx]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR final$[rsp], rax
; Line 4817
	cmp	QWORD PTR final$[rsp], 0
	jne	SHORT $LN12@stbi__crea
	lea	rcx, OFFSET FLAT:$SG89779
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN12@stbi__crea:
; Line 4818
	mov	DWORD PTR p$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR p$[rsp]
	inc	eax
	mov	DWORD PTR p$[rsp], eax
$LN4@stbi__crea:
	cmp	DWORD PTR p$[rsp], 7
	jge	$LN3@stbi__crea
; Line 4819
	mov	DWORD PTR xorig$11[rsp], 0
	mov	DWORD PTR xorig$11[rsp+4], 4
	mov	DWORD PTR xorig$11[rsp+8], 0
	mov	DWORD PTR xorig$11[rsp+12], 2
	mov	DWORD PTR xorig$11[rsp+16], 0
	mov	DWORD PTR xorig$11[rsp+20], 1
	mov	DWORD PTR xorig$11[rsp+24], 0
; Line 4820
	mov	DWORD PTR yorig$10[rsp], 0
	mov	DWORD PTR yorig$10[rsp+4], 0
	mov	DWORD PTR yorig$10[rsp+8], 4
	mov	DWORD PTR yorig$10[rsp+12], 0
	mov	DWORD PTR yorig$10[rsp+16], 2
	mov	DWORD PTR yorig$10[rsp+20], 0
	mov	DWORD PTR yorig$10[rsp+24], 1
; Line 4821
	mov	DWORD PTR xspc$9[rsp], 8
	mov	DWORD PTR xspc$9[rsp+4], 8
	mov	DWORD PTR xspc$9[rsp+8], 4
	mov	DWORD PTR xspc$9[rsp+12], 4
	mov	DWORD PTR xspc$9[rsp+16], 2
	mov	DWORD PTR xspc$9[rsp+20], 2
	mov	DWORD PTR xspc$9[rsp+24], 1
; Line 4822
	mov	DWORD PTR yspc$8[rsp], 8
	mov	DWORD PTR yspc$8[rsp+4], 8
	mov	DWORD PTR yspc$8[rsp+8], 8
	mov	DWORD PTR yspc$8[rsp+12], 4
	mov	DWORD PTR yspc$8[rsp+16], 4
	mov	DWORD PTR yspc$8[rsp+20], 2
	mov	DWORD PTR yspc$8[rsp+24], 2
; Line 4825
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xorig$11[rsp+rcx*4]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xspc$9[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR xspc$9[rsp+rcx*4]
	mov	DWORD PTR x$2[rsp], eax
; Line 4826
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yorig$10[rsp+rcx*4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yspc$8[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR yspc$8[rsp+rcx*4]
	mov	DWORD PTR y$4[rsp], eax
; Line 4827
	cmp	DWORD PTR x$2[rsp], 0
	je	$LN13@stbi__crea
	cmp	DWORD PTR y$4[rsp], 0
	je	$LN13@stbi__crea
; Line 4828
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR x$2[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	sar	eax, 3
	inc	eax
	imul	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR img_len$5[rsp], eax
; Line 4829
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR x$2[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ; stbi__create_png_image_raw
	test	eax, eax
	jne	SHORT $LN14@stbi__crea
; Line 4830
	mov	rcx, QWORD PTR final$[rsp]
	call	free
; Line 4831
	xor	eax, eax
	jmp	$LN1@stbi__crea
$LN14@stbi__crea:
; Line 4833
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR y$4[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN6@stbi__crea
; Line 4834
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__crea
$LN8@stbi__crea:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__crea:
	mov	eax, DWORD PTR x$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__crea
; Line 4835
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR yspc$8[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR yorig$10[rsp+rcx*4]
	mov	DWORD PTR out_y$6[rsp], eax
; Line 4836
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR xspc$9[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR xorig$11[rsp+rcx*4]
	mov	DWORD PTR out_x$7[rsp], eax
; Line 4837
	movsxd	rax, DWORD PTR out_bytes$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR x$2[rsp]
	add	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR out_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR a$[rsp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8d, DWORD PTR out_y$6[rsp]
	imul	r8d, DWORD PTR [rdx]
	mov	edx, r8d
	imul	edx, DWORD PTR out_bytes$[rsp]
	mov	edx, edx
	mov	r8, QWORD PTR final$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	r8d, DWORD PTR out_x$7[rsp]
	imul	r8d, DWORD PTR out_bytes$[rsp]
	movsxd	r8, r8d
	add	rdx, r8
	mov	QWORD PTR tv280[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv280[rsp]
	mov	rcx, rax
	call	memcpy
; Line 4839
	jmp	$LN8@stbi__crea
$LN9@stbi__crea:
; Line 4840
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4841
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	free
; Line 4842
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	rcx, QWORD PTR image_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR image_data$[rsp], rax
; Line 4843
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	ecx, DWORD PTR image_data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR image_data_len$[rsp], eax
$LN13@stbi__crea:
; Line 4845
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4846
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR final$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4848
	mov	eax, 1
$LN1@stbi__crea:
; Line 4849
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z ENDP ; stbi__create_png_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
scale$1 = 36
cur$2 = 40
i$ = 48
filter_bytes$ = 52
cur$3 = 56
output_bytes$ = 64
q$4 = 68
img_n$ = 72
prior$5 = 80
in$6 = 88
j$ = 96
nk$7 = 100
filter$8 = 104
stride$ = 108
img_width_bytes$ = 112
bytes$ = 116
tv415 = 120
tv668 = 124
tv65 = 128
tv170 = 132
width$ = 136
tv276 = 140
cur$9 = 144
tv393 = 152
tv565 = 156
tv548 = 160
tv620 = 164
img_len$ = 168
tv149 = 172
tv218 = 176
tv362 = 180
tv345 = 184
s$ = 192
cur16$10 = 200
a$ = 224
raw$ = 232
raw_len$ = 240
out_n$ = 248
x$ = 256
y$ = 264
depth$ = 272
color$ = 280
?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z PROC ; stbi__create_png_image_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 4596
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN159@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN160@stbi__crea
$LN159@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN160@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4597
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4598
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR stride$[rsp], eax
; Line 4601
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR img_n$[rsp], eax
; Line 4603
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR output_bytes$[rsp], eax
; Line 4604
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR filter_bytes$[rsp], eax
; Line 4605
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR width$[rsp], eax
; Line 4607
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	r8d, 4607				; 000011ffH
	lea	rdx, OFFSET FLAT:$SG89672
	lea	rcx, OFFSET FLAT:$SG89673
	call	_wassert
	xor	eax, eax
$LN161@stbi__crea:
; Line 4608
	xor	r9d, r9d
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4609
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN98@stbi__crea
	lea	rcx, OFFSET FLAT:$SG89675
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN98@stbi__crea:
; Line 4611
	mov	r9d, 7
	mov	r8d, DWORD PTR depth$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN99@stbi__crea
	lea	rcx, OFFSET FLAT:$SG89677
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN99@stbi__crea:
; Line 4612
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR img_width_bytes$[rsp], eax
; Line 4613
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 4618
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR raw_len$[rsp], eax
	jae	SHORT $LN100@stbi__crea
	lea	rcx, OFFSET FLAT:$SG89679
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN100@stbi__crea:
; Line 4620
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN3@stbi__crea
; Line 4621
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4623
	mov	rax, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv149[rsp], eax
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
	mov	eax, DWORD PTR tv149[rsp]
	mov	DWORD PTR filter$8[rsp], eax
; Line 4625
	cmp	DWORD PTR filter$8[rsp], 4
	jle	SHORT $LN101@stbi__crea
; Line 4626
	lea	rcx, OFFSET FLAT:$SG89681
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN101@stbi__crea:
; Line 4628
	cmp	DWORD PTR depth$[rsp], 8
	jge	SHORT $LN102@stbi__crea
; Line 4629
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR img_width_bytes$[rsp], eax
	jbe	SHORT $LN103@stbi__crea
	lea	rcx, OFFSET FLAT:$SG89684
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN103@stbi__crea:
; Line 4630
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	sub	eax, DWORD PTR img_width_bytes$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4631
	mov	DWORD PTR filter_bytes$[rsp], 1
; Line 4632
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	mov	DWORD PTR width$[rsp], eax
$LN102@stbi__crea:
; Line 4634
	mov	eax, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4637
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN104@stbi__crea
	movsxd	rax, DWORD PTR filter$8[rsp]
	lea	rcx, OFFSET FLAT:?first_row_filter@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR filter$8[rsp], eax
$LN104@stbi__crea:
; Line 4640
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__crea
; Line 4641
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv170[rsp], eax
	cmp	DWORD PTR tv170[rsp], 6
	ja	$LN8@stbi__crea
	movsxd	rax, DWORD PTR tv170[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN168@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN105@stbi__crea:
; Line 4642
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN106@stbi__crea:
; Line 4643
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN107@stbi__crea:
; Line 4644
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN108@stbi__crea:
; Line 4645
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN109@stbi__crea:
; Line 4646
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv218[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv218[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN110@stbi__crea:
; Line 4647
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN111@stbi__crea:
; Line 4648
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN8@stbi__crea:
; Line 4650
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4652
	cmp	DWORD PTR depth$[rsp], 8
	jne	SHORT $LN112@stbi__crea
; Line 4653
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN114@stbi__crea
; Line 4654
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN114@stbi__crea:
; Line 4655
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4656
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4657
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
	jmp	$LN113@stbi__crea
$LN112@stbi__crea:
; Line 4658
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN115@stbi__crea
; Line 4659
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN117@stbi__crea
; Line 4660
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4661
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN117@stbi__crea:
; Line 4663
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4664
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4665
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4666
	jmp	SHORT $LN116@stbi__crea
$LN115@stbi__crea:
; Line 4667
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4668
	mov	rax, QWORD PTR cur$3[rsp]
	inc	rax
	mov	QWORD PTR cur$3[rsp], rax
; Line 4669
	mov	rax, QWORD PTR prior$5[rsp]
	inc	rax
	mov	QWORD PTR prior$5[rsp], rax
$LN116@stbi__crea:
$LN113@stbi__crea:
; Line 4673
	cmp	DWORD PTR depth$[rsp], 8
	jl	SHORT $LN120@stbi__crea
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	jne	$LN118@stbi__crea
$LN120@stbi__crea:
; Line 4674
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	imul	eax, DWORD PTR filter_bytes$[rsp]
	mov	DWORD PTR nk$7[rsp], eax
; Line 4678
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv276[rsp], eax
	cmp	DWORD PTR tv276[rsp], 6
	ja	$LN10@stbi__crea
	movsxd	rax, DWORD PTR tv276[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN167@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN121@stbi__crea:
; Line 4680
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR raw$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	call	memcpy
	jmp	$LN10@stbi__crea
$LN122@stbi__crea:
; Line 4681
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN14@stbi__crea
$LN12@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN14@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN13@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbi__crea
$LN13@stbi__crea:
	jmp	$LN10@stbi__crea
$LN123@stbi__crea:
; Line 4682
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN17@stbi__crea
$LN15@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN17@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN16@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbi__crea
$LN16@stbi__crea:
	jmp	$LN10@stbi__crea
$LN124@stbi__crea:
; Line 4683
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN20@stbi__crea
$LN18@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN20@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN19@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR filter_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN18@stbi__crea
$LN19@stbi__crea:
	jmp	$LN10@stbi__crea
$LN125@stbi__crea:
; Line 4684
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN23@stbi__crea
$LN21@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN23@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN22@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv345[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR filter_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv362[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv362[rsp]
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv345[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN21@stbi__crea
$LN22@stbi__crea:
	jmp	$LN10@stbi__crea
$LN126@stbi__crea:
; Line 4685
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN26@stbi__crea
$LN24@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN26@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN25@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbi__crea
$LN25@stbi__crea:
	jmp	SHORT $LN10@stbi__crea
$LN127@stbi__crea:
; Line 4686
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN29@stbi__crea
$LN27@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN29@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN28@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv393[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv393[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN27@stbi__crea
$LN28@stbi__crea:
$LN10@stbi__crea:
; Line 4689
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4690
	jmp	$LN119@stbi__crea
$LN118@stbi__crea:
; Line 4691
	mov	eax, DWORD PTR img_n$[rsp]
	inc	eax
	cmp	eax, DWORD PTR out_n$[rsp]
	je	SHORT $LN162@stbi__crea
	mov	r8d, 4691				; 00001253H
	lea	rdx, OFFSET FLAT:$SG89709
	lea	rcx, OFFSET FLAT:$SG89710
	call	_wassert
	xor	eax, eax
$LN162@stbi__crea:
; Line 4696
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv415[rsp], eax
	cmp	DWORD PTR tv415[rsp], 6
	ja	$LN30@stbi__crea
	movsxd	rax, DWORD PTR tv415[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN166@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN128@stbi__crea:
; Line 4697
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN34@stbi__crea
$LN32@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN34@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN33@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN37@stbi__crea
$LN35@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN37@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN36@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@stbi__crea
$LN36@stbi__crea:
	jmp	$LN32@stbi__crea
$LN33@stbi__crea:
	jmp	$LN30@stbi__crea
$LN129@stbi__crea:
; Line 4698
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN40@stbi__crea
$LN38@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN40@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN39@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN43@stbi__crea
$LN41@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN43@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN42@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN41@stbi__crea
$LN42@stbi__crea:
	jmp	$LN38@stbi__crea
$LN39@stbi__crea:
	jmp	$LN30@stbi__crea
$LN130@stbi__crea:
; Line 4699
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN46@stbi__crea
$LN44@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN46@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN45@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN49@stbi__crea
$LN47@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN49@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN48@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN47@stbi__crea
$LN48@stbi__crea:
	jmp	$LN44@stbi__crea
$LN45@stbi__crea:
	jmp	$LN30@stbi__crea
$LN131@stbi__crea:
; Line 4700
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN52@stbi__crea
$LN50@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN52@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN51@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN55@stbi__crea
$LN53@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN55@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN54@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR output_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN53@stbi__crea
$LN54@stbi__crea:
	jmp	$LN50@stbi__crea
$LN51@stbi__crea:
	jmp	$LN30@stbi__crea
$LN132@stbi__crea:
; Line 4701
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN58@stbi__crea
$LN56@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN58@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	$LN57@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN61@stbi__crea
$LN59@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN61@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN60@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv548[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv565[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv565[rsp]
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv548[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN59@stbi__crea
$LN60@stbi__crea:
	jmp	$LN56@stbi__crea
$LN57@stbi__crea:
	jmp	$LN30@stbi__crea
$LN133@stbi__crea:
; Line 4702
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN64@stbi__crea
$LN62@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN64@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN63@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN67@stbi__crea
$LN65@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN67@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN66@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN65@stbi__crea
$LN66@stbi__crea:
	jmp	$LN62@stbi__crea
$LN63@stbi__crea:
	jmp	$LN30@stbi__crea
$LN134@stbi__crea:
; Line 4703
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN70@stbi__crea
$LN68@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN70@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN69@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN73@stbi__crea
$LN71@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN73@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN72@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv620[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv620[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN71@stbi__crea
$LN72@stbi__crea:
	jmp	$LN68@stbi__crea
$LN69@stbi__crea:
$LN30@stbi__crea:
; Line 4709
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN135@stbi__crea
; Line 4710
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4711
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN76@stbi__crea
$LN74@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
$LN76@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN75@stbi__crea
; Line 4712
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4713
	jmp	SHORT $LN74@stbi__crea
$LN75@stbi__crea:
$LN135@stbi__crea:
$LN119@stbi__crea:
; Line 4716
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4721
	cmp	DWORD PTR depth$[rsp], 8
	jge	$LN136@stbi__crea
; Line 4722
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN79@stbi__crea
$LN77@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN79@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN78@stbi__crea
; Line 4723
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4724
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR out_n$[rsp]
	mov	ecx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR img_width_bytes$[rsp]
	sub	rax, rcx
	mov	QWORD PTR in$6[rsp], rax
; Line 4727
	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN163@stbi__crea
	movsxd	rax, DWORD PTR depth$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__depth_scale_table@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv668[rsp], eax
	jmp	SHORT $LN164@stbi__crea
$LN163@stbi__crea:
	mov	DWORD PTR tv668[rsp], 1
$LN164@stbi__crea:
	movzx	eax, BYTE PTR tv668[rsp]
	mov	BYTE PTR scale$1[rsp], al
; Line 4735
	cmp	DWORD PTR depth$[rsp], 4
	jne	$LN138@stbi__crea
; Line 4736
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN82@stbi__crea
$LN80@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 2
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN82@stbi__crea:
	cmp	DWORD PTR k$[rsp], 2
	jl	SHORT $LN81@stbi__crea
; Line 4737
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4738
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 15
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4739
	jmp	SHORT $LN80@stbi__crea
$LN81@stbi__crea:
; Line 4740
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN140@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN140@stbi__crea:
	jmp	$LN139@stbi__crea
$LN138@stbi__crea:
; Line 4741
	cmp	DWORD PTR depth$[rsp], 2
	jne	$LN141@stbi__crea
; Line 4742
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN85@stbi__crea
$LN83@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 4
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN85@stbi__crea:
	cmp	DWORD PTR k$[rsp], 4
	jl	$LN84@stbi__crea
; Line 4743
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4744
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4745
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4746
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4747
	jmp	$LN83@stbi__crea
$LN84@stbi__crea:
; Line 4748
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN143@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN143@stbi__crea:
; Line 4749
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN144@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN144@stbi__crea:
; Line 4750
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN145@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN145@stbi__crea:
	jmp	$LN142@stbi__crea
$LN141@stbi__crea:
; Line 4751
	cmp	DWORD PTR depth$[rsp], 1
	jne	$LN146@stbi__crea
; Line 4752
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN88@stbi__crea
$LN86@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 8
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN88@stbi__crea:
	cmp	DWORD PTR k$[rsp], 8
	jl	$LN87@stbi__crea
; Line 4753
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4754
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4755
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4756
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4757
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4758
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4759
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4760
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4761
	jmp	$LN86@stbi__crea
$LN87@stbi__crea:
; Line 4762
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN147@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN147@stbi__crea:
; Line 4763
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN148@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN148@stbi__crea:
; Line 4764
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN149@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN149@stbi__crea:
; Line 4765
	cmp	DWORD PTR k$[rsp], 3
	jle	SHORT $LN150@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN150@stbi__crea:
; Line 4766
	cmp	DWORD PTR k$[rsp], 4
	jle	SHORT $LN151@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN151@stbi__crea:
; Line 4767
	cmp	DWORD PTR k$[rsp], 5
	jle	SHORT $LN152@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN152@stbi__crea:
; Line 4768
	cmp	DWORD PTR k$[rsp], 6
	jle	SHORT $LN153@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN153@stbi__crea:
$LN146@stbi__crea:
$LN142@stbi__crea:
$LN139@stbi__crea:
; Line 4770
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	$LN154@stbi__crea
; Line 4773
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4774
	cmp	DWORD PTR img_n$[rsp], 1
	jne	SHORT $LN155@stbi__crea
; Line 4775
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN91@stbi__crea
$LN89@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN91@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	SHORT $LN90@stbi__crea
; Line 4776
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4777
	movsxd	rax, DWORD PTR q$4[rsp]
	mov	ecx, DWORD PTR q$4[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4778
	jmp	SHORT $LN89@stbi__crea
$LN90@stbi__crea:
; Line 4779
	jmp	$LN156@stbi__crea
$LN155@stbi__crea:
; Line 4780
	cmp	DWORD PTR img_n$[rsp], 3
	je	SHORT $LN165@stbi__crea
	mov	r8d, 4780				; 000012acH
	lea	rdx, OFFSET FLAT:$SG89740
	lea	rcx, OFFSET FLAT:$SG89741
	call	_wassert
	xor	eax, eax
$LN165@stbi__crea:
; Line 4781
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN94@stbi__crea
$LN92@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN94@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	$LN93@stbi__crea
; Line 4782
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4783
	imul	eax, DWORD PTR q$4[rsp], 3
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4784
	imul	eax, DWORD PTR q$4[rsp], 3
	inc	eax
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4785
	imul	eax, DWORD PTR q$4[rsp], 3
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4786
	jmp	$LN92@stbi__crea
$LN93@stbi__crea:
$LN156@stbi__crea:
$LN154@stbi__crea:
; Line 4789
	jmp	$LN77@stbi__crea
$LN78@stbi__crea:
; Line 4790
	jmp	$LN137@stbi__crea
$LN136@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 16
	jne	$LN157@stbi__crea
; Line 4795
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$9[rsp], rax
; Line 4796
	mov	rax, QWORD PTR cur$9[rsp]
	mov	QWORD PTR cur16$10[rsp], rax
; Line 4798
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN97@stbi__crea
$LN95@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR cur16$10[rsp]
	add	rax, 2
	mov	QWORD PTR cur16$10[rsp], rax
	mov	rax, QWORD PTR cur$9[rsp]
	add	rax, 2
	mov	QWORD PTR cur$9[rsp], rax
$LN97@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN96@stbi__crea
; Line 4799
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cur$9[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR cur$9[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	or	eax, ecx
	mov	rcx, QWORD PTR cur16$10[rsp]
	mov	WORD PTR [rcx], ax
; Line 4800
	jmp	$LN95@stbi__crea
$LN96@stbi__crea:
$LN157@stbi__crea:
$LN137@stbi__crea:
; Line 4803
	mov	eax, 1
$LN1@stbi__crea:
; Line 4804
	add	rsp, 216				; 000000d8H
	ret	0
$LN168@stbi__crea:
	DD	$LN105@stbi__crea
	DD	$LN106@stbi__crea
	DD	$LN107@stbi__crea
	DD	$LN108@stbi__crea
	DD	$LN109@stbi__crea
	DD	$LN110@stbi__crea
	DD	$LN111@stbi__crea
$LN167@stbi__crea:
	DD	$LN121@stbi__crea
	DD	$LN122@stbi__crea
	DD	$LN123@stbi__crea
	DD	$LN124@stbi__crea
	DD	$LN125@stbi__crea
	DD	$LN126@stbi__crea
	DD	$LN127@stbi__crea
$LN166@stbi__crea:
	DD	$LN128@stbi__crea
	DD	$LN129@stbi__crea
	DD	$LN130@stbi__crea
	DD	$LN131@stbi__crea
	DD	$LN132@stbi__crea
	DD	$LN133@stbi__crea
	DD	$LN134@stbi__crea
?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ENDP ; stbi__create_png_image_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
?stbi__paeth@@YAHHHH@Z PROC				; stbi__paeth
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4581
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4582
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
; Line 4583
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
; Line 4584
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
; Line 4585
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 4586
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR a$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN2@stbi__paet:
; Line 4587
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbi__paet
	mov	eax, DWORD PTR b$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN3@stbi__paet:
; Line 4588
	mov	eax, DWORD PTR c$[rsp]
$LN1@stbi__paet:
; Line 4589
	add	rsp, 56					; 00000038H
	ret	0
?stbi__paeth@@YAHHHH@Z ENDP				; stbi__paeth
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?stbi__check_png_header@@YAHPEAUstbi__context@@@Z PROC	; stbi__check_png_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4544
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4547
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__chec
$LN2@stbi__chec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__chec:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@stbi__chec
; Line 4548
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__chec
	lea	rcx, OFFSET FLAT:$SG89482
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__chec
$LN5@stbi__chec:
	jmp	SHORT $LN2@stbi__chec
$LN3@stbi__chec:
; Line 4549
	mov	eax, 1
$LN1@stbi__chec:
; Line 4550
	add	rsp, 56					; 00000038H
	ret	0
?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ENDP	; stbi__check_png_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
s$ = 64
?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z PROC ; stbi__get_chunk_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4536
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4538
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR c$[rsp], eax
; Line 4539
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR c$[rsp+4], eax
; Line 4540
	mov	rax, QWORD PTR c$[rsp]
; Line 4541
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z ENDP ; stbi__get_chunk_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
obuf$ = 56
olen$ = 64
exp$ = 72
parse_header$ = 80
?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z PROC	; stbi__do_zlib
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4433
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4434
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4435
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4436
	movsxd	rax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4437
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR exp$[rsp]
	mov	DWORD PTR [rax+48], ecx
; Line 4439
	mov	edx, DWORD PTR parse_header$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z ; stbi__parse_zlib
; Line 4440
	add	rsp, 40					; 00000028H
	ret	0
?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ENDP	; stbi__do_zlib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
final$ = 36
a$ = 64
parse_header$ = 72
?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z PROC		; stbi__parse_zlib
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4405
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4407
	cmp	DWORD PTR parse_header$[rsp], 0
	je	SHORT $LN5@stbi__pars
; Line 4408
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_zlib_header
	test	eax, eax
	jne	SHORT $LN6@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN6@stbi__pars:
$LN5@stbi__pars:
; Line 4409
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 4410
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], 0
$LN4@stbi__pars:
; Line 4412
	mov	edx, 1
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR final$[rsp], eax
; Line 4413
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR type$[rsp], eax
; Line 4414
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN7@stbi__pars
; Line 4415
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_uncompressed_block
	test	eax, eax
	jne	SHORT $LN9@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
	jmp	$LN8@stbi__pars
$LN7@stbi__pars:
; Line 4416
	cmp	DWORD PTR type$[rsp], 3
	jne	SHORT $LN10@stbi__pars
; Line 4417
	xor	eax, eax
	jmp	$LN1@stbi__pars
; Line 4418
	jmp	SHORT $LN11@stbi__pars
$LN10@stbi__pars:
; Line 4419
	cmp	DWORD PTR type$[rsp], 1
	jne	SHORT $LN12@stbi__pars
; Line 4421
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, 288				; 00000120H
	lea	rdx, OFFSET FLAT:?stbi__zdefault_length@@3QBEB
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN14@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN14@stbi__pars:
; Line 4422
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?stbi__zdefault_distance@@3QBEB
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN15@stbi__pars:
; Line 4423
	jmp	SHORT $LN13@stbi__pars
$LN12@stbi__pars:
; Line 4424
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z ; stbi__compute_huffman_codes
	test	eax, eax
	jne	SHORT $LN16@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN16@stbi__pars:
$LN13@stbi__pars:
; Line 4426
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_huffman_block
	test	eax, eax
	jne	SHORT $LN17@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN17@stbi__pars:
$LN11@stbi__pars:
$LN8@stbi__pars:
; Line 4428
	cmp	DWORD PTR final$[rsp], 0
	je	$LN4@stbi__pars
; Line 4429
	mov	eax, 1
$LN1@stbi__pars:
; Line 4430
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z ENDP		; stbi__parse_zlib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmf$ = 32
flg$ = 36
cm$ = 40
a$ = 64
?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z PROC	; stbi__parse_zlib_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4362
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4363
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR cmf$[rsp], eax
; Line 4364
	mov	eax, DWORD PTR cmf$[rsp]
	and	eax, 15
	mov	DWORD PTR cm$[rsp], eax
; Line 4366
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR flg$[rsp], eax
; Line 4367
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN2@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89339
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN2@stbi__pars:
; Line 4368
	imul	eax, DWORD PTR cmf$[rsp], 256		; 00000100H
	add	eax, DWORD PTR flg$[rsp]
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN3@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89341
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN3@stbi__pars:
; Line 4369
	mov	eax, DWORD PTR flg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89343
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN4@stbi__pars:
; Line 4370
	cmp	DWORD PTR cm$[rsp], 8
	je	SHORT $LN5@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89345
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN5@stbi__pars:
; Line 4372
	mov	eax, 1
$LN1@stbi__pars:
; Line 4373
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z ENDP	; stbi__parse_zlib_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
len$ = 36
header$ = 40
nlen$ = 44
a$ = 64
?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z PROC ; stbi__parse_uncompressed_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4333
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4336
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN6@stbi__pars
; Line 4337
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
$LN6@stbi__pars:
; Line 4339
	mov	DWORD PTR k$[rsp], 0
$LN2@stbi__pars:
; Line 4340
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jle	SHORT $LN3@stbi__pars
; Line 4341
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4342
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4343
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4344
	jmp	SHORT $LN2@stbi__pars
$LN3@stbi__pars:
; Line 4345
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jge	SHORT $LN7@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89325
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN7@stbi__pars:
$LN4@stbi__pars:
; Line 4347
	cmp	DWORD PTR k$[rsp], 4
	jge	SHORT $LN5@stbi__pars
; Line 4348
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN4@stbi__pars
$LN5@stbi__pars:
; Line 4349
	mov	eax, 1
	imul	rax, rax, 1
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 4350
	mov	eax, 1
	imul	rax, rax, 3
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR nlen$[rsp], eax
; Line 4351
	mov	eax, DWORD PTR len$[rsp]
	xor	eax, 65535				; 0000ffffH
	cmp	DWORD PTR nlen$[rsp], eax
	je	SHORT $LN8@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89327
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN8@stbi__pars:
; Line 4352
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jbe	SHORT $LN9@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89329
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4353
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN10@stbi__pars
; Line 4354
	mov	r8d, DWORD PTR len$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN11@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN11@stbi__pars:
$LN10@stbi__pars:
; Line 4355
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memcpy
; Line 4356
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 4357
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4358
	mov	eax, 1
$LN1@stbi__pars:
; Line 4359
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z ENDP ; stbi__parse_uncompressed_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
fill$2 = 36
n$ = 40
i$ = 44
ntot$ = 48
hlit$ = 52
hdist$ = 56
hclen$ = 60
s$3 = 64
tv175 = 72
z_codelength$ = 80
codelength_sizes$ = 2112
lencodes$ = 2144
__$ArrayPad$ = 2608
a$ = 2640
?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z PROC ; stbi__compute_huffman_codes
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2632				; 00000a48H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4290
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 257				; 00000101H
	mov	DWORD PTR hlit$[rsp], eax
; Line 4291
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	inc	eax
	mov	DWORD PTR hdist$[rsp], eax
; Line 4292
	mov	edx, 4
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 4
	mov	DWORD PTR hclen$[rsp], eax
; Line 4293
	mov	eax, DWORD PTR hdist$[rsp]
	mov	ecx, DWORD PTR hlit$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ntot$[rsp], eax
; Line 4295
	mov	r8d, 19
	xor	edx, edx
	lea	rcx, QWORD PTR codelength_sizes$[rsp]
	call	memset
; Line 4296
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR hclen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__comp
; Line 4297
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR s$3[rsp], eax
; Line 4298
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR s$3[rsp]
	mov	BYTE PTR codelength_sizes$[rsp+rax], cl
; Line 4299
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4300
	mov	r8d, 19
	lea	rdx, QWORD PTR codelength_sizes$[rsp]
	lea	rcx, QWORD PTR z_codelength$[rsp]
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN7@stbi__comp
	xor	eax, eax
	jmp	$LN1@stbi__comp
$LN7@stbi__comp:
; Line 4302
	mov	DWORD PTR n$[rsp], 0
$LN5@stbi__comp:
; Line 4303
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN6@stbi__comp
; Line 4304
	lea	rdx, QWORD PTR z_codelength$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR c$1[rsp], eax
; Line 4305
	cmp	DWORD PTR c$1[rsp], 0
	jl	SHORT $LN9@stbi__comp
	cmp	DWORD PTR c$1[rsp], 19
	jl	SHORT $LN8@stbi__comp
$LN9@stbi__comp:
	lea	rcx, OFFSET FLAT:$SG89293
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN8@stbi__comp:
; Line 4306
	cmp	DWORD PTR c$1[rsp], 16
	jge	SHORT $LN10@stbi__comp
; Line 4307
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR lencodes$[rsp+rax], cl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
	jmp	$LN11@stbi__comp
$LN10@stbi__comp:
; Line 4309
	mov	BYTE PTR fill$2[rsp], 0
; Line 4310
	cmp	DWORD PTR c$1[rsp], 16
	jne	SHORT $LN12@stbi__comp
; Line 4311
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
; Line 4312
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbi__comp
	lea	rcx, OFFSET FLAT:$SG89299
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN14@stbi__comp:
; Line 4313
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	cdqe
	movzx	eax, BYTE PTR lencodes$[rsp+rax]
	mov	BYTE PTR fill$2[rsp], al
	jmp	SHORT $LN13@stbi__comp
$LN12@stbi__comp:
; Line 4314
	cmp	DWORD PTR c$1[rsp], 17
	jne	SHORT $LN15@stbi__comp
; Line 4315
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN16@stbi__comp
$LN15@stbi__comp:
; Line 4316
	cmp	DWORD PTR c$1[rsp], 18
	jne	SHORT $LN17@stbi__comp
; Line 4317
	mov	edx, 7
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 11
	mov	DWORD PTR c$1[rsp], eax
; Line 4318
	jmp	SHORT $LN18@stbi__comp
$LN17@stbi__comp:
; Line 4319
	lea	rcx, OFFSET FLAT:$SG89304
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN18@stbi__comp:
$LN16@stbi__comp:
$LN13@stbi__comp:
; Line 4321
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR ntot$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR c$1[rsp]
	jge	SHORT $LN19@stbi__comp
	lea	rcx, OFFSET FLAT:$SG89306
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN19@stbi__comp:
; Line 4322
	movsxd	rax, DWORD PTR c$1[rsp]
	movzx	ecx, BYTE PTR fill$2[rsp]
	movsxd	rdx, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp+rdx]
	mov	QWORD PTR tv175[rsp], rdx
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv175[rsp]
	mov	rcx, rax
	call	memset
; Line 4323
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__comp:
; Line 4325
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
; Line 4326
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN20@stbi__comp
	lea	rcx, OFFSET FLAT:$SG89308
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__comp
$LN20@stbi__comp:
; Line 4327
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, DWORD PTR hlit$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp]
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN21@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN21@stbi__comp:
; Line 4328
	movsxd	rax, DWORD PTR hlit$[rsp]
	lea	rax, QWORD PTR lencodes$[rsp+rax]
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, 2072				; 00000818H
	mov	r8d, DWORD PTR hdist$[rsp]
	mov	rdx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN22@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN22@stbi__comp:
; Line 4329
	mov	eax, 1
$LN1@stbi__comp:
; Line 4330
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2632				; 00000a48H
	ret	0
?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z ENDP ; stbi__compute_huffman_codes
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 32
tv179 = 33
z$2 = 36
len$3 = 40
dist$4 = 44
zout$ = 48
p$5 = 56
a$ = 80
?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z PROC	; stbi__parse_huffman_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4241
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4242
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN2@stbi__pars:
; Line 4244
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4245
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jge	SHORT $LN11@stbi__pars
; Line 4246
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN13@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89250
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN13@stbi__pars:
; Line 4247
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+40]
	cmp	QWORD PTR zout$[rsp], rax
	jb	SHORT $LN14@stbi__pars
; Line 4248
	mov	r8d, 1
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN15@stbi__pars:
; Line 4249
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN14@stbi__pars:
; Line 4251
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR z$2[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
; Line 4252
	jmp	$LN12@stbi__pars
$LN11@stbi__pars:
; Line 4255
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jne	SHORT $LN16@stbi__pars
; Line 4256
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4257
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN16@stbi__pars:
; Line 4259
	mov	eax, DWORD PTR z$2[rsp]
	sub	eax, 257				; 00000101H
	mov	DWORD PTR z$2[rsp], eax
; Line 4260
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_base@@3QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR len$3[rsp], eax
; Line 4261
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_extra@@3QBHB
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN17@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_extra@@3QBHB
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	ecx, DWORD PTR len$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
$LN17@stbi__pars:
; Line 4262
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4263
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN18@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89256
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN18@stbi__pars:
; Line 4264
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_base@@3QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR dist$4[rsp], eax
; Line 4265
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_extra@@3QBHB
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN19@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_extra@@3QBHB
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	ecx, DWORD PTR dist$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dist$4[rsp], eax
$LN19@stbi__pars:
; Line 4266
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR dist$4[rsp]
	cmp	rax, rcx
	jge	SHORT $LN20@stbi__pars
	lea	rcx, OFFSET FLAT:$SG89259
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN20@stbi__pars:
; Line 4267
	movsxd	rax, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN21@stbi__pars
; Line 4268
	mov	r8d, DWORD PTR len$3[rsp]
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN22@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
; Line 4269
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN21@stbi__pars:
; Line 4271
	movsxd	rax, DWORD PTR dist$4[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$5[rsp], rax
; Line 4272
	cmp	DWORD PTR dist$4[rsp], 1
	jne	SHORT $LN23@stbi__pars
; Line 4273
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR v$1[rsp], al
; Line 4274
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN25@stbi__pars
$LN7@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR v$1[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN7@stbi__pars
$LN25@stbi__pars:
; Line 4275
	jmp	SHORT $LN24@stbi__pars
$LN23@stbi__pars:
; Line 4276
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN26@stbi__pars
$LN10@stbi__pars:
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv179[rsp], al
	mov	rax, QWORD PTR p$5[rsp]
	inc	rax
	mov	QWORD PTR p$5[rsp], rax
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR tv179[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN10@stbi__pars
$LN26@stbi__pars:
$LN24@stbi__pars:
$LN12@stbi__pars:
; Line 4279
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 4280
	add	rsp, 72					; 00000048H
	ret	0
?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z ENDP	; stbi__parse_huffman_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
limit$ = 32
cur$ = 36
old_limit$ = 40
q$ = 48
z$ = 80
zout$ = 88
n$ = 96
?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z PROC		; stbi__zexpand
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4205
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4208
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4209
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG89216
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zexp
$LN4@stbi__zexp:
; Line 4210
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	DWORD PTR cur$[rsp], eax
; Line 4211
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+40]
	sub	rax, rcx
	mov	DWORD PTR old_limit$[rsp], eax
	mov	eax, DWORD PTR old_limit$[rsp]
	mov	DWORD PTR limit$[rsp], eax
; Line 4212
	mov	eax, -1					; ffffffffH
	sub	eax, DWORD PTR cur$[rsp]
	cmp	eax, DWORD PTR n$[rsp]
	jae	SHORT $LN5@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG89218
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zexp
$LN5@stbi__zexp:
$LN2@stbi__zexp:
; Line 4213
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR cur$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR limit$[rsp]
	jbe	SHORT $LN3@stbi__zexp
; Line 4214
	cmp	DWORD PTR limit$[rsp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG89220
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN6@stbi__zexp:
; Line 4215
	mov	eax, DWORD PTR limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR limit$[rsp], eax
; Line 4216
	jmp	SHORT $LN2@stbi__zexp
$LN3@stbi__zexp:
; Line 4217
	mov	eax, DWORD PTR limit$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	realloc
	mov	QWORD PTR q$[rsp], rax
; Line 4219
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG89222
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN7@stbi__zexp:
; Line 4220
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4221
	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4222
	mov	eax, DWORD PTR limit$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4223
	mov	eax, 1
$LN1@stbi__zexp:
; Line 4224
	add	rsp, 72					; 00000048H
	ret	0
?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ENDP		; stbi__zexpand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
s$ = 36
tv132 = 40
a$ = 64
z$ = 72
?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z PROC ; stbi__zhuffman_decode
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4186
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4188
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 16
	jge	SHORT $LN2@stbi__zhuf
; Line 4189
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zhuf
; Line 4190
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4192
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z	; stbi__fill_bits
$LN2@stbi__zhuf:
; Line 4194
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 511				; 000001ffH
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR b$[rsp], eax
; Line 4195
	cmp	DWORD PTR b$[rsp], 0
	je	SHORT $LN4@stbi__zhuf
; Line 4196
	mov	eax, DWORD PTR b$[rsp]
	sar	eax, 9
	mov	DWORD PTR s$[rsp], eax
; Line 4197
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv132[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv132[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4198
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4199
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 511				; 000001ffH
	jmp	SHORT $LN1@stbi__zhuf
$LN4@stbi__zhuf:
; Line 4201
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode_slowpath
$LN1@stbi__zhuf:
; Line 4202
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ENDP ; stbi__zhuffman_decode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
b$ = 36
k$ = 40
tv158 = 48
a$ = 80
z$ = 88
?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z PROC ; stbi__zhuffman_decode_slowpath
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4171
	mov	edx, 16
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+20]
	call	?stbi__bit_reverse@@YAHHH@Z		; stbi__bit_reverse
	mov	DWORD PTR k$[rsp], eax
; Line 4172
	mov	DWORD PTR s$[rsp], 10
	jmp	SHORT $LN4@stbi__zhuf
$LN2@stbi__zhuf:
	mov	eax, DWORD PTR s$[rsp]
	inc	eax
	mov	DWORD PTR s$[rsp], eax
$LN4@stbi__zhuf:
; Line 4173
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1056]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN5@stbi__zhuf
; Line 4174
	jmp	SHORT $LN3@stbi__zhuf
$LN5@stbi__zhuf:
	jmp	SHORT $LN2@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4175
	cmp	DWORD PTR s$[rsp], 16
	jl	SHORT $LN6@stbi__zhuf
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN6@stbi__zhuf:
; Line 4177
	mov	eax, 16
	sub	eax, DWORD PTR s$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR k$[rsp]
	sar	eax, cl
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 4178
	cmp	DWORD PTR b$[rsp], 288			; 00000120H
	jl	SHORT $LN7@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN7@stbi__zhuf:
; Line 4179
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1156]
	cmp	eax, DWORD PTR s$[rsp]
	je	SHORT $LN8@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN8@stbi__zhuf:
; Line 4180
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv158[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv158[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4181
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4182
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+1444]
$LN1@stbi__zhuf:
; Line 4183
	add	rsp, 72					; 00000048H
	ret	0
?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ENDP ; stbi__zhuffman_decode_slowpath
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
k$ = 36
tv89 = 40
z$ = 64
n$ = 72
?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z PROC		; stbi__zreceive
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4157
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4159
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jge	SHORT $LN2@stbi__zrec
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z	; stbi__fill_bits
$LN2@stbi__zrec:
; Line 4160
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv83[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4161
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR tv89[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv89[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4162
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4163
	mov	eax, DWORD PTR k$[rsp]
; Line 4164
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z ENDP		; stbi__zreceive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = 32
tv76 = 36
tv78 = 40
tv84 = 44
tv82 = 48
z$ = 80
?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z PROC		; stbi__fill_bits
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4145
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN4@stbi__fill:
; Line 4147
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, 1
	mov	DWORD PTR tv131[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv131[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+20], eax
	jb	SHORT $LN5@stbi__fill
; Line 4148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 4149
	jmp	SHORT $LN1@stbi__fill
$LN5@stbi__fill:
; Line 4151
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR tv78[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv78[rsp]
	shl	eax, cl
	mov	DWORD PTR tv84[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR tv82[rsp], eax
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR tv82[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4152
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, 8
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4153
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+16], 24
	jle	$LN4@stbi__fill
$LN1@stbi__fill:
; Line 4154
	add	rsp, 72					; 00000048H
	ret	0
?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z ENDP		; stbi__fill_bits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
z$ = 64
?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z PROC		; stbi__zget8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4140
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4141
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zget
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@stbi__zget
$LN3@stbi__zget:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx], rax
$LN4@stbi__zget:
	movzx	eax, BYTE PTR tv73[rsp]
; Line 4142
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z ENDP		; stbi__zget8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
z$ = 32
?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z PROC			; stbi__zeof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4135
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4136
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax], rcx
	jb	SHORT $LN3@stbi__zeof
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__zeof
$LN3@stbi__zeof:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__zeof:
	mov	eax, DWORD PTR tv67[rsp]
; Line 4137
	add	rsp, 24
	ret	0
?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z ENDP			; stbi__zeof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$1 = 36
code$ = 40
j$2 = 44
fastv$3 = 48
k$ = 52
c$4 = 56
tv288 = 60
sizes$ = 64
next_code$ = 144
__$ArrayPad$ = 208
z$ = 240
sizelist$ = 248
num$ = 256
?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z PROC ; stbi__zbuild_huffman
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4068
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4069
	mov	DWORD PTR k$[rsp], 0
; Line 4073
	mov	r8d, 68					; 00000044H
	xor	edx, edx
	lea	rcx, QWORD PTR sizes$[rsp]
	call	memset
; Line 4074
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1024				; 00000400H
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 4075
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__zbui
$LN2@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__zbui
; Line 4076
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR sizelist$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR sizes$[rsp+rcx*4], eax
	jmp	SHORT $LN2@stbi__zbui
$LN3@stbi__zbui:
; Line 4077
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR sizes$[rsp+rax], 0
; Line 4078
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN7@stbi__zbui
$LN5@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@stbi__zbui
; Line 4079
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	DWORD PTR sizes$[rsp+rax*4], ecx
	jle	SHORT $LN16@stbi__zbui
; Line 4080
	lea	rcx, OFFSET FLAT:$SG89128
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zbui
$LN16@stbi__zbui:
	jmp	SHORT $LN5@stbi__zbui
$LN6@stbi__zbui:
; Line 4081
	mov	DWORD PTR code$[rsp], 0
; Line 4082
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN10@stbi__zbui
$LN8@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	$LN9@stbi__zbui
; Line 4083
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR code$[rsp]
	mov	DWORD PTR next_code$[rsp+rax*4], ecx
; Line 4084
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+1024], dx
; Line 4085
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR k$[rsp]
	mov	WORD PTR [rcx+rax*2+1124], dx
; Line 4086
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR code$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$[rsp], eax
; Line 4087
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR sizes$[rsp+rax*4], 0
	je	SHORT $LN17@stbi__zbui
; Line 4088
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN18@stbi__zbui
	lea	rcx, OFFSET FLAT:$SG89131
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zbui
$LN18@stbi__zbui:
$LN17@stbi__zbui:
; Line 4089
	mov	eax, 16
	sub	eax, DWORD PTR i$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1056], eax
; Line 4090
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 4091
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4092
	jmp	$LN8@stbi__zbui
$LN9@stbi__zbui:
; Line 4093
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+rax+1056], 65536		; 00010000H
; Line 4094
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__zbui
$LN11@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN12@stbi__zbui
; Line 4095
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR s$1[rsp], eax
; Line 4096
	cmp	DWORD PTR s$1[rsp], 0
	je	$LN19@stbi__zbui
; Line 4097
	movsxd	rax, DWORD PTR s$1[rsp]
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR c$4[rsp], eax
; Line 4098
	mov	eax, DWORD PTR s$1[rsp]
	shl	eax, 9
	or	eax, DWORD PTR i$[rsp]
	mov	WORD PTR fastv$3[rsp], ax
; Line 4099
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR s$1[rsp]
	mov	BYTE PTR [rcx+rax+1156], dl
; Line 4100
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR i$[rsp]
	mov	WORD PTR [rcx+rax*2+1444], dx
; Line 4101
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN20@stbi__zbui
; Line 4102
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	edx, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR next_code$[rsp+rax*4]
	call	?stbi__bit_reverse@@YAHHH@Z		; stbi__bit_reverse
	mov	DWORD PTR j$2[rsp], eax
$LN14@stbi__zbui:
; Line 4103
	cmp	DWORD PTR j$2[rsp], 512			; 00000200H
	jge	SHORT $LN15@stbi__zbui
; Line 4104
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR fastv$3[rsp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 4105
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv288[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv288[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR j$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rsp], eax
; Line 4106
	jmp	SHORT $LN14@stbi__zbui
$LN15@stbi__zbui:
$LN20@stbi__zbui:
; Line 4108
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	DWORD PTR next_code$[rsp+rcx*4], eax
$LN19@stbi__zbui:
; Line 4110
	jmp	$LN11@stbi__zbui
$LN12@stbi__zbui:
; Line 4111
	mov	eax, 1
$LN1@stbi__zbui:
; Line 4112
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ENDP ; stbi__zbuild_huffman
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
bits$ = 56
?stbi__bit_reverse@@YAHHH@Z PROC			; stbi__bit_reverse
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4060
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4061
	cmp	DWORD PTR bits$[rsp], 16
	jle	SHORT $LN3@stbi__bit_
	mov	r8d, 4061				; 00000fddH
	lea	rdx, OFFSET FLAT:$SG89092
	lea	rcx, OFFSET FLAT:$SG89093
	call	_wassert
	xor	eax, eax
$LN3@stbi__bit_:
; Line 4064
	mov	ecx, DWORD PTR v$[rsp]
	call	?stbi__bitreverse16@@YAHH@Z		; stbi__bitreverse16
	mov	ecx, 16
	sub	ecx, DWORD PTR bits$[rsp]
	sar	eax, cl
; Line 4065
	add	rsp, 40					; 00000028H
	ret	0
?stbi__bit_reverse@@YAHHH@Z ENDP			; stbi__bit_reverse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
?stbi__bitreverse16@@YAHH@Z PROC			; stbi__bitreverse16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4051
	mov	DWORD PTR [rsp+8], ecx
; Line 4052
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 43690				; 0000aaaaH
	sar	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 21845				; 00005555H
	shl	ecx, 1
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4053
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 52428				; 0000ccccH
	sar	eax, 2
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 13107				; 00003333H
	shl	ecx, 2
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4054
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 61680				; 0000f0f0H
	sar	eax, 4
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 3855				; 00000f0fH
	shl	ecx, 4
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4055
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4056
	mov	eax, DWORD PTR n$[rsp]
; Line 4057
	ret	0
?stbi__bitreverse16@@YAHH@Z ENDP			; stbi__bitreverse16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
j$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z PROC	; stbi__jpeg_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4001
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4002
	mov	edx, 2
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN2@stbi__jpeg
; Line 4003
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 4004
	xor	eax, eax
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4006
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__jpeg:
; Line 4007
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__jpeg:
; Line 4008
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN7@stbi__jpeg
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN8@stbi__jpeg
$LN7@stbi__jpeg:
	mov	DWORD PTR tv80[rsp], 1
$LN8@stbi__jpeg:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__jpeg:
; Line 4009
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 4010
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z ENDP	; stbi__jpeg_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$2 = 56
k$3 = 64
m$4 = 68
m$5 = 69
m$6 = 70
n$ = 72
r$7 = 80
r$8 = 88
b$9 = 96
g$10 = 97
r$11 = 98
j$12 = 100
decode_n$ = 104
is_rgb$ = 108
tv92 = 112
tv160 = 116
tv234 = 120
tv255 = 124
y_bot$13 = 128
tv289 = 132
tv297 = 136
tv709 = 140
tv71 = 144
tv80 = 148
tv82 = 152
y$14 = 160
tv641 = 168
tv671 = 172
tv284 = 176
tv282 = 180
tv531 = 184
tv560 = 188
output$15 = 192
tv268 = 200
tv273 = 208
y$16 = 216
tv166 = 224
tv174 = 232
tv286 = 240
tv361 = 248
tv426 = 256
tv482 = 264
coutput$17 = 272
res_comp$18 = 304
__$ArrayPad$ = 496
z$ = 528
out_x$ = 536
out_y$ = 544
comp$ = 552
req_comp$ = 560
?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z PROC	; load_jpeg_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3812
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 520				; 00000208H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3814
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rax+8], 0
; Line 3817
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN42@load_jpeg_
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN41@load_jpeg_
$LN42@load_jpeg_:
	lea	rcx, OFFSET FLAT:$SG88975
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN83@load_jpeg_
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN84@load_jpeg_
$LN83@load_jpeg_:
	mov	DWORD PTR tv71[rsp], 0
$LN84@load_jpeg_:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	$LN1@load_jpeg_
$LN41@load_jpeg_:
; Line 3820
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z ; stbi__decode_jpeg_image
	test	eax, eax
	jne	SHORT $LN43@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN43@load_jpeg_:
; Line 3823
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN87@load_jpeg_
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN88@load_jpeg_
$LN87@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN85@load_jpeg_
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN86@load_jpeg_
$LN85@load_jpeg_:
	mov	DWORD PTR tv80[rsp], 1
$LN86@load_jpeg_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN88@load_jpeg_:
	mov	eax, DWORD PTR tv82[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 3825
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN91@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18512], 3
	je	SHORT $LN90@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	SHORT $LN89@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18504], 0
	jne	SHORT $LN91@load_jpeg_
$LN90@load_jpeg_:
	mov	DWORD PTR tv92[rsp], 1
	jmp	SHORT $LN92@load_jpeg_
$LN91@load_jpeg_:
$LN89@load_jpeg_:
	mov	DWORD PTR tv92[rsp], 0
$LN92@load_jpeg_:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR is_rgb$[rsp], eax
; Line 3827
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR n$[rsp], 3
	jge	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR is_rgb$[rsp], 0
	jne	SHORT $LN44@load_jpeg_
; Line 3828
	mov	DWORD PTR decode_n$[rsp], 1
	jmp	SHORT $LN45@load_jpeg_
$LN44@load_jpeg_:
; Line 3830
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR decode_n$[rsp], eax
$LN45@load_jpeg_:
; Line 3834
	cmp	DWORD PTR decode_n$[rsp], 0
	jg	SHORT $LN46@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN46@load_jpeg_:
; Line 3841
	mov	QWORD PTR coutput$17[rsp], 0
	mov	QWORD PTR coutput$17[rsp+8], 0
	mov	QWORD PTR coutput$17[rsp+16], 0
	mov	QWORD PTR coutput$17[rsp+24], 0
; Line 3845
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN4@load_jpeg_
$LN2@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN4@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN3@load_jpeg_
; Line 3846
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$7[rsp], rax
; Line 3850
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	add	eax, 3
	mov	eax, eax
	mov	ecx, eax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	movsxd	rcx, DWORD PTR k$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18152], rax
; Line 3851
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	jne	SHORT $LN47@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG88981
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN93@load_jpeg_
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN94@load_jpeg_
$LN93@load_jpeg_:
	mov	DWORD PTR tv160[rsp], 0
$LN94@load_jpeg_:
	movsxd	rax, DWORD PTR tv160[rsp]
	jmp	$LN1@load_jpeg_
$LN47@load_jpeg_:
; Line 3853
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv166[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18056]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv166[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 3854
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv174[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18060]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv174[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 3855
	mov	rax, QWORD PTR r$7[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 3856
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR r$7[rsp]
	div	DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 3857
	mov	rax, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 3858
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18128]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3860
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?resample_row_1@@YAPEAEPEAE00HH@Z ; resample_row_1
	mov	QWORD PTR [rax], rcx
	jmp	$LN49@load_jpeg_
$LN48@load_jpeg_:
; Line 3861
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_v_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN51@load_jpeg_
$LN50@load_jpeg_:
; Line 3862
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_h_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN53@load_jpeg_
$LN52@load_jpeg_:
; Line 3863
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+18560]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN55@load_jpeg_
$LN54@load_jpeg_:
; Line 3864
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z ; stbi__resample_row_generic
	mov	QWORD PTR [rax], rcx
$LN55@load_jpeg_:
$LN53@load_jpeg_:
$LN51@load_jpeg_:
$LN49@load_jpeg_:
; Line 3865
	jmp	$LN2@load_jpeg_
$LN3@load_jpeg_:
; Line 3868
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	r9d, 1
	mov	r8d, DWORD PTR [rax+4]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, DWORD PTR n$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR output$15[rsp], rax
; Line 3869
	cmp	QWORD PTR output$15[rsp], 0
	jne	SHORT $LN56@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG88991
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN95@load_jpeg_
	mov	DWORD PTR tv234[rsp], 0
	jmp	SHORT $LN96@load_jpeg_
$LN95@load_jpeg_:
	mov	DWORD PTR tv234[rsp], 0
$LN96@load_jpeg_:
	movsxd	rax, DWORD PTR tv234[rsp]
	jmp	$LN1@load_jpeg_
$LN56@load_jpeg_:
; Line 3872
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN7@load_jpeg_
$LN5@load_jpeg_:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN7@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$12[rsp], eax
	jae	$LN6@load_jpeg_
; Line 3873
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR n$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR j$12[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR output$15[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3874
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN10@load_jpeg_
$LN8@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN10@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN9@load_jpeg_
; Line 3875
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$8[rsp], rax
; Line 3876
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$8[rsp]
	cmp	DWORD PTR [rcx+36], eax
	jl	SHORT $LN97@load_jpeg_
	mov	DWORD PTR tv255[rsp], 1
	jmp	SHORT $LN98@load_jpeg_
$LN97@load_jpeg_:
	mov	DWORD PTR tv255[rsp], 0
$LN98@load_jpeg_:
	mov	eax, DWORD PTR tv255[rsp]
	mov	DWORD PTR y_bot$13[rsp], eax
; Line 3877
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv286[rsp], rax
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR tv284[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR tv282[rsp], eax
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN99@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv268[rsp], rax
	jmp	SHORT $LN100@load_jpeg_
$LN99@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv268[rsp], rax
$LN100@load_jpeg_:
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN101@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv273[rsp], rax
	jmp	SHORT $LN102@load_jpeg_
$LN101@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv273[rsp], rax
$LN102@load_jpeg_:
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	ecx, DWORD PTR tv284[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR tv282[rsp]
	mov	r8, QWORD PTR tv268[rsp]
	mov	rdx, QWORD PTR tv273[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	call	QWORD PTR tv286[rsp]
	movsxd	rcx, DWORD PTR k$3[rsp]
	mov	QWORD PTR coutput$17[rsp+rcx*8], rax
; Line 3881
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	DWORD PTR tv289[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv289[rsp]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR tv289[rsp], eax
	jl	$LN57@load_jpeg_
; Line 3882
	mov	rax, QWORD PTR r$8[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 3883
	mov	rax, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3884
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	DWORD PTR tv297[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv297[rsp]
	mov	DWORD PTR [rax+40], ecx
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	cmp	DWORD PTR tv297[rsp], eax
	jge	SHORT $LN58@load_jpeg_
; Line 3885
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18116]
	mov	rcx, QWORD PTR r$8[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN58@load_jpeg_:
$LN57@load_jpeg_:
; Line 3887
	jmp	$LN8@load_jpeg_
$LN9@load_jpeg_:
; Line 3888
	cmp	DWORD PTR n$[rsp], 3
	jl	$LN59@load_jpeg_
; Line 3889
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$14[rsp], rax
; Line 3890
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	$LN61@load_jpeg_
; Line 3891
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN63@load_jpeg_
; Line 3892
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@load_jpeg_
$LN11@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN12@load_jpeg_
; Line 3893
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3894
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3895
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3896
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3897
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3898
	jmp	$LN11@load_jpeg_
$LN12@load_jpeg_:
; Line 3899
	jmp	SHORT $LN64@load_jpeg_
$LN63@load_jpeg_:
; Line 3900
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv361[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv361[rsp]
$LN64@load_jpeg_:
; Line 3901
	jmp	$LN62@load_jpeg_
$LN61@load_jpeg_:
; Line 3902
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN65@load_jpeg_
; Line 3903
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN67@load_jpeg_
; Line 3904
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@load_jpeg_
$LN14@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN15@load_jpeg_
; Line 3905
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$4[rsp], al
; Line 3906
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3907
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3908
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3909
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3910
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3911
	jmp	$LN14@load_jpeg_
$LN15@load_jpeg_:
; Line 3912
	jmp	$LN68@load_jpeg_
$LN67@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN69@load_jpeg_
; Line 3913
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv426[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv426[rsp]
; Line 3914
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN19@load_jpeg_
$LN17@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN19@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN18@load_jpeg_
; Line 3915
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$5[rsp], al
; Line 3916
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3917
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3918
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3919
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3920
	jmp	$LN17@load_jpeg_
$LN18@load_jpeg_:
; Line 3921
	jmp	SHORT $LN70@load_jpeg_
$LN69@load_jpeg_:
; Line 3922
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv482[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv482[rsp]
$LN70@load_jpeg_:
$LN68@load_jpeg_:
; Line 3924
	jmp	$LN66@load_jpeg_
$LN65@load_jpeg_:
; Line 3925
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN22@load_jpeg_
$LN20@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN22@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN21@load_jpeg_
; Line 3926
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3927
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3928
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3929
	jmp	$LN20@load_jpeg_
$LN21@load_jpeg_:
$LN66@load_jpeg_:
$LN62@load_jpeg_:
; Line 3930
	jmp	$LN60@load_jpeg_
$LN59@load_jpeg_:
; Line 3931
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN71@load_jpeg_
; Line 3932
	cmp	DWORD PTR n$[rsp], 1
	jne	$LN73@load_jpeg_
; Line 3933
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN25@load_jpeg_
$LN23@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN25@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN24@load_jpeg_
; Line 3934
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv531[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv531[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	$LN23@load_jpeg_
$LN24@load_jpeg_:
	jmp	$LN74@load_jpeg_
$LN73@load_jpeg_:
; Line 3936
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN28@load_jpeg_
$LN26@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	rax, QWORD PTR out$2[rsp]
	add	rax, 2
	mov	QWORD PTR out$2[rsp], rax
$LN28@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN27@load_jpeg_
; Line 3937
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv560[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv560[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3938
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3939
	jmp	$LN26@load_jpeg_
$LN27@load_jpeg_:
$LN74@load_jpeg_:
; Line 3940
	jmp	$LN72@load_jpeg_
$LN71@load_jpeg_:
; Line 3941
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN75@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN75@load_jpeg_
; Line 3942
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN31@load_jpeg_
$LN29@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN31@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN30@load_jpeg_
; Line 3943
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$6[rsp], al
; Line 3944
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR r$11[rsp], al
; Line 3945
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR g$10[rsp], al
; Line 3946
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR b$9[rsp], al
; Line 3947
	movzx	eax, BYTE PTR b$9[rsp]
	movzx	ecx, BYTE PTR g$10[rsp]
	movzx	edx, BYTE PTR r$11[rsp]
	mov	DWORD PTR tv641[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv641[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3948
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3949
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3950
	jmp	$LN29@load_jpeg_
$LN30@load_jpeg_:
; Line 3951
	jmp	$LN76@load_jpeg_
$LN75@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN77@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN77@load_jpeg_
; Line 3952
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN34@load_jpeg_
$LN32@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN34@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN33@load_jpeg_
; Line 3953
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	r8d, 255				; 000000ffH
	sub	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR tv671[rsp], edx
	movzx	edx, BYTE PTR [rax+rcx]
	mov	eax, DWORD PTR tv671[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3954
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3955
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3956
	jmp	$LN32@load_jpeg_
$LN33@load_jpeg_:
; Line 3957
	jmp	$LN78@load_jpeg_
$LN77@load_jpeg_:
; Line 3958
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$16[rsp], rax
; Line 3959
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN79@load_jpeg_
; Line 3960
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN37@load_jpeg_
$LN35@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN37@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN36@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@load_jpeg_
$LN36@load_jpeg_:
	jmp	SHORT $LN80@load_jpeg_
$LN79@load_jpeg_:
; Line 3962
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN40@load_jpeg_
$LN38@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN40@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN39@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rdx, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	mov	rax, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rax], 255			; 000000ffH
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	SHORT $LN38@load_jpeg_
$LN39@load_jpeg_:
$LN80@load_jpeg_:
$LN78@load_jpeg_:
$LN76@load_jpeg_:
$LN72@load_jpeg_:
$LN60@load_jpeg_:
; Line 3965
	jmp	$LN5@load_jpeg_
$LN6@load_jpeg_:
; Line 3966
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
; Line 3967
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 3968
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 3969
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN81@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN103@load_jpeg_
	mov	DWORD PTR tv709[rsp], 3
	jmp	SHORT $LN104@load_jpeg_
$LN103@load_jpeg_:
	mov	DWORD PTR tv709[rsp], 1
$LN104@load_jpeg_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv709[rsp]
	mov	DWORD PTR [rax], ecx
$LN81@load_jpeg_:
; Line 3970
	mov	rax, QWORD PTR output$15[rsp]
$LN1@load_jpeg_:
; Line 3972
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 520				; 00000208H
	ret	0
?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z ENDP	; load_jpeg_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
x$ = 32
y$ = 40
?stbi__blinn_8x8@@YAEEE@Z PROC				; stbi__blinn_8x8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3806
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 3807
	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	imul	eax, ecx
	add	eax, 128				; 00000080H
	mov	DWORD PTR t$[rsp], eax
; Line 3808
	mov	eax, DWORD PTR t$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	shr	eax, 8
; Line 3809
	add	rsp, 24
	ret	0
?stbi__blinn_8x8@@YAEEE@Z ENDP				; stbi__blinn_8x8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__cleanup_jpeg
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3790
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3791
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
; Line 3792
	add	rsp, 40					; 00000028H
	ret	0
?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__cleanup_jpeg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__setup_jpeg
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3768
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3769
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__idct_block@@YAXPEAEHQEAF@Z ; stbi__idct_block
	mov	QWORD PTR [rax+18544], rcx
; Line 3770
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z ; stbi__YCbCr_to_RGB_row
	mov	QWORD PTR [rax+18552], rcx
; Line 3771
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_hv_2
	mov	QWORD PTR [rax+18560], rcx
; Line 3774
	call	?stbi__sse2_available@@YAHXZ		; stbi__sse2_available
	test	eax, eax
	je	SHORT $LN2@stbi__setu
; Line 3775
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__idct_simd@@YAXPEAEHQEAF@Z ; stbi__idct_simd
	mov	QWORD PTR [rax+18544], rcx
; Line 3776
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z ; stbi__YCbCr_to_RGB_simd
	mov	QWORD PTR [rax+18552], rcx
; Line 3777
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z ; stbi__resample_row_hv_2_simd
	mov	QWORD PTR [rax+18560], rcx
$LN2@stbi__setu:
; Line 3786
	add	rsp, 40					; 00000028H
	ret	0
?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__setup_jpeg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
r$1 = 4
g$2 = 8
b$3 = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
yws$7 = 32
signflip$8 = 48
cbw$9 = 64
crw$10 = 80
brb$11 = 96
gxb$12 = 112
t0$13 = 128
t1$14 = 144
$T15 = 160
$T16 = 176
$T17 = 192
$T18 = 208
$T19 = 224
$T20 = 240
$T21 = 256
$T22 = 272
$T23 = 288
$T24 = 304
cr_bytes$25 = 320
$T26 = 336
cb_bytes$27 = 352
$T28 = 368
y_bias$29 = 384
y_bytes$30 = 400
$T31 = 416
$T32 = 432
cr_biased$33 = 448
$T34 = 464
$T35 = 480
cb_biased$36 = 496
$T37 = 512
yw$38 = 528
$T39 = 544
cr_const0$40 = 560
$T41 = 576
cb_const0$42 = 592
$T43 = 608
cb_const1$44 = 624
$T45 = 640
cr_const1$46 = 656
$T47 = 672
cr0$48 = 688
$T49 = 704
cb0$50 = 720
$T51 = 736
cb1$52 = 752
$T53 = 768
gwt$54 = 784
cr1$55 = 800
$T56 = 816
rws$57 = 832
$T58 = 848
bws$59 = 864
$T60 = 880
gws$61 = 896
$T62 = 912
rw$63 = 928
bw$64 = 944
$T65 = 960
gw$66 = 976
xw$67 = 992
$T68 = 1008
$T69 = 1024
$T70 = 1040
$T71 = 1056
$T72 = 1072
o0$73 = 1088
o1$74 = 1104
out$ = 1136
y$ = 1144
pcb$ = 1152
pcr$ = 1160
count$ = 1168
step$ = 1176
?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z PROC	; stbi__YCbCr_to_RGB_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3633
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1128				; 00000468H
; Line 3634
	mov	DWORD PTR i$[rsp], 0
; Line 3640
	cmp	DWORD PTR step$[rsp], 4
	jne	$LN8@stbi__YCbC
; Line 3642
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR signflip$8[rsp], xmm0
; Line 3643
	movdqa	xmm0, XMMWORD PTR __xmm@166f166f166f166f166f166f166f166f
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR cr_const0$40[rsp], xmm0
; Line 3644
	movdqa	xmm0, XMMWORD PTR __xmm@f493f493f493f493f493f493f493f493
	movdqa	XMMWORD PTR $T17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[rsp]
	movdqa	XMMWORD PTR cr_const1$46[rsp], xmm0
; Line 3645
	movdqa	xmm0, XMMWORD PTR __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
	movdqa	XMMWORD PTR $T18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T18[rsp]
	movdqa	XMMWORD PTR cb_const0$42[rsp], xmm0
; Line 3646
	movdqa	xmm0, XMMWORD PTR __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR cb_const1$44[rsp], xmm0
; Line 3647
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR y_bias$29[rsp], xmm0
; Line 3648
	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR xw$67[rsp], xmm0
; Line 3650
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN3@stbi__YCbC
; Line 3652
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T22[rsp]
	movdqa	XMMWORD PTR y_bytes$30[rsp], xmm0
; Line 3653
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR cr_bytes$25[rsp], xmm0
; Line 3654
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T24[rsp]
	movdqa	XMMWORD PTR cb_bytes$27[rsp], xmm0
; Line 3655
	movdqa	xmm0, XMMWORD PTR cr_bytes$25[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR $T26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T26[rsp]
	movdqa	XMMWORD PTR cr_biased$33[rsp], xmm0
; Line 3656
	movdqa	xmm0, XMMWORD PTR cb_bytes$27[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR $T28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T28[rsp]
	movdqa	XMMWORD PTR cb_biased$36[rsp], xmm0
; Line 3659
	movdqa	xmm0, XMMWORD PTR y_bias$29[rsp]
	punpcklbw xmm0, XMMWORD PTR y_bytes$30[rsp]
	movdqa	XMMWORD PTR $T31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T31[rsp]
	movdqa	XMMWORD PTR yw$38[rsp], xmm0
; Line 3660
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T32[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T32[rsp]
	punpcklbw xmm0, XMMWORD PTR cr_biased$33[rsp]
	movdqa	XMMWORD PTR $T34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T34[rsp]
	movdqa	XMMWORD PTR crw$10[rsp], xmm0
; Line 3661
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T35[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T35[rsp]
	punpcklbw xmm0, XMMWORD PTR cb_biased$36[rsp]
	movdqa	XMMWORD PTR $T37[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T37[rsp]
	movdqa	XMMWORD PTR cbw$9[rsp], xmm0
; Line 3664
	movdqa	xmm0, XMMWORD PTR yw$38[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T39[rsp]
	movdqa	XMMWORD PTR yws$7[rsp], xmm0
; Line 3665
	movdqa	xmm0, XMMWORD PTR cr_const0$40[rsp]
	pmulhw	xmm0, XMMWORD PTR crw$10[rsp]
	movdqa	XMMWORD PTR $T41[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T41[rsp]
	movdqa	XMMWORD PTR cr0$48[rsp], xmm0
; Line 3666
	movdqa	xmm0, XMMWORD PTR cb_const0$42[rsp]
	pmulhw	xmm0, XMMWORD PTR cbw$9[rsp]
	movdqa	XMMWORD PTR $T43[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T43[rsp]
	movdqa	XMMWORD PTR cb0$50[rsp], xmm0
; Line 3667
	movdqa	xmm0, XMMWORD PTR cbw$9[rsp]
	pmulhw	xmm0, XMMWORD PTR cb_const1$44[rsp]
	movdqa	XMMWORD PTR $T45[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T45[rsp]
	movdqa	XMMWORD PTR cb1$52[rsp], xmm0
; Line 3668
	movdqa	xmm0, XMMWORD PTR crw$10[rsp]
	pmulhw	xmm0, XMMWORD PTR cr_const1$46[rsp]
	movdqa	XMMWORD PTR $T47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T47[rsp]
	movdqa	XMMWORD PTR cr1$55[rsp], xmm0
; Line 3669
	movdqa	xmm0, XMMWORD PTR cr0$48[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR $T49[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T49[rsp]
	movdqa	XMMWORD PTR rws$57[rsp], xmm0
; Line 3670
	movdqa	xmm0, XMMWORD PTR cb0$50[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR $T51[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T51[rsp]
	movdqa	XMMWORD PTR gwt$54[rsp], xmm0
; Line 3671
	movdqa	xmm0, XMMWORD PTR yws$7[rsp]
	paddw	xmm0, XMMWORD PTR cb1$52[rsp]
	movdqa	XMMWORD PTR $T53[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T53[rsp]
	movdqa	XMMWORD PTR bws$59[rsp], xmm0
; Line 3672
	movdqa	xmm0, XMMWORD PTR gwt$54[rsp]
	paddw	xmm0, XMMWORD PTR cr1$55[rsp]
	movdqa	XMMWORD PTR $T56[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T56[rsp]
	movdqa	XMMWORD PTR gws$61[rsp], xmm0
; Line 3675
	movdqa	xmm0, XMMWORD PTR rws$57[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR $T58[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T58[rsp]
	movdqa	XMMWORD PTR rw$63[rsp], xmm0
; Line 3676
	movdqa	xmm0, XMMWORD PTR bws$59[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR $T60[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T60[rsp]
	movdqa	XMMWORD PTR bw$64[rsp], xmm0
; Line 3677
	movdqa	xmm0, XMMWORD PTR gws$61[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR $T62[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T62[rsp]
	movdqa	XMMWORD PTR gw$66[rsp], xmm0
; Line 3680
	movdqa	xmm0, XMMWORD PTR rw$63[rsp]
	packuswb xmm0, XMMWORD PTR bw$64[rsp]
	movdqa	XMMWORD PTR $T65[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T65[rsp]
	movdqa	XMMWORD PTR brb$11[rsp], xmm0
; Line 3681
	movdqa	xmm0, XMMWORD PTR gw$66[rsp]
	packuswb xmm0, XMMWORD PTR xw$67[rsp]
	movdqa	XMMWORD PTR $T68[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T68[rsp]
	movdqa	XMMWORD PTR gxb$12[rsp], xmm0
; Line 3684
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpcklbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR $T69[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T69[rsp]
	movdqa	XMMWORD PTR t0$13[rsp], xmm0
; Line 3685
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpckhbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR $T70[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T70[rsp]
	movdqa	XMMWORD PTR t1$14[rsp], xmm0
; Line 3686
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpcklwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR $T71[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T71[rsp]
	movdqa	XMMWORD PTR o0$73[rsp], xmm0
; Line 3687
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpckhwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR $T72[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T72[rsp]
	movdqa	XMMWORD PTR o1$74[rsp], xmm0
; Line 3690
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR o0$73[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3691
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 16
	movdqa	xmm0, XMMWORD PTR o1$74[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3692
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR out$[rsp], rax
; Line 3693
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3743
	jmp	SHORT $LN7@stbi__YCbC
$LN5@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__YCbC
; Line 3744
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3746
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3747
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3748
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3749
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3750
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3751
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3752
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3753
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3754
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN9@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN10@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN11@stbi__YCbC
$LN10@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN11@stbi__YCbC:
$LN9@stbi__YCbC:
; Line 3755
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN12@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN13@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN14@stbi__YCbC
$LN13@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN14@stbi__YCbC:
$LN12@stbi__YCbC:
; Line 3756
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN15@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN16@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN17@stbi__YCbC
$LN16@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN17@stbi__YCbC:
$LN15@stbi__YCbC:
; Line 3757
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3758
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3759
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3760
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3761
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3762
	jmp	$LN5@stbi__YCbC
$LN6@stbi__YCbC:
; Line 3763
	add	rsp, 1128				; 00000468H
	ret	0
?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z ENDP	; stbi__YCbCr_to_RGB_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 0
g$2 = 4
b$3 = 8
i$ = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
out$ = 48
y$ = 56
pcb$ = 64
pcr$ = 72
count$ = 80
step$ = 88
?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z PROC		; stbi__YCbCr_to_RGB_row
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3607
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3609
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__YCbC
; Line 3610
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3612
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3613
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3614
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3615
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3616
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3617
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3618
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3619
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3620
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN5@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN6@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN7@stbi__YCbC
$LN6@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN7@stbi__YCbC:
$LN5@stbi__YCbC:
; Line 3621
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN8@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN9@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN10@stbi__YCbC
$LN9@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN10@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3622
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN11@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN12@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN13@stbi__YCbC
$LN12@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN13@stbi__YCbC:
$LN11@stbi__YCbC:
; Line 3623
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3624
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3625
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3626
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3627
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3628
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
; Line 3629
	add	rsp, 40					; 00000028H
	ret	0
?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z ENDP		; stbi__YCbCr_to_RGB_row
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
j$ = 4
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z PROC	; stbi__resample_row_generic
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3593
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3597
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3598
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR hs$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3599
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR hs$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbi__resa
$LN6@stbi__resa:
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3600
	mov	rax, QWORD PTR out$[rsp]
; Line 3601
	add	rsp, 24
	ret	0
?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z ENDP	; stbi__resample_row_generic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
t0$ = 8
tv78 = 12
curr$1 = 16
zero$2 = 32
nearw$3 = 48
curb$4 = 64
even$5 = 80
odd$6 = 96
$T7 = 112
$T8 = 128
$T9 = 144
farb$10 = 160
$T11 = 176
nearb$12 = 192
$T13 = 208
farw$14 = 224
$T15 = 240
$T16 = 256
nears$17 = 272
diff$18 = 288
$T19 = 304
$T20 = 320
$T21 = 336
prv0$22 = 352
$T23 = 368
nxt0$24 = 384
$T25 = 400
$T26 = 416
$T27 = 432
prev$28 = 448
$T29 = 464
next$30 = 480
$T31 = 496
curs$32 = 512
bias$33 = 528
$T34 = 544
prvd$35 = 560
$T36 = 576
nxtd$37 = 592
$T38 = 608
$T39 = 624
$T40 = 640
int0$41 = 656
$T42 = 672
int1$43 = 688
$T44 = 704
de0$45 = 720
de1$46 = 736
$T47 = 752
outv$48 = 768
out$ = 800
in_near$ = 808
in_far$ = 816
w$ = 824
hs$ = 832
?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z PROC	; stbi__resample_row_hv_2_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3477
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 792				; 00000318H
; Line 3479
	mov	DWORD PTR i$[rsp], 0
; Line 3481
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN8@stbi__resa
; Line 3482
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3483
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN8@stbi__resa:
; Line 3486
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3490
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	and	eax, -8
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__resa
; Line 3494
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T7[rsp]
	movdqa	XMMWORD PTR zero$2[rsp], xmm0
; Line 3495
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_far$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T8[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T8[rsp]
	movdqa	XMMWORD PTR farb$10[rsp], xmm0
; Line 3496
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T9[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T9[rsp]
	movdqa	XMMWORD PTR nearb$12[rsp], xmm0
; Line 3497
	movdqa	xmm0, XMMWORD PTR farb$10[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR $T11[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T11[rsp]
	movdqa	XMMWORD PTR farw$14[rsp], xmm0
; Line 3498
	movdqa	xmm0, XMMWORD PTR nearb$12[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR $T13[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[rsp]
	movdqa	XMMWORD PTR nearw$3[rsp], xmm0
; Line 3499
	movdqa	xmm0, XMMWORD PTR farw$14[rsp]
	psubw	xmm0, XMMWORD PTR nearw$3[rsp]
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR diff$18[rsp], xmm0
; Line 3500
	movdqa	xmm0, XMMWORD PTR nearw$3[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR nears$17[rsp], xmm0
; Line 3501
	movdqa	xmm0, XMMWORD PTR nears$17[rsp]
	paddw	xmm0, XMMWORD PTR diff$18[rsp]
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR curr$1[rsp], xmm0
; Line 3508
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR prv0$22[rsp], xmm0
; Line 3509
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psrldq	xmm0, 2
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR nxt0$24[rsp], xmm0
; Line 3510
	movdqa	xmm0, XMMWORD PTR prv0$22[rsp]
	pinsrw	xmm0, DWORD PTR t1$[rsp], 0
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR prev$28[rsp], xmm0
; Line 3511
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 8
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movdqa	xmm0, XMMWORD PTR nxt0$24[rsp]
	pinsrw	xmm0, eax, 7
	movdqa	XMMWORD PTR $T25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T25[rsp]
	movdqa	XMMWORD PTR next$30[rsp], xmm0
; Line 3517
	movdqa	xmm0, XMMWORD PTR __xmm@00080008000800080008000800080008
	movdqa	XMMWORD PTR $T26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T26[rsp]
	movdqa	XMMWORD PTR bias$33[rsp], xmm0
; Line 3518
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR $T27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T27[rsp]
	movdqa	XMMWORD PTR curs$32[rsp], xmm0
; Line 3519
	movdqa	xmm0, XMMWORD PTR prev$28[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR $T29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T29[rsp]
	movdqa	XMMWORD PTR prvd$35[rsp], xmm0
; Line 3520
	movdqa	xmm0, XMMWORD PTR next$30[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR $T31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T31[rsp]
	movdqa	XMMWORD PTR nxtd$37[rsp], xmm0
; Line 3521
	movdqa	xmm0, XMMWORD PTR curs$32[rsp]
	paddw	xmm0, XMMWORD PTR bias$33[rsp]
	movdqa	XMMWORD PTR $T34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T34[rsp]
	movdqa	XMMWORD PTR curb$4[rsp], xmm0
; Line 3522
	movdqa	xmm0, XMMWORD PTR prvd$35[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR $T36[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T36[rsp]
	movdqa	XMMWORD PTR even$5[rsp], xmm0
; Line 3523
	movdqa	xmm0, XMMWORD PTR nxtd$37[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR $T38[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T38[rsp]
	movdqa	XMMWORD PTR odd$6[rsp], xmm0
; Line 3526
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpcklwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR $T39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T39[rsp]
	movdqa	XMMWORD PTR int0$41[rsp], xmm0
; Line 3527
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpckhwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR $T40[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T40[rsp]
	movdqa	XMMWORD PTR int1$43[rsp], xmm0
; Line 3528
	movdqa	xmm0, XMMWORD PTR int0$41[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T42[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T42[rsp]
	movdqa	XMMWORD PTR de0$45[rsp], xmm0
; Line 3529
	movdqa	xmm0, XMMWORD PTR int1$43[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T44[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T44[rsp]
	movdqa	XMMWORD PTR de1$46[rsp], xmm0
; Line 3532
	movdqa	xmm0, XMMWORD PTR de0$45[rsp]
	packuswb xmm0, XMMWORD PTR de1$46[rsp]
	movdqa	XMMWORD PTR $T47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T47[rsp]
	movdqa	XMMWORD PTR outv$48[rsp], xmm0
; Line 3533
	mov	eax, DWORD PTR i$[rsp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movdqa	xmm0, XMMWORD PTR outv$48[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3571
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 7
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3572
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3574
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3575
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3576
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3578
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3579
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3580
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3581
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3582
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3583
	jmp	$LN5@stbi__resa
$LN6@stbi__resa:
; Line 3584
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3588
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3589
	add	rsp, 792				; 00000318H
	ret	0
?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z ENDP	; stbi__resample_row_hv_2_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
tv78 = 8
t0$ = 12
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_hv_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3452
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3455
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3456
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3457
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3460
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3461
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3462
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3463
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3464
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3465
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3466
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3467
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3468
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3472
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3473
	add	rsp, 24
	ret	0
?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_hv_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
n$1 = 4
input$ = 8
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_h_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3422
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3425
	mov	rax, QWORD PTR in_near$[rsp]
	mov	QWORD PTR input$[rsp], rax
; Line 3427
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3429
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3430
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3433
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3434
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3435
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3436
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	add	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 3437
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3438
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3439
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3440
	mov	eax, DWORD PTR w$[rsp]
	sub	eax, 2
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR w$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3441
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3446
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3447
	add	rsp, 24
	ret	0
?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_h_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_v_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3412
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3416
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3417
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3418
	mov	rax, QWORD PTR out$[rsp]
; Line 3419
	add	rsp, 24
	ret	0
?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_v_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 8
in_near$ = 16
in_far$ = 24
w$ = 32
hs$ = 40
?resample_row_1@@YAPEAEPEAE00HH@Z PROC			; resample_row_1
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3403
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 3408
	mov	rax, QWORD PTR in_near$[rsp]
; Line 3409
	ret	0
?resample_row_1@@YAPEAEPEAE00HH@Z ENDP			; resample_row_1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
x$1 = 36
Ld$2 = 40
NL$3 = 44
j$ = 64
?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z PROC	; stbi__decode_jpeg_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3356
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3358
	mov	DWORD PTR m$[rsp], 0
	jmp	SHORT $LN4@stbi__deco
$LN2@stbi__deco:
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
	cmp	DWORD PTR m$[rsp], 4
	jge	SHORT $LN3@stbi__deco
; Line 3359
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3360
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3361
	jmp	SHORT $LN2@stbi__deco
$LN3@stbi__deco:
; Line 3362
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18536], 0
; Line 3363
	xor	edx, edx
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN9@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN9@stbi__deco:
; Line 3364
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN5@stbi__deco:
; Line 3365
	cmp	DWORD PTR m$[rsp], 217			; 000000d9H
	je	$LN6@stbi__deco
; Line 3366
	cmp	DWORD PTR m$[rsp], 218			; 000000daH
	jne	$LN10@stbi__deco
; Line 3367
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z ; stbi__process_scan_header
	test	eax, eax
	jne	SHORT $LN12@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN12@stbi__deco:
; Line 3368
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z ; stbi__parse_entropy_coded_data
	test	eax, eax
	jne	SHORT $LN13@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN13@stbi__deco:
; Line 3369
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN14@stbi__deco
$LN7@stbi__deco:
; Line 3371
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
; Line 3372
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR x$1[rsp], eax
; Line 3373
	cmp	DWORD PTR x$1[rsp], 255			; 000000ffH
	jne	SHORT $LN15@stbi__deco
; Line 3374
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR j$[rsp]
	mov	BYTE PTR [rcx+18472], al
; Line 3375
	jmp	SHORT $LN8@stbi__deco
$LN15@stbi__deco:
; Line 3377
	jmp	SHORT $LN7@stbi__deco
$LN8@stbi__deco:
$LN14@stbi__deco:
; Line 3379
	jmp	SHORT $LN11@stbi__deco
$LN10@stbi__deco:
; Line 3380
	cmp	DWORD PTR m$[rsp], 220			; 000000dcH
	jne	SHORT $LN16@stbi__deco
; Line 3381
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Ld$2[rsp], eax
; Line 3382
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR NL$3[rsp], eax
; Line 3383
	cmp	DWORD PTR Ld$2[rsp], 4
	je	SHORT $LN18@stbi__deco
	lea	rcx, OFFSET FLAT:$SG88468
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN18@stbi__deco:
; Line 3384
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR NL$3[rsp], eax
	je	SHORT $LN19@stbi__deco
	lea	rcx, OFFSET FLAT:$SG88470
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN19@stbi__deco:
; Line 3385
	jmp	SHORT $LN17@stbi__deco
$LN16@stbi__deco:
; Line 3386
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_marker
	test	eax, eax
	jne	SHORT $LN20@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN20@stbi__deco:
$LN17@stbi__deco:
$LN11@stbi__deco:
; Line 3388
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3389
	jmp	$LN5@stbi__deco
$LN6@stbi__deco:
; Line 3390
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN21@stbi__deco
; Line 3391
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_finish
$LN21@stbi__deco:
; Line 3392
	mov	eax, 1
$LN1@stbi__deco:
; Line 3393
	add	rsp, 56					; 00000038H
	ret	0
?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z ENDP	; stbi__decode_jpeg_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
tv131 = 36
z$ = 64
scan$ = 72
?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__decode_jpeg_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3331
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3333
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 0
; Line 3334
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18508], -1
; Line 3335
	mov	rax, QWORD PTR z$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 3336
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3337
	cmp	DWORD PTR m$[rsp], 216			; 000000d8H
	je	SHORT $LN6@stbi__deco
	lea	rcx, OFFSET FLAT:$SG88438
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__deco
$LN6@stbi__deco:
; Line 3338
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN7@stbi__deco
	mov	eax, 1
	jmp	$LN1@stbi__deco
$LN7@stbi__deco:
; Line 3339
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN2@stbi__deco:
; Line 3340
	cmp	DWORD PTR m$[rsp], 192			; 000000c0H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 193			; 000000c1H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	je	SHORT $LN3@stbi__deco
; Line 3341
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_marker
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN8@stbi__deco:
; Line 3342
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
; Line 3343
	cmp	DWORD PTR m$[rsp], 255			; 000000ffH
	jne	SHORT $LN5@stbi__deco
; Line 3345
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__deco
	lea	rcx, OFFSET FLAT:$SG88442
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN9@stbi__deco:
; Line 3346
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3347
	jmp	SHORT $LN4@stbi__deco
$LN5@stbi__deco:
; Line 3348
	jmp	$LN2@stbi__deco
$LN3@stbi__deco:
; Line 3349
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	jne	SHORT $LN12@stbi__deco
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN13@stbi__deco
$LN12@stbi__deco:
	mov	DWORD PTR tv131[rsp], 0
$LN13@stbi__deco:
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv131[rsp]
	mov	DWORD PTR [rax+18480], ecx
; Line 3350
	mov	edx, DWORD PTR scan$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_frame_header
	test	eax, eax
	jne	SHORT $LN10@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN10@stbi__deco:
; Line 3351
	mov	eax, 1
$LN1@stbi__deco:
; Line 3352
	add	rsp, 56					; 00000038H
	ret	0
?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__decode_jpeg_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 40
h_max$ = 48
v_max$ = 52
c$ = 56
Lf$ = 60
q$ = 64
p$ = 68
tv285 = 72
tv294 = 80
z$ = 112
scan$ = 120
?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z PROC ; stbi__process_frame_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3230
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3231
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 3232
	mov	DWORD PTR h_max$[rsp], 1
	mov	DWORD PTR v_max$[rsp], 1
; Line 3233
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Lf$[rsp], eax
	cmp	DWORD PTR Lf$[rsp], 11
	jge	SHORT $LN17@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88390
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN17@stbi__proc:
; Line 3234
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR p$[rsp], eax
	cmp	DWORD PTR p$[rsp], 8
	je	SHORT $LN18@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88392
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN18@stbi__proc:
; Line 3235
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88394
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN19@stbi__proc:
; Line 3236
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN20@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88396
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN20@stbi__proc:
; Line 3237
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN21@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88398
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 3238
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN22@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88400
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN22@stbi__proc:
; Line 3239
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$[rsp], eax
; Line 3240
	cmp	DWORD PTR c$[rsp], 3
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 1
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 4
	je	SHORT $LN23@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88402
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN23@stbi__proc:
; Line 3241
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3242
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR c$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 3243
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
; Line 3244
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3245
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 3247
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax+8], 3
	add	eax, 8
	cmp	DWORD PTR Lf$[rsp], eax
	je	SHORT $LN24@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88404
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3249
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18512], 0
; Line 3250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__proc
; Line 3252
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18080], eax
; Line 3253
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN25@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rdx+rax+18080], ecx
	jne	SHORT $LN25@stbi__proc
; Line 3254
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18512]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18512], eax
$LN25@stbi__proc:
; Line 3255
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$[rsp], eax
; Line 3256
	mov	eax, DWORD PTR q$[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18084], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 0
	je	SHORT $LN27@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 4
	jle	SHORT $LN26@stbi__proc
$LN27@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG88408
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3257
	mov	eax, DWORD PTR q$[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18088], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 0
	je	SHORT $LN29@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 4
	jle	SHORT $LN28@stbi__proc
$LN29@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG88411
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3258
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18092], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18092], 3
	jle	SHORT $LN30@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88413
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3259
	jmp	$LN5@stbi__proc
$LN6@stbi__proc:
; Line 3261
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN31@stbi__proc
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN31@stbi__proc:
; Line 3263
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN32@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88416
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN32@stbi__proc:
; Line 3265
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__proc
$LN8@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__proc
; Line 3266
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR h_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], edx
	jle	SHORT $LN33@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	mov	DWORD PTR h_max$[rsp], eax
$LN33@stbi__proc:
; Line 3267
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR v_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], edx
	jle	SHORT $LN34@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	mov	DWORD PTR v_max$[rsp], eax
$LN34@stbi__proc:
; Line 3268
	jmp	$LN8@stbi__proc
$LN9@stbi__proc:
; Line 3272
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__proc
; Line 3273
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv285[rsp], rax
	mov	eax, DWORD PTR h_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv285[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN35@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88420
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3274
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv294[rsp], rax
	mov	eax, DWORD PTR v_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv294[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88422
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN36@stbi__proc:
; Line 3275
	jmp	$LN11@stbi__proc
$LN12@stbi__proc:
; Line 3278
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR h_max$[rsp]
	mov	DWORD PTR [rax+18056], ecx
; Line 3279
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR v_max$[rsp]
	mov	DWORD PTR [rax+18060], ecx
; Line 3280
	mov	eax, DWORD PTR h_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18072], eax
; Line 3281
	mov	eax, DWORD PTR v_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18076], eax
; Line 3283
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18072]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18072]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18064], eax
; Line 3284
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18076]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18076]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18068], eax
; Line 3286
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__proc
; Line 3288
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	mov	ecx, DWORD PTR h_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR h_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18108], eax
; Line 3289
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	mov	ecx, DWORD PTR v_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR v_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18112], eax
; Line 3297
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18064]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18116], eax
; Line 3298
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18068]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18120], eax
; Line 3299
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
; Line 3300
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3301
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3302
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r8d, 15
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18136], rax
; Line 3303
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	jne	SHORT $LN37@stbi__proc
; Line 3304
	lea	rcx, OFFSET FLAT:$SG88424
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
	jmp	$LN1@stbi__proc
$LN37@stbi__proc:
; Line 3306
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18136]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18128], rax
; Line 3307
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN38@stbi__proc
; Line 3309
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18116]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18168], eax
; Line 3310
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18120]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18172], eax
; Line 3311
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r9d, 15
	mov	r8d, 2
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18144], rax
; Line 3312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	jne	SHORT $LN39@stbi__proc
; Line 3313
	lea	rcx, OFFSET FLAT:$SG88427
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
	jmp	SHORT $LN1@stbi__proc
$LN39@stbi__proc:
; Line 3314
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18144]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18160], rax
$LN38@stbi__proc:
; Line 3316
	jmp	$LN14@stbi__proc
$LN15@stbi__proc:
; Line 3318
	mov	eax, 1
$LN1@stbi__proc:
; Line 3319
	add	rsp, 104				; 00000068H
	ret	0
?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z ENDP ; stbi__process_frame_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 64
ncomp$ = 72
why$ = 80
?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z PROC ; stbi__free_jpeg_components
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3208
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3210
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__free
$LN2@stbi__free:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__free:
	mov	eax, DWORD PTR ncomp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__free
; Line 3211
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	je	SHORT $LN5@stbi__free
; Line 3212
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18136]
	call	free
; Line 3213
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3214
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
$LN5@stbi__free:
; Line 3216
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	je	SHORT $LN6@stbi__free
; Line 3217
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18144]
	call	free
; Line 3218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3219
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
$LN6@stbi__free:
; Line 3221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	je	SHORT $LN7@stbi__free
; Line 3222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	call	free
; Line 3223
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
$LN7@stbi__free:
; Line 3225
	jmp	$LN2@stbi__free
$LN3@stbi__free:
; Line 3226
	mov	eax, DWORD PTR why$[rsp]
; Line 3227
	add	rsp, 56					; 00000038H
	ret	0
?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ENDP ; stbi__free_jpeg_components
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
which$1 = 32
i$ = 36
q$2 = 40
aa$3 = 44
Ls$ = 48
id$4 = 52
z$ = 80
?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z PROC	; stbi__process_scan_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3169
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Ls$[rsp], eax
; Line 3172
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18516], eax
; Line 3173
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jl	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 4
	jg	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR [rcx+18516], eax
	jle	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG88324
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN8@stbi__proc:
; Line 3174
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	lea	eax, DWORD PTR [rax+rax+6]
	cmp	DWORD PTR Ls$[rsp], eax
	je	SHORT $LN10@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88326
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 3175
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__proc
; Line 3176
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR id$4[rsp], eax
; Line 3177
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$2[rsp], eax
; Line 3178
	mov	DWORD PTR which$1[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR which$1[rsp]
	inc	eax
	mov	DWORD PTR which$1[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jge	SHORT $LN6@stbi__proc
; Line 3179
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR id$4[rsp]
	cmp	DWORD PTR [rcx+rax+18080], edx
	jne	SHORT $LN11@stbi__proc
; Line 3180
	jmp	SHORT $LN6@stbi__proc
$LN11@stbi__proc:
	jmp	SHORT $LN5@stbi__proc
$LN6@stbi__proc:
; Line 3181
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jne	SHORT $LN12@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN12@stbi__proc:
; Line 3182
	mov	eax, DWORD PTR q$2[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18096], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18096], 3
	jle	SHORT $LN13@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88330
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN13@stbi__proc:
; Line 3183
	mov	eax, DWORD PTR q$2[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18100], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18100], 3
	jle	SHORT $LN14@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88332
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
; Line 3184
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR which$1[rsp]
	mov	DWORD PTR [rcx+rax*4+18520], edx
; Line 3185
	jmp	$LN2@stbi__proc
$LN3@stbi__proc:
; Line 3189
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18484], eax
; Line 3190
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18488], eax
; Line 3191
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR aa$3[rsp], eax
; Line 3192
	mov	eax, DWORD PTR aa$3[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18492], eax
; Line 3193
	mov	eax, DWORD PTR aa$3[rsp]
	and	eax, 15
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18496], eax
; Line 3194
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN15@stbi__proc
; Line 3195
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18488], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18488]
	cmp	DWORD PTR [rax+18484], ecx
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 13
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 13
	jle	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3196
	lea	rcx, OFFSET FLAT:$SG88337
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN17@stbi__proc:
; Line 3197
	jmp	SHORT $LN16@stbi__proc
$LN15@stbi__proc:
; Line 3198
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	je	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88339
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN19@stbi__proc:
; Line 3199
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	SHORT $LN21@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 0
	je	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG88342
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
; Line 3200
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18488], 63		; 0000003fH
$LN16@stbi__proc:
; Line 3204
	mov	eax, 1
$LN1@stbi__proc:
; Line 3205
	add	rsp, 72					; 00000048H
	ret	0
?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z ENDP	; stbi__process_scan_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
i$1 = 36
th$2 = 40
tv64 = 44
i$3 = 48
n$4 = 52
i$5 = 56
i$6 = 60
p$7 = 64
tc$8 = 68
tv88 = 72
q$9 = 76
t$10 = 80
tv149 = 84
sixteen$11 = 88
tv152 = 92
tv155 = 96
q$12 = 100
tv233 = 104
ok$13 = 108
ok$14 = 112
v$15 = 120
sizes$16 = 128
__$ArrayPad$ = 192
z$ = 224
m$ = 232
?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__process_marker
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3066
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3068
	mov	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 196		; 000000c4H
	je	$LN29@stbi__proc
	cmp	DWORD PTR tv64[rsp], 219		; 000000dbH
	je	SHORT $LN26@stbi__proc
	cmp	DWORD PTR tv64[rsp], 221		; 000000ddH
	je	SHORT $LN24@stbi__proc
	cmp	DWORD PTR tv64[rsp], 255		; 000000ffH
	je	SHORT $LN23@stbi__proc
	jmp	$LN2@stbi__proc
$LN23@stbi__proc:
; Line 3070
	lea	rcx, OFFSET FLAT:$SG88272
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3073
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 4
	je	SHORT $LN25@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88275
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
; Line 3074
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18536], eax
; Line 3075
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3078
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN4@stbi__proc:
; Line 3079
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN5@stbi__proc
; Line 3080
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$9[rsp], eax
; Line 3081
	mov	eax, DWORD PTR q$9[rsp]
	sar	eax, 4
	mov	DWORD PTR p$7[rsp], eax
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN51@stbi__proc
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN52@stbi__proc
$LN51@stbi__proc:
	mov	DWORD PTR tv88[rsp], 0
$LN52@stbi__proc:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR sixteen$11[rsp], eax
; Line 3082
	mov	eax, DWORD PTR q$9[rsp]
	and	eax, 15
	mov	DWORD PTR t$10[rsp], eax
; Line 3083
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN27@stbi__proc
	cmp	DWORD PTR p$7[rsp], 1
	je	SHORT $LN27@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88278
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN27@stbi__proc:
; Line 3084
	cmp	DWORD PTR t$10[rsp], 3
	jle	SHORT $LN28@stbi__proc
	lea	rcx, OFFSET FLAT:$SG88280
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3086
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN8@stbi__proc
$LN6@stbi__proc:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN8@stbi__proc:
	cmp	DWORD PTR i$3[rsp], 64			; 00000040H
	jge	SHORT $LN7@stbi__proc
; Line 3087
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN53@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN54@stbi__proc
$LN53@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv149[rsp], eax
$LN54@stbi__proc:
	movsxd	rax, DWORD PTR t$10[rsp]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR i$3[rsp]
	lea	rdx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	movzx	edx, WORD PTR tv149[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	jmp	SHORT $LN6@stbi__proc
$LN7@stbi__proc:
; Line 3088
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN55@stbi__proc
	mov	DWORD PTR tv152[rsp], 129		; 00000081H
	jmp	SHORT $LN56@stbi__proc
$LN55@stbi__proc:
	mov	DWORD PTR tv152[rsp], 65		; 00000041H
$LN56@stbi__proc:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3089
	jmp	$LN4@stbi__proc
$LN5@stbi__proc:
; Line 3090
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN57@stbi__proc
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN58@stbi__proc
$LN57@stbi__proc:
	mov	DWORD PTR tv155[rsp], 0
$LN58@stbi__proc:
	mov	eax, DWORD PTR tv155[rsp]
	jmp	$LN1@stbi__proc
$LN29@stbi__proc:
; Line 3093
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN9@stbi__proc:
; Line 3094
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN10@stbi__proc
; Line 3096
	mov	DWORD PTR n$4[rsp], 0
; Line 3097
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$12[rsp], eax
; Line 3098
	mov	eax, DWORD PTR q$12[rsp]
	sar	eax, 4
	mov	DWORD PTR tc$8[rsp], eax
; Line 3099
	mov	eax, DWORD PTR q$12[rsp]
	and	eax, 15
	mov	DWORD PTR th$2[rsp], eax
; Line 3100
	cmp	DWORD PTR tc$8[rsp], 1
	jg	SHORT $LN31@stbi__proc
	cmp	DWORD PTR th$2[rsp], 3
	jle	SHORT $LN30@stbi__proc
$LN31@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG88284
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3101
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbi__proc:
	cmp	DWORD PTR i$1[rsp], 16
	jge	SHORT $LN12@stbi__proc
; Line 3102
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	DWORD PTR sizes$16[rsp+rcx*4], eax
; Line 3103
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	eax, DWORD PTR sizes$16[rsp+rax*4]
	mov	ecx, DWORD PTR n$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$4[rsp], eax
; Line 3104
	jmp	SHORT $LN11@stbi__proc
$LN12@stbi__proc:
; Line 3105
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 17
	mov	DWORD PTR L$[rsp], eax
; Line 3106
	cmp	DWORD PTR tc$8[rsp], 0
	jne	SHORT $LN32@stbi__proc
; Line 3107
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ; stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN34@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN34@stbi__proc:
; Line 3108
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1032]
	mov	QWORD PTR v$15[rsp], rax
; Line 3109
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
; Line 3110
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ; stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN35@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3111
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+7752]
	mov	QWORD PTR v$15[rsp], rax
$LN33@stbi__proc:
; Line 3113
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@stbi__proc:
	mov	eax, DWORD PTR n$4[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN15@stbi__proc
; Line 3114
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR v$15[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN14@stbi__proc
$LN15@stbi__proc:
; Line 3115
	cmp	DWORD PTR tc$8[rsp], 0
	je	SHORT $LN36@stbi__proc
; Line 3116
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	movsxd	rcx, DWORD PTR th$2[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	mov	rdx, rax
	call	?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z ; stbi__build_fast_ac
$LN36@stbi__proc:
; Line 3117
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3118
	jmp	$LN9@stbi__proc
$LN10@stbi__proc:
; Line 3119
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN59@stbi__proc
	mov	DWORD PTR tv233[rsp], 1
	jmp	SHORT $LN60@stbi__proc
$LN59@stbi__proc:
	mov	DWORD PTR tv233[rsp], 0
$LN60@stbi__proc:
	mov	eax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__proc
$LN2@stbi__proc:
; Line 3123
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jl	SHORT $LN39@stbi__proc
	cmp	DWORD PTR m$[rsp], 239			; 000000efH
	jle	SHORT $LN38@stbi__proc
$LN39@stbi__proc:
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	$LN37@stbi__proc
$LN38@stbi__proc:
; Line 3124
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR L$[rsp], eax
; Line 3125
	cmp	DWORD PTR L$[rsp], 2
	jge	SHORT $LN40@stbi__proc
; Line 3126
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	SHORT $LN41@stbi__proc
; Line 3127
	lea	rcx, OFFSET FLAT:$SG88296
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
	jmp	SHORT $LN42@stbi__proc
$LN41@stbi__proc:
; Line 3129
	lea	rcx, OFFSET FLAT:$SG88297
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN42@stbi__proc:
$LN40@stbi__proc:
; Line 3131
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
; Line 3133
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jne	$LN43@stbi__proc
	cmp	DWORD PTR L$[rsp], 5
	jl	SHORT $LN43@stbi__proc
; Line 3135
	mov	DWORD PTR ok$13[rsp], 1
; Line 3137
	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN19@stbi__proc
$LN17@stbi__proc:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN19@stbi__proc:
	cmp	DWORD PTR i$5[rsp], 5
	jge	SHORT $LN18@stbi__proc
; Line 3138
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$5[rsp]
	lea	rdx, OFFSET FLAT:?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN45@stbi__proc
; Line 3139
	mov	DWORD PTR ok$13[rsp], 0
$LN45@stbi__proc:
	jmp	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3140
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 5
	mov	DWORD PTR L$[rsp], eax
; Line 3141
	cmp	DWORD PTR ok$13[rsp], 0
	je	SHORT $LN46@stbi__proc
; Line 3142
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 1
$LN46@stbi__proc:
	jmp	$LN44@stbi__proc
$LN43@stbi__proc:
; Line 3143
	cmp	DWORD PTR m$[rsp], 238			; 000000eeH
	jne	$LN47@stbi__proc
	cmp	DWORD PTR L$[rsp], 12
	jl	$LN47@stbi__proc
; Line 3145
	mov	DWORD PTR ok$14[rsp], 1
; Line 3147
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN22@stbi__proc
$LN20@stbi__proc:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN22@stbi__proc:
	cmp	DWORD PTR i$6[rsp], 6
	jge	SHORT $LN21@stbi__proc
; Line 3148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$6[rsp]
	lea	rdx, OFFSET FLAT:?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN48@stbi__proc
; Line 3149
	mov	DWORD PTR ok$14[rsp], 0
$LN48@stbi__proc:
	jmp	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
; Line 3150
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
; Line 3151
	cmp	DWORD PTR ok$14[rsp], 0
	je	SHORT $LN49@stbi__proc
; Line 3152
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 3153
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 3154
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 3155
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18508], eax
; Line 3156
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
$LN49@stbi__proc:
$LN47@stbi__proc:
$LN44@stbi__proc:
; Line 3160
	mov	edx, DWORD PTR L$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 3161
	mov	eax, 1
	jmp	SHORT $LN1@stbi__proc
$LN37@stbi__proc:
; Line 3164
	lea	rcx, OFFSET FLAT:$SG88305
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
$LN1@stbi__proc:
; Line 3165
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__process_marker
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
j$2 = 36
i$3 = 40
h$4 = 44
w$5 = 48
data$6 = 56
tv174 = 64
z$ = 96
?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_finish
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3047
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3048
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN11@stbi__jpeg
; Line 3051
	mov	DWORD PTR n$1[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	mov	DWORD PTR n$1[rsp], eax
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR n$1[rsp], eax
	jge	$LN3@stbi__jpeg
; Line 3052
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$5[rsp], eax
; Line 3053
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$4[rsp], eax
; Line 3054
	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN7@stbi__jpeg:
	mov	eax, DWORD PTR h$4[rsp]
	cmp	DWORD PTR j$2[rsp], eax
	jge	$LN6@stbi__jpeg
; Line 3055
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__jpeg
$LN8@stbi__jpeg:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__jpeg:
	mov	eax, DWORD PTR w$5[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__jpeg
; Line 3056
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$2[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$3[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$6[rsp], rax
; Line 3057
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$6[rsp]
	call	?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z	; stbi__jpeg_dequantize
; Line 3058
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv174[rsp], rax
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$2[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$3[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	mov	r8, QWORD PTR data$6[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv174[rsp]
; Line 3059
	jmp	$LN8@stbi__jpeg
$LN9@stbi__jpeg:
; Line 3060
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 3061
	jmp	$LN2@stbi__jpeg
$LN3@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 3063
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_finish
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
data$ = 32
dequant$ = 40
?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z PROC		; stbi__jpeg_dequantize
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3040
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3042
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__jpeg:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@stbi__jpeg
; Line 3043
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	movsx	ecx, WORD PTR [rdx+rcx*2]
	imul	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 3044
	add	rsp, 24
	ret	0
?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z ENDP		; stbi__jpeg_dequantize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 64
n$2 = 68
n$3 = 72
n$4 = 76
j$5 = 80
i$6 = 84
k$7 = 88
i$8 = 92
x$9 = 96
j$10 = 100
y$11 = 104
j$12 = 108
i$13 = 112
k$14 = 116
i$15 = 120
x$16 = 124
j$17 = 128
y$18 = 132
ha$19 = 136
tv192 = 140
ha$20 = 144
tv315 = 148
ha$21 = 152
tv404 = 156
tv522 = 160
h$22 = 164
w$23 = 168
y2$24 = 172
x2$25 = 176
h$26 = 180
w$27 = 184
y2$28 = 188
x2$29 = 192
data$30 = 200
tv189 = 208
tv312 = 216
data$31 = 224
data$32 = 240
data$33 = 368
__$ArrayPad$ = 496
z$ = 528
?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z PROC ; stbi__parse_entropy_coded_data
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2916
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 520				; 00000208H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2917
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
; Line 2918
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	jne	$LN44@stbi__pars
; Line 2919
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN46@stbi__pars
; Line 2922
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$2[rsp], eax
; Line 2927
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$23[rsp], eax
; Line 2928
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$22[rsp], eax
; Line 2929
	mov	DWORD PTR j$5[rsp], 0
	jmp	SHORT $LN4@stbi__pars
$LN2@stbi__pars:
	mov	eax, DWORD PTR j$5[rsp]
	inc	eax
	mov	DWORD PTR j$5[rsp], eax
$LN4@stbi__pars:
	mov	eax, DWORD PTR h$22[rsp]
	cmp	DWORD PTR j$5[rsp], eax
	jge	$LN3@stbi__pars
; Line 2930
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@stbi__pars
$LN5@stbi__pars:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN7@stbi__pars:
	mov	eax, DWORD PTR w$23[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN6@stbi__pars
; Line 2931
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$19[rsp], eax
; Line 2932
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$19[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$19[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$2[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$32[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ; stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN48@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 2933
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv189[rsp], rax
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$2[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$2[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$5[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$6[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	lea	r8, QWORD PTR data$32[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv189[rsp]
; Line 2935
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv192[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv192[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv192[rsp], 0
	jg	SHORT $LN49@stbi__pars
; Line 2936
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN50@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN50@stbi__pars:
; Line 2939
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN52@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN51@stbi__pars
$LN52@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 2940
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN49@stbi__pars:
; Line 2942
	jmp	$LN5@stbi__pars
$LN6@stbi__pars:
; Line 2943
	jmp	$LN2@stbi__pars
$LN3@stbi__pars:
; Line 2944
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 2945
	jmp	$LN47@stbi__pars
$LN46@stbi__pars:
; Line 2948
	mov	DWORD PTR j$10[rsp], 0
	jmp	SHORT $LN10@stbi__pars
$LN8@stbi__pars:
	mov	eax, DWORD PTR j$10[rsp]
	inc	eax
	mov	DWORD PTR j$10[rsp], eax
$LN10@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$10[rsp], eax
	jge	$LN9@stbi__pars
; Line 2949
	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@stbi__pars
$LN11@stbi__pars:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN13@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$8[rsp], eax
	jge	$LN12@stbi__pars
; Line 2951
	mov	DWORD PTR k$7[rsp], 0
	jmp	SHORT $LN16@stbi__pars
$LN14@stbi__pars:
	mov	eax, DWORD PTR k$7[rsp]
	inc	eax
	mov	DWORD PTR k$7[rsp], eax
$LN16@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$7[rsp], eax
	jge	$LN15@stbi__pars
; Line 2952
	movsxd	rax, DWORD PTR k$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$1[rsp], eax
; Line 2955
	mov	DWORD PTR y$11[rsp], 0
	jmp	SHORT $LN19@stbi__pars
$LN17@stbi__pars:
	mov	eax, DWORD PTR y$11[rsp]
	inc	eax
	mov	DWORD PTR y$11[rsp], eax
$LN19@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$11[rsp], eax
	jge	$LN18@stbi__pars
; Line 2956
	mov	DWORD PTR x$9[rsp], 0
	jmp	SHORT $LN22@stbi__pars
$LN20@stbi__pars:
	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	mov	DWORD PTR x$9[rsp], eax
$LN22@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$9[rsp], eax
	jge	$LN21@stbi__pars
; Line 2957
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$8[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$9[rsp]
	shl	eax, 3
	mov	DWORD PTR x2$25[rsp], eax
; Line 2958
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$10[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$11[rsp]
	shl	eax, 3
	mov	DWORD PTR y2$24[rsp], eax
; Line 2959
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$20[rsp], eax
; Line 2960
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$20[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$20[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$1[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$33[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ; stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN53@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN53@stbi__pars:
; Line 2961
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv312[rsp], rax
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR y2$24[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	movsxd	rdx, DWORD PTR x2$25[rsp]
	add	rcx, rdx
	lea	r8, QWORD PTR data$33[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv312[rsp]
; Line 2962
	jmp	$LN20@stbi__pars
$LN21@stbi__pars:
; Line 2963
	jmp	$LN17@stbi__pars
$LN18@stbi__pars:
; Line 2964
	jmp	$LN14@stbi__pars
$LN15@stbi__pars:
; Line 2967
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv315[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv315[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv315[rsp], 0
	jg	SHORT $LN54@stbi__pars
; Line 2968
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN55@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN55@stbi__pars:
; Line 2969
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN57@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN56@stbi__pars
$LN57@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 2970
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN54@stbi__pars:
; Line 2972
	jmp	$LN11@stbi__pars
$LN12@stbi__pars:
; Line 2973
	jmp	$LN8@stbi__pars
$LN9@stbi__pars:
; Line 2974
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 2976
	jmp	$LN45@stbi__pars
$LN44@stbi__pars:
; Line 2977
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN58@stbi__pars
; Line 2979
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$4[rsp], eax
; Line 2984
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$27[rsp], eax
; Line 2985
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$26[rsp], eax
; Line 2986
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN25@stbi__pars
$LN23@stbi__pars:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN25@stbi__pars:
	mov	eax, DWORD PTR h$26[rsp]
	cmp	DWORD PTR j$12[rsp], eax
	jge	$LN24@stbi__pars
; Line 2987
	mov	DWORD PTR i$13[rsp], 0
	jmp	SHORT $LN28@stbi__pars
$LN26@stbi__pars:
	mov	eax, DWORD PTR i$13[rsp]
	inc	eax
	mov	DWORD PTR i$13[rsp], eax
$LN28@stbi__pars:
	mov	eax, DWORD PTR w$27[rsp]
	cmp	DWORD PTR i$13[rsp], eax
	jge	$LN27@stbi__pars
; Line 2988
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$4[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$12[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$30[rsp], rax
; Line 2989
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN60@stbi__pars
; Line 2990
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$4[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ; stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN62@stbi__pars
; Line 2991
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 2992
	jmp	$LN61@stbi__pars
$LN60@stbi__pars:
; Line 2993
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$21[rsp], eax
; Line 2994
	movsxd	rax, DWORD PTR ha$21[rsp]
	imul	rax, rax, 1024				; 00000400H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13960]
	movsxd	rcx, DWORD PTR ha$21[rsp]
	imul	rcx, rcx, 1680				; 00000690H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+6728]
	mov	r9, rax
	mov	r8, rcx
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z ; stbi__jpeg_decode_block_prog_ac
	test	eax, eax
	jne	SHORT $LN63@stbi__pars
; Line 2995
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
$LN61@stbi__pars:
; Line 2998
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv404[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv404[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv404[rsp], 0
	jg	SHORT $LN64@stbi__pars
; Line 2999
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN65@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN65@stbi__pars:
; Line 3000
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN67@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN66@stbi__pars
$LN67@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN66@stbi__pars:
; Line 3001
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN64@stbi__pars:
; Line 3003
	jmp	$LN26@stbi__pars
$LN27@stbi__pars:
; Line 3004
	jmp	$LN23@stbi__pars
$LN24@stbi__pars:
; Line 3005
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 3006
	jmp	$LN59@stbi__pars
$LN58@stbi__pars:
; Line 3008
	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN31@stbi__pars
$LN29@stbi__pars:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN31@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$17[rsp], eax
	jge	$LN30@stbi__pars
; Line 3009
	mov	DWORD PTR i$15[rsp], 0
	jmp	SHORT $LN34@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR i$15[rsp]
	inc	eax
	mov	DWORD PTR i$15[rsp], eax
$LN34@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$15[rsp], eax
	jge	$LN33@stbi__pars
; Line 3011
	mov	DWORD PTR k$14[rsp], 0
	jmp	SHORT $LN37@stbi__pars
$LN35@stbi__pars:
	mov	eax, DWORD PTR k$14[rsp]
	inc	eax
	mov	DWORD PTR k$14[rsp], eax
$LN37@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$14[rsp], eax
	jge	$LN36@stbi__pars
; Line 3012
	movsxd	rax, DWORD PTR k$14[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$3[rsp], eax
; Line 3015
	mov	DWORD PTR y$18[rsp], 0
	jmp	SHORT $LN40@stbi__pars
$LN38@stbi__pars:
	mov	eax, DWORD PTR y$18[rsp]
	inc	eax
	mov	DWORD PTR y$18[rsp], eax
$LN40@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$18[rsp], eax
	jge	$LN39@stbi__pars
; Line 3016
	mov	DWORD PTR x$16[rsp], 0
	jmp	SHORT $LN43@stbi__pars
$LN41@stbi__pars:
	mov	eax, DWORD PTR x$16[rsp]
	inc	eax
	mov	DWORD PTR x$16[rsp], eax
$LN43@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$16[rsp], eax
	jge	$LN42@stbi__pars
; Line 3017
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$15[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$16[rsp]
	mov	DWORD PTR x2$29[rsp], eax
; Line 3018
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$17[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$18[rsp]
	mov	DWORD PTR y2$28[rsp], eax
; Line 3019
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR y2$28[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR x2$29[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$31[rsp], rax
; Line 3020
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$3[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$31[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ; stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN68@stbi__pars
; Line 3021
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 3022
	jmp	$LN41@stbi__pars
$LN42@stbi__pars:
; Line 3023
	jmp	$LN38@stbi__pars
$LN39@stbi__pars:
; Line 3024
	jmp	$LN35@stbi__pars
$LN36@stbi__pars:
; Line 3027
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv522[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv522[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv522[rsp], 0
	jg	SHORT $LN69@stbi__pars
; Line 3028
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN70@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN70@stbi__pars:
; Line 3029
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN72@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN71@stbi__pars
$LN72@stbi__pars:
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pars
$LN71@stbi__pars:
; Line 3030
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN69@stbi__pars:
; Line 3032
	jmp	$LN32@stbi__pars
$LN33@stbi__pars:
; Line 3033
	jmp	$LN29@stbi__pars
$LN30@stbi__pars:
; Line 3034
	mov	eax, 1
$LN59@stbi__pars:
$LN45@stbi__pars:
$LN1@stbi__pars:
; Line 3037
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 520				; 00000208H
	ret	0
?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z ENDP ; stbi__parse_entropy_coded_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 0
j$ = 32
?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_reset
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2903
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2904
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18468], 0
; Line 2905
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18464], 0
; Line 2906
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 0
; Line 2907
	mov	eax, 96					; 00000060H
	imul	rax, rax, 3
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
; Line 2908
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 2909
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18536], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18536]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN4@stbi__jpeg
$LN3@stbi__jpeg:
	mov	DWORD PTR tv88[rsp], 2147483647		; 7fffffffH
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR tv88[rsp]
	mov	DWORD PTR [rax+18540], ecx
; Line 2910
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18500], 0
; Line 2913
	add	rsp, 24
	ret	0
?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
j$ = 64
?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z PROC		; stbi__get_marker
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2886
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2888
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@stbi__get_
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	mov	BYTE PTR x$[rsp], al
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
	movzx	eax, BYTE PTR x$[rsp]
	jmp	SHORT $LN1@stbi__get_
$LN4@stbi__get_:
; Line 2889
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR x$[rsp], al
; Line 2890
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@stbi__get_
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__get_
$LN5@stbi__get_:
$LN2@stbi__get_:
; Line 2891
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@stbi__get_
; Line 2892
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR x$[rsp], al
	jmp	SHORT $LN2@stbi__get_
$LN3@stbi__get_:
; Line 2893
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__get_:
; Line 2894
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ENDP		; stbi__get_marker
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp$ = 0
row1$ = 16
row3$ = 32
row5$ = 48
row7$ = 64
row0$ = 80
row2$ = 96
row4$ = 112
row6$ = 128
p0$1 = 144
p2$2 = 160
p1$3 = 176
p3$4 = 192
bias_0$ = 208
bias_1$ = 224
rot0_0$ = 240
rot0_1$ = 256
rot2_0$ = 272
rot2_1$ = 288
rot3_0$ = 304
rot3_1$ = 320
rot1_0$ = 336
rot1_1$ = 352
rot0_0lo$5 = 368
rot0_0hi$6 = 384
sum04$7 = 400
dif04$8 = 416
t0e_l$9 = 432
t3e_l$10 = 448
t0e_h$11 = 464
t3e_h$12 = 480
t1e_l$13 = 496
t2e_l$14 = 512
t1e_h$15 = 528
t2e_h$16 = 544
rot2_0lo$17 = 560
rot2_0hi$18 = 576
rot3_0lo$19 = 592
rot3_0hi$20 = 608
sum17$21 = 624
sum35$22 = 640
rot1_0lo$23 = 656
rot1_0hi$24 = 672
y5o_l$25 = 688
y5o_h$26 = 704
y4o_l$27 = 720
y4o_h$28 = 736
abiased_l$29 = 752
x7_l$30 = 768
abiased_h$31 = 784
x7_h$32 = 800
abiased_l$33 = 816
x6_l$34 = 832
abiased_h$35 = 848
x6_h$36 = 864
abiased_l$37 = 880
x5_l$38 = 896
abiased_h$39 = 912
x5_h$40 = 928
abiased_l$41 = 944
x4_l$42 = 960
abiased_h$43 = 976
x4_h$44 = 992
rot0_0lo$45 = 1008
rot0_0hi$46 = 1024
sum04$47 = 1040
dif04$48 = 1056
t0e_l$49 = 1072
t3e_l$50 = 1088
t0e_h$51 = 1104
t3e_h$52 = 1120
t1e_l$53 = 1136
t2e_l$54 = 1152
t1e_h$55 = 1168
t2e_h$56 = 1184
rot2_0lo$57 = 1200
rot2_0hi$58 = 1216
rot3_0lo$59 = 1232
rot3_0hi$60 = 1248
sum17$61 = 1264
sum35$62 = 1280
rot1_0lo$63 = 1296
rot1_0hi$64 = 1312
y5o_l$65 = 1328
y5o_h$66 = 1344
y4o_l$67 = 1360
y4o_h$68 = 1376
abiased_l$69 = 1392
x7_l$70 = 1408
abiased_h$71 = 1424
x7_h$72 = 1440
abiased_l$73 = 1456
x6_l$74 = 1472
abiased_h$75 = 1488
x6_h$76 = 1504
abiased_l$77 = 1520
x5_l$78 = 1536
abiased_h$79 = 1552
x5_h$80 = 1568
abiased_l$81 = 1584
x4_l$82 = 1600
abiased_h$83 = 1616
x4_h$84 = 1632
$T85 = 1648
$T86 = 1664
$T87 = 1680
$T88 = 1696
$T89 = 1712
$T90 = 1728
$T91 = 1744
$T92 = 1760
$T93 = 1776
$T94 = 1792
$T95 = 1808
$T96 = 1824
$T97 = 1840
$T98 = 1856
$T99 = 1872
$T100 = 1888
$T101 = 1904
$T102 = 1920
$T103 = 1936
$T104 = 1952
$T105 = 1968
$T106 = 1984
$T107 = 2000
$T108 = 2016
$T109 = 2032
$T110 = 2048
$T111 = 2064
$T112 = 2080
$T113 = 2096
$T114 = 2112
$T115 = 2128
$T116 = 2144
$T117 = 2160
$T118 = 2176
$T119 = 2192
$T120 = 2208
$T121 = 2224
$T122 = 2240
$T123 = 2256
$T124 = 2272
$T125 = 2288
$T126 = 2304
$T127 = 2320
$T128 = 2336
$T129 = 2352
$T130 = 2368
$T131 = 2384
$T132 = 2400
$T133 = 2416
$T134 = 2432
$T135 = 2448
$T136 = 2464
$T137 = 2480
$T138 = 2496
$T139 = 2512
$T140 = 2528
$T141 = 2544
$T142 = 2560
$T143 = 2576
$T144 = 2592
$T145 = 2608
$T146 = 2624
$T147 = 2640
$T148 = 2656
$T149 = 2672
$T150 = 2688
y0o_l$151 = 2704
$T152 = 2720
y0o_h$153 = 2736
$T154 = 2752
y1o_l$155 = 2768
$T156 = 2784
y1o_h$157 = 2800
$T158 = 2816
y2o_l$159 = 2832
$T160 = 2848
y2o_h$161 = 2864
$T162 = 2880
y3o_l$163 = 2896
$T164 = 2912
y3o_h$165 = 2928
$T166 = 2944
x0_l$167 = 2960
$T168 = 2976
x0_h$169 = 2992
$T170 = 3008
$T171 = 3024
$T172 = 3040
$T173 = 3056
$T174 = 3072
sum_h$175 = 3088
sum_l$176 = 3104
$T177 = 3120
$T178 = 3136
$T179 = 3152
dif_h$180 = 3168
dif_l$181 = 3184
$T182 = 3200
$T183 = 3216
$T184 = 3232
x1_l$185 = 3248
$T186 = 3264
x1_h$187 = 3280
$T188 = 3296
$T189 = 3312
$T190 = 3328
$T191 = 3344
$T192 = 3360
sum_h$193 = 3376
sum_l$194 = 3392
$T195 = 3408
$T196 = 3424
$T197 = 3440
dif_h$198 = 3456
dif_l$199 = 3472
$T200 = 3488
$T201 = 3504
$T202 = 3520
x2_l$203 = 3536
$T204 = 3552
x2_h$205 = 3568
$T206 = 3584
$T207 = 3600
$T208 = 3616
$T209 = 3632
$T210 = 3648
sum_h$211 = 3664
sum_l$212 = 3680
$T213 = 3696
$T214 = 3712
$T215 = 3728
dif_h$216 = 3744
dif_l$217 = 3760
$T218 = 3776
$T219 = 3792
$T220 = 3808
x3_l$221 = 3824
$T222 = 3840
x3_h$223 = 3856
$T224 = 3872
$T225 = 3888
$T226 = 3904
$T227 = 3920
$T228 = 3936
sum_h$229 = 3952
sum_l$230 = 3968
$T231 = 3984
$T232 = 4000
$T233 = 4016
dif_h$234 = 4032
dif_l$235 = 4048
$T236 = 4064
$T237 = 4080
$T238 = 4096
$T239 = 4112
$T240 = 4128
$T241 = 4144
$T242 = 4160
$T243 = 4176
$T244 = 4192
$T245 = 4208
$T246 = 4224
$T247 = 4240
$T248 = 4256
$T249 = 4272
$T250 = 4288
$T251 = 4304
$T252 = 4320
$T253 = 4336
$T254 = 4352
$T255 = 4368
$T256 = 4384
$T257 = 4400
$T258 = 4416
$T259 = 4432
$T260 = 4448
$T261 = 4464
$T262 = 4480
$T263 = 4496
$T264 = 4512
$T265 = 4528
$T266 = 4544
$T267 = 4560
$T268 = 4576
$T269 = 4592
$T270 = 4608
$T271 = 4624
$T272 = 4640
$T273 = 4656
$T274 = 4672
$T275 = 4688
$T276 = 4704
$T277 = 4720
$T278 = 4736
$T279 = 4752
$T280 = 4768
$T281 = 4784
$T282 = 4800
$T283 = 4816
$T284 = 4832
$T285 = 4848
$T286 = 4864
$T287 = 4880
$T288 = 4896
$T289 = 4912
$T290 = 4928
$T291 = 4944
$T292 = 4960
$T293 = 4976
$T294 = 4992
$T295 = 5008
$T296 = 5024
$T297 = 5040
$T298 = 5056
$T299 = 5072
$T300 = 5088
$T301 = 5104
$T302 = 5120
$T303 = 5136
$T304 = 5152
$T305 = 5168
$T306 = 5184
$T307 = 5200
$T308 = 5216
$T309 = 5232
$T310 = 5248
y0o_l$311 = 5264
$T312 = 5280
y0o_h$313 = 5296
$T314 = 5312
y1o_l$315 = 5328
$T316 = 5344
y1o_h$317 = 5360
$T318 = 5376
y2o_l$319 = 5392
$T320 = 5408
y2o_h$321 = 5424
$T322 = 5440
y3o_l$323 = 5456
$T324 = 5472
y3o_h$325 = 5488
$T326 = 5504
x0_l$327 = 5520
$T328 = 5536
x0_h$329 = 5552
$T330 = 5568
$T331 = 5584
$T332 = 5600
$T333 = 5616
$T334 = 5632
sum_h$335 = 5648
sum_l$336 = 5664
$T337 = 5680
$T338 = 5696
$T339 = 5712
dif_h$340 = 5728
dif_l$341 = 5744
$T342 = 5760
$T343 = 5776
$T344 = 5792
x1_l$345 = 5808
$T346 = 5824
x1_h$347 = 5840
$T348 = 5856
$T349 = 5872
$T350 = 5888
$T351 = 5904
$T352 = 5920
sum_h$353 = 5936
sum_l$354 = 5952
$T355 = 5968
$T356 = 5984
$T357 = 6000
dif_h$358 = 6016
dif_l$359 = 6032
$T360 = 6048
$T361 = 6064
$T362 = 6080
x2_l$363 = 6096
$T364 = 6112
x2_h$365 = 6128
$T366 = 6144
$T367 = 6160
$T368 = 6176
$T369 = 6192
$T370 = 6208
sum_h$371 = 6224
sum_l$372 = 6240
$T373 = 6256
$T374 = 6272
$T375 = 6288
dif_h$376 = 6304
dif_l$377 = 6320
$T378 = 6336
$T379 = 6352
$T380 = 6368
x3_l$381 = 6384
$T382 = 6400
x3_h$383 = 6416
$T384 = 6432
$T385 = 6448
$T386 = 6464
$T387 = 6480
$T388 = 6496
sum_h$389 = 6512
sum_l$390 = 6528
$T391 = 6544
$T392 = 6560
$T393 = 6576
dif_h$394 = 6592
dif_l$395 = 6608
$T396 = 6624
$T397 = 6640
$T398 = 6656
$T399 = 6672
$T400 = 6688
$T401 = 6704
$T402 = 6720
$T403 = 6736
$T404 = 6752
$T405 = 6768
$T406 = 6784
$T407 = 6800
$T408 = 6816
$T409 = 6832
$T410 = 6848
$T411 = 6864
$T412 = 6880
$T413 = 6896
$T414 = 6912
$T415 = 6928
$T416 = 6944
$T417 = 6960
$T418 = 6976
out$ = 7008
out_stride$ = 7016
data$ = 7024
?stbi__idct_simd@@YAXPEAEHQEAF@Z PROC			; stbi__idct_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2497
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 7000				; 00001b58H
	call	__chkstk
	sub	rsp, rax
; Line 2581
	movdqa	xmm0, XMMWORD PTR __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
	movdqa	XMMWORD PTR $T85[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T85[rsp]
	movdqa	XMMWORD PTR rot0_0$[rsp], xmm0
; Line 2582
	movdqa	xmm0, XMMWORD PTR __xmm@08a914e808a914e808a914e808a914e8
	movdqa	XMMWORD PTR $T86[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T86[rsp]
	movdqa	XMMWORD PTR rot0_1$[rsp], xmm0
; Line 2583
	movdqa	xmm0, XMMWORD PTR __xmm@12d0046b12d0046b12d0046b12d0046b
	movdqa	XMMWORD PTR $T87[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T87[rsp]
	movdqa	XMMWORD PTR rot1_0$[rsp], xmm0
; Line 2584
	movdqa	xmm0, XMMWORD PTR __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
	movdqa	XMMWORD PTR $T88[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T88[rsp]
	movdqa	XMMWORD PTR rot1_1$[rsp], xmm0
; Line 2585
	movdqa	xmm0, XMMWORD PTR __xmm@e09ee565e09ee565e09ee565e09ee565
	movdqa	XMMWORD PTR $T89[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T89[rsp]
	movdqa	XMMWORD PTR rot2_0$[rsp], xmm0
; Line 2586
	movdqa	xmm0, XMMWORD PTR __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
	movdqa	XMMWORD PTR $T90[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T90[rsp]
	movdqa	XMMWORD PTR rot2_1$[rsp], xmm0
; Line 2587
	movdqa	xmm0, XMMWORD PTR __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
	movdqa	XMMWORD PTR $T91[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T91[rsp]
	movdqa	XMMWORD PTR rot3_0$[rsp], xmm0
; Line 2588
	movdqa	xmm0, XMMWORD PTR __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
	movdqa	XMMWORD PTR $T92[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T92[rsp]
	movdqa	XMMWORD PTR rot3_1$[rsp], xmm0
; Line 2591
	movdqa	xmm0, XMMWORD PTR __xmm@00000200000002000000020000000200
	movdqa	XMMWORD PTR $T93[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T93[rsp]
	movdqa	XMMWORD PTR bias_0$[rsp], xmm0
; Line 2592
	movdqa	xmm0, XMMWORD PTR __xmm@01010000010100000101000001010000
	movdqa	XMMWORD PTR $T94[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T94[rsp]
	movdqa	XMMWORD PTR bias_1$[rsp], xmm0
; Line 2595
	mov	rax, QWORD PTR data$[rsp]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T95[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T95[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
; Line 2596
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 16
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T96[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T96[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2597
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 32					; 00000020H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T97[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T97[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2598
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 48					; 00000030H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T98[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T98[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2599
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 64					; 00000040H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T99[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T99[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2600
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 80					; 00000050H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T100[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T100[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2601
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 96					; 00000060H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T101[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T101[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2602
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 112				; 00000070H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T102[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T102[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2605
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T103[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T103[rsp]
	movdqa	XMMWORD PTR rot0_0lo$5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T104[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T104[rsp]
	movdqa	XMMWORD PTR rot0_0hi$6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T105[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T105[rsp]
	movdqa	XMMWORD PTR t2e_l$14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T106[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T106[rsp]
	movdqa	XMMWORD PTR t2e_h$16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T107[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T107[rsp]
	movdqa	XMMWORD PTR t3e_l$10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T108[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T108[rsp]
	movdqa	XMMWORD PTR t3e_h$12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T109[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T109[rsp]
	movdqa	XMMWORD PTR sum04$7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T110[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T110[rsp]
	movdqa	XMMWORD PTR dif04$8[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T111[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T111[rsp]
	punpcklwd xmm0, XMMWORD PTR sum04$7[rsp]
	movdqa	XMMWORD PTR $T112[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T112[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T113[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T113[rsp]
	movdqa	XMMWORD PTR t0e_l$9[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T114[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T114[rsp]
	punpckhwd xmm0, XMMWORD PTR sum04$7[rsp]
	movdqa	XMMWORD PTR $T115[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T115[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T116[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T116[rsp]
	movdqa	XMMWORD PTR t0e_h$11[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T117[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T117[rsp]
	punpcklwd xmm0, XMMWORD PTR dif04$8[rsp]
	movdqa	XMMWORD PTR $T118[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T118[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T119[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T119[rsp]
	movdqa	XMMWORD PTR t1e_l$13[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T120[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T120[rsp]
	punpckhwd xmm0, XMMWORD PTR dif04$8[rsp]
	movdqa	XMMWORD PTR $T121[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T121[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T122[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T122[rsp]
	movdqa	XMMWORD PTR t1e_h$15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR $T123[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T123[rsp]
	movdqa	XMMWORD PTR x0_l$167[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR $T124[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T124[rsp]
	movdqa	XMMWORD PTR x0_h$169[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR $T125[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T125[rsp]
	movdqa	XMMWORD PTR x3_l$221[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR $T126[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T126[rsp]
	movdqa	XMMWORD PTR x3_h$223[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR $T127[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T127[rsp]
	movdqa	XMMWORD PTR x1_l$185[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR $T128[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T128[rsp]
	movdqa	XMMWORD PTR x1_h$187[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR $T129[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T129[rsp]
	movdqa	XMMWORD PTR x2_l$203[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR $T130[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T130[rsp]
	movdqa	XMMWORD PTR x2_h$205[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T131[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T131[rsp]
	movdqa	XMMWORD PTR rot2_0lo$17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T132[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T132[rsp]
	movdqa	XMMWORD PTR rot2_0hi$18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T133[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T133[rsp]
	movdqa	XMMWORD PTR y0o_l$151[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T134[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T134[rsp]
	movdqa	XMMWORD PTR y0o_h$153[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T135[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T135[rsp]
	movdqa	XMMWORD PTR y2o_l$159[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T136[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T136[rsp]
	movdqa	XMMWORD PTR y2o_h$161[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T137[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T137[rsp]
	movdqa	XMMWORD PTR rot3_0lo$19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T138[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T138[rsp]
	movdqa	XMMWORD PTR rot3_0hi$20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T139[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T139[rsp]
	movdqa	XMMWORD PTR y1o_l$155[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T140[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T140[rsp]
	movdqa	XMMWORD PTR y1o_h$157[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T141[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T141[rsp]
	movdqa	XMMWORD PTR y3o_l$163[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T142[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T142[rsp]
	movdqa	XMMWORD PTR y3o_h$165[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T143[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T143[rsp]
	movdqa	XMMWORD PTR sum17$21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T144[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T144[rsp]
	movdqa	XMMWORD PTR sum35$22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR $T145[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T145[rsp]
	movdqa	XMMWORD PTR rot1_0lo$23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR $T146[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T146[rsp]
	movdqa	XMMWORD PTR rot1_0hi$24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T147[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T147[rsp]
	movdqa	XMMWORD PTR y4o_l$27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T148[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T148[rsp]
	movdqa	XMMWORD PTR y4o_h$28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T149[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T149[rsp]
	movdqa	XMMWORD PTR y5o_l$25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T150[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T150[rsp]
	movdqa	XMMWORD PTR y5o_h$26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$151[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR $T152[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T152[rsp]
	movdqa	XMMWORD PTR x4_l$42[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$153[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR $T154[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T154[rsp]
	movdqa	XMMWORD PTR x4_h$44[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$155[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR $T156[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T156[rsp]
	movdqa	XMMWORD PTR x5_l$38[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$157[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR $T158[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T158[rsp]
	movdqa	XMMWORD PTR x5_h$40[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$159[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR $T160[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T160[rsp]
	movdqa	XMMWORD PTR x6_l$34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$161[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR $T162[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T162[rsp]
	movdqa	XMMWORD PTR x6_h$36[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$163[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR $T164[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T164[rsp]
	movdqa	XMMWORD PTR x7_l$30[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$165[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR $T166[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T166[rsp]
	movdqa	XMMWORD PTR x7_h$32[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$167[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T168[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T168[rsp]
	movdqa	XMMWORD PTR abiased_l$29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$169[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T170[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T170[rsp]
	movdqa	XMMWORD PTR abiased_h$31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR $T171[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T171[rsp]
	movdqa	XMMWORD PTR sum_l$176[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR $T172[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T172[rsp]
	movdqa	XMMWORD PTR sum_h$175[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR $T173[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T173[rsp]
	movdqa	XMMWORD PTR dif_l$181[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR $T174[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T174[rsp]
	movdqa	XMMWORD PTR dif_h$180[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$175[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T178[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$176[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T177[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T177[rsp]
	packssdw xmm0, XMMWORD PTR $T178[rsp]
	movdqa	XMMWORD PTR $T179[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T179[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$180[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T183[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$181[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T182[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T182[rsp]
	packssdw xmm0, XMMWORD PTR $T183[rsp]
	movdqa	XMMWORD PTR $T184[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T184[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$185[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T186[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T186[rsp]
	movdqa	XMMWORD PTR abiased_l$33[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$187[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T188[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T188[rsp]
	movdqa	XMMWORD PTR abiased_h$35[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR $T189[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T189[rsp]
	movdqa	XMMWORD PTR sum_l$194[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR $T190[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T190[rsp]
	movdqa	XMMWORD PTR sum_h$193[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR $T191[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T191[rsp]
	movdqa	XMMWORD PTR dif_l$199[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR $T192[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T192[rsp]
	movdqa	XMMWORD PTR dif_h$198[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$193[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T196[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$194[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T195[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T195[rsp]
	packssdw xmm0, XMMWORD PTR $T196[rsp]
	movdqa	XMMWORD PTR $T197[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T197[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$198[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T201[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$199[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T200[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T200[rsp]
	packssdw xmm0, XMMWORD PTR $T201[rsp]
	movdqa	XMMWORD PTR $T202[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T202[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$203[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T204[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T204[rsp]
	movdqa	XMMWORD PTR abiased_l$37[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$205[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T206[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T206[rsp]
	movdqa	XMMWORD PTR abiased_h$39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR $T207[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T207[rsp]
	movdqa	XMMWORD PTR sum_l$212[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR $T208[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T208[rsp]
	movdqa	XMMWORD PTR sum_h$211[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR $T209[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T209[rsp]
	movdqa	XMMWORD PTR dif_l$217[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR $T210[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T210[rsp]
	movdqa	XMMWORD PTR dif_h$216[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$211[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T214[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$212[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T213[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T213[rsp]
	packssdw xmm0, XMMWORD PTR $T214[rsp]
	movdqa	XMMWORD PTR $T215[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T215[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$216[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T219[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$217[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T218[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T218[rsp]
	packssdw xmm0, XMMWORD PTR $T219[rsp]
	movdqa	XMMWORD PTR $T220[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T220[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$221[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T222[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T222[rsp]
	movdqa	XMMWORD PTR abiased_l$41[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$223[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T224[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T224[rsp]
	movdqa	XMMWORD PTR abiased_h$43[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR $T225[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T225[rsp]
	movdqa	XMMWORD PTR sum_l$230[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR $T226[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T226[rsp]
	movdqa	XMMWORD PTR sum_h$229[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR $T227[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T227[rsp]
	movdqa	XMMWORD PTR dif_l$235[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR $T228[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T228[rsp]
	movdqa	XMMWORD PTR dif_h$234[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$229[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T232[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$230[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T231[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T231[rsp]
	packssdw xmm0, XMMWORD PTR $T232[rsp]
	movdqa	XMMWORD PTR $T233[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T233[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$234[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T237[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$235[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T236[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T236[rsp]
	packssdw xmm0, XMMWORD PTR $T237[rsp]
	movdqa	XMMWORD PTR $T238[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T238[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2609
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T239[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T239[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T240[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T240[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2610
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T241[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T241[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T242[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T242[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2611
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T243[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T243[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T244[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T244[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2612
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T245[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T245[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T246[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T246[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2615
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR $T247[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T247[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR $T248[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T248[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2616
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T249[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T249[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T250[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T250[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2617
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T251[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T251[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T252[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T252[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2618
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T253[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T253[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T254[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T254[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2621
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T255[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T255[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T256[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T256[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2622
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T257[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T257[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T258[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T258[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2623
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T259[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T259[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T260[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T260[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2624
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T261[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T261[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T262[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T262[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2628
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T263[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T263[rsp]
	movdqa	XMMWORD PTR rot0_0lo$45[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T264[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T264[rsp]
	movdqa	XMMWORD PTR rot0_0hi$46[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T265[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T265[rsp]
	movdqa	XMMWORD PTR t2e_l$54[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T266[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T266[rsp]
	movdqa	XMMWORD PTR t2e_h$56[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T267[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T267[rsp]
	movdqa	XMMWORD PTR t3e_l$50[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T268[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T268[rsp]
	movdqa	XMMWORD PTR t3e_h$52[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T269[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T269[rsp]
	movdqa	XMMWORD PTR sum04$47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T270[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T270[rsp]
	movdqa	XMMWORD PTR dif04$48[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T271[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T271[rsp]
	punpcklwd xmm0, XMMWORD PTR sum04$47[rsp]
	movdqa	XMMWORD PTR $T272[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T272[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T273[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T273[rsp]
	movdqa	XMMWORD PTR t0e_l$49[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T274[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T274[rsp]
	punpckhwd xmm0, XMMWORD PTR sum04$47[rsp]
	movdqa	XMMWORD PTR $T275[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T275[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T276[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T276[rsp]
	movdqa	XMMWORD PTR t0e_h$51[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T277[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T277[rsp]
	punpcklwd xmm0, XMMWORD PTR dif04$48[rsp]
	movdqa	XMMWORD PTR $T278[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T278[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T279[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T279[rsp]
	movdqa	XMMWORD PTR t1e_l$53[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T280[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T280[rsp]
	punpckhwd xmm0, XMMWORD PTR dif04$48[rsp]
	movdqa	XMMWORD PTR $T281[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T281[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T282[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T282[rsp]
	movdqa	XMMWORD PTR t1e_h$55[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR $T283[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T283[rsp]
	movdqa	XMMWORD PTR x0_l$327[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR $T284[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T284[rsp]
	movdqa	XMMWORD PTR x0_h$329[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR $T285[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T285[rsp]
	movdqa	XMMWORD PTR x3_l$381[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR $T286[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T286[rsp]
	movdqa	XMMWORD PTR x3_h$383[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR $T287[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T287[rsp]
	movdqa	XMMWORD PTR x1_l$345[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR $T288[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T288[rsp]
	movdqa	XMMWORD PTR x1_h$347[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR $T289[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T289[rsp]
	movdqa	XMMWORD PTR x2_l$363[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR $T290[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T290[rsp]
	movdqa	XMMWORD PTR x2_h$365[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T291[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T291[rsp]
	movdqa	XMMWORD PTR rot2_0lo$57[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T292[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T292[rsp]
	movdqa	XMMWORD PTR rot2_0hi$58[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T293[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T293[rsp]
	movdqa	XMMWORD PTR y0o_l$311[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T294[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T294[rsp]
	movdqa	XMMWORD PTR y0o_h$313[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T295[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T295[rsp]
	movdqa	XMMWORD PTR y2o_l$319[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T296[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T296[rsp]
	movdqa	XMMWORD PTR y2o_h$321[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T297[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T297[rsp]
	movdqa	XMMWORD PTR rot3_0lo$59[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T298[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298[rsp]
	movdqa	XMMWORD PTR rot3_0hi$60[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T299[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T299[rsp]
	movdqa	XMMWORD PTR y1o_l$315[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T300[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T300[rsp]
	movdqa	XMMWORD PTR y1o_h$317[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T301[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T301[rsp]
	movdqa	XMMWORD PTR y3o_l$323[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T302[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T302[rsp]
	movdqa	XMMWORD PTR y3o_h$325[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T303[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T303[rsp]
	movdqa	XMMWORD PTR sum17$61[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T304[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T304[rsp]
	movdqa	XMMWORD PTR sum35$62[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR $T305[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305[rsp]
	movdqa	XMMWORD PTR rot1_0lo$63[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR $T306[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306[rsp]
	movdqa	XMMWORD PTR rot1_0hi$64[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T307[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T307[rsp]
	movdqa	XMMWORD PTR y4o_l$67[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T308[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T308[rsp]
	movdqa	XMMWORD PTR y4o_h$68[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T309[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T309[rsp]
	movdqa	XMMWORD PTR y5o_l$65[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T310[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T310[rsp]
	movdqa	XMMWORD PTR y5o_h$66[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$311[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR $T312[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T312[rsp]
	movdqa	XMMWORD PTR x4_l$82[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$313[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR $T314[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T314[rsp]
	movdqa	XMMWORD PTR x4_h$84[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$315[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR $T316[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T316[rsp]
	movdqa	XMMWORD PTR x5_l$78[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$317[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR $T318[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T318[rsp]
	movdqa	XMMWORD PTR x5_h$80[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$319[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR $T320[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T320[rsp]
	movdqa	XMMWORD PTR x6_l$74[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$321[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR $T322[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T322[rsp]
	movdqa	XMMWORD PTR x6_h$76[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$323[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR $T324[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T324[rsp]
	movdqa	XMMWORD PTR x7_l$70[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$325[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR $T326[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T326[rsp]
	movdqa	XMMWORD PTR x7_h$72[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$327[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T328[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T328[rsp]
	movdqa	XMMWORD PTR abiased_l$69[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$329[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T330[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T330[rsp]
	movdqa	XMMWORD PTR abiased_h$71[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR $T331[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T331[rsp]
	movdqa	XMMWORD PTR sum_l$336[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR $T332[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T332[rsp]
	movdqa	XMMWORD PTR sum_h$335[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR $T333[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T333[rsp]
	movdqa	XMMWORD PTR dif_l$341[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR $T334[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T334[rsp]
	movdqa	XMMWORD PTR dif_h$340[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$335[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T338[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$336[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T337[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T337[rsp]
	packssdw xmm0, XMMWORD PTR $T338[rsp]
	movdqa	XMMWORD PTR $T339[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T339[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$340[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T343[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$341[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T342[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T342[rsp]
	packssdw xmm0, XMMWORD PTR $T343[rsp]
	movdqa	XMMWORD PTR $T344[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T344[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$345[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T346[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T346[rsp]
	movdqa	XMMWORD PTR abiased_l$73[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$347[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T348[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T348[rsp]
	movdqa	XMMWORD PTR abiased_h$75[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR $T349[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T349[rsp]
	movdqa	XMMWORD PTR sum_l$354[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR $T350[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T350[rsp]
	movdqa	XMMWORD PTR sum_h$353[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR $T351[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T351[rsp]
	movdqa	XMMWORD PTR dif_l$359[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR $T352[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T352[rsp]
	movdqa	XMMWORD PTR dif_h$358[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$353[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T356[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$354[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T355[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T355[rsp]
	packssdw xmm0, XMMWORD PTR $T356[rsp]
	movdqa	XMMWORD PTR $T357[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T357[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$358[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T361[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$359[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T360[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T360[rsp]
	packssdw xmm0, XMMWORD PTR $T361[rsp]
	movdqa	XMMWORD PTR $T362[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T362[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$363[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T364[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T364[rsp]
	movdqa	XMMWORD PTR abiased_l$77[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$365[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T366[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T366[rsp]
	movdqa	XMMWORD PTR abiased_h$79[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR $T367[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T367[rsp]
	movdqa	XMMWORD PTR sum_l$372[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR $T368[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T368[rsp]
	movdqa	XMMWORD PTR sum_h$371[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR $T369[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T369[rsp]
	movdqa	XMMWORD PTR dif_l$377[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR $T370[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T370[rsp]
	movdqa	XMMWORD PTR dif_h$376[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$371[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T374[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$372[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T373[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T373[rsp]
	packssdw xmm0, XMMWORD PTR $T374[rsp]
	movdqa	XMMWORD PTR $T375[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T375[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$376[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T379[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$377[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T378[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T378[rsp]
	packssdw xmm0, XMMWORD PTR $T379[rsp]
	movdqa	XMMWORD PTR $T380[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T380[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$381[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T382[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T382[rsp]
	movdqa	XMMWORD PTR abiased_l$81[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$383[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T384[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T384[rsp]
	movdqa	XMMWORD PTR abiased_h$83[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR $T385[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T385[rsp]
	movdqa	XMMWORD PTR sum_l$390[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR $T386[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T386[rsp]
	movdqa	XMMWORD PTR sum_h$389[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR $T387[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T387[rsp]
	movdqa	XMMWORD PTR dif_l$395[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR $T388[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T388[rsp]
	movdqa	XMMWORD PTR dif_h$394[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$389[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T392[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$390[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T391[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T391[rsp]
	packssdw xmm0, XMMWORD PTR $T392[rsp]
	movdqa	XMMWORD PTR $T393[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T393[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$394[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T397[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$395[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T396[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T396[rsp]
	packssdw xmm0, XMMWORD PTR $T397[rsp]
	movdqa	XMMWORD PTR $T398[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T398[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2632
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	packuswb xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T399[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T399[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
; Line 2633
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	packuswb xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T400[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T400[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2634
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	packuswb xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T401[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T401[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2635
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	packuswb xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T402[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T402[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2638
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T403[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T403[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T404[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T404[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2639
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T405[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T405[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T406[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T406[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2642
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR $T407[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T407[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR $T408[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T408[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2643
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T409[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T409[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T410[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T410[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2646
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T411[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T411[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T412[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T412[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2647
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T413[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T413[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T414[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T414[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2650
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2651
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T415[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T415[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2652
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2653
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T416[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T416[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2654
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2655
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T417[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T417[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2656
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2657
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T418[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T418[rsp]
	movq	QWORD PTR [rax], xmm0
; Line 2669
	add	rsp, 7000				; 00001b58H
	ret	0
?stbi__idct_simd@@YAXPEAEHQEAF@Z ENDP			; stbi__idct_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
p3$1 = 40
t3$2 = 44
t2$3 = 48
t1$4 = 52
t0$5 = 56
p3$6 = 60
t3$7 = 64
t2$8 = 68
t1$9 = 72
t0$10 = 76
p2$11 = 80
p2$12 = 84
d$ = 88
dcterm$13 = 96
p1$14 = 100
i$ = 104
p1$15 = 108
p4$16 = 112
p4$17 = 116
o$ = 120
x0$18 = 128
x1$19 = 132
x2$20 = 136
x3$21 = 140
x0$22 = 144
x1$23 = 148
x2$24 = 152
x3$25 = 156
p5$26 = 160
p5$27 = 164
val$ = 176
__$ArrayPad$ = 432
out$ = 464
out_stride$ = 472
data$ = 480
?stbi__idct_block@@YAXPEAEHQEAF@Z PROC			; stbi__idct_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2434
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2435
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
; Line 2437
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR d$[rsp], rax
; Line 2440
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__idct
$LN2@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 2
	mov	QWORD PTR d$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 4
	mov	QWORD PTR v$[rsp], rax
$LN4@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN3@stbi__idct
; Line 2443
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
; Line 2448
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR dcterm$13[rsp], eax
; Line 2449
	mov	eax, 4
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 2450
	jmp	$LN9@stbi__idct
$LN8@stbi__idct:
; Line 2451
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$21[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p3$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$26[rsp], eax
	imul	eax, DWORD PTR t0$5[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$5[rsp], eax
	imul	eax, DWORD PTR t1$4[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$4[rsp], eax
	imul	eax, DWORD PTR t2$3[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR t3$2[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$2[rsp], eax
	imul	eax, DWORD PTR p1$14[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$1[rsp], eax
	imul	eax, DWORD PTR p4$16[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$5[rsp], eax
; Line 2454
	mov	eax, DWORD PTR x0$18[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR x1$19[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR x2$20[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, DWORD PTR x3$21[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x3$21[rsp], eax
; Line 2455
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2456
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 56				; 00000038H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2457
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2458
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2459
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2460
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2461
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2462
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN9@stbi__idct:
; Line 2464
	jmp	$LN2@stbi__idct
$LN3@stbi__idct:
; Line 2466
	mov	DWORD PTR i$[rsp], 0
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
	jmp	SHORT $LN7@stbi__idct
$LN5@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v$[rsp], rax
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
$LN7@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN6@stbi__idct
; Line 2468
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$22[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$25[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$23[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$24[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p3$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$27[rsp], eax
	imul	eax, DWORD PTR t0$10[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$10[rsp], eax
	imul	eax, DWORD PTR t1$9[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$9[rsp], eax
	imul	eax, DWORD PTR t2$8[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR t3$7[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$7[rsp], eax
	imul	eax, DWORD PTR p1$15[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$6[rsp], eax
	imul	eax, DWORD PTR p4$17[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$10[rsp], eax
; Line 2475
	mov	eax, DWORD PTR x0$22[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x0$22[rsp], eax
; Line 2476
	mov	eax, DWORD PTR x1$23[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x1$23[rsp], eax
; Line 2477
	mov	eax, DWORD PTR x2$24[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x2$24[rsp], eax
; Line 2478
	mov	eax, DWORD PTR x3$25[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x3$25[rsp], eax
; Line 2481
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2482
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2483
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2484
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2485
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2486
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2487
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2488
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2489
	jmp	$LN5@stbi__idct
$LN6@stbi__idct:
; Line 2490
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	ret	0
?stbi__idct_block@@YAXPEAEHQEAF@Z ENDP			; stbi__idct_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
?stbi__clamp@@YAEH@Z PROC				; stbi__clamp
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2383
	mov	DWORD PTR [rsp+8], ecx
; Line 2385
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jbe	SHORT $LN2@stbi__clam
; Line 2386
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN3@stbi__clam
	xor	al, al
	jmp	SHORT $LN1@stbi__clam
$LN3@stbi__clam:
; Line 2387
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jle	SHORT $LN4@stbi__clam
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__clam
$LN4@stbi__clam:
$LN2@stbi__clam:
; Line 2389
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__clam:
; Line 2390
	ret	0
?stbi__clamp@@YAEH@Z ENDP				; stbi__clamp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
bit$1 = 36
r$2 = 40
r$3 = 44
s$4 = 48
s$5 = 52
p$6 = 56
rs$7 = 64
zig$8 = 68
rs$9 = 72
p$10 = 80
shift$11 = 88
c$12 = 92
tv136 = 96
tv375 = 100
tv165 = 104
tv163 = 108
tv178 = 112
tv400 = 116
tv427 = 120
tv250 = 124
tv248 = 128
tv357 = 136
tv271 = 144
j$ = 176
data$ = 184
hac$ = 192
fac$ = 200
?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z PROC ; stbi__jpeg_decode_block_prog_ac
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2263
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 2265
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN13@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG87010
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN13@stbi__jpeg:
; Line 2267
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN14@stbi__jpeg
; Line 2268
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	DWORD PTR shift$11[rsp], eax
; Line 2270
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	SHORT $LN16@stbi__jpeg
; Line 2271
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2272
	mov	eax, 1
	jmp	$LN1@stbi__jpeg
$LN16@stbi__jpeg:
; Line 2275
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2279
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN17@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN17@stbi__jpeg:
; Line 2280
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$12[rsp], eax
; Line 2281
	movsxd	rax, DWORD PTR c$12[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$2[rsp], eax
; Line 2282
	cmp	DWORD PTR r$2[rsp], 0
	je	$LN18@stbi__jpeg
; Line 2283
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2284
	mov	eax, DWORD PTR r$2[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2285
	mov	eax, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv357[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv357[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2286
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$4[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2287
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv136[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv136[rsp]
	mov	DWORD PTR zig$8[rsp], eax
; Line 2288
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2289
	jmp	$LN19@stbi__jpeg
$LN18@stbi__jpeg:
; Line 2290
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$7[rsp], eax
; Line 2291
	cmp	DWORD PTR rs$7[rsp], 0
	jge	SHORT $LN20@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG87018
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN20@stbi__jpeg:
; Line 2292
	mov	eax, DWORD PTR rs$7[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2293
	mov	eax, DWORD PTR rs$7[rsp]
	sar	eax, 4
	mov	DWORD PTR r$2[rsp], eax
; Line 2294
	cmp	DWORD PTR s$4[rsp], 0
	jne	$LN21@stbi__jpeg
; Line 2295
	cmp	DWORD PTR r$2[rsp], 15
	jge	$LN23@stbi__jpeg
; Line 2296
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv375[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv375[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2297
	cmp	DWORD PTR r$2[rsp], 0
	je	SHORT $LN24@stbi__jpeg
; Line 2298
	mov	edx, DWORD PTR r$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ; stbi__jpeg_get_bits
	mov	DWORD PTR tv165[rsp], eax
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	mov	DWORD PTR tv163[rsp], eax
	mov	eax, DWORD PTR tv165[rsp]
	mov	ecx, DWORD PTR tv163[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN24@stbi__jpeg:
; Line 2299
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2300
	jmp	$LN3@stbi__jpeg
$LN23@stbi__jpeg:
; Line 2302
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2303
	jmp	SHORT $LN22@stbi__jpeg
$LN21@stbi__jpeg:
; Line 2304
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2305
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv178[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv178[rsp]
	mov	DWORD PTR zig$8[rsp], eax
; Line 2306
	mov	edx, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN22@stbi__jpeg:
$LN19@stbi__jpeg:
; Line 2309
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2310
	jmp	$LN15@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2313
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv400[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv400[rsp]
	shl	eax, cl
	mov	WORD PTR bit$1[rsp], ax
; Line 2315
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	$LN25@stbi__jpeg
; Line 2316
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2317
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN6@stbi__jpeg
; Line 2318
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$10[rsp], rax
; Line 2319
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN27@stbi__jpeg
; Line 2320
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN28@stbi__jpeg
; Line 2321
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN29@stbi__jpeg
; Line 2322
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN30@stbi__jpeg
; Line 2323
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN31@stbi__jpeg
$LN30@stbi__jpeg:
; Line 2325
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
$LN31@stbi__jpeg:
$LN29@stbi__jpeg:
$LN28@stbi__jpeg:
$LN27@stbi__jpeg:
; Line 2327
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2328
	jmp	$LN26@stbi__jpeg
$LN25@stbi__jpeg:
; Line 2329
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi__jpeg:
; Line 2332
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$9[rsp], eax
; Line 2333
	cmp	DWORD PTR rs$9[rsp], 0
	jge	SHORT $LN32@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG87031
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN32@stbi__jpeg:
; Line 2334
	mov	eax, DWORD PTR rs$9[rsp]
	and	eax, 15
	mov	DWORD PTR s$5[rsp], eax
; Line 2335
	mov	eax, DWORD PTR rs$9[rsp]
	sar	eax, 4
	mov	DWORD PTR r$3[rsp], eax
; Line 2336
	cmp	DWORD PTR s$5[rsp], 0
	jne	$LN33@stbi__jpeg
; Line 2337
	cmp	DWORD PTR r$3[rsp], 15
	jge	SHORT $LN35@stbi__jpeg
; Line 2338
	mov	eax, DWORD PTR r$3[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv427[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv427[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2339
	cmp	DWORD PTR r$3[rsp], 0
	je	SHORT $LN37@stbi__jpeg
; Line 2340
	mov	edx, DWORD PTR r$3[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ; stbi__jpeg_get_bits
	mov	DWORD PTR tv250[rsp], eax
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	mov	DWORD PTR tv248[rsp], eax
	mov	eax, DWORD PTR tv250[rsp]
	mov	ecx, DWORD PTR tv248[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN37@stbi__jpeg:
; Line 2341
	mov	DWORD PTR r$3[rsp], 64			; 00000040H
$LN35@stbi__jpeg:
; Line 2347
	jmp	SHORT $LN34@stbi__jpeg
$LN33@stbi__jpeg:
; Line 2348
	cmp	DWORD PTR s$5[rsp], 1
	je	SHORT $LN38@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG87038
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN38@stbi__jpeg:
; Line 2350
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN39@stbi__jpeg
; Line 2351
	movsx	eax, WORD PTR bit$1[rsp]
	mov	DWORD PTR s$5[rsp], eax
	jmp	SHORT $LN40@stbi__jpeg
$LN39@stbi__jpeg:
; Line 2353
	movsx	eax, WORD PTR bit$1[rsp]
	neg	eax
	mov	DWORD PTR s$5[rsp], eax
$LN40@stbi__jpeg:
$LN34@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 2357
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN12@stbi__jpeg
; Line 2358
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR tv271[rsp], rax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR tv271[rsp]
	mov	QWORD PTR p$6[rsp], rax
; Line 2359
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN41@stbi__jpeg
; Line 2360
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN43@stbi__jpeg
; Line 2361
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN44@stbi__jpeg
; Line 2362
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN45@stbi__jpeg
; Line 2363
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN46@stbi__jpeg
$LN45@stbi__jpeg:
; Line 2365
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
$LN46@stbi__jpeg:
$LN44@stbi__jpeg:
$LN43@stbi__jpeg:
; Line 2367
	jmp	SHORT $LN42@stbi__jpeg
$LN41@stbi__jpeg:
; Line 2368
	cmp	DWORD PTR r$3[rsp], 0
	jne	SHORT $LN47@stbi__jpeg
; Line 2369
	mov	rax, QWORD PTR p$6[rsp]
	movzx	ecx, WORD PTR s$5[rsp]
	mov	WORD PTR [rax], cx
; Line 2370
	jmp	SHORT $LN12@stbi__jpeg
$LN47@stbi__jpeg:
; Line 2372
	mov	eax, DWORD PTR r$3[rsp]
	dec	eax
	mov	DWORD PTR r$3[rsp], eax
$LN42@stbi__jpeg:
; Line 2374
	jmp	$LN11@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2375
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN10@stbi__jpeg
$LN26@stbi__jpeg:
$LN15@stbi__jpeg:
; Line 2378
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2379
	add	rsp, 168				; 000000a8H
	ret	0
?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z ENDP ; stbi__jpeg_decode_block_prog_ac
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
tv87 = 36
dc$ = 40
diff$ = 44
tv175 = 48
tv183 = 52
j$ = 80
data$ = 88
hdc$ = 96
b$ = 104
?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z PROC ; stbi__jpeg_decode_block_prog_dc
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2235
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2238
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18488], 0
	je	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG86967
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 2240
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN3@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN3@stbi__jpeg:
; Line 2242
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN4@stbi__jpeg
; Line 2244
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2245
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2246
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG86973
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2247
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN10@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN11@stbi__jpeg
$LN10@stbi__jpeg:
	mov	DWORD PTR tv87[rsp], 0
$LN11@stbi__jpeg:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2249
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2250
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2251
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv175[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv175[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2252
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
; Line 2254
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN8@stbi__jpeg
; Line 2255
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv183[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv183[rsp]
	shl	eax, cl
	cwde
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	movsx	ecx, WORD PTR [rdx+rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN8@stbi__jpeg:
$LN5@stbi__jpeg:
; Line 2257
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2258
	add	rsp, 72					; 00000048H
	ret	0
?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ENDP ; stbi__jpeg_decode_block_prog_dc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
r$1 = 36
s$2 = 40
zig$3 = 44
t$ = 48
rs$4 = 52
tv81 = 56
dc$ = 60
diff$ = 64
c$5 = 68
tv159 = 72
tv188 = 76
tv240 = 80
j$ = 112
data$ = 120
hdc$ = 128
hac$ = 136
fac$ = 144
b$ = 152
dequant$ = 160
?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z PROC ; stbi__jpeg_decode_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2183
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2187
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2188
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2189
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG86946
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2192
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2194
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN16@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN17@stbi__jpeg
$LN16@stbi__jpeg:
	mov	DWORD PTR tv81[rsp], 0
$LN17@stbi__jpeg:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2195
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2196
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2197
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2200
	mov	DWORD PTR k$[rsp], 1
$LN4@stbi__jpeg:
; Line 2204
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN8@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN8@stbi__jpeg:
; Line 2205
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$5[rsp], eax
; Line 2206
	movsxd	rax, DWORD PTR c$5[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$1[rsp], eax
; Line 2207
	cmp	DWORD PTR r$1[rsp], 0
	je	$LN9@stbi__jpeg
; Line 2208
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2209
	mov	eax, DWORD PTR r$1[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2210
	mov	eax, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv240[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv240[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2211
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$2[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2213
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv159[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv159[rsp]
	mov	DWORD PTR zig$3[rsp], eax
; Line 2214
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2215
	jmp	$LN10@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2216
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$4[rsp], eax
; Line 2217
	cmp	DWORD PTR rs$4[rsp], 0
	jge	SHORT $LN11@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG86951
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN11@stbi__jpeg:
; Line 2218
	mov	eax, DWORD PTR rs$4[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2219
	mov	eax, DWORD PTR rs$4[rsp]
	sar	eax, 4
	mov	DWORD PTR r$1[rsp], eax
; Line 2220
	cmp	DWORD PTR s$2[rsp], 0
	jne	SHORT $LN12@stbi__jpeg
; Line 2221
	cmp	DWORD PTR rs$4[rsp], 240		; 000000f0H
	je	SHORT $LN14@stbi__jpeg
	jmp	SHORT $LN3@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2222
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2223
	jmp	SHORT $LN13@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2224
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2226
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	mov	DWORD PTR zig$3[rsp], eax
; Line 2227
	mov	edx, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN13@stbi__jpeg:
$LN10@stbi__jpeg:
; Line 2230
	cmp	DWORD PTR k$[rsp], 64			; 00000040H
	jl	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2231
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2232
	add	rsp, 104				; 00000068H
	ret	0
?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ENDP ; stbi__jpeg_decode_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_get_bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2155
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2157
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 1
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2158
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	mov	DWORD PTR k$[rsp], eax
; Line 2159
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2160
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2161
	mov	eax, DWORD PTR k$[rsp]
	and	eax, -2147483648			; 80000000H
; Line 2162
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_get_bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
n$ = 72
?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__jpeg_get_bits
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2144
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2146
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2147
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2148
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2149
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2150
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2151
	mov	eax, DWORD PTR k$[rsp]
; Line 2152
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__jpeg_get_bits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
sgn$ = 36
j$ = 64
n$ = 72
?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__extend_receive
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2129
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2132
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__exte
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__exte:
; Line 2134
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 31
	mov	DWORD PTR sgn$[rsp], eax
; Line 2135
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2136
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2137
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2138
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2139
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jbias@@3QBHB
	mov	edx, DWORD PTR sgn$[rsp]
	dec	edx
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 2140
	add	rsp, 56					; 00000038H
	ret	0
?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__extend_receive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
c$ = 36
s$1 = 40
temp$ = 44
tv209 = 48
tv230 = 56
tv239 = 64
tv250 = 72
j$ = 96
h$ = 104
?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z PROC ; stbi__jpeg_huff_decode
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2075
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2079
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2083
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$[rsp], eax
; Line 2084
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 2085
	cmp	DWORD PTR k$[rsp], 255			; 000000ffH
	jge	$LN6@stbi__jpeg
; Line 2086
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2087
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR s$1[rsp], eax
	jle	SHORT $LN7@stbi__jpeg
; Line 2088
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN7@stbi__jpeg:
; Line 2089
	mov	eax, DWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv209[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv209[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2090
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2091
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2100
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 16
	mov	DWORD PTR temp$[rsp], eax
; Line 2101
	mov	DWORD PTR k$[rsp], 10
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2102
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1540]
	cmp	DWORD PTR temp$[rsp], eax
	jae	SHORT $LN8@stbi__jpeg
; Line 2103
	jmp	SHORT $LN3@stbi__jpeg
$LN8@stbi__jpeg:
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2104
	cmp	DWORD PTR k$[rsp], 17
	jne	SHORT $LN9@stbi__jpeg
; Line 2106
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, 16
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2107
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2110
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR k$[rsp], eax
	jle	SHORT $LN10@stbi__jpeg
; Line 2111
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN10@stbi__jpeg:
; Line 2114
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv230[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv230[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR k$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__bmask@@3QBIB
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	add	eax, DWORD PTR [rdx+rcx*4+1612]
	mov	DWORD PTR c$[rsp], eax
; Line 2115
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv239[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv239[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+1280]
	lea	rdx, OFFSET FLAT:?stbi__bmask@@3QBIB
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+512]
	cmp	eax, ecx
	je	SHORT $LN12@stbi__jpeg
	mov	r8d, 2115				; 00000843H
	lea	rdx, OFFSET FLAT:$SG86897
	lea	rcx, OFFSET FLAT:$SG86898
	call	_wassert
	xor	eax, eax
$LN12@stbi__jpeg:
; Line 2118
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2119
	mov	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv250[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv250[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2120
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
$LN1@stbi__jpeg:
; Line 2121
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ENDP ; stbi__jpeg_huff_decode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
tv70 = 36
b$2 = 40
j$ = 64
?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z PROC	; stbi__grow_buffer_unsafe
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2053
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__grow:
; Line 2055
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18476], 0
	je	SHORT $LN10@stbi__grow
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN11@stbi__grow
$LN10@stbi__grow:
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv70[rsp], eax
$LN11@stbi__grow:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR b$2[rsp], eax
; Line 2056
	cmp	DWORD PTR b$2[rsp], 255			; 000000ffH
	jne	SHORT $LN7@stbi__grow
; Line 2057
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
$LN5@stbi__grow:
; Line 2058
	cmp	DWORD PTR c$1[rsp], 255			; 000000ffH
	jne	SHORT $LN6@stbi__grow
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN5@stbi__grow
$LN6@stbi__grow:
; Line 2059
	cmp	DWORD PTR c$1[rsp], 0
	je	SHORT $LN8@stbi__grow
; Line 2060
	mov	rax, QWORD PTR j$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rax+18472], cl
; Line 2061
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 1
; Line 2062
	jmp	SHORT $LN1@stbi__grow
$LN8@stbi__grow:
$LN7@stbi__grow:
; Line 2065
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, 24
	sub	ecx, DWORD PTR [rax+18468]
	mov	eax, ecx
	movzx	ecx, al
	mov	eax, DWORD PTR b$2[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18464]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2066
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	add	eax, 8
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2067
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jle	$LN4@stbi__grow
$LN1@stbi__grow:
; Line 2068
	add	rsp, 56					; 00000038H
	ret	0
?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ENDP	; stbi__grow_buffer_unsafe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fast$1 = 0
i$ = 4
k$2 = 8
magbits$3 = 12
len$4 = 16
rs$5 = 20
tv173 = 24
m$6 = 28
tv177 = 32
run$7 = 36
fast_ac$ = 64
h$ = 72
?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z PROC	; stbi__build_fast_ac
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2028
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2030
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 512			; 00000200H
	jge	$LN3@stbi__buil
; Line 2031
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR fast$1[rsp], al
; Line 2032
	movsxd	rax, DWORD PTR i$[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 2033
	movzx	eax, BYTE PTR fast$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	$LN5@stbi__buil
; Line 2034
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	mov	DWORD PTR rs$5[rsp], eax
; Line 2035
	mov	eax, DWORD PTR rs$5[rsp]
	sar	eax, 4
	and	eax, 15
	mov	DWORD PTR run$7[rsp], eax
; Line 2036
	mov	eax, DWORD PTR rs$5[rsp]
	and	eax, 15
	mov	DWORD PTR magbits$3[rsp], eax
; Line 2037
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR len$4[rsp], eax
; Line 2039
	cmp	DWORD PTR magbits$3[rsp], 0
	je	$LN6@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, DWORD PTR len$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 9
	jg	$LN6@stbi__buil
; Line 2041
	mov	eax, DWORD PTR len$4[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, cl
	and	eax, 511				; 000001ffH
	mov	ecx, 9
	sub	ecx, DWORD PTR magbits$3[rsp]
	sar	eax, cl
	mov	DWORD PTR k$2[rsp], eax
; Line 2042
	mov	eax, DWORD PTR magbits$3[rsp]
	dec	eax
	mov	ecx, 1
	mov	DWORD PTR tv173[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv173[rsp]
	shl	eax, cl
	mov	DWORD PTR m$6[rsp], eax
; Line 2043
	mov	eax, DWORD PTR m$6[rsp]
	cmp	DWORD PTR k$2[rsp], eax
	jge	SHORT $LN7@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, -1					; ffffffffH
	mov	DWORD PTR tv177[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv177[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR k$2[rsp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	DWORD PTR k$2[rsp], eax
$LN7@stbi__buil:
; Line 2045
	cmp	DWORD PTR k$2[rsp], -128		; ffffffffffffff80H
	jl	SHORT $LN8@stbi__buil
	cmp	DWORD PTR k$2[rsp], 127			; 0000007fH
	jg	SHORT $LN8@stbi__buil
; Line 2046
	imul	eax, DWORD PTR k$2[rsp], 256		; 00000100H
	imul	ecx, DWORD PTR run$7[rsp], 16
	add	eax, ecx
	mov	ecx, DWORD PTR magbits$3[rsp]
	mov	edx, DWORD PTR len$4[rsp]
	add	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN8@stbi__buil:
$LN6@stbi__buil:
$LN5@stbi__buil:
; Line 2049
	jmp	$LN2@stbi__buil
$LN3@stbi__buil:
; Line 2050
	add	rsp, 56					; 00000038H
	ret	0
?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z ENDP	; stbi__build_fast_ac
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
k$ = 36
i$ = 40
code$ = 44
tv140 = 48
s$1 = 52
tv235 = 56
m$2 = 60
c$3 = 64
h$ = 96
count$ = 104
?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z PROC	; stbi__build_huffman
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1984
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1985
	mov	DWORD PTR k$[rsp], 0
; Line 1988
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN3@stbi__buil
; Line 1989
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__buil
$LN5@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__buil:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__buil
; Line 1990
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rdx+rcx+1280], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN5@stbi__buil
$LN6@stbi__buil:
	jmp	SHORT $LN2@stbi__buil
$LN3@stbi__buil:
; Line 1991
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rcx+rax+1280], 0
; Line 1994
	mov	DWORD PTR code$[rsp], 0
; Line 1995
	mov	DWORD PTR k$[rsp], 0
; Line 1996
	mov	DWORD PTR j$[rsp], 1
	jmp	SHORT $LN10@stbi__buil
$LN8@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stbi__buil:
	cmp	DWORD PTR j$[rsp], 16
	jg	$LN9@stbi__buil
; Line 1998
	mov	eax, DWORD PTR code$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1612], eax
; Line 1999
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN19@stbi__buil
$LN11@stbi__buil:
; Line 2000
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN12@stbi__buil
; Line 2001
	movzx	eax, WORD PTR code$[rsp]
	mov	WORD PTR tv140[rsp], ax
	mov	eax, DWORD PTR code$[rsp]
	inc	eax
	mov	DWORD PTR code$[rsp], eax
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, WORD PTR tv140[rsp]
	mov	WORD PTR [rcx+rax*2+512], dx
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN11@stbi__buil
$LN12@stbi__buil:
; Line 2002
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR j$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jb	SHORT $LN20@stbi__buil
	lea	rcx, OFFSET FLAT:$SG86842
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__buil
$LN20@stbi__buil:
$LN19@stbi__buil:
; Line 2005
	mov	eax, 16
	sub	eax, DWORD PTR j$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1540], eax
; Line 2006
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 2007
	jmp	$LN8@stbi__buil
$LN9@stbi__buil:
; Line 2008
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+rax*4+1540], -1		; ffffffffH
; Line 2011
	mov	rax, QWORD PTR h$[rsp]
	mov	r8d, 512				; 00000200H
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	memset
; Line 2012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@stbi__buil
$LN13@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@stbi__buil:
	mov	eax, DWORD PTR k$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN14@stbi__buil
; Line 2013
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2014
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN21@stbi__buil
; Line 2015
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+512]
	mov	ecx, 9
	sub	ecx, DWORD PTR s$1[rsp]
	shl	eax, cl
	mov	DWORD PTR c$3[rsp], eax
; Line 2016
	mov	eax, 9
	sub	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv235[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv235[rsp]
	shl	eax, cl
	mov	DWORD PTR m$2[rsp], eax
; Line 2017
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi__buil
$LN16@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi__buil:
	mov	eax, DWORD PTR m$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN17@stbi__buil
; Line 2018
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR c$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, BYTE PTR i$[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 2019
	jmp	SHORT $LN16@stbi__buil
$LN17@stbi__buil:
$LN21@stbi__buil:
; Line 2021
	jmp	$LN13@stbi__buil
$LN14@stbi__buil:
; Line 2022
	mov	eax, 1
$LN1@stbi__buil:
; Line 2023
	add	rsp, 88					; 00000058H
	ret	0
?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ENDP	; stbi__build_huffman
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
dest$1 = 40
src$2 = 48
j$ = 56
tv130 = 60
tv82 = 64
tv357 = 68
good$ = 72
tv262 = 80
tv282 = 84
tv304 = 88
tv324 = 92
data$ = 112
img_n$ = 120
req_comp$ = 128
x$ = 136
y$ = 144
?stbi__convert_format16@@YAPEAGPEAGHHII@Z PROC		; stbi__convert_format16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1793
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1797
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1798
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1798				; 00000706H
	lea	rdx, OFFSET FLAT:$SG86618
	lea	rcx, OFFSET FLAT:$SG86619
	call	_wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1800
	mov	eax, DWORD PTR req_comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	ecx, eax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR good$[rsp], rax
; Line 1801
	cmp	QWORD PTR good$[rsp], 0
	jne	SHORT $LN44@stbi__conv
; Line 1802
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1803
	lea	rcx, OFFSET FLAT:$SG86621
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	DWORD PTR tv82[rsp], 0
$LN62@stbi__conv:
	movsxd	rax, DWORD PTR tv82[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1806
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1807
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR src$2[rsp], rax
; Line 1808
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR dest$1[rsp], rax
; Line 1814
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv130[rsp], eax
	mov	eax, DWORD PTR tv130[rsp]
	sub	eax, 10
	mov	DWORD PTR tv130[rsp], eax
	cmp	DWORD PTR tv130[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv130[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1815
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1816
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1817
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1818
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1819
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1820
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1821
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1822
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv262[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv262[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1823
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv282[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv282[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1824
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv304[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv304[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1825
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv324[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv324[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1826
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	SHORT $LN5@stbi__conv
$LN57@stbi__conv:
; Line 1827
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1827				; 00000723H
	lea	rdx, OFFSET FLAT:$SG86635
	lea	rcx, OFFSET FLAT:$SG86636
	call	_wassert
	xor	eax, eax
$LN63@stbi__conv:
	mov	rcx, QWORD PTR data$[rsp]
	call	free
	mov	rcx, QWORD PTR good$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG86637
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	DWORD PTR tv357[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	DWORD PTR tv357[rsp], 0
$LN65@stbi__conv:
	movsxd	rax, DWORD PTR tv357[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1830
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1832
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1833
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1834
	add	rsp, 104				; 00000068H
	ret	0
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
?stbi__convert_format16@@YAPEAGPEAGHHII@Z ENDP		; stbi__convert_format16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
?stbi__compute_y_16@@YAGHHH@Z PROC			; stbi__compute_y_16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1784
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1785
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1786
	ret	0
?stbi__compute_y_16@@YAGHHH@Z ENDP			; stbi__compute_y_16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
dest$1 = 40
src$2 = 48
j$ = 56
tv95 = 60
tv81 = 64
tv354 = 68
good$ = 72
tv259 = 80
tv279 = 84
tv301 = 88
tv321 = 92
data$ = 112
img_n$ = 120
req_comp$ = 128
x$ = 136
y$ = 144
?stbi__convert_format@@YAPEAEPEAEHHII@Z PROC		; stbi__convert_format
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1736
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1740
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1741
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1741				; 000006cdH
	lea	rdx, OFFSET FLAT:$SG86526
	lea	rcx, OFFSET FLAT:$SG86527
	call	_wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1743
	xor	r9d, r9d
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR good$[rsp], rax
; Line 1744
	cmp	QWORD PTR good$[rsp], 0
	jne	SHORT $LN44@stbi__conv
; Line 1745
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1746
	lea	rcx, OFFSET FLAT:$SG86529
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	DWORD PTR tv81[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	DWORD PTR tv81[rsp], 0
$LN62@stbi__conv:
	movsxd	rax, DWORD PTR tv81[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1749
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1750
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR src$2[rsp], rax
; Line 1751
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$1[rsp], rax
; Line 1757
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv95[rsp], eax
	mov	eax, DWORD PTR tv95[rsp]
	sub	eax, 10
	mov	DWORD PTR tv95[rsp], eax
	cmp	DWORD PTR tv95[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv95[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1758
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1759
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1760
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1761
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1762
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1763
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1764
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1765
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv259[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv259[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1766
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv279[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv279[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1767
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv301[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv301[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1768
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv321[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv321[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1769
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	SHORT $LN5@stbi__conv
$LN57@stbi__conv:
; Line 1770
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1770				; 000006eaH
	lea	rdx, OFFSET FLAT:$SG86543
	lea	rcx, OFFSET FLAT:$SG86544
	call	_wassert
	xor	eax, eax
$LN63@stbi__conv:
	mov	rcx, QWORD PTR data$[rsp]
	call	free
	mov	rcx, QWORD PTR good$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG86545
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	DWORD PTR tv354[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	DWORD PTR tv354[rsp], 0
$LN65@stbi__conv:
	movsxd	rax, DWORD PTR tv354[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1773
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1775
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1776
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1777
	add	rsp, 104				; 00000068H
	ret	0
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
?stbi__convert_format@@YAPEAEPEAEHHII@Z ENDP		; stbi__convert_format
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
?stbi__compute_y@@YAEHHH@Z PROC				; stbi__compute_y
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1727
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1728
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1729
	ret	0
?stbi__compute_y@@YAEHHH@Z ENDP				; stbi__compute_y
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
?stbi__get32le@@YAIPEAUstbi__context@@@Z PROC		; stbi__get32le
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1703
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1704
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR z$[rsp], eax
; Line 1705
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	shl	eax, 16
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 1706
	mov	eax, DWORD PTR z$[rsp]
; Line 1707
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get32le@@YAIPEAUstbi__context@@@Z ENDP		; stbi__get32le
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
?stbi__get16le@@YAHPEAUstbi__context@@@Z PROC		; stbi__get16le
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1695
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1696
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1697
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1698
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get16le@@YAHPEAUstbi__context@@@Z ENDP		; stbi__get16le
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv66 = 36
s$ = 64
?stbi__get32be@@YAIPEAUstbi__context@@@Z PROC		; stbi__get32be
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1685
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1686
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR z$[rsp], eax
; Line 1687
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 16
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	ecx, DWORD PTR tv66[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1688
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get32be@@YAIPEAUstbi__context@@@Z ENDP		; stbi__get32be
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv67 = 36
s$ = 64
?stbi__get16be@@YAHPEAUstbi__context@@@Z PROC		; stbi__get16be
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1675
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1676
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1677
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv67[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv67[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1678
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get16be@@YAHPEAUstbi__context@@@Z ENDP		; stbi__get16be
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv91 = 36
count$2 = 40
res$3 = 44
tv88 = 48
s$ = 80
buffer$ = 88
n$ = 96
?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z PROC		; stbi__getn
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1647
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1648
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN2@stbi__getn
; Line 1649
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1650
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	$LN3@stbi__getn
; Line 1653
	movsxd	rax, DWORD PTR blen$1[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1655
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv88[rsp], rax
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR blen$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv88[rsp]
	mov	DWORD PTR count$2[rsp], eax
; Line 1656
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR count$2[rsp], eax
	jne	SHORT $LN7@stbi__getn
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN8@stbi__getn
$LN7@stbi__getn:
	mov	DWORD PTR tv91[rsp], 0
$LN8@stbi__getn:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR res$3[rsp], eax
; Line 1657
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1658
	mov	eax, DWORD PTR res$3[rsp]
	jmp	SHORT $LN1@stbi__getn
$LN3@stbi__getn:
$LN2@stbi__getn:
; Line 1662
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	rax, QWORD PTR [rcx+200]
	ja	SHORT $LN4@stbi__getn
; Line 1663
	movsxd	rax, DWORD PTR n$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1664
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1665
	mov	eax, 1
	jmp	SHORT $LN1@stbi__getn
; Line 1666
	jmp	SHORT $LN5@stbi__getn
$LN4@stbi__getn:
; Line 1667
	xor	eax, eax
$LN5@stbi__getn:
$LN1@stbi__getn:
; Line 1668
	add	rsp, 72					; 00000048H
	ret	0
?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ENDP		; stbi__getn
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv85 = 40
s$ = 64
n$ = 72
?stbi__skip@@YAXPEAUstbi__context@@H@Z PROC		; stbi__skip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1625
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1626
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__skip
	jmp	$LN1@stbi__skip
$LN2@stbi__skip:
; Line 1627
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN3@stbi__skip
; Line 1628
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1629
	jmp	$LN1@stbi__skip
$LN3@stbi__skip:
; Line 1631
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN4@stbi__skip
; Line 1632
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1633
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	SHORT $LN5@stbi__skip
; Line 1634
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1635
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv85[rsp], rax
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv85[rsp]
; Line 1636
	jmp	SHORT $LN1@stbi__skip
$LN5@stbi__skip:
$LN4@stbi__skip:
; Line 1639
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
$LN1@stbi__skip:
; Line 1640
	add	rsp, 56					; 00000038H
	ret	0
?stbi__skip@@YAXPEAUstbi__context@@H@Z ENDP		; stbi__skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
tv73 = 40
s$ = 64
?stbi__at_eof@@YAHPEAUstbi__context@@@Z PROC		; stbi__at_eof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1609
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1610
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@stbi__at_e
; Line 1611
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv73[rsp]
	test	eax, eax
	jne	SHORT $LN3@stbi__at_e
	xor	eax, eax
	jmp	SHORT $LN1@stbi__at_e
$LN3@stbi__at_e:
; Line 1614
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__at_e
	mov	eax, 1
	jmp	SHORT $LN1@stbi__at_e
$LN4@stbi__at_e:
$LN2@stbi__at_e:
; Line 1617
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jb	SHORT $LN6@stbi__at_e
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN7@stbi__at_e
$LN6@stbi__at_e:
	mov	DWORD PTR tv80[rsp], 0
$LN7@stbi__at_e:
	mov	eax, DWORD PTR tv80[rsp]
$LN1@stbi__at_e:
; Line 1618
	add	rsp, 56					; 00000038H
	ret	0
?stbi__at_eof@@YAHPEAUstbi__context@@@Z ENDP		; stbi__at_eof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv81 = 33
s$ = 64
?stbi__get8@@YAEPEAUstbi__context@@@Z PROC		; stbi__get8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1595
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1596
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jae	SHORT $LN2@stbi__get8
; Line 1597
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv72[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv72[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN2@stbi__get8:
; Line 1598
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN3@stbi__get8
; Line 1599
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ; stbi__refill_buffer
; Line 1600
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv81[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv81[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN3@stbi__get8:
; Line 1602
	xor	al, al
$LN1@stbi__get8:
; Line 1603
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get8@@YAEPEAUstbi__context@@@Z ENDP		; stbi__get8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
tv129 = 52
hdr_data$1 = 56
data$ = 64
ri$2 = 72
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z PROC ; stbi__loadf_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1441
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1444
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
; Line 1446
	lea	rax, QWORD PTR ri$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__hdr_load
	mov	QWORD PTR hdr_data$1[rsp], rax
; Line 1447
	cmp	QWORD PTR hdr_data$1[rsp], 0
	je	SHORT $LN3@stbi__load
; Line 1448
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR hdr_data$1[rsp]
	call	?stbi__float_postprocess@@YAXPEAMPEAH11H@Z ; stbi__float_postprocess
$LN3@stbi__load:
; Line 1449
	mov	rax, QWORD PTR hdr_data$1[rsp]
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1452
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
	mov	QWORD PTR data$[rsp], rax
; Line 1453
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1454
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN7@stbi__load
$LN6@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv89[rsp], eax
$LN7@stbi__load:
	mov	r9d, DWORD PTR tv89[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z	; stbi__ldr_to_hdr
	jmp	SHORT $LN1@stbi__load
$LN4@stbi__load:
; Line 1455
	lea	rcx, OFFSET FLAT:$SG86310
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN9@stbi__load
$LN8@stbi__load:
	mov	DWORD PTR tv129[rsp], 0
$LN9@stbi__load:
	movsxd	rax, DWORD PTR tv129[rsp]
$LN1@stbi__load:
; Line 1456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__loadf_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stbi__fopen
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1337
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN2@stbi__fope
; Line 1338
	mov	QWORD PTR f$[rsp], 0
$LN2@stbi__fope:
; Line 1342
	mov	rax, QWORD PTR f$[rsp]
; Line 1343
	add	rsp, 56					; 00000038H
	ret	0
?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stbi__fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
tv81 = 36
channels$1 = 40
result$ = 64
x$ = 72
y$ = 80
comp$ = 88
req_comp$ = 96
?stbi__float_postprocess@@YAXPEAMPEAH11H@Z PROC		; stbi__float_postprocess
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1295
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1296
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi__floa
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN5@stbi__floa
$LN4@stbi__floa:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv77[rsp], eax
$LN5@stbi__floa:
	cmp	DWORD PTR tv77[rsp], 0
	je	SHORT $LN2@stbi__floa
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi__floa
; Line 1297
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__floa
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN7@stbi__floa
$LN6@stbi__floa:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv81[rsp], eax
$LN7@stbi__floa:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1298
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 2
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN2@stbi__floa:
; Line 1300
	add	rsp, 56					; 00000038H
	ret	0
?stbi__float_postprocess@@YAXPEAMPEAH11H@Z ENDP		; stbi__float_postprocess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z PROC ; stbi__load_and_postprocess_16bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1267
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1269
	mov	DWORD PTR [rsp+48], 16
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1271
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1272
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1275
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1275				; 000004fbH
	lea	rdx, OFFSET FLAT:$SG86172
	lea	rcx, OFFSET FLAT:$SG86173
	call	_wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1277
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN3@stbi__load
; Line 1278
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z	; stbi__convert_8_to_16
	mov	QWORD PTR result$[rsp], rax
; Line 1279
	mov	DWORD PTR ri$[rsp], 16
$LN3@stbi__load:
; Line 1285
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1286
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1287
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 1
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN4@stbi__load:
; Line 1290
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1291
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__load_and_postprocess_16bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z PROC ; stbi__load_and_postprocess_8bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1241
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1243
	mov	DWORD PTR [rsp+48], 8
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1245
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1246
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1249
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1249				; 000004e1H
	lea	rdx, OFFSET FLAT:$SG86152
	lea	rcx, OFFSET FLAT:$SG86153
	call	_wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1251
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN3@stbi__load
; Line 1252
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z	; stbi__convert_16_to_8
	mov	QWORD PTR result$[rsp], rax
; Line 1253
	mov	DWORD PTR ri$[rsp], 8
$LN3@stbi__load:
; Line 1258
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1259
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1260
	mov	r9d, DWORD PTR channels$1[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN4@stbi__load:
; Line 1263
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1264
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__load_and_postprocess_8bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slice$ = 32
slice_size$ = 36
bytes$ = 40
image$ = 64
w$ = 72
h$ = 80
z$ = 88
bytes_per_pixel$ = 96
?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z PROC		; stbi__vertical_flip_slices
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1228
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1230
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR bytes_per_pixel$[rsp]
	mov	DWORD PTR slice_size$[rsp], eax
; Line 1232
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1233
	mov	DWORD PTR slice$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR slice$[rsp]
	inc	eax
	mov	DWORD PTR slice$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR slice$[rsp], eax
	jge	SHORT $LN3@stbi__vert
; Line 1234
	mov	r9d, DWORD PTR bytes_per_pixel$[rsp]
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
; Line 1235
	movsxd	rax, DWORD PTR slice_size$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes$[rsp], rax
; Line 1236
	jmp	SHORT $LN2@stbi__vert
$LN3@stbi__vert:
; Line 1237
	add	rsp, 56					; 00000038H
	ret	0
?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z ENDP		; stbi__vertical_flip_slices
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 32
bytes_copy$1 = 40
bytes_left$2 = 48
row0$3 = 56
row1$4 = 64
bytes_per_row$ = 72
bytes$ = 80
tv80 = 88
temp$ = 96
__$ArrayPad$ = 2144
image$ = 2176
w$ = 2184
h$ = 2192
bytes_per_pixel$ = 2200
?stbi__vertical_flip@@YAXPEAXHHH@Z PROC			; stbi__vertical_flip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1203
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2168				; 00000878H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1205
	movsxd	rax, DWORD PTR w$[rsp]
	movsxd	rcx, DWORD PTR bytes_per_pixel$[rsp]
	imul	rax, rcx
	mov	QWORD PTR bytes_per_row$[rsp], rax
; Line 1207
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1209
	mov	DWORD PTR row$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR h$[rsp]
	sar	eax, 1
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN3@stbi__vert
; Line 1210
	movsxd	rax, DWORD PTR row$[rsp]
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1211
	mov	eax, DWORD PTR row$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	cdqe
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1213
	mov	rax, QWORD PTR bytes_per_row$[rsp]
	mov	QWORD PTR bytes_left$2[rsp], rax
$LN5@stbi__vert:
; Line 1214
	cmp	QWORD PTR bytes_left$2[rsp], 0
	je	$LN6@stbi__vert
; Line 1215
	cmp	QWORD PTR bytes_left$2[rsp], 2048	; 00000800H
	jae	SHORT $LN8@stbi__vert
	mov	rax, QWORD PTR bytes_left$2[rsp]
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN9@stbi__vert
$LN8@stbi__vert:
	mov	QWORD PTR tv80[rsp], 2048		; 00000800H
$LN9@stbi__vert:
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR bytes_copy$1[rsp], rax
; Line 1216
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row0$3[rsp]
	lea	rcx, QWORD PTR temp$[rsp]
	call	memcpy
; Line 1217
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row1$4[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	call	memcpy
; Line 1218
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	lea	rdx, QWORD PTR temp$[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	call	memcpy
; Line 1219
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1220
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1221
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR bytes_left$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes_left$2[rsp], rax
; Line 1222
	jmp	$LN5@stbi__vert
$LN6@stbi__vert:
; Line 1223
	jmp	$LN2@stbi__vert
$LN3@stbi__vert:
; Line 1224
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2168				; 00000878H
	ret	0
?stbi__vertical_flip@@YAXPEAXHHH@Z ENDP			; stbi__vertical_flip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv74 = 36
img_len$ = 40
enlarged$ = 48
orig$ = 80
w$ = 88
h$ = 96
channels$ = 104
?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z PROC		; stbi__convert_8_to_16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1187
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1189
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1192
	mov	eax, DWORD PTR img_len$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR enlarged$[rsp], rax
; Line 1193
	cmp	QWORD PTR enlarged$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG86100
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	DWORD PTR tv74[rsp], 0
$LN8@stbi__conv:
	movsxd	rax, DWORD PTR tv74[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1195
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1196
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR orig$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR enlarged$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1198
	mov	rcx, QWORD PTR orig$[rsp]
	call	free
; Line 1199
	mov	rax, QWORD PTR enlarged$[rsp]
$LN1@stbi__conv:
; Line 1200
	add	rsp, 72					; 00000048H
	ret	0
?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z ENDP		; stbi__convert_8_to_16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv73 = 36
img_len$ = 40
reduced$ = 48
orig$ = 80
w$ = 88
h$ = 96
channels$ = 104
?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z PROC		; stbi__convert_16_to_8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1171
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1173
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1176
	movsxd	rax, DWORD PTR img_len$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR reduced$[rsp], rax
; Line 1177
	cmp	QWORD PTR reduced$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG86081
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	DWORD PTR tv73[rsp], 0
$LN8@stbi__conv:
	movsxd	rax, DWORD PTR tv73[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1179
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1180
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR reduced$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1182
	mov	rcx, QWORD PTR orig$[rsp]
	call	free
; Line 1183
	mov	rax, QWORD PTR reduced$[rsp]
$LN1@stbi__conv:
; Line 1184
	add	rsp, 72					; 00000048H
	ret	0
?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z ENDP		; stbi__convert_16_to_8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv185 = 64
tv203 = 68
hdr$1 = 72
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
bpc$ = 144
?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z PROC ; stbi__load_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1118
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1119
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, QWORD PTR ri$[rsp]
	call	memset
; Line 1120
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
; Line 1121
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 1122
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 1127
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_test@@YAHPEAUstbi__context@@@Z ; stbi__png_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__png_load
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1130
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_test@@YAHPEAUstbi__context@@@Z ; stbi__bmp_test
	test	eax, eax
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__bmp_load
	jmp	$LN1@stbi__load
$LN3@stbi__load:
; Line 1133
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test@@YAHPEAUstbi__context@@@Z ; stbi__gif_test
	test	eax, eax
	je	SHORT $LN4@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__gif_load
	jmp	$LN1@stbi__load
$LN4@stbi__load:
; Line 1136
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_test@@YAHPEAUstbi__context@@@Z ; stbi__psd_test
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	eax, DWORD PTR bpc$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__psd_load
	jmp	$LN1@stbi__load
$LN5@stbi__load:
; Line 1141
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_test@@YAHPEAUstbi__context@@@Z ; stbi__pic_test
	test	eax, eax
	je	SHORT $LN6@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__pic_load
	jmp	$LN1@stbi__load
$LN6@stbi__load:
; Line 1148
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z ; stbi__jpeg_test
	test	eax, eax
	je	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__jpeg_load
	jmp	$LN1@stbi__load
$LN7@stbi__load:
; Line 1151
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_test@@YAHPEAUstbi__context@@@Z ; stbi__pnm_test
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__pnm_load
	jmp	$LN1@stbi__load
$LN8@stbi__load:
; Line 1155
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	je	SHORT $LN9@stbi__load
; Line 1156
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__hdr_load
	mov	QWORD PTR hdr$1[rsp], rax
; Line 1157
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN12@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv185[rsp], eax
$LN13@stbi__load:
	mov	r9d, DWORD PTR tv185[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR hdr$1[rsp]
	call	?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z	; stbi__hdr_to_ldr
	jmp	SHORT $LN1@stbi__load
$LN9@stbi__load:
; Line 1163
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_test@@YAHPEAUstbi__context@@@Z ; stbi__tga_test
	test	eax, eax
	je	SHORT $LN10@stbi__load
; Line 1164
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__tga_load
	jmp	SHORT $LN1@stbi__load
$LN10@stbi__load:
; Line 1167
	lea	rcx, OFFSET FLAT:$SG86063
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__load
	mov	DWORD PTR tv203[rsp], 0
	jmp	SHORT $LN15@stbi__load
$LN14@stbi__load:
	mov	DWORD PTR tv203[rsp], 0
$LN15@stbi__load:
	movsxd	rax, DWORD PTR tv203[rsp]
$LN1@stbi__load:
; Line 1168
	add	rsp, 88					; 00000058H
	ret	0
?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ENDP ; stbi__load_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
i$ = 36
z$1 = 40
z$2 = 44
tv75 = 48
n$ = 52
output$ = 56
tv94 = 64
data$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z PROC			; stbi__hdr_to_ldr
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1865
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1868
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN8@stbi__hdr_:
; Line 1869
	xor	r9d, r9d
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR output$[rsp], rax
; Line 1870
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	mov	rcx, QWORD PTR data$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG86696
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__hdr_
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN19@stbi__hdr_
$LN18@stbi__hdr_:
	mov	DWORD PTR tv75[rsp], 0
$LN19@stbi__hdr_:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	$LN1@stbi__hdr_
$LN9@stbi__hdr_:
; Line 1872
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@stbi__hdr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN11@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__hdr_:
; Line 1873
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__hdr_
; Line 1874
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__hdr_
$LN5@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__hdr_
; Line 1875
	cvtss2sd xmm0, DWORD PTR ?stbi__h2l_gamma_i@@3MA
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	mulss	xmm1, DWORD PTR ?stbi__h2l_scale_i@@3MA
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv94[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv94[rsp]
	call	pow
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$1[rsp], xmm0
; Line 1876
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$1[rsp]
	jbe	SHORT $LN12@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$1[rsp], xmm0
$LN12@stbi__hdr_:
; Line 1877
	movss	xmm0, DWORD PTR z$1[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN13@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$1[rsp], xmm0
$LN13@stbi__hdr_:
; Line 1878
	cvttss2si eax, DWORD PTR z$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1879
	jmp	$LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 1880
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__hdr_
; Line 1881
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$2[rsp], xmm0
; Line 1882
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$2[rsp]
	jbe	SHORT $LN15@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$2[rsp], xmm0
$LN15@stbi__hdr_:
; Line 1883
	movss	xmm0, DWORD PTR z$2[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN16@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$2[rsp], xmm0
$LN16@stbi__hdr_:
; Line 1884
	cvttss2si eax, DWORD PTR z$2[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN14@stbi__hdr_:
; Line 1886
	jmp	$LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 1887
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1888
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__hdr_:
; Line 1889
	add	rsp, 88					; 00000058H
	ret	0
?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z ENDP			; stbi__hdr_to_ldr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
k$ = 52
n$ = 56
tv76 = 60
output$ = 64
tv134 = 72
data$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z PROC			; stbi__ldr_to_hdr
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1839
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1842
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN11@stbi__ldr_
	xor	eax, eax
	jmp	$LN1@stbi__ldr_
$LN11@stbi__ldr_:
; Line 1843
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR output$[rsp], rax
; Line 1844
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN12@stbi__ldr_
	mov	rcx, QWORD PTR data$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG86664
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__ldr_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN18@stbi__ldr_
$LN17@stbi__ldr_:
	mov	DWORD PTR tv76[rsp], 0
$LN18@stbi__ldr_:
	movsxd	rax, DWORD PTR tv76[rsp]
	jmp	$LN1@stbi__ldr_
$LN12@stbi__ldr_:
; Line 1846
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN13@stbi__ldr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN14@stbi__ldr_
$LN13@stbi__ldr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN14@stbi__ldr_:
; Line 1847
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__ldr_
$LN2@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__ldr_
; Line 1848
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__ldr_
$LN5@stbi__ldr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__ldr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN6@stbi__ldr_
; Line 1849
	cvtss2sd xmm0, DWORD PTR ?stbi__l2h_gamma@@3MA
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@437f0000
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv134[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv134[rsp]
	call	pow
	cvtss2sd xmm1, DWORD PTR ?stbi__l2h_scale@@3MA
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1850
	jmp	$LN5@stbi__ldr_
$LN6@stbi__ldr_:
; Line 1851
	jmp	$LN2@stbi__ldr_
$LN3@stbi__ldr_:
; Line 1852
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN15@stbi__ldr_
; Line 1853
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__ldr_
$LN8@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__ldr_
; Line 1854
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1855
	jmp	SHORT $LN8@stbi__ldr_
$LN9@stbi__ldr_:
$LN15@stbi__ldr_:
; Line 1857
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1858
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__ldr_:
; Line 1859
	add	rsp, 88					; 00000058H
	ret	0
?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z ENDP			; stbi__ldr_to_hdr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
?stbi__malloc_mad4@@YAPEAXHHHHH@Z PROC			; stbi__malloc_mad4
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1060
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1061
	mov	eax, DWORD PTR add$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1062
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1063
	add	rsp, 56					; 00000038H
	ret	0
?stbi__malloc_mad4@@YAPEAXHHHHH@Z ENDP			; stbi__malloc_mad4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
c$ = 64
add$ = 72
?stbi__malloc_mad3@@YAPEAXHHHH@Z PROC			; stbi__malloc_mad3
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1053
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1054
	mov	r9d, DWORD PTR add$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1055
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1056
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc_mad3@@YAPEAXHHHH@Z ENDP			; stbi__malloc_mad3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
add$ = 64
?stbi__malloc_mad2@@YAPEAXHHH@Z PROC			; stbi__malloc_mad2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1046
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1047
	mov	r8d, DWORD PTR add$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad2sizes_valid@@YAHHHH@Z	; stbi__mad2sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1048
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1049
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc_mad2@@YAPEAXHHH@Z ENDP			; stbi__malloc_mad2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = 32
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
?stbi__mad4sizes_valid@@YAHHHHHH@Z PROC			; stbi__mad4sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1037
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1038
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@stbi__mad4
$LN3@stbi__mad4:
	mov	DWORD PTR tv86[rsp], 0
$LN4@stbi__mad4:
	mov	eax, DWORD PTR tv86[rsp]
; Line 1040
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad4sizes_valid@@YAHHHHHH@Z ENDP			; stbi__mad4sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
a$ = 64
b$ = 72
c$ = 80
add$ = 88
?stbi__mad3sizes_valid@@YAHHHHH@Z PROC			; stbi__mad3sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1029
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1030
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN4@stbi__mad3
$LN3@stbi__mad3:
	mov	DWORD PTR tv79[rsp], 0
$LN4@stbi__mad3:
	mov	eax, DWORD PTR tv79[rsp]
; Line 1032
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad3sizes_valid@@YAHHHHH@Z ENDP			; stbi__mad3sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
a$ = 64
b$ = 72
add$ = 80
?stbi__mad2sizes_valid@@YAHHHH@Z PROC			; stbi__mad2sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1022
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1023
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@stbi__mad2
$LN3@stbi__mad2:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stbi__mad2:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1024
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad2sizes_valid@@YAHHHH@Z ENDP			; stbi__mad2sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
a$ = 32
b$ = 40
?stbi__mul2sizes_valid@@YAHHH@Z PROC			; stbi__mul2sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1012
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1013
	cmp	DWORD PTR a$[rsp], 0
	jl	SHORT $LN3@stbi__mul2
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__mul2
$LN3@stbi__mul2:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mul2
$LN2@stbi__mul2:
; Line 1014
	cmp	DWORD PTR b$[rsp], 0
	jne	SHORT $LN4@stbi__mul2
	mov	eax, 1
	jmp	SHORT $LN1@stbi__mul2
$LN4@stbi__mul2:
; Line 1016
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN6@stbi__mul2
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN7@stbi__mul2
$LN6@stbi__mul2:
	mov	DWORD PTR tv69[rsp], 0
$LN7@stbi__mul2:
	mov	eax, DWORD PTR tv69[rsp]
$LN1@stbi__mul2:
; Line 1017
	add	rsp, 24
	ret	0
?stbi__mul2sizes_valid@@YAHHH@Z ENDP			; stbi__mul2sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
a$ = 32
b$ = 40
?stbi__addsizes_valid@@YAHHH@Z PROC			; stbi__addsizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1000
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1001
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__adds
	xor	eax, eax
	jmp	SHORT $LN1@stbi__adds
$LN2@stbi__adds:
; Line 1006
	mov	eax, 2147483647				; 7fffffffH
	sub	eax, DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN4@stbi__adds
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@stbi__adds
$LN4@stbi__adds:
	mov	DWORD PTR tv67[rsp], 0
$LN5@stbi__adds:
	mov	eax, DWORD PTR tv67[rsp]
$LN1@stbi__adds:
; Line 1007
	add	rsp, 24
	ret	0
?stbi__addsizes_valid@@YAHHH@Z ENDP			; stbi__addsizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 48
?stbi__malloc@@YAPEAX_K@Z PROC				; stbi__malloc
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 983
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 984
	mov	rcx, QWORD PTR size$[rsp]
	call	malloc
; Line 985
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc@@YAPEAX_K@Z ENDP				; stbi__malloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 8
?stbi__err@@YAHPEBD@Z PROC				; stbi__err
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 976
	mov	QWORD PTR [rsp+8], rcx
; Line 977
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR str$[rsp]
	mov	QWORD PTR [rax+rcx], rdx
; Line 978
	xor	eax, eax
; Line 979
	ret	0
?stbi__err@@YAHPEBD@Z ENDP				; stbi__err
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__pnm_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7534
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7535
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	cmp	eax, 16
	jne	SHORT $LN2@stbi__pnm_
; Line 7536
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7537
	xor	eax, eax
$LN1@stbi__pnm_:
; Line 7538
	add	rsp, 40					; 00000028H
	ret	0
?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pnm_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
t$ = 33
p$ = 34
dummy$ = 36
tv81 = 40
maxv$ = 44
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__pnm_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7495
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7499
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__pnm_:
; Line 7500
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__pnm_:
; Line 7501
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__pnm_:
; Line 7503
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7506
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7507
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7508
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN6@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN5@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7509
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7510
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN5@stbi__pnm_:
; Line 7513
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN12@stbi__pnm_
	mov	DWORD PTR tv81[rsp], 3
	jmp	SHORT $LN13@stbi__pnm_
$LN12@stbi__pnm_:
	mov	DWORD PTR tv81[rsp], 1
$LN13@stbi__pnm_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv81[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7515
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7516
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7518
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7519
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7521
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7522
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7524
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	DWORD PTR maxv$[rsp], eax
; Line 7525
	cmp	DWORD PTR maxv$[rsp], 65535		; 0000ffffH
	jle	SHORT $LN7@stbi__pnm_
; Line 7526
	lea	rcx, OFFSET FLAT:$SG91817
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN8@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7527
	cmp	DWORD PTR maxv$[rsp], 255		; 000000ffH
	jle	SHORT $LN9@stbi__pnm_
; Line 7528
	mov	eax, 16
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN10@stbi__pnm_
$LN9@stbi__pnm_:
; Line 7530
	mov	eax, 8
$LN10@stbi__pnm_:
$LN8@stbi__pnm_:
$LN1@stbi__pnm_:
; Line 7531
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__pnm_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 48
tv87 = 52
tv140 = 56
tv157 = 60
tv164 = 64
out$ = 72
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__pnm_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7429
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 7433
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, 4
	mov	rdx, QWORD PTR s$[rsp]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7434
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN2@stbi__pnm_
; Line 7435
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7437
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN3@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG91757
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN11@stbi__pnm_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN12@stbi__pnm_
$LN11@stbi__pnm_:
	mov	DWORD PTR tv80[rsp], 0
$LN12@stbi__pnm_:
	movsxd	rax, DWORD PTR tv80[rsp]
	jmp	$LN1@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7438
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN4@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG91759
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN13@stbi__pnm_
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__pnm_
$LN13@stbi__pnm_:
	mov	DWORD PTR tv87[rsp], 0
$LN14@stbi__pnm_:
	movsxd	rax, DWORD PTR tv87[rsp]
	jmp	$LN1@stbi__pnm_
$LN4@stbi__pnm_:
; Line 7440
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 7441
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 7442
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__pnm_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__pnm_:
; Line 7444
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
; Line 7445
	lea	rcx, OFFSET FLAT:$SG91762
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__pnm_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN16@stbi__pnm_
$LN15@stbi__pnm_:
	mov	DWORD PTR tv140[rsp], 0
$LN16@stbi__pnm_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7447
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR out$[rsp], rax
; Line 7448
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN7@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG91764
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__pnm_
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN18@stbi__pnm_
$LN17@stbi__pnm_:
	mov	DWORD PTR tv157[rsp], 0
$LN18@stbi__pnm_:
	movsxd	rax, DWORD PTR tv157[rsp]
	jmp	$LN1@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7449
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv164[rsp], eax
	mov	rcx, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rcx]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR tv164[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 7451
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN8@stbi__pnm_
; Line 7452
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 7453
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN9@stbi__pnm_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__pnm_
$LN9@stbi__pnm_:
$LN8@stbi__pnm_:
; Line 7455
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__pnm_:
; Line 7456
	add	rsp, 88					; 00000058H
	ret	0
?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__pnm_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
p$ = 33
s$ = 64
?stbi__pnm_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__pnm_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7417
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7419
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7420
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7421
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN2@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7422
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7423
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7425
	mov	eax, 1
$LN1@stbi__pnm_:
; Line 7426
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pnm_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__gif_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7000
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7001
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__gif_info_raw
; Line 7002
	add	rsp, 40					; 00000028H
	ret	0
?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__gif_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
layers$1 = 48
stride$2 = 52
out$3 = 56
u$4 = 64
out_size$5 = 72
delays_size$6 = 76
tv202 = 80
tmp$7 = 88
new_delays$8 = 96
two_back$9 = 104
g$10 = 112
__$ArrayPad$ = 35040
s$ = 35072
delays$ = 35080
x$ = 35088
y$ = 35096
z$ = 35104
comp$ = 35112
req_comp$ = 35120
?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z PROC ; stbi__load_gif_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6886
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 35064				; 000088f8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6887
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test@@YAHPEAUstbi__context@@@Z ; stbi__gif_test
	test	eax, eax
	je	$LN5@stbi__load
; Line 6888
	mov	DWORD PTR layers$1[rsp], 0
; Line 6889
	mov	QWORD PTR u$4[rsp], 0
; Line 6890
	mov	QWORD PTR out$3[rsp], 0
; Line 6891
	mov	QWORD PTR two_back$9[rsp], 0
; Line 6894
	mov	DWORD PTR out_size$5[rsp], 0
; Line 6895
	mov	DWORD PTR delays_size$6[rsp], 0
; Line 6900
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$10[rsp]
	call	memset
; Line 6901
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN7@stbi__load
; Line 6902
	mov	rax, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rax], 0
$LN7@stbi__load:
$LN4@stbi__load:
; Line 6906
	mov	rax, QWORD PTR two_back$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ; stbi__gif_load_next
	mov	QWORD PTR u$4[rsp], rax
; Line 6907
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$4[rsp], rax
	jne	SHORT $LN8@stbi__load
	mov	QWORD PTR u$4[rsp], 0
$LN8@stbi__load:
; Line 6909
	cmp	QWORD PTR u$4[rsp], 0
	je	$LN9@stbi__load
; Line 6910
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$10[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6911
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$10[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6912
	mov	eax, DWORD PTR layers$1[rsp]
	inc	eax
	mov	DWORD PTR layers$1[rsp], eax
; Line 6913
	mov	eax, DWORD PTR g$10[rsp]
	imul	eax, DWORD PTR g$10[rsp+4]
	shl	eax, 2
	mov	DWORD PTR stride$2[rsp], eax
; Line 6915
	cmp	QWORD PTR out$3[rsp], 0
	je	$LN10@stbi__load
; Line 6916
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rdx, rax
	mov	rcx, QWORD PTR out$3[rsp]
	call	realloc
	mov	QWORD PTR tmp$7[rsp], rax
; Line 6917
	cmp	QWORD PTR tmp$7[rsp], 0
	jne	SHORT $LN12@stbi__load
; Line 6918
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
; Line 6920
	mov	rax, QWORD PTR tmp$7[rsp]
	mov	QWORD PTR out$3[rsp], rax
; Line 6921
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
$LN13@stbi__load:
; Line 6924
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN14@stbi__load
; Line 6925
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	realloc
	mov	QWORD PTR new_delays$8[rsp], rax
; Line 6926
	cmp	QWORD PTR new_delays$8[rsp], 0
	jne	SHORT $LN15@stbi__load
; Line 6927
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN15@stbi__load:
; Line 6928
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR new_delays$8[rsp]
	mov	QWORD PTR [rax], rcx
; Line 6929
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN14@stbi__load:
; Line 6931
	jmp	$LN11@stbi__load
$LN10@stbi__load:
; Line 6932
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR out$3[rsp], rax
; Line 6933
	cmp	QWORD PTR out$3[rsp], 0
	jne	SHORT $LN16@stbi__load
; Line 6934
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN16@stbi__load:
; Line 6935
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
; Line 6936
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN17@stbi__load
; Line 6937
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6938
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN18@stbi__load
; Line 6939
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN18@stbi__load:
; Line 6940
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN17@stbi__load:
$LN11@stbi__load:
; Line 6943
	movsxd	rax, DWORD PTR stride$2[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	dec	ecx
	imul	ecx, DWORD PTR stride$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR u$4[rsp]
	call	memcpy
; Line 6944
	cmp	DWORD PTR layers$1[rsp], 2
	jl	SHORT $LN19@stbi__load
; Line 6945
	mov	eax, DWORD PTR stride$2[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR out$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR two_back$9[rsp], rax
$LN19@stbi__load:
; Line 6948
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN20@stbi__load
; Line 6949
	mov	eax, DWORD PTR layers$1[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR g$10[rsp+34920]
	mov	DWORD PTR [rcx+rax*4], edx
$LN20@stbi__load:
$LN9@stbi__load:
; Line 6952
	cmp	QWORD PTR u$4[rsp], 0
	jne	$LN4@stbi__load
; Line 6955
	mov	rcx, QWORD PTR g$10[rsp+8]
	call	free
; Line 6956
	mov	rcx, QWORD PTR g$10[rsp+24]
	call	free
; Line 6957
	mov	rcx, QWORD PTR g$10[rsp+16]
	call	free
; Line 6960
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN21@stbi__load
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN21@stbi__load
; Line 6961
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR g$10[rsp]
	mov	ecx, DWORD PTR g$10[rsp+4]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$3[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$3[rsp], rax
$LN21@stbi__load:
; Line 6963
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6964
	mov	rax, QWORD PTR out$3[rsp]
	jmp	SHORT $LN1@stbi__load
; Line 6965
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
; Line 6966
	lea	rcx, OFFSET FLAT:$SG91419
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN23@stbi__load
	mov	DWORD PTR tv202[rsp], 0
	jmp	SHORT $LN24@stbi__load
$LN23@stbi__load:
	mov	DWORD PTR tv202[rsp], 0
$LN24@stbi__load:
	movsxd	rax, DWORD PTR tv202[rsp]
$LN6@stbi__load:
$LN1@stbi__load:
; Line 6968
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35064				; 000088f8H
	ret	0
?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z ENDP ; stbi__load_gif_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
u$ = 48
g$ = 64
__$ArrayPad$ = 34992
s$ = 35024
x$ = 35032
y$ = 35040
comp$ = 35048
req_comp$ = 35056
ri$ = 35064
?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__gif_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6971
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 35016				; 000088c8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6972
	mov	QWORD PTR u$[rsp], 0
; Line 6974
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$[rsp]
	call	memset
; Line 6977
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ; stbi__gif_load_next
	mov	QWORD PTR u$[rsp], rax
; Line 6978
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$[rsp], rax
	jne	SHORT $LN2@stbi__gif_
	mov	QWORD PTR u$[rsp], 0
$LN2@stbi__gif_:
; Line 6979
	cmp	QWORD PTR u$[rsp], 0
	je	SHORT $LN3@stbi__gif_
; Line 6980
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6981
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6985
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN5@stbi__gif_
; Line 6986
	mov	eax, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR g$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR u$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR u$[rsp], rax
$LN5@stbi__gif_:
	jmp	SHORT $LN4@stbi__gif_
$LN3@stbi__gif_:
; Line 6987
	cmp	QWORD PTR g$[rsp+8], 0
	je	SHORT $LN6@stbi__gif_
; Line 6989
	mov	rcx, QWORD PTR g$[rsp+8]
	call	free
$LN6@stbi__gif_:
$LN4@stbi__gif_:
; Line 6993
	mov	rcx, QWORD PTR g$[rsp+24]
	call	free
; Line 6994
	mov	rcx, QWORD PTR g$[rsp+16]
	call	free
; Line 6996
	mov	rax, QWORD PTR u$[rsp]
; Line 6997
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35016				; 000088c8H
	ret	0
?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__gif_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__gif_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__gif_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6513
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6514
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z ; stbi__gif_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 6515
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6516
	mov	eax, DWORD PTR r$[rsp]
; Line 6517
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__gif_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_packets$ = 32
act_comp$ = 36
dummy$ = 40
tv154 = 44
packet$1 = 48
chained$ = 56
tv95 = 64
packets$ = 72
__$ArrayPad$ = 104
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__pic_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7346
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7347
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
; Line 7350
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN5@stbi__pic_:
; Line 7351
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN6@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN6@stbi__pic_:
; Line 7352
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN7@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN7@stbi__pic_:
; Line 7354
	lea	rdx, OFFSET FLAT:$SG91718
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN8@stbi__pic_
; Line 7355
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 7359
	mov	edx, 88					; 00000058H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7361
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7362
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7363
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__pic_
; Line 7364
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7365
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 7367
	mov	rax, QWORD PTR x$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@stbi__pic_
	mov	eax, 268435456				; 10000000H
	cdq
	mov	rcx, QWORD PTR x$[rsp]
	idiv	DWORD PTR [rcx]
	mov	rcx, QWORD PTR y$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN10@stbi__pic_
; Line 7368
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7369
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 7372
	mov	edx, 8
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN4@stbi__pic_:
; Line 7377
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN11@stbi__pic_
; Line 7378
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN11@stbi__pic_:
; Line 7380
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR tv95[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
	mov	rax, QWORD PTR tv95[rsp]
	mov	QWORD PTR packet$1[rsp], rax
; Line 7381
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 7382
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx], al
; Line 7383
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 7384
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 7385
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 7387
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN12@stbi__pic_
; Line 7388
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7389
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN12@stbi__pic_:
; Line 7391
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN13@stbi__pic_
; Line 7392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7393
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN13@stbi__pic_:
; Line 7395
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 7397
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN15@stbi__pic_
	mov	DWORD PTR tv154[rsp], 4
	jmp	SHORT $LN16@stbi__pic_
$LN15@stbi__pic_:
	mov	DWORD PTR tv154[rsp], 3
$LN16@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7399
	mov	eax, 1
$LN1@stbi__pic_:
; Line 7400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__pic_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 48
x$ = 52
result$ = 56
i$ = 64
tv76 = 68
tv82 = 72
tv90 = 76
tv133 = 80
tv147 = 84
internal_comp$ = 88
s$ = 112
px$ = 120
py$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__pic_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6423
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 6428
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR internal_comp$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN5@stbi__pic_:
; Line 6430
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 92			; 0000005cH
	jge	SHORT $LN3@stbi__pic_
; Line 6431
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6433
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR x$[rsp], eax
; Line 6434
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR y$[rsp], eax
; Line 6436
	cmp	DWORD PTR y$[rsp], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91066
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__pic_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN14@stbi__pic_:
	mov	DWORD PTR tv76[rsp], 0
$LN15@stbi__pic_:
	movsxd	rax, DWORD PTR tv76[rsp]
	jmp	$LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6437
	cmp	DWORD PTR x$[rsp], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91068
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN16@stbi__pic_
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN17@stbi__pic_
$LN16@stbi__pic_:
	mov	DWORD PTR tv82[rsp], 0
$LN17@stbi__pic_:
	movsxd	rax, DWORD PTR tv82[rsp]
	jmp	$LN1@stbi__pic_
$LN7@stbi__pic_:
; Line 6439
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN8@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91070
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__pic_
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN19@stbi__pic_
$LN18@stbi__pic_:
	mov	DWORD PTR tv90[rsp], 0
$LN19@stbi__pic_:
	movsxd	rax, DWORD PTR tv90[rsp]
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 6440
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN9@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91072
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN20@stbi__pic_
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN21@stbi__pic_
$LN20@stbi__pic_:
	mov	DWORD PTR tv133[rsp], 0
$LN21@stbi__pic_:
	movsxd	rax, DWORD PTR tv133[rsp]
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 6442
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 6443
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 6444
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 6447
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR result$[rsp], rax
; Line 6448
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN10@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG91074
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN22@stbi__pic_
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN23@stbi__pic_
$LN22@stbi__pic_:
	mov	DWORD PTR tv147[rsp], 0
$LN23@stbi__pic_:
	movsxd	rax, DWORD PTR tv147[rsp]
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 6449
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 6451
	mov	rax, QWORD PTR result$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z ; stbi__pic_load_core
	test	rax, rax
	jne	SHORT $LN11@stbi__pic_
; Line 6452
	mov	rcx, QWORD PTR result$[rsp]
	call	free
; Line 6453
	mov	QWORD PTR result$[rsp], 0
$LN11@stbi__pic_:
; Line 6455
	mov	rax, QWORD PTR px$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6456
	mov	rax, QWORD PTR py$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6457
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN12@stbi__pic_
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR req_comp$[rsp], eax
$LN12@stbi__pic_:
; Line 6458
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
; Line 6460
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6461
	add	rsp, 104				; 00000068H
	ret	0
?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__pic_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__pic_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__pic_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6464
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6465
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z ; stbi__pic_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 6466
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6467
	mov	eax, DWORD PTR r$[rsp]
; Line 6468
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pic_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
dummy$ = 40
valid$ = 44
buffer$ = 48
__$ArrayPad$ = 1072
s$ = 1104
x$ = 1112
y$ = 1120
comp$ = 1128
?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__hdr_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7212
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1096				; 00000448H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7215
	mov	DWORD PTR valid$[rsp], 0
; Line 7218
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN7@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN7@stbi__hdr_:
; Line 7219
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN8@stbi__hdr_:
; Line 7220
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN9@stbi__hdr_:
; Line 7222
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	jne	SHORT $LN10@stbi__hdr_
; Line 7223
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7224
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN10@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7228
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7229
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7230
	lea	rdx, OFFSET FLAT:$SG91649
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN12@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN12@stbi__hdr_:
; Line 7231
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7233
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN13@stbi__hdr_
; Line 7234
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7235
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN13@stbi__hdr_:
; Line 7237
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7238
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91652
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN14@stbi__hdr_
; Line 7239
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7240
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7242
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7243
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__hdr_:
; Line 7244
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7245
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91654
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN15@stbi__hdr_
; Line 7246
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7247
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN15@stbi__hdr_:
; Line 7249
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7250
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7251
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
; Line 7252
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7253
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1096				; 00000448H
	ret	0
?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__hdr_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$ = 48
i$ = 52
width$ = 56
j$ = 60
value$ = 64
len$ = 68
z$ = 72
token$ = 80
height$ = 88
scanline$ = 96
k$ = 104
rgbe$1 = 108
hdr_data$ = 112
nleft$2 = 120
tv78 = 124
valid$ = 128
tv95 = 132
tv140 = 136
tv158 = 140
tv169 = 144
tv175 = 148
tv189 = 152
tv201 = 156
c1$ = 160
c2$ = 164
tv264 = 168
tv276 = 172
tv298 = 176
tv316 = 180
rgbe$3 = 184
headerToken$ = 192
buffer$ = 208
__$ArrayPad$ = 1232
s$ = 1264
x$ = 1272
y$ = 1280
comp$ = 1288
req_comp$ = 1296
ri$ = 1304
?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__hdr_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7081
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1256				; 000004e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7084
	mov	DWORD PTR valid$[rsp], 0
; Line 7095
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR headerToken$[rsp], rax
; Line 7096
	lea	rdx, OFFSET FLAT:$SG91585
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
	lea	rdx, OFFSET FLAT:$SG91586
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
; Line 7097
	lea	rcx, OFFSET FLAT:$SG91587
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN56@stbi__hdr_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN57@stbi__hdr_
$LN56@stbi__hdr_:
	mov	DWORD PTR tv78[rsp], 0
$LN57@stbi__hdr_:
	movsxd	rax, DWORD PTR tv78[rsp]
	jmp	$LN1@stbi__hdr_
$LN30@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7101
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7102
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN31@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN31@stbi__hdr_:
; Line 7103
	lea	rdx, OFFSET FLAT:$SG91590
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN32@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN32@stbi__hdr_:
; Line 7104
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7106
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN33@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG91592
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__hdr_
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN59@stbi__hdr_
$LN58@stbi__hdr_:
	mov	DWORD PTR tv95[rsp], 0
$LN59@stbi__hdr_:
	movsxd	rax, DWORD PTR tv95[rsp]
	jmp	$LN1@stbi__hdr_
$LN33@stbi__hdr_:
; Line 7110
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7111
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91594
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN34@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG91595
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__hdr_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN61@stbi__hdr_
$LN60@stbi__hdr_:
	mov	DWORD PTR tv140[rsp], 0
$LN61@stbi__hdr_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__hdr_
$LN34@stbi__hdr_:
; Line 7112
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7113
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	DWORD PTR height$[rsp], eax
$LN5@stbi__hdr_:
; Line 7114
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7115
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91597
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN35@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG91598
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__hdr_
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN63@stbi__hdr_
$LN62@stbi__hdr_:
	mov	DWORD PTR tv158[rsp], 0
$LN63@stbi__hdr_:
	movsxd	rax, DWORD PTR tv158[rsp]
	jmp	$LN1@stbi__hdr_
$LN35@stbi__hdr_:
; Line 7116
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7117
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	DWORD PTR width$[rsp], eax
; Line 7119
	cmp	DWORD PTR height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN36@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG91600
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__hdr_
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN65@stbi__hdr_
$LN64@stbi__hdr_:
	mov	DWORD PTR tv169[rsp], 0
$LN65@stbi__hdr_:
	movsxd	rax, DWORD PTR tv169[rsp]
	jmp	$LN1@stbi__hdr_
$LN36@stbi__hdr_:
; Line 7120
	cmp	DWORD PTR width$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG91602
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__hdr_
	mov	DWORD PTR tv175[rsp], 0
	jmp	SHORT $LN67@stbi__hdr_
$LN66@stbi__hdr_:
	mov	DWORD PTR tv175[rsp], 0
$LN67@stbi__hdr_:
	movsxd	rax, DWORD PTR tv175[rsp]
	jmp	$LN1@stbi__hdr_
$LN37@stbi__hdr_:
; Line 7122
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7123
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7125
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN38@stbi__hdr_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
$LN38@stbi__hdr_:
; Line 7126
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN39@stbi__hdr_
	mov	DWORD PTR req_comp$[rsp], 3
$LN39@stbi__hdr_:
; Line 7128
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN40@stbi__hdr_
; Line 7129
	lea	rcx, OFFSET FLAT:$SG91606
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__hdr_
	mov	DWORD PTR tv189[rsp], 0
	jmp	SHORT $LN69@stbi__hdr_
$LN68@stbi__hdr_:
	mov	DWORD PTR tv189[rsp], 0
$LN69@stbi__hdr_:
	movsxd	rax, DWORD PTR tv189[rsp]
	jmp	$LN1@stbi__hdr_
$LN40@stbi__hdr_:
; Line 7132
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR hdr_data$[rsp], rax
; Line 7133
	cmp	QWORD PTR hdr_data$[rsp], 0
	jne	SHORT $LN41@stbi__hdr_
; Line 7134
	lea	rcx, OFFSET FLAT:$SG91608
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__hdr_
	mov	DWORD PTR tv201[rsp], 0
	jmp	SHORT $LN71@stbi__hdr_
$LN70@stbi__hdr_:
	mov	DWORD PTR tv201[rsp], 0
$LN71@stbi__hdr_:
	movsxd	rax, DWORD PTR tv201[rsp]
	jmp	$LN1@stbi__hdr_
$LN41@stbi__hdr_:
; Line 7138
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN44@stbi__hdr_
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN42@stbi__hdr_
$LN44@stbi__hdr_:
; Line 7140
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi__hdr_
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi__hdr_
; Line 7141
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stbi__hdr_
$main_decode_loop$80:
; Line 7144
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 7145
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR hdr_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, rax
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
; Line 7146
	jmp	SHORT $LN10@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7147
	jmp	$LN7@stbi__hdr_
$LN8@stbi__hdr_:
; Line 7148
	jmp	$LN43@stbi__hdr_
$LN42@stbi__hdr_:
; Line 7150
	mov	QWORD PTR scanline$[rsp], 0
; Line 7152
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi__hdr_
$LN13@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 7153
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c1$[rsp], eax
; Line 7154
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c2$[rsp], eax
; Line 7155
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 7156
	cmp	DWORD PTR c1$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	cmp	DWORD PTR c2$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	mov	eax, DWORD PTR len$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN45@stbi__hdr_
$LN46@stbi__hdr_:
; Line 7160
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR c1$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7161
	mov	eax, 1
	imul	rax, rax, 1
	movzx	ecx, BYTE PTR c2$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7162
	mov	eax, 1
	imul	rax, rax, 2
	movzx	ecx, BYTE PTR len$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7163
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR rgbe$1[rsp+rcx], al
; Line 7164
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$1[rsp]
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
; Line 7165
	mov	DWORD PTR i$[rsp], 1
; Line 7166
	mov	DWORD PTR j$[rsp], 0
; Line 7167
	mov	rcx, QWORD PTR scanline$[rsp]
	call	free
; Line 7168
	jmp	$main_decode_loop$80
$LN45@stbi__hdr_:
; Line 7170
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 8
	mov	DWORD PTR len$[rsp], eax
; Line 7171
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR len$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 7172
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	je	SHORT $LN47@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG91615
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__hdr_
	mov	DWORD PTR tv264[rsp], 0
	jmp	SHORT $LN73@stbi__hdr_
$LN72@stbi__hdr_:
	mov	DWORD PTR tv264[rsp], 0
$LN73@stbi__hdr_:
	movsxd	rax, DWORD PTR tv264[rsp]
	jmp	$LN1@stbi__hdr_
$LN47@stbi__hdr_:
; Line 7173
	cmp	QWORD PTR scanline$[rsp], 0
	jne	SHORT $LN48@stbi__hdr_
; Line 7174
	xor	r8d, r8d
	mov	edx, 4
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR scanline$[rsp], rax
; Line 7175
	cmp	QWORD PTR scanline$[rsp], 0
	jne	SHORT $LN49@stbi__hdr_
; Line 7176
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	free
; Line 7177
	lea	rcx, OFFSET FLAT:$SG91618
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN74@stbi__hdr_
	mov	DWORD PTR tv276[rsp], 0
	jmp	SHORT $LN75@stbi__hdr_
$LN74@stbi__hdr_:
	mov	DWORD PTR tv276[rsp], 0
$LN75@stbi__hdr_:
	movsxd	rax, DWORD PTR tv276[rsp]
	jmp	$LN1@stbi__hdr_
$LN49@stbi__hdr_:
$LN48@stbi__hdr_:
; Line 7181
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__hdr_
$LN16@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__hdr_:
	cmp	DWORD PTR k$[rsp], 4
	jge	$LN17@stbi__hdr_
; Line 7183
	mov	DWORD PTR i$[rsp], 0
$LN19@stbi__hdr_:
; Line 7184
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$2[rsp], eax
	cmp	DWORD PTR nleft$2[rsp], 0
	jle	$LN20@stbi__hdr_
; Line 7185
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR count$[rsp], al
; Line 7186
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, 128				; 00000080H
	jle	$LN50@stbi__hdr_
; Line 7188
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR value$[rsp], al
; Line 7189
	movzx	eax, BYTE PTR count$[rsp]
	sub	eax, 128				; 00000080H
	mov	BYTE PTR count$[rsp], al
; Line 7190
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	SHORT $LN52@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG91622
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__hdr_
	mov	DWORD PTR tv298[rsp], 0
	jmp	SHORT $LN77@stbi__hdr_
$LN76@stbi__hdr_:
	mov	DWORD PTR tv298[rsp], 0
$LN77@stbi__hdr_:
	movsxd	rax, DWORD PTR tv298[rsp]
	jmp	$LN1@stbi__hdr_
$LN52@stbi__hdr_:
; Line 7191
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN23@stbi__hdr_
$LN21@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN23@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN22@stbi__hdr_
; Line 7192
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	movzx	edx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__hdr_
$LN22@stbi__hdr_:
; Line 7193
	jmp	$LN51@stbi__hdr_
$LN50@stbi__hdr_:
; Line 7195
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	SHORT $LN53@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG91624
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__hdr_
	mov	DWORD PTR tv316[rsp], 0
	jmp	SHORT $LN79@stbi__hdr_
$LN78@stbi__hdr_:
	mov	DWORD PTR tv316[rsp], 0
$LN79@stbi__hdr_:
	movsxd	rax, DWORD PTR tv316[rsp]
	jmp	$LN1@stbi__hdr_
$LN53@stbi__hdr_:
; Line 7196
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN26@stbi__hdr_
$LN24@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN26@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN25@stbi__hdr_
; Line 7197
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR k$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*4]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scanline$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__hdr_
$LN25@stbi__hdr_:
$LN51@stbi__hdr_:
; Line 7199
	jmp	$LN19@stbi__hdr_
$LN20@stbi__hdr_:
; Line 7200
	jmp	$LN16@stbi__hdr_
$LN17@stbi__hdr_:
; Line 7201
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN29@stbi__hdr_
$LN27@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN29@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN28@stbi__hdr_
; Line 7202
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR width$[rsp]
	add	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR hdr_data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rdx, rax
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
	jmp	SHORT $LN27@stbi__hdr_
$LN28@stbi__hdr_:
; Line 7203
	jmp	$LN13@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7204
	cmp	QWORD PTR scanline$[rsp], 0
	je	SHORT $LN54@stbi__hdr_
; Line 7205
	mov	rcx, QWORD PTR scanline$[rsp]
	call	free
$LN54@stbi__hdr_:
$LN43@stbi__hdr_:
; Line 7208
	mov	rax, QWORD PTR hdr_data$[rsp]
$LN1@stbi__hdr_:
; Line 7209
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1256				; 000004e8H
	ret	0
?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__hdr_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__hdr_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__hdr_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7020
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7021
	lea	rdx, OFFSET FLAT:$SG91456
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ; stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7022
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7023
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN2@stbi__hdr_
; Line 7024
	lea	rdx, OFFSET FLAT:$SG91458
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ; stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7025
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
$LN2@stbi__hdr_:
; Line 7027
	mov	eax, DWORD PTR r$[rsp]
; Line 7028
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__hdr_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
channelCount$ = 32
depth$ = 36
s$ = 64
?stbi__psd_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__psd_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7317
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7319
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN2@stbi__psd_
; Line 7320
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7321
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN2@stbi__psd_:
; Line 7323
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN3@stbi__psd_
; Line 7324
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7325
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN3@stbi__psd_:
; Line 7327
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7328
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7329
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN5@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 7330
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7331
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN4@stbi__psd_:
; Line 7333
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 7334
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 7335
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7336
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN6@stbi__psd_
; Line 7337
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7338
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7340
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7341
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__psd_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dummy$ = 32
channelCount$ = 36
depth$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__psd_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7282
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7284
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__psd_:
; Line 7285
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__psd_:
; Line 7286
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__psd_:
; Line 7287
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN5@stbi__psd_
; Line 7288
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7289
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN5@stbi__psd_:
; Line 7291
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN6@stbi__psd_
; Line 7292
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7293
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7295
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7296
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7297
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN8@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN7@stbi__psd_
$LN8@stbi__psd_:
; Line 7298
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7299
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN7@stbi__psd_:
; Line 7301
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7302
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7303
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7304
	cmp	DWORD PTR depth$[rsp], 8
	je	SHORT $LN9@stbi__psd_
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN9@stbi__psd_
; Line 7305
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7306
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN9@stbi__psd_:
; Line 7308
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 3
	je	SHORT $LN10@stbi__psd_
; Line 7309
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7310
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN10@stbi__psd_:
; Line 7312
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
; Line 7313
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7314
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__psd_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
channel$ = 52
h$ = 56
w$ = 60
out$ = 64
val$1 = 72
pixelCount$ = 76
channelCount$ = 80
bitdepth$ = 84
ra$2 = 88
ra$3 = 92
pixel$4 = 96
pixel$5 = 104
val$6 = 112
compression$ = 116
inv_a$7 = 120
inv_a$8 = 124
p$9 = 128
tv137 = 136
tv146 = 140
tv154 = 144
tv174 = 148
tv185 = 152
tv205 = 156
tv222 = 160
tv233 = 164
tv244 = 168
tv252 = 172
tv70 = 176
tv78 = 180
tv89 = 184
tv131 = 188
p$10 = 192
a$11 = 200
a$12 = 204
q$13 = 208
p$14 = 216
q$15 = 224
s$ = 256
x$ = 264
y$ = 272
comp$ = 280
req_comp$ = 288
ri$ = 296
bpc$ = 304
?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z PROC ; stbi__psd_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6049
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 6059
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN32@stbi__psd_
; Line 6060
	lea	rcx, OFFSET FLAT:$SG90831
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN69@stbi__psd_
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN70@stbi__psd_
$LN69@stbi__psd_:
	mov	DWORD PTR tv70[rsp], 0
$LN70@stbi__psd_:
	movsxd	rax, DWORD PTR tv70[rsp]
	jmp	$LN1@stbi__psd_
$LN32@stbi__psd_:
; Line 6063
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN33@stbi__psd_
; Line 6064
	lea	rcx, OFFSET FLAT:$SG90833
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN71@stbi__psd_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN72@stbi__psd_
$LN71@stbi__psd_:
	mov	DWORD PTR tv78[rsp], 0
$LN72@stbi__psd_:
	movsxd	rax, DWORD PTR tv78[rsp]
	jmp	$LN1@stbi__psd_
$LN33@stbi__psd_:
; Line 6067
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6070
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 6071
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN35@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN34@stbi__psd_
$LN35@stbi__psd_:
; Line 6072
	lea	rcx, OFFSET FLAT:$SG90836
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN73@stbi__psd_
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN74@stbi__psd_
$LN73@stbi__psd_:
	mov	DWORD PTR tv89[rsp], 0
$LN74@stbi__psd_:
	movsxd	rax, DWORD PTR tv89[rsp]
	jmp	$LN1@stbi__psd_
$LN34@stbi__psd_:
; Line 6075
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR h$[rsp], eax
; Line 6076
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR w$[rsp], eax
; Line 6078
	cmp	DWORD PTR h$[rsp], 16777216		; 01000000H
	jle	SHORT $LN36@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG90838
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN75@stbi__psd_
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN76@stbi__psd_
$LN75@stbi__psd_:
	mov	DWORD PTR tv131[rsp], 0
$LN76@stbi__psd_:
	movsxd	rax, DWORD PTR tv131[rsp]
	jmp	$LN1@stbi__psd_
$LN36@stbi__psd_:
; Line 6079
	cmp	DWORD PTR w$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG90840
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN77@stbi__psd_
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN78@stbi__psd_
$LN77@stbi__psd_:
	mov	DWORD PTR tv137[rsp], 0
$LN78@stbi__psd_:
	movsxd	rax, DWORD PTR tv137[rsp]
	jmp	$LN1@stbi__psd_
$LN37@stbi__psd_:
; Line 6082
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR bitdepth$[rsp], eax
; Line 6083
	cmp	DWORD PTR bitdepth$[rsp], 8
	je	SHORT $LN38@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	je	SHORT $LN38@stbi__psd_
; Line 6084
	lea	rcx, OFFSET FLAT:$SG90842
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN79@stbi__psd_
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN80@stbi__psd_
$LN79@stbi__psd_:
	mov	DWORD PTR tv146[rsp], 0
$LN80@stbi__psd_:
	movsxd	rax, DWORD PTR tv146[rsp]
	jmp	$LN1@stbi__psd_
$LN38@stbi__psd_:
; Line 6096
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 3
	je	SHORT $LN39@stbi__psd_
; Line 6097
	lea	rcx, OFFSET FLAT:$SG90844
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__psd_
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN82@stbi__psd_
$LN81@stbi__psd_:
	mov	DWORD PTR tv154[rsp], 0
$LN82@stbi__psd_:
	movsxd	rax, DWORD PTR tv154[rsp]
	jmp	$LN1@stbi__psd_
$LN39@stbi__psd_:
; Line 6100
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6103
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6106
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6112
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR compression$[rsp], eax
; Line 6113
	cmp	DWORD PTR compression$[rsp], 1
	jle	SHORT $LN40@stbi__psd_
; Line 6114
	lea	rcx, OFFSET FLAT:$SG90846
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN83@stbi__psd_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN84@stbi__psd_
$LN83@stbi__psd_:
	mov	DWORD PTR tv174[rsp], 0
$LN84@stbi__psd_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__psd_
$LN40@stbi__psd_:
; Line 6117
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 4
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN41@stbi__psd_
; Line 6118
	lea	rcx, OFFSET FLAT:$SG90848
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN85@stbi__psd_
	mov	DWORD PTR tv185[rsp], 0
	jmp	SHORT $LN86@stbi__psd_
$LN85@stbi__psd_:
	mov	DWORD PTR tv185[rsp], 0
$LN86@stbi__psd_:
	movsxd	rax, DWORD PTR tv185[rsp]
	jmp	$LN1@stbi__psd_
$LN41@stbi__psd_:
; Line 6122
	cmp	DWORD PTR compression$[rsp], 0
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
; Line 6123
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 8
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 6124
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
; Line 6125
	jmp	SHORT $LN43@stbi__psd_
$LN42@stbi__psd_:
; Line 6126
	mov	eax, DWORD PTR w$[rsp]
	shl	eax, 2
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR out$[rsp], rax
$LN43@stbi__psd_:
; Line 6128
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN44@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG90852
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN87@stbi__psd_
	mov	DWORD PTR tv205[rsp], 0
	jmp	SHORT $LN88@stbi__psd_
$LN87@stbi__psd_:
	mov	DWORD PTR tv205[rsp], 0
$LN88@stbi__psd_:
	movsxd	rax, DWORD PTR tv205[rsp]
	jmp	$LN1@stbi__psd_
$LN44@stbi__psd_:
; Line 6129
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR pixelCount$[rsp], eax
; Line 6135
	cmp	DWORD PTR compression$[rsp], 0
	je	$LN45@stbi__psd_
; Line 6146
	mov	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channelCount$[rsp]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6149
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN4@stbi__psd_
$LN2@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN4@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN3@stbi__psd_
; Line 6152
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$10[rsp], rax
; Line 6153
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	SHORT $LN47@stbi__psd_
; Line 6155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__psd_
$LN5@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$10[rsp]
	add	rax, 4
	mov	QWORD PTR p$10[rsp], rax
$LN7@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__psd_
; Line 6156
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN89@stbi__psd_
	mov	DWORD PTR tv222[rsp], 255		; 000000ffH
	jmp	SHORT $LN90@stbi__psd_
$LN89@stbi__psd_:
	mov	DWORD PTR tv222[rsp], 0
$LN90@stbi__psd_:
	mov	rax, QWORD PTR p$10[rsp]
	movzx	ecx, BYTE PTR tv222[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN5@stbi__psd_
$LN6@stbi__psd_:
; Line 6157
	jmp	SHORT $LN48@stbi__psd_
$LN47@stbi__psd_:
; Line 6159
	mov	r8d, DWORD PTR pixelCount$[rsp]
	mov	rdx, QWORD PTR p$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__psd_decode_rle
	test	eax, eax
	jne	SHORT $LN49@stbi__psd_
; Line 6160
	mov	rcx, QWORD PTR out$[rsp]
	call	free
; Line 6161
	lea	rcx, OFFSET FLAT:$SG90858
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN91@stbi__psd_
	mov	DWORD PTR tv233[rsp], 0
	jmp	SHORT $LN92@stbi__psd_
$LN91@stbi__psd_:
	mov	DWORD PTR tv233[rsp], 0
$LN92@stbi__psd_:
	movsxd	rax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__psd_
$LN49@stbi__psd_:
$LN48@stbi__psd_:
; Line 6164
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6166
	jmp	$LN46@stbi__psd_
$LN45@stbi__psd_:
; Line 6171
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN10@stbi__psd_
$LN8@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN10@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN9@stbi__psd_
; Line 6172
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	$LN50@stbi__psd_
; Line 6174
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	$LN52@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	$LN52@stbi__psd_
; Line 6175
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$13[rsp], rax
; Line 6176
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN93@stbi__psd_
	mov	DWORD PTR tv244[rsp], 65535		; 0000ffffH
	jmp	SHORT $LN94@stbi__psd_
$LN93@stbi__psd_:
	mov	DWORD PTR tv244[rsp], 0
$LN94@stbi__psd_:
	movzx	eax, WORD PTR tv244[rsp]
	mov	WORD PTR val$6[rsp], ax
; Line 6177
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__psd_
$LN11@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$13[rsp]
	add	rax, 8
	mov	QWORD PTR q$13[rsp], rax
$LN13@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__psd_
; Line 6178
	mov	rax, QWORD PTR q$13[rsp]
	movzx	ecx, WORD PTR val$6[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN11@stbi__psd_
$LN12@stbi__psd_:
; Line 6179
	jmp	$LN53@stbi__psd_
$LN52@stbi__psd_:
; Line 6180
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$14[rsp], rax
; Line 6181
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN95@stbi__psd_
	mov	DWORD PTR tv252[rsp], 255		; 000000ffH
	jmp	SHORT $LN96@stbi__psd_
$LN95@stbi__psd_:
	mov	DWORD PTR tv252[rsp], 0
$LN96@stbi__psd_:
	movzx	eax, BYTE PTR tv252[rsp]
	mov	BYTE PTR val$1[rsp], al
; Line 6182
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__psd_
$LN14@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$14[rsp]
	add	rax, 4
	mov	QWORD PTR p$14[rsp], rax
$LN16@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN15@stbi__psd_
; Line 6183
	mov	rax, QWORD PTR p$14[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN14@stbi__psd_
$LN15@stbi__psd_:
$LN53@stbi__psd_:
; Line 6185
	jmp	$LN51@stbi__psd_
$LN50@stbi__psd_:
; Line 6186
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN54@stbi__psd_
; Line 6187
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$15[rsp], rax
; Line 6188
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN19@stbi__psd_
$LN17@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$15[rsp]
	add	rax, 8
	mov	QWORD PTR q$15[rsp], rax
$LN19@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN18@stbi__psd_
; Line 6189
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR q$15[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN17@stbi__psd_
$LN18@stbi__psd_:
; Line 6190
	jmp	$LN55@stbi__psd_
$LN54@stbi__psd_:
; Line 6191
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$9[rsp], rax
; Line 6192
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN56@stbi__psd_
; Line 6193
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__psd_
$LN20@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN22@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN21@stbi__psd_
; Line 6194
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sar	eax, 8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN20@stbi__psd_
$LN21@stbi__psd_:
; Line 6195
	jmp	SHORT $LN57@stbi__psd_
$LN56@stbi__psd_:
; Line 6196
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__psd_
$LN23@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN25@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN24@stbi__psd_
; Line 6197
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN23@stbi__psd_
$LN24@stbi__psd_:
$LN57@stbi__psd_:
$LN55@stbi__psd_:
$LN51@stbi__psd_:
; Line 6201
	jmp	$LN8@stbi__psd_
$LN9@stbi__psd_:
$LN46@stbi__psd_:
; Line 6205
	cmp	DWORD PTR channelCount$[rsp], 4
	jl	$LN58@stbi__psd_
; Line 6206
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	$LN59@stbi__psd_
; Line 6207
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__psd_
$LN26@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN27@stbi__psd_
; Line 6208
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pixel$4[rsp], rax
; Line 6209
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN61@stbi__psd_
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 65535				; 0000ffffH
	je	$LN61@stbi__psd_
; Line 6210
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR a$11[rsp], xmm0
; Line 6211
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$11[rsp]
	movss	DWORD PTR ra$2[rsp], xmm0
; Line 6212
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$2[rsp]
	movss	xmm1, DWORD PTR __real@477fff00
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$7[rsp], xmm0
; Line 6213
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$2[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6214
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$2[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6215
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$2[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN61@stbi__psd_:
; Line 6217
	jmp	$LN26@stbi__psd_
$LN27@stbi__psd_:
; Line 6218
	jmp	$LN60@stbi__psd_
$LN59@stbi__psd_:
; Line 6219
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN31@stbi__psd_
$LN29@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN31@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN30@stbi__psd_
; Line 6220
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixel$5[rsp], rax
; Line 6221
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN62@stbi__psd_
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 255				; 000000ffH
	je	$LN62@stbi__psd_
; Line 6222
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR a$12[rsp], xmm0
; Line 6223
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$12[rsp]
	movss	DWORD PTR ra$3[rsp], xmm0
; Line 6224
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$3[rsp]
	movss	xmm1, DWORD PTR __real@437f0000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$8[rsp], xmm0
; Line 6225
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6226
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6227
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN62@stbi__psd_:
; Line 6229
	jmp	$LN29@stbi__psd_
$LN30@stbi__psd_:
$LN60@stbi__psd_:
$LN58@stbi__psd_:
; Line 6234
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN63@stbi__psd_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN63@stbi__psd_
; Line 6235
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN64@stbi__psd_
; Line 6236
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format16@@YAPEAGPEAGHHII@Z ; stbi__convert_format16
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN65@stbi__psd_
$LN64@stbi__psd_:
; Line 6238
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
$LN65@stbi__psd_:
; Line 6239
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN66@stbi__psd_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__psd_
$LN66@stbi__psd_:
$LN63@stbi__psd_:
; Line 6242
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN67@stbi__psd_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN67@stbi__psd_:
; Line 6243
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6244
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6246
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__psd_:
; Line 6247
	add	rsp, 248				; 000000f8H
	ret	0
?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ENDP ; stbi__psd_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
r$ = 36
s$ = 64
?stbi__psd_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__psd_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6004
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6005
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	jne	SHORT $LN3@stbi__psd_
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__psd_
$LN3@stbi__psd_:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__psd_:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 6006
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6007
	mov	eax, DWORD PTR r$[rsp]
; Line 6008
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__psd_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_image_type$ = 32
sz$ = 36
tga_colormap_bpp$ = 40
tga_bits_per_pixel$ = 44
tga_comp$ = 48
tga_colormap_type$ = 52
tv153 = 56
tga_w$ = 60
tga_h$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__tga_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5678
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5681
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5682
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_colormap_type$[rsp], eax
; Line 5683
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
; Line 5684
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5685
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN2@stbi__tga_:
; Line 5687
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5688
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jne	$LN3@stbi__tga_
; Line 5689
	cmp	DWORD PTR tga_image_type$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 9
	je	SHORT $LN5@stbi__tga_
; Line 5690
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5691
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN5@stbi__tga_:
; Line 5693
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5694
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5695
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
; Line 5696
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5697
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5699
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5700
	mov	eax, DWORD PTR sz$[rsp]
	mov	DWORD PTR tga_colormap_bpp$[rsp], eax
; Line 5701
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5702
	cmp	DWORD PTR tga_image_type$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN7@stbi__tga_
; Line 5703
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5704
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN7@stbi__tga_:
; Line 5706
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5707
	mov	DWORD PTR tga_colormap_bpp$[rsp], 0
$LN4@stbi__tga_:
; Line 5709
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_w$[rsp], eax
; Line 5710
	cmp	DWORD PTR tga_w$[rsp], 1
	jge	SHORT $LN8@stbi__tga_
; Line 5711
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5712
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN8@stbi__tga_:
; Line 5714
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_h$[rsp], eax
; Line 5715
	cmp	DWORD PTR tga_h$[rsp], 1
	jge	SHORT $LN9@stbi__tga_
; Line 5716
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5717
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN9@stbi__tga_:
; Line 5719
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5720
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5721
	cmp	DWORD PTR tga_colormap_bpp$[rsp], 0
	je	SHORT $LN10@stbi__tga_
; Line 5722
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	je	SHORT $LN12@stbi__tga_
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 16
	je	SHORT $LN12@stbi__tga_
; Line 5725
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5726
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5728
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, DWORD PTR tga_colormap_bpp$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
; Line 5729
	jmp	SHORT $LN11@stbi__tga_
$LN10@stbi__tga_:
; Line 5730
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN18@stbi__tga_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN18@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 1
$LN19@stbi__tga_:
	xor	r8d, r8d
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN11@stbi__tga_:
; Line 5732
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN13@stbi__tga_
; Line 5733
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5734
	xor	eax, eax
	jmp	SHORT $LN1@stbi__tga_
$LN13@stbi__tga_:
; Line 5736
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN14@stbi__tga_
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN14@stbi__tga_:
; Line 5737
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN15@stbi__tga_
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN15@stbi__tga_:
; Line 5738
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN16@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN16@stbi__tga_:
; Line 5739
	mov	eax, 1
$LN1@stbi__tga_:
; Line 5740
	add	rsp, 88					; 00000058H
	ret	0
?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__tga_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_comp$ = 48
j$ = 52
i$ = 56
tga_width$ = 60
tga_height$ = 64
temp$1 = 68
temp$2 = 69
tga_palette_len$ = 72
tga_data$ = 80
tga_rgb16$ = 88
pal_idx$3 = 92
read_next_pixel$ = 96
tga_image_type$ = 100
tga_indexed$ = 104
raw_data$ = 108
RLE_count$ = 112
tga_inverted$ = 116
index1$4 = 120
index2$5 = 124
tga_palette$ = 128
tga_is_RLE$ = 136
tga_palette_bits$ = 140
tga_pixel$6 = 144
tv162 = 152
tv174 = 156
tv185 = 160
tv197 = 164
tv212 = 168
tv225 = 172
tv250 = 176
RLE_cmd$7 = 180
RLE_repeating$ = 184
tga_bits_per_pixel$ = 188
tv272 = 192
tga_y_origin$ = 196
tga_x_origin$ = 200
tga_palette_start$ = 204
tv134 = 208
tv140 = 212
tv155 = 216
row$8 = 220
tga_offset$ = 224
pal_entry$9 = 232
tga_row$10 = 240
s$ = 272
x$ = 280
y$ = 288
comp$ = 296
req_comp$ = 304
ri$ = 312
?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__tga_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5794
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
; Line 5796
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_offset$[rsp], eax
; Line 5797
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_indexed$[rsp], eax
; Line 5798
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5799
	mov	DWORD PTR tga_is_RLE$[rsp], 0
; Line 5800
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5801
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_palette_len$[rsp], eax
; Line 5802
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_palette_bits$[rsp], eax
; Line 5803
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_x_origin$[rsp], eax
; Line 5804
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_y_origin$[rsp], eax
; Line 5805
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_width$[rsp], eax
; Line 5806
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_height$[rsp], eax
; Line 5807
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5808
	mov	DWORD PTR tga_rgb16$[rsp], 0
; Line 5809
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5813
	mov	QWORD PTR tga_palette$[rsp], 0
; Line 5815
	lea	rax, QWORD PTR raw_data$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
; Line 5816
	mov	DWORD PTR RLE_count$[rsp], 0
; Line 5817
	mov	DWORD PTR RLE_repeating$[rsp], 0
; Line 5818
	mov	DWORD PTR read_next_pixel$[rsp], 1
; Line 5823
	cmp	DWORD PTR tga_height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN29@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG90660
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__tga_
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN63@stbi__tga_
$LN62@stbi__tga_:
	mov	DWORD PTR tv134[rsp], 0
$LN63@stbi__tga_:
	movsxd	rax, DWORD PTR tv134[rsp]
	jmp	$LN1@stbi__tga_
$LN29@stbi__tga_:
; Line 5824
	cmp	DWORD PTR tga_width$[rsp], 16777216	; 01000000H
	jle	SHORT $LN30@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG90662
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__tga_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN65@stbi__tga_
$LN64@stbi__tga_:
	mov	DWORD PTR tv140[rsp], 0
$LN65@stbi__tga_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__tga_
$LN30@stbi__tga_:
; Line 5827
	cmp	DWORD PTR tga_image_type$[rsp], 8
	jl	SHORT $LN31@stbi__tga_
; Line 5829
	mov	eax, DWORD PTR tga_image_type$[rsp]
	sub	eax, 8
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5830
	mov	DWORD PTR tga_is_RLE$[rsp], 1
$LN31@stbi__tga_:
; Line 5832
	mov	eax, DWORD PTR tga_inverted$[rsp]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5835
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	SHORT $LN32@stbi__tga_
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	xor	edx, edx
	mov	ecx, DWORD PTR tga_palette_bits$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
	jmp	SHORT $LN33@stbi__tga_
$LN32@stbi__tga_:
; Line 5836
	cmp	DWORD PTR tga_image_type$[rsp], 3
	jne	SHORT $LN66@stbi__tga_
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN67@stbi__tga_
$LN66@stbi__tga_:
	mov	DWORD PTR tv155[rsp], 0
$LN67@stbi__tga_:
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	mov	edx, DWORD PTR tv155[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN33@stbi__tga_:
; Line 5838
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN34@stbi__tga_
; Line 5839
	lea	rcx, OFFSET FLAT:$SG90667
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__tga_
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN69@stbi__tga_
$LN68@stbi__tga_:
	mov	DWORD PTR tv162[rsp], 0
$LN69@stbi__tga_:
	movsxd	rax, DWORD PTR tv162[rsp]
	jmp	$LN1@stbi__tga_
$LN34@stbi__tga_:
; Line 5842
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5843
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5844
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN35@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN35@stbi__tga_:
; Line 5846
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN36@stbi__tga_
; Line 5847
	lea	rcx, OFFSET FLAT:$SG90670
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__tga_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN71@stbi__tga_
$LN70@stbi__tga_:
	mov	DWORD PTR tv174[rsp], 0
$LN71@stbi__tga_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__tga_
$LN36@stbi__tga_:
; Line 5849
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR tga_data$[rsp], rax
; Line 5850
	cmp	QWORD PTR tga_data$[rsp], 0
	jne	SHORT $LN37@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG90672
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__tga_
	mov	DWORD PTR tv185[rsp], 0
	jmp	SHORT $LN73@stbi__tga_
$LN72@stbi__tga_:
	mov	DWORD PTR tv185[rsp], 0
$LN73@stbi__tga_:
	movsxd	rax, DWORD PTR tv185[rsp]
	jmp	$LN1@stbi__tga_
$LN37@stbi__tga_:
; Line 5853
	mov	edx, DWORD PTR tga_offset$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5855
	cmp	DWORD PTR tga_indexed$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN38@stbi__tga_
; Line 5856
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__tga_
$LN2@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__tga_:
	mov	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__tga_
; Line 5857
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	SHORT $LN74@stbi__tga_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	mov	DWORD PTR tv197[rsp], eax
	jmp	SHORT $LN75@stbi__tga_
$LN74@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv197[rsp], eax
$LN75@stbi__tga_:
	mov	eax, DWORD PTR tv197[rsp]
	mov	DWORD PTR row$8[rsp], eax
; Line 5858
	mov	eax, DWORD PTR row$8[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR tga_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_row$10[rsp], rax
; Line 5859
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_row$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 5860
	jmp	$LN2@stbi__tga_
$LN3@stbi__tga_:
; Line 5861
	jmp	$LN39@stbi__tga_
$LN38@stbi__tga_:
; Line 5863
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN40@stbi__tga_
; Line 5865
	cmp	DWORD PTR tga_palette_len$[rsp], 0
	jne	SHORT $LN41@stbi__tga_
; Line 5866
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	free
; Line 5867
	lea	rcx, OFFSET FLAT:$SG90677
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__tga_
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN77@stbi__tga_
$LN76@stbi__tga_:
	mov	DWORD PTR tv212[rsp], 0
$LN77@stbi__tga_:
	movsxd	rax, DWORD PTR tv212[rsp]
	jmp	$LN1@stbi__tga_
$LN41@stbi__tga_:
; Line 5871
	mov	edx, DWORD PTR tga_palette_start$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5873
	xor	r8d, r8d
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	ecx, DWORD PTR tga_palette_len$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR tga_palette$[rsp], rax
; Line 5874
	cmp	QWORD PTR tga_palette$[rsp], 0
	jne	SHORT $LN42@stbi__tga_
; Line 5875
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	free
; Line 5876
	lea	rcx, OFFSET FLAT:$SG90679
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__tga_
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN79@stbi__tga_
$LN78@stbi__tga_:
	mov	DWORD PTR tv225[rsp], 0
$LN79@stbi__tga_:
	movsxd	rax, DWORD PTR tv225[rsp]
	jmp	$LN1@stbi__tga_
$LN42@stbi__tga_:
; Line 5878
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	$LN43@stbi__tga_
; Line 5879
	mov	rax, QWORD PTR tga_palette$[rsp]
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5880
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN80@stbi__tga_
	mov	r8d, 5880				; 000016f8H
	lea	rdx, OFFSET FLAT:$SG90682
	lea	rcx, OFFSET FLAT:$SG90683
	call	_wassert
	xor	eax, eax
$LN80@stbi__tga_:
; Line 5881
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__tga_
$LN5@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__tga_
; Line 5882
	mov	rdx, QWORD PTR pal_entry$9[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ; stbi__tga_read_rgb16
; Line 5883
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR pal_entry$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5884
	jmp	SHORT $LN5@stbi__tga_
$LN6@stbi__tga_:
; Line 5885
	jmp	SHORT $LN44@stbi__tga_
$LN43@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_palette$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
	test	eax, eax
	jne	SHORT $LN45@stbi__tga_
; Line 5886
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	free
; Line 5887
	mov	rcx, QWORD PTR tga_palette$[rsp]
	call	free
; Line 5888
	lea	rcx, OFFSET FLAT:$SG90685
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__tga_
	mov	DWORD PTR tv250[rsp], 0
	jmp	SHORT $LN82@stbi__tga_
$LN81@stbi__tga_:
	mov	DWORD PTR tv250[rsp], 0
$LN82@stbi__tga_:
	movsxd	rax, DWORD PTR tv250[rsp]
	jmp	$LN1@stbi__tga_
$LN45@stbi__tga_:
$LN44@stbi__tga_:
$LN40@stbi__tga_:
; Line 5892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__tga_
$LN8@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__tga_
; Line 5895
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	je	SHORT $LN46@stbi__tga_
; Line 5897
	cmp	DWORD PTR RLE_count$[rsp], 0
	jne	SHORT $LN48@stbi__tga_
; Line 5900
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR RLE_cmd$7[rsp], eax
; Line 5901
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	and	eax, 127				; 0000007fH
	inc	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5902
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	sar	eax, 7
	mov	DWORD PTR RLE_repeating$[rsp], eax
; Line 5903
	mov	DWORD PTR read_next_pixel$[rsp], 1
	jmp	SHORT $LN49@stbi__tga_
$LN48@stbi__tga_:
; Line 5904
	cmp	DWORD PTR RLE_repeating$[rsp], 0
	jne	SHORT $LN50@stbi__tga_
; Line 5906
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN50@stbi__tga_:
$LN49@stbi__tga_:
; Line 5908
	jmp	SHORT $LN47@stbi__tga_
$LN46@stbi__tga_:
; Line 5910
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN47@stbi__tga_:
; Line 5913
	cmp	DWORD PTR read_next_pixel$[rsp], 0
	je	$LN51@stbi__tga_
; Line 5916
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN52@stbi__tga_
; Line 5919
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	jne	SHORT $LN83@stbi__tga_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv272[rsp], eax
	jmp	SHORT $LN84@stbi__tga_
$LN83@stbi__tga_:
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tv272[rsp], eax
$LN84@stbi__tga_:
	mov	eax, DWORD PTR tv272[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5920
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR pal_idx$3[rsp], eax
	jl	SHORT $LN54@stbi__tga_
; Line 5922
	mov	DWORD PTR pal_idx$3[rsp], 0
$LN54@stbi__tga_:
; Line 5924
	mov	eax, DWORD PTR pal_idx$3[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5925
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__tga_
$LN11@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN12@stbi__tga_
; Line 5926
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR pal_idx$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR tga_palette$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5927
	jmp	SHORT $LN11@stbi__tga_
$LN12@stbi__tga_:
; Line 5928
	jmp	SHORT $LN53@stbi__tga_
$LN52@stbi__tga_:
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	SHORT $LN55@stbi__tga_
; Line 5929
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN85@stbi__tga_
	mov	r8d, 5929				; 00001729H
	lea	rdx, OFFSET FLAT:$SG90697
	lea	rcx, OFFSET FLAT:$SG90698
	call	_wassert
	xor	eax, eax
$LN85@stbi__tga_:
; Line 5930
	lea	rdx, QWORD PTR raw_data$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ; stbi__tga_read_rgb16
; Line 5931
	jmp	SHORT $LN56@stbi__tga_
$LN55@stbi__tga_:
; Line 5933
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN16@stbi__tga_
$LN14@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN16@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN15@stbi__tga_
; Line 5934
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5935
	jmp	SHORT $LN14@stbi__tga_
$LN15@stbi__tga_:
$LN56@stbi__tga_:
$LN53@stbi__tga_:
; Line 5938
	mov	DWORD PTR read_next_pixel$[rsp], 0
$LN51@stbi__tga_:
; Line 5942
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN17@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN18@stbi__tga_
; Line 5943
	movsxd	rax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR tga_comp$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR raw_data$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN17@stbi__tga_
$LN18@stbi__tga_:
; Line 5946
	mov	eax, DWORD PTR RLE_count$[rsp]
	dec	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5947
	jmp	$LN8@stbi__tga_
$LN9@stbi__tga_:
; Line 5949
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	$LN57@stbi__tga_
; Line 5951
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN22@stbi__tga_
$LN20@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN22@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	shl	eax, 1
	cmp	eax, DWORD PTR tga_height$[rsp]
	jge	$LN21@stbi__tga_
; Line 5953
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index1$4[rsp], eax
; Line 5954
	mov	eax, DWORD PTR tga_height$[rsp]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index2$5[rsp], eax
; Line 5955
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN25@stbi__tga_
$LN23@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__tga_:
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN24@stbi__tga_
; Line 5957
	movsxd	rax, DWORD PTR index1$4[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$2[rsp], al
; Line 5958
	movsxd	rax, DWORD PTR index2$5[rsp]
	movsxd	rcx, DWORD PTR index1$4[rsp]
	mov	rdx, QWORD PTR tga_data$[rsp]
	mov	rdi, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5959
	movsxd	rax, DWORD PTR index2$5[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	edx, BYTE PTR temp$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5960
	mov	eax, DWORD PTR index1$4[rsp]
	inc	eax
	mov	DWORD PTR index1$4[rsp], eax
; Line 5961
	mov	eax, DWORD PTR index2$5[rsp]
	inc	eax
	mov	DWORD PTR index2$5[rsp], eax
; Line 5962
	jmp	SHORT $LN23@stbi__tga_
$LN24@stbi__tga_:
; Line 5963
	jmp	$LN20@stbi__tga_
$LN21@stbi__tga_:
$LN57@stbi__tga_:
; Line 5966
	cmp	QWORD PTR tga_palette$[rsp], 0
	je	SHORT $LN58@stbi__tga_
; Line 5968
	mov	rcx, QWORD PTR tga_palette$[rsp]
	call	free
$LN58@stbi__tga_:
$LN39@stbi__tga_:
; Line 5973
	cmp	DWORD PTR tga_comp$[rsp], 3
	jl	$LN59@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN59@stbi__tga_
; Line 5975
	mov	rax, QWORD PTR tga_data$[rsp]
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5976
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__tga_
$LN26@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN27@stbi__tga_
; Line 5978
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$1[rsp], al
; Line 5979
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tga_pixel$6[rsp]
	mov	rdi, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5980
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	edx, BYTE PTR temp$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5981
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5982
	jmp	$LN26@stbi__tga_
$LN27@stbi__tga_:
$LN59@stbi__tga_:
; Line 5986
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN60@stbi__tga_
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN60@stbi__tga_
; Line 5987
	mov	eax, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tga_width$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR tga_data$[rsp], rax
$LN60@stbi__tga_:
; Line 5991
	mov	DWORD PTR tga_y_origin$[rsp], 0
	mov	eax, DWORD PTR tga_y_origin$[rsp]
	mov	DWORD PTR tga_x_origin$[rsp], eax
	mov	eax, DWORD PTR tga_x_origin$[rsp]
	mov	DWORD PTR tga_palette_bits$[rsp], eax
	mov	eax, DWORD PTR tga_palette_bits$[rsp]
	mov	DWORD PTR tga_palette_len$[rsp], eax
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5995
	mov	rax, QWORD PTR tga_data$[rsp]
$LN1@stbi__tga_:
; Line 5996
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__tga_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tga_color_type$ = 36
res$ = 40
s$ = 64
?stbi__tga_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__tga_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5743
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5744
	mov	DWORD PTR res$[rsp], 0
; Line 5746
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5747
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_color_type$[rsp], eax
; Line 5748
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
	jmp	$LN3@stbi__tga_
	jmp	$errorEnd$21
$LN2@stbi__tga_:
; Line 5749
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5750
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN4@stbi__tga_
; Line 5751
	cmp	DWORD PTR sz$[rsp], 1
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 9
	je	SHORT $LN6@stbi__tga_
	jmp	$LN7@stbi__tga_
	jmp	$errorEnd$21
$LN6@stbi__tga_:
; Line 5752
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5753
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5754
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN8@stbi__tga_
	jmp	$LN9@stbi__tga_
	jmp	$errorEnd$21
$LN8@stbi__tga_:
; Line 5755
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5756
	jmp	SHORT $LN5@stbi__tga_
$LN4@stbi__tga_:
; Line 5757
	cmp	DWORD PTR sz$[rsp], 2
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 3
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 10
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 11
	je	SHORT $LN10@stbi__tga_
	jmp	$LN11@stbi__tga_
	jmp	$errorEnd$21
$LN10@stbi__tga_:
; Line 5758
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN5@stbi__tga_:
; Line 5760
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN12@stbi__tga_
	jmp	SHORT $LN13@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN12@stbi__tga_:
; Line 5761
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN14@stbi__tga_
	jmp	SHORT $LN15@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN14@stbi__tga_:
; Line 5762
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5763
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN16@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN16@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN16@stbi__tga_
	jmp	SHORT $LN17@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN16@stbi__tga_:
; Line 5764
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN18@stbi__tga_
	jmp	SHORT $LN19@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN18@stbi__tga_:
; Line 5766
	mov	DWORD PTR res$[rsp], 1
$LN3@stbi__tga_:
$LN7@stbi__tga_:
$LN9@stbi__tga_:
$LN11@stbi__tga_:
$LN13@stbi__tga_:
$LN15@stbi__tga_:
$LN17@stbi__tga_:
$LN19@stbi__tga_:
$errorEnd$21:
; Line 5769
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5770
	mov	eax, DWORD PTR res$[rsp]
; Line 5771
	add	rsp, 56					; 00000038H
	ret	0
?stbi__tga_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__tga_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
p$ = 40
info$ = 48
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__bmp_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7258
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7262
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 7263
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ; stbi__bmp_parse_header
	mov	QWORD PTR p$[rsp], rax
; Line 7264
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi__bmp_
; Line 7265
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7266
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 7268
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__bmp_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN3@stbi__bmp_:
; Line 7269
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__bmp_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__bmp_:
; Line 7270
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__bmp_
; Line 7271
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN6@stbi__bmp_
	cmp	DWORD PTR info$[rsp+24], -16777216	; ff000000H
	jne	SHORT $LN6@stbi__bmp_
; Line 7272
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 7274
	cmp	DWORD PTR info$[rsp+24], 0
	je	SHORT $LN9@stbi__bmp_
	mov	DWORD PTR tv77[rsp], 4
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
	mov	DWORD PTR tv77[rsp], 3
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 7276
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 7277
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__bmp_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
z$1 = 52
z$2 = 56
j$ = 60
out$ = 64
target$ = 72
a$3 = 76
v$4 = 80
ma$ = 84
t$5 = 88
psize$ = 92
width$ = 96
mr$ = 100
mg$ = 104
mb$ = 108
bit_offset$6 = 112
easy$7 = 116
all_a$ = 120
v$8 = 124
pad$ = 128
color$9 = 132
rcount$10 = 136
gcount$11 = 140
bcount$12 = 144
acount$13 = 148
tv80 = 152
tv87 = 156
tv174 = 160
tv181 = 164
tv196 = 168
tv209 = 172
tv218 = 176
tv253 = 180
tv272 = 184
v$14 = 188
v2$15 = 192
tv381 = 196
tv442 = 200
tv472 = 204
tv504 = 208
tv521 = 212
rshift$16 = 216
gshift$17 = 220
bshift$18 = 224
ashift$19 = 228
tv561 = 232
a$20 = 236
tv70 = 240
flip_vertically$ = 244
bpp$21 = 248
p1$22 = 256
p2$23 = 264
info$ = 272
pal$ = 320
__$ArrayPad$ = 1344
s$ = 1376
x$ = 1384
y$ = 1392
comp$ = 1400
req_comp$ = 1408
ri$ = 1416
?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__bmp_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5468
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1368				; 00000558H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5470
	mov	DWORD PTR mr$[rsp], 0
	mov	DWORD PTR mg$[rsp], 0
	mov	DWORD PTR mb$[rsp], 0
	mov	DWORD PTR ma$[rsp], 0
; Line 5472
	mov	DWORD PTR psize$[rsp], 0
; Line 5477
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 5478
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ; stbi__bmp_parse_header
	test	rax, rax
	jne	SHORT $LN35@stbi__bmp_
; Line 5479
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN35@stbi__bmp_:
; Line 5481
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN93@stbi__bmp_
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN94@stbi__bmp_
$LN93@stbi__bmp_:
	mov	DWORD PTR tv70[rsp], 0
$LN94@stbi__bmp_:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR flip_vertically$[rsp], eax
; Line 5482
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	abs
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5484
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN36@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90418
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN95@stbi__bmp_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN96@stbi__bmp_
$LN95@stbi__bmp_:
	mov	DWORD PTR tv80[rsp], 0
$LN96@stbi__bmp_:
	movsxd	rax, DWORD PTR tv80[rsp]
	jmp	$LN1@stbi__bmp_
$LN36@stbi__bmp_:
; Line 5485
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN37@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90420
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN97@stbi__bmp_
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN98@stbi__bmp_
$LN97@stbi__bmp_:
	mov	DWORD PTR tv87[rsp], 0
$LN98@stbi__bmp_:
	movsxd	rax, DWORD PTR tv87[rsp]
	jmp	$LN1@stbi__bmp_
$LN37@stbi__bmp_:
; Line 5487
	mov	eax, DWORD PTR info$[rsp+12]
	mov	DWORD PTR mr$[rsp], eax
; Line 5488
	mov	eax, DWORD PTR info$[rsp+16]
	mov	DWORD PTR mg$[rsp], eax
; Line 5489
	mov	eax, DWORD PTR info$[rsp+20]
	mov	DWORD PTR mb$[rsp], eax
; Line 5490
	mov	eax, DWORD PTR info$[rsp+24]
	mov	DWORD PTR ma$[rsp], eax
; Line 5491
	mov	eax, DWORD PTR info$[rsp+28]
	mov	DWORD PTR all_a$[rsp], eax
; Line 5493
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN38@stbi__bmp_
; Line 5494
	cmp	DWORD PTR info$[rsp], 24
	jge	SHORT $LN40@stbi__bmp_
; Line 5495
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 24
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR psize$[rsp], eax
$LN40@stbi__bmp_:
; Line 5496
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
; Line 5497
	cmp	DWORD PTR info$[rsp], 16
	jge	SHORT $LN41@stbi__bmp_
; Line 5498
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	sar	eax, 2
	mov	DWORD PTR psize$[rsp], eax
$LN41@stbi__bmp_:
$LN39@stbi__bmp_:
; Line 5500
	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN42@stbi__bmp_
; Line 5501
	movsxd	rax, DWORD PTR info$[rsp+4]
	mov	rcx, QWORD PTR s$[rsp]
	movsxd	rcx, DWORD PTR [rcx+184]
	mov	rdx, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [r8+208]
	mov	rdx, QWORD PTR [rdx+192]
	sub	rdx, r8
	add	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN43@stbi__bmp_
; Line 5502
	lea	rcx, OFFSET FLAT:$SG90427
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN99@stbi__bmp_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN100@stbi__bmp_
$LN99@stbi__bmp_:
	mov	DWORD PTR tv174[rsp], 0
$LN100@stbi__bmp_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__bmp_
$LN43@stbi__bmp_:
$LN42@stbi__bmp_:
; Line 5506
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN44@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN44@stbi__bmp_
; Line 5507
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 3
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
; Line 5509
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN101@stbi__bmp_
	mov	DWORD PTR tv181[rsp], 4
	jmp	SHORT $LN102@stbi__bmp_
$LN101@stbi__bmp_:
	mov	DWORD PTR tv181[rsp], 3
$LN102@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv181[rsp]
	mov	DWORD PTR [rax+8], ecx
$LN45@stbi__bmp_:
; Line 5510
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN46@stbi__bmp_
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN46@stbi__bmp_
; Line 5511
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR target$[rsp], eax
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
; Line 5513
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR target$[rsp], eax
$LN47@stbi__bmp_:
; Line 5516
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN48@stbi__bmp_
; Line 5517
	lea	rcx, OFFSET FLAT:$SG90433
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN103@stbi__bmp_
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN104@stbi__bmp_
$LN103@stbi__bmp_:
	mov	DWORD PTR tv196[rsp], 0
$LN104@stbi__bmp_:
	movsxd	rax, DWORD PTR tv196[rsp]
	jmp	$LN1@stbi__bmp_
$LN48@stbi__bmp_:
; Line 5519
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 5520
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN49@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG90435
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN105@stbi__bmp_
	mov	DWORD PTR tv209[rsp], 0
	jmp	SHORT $LN106@stbi__bmp_
$LN105@stbi__bmp_:
	mov	DWORD PTR tv209[rsp], 0
$LN106@stbi__bmp_:
	movsxd	rax, DWORD PTR tv209[rsp]
	jmp	$LN1@stbi__bmp_
$LN49@stbi__bmp_:
; Line 5521
	cmp	DWORD PTR info$[rsp], 16
	jge	$LN50@stbi__bmp_
; Line 5522
	mov	DWORD PTR z$1[rsp], 0
; Line 5523
	cmp	DWORD PTR psize$[rsp], 0
	je	SHORT $LN53@stbi__bmp_
	cmp	DWORD PTR psize$[rsp], 256		; 00000100H
	jle	SHORT $LN52@stbi__bmp_
$LN53@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG90440
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN107@stbi__bmp_
	mov	DWORD PTR tv218[rsp], 0
	jmp	SHORT $LN108@stbi__bmp_
$LN107@stbi__bmp_:
	mov	DWORD PTR tv218[rsp], 0
$LN108@stbi__bmp_:
	movsxd	rax, DWORD PTR tv218[rsp]
	jmp	$LN1@stbi__bmp_
$LN52@stbi__bmp_:
; Line 5524
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__bmp_:
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__bmp_
; Line 5525
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 5526
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 5527
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 5528
	cmp	DWORD PTR info$[rsp+8], 12
	je	SHORT $LN54@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
$LN54@stbi__bmp_:
; Line 5529
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 5530
	jmp	$LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5531
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN109@stbi__bmp_
	mov	DWORD PTR tv253[rsp], 3
	jmp	SHORT $LN110@stbi__bmp_
$LN109@stbi__bmp_:
	mov	DWORD PTR tv253[rsp], 4
$LN110@stbi__bmp_:
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	ecx, DWORD PTR psize$[rsp]
	imul	ecx, DWORD PTR tv253[rsp]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5532
	cmp	DWORD PTR info$[rsp], 1
	jne	SHORT $LN55@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN56@stbi__bmp_
$LN55@stbi__bmp_:
; Line 5533
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN57@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	shr	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN58@stbi__bmp_
$LN57@stbi__bmp_:
; Line 5534
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN59@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN60@stbi__bmp_
$LN59@stbi__bmp_:
; Line 5535
	mov	rcx, QWORD PTR out$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG90448
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN111@stbi__bmp_
	mov	DWORD PTR tv272[rsp], 0
	jmp	SHORT $LN112@stbi__bmp_
$LN111@stbi__bmp_:
	mov	DWORD PTR tv272[rsp], 0
$LN112@stbi__bmp_:
	movsxd	rax, DWORD PTR tv272[rsp]
	jmp	$LN1@stbi__bmp_
$LN60@stbi__bmp_:
$LN58@stbi__bmp_:
$LN56@stbi__bmp_:
; Line 5536
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5537
	cmp	DWORD PTR info$[rsp], 1
	jne	$LN61@stbi__bmp_
; Line 5538
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__bmp_
$LN5@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbi__bmp_
; Line 5539
	mov	DWORD PTR bit_offset$6[rsp], 7
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
; Line 5540
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__bmp_
$LN8@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__bmp_
; Line 5541
	mov	eax, DWORD PTR bit_offset$6[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$14[rsp]
	sar	eax, cl
	and	eax, 1
	mov	DWORD PTR color$9[rsp], eax
; Line 5542
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5543
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5544
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5545
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN63@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN63@stbi__bmp_:
; Line 5546
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN64@stbi__bmp_
	jmp	SHORT $LN9@stbi__bmp_
$LN64@stbi__bmp_:
; Line 5547
	mov	eax, DWORD PTR bit_offset$6[rsp]
	dec	eax
	mov	DWORD PTR bit_offset$6[rsp], eax
	cmp	DWORD PTR bit_offset$6[rsp], 0
	jge	SHORT $LN65@stbi__bmp_
; Line 5548
	mov	DWORD PTR bit_offset$6[rsp], 7
; Line 5549
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
$LN65@stbi__bmp_:
; Line 5551
	jmp	$LN8@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5552
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5553
	jmp	$LN5@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5554
	jmp	$LN62@stbi__bmp_
$LN61@stbi__bmp_:
; Line 5555
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__bmp_
$LN11@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stbi__bmp_
; Line 5556
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__bmp_
$LN14@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__bmp_
; Line 5557
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$4[rsp], eax
	mov	DWORD PTR v2$15[rsp], 0
; Line 5558
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN66@stbi__bmp_
; Line 5559
	mov	eax, DWORD PTR v$4[rsp]
	and	eax, 15
	mov	DWORD PTR v2$15[rsp], eax
; Line 5560
	mov	eax, DWORD PTR v$4[rsp]
	sar	eax, 4
	mov	DWORD PTR v$4[rsp], eax
$LN66@stbi__bmp_:
; Line 5562
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5563
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5564
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5565
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN67@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN67@stbi__bmp_:
; Line 5566
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN68@stbi__bmp_
	jmp	$LN15@stbi__bmp_
$LN68@stbi__bmp_:
; Line 5567
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN113@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv381[rsp], eax
	jmp	SHORT $LN114@stbi__bmp_
$LN113@stbi__bmp_:
	mov	eax, DWORD PTR v2$15[rsp]
	mov	DWORD PTR tv381[rsp], eax
$LN114@stbi__bmp_:
	mov	eax, DWORD PTR tv381[rsp]
	mov	DWORD PTR v$4[rsp], eax
; Line 5568
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5569
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5570
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5571
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN69@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN69@stbi__bmp_:
; Line 5572
	jmp	$LN14@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5573
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5574
	jmp	$LN11@stbi__bmp_
$LN12@stbi__bmp_:
$LN62@stbi__bmp_:
; Line 5576
	jmp	$LN51@stbi__bmp_
$LN50@stbi__bmp_:
; Line 5577
	mov	DWORD PTR rshift$16[rsp], 0
	mov	DWORD PTR gshift$17[rsp], 0
	mov	DWORD PTR bshift$18[rsp], 0
	mov	DWORD PTR ashift$19[rsp], 0
	mov	DWORD PTR rcount$10[rsp], 0
	mov	DWORD PTR gcount$11[rsp], 0
	mov	DWORD PTR bcount$12[rsp], 0
	mov	DWORD PTR acount$13[rsp], 0
; Line 5578
	mov	DWORD PTR z$2[rsp], 0
; Line 5579
	mov	DWORD PTR easy$7[rsp], 0
; Line 5580
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5581
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN70@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax], 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN71@stbi__bmp_
$LN70@stbi__bmp_:
; Line 5582
	cmp	DWORD PTR info$[rsp], 16
	jne	SHORT $LN72@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN73@stbi__bmp_
$LN72@stbi__bmp_:
; Line 5583
	mov	DWORD PTR width$[rsp], 0
$LN73@stbi__bmp_:
$LN71@stbi__bmp_:
; Line 5584
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5585
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN74@stbi__bmp_
; Line 5586
	mov	DWORD PTR easy$7[rsp], 1
	jmp	SHORT $LN75@stbi__bmp_
$LN74@stbi__bmp_:
; Line 5587
	cmp	DWORD PTR info$[rsp], 32		; 00000020H
	jne	SHORT $LN76@stbi__bmp_
; Line 5588
	cmp	DWORD PTR mb$[rsp], 255			; 000000ffH
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 65280		; 0000ff00H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mr$[rsp], 16711680		; 00ff0000H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN77@stbi__bmp_
; Line 5589
	mov	DWORD PTR easy$7[rsp], 2
$LN77@stbi__bmp_:
$LN76@stbi__bmp_:
$LN75@stbi__bmp_:
; Line 5591
	cmp	DWORD PTR easy$7[rsp], 0
	jne	$LN78@stbi__bmp_
; Line 5592
	cmp	DWORD PTR mr$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mb$[rsp], 0
	jne	SHORT $LN79@stbi__bmp_
$LN80@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG90469
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN115@stbi__bmp_
	mov	DWORD PTR tv442[rsp], 0
	jmp	SHORT $LN116@stbi__bmp_
$LN115@stbi__bmp_:
	mov	DWORD PTR tv442[rsp], 0
$LN116@stbi__bmp_:
	movsxd	rax, DWORD PTR tv442[rsp]
	jmp	$LN1@stbi__bmp_
$LN79@stbi__bmp_:
; Line 5594
	mov	ecx, DWORD PTR mr$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR rshift$16[rsp], eax
	mov	ecx, DWORD PTR mr$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR rcount$10[rsp], eax
; Line 5595
	mov	ecx, DWORD PTR mg$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR gshift$17[rsp], eax
	mov	ecx, DWORD PTR mg$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR gcount$11[rsp], eax
; Line 5596
	mov	ecx, DWORD PTR mb$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR bshift$18[rsp], eax
	mov	ecx, DWORD PTR mb$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR bcount$12[rsp], eax
; Line 5597
	mov	ecx, DWORD PTR ma$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR ashift$19[rsp], eax
	mov	ecx, DWORD PTR ma$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR acount$13[rsp], eax
; Line 5598
	cmp	DWORD PTR rcount$10[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR gcount$11[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR bcount$12[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR acount$13[rsp], 8
	jle	SHORT $LN81@stbi__bmp_
$LN82@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	free
	lea	rcx, OFFSET FLAT:$SG90472
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN117@stbi__bmp_
	mov	DWORD PTR tv472[rsp], 0
	jmp	SHORT $LN118@stbi__bmp_
$LN117@stbi__bmp_:
	mov	DWORD PTR tv472[rsp], 0
$LN118@stbi__bmp_:
	movsxd	rax, DWORD PTR tv472[rsp]
	jmp	$LN1@stbi__bmp_
$LN81@stbi__bmp_:
$LN78@stbi__bmp_:
; Line 5600
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__bmp_
$LN17@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN18@stbi__bmp_
; Line 5601
	cmp	DWORD PTR easy$7[rsp], 0
	je	$LN83@stbi__bmp_
; Line 5602
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__bmp_
$LN20@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN21@stbi__bmp_
; Line 5604
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5605
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5606
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5607
	mov	eax, DWORD PTR z$2[rsp]
	add	eax, 3
	mov	DWORD PTR z$2[rsp], eax
; Line 5608
	cmp	DWORD PTR easy$7[rsp], 2
	jne	SHORT $LN119@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv504[rsp], eax
	jmp	SHORT $LN120@stbi__bmp_
$LN119@stbi__bmp_:
	mov	DWORD PTR tv504[rsp], 255		; 000000ffH
$LN120@stbi__bmp_:
	movzx	eax, BYTE PTR tv504[rsp]
	mov	BYTE PTR a$3[rsp], al
; Line 5609
	movzx	eax, BYTE PTR a$3[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5610
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN85@stbi__bmp_
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR a$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN85@stbi__bmp_:
; Line 5611
	jmp	$LN20@stbi__bmp_
$LN21@stbi__bmp_:
; Line 5612
	jmp	$LN84@stbi__bmp_
$LN83@stbi__bmp_:
; Line 5613
	mov	eax, DWORD PTR info$[rsp]
	mov	DWORD PTR bpp$21[rsp], eax
; Line 5614
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__bmp_
$LN23@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN24@stbi__bmp_
; Line 5615
	cmp	DWORD PTR bpp$21[rsp], 16
	jne	SHORT $LN121@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tv521[rsp], eax
	jmp	SHORT $LN122@stbi__bmp_
$LN121@stbi__bmp_:
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR tv521[rsp], eax
$LN122@stbi__bmp_:
	mov	eax, DWORD PTR tv521[rsp]
	mov	DWORD PTR v$8[rsp], eax
; Line 5617
	mov	eax, DWORD PTR mr$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR rcount$10[rsp]
	mov	edx, DWORD PTR rshift$16[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5618
	mov	eax, DWORD PTR mg$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR gcount$11[rsp]
	mov	edx, DWORD PTR gshift$17[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5619
	mov	eax, DWORD PTR mb$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR bcount$12[rsp]
	mov	edx, DWORD PTR bshift$18[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5620
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN123@stbi__bmp_
	mov	eax, DWORD PTR ma$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR acount$13[rsp]
	mov	edx, DWORD PTR ashift$19[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	mov	DWORD PTR tv561[rsp], eax
	jmp	SHORT $LN124@stbi__bmp_
$LN123@stbi__bmp_:
	mov	DWORD PTR tv561[rsp], 255		; 000000ffH
$LN124@stbi__bmp_:
	mov	eax, DWORD PTR tv561[rsp]
	mov	DWORD PTR a$20[rsp], eax
; Line 5621
	mov	eax, DWORD PTR a$20[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5622
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN86@stbi__bmp_
	mov	eax, DWORD PTR a$20[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN86@stbi__bmp_:
; Line 5623
	jmp	$LN23@stbi__bmp_
$LN24@stbi__bmp_:
$LN84@stbi__bmp_:
; Line 5625
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5626
	jmp	$LN17@stbi__bmp_
$LN18@stbi__bmp_:
$LN51@stbi__bmp_:
; Line 5630
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN87@stbi__bmp_
	cmp	DWORD PTR all_a$[rsp], 0
	jne	SHORT $LN87@stbi__bmp_
; Line 5631
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN28@stbi__bmp_
$LN26@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__bmp_:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN27@stbi__bmp_
; Line 5632
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN26@stbi__bmp_
$LN27@stbi__bmp_:
$LN87@stbi__bmp_:
; Line 5634
	cmp	DWORD PTR flip_vertically$[rsp], 0
	je	$LN88@stbi__bmp_
; Line 5636
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN31@stbi__bmp_
$LN29@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN31@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sar	eax, 1
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN30@stbi__bmp_
; Line 5637
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p1$22[rsp], rax
; Line 5638
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx]
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p2$23[rsp], rax
; Line 5639
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi__bmp_
$LN32@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi__bmp_
; Line 5640
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p1$22[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p1$22[rsp]
	mov	r8, QWORD PTR p2$23[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p2$23[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5641
	jmp	SHORT $LN32@stbi__bmp_
$LN33@stbi__bmp_:
; Line 5642
	jmp	$LN29@stbi__bmp_
$LN30@stbi__bmp_:
$LN88@stbi__bmp_:
; Line 5645
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN89@stbi__bmp_
	mov	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN89@stbi__bmp_
; Line 5646
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR target$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 5647
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN90@stbi__bmp_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__bmp_
$LN90@stbi__bmp_:
$LN89@stbi__bmp_:
; Line 5650
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 5651
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 5652
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN91@stbi__bmp_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN91@stbi__bmp_:
; Line 5653
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__bmp_:
; Line 5654
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1368				; 00000558H
	ret	0
?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__bmp_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__bmp_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__bmp_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5298
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5299
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z ; stbi__bmp_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 5300
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5301
	mov	eax, DWORD PTR r$[rsp]
; Line 5302
	add	rsp, 56					; 00000038H
	ret	0
?stbi__bmp_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__bmp_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
?stbi__png_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__png_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5266
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5268
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5269
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ; stbi__png_info_raw
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5270
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5271
	cmp	DWORD PTR p$[rsp+32], 16
	je	SHORT $LN3@stbi__png_
; Line 5272
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN3@stbi__png_:
; Line 5275
	mov	eax, 1
$LN1@stbi__png_:
; Line 5276
	add	rsp, 88					; 00000058H
	ret	0
?stbi__png_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__png_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__png_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5259
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5261
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5262
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ; stbi__png_info_raw
; Line 5263
	add	rsp, 88					; 00000058H
	ret	0
?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__png_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__png_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5232
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5234
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5235
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__do_png
; Line 5236
	add	rsp, 104				; 00000068H
	ret	0
?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__png_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__png_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__png_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5239
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5241
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ; stbi__check_png_header
	mov	DWORD PTR r$[rsp], eax
; Line 5242
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5243
	mov	eax, DWORD PTR r$[rsp]
; Line 5244
	add	rsp, 56					; 00000038H
	ret	0
?stbi__png_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__png_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
j$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__jpeg_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4013
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4015
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 4016
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG89064
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4017
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4018
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z ; stbi__jpeg_info_raw
	mov	DWORD PTR result$[rsp], eax
; Line 4019
	mov	rcx, QWORD PTR j$[rsp]
	call	free
; Line 4020
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 4021
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__jpeg_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
j$ = 56
result$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__jpeg_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3975
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3977
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3978
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG89033
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi__jpeg
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
	mov	DWORD PTR tv70[rsp], 0
$LN5@stbi__jpeg:
	movsxd	rax, DWORD PTR tv70[rsp]
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3980
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3981
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__setup_jpeg
; Line 3982
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z ; load_jpeg_image
	mov	QWORD PTR result$[rsp], rax
; Line 3983
	mov	rcx, QWORD PTR j$[rsp]
	call	free
; Line 3984
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 3985
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__jpeg_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
j$ = 40
s$ = 64
?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__jpeg_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3988
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3990
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3991
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG89042
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3992
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3993
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__setup_jpeg
; Line 3994
	mov	edx, 1
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	mov	DWORD PTR r$[rsp], eax
; Line 3995
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 3996
	mov	rcx, QWORD PTR j$[rsp]
	call	free
; Line 3997
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__jpeg:
; Line 3998
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__jpeg_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
?stbi__rewind@@YAXPEAUstbi__context@@@Z PROC		; stbi__rewind
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 884
	mov	QWORD PTR [rsp+8], rcx
; Line 888
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	QWORD PTR [rax+192], rcx
; Line 889
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rax+200], rcx
; Line 890
	ret	0
?stbi__rewind@@YAXPEAUstbi__context@@@Z ENDP		; stbi__rewind
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
f$ = 56
?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z PROC ; stbi__start_file
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 875
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 876
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__stdio_callbacks@@3Ustbi_io_callbacks@@A
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 877
	add	rsp, 40					; 00000028H
	ret	0
?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ENDP ; stbi__start_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
user$ = 64
?stbi__stdio_eof@@YAHPEAX@Z PROC			; stbi__stdio_eof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 863
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 864
	mov	rcx, QWORD PTR user$[rsp]
	call	feof
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	rcx, QWORD PTR user$[rsp]
	call	ferror
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@stbi__stdi
$LN3@stbi__stdi:
	mov	DWORD PTR tv70[rsp], 1
$LN4@stbi__stdi:
	mov	eax, DWORD PTR tv70[rsp]
; Line 865
	add	rsp, 56					; 00000038H
	ret	0
?stbi__stdio_eof@@YAHPEAX@Z ENDP			; stbi__stdio_eof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ch$ = 32
user$ = 64
n$ = 72
?stbi__stdio_skip@@YAXPEAXH@Z PROC			; stbi__stdio_skip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 853
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 855
	mov	r8d, 1
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	call	fseek
; Line 856
	mov	rcx, QWORD PTR user$[rsp]
	call	fgetc
	mov	DWORD PTR ch$[rsp], eax
; Line 857
	cmp	DWORD PTR ch$[rsp], -1
	je	SHORT $LN2@stbi__stdi
; Line 858
	mov	rdx, QWORD PTR user$[rsp]
	mov	ecx, DWORD PTR ch$[rsp]
	call	ungetc
$LN2@stbi__stdi:
; Line 860
	add	rsp, 56					; 00000038H
	ret	0
?stbi__stdio_skip@@YAXPEAXH@Z ENDP			; stbi__stdio_skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
user$ = 48
data$ = 56
size$ = 64
?stbi__stdio_read@@YAHPEAXPEADH@Z PROC			; stbi__stdio_read
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 848
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 849
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR user$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	fread
; Line 850
	add	rsp, 40					; 00000028H
	ret	0
?stbi__stdio_read@@YAHPEAXPEADH@Z ENDP			; stbi__stdio_read
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
s$ = 80
c$ = 88
user$ = 96
?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z PROC ; stbi__start_callbacks
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 834
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 835
	mov	rax, QWORD PTR s$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR c$[rsp]
	mov	ecx, 24
	rep movsb
; Line 836
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 837
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+52], 128			; 00000080H
; Line 838
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 1
; Line 839
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 840
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv72[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 841
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ; stbi__refill_buffer
; Line 842
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+216], rcx
; Line 843
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ENDP ; stbi__start_callbacks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 32
buffer$ = 40
len$ = 48
?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z PROC	; stbi__start_mem
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 824
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 825
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 826
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 827
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 828
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 829
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv73[rsp], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+216], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+200], rcx
; Line 830
	add	rsp, 24
	ret	0
?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ENDP	; stbi__start_mem
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
tv74 = 40
s$ = 64
?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z PROC	; stbi__refill_buffer
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1578
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1579
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+52]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv74[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 1580
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	rax, QWORD PTR [rax+192]
	sub	rax, rcx
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+184]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+184], eax
; Line 1581
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__refi
; Line 1584
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 1585
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1586
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 57					; 00000039H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
; Line 1587
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	BYTE PTR [rax], 0
; Line 1588
	jmp	SHORT $LN3@stbi__refi
$LN2@stbi__refi:
; Line 1589
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1590
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	lea	rax, QWORD PTR [rcx+rax+56]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
$LN3@stbi__refi:
; Line 1592
	add	rsp, 56					; 00000038H
	ret	0
?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ENDP	; stbi__refill_buffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
info3$ = 36
?stbi__sse2_available@@YAHXZ PROC			; stbi__sse2_available
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 752
	sub	rsp, 56					; 00000038H
; Line 753
	call	?stbi__cpuid3@@YAHXZ			; stbi__cpuid3
	mov	DWORD PTR info3$[rsp], eax
; Line 754
	mov	eax, DWORD PTR info3$[rsp]
	sar	eax, 26
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@stbi__sse2
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__sse2
$LN3@stbi__sse2:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__sse2:
	mov	eax, DWORD PTR tv68[rsp]
; Line 755
	add	rsp, 56					; 00000038H
	ret	0
?stbi__sse2_available@@YAHXZ ENDP			; stbi__sse2_available
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 0
__$ArrayPad$ = 16
?stbi__cpuid3@@YAHXZ PROC				; stbi__cpuid3
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 730
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 732
	mov	eax, 1
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR info$[rsp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx
; Line 733
	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR info$[rsp+rax]
; Line 734
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?stbi__cpuid3@@YAHXZ ENDP				; stbi__cpuid3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_noheader_buffer PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4507
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4509
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4510
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4511
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4512
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4514
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4515
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_noheader_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
outlen$ = 4208
stbi_zlib_decode_noheader_malloc PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4491
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4493
	mov	ecx, 16384				; 00004000H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4494
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4495
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4496
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4497
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, 16384				; 00004000H
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4498
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4499
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4500
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4501
	mov	rcx, QWORD PTR a$[rsp+32]
	call	free
; Line 4502
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4504
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_noheader_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_buffer PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4480
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4482
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4483
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4484
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4485
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4487
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
len$ = 56
outlen$ = 64
stbi_zlib_decode_malloc PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4459
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4460
	mov	r9, QWORD PTR outlen$[rsp]
	mov	r8d, 16384				; 00004000H
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	stbi_zlib_decode_malloc_guesssize
; Line 4461
	add	rsp, 40					; 00000028H
	ret	0
stbi_zlib_decode_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
initial_size$ = 4208
outlen$ = 4216
parse_header$ = 4224
stbi_zlib_decode_malloc_guesssize_headerflag PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4464
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4466
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4467
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4468
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4469
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4470
	mov	eax, DWORD PTR parse_header$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4471
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4472
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4473
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4474
	mov	rcx, QWORD PTR a$[rsp+32]
	call	free
; Line 4475
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_malloc_guesssize_headerflag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
initial_size$ = 4208
outlen$ = 4216
stbi_zlib_decode_malloc_guesssize PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4443
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4445
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4446
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4447
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4448
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4449
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4450
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4451
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4452
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4453
	mov	rcx, QWORD PTR a$[rsp+32]
	call	free
; Line 4454
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_malloc_guesssize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load_thread PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1107
	mov	DWORD PTR [rsp+8], ecx
; Line 1108
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 1109
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 1110
	ret	0
stbi_set_flip_vertically_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb_thread PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4965
	mov	DWORD PTR [rsp+8], ecx
; Line 4966
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4967
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4968
	ret	0
stbi_convert_iphone_png_to_rgb_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1097
	mov	DWORD PTR [rsp+8], ecx
; Line 1098
	mov	eax, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA, eax
; Line 1099
	ret	0
stbi_set_flip_vertically_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4947
	mov	DWORD PTR [rsp+8], ecx
; Line 4948
	mov	eax, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR ?stbi__de_iphone_flag_global@@3HA, eax
; Line 4949
	ret	0
stbi_convert_iphone_png_to_rgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi_set_unpremultiply_on_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4942
	mov	DWORD PTR [rsp+8], ecx
; Line 4943
	mov	eax, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR ?stbi__unpremultiply_on_load_global@@3HA, eax
; Line 4944
	ret	0
stbi_set_unpremultiply_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_16_bit_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7632
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7635
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7636
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 7637
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
	mov	DWORD PTR r$[rsp], eax
; Line 7638
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 7639
	mov	eax, DWORD PTR r$[rsp]
; Line 7640
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_16_bit_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_16_bit PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7622
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7623
	lea	rdx, OFFSET FLAT:$SG91871
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7625
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_is_16
	lea	rcx, OFFSET FLAT:$SG91873
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi_is_16
$LN2@stbi_is_16:
; Line 7626
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_16_bit_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7627
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 7628
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_is_16:
; Line 7629
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_16_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
stbi_info_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7611
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7614
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7615
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 7616
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
	mov	DWORD PTR r$[rsp], eax
; Line 7617
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 7618
	mov	eax, DWORD PTR r$[rsp]
; Line 7619
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_info_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi_info PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7601
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7602
	lea	rdx, OFFSET FLAT:$SG91854
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7604
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_info
	lea	rcx, OFFSET FLAT:$SG91856
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi_info
$LN2@stbi_info:
; Line 7605
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_info_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7606
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 7607
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_info:
; Line 7608
	add	rsp, 56					; 00000038H
	ret	0
stbi_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
stbi_is_16_bit_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7665
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7667
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 7668
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
; Line 7669
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_16_bit_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7658
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7660
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 7661
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
; Line 7662
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7651
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7653
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 7654
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
; Line 7655
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7646
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 7647
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
; Line 7648
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
retval_from_stbi_load$ = 48
stbi_image_free PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1082
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1083
	mov	rcx, QWORD PTR retval_from_stbi_load$[rsp]
	call	free
; Line 1084
	add	rsp, 40					; 00000028H
	ret	0
stbi_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbi_failure_reason PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 971
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
; Line 972
	ret	0
stbi_failure_reason ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
res$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_hdr_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1523
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1525
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 1528
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1529
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	mov	DWORD PTR res$[rsp], eax
; Line 1530
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 1531
	mov	eax, DWORD PTR res$[rsp]
; Line 1536
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_hdr_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_hdr PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1512
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	lea	rdx, OFFSET FLAT:$SG86362
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1514
	mov	DWORD PTR result$[rsp], 0
; Line 1515
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN2@stbi_is_hd
; Line 1516
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_hdr_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 1517
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
$LN2@stbi_is_hd:
; Line 1519
	mov	eax, DWORD PTR result$[rsp]
; Line 1520
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_hdr_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1498
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1501
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1502
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
; Line 1508
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
clbk$ = 288
user$ = 296
stbi_is_hdr_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1540
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1543
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1544
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
; Line 1550
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_ldr_to_hdr_scale PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1556
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR ?stbi__l2h_scale@@3MA, xmm0
	ret	0
stbi_ldr_to_hdr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_ldr_to_hdr_gamma PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1555
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR ?stbi__l2h_gamma@@3MA, xmm0
	ret	0
stbi_ldr_to_hdr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_hdr_to_ldr_scale PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1562
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR ?stbi__h2l_scale_i@@3MA, xmm0
	ret	0
stbi_hdr_to_ldr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_hdr_to_ldr_gamma PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1561
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR ?stbi__h2l_gamma_i@@3MA, xmm0
	ret	0
stbi_hdr_to_ldr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
req_comp$ = 336
stbi_loadf_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1484
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1486
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1487
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_loadf PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1474
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1476
	lea	rdx, OFFSET FLAT:$SG86341
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1477
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_loadf
	lea	rcx, OFFSET FLAT:$SG86343
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_loadf
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_loadf
$LN4@stbi_loadf:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_loadf:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_loadf
$LN2@stbi_loadf:
; Line 1478
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_loadf_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1479
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1480
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_loadf:
; Line 1481
	add	rsp, 88					; 00000058H
	ret	0
stbi_loadf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1466
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1468
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1469
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1470
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1459
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1461
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1462
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1463
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file_16 PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1370
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1373
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1374
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
	mov	QWORD PTR result$[rsp], rax
; Line 1375
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1377
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
$LN2@stbi_load_:
; Line 1379
	mov	rax, QWORD PTR result$[rsp]
; Line 1380
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load_16 PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1383
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1384
	lea	rdx, OFFSET FLAT:$SG86240
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1386
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load_
	lea	rcx, OFFSET FLAT:$SG86242
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load_
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_load_:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load_
$LN2@stbi_load_:
; Line 1387
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file_16
	mov	QWORD PTR result$[rsp], rax
; Line 1388
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1389
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load_:
; Line 1390
	add	rsp, 88					; 00000058H
	ret	0
stbi_load_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1403
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1405
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1406
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
; Line 1407
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1396
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1398
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1399
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
; Line 1400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 64
result$ = 72
s$ = 80
__$ArrayPad$ = 304
buffer$ = 336
len$ = 344
delays$ = 352
x$ = 360
y$ = 368
z$ = 376
comp$ = 384
req_comp$ = 392
stbi_load_gif_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1425
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1428
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1430
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR comp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR delays$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z ; stbi__load_gif_main
	mov	QWORD PTR result$[rsp], rax
; Line 1431
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi_load_
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv88[rsp], eax
$LN5@stbi_load_:
	cmp	DWORD PTR tv88[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1432
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z ; stbi__vertical_flip_slices
$LN2@stbi_load_:
; Line 1435
	mov	rax, QWORD PTR result$[rsp]
; Line 1436
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
stbi_load_gif_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1357
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1360
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1361
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
	mov	QWORD PTR result$[rsp], rax
; Line 1362
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1364
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
$LN2@stbi_load_:
; Line 1366
	mov	rax, QWORD PTR result$[rsp]
; Line 1367
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1347
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1348
	lea	rdx, OFFSET FLAT:$SG86203
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1350
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load
	lea	rcx, OFFSET FLAT:$SG86205
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load
$LN4@stbi_load:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_load:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load
$LN2@stbi_load:
; Line 1351
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1352
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1353
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load:
; Line 1354
	add	rsp, 88					; 00000058H
	ret	0
stbi_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1417
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1419
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1420
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
; Line 1421
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1410
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1412
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1413
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
; Line 1414
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
off$1 = 32
i$ = 36
font_collection$ = 64
name_utf8$ = 72
flags$ = 80
?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z PROC	; stbtt_FindMatchingFont_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4921
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4923
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
; Line 4924
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	DWORD PTR off$1[rsp], eax
; Line 4925
	cmp	DWORD PTR off$1[rsp], 0
	jge	SHORT $LN5@stbtt_Find
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 4926
	mov	r9d, DWORD PTR flags$[rsp]
	mov	r8, QWORD PTR name_utf8$[rsp]
	mov	edx, DWORD PTR off$1[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__matches@@YAHPEAEI0H@Z		; stbtt__matches
	test	eax, eax
	je	SHORT $LN6@stbtt_Find
; Line 4927
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN6@stbtt_Find:
; Line 4928
	jmp	SHORT $LN2@stbtt_Find
$LN1@stbtt_Find:
; Line 4929
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z ENDP	; stbtt_FindMatchingFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nm$ = 48
nlen$ = 52
hd$ = 56
fc$ = 80
offset$ = 88
name$ = 96
flags$ = 104
?stbtt__matches@@YAHPEAEI0H@Z PROC			; stbtt__matches
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4892
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4893
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	DWORD PTR nlen$[rsp], eax
; Line 4895
	mov	eax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	jne	SHORT $LN2@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN2@stbtt__mat:
; Line 4898
	cmp	DWORD PTR flags$[rsp], 0
	je	SHORT $LN3@stbtt__mat
; Line 4899
	lea	r8, OFFSET FLAT:$SG85433
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR hd$[rsp], eax
; Line 4900
	mov	eax, DWORD PTR hd$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+44]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	and	eax, 7
	mov	ecx, DWORD PTR flags$[rsp]
	and	ecx, 7
	cmp	eax, ecx
	je	SHORT $LN4@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN4@stbtt__mat:
$LN3@stbtt__mat:
; Line 4903
	lea	r8, OFFSET FLAT:$SG85435
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4904
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN5@stbtt__mat:
; Line 4906
	cmp	DWORD PTR flags$[rsp], 0
	je	$LN6@stbtt__mat
; Line 4908
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN8@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN8@stbtt__mat:
; Line 4909
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN9@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN9@stbtt__mat:
; Line 4910
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN10@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN10@stbtt__mat:
; Line 4911
	jmp	$LN7@stbtt__mat
$LN6@stbtt__mat:
; Line 4912
	mov	DWORD PTR [rsp+40], 17
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN11@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN11@stbtt__mat:
; Line 4913
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN12@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN12@stbtt__mat:
; Line 4914
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN13@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN13@stbtt__mat:
$LN7@stbtt__mat:
; Line 4917
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4918
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__matches@@YAHPEAEI0H@Z ENDP			; stbtt__matches
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
matchlen$2 = 36
i$ = 40
platform$3 = 44
slen$4 = 48
encoding$5 = 52
off$6 = 56
count$ = 60
stringOffset$ = 64
id$7 = 68
language$8 = 72
tv231 = 80
fc$ = 112
nm$ = 120
name$ = 128
nlen$ = 136
target_id$ = 144
next_id$ = 152
?stbtt__matchpair@@YAHPEAEI0HHH@Z PROC			; stbtt__matchpair
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4845
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4847
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4848
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4850
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__mat
$LN2@stbtt__mat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__mat:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__mat
; Line 4851
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4852
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR id$7[rsp], eax
; Line 4853
	mov	eax, DWORD PTR target_id$[rsp]
	cmp	DWORD PTR id$7[rsp], eax
	jne	$LN5@stbtt__mat
; Line 4855
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR platform$3[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR encoding$5[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR language$8[rsp], eax
; Line 4858
	cmp	DWORD PTR platform$3[rsp], 0
	je	SHORT $LN7@stbtt__mat
	cmp	DWORD PTR platform$3[rsp], 3
	jne	SHORT $LN8@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 1
	je	SHORT $LN7@stbtt__mat
$LN8@stbtt__mat:
	cmp	DWORD PTR platform$3[rsp], 3
	jne	$LN6@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 10
	jne	$LN6@stbtt__mat
$LN7@stbtt__mat:
; Line 4859
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4860
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4863
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR nlen$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ; stbtt__CompareUTF8toUTF16_bigendian_prefix
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4864
	cmp	DWORD PTR matchlen$2[rsp], 0
	jl	$LN9@stbtt__mat
; Line 4866
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR next_id$[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR platform$3[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+14]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR encoding$5[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR language$8[rsp]
	jne	$LN10@stbtt__mat
; Line 4867
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4868
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4869
	cmp	DWORD PTR slen$4[rsp], 0
	jne	SHORT $LN12@stbtt__mat
; Line 4870
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN14@stbtt__mat
; Line 4871
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN14@stbtt__mat:
	jmp	$LN13@stbtt__mat
$LN12@stbtt__mat:
; Line 4872
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jge	$LN15@stbtt__mat
	movsxd	rax, DWORD PTR matchlen$2[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN15@stbtt__mat
; Line 4873
	mov	eax, DWORD PTR matchlen$2[rsp]
	inc	eax
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4874
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	ecx, DWORD PTR matchlen$2[rsp]
	mov	edx, DWORD PTR nlen$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rdx, DWORD PTR matchlen$2[rsp]
	mov	r8, QWORD PTR name$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv231[rsp], rdx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv231[rsp]
	mov	rcx, rax
	call	?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ; stbtt_CompareUTF8toUTF16_bigendian_internal
	test	eax, eax
	je	SHORT $LN16@stbtt__mat
; Line 4875
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN16@stbtt__mat:
$LN15@stbtt__mat:
$LN13@stbtt__mat:
; Line 4877
	jmp	SHORT $LN11@stbtt__mat
$LN10@stbtt__mat:
; Line 4879
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN17@stbtt__mat
; Line 4880
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN17@stbtt__mat:
$LN11@stbtt__mat:
$LN9@stbtt__mat:
$LN6@stbtt__mat:
$LN5@stbtt__mat:
; Line 4887
	jmp	$LN2@stbtt__mat
$LN3@stbtt__mat:
; Line 4888
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4889
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__matchpair@@YAHPEAEI0HHH@Z ENDP			; stbtt__matchpair
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s1$ = 64
len1$ = 72
s2$ = 80
len2$ = 88
?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z PROC ; stbtt_CompareUTF8toUTF16_bigendian_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4817
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4818
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ; stbtt__CompareUTF8toUTF16_bigendian_prefix
	cmp	DWORD PTR len1$[rsp], eax
	jne	SHORT $LN3@stbtt_Comp
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stbtt_Comp
$LN3@stbtt_Comp:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stbtt_Comp:
	mov	eax, DWORD PTR tv70[rsp]
; Line 4819
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ENDP ; stbtt_CompareUTF8toUTF16_bigendian_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
ch$1 = 4
c$2 = 8
ch2$3 = 12
tv85 = 16
tv84 = 20
tv132 = 24
tv131 = 28
tv143 = 32
tv142 = 36
tv175 = 40
tv174 = 44
tv186 = 48
tv185 = 52
tv197 = 56
tv196 = 60
tv207 = 64
tv206 = 68
tv226 = 72
tv225 = 76
tv238 = 80
tv237 = 84
tv249 = 88
tv248 = 92
s1$ = 112
len1$ = 120
s2$ = 128
len2$ = 136
?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z PROC ; stbtt__CompareUTF8toUTF16_bigendian_prefix
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4778
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4779
	mov	DWORD PTR i$[rsp], 0
$LN2@stbtt__Com:
; Line 4782
	cmp	DWORD PTR len2$[rsp], 0
	je	$LN3@stbtt__Com
; Line 4783
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch$1[rsp], ax
; Line 4784
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@stbtt__Com
; Line 4785
	mov	eax, DWORD PTR len1$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN6@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN6@stbtt__Com:
; Line 4786
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv84[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	mov	DWORD PTR tv85[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv85[rsp]
	cmp	DWORD PTR tv84[rsp], eax
	je	SHORT $LN7@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN7@stbtt__Com:
	jmp	$LN5@stbtt__Com
$LN4@stbtt__Com:
; Line 4787
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 2048				; 00000800H
	jge	$LN8@stbtt__Com
; Line 4788
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN10@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN10@stbtt__Com:
; Line 4789
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv131[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	add	eax, 192				; 000000c0H
	mov	DWORD PTR tv132[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv132[rsp]
	cmp	DWORD PTR tv131[rsp], eax
	je	SHORT $LN11@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN11@stbtt__Com:
; Line 4790
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv142[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv143[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv143[rsp]
	cmp	DWORD PTR tv142[rsp], eax
	je	SHORT $LN12@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN12@stbtt__Com:
	jmp	$LN9@stbtt__Com
$LN8@stbtt__Com:
; Line 4791
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN13@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN13@stbtt__Com
; Line 4793
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch2$3[rsp], ax
; Line 4794
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN15@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN15@stbtt__Com:
; Line 4795
	movzx	eax, WORD PTR ch$1[rsp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10
	movzx	ecx, WORD PTR ch2$3[rsp]
	lea	eax, DWORD PTR [rax+rcx+9216]
	mov	DWORD PTR c$2[rsp], eax
; Line 4796
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv174[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 18
	add	eax, 240				; 000000f0H
	mov	DWORD PTR tv175[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv175[rsp]
	cmp	DWORD PTR tv174[rsp], eax
	je	SHORT $LN16@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN16@stbtt__Com:
; Line 4797
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv185[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 12
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv186[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv186[rsp]
	cmp	DWORD PTR tv185[rsp], eax
	je	SHORT $LN17@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN17@stbtt__Com:
; Line 4798
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv196[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv197[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv197[rsp]
	cmp	DWORD PTR tv196[rsp], eax
	je	SHORT $LN18@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN18@stbtt__Com:
; Line 4799
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv206[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv207[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv207[rsp]
	cmp	DWORD PTR tv206[rsp], eax
	je	SHORT $LN19@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN19@stbtt__Com:
; Line 4800
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4801
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
	jmp	$LN14@stbtt__Com
$LN13@stbtt__Com:
; Line 4802
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN20@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 57344				; 0000e000H
	jge	SHORT $LN20@stbtt__Com
; Line 4803
	mov	eax, -1
	jmp	$LN1@stbtt__Com
; Line 4804
	jmp	$LN21@stbtt__Com
$LN20@stbtt__Com:
; Line 4805
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN22@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN22@stbtt__Com:
; Line 4806
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv225[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 12
	add	eax, 224				; 000000e0H
	mov	DWORD PTR tv226[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv226[rsp]
	cmp	DWORD PTR tv225[rsp], eax
	je	SHORT $LN23@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN23@stbtt__Com:
; Line 4807
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv237[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv238[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv238[rsp]
	cmp	DWORD PTR tv237[rsp], eax
	je	SHORT $LN24@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN24@stbtt__Com:
; Line 4808
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv248[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv249[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv249[rsp]
	cmp	DWORD PTR tv248[rsp], eax
	je	SHORT $LN25@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN25@stbtt__Com:
$LN21@stbtt__Com:
$LN14@stbtt__Com:
$LN9@stbtt__Com:
$LN5@stbtt__Com:
; Line 4810
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4811
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
; Line 4812
	jmp	$LN2@stbtt__Com
$LN3@stbtt__Com:
; Line 4813
	mov	eax, DWORD PTR i$[rsp]
$LN1@stbtt__Com:
; Line 4814
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ENDP ; stbtt__CompareUTF8toUTF16_bigendian_prefix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 36
s$ = 40
u$1 = 44
v$2 = 48
m$3 = 52
u$4 = 56
d$ = 60
z$5 = 64
p3$ = 68
v$6 = 72
n$7 = 76
a$ = 96
b$ = 104
c$ = 112
r$ = 120
?stbtt__solve_cubic@@YAHMMMPEAM@Z PROC			; stbtt__solve_cubic
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4545
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 88					; 00000058H
; Line 4546
	movss	xmm0, DWORD PTR a$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR s$[rsp], xmm0
; Line 4547
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR a$[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR b$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR p$[rsp], xmm0
; Line 4548
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR __real@41100000
	mulss	xmm1, DWORD PTR b$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR a$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@41d80000
	addss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR q$[rsp], xmm0
; Line 4549
	movss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR p$[rsp]
	movss	DWORD PTR p3$[rsp], xmm0
; Line 4550
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR p3$[rsp]
	divss	xmm1, DWORD PTR __real@41d80000
	addss	xmm0, xmm1
	movss	DWORD PTR d$[rsp], xmm0
; Line 4551
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN2@stbtt__sol
; Line 4552
	cvtss2sd xmm0, DWORD PTR d$[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR z$5[rsp], xmm0
; Line 4553
	movss	xmm0, DWORD PTR q$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR z$5[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR u$1[rsp], xmm0
; Line 4554
	movss	xmm0, DWORD PTR q$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR z$5[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR v$2[rsp], xmm0
; Line 4555
	movss	xmm0, DWORD PTR u$1[rsp]
	call	?stbtt__cuberoot@@YAMM@Z		; stbtt__cuberoot
	movss	DWORD PTR u$1[rsp], xmm0
; Line 4556
	movss	xmm0, DWORD PTR v$2[rsp]
	call	?stbtt__cuberoot@@YAMM@Z		; stbtt__cuberoot
	movss	DWORD PTR v$2[rsp], xmm0
; Line 4557
	movss	xmm0, DWORD PTR s$[rsp]
	addss	xmm0, DWORD PTR u$1[rsp]
	addss	xmm0, DWORD PTR v$2[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4558
	mov	eax, 1
	jmp	$LN1@stbtt__sol
; Line 4559
	jmp	$LN3@stbtt__sol
$LN2@stbtt__sol:
; Line 4560
	movss	xmm0, DWORD PTR p$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40400000
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR u$4[rsp], xmm0
; Line 4561
	movss	xmm0, DWORD PTR __real@c1d80000
	divss	xmm0, DWORD PTR p3$[rsp]
	cvtss2sd xmm0, xmm0
	call	sqrt
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm1, DWORD PTR q$[rsp]
	mulsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4000000000000000
	call	acos
	cvtsd2ss xmm0, xmm0
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR v$6[rsp], xmm0
; Line 4562
	cvtss2sd xmm0, DWORD PTR v$6[rsp]
	call	cos
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR m$3[rsp], xmm0
; Line 4563
	cvtss2sd xmm0, DWORD PTR v$6[rsp]
	subsd	xmm0, QWORD PTR __real@3ff921fafc8b007a
	call	cos
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@3fddb3d7
	movss	DWORD PTR n$7[rsp], xmm0
; Line 4564
	movss	xmm0, DWORD PTR u$4[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR m$3[rsp]
	movss	xmm1, DWORD PTR s$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4565
	movss	xmm0, DWORD PTR m$3[rsp]
	addss	xmm0, DWORD PTR n$7[rsp]
	movss	xmm1, DWORD PTR u$4[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4566
	movss	xmm0, DWORD PTR m$3[rsp]
	subss	xmm0, DWORD PTR n$7[rsp]
	movss	xmm1, DWORD PTR u$4[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4571
	mov	eax, 3
$LN3@stbtt__sol:
$LN1@stbtt__sol:
; Line 4573
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__solve_cubic@@YAHMMMPEAM@Z ENDP			; stbtt__solve_cubic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
?stbtt__cuberoot@@YAMM@Z PROC				; stbtt__cuberoot
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4536
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 4537
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbtt__cub
; Line 4538
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	cvtsd2ss xmm0, xmm0
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	jmp	SHORT $LN1@stbtt__cub
	jmp	SHORT $LN3@stbtt__cub
$LN2@stbtt__cub:
; Line 4540
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	movsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	cvtsd2ss xmm0, xmm0
$LN3@stbtt__cub:
$LN1@stbtt__cub:
; Line 4541
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__cuberoot@@YAMM@Z ENDP				; stbtt__cuberoot
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
y1$1 = 52
y0$2 = 56
y2$3 = 60
x1$4 = 64
winding$ = 68
x0$5 = 72
y0$6 = 76
y1$7 = 80
x2$8 = 84
x0$9 = 88
x1$10 = 92
y_frac$ = 96
tv140 = 100
tv144 = 104
tv148 = 108
tv163 = 112
tv204 = 116
tv207 = 120
tv208 = 124
tv210 = 128
tv213 = 132
tv214 = 136
tv216 = 140
tv219 = 144
tv220 = 148
tv276 = 152
tv280 = 156
tv284 = 160
tv299 = 164
tv319 = 168
num_hits$11 = 172
tv364 = 176
q1$12 = 184
ay$13 = 192
by$14 = 196
ax$15 = 200
x_inter$16 = 204
x_inter$17 = 208
q2$18 = 216
q0$19 = 224
ray$ = 232
orig$ = 240
hits$20 = 248
__$ArrayPad$ = 264
x$ = 288
y$ = 296
nverts$ = 304
verts$ = 312
?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z PROC ; stbtt__compute_crossings_x
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4468
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4470
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ray$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR ray$[rsp+4], xmm0
; Line 4472
	mov	DWORD PTR winding$[rsp], 0
; Line 4475
	cvtss2sd xmm0, DWORD PTR y$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	call	fmod
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR y_frac$[rsp], xmm0
; Line 4476
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR y_frac$[rsp]
	jbe	SHORT $LN5@stbtt__com
; Line 4477
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR y$[rsp], xmm0
	jmp	SHORT $LN6@stbtt__com
$LN5@stbtt__com:
; Line 4478
	movss	xmm0, DWORD PTR y_frac$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7d70a4
	jbe	SHORT $LN7@stbtt__com
; Line 4479
	movss	xmm0, DWORD PTR y$[rsp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR y$[rsp], xmm0
$LN7@stbtt__com:
$LN6@stbtt__com:
; Line 4481
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4482
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4485
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__com
$LN2@stbtt__com:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__com:
	mov	eax, DWORD PTR nverts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__com
; Line 4486
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN8@stbtt__com
; Line 4487
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$9[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$6[rsp], eax
; Line 4488
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$10[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$7[rsp], eax
; Line 4489
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN23@stbtt__com
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv140[rsp], eax
	jmp	SHORT $LN24@stbtt__com
$LN23@stbtt__com:
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv140[rsp], eax
$LN24@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv140[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN25@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN26@stbtt__com
$LN25@stbtt__com:
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv144[rsp], eax
$LN26@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv144[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR x1$10[rsp]
	cmp	DWORD PTR x0$9[rsp], eax
	jge	SHORT $LN27@stbtt__com
	mov	eax, DWORD PTR x0$9[rsp]
	mov	DWORD PTR tv148[rsp], eax
	jmp	SHORT $LN28@stbtt__com
$LN27@stbtt__com:
	mov	eax, DWORD PTR x1$10[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN28@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv148[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
; Line 4490
	cvtsi2ss xmm0, DWORD PTR y0$6[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR y0$6[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	eax, DWORD PTR x0$9[rsp]
	mov	ecx, DWORD PTR x1$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x0$9[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR x_inter$17[rsp], xmm0
; Line 4491
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x_inter$17[rsp]
	jbe	SHORT $LN10@stbtt__com
; Line 4492
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN29@stbtt__com
	mov	DWORD PTR tv163[rsp], 1
	jmp	SHORT $LN30@stbtt__com
$LN29@stbtt__com:
	mov	DWORD PTR tv163[rsp], -1
$LN30@stbtt__com:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN10@stbtt__com:
$LN9@stbtt__com:
$LN8@stbtt__com:
; Line 4495
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN11@stbtt__com
; Line 4496
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4497
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	mov	DWORD PTR x1$4[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4498
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x2$8[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y2$3[rsp], eax
; Line 4499
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN31@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv204[rsp], eax
	jmp	SHORT $LN32@stbtt__com
$LN31@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv204[rsp], eax
$LN32@stbtt__com:
	mov	eax, DWORD PTR tv204[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN35@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN36@stbtt__com
$LN35@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN33@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv207[rsp], eax
	jmp	SHORT $LN34@stbtt__com
$LN33@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv207[rsp], eax
$LN34@stbtt__com:
	mov	eax, DWORD PTR tv207[rsp]
	mov	DWORD PTR tv208[rsp], eax
$LN36@stbtt__com:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR ax$15[rsp], eax
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN37@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv210[rsp], eax
	jmp	SHORT $LN38@stbtt__com
$LN37@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv210[rsp], eax
$LN38@stbtt__com:
	mov	eax, DWORD PTR tv210[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN41@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv214[rsp], eax
	jmp	SHORT $LN42@stbtt__com
$LN41@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN39@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv213[rsp], eax
	jmp	SHORT $LN40@stbtt__com
$LN39@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv213[rsp], eax
$LN40@stbtt__com:
	mov	eax, DWORD PTR tv213[rsp]
	mov	DWORD PTR tv214[rsp], eax
$LN42@stbtt__com:
	mov	eax, DWORD PTR tv214[rsp]
	mov	DWORD PTR ay$13[rsp], eax
; Line 4500
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN43@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv216[rsp], eax
	jmp	SHORT $LN44@stbtt__com
$LN43@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv216[rsp], eax
$LN44@stbtt__com:
	mov	eax, DWORD PTR tv216[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN47@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN45@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv219[rsp], eax
	jmp	SHORT $LN46@stbtt__com
$LN45@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv219[rsp], eax
$LN46@stbtt__com:
	mov	eax, DWORD PTR tv219[rsp]
	mov	DWORD PTR tv220[rsp], eax
	jmp	SHORT $LN48@stbtt__com
$LN47@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv220[rsp], eax
$LN48@stbtt__com:
	mov	eax, DWORD PTR tv220[rsp]
	mov	DWORD PTR by$14[rsp], eax
; Line 4501
	cvtsi2ss xmm0, DWORD PTR ay$13[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
	cvtsi2ss xmm0, DWORD PTR by$14[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN12@stbtt__com
	cvtsi2ss xmm0, DWORD PTR ax$15[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
; Line 4504
	cvtsi2ss xmm0, DWORD PTR x0$5[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4505
	cvtsi2ss xmm0, DWORD PTR y0$2[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4506
	cvtsi2ss xmm0, DWORD PTR x1$4[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4507
	cvtsi2ss xmm0, DWORD PTR y1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4508
	cvtsi2ss xmm0, DWORD PTR x2$8[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4509
	cvtsi2ss xmm0, DWORD PTR y2$3[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4510
	lea	rdx, QWORD PTR q1$12[rsp]
	lea	rcx, QWORD PTR q0$19[rsp]
	call	?equal@@YAHPEAM0@Z			; equal
	test	eax, eax
	jne	SHORT $LN15@stbtt__com
	lea	rdx, QWORD PTR q2$18[rsp]
	lea	rcx, QWORD PTR q1$12[rsp]
	call	?equal@@YAHPEAM0@Z			; equal
	test	eax, eax
	je	$LN13@stbtt__com
$LN15@stbtt__com:
; Line 4511
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
; Line 4512
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4513
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$4[rsp], eax
; Line 4514
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4515
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN49@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv276[rsp], eax
	jmp	SHORT $LN50@stbtt__com
$LN49@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv276[rsp], eax
$LN50@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv276[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN51@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv280[rsp], eax
	jmp	SHORT $LN52@stbtt__com
$LN51@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv280[rsp], eax
$LN52@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv280[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN53@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv284[rsp], eax
	jmp	SHORT $LN54@stbtt__com
$LN53@stbtt__com:
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv284[rsp], eax
$LN54@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv284[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
; Line 4516
	cvtsi2ss xmm0, DWORD PTR y0$2[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR y0$2[rsp]
	mov	ecx, DWORD PTR y1$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x0$5[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR x_inter$16[rsp], xmm0
; Line 4517
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x_inter$16[rsp]
	jbe	SHORT $LN17@stbtt__com
; Line 4518
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN55@stbtt__com
	mov	DWORD PTR tv299[rsp], 1
	jmp	SHORT $LN56@stbtt__com
$LN55@stbtt__com:
	mov	DWORD PTR tv299[rsp], -1
$LN56@stbtt__com:
	mov	eax, DWORD PTR tv299[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN17@stbtt__com:
$LN16@stbtt__com:
; Line 4520
	jmp	$LN14@stbtt__com
$LN13@stbtt__com:
; Line 4521
	lea	rax, QWORD PTR hits$20[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR q2$18[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR q1$12[rsp]
	lea	r8, QWORD PTR q0$19[rsp]
	lea	rdx, QWORD PTR ray$[rsp]
	lea	rcx, QWORD PTR orig$[rsp]
	call	?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z ; stbtt__ray_intersect_bezier
	mov	DWORD PTR num_hits$11[rsp], eax
; Line 4522
	cmp	DWORD PTR num_hits$11[rsp], 1
	jl	SHORT $LN18@stbtt__com
; Line 4523
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN19@stbtt__com
; Line 4524
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN57@stbtt__com
	mov	DWORD PTR tv319[rsp], -1
	jmp	SHORT $LN58@stbtt__com
$LN57@stbtt__com:
	mov	DWORD PTR tv319[rsp], 1
$LN58@stbtt__com:
	mov	eax, DWORD PTR tv319[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN19@stbtt__com:
$LN18@stbtt__com:
; Line 4525
	cmp	DWORD PTR num_hits$11[rsp], 2
	jl	SHORT $LN20@stbtt__com
; Line 4526
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN21@stbtt__com
; Line 4527
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN59@stbtt__com
	mov	DWORD PTR tv364[rsp], -1
	jmp	SHORT $LN60@stbtt__com
$LN59@stbtt__com:
	mov	DWORD PTR tv364[rsp], 1
$LN60@stbtt__com:
	mov	eax, DWORD PTR tv364[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN21@stbtt__com:
$LN20@stbtt__com:
$LN14@stbtt__com:
$LN12@stbtt__com:
$LN11@stbtt__com:
; Line 4531
	jmp	$LN2@stbtt__com
$LN3@stbtt__com:
; Line 4532
	mov	eax, DWORD PTR winding$[rsp]
; Line 4533
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z ENDP ; stbtt__compute_crossings_x
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 0
a$ = 32
b$ = 40
?equal@@YAHPEAM0@Z PROC					; equal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4463
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4464
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	ucomiss	xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	ucomiss	xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv74[rsp], 0
$LN4@equal:
	mov	eax, DWORD PTR tv74[rsp]
; Line 4465
	add	rsp, 24
	ret	0
?equal@@YAHPEAM0@Z ENDP					; equal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s0$ = 32
s1$ = 36
num_s$ = 40
b$ = 44
a$ = 48
rayn_x$1 = 52
rayn_y$2 = 56
q0perp$ = 60
d$3 = 64
q0d$4 = 68
q1perp$ = 72
discr$5 = 76
rcpna$6 = 80
c$ = 84
rcp_len2$7 = 88
q10d$8 = 92
q0rd$9 = 96
q20d$10 = 100
q2perp$ = 104
roperp$ = 108
q1d$11 = 112
q2d$12 = 116
rod$13 = 120
orig$ = 144
ray$ = 152
q0$ = 160
q1$ = 168
q2$ = 176
hits$ = 184
?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z PROC	; stbtt__ray_intersect_bezier
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4399
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4400
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q0perp$[rsp], xmm0
; Line 4401
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q1perp$[rsp], xmm0
; Line 4402
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q2perp$[rsp], xmm0
; Line 4403
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR roperp$[rsp], xmm0
; Line 4405
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR q1perp$[rsp]
	movss	xmm1, DWORD PTR q0perp$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR q2perp$[rsp]
	movss	DWORD PTR a$[rsp], xmm0
; Line 4406
	movss	xmm0, DWORD PTR q1perp$[rsp]
	subss	xmm0, DWORD PTR q0perp$[rsp]
	movss	DWORD PTR b$[rsp], xmm0
; Line 4407
	movss	xmm0, DWORD PTR q0perp$[rsp]
	subss	xmm0, DWORD PTR roperp$[rsp]
	movss	DWORD PTR c$[rsp], xmm0
; Line 4409
	xorps	xmm0, xmm0
	movss	DWORD PTR s0$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR s1$[rsp], xmm0
; Line 4410
	mov	DWORD PTR num_s$[rsp], 0
; Line 4412
	cvtss2sd xmm0, DWORD PTR a$[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN14@stbtt__ray
	je	$LN2@stbtt__ray
$LN14@stbtt__ray:
; Line 4413
	movss	xmm0, DWORD PTR b$[rsp]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR a$[rsp]
	mulss	xmm1, DWORD PTR c$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR discr$5[rsp], xmm0
; Line 4414
	cvtss2sd xmm0, DWORD PTR discr$5[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN4@stbtt__ray
; Line 4415
	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR rcpna$6[rsp], xmm0
; Line 4416
	cvtss2sd xmm0, DWORD PTR discr$5[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR d$3[rsp], xmm0
; Line 4417
	movss	xmm0, DWORD PTR b$[rsp]
	addss	xmm0, DWORD PTR d$3[rsp]
	mulss	xmm0, DWORD PTR rcpna$6[rsp]
	movss	DWORD PTR s0$[rsp], xmm0
; Line 4418
	movss	xmm0, DWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR d$3[rsp]
	mulss	xmm0, DWORD PTR rcpna$6[rsp]
	movss	DWORD PTR s1$[rsp], xmm0
; Line 4419
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN5@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN5@stbtt__ray
; Line 4420
	mov	DWORD PTR num_s$[rsp], 1
$LN5@stbtt__ray:
; Line 4421
	cvtss2sd xmm0, DWORD PTR d$3[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s1$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN6@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s1$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN6@stbtt__ray
; Line 4422
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN7@stbtt__ray
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR s0$[rsp], xmm0
$LN7@stbtt__ray:
; Line 4423
	mov	eax, DWORD PTR num_s$[rsp]
	inc	eax
	mov	DWORD PTR num_s$[rsp], eax
$LN6@stbtt__ray:
$LN4@stbtt__ray:
; Line 4426
	jmp	SHORT $LN3@stbtt__ray
$LN2@stbtt__ray:
; Line 4429
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR c$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR s0$[rsp], xmm0
; Line 4430
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN8@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN8@stbtt__ray
; Line 4431
	mov	DWORD PTR num_s$[rsp], 1
$LN8@stbtt__ray:
$LN3@stbtt__ray:
; Line 4434
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN9@stbtt__ray
; Line 4435
	xor	eax, eax
	jmp	$LN1@stbtt__ray
	jmp	$LN10@stbtt__ray
$LN9@stbtt__ray:
; Line 4437
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rcp_len2$7[rsp], xmm0
; Line 4438
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rcp_len2$7[rsp]
	movss	DWORD PTR rayn_x$1[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rcp_len2$7[rsp]
	movss	DWORD PTR rayn_y$2[rsp], xmm0
; Line 4440
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q0$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q0$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q0d$4[rsp], xmm0
; Line 4441
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q1d$11[rsp], xmm0
; Line 4442
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q2d$12[rsp], xmm0
; Line 4443
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR orig$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR orig$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR rod$13[rsp], xmm0
; Line 4445
	movss	xmm0, DWORD PTR q1d$11[rsp]
	subss	xmm0, DWORD PTR q0d$4[rsp]
	movss	DWORD PTR q10d$8[rsp], xmm0
; Line 4446
	movss	xmm0, DWORD PTR q2d$12[rsp]
	subss	xmm0, DWORD PTR q0d$4[rsp]
	movss	DWORD PTR q20d$10[rsp], xmm0
; Line 4447
	movss	xmm0, DWORD PTR q0d$4[rsp]
	subss	xmm0, DWORD PTR rod$13[rsp]
	movss	DWORD PTR q0rd$9[rsp], xmm0
; Line 4449
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR s0$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR q10d$8[rsp]
	movss	xmm1, DWORD PTR q0rd$9[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, DWORD PTR q20d$10[rsp]
	addss	xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4450
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR s0$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4452
	cmp	DWORD PTR num_s$[rsp], 1
	jle	$LN11@stbtt__ray
; Line 4453
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR s1$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR q10d$8[rsp]
	movss	xmm1, DWORD PTR q0rd$9[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, DWORD PTR q20d$10[rsp]
	addss	xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4454
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR s1$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4455
	mov	eax, 2
	jmp	SHORT $LN1@stbtt__ray
; Line 4456
	jmp	SHORT $LN12@stbtt__ray
$LN11@stbtt__ray:
; Line 4457
	mov	eax, 1
$LN12@stbtt__ray:
$LN10@stbtt__ray:
$LN1@stbtt__ray:
; Line 4460
	add	rsp, 136				; 00000088H
	ret	0
?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z ENDP	; stbtt__ray_intersect_bezier
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
oversample$ = 8
?stbtt__oversample_shift@@YAMH@Z PROC			; stbtt__oversample_shift
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4137
	mov	DWORD PTR [rsp+8], ecx
; Line 4138
	cmp	DWORD PTR oversample$[rsp], 0
	jne	SHORT $LN2@stbtt__ove
; Line 4139
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@stbtt__ove
$LN2@stbtt__ove:
; Line 4145
	mov	eax, DWORD PTR oversample$[rsp]
	dec	eax
	neg	eax
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR oversample$[rsp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	divss	xmm0, xmm1
$LN1@stbtt__ove:
; Line 4146
	ret	0
?stbtt__oversample_shift@@YAMH@Z ENDP			; stbtt__oversample_shift
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_h$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
?stbtt__v_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__v_prefilter
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4075
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4077
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_h$[rsp], eax
; Line 4079
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4080
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__v_p
$LN2@stbtt__v_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__v_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__v_p
; Line 4083
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4085
	mov	DWORD PTR total$2[rsp], 0
; Line 4088
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__v_p
	jmp	$LN29@stbtt__v_p
$LN25@stbtt__v_p:
; Line 4090
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__v_p
$LN7@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN8@stbtt__v_p
; Line 4091
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4092
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4093
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4094
	jmp	$LN7@stbtt__v_p
$LN8@stbtt__v_p:
; Line 4095
	jmp	$LN5@stbtt__v_p
$LN26@stbtt__v_p:
; Line 4097
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__v_p
$LN10@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN11@stbtt__v_p
; Line 4098
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4099
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4100
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4101
	jmp	$LN10@stbtt__v_p
$LN11@stbtt__v_p:
; Line 4102
	jmp	$LN5@stbtt__v_p
$LN27@stbtt__v_p:
; Line 4104
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__v_p
$LN13@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN14@stbtt__v_p
; Line 4105
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4106
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4107
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4108
	jmp	$LN13@stbtt__v_p
$LN14@stbtt__v_p:
; Line 4109
	jmp	$LN5@stbtt__v_p
$LN28@stbtt__v_p:
; Line 4111
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__v_p
$LN16@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN17@stbtt__v_p
; Line 4112
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4113
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4114
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4115
	jmp	$LN16@stbtt__v_p
$LN17@stbtt__v_p:
; Line 4116
	jmp	$LN5@stbtt__v_p
$LN29@stbtt__v_p:
; Line 4118
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__v_p
$LN19@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN20@stbtt__v_p
; Line 4119
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4120
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4121
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4122
	jmp	$LN19@stbtt__v_p
$LN20@stbtt__v_p:
$LN5@stbtt__v_p:
; Line 4126
	jmp	SHORT $LN24@stbtt__v_p
$LN22@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__v_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__v_p
; Line 4127
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__v_p
	mov	r8d, 4127				; 0000101fH
	lea	rdx, OFFSET FLAT:$SG84791
	lea	rcx, OFFSET FLAT:$SG84792
	call	_wassert
	xor	eax, eax
$LN31@stbtt__v_p:
; Line 4128
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4129
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4130
	jmp	$LN22@stbtt__v_p
$LN23@stbtt__v_p:
; Line 4132
	mov	rax, QWORD PTR pixels$[rsp]
	inc	rax
	mov	QWORD PTR pixels$[rsp], rax
; Line 4133
	jmp	$LN2@stbtt__v_p
$LN3@stbtt__v_p:
; Line 4134
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__v_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__v_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_w$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
?stbtt__h_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__h_prefilter
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4013
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4015
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_w$[rsp], eax
; Line 4017
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4018
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__h_p
$LN2@stbtt__h_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__h_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__h_p
; Line 4021
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4023
	mov	DWORD PTR total$2[rsp], 0
; Line 4026
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__h_p
	jmp	$LN29@stbtt__h_p
$LN25@stbtt__h_p:
; Line 4028
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__h_p
$LN7@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN8@stbtt__h_p
; Line 4029
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4030
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4031
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4032
	jmp	$LN7@stbtt__h_p
$LN8@stbtt__h_p:
; Line 4033
	jmp	$LN5@stbtt__h_p
$LN26@stbtt__h_p:
; Line 4035
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__h_p
$LN10@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN11@stbtt__h_p
; Line 4036
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4037
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4038
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4039
	jmp	$LN10@stbtt__h_p
$LN11@stbtt__h_p:
; Line 4040
	jmp	$LN5@stbtt__h_p
$LN27@stbtt__h_p:
; Line 4042
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__h_p
$LN13@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN14@stbtt__h_p
; Line 4043
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4044
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4045
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4046
	jmp	$LN13@stbtt__h_p
$LN14@stbtt__h_p:
; Line 4047
	jmp	$LN5@stbtt__h_p
$LN28@stbtt__h_p:
; Line 4049
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__h_p
$LN16@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN17@stbtt__h_p
; Line 4050
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4051
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4052
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4053
	jmp	$LN16@stbtt__h_p
$LN17@stbtt__h_p:
; Line 4054
	jmp	$LN5@stbtt__h_p
$LN29@stbtt__h_p:
; Line 4056
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__h_p
$LN19@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN20@stbtt__h_p
; Line 4057
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4058
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4059
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4060
	jmp	$LN19@stbtt__h_p
$LN20@stbtt__h_p:
$LN5@stbtt__h_p:
; Line 4064
	jmp	SHORT $LN24@stbtt__h_p
$LN22@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__h_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__h_p
; Line 4065
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__h_p
	mov	r8d, 4065				; 00000fe1H
	lea	rdx, OFFSET FLAT:$SG84741
	lea	rcx, OFFSET FLAT:$SG84742
	call	_wassert
	xor	eax, eax
$LN31@stbtt__h_p:
; Line 4066
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4067
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4068
	jmp	SHORT $LN22@stbtt__h_p
$LN23@stbtt__h_p:
; Line 4070
	movsxd	rax, DWORD PTR stride_in_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixels$[rsp], rax
; Line 4071
	jmp	$LN2@stbtt__h_p
$LN3@stbtt__h_p:
; Line 4072
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__h_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__h_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
con$ = 32
rects$ = 40
num_rects$ = 48
?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z PROC ; stbrp_pack_rects
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3929
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3931
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbrp_pack
$LN2@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbrp_pack
; Line 3932
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jle	SHORT $LN8@stbrp_pack
; Line 3933
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3934
	mov	rax, QWORD PTR con$[rsp]
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+12], ecx
$LN8@stbrp_pack:
; Line 3936
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN9@stbrp_pack
; Line 3937
	jmp	$LN3@stbrp_pack
$LN9@stbrp_pack:
; Line 3938
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+rax], edx
; Line 3939
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	DWORD PTR [rcx+rax+4], edx
; Line 3940
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 1
; Line 3941
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 3942
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+16]
	jle	SHORT $LN10@stbrp_pack
; Line 3943
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN10@stbrp_pack:
; Line 3944
	jmp	$LN2@stbrp_pack
$LN3@stbrp_pack:
; Line 3945
	jmp	SHORT $LN7@stbrp_pack
$LN5@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbrp_pack
; Line 3946
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 0
	jmp	SHORT $LN5@stbrp_pack
$LN6@stbrp_pack:
; Line 3947
	add	rsp, 24
	ret	0
?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z ENDP ; stbrp_pack_rects
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
con$ = 8
pw$ = 16
ph$ = 24
nodes$ = 32
num_nodes$ = 40
?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z PROC ; stbrp_init_target
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3918
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3919
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3920
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 3921
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3922
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 3923
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 3926
	ret	0
?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z ENDP ; stbrp_init_target
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
y$ = 68
x$ = 72
gh$1 = 76
scale$ = 80
gw$2 = 84
bottom_y$ = 88
g$3 = 92
x0$4 = 96
y0$5 = 100
x1$6 = 104
y1$7 = 108
advance$8 = 112
lsb$9 = 116
f$ = 128
data$ = 304
offset$ = 312
pixel_height$ = 320
pixels$ = 328
pw$ = 336
ph$ = 344
first_char$ = 352
num_chars$ = 360
chardata$ = 368
?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z PROC ; stbtt_BakeFontBitmap_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3818
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
; Line 3822
	mov	QWORD PTR f$[rsp], 0
; Line 3823
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_InitFont
	test	eax, eax
	jne	SHORT $LN5@stbtt_Bake
; Line 3824
	mov	eax, -1
	jmp	$LN1@stbtt_Bake
$LN5@stbtt_Bake:
; Line 3825
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
; Line 3826
	mov	DWORD PTR y$[rsp], 1
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
; Line 3827
	mov	DWORD PTR bottom_y$[rsp], 1
; Line 3829
	movss	xmm1, DWORD PTR pixel_height$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR scale$[rsp], xmm0
; Line 3831
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Bake
$LN2@stbtt_Bake:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Bake:
	mov	eax, DWORD PTR num_chars$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Bake
; Line 3833
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR first_char$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR g$3[rsp], eax
; Line 3834
	lea	r9, QWORD PTR lsb$9[rsp]
	lea	r8, QWORD PTR advance$8[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 3835
	lea	rax, QWORD PTR y1$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$5[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$4[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scale$[rsp]
	movss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 3836
	mov	eax, DWORD PTR x0$4[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gw$2[rsp], eax
; Line 3837
	mov	eax, DWORD PTR y0$5[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gh$1[rsp], eax
; Line 3838
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN6@stbtt_Bake
; Line 3839
	mov	eax, DWORD PTR bottom_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
	mov	DWORD PTR x$[rsp], 1
$LN6@stbtt_Bake:
; Line 3840
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN7@stbtt_Bake
; Line 3841
	mov	eax, DWORD PTR i$[rsp]
	neg	eax
	jmp	$LN1@stbtt_Bake
$LN7@stbtt_Bake:
; Line 3842
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN10@stbtt_Bake
	mov	r8d, 3842				; 00000f02H
	lea	rdx, OFFSET FLAT:$SG84552
	lea	rcx, OFFSET FLAT:$SG84553
	call	_wassert
	xor	eax, eax
$LN10@stbtt_Bake:
; Line 3843
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN11@stbtt_Bake
	mov	r8d, 3843				; 00000f03H
	lea	rdx, OFFSET FLAT:$SG84554
	lea	rcx, OFFSET FLAT:$SG84555
	call	_wassert
	xor	eax, eax
$LN11@stbtt_Bake:
; Line 3844
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, DWORD PTR pw$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR g$3[rsp]
	mov	DWORD PTR [rsp+56], ecx
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR gh$1[rsp]
	mov	r8d, DWORD PTR gw$2[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_MakeGlyphBitmap
; Line 3845
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR x$[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 3846
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR y$[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 3847
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+4], ax
; Line 3848
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+6], ax
; Line 3849
	cvtsi2ss xmm0, DWORD PTR advance$8[rsp]
	movss	xmm1, DWORD PTR scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+16], xmm0
; Line 3850
	cvtsi2ss xmm0, DWORD PTR x0$4[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3851
	cvtsi2ss xmm0, DWORD PTR y0$5[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3852
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR x$[rsp], eax
; Line 3853
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR bottom_y$[rsp]
	jle	SHORT $LN8@stbtt_Bake
; Line 3854
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR bottom_y$[rsp], eax
$LN8@stbtt_Bake:
; Line 3855
	jmp	$LN2@stbtt_Bake
$LN3@stbtt_Bake:
; Line 3856
	mov	eax, DWORD PTR bottom_y$[rsp]
$LN1@stbtt_Bake:
; Line 3857
	add	rsp, 296				; 00000128H
	ret	0
?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z ENDP ; stbtt_BakeFontBitmap_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 96
num_points$ = 100
n$ = 104
x$1 = 108
y$2 = 112
pass$ = 116
tv133 = 120
points$ = 128
start$ = 136
objspace_flatness_squared$ = 140
tv155 = 144
tv173 = 148
vertices$ = 192
num_verts$ = 200
objspace_flatness$ = 208
contour_lengths$ = 216
num_contours$ = 224
userdata$ = 232
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z PROC ; stbtt_FlattenCurves
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3619
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	movaps	XMMWORD PTR [rsp+160], xmm6
; Line 3620
	mov	QWORD PTR points$[rsp], 0
; Line 3621
	mov	DWORD PTR num_points$[rsp], 0
; Line 3623
	movss	xmm0, DWORD PTR objspace_flatness$[rsp]
	mulss	xmm0, DWORD PTR objspace_flatness$[rsp]
	movss	DWORD PTR objspace_flatness_squared$[rsp], xmm0
; Line 3624
	mov	DWORD PTR n$[rsp], 0
	mov	DWORD PTR start$[rsp], 0
; Line 3627
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Flat
$LN2@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Flat
; Line 3628
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 1
	jne	SHORT $LN13@stbtt_Flat
; Line 3629
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN13@stbtt_Flat:
	jmp	SHORT $LN2@stbtt_Flat
$LN3@stbtt_Flat:
; Line 3631
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3632
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbtt_Flat
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN14@stbtt_Flat:
; Line 3634
	movsxd	rax, DWORD PTR n$[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	malloc
	mov	rcx, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3636
	mov	rax, QWORD PTR contour_lengths$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN15@stbtt_Flat
; Line 3637
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3638
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN15@stbtt_Flat:
; Line 3642
	mov	DWORD PTR pass$[rsp], 0
	jmp	SHORT $LN7@stbtt_Flat
$LN5@stbtt_Flat:
	mov	eax, DWORD PTR pass$[rsp]
	inc	eax
	mov	DWORD PTR pass$[rsp], eax
$LN7@stbtt_Flat:
	cmp	DWORD PTR pass$[rsp], 2
	jge	$LN6@stbtt_Flat
; Line 3643
	xorps	xmm0, xmm0
	movss	DWORD PTR x$1[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3644
	cmp	DWORD PTR pass$[rsp], 1
	jne	SHORT $LN16@stbtt_Flat
; Line 3645
	movsxd	rax, DWORD PTR num_points$[rsp]
	shl	rax, 3
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR points$[rsp], rax
; Line 3646
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN17@stbtt_Flat
	jmp	$LN18@stbtt_Flat
	jmp	$error$25
$LN17@stbtt_Flat:
$LN16@stbtt_Flat:
; Line 3648
	mov	DWORD PTR num_points$[rsp], 0
; Line 3649
	mov	DWORD PTR n$[rsp], -1
; Line 3650
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Flat
$LN8@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt_Flat
; Line 3651
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR tv133[rsp], al
	cmp	BYTE PTR tv133[rsp], 1
	je	SHORT $LN19@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 2
	je	$LN21@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 3
	je	$LN22@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 4
	je	$LN23@stbtt_Flat
	jmp	$LN11@stbtt_Flat
$LN19@stbtt_Flat:
; Line 3654
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN20@stbtt_Flat
; Line 3655
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN20@stbtt_Flat:
; Line 3656
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3657
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 3659
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3660
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv155[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv155[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3661
	jmp	$LN11@stbtt_Flat
$LN21@stbtt_Flat:
; Line 3663
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3664
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv173[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv173[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3665
	jmp	$LN11@stbtt_Flat
$LN22@stbtt_Flat:
; Line 3667
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm3, eax
	mov	DWORD PTR [rsp+72], 0
	movss	xmm4, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm4
	movss	DWORD PTR [rsp+56], xmm0
	movss	DWORD PTR [rsp+48], xmm1
	movss	DWORD PTR [rsp+40], xmm2
	movss	DWORD PTR [rsp+32], xmm3
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3671
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3672
	jmp	$LN11@stbtt_Flat
$LN23@stbtt_Flat:
; Line 3674
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	cvtsi2ss xmm3, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm4, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm5, eax
	mov	DWORD PTR [rsp+88], 0
	movss	xmm6, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm6
	movss	DWORD PTR [rsp+72], xmm0
	movss	DWORD PTR [rsp+64], xmm1
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm3
	movss	DWORD PTR [rsp+40], xmm4
	movss	DWORD PTR [rsp+32], xmm5
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3679
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
$LN11@stbtt_Flat:
; Line 3682
	jmp	$LN8@stbtt_Flat
$LN9@stbtt_Flat:
; Line 3683
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 3684
	jmp	$LN5@stbtt_Flat
$LN6@stbtt_Flat:
; Line 3686
	mov	rax, QWORD PTR points$[rsp]
	jmp	SHORT $LN1@stbtt_Flat
$LN18@stbtt_Flat:
$error$25:
; Line 3688
	mov	rcx, QWORD PTR points$[rsp]
	call	free
; Line 3689
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	free
; Line 3690
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rax], 0
; Line 3691
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3692
	xor	eax, eax
$LN1@stbtt_Flat:
; Line 3693
	movaps	xmm6, XMMWORD PTR [rsp+160]
	add	rsp, 184				; 000000b8H
	ret	0
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ENDP ; stbtt_FlattenCurves
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dx0$ = 96
dy0$ = 100
dx1$ = 104
dy1$ = 108
dx2$ = 112
dy2$ = 116
dx$ = 120
dy$ = 124
longlen$ = 128
shortlen$ = 132
x12$1 = 136
y12$2 = 140
ya$3 = 144
xa$4 = 148
y01$5 = 152
x01$6 = 156
y23$7 = 160
x23$8 = 164
yb$9 = 168
xb$10 = 172
my$11 = 176
mx$12 = 180
flatness_squared$ = 184
tv72 = 192
tv84 = 200
points$ = 224
num_points$ = 232
x0$ = 240
y0$ = 248
x1$ = 256
y1$ = 264
x2$ = 272
y2$ = 280
x3$ = 288
y3$ = 296
objspace_flatness_squared$ = 304
n$ = 312
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z PROC ; stbtt__tesselate_cubic
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3576
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 3578
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR dx0$[rsp], xmm0
; Line 3579
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR dy0$[rsp], xmm0
; Line 3580
	movss	xmm0, DWORD PTR x2$[rsp]
	subss	xmm0, DWORD PTR x1$[rsp]
	movss	DWORD PTR dx1$[rsp], xmm0
; Line 3581
	movss	xmm0, DWORD PTR y2$[rsp]
	subss	xmm0, DWORD PTR y1$[rsp]
	movss	DWORD PTR dy1$[rsp], xmm0
; Line 3582
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR dx2$[rsp], xmm0
; Line 3583
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR dy2$[rsp], xmm0
; Line 3584
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR dx$[rsp], xmm0
; Line 3585
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR dy$[rsp], xmm0
; Line 3586
	movss	xmm0, DWORD PTR dx0$[rsp]
	mulss	xmm0, DWORD PTR dx0$[rsp]
	movss	xmm1, DWORD PTR dy0$[rsp]
	mulss	xmm1, DWORD PTR dy0$[rsp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	movsd	QWORD PTR tv72[rsp], xmm0
	movss	xmm1, DWORD PTR dx1$[rsp]
	mulss	xmm1, DWORD PTR dx1$[rsp]
	movss	xmm2, DWORD PTR dy1$[rsp]
	mulss	xmm2, DWORD PTR dy1$[rsp]
	addss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movaps	xmm0, xmm1
	call	sqrt
	movsd	xmm1, QWORD PTR tv72[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv84[rsp], xmm0
	movss	xmm1, DWORD PTR dx2$[rsp]
	mulss	xmm1, DWORD PTR dx2$[rsp]
	movss	xmm2, DWORD PTR dy2$[rsp]
	mulss	xmm2, DWORD PTR dy2$[rsp]
	addss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movaps	xmm0, xmm1
	call	sqrt
	movsd	xmm1, QWORD PTR tv84[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR longlen$[rsp], xmm0
; Line 3587
	movss	xmm0, DWORD PTR dx$[rsp]
	mulss	xmm0, DWORD PTR dx$[rsp]
	movss	xmm1, DWORD PTR dy$[rsp]
	mulss	xmm1, DWORD PTR dy$[rsp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR shortlen$[rsp], xmm0
; Line 3588
	movss	xmm0, DWORD PTR longlen$[rsp]
	mulss	xmm0, DWORD PTR longlen$[rsp]
	movss	xmm1, DWORD PTR shortlen$[rsp]
	mulss	xmm1, DWORD PTR shortlen$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR flatness_squared$[rsp], xmm0
; Line 3590
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3591
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3593
	movss	xmm0, DWORD PTR flatness_squared$[rsp]
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3594
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR x1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x01$6[rsp], xmm0
; Line 3595
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y01$5[rsp], xmm0
; Line 3596
	movss	xmm0, DWORD PTR x1$[rsp]
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x12$1[rsp], xmm0
; Line 3597
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y12$2[rsp], xmm0
; Line 3598
	movss	xmm0, DWORD PTR x2$[rsp]
	addss	xmm0, DWORD PTR x3$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x23$8[rsp], xmm0
; Line 3599
	movss	xmm0, DWORD PTR y2$[rsp]
	addss	xmm0, DWORD PTR y3$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y23$7[rsp], xmm0
; Line 3601
	movss	xmm0, DWORD PTR x01$6[rsp]
	addss	xmm0, DWORD PTR x12$1[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xa$4[rsp], xmm0
; Line 3602
	movss	xmm0, DWORD PTR y01$5[rsp]
	addss	xmm0, DWORD PTR y12$2[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ya$3[rsp], xmm0
; Line 3603
	movss	xmm0, DWORD PTR x12$1[rsp]
	addss	xmm0, DWORD PTR x23$8[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xb$10[rsp], xmm0
; Line 3604
	movss	xmm0, DWORD PTR y12$2[rsp]
	addss	xmm0, DWORD PTR y23$7[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR yb$9[rsp], xmm0
; Line 3606
	movss	xmm0, DWORD PTR xa$4[rsp]
	addss	xmm0, DWORD PTR xb$10[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR mx$12[rsp], xmm0
; Line 3607
	movss	xmm0, DWORD PTR ya$3[rsp]
	addss	xmm0, DWORD PTR yb$9[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR my$11[rsp], xmm0
; Line 3609
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR my$11[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR mx$12[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR ya$3[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR xa$4[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR y01$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR x01$6[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3610
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR y3$[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR x3$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR y23$7[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR x23$8[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR yb$9[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR xb$10[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR my$11[rsp]
	movss	xmm2, DWORD PTR mx$12[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3611
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3612
	movss	xmm3, DWORD PTR y3$[rsp]
	movss	xmm2, DWORD PTR x3$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3613
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
$LN1@stbtt__tes:
; Line 3615
	add	rsp, 216				; 000000d8H
	ret	0
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ENDP ; stbtt__tesselate_cubic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
my$ = 80
mx$ = 84
dx$ = 88
dy$ = 92
points$ = 112
num_points$ = 120
x0$ = 128
y0$ = 136
x1$ = 144
y1$ = 152
x2$ = 160
y2$ = 168
objspace_flatness_squared$ = 176
n$ = 184
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z PROC ; stbtt__tesselate_curve
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3556
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3558
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR mx$[rsp], xmm0
; Line 3559
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR my$[rsp], xmm0
; Line 3561
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR mx$[rsp]
	movss	DWORD PTR dx$[rsp], xmm0
; Line 3562
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR my$[rsp]
	movss	DWORD PTR dy$[rsp], xmm0
; Line 3563
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3564
	mov	eax, 1
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3565
	movss	xmm0, DWORD PTR dx$[rsp]
	mulss	xmm0, DWORD PTR dx$[rsp]
	movss	xmm1, DWORD PTR dy$[rsp]
	mulss	xmm1, DWORD PTR dy$[rsp]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3566
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, DWORD PTR x1$[rsp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR my$[rsp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR mx$[rsp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3567
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, DWORD PTR x2$[rsp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR y2$[rsp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR my$[rsp]
	movss	xmm2, DWORD PTR mx$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3568
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3569
	movss	xmm3, DWORD PTR y2$[rsp]
	movss	xmm2, DWORD PTR x2$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3570
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
; Line 3572
	mov	eax, 1
$LN1@stbtt__tes:
; Line 3573
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ENDP ; stbtt__tesselate_curve
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
points$ = 8
n$ = 16
x$ = 24
y$ = 32
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z PROC	; stbtt__add_point
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3548
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3549
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN2@stbtt__add
	jmp	SHORT $LN1@stbtt__add
$LN2@stbtt__add:
; Line 3550
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR [rcx+rax*8], xmm0
; Line 3551
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
$LN1@stbtt__add:
; Line 3552
	ret	0
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ENDP	; stbtt__add_point
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
i$ = 68
k$ = 72
j$ = 76
p$1 = 80
e$ = 88
m$ = 96
a$2 = 100
b$3 = 104
vsubsample$ = 108
tv66 = 112
tv166 = 116
tv165 = 120
tv168 = 124
y_scale_inv$ = 128
tv129 = 132
result$ = 160
pts$ = 168
wcount$ = 176
windings$ = 184
scale_x$ = 192
scale_y$ = 200
shift_x$ = 208
shift_y$ = 216
off_x$ = 224
off_y$ = 232
invert$ = 240
userdata$ = 248
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z PROC ; stbtt__rasterize
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3491
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 3492
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN15@stbtt__ras
	movss	xmm0, DWORD PTR scale_y$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN16@stbtt__ras:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR y_scale_inv$[rsp], xmm0
; Line 3498
	mov	DWORD PTR vsubsample$[rsp], 1
; Line 3505
	mov	DWORD PTR n$[rsp], 0
; Line 3506
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__ras
$LN2@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__ras
; Line 3507
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3509
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR e$[rsp], rax
; Line 3510
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN11@stbtt__ras
	jmp	$LN1@stbtt__ras
$LN11@stbtt__ras:
; Line 3511
	mov	DWORD PTR n$[rsp], 0
; Line 3513
	mov	DWORD PTR m$[rsp], 0
; Line 3514
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbtt__ras
$LN5@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbtt__ras
; Line 3515
	movsxd	rax, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR pts$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$1[rsp], rax
; Line 3516
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR m$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$[rsp], eax
; Line 3517
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3518
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv129[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv129[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN10@stbtt__ras:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3519
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR b$3[rsp], eax
; Line 3521
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	ucomiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jp	SHORT $LN12@stbtt__ras
	jne	SHORT $LN12@stbtt__ras
; Line 3522
	jmp	SHORT $LN8@stbtt__ras
$LN12@stbtt__ras:
; Line 3524
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
; Line 3525
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN21@stbtt__ras
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	comiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jbe	SHORT $LN19@stbtt__ras
	mov	DWORD PTR tv166[rsp], 1
	jmp	SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
	mov	DWORD PTR tv166[rsp], 0
$LN20@stbtt__ras:
	mov	eax, DWORD PTR tv166[rsp]
	mov	DWORD PTR tv168[rsp], eax
	jmp	SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*8+4]
	comiss	xmm0, DWORD PTR [r8+rax*8+4]
	jbe	SHORT $LN17@stbtt__ras
	mov	DWORD PTR tv165[rsp], 1
	jmp	SHORT $LN18@stbtt__ras
$LN17@stbtt__ras:
	mov	DWORD PTR tv165[rsp], 0
$LN18@stbtt__ras:
	mov	eax, DWORD PTR tv165[rsp]
	mov	DWORD PTR tv168[rsp], eax
$LN22@stbtt__ras:
	cmp	DWORD PTR tv168[rsp], 0
	je	SHORT $LN13@stbtt__ras
; Line 3526
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 1
; Line 3527
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR b$3[rsp], eax
$LN13@stbtt__ras:
; Line 3529
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 3530
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rsp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 3531
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3532
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rsp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3533
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3534
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3535
	jmp	$LN5@stbtt__ras
$LN6@stbtt__ras:
; Line 3539
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	call	?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges
; Line 3542
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR off_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR vsubsample$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ; stbtt__rasterize_sorted_edges
; Line 3544
	mov	rcx, QWORD PTR e$[rsp]
	call	free
$LN1@stbtt__ras:
; Line 3545
	add	rsp, 152				; 00000098H
	ret	0
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ENDP ; stbtt__rasterize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
n$ = 56
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z PROC	; stbtt__sort_edges
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3480
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3481
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3482
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_ins_sort
; Line 3483
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ENDP	; stbtt__sort_edges
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
j$2 = 36
m$3 = 40
tv74 = 44
tv85 = 48
tv128 = 52
c12$4 = 56
tv131 = 60
z$5 = 64
c01$6 = 68
c$7 = 72
tv235 = 80
tv252 = 88
tv279 = 96
t$8 = 104
__$ArrayPad$ = 128
p$ = 176
n$ = 184
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_quicksort
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3418
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN2@stbtt__sor:
; Line 3420
	cmp	DWORD PTR n$[rsp], 12
	jle	$LN3@stbtt__sor
; Line 3425
	mov	eax, DWORD PTR n$[rsp]
	sar	eax, 1
	mov	DWORD PTR m$3[rsp], eax
; Line 3426
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR m$3[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN20@stbtt__sor
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN21@stbtt__sor
$LN20@stbtt__sor:
	mov	DWORD PTR tv74[rsp], 0
$LN21@stbtt__sor:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR c01$6[rsp], eax
; Line 3427
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN22@stbtt__sor
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN23@stbtt__sor
$LN22@stbtt__sor:
	mov	DWORD PTR tv85[rsp], 0
$LN23@stbtt__sor:
	mov	eax, DWORD PTR tv85[rsp]
	mov	DWORD PTR c12$4[rsp], eax
; Line 3429
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c01$6[rsp], eax
	je	$LN13@stbtt__sor
; Line 3432
	mov	eax, 20
	imul	rax, rax, 0
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN24@stbtt__sor
	mov	DWORD PTR tv128[rsp], 1
	jmp	SHORT $LN25@stbtt__sor
$LN24@stbtt__sor:
	mov	DWORD PTR tv128[rsp], 0
$LN25@stbtt__sor:
	mov	eax, DWORD PTR tv128[rsp]
	mov	DWORD PTR c$7[rsp], eax
; Line 3435
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c$7[rsp], eax
	jne	SHORT $LN26@stbtt__sor
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN27@stbtt__sor
$LN26@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR tv131[rsp], eax
$LN27@stbtt__sor:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR z$5[rsp], eax
; Line 3436
	movsxd	rax, DWORD PTR z$5[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3437
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR z$5[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv235[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv235[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3438
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN13@stbtt__sor:
; Line 3442
	mov	eax, 20
	imul	rax, rax, 0
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3443
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv252[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv252[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3444
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3447
	mov	DWORD PTR i$1[rsp], 1
; Line 3448
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN4@stbtt__sor:
; Line 3452
	jmp	SHORT $LN9@stbtt__sor
$LN7@stbtt__sor:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__sor:
; Line 3453
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN14@stbtt__sor
	jmp	SHORT $LN8@stbtt__sor
$LN14@stbtt__sor:
; Line 3454
	jmp	SHORT $LN7@stbtt__sor
$LN8@stbtt__sor:
; Line 3455
	jmp	SHORT $LN12@stbtt__sor
$LN10@stbtt__sor:
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN12@stbtt__sor:
; Line 3456
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR j$2[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN15@stbtt__sor
	jmp	SHORT $LN11@stbtt__sor
$LN15@stbtt__sor:
; Line 3457
	jmp	SHORT $LN10@stbtt__sor
$LN11@stbtt__sor:
; Line 3459
	mov	eax, DWORD PTR j$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jl	SHORT $LN16@stbtt__sor
	jmp	$LN5@stbtt__sor
$LN16@stbtt__sor:
; Line 3460
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3461
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv279[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv279[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3462
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3464
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
; Line 3465
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
; Line 3466
	jmp	$LN4@stbtt__sor
$LN5@stbtt__sor:
; Line 3468
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR j$2[rsp], eax
	jge	SHORT $LN17@stbtt__sor
; Line 3469
	mov	edx, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3470
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 3471
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 3472
	jmp	SHORT $LN18@stbtt__sor
$LN17@stbtt__sor:
; Line 3473
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3474
	mov	eax, DWORD PTR j$2[rsp]
	mov	DWORD PTR n$[rsp], eax
$LN18@stbtt__sor:
; Line 3476
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_quicksort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 0
i$ = 4
tv78 = 8
c$1 = 12
b$2 = 16
a$3 = 24
tv142 = 32
t$4 = 40
__$ArrayPad$ = 64
p$ = 112
n$ = 120
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_ins_sort
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3400
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3402
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbtt__sor
$LN2@stbtt__sor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__sor
; Line 3403
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
	lea	rax, QWORD PTR t$4[rsp]
	mov	QWORD PTR a$3[rsp], rax
; Line 3404
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN5@stbtt__sor:
; Line 3405
	cmp	DWORD PTR j$[rsp], 0
	jle	$LN6@stbtt__sor
; Line 3406
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$2[rsp], rax
; Line 3407
	mov	rax, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR a$3[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN10@stbtt__sor
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN11@stbtt__sor
$LN10@stbtt__sor:
	mov	DWORD PTR tv78[rsp], 0
$LN11@stbtt__sor:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR c$1[rsp], eax
; Line 3408
	cmp	DWORD PTR c$1[rsp], 0
	jne	SHORT $LN7@stbtt__sor
	jmp	SHORT $LN6@stbtt__sor
$LN7@stbtt__sor:
; Line 3409
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv142[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv142[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3410
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3411
	jmp	$LN5@stbtt__sor
$LN6@stbtt__sor:
; Line 3412
	mov	eax, DWORD PTR j$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	je	SHORT $LN8@stbtt__sor
; Line 3413
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$4[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN8@stbtt__sor:
; Line 3414
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3415
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_ins_sort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scan_y_top$1 = 48
i$ = 52
j$ = 56
step$2 = 64
y$ = 72
sum$3 = 76
k$4 = 80
m$5 = 84
scanline$ = 88
z$6 = 96
active$ = 104
z$7 = 112
scan_y_bottom$8 = 120
scanline2$ = 128
z$9 = 136
hh$ = 144
scanline_data$ = 176
__$ArrayPad$ = 704
result$ = 736
e$ = 744
n$ = 752
vsubsample$ = 760
off_x$ = 768
off_y$ = 776
userdata$ = 784
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z PROC ; stbtt__rasterize_sorted_edges
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3298
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 728				; 000002d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3299
	mov	QWORD PTR hh$[rsp], 0
	mov	QWORD PTR hh$[rsp+8], 0
	mov	DWORD PTR hh$[rsp+16], 0
; Line 3300
	mov	QWORD PTR active$[rsp], 0
; Line 3301
	mov	DWORD PTR j$[rsp], 0
; Line 3306
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jle	SHORT $LN13@stbtt__ras
; Line 3307
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	shl	rax, 2
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR scanline$[rsp], rax
	jmp	SHORT $LN14@stbtt__ras
$LN13@stbtt__ras:
; Line 3309
	lea	rax, QWORD PTR scanline_data$[rsp]
	mov	QWORD PTR scanline$[rsp], rax
$LN14@stbtt__ras:
; Line 3311
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR scanline$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR scanline2$[rsp], rax
; Line 3313
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 3314
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR off_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
$LN2@stbtt__ras:
; Line 3316
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__ras
; Line 3318
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR scan_y_top$1[rsp], xmm0
; Line 3319
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR scan_y_bottom$8[rsp], xmm0
; Line 3320
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
; Line 3322
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline$[rsp]
	call	memset
; Line 3323
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	cdqe
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline2$[rsp]
	call	memset
$LN4@stbtt__ras:
; Line 3327
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN5@stbtt__ras
; Line 3328
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$7[rsp], rax
; Line 3329
	mov	rax, QWORD PTR z$7[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jb	SHORT $LN15@stbtt__ras
; Line 3330
	mov	rax, QWORD PTR step$2[rsp]
	mov	rcx, QWORD PTR z$7[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 3331
	mov	rax, QWORD PTR z$7[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN25@stbtt__ras
	jne	SHORT $LN25@stbtt__ras
	mov	r8d, 3331				; 00000d03H
	lea	rdx, OFFSET FLAT:$SG84124
	lea	rcx, OFFSET FLAT:$SG84125
	call	_wassert
	xor	eax, eax
$LN25@stbtt__ras:
; Line 3332
	mov	rax, QWORD PTR z$7[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+20], xmm0
; Line 3333
	mov	rdx, QWORD PTR z$7[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_free
; Line 3334
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
; Line 3335
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
$LN16@stbtt__ras:
; Line 3337
	jmp	$LN4@stbtt__ras
$LN5@stbtt__ras:
$LN6@stbtt__ras:
; Line 3340
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR scan_y_bottom$8[rsp]
	comiss	xmm0, DWORD PTR [rax+4]
	jb	$LN7@stbtt__ras
; Line 3341
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN27@stbtt__ras
	je	$LN17@stbtt__ras
$LN27@stbtt__ras:
; Line 3342
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scan_y_top$1[rsp]
	mov	r8d, DWORD PTR off_x$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ; stbtt__new_active
	mov	QWORD PTR z$6[rsp], rax
; Line 3343
	cmp	QWORD PTR z$6[rsp], 0
	je	SHORT $LN18@stbtt__ras
; Line 3344
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN19@stbtt__ras
	cmp	DWORD PTR off_y$[rsp], 0
	je	SHORT $LN19@stbtt__ras
; Line 3345
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN20@stbtt__ras
; Line 3347
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	movss	DWORD PTR [rax+28], xmm0
$LN20@stbtt__ras:
$LN19@stbtt__ras:
; Line 3350
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR scan_y_top$1[rsp]
	jae	SHORT $LN26@stbtt__ras
	mov	r8d, 3350				; 00000d16H
	lea	rdx, OFFSET FLAT:$SG84130
	lea	rcx, OFFSET FLAT:$SG84131
	call	_wassert
	xor	eax, eax
$LN26@stbtt__ras:
; Line 3352
	mov	rax, QWORD PTR z$6[rsp]
	mov	rcx, QWORD PTR active$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3353
	mov	rax, QWORD PTR z$6[rsp]
	mov	QWORD PTR active$[rsp], rax
$LN18@stbtt__ras:
$LN17@stbtt__ras:
; Line 3356
	mov	rax, QWORD PTR e$[rsp]
	add	rax, 20
	mov	QWORD PTR e$[rsp], rax
; Line 3357
	jmp	$LN6@stbtt__ras
$LN7@stbtt__ras:
; Line 3360
	cmp	QWORD PTR active$[rsp], 0
	je	SHORT $LN21@stbtt__ras
; Line 3361
	mov	rax, QWORD PTR scanline2$[rsp]
	add	rax, 4
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	mov	r8d, DWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ; stbtt__fill_active_edges_new
$LN21@stbtt__ras:
; Line 3364
	xorps	xmm0, xmm0
	movss	DWORD PTR sum$3[rsp], xmm0
; Line 3365
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt__ras:
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3368
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline2$[rsp]
	movss	xmm0, DWORD PTR sum$3[rsp]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR sum$3[rsp], xmm0
; Line 3369
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR sum$3[rsp]
	movss	DWORD PTR k$4[rsp], xmm0
; Line 3370
	cvtss2sd xmm0, DWORD PTR k$4[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR k$4[rsp], xmm0
; Line 3371
	cvttss2si eax, DWORD PTR k$4[rsp]
	mov	DWORD PTR m$5[rsp], eax
; Line 3372
	cmp	DWORD PTR m$5[rsp], 255			; 000000ffH
	jle	SHORT $LN22@stbtt__ras
	mov	DWORD PTR m$5[rsp], 255			; 000000ffH
$LN22@stbtt__ras:
; Line 3373
	mov	rax, QWORD PTR result$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax+8]
	mov	eax, ecx
	add	eax, DWORD PTR i$[rsp]
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR m$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3374
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3377
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
$LN11@stbtt__ras:
; Line 3378
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@stbtt__ras
; Line 3379
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$9[rsp], rax
; Line 3380
	mov	rax, QWORD PTR z$9[rsp]
	mov	rcx, QWORD PTR z$9[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR z$9[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3381
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
; Line 3382
	jmp	SHORT $LN11@stbtt__ras
$LN12@stbtt__ras:
; Line 3384
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
; Line 3385
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3386
	jmp	$LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3388
	mov	rdx, QWORD PTR userdata$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_cleanup
; Line 3390
	lea	rax, QWORD PTR scanline_data$[rsp]
	cmp	QWORD PTR scanline$[rsp], rax
	je	SHORT $LN23@stbtt__ras
; Line 3391
	mov	rcx, QWORD PTR scanline$[rsp]
	call	free
$LN23@stbtt__ras:
; Line 3392
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 728				; 000002d8H
	ret	0
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ENDP ; stbtt__rasterize_sorted_edges
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$1 = 64
x$2 = 68
x1$3 = 72
x2$4 = 76
y_bottom$ = 80
x3$5 = 84
x_top$6 = 88
x0$7 = 92
x_bottom$8 = 96
x2$9 = 100
sy1$10 = 104
x$11 = 108
sy0$12 = 112
dx$13 = 116
y1$14 = 120
y2$15 = 124
dy$16 = 128
y3$17 = 132
y0$18 = 136
x1$19 = 140
area$20 = 144
t$21 = 148
x$22 = 152
y_final$23 = 156
y_crossing$24 = 160
sign$25 = 164
xb$26 = 168
height$27 = 172
step$28 = 176
tv198 = 180
tv200 = 184
tv254 = 188
tv256 = 192
tv304 = 196
tv306 = 200
tv314 = 204
tv316 = 208
scanline$ = 240
scanline_fill$ = 248
len$ = 256
e$ = 264
y_top$ = 272
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z PROC ; stbtt__fill_active_edges_new
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3083
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 3084
	movss	xmm0, DWORD PTR y_top$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y_bottom$[rsp], xmm0
$LN2@stbtt__fil:
; Line 3086
	cmp	QWORD PTR e$[rsp], 0
	je	$LN3@stbtt__fil
; Line 3090
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN39@stbtt__fil
	mov	r8d, 3090				; 00000c12H
	lea	rdx, OFFSET FLAT:$SG84028
	lea	rcx, OFFSET FLAT:$SG84029
	call	_wassert
	xor	eax, eax
$LN39@stbtt__fil:
; Line 3092
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN10@stbtt__fil
	jne	$LN10@stbtt__fil
; Line 3093
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$7[rsp], xmm0
; Line 3094
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x0$7[rsp]
	jbe	$LN12@stbtt__fil
; Line 3095
	movss	xmm0, DWORD PTR x0$7[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN13@stbtt__fil
; Line 3096
	cvttss2si eax, DWORD PTR x0$7[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3097
	cvttss2si eax, DWORD PTR x0$7[rsp]
	inc	eax
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	sub	rcx, 4
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3098
	jmp	SHORT $LN14@stbtt__fil
$LN13@stbtt__fil:
; Line 3099
	mov	rax, QWORD PTR scanline_fill$[rsp]
	sub	rax, 4
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN14@stbtt__fil:
$LN12@stbtt__fil:
; Line 3102
	jmp	$LN11@stbtt__fil
$LN10@stbtt__fil:
; Line 3103
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$1[rsp], xmm0
; Line 3104
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR dx$13[rsp], xmm0
; Line 3105
	movss	xmm0, DWORD PTR x0$1[rsp]
	addss	xmm0, DWORD PTR dx$13[rsp]
	movss	DWORD PTR xb$26[rsp], xmm0
; Line 3108
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR dy$16[rsp], xmm0
; Line 3109
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	comiss	xmm0, DWORD PTR [rax+24]
	jb	SHORT $LN40@stbtt__fil
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN41@stbtt__fil
$LN40@stbtt__fil:
	mov	r8d, 3109				; 00000c25H
	lea	rdx, OFFSET FLAT:$SG84035
	lea	rcx, OFFSET FLAT:$SG84036
	call	_wassert
	xor	eax, eax
$LN41@stbtt__fil:
; Line 3114
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jbe	SHORT $LN15@stbtt__fil
; Line 3115
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR dx$13[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3116
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR sy0$12[rsp], xmm0
; Line 3117
	jmp	SHORT $LN16@stbtt__fil
$LN15@stbtt__fil:
; Line 3118
	movss	xmm0, DWORD PTR x0$1[rsp]
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3119
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR sy0$12[rsp], xmm0
$LN16@stbtt__fil:
; Line 3121
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN17@stbtt__fil
; Line 3122
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR dx$13[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3123
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3124
	jmp	SHORT $LN18@stbtt__fil
$LN17@stbtt__fil:
; Line 3125
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3126
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR sy1$10[rsp], xmm0
$LN18@stbtt__fil:
; Line 3129
	movss	xmm0, DWORD PTR x_top$6[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	movss	xmm0, DWORD PTR x_bottom$8[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x_top$6[rsp]
	jbe	$LN19@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN19@stbtt__fil
; Line 3132
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	cvttss2si ecx, DWORD PTR x_bottom$8[rsp]
	cmp	eax, ecx
	jne	$LN21@stbtt__fil
; Line 3135
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x$11[rsp], eax
; Line 3136
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	mov	rax, QWORD PTR e$[rsp]
	mulss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR height$27[rsp], xmm0
; Line 3137
	cmp	DWORD PTR x$11[rsp], 0
	jl	SHORT $LN42@stbtt__fil
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$11[rsp], eax
	jl	SHORT $LN43@stbtt__fil
$LN42@stbtt__fil:
	mov	r8d, 3137				; 00000c41H
	lea	rdx, OFFSET FLAT:$SG84045
	lea	rcx, OFFSET FLAT:$SG84046
	call	_wassert
	xor	eax, eax
$LN43@stbtt__fil:
; Line 3138
	cvtsi2ss xmm0, DWORD PTR x$11[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	cvtsi2ss xmm1, DWORD PTR x$11[rsp]
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x_bottom$8[rsp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR x_top$6[rsp]
	movss	xmm0, DWORD PTR height$27[rsp]
	call	?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
	movss	DWORD PTR tv200[rsp], xmm0
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv198[rsp], xmm0
	movss	xmm0, DWORD PTR tv198[rsp]
	addss	xmm0, DWORD PTR tv200[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3139
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR height$27[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3140
	jmp	$LN22@stbtt__fil
$LN21@stbtt__fil:
; Line 3144
	movss	xmm0, DWORD PTR x_top$6[rsp]
	comiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN23@stbtt__fil
; Line 3147
	movss	xmm0, DWORD PTR sy0$12[rsp]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR y_bottom$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy0$12[rsp], xmm0
; Line 3148
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR y_bottom$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3149
	movss	xmm0, DWORD PTR sy0$12[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR sy1$10[rsp]
	movss	DWORD PTR sy0$12[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3150
	movss	xmm0, DWORD PTR x_bottom$8[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR x_top$6[rsp]
	movss	DWORD PTR x_bottom$8[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3151
	movss	xmm0, DWORD PTR dx$13[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx$13[rsp], xmm0
; Line 3152
	movss	xmm0, DWORD PTR dy$16[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy$16[rsp], xmm0
; Line 3153
	movss	xmm0, DWORD PTR x0$1[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x0$1[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR xb$26[rsp], xmm0
$LN23@stbtt__fil:
; Line 3155
	movss	xmm0, DWORD PTR dy$16[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN44@stbtt__fil
	mov	r8d, 3155				; 00000c53H
	lea	rdx, OFFSET FLAT:$SG84048
	lea	rcx, OFFSET FLAT:$SG84049
	call	_wassert
	xor	eax, eax
$LN44@stbtt__fil:
; Line 3156
	movss	xmm0, DWORD PTR dx$13[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN45@stbtt__fil
	mov	r8d, 3156				; 00000c54H
	lea	rdx, OFFSET FLAT:$SG84050
	lea	rcx, OFFSET FLAT:$SG84051
	call	_wassert
	xor	eax, eax
$LN45@stbtt__fil:
; Line 3158
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x1$19[rsp], eax
; Line 3159
	cvttss2si eax, DWORD PTR x_bottom$8[rsp]
	mov	DWORD PTR x2$9[rsp], eax
; Line 3161
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$1[rsp]
	movss	xmm1, DWORD PTR dy$16[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_top$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_crossing$24[rsp], xmm0
; Line 3164
	cvtsi2ss xmm0, DWORD PTR x2$9[rsp]
	subss	xmm0, DWORD PTR x0$1[rsp]
	movss	xmm1, DWORD PTR dy$16[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_top$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_final$23[rsp], xmm0
; Line 3185
	movss	xmm0, DWORD PTR y_crossing$24[rsp]
	comiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN24@stbtt__fil
; Line 3186
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y_crossing$24[rsp], xmm0
$LN24@stbtt__fil:
; Line 3188
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR sign$25[rsp], xmm0
; Line 3191
	movss	xmm0, DWORD PTR y_crossing$24[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR area$20[rsp], xmm0
; Line 3194
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x_top$6[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR area$20[rsp]
	call	?stbtt__sized_triangle_area@@YAMMM@Z	; stbtt__sized_triangle_area
	movss	DWORD PTR tv256[rsp], xmm0
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv254[rsp], xmm0
	movss	xmm0, DWORD PTR tv254[rsp]
	addss	xmm0, DWORD PTR tv256[rsp]
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3197
	movss	xmm0, DWORD PTR y_final$23[rsp]
	comiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN25@stbtt__fil
; Line 3198
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y_final$23[rsp], xmm0
; Line 3199
	movss	xmm0, DWORD PTR y_final$23[rsp]
	subss	xmm0, DWORD PTR y_crossing$24[rsp]
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	ecx, DWORD PTR x2$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	movss	DWORD PTR dy$16[rsp], xmm0
$LN25@stbtt__fil:
; Line 3212
	movss	xmm0, DWORD PTR sign$25[rsp]
	mulss	xmm0, DWORD PTR dy$16[rsp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR step$28[rsp], xmm0
; Line 3216
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
	jmp	SHORT $LN6@stbtt__fil
$LN4@stbtt__fil:
	mov	eax, DWORD PTR x$22[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
$LN6@stbtt__fil:
	mov	eax, DWORD PTR x2$9[rsp]
	cmp	DWORD PTR x$22[rsp], eax
	jge	SHORT $LN5@stbtt__fil
; Line 3217
	movss	xmm0, DWORD PTR step$28[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR area$20[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3218
	movss	xmm0, DWORD PTR area$20[rsp]
	addss	xmm0, DWORD PTR step$28[rsp]
	movss	DWORD PTR area$20[rsp], xmm0
; Line 3219
	jmp	$LN4@stbtt__fil
$LN5@stbtt__fil:
; Line 3220
	cvtss2sd xmm0, DWORD PTR area$20[rsp]
	call	fabs
	movsd	xmm1, QWORD PTR __real@3ff028f5c0000000
	comisd	xmm1, xmm0
	jae	SHORT $LN46@stbtt__fil
	mov	r8d, 3220				; 00000c94H
	lea	rdx, OFFSET FLAT:$SG84054
	lea	rcx, OFFSET FLAT:$SG84055
	call	_wassert
	xor	eax, eax
$LN46@stbtt__fil:
; Line 3221
	movss	xmm0, DWORD PTR y_final$23[rsp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR sy1$10[rsp]
	comiss	xmm1, xmm0
	ja	SHORT $LN47@stbtt__fil
	mov	r8d, 3221				; 00000c95H
	lea	rdx, OFFSET FLAT:$SG84056
	lea	rcx, OFFSET FLAT:$SG84057
	call	_wassert
	xor	eax, eax
$LN47@stbtt__fil:
; Line 3225
	cvtsi2ss xmm0, DWORD PTR x2$9[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	cvtsi2ss xmm1, DWORD PTR x2$9[rsp]
	addss	xmm1, DWORD PTR __real@3f800000
	cvtsi2ss xmm2, DWORD PTR x2$9[rsp]
	movss	DWORD PTR tv304[rsp], xmm2
	movss	xmm3, DWORD PTR sy1$10[rsp]
	subss	xmm3, DWORD PTR y_final$23[rsp]
	movss	DWORD PTR tv306[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x_bottom$8[rsp]
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv304[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv306[rsp]
	call	?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR area$20[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv316[rsp], xmm0
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv314[rsp], xmm0
	movss	xmm0, DWORD PTR tv314[rsp]
	addss	xmm0, DWORD PTR tv316[rsp]
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3228
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN22@stbtt__fil:
; Line 3230
	jmp	$LN20@stbtt__fil
$LN19@stbtt__fil:
; Line 3239
	mov	DWORD PTR x$2[rsp], 0
	jmp	SHORT $LN9@stbtt__fil
$LN7@stbtt__fil:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN9@stbtt__fil:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$2[rsp], eax
	jge	$LN8@stbtt__fil
; Line 3254
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y0$18[rsp], xmm0
; Line 3255
	cvtsi2ss xmm0, DWORD PTR x$2[rsp]
	movss	DWORD PTR x1$3[rsp], xmm0
; Line 3256
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x2$4[rsp], xmm0
; Line 3257
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x3$5[rsp], xmm0
; Line 3258
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y3$17[rsp], xmm0
; Line 3263
	cvtsi2ss xmm0, DWORD PTR x$2[rsp]
	subss	xmm0, DWORD PTR x0$1[rsp]
	divss	xmm0, DWORD PTR dx$13[rsp]
	addss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y1$14[rsp], xmm0
; Line 3264
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$1[rsp]
	divss	xmm0, DWORD PTR dx$13[rsp]
	addss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y2$15[rsp], xmm0
; Line 3266
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN26@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN26@stbtt__fil
; Line 3267
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3268
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3269
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN27@stbtt__fil
$LN26@stbtt__fil:
; Line 3270
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN28@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN28@stbtt__fil
; Line 3271
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3272
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3273
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN29@stbtt__fil
$LN28@stbtt__fil:
; Line 3274
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN30@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN30@stbtt__fil
; Line 3275
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3276
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN31@stbtt__fil
$LN30@stbtt__fil:
; Line 3277
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN32@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN32@stbtt__fil
; Line 3278
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3279
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN33@stbtt__fil
$LN32@stbtt__fil:
; Line 3280
	movss	xmm0, DWORD PTR x2$4[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN34@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN34@stbtt__fil
; Line 3281
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3282
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN35@stbtt__fil
$LN34@stbtt__fil:
; Line 3283
	movss	xmm0, DWORD PTR x2$4[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN36@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN36@stbtt__fil
; Line 3284
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3285
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3286
	jmp	SHORT $LN37@stbtt__fil
$LN36@stbtt__fil:
; Line 3287
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN37@stbtt__fil:
$LN35@stbtt__fil:
$LN33@stbtt__fil:
$LN31@stbtt__fil:
$LN29@stbtt__fil:
$LN27@stbtt__fil:
; Line 3289
	jmp	$LN7@stbtt__fil
$LN8@stbtt__fil:
$LN20@stbtt__fil:
$LN11@stbtt__fil:
; Line 3292
	mov	rax, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR e$[rsp], rax
; Line 3293
	jmp	$LN2@stbtt__fil
$LN3@stbtt__fil:
; Line 3294
	add	rsp, 232				; 000000e8H
	ret	0
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ENDP ; stbtt__fill_active_edges_new
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 8
width$ = 16
?stbtt__sized_triangle_area@@YAMMM@Z PROC		; stbtt__sized_triangle_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3078
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 3079
	movss	xmm0, DWORD PTR height$[rsp]
	mulss	xmm0, DWORD PTR width$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
; Line 3080
	ret	0
?stbtt__sized_triangle_area@@YAMMM@Z ENDP		; stbtt__sized_triangle_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
tx0$ = 56
tx1$ = 64
bx0$ = 72
bx1$ = 80
?stbtt__position_trapezoid_area@@YAMMMMMM@Z PROC	; stbtt__position_trapezoid_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3073
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3074
	movss	xmm0, DWORD PTR bx1$[rsp]
	subss	xmm0, DWORD PTR bx0$[rsp]
	movss	xmm1, DWORD PTR tx1$[rsp]
	subss	xmm1, DWORD PTR tx0$[rsp]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR height$[rsp]
	call	?stbtt__sized_trapezoid_area@@YAMMMM@Z	; stbtt__sized_trapezoid_area
; Line 3075
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__position_trapezoid_area@@YAMMMMMM@Z ENDP	; stbtt__position_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
top_width$ = 56
bottom_width$ = 64
?stbtt__sized_trapezoid_area@@YAMMMM@Z PROC		; stbtt__sized_trapezoid_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3066
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3067
	movss	xmm0, DWORD PTR top_width$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@stbtt__siz
	mov	r8d, 3067				; 00000bfbH
	lea	rdx, OFFSET FLAT:$SG83945
	lea	rcx, OFFSET FLAT:$SG83946
	call	_wassert
	xor	eax, eax
$LN3@stbtt__siz:
; Line 3068
	movss	xmm0, DWORD PTR bottom_width$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN4@stbtt__siz
	mov	r8d, 3068				; 00000bfcH
	lea	rdx, OFFSET FLAT:$SG83947
	lea	rcx, OFFSET FLAT:$SG83948
	call	_wassert
	xor	eax, eax
$LN4@stbtt__siz:
; Line 3069
	movss	xmm0, DWORD PTR top_width$[rsp]
	addss	xmm0, DWORD PTR bottom_width$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR height$[rsp]
; Line 3070
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__sized_trapezoid_area@@YAMMMM@Z ENDP		; stbtt__sized_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scanline$ = 48
x$ = 56
e$ = 64
x0$ = 72
y0$ = 80
x1$ = 88
y1$ = 96
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z PROC ; stbtt__handle_clipped_edge
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3029
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3030
	movss	xmm0, DWORD PTR y0$[rsp]
	ucomiss	xmm0, DWORD PTR y1$[rsp]
	jp	SHORT $LN2@stbtt__han
	jne	SHORT $LN2@stbtt__han
	jmp	$LN1@stbtt__han
$LN2@stbtt__han:
; Line 3031
	movss	xmm0, DWORD PTR y1$[rsp]
	comiss	xmm0, DWORD PTR y0$[rsp]
	ja	SHORT $LN20@stbtt__han
	mov	r8d, 3031				; 00000bd7H
	lea	rdx, OFFSET FLAT:$SG83904
	lea	rcx, OFFSET FLAT:$SG83905
	call	_wassert
	xor	eax, eax
$LN20@stbtt__han:
; Line 3032
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR [rcx+24]
	jae	SHORT $LN21@stbtt__han
	mov	r8d, 3032				; 00000bd8H
	lea	rdx, OFFSET FLAT:$SG83906
	lea	rcx, OFFSET FLAT:$SG83907
	call	_wassert
	xor	eax, eax
$LN21@stbtt__han:
; Line 3033
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN3@stbtt__han
	jmp	$LN1@stbtt__han
$LN3@stbtt__han:
; Line 3034
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y1$[rsp]
	jbe	SHORT $LN4@stbtt__han
	jmp	$LN1@stbtt__han
$LN4@stbtt__han:
; Line 3035
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y0$[rsp]
	jbe	SHORT $LN5@stbtt__han
; Line 3036
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+24]
	subss	xmm1, DWORD PTR y0$[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	subss	xmm1, DWORD PTR y0$[rsp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x0$[rsp], xmm0
; Line 3037
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR y0$[rsp], xmm0
$LN5@stbtt__han:
; Line 3039
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y1$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN6@stbtt__han
; Line 3040
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+28]
	subss	xmm1, DWORD PTR y1$[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	subss	xmm1, DWORD PTR y0$[rsp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x1$[rsp], xmm0
; Line 3041
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR y1$[rsp], xmm0
$LN6@stbtt__han:
; Line 3044
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN7@stbtt__han
	jne	SHORT $LN7@stbtt__han
; Line 3045
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN22@stbtt__han
	mov	r8d, 3045				; 00000be5H
	lea	rdx, OFFSET FLAT:$SG83914
	lea	rcx, OFFSET FLAT:$SG83915
	call	_wassert
	xor	eax, eax
$LN22@stbtt__han:
	jmp	$LN8@stbtt__han
$LN7@stbtt__han:
; Line 3046
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN9@stbtt__han
	jne	SHORT $LN9@stbtt__han
; Line 3047
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jae	SHORT $LN23@stbtt__han
	mov	r8d, 3047				; 00000be7H
	lea	rdx, OFFSET FLAT:$SG83918
	lea	rcx, OFFSET FLAT:$SG83919
	call	_wassert
	xor	eax, eax
$LN23@stbtt__han:
	jmp	$LN10@stbtt__han
$LN9@stbtt__han:
; Line 3048
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN11@stbtt__han
; Line 3049
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN24@stbtt__han
	mov	r8d, 3049				; 00000be9H
	lea	rdx, OFFSET FLAT:$SG83922
	lea	rcx, OFFSET FLAT:$SG83923
	call	_wassert
	xor	eax, eax
$LN24@stbtt__han:
	jmp	$LN12@stbtt__han
$LN11@stbtt__han:
; Line 3050
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN13@stbtt__han
; Line 3051
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jae	SHORT $LN25@stbtt__han
	mov	r8d, 3051				; 00000bebH
	lea	rdx, OFFSET FLAT:$SG83926
	lea	rcx, OFFSET FLAT:$SG83927
	call	_wassert
	xor	eax, eax
$LN25@stbtt__han:
	jmp	SHORT $LN14@stbtt__han
$LN13@stbtt__han:
; Line 3053
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN26@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN27@stbtt__han
$LN26@stbtt__han:
	mov	r8d, 3053				; 00000bedH
	lea	rdx, OFFSET FLAT:$SG83928
	lea	rcx, OFFSET FLAT:$SG83929
	call	_wassert
	xor	eax, eax
$LN27@stbtt__han:
$LN14@stbtt__han:
$LN12@stbtt__han:
$LN10@stbtt__han:
$LN8@stbtt__han:
; Line 3055
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN15@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x1$[rsp]
	jb	SHORT $LN15@stbtt__han
; Line 3056
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN16@stbtt__han
$LN15@stbtt__han:
; Line 3057
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
; Line 3058
	jmp	$LN18@stbtt__han
$LN17@stbtt__han:
; Line 3060
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN28@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN29@stbtt__han
$LN28@stbtt__han:
	mov	r8d, 3060				; 00000bf4H
	lea	rdx, OFFSET FLAT:$SG83934
	lea	rcx, OFFSET FLAT:$SG83935
	call	_wassert
	xor	eax, eax
$LN29@stbtt__han:
; Line 3061
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtsi2ss xmm2, DWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR x1$[rsp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	addss	xmm1, xmm2
	divss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN18@stbtt__han:
$LN16@stbtt__han:
$LN1@stbtt__han:
; Line 3063
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ENDP ; stbtt__handle_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dxdy$ = 32
tv86 = 36
tv132 = 40
z$ = 48
hh$ = 80
e$ = 88
off_x$ = 96
start_point$ = 104
userdata$ = 112
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z PROC ; stbtt__new_active
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2858
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2859
	mov	r8, QWORD PTR userdata$[rsp]
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ; stbtt__hheap_alloc
	mov	QWORD PTR z$[rsp], rax
; Line 2860
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	subss	xmm1, DWORD PTR [rcx+4]
	divss	xmm0, xmm1
	movss	DWORD PTR dxdy$[rsp], xmm0
; Line 2861
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN4@stbtt__new
	mov	r8d, 2861				; 00000b2dH
	lea	rdx, OFFSET FLAT:$SG83875
	lea	rcx, OFFSET FLAT:$SG83876
	call	_wassert
	xor	eax, eax
$LN4@stbtt__new:
; Line 2863
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbtt__new
	mov	rax, QWORD PTR z$[rsp]
	jmp	$LN1@stbtt__new
$LN2@stbtt__new:
; Line 2864
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR dxdy$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 2865
	movss	xmm0, DWORD PTR dxdy$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@stbtt__new
	je	SHORT $LN5@stbtt__new
$LN9@stbtt__new:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dxdy$[rsp]
	movss	DWORD PTR tv86[rsp], xmm0
	jmp	SHORT $LN6@stbtt__new
$LN5@stbtt__new:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv86[rsp], xmm0
$LN6@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR tv86[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2866
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR start_point$[rsp]
	subss	xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR dxdy$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2867
	cvtsi2ss xmm0, DWORD PTR off_x$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2868
	mov	rax, QWORD PTR e$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN7@stbtt__new
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv132[rsp], xmm0
	jmp	SHORT $LN8@stbtt__new
$LN7@stbtt__new:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv132[rsp], xmm0
$LN8@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR tv132[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 2869
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+24], xmm0
; Line 2870
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+28], xmm0
; Line 2871
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2872
	mov	rax, QWORD PTR z$[rsp]
$LN1@stbtt__new:
; Line 2873
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ENDP ; stbtt__new_active
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
n$1 = 40
hh$ = 64
userdata$ = 72
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_cleanup
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2798
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2799
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rsp], rax
$LN2@stbtt__hhe:
; Line 2800
	cmp	QWORD PTR c$[rsp], 0
	je	SHORT $LN3@stbtt__hhe
; Line 2801
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR n$1[rsp], rax
; Line 2802
	mov	rcx, QWORD PTR c$[rsp]
	call	free
; Line 2803
	mov	rax, QWORD PTR n$1[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 2804
	jmp	SHORT $LN2@stbtt__hhe
$LN3@stbtt__hhe:
; Line 2805
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hh$ = 8
p$ = 16
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_free
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2792
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 2793
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 2794
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 2795
	ret	0
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv73 = 36
count$1 = 40
c$2 = 48
p$3 = 56
hh$ = 80
size$ = 88
userdata$ = 96
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z PROC ; stbtt__hheap_alloc
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2771
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2772
	mov	rax, QWORD PTR hh$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@stbtt__hhe
; Line 2773
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR p$3[rsp], rax
; Line 2774
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rcx
; Line 2775
	mov	rax, QWORD PTR p$3[rsp]
	jmp	$LN1@stbtt__hhe
; Line 2776
	jmp	$LN3@stbtt__hhe
$LN2@stbtt__hhe:
; Line 2777
	mov	rax, QWORD PTR hh$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	$LN4@stbtt__hhe
; Line 2778
	cmp	QWORD PTR size$[rsp], 32		; 00000020H
	jae	SHORT $LN9@stbtt__hhe
	mov	DWORD PTR tv73[rsp], 2000		; 000007d0H
	jmp	SHORT $LN10@stbtt__hhe
$LN9@stbtt__hhe:
	cmp	QWORD PTR size$[rsp], 128		; 00000080H
	jae	SHORT $LN7@stbtt__hhe
	mov	DWORD PTR tv72[rsp], 800		; 00000320H
	jmp	SHORT $LN8@stbtt__hhe
$LN7@stbtt__hhe:
	mov	DWORD PTR tv72[rsp], 100		; 00000064H
$LN8@stbtt__hhe:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN10@stbtt__hhe:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR count$1[rsp], eax
; Line 2779
	movsxd	rax, DWORD PTR count$1[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	add	rax, 8
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR c$2[rsp], rax
; Line 2780
	cmp	QWORD PTR c$2[rsp], 0
	jne	SHORT $LN5@stbtt__hhe
; Line 2781
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__hhe
$LN5@stbtt__hhe:
; Line 2782
	mov	rax, QWORD PTR c$2[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2783
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR c$2[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2784
	mov	rax, QWORD PTR hh$[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	mov	DWORD PTR [rax+16], ecx
$LN4@stbtt__hhe:
; Line 2786
	mov	rax, QWORD PTR hh$[rsp]
	mov	eax, DWORD PTR [rax+16]
	dec	eax
	mov	rcx, QWORD PTR hh$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 2787
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR hh$[rsp]
	movsxd	rcx, DWORD PTR [rcx+16]
	mov	rdx, QWORD PTR size$[rsp]
	imul	rdx, rcx
	mov	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+8]
$LN3@stbtt__hhe:
$LN1@stbtt__hhe:
; Line 2789
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ENDP ; stbtt__hheap_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
table$1 = 32
class2Count$2 = 40
i$ = 44
sti$ = 48
lookupOffset$3 = 52
lookupType$4 = 56
subTableCount$5 = 60
subtableOffset$6 = 64
coverageOffset$7 = 68
posFormat$8 = 72
valueFormat1$9 = 76
valueFormat2$10 = 80
pairPosOffset$11 = 84
pairSetCount$12 = 88
pairValueCount$13 = 92
secondGlyph$14 = 96
xAdvance$15 = 100
valueFormat1$16 = 104
classDef1Offset$17 = 108
classDef2Offset$18 = 112
class1Count$19 = 116
xAdvance$20 = 120
valueFormat2$21 = 124
lookupListOffset$ = 128
coverageIndex$22 = 132
r$23 = 136
m$24 = 140
l$25 = 144
glyph1class$26 = 148
glyph2class$27 = 152
lookupCount$ = 156
straw$28 = 160
needle$29 = 164
tv159 = 168
data$ = 176
lookupTable$30 = 184
valueRecordPairSizeInBytes$31 = 192
lookupList$ = 200
pairValueTable$32 = 208
pairValue$33 = 216
subTableOffsets$34 = 224
pairValueArray$35 = 232
class1Records$36 = 240
class2Records$37 = 248
info$ = 272
glyph1$ = 280
glyph2$ = 288
?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z PROC ; stbtt__GetGlyphGPOSInfoAdvance
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2497
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
; Line 2504
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN12@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
; Line 2506
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2508
	mov	rcx, QWORD PTR data$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN13@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN13@stbtt__Get:
; Line 2509
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	test	eax, eax
	je	SHORT $LN14@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN14@stbtt__Get:
; Line 2511
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupListOffset$[rsp], ax
; Line 2512
	movzx	eax, WORD PTR lookupListOffset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupList$[rsp], rax
; Line 2513
	mov	rcx, QWORD PTR lookupList$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupCount$[rsp], ax
; Line 2515
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__Get:
	movzx	eax, WORD PTR lookupCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__Get
; Line 2516
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR lookupList$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupOffset$3[rsp], ax
; Line 2517
	movzx	eax, WORD PTR lookupOffset$3[rsp]
	mov	rcx, QWORD PTR lookupList$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupTable$30[rsp], rax
; Line 2519
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupType$4[rsp], ax
; Line 2520
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR subTableCount$5[rsp], ax
; Line 2521
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 6
	mov	QWORD PTR subTableOffsets$34[rsp], rax
; Line 2522
	movzx	eax, WORD PTR lookupType$4[rsp]
	cmp	eax, 2
	je	SHORT $LN15@stbtt__Get
; Line 2523
	jmp	$LN2@stbtt__Get
$LN15@stbtt__Get:
; Line 2525
	mov	DWORD PTR sti$[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR sti$[rsp]
	inc	eax
	mov	DWORD PTR sti$[rsp], eax
$LN7@stbtt__Get:
	movzx	eax, WORD PTR subTableCount$5[rsp]
	cmp	DWORD PTR sti$[rsp], eax
	jge	$LN6@stbtt__Get
; Line 2526
	mov	eax, DWORD PTR sti$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR subTableOffsets$34[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR subtableOffset$6[rsp], ax
; Line 2527
	movzx	eax, WORD PTR subtableOffset$6[rsp]
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR table$1[rsp], rax
; Line 2528
	mov	rcx, QWORD PTR table$1[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR posFormat$8[rsp], ax
; Line 2529
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR coverageOffset$7[rsp], ax
; Line 2530
	movzx	eax, WORD PTR coverageOffset$7[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	?stbtt__GetCoverageIndex@@YAHPEAEH@Z	; stbtt__GetCoverageIndex
	mov	DWORD PTR coverageIndex$22[rsp], eax
; Line 2531
	cmp	DWORD PTR coverageIndex$22[rsp], -1
	jne	SHORT $LN16@stbtt__Get
	jmp	$LN5@stbtt__Get
$LN16@stbtt__Get:
; Line 2533
	movzx	eax, WORD PTR posFormat$8[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 1
	je	SHORT $LN17@stbtt__Get
	cmp	DWORD PTR tv159[rsp], 2
	je	$LN25@stbtt__Get
	jmp	$LN32@stbtt__Get
$LN17@stbtt__Get:
; Line 2537
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat1$9[rsp], ax
; Line 2538
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat2$10[rsp], ax
; Line 2539
	movzx	eax, WORD PTR valueFormat1$9[rsp]
	cmp	eax, 4
	jne	$LN18@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$10[rsp]
	test	eax, eax
	jne	$LN18@stbtt__Get
; Line 2540
	mov	DWORD PTR valueRecordPairSizeInBytes$31[rsp], 2
; Line 2541
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairSetCount$12[rsp], ax
; Line 2542
	mov	eax, DWORD PTR coverageIndex$22[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR table$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairPosOffset$11[rsp], ax
; Line 2543
	movzx	eax, WORD PTR pairPosOffset$11[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValueTable$32[rsp], rax
; Line 2544
	mov	rcx, QWORD PTR pairValueTable$32[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairValueCount$13[rsp], ax
; Line 2545
	mov	rax, QWORD PTR pairValueTable$32[rsp]
	add	rax, 2
	mov	QWORD PTR pairValueArray$35[rsp], rax
; Line 2547
	movzx	eax, WORD PTR pairSetCount$12[rsp]
	cmp	DWORD PTR coverageIndex$22[rsp], eax
	jl	SHORT $LN20@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN20@stbtt__Get:
; Line 2549
	mov	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$29[rsp], eax
; Line 2550
	movzx	eax, WORD PTR pairValueCount$13[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
; Line 2551
	mov	DWORD PTR l$25[rsp], 0
$LN10@stbtt__Get:
; Line 2554
	mov	eax, DWORD PTR r$23[rsp]
	cmp	DWORD PTR l$25[rsp], eax
	jg	$LN11@stbtt__Get
; Line 2557
	mov	eax, DWORD PTR r$23[rsp]
	mov	ecx, DWORD PTR l$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$24[rsp], eax
; Line 2558
	mov	eax, DWORD PTR valueRecordPairSizeInBytes$31[rsp]
	add	eax, 2
	imul	eax, DWORD PTR m$24[rsp]
	cdqe
	mov	rcx, QWORD PTR pairValueArray$35[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValue$33[rsp], rax
; Line 2559
	mov	rcx, QWORD PTR pairValue$33[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR secondGlyph$14[rsp], ax
; Line 2560
	movzx	eax, WORD PTR secondGlyph$14[rsp]
	mov	DWORD PTR straw$28[rsp], eax
; Line 2561
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jge	SHORT $LN21@stbtt__Get
; Line 2562
	mov	eax, DWORD PTR m$24[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
	jmp	SHORT $LN22@stbtt__Get
$LN21@stbtt__Get:
; Line 2563
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jle	SHORT $LN23@stbtt__Get
; Line 2564
	mov	eax, DWORD PTR m$24[rsp]
	inc	eax
	mov	DWORD PTR l$25[rsp], eax
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 2566
	mov	rax, QWORD PTR pairValue$33[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR xAdvance$15[rsp], ax
; Line 2567
	movsx	eax, WORD PTR xAdvance$15[rsp]
	jmp	$LN1@stbtt__Get
$LN24@stbtt__Get:
$LN22@stbtt__Get:
; Line 2569
	jmp	$LN10@stbtt__Get
$LN11@stbtt__Get:
; Line 2570
	jmp	SHORT $LN19@stbtt__Get
$LN18@stbtt__Get:
; Line 2571
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 2572
	jmp	$LN8@stbtt__Get
$LN25@stbtt__Get:
; Line 2576
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat1$16[rsp], ax
; Line 2577
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat2$21[rsp], ax
; Line 2578
	movzx	eax, WORD PTR valueFormat1$16[rsp]
	cmp	eax, 4
	jne	$LN26@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$21[rsp]
	test	eax, eax
	jne	$LN26@stbtt__Get
; Line 2579
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDef1Offset$17[rsp], ax
; Line 2580
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDef2Offset$18[rsp], ax
; Line 2581
	movzx	eax, WORD PTR classDef1Offset$17[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	?stbtt__GetGlyphClass@@YAHPEAEH@Z	; stbtt__GetGlyphClass
	mov	DWORD PTR glyph1class$26[rsp], eax
; Line 2582
	movzx	eax, WORD PTR classDef2Offset$18[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph2$[rsp]
	mov	rcx, rax
	call	?stbtt__GetGlyphClass@@YAHPEAEH@Z	; stbtt__GetGlyphClass
	mov	DWORD PTR glyph2class$27[rsp], eax
; Line 2584
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 12
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR class1Count$19[rsp], ax
; Line 2585
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 14
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR class2Count$2[rsp], ax
; Line 2589
	cmp	DWORD PTR glyph1class$26[rsp], 0
	jl	SHORT $LN29@stbtt__Get
	movzx	eax, WORD PTR class1Count$19[rsp]
	cmp	DWORD PTR glyph1class$26[rsp], eax
	jl	SHORT $LN28@stbtt__Get
$LN29@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN28@stbtt__Get:
; Line 2590
	cmp	DWORD PTR glyph2class$27[rsp], 0
	jl	SHORT $LN31@stbtt__Get
	movzx	eax, WORD PTR class2Count$2[rsp]
	cmp	DWORD PTR glyph2class$27[rsp], eax
	jl	SHORT $LN30@stbtt__Get
$LN31@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN30@stbtt__Get:
; Line 2592
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 16
	mov	QWORD PTR class1Records$36[rsp], rax
; Line 2593
	movzx	eax, WORD PTR class2Count$2[rsp]
	mov	ecx, DWORD PTR glyph1class$26[rsp]
	imul	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class1Records$36[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR class2Records$37[rsp], rax
; Line 2594
	mov	eax, DWORD PTR glyph2class$27[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class2Records$37[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR xAdvance$20[rsp], ax
; Line 2595
	movsx	eax, WORD PTR xAdvance$20[rsp]
	jmp	SHORT $LN1@stbtt__Get
; Line 2596
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 2597
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN27@stbtt__Get:
; Line 2598
	jmp	SHORT $LN8@stbtt__Get
$LN32@stbtt__Get:
; Line 2602
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN8@stbtt__Get:
; Line 2604
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 2605
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2607
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2608
	add	rsp, 264				; 00000108H
	ret	0
?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ENDP ; stbtt__GetGlyphGPOSInfoAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
startGlyphID$1 = 32
classDefFormat$ = 36
glyphCount$2 = 40
classRangeCount$3 = 44
r$4 = 48
m$5 = 52
l$6 = 56
tv67 = 60
needle$7 = 64
strawStart$8 = 68
strawEnd$9 = 72
classRangeRecord$10 = 80
classDef1ValueArray$11 = 88
classRangeRecords$12 = 96
classDefTable$ = 128
glyph$ = 136
?stbtt__GetGlyphClass@@YAHPEAEH@Z PROC			; stbtt__GetGlyphClass
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2448
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2449
	mov	rcx, QWORD PTR classDefTable$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDefFormat$[rsp], ax
; Line 2450
	movzx	eax, WORD PTR classDefFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN6@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN8@stbtt__Get
	jmp	$LN13@stbtt__Get
$LN6@stbtt__Get:
; Line 2453
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR startGlyphID$1[rsp], ax
; Line 2454
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2455
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 6
	mov	QWORD PTR classDef1ValueArray$11[rsp], rax
; Line 2457
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	cmp	DWORD PTR glyph$[rsp], eax
	jl	SHORT $LN7@stbtt__Get
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	movzx	ecx, WORD PTR glyphCount$2[rsp]
	add	eax, ecx
	cmp	DWORD PTR glyph$[rsp], eax
	jge	SHORT $LN7@stbtt__Get
; Line 2458
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	mov	ecx, DWORD PTR glyph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR classDef1ValueArray$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt__Get
$LN7@stbtt__Get:
; Line 2459
	jmp	$LN2@stbtt__Get
$LN8@stbtt__Get:
; Line 2463
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classRangeCount$3[rsp], ax
; Line 2464
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	QWORD PTR classRangeRecords$12[rsp], rax
; Line 2467
	mov	DWORD PTR l$6[rsp], 0
	movzx	eax, WORD PTR classRangeCount$3[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
; Line 2468
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$7[rsp], eax
$LN4@stbtt__Get:
; Line 2469
	mov	eax, DWORD PTR r$4[rsp]
	cmp	DWORD PTR l$6[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2471
	mov	eax, DWORD PTR r$4[rsp]
	mov	ecx, DWORD PTR l$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$5[rsp], eax
; Line 2472
	imul	eax, DWORD PTR m$5[rsp], 6
	cdqe
	mov	rcx, QWORD PTR classRangeRecords$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR classRangeRecord$10[rsp], rax
; Line 2473
	mov	rcx, QWORD PTR classRangeRecord$10[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$8[rsp], eax
; Line 2474
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$9[rsp], eax
; Line 2475
	mov	eax, DWORD PTR strawStart$8[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2476
	mov	eax, DWORD PTR m$5[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2477
	mov	eax, DWORD PTR strawEnd$9[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2478
	mov	eax, DWORD PTR m$5[rsp]
	inc	eax
	mov	DWORD PTR l$6[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2480
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	SHORT $LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2481
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2482
	jmp	SHORT $LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2486
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2490
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2491
	add	rsp, 120				; 00000078H
	ret	0
?stbtt__GetGlyphClass@@YAHPEAEH@Z ENDP			; stbtt__GetGlyphClass
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$1 = 32
coverageFormat$ = 36
glyphCount$2 = 40
glyphID$3 = 44
rangeCount$4 = 48
startCoverageIndex$5 = 52
r$6 = 56
l$7 = 60
r$8 = 64
m$9 = 68
l$10 = 72
tv67 = 76
straw$11 = 80
needle$12 = 84
needle$13 = 88
strawStart$14 = 92
strawEnd$15 = 96
rangeRecord$16 = 104
glyphArray$17 = 112
rangeArray$18 = 120
coverageTable$ = 144
glyph$ = 152
?stbtt__GetCoverageIndex@@YAHPEAEH@Z PROC		; stbtt__GetCoverageIndex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2390
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2391
	mov	rcx, QWORD PTR coverageTable$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR coverageFormat$[rsp], ax
; Line 2392
	movzx	eax, WORD PTR coverageFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN8@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN13@stbtt__Get
	jmp	$LN18@stbtt__Get
$LN8@stbtt__Get:
; Line 2394
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2397
	mov	DWORD PTR l$7[rsp], 0
	movzx	eax, WORD PTR glyphCount$2[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
; Line 2398
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$12[rsp], eax
$LN4@stbtt__Get:
; Line 2399
	mov	eax, DWORD PTR r$6[rsp]
	cmp	DWORD PTR l$7[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2400
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR glyphArray$17[rsp], rax
; Line 2402
	mov	eax, DWORD PTR r$6[rsp]
	mov	ecx, DWORD PTR l$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$1[rsp], eax
; Line 2403
	mov	eax, DWORD PTR m$1[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR glyphArray$17[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphID$3[rsp], ax
; Line 2404
	movzx	eax, WORD PTR glyphID$3[rsp]
	mov	DWORD PTR straw$11[rsp], eax
; Line 2405
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2406
	mov	eax, DWORD PTR m$1[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2407
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2408
	mov	eax, DWORD PTR m$1[rsp]
	inc	eax
	mov	DWORD PTR l$7[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2410
	mov	eax, DWORD PTR m$1[rsp]
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2412
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2413
	jmp	$LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2417
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR rangeCount$4[rsp], ax
; Line 2418
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR rangeArray$18[rsp], rax
; Line 2421
	mov	DWORD PTR l$10[rsp], 0
	movzx	eax, WORD PTR rangeCount$4[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
; Line 2422
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$13[rsp], eax
$LN6@stbtt__Get:
; Line 2423
	mov	eax, DWORD PTR r$8[rsp]
	cmp	DWORD PTR l$10[rsp], eax
	jg	$LN7@stbtt__Get
; Line 2425
	mov	eax, DWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR l$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$9[rsp], eax
; Line 2426
	imul	eax, DWORD PTR m$9[rsp], 6
	cdqe
	mov	rcx, QWORD PTR rangeArray$18[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR rangeRecord$16[rsp], rax
; Line 2427
	mov	rcx, QWORD PTR rangeRecord$16[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$14[rsp], eax
; Line 2428
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$15[rsp], eax
; Line 2429
	mov	eax, DWORD PTR strawStart$14[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jge	SHORT $LN14@stbtt__Get
; Line 2430
	mov	eax, DWORD PTR m$9[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
	jmp	SHORT $LN15@stbtt__Get
$LN14@stbtt__Get:
; Line 2431
	mov	eax, DWORD PTR strawEnd$15[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jle	SHORT $LN16@stbtt__Get
; Line 2432
	mov	eax, DWORD PTR m$9[rsp]
	inc	eax
	mov	DWORD PTR l$10[rsp], eax
	jmp	SHORT $LN17@stbtt__Get
$LN16@stbtt__Get:
; Line 2434
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR startCoverageIndex$5[rsp], ax
; Line 2435
	movzx	eax, WORD PTR startCoverageIndex$5[rsp]
	add	eax, DWORD PTR glyph$[rsp]
	sub	eax, DWORD PTR strawStart$14[rsp]
	jmp	SHORT $LN1@stbtt__Get
$LN17@stbtt__Get:
$LN15@stbtt__Get:
; Line 2437
	jmp	$LN6@stbtt__Get
$LN7@stbtt__Get:
; Line 2438
	jmp	SHORT $LN2@stbtt__Get
$LN18@stbtt__Get:
; Line 2441
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2444
	mov	eax, -1
$LN1@stbtt__Get:
; Line 2445
	add	rsp, 136				; 00000088H
	ret	0
?stbtt__GetCoverageIndex@@YAHPEAEH@Z ENDP		; stbtt__GetCoverageIndex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
r$ = 36
l$ = 40
straw$ = 44
needle$ = 48
data$ = 56
info$ = 80
glyph1$ = 88
glyph2$ = 96
?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z PROC ; stbtt__GetGlyphKernInfoAdvance
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2360
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2361
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2366
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN4@stbtt__Get
; Line 2367
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN4@stbtt__Get:
; Line 2368
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN5@stbtt__Get
; Line 2369
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN5@stbtt__Get:
; Line 2370
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN6@stbtt__Get
; Line 2371
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN6@stbtt__Get:
; Line 2373
	mov	DWORD PTR l$[rsp], 0
; Line 2374
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	dec	eax
	mov	DWORD PTR r$[rsp], eax
; Line 2375
	mov	eax, DWORD PTR glyph1$[rsp]
	shl	eax, 16
	or	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$[rsp], eax
$LN2@stbtt__Get:
; Line 2376
	mov	eax, DWORD PTR r$[rsp]
	cmp	DWORD PTR l$[rsp], eax
	jg	SHORT $LN3@stbtt__Get
; Line 2377
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR l$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$[rsp], eax
; Line 2378
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR straw$[rsp], eax
; Line 2379
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jae	SHORT $LN7@stbtt__Get
; Line 2380
	mov	eax, DWORD PTR m$[rsp]
	dec	eax
	mov	DWORD PTR r$[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
; Line 2381
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jbe	SHORT $LN9@stbtt__Get
; Line 2382
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2384
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	jmp	SHORT $LN1@stbtt__Get
$LN10@stbtt__Get:
$LN8@stbtt__Get:
; Line 2385
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2386
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2387
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ENDP ; stbtt__GetGlyphKernInfoAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output_ctx$ = 32
count_ctx$ = 88
info$ = 160
glyph_index$ = 168
pvertices$ = 176
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeT2
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2270
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 2272
	mov	DWORD PTR count_ctx$[rsp], 1
	mov	DWORD PTR count_ctx$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+20], xmm0
	mov	DWORD PTR count_ctx$[rsp+24], 0
	mov	DWORD PTR count_ctx$[rsp+28], 0
	mov	DWORD PTR count_ctx$[rsp+32], 0
	mov	DWORD PTR count_ctx$[rsp+36], 0
	mov	QWORD PTR count_ctx$[rsp+40], 0
	mov	DWORD PTR count_ctx$[rsp+48], 0
; Line 2273
	mov	DWORD PTR output_ctx$[rsp], 0
	mov	DWORD PTR output_ctx$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+20], xmm0
	mov	DWORD PTR output_ctx$[rsp+24], 0
	mov	DWORD PTR output_ctx$[rsp+28], 0
	mov	DWORD PTR output_ctx$[rsp+32], 0
	mov	DWORD PTR output_ctx$[rsp+36], 0
	mov	QWORD PTR output_ctx$[rsp+40], 0
	mov	DWORD PTR output_ctx$[rsp+48], 0
; Line 2274
	lea	r8, QWORD PTR count_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN2@stbtt__Get
; Line 2275
	movsxd	rax, DWORD PTR count_ctx$[rsp+48]
	imul	rax, rax, 14
	mov	rcx, rax
	call	malloc
	mov	rcx, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2276
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR output_ctx$[rsp+40], rax
; Line 2277
	lea	r8, QWORD PTR output_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN3@stbtt__Get
; Line 2278
	mov	eax, DWORD PTR count_ctx$[rsp+48]
	cmp	DWORD PTR output_ctx$[rsp+48], eax
	je	SHORT $LN5@stbtt__Get
	mov	r8d, 2278				; 000008e6H
	lea	rdx, OFFSET FLAT:$SG83385
	lea	rcx, OFFSET FLAT:$SG83386
	call	_wassert
	xor	eax, eax
$LN5@stbtt__Get:
; Line 2279
	mov	eax, DWORD PTR output_ctx$[rsp+48]
	jmp	SHORT $LN1@stbtt__Get
$LN3@stbtt__Get:
$LN2@stbtt__Get:
; Line 2282
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2283
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2284
	add	rsp, 152				; 00000098H
	ret	0
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeT2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
sp$ = 68
dy2$1 = 72
subr_stack_height$ = 76
dx3$2 = 80
dx2$3 = 84
dx1$4 = 88
dx6$5 = 92
dx5$6 = 96
dx4$7 = 100
dy1$8 = 104
dy5$9 = 108
b0$ = 112
f$ = 116
maskbits$ = 120
in_header$ = 124
dy6$10 = 128
tv76 = 132
tv470 = 136
dy3$11 = 140
dy4$12 = 144
clear_stack$ = 148
b$ = 152
tv225 = 168
has_subrs$ = 172
dy$13 = 176
dx$14 = 180
tv188 = 184
v$ = 188
tv456 = 192
b1$15 = 196
tv244 = 200
tv453 = 208
tv640 = 216
subrs$ = 224
$T16 = 240
$T17 = 256
$T18 = 272
$T19 = 288
$T20 = 304
$T21 = 320
$T22 = 336
$T23 = 352
s$ = 368
subr_stack$ = 560
__$ArrayPad$ = 720
info$ = 768
glyph_index$ = 776
c$ = 784
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z PROC ; stbtt__run_charstring
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2011
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 744				; 000002e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2012
	mov	DWORD PTR in_header$[rsp], 1
	mov	DWORD PTR maskbits$[rsp], 0
	mov	DWORD PTR subr_stack_height$[rsp], 0
	mov	DWORD PTR sp$[rsp], 0
; Line 2013
	mov	DWORD PTR has_subrs$[rsp], 0
; Line 2015
	lea	rax, QWORD PTR subrs$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+112]
	mov	ecx, 16
	rep movsb
; Line 2021
	lea	rax, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+80]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR glyph_index$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN2@stbtt__run:
; Line 2022
	mov	eax, DWORD PTR b$[rsp+12]
	cmp	DWORD PTR b$[rsp+8], eax
	jge	$LN3@stbtt__run
; Line 2023
	mov	DWORD PTR i$[rsp], 0
; Line 2024
	mov	DWORD PTR clear_stack$[rsp], 1
; Line 2025
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 2026
	mov	eax, DWORD PTR b0$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	dec	eax
	mov	DWORD PTR tv76[rsp], eax
	cmp	DWORD PTR tv76[rsp], 30
	ja	$LN94@stbtt__run
	movsxd	rax, DWORD PTR tv76[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN107@stbtt__run[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN29@stbtt__run:
$LN30@stbtt__run:
; Line 2030
	cmp	DWORD PTR in_header$[rsp], 0
	je	SHORT $LN31@stbtt__run
; Line 2031
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
$LN31@stbtt__run:
; Line 2032
	mov	DWORD PTR in_header$[rsp], 0
; Line 2033
	mov	eax, DWORD PTR maskbits$[rsp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, eax
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2034
	jmp	$LN4@stbtt__run
$LN32@stbtt__run:
$LN33@stbtt__run:
$LN34@stbtt__run:
$LN35@stbtt__run:
; Line 2040
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
; Line 2041
	jmp	$LN4@stbtt__run
$LN36@stbtt__run:
; Line 2044
	mov	DWORD PTR in_header$[rsp], 0
; Line 2045
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN37@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN37@stbtt__run:
; Line 2046
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	movsxd	rcx, ecx
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2047
	jmp	$LN4@stbtt__run
$LN38@stbtt__run:
; Line 2049
	mov	DWORD PTR in_header$[rsp], 0
; Line 2050
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN39@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN39@stbtt__run:
; Line 2051
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2052
	jmp	$LN4@stbtt__run
$LN40@stbtt__run:
; Line 2054
	mov	DWORD PTR in_header$[rsp], 0
; Line 2055
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN41@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN41@stbtt__run:
; Line 2056
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2057
	jmp	$LN4@stbtt__run
$LN42@stbtt__run:
; Line 2060
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN43@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN43@stbtt__run:
; Line 2061
	jmp	SHORT $LN8@stbtt__run
$LN6@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN8@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jge	SHORT $LN7@stbtt__run
; Line 2062
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN6@stbtt__run
$LN7@stbtt__run:
; Line 2063
	jmp	$LN4@stbtt__run
$LN44@stbtt__run:
; Line 2069
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN45@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN45@stbtt__run:
; Line 2070
	jmp	SHORT $LN46@stbtt__run
	jmp	SHORT $vlineto$108
$LN47@stbtt__run:
; Line 2072
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN48@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN48@stbtt__run:
$LN9@stbtt__run:
; Line 2074
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN49@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN49@stbtt__run:
; Line 2075
	movsxd	rax, DWORD PTR i$[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2076
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN46@stbtt__run:
$vlineto$108:
; Line 2078
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN50@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN50@stbtt__run:
; Line 2079
	movsxd	rax, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2080
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 2081
	jmp	SHORT $LN9@stbtt__run
$LN10@stbtt__run:
; Line 2082
	jmp	$LN4@stbtt__run
$LN51@stbtt__run:
; Line 2085
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN52@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN52@stbtt__run:
; Line 2086
	jmp	$LN53@stbtt__run
	jmp	$hvcurveto$109
$LN54@stbtt__run:
; Line 2088
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN55@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN55@stbtt__run:
$LN12@stbtt__run:
; Line 2090
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN56@stbtt__run
	jmp	$LN13@stbtt__run
$LN56@stbtt__run:
; Line 2091
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN101@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv188[rsp], xmm0
	jmp	SHORT $LN102@stbtt__run
$LN101@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv188[rsp], xmm0
$LN102@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR tv188[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR s$[rsp+rdi*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2092
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN53@stbtt__run:
$hvcurveto$109:
; Line 2094
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN57@stbtt__run
	jmp	$LN13@stbtt__run
$LN57@stbtt__run:
; Line 2095
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv244[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN103@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv225[rsp], xmm0
	jmp	SHORT $LN104@stbtt__run
$LN103@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv225[rsp], xmm0
$LN104@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR tv244[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR tv225[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rcx*4]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rdx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2096
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
; Line 2097
	jmp	$LN12@stbtt__run
$LN13@stbtt__run:
; Line 2098
	jmp	$LN4@stbtt__run
$LN58@stbtt__run:
; Line 2101
	cmp	DWORD PTR sp$[rsp], 6
	jge	SHORT $LN59@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN59@stbtt__run:
; Line 2102
	jmp	SHORT $LN17@stbtt__run
$LN15@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN17@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN16@stbtt__run
; Line 2103
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN15@stbtt__run
$LN16@stbtt__run:
; Line 2104
	jmp	$LN4@stbtt__run
$LN60@stbtt__run:
; Line 2107
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN61@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN61@stbtt__run:
; Line 2108
	jmp	SHORT $LN20@stbtt__run
$LN18@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN20@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	cmp	eax, ecx
	jge	$LN19@stbtt__run
; Line 2109
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN18@stbtt__run
$LN19@stbtt__run:
; Line 2110
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN62@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN62@stbtt__run:
; Line 2111
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2112
	jmp	$LN4@stbtt__run
$LN63@stbtt__run:
; Line 2115
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN64@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN64@stbtt__run:
; Line 2116
	jmp	SHORT $LN23@stbtt__run
$LN21@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN23@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 6
	cmp	eax, ecx
	jge	SHORT $LN22@stbtt__run
; Line 2117
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN21@stbtt__run
$LN22@stbtt__run:
; Line 2118
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN65@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN65@stbtt__run:
; Line 2119
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2120
	jmp	$LN4@stbtt__run
$LN66@stbtt__run:
$LN67@stbtt__run:
; Line 2124
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN68@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN68@stbtt__run:
; Line 2125
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rsp], xmm0
; Line 2126
	mov	eax, DWORD PTR sp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN69@stbtt__run
	movsxd	rax, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR f$[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN69@stbtt__run:
; Line 2127
	jmp	SHORT $LN26@stbtt__run
$LN24@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN26@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN25@stbtt__run
; Line 2128
	cmp	DWORD PTR b0$[rsp], 27
	jne	SHORT $LN70@stbtt__run
; Line 2129
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR s$[rsp+rdi*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	SHORT $LN71@stbtt__run
$LN70@stbtt__run:
; Line 2131
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR s$[rsp+rdi*4]
	movss	xmm1, DWORD PTR f$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
$LN71@stbtt__run:
; Line 2132
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rsp], xmm0
; Line 2133
	jmp	$LN24@stbtt__run
$LN25@stbtt__run:
; Line 2134
	jmp	$LN4@stbtt__run
$LN72@stbtt__run:
; Line 2137
	cmp	DWORD PTR has_subrs$[rsp], 0
	jne	SHORT $LN73@stbtt__run
; Line 2138
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+156], 0
	je	SHORT $LN74@stbtt__run
; Line 2139
	mov	r8d, DWORD PTR glyph_index$[rsp]
	mov	rdx, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ; stbtt__cid_get_glyph_subrs
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR subrs$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN74@stbtt__run:
; Line 2140
	mov	DWORD PTR has_subrs$[rsp], 1
$LN73@stbtt__run:
$LN75@stbtt__run:
; Line 2144
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN76@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN76@stbtt__run:
; Line 2145
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	mov	DWORD PTR sp$[rsp], eax
	movsxd	rax, DWORD PTR sp$[rsp]
	cvttss2si eax, DWORD PTR s$[rsp+rax*4]
	mov	DWORD PTR v$[rsp], eax
; Line 2146
	cmp	DWORD PTR subr_stack_height$[rsp], 10
	jl	SHORT $LN77@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN77@stbtt__run:
; Line 2147
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR subr_stack$[rsp+rax]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	inc	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
; Line 2148
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR tv456[rsp], eax
	cmp	DWORD PTR b0$[rsp], 10
	jne	SHORT $LN105@stbtt__run
	lea	rax, QWORD PTR subrs$[rsp]
	mov	QWORD PTR tv453[rsp], rax
	jmp	SHORT $LN106@stbtt__run
$LN105@stbtt__run:
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv453[rsp], rax
$LN106@stbtt__run:
	lea	rax, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv453[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR tv456[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__get_subr
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 2149
	cmp	DWORD PTR b$[rsp+12], 0
	jne	SHORT $LN78@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN78@stbtt__run:
; Line 2150
	mov	DWORD PTR b$[rsp+8], 0
; Line 2151
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2152
	jmp	$LN4@stbtt__run
$LN79@stbtt__run:
; Line 2155
	cmp	DWORD PTR subr_stack_height$[rsp], 0
	jg	SHORT $LN80@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN80@stbtt__run:
; Line 2156
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	dec	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR subr_stack$[rsp+rax]
	mov	ecx, 16
	rep movsb
; Line 2157
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2158
	jmp	$LN4@stbtt__run
$LN81@stbtt__run:
; Line 2161
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 2162
	mov	eax, 1
	jmp	$LN1@stbtt__run
$LN82@stbtt__run:
; Line 2167
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b1$15[rsp], eax
; Line 2168
	mov	eax, DWORD PTR b1$15[rsp]
	mov	DWORD PTR tv470[rsp], eax
	cmp	DWORD PTR tv470[rsp], 34		; 00000022H
	je	SHORT $LN83@stbtt__run
	cmp	DWORD PTR tv470[rsp], 35		; 00000023H
	je	$LN85@stbtt__run
	cmp	DWORD PTR tv470[rsp], 36		; 00000024H
	je	$LN87@stbtt__run
	cmp	DWORD PTR tv470[rsp], 37		; 00000025H
	je	$LN89@stbtt__run
	jmp	$LN93@stbtt__run
$LN83@stbtt__run:
; Line 2172
	cmp	DWORD PTR sp$[rsp], 7
	jge	SHORT $LN84@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN84@stbtt__run:
; Line 2173
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2174
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2175
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2176
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2177
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2178
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2179
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2180
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2181
	movss	xmm0, DWORD PTR dy2$1[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm1, xmm1
	movss	DWORD PTR [rsp+48], xmm1
	movss	xmm1, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm1
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2182
	jmp	$LN27@stbtt__run
$LN85@stbtt__run:
; Line 2185
	cmp	DWORD PTR sp$[rsp], 13
	jge	SHORT $LN86@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN86@stbtt__run:
; Line 2186
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2187
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2188
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2189
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2190
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2191
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy3$11[rsp], xmm0
; Line 2192
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2193
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy4$12[rsp], xmm0
; Line 2194
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2195
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2196
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2197
	mov	eax, 4
	imul	rax, rax, 11
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy6$10[rsp], xmm0
; Line 2199
	movss	xmm0, DWORD PTR dy3$11[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2200
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	movss	xmm2, DWORD PTR dy4$12[rsp]
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2201
	jmp	$LN27@stbtt__run
$LN87@stbtt__run:
; Line 2204
	cmp	DWORD PTR sp$[rsp], 9
	jge	SHORT $LN88@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN88@stbtt__run:
; Line 2205
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2206
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2207
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2208
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2209
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2210
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2211
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2212
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2213
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2214
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2215
	movss	xmm0, DWORD PTR dy1$8[rsp]
	addss	xmm0, DWORD PTR dy2$1[rsp]
	addss	xmm0, DWORD PTR dy5$9[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2216
	jmp	$LN27@stbtt__run
$LN89@stbtt__run:
; Line 2219
	cmp	DWORD PTR sp$[rsp], 11
	jge	SHORT $LN90@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN90@stbtt__run:
; Line 2220
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2221
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2222
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2223
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2224
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2225
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy3$11[rsp], xmm0
; Line 2226
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2227
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy4$12[rsp], xmm0
; Line 2228
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2229
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2230
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy6$10[rsp], xmm0
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2231
	movss	xmm0, DWORD PTR dx1$4[rsp]
	addss	xmm0, DWORD PTR dx2$3[rsp]
	addss	xmm0, DWORD PTR dx3$2[rsp]
	addss	xmm0, DWORD PTR dx4$7[rsp]
	addss	xmm0, DWORD PTR dx5$6[rsp]
	movss	DWORD PTR dx$14[rsp], xmm0
; Line 2232
	movss	xmm0, DWORD PTR dy1$8[rsp]
	addss	xmm0, DWORD PTR dy2$1[rsp]
	addss	xmm0, DWORD PTR dy3$11[rsp]
	addss	xmm0, DWORD PTR dy4$12[rsp]
	addss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR dy$13[rsp], xmm0
; Line 2233
	cvtss2sd xmm0, DWORD PTR dx$14[rsp]
	call	fabs
	movsd	QWORD PTR tv640[rsp], xmm0
	cvtss2sd xmm1, DWORD PTR dy$13[rsp]
	movaps	xmm0, xmm1
	call	fabs
	movsd	xmm1, QWORD PTR tv640[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN91@stbtt__run
; Line 2234
	movss	xmm0, DWORD PTR dy$13[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy6$10[rsp], xmm0
	jmp	SHORT $LN92@stbtt__run
$LN91@stbtt__run:
; Line 2236
	movss	xmm0, DWORD PTR dx$14[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx6$5[rsp], xmm0
$LN92@stbtt__run:
; Line 2237
	movss	xmm0, DWORD PTR dy3$11[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2238
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	movss	xmm2, DWORD PTR dy4$12[rsp]
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2239
	jmp	SHORT $LN27@stbtt__run
$LN93@stbtt__run:
; Line 2242
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN27@stbtt__run:
; Line 2244
	jmp	$LN4@stbtt__run
$LN94@stbtt__run:
; Line 2247
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rsp], 28
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jge	SHORT $LN95@stbtt__run
; Line 2248
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN95@stbtt__run:
; Line 2251
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	jne	SHORT $LN96@stbtt__run
; Line 2252
	mov	edx, 4
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47800000
	movss	DWORD PTR f$[rsp], xmm0
; Line 2253
	jmp	SHORT $LN97@stbtt__run
$LN96@stbtt__run:
; Line 2254
	mov	edx, -1
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2255
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR f$[rsp], xmm0
$LN97@stbtt__run:
; Line 2257
	cmp	DWORD PTR sp$[rsp], 48			; 00000030H
	jl	SHORT $LN98@stbtt__run
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__run
$LN98@stbtt__run:
; Line 2258
	movsxd	rax, DWORD PTR sp$[rsp]
	movss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR s$[rsp+rax*4], xmm0
	mov	eax, DWORD PTR sp$[rsp]
	inc	eax
	mov	DWORD PTR sp$[rsp], eax
; Line 2259
	mov	DWORD PTR clear_stack$[rsp], 0
$LN4@stbtt__run:
; Line 2262
	cmp	DWORD PTR clear_stack$[rsp], 0
	je	SHORT $LN99@stbtt__run
	mov	DWORD PTR sp$[rsp], 0
$LN99@stbtt__run:
; Line 2263
	jmp	$LN2@stbtt__run
$LN3@stbtt__run:
; Line 2264
	xor	eax, eax
$LN1@stbtt__run:
; Line 2267
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 744				; 000002e8H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN107@stbtt__run:
	DD	$LN32@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN33@stbtt__run
	DD	$LN38@stbtt__run
	DD	$LN42@stbtt__run
	DD	$LN47@stbtt__run
	DD	$LN44@stbtt__run
	DD	$LN58@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN72@stbtt__run
	DD	$LN79@stbtt__run
	DD	$LN82@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN81@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN34@stbtt__run
	DD	$LN29@stbtt__run
	DD	$LN30@stbtt__run
	DD	$LN36@stbtt__run
	DD	$LN40@stbtt__run
	DD	$LN35@stbtt__run
	DD	$LN60@stbtt__run
	DD	$LN63@stbtt__run
	DD	$LN66@stbtt__run
	DD	$LN67@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN75@stbtt__run
	DD	$LN54@stbtt__run
	DD	$LN51@stbtt__run
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ENDP ; stbtt__run_charstring
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fdselector$ = 32
i$ = 36
fmt$ = 40
end$ = 44
start$ = 48
fdselect$ = 56
nranges$ = 72
v$ = 76
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
__$ReturnAddress$ = 240
info$ = 248
glyph_index$ = 256
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z PROC ; stbtt__cid_get_glyph_subrs
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1983
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 1984
	lea	rax, QWORD PTR fdselect$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+144]
	mov	ecx, 16
	rep movsb
; Line 1985
	mov	DWORD PTR fdselector$[rsp], -1
; Line 1987
	xor	edx, edx
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1988
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fmt$[rsp], eax
; Line 1989
	cmp	DWORD PTR fmt$[rsp], 0
	jne	SHORT $LN5@stbtt__cid
; Line 1991
	mov	edx, DWORD PTR glyph_index$[rsp]
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1992
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fdselector$[rsp], eax
	jmp	$LN6@stbtt__cid
$LN5@stbtt__cid:
; Line 1993
	cmp	DWORD PTR fmt$[rsp], 3
	jne	$LN7@stbtt__cid
; Line 1994
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR nranges$[rsp], eax
; Line 1995
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1996
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__cid
$LN2@stbtt__cid:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__cid:
	mov	eax, DWORD PTR nranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__cid
; Line 1997
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1998
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1999
	mov	eax, DWORD PTR start$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN8@stbtt__cid
	mov	eax, DWORD PTR end$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	SHORT $LN8@stbtt__cid
; Line 2000
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR fdselector$[rsp], eax
; Line 2001
	jmp	SHORT $LN3@stbtt__cid
$LN8@stbtt__cid:
; Line 2003
	mov	eax, DWORD PTR end$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 2004
	jmp	SHORT $LN2@stbtt__cid
$LN3@stbtt__cid:
$LN7@stbtt__cid:
$LN6@stbtt__cid:
; Line 2006
	cmp	DWORD PTR fdselector$[rsp], -1
	jne	SHORT $LN9@stbtt__cid
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN9@stbtt__cid:
; Line 2007
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+128]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR fdselector$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 2008
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ENDP ; stbtt__cid_get_glyph_subrs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bias$ = 32
count$ = 36
$T1 = 48
$T2 = 64
$T3 = 80
__$ReturnAddress$ = 128
idx$ = 136
n$ = 144
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z PROC		; stbtt__get_subr
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1969
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 1970
	mov	rcx, QWORD PTR idx$[rsp]
	call	?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ; stbtt__cff_index_count
	mov	DWORD PTR count$[rsp], eax
; Line 1971
	mov	DWORD PTR bias$[rsp], 107		; 0000006bH
; Line 1972
	cmp	DWORD PTR count$[rsp], 33900		; 0000846cH
	jl	SHORT $LN2@stbtt__get
; Line 1973
	mov	DWORD PTR bias$[rsp], 32768		; 00008000H
	jmp	SHORT $LN3@stbtt__get
$LN2@stbtt__get:
; Line 1974
	cmp	DWORD PTR count$[rsp], 1240		; 000004d8H
	jl	SHORT $LN4@stbtt__get
; Line 1975
	mov	DWORD PTR bias$[rsp], 1131		; 0000046bH
$LN4@stbtt__get:
$LN3@stbtt__get:
; Line 1976
	mov	eax, DWORD PTR bias$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1977
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN6@stbtt__get
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN5@stbtt__get
$LN6@stbtt__get:
; Line 1978
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN5@stbtt__get:
; Line 1979
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR idx$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1980
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ENDP		; stbtt__get_subr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cy2$ = 64
cx2$ = 68
cy1$ = 72
cx1$ = 76
ctx$ = 96
dx1$ = 104
dy1$ = 112
dx2$ = 120
dy2$ = 128
dx3$ = 136
dy3$ = 144
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z PROC ; stbtt__csctx_rccurve_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1958
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1959
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx1$[rsp]
	movss	DWORD PTR cx1$[rsp], xmm0
; Line 1960
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy1$[rsp]
	movss	DWORD PTR cy1$[rsp], xmm0
; Line 1961
	movss	xmm0, DWORD PTR cx1$[rsp]
	addss	xmm0, DWORD PTR dx2$[rsp]
	movss	DWORD PTR cx2$[rsp], xmm0
; Line 1962
	movss	xmm0, DWORD PTR cy1$[rsp]
	addss	xmm0, DWORD PTR dy2$[rsp]
	movss	DWORD PTR cy2$[rsp], xmm0
; Line 1963
	movss	xmm0, DWORD PTR cx2$[rsp]
	addss	xmm0, DWORD PTR dx3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1964
	movss	xmm0, DWORD PTR cy2$[rsp]
	addss	xmm0, DWORD PTR dy3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1965
	cvttss2si eax, DWORD PTR cy2$[rsp]
	cvttss2si ecx, DWORD PTR cx2$[rsp]
	cvttss2si edx, DWORD PTR cy1$[rsp]
	cvttss2si r8d, DWORD PTR cx1$[rsp]
	mov	r9, QWORD PTR ctx$[rsp]
	cvttss2si r9d, DWORD PTR [r9+20]
	mov	r10, QWORD PTR ctx$[rsp]
	cvttss2si r10d, DWORD PTR [r10+16]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, r10d
	mov	dl, 4
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1966
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ENDP ; stbtt__csctx_rccurve_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
dx$ = 88
dy$ = 96
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rline_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1951
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1952
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1953
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1954
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1955
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rline_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 64
tv72 = 68
ctx$ = 96
dx$ = 104
dy$ = 112
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rmove_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1943
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1944
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 1945
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 1946
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR [rax+20], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 1947
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1948
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rmove_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z PROC	; stbtt__csctx_close_shape
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1937
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1938
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+16]
	jp	SHORT $LN3@stbtt__csc
	jne	SHORT $LN3@stbtt__csc
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+20]
	jp	SHORT $LN5@stbtt__csc
	je	SHORT $LN2@stbtt__csc
$LN5@stbtt__csc:
$LN3@stbtt__csc:
; Line 1939
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
$LN2@stbtt__csc:
; Line 1940
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ENDP	; stbtt__csctx_close_shape
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 64
type$ = 72
x$ = 80
y$ = 88
cx$ = 96
cy$ = 104
cx1$ = 112
cy1$ = 120
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z PROC	; stbtt__csctx_v
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1921
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1922
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN2@stbtt__csc
; Line 1923
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1924
	movzx	eax, BYTE PTR type$[rsp]
	cmp	eax, 4
	jne	SHORT $LN4@stbtt__csc
; Line 1925
	mov	r8d, DWORD PTR cy$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1926
	mov	r8d, DWORD PTR cy1$[rsp]
	mov	edx, DWORD PTR cx1$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
$LN4@stbtt__csc:
; Line 1928
	jmp	SHORT $LN3@stbtt__csc
$LN2@stbtt__csc:
; Line 1929
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	ecx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	movzx	edx, BYTE PTR type$[rsp]
	mov	rcx, rax
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1930
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cx1$[rsp]
	mov	WORD PTR [rcx+rax+8], dx
; Line 1931
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cy1$[rsp]
	mov	WORD PTR [rcx+rax+10], dx
$LN3@stbtt__csc:
; Line 1933
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+48]
	inc	eax
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1934
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ENDP	; stbtt__csctx_v
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 8
x$ = 16
y$ = 24
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z PROC	; stbtt__track_vertex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1912
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1913
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR x$[rsp], eax
	jg	SHORT $LN3@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@stbtt__tra
$LN3@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+28], ecx
$LN2@stbtt__tra:
; Line 1914
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR y$[rsp], eax
	jg	SHORT $LN5@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN4@stbtt__tra
$LN5@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN4@stbtt__tra:
; Line 1915
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR x$[rsp], eax
	jl	SHORT $LN7@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@stbtt__tra
$LN7@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+24], ecx
$LN6@stbtt__tra:
; Line 1916
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR y$[rsp], eax
	jl	SHORT $LN9@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@stbtt__tra
$LN9@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+32], ecx
$LN8@stbtt__tra:
; Line 1917
	mov	rax, QWORD PTR c$[rsp]
	mov	DWORD PTR [rax+4], 1
; Line 1918
	ret	0
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ENDP	; stbtt__track_vertex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flags$1 = 80
i$2 = 84
num_vertices$ = 88
flagcount$3 = 92
comp$4 = 96
vertices$ = 104
numberOfContours$ = 112
flags$5 = 116
off$6 = 120
y$7 = 124
x$8 = 128
x$9 = 132
y$10 = 136
points$11 = 144
tv157 = 152
tv163 = 153
cy$12 = 156
cx$13 = 160
sy$14 = 164
was_off$15 = 168
n$16 = 172
sx$17 = 176
g$ = 180
comp_num_verts$18 = 184
dx$19 = 188
dy$20 = 192
scy$21 = 196
scx$22 = 200
start_off$23 = 204
i$24 = 208
v$25 = 216
j$26 = 224
gidx$27 = 228
tv225 = 232
tv183 = 234
comp_verts$28 = 240
m$29 = 248
tv190 = 252
tv232 = 256
tv321 = 260
next_move$30 = 264
tv495 = 268
m$31 = 272
n$32 = 276
more$33 = 280
data$ = 288
tmp$34 = 296
ins$35 = 304
endPtsOfContours$ = 312
tv374 = 320
tv401 = 328
tv413 = 336
tv424 = 344
mtx$36 = 352
__$ArrayPad$ = 376
info$ = 400
glyph_index$ = 408
pvertices$ = 416
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeTT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1675
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1678
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1679
	mov	QWORD PTR vertices$[rsp], 0
; Line 1680
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1681
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1683
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 1685
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN19@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 1687
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1689
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jle	$LN20@stbtt__Get
; Line 1690
	mov	BYTE PTR flags$1[rsp], 0
; Line 1691
	mov	DWORD PTR j$26[rsp], 0
	mov	DWORD PTR was_off$15[rsp], 0
	mov	DWORD PTR start_off$23[rsp], 0
; Line 1694
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR endPtsOfContours$[rsp], rax
; Line 1695
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR ins$35[rsp], eax
; Line 1696
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	movsxd	rcx, DWORD PTR ins$35[rsp]
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	QWORD PTR points$11[rsp], rax
; Line 1698
	movsx	eax, WORD PTR numberOfContours$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	lea	rax, QWORD PTR [rcx+rax-2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR n$16[rsp], eax
; Line 1700
	movsx	eax, WORD PTR numberOfContours$[rsp]
	mov	ecx, DWORD PTR n$16[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR m$29[rsp], eax
; Line 1701
	movsxd	rax, DWORD PTR m$29[rsp]
	imul	rax, rax, 14
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR vertices$[rsp], rax
; Line 1702
	cmp	QWORD PTR vertices$[rsp], 0
	jne	SHORT $LN22@stbtt__Get
; Line 1703
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN22@stbtt__Get:
; Line 1705
	mov	DWORD PTR next_move$30[rsp], 0
; Line 1706
	mov	BYTE PTR flagcount$3[rsp], 0
; Line 1712
	mov	eax, DWORD PTR n$16[rsp]
	mov	ecx, DWORD PTR m$29[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR off$6[rsp], eax
; Line 1716
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN3@stbtt__Get
; Line 1717
	movzx	eax, BYTE PTR flagcount$3[rsp]
	test	eax, eax
	jne	SHORT $LN23@stbtt__Get
; Line 1718
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv157[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, BYTE PTR tv157[rsp]
	mov	BYTE PTR flags$1[rsp], al
; Line 1719
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN25@stbtt__Get
; Line 1720
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv163[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, BYTE PTR tv163[rsp]
	mov	BYTE PTR flagcount$3[rsp], al
$LN25@stbtt__Get:
; Line 1721
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 1722
	movzx	eax, BYTE PTR flagcount$3[rsp]
	dec	al
	mov	BYTE PTR flagcount$3[rsp], al
$LN24@stbtt__Get:
; Line 1723
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, BYTE PTR flags$1[rsp]
	mov	BYTE PTR [rcx+rax+12], dl
; Line 1724
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 1727
	mov	DWORD PTR x$8[rsp], 0
; Line 1728
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN6@stbtt__Get
; Line 1729
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1730
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN26@stbtt__Get
; Line 1731
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv183[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, WORD PTR tv183[rsp]
	mov	WORD PTR dx$19[rsp], ax
; Line 1732
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN62@stbtt__Get
	movsx	eax, WORD PTR dx$19[rsp]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN63@stbtt__Get
$LN62@stbtt__Get:
	movsx	eax, WORD PTR dx$19[rsp]
	neg	eax
	mov	DWORD PTR tv190[rsp], eax
$LN63@stbtt__Get:
	mov	eax, DWORD PTR tv190[rsp]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1733
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 1734
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN28@stbtt__Get
; Line 1735
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1736
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN28@stbtt__Get:
$LN27@stbtt__Get:
; Line 1739
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR x$8[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 1740
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 1743
	mov	DWORD PTR y$7[rsp], 0
; Line 1744
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN9@stbtt__Get
; Line 1745
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1746
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN29@stbtt__Get
; Line 1747
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv225[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, WORD PTR tv225[rsp]
	mov	WORD PTR dy$20[rsp], ax
; Line 1748
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN64@stbtt__Get
	movsx	eax, WORD PTR dy$20[rsp]
	mov	DWORD PTR tv232[rsp], eax
	jmp	SHORT $LN65@stbtt__Get
$LN64@stbtt__Get:
	movsx	eax, WORD PTR dy$20[rsp]
	neg	eax
	mov	DWORD PTR tv232[rsp], eax
$LN65@stbtt__Get:
	mov	eax, DWORD PTR tv232[rsp]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1749
	jmp	SHORT $LN30@stbtt__Get
$LN29@stbtt__Get:
; Line 1750
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN31@stbtt__Get
; Line 1751
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1752
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN31@stbtt__Get:
$LN30@stbtt__Get:
; Line 1755
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR y$7[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 1756
	jmp	$LN8@stbtt__Get
$LN9@stbtt__Get:
; Line 1759
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1760
	mov	DWORD PTR scy$21[rsp], 0
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR scx$22[rsp], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR cy$12[rsp], eax
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR cx$13[rsp], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR sy$14[rsp], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1761
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN13@stbtt__Get
$LN11@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN13@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN12@stbtt__Get
; Line 1762
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1763
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x$8[rsp], eax
; Line 1764
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y$7[rsp], eax
; Line 1766
	mov	eax, DWORD PTR i$2[rsp]
	cmp	DWORD PTR next_move$30[rsp], eax
	jne	$LN32@stbtt__Get
; Line 1767
	cmp	DWORD PTR i$2[rsp], 0
	je	SHORT $LN34@stbtt__Get
; Line 1768
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
$LN34@stbtt__Get:
; Line 1771
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN66@stbtt__Get
	mov	DWORD PTR tv321[rsp], 1
	jmp	SHORT $LN67@stbtt__Get
$LN66@stbtt__Get:
	mov	DWORD PTR tv321[rsp], 0
$LN67@stbtt__Get:
	mov	eax, DWORD PTR tv321[rsp]
	mov	DWORD PTR start_off$23[rsp], eax
; Line 1772
	cmp	DWORD PTR start_off$23[rsp], 0
	je	$LN35@stbtt__Get
; Line 1775
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR scx$22[rsp], eax
; Line 1776
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR scy$21[rsp], eax
; Line 1777
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN37@stbtt__Get
; Line 1779
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sx$17[rsp], eax
; Line 1780
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sy$14[rsp], eax
; Line 1781
	jmp	SHORT $LN38@stbtt__Get
$LN37@stbtt__Get:
; Line 1783
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1784
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR sy$14[rsp], eax
; Line 1785
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN38@stbtt__Get:
; Line 1787
	jmp	SHORT $LN36@stbtt__Get
$LN35@stbtt__Get:
; Line 1788
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1789
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR sy$14[rsp], eax
$LN36@stbtt__Get:
; Line 1791
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv374[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$14[rsp]
	mov	r8d, DWORD PTR sx$17[rsp]
	mov	dl, 1
	mov	rcx, QWORD PTR tv374[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1792
	mov	DWORD PTR was_off$15[rsp], 0
; Line 1793
	mov	eax, DWORD PTR j$26[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR next_move$30[rsp], eax
; Line 1794
	mov	eax, DWORD PTR j$26[rsp]
	inc	eax
	mov	DWORD PTR j$26[rsp], eax
; Line 1795
	jmp	$LN33@stbtt__Get
$LN32@stbtt__Get:
; Line 1796
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN39@stbtt__Get
; Line 1797
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN41@stbtt__Get
; Line 1798
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv401[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR y$7[rsp]
	mov	ecx, DWORD PTR cy$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR x$8[rsp]
	mov	edx, DWORD PTR cx$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv401[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN41@stbtt__Get:
; Line 1799
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR cx$13[rsp], eax
; Line 1800
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR cy$12[rsp], eax
; Line 1801
	mov	DWORD PTR was_off$15[rsp], 1
; Line 1802
	jmp	$LN40@stbtt__Get
$LN39@stbtt__Get:
; Line 1803
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN42@stbtt__Get
; Line 1804
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv413[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv413[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN43@stbtt__Get
$LN42@stbtt__Get:
; Line 1806
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv424[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv424[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN43@stbtt__Get:
; Line 1807
	mov	DWORD PTR was_off$15[rsp], 0
$LN40@stbtt__Get:
$LN33@stbtt__Get:
; Line 1810
	jmp	$LN11@stbtt__Get
$LN12@stbtt__Get:
; Line 1811
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
	jmp	$LN21@stbtt__Get
$LN20@stbtt__Get:
; Line 1812
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jge	$LN44@stbtt__Get
; Line 1814
	mov	DWORD PTR more$33[rsp], 1
; Line 1815
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR comp$4[rsp], rax
; Line 1816
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1817
	mov	QWORD PTR vertices$[rsp], 0
$LN14@stbtt__Get:
; Line 1818
	cmp	DWORD PTR more$33[rsp], 0
	je	$LN15@stbtt__Get
; Line 1820
	mov	DWORD PTR comp_num_verts$18[rsp], 0
; Line 1821
	mov	QWORD PTR comp_verts$28[rsp], 0
	mov	QWORD PTR tmp$34[rsp], 0
; Line 1822
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$36[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$36[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+20], xmm0
; Line 1824
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR flags$5[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1825
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR gidx$27[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1827
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN46@stbtt__Get
; Line 1828
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN48@stbtt__Get
; Line 1829
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1830
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1831
	jmp	SHORT $LN49@stbtt__Get
$LN48@stbtt__Get:
; Line 1832
	mov	rax, QWORD PTR comp$4[rsp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
; Line 1833
	mov	rax, QWORD PTR comp$4[rsp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
$LN49@stbtt__Get:
; Line 1835
	jmp	SHORT $LN47@stbtt__Get
$LN46@stbtt__Get:
; Line 1838
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN68@stbtt__Get
	mov	r8d, 1838				; 0000072eH
	lea	rdx, OFFSET FLAT:$SG83082
	lea	rcx, OFFSET FLAT:$SG83083
	call	_wassert
	xor	eax, eax
$LN68@stbtt__Get:
$LN47@stbtt__Get:
; Line 1840
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 8
	test	eax, eax
	je	$LN50@stbtt__Get
; Line 1841
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	movss	DWORD PTR tv495[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR tv495[rsp]
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR tv495[rsp]
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1842
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	jmp	$LN51@stbtt__Get
$LN50@stbtt__Get:
; Line 1843
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	$LN52@stbtt__Get
; Line 1844
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1845
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
; Line 1846
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
	jmp	$LN53@stbtt__Get
$LN52@stbtt__Get:
; Line 1847
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN54@stbtt__Get
; Line 1848
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1849
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1850
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 2
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1851
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
$LN54@stbtt__Get:
$LN53@stbtt__Get:
$LN51@stbtt__Get:
; Line 1855
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm0, DWORD PTR mtx$36[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, DWORD PTR mtx$36[rsp+rcx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR m$31[rsp], xmm0
; Line 1856
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm0, DWORD PTR mtx$36[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, DWORD PTR mtx$36[rsp+rcx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR n$32[rsp], xmm0
; Line 1859
	movzx	eax, WORD PTR gidx$27[rsp]
	lea	r8, QWORD PTR comp_verts$28[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR comp_num_verts$18[rsp], eax
; Line 1860
	cmp	DWORD PTR comp_num_verts$18[rsp], 0
	jle	$LN55@stbtt__Get
; Line 1862
	mov	DWORD PTR i$24[rsp], 0
	jmp	SHORT $LN18@stbtt__Get
$LN16@stbtt__Get:
	mov	eax, DWORD PTR i$24[rsp]
	inc	eax
	mov	DWORD PTR i$24[rsp], eax
$LN18@stbtt__Get:
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	cmp	DWORD PTR i$24[rsp], eax
	jge	$LN17@stbtt__Get
; Line 1863
	movsxd	rax, DWORD PTR i$24[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$25[rsp], rax
; Line 1865
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR y$10[rsp], ax
; Line 1866
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR m$31[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx], ax
; Line 1867
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR n$32[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 1868
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	WORD PTR y$10[rsp], ax
; Line 1869
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR m$31[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 1870
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR n$32[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 1871
	jmp	$LN16@stbtt__Get
$LN17@stbtt__Get:
; Line 1873
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR tmp$34[rsp], rax
; Line 1874
	cmp	QWORD PTR tmp$34[rsp], 0
	jne	SHORT $LN56@stbtt__Get
; Line 1875
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN57@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rsp]
	call	free
$LN57@stbtt__Get:
; Line 1876
	cmp	QWORD PTR comp_verts$28[rsp], 0
	je	SHORT $LN58@stbtt__Get
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	call	free
$LN58@stbtt__Get:
; Line 1877
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN56@stbtt__Get:
; Line 1879
	cmp	DWORD PTR num_vertices$[rsp], 0
	jle	SHORT $LN59@stbtt__Get
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN59@stbtt__Get
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	r8, rax
	mov	rdx, QWORD PTR vertices$[rsp]
	mov	rcx, QWORD PTR tmp$34[rsp]
	call	memcpy
$LN59@stbtt__Get:
; Line 1880
	movsxd	rax, DWORD PTR comp_num_verts$18[rsp]
	imul	rax, rax, 14
	movsxd	rcx, DWORD PTR num_vertices$[rsp]
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR tmp$34[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR comp_verts$28[rsp]
	call	memcpy
; Line 1881
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN60@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rsp]
	call	free
$LN60@stbtt__Get:
; Line 1882
	mov	rax, QWORD PTR tmp$34[rsp]
	mov	QWORD PTR vertices$[rsp], rax
; Line 1883
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	call	free
; Line 1884
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_vertices$[rsp], eax
$LN55@stbtt__Get:
; Line 1887
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 32					; 00000020H
	mov	DWORD PTR more$33[rsp], eax
; Line 1888
	jmp	$LN14@stbtt__Get
$LN15@stbtt__Get:
$LN44@stbtt__Get:
$LN21@stbtt__Get:
; Line 1893
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1894
	mov	eax, DWORD PTR num_vertices$[rsp]
$LN1@stbtt__Get:
; Line 1895
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	ret	0
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeTT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
tv90 = 56
tv134 = 64
tv145 = 72
vertices$ = 96
num_vertices$ = 104
was_off$ = 112
start_off$ = 120
sx$ = 128
sy$ = 136
scx$ = 144
scy$ = 152
cx$ = 160
cy$ = 168
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z PROC ; stbtt__close_shape
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1660
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1661
	cmp	DWORD PTR start_off$[rsp], 0
	je	$LN2@stbtt__clo
; Line 1662
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN4@stbtt__clo
; Line 1663
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv79[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR scy$[rsp]
	mov	ecx, DWORD PTR cy$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR scx$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv79[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN4@stbtt__clo:
; Line 1664
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv90[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR scy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR scx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv90[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1665
	jmp	$LN3@stbtt__clo
$LN2@stbtt__clo:
; Line 1666
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN5@stbtt__clo
; Line 1667
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv134[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv134[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN6@stbtt__clo
$LN5@stbtt__clo:
; Line 1669
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv145[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv145[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN6@stbtt__clo:
$LN3@stbtt__clo:
; Line 1671
	mov	eax, DWORD PTR num_vertices$[rsp]
; Line 1672
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ENDP ; stbtt__close_shape
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
tv70 = 36
tv73 = 40
tv76 = 44
tv79 = 48
tv81 = 52
c$ = 56
info$ = 128
glyph_index$ = 136
x0$ = 144
y0$ = 152
x1$ = 160
y1$ = 168
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z PROC ; stbtt__GetGlyphInfoT2
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2287
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2288
	mov	DWORD PTR c$[rsp], 1
	mov	DWORD PTR c$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+20], xmm0
	mov	DWORD PTR c$[rsp+24], 0
	mov	DWORD PTR c$[rsp+28], 0
	mov	DWORD PTR c$[rsp+32], 0
	mov	DWORD PTR c$[rsp+36], 0
	mov	QWORD PTR c$[rsp+40], 0
	mov	DWORD PTR c$[rsp+48], 0
; Line 2289
	lea	r8, QWORD PTR c$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	mov	DWORD PTR r$[rsp], eax
; Line 2290
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN2@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN7@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+24]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
	mov	DWORD PTR tv70[rsp], 0
$LN8@stbtt__Get:
	mov	rax, QWORD PTR x0$[rsp]
	mov	ecx, DWORD PTR tv70[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@stbtt__Get:
; Line 2291
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN3@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN9@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+32]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
	mov	DWORD PTR tv73[rsp], 0
$LN10@stbtt__Get:
	mov	rax, QWORD PTR y0$[rsp]
	mov	ecx, DWORD PTR tv73[rsp]
	mov	DWORD PTR [rax], ecx
$LN3@stbtt__Get:
; Line 2292
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN4@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN11@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+28]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
	mov	DWORD PTR tv76[rsp], 0
$LN12@stbtt__Get:
	mov	rax, QWORD PTR x1$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax], ecx
$LN4@stbtt__Get:
; Line 2293
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN5@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN13@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+36]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN14@stbtt__Get
$LN13@stbtt__Get:
	mov	DWORD PTR tv79[rsp], 0
$LN14@stbtt__Get:
	mov	rax, QWORD PTR y1$[rsp]
	mov	ecx, DWORD PTR tv79[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt__Get:
; Line 2294
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN15@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+48]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN16@stbtt__Get
$LN15@stbtt__Get:
	mov	DWORD PTR tv81[rsp], 0
$LN16@stbtt__Get:
	mov	eax, DWORD PTR tv81[rsp]
; Line 2295
	add	rsp, 120				; 00000078H
	ret	0
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ENDP ; stbtt__GetGlyphInfoT2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g1$ = 32
g2$ = 36
tv160 = 40
info$ = 64
glyph_index$ = 72
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z PROC	; stbtt__GetGlyfOffset
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1604
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1607
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN7@stbtt__Get
	mov	r8d, 1607				; 00000647H
	lea	rdx, OFFSET FLAT:$SG82894
	lea	rcx, OFFSET FLAT:$SG82895
	call	_wassert
	xor	eax, eax
$LN7@stbtt__Get:
; Line 1609
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN2@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 1610
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jl	SHORT $LN3@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN3@stbtt__Get:
; Line 1612
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 0
	jne	$LN4@stbtt__Get
; Line 1613
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g1$[rsp], eax
; Line 1614
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g2$[rsp], eax
; Line 1615
	jmp	SHORT $LN5@stbtt__Get
$LN4@stbtt__Get:
; Line 1616
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g1$[rsp], eax
; Line 1617
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g2$[rsp], eax
$LN5@stbtt__Get:
; Line 1620
	mov	eax, DWORD PTR g2$[rsp]
	cmp	DWORD PTR g1$[rsp], eax
	jne	SHORT $LN8@stbtt__Get
	mov	DWORD PTR tv160[rsp], -1
	jmp	SHORT $LN9@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR g1$[rsp]
	mov	DWORD PTR tv160[rsp], eax
$LN9@stbtt__Get:
	mov	eax, DWORD PTR tv160[rsp]
$LN1@stbtt__Get:
; Line 1621
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ENDP	; stbtt__GetGlyfOffset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 8
type$ = 16
x$ = 24
y$ = 32
cx$ = 40
cy$ = 48
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z PROC	; stbtt_setvertex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
; Line 1596
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR type$[rsp]
	mov	BYTE PTR [rax+12], cl
; Line 1597
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	mov	WORD PTR [rax], cx
; Line 1598
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	mov	WORD PTR [rax+2], cx
; Line 1599
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cx$[rsp]
	mov	WORD PTR [rax+4], cx
; Line 1600
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cy$[rsp]
	mov	WORD PTR [rax+6], cx
; Line 1601
	ret	0
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ENDP	; stbtt_setvertex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmap$ = 32
fdselectoff$1 = 36
i$ = 40
encoding_record$2 = 44
fdarrayoff$3 = 48
charstrings$4 = 52
b$5 = 56
cff$6 = 72
cstype$7 = 76
t$ = 80
tv321 = 84
tv328 = 88
numTables$ = 92
topdict$8 = 96
$T9 = 112
$T10 = 128
$T11 = 144
$T12 = 160
$T13 = 176
topdictidx$14 = 192
$T15 = 208
$T16 = 224
$T17 = 240
$T18 = 256
$T19 = 272
$T20 = 288
$T21 = 304
$T22 = 320
$T23 = 336
$T24 = 352
$T25 = 368
$T26 = 384
$T27 = 400
$T28 = 416
$T29 = 432
$T30 = 448
$T31 = 464
$T32 = 480
$T33 = 496
$T34 = 512
$T35 = 528
$T36 = 544
$T37 = 560
$T38 = 576
info$ = 624
data$ = 632
fontstart$ = 640
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z PROC ; stbtt_InitFont_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1384
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 600				; 00000258H
; Line 1388
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 1389
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR fontstart$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 1390
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T24[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1392
	lea	r8, OFFSET FLAT:$SG82770
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cmap$[rsp], eax
; Line 1393
	lea	r8, OFFSET FLAT:$SG82771
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 1394
	lea	r8, OFFSET FLAT:$SG82772
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 1395
	lea	r8, OFFSET FLAT:$SG82773
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 1396
	lea	r8, OFFSET FLAT:$SG82774
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 1397
	lea	r8, OFFSET FLAT:$SG82775
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 1398
	lea	r8, OFFSET FLAT:$SG82776
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 1399
	lea	r8, OFFSET FLAT:$SG82777
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1401
	cmp	DWORD PTR cmap$[rsp], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+40], 0
	jne	SHORT $LN9@stbtt_Init
$LN10@stbtt_Init:
; Line 1402
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN9@stbtt_Init:
; Line 1403
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN11@stbtt_Init
; Line 1405
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN13@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN13@stbtt_Init:
; Line 1406
	jmp	$LN12@stbtt_Init
$LN11@stbtt_Init:
; Line 1409
	mov	DWORD PTR cstype$7[rsp], 2
	mov	DWORD PTR charstrings$4[rsp], 0
	mov	DWORD PTR fdarrayoff$3[rsp], 0
	mov	DWORD PTR fdselectoff$1[rsp], 0
; Line 1412
	lea	r8, OFFSET FLAT:$SG82783
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cff$6[rsp], eax
; Line 1413
	cmp	DWORD PTR cff$6[rsp], 0
	jne	SHORT $LN14@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN14@stbtt_Init:
; Line 1415
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T25[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1416
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1419
	mov	eax, DWORD PTR cff$6[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 536870912				; 20000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1420
	lea	rax, QWORD PTR b$5[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
; Line 1423
	mov	edx, 2
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1424
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	edx, eax
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1428
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1429
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdictidx$14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1430
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR topdictidx$14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	xor	r8d, r8d
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdict$8[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1431
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1432
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	lea	rdi, QWORD PTR [rax+96]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1434
	lea	r9, QWORD PTR charstrings$4[rsp]
	mov	r8d, 1
	mov	edx, 17
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1435
	lea	r9, QWORD PTR cstype$7[rsp]
	mov	r8d, 1
	mov	edx, 262				; 00000106H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1436
	lea	r9, QWORD PTR fdarrayoff$3[rsp]
	mov	r8d, 1
	mov	edx, 292				; 00000124H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1437
	lea	r9, QWORD PTR fdselectoff$1[rsp]
	mov	r8d, 1
	mov	edx, 293				; 00000125H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1438
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR topdict$8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	lea	rdi, QWORD PTR [rax+112]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1441
	cmp	DWORD PTR cstype$7[rsp], 2
	je	SHORT $LN15@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN15@stbtt_Init:
; Line 1442
	cmp	DWORD PTR charstrings$4[rsp], 0
	jne	SHORT $LN16@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN16@stbtt_Init:
; Line 1444
	cmp	DWORD PTR fdarrayoff$3[rsp], 0
	je	$LN17@stbtt_Init
; Line 1446
	cmp	DWORD PTR fdselectoff$1[rsp], 0
	jne	SHORT $LN18@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN18@stbtt_Init:
; Line 1447
	mov	edx, DWORD PTR fdarrayoff$3[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1448
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1449
	mov	eax, DWORD PTR fdselectoff$1[rsp]
	mov	ecx, DWORD PTR b$5[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR fdselectoff$1[rsp]
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN17@stbtt_Init:
; Line 1452
	mov	edx, DWORD PTR charstrings$4[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1453
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	lea	rdi, QWORD PTR [rax+80]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN12@stbtt_Init:
; Line 1456
	lea	r8, OFFSET FLAT:$SG82789
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1457
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN19@stbtt_Init
; Line 1458
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
	jmp	SHORT $LN20@stbtt_Init
$LN19@stbtt_Init:
; Line 1460
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 65535		; 0000ffffH
$LN20@stbtt_Init:
; Line 1462
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], -1
; Line 1467
	mov	eax, DWORD PTR cmap$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numTables$[rsp], eax
; Line 1468
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 1469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Init
$LN2@stbtt_Init:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Init:
	mov	eax, DWORD PTR numTables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Init
; Line 1470
	mov	eax, DWORD PTR cmap$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8+4]
	mov	DWORD PTR encoding_record$2[rsp], eax
; Line 1472
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv321[rsp], eax
	cmp	DWORD PTR tv321[rsp], 0
	je	SHORT $LN24@stbtt_Init
	cmp	DWORD PTR tv321[rsp], 3
	je	SHORT $LN21@stbtt_Init
	jmp	$LN5@stbtt_Init
$LN21@stbtt_Init:
; Line 1474
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv328[rsp], eax
	cmp	DWORD PTR tv328[rsp], 1
	je	SHORT $LN22@stbtt_Init
	cmp	DWORD PTR tv328[rsp], 10
	je	SHORT $LN23@stbtt_Init
	jmp	SHORT $LN7@stbtt_Init
$LN22@stbtt_Init:
$LN23@stbtt_Init:
; Line 1478
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN7@stbtt_Init:
; Line 1481
	jmp	SHORT $LN5@stbtt_Init
$LN24@stbtt_Init:
; Line 1485
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN5@stbtt_Init:
; Line 1488
	jmp	$LN2@stbtt_Init
$LN3@stbtt_Init:
; Line 1489
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jne	SHORT $LN25@stbtt_Init
; Line 1490
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Init
$LN25@stbtt_Init:
; Line 1492
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+50]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+60], eax
; Line 1493
	mov	eax, 1
$LN1@stbtt_Init:
; Line 1494
	add	rsp, 600				; 00000258H
	pop	rdi
	pop	rsi
	ret	0
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ENDP ; stbtt_InitFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
offset$1 = 36
info$ = 64
?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z PROC		; stbtt__get_svg
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1369
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1371
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jge	SHORT $LN2@stbtt__get
; Line 1372
	lea	r8, OFFSET FLAT:$SG82726
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1373
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN3@stbtt__get
; Line 1374
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR offset$1[rsp], eax
; Line 1375
	mov	eax, DWORD PTR offset$1[rsp]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+52], eax
; Line 1376
	jmp	SHORT $LN4@stbtt__get
$LN3@stbtt__get:
; Line 1377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], 0
$LN4@stbtt__get:
$LN2@stbtt__get:
; Line 1380
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+52]
; Line 1381
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z ENDP		; stbtt__get_svg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
subrsoff$ = 32
private_loc$ = 40
$T1 = 48
pdict$ = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
__$ReturnAddress$ = 176
cff$ = 184
fontdict$ = 192
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z PROC		; stbtt__get_subrs
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1355
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1356
	mov	DWORD PTR subrsoff$[rsp], 0
	mov	DWORD PTR private_loc$[rsp], 0
	mov	DWORD PTR private_loc$[rsp+4], 0
; Line 1358
	lea	r9, QWORD PTR private_loc$[rsp]
	mov	r8d, 2
	mov	edx, 18
	mov	rcx, QWORD PTR fontdict$[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1359
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	je	SHORT $LN3@stbtt__get
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	jne	SHORT $LN2@stbtt__get
$LN3@stbtt__get:
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@stbtt__get
$LN2@stbtt__get:
; Line 1360
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	r9d, DWORD PTR private_loc$[rsp+rax]
	mov	r8d, DWORD PTR private_loc$[rsp+rcx]
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR pdict$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1361
	lea	r9, QWORD PTR subrsoff$[rsp]
	mov	r8d, 1
	mov	edx, 19
	lea	rcx, QWORD PTR pdict$[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1362
	cmp	DWORD PTR subrsoff$[rsp], 0
	jne	SHORT $LN4@stbtt__get
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN4@stbtt__get:
; Line 1363
	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR private_loc$[rsp+rax]
	add	eax, DWORD PTR subrsoff$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR cff$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1364
	mov	rdx, QWORD PTR cff$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1365
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ENDP		; stbtt__get_subrs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font_collection$ = 48
?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z PROC	; stbtt_GetNumberOfFonts_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1339
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1341
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetN
; Line 1342
	mov	eax, 1
	jmp	$LN1@stbtt_GetN
$LN2@stbtt_GetN:
; Line 1345
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82700
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82701
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82702
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82703
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
; Line 1347
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetN
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetN
$LN5@stbtt_GetN:
; Line 1348
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	jmp	SHORT $LN1@stbtt_GetN
$LN4@stbtt_GetN:
$LN3@stbtt_GetN:
; Line 1351
	xor	eax, eax
$LN1@stbtt_GetN:
; Line 1352
	add	rsp, 40					; 00000028H
	ret	0
?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z ENDP	; stbtt_GetNumberOfFonts_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
n$1 = 36
font_collection$ = 64
index$ = 72
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z PROC	; stbtt_GetFontOffsetForIndex_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1320
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1322
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetF
; Line 1323
	cmp	DWORD PTR index$[rsp], 0
	jne	SHORT $LN8@stbtt_GetF
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN9@stbtt_GetF
$LN8@stbtt_GetF:
	mov	DWORD PTR tv68[rsp], -1
$LN9@stbtt_GetF:
	mov	eax, DWORD PTR tv68[rsp]
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 1326
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82688
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82689
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82690
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82691
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetF
; Line 1328
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetF
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetF
$LN5@stbtt_GetF:
; Line 1329
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	mov	DWORD PTR n$1[rsp], eax
; Line 1330
	mov	eax, DWORD PTR n$1[rsp]
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN6@stbtt_GetF
; Line 1331
	mov	eax, -1
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 1332
	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR font_collection$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetF
$LN4@stbtt_GetF:
$LN3@stbtt_GetF:
; Line 1335
	mov	eax, -1
$LN1@stbtt_GetF:
; Line 1336
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ENDP	; stbtt_GetFontOffsetForIndex_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
i$ = 36
num_tables$ = 40
tabledir$ = 44
data$ = 64
fontstart$ = 72
tag$ = 80
?stbtt__find_table@@YAIPEAEIPEBD@Z PROC			; stbtt__find_table
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1307
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1308
	mov	eax, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR num_tables$[rsp], eax
; Line 1309
	mov	eax, DWORD PTR fontstart$[rsp]
	add	eax, 12
	mov	DWORD PTR tabledir$[rsp], eax
; Line 1311
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__fin
$LN2@stbtt__fin:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__fin:
	mov	eax, DWORD PTR num_tables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__fin
; Line 1312
	imul	eax, DWORD PTR i$[rsp], 16
	mov	ecx, DWORD PTR tabledir$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR loc$1[rsp], eax
; Line 1313
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
; Line 1314
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt__fin
$LN5@stbtt__fin:
; Line 1315
	jmp	$LN2@stbtt__fin
$LN3@stbtt__fin:
; Line 1316
	xor	eax, eax
$LN1@stbtt__fin:
; Line 1317
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__find_table@@YAIPEAEIPEBD@Z ENDP			; stbtt__find_table
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 8
?stbtt__isfont@@YAHPEAE@Z PROC				; stbtt__isfont
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1295
	mov	QWORD PTR [rsp+8], rcx
; Line 1297
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN2@stbtt__isf:
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82653
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82654
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82655
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82656
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN3@stbtt__isf:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82658
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82659
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82660
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82661
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN4@stbtt__isf:
; Line 1300
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 1
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN5@stbtt__isf:
; Line 1301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82664
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82665
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82666
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82667
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__isf
$LN6@stbtt__isf:
; Line 1302
	xor	eax, eax
$LN1@stbtt__isf:
; Line 1303
	ret	0
?stbtt__isfont@@YAHPEAE@Z ENDP				; stbtt__isfont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttLONG@@YAHPEAE@Z PROC					; ttLONG
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1289
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttLONG@@YAHPEAE@Z ENDP					; ttLONG
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttULONG@@YAIPEAE@Z PROC				; ttULONG
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1288
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttULONG@@YAIPEAE@Z ENDP				; ttULONG
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttSHORT@@YAFPEAE@Z PROC				; ttSHORT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1287
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttSHORT@@YAFPEAE@Z ENDP				; ttSHORT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttUSHORT@@YAGPEAE@Z PROC				; ttUSHORT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1286
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttUSHORT@@YAGPEAE@Z ENDP				; ttUSHORT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
end$ = 44
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
i$ = 112
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z PROC	; stbtt__cff_index_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1261
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1263
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1264
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1265
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1266
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@stbtt__cff
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@stbtt__cff
$LN3@stbtt__cff:
	mov	r8d, 1266				; 000004f2H
	lea	rdx, OFFSET FLAT:$SG82632
	lea	rcx, OFFSET FLAT:$SG82633
	call	_wassert
	xor	eax, eax
$LN4@stbtt__cff:
; Line 1267
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN5@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN6@stbtt__cff
$LN5@stbtt__cff:
	mov	r8d, 1267				; 000004f3H
	lea	rdx, OFFSET FLAT:$SG82634
	lea	rcx, OFFSET FLAT:$SG82635
	call	_wassert
	xor	eax, eax
$LN6@stbtt__cff:
; Line 1268
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR offsize$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1269
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1270
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1271
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR end$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR count$[rsp]
	inc	ecx
	imul	ecx, DWORD PTR offsize$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx+2]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1272
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ENDP	; stbtt__cff_index_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z PROC	; stbtt__cff_index_count
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1255
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1256
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1257
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
; Line 1258
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_index_count
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
operands$ = 40
$T1 = 56
b$ = 112
key$ = 120
outcount$ = 128
out$ = 136
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z PROC	; stbtt__dict_get_ints
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1247
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1249
	mov	r8d, DWORD PTR key$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ; stbtt__dict_get
	lea	rcx, QWORD PTR operands$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__dic
$LN2@stbtt__dic:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__dic:
	mov	eax, DWORD PTR outcount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__dic
	mov	eax, DWORD PTR operands$[rsp+12]
	cmp	DWORD PTR operands$[rsp+8], eax
	jge	SHORT $LN3@stbtt__dic
; Line 1251
	lea	rcx, QWORD PTR operands$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1252
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ENDP	; stbtt__dict_get_ints
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
op$1 = 32
start$2 = 36
end$3 = 40
$T4 = 48
$T5 = 64
__$ReturnAddress$ = 112
b$ = 120
key$ = 128
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z PROC	; stbtt__dict_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1232
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1233
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
$LN2@stbtt__dic:
; Line 1234
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN3@stbtt__dic
; Line 1235
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$2[rsp], eax
$LN4@stbtt__dic:
; Line 1236
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	cmp	eax, 28
	jl	SHORT $LN5@stbtt__dic
; Line 1237
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ; stbtt__cff_skip_operand
	jmp	SHORT $LN4@stbtt__dic
$LN5@stbtt__dic:
; Line 1238
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR end$3[rsp], eax
; Line 1239
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR op$1[rsp], eax
; Line 1240
	cmp	DWORD PTR op$1[rsp], 12
	jne	SHORT $LN6@stbtt__dic
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	bts	eax, 8
	mov	DWORD PTR op$1[rsp], eax
$LN6@stbtt__dic:
; Line 1241
	mov	eax, DWORD PTR key$[rsp]
	cmp	DWORD PTR op$1[rsp], eax
	jne	SHORT $LN7@stbtt__dic
	mov	eax, DWORD PTR start$2[rsp]
	mov	ecx, DWORD PTR end$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$2[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__dic
$LN7@stbtt__dic:
; Line 1242
	jmp	$LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1243
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__dic:
; Line 1244
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ENDP	; stbtt__dict_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
v$ = 36
b$ = 64
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z PROC	; stbtt__cff_skip_operand
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1216
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1217
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1218
	cmp	DWORD PTR b0$[rsp], 28
	jge	SHORT $LN9@stbtt__cff
	mov	r8d, 1218				; 000004c2H
	lea	rdx, OFFSET FLAT:$SG82583
	lea	rcx, OFFSET FLAT:$SG82584
	call	_wassert
	xor	eax, eax
$LN9@stbtt__cff:
; Line 1219
	cmp	DWORD PTR b0$[rsp], 30
	jne	SHORT $LN4@stbtt__cff
; Line 1220
	mov	edx, 1
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1221
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN3@stbtt__cff
; Line 1222
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1223
	mov	eax, DWORD PTR v$[rsp]
	and	eax, 15
	cmp	eax, 15
	je	SHORT $LN7@stbtt__cff
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 4
	cmp	eax, 15
	jne	SHORT $LN6@stbtt__cff
$LN7@stbtt__cff:
; Line 1224
	jmp	SHORT $LN3@stbtt__cff
$LN6@stbtt__cff:
; Line 1225
	jmp	SHORT $LN2@stbtt__cff
$LN3@stbtt__cff:
; Line 1226
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1227
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
$LN5@stbtt__cff:
; Line 1229
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_skip_operand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
tv73 = 36
tv83 = 40
b$ = 64
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z PROC		; stbtt__cff_int
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1205
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1206
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1207
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jl	SHORT $LN2@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 246			; 000000f6H
	jg	SHORT $LN2@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 139				; 0000008bH
	jmp	$LN1@stbtt__cff
	jmp	$LN3@stbtt__cff
$LN2@stbtt__cff:
; Line 1208
	cmp	DWORD PTR b0$[rsp], 247			; 000000f7H
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 250			; 000000faH
	jg	SHORT $LN4@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 247				; 000000f7H
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv73[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv73[rsp]
	lea	eax, DWORD PTR [rcx+rax+108]
	jmp	$LN1@stbtt__cff
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1209
	cmp	DWORD PTR b0$[rsp], 251			; 000000fbH
	jl	SHORT $LN6@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 254			; 000000feH
	jg	SHORT $LN6@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 251				; 000000fbH
	neg	eax
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv83[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv83[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 108				; 0000006cH
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN7@stbtt__cff
$LN6@stbtt__cff:
; Line 1210
	cmp	DWORD PTR b0$[rsp], 28
	jne	SHORT $LN8@stbtt__cff
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN9@stbtt__cff
$LN8@stbtt__cff:
; Line 1211
	cmp	DWORD PTR b0$[rsp], 29
	jne	SHORT $LN10@stbtt__cff
	mov	edx, 4
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
$LN10@stbtt__cff:
$LN9@stbtt__cff:
$LN7@stbtt__cff:
$LN5@stbtt__cff:
$LN3@stbtt__cff:
; Line 1212
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbtt__cff
	mov	r8d, 1212				; 000004bcH
	lea	rdx, OFFSET FLAT:$SG82572
	lea	rcx, OFFSET FLAT:$SG82573
	call	_wassert
	xor	eax, eax
$LN12@stbtt__cff:
; Line 1213
	xor	eax, eax
$LN1@stbtt__cff:
; Line 1214
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ENDP		; stbtt__cff_int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z PROC	; stbtt__cff_get_index
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1191
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1193
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$[rsp], eax
; Line 1194
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1195
	cmp	DWORD PTR count$[rsp], 0
	je	SHORT $LN2@stbtt__cff
; Line 1196
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1197
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
	mov	r8d, 1197				; 000004adH
	lea	rdx, OFFSET FLAT:$SG82555
	lea	rcx, OFFSET FLAT:$SG82556
	call	_wassert
	xor	eax, eax
$LN5@stbtt__cff:
; Line 1198
	mov	eax, DWORD PTR offsize$[rsp]
	imul	eax, DWORD PTR count$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1199
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1201
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1202
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ENDP	; stbtt__cff_get_index
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
b$ = 88
o$ = 96
s$ = 104
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z PROC	; stbtt__buf_range
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1182
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 1183
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1184
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR s$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR o$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	cmp	DWORD PTR s$[rsp], eax
	jle	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1185
	movsxd	rax, DWORD PTR o$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR __$ReturnAddress$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1186
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 1187
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__buf:
; Line 1188
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ENDP	; stbtt__buf_range
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 48
p$ = 56
size$ = 64
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z PROC		; stbtt__new_buf
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1169
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1171
	cmp	QWORD PTR size$[rsp], 1073741824	; 40000000H
	jb	SHORT $LN3@stbtt__new
	mov	r8d, 1171				; 00000493H
	lea	rdx, OFFSET FLAT:$SG82534
	lea	rcx, OFFSET FLAT:$SG82535
	call	_wassert
	xor	eax, eax
$LN3@stbtt__new:
; Line 1172
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1173
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 1174
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 1175
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1176
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ENDP		; stbtt__new_buf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
v$ = 36
tv72 = 40
b$ = 64
n$ = 72
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1159
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1160
	mov	DWORD PTR v$[rsp], 0
; Line 1162
	cmp	DWORD PTR n$[rsp], 1
	jl	SHORT $LN6@stbtt__buf
	cmp	DWORD PTR n$[rsp], 4
	jle	SHORT $LN7@stbtt__buf
$LN6@stbtt__buf:
	mov	r8d, 1162				; 0000048aH
	lea	rdx, OFFSET FLAT:$SG82523
	lea	rcx, OFFSET FLAT:$SG82524
	call	_wassert
	xor	eax, eax
$LN7@stbtt__buf:
; Line 1163
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__buf
$LN2@stbtt__buf:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__buf:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__buf
; Line 1164
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv72[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv72[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
; Line 1165
	mov	eax, DWORD PTR v$[rsp]
; Line 1166
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
o$ = 56
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_skip
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1154
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1155
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR o$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1156
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
b$ = 64
o$ = 72
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_seek
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1148
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1149
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jge	SHORT $LN4@stbtt__buf
$LN3@stbtt__buf:
	mov	r8d, 1149				; 0000047dH
	lea	rdx, OFFSET FLAT:$SG82506
	lea	rcx, OFFSET FLAT:$SG82507
	call	_wassert
	xor	eax, eax
$LN4@stbtt__buf:
; Line 1150
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN5@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN5@stbtt__buf
	mov	eax, DWORD PTR o$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN6@stbtt__buf
$LN5@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv76[rsp], eax
$LN6@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 1151
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_seek
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 8
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_peek8
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1141
	mov	QWORD PTR [rsp+8], rcx
; Line 1142
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1143
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1144
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@stbtt__buf:
; Line 1145
	ret	0
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_peek8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 0
b$ = 32
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_get8
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1134
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1135
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1136
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1137
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv75[rsp], al
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rcx+8], eax
	movzx	eax, BYTE PTR tv75[rsp]
$LN1@stbtt__buf:
; Line 1138
	add	rsp, 24
	ret	0
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_get8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
nm$ = 36
i$ = 40
offset$ = 44
count$ = 48
stringOffset$ = 52
fc$ = 56
tv155 = 64
font$ = 96
length$ = 104
platformID$ = 112
encodingID$ = 120
languageID$ = 128
nameID$ = 136
stbtt_GetFontNameString PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4824
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4826
	mov	rax, QWORD PTR font$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR fc$[rsp], rax
; Line 4827
	mov	rax, QWORD PTR font$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR offset$[rsp], eax
; Line 4828
	lea	r8, OFFSET FLAT:$SG85380
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4829
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt_GetF
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN5@stbtt_GetF:
; Line 4831
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4832
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4833
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetF
$LN2@stbtt_GetF:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_GetF:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_GetF
; Line 4834
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4836
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR platformID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR encodingID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR languageID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR nameID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
; Line 4837
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR length$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4838
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv155[rsp], rax
	mov	ecx, DWORD PTR loc$1[rsp]
	mov	rdx, QWORD PTR fc$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+10]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR tv155[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 4840
	jmp	$LN2@stbtt_GetF
$LN3@stbtt_GetF:
; Line 4841
	xor	eax, eax
$LN1@stbtt_GetF:
; Line 4842
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetFontNameString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s1$ = 48
len1$ = 56
s2$ = 64
len2$ = 72
stbtt_CompareUTF8toUTF16_bigendian PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4964
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4965
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ; stbtt_CompareUTF8toUTF16_bigendian_internal
; Line 4966
	add	rsp, 40					; 00000028H
	ret	0
stbtt_CompareUTF8toUTF16_bigendian ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fontdata$ = 48
name$ = 56
flags$ = 64
stbtt_FindMatchingFont PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4959
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4960
	mov	r8d, DWORD PTR flags$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z ; stbtt_FindMatchingFont_internal
; Line 4961
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FindMatchingFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale$ = 104
codepoint$ = 112
padding$ = 120
onedge_value$ = 128
pixel_dist_scale$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4762
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4763
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	movss	xmm0, DWORD PTR pixel_dist_scale$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	ecx, BYTE PTR onedge_value$[rsp]
	mov	BYTE PTR [rsp+32], cl
	mov	r9d, DWORD PTR padding$[rsp]
	mov	r8d, eax
	movss	xmm1, DWORD PTR scale$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSDF
; Line 4764
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 80
min_dist$2 = 84
t$3 = 88
x0$4 = 92
y0$5 = 96
it$6 = 100
sx$7 = 104
sy$8 = 108
x1$9 = 112
y1$10 = 116
scale_y$ = 120
verts$11 = 128
dist2$12 = 136
scale_x$ = 140
num$13 = 144
ax$14 = 148
ay$15 = 152
x2$16 = 156
y2$17 = 160
px$18 = 164
py$19 = 168
ix0$ = 172
iy0$ = 176
b$20 = 180
j$21 = 184
iy1$ = 188
ix1$ = 192
num_verts$22 = 196
val$23 = 200
y$24 = 204
x$25 = 208
bx$26 = 212
by$27 = 216
a$28 = 220
bx$29 = 224
by$30 = 228
mx$31 = 232
my$32 = 236
a_inv$33 = 240
precompute$34 = 248
dx$35 = 256
dy$36 = 260
w$ = 264
x0$37 = 268
y1$38 = 272
y0$39 = 276
dist$40 = 280
tv193 = 284
dist2$41 = 288
x1$42 = 292
y1$43 = 296
t$44 = 300
dist$45 = 304
tv440 = 308
tv443 = 312
tv444 = 316
tv446 = 320
tv481 = 324
tv482 = 328
tv484 = 332
tv487 = 336
tv488 = 340
tv490 = 344
tv493 = 348
tv494 = 352
c$46 = 356
discriminant$47 = 360
root$48 = 364
h$ = 368
x1$49 = 372
x0$50 = 376
x2$51 = 380
y1$52 = 384
y0$53 = 388
y2$54 = 392
len2$55 = 396
y_gspace$56 = 400
x_gspace$57 = 404
px$58 = 408
py$59 = 412
box_x0$60 = 416
box_x1$61 = 420
box_y0$62 = 424
box_y1$63 = 428
d$64 = 432
c$65 = 436
b$66 = 440
winding$67 = 444
tv141 = 448
x1$68 = 452
data$ = 456
res$69 = 464
__$ArrayPad$ = 480
info$ = 512
scale$ = 520
glyph$ = 528
padding$ = 536
onedge_value$ = 544
pixel_dist_scale$ = 552
width$ = 560
height$ = 568
xoff$ = 576
yoff$ = 584
stbtt_GetGlyphSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4577
$LN83:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 504				; 000001f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4578
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale_x$[rsp], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale_y$[rsp], xmm0
; Line 4583
	movss	xmm0, DWORD PTR scale$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@stbtt_GetG
	jne	SHORT $LN14@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN14@stbtt_GetG:
; Line 4585
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale$[rsp]
	movss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4588
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR ix0$[rsp], eax
	je	SHORT $LN16@stbtt_GetG
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR iy0$[rsp], eax
	jne	SHORT $LN15@stbtt_GetG
$LN16@stbtt_GetG:
; Line 4589
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN15@stbtt_GetG:
; Line 4591
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix0$[rsp], eax
; Line 4592
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy0$[rsp], eax
; Line 4593
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix1$[rsp], eax
; Line 4594
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy1$[rsp], eax
; Line 4596
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR w$[rsp], eax
; Line 4597
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR h$[rsp], eax
; Line 4599
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN17@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN17@stbtt_GetG:
; Line 4600
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN18@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN18@stbtt_GetG:
; Line 4601
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN19@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN19@stbtt_GetG:
; Line 4602
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN20@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN20@stbtt_GetG:
; Line 4605
	movss	xmm0, DWORD PTR scale_y$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR scale_y$[rsp], xmm0
; Line 4611
	lea	r8, QWORD PTR verts$11[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$22[rsp], eax
; Line 4612
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR data$[rsp], rax
; Line 4613
	movsxd	rax, DWORD PTR num_verts$22[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR precompute$34[rsp], rax
; Line 4615
	mov	DWORD PTR i$1[rsp], 0
	mov	eax, DWORD PTR num_verts$22[rsp]
	dec	eax
	mov	DWORD PTR j$21[rsp], eax
	jmp	SHORT $LN4@stbtt_GetG
$LN2@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	mov	DWORD PTR j$21[rsp], eax
$LN4@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@stbtt_GetG
; Line 4616
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN21@stbtt_GetG
; Line 4617
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$37[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$39[rsp], xmm0
; Line 4618
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$49[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$38[rsp], xmm0
; Line 4619
	movss	xmm0, DWORD PTR x1$49[rsp]
	subss	xmm0, DWORD PTR x0$37[rsp]
	movss	xmm1, DWORD PTR x1$49[rsp]
	subss	xmm1, DWORD PTR x0$37[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$38[rsp]
	subss	xmm1, DWORD PTR y0$39[rsp]
	movss	xmm2, DWORD PTR y1$38[rsp]
	subss	xmm2, DWORD PTR y0$39[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR dist$40[rsp], xmm0
; Line 4620
	movss	xmm0, DWORD PTR dist$40[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@stbtt_GetG
	jne	SHORT $LN53@stbtt_GetG
	xorps	xmm0, xmm0
	movss	DWORD PTR tv193[rsp], xmm0
	jmp	SHORT $LN54@stbtt_GetG
$LN53@stbtt_GetG:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dist$40[rsp]
	movss	DWORD PTR tv193[rsp], xmm0
$LN54@stbtt_GetG:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR tv193[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN22@stbtt_GetG
$LN21@stbtt_GetG:
; Line 4621
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN23@stbtt_GetG
; Line 4622
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x2$51[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y2$54[rsp], xmm0
; Line 4623
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$68[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$52[rsp], xmm0
; Line 4624
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$50[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$53[rsp], xmm0
; Line 4625
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$68[rsp]
	movss	xmm1, DWORD PTR x0$50[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$51[rsp]
	movss	DWORD PTR bx$26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$52[rsp]
	movss	xmm1, DWORD PTR y0$53[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$54[rsp]
	movss	DWORD PTR by$27[rsp], xmm0
; Line 4626
	movss	xmm0, DWORD PTR bx$26[rsp]
	mulss	xmm0, DWORD PTR bx$26[rsp]
	movss	xmm1, DWORD PTR by$27[rsp]
	mulss	xmm1, DWORD PTR by$27[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR len2$55[rsp], xmm0
; Line 4627
	movss	xmm0, DWORD PTR len2$55[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN82@stbtt_GetG
	je	SHORT $LN25@stbtt_GetG
$LN82@stbtt_GetG:
; Line 4628
	movss	xmm0, DWORD PTR bx$26[rsp]
	mulss	xmm0, DWORD PTR bx$26[rsp]
	movss	xmm1, DWORD PTR by$27[rsp]
	mulss	xmm1, DWORD PTR by$27[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN26@stbtt_GetG
$LN25@stbtt_GetG:
; Line 4630
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN26@stbtt_GetG:
; Line 4631
	jmp	SHORT $LN24@stbtt_GetG
$LN23@stbtt_GetG:
; Line 4632
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN24@stbtt_GetG:
$LN22@stbtt_GetG:
; Line 4633
	jmp	$LN2@stbtt_GetG
$LN3@stbtt_GetG:
; Line 4635
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR y$24[rsp], eax
	jmp	SHORT $LN7@stbtt_GetG
$LN5@stbtt_GetG:
	mov	eax, DWORD PTR y$24[rsp]
	inc	eax
	mov	DWORD PTR y$24[rsp], eax
$LN7@stbtt_GetG:
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR y$24[rsp], eax
	jge	$LN6@stbtt_GetG
; Line 4636
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR x$25[rsp], eax
	jmp	SHORT $LN10@stbtt_GetG
$LN8@stbtt_GetG:
	mov	eax, DWORD PTR x$25[rsp]
	inc	eax
	mov	DWORD PTR x$25[rsp], eax
$LN10@stbtt_GetG:
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR x$25[rsp], eax
	jge	$LN9@stbtt_GetG
; Line 4638
	movss	xmm0, DWORD PTR __real@497423f0
	movss	DWORD PTR min_dist$2[rsp], xmm0
; Line 4639
	cvtsi2ss xmm0, DWORD PTR x$25[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR sx$7[rsp], xmm0
; Line 4640
	cvtsi2ss xmm0, DWORD PTR y$24[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR sy$8[rsp], xmm0
; Line 4641
	movss	xmm0, DWORD PTR sx$7[rsp]
	divss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x_gspace$57[rsp], xmm0
; Line 4642
	movss	xmm0, DWORD PTR sy$8[rsp]
	divss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y_gspace$56[rsp], xmm0
; Line 4644
	mov	r9, QWORD PTR verts$11[rsp]
	mov	r8d, DWORD PTR num_verts$22[rsp]
	movss	xmm1, DWORD PTR y_gspace$56[rsp]
	movss	xmm0, DWORD PTR x_gspace$57[rsp]
	call	?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z ; stbtt__compute_crossings_x
	mov	DWORD PTR winding$67[rsp], eax
; Line 4646
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbtt_GetG
$LN11@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN12@stbtt_GetG
; Line 4647
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$4[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$5[rsp], xmm0
; Line 4649
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN27@stbtt_GetG
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN81@stbtt_GetG
	je	$LN27@stbtt_GetG
$LN81@stbtt_GetG:
; Line 4650
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$42[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$43[rsp], xmm0
; Line 4652
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR y0$5[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$41[rsp], xmm0
; Line 4653
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$41[rsp]
	jbe	SHORT $LN29@stbtt_GetG
; Line 4654
	cvtss2sd xmm0, DWORD PTR dist2$41[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN29@stbtt_GetG:
; Line 4659
	movss	xmm0, DWORD PTR x1$42[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$43[rsp]
	subss	xmm1, DWORD PTR y0$5[rsp]
	movss	xmm2, DWORD PTR x0$4[rsp]
	subss	xmm2, DWORD PTR sx$7[rsp]
	mulss	xmm1, xmm2
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	fabs
	cvtsd2ss xmm0, xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR dist$45[rsp], xmm0
; Line 4660
	cmp	DWORD PTR i$1[rsp], 0
	jne	SHORT $LN55@stbtt_GetG
	mov	r8d, 4660				; 00001234H
	lea	rdx, OFFSET FLAT:$SG85278
	lea	rcx, OFFSET FLAT:$SG85279
	call	_wassert
	xor	eax, eax
$LN55@stbtt_GetG:
; Line 4661
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist$45[rsp]
	jbe	$LN30@stbtt_GetG
; Line 4665
	movss	xmm0, DWORD PTR x1$42[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR dx$35[rsp], xmm0
	movss	xmm0, DWORD PTR y1$43[rsp]
	subss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR dy$36[rsp], xmm0
; Line 4666
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	DWORD PTR px$58[rsp], xmm0
	movss	xmm0, DWORD PTR y0$5[rsp]
	subss	xmm0, DWORD PTR sy$8[rsp]
	movss	DWORD PTR py$59[rsp], xmm0
; Line 4669
	movss	xmm0, DWORD PTR px$58[rsp]
	mulss	xmm0, DWORD PTR dx$35[rsp]
	movss	xmm1, DWORD PTR py$59[rsp]
	mulss	xmm1, DWORD PTR dy$36[rsp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR dx$35[rsp]
	mulss	xmm1, DWORD PTR dx$35[rsp]
	movss	xmm2, DWORD PTR dy$36[rsp]
	mulss	xmm2, DWORD PTR dy$36[rsp]
	addss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR t$44[rsp], xmm0
; Line 4670
	movss	xmm0, DWORD PTR t$44[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN31@stbtt_GetG
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR t$44[rsp]
	jb	SHORT $LN31@stbtt_GetG
; Line 4671
	movss	xmm0, DWORD PTR dist$45[rsp]
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN31@stbtt_GetG:
$LN30@stbtt_GetG:
; Line 4672
	jmp	$LN28@stbtt_GetG
$LN27@stbtt_GetG:
; Line 4673
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN32@stbtt_GetG
; Line 4674
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x2$16[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y2$17[rsp], xmm0
; Line 4675
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$9[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$10[rsp], xmm0
; Line 4676
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN56@stbtt_GetG
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv440[rsp], xmm0
	jmp	SHORT $LN57@stbtt_GetG
$LN56@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv440[rsp], xmm0
$LN57@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	comiss	xmm0, DWORD PTR tv440[rsp]
	jbe	SHORT $LN60@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN58@stbtt_GetG
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv443[rsp], xmm0
	jmp	SHORT $LN59@stbtt_GetG
$LN58@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv443[rsp], xmm0
$LN59@stbtt_GetG:
	movss	xmm0, DWORD PTR tv443[rsp]
	movss	DWORD PTR tv444[rsp], xmm0
	jmp	SHORT $LN61@stbtt_GetG
$LN60@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR tv444[rsp], xmm0
$LN61@stbtt_GetG:
	movss	xmm0, DWORD PTR tv444[rsp]
	movss	DWORD PTR box_x0$60[rsp], xmm0
; Line 4677
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN62@stbtt_GetG
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv446[rsp], xmm0
	jmp	SHORT $LN63@stbtt_GetG
$LN62@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv446[rsp], xmm0
$LN63@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	comiss	xmm0, DWORD PTR tv446[rsp]
	jbe	SHORT $LN66@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN64@stbtt_GetG
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv481[rsp], xmm0
	jmp	SHORT $LN65@stbtt_GetG
$LN64@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv481[rsp], xmm0
$LN65@stbtt_GetG:
	movss	xmm0, DWORD PTR tv481[rsp]
	movss	DWORD PTR tv482[rsp], xmm0
	jmp	SHORT $LN67@stbtt_GetG
$LN66@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR tv482[rsp], xmm0
$LN67@stbtt_GetG:
	movss	xmm0, DWORD PTR tv482[rsp]
	movss	DWORD PTR box_y0$62[rsp], xmm0
; Line 4678
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN68@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv484[rsp], xmm0
	jmp	SHORT $LN69@stbtt_GetG
$LN68@stbtt_GetG:
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv484[rsp], xmm0
$LN69@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	comiss	xmm0, DWORD PTR tv484[rsp]
	jbe	SHORT $LN72@stbtt_GetG
	movss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR tv488[rsp], xmm0
	jmp	SHORT $LN73@stbtt_GetG
$LN72@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN70@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv487[rsp], xmm0
	jmp	SHORT $LN71@stbtt_GetG
$LN70@stbtt_GetG:
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv487[rsp], xmm0
$LN71@stbtt_GetG:
	movss	xmm0, DWORD PTR tv487[rsp]
	movss	DWORD PTR tv488[rsp], xmm0
$LN73@stbtt_GetG:
	movss	xmm0, DWORD PTR tv488[rsp]
	movss	DWORD PTR box_x1$61[rsp], xmm0
; Line 4679
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN74@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv490[rsp], xmm0
	jmp	SHORT $LN75@stbtt_GetG
$LN74@stbtt_GetG:
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv490[rsp], xmm0
$LN75@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	comiss	xmm0, DWORD PTR tv490[rsp]
	jbe	SHORT $LN78@stbtt_GetG
	movss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR tv494[rsp], xmm0
	jmp	SHORT $LN79@stbtt_GetG
$LN78@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN76@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv493[rsp], xmm0
	jmp	SHORT $LN77@stbtt_GetG
$LN76@stbtt_GetG:
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv493[rsp], xmm0
$LN77@stbtt_GetG:
	movss	xmm0, DWORD PTR tv493[rsp]
	movss	DWORD PTR tv494[rsp], xmm0
$LN79@stbtt_GetG:
	movss	xmm0, DWORD PTR tv494[rsp]
	movss	DWORD PTR box_y1$63[rsp], xmm0
; Line 4681
	movss	xmm0, DWORD PTR box_x0$60[rsp]
	subss	xmm0, DWORD PTR min_dist$2[rsp]
	movss	xmm1, DWORD PTR sx$7[rsp]
	comiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_x1$61[rsp]
	addss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR sx$7[rsp]
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_y0$62[rsp]
	subss	xmm0, DWORD PTR min_dist$2[rsp]
	movss	xmm1, DWORD PTR sy$8[rsp]
	comiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_y1$63[rsp]
	addss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR sy$8[rsp]
	jbe	$LN33@stbtt_GetG
; Line 4682
	mov	DWORD PTR num$13[rsp], 0
; Line 4683
	movss	xmm0, DWORD PTR x1$9[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR ax$14[rsp], xmm0
	movss	xmm0, DWORD PTR y1$10[rsp]
	subss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR ay$15[rsp], xmm0
; Line 4684
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$9[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR bx$29[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$10[rsp]
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR by$30[rsp], xmm0
; Line 4685
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	DWORD PTR mx$31[rsp], xmm0
	movss	xmm0, DWORD PTR y0$5[rsp]
	subss	xmm0, DWORD PTR sy$8[rsp]
	movss	DWORD PTR my$32[rsp], xmm0
; Line 4686
	xorps	xmm0, xmm0
	movss	DWORD PTR res$69[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR res$69[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR res$69[rsp+8], xmm0
; Line 4688
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR a_inv$33[rsp], xmm0
; Line 4689
	cvtss2sd xmm0, DWORD PTR a_inv$33[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	$LN34@stbtt_GetG
	jne	$LN34@stbtt_GetG
; Line 4690
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR bx$29[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR by$30[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR a$28[rsp], xmm0
; Line 4691
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR mx$31[rsp]
	mulss	xmm1, DWORD PTR bx$29[rsp]
	movss	xmm2, DWORD PTR my$32[rsp]
	mulss	xmm2, DWORD PTR by$30[rsp]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR b$20[rsp], xmm0
; Line 4692
	movss	xmm0, DWORD PTR mx$31[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR my$32[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR c$46[rsp], xmm0
; Line 4693
	cvtss2sd xmm0, DWORD PTR a$28[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN36@stbtt_GetG
	jne	SHORT $LN36@stbtt_GetG
; Line 4694
	cvtss2sd xmm0, DWORD PTR b$20[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN80@stbtt_GetG
	je	SHORT $LN38@stbtt_GetG
$LN80@stbtt_GetG:
; Line 4695
	movss	xmm0, DWORD PTR c$46[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR b$20[rsp]
	movsxd	rax, DWORD PTR num$13[rsp]
	movss	DWORD PTR res$69[rsp+rax*4], xmm0
	mov	eax, DWORD PTR num$13[rsp]
	inc	eax
	mov	DWORD PTR num$13[rsp], eax
$LN38@stbtt_GetG:
; Line 4697
	jmp	$LN37@stbtt_GetG
$LN36@stbtt_GetG:
; Line 4698
	movss	xmm0, DWORD PTR b$20[rsp]
	mulss	xmm0, DWORD PTR b$20[rsp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR a$28[rsp]
	mulss	xmm1, DWORD PTR c$46[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR discriminant$47[rsp], xmm0
; Line 4699
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR discriminant$47[rsp]
	jbe	SHORT $LN39@stbtt_GetG
; Line 4700
	mov	DWORD PTR num$13[rsp], 0
	jmp	$LN40@stbtt_GetG
$LN39@stbtt_GetG:
; Line 4702
	cvtss2sd xmm0, DWORD PTR discriminant$47[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR root$48[rsp], xmm0
; Line 4703
	movss	xmm0, DWORD PTR b$20[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR root$48[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR a$28[rsp]
	divss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR res$69[rsp+rax], xmm0
; Line 4704
	movss	xmm0, DWORD PTR b$20[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR root$48[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR a$28[rsp]
	divss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR res$69[rsp+rax], xmm0
; Line 4705
	mov	DWORD PTR num$13[rsp], 2
$LN40@stbtt_GetG:
$LN37@stbtt_GetG:
; Line 4708
	jmp	$LN35@stbtt_GetG
$LN34@stbtt_GetG:
; Line 4709
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR bx$29[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR by$30[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR b$66[rsp], xmm0
; Line 4710
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR mx$31[rsp]
	mulss	xmm1, DWORD PTR bx$29[rsp]
	movss	xmm2, DWORD PTR my$32[rsp]
	mulss	xmm2, DWORD PTR by$30[rsp]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR c$65[rsp], xmm0
; Line 4711
	movss	xmm0, DWORD PTR mx$31[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR my$32[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR d$64[rsp], xmm0
; Line 4712
	lea	r9, QWORD PTR res$69[rsp]
	movss	xmm2, DWORD PTR d$64[rsp]
	movss	xmm1, DWORD PTR c$65[rsp]
	movss	xmm0, DWORD PTR b$66[rsp]
	call	?stbtt__solve_cubic@@YAHMMMPEAM@Z	; stbtt__solve_cubic
	mov	DWORD PTR num$13[rsp], eax
$LN35@stbtt_GetG:
; Line 4714
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR y0$5[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4715
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN41@stbtt_GetG
; Line 4716
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN41@stbtt_GetG:
; Line 4718
	cmp	DWORD PTR num$13[rsp], 1
	jl	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN42@stbtt_GetG
; Line 4719
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4720
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4721
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4722
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4723
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN43@stbtt_GetG
; Line 4724
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN43@stbtt_GetG:
$LN42@stbtt_GetG:
; Line 4726
	cmp	DWORD PTR num$13[rsp], 2
	jl	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN44@stbtt_GetG
; Line 4727
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4728
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4729
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4730
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4731
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN45@stbtt_GetG
; Line 4732
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN45@stbtt_GetG:
$LN44@stbtt_GetG:
; Line 4734
	cmp	DWORD PTR num$13[rsp], 3
	jl	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN46@stbtt_GetG
; Line 4735
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4736
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4737
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4738
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4739
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN47@stbtt_GetG
; Line 4740
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN47@stbtt_GetG:
$LN46@stbtt_GetG:
$LN33@stbtt_GetG:
$LN32@stbtt_GetG:
$LN28@stbtt_GetG:
; Line 4744
	jmp	$LN11@stbtt_GetG
$LN12@stbtt_GetG:
; Line 4745
	cmp	DWORD PTR winding$67[rsp], 0
	jne	SHORT $LN48@stbtt_GetG
; Line 4746
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN48@stbtt_GetG:
; Line 4747
	movzx	eax, BYTE PTR onedge_value$[rsp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR pixel_dist_scale$[rsp]
	mulss	xmm1, DWORD PTR min_dist$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR val$23[rsp], xmm0
; Line 4748
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR val$23[rsp]
	jbe	SHORT $LN49@stbtt_GetG
; Line 4749
	xorps	xmm0, xmm0
	movss	DWORD PTR val$23[rsp], xmm0
	jmp	SHORT $LN50@stbtt_GetG
$LN49@stbtt_GetG:
; Line 4750
	movss	xmm0, DWORD PTR val$23[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN51@stbtt_GetG
; Line 4751
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR val$23[rsp], xmm0
$LN51@stbtt_GetG:
$LN50@stbtt_GetG:
; Line 4752
	cvttss2si eax, DWORD PTR val$23[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	edx, DWORD PTR y$24[rsp]
	sub	edx, ecx
	mov	ecx, edx
	imul	ecx, DWORD PTR w$[rsp]
	mov	edx, DWORD PTR ix0$[rsp]
	mov	r8d, DWORD PTR x$25[rsp]
	sub	r8d, edx
	mov	edx, r8d
	add	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4753
	jmp	$LN8@stbtt_GetG
$LN9@stbtt_GetG:
; Line 4754
	jmp	$LN5@stbtt_GetG
$LN6@stbtt_GetG:
; Line 4755
	mov	rcx, QWORD PTR precompute$34[rsp]
	call	free
; Line 4756
	mov	rcx, QWORD PTR verts$11[rsp]
	call	free
; Line 4758
	mov	rax, QWORD PTR data$[rsp]
$LN1@stbtt_GetG:
; Line 4759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	ret	0
stbtt_GetGlyphSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitmap$ = 48
userdata$ = 56
stbtt_FreeSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4767
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4768
	mov	rcx, QWORD PTR bitmap$[rsp]
	call	free
; Line 4769
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 96
winding_count$ = 100
scale$ = 104
winding_lengths$ = 112
windings$ = 120
result$ = 144
flatness_in_pixels$ = 152
vertices$ = 160
num_verts$ = 168
scale_x$ = 176
scale_y$ = 184
shift_x$ = 192
shift_y$ = 200
x_off$ = 208
y_off$ = 216
invert$ = 224
userdata$ = 232
stbtt_Rasterize PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3696
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 3697
	movss	xmm0, DWORD PTR scale_x$[rsp]
	comiss	xmm0, DWORD PTR scale_y$[rsp]
	jbe	SHORT $LN4@stbtt_Rast
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN5@stbtt_Rast
$LN4@stbtt_Rast:
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN5@stbtt_Rast:
	movss	xmm0, DWORD PTR tv65[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
; Line 3698
	mov	DWORD PTR winding_count$[rsp], 0
; Line 3699
	mov	QWORD PTR winding_lengths$[rsp], 0
; Line 3700
	movss	xmm0, DWORD PTR flatness_in_pixels$[rsp]
	divss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR winding_count$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR winding_lengths$[rsp]
	movaps	xmm2, xmm0
	mov	edx, DWORD PTR num_verts$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ; stbtt_FlattenCurves
	mov	QWORD PTR windings$[rsp], rax
; Line 3701
	cmp	QWORD PTR windings$[rsp], 0
	je	$LN2@stbtt_Rast
; Line 3702
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR invert$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR y_off$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR x_off$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR winding_count$[rsp]
	mov	r8, QWORD PTR winding_lengths$[rsp]
	mov	rdx, QWORD PTR windings$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ; stbtt__rasterize
; Line 3703
	mov	rcx, QWORD PTR winding_lengths$[rsp]
	call	free
; Line 3704
	mov	rcx, QWORD PTR windings$[rsp]
	call	free
$LN2@stbtt_Rast:
; Line 3706
	add	rsp, 136				; 00000088H
	ret	0
stbtt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$ = 48
y0$ = 52
y1$ = 56
x1$ = 60
font$ = 80
glyph$ = 88
scale_x$ = 96
scale_y$ = 104
shift_x$ = 112
shift_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBoxSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2722
$LN13:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2723
	mov	DWORD PTR x0$[rsp], 0
	mov	DWORD PTR y0$[rsp], 0
; Line 2724
	lea	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR y0$[rsp]
	lea	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	jne	SHORT $LN2@stbtt_GetG
; Line 2726
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbtt_GetG:
; Line 2727
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], 0
$LN5@stbtt_GetG:
; Line 2728
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rax], 0
$LN6@stbtt_GetG:
; Line 2729
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rax], 0
$LN7@stbtt_GetG:
; Line 2730
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2732
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x0$[rsp]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
; Line 2733
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN9@stbtt_GetG
	mov	eax, DWORD PTR y1$[rsp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN9@stbtt_GetG:
; Line 2734
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN10@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x1$[rsp]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN10@stbtt_GetG:
; Line 2735
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN11@stbtt_GetG
	mov	eax, DWORD PTR y0$[rsp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN11@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2737
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
glyph$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2740
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2741
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2742
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
prefilter_x$ = 168
prefilter_y$ = 176
sub_x$ = 184
sub_y$ = 192
glyph$ = 200
stbtt_MakeGlyphBitmapSubpixelPrefilter PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4185
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4186
	mov	eax, DWORD PTR prefilter_y$[rsp]
	dec	eax
	mov	ecx, DWORD PTR out_h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	dec	ecx
	mov	edx, DWORD PTR out_w$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], edx
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	edx, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4197
	cmp	DWORD PTR prefilter_x$[rsp], 1
	jle	SHORT $LN2@stbtt_Make
; Line 4198
	mov	eax, DWORD PTR prefilter_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN2@stbtt_Make:
; Line 4200
	cmp	DWORD PTR prefilter_y$[rsp], 1
	jle	SHORT $LN3@stbtt_Make
; Line 4201
	mov	eax, DWORD PTR prefilter_y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN3@stbtt_Make:
; Line 4203
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	mov	rax, QWORD PTR sub_x$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4204
	mov	ecx, DWORD PTR prefilter_y$[rsp]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	mov	rax, QWORD PTR sub_y$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4205
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
num_verts$ = 104
vertices$ = 112
gbm$ = 120
info$ = 160
output$ = 168
out_w$ = 176
out_h$ = 184
out_stride$ = 192
scale_x$ = 200
scale_y$ = 208
shift_x$ = 216
shift_y$ = 224
glyph$ = 232
stbtt_MakeGlyphBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3759
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 3762
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3765
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3766
	mov	rax, QWORD PTR output$[rsp]
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3767
	mov	eax, DWORD PTR out_w$[rsp]
	mov	DWORD PTR gbm$[rsp], eax
; Line 3768
	mov	eax, DWORD PTR out_h$[rsp]
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3769
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3771
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN2@stbtt_Make
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN2@stbtt_Make
; Line 3772
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN2@stbtt_Make:
; Line 3774
	mov	rcx, QWORD PTR vertices$[rsp]
	call	free
; Line 3775
	add	rsp, 152				; 00000098H
	ret	0
stbtt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
glyph$ = 152
stbtt_MakeGlyphBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3778
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3779
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3780
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
ix1$ = 104
iy1$ = 108
num_verts$ = 112
vertices$ = 120
gbm$ = 128
info$ = 176
scale_x$ = 184
scale_y$ = 192
shift_x$ = 200
shift_y$ = 208
glyph$ = 216
width$ = 224
height$ = 232
xoff$ = 240
yoff$ = 248
stbtt_GetGlyphBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3714
$LN12:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 3718
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3720
	movss	xmm0, DWORD PTR scale_x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@stbtt_GetG
	jne	SHORT $LN2@stbtt_GetG
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR scale_x$[rsp], xmm0
$LN2@stbtt_GetG:
; Line 3721
	movss	xmm0, DWORD PTR scale_y$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN3@stbtt_GetG
	jne	SHORT $LN3@stbtt_GetG
; Line 3722
	movss	xmm0, DWORD PTR scale_x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@stbtt_GetG
	jne	SHORT $LN4@stbtt_GetG
; Line 3723
	mov	rcx, QWORD PTR vertices$[rsp]
	call	free
; Line 3724
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 3726
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR scale_y$[rsp], xmm0
$LN3@stbtt_GetG:
; Line 3729
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3732
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp], eax
; Line 3733
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3734
	mov	QWORD PTR gbm$[rsp+16], 0
; Line 3736
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt_GetG:
; Line 3737
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp+4]
	mov	DWORD PTR [rax], ecx
$LN6@stbtt_GetG:
; Line 3738
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbtt_GetG:
; Line 3739
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN8@stbtt_GetG:
; Line 3741
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN9@stbtt_GetG
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN9@stbtt_GetG
; Line 3742
	mov	eax, DWORD PTR gbm$[rsp]
	imul	eax, DWORD PTR gbm$[rsp+4]
	cdqe
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3743
	cmp	QWORD PTR gbm$[rsp+16], 0
	je	$LN10@stbtt_GetG
; Line 3744
	mov	eax, DWORD PTR gbm$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3746
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN10@stbtt_GetG:
$LN9@stbtt_GetG:
; Line 3749
	mov	rcx, QWORD PTR vertices$[rsp]
	call	free
; Line 3750
	mov	rax, QWORD PTR gbm$[rsp+16]
$LN1@stbtt_GetG:
; Line 3751
	add	rsp, 168				; 000000a8H
	ret	0
stbtt_GetGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
glyph$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetGlyphBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3754
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3755
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3756
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
shift_x$ = 128
shift_y$ = 136
ix0$ = 144
iy0$ = 152
ix1$ = 160
iy1$ = 168
stbtt_GetCodepointBitmapBoxSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2745
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2746
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2747
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetCodepointBitmapBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2750
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2751
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetCodepointBitmapBoxSubpixel
; Line 2752
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 128
output$ = 136
out_w$ = 144
out_h$ = 152
out_stride$ = 160
scale_x$ = 168
scale_y$ = 176
shift_x$ = 184
shift_y$ = 192
oversample_x$ = 200
oversample_y$ = 208
sub_x$ = 216
sub_y$ = 224
codepoint$ = 232
stbtt_MakeCodepointBitmapSubpixelPrefilter PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 3789
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+104], eax
	mov	rax, QWORD PTR sub_y$[rsp]
	mov	QWORD PTR [rsp+96], rax
	mov	rax, QWORD PTR sub_x$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR oversample_y$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR oversample_x$[rsp]
	mov	DWORD PTR [rsp+72], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixelPrefilter
; Line 3790
	add	rsp, 120				; 00000078H
	ret	0
stbtt_MakeCodepointBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
codepoint$ = 168
stbtt_MakeCodepointBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3793
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3794
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+72], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3795
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
codepoint$ = 152
stbtt_MakeCodepointBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3803
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3804
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+72], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeCodepointBitmapSubpixel
; Line 3805
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
shift_x$ = 120
shift_y$ = 128
codepoint$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3783
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3784
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR shift_x$[rsp]
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3785
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
codepoint$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetCodepointBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3798
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3799
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+40], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetCodepointBitmapSubpixel
; Line 3800
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitmap$ = 48
userdata$ = 56
stbtt_FreeBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3709
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3710
	mov	rcx, QWORD PTR bitmap$[rsp]
	call	free
; Line 3711
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
svg_doc$ = 32
data$ = 40
tv73 = 48
info$ = 80
gl$ = 88
svg$ = 96
stbtt_GetGlyphSVG PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2695
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2696
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2699
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2700
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2702
	mov	edx, DWORD PTR gl$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindSVGDoc
	mov	QWORD PTR svg_doc$[rsp], rax
; Line 2703
	cmp	QWORD PTR svg_doc$[rsp], 0
	je	SHORT $LN3@stbtt_GetG
; Line 2704
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+52]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR svg_doc$[rsp]
	add	rcx, 4
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	eax, eax
	mov	rcx, QWORD PTR tv73[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR svg$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2705
	mov	rax, QWORD PTR svg_doc$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetG
; Line 2706
	jmp	SHORT $LN4@stbtt_GetG
$LN3@stbtt_GetG:
; Line 2707
	xor	eax, eax
$LN4@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2709
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
svg$ = 64
stbtt_GetCodepointSVG PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2712
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2713
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR svg$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSVG
; Line 2714
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
numEntries$ = 36
svg_doc$1 = 40
svg_doc_list$ = 48
data$ = 56
svg_docs$ = 64
info$ = 96
gl$ = 104
stbtt_FindSVGDoc PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2678
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2680
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2681
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z ; stbtt__get_svg
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc_list$[rsp], rax
; Line 2683
	mov	rcx, QWORD PTR svg_doc_list$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numEntries$[rsp], eax
; Line 2684
	mov	rax, QWORD PTR svg_doc_list$[rsp]
	add	rax, 2
	mov	QWORD PTR svg_docs$[rsp], rax
; Line 2686
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
	mov	eax, DWORD PTR numEntries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Find
; Line 2687
	imul	eax, DWORD PTR i$[rsp], 12
	cdqe
	mov	rcx, QWORD PTR svg_docs$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc$1[rsp], rax
; Line 2688
	mov	rcx, QWORD PTR svg_doc$1[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jl	SHORT $LN5@stbtt_Find
	mov	rax, QWORD PTR svg_doc$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jg	SHORT $LN5@stbtt_Find
; Line 2689
	mov	rax, QWORD PTR svg_doc$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 2690
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 2691
	xor	eax, eax
$LN1@stbtt_Find:
; Line 2692
	add	rsp, 88					; 00000058H
	ret	0
stbtt_FindSVGDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
v$ = 56
stbtt_FreeShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2673
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2674
	mov	rcx, QWORD PTR v$[rsp]
	call	free
; Line 2675
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
glyph_index$ = 56
pvertices$ = 64
stbtt_GetGlyphShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2298
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2299
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2300
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeTT
	jmp	SHORT $LN1@stbtt_GetG
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2302
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeT2
$LN3@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2303
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
vertices$ = 64
stbtt_GetCodepointShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1590
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1591
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR vertices$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
; Line 1592
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numberOfContours$ = 48
tv75 = 52
g$ = 56
tv87 = 60
info$ = 80
glyph_index$ = 88
stbtt_IsGlyphEmpty PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1647
$LN9:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1650
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_IsGl
; Line 1651
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
	test	eax, eax
	jne	SHORT $LN5@stbtt_IsGl
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@stbtt_IsGl
$LN5@stbtt_IsGl:
	mov	DWORD PTR tv75[rsp], 0
$LN6@stbtt_IsGl:
	mov	eax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbtt_IsGl
$LN2@stbtt_IsGl:
; Line 1652
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1653
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN3@stbtt_IsGl
	mov	eax, 1
	jmp	SHORT $LN1@stbtt_IsGl
$LN3@stbtt_IsGl:
; Line 1654
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1655
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jne	SHORT $LN7@stbtt_IsGl
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN8@stbtt_IsGl
$LN7@stbtt_IsGl:
	mov	DWORD PTR tv87[rsp], 0
$LN8@stbtt_IsGl:
	mov	eax, DWORD PTR tv87[rsp]
$LN1@stbtt_IsGl:
; Line 1656
	add	rsp, 72					; 00000048H
	ret	0
stbtt_IsGlyphEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
length$ = 36
data$ = 40
info$ = 64
table$ = 72
table_length$ = 80
stbtt_GetKerningTable PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2333
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2334
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2338
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN5@stbtt_GetK
; Line 2339
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN5@stbtt_GetK:
; Line 2340
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN6@stbtt_GetK
; Line 2341
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN6@stbtt_GetK:
; Line 2342
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN7@stbtt_GetK
; Line 2343
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN7@stbtt_GetK:
; Line 2345
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR length$[rsp], eax
; Line 2346
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR table_length$[rsp], eax
	jge	SHORT $LN8@stbtt_GetK
; Line 2347
	mov	eax, DWORD PTR table_length$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN8@stbtt_GetK:
; Line 2349
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetK
$LN2@stbtt_GetK:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbtt_GetK:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN3@stbtt_GetK
; Line 2351
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2352
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+4], eax
; Line 2353
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 2354
	jmp	$LN2@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2356
	mov	eax, DWORD PTR length$[rsp]
$LN1@stbtt_GetK:
; Line 2357
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 32
info$ = 64
stbtt_GetKerningTableLength PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2318
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2319
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2322
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetK
; Line 2323
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN2@stbtt_GetK:
; Line 2324
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN3@stbtt_GetK
; Line 2325
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2326
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN4@stbtt_GetK
; Line 2327
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN4@stbtt_GetK:
; Line 2329
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
$LN1@stbtt_GetK:
; Line 2330
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTableLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$1 = 48
info$ = 80
glyph_index$ = 88
x0$ = 96
y0$ = 104
x1$ = 112
y1$ = 120
stbtt_GetGlyphBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1626
$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1627
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_GetG
; Line 1628
	mov	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
; Line 1629
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 1630
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$1[rsp], eax
; Line 1631
	cmp	DWORD PTR g$1[rsp], 0
	jge	SHORT $LN4@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 1633
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 1634
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 1635
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
; Line 1636
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 1638
	mov	eax, 1
$LN1@stbtt_GetG:
; Line 1639
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
xAdvance$ = 32
info$ = 64
g1$ = 72
g2$ = 80
stbtt_GetGlyphKernAdvance PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2611
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2612
	mov	DWORD PTR xAdvance$[rsp], 0
; Line 2614
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN2@stbtt_GetG
; Line 2615
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ; stbtt__GetGlyphGPOSInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2616
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	je	SHORT $LN4@stbtt_GetG
; Line 2617
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ; stbtt__GetGlyphKernInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
$LN4@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2619
	mov	eax, DWORD PTR xAdvance$[rsp]
; Line 2620
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numOfLongHorMetrics$ = 32
info$ = 64
glyph_index$ = 72
advanceWidth$ = 80
leftSideBearing$ = 88
stbtt_GetGlyphHMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2306
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2307
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+34]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR numOfLongHorMetrics$[rsp], ax
; Line 2308
	movzx	eax, WORD PTR numOfLongHorMetrics$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	$LN2@stbtt_GetG
; Line 2309
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetG:
; Line 2310
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 2311
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2312
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	lea	ecx, DWORD PTR [rcx*4-4]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 2313
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2315
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 64
codepoint$ = 72
x0$ = 80
y0$ = 88
x1$ = 96
y1$ = 104
stbtt_GetCodepointBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1642
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1643
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBox
; Line 1644
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 32
tv79 = 36
info$ = 64
ch1$ = 72
ch2$ = 80
stbtt_GetCodepointKernAdvance PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2623
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2624
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetC
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN2@stbtt_GetC
; Line 2625
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetC
$LN2@stbtt_GetC:
; Line 2626
	mov	edx, DWORD PTR ch2$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv81[rsp], eax
	mov	edx, DWORD PTR ch1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv79[rsp], eax
	mov	r8d, DWORD PTR tv81[rsp]
	mov	edx, DWORD PTR tv79[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphKernAdvance
$LN1@stbtt_GetC:
; Line 2627
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
codepoint$ = 56
advanceWidth$ = 64
leftSideBearing$ = 72
stbtt_GetCodepointHMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2630
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2631
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r9, QWORD PTR leftSideBearing$[rsp]
	mov	r8, QWORD PTR advanceWidth$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 2632
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
x0$ = 56
y0$ = 64
x1$ = 72
y1$ = 80
stbtt_GetFontBoundingBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2653
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2654
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+36]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2655
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+38]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2656
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2657
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+42]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2658
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontBoundingBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tab$ = 32
info$ = 64
typoAscent$ = 72
typoDescent$ = 80
typoLineGap$ = 88
stbtt_GetFontVMetricsOS2 PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2642
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2643
	lea	r8, OFFSET FLAT:$SG83650
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR tab$[rsp], eax
; Line 2644
	cmp	DWORD PTR tab$[rsp], 0
	jne	SHORT $LN2@stbtt_GetF
; Line 2645
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 2646
	cmp	QWORD PTR typoAscent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+68]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoAscent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2647
	cmp	QWORD PTR typoDescent$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+70]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoDescent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2648
	cmp	QWORD PTR typoLineGap$[rsp], 0
	je	SHORT $LN5@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+72]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoLineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetF:
; Line 2649
	mov	eax, 1
$LN1@stbtt_GetF:
; Line 2650
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetFontVMetricsOS2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
ascent$ = 56
descent$ = 64
lineGap$ = 72
stbtt_GetFontVMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2635
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2636
	cmp	QWORD PTR ascent$[rsp], 0
	je	SHORT $LN2@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR ascent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@stbtt_GetF:
; Line 2637
	cmp	QWORD PTR descent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR descent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2638
	cmp	QWORD PTR lineGap$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR lineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2639
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
unitsPerEm$ = 32
info$ = 64
pixels$ = 72
stbtt_ScaleForMappingEmToPixels PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2667
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2668
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR unitsPerEm$[rsp], eax
; Line 2669
	cvtsi2ss xmm0, DWORD PTR unitsPerEm$[rsp]
	movss	xmm1, DWORD PTR pixels$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2670
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
fheight$ = 36
info$ = 64
height$ = 72
stbtt_ScaleForPixelHeight PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2661
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2662
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	DWORD PTR tv71[rsp], eax
	mov	rcx, QWORD PTR info$[rsp]
	movsxd	rcx, DWORD PTR [rcx+36]
	mov	rdx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+6]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR tv71[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fheight$[rsp], eax
; Line 2663
	cvtsi2ss xmm0, DWORD PTR fheight$[rsp]
	movss	xmm1, DWORD PTR height$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2664
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index_map$ = 32
format$ = 36
item$1 = 40
search$2 = 44
data$ = 48
searchRange$3 = 56
segcount$4 = 60
entrySelector$5 = 64
rangeShift$6 = 68
offset$7 = 72
start$8 = 76
mid$9 = 80
low$10 = 84
end$11 = 88
last$12 = 92
first$13 = 96
endCount$14 = 100
high$15 = 104
start_char$16 = 108
start_glyph$17 = 112
bytes$18 = 116
count$19 = 120
ngroups$20 = 124
end_char$21 = 128
info$ = 160
unicode_codepoint$ = 168
stbtt_FindGlyphIndex PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1497
$LN33:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 1498
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1499
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR index_map$[rsp], eax
; Line 1501
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR format$[rsp], ax
; Line 1502
	movzx	eax, WORD PTR format$[rsp]
	test	eax, eax
	jne	SHORT $LN6@stbtt_Find
; Line 1503
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR bytes$18[rsp], eax
; Line 1504
	mov	eax, DWORD PTR bytes$18[rsp]
	sub	eax, 6
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jge	SHORT $LN8@stbtt_Find
; Line 1505
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR unicode_codepoint$[rsp]
	movzx	eax, BYTE PTR [rax+rcx+6]
	jmp	$LN1@stbtt_Find
$LN8@stbtt_Find:
; Line 1506
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN7@stbtt_Find
$LN6@stbtt_Find:
; Line 1507
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 6
	jne	$LN9@stbtt_Find
; Line 1508
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR first$13[rsp], eax
; Line 1509
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$19[rsp], eax
; Line 1510
	mov	eax, DWORD PTR first$13[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jb	SHORT $LN11@stbtt_Find
	mov	eax, DWORD PTR count$19[rsp]
	mov	ecx, DWORD PTR first$13[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN11@stbtt_Find
; Line 1511
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR first$13[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	mov	ecx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN11@stbtt_Find:
; Line 1512
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN10@stbtt_Find
$LN9@stbtt_Find:
; Line 1513
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 2
	jne	SHORT $LN12@stbtt_Find
; Line 1514
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN31@stbtt_Find
	mov	r8d, 1514				; 000005eaH
	lea	rdx, OFFSET FLAT:$SG82849
	lea	rcx, OFFSET FLAT:$SG82850
	call	_wassert
	xor	eax, eax
$LN31@stbtt_Find:
; Line 1515
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN13@stbtt_Find
$LN12@stbtt_Find:
; Line 1516
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 4
	jne	$LN14@stbtt_Find
; Line 1517
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR segcount$4[rsp], ax
; Line 1518
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1519
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1520
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR rangeShift$6[rsp], ax
; Line 1523
	mov	eax, DWORD PTR index_map$[rsp]
	add	eax, 14
	mov	DWORD PTR endCount$14[rsp], eax
; Line 1524
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	DWORD PTR search$2[rsp], eax
; Line 1526
	cmp	DWORD PTR unicode_codepoint$[rsp], 65535 ; 0000ffffH
	jle	SHORT $LN16@stbtt_Find
; Line 1527
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN16@stbtt_Find:
; Line 1531
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR rangeShift$6[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN17@stbtt_Find
; Line 1532
	movzx	eax, WORD PTR rangeShift$6[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN17@stbtt_Find:
; Line 1535
	mov	eax, DWORD PTR search$2[rsp]
	sub	eax, 2
	mov	DWORD PTR search$2[rsp], eax
$LN2@stbtt_Find:
; Line 1536
	movzx	eax, WORD PTR entrySelector$5[rsp]
	test	eax, eax
	je	SHORT $LN3@stbtt_Find
; Line 1538
	movzx	eax, WORD PTR searchRange$3[rsp]
	shr	ax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1539
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR searchRange$3[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR end$11[rsp], ax
; Line 1540
	movzx	eax, WORD PTR end$11[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN18@stbtt_Find
; Line 1541
	movzx	eax, WORD PTR searchRange$3[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN18@stbtt_Find:
; Line 1542
	movzx	eax, WORD PTR entrySelector$5[rsp]
	dec	ax
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1543
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 1544
	mov	eax, DWORD PTR search$2[rsp]
	add	eax, 2
	mov	DWORD PTR search$2[rsp], eax
; Line 1548
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	WORD PTR item$1[rsp], ax
; Line 1550
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR start$8[rsp], ax
; Line 1551
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR last$12[rsp], ax
; Line 1552
	movzx	eax, WORD PTR start$8[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN20@stbtt_Find
	movzx	eax, WORD PTR last$12[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN19@stbtt_Find
$LN20@stbtt_Find:
; Line 1553
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN19@stbtt_Find:
; Line 1555
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR offset$7[rsp], ax
; Line 1556
	movzx	eax, WORD PTR offset$7[rsp]
	test	eax, eax
	jne	SHORT $LN21@stbtt_Find
; Line 1557
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR unicode_codepoint$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN21@stbtt_Find:
; Line 1559
	movzx	eax, WORD PTR offset$7[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR start$8[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR index_map$[rsp]
	add	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
	jmp	$LN15@stbtt_Find
$LN14@stbtt_Find:
; Line 1561
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	je	SHORT $LN23@stbtt_Find
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 13
	jne	$LN22@stbtt_Find
$LN23@stbtt_Find:
; Line 1562
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR ngroups$20[rsp], eax
; Line 1564
	mov	DWORD PTR low$10[rsp], 0
	mov	eax, DWORD PTR ngroups$20[rsp]
	mov	DWORD PTR high$15[rsp], eax
$LN4@stbtt_Find:
; Line 1566
	mov	eax, DWORD PTR high$15[rsp]
	cmp	DWORD PTR low$10[rsp], eax
	jge	$LN5@stbtt_Find
; Line 1567
	mov	eax, DWORD PTR low$10[rsp]
	mov	ecx, DWORD PTR high$15[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR low$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR mid$9[rsp], eax
; Line 1568
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+16]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_char$16[rsp], eax
; Line 1569
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+20]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR end_char$21[rsp], eax
; Line 1570
	mov	eax, DWORD PTR start_char$16[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN24@stbtt_Find
; Line 1571
	mov	eax, DWORD PTR mid$9[rsp]
	mov	DWORD PTR high$15[rsp], eax
	jmp	SHORT $LN25@stbtt_Find
$LN24@stbtt_Find:
; Line 1572
	mov	eax, DWORD PTR end_char$21[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jbe	SHORT $LN26@stbtt_Find
; Line 1573
	mov	eax, DWORD PTR mid$9[rsp]
	inc	eax
	mov	DWORD PTR low$10[rsp], eax
	jmp	SHORT $LN27@stbtt_Find
$LN26@stbtt_Find:
; Line 1575
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_glyph$17[rsp], eax
; Line 1576
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	jne	SHORT $LN28@stbtt_Find
; Line 1577
	mov	eax, DWORD PTR unicode_codepoint$[rsp]
	mov	ecx, DWORD PTR start_glyph$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR start_char$16[rsp]
	jmp	SHORT $LN1@stbtt_Find
	jmp	SHORT $LN29@stbtt_Find
$LN28@stbtt_Find:
; Line 1579
	mov	eax, DWORD PTR start_glyph$17[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN29@stbtt_Find:
$LN27@stbtt_Find:
$LN25@stbtt_Find:
; Line 1581
	jmp	$LN4@stbtt_Find
$LN5@stbtt_Find:
; Line 1582
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Find
$LN22@stbtt_Find:
$LN15@stbtt_Find:
$LN13@stbtt_Find:
$LN10@stbtt_Find:
$LN7@stbtt_Find:
; Line 1585
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN32@stbtt_Find
	mov	r8d, 1585				; 00000631H
	lea	rdx, OFFSET FLAT:$SG82867
	lea	rcx, OFFSET FLAT:$SG82868
	call	_wassert
	xor	eax, eax
$LN32@stbtt_Find:
; Line 1586
	xor	eax, eax
$LN1@stbtt_Find:
; Line 1587
	add	rsp, 152				; 00000098H
	ret	0
stbtt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
data$ = 56
offset$ = 64
stbtt_InitFont PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4954
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4955
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ; stbtt_InitFont_internal
; Line 4956
	add	rsp, 40					; 00000028H
	ret	0
stbtt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
index$ = 56
stbtt_GetFontOffsetForIndex PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4944
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4945
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ; stbtt_GetFontOffsetForIndex_internal
; Line 4946
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontOffsetForIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
stbtt_GetNumberOfFonts PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4949
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4950
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z ; stbtt_GetNumberOfFonts_internal
; Line 4951
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetNumberOfFonts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 80
i$ = 88
j$ = 92
scale$2 = 96
pad$3 = 100
glyph$4 = 104
bc$5 = 112
fh$6 = 120
missing_glyph$ = 124
k$ = 128
return_value$ = 132
tv80 = 136
tv176 = 140
x0$7 = 144
recip_h$8 = 148
sub_x$9 = 152
y0$10 = 156
recip_v$11 = 160
sub_y$12 = 164
codepoint$13 = 168
advance$14 = 172
old_h_over$ = 176
old_v_over$ = 180
lsb$15 = 184
y1$16 = 188
x1$17 = 192
spc$ = 240
info$ = 248
ranges$ = 256
num_ranges$ = 264
rects$ = 272
stbtt_PackFontRangesRenderIntoRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4209
$LN22:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 4210
	mov	DWORD PTR missing_glyph$[rsp], -1
	mov	DWORD PTR return_value$[rsp], 1
; Line 4213
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR old_h_over$[rsp], eax
; Line 4214
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR old_v_over$[rsp], eax
; Line 4216
	mov	DWORD PTR k$[rsp], 0
; Line 4217
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$6[rsp], xmm0
; Line 4219
	movss	xmm0, DWORD PTR fh$6[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN18@stbtt_Pack
	movss	xmm1, DWORD PTR fh$6[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv80[rsp], xmm0
	jmp	SHORT $LN19@stbtt_Pack
$LN18@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$6[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv80[rsp], xmm0
$LN19@stbtt_Pack:
	movss	xmm0, DWORD PTR tv80[rsp]
	movss	DWORD PTR scale$2[rsp], xmm0
; Line 4221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+32]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 4222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+33]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 4223
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_h$8[rsp], xmm0
; Line 4224
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_v$11[rsp], xmm0
; Line 4225
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	movss	DWORD PTR sub_x$9[rsp], xmm0
; Line 4226
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	movss	DWORD PTR sub_y$12[rsp], xmm0
; Line 4227
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4228
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$1[rsp], rax
; Line 4229
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	$LN8@stbtt_Pack
; Line 4230
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	add	rcx, QWORD PTR [rdx+rax+24]
	mov	rax, rcx
	mov	QWORD PTR bc$5[rsp], rax
; Line 4232
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN20@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN21@stbtt_Pack
$LN20@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv176[rsp], eax
$LN21@stbtt_Pack:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR codepoint$13[rsp], eax
; Line 4233
	mov	edx, DWORD PTR codepoint$13[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$4[rsp], eax
; Line 4234
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR pad$3[rsp], eax
; Line 4237
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4238
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 4239
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 4240
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4241
	lea	r9, QWORD PTR lsb$15[rsp]
	lea	r8, QWORD PTR advance$14[rsp]
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 4242
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$2[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$16[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$17[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$7[rsp]
	mov	QWORD PTR [rsp+32], rax
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 4246
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$2[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	inc	eax
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	edx, DWORD PTR [rdx+36]
	mov	ecx, DWORD PTR [rcx+12]
	sub	ecx, edx
	inc	ecx
	mov	rdx, QWORD PTR r$1[rsp]
	movsxd	rdx, DWORD PTR [rdx]
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$1[rsp]
	mov	r9, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	r8d, DWORD PTR glyph$4[rsp]
	mov	DWORD PTR [rsp+72], r8d
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+64], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm0
	movss	DWORD PTR [rsp+40], xmm1
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+24]
	mov	DWORD PTR [rsp+32], r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4256
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+36], 1
	jbe	SHORT $LN10@stbtt_Pack
; Line 4257
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN10@stbtt_Pack:
; Line 4261
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+40], 1
	jbe	SHORT $LN11@stbtt_Pack
; Line 4262
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN11@stbtt_Pack:
; Line 4266
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
; Line 4267
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+2], cx
; Line 4268
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 4269
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 4270
	cvtsi2ss xmm0, DWORD PTR advance$14[rsp]
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4271
	cvtsi2ss xmm0, DWORD PTR x0$7[rsp]
	mulss	xmm0, DWORD PTR recip_h$8[rsp]
	addss	xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4272
	cvtsi2ss xmm0, DWORD PTR y0$10[rsp]
	mulss	xmm0, DWORD PTR recip_v$11[rsp]
	addss	xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4273
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR x0$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_h$8[rsp]
	addss	xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4274
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR y0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_v$11[rsp]
	addss	xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4276
	cmp	DWORD PTR glyph$4[rsp], 0
	jne	SHORT $LN12@stbtt_Pack
; Line 4277
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR missing_glyph$[rsp], eax
$LN12@stbtt_Pack:
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4278
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN13@stbtt_Pack
; Line 4279
	mov	DWORD PTR return_value$[rsp], 0
	jmp	$LN14@stbtt_Pack
$LN13@stbtt_Pack:
; Line 4280
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	jne	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN15@stbtt_Pack
	cmp	DWORD PTR missing_glyph$[rsp], 0
	jl	SHORT $LN15@stbtt_Pack
; Line 4281
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR missing_glyph$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 40				; 00000028H
	movsxd	r8, DWORD PTR j$[rsp]
	imul	r8, r8, 28
	mov	r9, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR [r9+rdx+24]
	lea	rdi, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [rax+rcx]
	mov	ecx, 28
	rep movsb
; Line 4282
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
; Line 4283
	mov	DWORD PTR return_value$[rsp], 0
$LN16@stbtt_Pack:
$LN14@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4286
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4287
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4288
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4291
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_h_over$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 4292
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_v_over$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 4294
	mov	eax, DWORD PTR return_value$[rsp]
; Line 4295
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
rects$ = 56
num_rects$ = 64
stbtt_PackFontRangesPackRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4298
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4299
	mov	r8d, DWORD PTR num_rects$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z ; stbrp_pack_rects
; Line 4300
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackFontRangesPackRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 80
k$ = 84
j$ = 88
fh$1 = 92
glyph$2 = 96
tv78 = 100
tv144 = 104
scale$3 = 108
missing_glyph_added$ = 112
codepoint$4 = 116
x0$5 = 120
x1$6 = 124
y0$7 = 128
y1$8 = 132
spc$ = 160
info$ = 168
ranges$ = 176
num_ranges$ = 184
rects$ = 192
stbtt_PackFontRangesGatherRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4150
$LN17:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 4152
	mov	DWORD PTR missing_glyph_added$[rsp], 0
; Line 4154
	mov	DWORD PTR k$[rsp], 0
; Line 4155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4156
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$1[rsp], xmm0
; Line 4157
	movss	xmm0, DWORD PTR fh$1[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@stbtt_Pack
	movss	xmm1, DWORD PTR fh$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN14@stbtt_Pack
$LN13@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$1[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv78[rsp], xmm0
$LN14@stbtt_Pack:
	movss	xmm0, DWORD PTR tv78[rsp]
	movss	DWORD PTR scale$3[rsp], xmm0
; Line 4158
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+36]
	mov	BYTE PTR [rcx+rax+32], dl
; Line 4159
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+rax+33], dl
; Line 4160
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4162
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN15@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv144[rsp], eax
$LN16@stbtt_Pack:
	mov	eax, DWORD PTR tv144[rsp]
	mov	DWORD PTR codepoint$4[rsp], eax
; Line 4163
	mov	edx, DWORD PTR codepoint$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$2[rsp], eax
; Line 4164
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN8@stbtt_Pack
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN10@stbtt_Pack
	cmp	DWORD PTR missing_glyph_added$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
$LN10@stbtt_Pack:
; Line 4165
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+12], 0
; Line 4166
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4167
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$3[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$3[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$8[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR y0$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x0$5[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+40], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+32], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$2[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4172
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+12], eax
; Line 4173
	mov	eax, DWORD PTR y0$7[rsp]
	mov	ecx, DWORD PTR y1$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+16], eax
; Line 4174
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4175
	mov	DWORD PTR missing_glyph_added$[rsp], 1
$LN11@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4177
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4178
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4179
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4181
	mov	eax, DWORD PTR k$[rsp]
; Line 4182
	add	rsp, 152				; 00000098H
	ret	0
stbtt_PackFontRangesGatherRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
y$2 = 36
ipw$ = 40
iph$ = 44
b$ = 48
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
align_to_integer$ = 136
stbtt_GetPackedQuad PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4364
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4365
	cvtsi2ss xmm0, DWORD PTR pw$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rsp], xmm0
; Line 4366
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 4368
	cmp	DWORD PTR align_to_integer$[rsp], 0
	je	$LN2@stbtt_GetP
; Line 4369
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
; Line 4370
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 4371
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR x$1[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4372
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR y$2[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4373
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR x$1[rsp]
	addss	xmm0, DWORD PTR [rax+20]
	mov	rax, QWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4374
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR y$2[rsp]
	addss	xmm0, DWORD PTR [rax+24]
	mov	rax, QWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR [rax+12]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4375
	jmp	SHORT $LN3@stbtt_GetP
$LN2@stbtt_GetP:
; Line 4376
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4377
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4378
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+20]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4379
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+24]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
$LN3@stbtt_GetP:
; Line 4382
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4383
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4384
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4385
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+28], xmm0
; Line 4387
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4388
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 8
skip$ = 16
stbtt_PackSetSkipMissingCodepoints PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4006
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 4007
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR skip$[rsp]
	mov	DWORD PTR [rax+32], ecx
; Line 4008
	ret	0
stbtt_PackSetSkipMissingCodepoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
h_oversample$ = 56
v_oversample$ = 64
stbtt_PackSetOversampling PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3996
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3997
	cmp	DWORD PTR h_oversample$[rsp], 8
	jbe	SHORT $LN5@stbtt_Pack
	mov	r8d, 3997				; 00000f9dH
	lea	rdx, OFFSET FLAT:$SG84683
	lea	rcx, OFFSET FLAT:$SG84684
	call	_wassert
	xor	eax, eax
$LN5@stbtt_Pack:
; Line 3998
	cmp	DWORD PTR v_oversample$[rsp], 8
	jbe	SHORT $LN6@stbtt_Pack
	mov	r8d, 3998				; 00000f9eH
	lea	rdx, OFFSET FLAT:$SG84685
	lea	rcx, OFFSET FLAT:$SG84686
	call	_wassert
	xor	eax, eax
$LN6@stbtt_Pack:
; Line 3999
	cmp	DWORD PTR h_oversample$[rsp], 8
	ja	SHORT $LN2@stbtt_Pack
; Line 4000
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR h_oversample$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN2@stbtt_Pack:
; Line 4001
	cmp	DWORD PTR v_oversample$[rsp], 8
	ja	SHORT $LN3@stbtt_Pack
; Line 4002
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR v_oversample$[rsp]
	mov	DWORD PTR [rax+40], ecx
$LN3@stbtt_Pack:
; Line 4003
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackSetOversampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
j$ = 52
n$ = 56
return_value$ = 60
rects$ = 64
info$ = 80
spc$ = 256
fontdata$ = 264
font_index$ = 272
ranges$ = 280
num_ranges$ = 288
stbtt_PackFontRanges PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4303
$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 4305
	mov	DWORD PTR return_value$[rsp], 1
; Line 4310
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4311
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+6], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+4], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+2], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx], dx
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4317
	mov	DWORD PTR n$[rsp], 0
; Line 4318
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbtt_Pack
; Line 4319
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN8@stbtt_Pack
$LN9@stbtt_Pack:
; Line 4321
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR rects$[rsp], rax
; Line 4322
	cmp	QWORD PTR rects$[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4323
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN11@stbtt_Pack:
; Line 4325
	mov	rax, QWORD PTR spc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR info$[rsp], rax
; Line 4326
	mov	edx, DWORD PTR font_index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4328
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesGatherRects
	mov	DWORD PTR n$[rsp], eax
; Line 4330
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesPackRects
; Line 4332
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesRenderIntoRects
	mov	DWORD PTR return_value$[rsp], eax
; Line 4334
	mov	rcx, QWORD PTR rects$[rsp]
	call	free
; Line 4335
	mov	eax, DWORD PTR return_value$[rsp]
$LN1@stbtt_Pack:
; Line 4336
	add	rsp, 248				; 000000f8H
	ret	0
stbtt_PackFontRanges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
range$ = 48
spc$ = 112
fontdata$ = 120
font_index$ = 128
font_size$ = 136
first_unicode_codepoint_in_range$ = 144
num_chars_in_range$ = 152
chardata_for_range$ = 160
stbtt_PackFontRange PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4340
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4342
	mov	eax, DWORD PTR first_unicode_codepoint_in_range$[rsp]
	mov	DWORD PTR range$[rsp+4], eax
; Line 4343
	mov	QWORD PTR range$[rsp+8], 0
; Line 4344
	mov	eax, DWORD PTR num_chars_in_range$[rsp]
	mov	DWORD PTR range$[rsp+16], eax
; Line 4345
	mov	rax, QWORD PTR chardata_for_range$[rsp]
	mov	QWORD PTR range$[rsp+24], rax
; Line 4346
	movss	xmm0, DWORD PTR font_size$[rsp]
	movss	DWORD PTR range$[rsp], xmm0
; Line 4347
	mov	DWORD PTR [rsp+32], 1
	lea	r9, QWORD PTR range$[rsp]
	mov	r8d, DWORD PTR font_index$[rsp]
	mov	rdx, QWORD PTR fontdata$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRanges
; Line 4348
	add	rsp, 104				; 00000068H
	ret	0
stbtt_PackFontRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
stbtt_PackEnd PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3990
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3991
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	call	free
; Line 3992
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	free
; Line 3993
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 48
num_nodes$ = 52
nodes$ = 56
context$ = 64
spc$ = 96
pixels$ = 104
pw$ = 112
ph$ = 120
stride_in_bytes$ = 128
padding$ = 136
alloc_context$ = 144
stbtt_PackBegin PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3958
$LN10:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3959
	mov	ecx, 20
	call	malloc
	mov	QWORD PTR context$[rsp], rax
; Line 3960
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_nodes$[rsp], eax
; Line 3961
	movsxd	rax, DWORD PTR num_nodes$[rsp]
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR nodes$[rsp], rax
; Line 3963
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN3@stbtt_Pack
	cmp	QWORD PTR nodes$[rsp], 0
	jne	SHORT $LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 3964
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN4@stbtt_Pack
	mov	rcx, QWORD PTR context$[rsp]
	call	free
$LN4@stbtt_Pack:
; Line 3965
	cmp	QWORD PTR nodes$[rsp], 0
	je	SHORT $LN5@stbtt_Pack
	mov	rcx, QWORD PTR nodes$[rsp]
	call	free
$LN5@stbtt_Pack:
; Line 3966
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN2@stbtt_Pack:
; Line 3969
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3970
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 3971
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 3972
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 3973
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 3974
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR nodes$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 3975
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR padding$[rsp]
	mov	DWORD PTR [rax+28], ecx
; Line 3976
	cmp	DWORD PTR stride_in_bytes$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
	mov	eax, DWORD PTR stride_in_bytes$[rsp]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR tv91[rsp], eax
$LN9@stbtt_Pack:
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR tv91[rsp]
	mov	DWORD PTR [rax+24], ecx
; Line 3977
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+36], 1
; Line 3978
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+40], 1
; Line 3979
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 3981
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR padding$[rsp]
	mov	edx, DWORD PTR pw$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR num_nodes$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, QWORD PTR nodes$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR context$[rsp]
	call	?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z ; stbrp_init_target
; Line 3983
	cmp	QWORD PTR pixels$[rsp], 0
	je	SHORT $LN6@stbtt_Pack
; Line 3984
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
$LN6@stbtt_Pack:
; Line 3986
	mov	eax, 1
$LN1@stbtt_Pack:
; Line 3987
	add	rsp, 88					; 00000058H
	ret	0
stbtt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 32
tv78 = 36
i_ascent$ = 40
i_descent$ = 44
i_lineGap$ = 48
info$ = 64
fontdata$ = 240
index$ = 248
size$ = 256
ascent$ = 264
descent$ = 272
lineGap$ = 280
stbtt_GetScaledFontVMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4351
$LN5:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 4355
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4356
	movss	xmm0, DWORD PTR size$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@stbtt_GetS
	movss	xmm1, DWORD PTR size$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetS
$LN3@stbtt_GetS:
	movss	xmm0, DWORD PTR size$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv78[rsp], xmm0
$LN4@stbtt_GetS:
	movss	xmm0, DWORD PTR tv78[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
; Line 4357
	lea	r9, QWORD PTR i_lineGap$[rsp]
	lea	r8, QWORD PTR i_descent$[rsp]
	lea	rdx, QWORD PTR i_ascent$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetFontVMetrics
; Line 4358
	cvtsi2ss xmm0, DWORD PTR i_ascent$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR ascent$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4359
	cvtsi2ss xmm0, DWORD PTR i_descent$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR descent$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4360
	cvtsi2ss xmm0, DWORD PTR i_lineGap$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR lineGap$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4361
	add	rsp, 232				; 000000e8H
	ret	0
stbtt_GetScaledFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d3d_bias$ = 32
tv65 = 36
round_x$ = 40
round_y$ = 44
ipw$ = 48
iph$ = 52
b$ = 56
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
opengl_fillrule$ = 136
stbtt_GetBakedQuad PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3860
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3861
	cmp	DWORD PTR opengl_fillrule$[rsp], 0
	je	SHORT $LN3@stbtt_GetB
	xorps	xmm0, xmm0
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetB
$LN3@stbtt_GetB:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@stbtt_GetB:
	movss	xmm0, DWORD PTR tv65[rsp]
	movss	DWORD PTR d3d_bias$[rsp], xmm0
; Line 3862
	cvtsi2ss xmm0, DWORD PTR pw$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rsp], xmm0
; Line 3863
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 3864
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	DWORD PTR round_x$[rsp], eax
; Line 3865
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	DWORD PTR round_y$[rsp], eax
; Line 3867
	cvtsi2ss xmm0, DWORD PTR round_x$[rsp]
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 3868
	cvtsi2ss xmm0, DWORD PTR round_y$[rsp]
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 3869
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	ecx, DWORD PTR round_x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 3870
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	ecx, DWORD PTR round_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 3872
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3873
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 3874
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 3875
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+28], xmm0
; Line 3877
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 3878
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetBakedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 96
offset$ = 104
pixel_height$ = 112
pixels$ = 120
pw$ = 128
ph$ = 136
first_char$ = 144
num_chars$ = 152
chardata$ = 160
stbtt_BakeFontBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4939
$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4940
	mov	rax, QWORD PTR chardata$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR num_chars$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR first_char$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR pixels$[rsp]
	movss	xmm2, DWORD PTR pixel_height$[rsp]
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z ; stbtt_BakeFontBitmap_internal
; Line 4941
	add	rsp, 88					; 00000058H
	ret	0
stbtt_BakeFontBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
F$ = 32
?PIXEL_FORMAT_SIZE@@YAHH@Z PROC				; PIXEL_FORMAT_SIZE
; File W:\cpp\void\detroit\brazen.h
; Line 47
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN4@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 3
	je	SHORT $LN5@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 4
	je	SHORT $LN6@PIXEL_FORM
	jmp	SHORT $LN7@PIXEL_FORM
$LN4@PIXEL_FORM:
; Line 48
	mov	eax, 1
	jmp	SHORT $LN1@PIXEL_FORM
$LN5@PIXEL_FORM:
; Line 49
	mov	eax, 3
	jmp	SHORT $LN1@PIXEL_FORM
$LN6@PIXEL_FORM:
; Line 50
	mov	eax, 4
	jmp	SHORT $LN1@PIXEL_FORM
$LN7@PIXEL_FORM:
; Line 51
	mov	eax, -1
$LN1@PIXEL_FORM:
; Line 53
	add	rsp, 24
	ret	0
?PIXEL_FORMAT_SIZE@@YAHH@Z ENDP				; PIXEL_FORMAT_SIZE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__ESTANDARD_BASIS@@YAXXZ
text$di	SEGMENT
??__ESTANDARD_BASIS@@YAXXZ PROC				; `dynamic initializer for 'STANDARD_BASIS'', COMDAT
; File W:\cpp\void\detroit\brazen-math.h
; Line 243
	push	rsi
	push	rdi
; Line 240
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3QBTf32x3@@B
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_X@@3Tf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 241
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3QBTf32x3@@B+12
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Y@@3Tf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 242
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3QBTf32x3@@B+24
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Z@@3Tf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	pop	rdi
	pop	rsi
	ret	0
??__ESTANDARD_BASIS@@YAXXZ ENDP				; `dynamic initializer for 'STANDARD_BASIS''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
Kind$ = 32
?TraceMessageKindToString@@YAPEB_WH@Z PROC		; TraceMessageKindToString
; File W:\cpp\void\dr\trace.c
; Line 6
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR Kind$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 7
	ja	SHORT $LN2@TraceMessa
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN13@TraceMessa[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@TraceMessa:
; Line 7
	lea	rax, OFFSET FLAT:$SG80010
	jmp	SHORT $LN1@TraceMessa
$LN5@TraceMessa:
; Line 8
	lea	rax, OFFSET FLAT:$SG80012
	jmp	SHORT $LN1@TraceMessa
$LN6@TraceMessa:
; Line 9
	lea	rax, OFFSET FLAT:$SG80014
	jmp	SHORT $LN1@TraceMessa
$LN7@TraceMessa:
; Line 10
	lea	rax, OFFSET FLAT:$SG80016
	jmp	SHORT $LN1@TraceMessa
$LN8@TraceMessa:
; Line 11
	lea	rax, OFFSET FLAT:$SG80018
	jmp	SHORT $LN1@TraceMessa
$LN9@TraceMessa:
; Line 12
	lea	rax, OFFSET FLAT:$SG80020
	jmp	SHORT $LN1@TraceMessa
$LN10@TraceMessa:
; Line 13
	lea	rax, OFFSET FLAT:$SG80022
	jmp	SHORT $LN1@TraceMessa
$LN11@TraceMessa:
; Line 14
	lea	rax, OFFSET FLAT:$SG80024
	jmp	SHORT $LN1@TraceMessa
$LN2@TraceMessa:
; Line 16
	lea	rax, OFFSET FLAT:$SG80025
$LN1@TraceMessa:
; Line 17
	add	rsp, 24
	ret	0
$LN13@TraceMessa:
	DD	$LN4@TraceMessa
	DD	$LN5@TraceMessa
	DD	$LN6@TraceMessa
	DD	$LN10@TraceMessa
	DD	$LN7@TraceMessa
	DD	$LN11@TraceMessa
	DD	$LN8@TraceMessa
	DD	$LN9@TraceMessa
?TraceMessageKindToString@@YAPEB_WH@Z ENDP		; TraceMessageKindToString
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
Name$ = 64
?IsFileNameReal@@YAHPEBD@Z PROC				; IsFileNameReal
; File W:\cpp\void\dr\plat-win32.c
; Line 563
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_GetFileAttributesA
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN3@IsFileName
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@IsFileName
$LN3@IsFileName:
	mov	DWORD PTR tv67[rsp], 0
$LN4@IsFileName:
	mov	eax, DWORD PTR tv67[rsp]
; Line 564
	add	rsp, 56					; 00000038H
	ret	0
?IsFileNameReal@@YAHPEBD@Z ENDP				; IsFileNameReal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Str$ = 48
?CStrW@@YAPEB_WPEBD@Z PROC				; CStrW
; File W:\cpp\void\dr\plat-win32.c
; Line 312
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rdx, QWORD PTR Str$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 313
	add	rsp, 40					; 00000028H
	ret	0
?CStrW@@YAPEB_WPEBD@Z ENDP				; CStrW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$ = 80
U$ = 112
Process$ = 240
Exe$ = 248
Pwd$ = 256
Cmd$ = 264
?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z PROC	; ZenLaunchSystemProcess
; File W:\cpp\void\dr\plat-win32.c
; Line 228
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	cmp	QWORD PTR Exe$[rsp], 0
	jne	SHORT $LN2@ZenLaunchS
	cmp	QWORD PTR Cmd$[rsp], 0
	jne	SHORT $LN2@ZenLaunchS
; Line 229
	xor	eax, eax
	jmp	$LN1@ZenLaunchS
$LN2@ZenLaunchS:
; Line 231
	mov	rax, QWORD PTR Process$[rsp]
	add	rax, 24
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z ; ZenCreateSystemPipe
	test	eax, eax
	jne	SHORT $LN3@ZenLaunchS
	xor	eax, eax
	jmp	$LN1@ZenLaunchS
$LN3@ZenLaunchS:
; Line 232
	mov	rax, QWORD PTR Process$[rsp]
	add	rax, 40					; 00000028H
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, rax
	call	?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z ; ZenCreateSystemPipe
	test	eax, eax
	jne	SHORT $LN4@ZenLaunchS
	xor	eax, eax
	jmp	$LN1@ZenLaunchS
$LN4@ZenLaunchS:
; Line 233
	mov	rax, QWORD PTR Process$[rsp]
	add	rax, 56					; 00000038H
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, rax
	call	?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z ; ZenCreateSystemPipe
	test	eax, eax
	jne	SHORT $LN5@ZenLaunchS
	xor	eax, eax
	jmp	$LN1@ZenLaunchS
$LN5@ZenLaunchS:
; Line 236
	mov	r8d, 104				; 00000068H
	xor	edx, edx
	lea	rcx, QWORD PTR U$[rsp]
	call	memset
; Line 237
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR I$[rsp]
	call	memset
; Line 238
	mov	DWORD PTR U$[rsp], 104			; 00000068H
; Line 239
	mov	DWORD PTR U$[rsp+60], 256		; 00000100H
; Line 240
	mov	rax, QWORD PTR Process$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR U$[rsp+80], rax
; Line 241
	mov	rax, QWORD PTR Process$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR U$[rsp+88], rax
; Line 242
	mov	rax, QWORD PTR Process$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR U$[rsp+96], rax
; Line 244
	lea	rax, QWORD PTR I$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR U$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR Pwd$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR Cmd$[rsp]
	mov	rcx, QWORD PTR Exe$[rsp]
	call	QWORD PTR __imp_CreateProcessA
	test	eax, eax
	jne	SHORT $LN6@ZenLaunchS
	xor	eax, eax
	jmp	SHORT $LN1@ZenLaunchS
$LN6@ZenLaunchS:
; Line 245
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 246
	mov	rax, QWORD PTR Process$[rsp]
	mov	ecx, DWORD PTR I$[rsp+16]
	mov	DWORD PTR [rax+20], ecx
; Line 247
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR I$[rsp+8]
	mov	QWORD PTR [rax+8], rcx
; Line 248
	mov	rax, QWORD PTR Process$[rsp]
	mov	ecx, DWORD PTR I$[rsp+20]
	mov	DWORD PTR [rax+16], ecx
; Line 249
	mov	eax, 1
$LN1@ZenLaunchS:
; Line 250
	add	rsp, 232				; 000000e8H
	ret	0
?ZenLaunchSystemProcess@@YAHPEAU_PROCESS@@PEBD11@Z ENDP	; ZenLaunchSystemProcess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Success$ = 32
Process$ = 64
ExitCode$ = 72
?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z PROC ; ZenTerminateSystemProcessForcefully
; File W:\cpp\void\dr\plat-win32.c
; Line 198
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 199
	mov	DWORD PTR Success$[rsp], 1
; Line 200
	mov	rax, QWORD PTR Process$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN2@ZenTermina
	mov	rax, QWORD PTR Process$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ZenTermina
; Line 201
	mov	edx, DWORD PTR ExitCode$[rsp]
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_TerminateProcess
	mov	DWORD PTR Success$[rsp], eax
	cmp	DWORD PTR Success$[rsp], 0
	je	SHORT $LN3@ZenTermina
; Line 202
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_CloseHandle
; Line 203
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_CloseHandle
; Line 204
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_CloseHandle
; Line 205
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR [rax+48]
	call	QWORD PTR __imp_CloseHandle
; Line 206
	mov	rax, QWORD PTR Process$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR __imp_CloseHandle
; Line 207
	mov	r8d, 72					; 00000048H
	xor	edx, edx
	mov	rcx, QWORD PTR Process$[rsp]
	call	memset
$LN3@ZenTermina:
$LN2@ZenTermina:
; Line 210
	mov	eax, DWORD PTR Success$[rsp]
; Line 211
	add	rsp, 56					; 00000038H
	ret	0
?ZenTerminateSystemProcessForcefully@@YAHPEAU_PROCESS@@I@Z ENDP ; ZenTerminateSystemProcessForcefully
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
tv86 = 36
Attrs$ = 40
Pipe$ = 80
ReadInheritable$ = 88
WriteInheritable$ = 96
?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z PROC		; ZenCreateSystemPipe
; File W:\cpp\void\dr\plat-win32.c
; Line 169
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	DWORD PTR Attrs$[rsp], 24
	lea	rax, QWORD PTR Attrs$[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
; Line 170
	mov	rax, QWORD PTR Pipe$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR Pipe$[rsp]
	xor	r9d, r9d
	lea	r8, QWORD PTR Attrs$[rsp]
	mov	rdx, rax
	call	QWORD PTR __imp_CreatePipe
	test	eax, eax
	je	SHORT $LN2@ZenCreateS
; Line 171
	cmp	DWORD PTR ReadInheritable$[rsp], 1
	jne	SHORT $LN5@ZenCreateS
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN6@ZenCreateS
$LN5@ZenCreateS:
	mov	DWORD PTR tv78[rsp], 0
$LN6@ZenCreateS:
	mov	r8d, DWORD PTR tv78[rsp]
	mov	edx, 1
	mov	rax, QWORD PTR Pipe$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_SetHandleInformation
	test	eax, eax
	jl	SHORT $LN3@ZenCreateS
	cmp	DWORD PTR WriteInheritable$[rsp], 1
	jne	SHORT $LN7@ZenCreateS
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@ZenCreateS
$LN7@ZenCreateS:
	mov	DWORD PTR tv86[rsp], 0
$LN8@ZenCreateS:
	mov	r8d, DWORD PTR tv86[rsp]
	mov	edx, 1
	mov	rax, QWORD PTR Pipe$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_SetHandleInformation
	test	eax, eax
	jl	SHORT $LN3@ZenCreateS
; Line 173
	mov	eax, 1
	jmp	SHORT $LN1@ZenCreateS
$LN3@ZenCreateS:
$LN2@ZenCreateS:
; Line 176
	xor	eax, eax
$LN1@ZenCreateS:
; Line 177
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?ZenCreateSystemPipe@@YAHPEAU_PIPE@@HH@Z ENDP		; ZenCreateSystemPipe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
R$ = 56
Format$ = 80
?FormatW@@YAPEA_WPEB_WZZ PROC				; FormatW
; File W:\cpp\void\dr\text.c
; Line 37
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 38
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 39
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	wcslen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR R$[rsp], rax
; Line 40
	mov	QWORD PTR Args$[rsp], 0
; Line 41
	mov	rax, QWORD PTR R$[rsp]
; Line 42
	add	rsp, 72					; 00000048H
	ret	0
?FormatW@@YAPEA_WPEB_WZZ ENDP				; FormatW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
R$ = 56
Format$ = 80
?FormatA@@YAPEADPEBDZZ PROC				; FormatA
; File W:\cpp\void\dr\text.c
; Line 26
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 27
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 28
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	strlen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z	; FormatExtendedA
	mov	QWORD PTR R$[rsp], rax
; Line 29
	mov	QWORD PTR Args$[rsp], 0
; Line 30
	mov	rax, QWORD PTR R$[rsp]
; Line 31
	add	rsp, 72					; 00000048H
	ret	0
?FormatA@@YAPEADPEBDZZ ENDP				; FormatA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
R$ = 40
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z PROC		; FormatExtendedW
; File W:\cpp\void\dr\text.c
; Line 17
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 257				; 00000101H
	cdqe
	shl	rax, 1
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR R$[rsp], rax
; Line 18
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 256				; 00000100H
	cdqe
	mov	r9, QWORD PTR Args$[rsp]
	mov	r8, QWORD PTR FormatStr$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR R$[rsp]
	call	_vsnwprintf
	mov	DWORD PTR L$[rsp], eax
; Line 19
	cmp	QWORD PTR Len$[rsp], 0
	je	SHORT $LN2@FormatExte
	mov	rax, QWORD PTR Len$[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@FormatExte:
; Line 20
	mov	rax, QWORD PTR R$[rsp]
; Line 21
	add	rsp, 56					; 00000038H
	ret	0
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ENDP		; FormatExtendedW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
R$ = 40
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z PROC		; FormatExtendedA
; File W:\cpp\void\dr\text.c
; Line 9
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 257				; 00000101H
	cdqe
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR R$[rsp], rax
; Line 10
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 256				; 00000100H
	cdqe
	mov	r9, QWORD PTR Args$[rsp]
	mov	r8, QWORD PTR FormatStr$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR R$[rsp]
	call	vsprintf_s
	mov	DWORD PTR L$[rsp], eax
; Line 11
	cmp	QWORD PTR Len$[rsp], 0
	je	SHORT $LN2@FormatExte
	mov	rax, QWORD PTR Len$[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@FormatExte:
; Line 12
	mov	rax, QWORD PTR R$[rsp]
; Line 13
	add	rsp, 56					; 00000038H
	ret	0
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z ENDP		; FormatExtendedA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
Args$1 = 40
tv79 = 48
tv86 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Location$ = 192
Expression$ = 200
IsTrue$ = 208
Message$ = 216
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ PROC	; AssertExtendedW
; File W:\cpp\void\dr\break.c
; Line 8
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 9
	cmp	DWORD PTR IsTrue$[rsp], 0
	jne	$LN2@AssertExte
; Line 12
	lea	rax, QWORD PTR Message$[rsp+8]
	mov	QWORD PTR Args$1[rsp], rax
; Line 14
	mov	rax, QWORD PTR Args$1[rsp]
	mov	QWORD PTR tv79[rsp], rax
	mov	rcx, QWORD PTR Message$[rsp]
	call	wcslen
	mov	DWORD PTR tv77[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv79[rsp]
	mov	rdx, QWORD PTR Message$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR tv86[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv86[rsp]
	lea	r8, OFFSET FLAT:$SG80076
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 16
	mov	QWORD PTR Args$1[rsp], 0
; Line 18
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR Expression$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ; DebugBreakExtended
	jmp	SHORT $LN1@AssertExte
$LN2@AssertExte:
; Line 21
	xor	eax, eax
$LN1@AssertExte:
; Line 22
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ENDP	; AssertExtendedW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileSize$1 = 64
FileRead$2 = 68
FileData$ = 72
FileHandle$ = 80
FileSizeHI$3 = 88
tv80 = 96
tv154 = 104
tv172 = 112
$T4 = 120
$T5 = 144
$T6 = 176
$T7 = 208
$T8 = 232
$T9 = 256
$T10 = 288
$T11 = 312
$T12 = 336
$T13 = 368
$T14 = 392
$T15 = 416
BytesRead$ = 480
Name$ = 488
?LoadFileData@@YAPEAXPEAIPEBD@Z PROC			; LoadFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 327
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 456				; 000001c8H
	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 327				; 00000147H
	lea	r8, OFFSET FLAT:$SG78753
	lea	rdx, OFFSET FLAT:$SG78754
	lea	rcx, QWORD PTR $T13[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR Name$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv80[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv80[rsp]
	lea	r8, OFFSET FLAT:$SG78752
	mov	edx, 2
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 329
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, -2147483648			; 80000000H
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR FileHandle$[rsp], rax
; Line 332
	mov	QWORD PTR FileData$[rsp], 0
; Line 334
	cmp	QWORD PTR FileHandle$[rsp], -1
	je	$LN2@LoadFileDa
; Line 335
	mov	DWORD PTR FileSize$1[rsp], 0
	mov	DWORD PTR FileSizeHI$3[rsp], 0
	mov	DWORD PTR FileRead$2[rsp], 0
; Line 336
	lea	rdx, QWORD PTR FileSizeHI$3[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_GetFileSize
	mov	DWORD PTR FileSize$1[rsp], eax
; Line 340
	mov	eax, DWORD PTR FileSize$1[rsp]
	mov	r9d, 4
	mov	r8d, 12288				; 00003000H
	mov	edx, eax
	xor	ecx, ecx
	call	QWORD PTR __imp_VirtualAlloc
	mov	QWORD PTR FileData$[rsp], rax
; Line 342
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR FileRead$2[rsp]
	mov	r8d, DWORD PTR FileSize$1[rsp]
	mov	rdx, QWORD PTR FileData$[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	$LN4@LoadFileDa
; Line 343
	mov	rcx, QWORD PTR FileData$[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 344
	mov	QWORD PTR FileData$[rsp], 0
; Line 346
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, 346				; 0000015aH
	lea	r8, OFFSET FLAT:$SG78759
	lea	rdx, OFFSET FLAT:$SG78760
	lea	rcx, QWORD PTR $T14[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv154[rsp], rax
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv154[rsp]
	lea	r8, OFFSET FLAT:$SG78758
	mov	edx, 6
	lea	rcx, QWORD PTR $T9[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@LoadFileDa:
; Line 349
	cmp	QWORD PTR BytesRead$[rsp], 0
	je	SHORT $LN5@LoadFileDa
; Line 350
	mov	rax, QWORD PTR BytesRead$[rsp]
	mov	ecx, DWORD PTR FileRead$2[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@LoadFileDa:
; Line 352
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 353
	jmp	$LN3@LoadFileDa
$LN2@LoadFileDa:
; Line 355
	mov	DWORD PTR [rsp+32], 13
	mov	r9d, 355				; 00000163H
	lea	r8, OFFSET FLAT:$SG78763
	lea	rdx, OFFSET FLAT:$SG78764
	lea	rcx, QWORD PTR $T15[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv172[rsp], rax
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv172[rsp]
	lea	r8, OFFSET FLAT:$SG78762
	mov	edx, 6
	lea	rcx, QWORD PTR $T12[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@LoadFileDa:
; Line 357
	mov	rax, QWORD PTR FileData$[rsp]
; Line 358
	add	rsp, 456				; 000001c8H
	pop	rdi
	pop	rsi
	ret	0
?LoadFileData@@YAPEAXPEAIPEBD@Z ENDP			; LoadFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
BytesWritten$ = 64
FileHandle$ = 72
tv95 = 80
tv144 = 88
$T1 = 96
$T2 = 120
$T3 = 144
$T4 = 176
$T5 = 200
$T6 = 224
$T7 = 256
$T8 = 280
BytesToWrite$ = 336
FileData$ = 344
Name$ = 352
?WriteFileData@@YAIIPEAXPEBD@Z PROC			; WriteFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 363
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 364
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 2
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, 1073741824				; 40000000H
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR FileHandle$[rsp], rax
; Line 367
	mov	DWORD PTR BytesWritten$[rsp], 0
; Line 369
	cmp	QWORD PTR FileHandle$[rsp], -1
	je	$LN2@WriteFileD
; Line 371
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR BytesWritten$[rsp]
	mov	r8d, DWORD PTR BytesToWrite$[rsp]
	mov	rdx, QWORD PTR FileData$[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	jne	$LN4@WriteFileD
; Line 372
	mov	DWORD PTR [rsp+32], 14
	mov	r9d, 372				; 00000174H
	lea	r8, OFFSET FLAT:$SG78780
	lea	rdx, OFFSET FLAT:$SG78781
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv95[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv95[rsp]
	lea	r8, OFFSET FLAT:$SG78779
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@WriteFileD:
; Line 375
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 376
	jmp	$LN3@WriteFileD
$LN2@WriteFileD:
; Line 378
	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 378				; 0000017aH
	lea	r8, OFFSET FLAT:$SG78783
	lea	rdx, OFFSET FLAT:$SG78784
	lea	rcx, QWORD PTR $T8[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv144[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv144[rsp]
	lea	r8, OFFSET FLAT:$SG78782
	mov	edx, 6
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@WriteFileD:
; Line 380
	mov	eax, DWORD PTR BytesWritten$[rsp]
; Line 381
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?WriteFileData@@YAIIPEAXPEBD@Z ENDP			; WriteFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileData$ = 48
?UnloadFileData@@YAXPEAX@Z PROC				; UnloadFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 322
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 32768				; 00008000H
	xor	edx, edx
	mov	rcx, QWORD PTR FileData$[rsp]
	call	QWORD PTR __imp_VirtualFree
; Line 323
	add	rsp, 40					; 00000028H
	ret	0
?UnloadFileData@@YAXPEAX@Z ENDP				; UnloadFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ButtonPressed$ = 48
Result$ = 52
ErrorMessage$ = 56
tv94 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
Location$ = 272
Expression$ = 280
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z PROC	; DebugBreakExtended
; File W:\cpp\void\dr\plat-win32.c
; Line 93
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR Result$[rsp], 1
; Line 95
	mov	rax, QWORD PTR Expression$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Location$[rsp]
	mov	r8d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG78569
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR ErrorMessage$[rsp], rax
; Line 98
	mov	r9d, 16
	lea	r8, OFFSET FLAT:$SG78570
	mov	rdx, QWORD PTR ErrorMessage$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_MessageBoxA
; Line 100
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78571
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 101
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78572
	mov	edx, 1
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 102
	mov	rdx, QWORD PTR ErrorMessage$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv94[rsp], rax
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv94[rsp]
	lea	r8, OFFSET FLAT:$SG78573
	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 103
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78574
	mov	edx, 1
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 105
	mov	r9d, 18
	lea	r8, OFFSET FLAT:$SG78575
	lea	rdx, OFFSET FLAT:$SG78576
	xor	ecx, ecx
	call	QWORD PTR __imp_MessageBoxA
	mov	DWORD PTR ButtonPressed$[rsp], eax
; Line 109
	cmp	DWORD PTR ButtonPressed$[rsp], 3
	jne	SHORT $LN2@DebugBreak
; Line 110
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
; Line 111
	jmp	SHORT $LN3@DebugBreak
$LN2@DebugBreak:
; Line 112
	cmp	DWORD PTR ButtonPressed$[rsp], 4
	jne	SHORT $LN4@DebugBreak
; Line 116
	call	QWORD PTR __imp_DebugBreak
; Line 117
	jmp	SHORT $LN5@DebugBreak
$LN4@DebugBreak:
; Line 118
	cmp	DWORD PTR ButtonPressed$[rsp], 5
	jne	SHORT $LN6@DebugBreak
; Line 119
	mov	DWORD PTR Result$[rsp], 0
$LN6@DebugBreak:
$LN5@DebugBreak:
$LN3@DebugBreak:
; Line 122
	mov	eax, DWORD PTR Result$[rsp]
$LN7@DebugBreak:
; Line 123
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ENDP	; DebugBreakExtended
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
Wrote$ = 52
tv77 = 56
Text$ = 80
?OutputW@@YAXPEB_W@Z PROC				; OutputW
; File W:\cpp\void\dr\plat-win32.c
; Line 46
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR Text$[rsp]
	call	QWORD PTR __imp_OutputDebugStringW
; Line 49
	mov	rcx, QWORD PTR Text$[rsp]
	call	wcslen
	mov	DWORD PTR tv79[rsp], eax
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR tv77[rsp], rax
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR Wrote$[rsp]
	mov	r8d, DWORD PTR tv79[rsp]
	mov	rdx, QWORD PTR Text$[rsp]
	mov	rcx, QWORD PTR tv77[rsp]
	call	QWORD PTR __imp_WriteConsoleW
	test	eax, eax
	jne	SHORT $LN2@OutputW
; Line 51
	lea	rcx, OFFSET FLAT:$SG78535
	call	printf
$LN2@OutputW:
; Line 53
	add	rsp, 72					; 00000048H
	ret	0
?OutputW@@YAXPEB_W@Z ENDP				; OutputW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
StringLen$ = 48
C$ = 52
StringBed$ = 56
Len$ = 80
Str$ = 88
?Widen@@YAPEA_WHPEBD@Z PROC				; Widen
; File W:\cpp\void\dr\plat-win32.c
; Line 69
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 70
	cmp	QWORD PTR Str$[rsp], 0
	jne	SHORT $LN2@Widen
; Line 71
	xor	eax, eax
	jmp	$LN1@Widen
$LN2@Widen:
; Line 74
	mov	DWORD PTR StringLen$[rsp], 0
; Line 75
	mov	QWORD PTR StringBed$[rsp], 0
; Line 78
	cmp	DWORD PTR Len$[rsp], -1
	jne	SHORT $LN3@Widen
	mov	rcx, QWORD PTR Str$[rsp]
	call	strlen
	mov	DWORD PTR Len$[rsp], eax
$LN3@Widen:
; Line 80
	mov	DWORD PTR C$[rsp], 0
; Line 82
	mov	DWORD PTR C$[rsp], 65001		; 0000fde9H
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	jne	SHORT $LN5@Widen
	mov	DWORD PTR C$[rsp], 0
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	jne	SHORT $LN5@Widen
	mov	DWORD PTR C$[rsp], 2
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	je	SHORT $LN4@Widen
$LN5@Widen:
; Line 85
	mov	eax, DWORD PTR StringLen$[rsp]
	inc	eax
	cdqe
	shl	rax, 1
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR StringBed$[rsp], rax
; Line 86
	mov	eax, DWORD PTR StringLen$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR StringBed$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
$LN4@Widen:
; Line 88
	mov	rax, QWORD PTR StringBed$[rsp]
$LN1@Widen:
; Line 89
	add	rsp, 72					; 00000048H
	ret	0
?Widen@@YAPEA_WHPEBD@Z ENDP				; Widen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
?GetPerformanceCounter@@YA_KXZ PROC			; GetPerformanceCounter
; File W:\cpp\void\dr\plat-win32.c
; Line 33
	sub	rsp, 56					; 00000038H
; Line 34
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 35
	mov	rax, QWORD PTR Result$[rsp]
; Line 36
	add	rsp, 56					; 00000038H
	ret	0
?GetPerformanceCounter@@YA_KXZ ENDP			; GetPerformanceCounter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
?GetPerformanceFrequency@@YA_KXZ PROC			; GetPerformanceFrequency
; File W:\cpp\void\dr\plat-win32.c
; Line 26
	sub	rsp, 56					; 00000038H
; Line 27
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 28
	mov	rax, QWORD PTR Result$[rsp]
; Line 29
	add	rsp, 56					; 00000038H
	ret	0
?GetPerformanceFrequency@@YA_KXZ ENDP			; GetPerformanceFrequency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?GetThreadID@@YAHXZ PROC				; GetThreadID
; File W:\cpp\void\dr\plat-win32.c
; Line 40
	sub	rsp, 40					; 00000028H
	call	QWORD PTR __imp_GetCurrentThreadId
; Line 41
	add	rsp, 40					; 00000028H
	ret	0
?GetThreadID@@YAHXZ ENDP				; GetThreadID
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?strtoi@@YA_JUstr32@@@Z PROC				; strtoi
; File W:\cpp\void\dr\str32.h
; Line 27
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR r$[rsp], -1
; Line 28
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+4]
	mov	r9, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [rax+4]
	lea	rdx, QWORD PTR r$[rsp]
	mov	ecx, 10
	call	?rx7__stoi@@YAHHPEA_JQEBD1@Z		; rx7__stoi
; Line 29
	mov	rax, QWORD PTR r$[rsp]
; Line 30
	add	rsp, 56					; 00000038H
	ret	0
?strtoi@@YA_JUstr32@@@Z ENDP				; strtoi
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
this$ = 32
??7str32@@QEAAHXZ PROC					; str32::operator!
; File W:\cpp\void\dr\str32.h
; Line 170
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 172
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[rsp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv66[rsp]
; Line 173
	add	rsp, 24
	ret	0
??7str32@@QEAAHXZ ENDP					; str32::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAHXZ PROC					; str32::operator int
; File W:\cpp\void\dr\str32.h
; Line 196
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 197
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 198
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAHXZ ENDP					; str32::operator int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAIXZ PROC					; str32::operator unsigned int
; File W:\cpp\void\dr\str32.h
; Line 191
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 192
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 193
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAIXZ ENDP					; str32::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAMXZ PROC					; str32::operator float
; File W:\cpp\void\dr\str32.h
; Line 206
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 207
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
	cvtsi2ss xmm0, rax
; Line 208
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAMXZ ENDP					; str32::operator float
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAANXZ PROC					; str32::operator double
; File W:\cpp\void\dr\str32.h
; Line 201
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 202
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
	cvtsi2sd xmm0, rax
; Line 203
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAANXZ ENDP					; str32::operator double
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAA_KXZ PROC					; str32::operator unsigned __int64
; File W:\cpp\void\dr\str32.h
; Line 186
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 187
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 188
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAA_KXZ ENDP					; str32::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAA_JXZ PROC					; str32::operator __int64
; File W:\cpp\void\dr\str32.h
; Line 181
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 182
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 183
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAA_JXZ ENDP					; str32::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 8
??Bstr32@@QEAAPEADXZ PROC				; str32::operator char *
; File W:\cpp\void\dr\str32.h
; Line 176
	mov	QWORD PTR [rsp+8], rcx
; Line 177
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+4]
; Line 178
	ret	0
??Bstr32@@QEAAPEADXZ ENDP				; str32::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memr$ = 48
UserData$ = 80
Flags$ = 88
Alignment$ = 96
OldSize$ = 104
OldMemr$ = 112
NewSize$ = 120
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; HEAP_ALLOCATOR
; File W:\cpp\void\dr\cator.c
; Line 67
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR Memr$[rsp], 0
; Line 69
	cmp	QWORD PTR NewSize$[rsp], 0
	je	SHORT $LN2@HEAP_ALLOC
; Line 70
	cmp	DWORD PTR Alignment$[rsp], 0
	je	SHORT $LN4@HEAP_ALLOC
; Line 71
	movsxd	rax, DWORD PTR Alignment$[rsp]
	mov	DWORD PTR [rsp+32], 71			; 00000047H
	lea	r9, OFFSET FLAT:$SG79987
	mov	r8, rax
	mov	rdx, QWORD PTR NewSize$[rsp]
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	_aligned_realloc_dbg
	mov	QWORD PTR Memr$[rsp], rax
; Line 72
	jmp	SHORT $LN5@HEAP_ALLOC
$LN4@HEAP_ALLOC:
; Line 73
	mov	rdx, QWORD PTR NewSize$[rsp]
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	realloc
	mov	QWORD PTR Memr$[rsp], rax
$LN5@HEAP_ALLOC:
; Line 76
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@HEAP_ALLOC
; Line 77
	mov	rax, QWORD PTR OldSize$[rsp]
	mov	rcx, QWORD PTR NewSize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR OldSize$[rsp]
	mov	rdx, QWORD PTR Memr$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN6@HEAP_ALLOC:
; Line 79
	jmp	SHORT $LN3@HEAP_ALLOC
$LN2@HEAP_ALLOC:
; Line 80
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	SHORT $LN7@HEAP_ALLOC
; Line 81
	cmp	DWORD PTR Alignment$[rsp], 0
	je	SHORT $LN8@HEAP_ALLOC
; Line 82
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	_aligned_free_dbg
; Line 83
	jmp	SHORT $LN9@HEAP_ALLOC
$LN8@HEAP_ALLOC:
; Line 84
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	free
$LN9@HEAP_ALLOC:
$LN7@HEAP_ALLOC:
$LN3@HEAP_ALLOC:
; Line 89
	mov	rax, QWORD PTR Memr$[rsp]
; Line 90
	add	rsp, 72					; 00000048H
	ret	0
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; HEAP_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv190 = 48
Mem$ = 56
tv95 = 64
$T1 = 72
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 216
UserData$ = 272
Flags$ = 280
Alignment$ = 288
OldSize$ = 296
OldMemr$ = 304
NewSize$ = 312
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; STATIC_ALLOCATOR
; File W:\cpp\void\dr\cator.c
; Line 20
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 34
	mov	eax, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@STATIC_ALL
	mov	eax, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax]
	or	eax, 1
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [r8+rcx], eax
	mov	edx, 16384				; 00004000H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR tv95[rsp], rax
	mov	eax, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rax+rcx], rdx
$LN2@STATIC_ALL:
; Line 36
	mov	eax, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	movsxd	rax, DWORD PTR [rcx+rax]
	add	rax, QWORD PTR NewSize$[rsp]
	cmp	rax, 16384				; 00004000H
	jb	$LN3@STATIC_ALL
; Line 38
	cmp	QWORD PTR NewSize$[rsp], 16384		; 00004000H
	jb	SHORT $LN4@STATIC_ALL
; Line 40
	mov	DWORD PTR [rsp+32], 34			; 00000022H
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:$SG79962
	lea	rdx, OFFSET FLAT:$SG79963
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79961
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 41
	xor	eax, eax
	jmp	$LN1@STATIC_ALL
$LN4@STATIC_ALL:
; Line 44
	mov	eax, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
$LN3@STATIC_ALL:
; Line 47
	mov	eax, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	edx, edx
	mov	edi, DWORD PTR _tls_index
	mov	rsi, QWORD PTR gs:88
	mov	rdi, QWORD PTR [rsi+rdi*8]
	movsxd	rdx, DWORD PTR [rdi+rdx]
	add	rdx, QWORD PTR [rcx+rax]
	mov	rax, rdx
	mov	QWORD PTR Mem$[rsp], rax
; Line 49
	mov	rax, QWORD PTR NewSize$[rsp]
	add	rax, 63					; 0000003fH
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	rcx
	imul	rax, rax, 64				; 00000040H
	mov	ecx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	add	eax, DWORD PTR [rdx+rcx]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rdi+rcx], eax
; Line 51
	cmp	QWORD PTR NewSize$[rsp], 0
	je	$LN5@STATIC_ALL
; Line 52
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	$LN7@STATIC_ALL
; Line 53
	mov	DWORD PTR [rsp+32], 35			; 00000023H
	mov	r9d, 53					; 00000035H
	lea	r8, OFFSET FLAT:$SG79970
	lea	rdx, OFFSET FLAT:$SG79971
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG79968
	test	rax, rax
	jne	SHORT $LN10@STATIC_ALL
	mov	DWORD PTR tv190[rsp], 1
	jmp	SHORT $LN11@STATIC_ALL
$LN10@STATIC_ALL:
	mov	DWORD PTR tv190[rsp], 0
$LN11@STATIC_ALL:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG79967
	mov	r8d, DWORD PTR tv190[rsp]
	lea	rdx, OFFSET FLAT:$SG79969
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@STATIC_ALL:
; Line 55
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@STATIC_ALL
; Line 56
	mov	rax, QWORD PTR OldSize$[rsp]
	mov	rcx, QWORD PTR NewSize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR OldSize$[rsp]
	mov	rdx, QWORD PTR Mem$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN8@STATIC_ALL:
$LN5@STATIC_ALL:
; Line 61
	mov	rax, QWORD PTR Mem$[rsp]
$LN1@STATIC_ALL:
; Line 62
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; STATIC_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
Zeroed$ = 80
Size$ = 88
?HeapAlloc@@YAPEAXH_K@Z PROC				; HeapAlloc
; File W:\cpp\void\dr\cator.c
; Line 99
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
	cmp	DWORD PTR Zeroed$[rsp], 0
	je	SHORT $LN3@HeapAlloc
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@HeapAlloc
$LN3@HeapAlloc:
	mov	DWORD PTR tv70[rsp], 0
$LN4@HeapAlloc:
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	mov	edx, DWORD PTR tv70[rsp]
	xor	ecx, ecx
	call	?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; HEAP_ALLOCATOR
; Line 101
	add	rsp, 72					; 00000048H
	ret	0
?HeapAlloc@@YAPEAXH_K@Z ENDP				; HeapAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
Zeroed$ = 80
Size$ = 88
?StaticAlloc@@YAPEAXH_K@Z PROC				; StaticAlloc
; File W:\cpp\void\dr\cator.c
; Line 105
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
	cmp	DWORD PTR Zeroed$[rsp], 0
	je	SHORT $LN3@StaticAllo
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@StaticAllo
$LN3@StaticAllo:
	mov	DWORD PTR tv70[rsp], 0
$LN4@StaticAllo:
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	mov	edx, DWORD PTR tv70[rsp]
	xor	ecx, ecx
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; Line 107
	add	rsp, 72					; 00000048H
	ret	0
?StaticAlloc@@YAPEAXH_K@Z ENDP				; StaticAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Output$ = 48
tv79 = 52
tv94 = 56
tv154 = 60
FormatArguments$ = 64
tv81 = 72
tv83 = 80
tv128 = 88
Formatted$1 = 96
tv152 = 104
tv150 = 112
tv148 = 120
$T2 = 128
$T3 = 160
Location$ = 224
TraceMessageKind$ = 232
FormatString$ = 240
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ PROC	; OutputTraceMessage
; File W:\cpp\void\dr\trace.c
; Line 22
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 25
	lea	rax, QWORD PTR FormatString$[rsp+8]
	mov	QWORD PTR FormatArguments$[rsp], rax
; Line 27
	mov	DWORD PTR Output$[rsp], 1
; Line 28
	cmp	QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA, 0
	je	$LN2@OutputTrac
; Line 29
	mov	rax, QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR FormatArguments$[rsp]
	mov	QWORD PTR tv81[rsp], rax
	mov	rcx, QWORD PTR FormatString$[rsp]
	call	wcslen
	mov	DWORD PTR tv79[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR FormatString$[rsp]
	mov	r8d, DWORD PTR tv79[rsp]
	mov	edx, DWORD PTR TraceMessageKind$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR tv83[rsp]
	mov	DWORD PTR Output$[rsp], eax
$LN2@OutputTrac:
; Line 33
	cmp	DWORD PTR Output$[rsp], 0
	je	$LN3@OutputTrac
; Line 35
	mov	rax, QWORD PTR FormatArguments$[rsp]
	mov	QWORD PTR tv128[rsp], rax
	mov	rcx, QWORD PTR FormatString$[rsp]
	call	wcslen
	mov	DWORD PTR tv94[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv128[rsp]
	mov	rdx, QWORD PTR FormatString$[rsp]
	mov	ecx, DWORD PTR tv94[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR Formatted$1[rsp], rax
; Line 37
	call	?GetThreadID@@YAHXZ			; GetThreadID
	mov	DWORD PTR tv154[rsp], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv152[rsp], rax
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv150[rsp], rax
	mov	ecx, DWORD PTR TraceMessageKind$[rsp]
	call	?TraceMessageKindToString@@YAPEB_WH@Z	; TraceMessageKindToString
	mov	QWORD PTR tv148[rsp], rax
	mov	rax, QWORD PTR Formatted$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv152[rsp]
	mov	r8, QWORD PTR tv150[rsp]
	mov	rdx, QWORD PTR tv148[rsp]
	lea	rcx, OFFSET FLAT:$SG80044
	call	?FormatW@@YAPEA_WPEB_WZZ		; FormatW
	mov	rcx, rax
	call	?OutputW@@YAXPEB_W@Z			; OutputW
$LN3@OutputTrac:
; Line 42
	mov	QWORD PTR FormatArguments$[rsp], 0
; Line 43
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ENDP	; OutputTraceMessage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 8
File$ = 16
Func$ = 24
Line$ = 32
Guid$ = 40
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z PROC	; TraceLocation
; File W:\cpp\void\dr\trace.h
; Line 40
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 43
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rcx, QWORD PTR File$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	rcx, QWORD PTR Func$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Line$[rsp]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	mov	ecx, DWORD PTR Guid$[rsp]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 46
	ret	0
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ENDP	; TraceLocation
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
CounterB$ = 48
tv68 = 56
CounterE$ = 64
$T1 = 80
this$ = 144
??1_TRACE_BLOCK@@QEAA@XZ PROC				; _TRACE_BLOCK::~_TRACE_BLOCK
; File W:\cpp\void\dr\trace.c
; Line 54
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	call	?GetPerformanceCounter@@YA_KXZ		; GetPerformanceCounter
	mov	QWORD PTR CounterB$[rsp], rax
; Line 55
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR CounterB$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN5@TRACE_BLOC
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@TRACE_BLOC
$LN5@TRACE_BLOC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@TRACE_BLOC:
	movsd	xmm1, QWORD PTR __real@408f400000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv68[rsp], xmm0
	call	?GetPerformanceFrequency@@YA_KXZ	; GetPerformanceFrequency
	test	rax, rax
	jl	SHORT $LN3@TRACE_BLOC
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@TRACE_BLOC
$LN3@TRACE_BLOC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@TRACE_BLOC:
	movsd	xmm1, QWORD PTR tv68[rsp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR CounterE$[rsp], xmm0
; Line 57
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+8]
	mov	ecx, 24
	rep movsb
	movsd	xmm0, QWORD PTR CounterE$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:$SG80058
	mov	edx, 2
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 58
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??1_TRACE_BLOCK@@QEAA@XZ ENDP				; _TRACE_BLOCK::~_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 64
Location$ = 72
FriendlyName$ = 80
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z PROC	; _TRACE_BLOCK::_TRACE_BLOCK
; File W:\cpp\void\dr\trace.c
; Line 48
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
; Line 49
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR FriendlyName$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 50
	call	?GetPerformanceCounter@@YA_KXZ		; GetPerformanceCounter
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 51
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z ENDP	; _TRACE_BLOCK::_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 4
res$ = 8
cur$ = 16
x$ = 24
tv88 = 32
tv134 = 40
tv148 = 48
base$ = 80
val$ = 88
min$ = 96
max$ = 104
?rx7__stoi@@YAHHPEA_JQEBD1@Z PROC			; rx7__stoi
; File W:\cpp\void\dr\rx7-text.h
; Line 124
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 125
	mov	QWORD PTR x$[rsp], 0
; Line 126
	mov	DWORD PTR s$[rsp], 1
; Line 128
	mov	rax, QWORD PTR min$[rsp]
	mov	QWORD PTR cur$[rsp], rax
$LN2@rx7__stoi:
; Line 133
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR cur$[rsp], rax
	je	SHORT $LN7@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN6@rx7__stoi
$LN7@rx7__stoi:
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN6@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN3@rx7__stoi
$LN6@rx7__stoi:
; Line 136
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN16@rx7__stoi
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN17@rx7__stoi
$LN16@rx7__stoi:
	mov	DWORD PTR tv73[rsp], 1
$LN17@rx7__stoi:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR s$[rsp], eax
; Line 137
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
; Line 138
	jmp	SHORT $LN2@rx7__stoi
$LN3@rx7__stoi:
$LN4@rx7__stoi:
; Line 141
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR cur$[rsp], rax
	jae	$LN5@rx7__stoi
; Line 142
	cmp	DWORD PTR base$[rsp], 10
	jl	SHORT $LN8@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN8@rx7__stoi
; Line 143
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR cur$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR tv88[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	rax, QWORD PTR tv88[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 144
	jmp	$LN9@rx7__stoi
$LN8@rx7__stoi:
; Line 145
	cmp	DWORD PTR base$[rsp], 16
	jne	SHORT $LN10@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN10@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN10@rx7__stoi
; Line 146
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR cur$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR tv134[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	rax, QWORD PTR tv134[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 147
	jmp	SHORT $LN11@rx7__stoi
$LN10@rx7__stoi:
; Line 148
	cmp	DWORD PTR base$[rsp], 16
	jne	SHORT $LN12@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN12@rx7__stoi
	mov	rax, QWORD PTR cur$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN12@rx7__stoi
; Line 149
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR cur$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR tv148[rsp], rax
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	rax, QWORD PTR tv148[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 150
	jmp	SHORT $LN13@rx7__stoi
$LN12@rx7__stoi:
; Line 151
	jmp	SHORT $LN5@rx7__stoi
$LN13@rx7__stoi:
$LN11@rx7__stoi:
$LN9@rx7__stoi:
; Line 153
	jmp	$LN4@rx7__stoi
$LN5@rx7__stoi:
; Line 156
	mov	rax, QWORD PTR min$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR res$[rsp], eax
; Line 157
	cmp	DWORD PTR res$[rsp], 0
	je	SHORT $LN14@rx7__stoi
; Line 158
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rcx], rax
$LN14@rx7__stoi:
; Line 160
	mov	eax, DWORD PTR res$[rsp]
; Line 161
	add	rsp, 72					; 00000048H
	ret	0
?rx7__stoi@@YAHHPEA_JQEBD1@Z ENDP			; rx7__stoi
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?strstr@@YAPEADQEADQEBD@Z
_TEXT	SEGMENT
_String$ = 48
_SubString$ = 56
?strstr@@YAPEADQEADQEBD@Z PROC				; strstr, COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\string.h
; Line 519
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 520
	mov	rdx, QWORD PTR _SubString$[rsp]
	mov	rcx, QWORD PTR _String$[rsp]
	call	strstr
; Line 521
	add	rsp, 40					; 00000028H
	ret	0
?strstr@@YAPEADQEADQEBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?strrchr@@YAPEADQEADH@Z
_TEXT	SEGMENT
_String$ = 48
_Ch$ = 56
?strrchr@@YAPEADQEADH@Z PROC				; strrchr, COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\string.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 514
	mov	edx, DWORD PTR _Ch$[rsp]
	mov	rcx, QWORD PTR _String$[rsp]
	call	strrchr
; Line 515
	add	rsp, 40					; 00000028H
	ret	0
?strrchr@@YAPEADQEADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?strchr@@YAPEADQEADH@Z
_TEXT	SEGMENT
_String$ = 48
_Ch$ = 56
?strchr@@YAPEADQEADH@Z PROC				; strchr, COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\string.h
; Line 501
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 502
	mov	edx, DWORD PTR _Ch$[rsp]
	mov	rcx, QWORD PTR _String$[rsp]
	call	strchr
; Line 503
	add	rsp, 40					; 00000028H
	ret	0
?strchr@@YAPEADQEADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 2247
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 2250
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 2251
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsscanf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 2252
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 2253
	mov	eax, DWORD PTR _Result$[rsp]
; Line 2254
	add	rsp, 56					; 00000038H
	ret	0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 2152
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2153
	call	__local_stdio_scanf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, -1
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsscanf
; Line 2156
	add	rsp, 56					; 00000038H
	ret	0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 56
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
sprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1823
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1826
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1827
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_s_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1828
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1829
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1830
	add	rsp, 72					; 00000048H
	ret	0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1771
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1774
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1776
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1778
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1779
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1780
	add	rsp, 56					; 00000038H
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT vsprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1512
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_s_l
; Line 1514
	add	rsp, 56					; 00000038H
	ret	0
vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1490
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1491
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
	mov	DWORD PTR _Result$[rsp], eax
; Line 1495
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsprintf_s
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1496
	add	rsp, 72					; 00000048H
	ret	0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1458
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1459
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, -1
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l
; Line 1460
	add	rsp, 56					; 00000038H
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnprintf PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1411
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1412
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l
; Line 1413
	add	rsp, 56					; 00000038H
	ret	0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1391
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1392
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	__stdio_common_vsprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1396
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1397
	add	rsp, 72					; 00000048H
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
tv77 = 48
tv75 = 56
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR tv77[rsp], rax
	mov	ecx, 1
	call	__acrt_iob_func
	mov	QWORD PTR tv75[rsp], rax
	mov	r9, QWORD PTR tv77[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 72					; 00000048H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 837
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 840
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 841
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Stream$[rsp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 842
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 843
	mov	eax, DWORD PTR _Result$[rsp]
; Line 844
	add	rsp, 56					; 00000038H
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnwprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnwprintf PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1129
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1130
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnwprintf_l
; Line 1131
	add	rsp, 56					; 00000038H
	ret	0
_vsnwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnwprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnwprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1061
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1062
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	__stdio_common_vswprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1066
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnwprintf
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnwprintf
$LN3@vsnwprintf:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnwprintf:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1067
	add	rsp, 72					; 00000048H
	ret	0
_vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 102
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 103
	ret	0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END

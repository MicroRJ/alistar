// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_s2clientprotocol_2fquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_s2clientprotocol_2fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "s2clientprotocol/common.pb.h"
#include "s2clientprotocol/error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2clientprotocol_2fquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_s2clientprotocol_2fquery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s2clientprotocol_2fquery_2eproto;
namespace SC2APIProtocol {
class RequestQuery;
struct RequestQueryDefaultTypeInternal;
extern RequestQueryDefaultTypeInternal _RequestQuery_default_instance_;
class RequestQueryAvailableAbilities;
struct RequestQueryAvailableAbilitiesDefaultTypeInternal;
extern RequestQueryAvailableAbilitiesDefaultTypeInternal _RequestQueryAvailableAbilities_default_instance_;
class RequestQueryBuildingPlacement;
struct RequestQueryBuildingPlacementDefaultTypeInternal;
extern RequestQueryBuildingPlacementDefaultTypeInternal _RequestQueryBuildingPlacement_default_instance_;
class RequestQueryPathing;
struct RequestQueryPathingDefaultTypeInternal;
extern RequestQueryPathingDefaultTypeInternal _RequestQueryPathing_default_instance_;
class ResponseQuery;
struct ResponseQueryDefaultTypeInternal;
extern ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
class ResponseQueryAvailableAbilities;
struct ResponseQueryAvailableAbilitiesDefaultTypeInternal;
extern ResponseQueryAvailableAbilitiesDefaultTypeInternal _ResponseQueryAvailableAbilities_default_instance_;
class ResponseQueryBuildingPlacement;
struct ResponseQueryBuildingPlacementDefaultTypeInternal;
extern ResponseQueryBuildingPlacementDefaultTypeInternal _ResponseQueryBuildingPlacement_default_instance_;
class ResponseQueryPathing;
struct ResponseQueryPathingDefaultTypeInternal;
extern ResponseQueryPathingDefaultTypeInternal _ResponseQueryPathing_default_instance_;
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::SC2APIProtocol::RequestQuery* Arena::CreateMaybeMessage<::SC2APIProtocol::RequestQuery>(Arena*);
template<> ::SC2APIProtocol::RequestQueryAvailableAbilities* Arena::CreateMaybeMessage<::SC2APIProtocol::RequestQueryAvailableAbilities>(Arena*);
template<> ::SC2APIProtocol::RequestQueryBuildingPlacement* Arena::CreateMaybeMessage<::SC2APIProtocol::RequestQueryBuildingPlacement>(Arena*);
template<> ::SC2APIProtocol::RequestQueryPathing* Arena::CreateMaybeMessage<::SC2APIProtocol::RequestQueryPathing>(Arena*);
template<> ::SC2APIProtocol::ResponseQuery* Arena::CreateMaybeMessage<::SC2APIProtocol::ResponseQuery>(Arena*);
template<> ::SC2APIProtocol::ResponseQueryAvailableAbilities* Arena::CreateMaybeMessage<::SC2APIProtocol::ResponseQueryAvailableAbilities>(Arena*);
template<> ::SC2APIProtocol::ResponseQueryBuildingPlacement* Arena::CreateMaybeMessage<::SC2APIProtocol::ResponseQueryBuildingPlacement>(Arena*);
template<> ::SC2APIProtocol::ResponseQueryPathing* Arena::CreateMaybeMessage<::SC2APIProtocol::ResponseQueryPathing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SC2APIProtocol {

// ===================================================================

class RequestQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.RequestQuery) */ {
 public:
  inline RequestQuery() : RequestQuery(nullptr) {}
  ~RequestQuery() override;
  explicit PROTOBUF_CONSTEXPR RequestQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestQuery(const RequestQuery& from);
  RequestQuery(RequestQuery&& from) noexcept
    : RequestQuery() {
    *this = ::std::move(from);
  }

  inline RequestQuery& operator=(const RequestQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestQuery& operator=(RequestQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestQuery* internal_default_instance() {
    return reinterpret_cast<const RequestQuery*>(
               &_RequestQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestQuery& a, RequestQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestQuery& from) {
    RequestQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.RequestQuery";
  }
  protected:
  explicit RequestQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathingFieldNumber = 1,
    kAbilitiesFieldNumber = 2,
    kPlacementsFieldNumber = 3,
    kIgnoreResourceRequirementsFieldNumber = 4,
  };
  // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
  int pathing_size() const;
  private:
  int _internal_pathing_size() const;
  public:
  void clear_pathing();
  ::SC2APIProtocol::RequestQueryPathing* mutable_pathing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing >*
      mutable_pathing();
  private:
  const ::SC2APIProtocol::RequestQueryPathing& _internal_pathing(int index) const;
  ::SC2APIProtocol::RequestQueryPathing* _internal_add_pathing();
  public:
  const ::SC2APIProtocol::RequestQueryPathing& pathing(int index) const;
  ::SC2APIProtocol::RequestQueryPathing* add_pathing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing >&
      pathing() const;

  // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::SC2APIProtocol::RequestQueryAvailableAbilities* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities >*
      mutable_abilities();
  private:
  const ::SC2APIProtocol::RequestQueryAvailableAbilities& _internal_abilities(int index) const;
  ::SC2APIProtocol::RequestQueryAvailableAbilities* _internal_add_abilities();
  public:
  const ::SC2APIProtocol::RequestQueryAvailableAbilities& abilities(int index) const;
  ::SC2APIProtocol::RequestQueryAvailableAbilities* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities >&
      abilities() const;

  // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
  int placements_size() const;
  private:
  int _internal_placements_size() const;
  public:
  void clear_placements();
  ::SC2APIProtocol::RequestQueryBuildingPlacement* mutable_placements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement >*
      mutable_placements();
  private:
  const ::SC2APIProtocol::RequestQueryBuildingPlacement& _internal_placements(int index) const;
  ::SC2APIProtocol::RequestQueryBuildingPlacement* _internal_add_placements();
  public:
  const ::SC2APIProtocol::RequestQueryBuildingPlacement& placements(int index) const;
  ::SC2APIProtocol::RequestQueryBuildingPlacement* add_placements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement >&
      placements() const;

  // optional bool ignore_resource_requirements = 4;
  bool has_ignore_resource_requirements() const;
  private:
  bool _internal_has_ignore_resource_requirements() const;
  public:
  void clear_ignore_resource_requirements();
  bool ignore_resource_requirements() const;
  void set_ignore_resource_requirements(bool value);
  private:
  bool _internal_ignore_resource_requirements() const;
  void _internal_set_ignore_resource_requirements(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.RequestQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing > pathing_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement > placements_;
    bool ignore_resource_requirements_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class ResponseQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ResponseQuery) */ {
 public:
  inline ResponseQuery() : ResponseQuery(nullptr) {}
  ~ResponseQuery() override;
  explicit PROTOBUF_CONSTEXPR ResponseQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQuery(const ResponseQuery& from);
  ResponseQuery(ResponseQuery&& from) noexcept
    : ResponseQuery() {
    *this = ::std::move(from);
  }

  inline ResponseQuery& operator=(const ResponseQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQuery& operator=(ResponseQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQuery* internal_default_instance() {
    return reinterpret_cast<const ResponseQuery*>(
               &_ResponseQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseQuery& a, ResponseQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQuery& from) {
    ResponseQuery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.ResponseQuery";
  }
  protected:
  explicit ResponseQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathingFieldNumber = 1,
    kAbilitiesFieldNumber = 2,
    kPlacementsFieldNumber = 3,
  };
  // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
  int pathing_size() const;
  private:
  int _internal_pathing_size() const;
  public:
  void clear_pathing();
  ::SC2APIProtocol::ResponseQueryPathing* mutable_pathing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing >*
      mutable_pathing();
  private:
  const ::SC2APIProtocol::ResponseQueryPathing& _internal_pathing(int index) const;
  ::SC2APIProtocol::ResponseQueryPathing* _internal_add_pathing();
  public:
  const ::SC2APIProtocol::ResponseQueryPathing& pathing(int index) const;
  ::SC2APIProtocol::ResponseQueryPathing* add_pathing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing >&
      pathing() const;

  // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::SC2APIProtocol::ResponseQueryAvailableAbilities* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities >*
      mutable_abilities();
  private:
  const ::SC2APIProtocol::ResponseQueryAvailableAbilities& _internal_abilities(int index) const;
  ::SC2APIProtocol::ResponseQueryAvailableAbilities* _internal_add_abilities();
  public:
  const ::SC2APIProtocol::ResponseQueryAvailableAbilities& abilities(int index) const;
  ::SC2APIProtocol::ResponseQueryAvailableAbilities* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities >&
      abilities() const;

  // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
  int placements_size() const;
  private:
  int _internal_placements_size() const;
  public:
  void clear_placements();
  ::SC2APIProtocol::ResponseQueryBuildingPlacement* mutable_placements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement >*
      mutable_placements();
  private:
  const ::SC2APIProtocol::ResponseQueryBuildingPlacement& _internal_placements(int index) const;
  ::SC2APIProtocol::ResponseQueryBuildingPlacement* _internal_add_placements();
  public:
  const ::SC2APIProtocol::ResponseQueryBuildingPlacement& placements(int index) const;
  ::SC2APIProtocol::ResponseQueryBuildingPlacement* add_placements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement >&
      placements() const;

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ResponseQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing > pathing_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities > abilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement > placements_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class RequestQueryPathing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.RequestQueryPathing) */ {
 public:
  inline RequestQueryPathing() : RequestQueryPathing(nullptr) {}
  ~RequestQueryPathing() override;
  explicit PROTOBUF_CONSTEXPR RequestQueryPathing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestQueryPathing(const RequestQueryPathing& from);
  RequestQueryPathing(RequestQueryPathing&& from) noexcept
    : RequestQueryPathing() {
    *this = ::std::move(from);
  }

  inline RequestQueryPathing& operator=(const RequestQueryPathing& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestQueryPathing& operator=(RequestQueryPathing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestQueryPathing& default_instance() {
    return *internal_default_instance();
  }
  enum StartCase {
    kStartPos = 1,
    kUnitTag = 2,
    START_NOT_SET = 0,
  };

  static inline const RequestQueryPathing* internal_default_instance() {
    return reinterpret_cast<const RequestQueryPathing*>(
               &_RequestQueryPathing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestQueryPathing& a, RequestQueryPathing& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestQueryPathing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestQueryPathing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestQueryPathing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestQueryPathing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestQueryPathing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestQueryPathing& from) {
    RequestQueryPathing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestQueryPathing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.RequestQueryPathing";
  }
  protected:
  explicit RequestQueryPathing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPosFieldNumber = 3,
    kStartPosFieldNumber = 1,
    kUnitTagFieldNumber = 2,
  };
  // optional .SC2APIProtocol.Point2D end_pos = 3;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::SC2APIProtocol::Point2D& end_pos() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::Point2D* release_end_pos();
  ::SC2APIProtocol::Point2D* mutable_end_pos();
  void set_allocated_end_pos(::SC2APIProtocol::Point2D* end_pos);
  private:
  const ::SC2APIProtocol::Point2D& _internal_end_pos() const;
  ::SC2APIProtocol::Point2D* _internal_mutable_end_pos();
  public:
  void unsafe_arena_set_allocated_end_pos(
      ::SC2APIProtocol::Point2D* end_pos);
  ::SC2APIProtocol::Point2D* unsafe_arena_release_end_pos();

  // .SC2APIProtocol.Point2D start_pos = 1;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::SC2APIProtocol::Point2D& start_pos() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::Point2D* release_start_pos();
  ::SC2APIProtocol::Point2D* mutable_start_pos();
  void set_allocated_start_pos(::SC2APIProtocol::Point2D* start_pos);
  private:
  const ::SC2APIProtocol::Point2D& _internal_start_pos() const;
  ::SC2APIProtocol::Point2D* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::SC2APIProtocol::Point2D* start_pos);
  ::SC2APIProtocol::Point2D* unsafe_arena_release_start_pos();

  // uint64 unit_tag = 2;
  bool has_unit_tag() const;
  private:
  bool _internal_has_unit_tag() const;
  public:
  void clear_unit_tag();
  uint64_t unit_tag() const;
  void set_unit_tag(uint64_t value);
  private:
  uint64_t _internal_unit_tag() const;
  void _internal_set_unit_tag(uint64_t value);
  public:

  void clear_start();
  StartCase start_case() const;
  // @@protoc_insertion_point(class_scope:SC2APIProtocol.RequestQueryPathing)
 private:
  class _Internal;
  void set_has_start_pos();
  void set_has_unit_tag();

  inline bool has_start() const;
  inline void clear_has_start();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SC2APIProtocol::Point2D* end_pos_;
    union StartUnion {
      constexpr StartUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::SC2APIProtocol::Point2D* start_pos_;
      uint64_t unit_tag_;
    } start_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class ResponseQueryPathing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ResponseQueryPathing) */ {
 public:
  inline ResponseQueryPathing() : ResponseQueryPathing(nullptr) {}
  ~ResponseQueryPathing() override;
  explicit PROTOBUF_CONSTEXPR ResponseQueryPathing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryPathing(const ResponseQueryPathing& from);
  ResponseQueryPathing(ResponseQueryPathing&& from) noexcept
    : ResponseQueryPathing() {
    *this = ::std::move(from);
  }

  inline ResponseQueryPathing& operator=(const ResponseQueryPathing& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryPathing& operator=(ResponseQueryPathing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryPathing& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryPathing* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryPathing*>(
               &_ResponseQueryPathing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseQueryPathing& a, ResponseQueryPathing& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryPathing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryPathing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryPathing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryPathing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryPathing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryPathing& from) {
    ResponseQueryPathing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryPathing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.ResponseQueryPathing";
  }
  protected:
  explicit ResponseQueryPathing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
  };
  // optional float distance = 1;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ResponseQueryPathing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class RequestQueryAvailableAbilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.RequestQueryAvailableAbilities) */ {
 public:
  inline RequestQueryAvailableAbilities() : RequestQueryAvailableAbilities(nullptr) {}
  ~RequestQueryAvailableAbilities() override;
  explicit PROTOBUF_CONSTEXPR RequestQueryAvailableAbilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestQueryAvailableAbilities(const RequestQueryAvailableAbilities& from);
  RequestQueryAvailableAbilities(RequestQueryAvailableAbilities&& from) noexcept
    : RequestQueryAvailableAbilities() {
    *this = ::std::move(from);
  }

  inline RequestQueryAvailableAbilities& operator=(const RequestQueryAvailableAbilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestQueryAvailableAbilities& operator=(RequestQueryAvailableAbilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestQueryAvailableAbilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestQueryAvailableAbilities* internal_default_instance() {
    return reinterpret_cast<const RequestQueryAvailableAbilities*>(
               &_RequestQueryAvailableAbilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestQueryAvailableAbilities& a, RequestQueryAvailableAbilities& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestQueryAvailableAbilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestQueryAvailableAbilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestQueryAvailableAbilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestQueryAvailableAbilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestQueryAvailableAbilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestQueryAvailableAbilities& from) {
    RequestQueryAvailableAbilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestQueryAvailableAbilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.RequestQueryAvailableAbilities";
  }
  protected:
  explicit RequestQueryAvailableAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitTagFieldNumber = 1,
  };
  // optional uint64 unit_tag = 1;
  bool has_unit_tag() const;
  private:
  bool _internal_has_unit_tag() const;
  public:
  void clear_unit_tag();
  uint64_t unit_tag() const;
  void set_unit_tag(uint64_t value);
  private:
  uint64_t _internal_unit_tag() const;
  void _internal_set_unit_tag(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.RequestQueryAvailableAbilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t unit_tag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class ResponseQueryAvailableAbilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ResponseQueryAvailableAbilities) */ {
 public:
  inline ResponseQueryAvailableAbilities() : ResponseQueryAvailableAbilities(nullptr) {}
  ~ResponseQueryAvailableAbilities() override;
  explicit PROTOBUF_CONSTEXPR ResponseQueryAvailableAbilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryAvailableAbilities(const ResponseQueryAvailableAbilities& from);
  ResponseQueryAvailableAbilities(ResponseQueryAvailableAbilities&& from) noexcept
    : ResponseQueryAvailableAbilities() {
    *this = ::std::move(from);
  }

  inline ResponseQueryAvailableAbilities& operator=(const ResponseQueryAvailableAbilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryAvailableAbilities& operator=(ResponseQueryAvailableAbilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryAvailableAbilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryAvailableAbilities* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryAvailableAbilities*>(
               &_ResponseQueryAvailableAbilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseQueryAvailableAbilities& a, ResponseQueryAvailableAbilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryAvailableAbilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryAvailableAbilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryAvailableAbilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryAvailableAbilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryAvailableAbilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryAvailableAbilities& from) {
    ResponseQueryAvailableAbilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryAvailableAbilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.ResponseQueryAvailableAbilities";
  }
  protected:
  explicit ResponseQueryAvailableAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 1,
    kUnitTagFieldNumber = 2,
    kUnitTypeIdFieldNumber = 3,
  };
  // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::SC2APIProtocol::AvailableAbility* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >*
      mutable_abilities();
  private:
  const ::SC2APIProtocol::AvailableAbility& _internal_abilities(int index) const;
  ::SC2APIProtocol::AvailableAbility* _internal_add_abilities();
  public:
  const ::SC2APIProtocol::AvailableAbility& abilities(int index) const;
  ::SC2APIProtocol::AvailableAbility* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >&
      abilities() const;

  // optional uint64 unit_tag = 2;
  bool has_unit_tag() const;
  private:
  bool _internal_has_unit_tag() const;
  public:
  void clear_unit_tag();
  uint64_t unit_tag() const;
  void set_unit_tag(uint64_t value);
  private:
  uint64_t _internal_unit_tag() const;
  void _internal_set_unit_tag(uint64_t value);
  public:

  // optional uint32 unit_type_id = 3;
  bool has_unit_type_id() const;
  private:
  bool _internal_has_unit_type_id() const;
  public:
  void clear_unit_type_id();
  uint32_t unit_type_id() const;
  void set_unit_type_id(uint32_t value);
  private:
  uint32_t _internal_unit_type_id() const;
  void _internal_set_unit_type_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ResponseQueryAvailableAbilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility > abilities_;
    uint64_t unit_tag_;
    uint32_t unit_type_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class RequestQueryBuildingPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.RequestQueryBuildingPlacement) */ {
 public:
  inline RequestQueryBuildingPlacement() : RequestQueryBuildingPlacement(nullptr) {}
  ~RequestQueryBuildingPlacement() override;
  explicit PROTOBUF_CONSTEXPR RequestQueryBuildingPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestQueryBuildingPlacement(const RequestQueryBuildingPlacement& from);
  RequestQueryBuildingPlacement(RequestQueryBuildingPlacement&& from) noexcept
    : RequestQueryBuildingPlacement() {
    *this = ::std::move(from);
  }

  inline RequestQueryBuildingPlacement& operator=(const RequestQueryBuildingPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestQueryBuildingPlacement& operator=(RequestQueryBuildingPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestQueryBuildingPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestQueryBuildingPlacement* internal_default_instance() {
    return reinterpret_cast<const RequestQueryBuildingPlacement*>(
               &_RequestQueryBuildingPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestQueryBuildingPlacement& a, RequestQueryBuildingPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestQueryBuildingPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestQueryBuildingPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestQueryBuildingPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestQueryBuildingPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestQueryBuildingPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestQueryBuildingPlacement& from) {
    RequestQueryBuildingPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestQueryBuildingPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.RequestQueryBuildingPlacement";
  }
  protected:
  explicit RequestQueryBuildingPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPosFieldNumber = 2,
    kPlacingUnitTagFieldNumber = 3,
    kAbilityIdFieldNumber = 1,
  };
  // optional .SC2APIProtocol.Point2D target_pos = 2;
  bool has_target_pos() const;
  private:
  bool _internal_has_target_pos() const;
  public:
  void clear_target_pos();
  const ::SC2APIProtocol::Point2D& target_pos() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::Point2D* release_target_pos();
  ::SC2APIProtocol::Point2D* mutable_target_pos();
  void set_allocated_target_pos(::SC2APIProtocol::Point2D* target_pos);
  private:
  const ::SC2APIProtocol::Point2D& _internal_target_pos() const;
  ::SC2APIProtocol::Point2D* _internal_mutable_target_pos();
  public:
  void unsafe_arena_set_allocated_target_pos(
      ::SC2APIProtocol::Point2D* target_pos);
  ::SC2APIProtocol::Point2D* unsafe_arena_release_target_pos();

  // optional uint64 placing_unit_tag = 3;
  bool has_placing_unit_tag() const;
  private:
  bool _internal_has_placing_unit_tag() const;
  public:
  void clear_placing_unit_tag();
  uint64_t placing_unit_tag() const;
  void set_placing_unit_tag(uint64_t value);
  private:
  uint64_t _internal_placing_unit_tag() const;
  void _internal_set_placing_unit_tag(uint64_t value);
  public:

  // optional int32 ability_id = 1;
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.RequestQueryBuildingPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SC2APIProtocol::Point2D* target_pos_;
    uint64_t placing_unit_tag_;
    int32_t ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// -------------------------------------------------------------------

class ResponseQueryBuildingPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ResponseQueryBuildingPlacement) */ {
 public:
  inline ResponseQueryBuildingPlacement() : ResponseQueryBuildingPlacement(nullptr) {}
  ~ResponseQueryBuildingPlacement() override;
  explicit PROTOBUF_CONSTEXPR ResponseQueryBuildingPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseQueryBuildingPlacement(const ResponseQueryBuildingPlacement& from);
  ResponseQueryBuildingPlacement(ResponseQueryBuildingPlacement&& from) noexcept
    : ResponseQueryBuildingPlacement() {
    *this = ::std::move(from);
  }

  inline ResponseQueryBuildingPlacement& operator=(const ResponseQueryBuildingPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseQueryBuildingPlacement& operator=(ResponseQueryBuildingPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseQueryBuildingPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseQueryBuildingPlacement* internal_default_instance() {
    return reinterpret_cast<const ResponseQueryBuildingPlacement*>(
               &_ResponseQueryBuildingPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResponseQueryBuildingPlacement& a, ResponseQueryBuildingPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseQueryBuildingPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseQueryBuildingPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseQueryBuildingPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseQueryBuildingPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseQueryBuildingPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseQueryBuildingPlacement& from) {
    ResponseQueryBuildingPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseQueryBuildingPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.ResponseQueryBuildingPlacement";
  }
  protected:
  explicit ResponseQueryBuildingPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .SC2APIProtocol.ActionResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::SC2APIProtocol::ActionResult result() const;
  void set_result(::SC2APIProtocol::ActionResult value);
  private:
  ::SC2APIProtocol::ActionResult _internal_result() const;
  void _internal_set_result(::SC2APIProtocol::ActionResult value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ResponseQueryBuildingPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestQuery

// repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
inline int RequestQuery::_internal_pathing_size() const {
  return _impl_.pathing_.size();
}
inline int RequestQuery::pathing_size() const {
  return _internal_pathing_size();
}
inline void RequestQuery::clear_pathing() {
  _impl_.pathing_.Clear();
}
inline ::SC2APIProtocol::RequestQueryPathing* RequestQuery::mutable_pathing(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQuery.pathing)
  return _impl_.pathing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing >*
RequestQuery::mutable_pathing() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestQuery.pathing)
  return &_impl_.pathing_;
}
inline const ::SC2APIProtocol::RequestQueryPathing& RequestQuery::_internal_pathing(int index) const {
  return _impl_.pathing_.Get(index);
}
inline const ::SC2APIProtocol::RequestQueryPathing& RequestQuery::pathing(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.pathing)
  return _internal_pathing(index);
}
inline ::SC2APIProtocol::RequestQueryPathing* RequestQuery::_internal_add_pathing() {
  return _impl_.pathing_.Add();
}
inline ::SC2APIProtocol::RequestQueryPathing* RequestQuery::add_pathing() {
  ::SC2APIProtocol::RequestQueryPathing* _add = _internal_add_pathing();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestQuery.pathing)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing >&
RequestQuery::pathing() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestQuery.pathing)
  return _impl_.pathing_;
}

// repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
inline int RequestQuery::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int RequestQuery::abilities_size() const {
  return _internal_abilities_size();
}
inline void RequestQuery::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::SC2APIProtocol::RequestQueryAvailableAbilities* RequestQuery::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQuery.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities >*
RequestQuery::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestQuery.abilities)
  return &_impl_.abilities_;
}
inline const ::SC2APIProtocol::RequestQueryAvailableAbilities& RequestQuery::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::SC2APIProtocol::RequestQueryAvailableAbilities& RequestQuery::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.abilities)
  return _internal_abilities(index);
}
inline ::SC2APIProtocol::RequestQueryAvailableAbilities* RequestQuery::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::SC2APIProtocol::RequestQueryAvailableAbilities* RequestQuery::add_abilities() {
  ::SC2APIProtocol::RequestQueryAvailableAbilities* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestQuery.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities >&
RequestQuery::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestQuery.abilities)
  return _impl_.abilities_;
}

// repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
inline int RequestQuery::_internal_placements_size() const {
  return _impl_.placements_.size();
}
inline int RequestQuery::placements_size() const {
  return _internal_placements_size();
}
inline void RequestQuery::clear_placements() {
  _impl_.placements_.Clear();
}
inline ::SC2APIProtocol::RequestQueryBuildingPlacement* RequestQuery::mutable_placements(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQuery.placements)
  return _impl_.placements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement >*
RequestQuery::mutable_placements() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestQuery.placements)
  return &_impl_.placements_;
}
inline const ::SC2APIProtocol::RequestQueryBuildingPlacement& RequestQuery::_internal_placements(int index) const {
  return _impl_.placements_.Get(index);
}
inline const ::SC2APIProtocol::RequestQueryBuildingPlacement& RequestQuery::placements(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.placements)
  return _internal_placements(index);
}
inline ::SC2APIProtocol::RequestQueryBuildingPlacement* RequestQuery::_internal_add_placements() {
  return _impl_.placements_.Add();
}
inline ::SC2APIProtocol::RequestQueryBuildingPlacement* RequestQuery::add_placements() {
  ::SC2APIProtocol::RequestQueryBuildingPlacement* _add = _internal_add_placements();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestQuery.placements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement >&
RequestQuery::placements() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestQuery.placements)
  return _impl_.placements_;
}

// optional bool ignore_resource_requirements = 4;
inline bool RequestQuery::_internal_has_ignore_resource_requirements() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestQuery::has_ignore_resource_requirements() const {
  return _internal_has_ignore_resource_requirements();
}
inline void RequestQuery::clear_ignore_resource_requirements() {
  _impl_.ignore_resource_requirements_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool RequestQuery::_internal_ignore_resource_requirements() const {
  return _impl_.ignore_resource_requirements_;
}
inline bool RequestQuery::ignore_resource_requirements() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.ignore_resource_requirements)
  return _internal_ignore_resource_requirements();
}
inline void RequestQuery::_internal_set_ignore_resource_requirements(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ignore_resource_requirements_ = value;
}
inline void RequestQuery::set_ignore_resource_requirements(bool value) {
  _internal_set_ignore_resource_requirements(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQuery.ignore_resource_requirements)
}

// -------------------------------------------------------------------

// ResponseQuery

// repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
inline int ResponseQuery::_internal_pathing_size() const {
  return _impl_.pathing_.size();
}
inline int ResponseQuery::pathing_size() const {
  return _internal_pathing_size();
}
inline void ResponseQuery::clear_pathing() {
  _impl_.pathing_.Clear();
}
inline ::SC2APIProtocol::ResponseQueryPathing* ResponseQuery::mutable_pathing(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQuery.pathing)
  return _impl_.pathing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing >*
ResponseQuery::mutable_pathing() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQuery.pathing)
  return &_impl_.pathing_;
}
inline const ::SC2APIProtocol::ResponseQueryPathing& ResponseQuery::_internal_pathing(int index) const {
  return _impl_.pathing_.Get(index);
}
inline const ::SC2APIProtocol::ResponseQueryPathing& ResponseQuery::pathing(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQuery.pathing)
  return _internal_pathing(index);
}
inline ::SC2APIProtocol::ResponseQueryPathing* ResponseQuery::_internal_add_pathing() {
  return _impl_.pathing_.Add();
}
inline ::SC2APIProtocol::ResponseQueryPathing* ResponseQuery::add_pathing() {
  ::SC2APIProtocol::ResponseQueryPathing* _add = _internal_add_pathing();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQuery.pathing)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing >&
ResponseQuery::pathing() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQuery.pathing)
  return _impl_.pathing_;
}

// repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
inline int ResponseQuery::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int ResponseQuery::abilities_size() const {
  return _internal_abilities_size();
}
inline void ResponseQuery::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::SC2APIProtocol::ResponseQueryAvailableAbilities* ResponseQuery::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQuery.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities >*
ResponseQuery::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQuery.abilities)
  return &_impl_.abilities_;
}
inline const ::SC2APIProtocol::ResponseQueryAvailableAbilities& ResponseQuery::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::SC2APIProtocol::ResponseQueryAvailableAbilities& ResponseQuery::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQuery.abilities)
  return _internal_abilities(index);
}
inline ::SC2APIProtocol::ResponseQueryAvailableAbilities* ResponseQuery::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::SC2APIProtocol::ResponseQueryAvailableAbilities* ResponseQuery::add_abilities() {
  ::SC2APIProtocol::ResponseQueryAvailableAbilities* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQuery.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities >&
ResponseQuery::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQuery.abilities)
  return _impl_.abilities_;
}

// repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
inline int ResponseQuery::_internal_placements_size() const {
  return _impl_.placements_.size();
}
inline int ResponseQuery::placements_size() const {
  return _internal_placements_size();
}
inline void ResponseQuery::clear_placements() {
  _impl_.placements_.Clear();
}
inline ::SC2APIProtocol::ResponseQueryBuildingPlacement* ResponseQuery::mutable_placements(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQuery.placements)
  return _impl_.placements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement >*
ResponseQuery::mutable_placements() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQuery.placements)
  return &_impl_.placements_;
}
inline const ::SC2APIProtocol::ResponseQueryBuildingPlacement& ResponseQuery::_internal_placements(int index) const {
  return _impl_.placements_.Get(index);
}
inline const ::SC2APIProtocol::ResponseQueryBuildingPlacement& ResponseQuery::placements(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQuery.placements)
  return _internal_placements(index);
}
inline ::SC2APIProtocol::ResponseQueryBuildingPlacement* ResponseQuery::_internal_add_placements() {
  return _impl_.placements_.Add();
}
inline ::SC2APIProtocol::ResponseQueryBuildingPlacement* ResponseQuery::add_placements() {
  ::SC2APIProtocol::ResponseQueryBuildingPlacement* _add = _internal_add_placements();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQuery.placements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement >&
ResponseQuery::placements() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQuery.placements)
  return _impl_.placements_;
}

// -------------------------------------------------------------------

// RequestQueryPathing

// .SC2APIProtocol.Point2D start_pos = 1;
inline bool RequestQueryPathing::_internal_has_start_pos() const {
  return start_case() == kStartPos;
}
inline bool RequestQueryPathing::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void RequestQueryPathing::set_has_start_pos() {
  _impl_._oneof_case_[0] = kStartPos;
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::release_start_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestQueryPathing.start_pos)
  if (_internal_has_start_pos()) {
    clear_has_start();
    ::SC2APIProtocol::Point2D* temp = _impl_.start_.start_pos_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.start_.start_pos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SC2APIProtocol::Point2D& RequestQueryPathing::_internal_start_pos() const {
  return _internal_has_start_pos()
      ? *_impl_.start_.start_pos_
      : reinterpret_cast< ::SC2APIProtocol::Point2D&>(::SC2APIProtocol::_Point2D_default_instance_);
}
inline const ::SC2APIProtocol::Point2D& RequestQueryPathing::start_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryPathing.start_pos)
  return _internal_start_pos();
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SC2APIProtocol.RequestQueryPathing.start_pos)
  if (_internal_has_start_pos()) {
    clear_has_start();
    ::SC2APIProtocol::Point2D* temp = _impl_.start_.start_pos_;
    _impl_.start_.start_pos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestQueryPathing::unsafe_arena_set_allocated_start_pos(::SC2APIProtocol::Point2D* start_pos) {
  clear_start();
  if (start_pos) {
    set_has_start_pos();
    _impl_.start_.start_pos_ = start_pos;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.RequestQueryPathing.start_pos)
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::_internal_mutable_start_pos() {
  if (!_internal_has_start_pos()) {
    clear_start();
    set_has_start_pos();
    _impl_.start_.start_pos_ = CreateMaybeMessage< ::SC2APIProtocol::Point2D >(GetArenaForAllocation());
  }
  return _impl_.start_.start_pos_;
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::mutable_start_pos() {
  ::SC2APIProtocol::Point2D* _msg = _internal_mutable_start_pos();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQueryPathing.start_pos)
  return _msg;
}

// uint64 unit_tag = 2;
inline bool RequestQueryPathing::_internal_has_unit_tag() const {
  return start_case() == kUnitTag;
}
inline bool RequestQueryPathing::has_unit_tag() const {
  return _internal_has_unit_tag();
}
inline void RequestQueryPathing::set_has_unit_tag() {
  _impl_._oneof_case_[0] = kUnitTag;
}
inline void RequestQueryPathing::clear_unit_tag() {
  if (_internal_has_unit_tag()) {
    _impl_.start_.unit_tag_ = uint64_t{0u};
    clear_has_start();
  }
}
inline uint64_t RequestQueryPathing::_internal_unit_tag() const {
  if (_internal_has_unit_tag()) {
    return _impl_.start_.unit_tag_;
  }
  return uint64_t{0u};
}
inline void RequestQueryPathing::_internal_set_unit_tag(uint64_t value) {
  if (!_internal_has_unit_tag()) {
    clear_start();
    set_has_unit_tag();
  }
  _impl_.start_.unit_tag_ = value;
}
inline uint64_t RequestQueryPathing::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryPathing.unit_tag)
  return _internal_unit_tag();
}
inline void RequestQueryPathing::set_unit_tag(uint64_t value) {
  _internal_set_unit_tag(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryPathing.unit_tag)
}

// optional .SC2APIProtocol.Point2D end_pos = 3;
inline bool RequestQueryPathing::_internal_has_end_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_pos_ != nullptr);
  return value;
}
inline bool RequestQueryPathing::has_end_pos() const {
  return _internal_has_end_pos();
}
inline const ::SC2APIProtocol::Point2D& RequestQueryPathing::_internal_end_pos() const {
  const ::SC2APIProtocol::Point2D* p = _impl_.end_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::Point2D&>(
      ::SC2APIProtocol::_Point2D_default_instance_);
}
inline const ::SC2APIProtocol::Point2D& RequestQueryPathing::end_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryPathing.end_pos)
  return _internal_end_pos();
}
inline void RequestQueryPathing::unsafe_arena_set_allocated_end_pos(
    ::SC2APIProtocol::Point2D* end_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_pos_);
  }
  _impl_.end_pos_ = end_pos;
  if (end_pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.RequestQueryPathing.end_pos)
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::release_end_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::Point2D* temp = _impl_.end_pos_;
  _impl_.end_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::unsafe_arena_release_end_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestQueryPathing.end_pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::Point2D* temp = _impl_.end_pos_;
  _impl_.end_pos_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::_internal_mutable_end_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::Point2D>(GetArenaForAllocation());
    _impl_.end_pos_ = p;
  }
  return _impl_.end_pos_;
}
inline ::SC2APIProtocol::Point2D* RequestQueryPathing::mutable_end_pos() {
  ::SC2APIProtocol::Point2D* _msg = _internal_mutable_end_pos();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQueryPathing.end_pos)
  return _msg;
}
inline void RequestQueryPathing::set_allocated_end_pos(::SC2APIProtocol::Point2D* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_pos_);
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pos));
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestQueryPathing.end_pos)
}

inline bool RequestQueryPathing::has_start() const {
  return start_case() != START_NOT_SET;
}
inline void RequestQueryPathing::clear_has_start() {
  _impl_._oneof_case_[0] = START_NOT_SET;
}
inline RequestQueryPathing::StartCase RequestQueryPathing::start_case() const {
  return RequestQueryPathing::StartCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseQueryPathing

// optional float distance = 1;
inline bool ResponseQueryPathing::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseQueryPathing::has_distance() const {
  return _internal_has_distance();
}
inline void ResponseQueryPathing::clear_distance() {
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ResponseQueryPathing::_internal_distance() const {
  return _impl_.distance_;
}
inline float ResponseQueryPathing::distance() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryPathing.distance)
  return _internal_distance();
}
inline void ResponseQueryPathing::_internal_set_distance(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.distance_ = value;
}
inline void ResponseQueryPathing::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryPathing.distance)
}

// -------------------------------------------------------------------

// RequestQueryAvailableAbilities

// optional uint64 unit_tag = 1;
inline bool RequestQueryAvailableAbilities::_internal_has_unit_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestQueryAvailableAbilities::has_unit_tag() const {
  return _internal_has_unit_tag();
}
inline void RequestQueryAvailableAbilities::clear_unit_tag() {
  _impl_.unit_tag_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t RequestQueryAvailableAbilities::_internal_unit_tag() const {
  return _impl_.unit_tag_;
}
inline uint64_t RequestQueryAvailableAbilities::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryAvailableAbilities.unit_tag)
  return _internal_unit_tag();
}
inline void RequestQueryAvailableAbilities::_internal_set_unit_tag(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_tag_ = value;
}
inline void RequestQueryAvailableAbilities::set_unit_tag(uint64_t value) {
  _internal_set_unit_tag(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryAvailableAbilities.unit_tag)
}

// -------------------------------------------------------------------

// ResponseQueryAvailableAbilities

// repeated .SC2APIProtocol.AvailableAbility abilities = 1;
inline int ResponseQueryAvailableAbilities::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int ResponseQueryAvailableAbilities::abilities_size() const {
  return _internal_abilities_size();
}
inline ::SC2APIProtocol::AvailableAbility* ResponseQueryAvailableAbilities::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >*
ResponseQueryAvailableAbilities::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return &_impl_.abilities_;
}
inline const ::SC2APIProtocol::AvailableAbility& ResponseQueryAvailableAbilities::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::SC2APIProtocol::AvailableAbility& ResponseQueryAvailableAbilities::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return _internal_abilities(index);
}
inline ::SC2APIProtocol::AvailableAbility* ResponseQueryAvailableAbilities::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::SC2APIProtocol::AvailableAbility* ResponseQueryAvailableAbilities::add_abilities() {
  ::SC2APIProtocol::AvailableAbility* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >&
ResponseQueryAvailableAbilities::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return _impl_.abilities_;
}

// optional uint64 unit_tag = 2;
inline bool ResponseQueryAvailableAbilities::_internal_has_unit_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseQueryAvailableAbilities::has_unit_tag() const {
  return _internal_has_unit_tag();
}
inline void ResponseQueryAvailableAbilities::clear_unit_tag() {
  _impl_.unit_tag_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ResponseQueryAvailableAbilities::_internal_unit_tag() const {
  return _impl_.unit_tag_;
}
inline uint64_t ResponseQueryAvailableAbilities::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_tag)
  return _internal_unit_tag();
}
inline void ResponseQueryAvailableAbilities::_internal_set_unit_tag(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_tag_ = value;
}
inline void ResponseQueryAvailableAbilities::set_unit_tag(uint64_t value) {
  _internal_set_unit_tag(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_tag)
}

// optional uint32 unit_type_id = 3;
inline bool ResponseQueryAvailableAbilities::_internal_has_unit_type_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResponseQueryAvailableAbilities::has_unit_type_id() const {
  return _internal_has_unit_type_id();
}
inline void ResponseQueryAvailableAbilities::clear_unit_type_id() {
  _impl_.unit_type_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ResponseQueryAvailableAbilities::_internal_unit_type_id() const {
  return _impl_.unit_type_id_;
}
inline uint32_t ResponseQueryAvailableAbilities::unit_type_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_type_id)
  return _internal_unit_type_id();
}
inline void ResponseQueryAvailableAbilities::_internal_set_unit_type_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unit_type_id_ = value;
}
inline void ResponseQueryAvailableAbilities::set_unit_type_id(uint32_t value) {
  _internal_set_unit_type_id(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_type_id)
}

// -------------------------------------------------------------------

// RequestQueryBuildingPlacement

// optional int32 ability_id = 1;
inline bool RequestQueryBuildingPlacement::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestQueryBuildingPlacement::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void RequestQueryBuildingPlacement::clear_ability_id() {
  _impl_.ability_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RequestQueryBuildingPlacement::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t RequestQueryBuildingPlacement::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryBuildingPlacement.ability_id)
  return _internal_ability_id();
}
inline void RequestQueryBuildingPlacement::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ability_id_ = value;
}
inline void RequestQueryBuildingPlacement::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryBuildingPlacement.ability_id)
}

// optional .SC2APIProtocol.Point2D target_pos = 2;
inline bool RequestQueryBuildingPlacement::_internal_has_target_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_pos_ != nullptr);
  return value;
}
inline bool RequestQueryBuildingPlacement::has_target_pos() const {
  return _internal_has_target_pos();
}
inline const ::SC2APIProtocol::Point2D& RequestQueryBuildingPlacement::_internal_target_pos() const {
  const ::SC2APIProtocol::Point2D* p = _impl_.target_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::Point2D&>(
      ::SC2APIProtocol::_Point2D_default_instance_);
}
inline const ::SC2APIProtocol::Point2D& RequestQueryBuildingPlacement::target_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
  return _internal_target_pos();
}
inline void RequestQueryBuildingPlacement::unsafe_arena_set_allocated_target_pos(
    ::SC2APIProtocol::Point2D* target_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pos_);
  }
  _impl_.target_pos_ = target_pos;
  if (target_pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
}
inline ::SC2APIProtocol::Point2D* RequestQueryBuildingPlacement::release_target_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::Point2D* temp = _impl_.target_pos_;
  _impl_.target_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::Point2D* RequestQueryBuildingPlacement::unsafe_arena_release_target_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::Point2D* temp = _impl_.target_pos_;
  _impl_.target_pos_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::Point2D* RequestQueryBuildingPlacement::_internal_mutable_target_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::Point2D>(GetArenaForAllocation());
    _impl_.target_pos_ = p;
  }
  return _impl_.target_pos_;
}
inline ::SC2APIProtocol::Point2D* RequestQueryBuildingPlacement::mutable_target_pos() {
  ::SC2APIProtocol::Point2D* _msg = _internal_mutable_target_pos();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
  return _msg;
}
inline void RequestQueryBuildingPlacement::set_allocated_target_pos(::SC2APIProtocol::Point2D* target_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pos_);
  }
  if (target_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pos));
    if (message_arena != submessage_arena) {
      target_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_pos_ = target_pos;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
}

// optional uint64 placing_unit_tag = 3;
inline bool RequestQueryBuildingPlacement::_internal_has_placing_unit_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestQueryBuildingPlacement::has_placing_unit_tag() const {
  return _internal_has_placing_unit_tag();
}
inline void RequestQueryBuildingPlacement::clear_placing_unit_tag() {
  _impl_.placing_unit_tag_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t RequestQueryBuildingPlacement::_internal_placing_unit_tag() const {
  return _impl_.placing_unit_tag_;
}
inline uint64_t RequestQueryBuildingPlacement::placing_unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryBuildingPlacement.placing_unit_tag)
  return _internal_placing_unit_tag();
}
inline void RequestQueryBuildingPlacement::_internal_set_placing_unit_tag(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.placing_unit_tag_ = value;
}
inline void RequestQueryBuildingPlacement::set_placing_unit_tag(uint64_t value) {
  _internal_set_placing_unit_tag(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryBuildingPlacement.placing_unit_tag)
}

// -------------------------------------------------------------------

// ResponseQueryBuildingPlacement

// optional .SC2APIProtocol.ActionResult result = 1;
inline bool ResponseQueryBuildingPlacement::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseQueryBuildingPlacement::has_result() const {
  return _internal_has_result();
}
inline void ResponseQueryBuildingPlacement::clear_result() {
  _impl_.result_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::SC2APIProtocol::ActionResult ResponseQueryBuildingPlacement::_internal_result() const {
  return static_cast< ::SC2APIProtocol::ActionResult >(_impl_.result_);
}
inline ::SC2APIProtocol::ActionResult ResponseQueryBuildingPlacement::result() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryBuildingPlacement.result)
  return _internal_result();
}
inline void ResponseQueryBuildingPlacement::_internal_set_result(::SC2APIProtocol::ActionResult value) {
  assert(::SC2APIProtocol::ActionResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void ResponseQueryBuildingPlacement::set_result(::SC2APIProtocol::ActionResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryBuildingPlacement.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_s2clientprotocol_2fquery_2eproto

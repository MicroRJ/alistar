// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/score.proto

#include "s2clientprotocol/score.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SC2APIProtocol {
PROTOBUF_CONSTEXPR Score::Score(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.score_details_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.score_type_)*/1} {}
struct ScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreDefaultTypeInternal() {}
  union {
    Score _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreDefaultTypeInternal _Score_default_instance_;
PROTOBUF_CONSTEXPR CategoryScoreDetails::CategoryScoreDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.none_)*/0
  , /*decltype(_impl_.army_)*/0
  , /*decltype(_impl_.economy_)*/0
  , /*decltype(_impl_.technology_)*/0
  , /*decltype(_impl_.upgrade_)*/0} {}
struct CategoryScoreDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryScoreDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryScoreDetailsDefaultTypeInternal() {}
  union {
    CategoryScoreDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryScoreDetailsDefaultTypeInternal _CategoryScoreDetails_default_instance_;
PROTOBUF_CONSTEXPR VitalScoreDetails::VitalScoreDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.life_)*/0
  , /*decltype(_impl_.shields_)*/0
  , /*decltype(_impl_.energy_)*/0} {}
struct VitalScoreDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VitalScoreDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VitalScoreDetailsDefaultTypeInternal() {}
  union {
    VitalScoreDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VitalScoreDetailsDefaultTypeInternal _VitalScoreDetails_default_instance_;
PROTOBUF_CONSTEXPR ScoreDetails::ScoreDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.food_used_)*/nullptr
  , /*decltype(_impl_.killed_minerals_)*/nullptr
  , /*decltype(_impl_.killed_vespene_)*/nullptr
  , /*decltype(_impl_.lost_minerals_)*/nullptr
  , /*decltype(_impl_.lost_vespene_)*/nullptr
  , /*decltype(_impl_.friendly_fire_minerals_)*/nullptr
  , /*decltype(_impl_.friendly_fire_vespene_)*/nullptr
  , /*decltype(_impl_.used_minerals_)*/nullptr
  , /*decltype(_impl_.used_vespene_)*/nullptr
  , /*decltype(_impl_.total_used_minerals_)*/nullptr
  , /*decltype(_impl_.total_used_vespene_)*/nullptr
  , /*decltype(_impl_.total_damage_dealt_)*/nullptr
  , /*decltype(_impl_.total_damage_taken_)*/nullptr
  , /*decltype(_impl_.total_healed_)*/nullptr
  , /*decltype(_impl_.idle_production_time_)*/0
  , /*decltype(_impl_.idle_worker_time_)*/0
  , /*decltype(_impl_.total_value_units_)*/0
  , /*decltype(_impl_.total_value_structures_)*/0
  , /*decltype(_impl_.killed_value_units_)*/0
  , /*decltype(_impl_.killed_value_structures_)*/0
  , /*decltype(_impl_.collected_minerals_)*/0
  , /*decltype(_impl_.collected_vespene_)*/0
  , /*decltype(_impl_.collection_rate_minerals_)*/0
  , /*decltype(_impl_.collection_rate_vespene_)*/0
  , /*decltype(_impl_.spent_minerals_)*/0
  , /*decltype(_impl_.spent_vespene_)*/0
  , /*decltype(_impl_.current_apm_)*/0
  , /*decltype(_impl_.current_effective_apm_)*/0} {}
struct ScoreDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreDetailsDefaultTypeInternal() {}
  union {
    ScoreDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreDetailsDefaultTypeInternal _ScoreDetails_default_instance_;
}  // namespace SC2APIProtocol
static ::_pb::Metadata file_level_metadata_s2clientprotocol_2fscore_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_s2clientprotocol_2fscore_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2clientprotocol_2fscore_2eproto = nullptr;

const uint32_t TableStruct_s2clientprotocol_2fscore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Score, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Score, _impl_.score_type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Score, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Score, _impl_.score_details_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _impl_.none_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _impl_.army_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _impl_.economy_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _impl_.technology_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CategoryScoreDetails, _impl_.upgrade_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::VitalScoreDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::VitalScoreDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::VitalScoreDetails, _impl_.life_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::VitalScoreDetails, _impl_.shields_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::VitalScoreDetails, _impl_.energy_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.idle_production_time_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.idle_worker_time_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_value_units_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_value_structures_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.killed_value_units_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.killed_value_structures_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.collected_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.collected_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.collection_rate_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.collection_rate_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.spent_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.spent_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.food_used_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.killed_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.killed_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.lost_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.lost_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.friendly_fire_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.friendly_fire_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.used_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.used_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_used_minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_used_vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_damage_taken_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.total_healed_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.current_apm_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ScoreDetails, _impl_.current_effective_apm_),
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  26,
  27,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::SC2APIProtocol::Score)},
  { 12, 23, -1, sizeof(::SC2APIProtocol::CategoryScoreDetails)},
  { 28, 37, -1, sizeof(::SC2APIProtocol::VitalScoreDetails)},
  { 40, 74, -1, sizeof(::SC2APIProtocol::ScoreDetails)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SC2APIProtocol::_Score_default_instance_._instance,
  &::SC2APIProtocol::_CategoryScoreDetails_default_instance_._instance,
  &::SC2APIProtocol::_VitalScoreDetails_default_instance_._instance,
  &::SC2APIProtocol::_ScoreDetails_default_instance_._instance,
};

const char descriptor_table_protodef_s2clientprotocol_2fscore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034s2clientprotocol/score.proto\022\016SC2APIPr"
  "otocol\"\250\001\n\005Score\0223\n\nscore_type\030\006 \001(\0162\037.S"
  "C2APIProtocol.Score.ScoreType\022\r\n\005score\030\007"
  " \001(\005\0223\n\rscore_details\030\010 \001(\0132\034.SC2APIProt"
  "ocol.ScoreDetails\"&\n\tScoreType\022\016\n\nCurric"
  "ulum\020\001\022\t\n\005Melee\020\002\"h\n\024CategoryScoreDetail"
  "s\022\014\n\004none\030\001 \001(\002\022\014\n\004army\030\002 \001(\002\022\017\n\007economy"
  "\030\003 \001(\002\022\022\n\ntechnology\030\004 \001(\002\022\017\n\007upgrade\030\005 "
  "\001(\002\"B\n\021VitalScoreDetails\022\014\n\004life\030\001 \001(\002\022\017"
  "\n\007shields\030\002 \001(\002\022\016\n\006energy\030\003 \001(\002\"\212\n\n\014Scor"
  "eDetails\022\034\n\024idle_production_time\030\001 \001(\002\022\030"
  "\n\020idle_worker_time\030\002 \001(\002\022\031\n\021total_value_"
  "units\030\003 \001(\002\022\036\n\026total_value_structures\030\004 "
  "\001(\002\022\032\n\022killed_value_units\030\005 \001(\002\022\037\n\027kille"
  "d_value_structures\030\006 \001(\002\022\032\n\022collected_mi"
  "nerals\030\007 \001(\002\022\031\n\021collected_vespene\030\010 \001(\002\022"
  " \n\030collection_rate_minerals\030\t \001(\002\022\037\n\027col"
  "lection_rate_vespene\030\n \001(\002\022\026\n\016spent_mine"
  "rals\030\013 \001(\002\022\025\n\rspent_vespene\030\014 \001(\002\0227\n\tfoo"
  "d_used\030\r \001(\0132$.SC2APIProtocol.CategorySc"
  "oreDetails\022=\n\017killed_minerals\030\016 \001(\0132$.SC"
  "2APIProtocol.CategoryScoreDetails\022<\n\016kil"
  "led_vespene\030\017 \001(\0132$.SC2APIProtocol.Categ"
  "oryScoreDetails\022;\n\rlost_minerals\030\020 \001(\0132$"
  ".SC2APIProtocol.CategoryScoreDetails\022:\n\014"
  "lost_vespene\030\021 \001(\0132$.SC2APIProtocol.Cate"
  "goryScoreDetails\022D\n\026friendly_fire_minera"
  "ls\030\022 \001(\0132$.SC2APIProtocol.CategoryScoreD"
  "etails\022C\n\025friendly_fire_vespene\030\023 \001(\0132$."
  "SC2APIProtocol.CategoryScoreDetails\022;\n\ru"
  "sed_minerals\030\024 \001(\0132$.SC2APIProtocol.Cate"
  "goryScoreDetails\022:\n\014used_vespene\030\025 \001(\0132$"
  ".SC2APIProtocol.CategoryScoreDetails\022A\n\023"
  "total_used_minerals\030\026 \001(\0132$.SC2APIProtoc"
  "ol.CategoryScoreDetails\022@\n\022total_used_ve"
  "spene\030\027 \001(\0132$.SC2APIProtocol.CategorySco"
  "reDetails\022=\n\022total_damage_dealt\030\030 \001(\0132!."
  "SC2APIProtocol.VitalScoreDetails\022=\n\022tota"
  "l_damage_taken\030\031 \001(\0132!.SC2APIProtocol.Vi"
  "talScoreDetails\0227\n\014total_healed\030\032 \001(\0132!."
  "SC2APIProtocol.VitalScoreDetails\022\023\n\013curr"
  "ent_apm\030\033 \001(\002\022\035\n\025current_effective_apm\030\034"
  " \001(\002"
  ;
static ::_pbi::once_flag descriptor_table_s2clientprotocol_2fscore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2clientprotocol_2fscore_2eproto = {
    false, false, 1684, descriptor_table_protodef_s2clientprotocol_2fscore_2eproto,
    "s2clientprotocol/score.proto",
    &descriptor_table_s2clientprotocol_2fscore_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_s2clientprotocol_2fscore_2eproto::offsets,
    file_level_metadata_s2clientprotocol_2fscore_2eproto, file_level_enum_descriptors_s2clientprotocol_2fscore_2eproto,
    file_level_service_descriptors_s2clientprotocol_2fscore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2clientprotocol_2fscore_2eproto_getter() {
  return &descriptor_table_s2clientprotocol_2fscore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2clientprotocol_2fscore_2eproto(&descriptor_table_s2clientprotocol_2fscore_2eproto);
namespace SC2APIProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Score_ScoreType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fscore_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fscore_2eproto[0];
}
bool Score_ScoreType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Score_ScoreType Score::Curriculum;
constexpr Score_ScoreType Score::Melee;
constexpr Score_ScoreType Score::ScoreType_MIN;
constexpr Score_ScoreType Score::ScoreType_MAX;
constexpr int Score::ScoreType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Score::_Internal {
 public:
  using HasBits = decltype(std::declval<Score>()._impl_._has_bits_);
  static void set_has_score_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::ScoreDetails& score_details(const Score* msg);
  static void set_has_score_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SC2APIProtocol::ScoreDetails&
Score::_Internal::score_details(const Score* msg) {
  return *msg->_impl_.score_details_;
}
Score::Score(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Score)
}
Score::Score(const Score& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Score* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.score_details_){nullptr}
    , decltype(_impl_.score_){}
    , decltype(_impl_.score_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_score_details()) {
    _this->_impl_.score_details_ = new ::SC2APIProtocol::ScoreDetails(*from._impl_.score_details_);
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_type_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.score_type_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Score)
}

inline void Score::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.score_details_){nullptr}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.score_type_){1}
  };
}

Score::~Score() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Score)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Score::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.score_details_;
}

void Score::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Score::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Score)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.score_details_ != nullptr);
    _impl_.score_details_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.score_ = 0;
    _impl_.score_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Score::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Score_ScoreType_IsValid(val))) {
            _internal_set_score_type(static_cast<::SC2APIProtocol::Score_ScoreType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ScoreDetails score_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_score_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Score::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Score)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_score_type(), target);
  }

  // optional int32 score = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_score(), target);
  }

  // optional .SC2APIProtocol.ScoreDetails score_details = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::score_details(this),
        _Internal::score_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Score)
  return target;
}

size_t Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Score)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .SC2APIProtocol.ScoreDetails score_details = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.score_details_);
    }

    // optional int32 score = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
    }

    // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_score_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Score::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Score::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Score::GetClassData() const { return &_class_data_; }


void Score::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Score*>(&to_msg);
  auto& from = static_cast<const Score&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Score)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_score_details()->::SC2APIProtocol::ScoreDetails::MergeFrom(
          from._internal_score_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.score_type_ = from._impl_.score_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Score::CopyFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  return true;
}

void Score::InternalSwap(Score* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Score, _impl_.score_)
      + sizeof(Score::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(Score, _impl_.score_details_)>(
          reinterpret_cast<char*>(&_impl_.score_details_),
          reinterpret_cast<char*>(&other->_impl_.score_details_));
  swap(_impl_.score_type_, other->_impl_.score_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Score::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fscore_2eproto_getter, &descriptor_table_s2clientprotocol_2fscore_2eproto_once,
      file_level_metadata_s2clientprotocol_2fscore_2eproto[0]);
}

// ===================================================================

class CategoryScoreDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryScoreDetails>()._impl_._has_bits_);
  static void set_has_none(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_army(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_economy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_technology(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CategoryScoreDetails::CategoryScoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.CategoryScoreDetails)
}
CategoryScoreDetails::CategoryScoreDetails(const CategoryScoreDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryScoreDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.none_){}
    , decltype(_impl_.army_){}
    , decltype(_impl_.economy_){}
    , decltype(_impl_.technology_){}
    , decltype(_impl_.upgrade_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.none_, &from._impl_.none_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.upgrade_) -
    reinterpret_cast<char*>(&_impl_.none_)) + sizeof(_impl_.upgrade_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.CategoryScoreDetails)
}

inline void CategoryScoreDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.none_){0}
    , decltype(_impl_.army_){0}
    , decltype(_impl_.economy_){0}
    , decltype(_impl_.technology_){0}
    , decltype(_impl_.upgrade_){0}
  };
}

CategoryScoreDetails::~CategoryScoreDetails() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.CategoryScoreDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryScoreDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CategoryScoreDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryScoreDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.CategoryScoreDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.none_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.upgrade_) -
        reinterpret_cast<char*>(&_impl_.none_)) + sizeof(_impl_.upgrade_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryScoreDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float none = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_none(&has_bits);
          _impl_.none_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float army = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_army(&has_bits);
          _impl_.army_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float economy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_economy(&has_bits);
          _impl_.economy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float technology = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_technology(&has_bits);
          _impl_.technology_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float upgrade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_upgrade(&has_bits);
          _impl_.upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryScoreDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.CategoryScoreDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float none = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_none(), target);
  }

  // optional float army = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_army(), target);
  }

  // optional float economy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_economy(), target);
  }

  // optional float technology = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_technology(), target);
  }

  // optional float upgrade = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_upgrade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.CategoryScoreDetails)
  return target;
}

size_t CategoryScoreDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.CategoryScoreDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float none = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float army = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float economy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float technology = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float upgrade = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryScoreDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryScoreDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryScoreDetails::GetClassData() const { return &_class_data_; }


void CategoryScoreDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryScoreDetails*>(&to_msg);
  auto& from = static_cast<const CategoryScoreDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.CategoryScoreDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.none_ = from._impl_.none_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.army_ = from._impl_.army_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.economy_ = from._impl_.economy_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.technology_ = from._impl_.technology_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.upgrade_ = from._impl_.upgrade_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryScoreDetails::CopyFrom(const CategoryScoreDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.CategoryScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryScoreDetails::IsInitialized() const {
  return true;
}

void CategoryScoreDetails::InternalSwap(CategoryScoreDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryScoreDetails, _impl_.upgrade_)
      + sizeof(CategoryScoreDetails::_impl_.upgrade_)
      - PROTOBUF_FIELD_OFFSET(CategoryScoreDetails, _impl_.none_)>(
          reinterpret_cast<char*>(&_impl_.none_),
          reinterpret_cast<char*>(&other->_impl_.none_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryScoreDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fscore_2eproto_getter, &descriptor_table_s2clientprotocol_2fscore_2eproto_once,
      file_level_metadata_s2clientprotocol_2fscore_2eproto[1]);
}

// ===================================================================

class VitalScoreDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<VitalScoreDetails>()._impl_._has_bits_);
  static void set_has_life(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shields(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VitalScoreDetails::VitalScoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.VitalScoreDetails)
}
VitalScoreDetails::VitalScoreDetails(const VitalScoreDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VitalScoreDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.life_){}
    , decltype(_impl_.shields_){}
    , decltype(_impl_.energy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.life_, &from._impl_.life_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.energy_) -
    reinterpret_cast<char*>(&_impl_.life_)) + sizeof(_impl_.energy_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.VitalScoreDetails)
}

inline void VitalScoreDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.life_){0}
    , decltype(_impl_.shields_){0}
    , decltype(_impl_.energy_){0}
  };
}

VitalScoreDetails::~VitalScoreDetails() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.VitalScoreDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VitalScoreDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VitalScoreDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VitalScoreDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.VitalScoreDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.life_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.energy_) -
        reinterpret_cast<char*>(&_impl_.life_)) + sizeof(_impl_.energy_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VitalScoreDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float life = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_life(&has_bits);
          _impl_.life_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float shields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_shields(&has_bits);
          _impl_.shields_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_energy(&has_bits);
          _impl_.energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VitalScoreDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.VitalScoreDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float life = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_life(), target);
  }

  // optional float shields = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_shields(), target);
  }

  // optional float energy = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_energy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.VitalScoreDetails)
  return target;
}

size_t VitalScoreDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.VitalScoreDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float life = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float shields = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float energy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VitalScoreDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VitalScoreDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VitalScoreDetails::GetClassData() const { return &_class_data_; }


void VitalScoreDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VitalScoreDetails*>(&to_msg);
  auto& from = static_cast<const VitalScoreDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.VitalScoreDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.life_ = from._impl_.life_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shields_ = from._impl_.shields_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.energy_ = from._impl_.energy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VitalScoreDetails::CopyFrom(const VitalScoreDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.VitalScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VitalScoreDetails::IsInitialized() const {
  return true;
}

void VitalScoreDetails::InternalSwap(VitalScoreDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VitalScoreDetails, _impl_.energy_)
      + sizeof(VitalScoreDetails::_impl_.energy_)
      - PROTOBUF_FIELD_OFFSET(VitalScoreDetails, _impl_.life_)>(
          reinterpret_cast<char*>(&_impl_.life_),
          reinterpret_cast<char*>(&other->_impl_.life_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VitalScoreDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fscore_2eproto_getter, &descriptor_table_s2clientprotocol_2fscore_2eproto_once,
      file_level_metadata_s2clientprotocol_2fscore_2eproto[2]);
}

// ===================================================================

class ScoreDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreDetails>()._impl_._has_bits_);
  static void set_has_idle_production_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_idle_worker_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_value_units(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_total_value_structures(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_killed_value_units(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_killed_value_structures(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_collected_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_collected_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_collection_rate_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_collection_rate_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_spent_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_spent_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& food_used(const ScoreDetails* msg);
  static void set_has_food_used(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& killed_minerals(const ScoreDetails* msg);
  static void set_has_killed_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& killed_vespene(const ScoreDetails* msg);
  static void set_has_killed_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& lost_minerals(const ScoreDetails* msg);
  static void set_has_lost_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& lost_vespene(const ScoreDetails* msg);
  static void set_has_lost_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& friendly_fire_minerals(const ScoreDetails* msg);
  static void set_has_friendly_fire_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& friendly_fire_vespene(const ScoreDetails* msg);
  static void set_has_friendly_fire_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& used_minerals(const ScoreDetails* msg);
  static void set_has_used_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& used_vespene(const ScoreDetails* msg);
  static void set_has_used_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& total_used_minerals(const ScoreDetails* msg);
  static void set_has_total_used_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::SC2APIProtocol::CategoryScoreDetails& total_used_vespene(const ScoreDetails* msg);
  static void set_has_total_used_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::SC2APIProtocol::VitalScoreDetails& total_damage_dealt(const ScoreDetails* msg);
  static void set_has_total_damage_dealt(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::SC2APIProtocol::VitalScoreDetails& total_damage_taken(const ScoreDetails* msg);
  static void set_has_total_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::SC2APIProtocol::VitalScoreDetails& total_healed(const ScoreDetails* msg);
  static void set_has_total_healed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_current_apm(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_current_effective_apm(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
};

const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::food_used(const ScoreDetails* msg) {
  return *msg->_impl_.food_used_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::killed_minerals(const ScoreDetails* msg) {
  return *msg->_impl_.killed_minerals_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::killed_vespene(const ScoreDetails* msg) {
  return *msg->_impl_.killed_vespene_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::lost_minerals(const ScoreDetails* msg) {
  return *msg->_impl_.lost_minerals_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::lost_vespene(const ScoreDetails* msg) {
  return *msg->_impl_.lost_vespene_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::friendly_fire_minerals(const ScoreDetails* msg) {
  return *msg->_impl_.friendly_fire_minerals_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::friendly_fire_vespene(const ScoreDetails* msg) {
  return *msg->_impl_.friendly_fire_vespene_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::used_minerals(const ScoreDetails* msg) {
  return *msg->_impl_.used_minerals_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::used_vespene(const ScoreDetails* msg) {
  return *msg->_impl_.used_vespene_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::total_used_minerals(const ScoreDetails* msg) {
  return *msg->_impl_.total_used_minerals_;
}
const ::SC2APIProtocol::CategoryScoreDetails&
ScoreDetails::_Internal::total_used_vespene(const ScoreDetails* msg) {
  return *msg->_impl_.total_used_vespene_;
}
const ::SC2APIProtocol::VitalScoreDetails&
ScoreDetails::_Internal::total_damage_dealt(const ScoreDetails* msg) {
  return *msg->_impl_.total_damage_dealt_;
}
const ::SC2APIProtocol::VitalScoreDetails&
ScoreDetails::_Internal::total_damage_taken(const ScoreDetails* msg) {
  return *msg->_impl_.total_damage_taken_;
}
const ::SC2APIProtocol::VitalScoreDetails&
ScoreDetails::_Internal::total_healed(const ScoreDetails* msg) {
  return *msg->_impl_.total_healed_;
}
ScoreDetails::ScoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ScoreDetails)
}
ScoreDetails::ScoreDetails(const ScoreDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScoreDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.food_used_){nullptr}
    , decltype(_impl_.killed_minerals_){nullptr}
    , decltype(_impl_.killed_vespene_){nullptr}
    , decltype(_impl_.lost_minerals_){nullptr}
    , decltype(_impl_.lost_vespene_){nullptr}
    , decltype(_impl_.friendly_fire_minerals_){nullptr}
    , decltype(_impl_.friendly_fire_vespene_){nullptr}
    , decltype(_impl_.used_minerals_){nullptr}
    , decltype(_impl_.used_vespene_){nullptr}
    , decltype(_impl_.total_used_minerals_){nullptr}
    , decltype(_impl_.total_used_vespene_){nullptr}
    , decltype(_impl_.total_damage_dealt_){nullptr}
    , decltype(_impl_.total_damage_taken_){nullptr}
    , decltype(_impl_.total_healed_){nullptr}
    , decltype(_impl_.idle_production_time_){}
    , decltype(_impl_.idle_worker_time_){}
    , decltype(_impl_.total_value_units_){}
    , decltype(_impl_.total_value_structures_){}
    , decltype(_impl_.killed_value_units_){}
    , decltype(_impl_.killed_value_structures_){}
    , decltype(_impl_.collected_minerals_){}
    , decltype(_impl_.collected_vespene_){}
    , decltype(_impl_.collection_rate_minerals_){}
    , decltype(_impl_.collection_rate_vespene_){}
    , decltype(_impl_.spent_minerals_){}
    , decltype(_impl_.spent_vespene_){}
    , decltype(_impl_.current_apm_){}
    , decltype(_impl_.current_effective_apm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_food_used()) {
    _this->_impl_.food_used_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.food_used_);
  }
  if (from._internal_has_killed_minerals()) {
    _this->_impl_.killed_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.killed_minerals_);
  }
  if (from._internal_has_killed_vespene()) {
    _this->_impl_.killed_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.killed_vespene_);
  }
  if (from._internal_has_lost_minerals()) {
    _this->_impl_.lost_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.lost_minerals_);
  }
  if (from._internal_has_lost_vespene()) {
    _this->_impl_.lost_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.lost_vespene_);
  }
  if (from._internal_has_friendly_fire_minerals()) {
    _this->_impl_.friendly_fire_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.friendly_fire_minerals_);
  }
  if (from._internal_has_friendly_fire_vespene()) {
    _this->_impl_.friendly_fire_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.friendly_fire_vespene_);
  }
  if (from._internal_has_used_minerals()) {
    _this->_impl_.used_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.used_minerals_);
  }
  if (from._internal_has_used_vespene()) {
    _this->_impl_.used_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.used_vespene_);
  }
  if (from._internal_has_total_used_minerals()) {
    _this->_impl_.total_used_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.total_used_minerals_);
  }
  if (from._internal_has_total_used_vespene()) {
    _this->_impl_.total_used_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails(*from._impl_.total_used_vespene_);
  }
  if (from._internal_has_total_damage_dealt()) {
    _this->_impl_.total_damage_dealt_ = new ::SC2APIProtocol::VitalScoreDetails(*from._impl_.total_damage_dealt_);
  }
  if (from._internal_has_total_damage_taken()) {
    _this->_impl_.total_damage_taken_ = new ::SC2APIProtocol::VitalScoreDetails(*from._impl_.total_damage_taken_);
  }
  if (from._internal_has_total_healed()) {
    _this->_impl_.total_healed_ = new ::SC2APIProtocol::VitalScoreDetails(*from._impl_.total_healed_);
  }
  ::memcpy(&_impl_.idle_production_time_, &from._impl_.idle_production_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_effective_apm_) -
    reinterpret_cast<char*>(&_impl_.idle_production_time_)) + sizeof(_impl_.current_effective_apm_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ScoreDetails)
}

inline void ScoreDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.food_used_){nullptr}
    , decltype(_impl_.killed_minerals_){nullptr}
    , decltype(_impl_.killed_vespene_){nullptr}
    , decltype(_impl_.lost_minerals_){nullptr}
    , decltype(_impl_.lost_vespene_){nullptr}
    , decltype(_impl_.friendly_fire_minerals_){nullptr}
    , decltype(_impl_.friendly_fire_vespene_){nullptr}
    , decltype(_impl_.used_minerals_){nullptr}
    , decltype(_impl_.used_vespene_){nullptr}
    , decltype(_impl_.total_used_minerals_){nullptr}
    , decltype(_impl_.total_used_vespene_){nullptr}
    , decltype(_impl_.total_damage_dealt_){nullptr}
    , decltype(_impl_.total_damage_taken_){nullptr}
    , decltype(_impl_.total_healed_){nullptr}
    , decltype(_impl_.idle_production_time_){0}
    , decltype(_impl_.idle_worker_time_){0}
    , decltype(_impl_.total_value_units_){0}
    , decltype(_impl_.total_value_structures_){0}
    , decltype(_impl_.killed_value_units_){0}
    , decltype(_impl_.killed_value_structures_){0}
    , decltype(_impl_.collected_minerals_){0}
    , decltype(_impl_.collected_vespene_){0}
    , decltype(_impl_.collection_rate_minerals_){0}
    , decltype(_impl_.collection_rate_vespene_){0}
    , decltype(_impl_.spent_minerals_){0}
    , decltype(_impl_.spent_vespene_){0}
    , decltype(_impl_.current_apm_){0}
    , decltype(_impl_.current_effective_apm_){0}
  };
}

ScoreDetails::~ScoreDetails() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ScoreDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScoreDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.food_used_;
  if (this != internal_default_instance()) delete _impl_.killed_minerals_;
  if (this != internal_default_instance()) delete _impl_.killed_vespene_;
  if (this != internal_default_instance()) delete _impl_.lost_minerals_;
  if (this != internal_default_instance()) delete _impl_.lost_vespene_;
  if (this != internal_default_instance()) delete _impl_.friendly_fire_minerals_;
  if (this != internal_default_instance()) delete _impl_.friendly_fire_vespene_;
  if (this != internal_default_instance()) delete _impl_.used_minerals_;
  if (this != internal_default_instance()) delete _impl_.used_vespene_;
  if (this != internal_default_instance()) delete _impl_.total_used_minerals_;
  if (this != internal_default_instance()) delete _impl_.total_used_vespene_;
  if (this != internal_default_instance()) delete _impl_.total_damage_dealt_;
  if (this != internal_default_instance()) delete _impl_.total_damage_taken_;
  if (this != internal_default_instance()) delete _impl_.total_healed_;
}

void ScoreDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScoreDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ScoreDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.food_used_ != nullptr);
      _impl_.food_used_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.killed_minerals_ != nullptr);
      _impl_.killed_minerals_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.killed_vespene_ != nullptr);
      _impl_.killed_vespene_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lost_minerals_ != nullptr);
      _impl_.lost_minerals_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.lost_vespene_ != nullptr);
      _impl_.lost_vespene_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.friendly_fire_minerals_ != nullptr);
      _impl_.friendly_fire_minerals_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.friendly_fire_vespene_ != nullptr);
      _impl_.friendly_fire_vespene_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.used_minerals_ != nullptr);
      _impl_.used_minerals_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.used_vespene_ != nullptr);
      _impl_.used_vespene_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.total_used_minerals_ != nullptr);
      _impl_.total_used_minerals_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.total_used_vespene_ != nullptr);
      _impl_.total_used_vespene_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.total_damage_dealt_ != nullptr);
      _impl_.total_damage_dealt_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.total_damage_taken_ != nullptr);
      _impl_.total_damage_taken_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.total_healed_ != nullptr);
      _impl_.total_healed_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.idle_production_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.idle_worker_time_) -
        reinterpret_cast<char*>(&_impl_.idle_production_time_)) + sizeof(_impl_.idle_worker_time_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.total_value_units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.collection_rate_vespene_) -
        reinterpret_cast<char*>(&_impl_.total_value_units_)) + sizeof(_impl_.collection_rate_vespene_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.spent_minerals_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.current_effective_apm_) -
        reinterpret_cast<char*>(&_impl_.spent_minerals_)) + sizeof(_impl_.current_effective_apm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float idle_production_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_idle_production_time(&has_bits);
          _impl_.idle_production_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float idle_worker_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_idle_worker_time(&has_bits);
          _impl_.idle_worker_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float total_value_units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_total_value_units(&has_bits);
          _impl_.total_value_units_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float total_value_structures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_total_value_structures(&has_bits);
          _impl_.total_value_structures_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float killed_value_units = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_killed_value_units(&has_bits);
          _impl_.killed_value_units_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float killed_value_structures = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_killed_value_structures(&has_bits);
          _impl_.killed_value_structures_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float collected_minerals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_collected_minerals(&has_bits);
          _impl_.collected_minerals_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float collected_vespene = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_collected_vespene(&has_bits);
          _impl_.collected_vespene_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float collection_rate_minerals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_collection_rate_minerals(&has_bits);
          _impl_.collection_rate_minerals_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float collection_rate_vespene = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_collection_rate_vespene(&has_bits);
          _impl_.collection_rate_vespene_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float spent_minerals = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_spent_minerals(&has_bits);
          _impl_.spent_minerals_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float spent_vespene = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_spent_vespene(&has_bits);
          _impl_.spent_vespene_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_food_used(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_killed_minerals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_killed_vespene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lost_minerals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_lost_vespene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendly_fire_minerals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_friendly_fire_vespene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_used_minerals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_used_vespene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_used_minerals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_used_vespene(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_damage_dealt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_damage_taken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_healed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float current_apm = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_current_apm(&has_bits);
          _impl_.current_apm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float current_effective_apm = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_current_effective_apm(&has_bits);
          _impl_.current_effective_apm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScoreDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ScoreDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float idle_production_time = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_idle_production_time(), target);
  }

  // optional float idle_worker_time = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_idle_worker_time(), target);
  }

  // optional float total_value_units = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_total_value_units(), target);
  }

  // optional float total_value_structures = 4;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_total_value_structures(), target);
  }

  // optional float killed_value_units = 5;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_killed_value_units(), target);
  }

  // optional float killed_value_structures = 6;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_killed_value_structures(), target);
  }

  // optional float collected_minerals = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_collected_minerals(), target);
  }

  // optional float collected_vespene = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_collected_vespene(), target);
  }

  // optional float collection_rate_minerals = 9;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_collection_rate_minerals(), target);
  }

  // optional float collection_rate_vespene = 10;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_collection_rate_vespene(), target);
  }

  // optional float spent_minerals = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_spent_minerals(), target);
  }

  // optional float spent_vespene = 12;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_spent_vespene(), target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::food_used(this),
        _Internal::food_used(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::killed_minerals(this),
        _Internal::killed_minerals(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::killed_vespene(this),
        _Internal::killed_vespene(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::lost_minerals(this),
        _Internal::lost_minerals(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::lost_vespene(this),
        _Internal::lost_vespene(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::friendly_fire_minerals(this),
        _Internal::friendly_fire_minerals(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::friendly_fire_vespene(this),
        _Internal::friendly_fire_vespene(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::used_minerals(this),
        _Internal::used_minerals(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::used_vespene(this),
        _Internal::used_vespene(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::total_used_minerals(this),
        _Internal::total_used_minerals(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::total_used_vespene(this),
        _Internal::total_used_vespene(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::total_damage_dealt(this),
        _Internal::total_damage_dealt(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::total_damage_taken(this),
        _Internal::total_damage_taken(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::total_healed(this),
        _Internal::total_healed(this).GetCachedSize(), target, stream);
  }

  // optional float current_apm = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_current_apm(), target);
  }

  // optional float current_effective_apm = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_current_effective_apm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ScoreDetails)
  return target;
}

size_t ScoreDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ScoreDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.food_used_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.killed_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.killed_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lost_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lost_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.friendly_fire_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.friendly_fire_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.used_minerals_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.used_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_used_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_used_vespene_);
    }

    // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_damage_dealt_);
    }

    // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_damage_taken_);
    }

    // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_healed_);
    }

    // optional float idle_production_time = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float idle_worker_time = 2;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float total_value_units = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float total_value_structures = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float killed_value_units = 5;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float killed_value_structures = 6;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float collected_minerals = 7;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float collected_vespene = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float collection_rate_minerals = 9;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

    // optional float collection_rate_vespene = 10;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional float spent_minerals = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 4;
    }

    // optional float spent_vespene = 12;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 4;
    }

    // optional float current_apm = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float current_effective_apm = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoreDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScoreDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoreDetails::GetClassData() const { return &_class_data_; }


void ScoreDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScoreDetails*>(&to_msg);
  auto& from = static_cast<const ScoreDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ScoreDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_food_used()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_food_used());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_killed_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_killed_minerals());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_killed_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_killed_vespene());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lost_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_lost_minerals());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_lost_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_lost_vespene());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_friendly_fire_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_friendly_fire_minerals());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_friendly_fire_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_friendly_fire_vespene());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_used_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_used_minerals());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_used_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_used_vespene());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_total_used_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_total_used_minerals());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_total_used_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(
          from._internal_total_used_vespene());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_total_damage_dealt()->::SC2APIProtocol::VitalScoreDetails::MergeFrom(
          from._internal_total_damage_dealt());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_total_damage_taken()->::SC2APIProtocol::VitalScoreDetails::MergeFrom(
          from._internal_total_damage_taken());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_total_healed()->::SC2APIProtocol::VitalScoreDetails::MergeFrom(
          from._internal_total_healed());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.idle_production_time_ = from._impl_.idle_production_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.idle_worker_time_ = from._impl_.idle_worker_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.total_value_units_ = from._impl_.total_value_units_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.total_value_structures_ = from._impl_.total_value_structures_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.killed_value_units_ = from._impl_.killed_value_units_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.killed_value_structures_ = from._impl_.killed_value_structures_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.collected_minerals_ = from._impl_.collected_minerals_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.collected_vespene_ = from._impl_.collected_vespene_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.collection_rate_minerals_ = from._impl_.collection_rate_minerals_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.collection_rate_vespene_ = from._impl_.collection_rate_vespene_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.spent_minerals_ = from._impl_.spent_minerals_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.spent_vespene_ = from._impl_.spent_vespene_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.current_apm_ = from._impl_.current_apm_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.current_effective_apm_ = from._impl_.current_effective_apm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoreDetails::CopyFrom(const ScoreDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreDetails::IsInitialized() const {
  return true;
}

void ScoreDetails::InternalSwap(ScoreDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreDetails, _impl_.current_effective_apm_)
      + sizeof(ScoreDetails::_impl_.current_effective_apm_)
      - PROTOBUF_FIELD_OFFSET(ScoreDetails, _impl_.food_used_)>(
          reinterpret_cast<char*>(&_impl_.food_used_),
          reinterpret_cast<char*>(&other->_impl_.food_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fscore_2eproto_getter, &descriptor_table_s2clientprotocol_2fscore_2eproto_once,
      file_level_metadata_s2clientprotocol_2fscore_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Score*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Score >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Score >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::CategoryScoreDetails*
Arena::CreateMaybeMessage< ::SC2APIProtocol::CategoryScoreDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::CategoryScoreDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::VitalScoreDetails*
Arena::CreateMaybeMessage< ::SC2APIProtocol::VitalScoreDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::VitalScoreDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ScoreDetails*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ScoreDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ScoreDetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

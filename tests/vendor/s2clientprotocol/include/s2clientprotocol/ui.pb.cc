// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/ui.proto

#include "s2clientprotocol/ui.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SC2APIProtocol {
PROTOBUF_CONSTEXPR ObservationUI::ObservationUI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.panel_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObservationUIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationUIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationUIDefaultTypeInternal() {}
  union {
    ObservationUI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationUIDefaultTypeInternal _ObservationUI_default_instance_;
PROTOBUF_CONSTEXPR ControlGroup::ControlGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.control_group_index_)*/0u
  , /*decltype(_impl_.leader_unit_type_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct ControlGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlGroupDefaultTypeInternal() {}
  union {
    ControlGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlGroupDefaultTypeInternal _ControlGroup_default_instance_;
PROTOBUF_CONSTEXPR UnitInfo::UnitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.add_on_)*/nullptr
  , /*decltype(_impl_.unit_type_)*/0u
  , /*decltype(_impl_.player_relative_)*/0u
  , /*decltype(_impl_.health_)*/0
  , /*decltype(_impl_.shields_)*/0
  , /*decltype(_impl_.energy_)*/0
  , /*decltype(_impl_.transport_slots_taken_)*/0
  , /*decltype(_impl_.build_progress_)*/0
  , /*decltype(_impl_.max_health_)*/0
  , /*decltype(_impl_.max_shields_)*/0
  , /*decltype(_impl_.max_energy_)*/0} {}
struct UnitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnitInfoDefaultTypeInternal() {}
  union {
    UnitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnitInfoDefaultTypeInternal _UnitInfo_default_instance_;
PROTOBUF_CONSTEXPR SinglePanel::SinglePanel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buffs_)*/{}
  , /*decltype(_impl_.unit_)*/nullptr
  , /*decltype(_impl_.attack_upgrade_level_)*/0
  , /*decltype(_impl_.armor_upgrade_level_)*/0
  , /*decltype(_impl_.shield_upgrade_level_)*/0} {}
struct SinglePanelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SinglePanelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SinglePanelDefaultTypeInternal() {}
  union {
    SinglePanel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SinglePanelDefaultTypeInternal _SinglePanel_default_instance_;
PROTOBUF_CONSTEXPR MultiPanel::MultiPanel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.units_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiPanelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiPanelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiPanelDefaultTypeInternal() {}
  union {
    MultiPanel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiPanelDefaultTypeInternal _MultiPanel_default_instance_;
PROTOBUF_CONSTEXPR CargoPanel::CargoPanel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.passengers_)*/{}
  , /*decltype(_impl_.unit_)*/nullptr
  , /*decltype(_impl_.slots_available_)*/0} {}
struct CargoPanelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CargoPanelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CargoPanelDefaultTypeInternal() {}
  union {
    CargoPanel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CargoPanelDefaultTypeInternal _CargoPanel_default_instance_;
PROTOBUF_CONSTEXPR BuildItem::BuildItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0u
  , /*decltype(_impl_.build_progress_)*/0} {}
struct BuildItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildItemDefaultTypeInternal() {}
  union {
    BuildItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildItemDefaultTypeInternal _BuildItem_default_instance_;
PROTOBUF_CONSTEXPR ProductionPanel::ProductionPanel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.build_queue_)*/{}
  , /*decltype(_impl_.production_queue_)*/{}
  , /*decltype(_impl_.unit_)*/nullptr} {}
struct ProductionPanelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductionPanelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductionPanelDefaultTypeInternal() {}
  union {
    ProductionPanel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductionPanelDefaultTypeInternal _ProductionPanel_default_instance_;
PROTOBUF_CONSTEXPR ActionUI::ActionUI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ActionUIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionUIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionUIDefaultTypeInternal() {}
  union {
    ActionUI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionUIDefaultTypeInternal _ActionUI_default_instance_;
PROTOBUF_CONSTEXPR ActionControlGroup::ActionControlGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.control_group_index_)*/0u
  , /*decltype(_impl_.action_)*/1} {}
struct ActionControlGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionControlGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionControlGroupDefaultTypeInternal() {}
  union {
    ActionControlGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionControlGroupDefaultTypeInternal _ActionControlGroup_default_instance_;
PROTOBUF_CONSTEXPR ActionSelectArmy::ActionSelectArmy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_add_)*/false} {}
struct ActionSelectArmyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSelectArmyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSelectArmyDefaultTypeInternal() {}
  union {
    ActionSelectArmy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSelectArmyDefaultTypeInternal _ActionSelectArmy_default_instance_;
PROTOBUF_CONSTEXPR ActionSelectWarpGates::ActionSelectWarpGates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_add_)*/false} {}
struct ActionSelectWarpGatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSelectWarpGatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSelectWarpGatesDefaultTypeInternal() {}
  union {
    ActionSelectWarpGates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSelectWarpGatesDefaultTypeInternal _ActionSelectWarpGates_default_instance_;
PROTOBUF_CONSTEXPR ActionSelectLarva::ActionSelectLarva(
    ::_pbi::ConstantInitialized) {}
struct ActionSelectLarvaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSelectLarvaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSelectLarvaDefaultTypeInternal() {}
  union {
    ActionSelectLarva _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSelectLarvaDefaultTypeInternal _ActionSelectLarva_default_instance_;
PROTOBUF_CONSTEXPR ActionSelectIdleWorker::ActionSelectIdleWorker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/1} {}
struct ActionSelectIdleWorkerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSelectIdleWorkerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSelectIdleWorkerDefaultTypeInternal() {}
  union {
    ActionSelectIdleWorker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSelectIdleWorkerDefaultTypeInternal _ActionSelectIdleWorker_default_instance_;
PROTOBUF_CONSTEXPR ActionMultiPanel::ActionMultiPanel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_index_)*/0
  , /*decltype(_impl_.type_)*/1} {}
struct ActionMultiPanelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionMultiPanelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionMultiPanelDefaultTypeInternal() {}
  union {
    ActionMultiPanel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionMultiPanelDefaultTypeInternal _ActionMultiPanel_default_instance_;
PROTOBUF_CONSTEXPR ActionCargoPanelUnload::ActionCargoPanelUnload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_index_)*/0} {}
struct ActionCargoPanelUnloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionCargoPanelUnloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionCargoPanelUnloadDefaultTypeInternal() {}
  union {
    ActionCargoPanelUnload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionCargoPanelUnloadDefaultTypeInternal _ActionCargoPanelUnload_default_instance_;
PROTOBUF_CONSTEXPR ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_index_)*/0} {}
struct ActionProductionPanelRemoveFromQueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionProductionPanelRemoveFromQueueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionProductionPanelRemoveFromQueueDefaultTypeInternal() {}
  union {
    ActionProductionPanelRemoveFromQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionProductionPanelRemoveFromQueueDefaultTypeInternal _ActionProductionPanelRemoveFromQueue_default_instance_;
PROTOBUF_CONSTEXPR ActionToggleAutocast::ActionToggleAutocast(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0} {}
struct ActionToggleAutocastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionToggleAutocastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionToggleAutocastDefaultTypeInternal() {}
  union {
    ActionToggleAutocast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionToggleAutocastDefaultTypeInternal _ActionToggleAutocast_default_instance_;
}  // namespace SC2APIProtocol
static ::_pb::Metadata file_level_metadata_s2clientprotocol_2fui_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_s2clientprotocol_2fui_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2clientprotocol_2fui_2eproto = nullptr;

const uint32_t TableStruct_s2clientprotocol_2fui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationUI, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationUI, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationUI, _impl_.groups_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationUI, _impl_.panel_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ControlGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ControlGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ControlGroup, _impl_.control_group_index_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ControlGroup, _impl_.leader_unit_type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ControlGroup, _impl_.count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.unit_type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.player_relative_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.shields_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.energy_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.transport_slots_taken_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.build_progress_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.add_on_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.max_health_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.max_shields_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::UnitInfo, _impl_.max_energy_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _impl_.attack_upgrade_level_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _impl_.armor_upgrade_level_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _impl_.shield_upgrade_level_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SinglePanel, _impl_.buffs_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::MultiPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::MultiPanel, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CargoPanel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CargoPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CargoPanel, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CargoPanel, _impl_.passengers_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::CargoPanel, _impl_.slots_available_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::BuildItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::BuildItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::BuildItem, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::BuildItem, _impl_.build_progress_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ProductionPanel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ProductionPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ProductionPanel, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ProductionPanel, _impl_.build_queue_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ProductionPanel, _impl_.production_queue_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionUI, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionUI, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionUI, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionControlGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionControlGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionControlGroup, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionControlGroup, _impl_.control_group_index_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectArmy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectArmy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectArmy, _impl_.selection_add_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectWarpGates, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectWarpGates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectWarpGates, _impl_.selection_add_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectLarva, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectIdleWorker, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectIdleWorker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSelectIdleWorker, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionMultiPanel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionMultiPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionMultiPanel, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionMultiPanel, _impl_.unit_index_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionCargoPanelUnload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionCargoPanelUnload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionCargoPanelUnload, _impl_.unit_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue, _impl_.unit_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionToggleAutocast, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionToggleAutocast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionToggleAutocast, _impl_.ability_id_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SC2APIProtocol::ObservationUI)},
  { 12, 21, -1, sizeof(::SC2APIProtocol::ControlGroup)},
  { 24, 41, -1, sizeof(::SC2APIProtocol::UnitInfo)},
  { 52, 63, -1, sizeof(::SC2APIProtocol::SinglePanel)},
  { 68, -1, -1, sizeof(::SC2APIProtocol::MultiPanel)},
  { 75, 84, -1, sizeof(::SC2APIProtocol::CargoPanel)},
  { 87, 95, -1, sizeof(::SC2APIProtocol::BuildItem)},
  { 97, 106, -1, sizeof(::SC2APIProtocol::ProductionPanel)},
  { 109, -1, -1, sizeof(::SC2APIProtocol::ActionUI)},
  { 125, 133, -1, sizeof(::SC2APIProtocol::ActionControlGroup)},
  { 135, 142, -1, sizeof(::SC2APIProtocol::ActionSelectArmy)},
  { 143, 150, -1, sizeof(::SC2APIProtocol::ActionSelectWarpGates)},
  { 151, -1, -1, sizeof(::SC2APIProtocol::ActionSelectLarva)},
  { 157, 164, -1, sizeof(::SC2APIProtocol::ActionSelectIdleWorker)},
  { 165, 173, -1, sizeof(::SC2APIProtocol::ActionMultiPanel)},
  { 175, 182, -1, sizeof(::SC2APIProtocol::ActionCargoPanelUnload)},
  { 183, 190, -1, sizeof(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue)},
  { 191, 198, -1, sizeof(::SC2APIProtocol::ActionToggleAutocast)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SC2APIProtocol::_ObservationUI_default_instance_._instance,
  &::SC2APIProtocol::_ControlGroup_default_instance_._instance,
  &::SC2APIProtocol::_UnitInfo_default_instance_._instance,
  &::SC2APIProtocol::_SinglePanel_default_instance_._instance,
  &::SC2APIProtocol::_MultiPanel_default_instance_._instance,
  &::SC2APIProtocol::_CargoPanel_default_instance_._instance,
  &::SC2APIProtocol::_BuildItem_default_instance_._instance,
  &::SC2APIProtocol::_ProductionPanel_default_instance_._instance,
  &::SC2APIProtocol::_ActionUI_default_instance_._instance,
  &::SC2APIProtocol::_ActionControlGroup_default_instance_._instance,
  &::SC2APIProtocol::_ActionSelectArmy_default_instance_._instance,
  &::SC2APIProtocol::_ActionSelectWarpGates_default_instance_._instance,
  &::SC2APIProtocol::_ActionSelectLarva_default_instance_._instance,
  &::SC2APIProtocol::_ActionSelectIdleWorker_default_instance_._instance,
  &::SC2APIProtocol::_ActionMultiPanel_default_instance_._instance,
  &::SC2APIProtocol::_ActionCargoPanelUnload_default_instance_._instance,
  &::SC2APIProtocol::_ActionProductionPanelRemoveFromQueue_default_instance_._instance,
  &::SC2APIProtocol::_ActionToggleAutocast_default_instance_._instance,
};

const char descriptor_table_protodef_s2clientprotocol_2fui_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031s2clientprotocol/ui.proto\022\016SC2APIProto"
  "col\"\206\002\n\rObservationUI\022,\n\006groups\030\001 \003(\0132\034."
  "SC2APIProtocol.ControlGroup\022-\n\006single\030\002 "
  "\001(\0132\033.SC2APIProtocol.SinglePanelH\000\022+\n\005mu"
  "lti\030\003 \001(\0132\032.SC2APIProtocol.MultiPanelH\000\022"
  "+\n\005cargo\030\004 \001(\0132\032.SC2APIProtocol.CargoPan"
  "elH\000\0225\n\nproduction\030\005 \001(\0132\037.SC2APIProtoco"
  "l.ProductionPanelH\000B\007\n\005panel\"T\n\014ControlG"
  "roup\022\033\n\023control_group_index\030\001 \001(\r\022\030\n\020lea"
  "der_unit_type\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\"\205\002\n\010U"
  "nitInfo\022\021\n\tunit_type\030\001 \001(\r\022\027\n\017player_rel"
  "ative\030\002 \001(\r\022\016\n\006health\030\003 \001(\005\022\017\n\007shields\030\004"
  " \001(\005\022\016\n\006energy\030\005 \001(\005\022\035\n\025transport_slots_"
  "taken\030\006 \001(\005\022\026\n\016build_progress\030\007 \001(\002\022(\n\006a"
  "dd_on\030\010 \001(\0132\030.SC2APIProtocol.UnitInfo\022\022\n"
  "\nmax_health\030\t \001(\005\022\023\n\013max_shields\030\n \001(\005\022\022"
  "\n\nmax_energy\030\013 \001(\005\"\235\001\n\013SinglePanel\022&\n\004un"
  "it\030\001 \001(\0132\030.SC2APIProtocol.UnitInfo\022\034\n\024at"
  "tack_upgrade_level\030\002 \001(\005\022\033\n\023armor_upgrad"
  "e_level\030\003 \001(\005\022\034\n\024shield_upgrade_level\030\004 "
  "\001(\005\022\r\n\005buffs\030\005 \003(\005\"5\n\nMultiPanel\022\'\n\005unit"
  "s\030\001 \003(\0132\030.SC2APIProtocol.UnitInfo\"{\n\nCar"
  "goPanel\022&\n\004unit\030\001 \001(\0132\030.SC2APIProtocol.U"
  "nitInfo\022,\n\npassengers\030\002 \003(\0132\030.SC2APIProt"
  "ocol.UnitInfo\022\027\n\017slots_available\030\003 \001(\005\"7"
  "\n\tBuildItem\022\022\n\nability_id\030\001 \001(\r\022\026\n\016build"
  "_progress\030\002 \001(\002\"\235\001\n\017ProductionPanel\022&\n\004u"
  "nit\030\001 \001(\0132\030.SC2APIProtocol.UnitInfo\022-\n\013b"
  "uild_queue\030\002 \003(\0132\030.SC2APIProtocol.UnitIn"
  "fo\0223\n\020production_queue\030\003 \003(\0132\031.SC2APIPro"
  "tocol.BuildItem\"\332\004\n\010ActionUI\022;\n\rcontrol_"
  "group\030\001 \001(\0132\".SC2APIProtocol.ActionContr"
  "olGroupH\000\0227\n\013select_army\030\002 \001(\0132 .SC2APIP"
  "rotocol.ActionSelectArmyH\000\022B\n\021select_war"
  "p_gates\030\003 \001(\0132%.SC2APIProtocol.ActionSel"
  "ectWarpGatesH\000\0229\n\014select_larva\030\004 \001(\0132!.S"
  "C2APIProtocol.ActionSelectLarvaH\000\022D\n\022sel"
  "ect_idle_worker\030\005 \001(\0132&.SC2APIProtocol.A"
  "ctionSelectIdleWorkerH\000\0227\n\013multi_panel\030\006"
  " \001(\0132 .SC2APIProtocol.ActionMultiPanelH\000"
  "\022=\n\013cargo_panel\030\007 \001(\0132&.SC2APIProtocol.A"
  "ctionCargoPanelUnloadH\000\022P\n\020production_pa"
  "nel\030\010 \001(\01324.SC2APIProtocol.ActionProduct"
  "ionPanelRemoveFromQueueH\000\022\?\n\017toggle_auto"
  "cast\030\t \001(\0132$.SC2APIProtocol.ActionToggle"
  "AutocastH\000B\010\n\006action\"\324\001\n\022ActionControlGr"
  "oup\022E\n\006action\030\001 \001(\01625.SC2APIProtocol.Act"
  "ionControlGroup.ControlGroupAction\022\033\n\023co"
  "ntrol_group_index\030\002 \001(\r\"Z\n\022ControlGroupA"
  "ction\022\n\n\006Recall\020\001\022\007\n\003Set\020\002\022\n\n\006Append\020\003\022\017"
  "\n\013SetAndSteal\020\004\022\022\n\016AppendAndSteal\020\005\")\n\020A"
  "ctionSelectArmy\022\025\n\rselection_add\030\001 \001(\010\"."
  "\n\025ActionSelectWarpGates\022\025\n\rselection_add"
  "\030\001 \001(\010\"\023\n\021ActionSelectLarva\"\202\001\n\026ActionSe"
  "lectIdleWorker\0229\n\004type\030\001 \001(\0162+.SC2APIPro"
  "tocol.ActionSelectIdleWorker.Type\"-\n\004Typ"
  "e\022\007\n\003Set\020\001\022\007\n\003Add\020\002\022\007\n\003All\020\003\022\n\n\006AddAll\020\004"
  "\"\263\001\n\020ActionMultiPanel\0223\n\004type\030\001 \001(\0162%.SC"
  "2APIProtocol.ActionMultiPanel.Type\022\022\n\nun"
  "it_index\030\002 \001(\005\"V\n\004Type\022\020\n\014SingleSelect\020\001"
  "\022\020\n\014DeselectUnit\020\002\022\023\n\017SelectAllOfType\020\003\022"
  "\025\n\021DeselectAllOfType\020\004\",\n\026ActionCargoPan"
  "elUnload\022\022\n\nunit_index\030\001 \001(\005\":\n$ActionPr"
  "oductionPanelRemoveFromQueue\022\022\n\nunit_ind"
  "ex\030\001 \001(\005\"*\n\024ActionToggleAutocast\022\022\n\nabil"
  "ity_id\030\001 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_s2clientprotocol_2fui_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2clientprotocol_2fui_2eproto = {
    false, false, 2612, descriptor_table_protodef_s2clientprotocol_2fui_2eproto,
    "s2clientprotocol/ui.proto",
    &descriptor_table_s2clientprotocol_2fui_2eproto_once, nullptr, 0, 18,
    schemas, file_default_instances, TableStruct_s2clientprotocol_2fui_2eproto::offsets,
    file_level_metadata_s2clientprotocol_2fui_2eproto, file_level_enum_descriptors_s2clientprotocol_2fui_2eproto,
    file_level_service_descriptors_s2clientprotocol_2fui_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2clientprotocol_2fui_2eproto_getter() {
  return &descriptor_table_s2clientprotocol_2fui_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2clientprotocol_2fui_2eproto(&descriptor_table_s2clientprotocol_2fui_2eproto);
namespace SC2APIProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionControlGroup_ControlGroupAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fui_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fui_2eproto[0];
}
bool ActionControlGroup_ControlGroupAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::Recall;
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::Set;
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::Append;
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::SetAndSteal;
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::AppendAndSteal;
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::ControlGroupAction_MIN;
constexpr ActionControlGroup_ControlGroupAction ActionControlGroup::ControlGroupAction_MAX;
constexpr int ActionControlGroup::ControlGroupAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionSelectIdleWorker_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fui_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fui_2eproto[1];
}
bool ActionSelectIdleWorker_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionSelectIdleWorker_Type ActionSelectIdleWorker::Set;
constexpr ActionSelectIdleWorker_Type ActionSelectIdleWorker::Add;
constexpr ActionSelectIdleWorker_Type ActionSelectIdleWorker::All;
constexpr ActionSelectIdleWorker_Type ActionSelectIdleWorker::AddAll;
constexpr ActionSelectIdleWorker_Type ActionSelectIdleWorker::Type_MIN;
constexpr ActionSelectIdleWorker_Type ActionSelectIdleWorker::Type_MAX;
constexpr int ActionSelectIdleWorker::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionMultiPanel_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fui_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fui_2eproto[2];
}
bool ActionMultiPanel_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionMultiPanel_Type ActionMultiPanel::SingleSelect;
constexpr ActionMultiPanel_Type ActionMultiPanel::DeselectUnit;
constexpr ActionMultiPanel_Type ActionMultiPanel::SelectAllOfType;
constexpr ActionMultiPanel_Type ActionMultiPanel::DeselectAllOfType;
constexpr ActionMultiPanel_Type ActionMultiPanel::Type_MIN;
constexpr ActionMultiPanel_Type ActionMultiPanel::Type_MAX;
constexpr int ActionMultiPanel::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ObservationUI::_Internal {
 public:
  static const ::SC2APIProtocol::SinglePanel& single(const ObservationUI* msg);
  static const ::SC2APIProtocol::MultiPanel& multi(const ObservationUI* msg);
  static const ::SC2APIProtocol::CargoPanel& cargo(const ObservationUI* msg);
  static const ::SC2APIProtocol::ProductionPanel& production(const ObservationUI* msg);
};

const ::SC2APIProtocol::SinglePanel&
ObservationUI::_Internal::single(const ObservationUI* msg) {
  return *msg->_impl_.panel_.single_;
}
const ::SC2APIProtocol::MultiPanel&
ObservationUI::_Internal::multi(const ObservationUI* msg) {
  return *msg->_impl_.panel_.multi_;
}
const ::SC2APIProtocol::CargoPanel&
ObservationUI::_Internal::cargo(const ObservationUI* msg) {
  return *msg->_impl_.panel_.cargo_;
}
const ::SC2APIProtocol::ProductionPanel&
ObservationUI::_Internal::production(const ObservationUI* msg) {
  return *msg->_impl_.panel_.production_;
}
void ObservationUI::set_allocated_single(::SC2APIProtocol::SinglePanel* single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_panel();
  if (single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single);
    if (message_arena != submessage_arena) {
      single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single, submessage_arena);
    }
    set_has_single();
    _impl_.panel_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.single)
}
void ObservationUI::set_allocated_multi(::SC2APIProtocol::MultiPanel* multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_panel();
  if (multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi);
    if (message_arena != submessage_arena) {
      multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    set_has_multi();
    _impl_.panel_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.multi)
}
void ObservationUI::set_allocated_cargo(::SC2APIProtocol::CargoPanel* cargo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_panel();
  if (cargo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cargo);
    if (message_arena != submessage_arena) {
      cargo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cargo, submessage_arena);
    }
    set_has_cargo();
    _impl_.panel_.cargo_ = cargo;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.cargo)
}
void ObservationUI::set_allocated_production(::SC2APIProtocol::ProductionPanel* production) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_panel();
  if (production) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(production);
    if (message_arena != submessage_arena) {
      production = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, production, submessage_arena);
    }
    set_has_production();
    _impl_.panel_.production_ = production;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.production)
}
ObservationUI::ObservationUI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ObservationUI)
}
ObservationUI::ObservationUI(const ObservationUI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservationUI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.panel_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_panel();
  switch (from.panel_case()) {
    case kSingle: {
      _this->_internal_mutable_single()->::SC2APIProtocol::SinglePanel::MergeFrom(
          from._internal_single());
      break;
    }
    case kMulti: {
      _this->_internal_mutable_multi()->::SC2APIProtocol::MultiPanel::MergeFrom(
          from._internal_multi());
      break;
    }
    case kCargo: {
      _this->_internal_mutable_cargo()->::SC2APIProtocol::CargoPanel::MergeFrom(
          from._internal_cargo());
      break;
    }
    case kProduction: {
      _this->_internal_mutable_production()->::SC2APIProtocol::ProductionPanel::MergeFrom(
          from._internal_production());
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationUI)
}

inline void ObservationUI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){arena}
    , decltype(_impl_.panel_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_panel();
}

ObservationUI::~ObservationUI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationUI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservationUI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
  if (has_panel()) {
    clear_panel();
  }
}

void ObservationUI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservationUI::clear_panel() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ObservationUI)
  switch (panel_case()) {
    case kSingle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.panel_.single_;
      }
      break;
    }
    case kMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.panel_.multi_;
      }
      break;
    }
    case kCargo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.panel_.cargo_;
      }
      break;
    }
    case kProduction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.panel_.production_;
      }
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PANEL_NOT_SET;
}


void ObservationUI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationUI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  clear_panel();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservationUI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.ControlGroup groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.SinglePanel single = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.MultiPanel multi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.CargoPanel cargo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cargo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ProductionPanel production = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_production(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObservationUI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationUI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ControlGroup groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  switch (panel_case()) {
    case kSingle: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::single(this),
          _Internal::single(this).GetCachedSize(), target, stream);
      break;
    }
    case kMulti: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::multi(this),
          _Internal::multi(this).GetCachedSize(), target, stream);
      break;
    }
    case kCargo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::cargo(this),
          _Internal::cargo(this).GetCachedSize(), target, stream);
      break;
    }
    case kProduction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::production(this),
          _Internal::production(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationUI)
  return target;
}

size_t ObservationUI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationUI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ControlGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_impl_.groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (panel_case()) {
    // .SC2APIProtocol.SinglePanel single = 2;
    case kSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.panel_.single_);
      break;
    }
    // .SC2APIProtocol.MultiPanel multi = 3;
    case kMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.panel_.multi_);
      break;
    }
    // .SC2APIProtocol.CargoPanel cargo = 4;
    case kCargo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.panel_.cargo_);
      break;
    }
    // .SC2APIProtocol.ProductionPanel production = 5;
    case kProduction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.panel_.production_);
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservationUI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservationUI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservationUI::GetClassData() const { return &_class_data_; }


void ObservationUI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservationUI*>(&to_msg);
  auto& from = static_cast<const ObservationUI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationUI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  switch (from.panel_case()) {
    case kSingle: {
      _this->_internal_mutable_single()->::SC2APIProtocol::SinglePanel::MergeFrom(
          from._internal_single());
      break;
    }
    case kMulti: {
      _this->_internal_mutable_multi()->::SC2APIProtocol::MultiPanel::MergeFrom(
          from._internal_multi());
      break;
    }
    case kCargo: {
      _this->_internal_mutable_cargo()->::SC2APIProtocol::CargoPanel::MergeFrom(
          from._internal_cargo());
      break;
    }
    case kProduction: {
      _this->_internal_mutable_production()->::SC2APIProtocol::ProductionPanel::MergeFrom(
          from._internal_production());
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationUI::CopyFrom(const ObservationUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationUI::IsInitialized() const {
  return true;
}

void ObservationUI::InternalSwap(ObservationUI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  swap(_impl_.panel_, other->_impl_.panel_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationUI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[0]);
}

// ===================================================================

class ControlGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlGroup>()._impl_._has_bits_);
  static void set_has_control_group_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leader_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ControlGroup::ControlGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ControlGroup)
}
ControlGroup::ControlGroup(const ControlGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.control_group_index_){}
    , decltype(_impl_.leader_unit_type_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.control_group_index_, &from._impl_.control_group_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.control_group_index_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ControlGroup)
}

inline void ControlGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.control_group_index_){0u}
    , decltype(_impl_.leader_unit_type_){0u}
    , decltype(_impl_.count_){0u}
  };
}

ControlGroup::~ControlGroup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ControlGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ControlGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.control_group_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.control_group_index_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 control_group_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_group_index(&has_bits);
          _impl_.control_group_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_unit_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_leader_unit_type(&has_bits);
          _impl_.leader_unit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ControlGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 control_group_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_control_group_index(), target);
  }

  // optional uint32 leader_unit_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leader_unit_type(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ControlGroup)
  return target;
}

size_t ControlGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ControlGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 control_group_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_control_group_index());
    }

    // optional uint32 leader_unit_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_unit_type());
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGroup::GetClassData() const { return &_class_data_; }


void ControlGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlGroup*>(&to_msg);
  auto& from = static_cast<const ControlGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ControlGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.control_group_index_ = from._impl_.control_group_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.leader_unit_type_ = from._impl_.leader_unit_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGroup::CopyFrom(const ControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGroup::IsInitialized() const {
  return true;
}

void ControlGroup::InternalSwap(ControlGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlGroup, _impl_.count_)
      + sizeof(ControlGroup::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(ControlGroup, _impl_.control_group_index_)>(
          reinterpret_cast<char*>(&_impl_.control_group_index_),
          reinterpret_cast<char*>(&other->_impl_.control_group_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[1]);
}

// ===================================================================

class UnitInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitInfo>()._impl_._has_bits_);
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shields(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transport_slots_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_build_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::SC2APIProtocol::UnitInfo& add_on(const UnitInfo* msg);
  static void set_has_add_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_health(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_shields(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::SC2APIProtocol::UnitInfo&
UnitInfo::_Internal::add_on(const UnitInfo* msg) {
  return *msg->_impl_.add_on_;
}
UnitInfo::UnitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.UnitInfo)
}
UnitInfo::UnitInfo(const UnitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.add_on_){nullptr}
    , decltype(_impl_.unit_type_){}
    , decltype(_impl_.player_relative_){}
    , decltype(_impl_.health_){}
    , decltype(_impl_.shields_){}
    , decltype(_impl_.energy_){}
    , decltype(_impl_.transport_slots_taken_){}
    , decltype(_impl_.build_progress_){}
    , decltype(_impl_.max_health_){}
    , decltype(_impl_.max_shields_){}
    , decltype(_impl_.max_energy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_add_on()) {
    _this->_impl_.add_on_ = new ::SC2APIProtocol::UnitInfo(*from._impl_.add_on_);
  }
  ::memcpy(&_impl_.unit_type_, &from._impl_.unit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_energy_) -
    reinterpret_cast<char*>(&_impl_.unit_type_)) + sizeof(_impl_.max_energy_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.UnitInfo)
}

inline void UnitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.add_on_){nullptr}
    , decltype(_impl_.unit_type_){0u}
    , decltype(_impl_.player_relative_){0u}
    , decltype(_impl_.health_){0}
    , decltype(_impl_.shields_){0}
    , decltype(_impl_.energy_){0}
    , decltype(_impl_.transport_slots_taken_){0}
    , decltype(_impl_.build_progress_){0}
    , decltype(_impl_.max_health_){0}
    , decltype(_impl_.max_shields_){0}
    , decltype(_impl_.max_energy_){0}
  };
}

UnitInfo::~UnitInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.UnitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.add_on_;
}

void UnitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.UnitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.add_on_ != nullptr);
    _impl_.add_on_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.unit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.build_progress_) -
        reinterpret_cast<char*>(&_impl_.unit_type_)) + sizeof(_impl_.build_progress_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.max_health_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_energy_) -
        reinterpret_cast<char*>(&_impl_.max_health_)) + sizeof(_impl_.max_energy_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 unit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_type(&has_bits);
          _impl_.unit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_relative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_relative(&has_bits);
          _impl_.player_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 health = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_health(&has_bits);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shields = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shields(&has_bits);
          _impl_.shields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 energy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_energy(&has_bits);
          _impl_.energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 transport_slots_taken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_transport_slots_taken(&has_bits);
          _impl_.transport_slots_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float build_progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_build_progress(&has_bits);
          _impl_.build_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.UnitInfo add_on = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_on(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_health = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_max_health(&has_bits);
          _impl_.max_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_shields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_max_shields(&has_bits);
          _impl_.max_shields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_energy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_max_energy(&has_bits);
          _impl_.max_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.UnitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 unit_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit_type(), target);
  }

  // optional uint32 player_relative = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_relative(), target);
  }

  // optional int32 health = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_health(), target);
  }

  // optional int32 shields = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_shields(), target);
  }

  // optional int32 energy = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_energy(), target);
  }

  // optional int32 transport_slots_taken = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_transport_slots_taken(), target);
  }

  // optional float build_progress = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_build_progress(), target);
  }

  // optional .SC2APIProtocol.UnitInfo add_on = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::add_on(this),
        _Internal::add_on(this).GetCachedSize(), target, stream);
  }

  // optional int32 max_health = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_health(), target);
  }

  // optional int32 max_shields = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_max_shields(), target);
  }

  // optional int32 max_energy = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_energy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.UnitInfo)
  return target;
}

size_t UnitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.UnitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SC2APIProtocol.UnitInfo add_on = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.add_on_);
    }

    // optional uint32 unit_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unit_type());
    }

    // optional uint32 player_relative = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_relative());
    }

    // optional int32 health = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_health());
    }

    // optional int32 shields = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shields());
    }

    // optional int32 energy = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_energy());
    }

    // optional int32 transport_slots_taken = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transport_slots_taken());
    }

    // optional float build_progress = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 max_health = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_health());
    }

    // optional int32 max_shields = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_shields());
    }

    // optional int32 max_energy = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_energy());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitInfo::GetClassData() const { return &_class_data_; }


void UnitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnitInfo*>(&to_msg);
  auto& from = static_cast<const UnitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.UnitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_add_on()->::SC2APIProtocol::UnitInfo::MergeFrom(
          from._internal_add_on());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unit_type_ = from._impl_.unit_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_relative_ = from._impl_.player_relative_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shields_ = from._impl_.shields_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.energy_ = from._impl_.energy_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.transport_slots_taken_ = from._impl_.transport_slots_taken_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.build_progress_ = from._impl_.build_progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.max_health_ = from._impl_.max_health_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_shields_ = from._impl_.max_shields_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.max_energy_ = from._impl_.max_energy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitInfo::CopyFrom(const UnitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.UnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitInfo::IsInitialized() const {
  return true;
}

void UnitInfo::InternalSwap(UnitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitInfo, _impl_.max_energy_)
      + sizeof(UnitInfo::_impl_.max_energy_)
      - PROTOBUF_FIELD_OFFSET(UnitInfo, _impl_.add_on_)>(
          reinterpret_cast<char*>(&_impl_.add_on_),
          reinterpret_cast<char*>(&other->_impl_.add_on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[2]);
}

// ===================================================================

class SinglePanel::_Internal {
 public:
  using HasBits = decltype(std::declval<SinglePanel>()._impl_._has_bits_);
  static const ::SC2APIProtocol::UnitInfo& unit(const SinglePanel* msg);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attack_upgrade_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_armor_upgrade_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shield_upgrade_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::SC2APIProtocol::UnitInfo&
SinglePanel::_Internal::unit(const SinglePanel* msg) {
  return *msg->_impl_.unit_;
}
SinglePanel::SinglePanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.SinglePanel)
}
SinglePanel::SinglePanel(const SinglePanel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SinglePanel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffs_){from._impl_.buffs_}
    , decltype(_impl_.unit_){nullptr}
    , decltype(_impl_.attack_upgrade_level_){}
    , decltype(_impl_.armor_upgrade_level_){}
    , decltype(_impl_.shield_upgrade_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit()) {
    _this->_impl_.unit_ = new ::SC2APIProtocol::UnitInfo(*from._impl_.unit_);
  }
  ::memcpy(&_impl_.attack_upgrade_level_, &from._impl_.attack_upgrade_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shield_upgrade_level_) -
    reinterpret_cast<char*>(&_impl_.attack_upgrade_level_)) + sizeof(_impl_.shield_upgrade_level_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.SinglePanel)
}

inline void SinglePanel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffs_){arena}
    , decltype(_impl_.unit_){nullptr}
    , decltype(_impl_.attack_upgrade_level_){0}
    , decltype(_impl_.armor_upgrade_level_){0}
    , decltype(_impl_.shield_upgrade_level_){0}
  };
}

SinglePanel::~SinglePanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.SinglePanel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SinglePanel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffs_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.unit_;
}

void SinglePanel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SinglePanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.SinglePanel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buffs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unit_ != nullptr);
    _impl_.unit_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.attack_upgrade_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shield_upgrade_level_) -
        reinterpret_cast<char*>(&_impl_.attack_upgrade_level_)) + sizeof(_impl_.shield_upgrade_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SinglePanel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.UnitInfo unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attack_upgrade_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attack_upgrade_level(&has_bits);
          _impl_.attack_upgrade_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 armor_upgrade_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_armor_upgrade_level(&has_bits);
          _impl_.armor_upgrade_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shield_upgrade_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_shield_upgrade_level(&has_bits);
          _impl_.shield_upgrade_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 buffs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_buffs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buffs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SinglePanel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.SinglePanel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unit(this),
        _Internal::unit(this).GetCachedSize(), target, stream);
  }

  // optional int32 attack_upgrade_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_attack_upgrade_level(), target);
  }

  // optional int32 armor_upgrade_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_armor_upgrade_level(), target);
  }

  // optional int32 shield_upgrade_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_shield_upgrade_level(), target);
  }

  // repeated int32 buffs = 5;
  for (int i = 0, n = this->_internal_buffs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_buffs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.SinglePanel)
  return target;
}

size_t SinglePanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.SinglePanel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 buffs = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.buffs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_buffs_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .SC2APIProtocol.UnitInfo unit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_);
    }

    // optional int32 attack_upgrade_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attack_upgrade_level());
    }

    // optional int32 armor_upgrade_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_armor_upgrade_level());
    }

    // optional int32 shield_upgrade_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shield_upgrade_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SinglePanel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SinglePanel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SinglePanel::GetClassData() const { return &_class_data_; }


void SinglePanel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SinglePanel*>(&to_msg);
  auto& from = static_cast<const SinglePanel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.SinglePanel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buffs_.MergeFrom(from._impl_.buffs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unit()->::SC2APIProtocol::UnitInfo::MergeFrom(
          from._internal_unit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attack_upgrade_level_ = from._impl_.attack_upgrade_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.armor_upgrade_level_ = from._impl_.armor_upgrade_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shield_upgrade_level_ = from._impl_.shield_upgrade_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SinglePanel::CopyFrom(const SinglePanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.SinglePanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePanel::IsInitialized() const {
  return true;
}

void SinglePanel::InternalSwap(SinglePanel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buffs_.InternalSwap(&other->_impl_.buffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SinglePanel, _impl_.shield_upgrade_level_)
      + sizeof(SinglePanel::_impl_.shield_upgrade_level_)
      - PROTOBUF_FIELD_OFFSET(SinglePanel, _impl_.unit_)>(
          reinterpret_cast<char*>(&_impl_.unit_),
          reinterpret_cast<char*>(&other->_impl_.unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePanel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[3]);
}

// ===================================================================

class MultiPanel::_Internal {
 public:
};

MultiPanel::MultiPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.MultiPanel)
}
MultiPanel::MultiPanel(const MultiPanel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiPanel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.units_){from._impl_.units_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.MultiPanel)
}

inline void MultiPanel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.units_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiPanel::~MultiPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.MultiPanel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiPanel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.units_.~RepeatedPtrField();
}

void MultiPanel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.MultiPanel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiPanel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.UnitInfo units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiPanel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.MultiPanel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.UnitInfo units = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.MultiPanel)
  return target;
}

size_t MultiPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.MultiPanel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.UnitInfo units = 1;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->_impl_.units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiPanel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiPanel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiPanel::GetClassData() const { return &_class_data_; }


void MultiPanel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiPanel*>(&to_msg);
  auto& from = static_cast<const MultiPanel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.MultiPanel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.units_.MergeFrom(from._impl_.units_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiPanel::CopyFrom(const MultiPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.MultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPanel::IsInitialized() const {
  return true;
}

void MultiPanel::InternalSwap(MultiPanel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.units_.InternalSwap(&other->_impl_.units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiPanel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[4]);
}

// ===================================================================

class CargoPanel::_Internal {
 public:
  using HasBits = decltype(std::declval<CargoPanel>()._impl_._has_bits_);
  static const ::SC2APIProtocol::UnitInfo& unit(const CargoPanel* msg);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slots_available(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::UnitInfo&
CargoPanel::_Internal::unit(const CargoPanel* msg) {
  return *msg->_impl_.unit_;
}
CargoPanel::CargoPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.CargoPanel)
}
CargoPanel::CargoPanel(const CargoPanel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CargoPanel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passengers_){from._impl_.passengers_}
    , decltype(_impl_.unit_){nullptr}
    , decltype(_impl_.slots_available_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit()) {
    _this->_impl_.unit_ = new ::SC2APIProtocol::UnitInfo(*from._impl_.unit_);
  }
  _this->_impl_.slots_available_ = from._impl_.slots_available_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.CargoPanel)
}

inline void CargoPanel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passengers_){arena}
    , decltype(_impl_.unit_){nullptr}
    , decltype(_impl_.slots_available_){0}
  };
}

CargoPanel::~CargoPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.CargoPanel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CargoPanel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.passengers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.unit_;
}

void CargoPanel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CargoPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.CargoPanel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.passengers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unit_ != nullptr);
    _impl_.unit_->Clear();
  }
  _impl_.slots_available_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CargoPanel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.UnitInfo unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.UnitInfo passengers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passengers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 slots_available = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_slots_available(&has_bits);
          _impl_.slots_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CargoPanel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.CargoPanel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unit(this),
        _Internal::unit(this).GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.UnitInfo passengers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_passengers_size()); i < n; i++) {
    const auto& repfield = this->_internal_passengers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 slots_available = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_slots_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.CargoPanel)
  return target;
}

size_t CargoPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.CargoPanel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.UnitInfo passengers = 2;
  total_size += 1UL * this->_internal_passengers_size();
  for (const auto& msg : this->_impl_.passengers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.UnitInfo unit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_);
    }

    // optional int32 slots_available = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slots_available());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CargoPanel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CargoPanel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CargoPanel::GetClassData() const { return &_class_data_; }


void CargoPanel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CargoPanel*>(&to_msg);
  auto& from = static_cast<const CargoPanel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.CargoPanel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.passengers_.MergeFrom(from._impl_.passengers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unit()->::SC2APIProtocol::UnitInfo::MergeFrom(
          from._internal_unit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slots_available_ = from._impl_.slots_available_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CargoPanel::CopyFrom(const CargoPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.CargoPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CargoPanel::IsInitialized() const {
  return true;
}

void CargoPanel::InternalSwap(CargoPanel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.passengers_.InternalSwap(&other->_impl_.passengers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CargoPanel, _impl_.slots_available_)
      + sizeof(CargoPanel::_impl_.slots_available_)
      - PROTOBUF_FIELD_OFFSET(CargoPanel, _impl_.unit_)>(
          reinterpret_cast<char*>(&_impl_.unit_),
          reinterpret_cast<char*>(&other->_impl_.unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CargoPanel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[5]);
}

// ===================================================================

class BuildItem::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildItem>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_build_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BuildItem::BuildItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.BuildItem)
}
BuildItem::BuildItem(const BuildItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.build_progress_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.build_progress_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.build_progress_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.BuildItem)
}

inline void BuildItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0u}
    , decltype(_impl_.build_progress_){0}
  };
}

BuildItem::~BuildItem() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.BuildItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BuildItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildItem::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.BuildItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.build_progress_) -
        reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.build_progress_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float build_progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_build_progress(&has_bits);
          _impl_.build_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.BuildItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional float build_progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_build_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.BuildItem)
  return target;
}

size_t BuildItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.BuildItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_id());
    }

    // optional float build_progress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildItem::GetClassData() const { return &_class_data_; }


void BuildItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildItem*>(&to_msg);
  auto& from = static_cast<const BuildItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.BuildItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.build_progress_ = from._impl_.build_progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildItem::CopyFrom(const BuildItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.BuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildItem::IsInitialized() const {
  return true;
}

void BuildItem::InternalSwap(BuildItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildItem, _impl_.build_progress_)
      + sizeof(BuildItem::_impl_.build_progress_)
      - PROTOBUF_FIELD_OFFSET(BuildItem, _impl_.ability_id_)>(
          reinterpret_cast<char*>(&_impl_.ability_id_),
          reinterpret_cast<char*>(&other->_impl_.ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[6]);
}

// ===================================================================

class ProductionPanel::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductionPanel>()._impl_._has_bits_);
  static const ::SC2APIProtocol::UnitInfo& unit(const ProductionPanel* msg);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SC2APIProtocol::UnitInfo&
ProductionPanel::_Internal::unit(const ProductionPanel* msg) {
  return *msg->_impl_.unit_;
}
ProductionPanel::ProductionPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ProductionPanel)
}
ProductionPanel::ProductionPanel(const ProductionPanel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductionPanel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_queue_){from._impl_.build_queue_}
    , decltype(_impl_.production_queue_){from._impl_.production_queue_}
    , decltype(_impl_.unit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit()) {
    _this->_impl_.unit_ = new ::SC2APIProtocol::UnitInfo(*from._impl_.unit_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ProductionPanel)
}

inline void ProductionPanel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_queue_){arena}
    , decltype(_impl_.production_queue_){arena}
    , decltype(_impl_.unit_){nullptr}
  };
}

ProductionPanel::~ProductionPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ProductionPanel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductionPanel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.build_queue_.~RepeatedPtrField();
  _impl_.production_queue_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.unit_;
}

void ProductionPanel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductionPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ProductionPanel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.build_queue_.Clear();
  _impl_.production_queue_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.unit_ != nullptr);
    _impl_.unit_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductionPanel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.UnitInfo unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_build_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.BuildItem production_queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_production_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductionPanel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ProductionPanel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unit(this),
        _Internal::unit(this).GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_build_queue_size()); i < n; i++) {
    const auto& repfield = this->_internal_build_queue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.BuildItem production_queue = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_production_queue_size()); i < n; i++) {
    const auto& repfield = this->_internal_production_queue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ProductionPanel)
  return target;
}

size_t ProductionPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ProductionPanel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
  total_size += 1UL * this->_internal_build_queue_size();
  for (const auto& msg : this->_impl_.build_queue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.BuildItem production_queue = 3;
  total_size += 1UL * this->_internal_production_queue_size();
  for (const auto& msg : this->_impl_.production_queue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .SC2APIProtocol.UnitInfo unit = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductionPanel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductionPanel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductionPanel::GetClassData() const { return &_class_data_; }


void ProductionPanel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductionPanel*>(&to_msg);
  auto& from = static_cast<const ProductionPanel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ProductionPanel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.build_queue_.MergeFrom(from._impl_.build_queue_);
  _this->_impl_.production_queue_.MergeFrom(from._impl_.production_queue_);
  if (from._internal_has_unit()) {
    _this->_internal_mutable_unit()->::SC2APIProtocol::UnitInfo::MergeFrom(
        from._internal_unit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductionPanel::CopyFrom(const ProductionPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ProductionPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductionPanel::IsInitialized() const {
  return true;
}

void ProductionPanel::InternalSwap(ProductionPanel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.build_queue_.InternalSwap(&other->_impl_.build_queue_);
  _impl_.production_queue_.InternalSwap(&other->_impl_.production_queue_);
  swap(_impl_.unit_, other->_impl_.unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductionPanel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[7]);
}

// ===================================================================

class ActionUI::_Internal {
 public:
  static const ::SC2APIProtocol::ActionControlGroup& control_group(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionSelectArmy& select_army(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionSelectWarpGates& select_warp_gates(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionSelectLarva& select_larva(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionSelectIdleWorker& select_idle_worker(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionMultiPanel& multi_panel(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionCargoPanelUnload& cargo_panel(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue& production_panel(const ActionUI* msg);
  static const ::SC2APIProtocol::ActionToggleAutocast& toggle_autocast(const ActionUI* msg);
};

const ::SC2APIProtocol::ActionControlGroup&
ActionUI::_Internal::control_group(const ActionUI* msg) {
  return *msg->_impl_.action_.control_group_;
}
const ::SC2APIProtocol::ActionSelectArmy&
ActionUI::_Internal::select_army(const ActionUI* msg) {
  return *msg->_impl_.action_.select_army_;
}
const ::SC2APIProtocol::ActionSelectWarpGates&
ActionUI::_Internal::select_warp_gates(const ActionUI* msg) {
  return *msg->_impl_.action_.select_warp_gates_;
}
const ::SC2APIProtocol::ActionSelectLarva&
ActionUI::_Internal::select_larva(const ActionUI* msg) {
  return *msg->_impl_.action_.select_larva_;
}
const ::SC2APIProtocol::ActionSelectIdleWorker&
ActionUI::_Internal::select_idle_worker(const ActionUI* msg) {
  return *msg->_impl_.action_.select_idle_worker_;
}
const ::SC2APIProtocol::ActionMultiPanel&
ActionUI::_Internal::multi_panel(const ActionUI* msg) {
  return *msg->_impl_.action_.multi_panel_;
}
const ::SC2APIProtocol::ActionCargoPanelUnload&
ActionUI::_Internal::cargo_panel(const ActionUI* msg) {
  return *msg->_impl_.action_.cargo_panel_;
}
const ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue&
ActionUI::_Internal::production_panel(const ActionUI* msg) {
  return *msg->_impl_.action_.production_panel_;
}
const ::SC2APIProtocol::ActionToggleAutocast&
ActionUI::_Internal::toggle_autocast(const ActionUI* msg) {
  return *msg->_impl_.action_.toggle_autocast_;
}
void ActionUI::set_allocated_control_group(::SC2APIProtocol::ActionControlGroup* control_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (control_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_group);
    if (message_arena != submessage_arena) {
      control_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_group, submessage_arena);
    }
    set_has_control_group();
    _impl_.action_.control_group_ = control_group;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.control_group)
}
void ActionUI::set_allocated_select_army(::SC2APIProtocol::ActionSelectArmy* select_army) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (select_army) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select_army);
    if (message_arena != submessage_arena) {
      select_army = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_army, submessage_arena);
    }
    set_has_select_army();
    _impl_.action_.select_army_ = select_army;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_army)
}
void ActionUI::set_allocated_select_warp_gates(::SC2APIProtocol::ActionSelectWarpGates* select_warp_gates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (select_warp_gates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select_warp_gates);
    if (message_arena != submessage_arena) {
      select_warp_gates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_warp_gates, submessage_arena);
    }
    set_has_select_warp_gates();
    _impl_.action_.select_warp_gates_ = select_warp_gates;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_warp_gates)
}
void ActionUI::set_allocated_select_larva(::SC2APIProtocol::ActionSelectLarva* select_larva) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (select_larva) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select_larva);
    if (message_arena != submessage_arena) {
      select_larva = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_larva, submessage_arena);
    }
    set_has_select_larva();
    _impl_.action_.select_larva_ = select_larva;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_larva)
}
void ActionUI::set_allocated_select_idle_worker(::SC2APIProtocol::ActionSelectIdleWorker* select_idle_worker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (select_idle_worker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select_idle_worker);
    if (message_arena != submessage_arena) {
      select_idle_worker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_idle_worker, submessage_arena);
    }
    set_has_select_idle_worker();
    _impl_.action_.select_idle_worker_ = select_idle_worker;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_idle_worker)
}
void ActionUI::set_allocated_multi_panel(::SC2APIProtocol::ActionMultiPanel* multi_panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (multi_panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi_panel);
    if (message_arena != submessage_arena) {
      multi_panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_panel, submessage_arena);
    }
    set_has_multi_panel();
    _impl_.action_.multi_panel_ = multi_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.multi_panel)
}
void ActionUI::set_allocated_cargo_panel(::SC2APIProtocol::ActionCargoPanelUnload* cargo_panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (cargo_panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cargo_panel);
    if (message_arena != submessage_arena) {
      cargo_panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cargo_panel, submessage_arena);
    }
    set_has_cargo_panel();
    _impl_.action_.cargo_panel_ = cargo_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.cargo_panel)
}
void ActionUI::set_allocated_production_panel(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* production_panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (production_panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(production_panel);
    if (message_arena != submessage_arena) {
      production_panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, production_panel, submessage_arena);
    }
    set_has_production_panel();
    _impl_.action_.production_panel_ = production_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.production_panel)
}
void ActionUI::set_allocated_toggle_autocast(::SC2APIProtocol::ActionToggleAutocast* toggle_autocast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (toggle_autocast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(toggle_autocast);
    if (message_arena != submessage_arena) {
      toggle_autocast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toggle_autocast, submessage_arena);
    }
    set_has_toggle_autocast();
    _impl_.action_.toggle_autocast_ = toggle_autocast;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.toggle_autocast)
}
ActionUI::ActionUI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionUI)
}
ActionUI::ActionUI(const ActionUI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionUI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kControlGroup: {
      _this->_internal_mutable_control_group()->::SC2APIProtocol::ActionControlGroup::MergeFrom(
          from._internal_control_group());
      break;
    }
    case kSelectArmy: {
      _this->_internal_mutable_select_army()->::SC2APIProtocol::ActionSelectArmy::MergeFrom(
          from._internal_select_army());
      break;
    }
    case kSelectWarpGates: {
      _this->_internal_mutable_select_warp_gates()->::SC2APIProtocol::ActionSelectWarpGates::MergeFrom(
          from._internal_select_warp_gates());
      break;
    }
    case kSelectLarva: {
      _this->_internal_mutable_select_larva()->::SC2APIProtocol::ActionSelectLarva::MergeFrom(
          from._internal_select_larva());
      break;
    }
    case kSelectIdleWorker: {
      _this->_internal_mutable_select_idle_worker()->::SC2APIProtocol::ActionSelectIdleWorker::MergeFrom(
          from._internal_select_idle_worker());
      break;
    }
    case kMultiPanel: {
      _this->_internal_mutable_multi_panel()->::SC2APIProtocol::ActionMultiPanel::MergeFrom(
          from._internal_multi_panel());
      break;
    }
    case kCargoPanel: {
      _this->_internal_mutable_cargo_panel()->::SC2APIProtocol::ActionCargoPanelUnload::MergeFrom(
          from._internal_cargo_panel());
      break;
    }
    case kProductionPanel: {
      _this->_internal_mutable_production_panel()->::SC2APIProtocol::ActionProductionPanelRemoveFromQueue::MergeFrom(
          from._internal_production_panel());
      break;
    }
    case kToggleAutocast: {
      _this->_internal_mutable_toggle_autocast()->::SC2APIProtocol::ActionToggleAutocast::MergeFrom(
          from._internal_toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionUI)
}

inline void ActionUI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action();
}

ActionUI::~ActionUI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionUI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionUI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ActionUI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionUI::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionUI)
  switch (action_case()) {
    case kControlGroup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.control_group_;
      }
      break;
    }
    case kSelectArmy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.select_army_;
      }
      break;
    }
    case kSelectWarpGates: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.select_warp_gates_;
      }
      break;
    }
    case kSelectLarva: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.select_larva_;
      }
      break;
    }
    case kSelectIdleWorker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.select_idle_worker_;
      }
      break;
    }
    case kMultiPanel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.multi_panel_;
      }
      break;
    }
    case kCargoPanel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.cargo_panel_;
      }
      break;
    }
    case kProductionPanel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.production_panel_;
      }
      break;
    }
    case kToggleAutocast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.toggle_autocast_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void ActionUI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionUI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionUI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.ActionControlGroup control_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSelectArmy select_army = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_army(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_warp_gates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSelectLarva select_larva = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_larva(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_idle_worker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cargo_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_production_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggle_autocast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionUI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionUI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kControlGroup: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::control_group(this),
          _Internal::control_group(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelectArmy: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::select_army(this),
          _Internal::select_army(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelectWarpGates: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::select_warp_gates(this),
          _Internal::select_warp_gates(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelectLarva: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::select_larva(this),
          _Internal::select_larva(this).GetCachedSize(), target, stream);
      break;
    }
    case kSelectIdleWorker: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::select_idle_worker(this),
          _Internal::select_idle_worker(this).GetCachedSize(), target, stream);
      break;
    }
    case kMultiPanel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::multi_panel(this),
          _Internal::multi_panel(this).GetCachedSize(), target, stream);
      break;
    }
    case kCargoPanel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::cargo_panel(this),
          _Internal::cargo_panel(this).GetCachedSize(), target, stream);
      break;
    }
    case kProductionPanel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::production_panel(this),
          _Internal::production_panel(this).GetCachedSize(), target, stream);
      break;
    }
    case kToggleAutocast: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::toggle_autocast(this),
          _Internal::toggle_autocast(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionUI)
  return target;
}

size_t ActionUI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionUI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .SC2APIProtocol.ActionControlGroup control_group = 1;
    case kControlGroup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.control_group_);
      break;
    }
    // .SC2APIProtocol.ActionSelectArmy select_army = 2;
    case kSelectArmy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.select_army_);
      break;
    }
    // .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
    case kSelectWarpGates: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.select_warp_gates_);
      break;
    }
    // .SC2APIProtocol.ActionSelectLarva select_larva = 4;
    case kSelectLarva: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.select_larva_);
      break;
    }
    // .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
    case kSelectIdleWorker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.select_idle_worker_);
      break;
    }
    // .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
    case kMultiPanel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.multi_panel_);
      break;
    }
    // .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
    case kCargoPanel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.cargo_panel_);
      break;
    }
    // .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
    case kProductionPanel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.production_panel_);
      break;
    }
    // .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
    case kToggleAutocast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.toggle_autocast_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionUI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionUI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionUI::GetClassData() const { return &_class_data_; }


void ActionUI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionUI*>(&to_msg);
  auto& from = static_cast<const ActionUI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionUI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kControlGroup: {
      _this->_internal_mutable_control_group()->::SC2APIProtocol::ActionControlGroup::MergeFrom(
          from._internal_control_group());
      break;
    }
    case kSelectArmy: {
      _this->_internal_mutable_select_army()->::SC2APIProtocol::ActionSelectArmy::MergeFrom(
          from._internal_select_army());
      break;
    }
    case kSelectWarpGates: {
      _this->_internal_mutable_select_warp_gates()->::SC2APIProtocol::ActionSelectWarpGates::MergeFrom(
          from._internal_select_warp_gates());
      break;
    }
    case kSelectLarva: {
      _this->_internal_mutable_select_larva()->::SC2APIProtocol::ActionSelectLarva::MergeFrom(
          from._internal_select_larva());
      break;
    }
    case kSelectIdleWorker: {
      _this->_internal_mutable_select_idle_worker()->::SC2APIProtocol::ActionSelectIdleWorker::MergeFrom(
          from._internal_select_idle_worker());
      break;
    }
    case kMultiPanel: {
      _this->_internal_mutable_multi_panel()->::SC2APIProtocol::ActionMultiPanel::MergeFrom(
          from._internal_multi_panel());
      break;
    }
    case kCargoPanel: {
      _this->_internal_mutable_cargo_panel()->::SC2APIProtocol::ActionCargoPanelUnload::MergeFrom(
          from._internal_cargo_panel());
      break;
    }
    case kProductionPanel: {
      _this->_internal_mutable_production_panel()->::SC2APIProtocol::ActionProductionPanelRemoveFromQueue::MergeFrom(
          from._internal_production_panel());
      break;
    }
    case kToggleAutocast: {
      _this->_internal_mutable_toggle_autocast()->::SC2APIProtocol::ActionToggleAutocast::MergeFrom(
          from._internal_toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionUI::CopyFrom(const ActionUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionUI::IsInitialized() const {
  return true;
}

void ActionUI::InternalSwap(ActionUI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionUI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[8]);
}

// ===================================================================

class ActionControlGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionControlGroup>()._impl_._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_control_group_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionControlGroup::ActionControlGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionControlGroup)
}
ActionControlGroup::ActionControlGroup(const ActionControlGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionControlGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.control_group_index_){}
    , decltype(_impl_.action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.control_group_index_, &from._impl_.control_group_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.control_group_index_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionControlGroup)
}

inline void ActionControlGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.control_group_index_){0u}
    , decltype(_impl_.action_){1}
  };
}

ActionControlGroup::~ActionControlGroup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionControlGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionControlGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionControlGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionControlGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.control_group_index_ = 0u;
    _impl_.action_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionControlGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionControlGroup_ControlGroupAction_IsValid(val))) {
            _internal_set_action(static_cast<::SC2APIProtocol::ActionControlGroup_ControlGroupAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 control_group_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_control_group_index(&has_bits);
          _impl_.control_group_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionControlGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionControlGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // optional uint32 control_group_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_control_group_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionControlGroup)
  return target;
}

size_t ActionControlGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionControlGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 control_group_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_control_group_index());
    }

    // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionControlGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionControlGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionControlGroup::GetClassData() const { return &_class_data_; }


void ActionControlGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionControlGroup*>(&to_msg);
  auto& from = static_cast<const ActionControlGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionControlGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.control_group_index_ = from._impl_.control_group_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.action_ = from._impl_.action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionControlGroup::CopyFrom(const ActionControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionControlGroup::IsInitialized() const {
  return true;
}

void ActionControlGroup::InternalSwap(ActionControlGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.control_group_index_, other->_impl_.control_group_index_);
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionControlGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[9]);
}

// ===================================================================

class ActionSelectArmy::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSelectArmy>()._impl_._has_bits_);
  static void set_has_selection_add(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionSelectArmy::ActionSelectArmy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSelectArmy)
}
ActionSelectArmy::ActionSelectArmy(const ActionSelectArmy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSelectArmy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_add_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.selection_add_ = from._impl_.selection_add_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectArmy)
}

inline void ActionSelectArmy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_add_){false}
  };
}

ActionSelectArmy::~ActionSelectArmy() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectArmy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSelectArmy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionSelectArmy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSelectArmy::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectArmy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_add_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSelectArmy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool selection_add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_selection_add(&has_bits);
          _impl_.selection_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSelectArmy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectArmy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool selection_add = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_selection_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectArmy)
  return target;
}

size_t ActionSelectArmy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectArmy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool selection_add = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSelectArmy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSelectArmy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSelectArmy::GetClassData() const { return &_class_data_; }


void ActionSelectArmy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSelectArmy*>(&to_msg);
  auto& from = static_cast<const ActionSelectArmy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectArmy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selection_add()) {
    _this->_internal_set_selection_add(from._internal_selection_add());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSelectArmy::CopyFrom(const ActionSelectArmy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectArmy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectArmy::IsInitialized() const {
  return true;
}

void ActionSelectArmy::InternalSwap(ActionSelectArmy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.selection_add_, other->_impl_.selection_add_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSelectArmy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[10]);
}

// ===================================================================

class ActionSelectWarpGates::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSelectWarpGates>()._impl_._has_bits_);
  static void set_has_selection_add(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionSelectWarpGates::ActionSelectWarpGates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSelectWarpGates)
}
ActionSelectWarpGates::ActionSelectWarpGates(const ActionSelectWarpGates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSelectWarpGates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_add_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.selection_add_ = from._impl_.selection_add_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectWarpGates)
}

inline void ActionSelectWarpGates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_add_){false}
  };
}

ActionSelectWarpGates::~ActionSelectWarpGates() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectWarpGates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSelectWarpGates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionSelectWarpGates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSelectWarpGates::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectWarpGates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_add_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSelectWarpGates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool selection_add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_selection_add(&has_bits);
          _impl_.selection_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSelectWarpGates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectWarpGates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool selection_add = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_selection_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectWarpGates)
  return target;
}

size_t ActionSelectWarpGates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectWarpGates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool selection_add = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSelectWarpGates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSelectWarpGates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSelectWarpGates::GetClassData() const { return &_class_data_; }


void ActionSelectWarpGates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSelectWarpGates*>(&to_msg);
  auto& from = static_cast<const ActionSelectWarpGates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectWarpGates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selection_add()) {
    _this->_internal_set_selection_add(from._internal_selection_add());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSelectWarpGates::CopyFrom(const ActionSelectWarpGates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectWarpGates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectWarpGates::IsInitialized() const {
  return true;
}

void ActionSelectWarpGates::InternalSwap(ActionSelectWarpGates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.selection_add_, other->_impl_.selection_add_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSelectWarpGates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[11]);
}

// ===================================================================

class ActionSelectLarva::_Internal {
 public:
};

ActionSelectLarva::ActionSelectLarva(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSelectLarva)
}
ActionSelectLarva::ActionSelectLarva(const ActionSelectLarva& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ActionSelectLarva* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectLarva)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSelectLarva::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSelectLarva::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ActionSelectLarva::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[12]);
}

// ===================================================================

class ActionSelectIdleWorker::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSelectIdleWorker>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionSelectIdleWorker::ActionSelectIdleWorker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSelectIdleWorker)
}
ActionSelectIdleWorker::ActionSelectIdleWorker(const ActionSelectIdleWorker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSelectIdleWorker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectIdleWorker)
}

inline void ActionSelectIdleWorker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){1}
  };
}

ActionSelectIdleWorker::~ActionSelectIdleWorker() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectIdleWorker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSelectIdleWorker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionSelectIdleWorker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSelectIdleWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectIdleWorker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSelectIdleWorker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionSelectIdleWorker_Type_IsValid(val))) {
            _internal_set_type(static_cast<::SC2APIProtocol::ActionSelectIdleWorker_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSelectIdleWorker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectIdleWorker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectIdleWorker)
  return target;
}

size_t ActionSelectIdleWorker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectIdleWorker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSelectIdleWorker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSelectIdleWorker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSelectIdleWorker::GetClassData() const { return &_class_data_; }


void ActionSelectIdleWorker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSelectIdleWorker*>(&to_msg);
  auto& from = static_cast<const ActionSelectIdleWorker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectIdleWorker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSelectIdleWorker::CopyFrom(const ActionSelectIdleWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectIdleWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectIdleWorker::IsInitialized() const {
  return true;
}

void ActionSelectIdleWorker::InternalSwap(ActionSelectIdleWorker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSelectIdleWorker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[13]);
}

// ===================================================================

class ActionMultiPanel::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionMultiPanel>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionMultiPanel::ActionMultiPanel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionMultiPanel)
}
ActionMultiPanel::ActionMultiPanel(const ActionMultiPanel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionMultiPanel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_index_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unit_index_, &from._impl_.unit_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.unit_index_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionMultiPanel)
}

inline void ActionMultiPanel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_index_){0}
    , decltype(_impl_.type_){1}
  };
}

ActionMultiPanel::~ActionMultiPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionMultiPanel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionMultiPanel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionMultiPanel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionMultiPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionMultiPanel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.unit_index_ = 0;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionMultiPanel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionMultiPanel_Type_IsValid(val))) {
            _internal_set_type(static_cast<::SC2APIProtocol::ActionMultiPanel_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 unit_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unit_index(&has_bits);
          _impl_.unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionMultiPanel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionMultiPanel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 unit_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionMultiPanel)
  return target;
}

size_t ActionMultiPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionMultiPanel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 unit_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_index());
    }

    // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionMultiPanel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionMultiPanel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionMultiPanel::GetClassData() const { return &_class_data_; }


void ActionMultiPanel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionMultiPanel*>(&to_msg);
  auto& from = static_cast<const ActionMultiPanel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionMultiPanel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unit_index_ = from._impl_.unit_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionMultiPanel::CopyFrom(const ActionMultiPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionMultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionMultiPanel::IsInitialized() const {
  return true;
}

void ActionMultiPanel::InternalSwap(ActionMultiPanel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unit_index_, other->_impl_.unit_index_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionMultiPanel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[14]);
}

// ===================================================================

class ActionCargoPanelUnload::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionCargoPanelUnload>()._impl_._has_bits_);
  static void set_has_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionCargoPanelUnload::ActionCargoPanelUnload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionCargoPanelUnload)
}
ActionCargoPanelUnload::ActionCargoPanelUnload(const ActionCargoPanelUnload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionCargoPanelUnload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unit_index_ = from._impl_.unit_index_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionCargoPanelUnload)
}

inline void ActionCargoPanelUnload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_index_){0}
  };
}

ActionCargoPanelUnload::~ActionCargoPanelUnload() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionCargoPanelUnload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionCargoPanelUnload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionCargoPanelUnload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionCargoPanelUnload::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionCargoPanelUnload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionCargoPanelUnload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 unit_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_index(&has_bits);
          _impl_.unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionCargoPanelUnload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionCargoPanelUnload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 unit_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionCargoPanelUnload)
  return target;
}

size_t ActionCargoPanelUnload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionCargoPanelUnload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 unit_index = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionCargoPanelUnload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionCargoPanelUnload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionCargoPanelUnload::GetClassData() const { return &_class_data_; }


void ActionCargoPanelUnload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionCargoPanelUnload*>(&to_msg);
  auto& from = static_cast<const ActionCargoPanelUnload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionCargoPanelUnload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit_index()) {
    _this->_internal_set_unit_index(from._internal_unit_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionCargoPanelUnload::CopyFrom(const ActionCargoPanelUnload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionCargoPanelUnload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCargoPanelUnload::IsInitialized() const {
  return true;
}

void ActionCargoPanelUnload::InternalSwap(ActionCargoPanelUnload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unit_index_, other->_impl_.unit_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionCargoPanelUnload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[15]);
}

// ===================================================================

class ActionProductionPanelRemoveFromQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionProductionPanelRemoveFromQueue>()._impl_._has_bits_);
  static void set_has_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
}
ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue(const ActionProductionPanelRemoveFromQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionProductionPanelRemoveFromQueue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unit_index_ = from._impl_.unit_index_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
}

inline void ActionProductionPanelRemoveFromQueue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_index_){0}
  };
}

ActionProductionPanelRemoveFromQueue::~ActionProductionPanelRemoveFromQueue() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionProductionPanelRemoveFromQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionProductionPanelRemoveFromQueue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionProductionPanelRemoveFromQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProductionPanelRemoveFromQueue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 unit_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_index(&has_bits);
          _impl_.unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionProductionPanelRemoveFromQueue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 unit_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  return target;
}

size_t ActionProductionPanelRemoveFromQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 unit_index = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProductionPanelRemoveFromQueue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionProductionPanelRemoveFromQueue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProductionPanelRemoveFromQueue::GetClassData() const { return &_class_data_; }


void ActionProductionPanelRemoveFromQueue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionProductionPanelRemoveFromQueue*>(&to_msg);
  auto& from = static_cast<const ActionProductionPanelRemoveFromQueue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit_index()) {
    _this->_internal_set_unit_index(from._internal_unit_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProductionPanelRemoveFromQueue::CopyFrom(const ActionProductionPanelRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProductionPanelRemoveFromQueue::IsInitialized() const {
  return true;
}

void ActionProductionPanelRemoveFromQueue::InternalSwap(ActionProductionPanelRemoveFromQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unit_index_, other->_impl_.unit_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProductionPanelRemoveFromQueue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[16]);
}

// ===================================================================

class ActionToggleAutocast::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionToggleAutocast>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionToggleAutocast::ActionToggleAutocast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionToggleAutocast)
}
ActionToggleAutocast::ActionToggleAutocast(const ActionToggleAutocast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionToggleAutocast* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ability_id_ = from._impl_.ability_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionToggleAutocast)
}

inline void ActionToggleAutocast::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0}
  };
}

ActionToggleAutocast::~ActionToggleAutocast() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionToggleAutocast)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionToggleAutocast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionToggleAutocast::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionToggleAutocast::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionToggleAutocast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ability_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionToggleAutocast::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionToggleAutocast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionToggleAutocast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionToggleAutocast)
  return target;
}

size_t ActionToggleAutocast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionToggleAutocast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ability_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionToggleAutocast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionToggleAutocast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionToggleAutocast::GetClassData() const { return &_class_data_; }


void ActionToggleAutocast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionToggleAutocast*>(&to_msg);
  auto& from = static_cast<const ActionToggleAutocast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionToggleAutocast)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ability_id()) {
    _this->_internal_set_ability_id(from._internal_ability_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionToggleAutocast::CopyFrom(const ActionToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionToggleAutocast::IsInitialized() const {
  return true;
}

void ActionToggleAutocast::InternalSwap(ActionToggleAutocast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionToggleAutocast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fui_2eproto_getter, &descriptor_table_s2clientprotocol_2fui_2eproto_once,
      file_level_metadata_s2clientprotocol_2fui_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ObservationUI*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ObservationUI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ObservationUI >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ControlGroup*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ControlGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ControlGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::UnitInfo*
Arena::CreateMaybeMessage< ::SC2APIProtocol::UnitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::UnitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::SinglePanel*
Arena::CreateMaybeMessage< ::SC2APIProtocol::SinglePanel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::SinglePanel >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::MultiPanel*
Arena::CreateMaybeMessage< ::SC2APIProtocol::MultiPanel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::MultiPanel >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::CargoPanel*
Arena::CreateMaybeMessage< ::SC2APIProtocol::CargoPanel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::CargoPanel >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::BuildItem*
Arena::CreateMaybeMessage< ::SC2APIProtocol::BuildItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::BuildItem >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ProductionPanel*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ProductionPanel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ProductionPanel >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionUI*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionUI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionUI >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionControlGroup*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionControlGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionControlGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSelectArmy*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSelectArmy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSelectArmy >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSelectWarpGates*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSelectWarpGates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSelectWarpGates >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSelectLarva*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSelectLarva >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSelectLarva >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSelectIdleWorker*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSelectIdleWorker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSelectIdleWorker >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionMultiPanel*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionMultiPanel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionMultiPanel >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionCargoPanelUnload*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionCargoPanelUnload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionCargoPanelUnload >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionToggleAutocast*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionToggleAutocast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionToggleAutocast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/score.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_s2clientprotocol_2fscore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_s2clientprotocol_2fscore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s2clientprotocol_2fscore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_s2clientprotocol_2fscore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s2clientprotocol_2fscore_2eproto;
namespace SC2APIProtocol {
class CategoryScoreDetails;
struct CategoryScoreDetailsDefaultTypeInternal;
extern CategoryScoreDetailsDefaultTypeInternal _CategoryScoreDetails_default_instance_;
class Score;
struct ScoreDefaultTypeInternal;
extern ScoreDefaultTypeInternal _Score_default_instance_;
class ScoreDetails;
struct ScoreDetailsDefaultTypeInternal;
extern ScoreDetailsDefaultTypeInternal _ScoreDetails_default_instance_;
class VitalScoreDetails;
struct VitalScoreDetailsDefaultTypeInternal;
extern VitalScoreDetailsDefaultTypeInternal _VitalScoreDetails_default_instance_;
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::SC2APIProtocol::CategoryScoreDetails* Arena::CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(Arena*);
template<> ::SC2APIProtocol::Score* Arena::CreateMaybeMessage<::SC2APIProtocol::Score>(Arena*);
template<> ::SC2APIProtocol::ScoreDetails* Arena::CreateMaybeMessage<::SC2APIProtocol::ScoreDetails>(Arena*);
template<> ::SC2APIProtocol::VitalScoreDetails* Arena::CreateMaybeMessage<::SC2APIProtocol::VitalScoreDetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SC2APIProtocol {

enum Score_ScoreType : int {
  Score_ScoreType_Curriculum = 1,
  Score_ScoreType_Melee = 2
};
bool Score_ScoreType_IsValid(int value);
constexpr Score_ScoreType Score_ScoreType_ScoreType_MIN = Score_ScoreType_Curriculum;
constexpr Score_ScoreType Score_ScoreType_ScoreType_MAX = Score_ScoreType_Melee;
constexpr int Score_ScoreType_ScoreType_ARRAYSIZE = Score_ScoreType_ScoreType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Score_ScoreType_descriptor();
template<typename T>
inline const std::string& Score_ScoreType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Score_ScoreType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Score_ScoreType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Score_ScoreType_descriptor(), enum_t_value);
}
inline bool Score_ScoreType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Score_ScoreType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Score_ScoreType>(
    Score_ScoreType_descriptor(), name, value);
}
// ===================================================================

class Score final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.Score) */ {
 public:
  inline Score() : Score(nullptr) {}
  ~Score() override;
  explicit PROTOBUF_CONSTEXPR Score(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Score(const Score& from);
  Score(Score&& from) noexcept
    : Score() {
    *this = ::std::move(from);
  }

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }
  inline Score& operator=(Score&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Score& default_instance() {
    return *internal_default_instance();
  }
  static inline const Score* internal_default_instance() {
    return reinterpret_cast<const Score*>(
               &_Score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Score& a, Score& b) {
    a.Swap(&b);
  }
  inline void Swap(Score* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Score* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Score* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Score>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Score& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Score& from) {
    Score::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Score* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.Score";
  }
  protected:
  explicit Score(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Score_ScoreType ScoreType;
  static constexpr ScoreType Curriculum =
    Score_ScoreType_Curriculum;
  static constexpr ScoreType Melee =
    Score_ScoreType_Melee;
  static inline bool ScoreType_IsValid(int value) {
    return Score_ScoreType_IsValid(value);
  }
  static constexpr ScoreType ScoreType_MIN =
    Score_ScoreType_ScoreType_MIN;
  static constexpr ScoreType ScoreType_MAX =
    Score_ScoreType_ScoreType_MAX;
  static constexpr int ScoreType_ARRAYSIZE =
    Score_ScoreType_ScoreType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScoreType_descriptor() {
    return Score_ScoreType_descriptor();
  }
  template<typename T>
  static inline const std::string& ScoreType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScoreType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScoreType_Name.");
    return Score_ScoreType_Name(enum_t_value);
  }
  static inline bool ScoreType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScoreType* value) {
    return Score_ScoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScoreDetailsFieldNumber = 8,
    kScoreFieldNumber = 7,
    kScoreTypeFieldNumber = 6,
  };
  // optional .SC2APIProtocol.ScoreDetails score_details = 8;
  bool has_score_details() const;
  private:
  bool _internal_has_score_details() const;
  public:
  void clear_score_details();
  const ::SC2APIProtocol::ScoreDetails& score_details() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::ScoreDetails* release_score_details();
  ::SC2APIProtocol::ScoreDetails* mutable_score_details();
  void set_allocated_score_details(::SC2APIProtocol::ScoreDetails* score_details);
  private:
  const ::SC2APIProtocol::ScoreDetails& _internal_score_details() const;
  ::SC2APIProtocol::ScoreDetails* _internal_mutable_score_details();
  public:
  void unsafe_arena_set_allocated_score_details(
      ::SC2APIProtocol::ScoreDetails* score_details);
  ::SC2APIProtocol::ScoreDetails* unsafe_arena_release_score_details();

  // optional int32 score = 7;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
  bool has_score_type() const;
  private:
  bool _internal_has_score_type() const;
  public:
  void clear_score_type();
  ::SC2APIProtocol::Score_ScoreType score_type() const;
  void set_score_type(::SC2APIProtocol::Score_ScoreType value);
  private:
  ::SC2APIProtocol::Score_ScoreType _internal_score_type() const;
  void _internal_set_score_type(::SC2APIProtocol::Score_ScoreType value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.Score)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SC2APIProtocol::ScoreDetails* score_details_;
    int32_t score_;
    int score_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fscore_2eproto;
};
// -------------------------------------------------------------------

class CategoryScoreDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.CategoryScoreDetails) */ {
 public:
  inline CategoryScoreDetails() : CategoryScoreDetails(nullptr) {}
  ~CategoryScoreDetails() override;
  explicit PROTOBUF_CONSTEXPR CategoryScoreDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryScoreDetails(const CategoryScoreDetails& from);
  CategoryScoreDetails(CategoryScoreDetails&& from) noexcept
    : CategoryScoreDetails() {
    *this = ::std::move(from);
  }

  inline CategoryScoreDetails& operator=(const CategoryScoreDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryScoreDetails& operator=(CategoryScoreDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryScoreDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryScoreDetails* internal_default_instance() {
    return reinterpret_cast<const CategoryScoreDetails*>(
               &_CategoryScoreDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CategoryScoreDetails& a, CategoryScoreDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryScoreDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryScoreDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryScoreDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoryScoreDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CategoryScoreDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CategoryScoreDetails& from) {
    CategoryScoreDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryScoreDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.CategoryScoreDetails";
  }
  protected:
  explicit CategoryScoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoneFieldNumber = 1,
    kArmyFieldNumber = 2,
    kEconomyFieldNumber = 3,
    kTechnologyFieldNumber = 4,
    kUpgradeFieldNumber = 5,
  };
  // optional float none = 1;
  bool has_none() const;
  private:
  bool _internal_has_none() const;
  public:
  void clear_none();
  float none() const;
  void set_none(float value);
  private:
  float _internal_none() const;
  void _internal_set_none(float value);
  public:

  // optional float army = 2;
  bool has_army() const;
  private:
  bool _internal_has_army() const;
  public:
  void clear_army();
  float army() const;
  void set_army(float value);
  private:
  float _internal_army() const;
  void _internal_set_army(float value);
  public:

  // optional float economy = 3;
  bool has_economy() const;
  private:
  bool _internal_has_economy() const;
  public:
  void clear_economy();
  float economy() const;
  void set_economy(float value);
  private:
  float _internal_economy() const;
  void _internal_set_economy(float value);
  public:

  // optional float technology = 4;
  bool has_technology() const;
  private:
  bool _internal_has_technology() const;
  public:
  void clear_technology();
  float technology() const;
  void set_technology(float value);
  private:
  float _internal_technology() const;
  void _internal_set_technology(float value);
  public:

  // optional float upgrade = 5;
  bool has_upgrade() const;
  private:
  bool _internal_has_upgrade() const;
  public:
  void clear_upgrade();
  float upgrade() const;
  void set_upgrade(float value);
  private:
  float _internal_upgrade() const;
  void _internal_set_upgrade(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.CategoryScoreDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float none_;
    float army_;
    float economy_;
    float technology_;
    float upgrade_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fscore_2eproto;
};
// -------------------------------------------------------------------

class VitalScoreDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.VitalScoreDetails) */ {
 public:
  inline VitalScoreDetails() : VitalScoreDetails(nullptr) {}
  ~VitalScoreDetails() override;
  explicit PROTOBUF_CONSTEXPR VitalScoreDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VitalScoreDetails(const VitalScoreDetails& from);
  VitalScoreDetails(VitalScoreDetails&& from) noexcept
    : VitalScoreDetails() {
    *this = ::std::move(from);
  }

  inline VitalScoreDetails& operator=(const VitalScoreDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline VitalScoreDetails& operator=(VitalScoreDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VitalScoreDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const VitalScoreDetails* internal_default_instance() {
    return reinterpret_cast<const VitalScoreDetails*>(
               &_VitalScoreDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VitalScoreDetails& a, VitalScoreDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(VitalScoreDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VitalScoreDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VitalScoreDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VitalScoreDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VitalScoreDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VitalScoreDetails& from) {
    VitalScoreDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VitalScoreDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.VitalScoreDetails";
  }
  protected:
  explicit VitalScoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLifeFieldNumber = 1,
    kShieldsFieldNumber = 2,
    kEnergyFieldNumber = 3,
  };
  // optional float life = 1;
  bool has_life() const;
  private:
  bool _internal_has_life() const;
  public:
  void clear_life();
  float life() const;
  void set_life(float value);
  private:
  float _internal_life() const;
  void _internal_set_life(float value);
  public:

  // optional float shields = 2;
  bool has_shields() const;
  private:
  bool _internal_has_shields() const;
  public:
  void clear_shields();
  float shields() const;
  void set_shields(float value);
  private:
  float _internal_shields() const;
  void _internal_set_shields(float value);
  public:

  // optional float energy = 3;
  bool has_energy() const;
  private:
  bool _internal_has_energy() const;
  public:
  void clear_energy();
  float energy() const;
  void set_energy(float value);
  private:
  float _internal_energy() const;
  void _internal_set_energy(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.VitalScoreDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float life_;
    float shields_;
    float energy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fscore_2eproto;
};
// -------------------------------------------------------------------

class ScoreDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ScoreDetails) */ {
 public:
  inline ScoreDetails() : ScoreDetails(nullptr) {}
  ~ScoreDetails() override;
  explicit PROTOBUF_CONSTEXPR ScoreDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScoreDetails(const ScoreDetails& from);
  ScoreDetails(ScoreDetails&& from) noexcept
    : ScoreDetails() {
    *this = ::std::move(from);
  }

  inline ScoreDetails& operator=(const ScoreDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreDetails& operator=(ScoreDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScoreDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScoreDetails* internal_default_instance() {
    return reinterpret_cast<const ScoreDetails*>(
               &_ScoreDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScoreDetails& a, ScoreDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScoreDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScoreDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScoreDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScoreDetails& from) {
    ScoreDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC2APIProtocol.ScoreDetails";
  }
  protected:
  explicit ScoreDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFoodUsedFieldNumber = 13,
    kKilledMineralsFieldNumber = 14,
    kKilledVespeneFieldNumber = 15,
    kLostMineralsFieldNumber = 16,
    kLostVespeneFieldNumber = 17,
    kFriendlyFireMineralsFieldNumber = 18,
    kFriendlyFireVespeneFieldNumber = 19,
    kUsedMineralsFieldNumber = 20,
    kUsedVespeneFieldNumber = 21,
    kTotalUsedMineralsFieldNumber = 22,
    kTotalUsedVespeneFieldNumber = 23,
    kTotalDamageDealtFieldNumber = 24,
    kTotalDamageTakenFieldNumber = 25,
    kTotalHealedFieldNumber = 26,
    kIdleProductionTimeFieldNumber = 1,
    kIdleWorkerTimeFieldNumber = 2,
    kTotalValueUnitsFieldNumber = 3,
    kTotalValueStructuresFieldNumber = 4,
    kKilledValueUnitsFieldNumber = 5,
    kKilledValueStructuresFieldNumber = 6,
    kCollectedMineralsFieldNumber = 7,
    kCollectedVespeneFieldNumber = 8,
    kCollectionRateMineralsFieldNumber = 9,
    kCollectionRateVespeneFieldNumber = 10,
    kSpentMineralsFieldNumber = 11,
    kSpentVespeneFieldNumber = 12,
    kCurrentApmFieldNumber = 27,
    kCurrentEffectiveApmFieldNumber = 28,
  };
  // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
  bool has_food_used() const;
  private:
  bool _internal_has_food_used() const;
  public:
  void clear_food_used();
  const ::SC2APIProtocol::CategoryScoreDetails& food_used() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_food_used();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_food_used();
  void set_allocated_food_used(::SC2APIProtocol::CategoryScoreDetails* food_used);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_food_used() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_food_used();
  public:
  void unsafe_arena_set_allocated_food_used(
      ::SC2APIProtocol::CategoryScoreDetails* food_used);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_food_used();

  // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
  bool has_killed_minerals() const;
  private:
  bool _internal_has_killed_minerals() const;
  public:
  void clear_killed_minerals();
  const ::SC2APIProtocol::CategoryScoreDetails& killed_minerals() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_killed_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_killed_minerals();
  void set_allocated_killed_minerals(::SC2APIProtocol::CategoryScoreDetails* killed_minerals);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_killed_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_killed_minerals();
  public:
  void unsafe_arena_set_allocated_killed_minerals(
      ::SC2APIProtocol::CategoryScoreDetails* killed_minerals);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_killed_minerals();

  // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
  bool has_killed_vespene() const;
  private:
  bool _internal_has_killed_vespene() const;
  public:
  void clear_killed_vespene();
  const ::SC2APIProtocol::CategoryScoreDetails& killed_vespene() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_killed_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_killed_vespene();
  void set_allocated_killed_vespene(::SC2APIProtocol::CategoryScoreDetails* killed_vespene);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_killed_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_killed_vespene();
  public:
  void unsafe_arena_set_allocated_killed_vespene(
      ::SC2APIProtocol::CategoryScoreDetails* killed_vespene);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_killed_vespene();

  // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
  bool has_lost_minerals() const;
  private:
  bool _internal_has_lost_minerals() const;
  public:
  void clear_lost_minerals();
  const ::SC2APIProtocol::CategoryScoreDetails& lost_minerals() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_lost_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_lost_minerals();
  void set_allocated_lost_minerals(::SC2APIProtocol::CategoryScoreDetails* lost_minerals);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_lost_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_lost_minerals();
  public:
  void unsafe_arena_set_allocated_lost_minerals(
      ::SC2APIProtocol::CategoryScoreDetails* lost_minerals);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_lost_minerals();

  // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
  bool has_lost_vespene() const;
  private:
  bool _internal_has_lost_vespene() const;
  public:
  void clear_lost_vespene();
  const ::SC2APIProtocol::CategoryScoreDetails& lost_vespene() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_lost_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_lost_vespene();
  void set_allocated_lost_vespene(::SC2APIProtocol::CategoryScoreDetails* lost_vespene);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_lost_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_lost_vespene();
  public:
  void unsafe_arena_set_allocated_lost_vespene(
      ::SC2APIProtocol::CategoryScoreDetails* lost_vespene);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_lost_vespene();

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
  bool has_friendly_fire_minerals() const;
  private:
  bool _internal_has_friendly_fire_minerals() const;
  public:
  void clear_friendly_fire_minerals();
  const ::SC2APIProtocol::CategoryScoreDetails& friendly_fire_minerals() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_friendly_fire_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_friendly_fire_minerals();
  void set_allocated_friendly_fire_minerals(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_friendly_fire_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_friendly_fire_minerals();
  public:
  void unsafe_arena_set_allocated_friendly_fire_minerals(
      ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_friendly_fire_minerals();

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
  bool has_friendly_fire_vespene() const;
  private:
  bool _internal_has_friendly_fire_vespene() const;
  public:
  void clear_friendly_fire_vespene();
  const ::SC2APIProtocol::CategoryScoreDetails& friendly_fire_vespene() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_friendly_fire_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_friendly_fire_vespene();
  void set_allocated_friendly_fire_vespene(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_friendly_fire_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_friendly_fire_vespene();
  public:
  void unsafe_arena_set_allocated_friendly_fire_vespene(
      ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_friendly_fire_vespene();

  // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
  bool has_used_minerals() const;
  private:
  bool _internal_has_used_minerals() const;
  public:
  void clear_used_minerals();
  const ::SC2APIProtocol::CategoryScoreDetails& used_minerals() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_used_minerals();
  void set_allocated_used_minerals(::SC2APIProtocol::CategoryScoreDetails* used_minerals);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_used_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_used_minerals();
  public:
  void unsafe_arena_set_allocated_used_minerals(
      ::SC2APIProtocol::CategoryScoreDetails* used_minerals);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_used_minerals();

  // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
  bool has_used_vespene() const;
  private:
  bool _internal_has_used_vespene() const;
  public:
  void clear_used_vespene();
  const ::SC2APIProtocol::CategoryScoreDetails& used_vespene() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_used_vespene();
  void set_allocated_used_vespene(::SC2APIProtocol::CategoryScoreDetails* used_vespene);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_used_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_used_vespene();
  public:
  void unsafe_arena_set_allocated_used_vespene(
      ::SC2APIProtocol::CategoryScoreDetails* used_vespene);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_used_vespene();

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
  bool has_total_used_minerals() const;
  private:
  bool _internal_has_total_used_minerals() const;
  public:
  void clear_total_used_minerals();
  const ::SC2APIProtocol::CategoryScoreDetails& total_used_minerals() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_total_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_total_used_minerals();
  void set_allocated_total_used_minerals(::SC2APIProtocol::CategoryScoreDetails* total_used_minerals);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_total_used_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_total_used_minerals();
  public:
  void unsafe_arena_set_allocated_total_used_minerals(
      ::SC2APIProtocol::CategoryScoreDetails* total_used_minerals);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_total_used_minerals();

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
  bool has_total_used_vespene() const;
  private:
  bool _internal_has_total_used_vespene() const;
  public:
  void clear_total_used_vespene();
  const ::SC2APIProtocol::CategoryScoreDetails& total_used_vespene() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::CategoryScoreDetails* release_total_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* mutable_total_used_vespene();
  void set_allocated_total_used_vespene(::SC2APIProtocol::CategoryScoreDetails* total_used_vespene);
  private:
  const ::SC2APIProtocol::CategoryScoreDetails& _internal_total_used_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* _internal_mutable_total_used_vespene();
  public:
  void unsafe_arena_set_allocated_total_used_vespene(
      ::SC2APIProtocol::CategoryScoreDetails* total_used_vespene);
  ::SC2APIProtocol::CategoryScoreDetails* unsafe_arena_release_total_used_vespene();

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
  bool has_total_damage_dealt() const;
  private:
  bool _internal_has_total_damage_dealt() const;
  public:
  void clear_total_damage_dealt();
  const ::SC2APIProtocol::VitalScoreDetails& total_damage_dealt() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::VitalScoreDetails* release_total_damage_dealt();
  ::SC2APIProtocol::VitalScoreDetails* mutable_total_damage_dealt();
  void set_allocated_total_damage_dealt(::SC2APIProtocol::VitalScoreDetails* total_damage_dealt);
  private:
  const ::SC2APIProtocol::VitalScoreDetails& _internal_total_damage_dealt() const;
  ::SC2APIProtocol::VitalScoreDetails* _internal_mutable_total_damage_dealt();
  public:
  void unsafe_arena_set_allocated_total_damage_dealt(
      ::SC2APIProtocol::VitalScoreDetails* total_damage_dealt);
  ::SC2APIProtocol::VitalScoreDetails* unsafe_arena_release_total_damage_dealt();

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
  bool has_total_damage_taken() const;
  private:
  bool _internal_has_total_damage_taken() const;
  public:
  void clear_total_damage_taken();
  const ::SC2APIProtocol::VitalScoreDetails& total_damage_taken() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::VitalScoreDetails* release_total_damage_taken();
  ::SC2APIProtocol::VitalScoreDetails* mutable_total_damage_taken();
  void set_allocated_total_damage_taken(::SC2APIProtocol::VitalScoreDetails* total_damage_taken);
  private:
  const ::SC2APIProtocol::VitalScoreDetails& _internal_total_damage_taken() const;
  ::SC2APIProtocol::VitalScoreDetails* _internal_mutable_total_damage_taken();
  public:
  void unsafe_arena_set_allocated_total_damage_taken(
      ::SC2APIProtocol::VitalScoreDetails* total_damage_taken);
  ::SC2APIProtocol::VitalScoreDetails* unsafe_arena_release_total_damage_taken();

  // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
  bool has_total_healed() const;
  private:
  bool _internal_has_total_healed() const;
  public:
  void clear_total_healed();
  const ::SC2APIProtocol::VitalScoreDetails& total_healed() const;
  PROTOBUF_NODISCARD ::SC2APIProtocol::VitalScoreDetails* release_total_healed();
  ::SC2APIProtocol::VitalScoreDetails* mutable_total_healed();
  void set_allocated_total_healed(::SC2APIProtocol::VitalScoreDetails* total_healed);
  private:
  const ::SC2APIProtocol::VitalScoreDetails& _internal_total_healed() const;
  ::SC2APIProtocol::VitalScoreDetails* _internal_mutable_total_healed();
  public:
  void unsafe_arena_set_allocated_total_healed(
      ::SC2APIProtocol::VitalScoreDetails* total_healed);
  ::SC2APIProtocol::VitalScoreDetails* unsafe_arena_release_total_healed();

  // optional float idle_production_time = 1;
  bool has_idle_production_time() const;
  private:
  bool _internal_has_idle_production_time() const;
  public:
  void clear_idle_production_time();
  float idle_production_time() const;
  void set_idle_production_time(float value);
  private:
  float _internal_idle_production_time() const;
  void _internal_set_idle_production_time(float value);
  public:

  // optional float idle_worker_time = 2;
  bool has_idle_worker_time() const;
  private:
  bool _internal_has_idle_worker_time() const;
  public:
  void clear_idle_worker_time();
  float idle_worker_time() const;
  void set_idle_worker_time(float value);
  private:
  float _internal_idle_worker_time() const;
  void _internal_set_idle_worker_time(float value);
  public:

  // optional float total_value_units = 3;
  bool has_total_value_units() const;
  private:
  bool _internal_has_total_value_units() const;
  public:
  void clear_total_value_units();
  float total_value_units() const;
  void set_total_value_units(float value);
  private:
  float _internal_total_value_units() const;
  void _internal_set_total_value_units(float value);
  public:

  // optional float total_value_structures = 4;
  bool has_total_value_structures() const;
  private:
  bool _internal_has_total_value_structures() const;
  public:
  void clear_total_value_structures();
  float total_value_structures() const;
  void set_total_value_structures(float value);
  private:
  float _internal_total_value_structures() const;
  void _internal_set_total_value_structures(float value);
  public:

  // optional float killed_value_units = 5;
  bool has_killed_value_units() const;
  private:
  bool _internal_has_killed_value_units() const;
  public:
  void clear_killed_value_units();
  float killed_value_units() const;
  void set_killed_value_units(float value);
  private:
  float _internal_killed_value_units() const;
  void _internal_set_killed_value_units(float value);
  public:

  // optional float killed_value_structures = 6;
  bool has_killed_value_structures() const;
  private:
  bool _internal_has_killed_value_structures() const;
  public:
  void clear_killed_value_structures();
  float killed_value_structures() const;
  void set_killed_value_structures(float value);
  private:
  float _internal_killed_value_structures() const;
  void _internal_set_killed_value_structures(float value);
  public:

  // optional float collected_minerals = 7;
  bool has_collected_minerals() const;
  private:
  bool _internal_has_collected_minerals() const;
  public:
  void clear_collected_minerals();
  float collected_minerals() const;
  void set_collected_minerals(float value);
  private:
  float _internal_collected_minerals() const;
  void _internal_set_collected_minerals(float value);
  public:

  // optional float collected_vespene = 8;
  bool has_collected_vespene() const;
  private:
  bool _internal_has_collected_vespene() const;
  public:
  void clear_collected_vespene();
  float collected_vespene() const;
  void set_collected_vespene(float value);
  private:
  float _internal_collected_vespene() const;
  void _internal_set_collected_vespene(float value);
  public:

  // optional float collection_rate_minerals = 9;
  bool has_collection_rate_minerals() const;
  private:
  bool _internal_has_collection_rate_minerals() const;
  public:
  void clear_collection_rate_minerals();
  float collection_rate_minerals() const;
  void set_collection_rate_minerals(float value);
  private:
  float _internal_collection_rate_minerals() const;
  void _internal_set_collection_rate_minerals(float value);
  public:

  // optional float collection_rate_vespene = 10;
  bool has_collection_rate_vespene() const;
  private:
  bool _internal_has_collection_rate_vespene() const;
  public:
  void clear_collection_rate_vespene();
  float collection_rate_vespene() const;
  void set_collection_rate_vespene(float value);
  private:
  float _internal_collection_rate_vespene() const;
  void _internal_set_collection_rate_vespene(float value);
  public:

  // optional float spent_minerals = 11;
  bool has_spent_minerals() const;
  private:
  bool _internal_has_spent_minerals() const;
  public:
  void clear_spent_minerals();
  float spent_minerals() const;
  void set_spent_minerals(float value);
  private:
  float _internal_spent_minerals() const;
  void _internal_set_spent_minerals(float value);
  public:

  // optional float spent_vespene = 12;
  bool has_spent_vespene() const;
  private:
  bool _internal_has_spent_vespene() const;
  public:
  void clear_spent_vespene();
  float spent_vespene() const;
  void set_spent_vespene(float value);
  private:
  float _internal_spent_vespene() const;
  void _internal_set_spent_vespene(float value);
  public:

  // optional float current_apm = 27;
  bool has_current_apm() const;
  private:
  bool _internal_has_current_apm() const;
  public:
  void clear_current_apm();
  float current_apm() const;
  void set_current_apm(float value);
  private:
  float _internal_current_apm() const;
  void _internal_set_current_apm(float value);
  public:

  // optional float current_effective_apm = 28;
  bool has_current_effective_apm() const;
  private:
  bool _internal_has_current_effective_apm() const;
  public:
  void clear_current_effective_apm();
  float current_effective_apm() const;
  void set_current_effective_apm(float value);
  private:
  float _internal_current_effective_apm() const;
  void _internal_set_current_effective_apm(float value);
  public:

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ScoreDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SC2APIProtocol::CategoryScoreDetails* food_used_;
    ::SC2APIProtocol::CategoryScoreDetails* killed_minerals_;
    ::SC2APIProtocol::CategoryScoreDetails* killed_vespene_;
    ::SC2APIProtocol::CategoryScoreDetails* lost_minerals_;
    ::SC2APIProtocol::CategoryScoreDetails* lost_vespene_;
    ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals_;
    ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene_;
    ::SC2APIProtocol::CategoryScoreDetails* used_minerals_;
    ::SC2APIProtocol::CategoryScoreDetails* used_vespene_;
    ::SC2APIProtocol::CategoryScoreDetails* total_used_minerals_;
    ::SC2APIProtocol::CategoryScoreDetails* total_used_vespene_;
    ::SC2APIProtocol::VitalScoreDetails* total_damage_dealt_;
    ::SC2APIProtocol::VitalScoreDetails* total_damage_taken_;
    ::SC2APIProtocol::VitalScoreDetails* total_healed_;
    float idle_production_time_;
    float idle_worker_time_;
    float total_value_units_;
    float total_value_structures_;
    float killed_value_units_;
    float killed_value_structures_;
    float collected_minerals_;
    float collected_vespene_;
    float collection_rate_minerals_;
    float collection_rate_vespene_;
    float spent_minerals_;
    float spent_vespene_;
    float current_apm_;
    float current_effective_apm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_s2clientprotocol_2fscore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Score

// optional .SC2APIProtocol.Score.ScoreType score_type = 6;
inline bool Score::_internal_has_score_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Score::has_score_type() const {
  return _internal_has_score_type();
}
inline void Score::clear_score_type() {
  _impl_.score_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::SC2APIProtocol::Score_ScoreType Score::_internal_score_type() const {
  return static_cast< ::SC2APIProtocol::Score_ScoreType >(_impl_.score_type_);
}
inline ::SC2APIProtocol::Score_ScoreType Score::score_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score_type)
  return _internal_score_type();
}
inline void Score::_internal_set_score_type(::SC2APIProtocol::Score_ScoreType value) {
  assert(::SC2APIProtocol::Score_ScoreType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.score_type_ = value;
}
inline void Score::set_score_type(::SC2APIProtocol::Score_ScoreType value) {
  _internal_set_score_type(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Score.score_type)
}

// optional int32 score = 7;
inline bool Score::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Score::has_score() const {
  return _internal_has_score();
}
inline void Score::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Score::_internal_score() const {
  return _impl_.score_;
}
inline int32_t Score::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score)
  return _internal_score();
}
inline void Score::_internal_set_score(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void Score::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Score.score)
}

// optional .SC2APIProtocol.ScoreDetails score_details = 8;
inline bool Score::_internal_has_score_details() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.score_details_ != nullptr);
  return value;
}
inline bool Score::has_score_details() const {
  return _internal_has_score_details();
}
inline void Score::clear_score_details() {
  if (_impl_.score_details_ != nullptr) _impl_.score_details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SC2APIProtocol::ScoreDetails& Score::_internal_score_details() const {
  const ::SC2APIProtocol::ScoreDetails* p = _impl_.score_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::ScoreDetails&>(
      ::SC2APIProtocol::_ScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::ScoreDetails& Score::score_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score_details)
  return _internal_score_details();
}
inline void Score::unsafe_arena_set_allocated_score_details(
    ::SC2APIProtocol::ScoreDetails* score_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.score_details_);
  }
  _impl_.score_details_ = score_details;
  if (score_details) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.Score.score_details)
}
inline ::SC2APIProtocol::ScoreDetails* Score::release_score_details() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::ScoreDetails* temp = _impl_.score_details_;
  _impl_.score_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::ScoreDetails* Score::unsafe_arena_release_score_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Score.score_details)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::ScoreDetails* temp = _impl_.score_details_;
  _impl_.score_details_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::ScoreDetails* Score::_internal_mutable_score_details() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.score_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::ScoreDetails>(GetArenaForAllocation());
    _impl_.score_details_ = p;
  }
  return _impl_.score_details_;
}
inline ::SC2APIProtocol::ScoreDetails* Score::mutable_score_details() {
  ::SC2APIProtocol::ScoreDetails* _msg = _internal_mutable_score_details();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Score.score_details)
  return _msg;
}
inline void Score::set_allocated_score_details(::SC2APIProtocol::ScoreDetails* score_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.score_details_;
  }
  if (score_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(score_details);
    if (message_arena != submessage_arena) {
      score_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, score_details, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.score_details_ = score_details;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Score.score_details)
}

// -------------------------------------------------------------------

// CategoryScoreDetails

// optional float none = 1;
inline bool CategoryScoreDetails::_internal_has_none() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CategoryScoreDetails::has_none() const {
  return _internal_has_none();
}
inline void CategoryScoreDetails::clear_none() {
  _impl_.none_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CategoryScoreDetails::_internal_none() const {
  return _impl_.none_;
}
inline float CategoryScoreDetails::none() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.none)
  return _internal_none();
}
inline void CategoryScoreDetails::_internal_set_none(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.none_ = value;
}
inline void CategoryScoreDetails::set_none(float value) {
  _internal_set_none(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.none)
}

// optional float army = 2;
inline bool CategoryScoreDetails::_internal_has_army() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CategoryScoreDetails::has_army() const {
  return _internal_has_army();
}
inline void CategoryScoreDetails::clear_army() {
  _impl_.army_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CategoryScoreDetails::_internal_army() const {
  return _impl_.army_;
}
inline float CategoryScoreDetails::army() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.army)
  return _internal_army();
}
inline void CategoryScoreDetails::_internal_set_army(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.army_ = value;
}
inline void CategoryScoreDetails::set_army(float value) {
  _internal_set_army(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.army)
}

// optional float economy = 3;
inline bool CategoryScoreDetails::_internal_has_economy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CategoryScoreDetails::has_economy() const {
  return _internal_has_economy();
}
inline void CategoryScoreDetails::clear_economy() {
  _impl_.economy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CategoryScoreDetails::_internal_economy() const {
  return _impl_.economy_;
}
inline float CategoryScoreDetails::economy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.economy)
  return _internal_economy();
}
inline void CategoryScoreDetails::_internal_set_economy(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.economy_ = value;
}
inline void CategoryScoreDetails::set_economy(float value) {
  _internal_set_economy(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.economy)
}

// optional float technology = 4;
inline bool CategoryScoreDetails::_internal_has_technology() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CategoryScoreDetails::has_technology() const {
  return _internal_has_technology();
}
inline void CategoryScoreDetails::clear_technology() {
  _impl_.technology_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CategoryScoreDetails::_internal_technology() const {
  return _impl_.technology_;
}
inline float CategoryScoreDetails::technology() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.technology)
  return _internal_technology();
}
inline void CategoryScoreDetails::_internal_set_technology(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.technology_ = value;
}
inline void CategoryScoreDetails::set_technology(float value) {
  _internal_set_technology(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.technology)
}

// optional float upgrade = 5;
inline bool CategoryScoreDetails::_internal_has_upgrade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CategoryScoreDetails::has_upgrade() const {
  return _internal_has_upgrade();
}
inline void CategoryScoreDetails::clear_upgrade() {
  _impl_.upgrade_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CategoryScoreDetails::_internal_upgrade() const {
  return _impl_.upgrade_;
}
inline float CategoryScoreDetails::upgrade() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.upgrade)
  return _internal_upgrade();
}
inline void CategoryScoreDetails::_internal_set_upgrade(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.upgrade_ = value;
}
inline void CategoryScoreDetails::set_upgrade(float value) {
  _internal_set_upgrade(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.upgrade)
}

// -------------------------------------------------------------------

// VitalScoreDetails

// optional float life = 1;
inline bool VitalScoreDetails::_internal_has_life() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VitalScoreDetails::has_life() const {
  return _internal_has_life();
}
inline void VitalScoreDetails::clear_life() {
  _impl_.life_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float VitalScoreDetails::_internal_life() const {
  return _impl_.life_;
}
inline float VitalScoreDetails::life() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.life)
  return _internal_life();
}
inline void VitalScoreDetails::_internal_set_life(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.life_ = value;
}
inline void VitalScoreDetails::set_life(float value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.life)
}

// optional float shields = 2;
inline bool VitalScoreDetails::_internal_has_shields() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VitalScoreDetails::has_shields() const {
  return _internal_has_shields();
}
inline void VitalScoreDetails::clear_shields() {
  _impl_.shields_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float VitalScoreDetails::_internal_shields() const {
  return _impl_.shields_;
}
inline float VitalScoreDetails::shields() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.shields)
  return _internal_shields();
}
inline void VitalScoreDetails::_internal_set_shields(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shields_ = value;
}
inline void VitalScoreDetails::set_shields(float value) {
  _internal_set_shields(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.shields)
}

// optional float energy = 3;
inline bool VitalScoreDetails::_internal_has_energy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VitalScoreDetails::has_energy() const {
  return _internal_has_energy();
}
inline void VitalScoreDetails::clear_energy() {
  _impl_.energy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float VitalScoreDetails::_internal_energy() const {
  return _impl_.energy_;
}
inline float VitalScoreDetails::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.energy)
  return _internal_energy();
}
inline void VitalScoreDetails::_internal_set_energy(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.energy_ = value;
}
inline void VitalScoreDetails::set_energy(float value) {
  _internal_set_energy(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.energy)
}

// -------------------------------------------------------------------

// ScoreDetails

// optional float idle_production_time = 1;
inline bool ScoreDetails::_internal_has_idle_production_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ScoreDetails::has_idle_production_time() const {
  return _internal_has_idle_production_time();
}
inline void ScoreDetails::clear_idle_production_time() {
  _impl_.idle_production_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float ScoreDetails::_internal_idle_production_time() const {
  return _impl_.idle_production_time_;
}
inline float ScoreDetails::idle_production_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.idle_production_time)
  return _internal_idle_production_time();
}
inline void ScoreDetails::_internal_set_idle_production_time(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.idle_production_time_ = value;
}
inline void ScoreDetails::set_idle_production_time(float value) {
  _internal_set_idle_production_time(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.idle_production_time)
}

// optional float idle_worker_time = 2;
inline bool ScoreDetails::_internal_has_idle_worker_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ScoreDetails::has_idle_worker_time() const {
  return _internal_has_idle_worker_time();
}
inline void ScoreDetails::clear_idle_worker_time() {
  _impl_.idle_worker_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float ScoreDetails::_internal_idle_worker_time() const {
  return _impl_.idle_worker_time_;
}
inline float ScoreDetails::idle_worker_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.idle_worker_time)
  return _internal_idle_worker_time();
}
inline void ScoreDetails::_internal_set_idle_worker_time(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.idle_worker_time_ = value;
}
inline void ScoreDetails::set_idle_worker_time(float value) {
  _internal_set_idle_worker_time(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.idle_worker_time)
}

// optional float total_value_units = 3;
inline bool ScoreDetails::_internal_has_total_value_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ScoreDetails::has_total_value_units() const {
  return _internal_has_total_value_units();
}
inline void ScoreDetails::clear_total_value_units() {
  _impl_.total_value_units_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float ScoreDetails::_internal_total_value_units() const {
  return _impl_.total_value_units_;
}
inline float ScoreDetails::total_value_units() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_value_units)
  return _internal_total_value_units();
}
inline void ScoreDetails::_internal_set_total_value_units(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.total_value_units_ = value;
}
inline void ScoreDetails::set_total_value_units(float value) {
  _internal_set_total_value_units(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.total_value_units)
}

// optional float total_value_structures = 4;
inline bool ScoreDetails::_internal_has_total_value_structures() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ScoreDetails::has_total_value_structures() const {
  return _internal_has_total_value_structures();
}
inline void ScoreDetails::clear_total_value_structures() {
  _impl_.total_value_structures_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float ScoreDetails::_internal_total_value_structures() const {
  return _impl_.total_value_structures_;
}
inline float ScoreDetails::total_value_structures() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_value_structures)
  return _internal_total_value_structures();
}
inline void ScoreDetails::_internal_set_total_value_structures(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.total_value_structures_ = value;
}
inline void ScoreDetails::set_total_value_structures(float value) {
  _internal_set_total_value_structures(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.total_value_structures)
}

// optional float killed_value_units = 5;
inline bool ScoreDetails::_internal_has_killed_value_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ScoreDetails::has_killed_value_units() const {
  return _internal_has_killed_value_units();
}
inline void ScoreDetails::clear_killed_value_units() {
  _impl_.killed_value_units_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float ScoreDetails::_internal_killed_value_units() const {
  return _impl_.killed_value_units_;
}
inline float ScoreDetails::killed_value_units() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_value_units)
  return _internal_killed_value_units();
}
inline void ScoreDetails::_internal_set_killed_value_units(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.killed_value_units_ = value;
}
inline void ScoreDetails::set_killed_value_units(float value) {
  _internal_set_killed_value_units(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.killed_value_units)
}

// optional float killed_value_structures = 6;
inline bool ScoreDetails::_internal_has_killed_value_structures() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ScoreDetails::has_killed_value_structures() const {
  return _internal_has_killed_value_structures();
}
inline void ScoreDetails::clear_killed_value_structures() {
  _impl_.killed_value_structures_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float ScoreDetails::_internal_killed_value_structures() const {
  return _impl_.killed_value_structures_;
}
inline float ScoreDetails::killed_value_structures() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_value_structures)
  return _internal_killed_value_structures();
}
inline void ScoreDetails::_internal_set_killed_value_structures(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.killed_value_structures_ = value;
}
inline void ScoreDetails::set_killed_value_structures(float value) {
  _internal_set_killed_value_structures(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.killed_value_structures)
}

// optional float collected_minerals = 7;
inline bool ScoreDetails::_internal_has_collected_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ScoreDetails::has_collected_minerals() const {
  return _internal_has_collected_minerals();
}
inline void ScoreDetails::clear_collected_minerals() {
  _impl_.collected_minerals_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float ScoreDetails::_internal_collected_minerals() const {
  return _impl_.collected_minerals_;
}
inline float ScoreDetails::collected_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collected_minerals)
  return _internal_collected_minerals();
}
inline void ScoreDetails::_internal_set_collected_minerals(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.collected_minerals_ = value;
}
inline void ScoreDetails::set_collected_minerals(float value) {
  _internal_set_collected_minerals(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collected_minerals)
}

// optional float collected_vespene = 8;
inline bool ScoreDetails::_internal_has_collected_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ScoreDetails::has_collected_vespene() const {
  return _internal_has_collected_vespene();
}
inline void ScoreDetails::clear_collected_vespene() {
  _impl_.collected_vespene_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float ScoreDetails::_internal_collected_vespene() const {
  return _impl_.collected_vespene_;
}
inline float ScoreDetails::collected_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collected_vespene)
  return _internal_collected_vespene();
}
inline void ScoreDetails::_internal_set_collected_vespene(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.collected_vespene_ = value;
}
inline void ScoreDetails::set_collected_vespene(float value) {
  _internal_set_collected_vespene(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collected_vespene)
}

// optional float collection_rate_minerals = 9;
inline bool ScoreDetails::_internal_has_collection_rate_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ScoreDetails::has_collection_rate_minerals() const {
  return _internal_has_collection_rate_minerals();
}
inline void ScoreDetails::clear_collection_rate_minerals() {
  _impl_.collection_rate_minerals_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float ScoreDetails::_internal_collection_rate_minerals() const {
  return _impl_.collection_rate_minerals_;
}
inline float ScoreDetails::collection_rate_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collection_rate_minerals)
  return _internal_collection_rate_minerals();
}
inline void ScoreDetails::_internal_set_collection_rate_minerals(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.collection_rate_minerals_ = value;
}
inline void ScoreDetails::set_collection_rate_minerals(float value) {
  _internal_set_collection_rate_minerals(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collection_rate_minerals)
}

// optional float collection_rate_vespene = 10;
inline bool ScoreDetails::_internal_has_collection_rate_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ScoreDetails::has_collection_rate_vespene() const {
  return _internal_has_collection_rate_vespene();
}
inline void ScoreDetails::clear_collection_rate_vespene() {
  _impl_.collection_rate_vespene_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float ScoreDetails::_internal_collection_rate_vespene() const {
  return _impl_.collection_rate_vespene_;
}
inline float ScoreDetails::collection_rate_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collection_rate_vespene)
  return _internal_collection_rate_vespene();
}
inline void ScoreDetails::_internal_set_collection_rate_vespene(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.collection_rate_vespene_ = value;
}
inline void ScoreDetails::set_collection_rate_vespene(float value) {
  _internal_set_collection_rate_vespene(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collection_rate_vespene)
}

// optional float spent_minerals = 11;
inline bool ScoreDetails::_internal_has_spent_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ScoreDetails::has_spent_minerals() const {
  return _internal_has_spent_minerals();
}
inline void ScoreDetails::clear_spent_minerals() {
  _impl_.spent_minerals_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float ScoreDetails::_internal_spent_minerals() const {
  return _impl_.spent_minerals_;
}
inline float ScoreDetails::spent_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.spent_minerals)
  return _internal_spent_minerals();
}
inline void ScoreDetails::_internal_set_spent_minerals(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.spent_minerals_ = value;
}
inline void ScoreDetails::set_spent_minerals(float value) {
  _internal_set_spent_minerals(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.spent_minerals)
}

// optional float spent_vespene = 12;
inline bool ScoreDetails::_internal_has_spent_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ScoreDetails::has_spent_vespene() const {
  return _internal_has_spent_vespene();
}
inline void ScoreDetails::clear_spent_vespene() {
  _impl_.spent_vespene_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float ScoreDetails::_internal_spent_vespene() const {
  return _impl_.spent_vespene_;
}
inline float ScoreDetails::spent_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.spent_vespene)
  return _internal_spent_vespene();
}
inline void ScoreDetails::_internal_set_spent_vespene(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.spent_vespene_ = value;
}
inline void ScoreDetails::set_spent_vespene(float value) {
  _internal_set_spent_vespene(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.spent_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
inline bool ScoreDetails::_internal_has_food_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.food_used_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_food_used() const {
  return _internal_has_food_used();
}
inline void ScoreDetails::clear_food_used() {
  if (_impl_.food_used_ != nullptr) _impl_.food_used_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_food_used() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.food_used_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::food_used() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.food_used)
  return _internal_food_used();
}
inline void ScoreDetails::unsafe_arena_set_allocated_food_used(
    ::SC2APIProtocol::CategoryScoreDetails* food_used) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.food_used_);
  }
  _impl_.food_used_ = food_used;
  if (food_used) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.food_used)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_food_used() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.food_used_;
  _impl_.food_used_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_food_used() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.food_used)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.food_used_;
  _impl_.food_used_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_food_used() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.food_used_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.food_used_ = p;
  }
  return _impl_.food_used_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_food_used() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_food_used();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.food_used)
  return _msg;
}
inline void ScoreDetails::set_allocated_food_used(::SC2APIProtocol::CategoryScoreDetails* food_used) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.food_used_;
  }
  if (food_used) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(food_used);
    if (message_arena != submessage_arena) {
      food_used = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, food_used, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.food_used_ = food_used;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.food_used)
}

// optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
inline bool ScoreDetails::_internal_has_killed_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.killed_minerals_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_killed_minerals() const {
  return _internal_has_killed_minerals();
}
inline void ScoreDetails::clear_killed_minerals() {
  if (_impl_.killed_minerals_ != nullptr) _impl_.killed_minerals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_killed_minerals() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.killed_minerals_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::killed_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_minerals)
  return _internal_killed_minerals();
}
inline void ScoreDetails::unsafe_arena_set_allocated_killed_minerals(
    ::SC2APIProtocol::CategoryScoreDetails* killed_minerals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.killed_minerals_);
  }
  _impl_.killed_minerals_ = killed_minerals;
  if (killed_minerals) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.killed_minerals)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_killed_minerals() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.killed_minerals_;
  _impl_.killed_minerals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_killed_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.killed_minerals)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.killed_minerals_;
  _impl_.killed_minerals_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_killed_minerals() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.killed_minerals_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.killed_minerals_ = p;
  }
  return _impl_.killed_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_killed_minerals() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_killed_minerals();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.killed_minerals)
  return _msg;
}
inline void ScoreDetails::set_allocated_killed_minerals(::SC2APIProtocol::CategoryScoreDetails* killed_minerals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.killed_minerals_;
  }
  if (killed_minerals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(killed_minerals);
    if (message_arena != submessage_arena) {
      killed_minerals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, killed_minerals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.killed_minerals_ = killed_minerals;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.killed_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
inline bool ScoreDetails::_internal_has_killed_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.killed_vespene_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_killed_vespene() const {
  return _internal_has_killed_vespene();
}
inline void ScoreDetails::clear_killed_vespene() {
  if (_impl_.killed_vespene_ != nullptr) _impl_.killed_vespene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_killed_vespene() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.killed_vespene_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::killed_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_vespene)
  return _internal_killed_vespene();
}
inline void ScoreDetails::unsafe_arena_set_allocated_killed_vespene(
    ::SC2APIProtocol::CategoryScoreDetails* killed_vespene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.killed_vespene_);
  }
  _impl_.killed_vespene_ = killed_vespene;
  if (killed_vespene) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.killed_vespene)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_killed_vespene() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.killed_vespene_;
  _impl_.killed_vespene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_killed_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.killed_vespene)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.killed_vespene_;
  _impl_.killed_vespene_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_killed_vespene() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.killed_vespene_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.killed_vespene_ = p;
  }
  return _impl_.killed_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_killed_vespene() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_killed_vespene();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.killed_vespene)
  return _msg;
}
inline void ScoreDetails::set_allocated_killed_vespene(::SC2APIProtocol::CategoryScoreDetails* killed_vespene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.killed_vespene_;
  }
  if (killed_vespene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(killed_vespene);
    if (message_arena != submessage_arena) {
      killed_vespene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, killed_vespene, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.killed_vespene_ = killed_vespene;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.killed_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
inline bool ScoreDetails::_internal_has_lost_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lost_minerals_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_lost_minerals() const {
  return _internal_has_lost_minerals();
}
inline void ScoreDetails::clear_lost_minerals() {
  if (_impl_.lost_minerals_ != nullptr) _impl_.lost_minerals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_lost_minerals() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.lost_minerals_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::lost_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.lost_minerals)
  return _internal_lost_minerals();
}
inline void ScoreDetails::unsafe_arena_set_allocated_lost_minerals(
    ::SC2APIProtocol::CategoryScoreDetails* lost_minerals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lost_minerals_);
  }
  _impl_.lost_minerals_ = lost_minerals;
  if (lost_minerals) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.lost_minerals)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_lost_minerals() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.lost_minerals_;
  _impl_.lost_minerals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_lost_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.lost_minerals)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.lost_minerals_;
  _impl_.lost_minerals_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_lost_minerals() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.lost_minerals_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.lost_minerals_ = p;
  }
  return _impl_.lost_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_lost_minerals() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_lost_minerals();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.lost_minerals)
  return _msg;
}
inline void ScoreDetails::set_allocated_lost_minerals(::SC2APIProtocol::CategoryScoreDetails* lost_minerals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lost_minerals_;
  }
  if (lost_minerals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lost_minerals);
    if (message_arena != submessage_arena) {
      lost_minerals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lost_minerals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.lost_minerals_ = lost_minerals;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.lost_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
inline bool ScoreDetails::_internal_has_lost_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lost_vespene_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_lost_vespene() const {
  return _internal_has_lost_vespene();
}
inline void ScoreDetails::clear_lost_vespene() {
  if (_impl_.lost_vespene_ != nullptr) _impl_.lost_vespene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_lost_vespene() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.lost_vespene_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::lost_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.lost_vespene)
  return _internal_lost_vespene();
}
inline void ScoreDetails::unsafe_arena_set_allocated_lost_vespene(
    ::SC2APIProtocol::CategoryScoreDetails* lost_vespene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lost_vespene_);
  }
  _impl_.lost_vespene_ = lost_vespene;
  if (lost_vespene) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.lost_vespene)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_lost_vespene() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.lost_vespene_;
  _impl_.lost_vespene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_lost_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.lost_vespene)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.lost_vespene_;
  _impl_.lost_vespene_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_lost_vespene() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.lost_vespene_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.lost_vespene_ = p;
  }
  return _impl_.lost_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_lost_vespene() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_lost_vespene();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.lost_vespene)
  return _msg;
}
inline void ScoreDetails::set_allocated_lost_vespene(::SC2APIProtocol::CategoryScoreDetails* lost_vespene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lost_vespene_;
  }
  if (lost_vespene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lost_vespene);
    if (message_arena != submessage_arena) {
      lost_vespene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lost_vespene, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.lost_vespene_ = lost_vespene;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.lost_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
inline bool ScoreDetails::_internal_has_friendly_fire_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.friendly_fire_minerals_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_friendly_fire_minerals() const {
  return _internal_has_friendly_fire_minerals();
}
inline void ScoreDetails::clear_friendly_fire_minerals() {
  if (_impl_.friendly_fire_minerals_ != nullptr) _impl_.friendly_fire_minerals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_friendly_fire_minerals() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.friendly_fire_minerals_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::friendly_fire_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  return _internal_friendly_fire_minerals();
}
inline void ScoreDetails::unsafe_arena_set_allocated_friendly_fire_minerals(
    ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friendly_fire_minerals_);
  }
  _impl_.friendly_fire_minerals_ = friendly_fire_minerals;
  if (friendly_fire_minerals) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_friendly_fire_minerals() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.friendly_fire_minerals_;
  _impl_.friendly_fire_minerals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_friendly_fire_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.friendly_fire_minerals_;
  _impl_.friendly_fire_minerals_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_friendly_fire_minerals() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.friendly_fire_minerals_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.friendly_fire_minerals_ = p;
  }
  return _impl_.friendly_fire_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_friendly_fire_minerals() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_friendly_fire_minerals();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  return _msg;
}
inline void ScoreDetails::set_allocated_friendly_fire_minerals(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.friendly_fire_minerals_;
  }
  if (friendly_fire_minerals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendly_fire_minerals);
    if (message_arena != submessage_arena) {
      friendly_fire_minerals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendly_fire_minerals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.friendly_fire_minerals_ = friendly_fire_minerals;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
inline bool ScoreDetails::_internal_has_friendly_fire_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.friendly_fire_vespene_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_friendly_fire_vespene() const {
  return _internal_has_friendly_fire_vespene();
}
inline void ScoreDetails::clear_friendly_fire_vespene() {
  if (_impl_.friendly_fire_vespene_ != nullptr) _impl_.friendly_fire_vespene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_friendly_fire_vespene() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.friendly_fire_vespene_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::friendly_fire_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  return _internal_friendly_fire_vespene();
}
inline void ScoreDetails::unsafe_arena_set_allocated_friendly_fire_vespene(
    ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.friendly_fire_vespene_);
  }
  _impl_.friendly_fire_vespene_ = friendly_fire_vespene;
  if (friendly_fire_vespene) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_friendly_fire_vespene() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.friendly_fire_vespene_;
  _impl_.friendly_fire_vespene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_friendly_fire_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.friendly_fire_vespene_;
  _impl_.friendly_fire_vespene_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_friendly_fire_vespene() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.friendly_fire_vespene_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.friendly_fire_vespene_ = p;
  }
  return _impl_.friendly_fire_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_friendly_fire_vespene() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_friendly_fire_vespene();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  return _msg;
}
inline void ScoreDetails::set_allocated_friendly_fire_vespene(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.friendly_fire_vespene_;
  }
  if (friendly_fire_vespene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(friendly_fire_vespene);
    if (message_arena != submessage_arena) {
      friendly_fire_vespene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendly_fire_vespene, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.friendly_fire_vespene_ = friendly_fire_vespene;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
inline bool ScoreDetails::_internal_has_used_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.used_minerals_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_used_minerals() const {
  return _internal_has_used_minerals();
}
inline void ScoreDetails::clear_used_minerals() {
  if (_impl_.used_minerals_ != nullptr) _impl_.used_minerals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_used_minerals() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.used_minerals_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::used_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.used_minerals)
  return _internal_used_minerals();
}
inline void ScoreDetails::unsafe_arena_set_allocated_used_minerals(
    ::SC2APIProtocol::CategoryScoreDetails* used_minerals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.used_minerals_);
  }
  _impl_.used_minerals_ = used_minerals;
  if (used_minerals) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.used_minerals)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_used_minerals() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.used_minerals_;
  _impl_.used_minerals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_used_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.used_minerals)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.used_minerals_;
  _impl_.used_minerals_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_used_minerals() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.used_minerals_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.used_minerals_ = p;
  }
  return _impl_.used_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_used_minerals() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_used_minerals();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.used_minerals)
  return _msg;
}
inline void ScoreDetails::set_allocated_used_minerals(::SC2APIProtocol::CategoryScoreDetails* used_minerals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.used_minerals_;
  }
  if (used_minerals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(used_minerals);
    if (message_arena != submessage_arena) {
      used_minerals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, used_minerals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.used_minerals_ = used_minerals;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.used_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
inline bool ScoreDetails::_internal_has_used_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.used_vespene_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_used_vespene() const {
  return _internal_has_used_vespene();
}
inline void ScoreDetails::clear_used_vespene() {
  if (_impl_.used_vespene_ != nullptr) _impl_.used_vespene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_used_vespene() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.used_vespene_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::used_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.used_vespene)
  return _internal_used_vespene();
}
inline void ScoreDetails::unsafe_arena_set_allocated_used_vespene(
    ::SC2APIProtocol::CategoryScoreDetails* used_vespene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.used_vespene_);
  }
  _impl_.used_vespene_ = used_vespene;
  if (used_vespene) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.used_vespene)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_used_vespene() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.used_vespene_;
  _impl_.used_vespene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_used_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.used_vespene)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.used_vespene_;
  _impl_.used_vespene_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_used_vespene() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.used_vespene_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.used_vespene_ = p;
  }
  return _impl_.used_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_used_vespene() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_used_vespene();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.used_vespene)
  return _msg;
}
inline void ScoreDetails::set_allocated_used_vespene(::SC2APIProtocol::CategoryScoreDetails* used_vespene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.used_vespene_;
  }
  if (used_vespene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(used_vespene);
    if (message_arena != submessage_arena) {
      used_vespene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, used_vespene, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.used_vespene_ = used_vespene;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.used_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
inline bool ScoreDetails::_internal_has_total_used_minerals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_used_minerals_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_total_used_minerals() const {
  return _internal_has_total_used_minerals();
}
inline void ScoreDetails::clear_total_used_minerals() {
  if (_impl_.total_used_minerals_ != nullptr) _impl_.total_used_minerals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_total_used_minerals() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.total_used_minerals_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::total_used_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_used_minerals)
  return _internal_total_used_minerals();
}
inline void ScoreDetails::unsafe_arena_set_allocated_total_used_minerals(
    ::SC2APIProtocol::CategoryScoreDetails* total_used_minerals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_used_minerals_);
  }
  _impl_.total_used_minerals_ = total_used_minerals;
  if (total_used_minerals) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.total_used_minerals)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_total_used_minerals() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.total_used_minerals_;
  _impl_.total_used_minerals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_total_used_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_used_minerals)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.total_used_minerals_;
  _impl_.total_used_minerals_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_total_used_minerals() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.total_used_minerals_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.total_used_minerals_ = p;
  }
  return _impl_.total_used_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_total_used_minerals() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_total_used_minerals();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_used_minerals)
  return _msg;
}
inline void ScoreDetails::set_allocated_total_used_minerals(::SC2APIProtocol::CategoryScoreDetails* total_used_minerals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_used_minerals_;
  }
  if (total_used_minerals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_used_minerals);
    if (message_arena != submessage_arena) {
      total_used_minerals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_used_minerals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.total_used_minerals_ = total_used_minerals;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_used_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
inline bool ScoreDetails::_internal_has_total_used_vespene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_used_vespene_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_total_used_vespene() const {
  return _internal_has_total_used_vespene();
}
inline void ScoreDetails::clear_total_used_vespene() {
  if (_impl_.total_used_vespene_ != nullptr) _impl_.total_used_vespene_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::_internal_total_used_vespene() const {
  const ::SC2APIProtocol::CategoryScoreDetails* p = _impl_.total_used_vespene_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::CategoryScoreDetails&>(
      ::SC2APIProtocol::_CategoryScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::total_used_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_used_vespene)
  return _internal_total_used_vespene();
}
inline void ScoreDetails::unsafe_arena_set_allocated_total_used_vespene(
    ::SC2APIProtocol::CategoryScoreDetails* total_used_vespene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_used_vespene_);
  }
  _impl_.total_used_vespene_ = total_used_vespene;
  if (total_used_vespene) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.total_used_vespene)
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_total_used_vespene() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.total_used_vespene_;
  _impl_.total_used_vespene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::unsafe_arena_release_total_used_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_used_vespene)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::SC2APIProtocol::CategoryScoreDetails* temp = _impl_.total_used_vespene_;
  _impl_.total_used_vespene_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::_internal_mutable_total_used_vespene() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.total_used_vespene_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::CategoryScoreDetails>(GetArenaForAllocation());
    _impl_.total_used_vespene_ = p;
  }
  return _impl_.total_used_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_total_used_vespene() {
  ::SC2APIProtocol::CategoryScoreDetails* _msg = _internal_mutable_total_used_vespene();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_used_vespene)
  return _msg;
}
inline void ScoreDetails::set_allocated_total_used_vespene(::SC2APIProtocol::CategoryScoreDetails* total_used_vespene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_used_vespene_;
  }
  if (total_used_vespene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_used_vespene);
    if (message_arena != submessage_arena) {
      total_used_vespene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_used_vespene, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.total_used_vespene_ = total_used_vespene;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_used_vespene)
}

// optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
inline bool ScoreDetails::_internal_has_total_damage_dealt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_damage_dealt_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_total_damage_dealt() const {
  return _internal_has_total_damage_dealt();
}
inline void ScoreDetails::clear_total_damage_dealt() {
  if (_impl_.total_damage_dealt_ != nullptr) _impl_.total_damage_dealt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::_internal_total_damage_dealt() const {
  const ::SC2APIProtocol::VitalScoreDetails* p = _impl_.total_damage_dealt_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::VitalScoreDetails&>(
      ::SC2APIProtocol::_VitalScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_damage_dealt() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  return _internal_total_damage_dealt();
}
inline void ScoreDetails::unsafe_arena_set_allocated_total_damage_dealt(
    ::SC2APIProtocol::VitalScoreDetails* total_damage_dealt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_damage_dealt_);
  }
  _impl_.total_damage_dealt_ = total_damage_dealt;
  if (total_damage_dealt) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_dealt)
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_damage_dealt() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::SC2APIProtocol::VitalScoreDetails* temp = _impl_.total_damage_dealt_;
  _impl_.total_damage_dealt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::unsafe_arena_release_total_damage_dealt() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::SC2APIProtocol::VitalScoreDetails* temp = _impl_.total_damage_dealt_;
  _impl_.total_damage_dealt_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::_internal_mutable_total_damage_dealt() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.total_damage_dealt_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::VitalScoreDetails>(GetArenaForAllocation());
    _impl_.total_damage_dealt_ = p;
  }
  return _impl_.total_damage_dealt_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_damage_dealt() {
  ::SC2APIProtocol::VitalScoreDetails* _msg = _internal_mutable_total_damage_dealt();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  return _msg;
}
inline void ScoreDetails::set_allocated_total_damage_dealt(::SC2APIProtocol::VitalScoreDetails* total_damage_dealt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_damage_dealt_;
  }
  if (total_damage_dealt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_damage_dealt);
    if (message_arena != submessage_arena) {
      total_damage_dealt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_damage_dealt, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.total_damage_dealt_ = total_damage_dealt;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_dealt)
}

// optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
inline bool ScoreDetails::_internal_has_total_damage_taken() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_damage_taken_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_total_damage_taken() const {
  return _internal_has_total_damage_taken();
}
inline void ScoreDetails::clear_total_damage_taken() {
  if (_impl_.total_damage_taken_ != nullptr) _impl_.total_damage_taken_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::_internal_total_damage_taken() const {
  const ::SC2APIProtocol::VitalScoreDetails* p = _impl_.total_damage_taken_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::VitalScoreDetails&>(
      ::SC2APIProtocol::_VitalScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_damage_taken() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_damage_taken)
  return _internal_total_damage_taken();
}
inline void ScoreDetails::unsafe_arena_set_allocated_total_damage_taken(
    ::SC2APIProtocol::VitalScoreDetails* total_damage_taken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_damage_taken_);
  }
  _impl_.total_damage_taken_ = total_damage_taken;
  if (total_damage_taken) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_taken)
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_damage_taken() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::SC2APIProtocol::VitalScoreDetails* temp = _impl_.total_damage_taken_;
  _impl_.total_damage_taken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::unsafe_arena_release_total_damage_taken() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_damage_taken)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::SC2APIProtocol::VitalScoreDetails* temp = _impl_.total_damage_taken_;
  _impl_.total_damage_taken_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::_internal_mutable_total_damage_taken() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.total_damage_taken_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::VitalScoreDetails>(GetArenaForAllocation());
    _impl_.total_damage_taken_ = p;
  }
  return _impl_.total_damage_taken_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_damage_taken() {
  ::SC2APIProtocol::VitalScoreDetails* _msg = _internal_mutable_total_damage_taken();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_damage_taken)
  return _msg;
}
inline void ScoreDetails::set_allocated_total_damage_taken(::SC2APIProtocol::VitalScoreDetails* total_damage_taken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_damage_taken_;
  }
  if (total_damage_taken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_damage_taken);
    if (message_arena != submessage_arena) {
      total_damage_taken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_damage_taken, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.total_damage_taken_ = total_damage_taken;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_taken)
}

// optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
inline bool ScoreDetails::_internal_has_total_healed() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_healed_ != nullptr);
  return value;
}
inline bool ScoreDetails::has_total_healed() const {
  return _internal_has_total_healed();
}
inline void ScoreDetails::clear_total_healed() {
  if (_impl_.total_healed_ != nullptr) _impl_.total_healed_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::_internal_total_healed() const {
  const ::SC2APIProtocol::VitalScoreDetails* p = _impl_.total_healed_;
  return p != nullptr ? *p : reinterpret_cast<const ::SC2APIProtocol::VitalScoreDetails&>(
      ::SC2APIProtocol::_VitalScoreDetails_default_instance_);
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_healed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_healed)
  return _internal_total_healed();
}
inline void ScoreDetails::unsafe_arena_set_allocated_total_healed(
    ::SC2APIProtocol::VitalScoreDetails* total_healed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_healed_);
  }
  _impl_.total_healed_ = total_healed;
  if (total_healed) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC2APIProtocol.ScoreDetails.total_healed)
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_healed() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::SC2APIProtocol::VitalScoreDetails* temp = _impl_.total_healed_;
  _impl_.total_healed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::unsafe_arena_release_total_healed() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_healed)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::SC2APIProtocol::VitalScoreDetails* temp = _impl_.total_healed_;
  _impl_.total_healed_ = nullptr;
  return temp;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::_internal_mutable_total_healed() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.total_healed_ == nullptr) {
    auto* p = CreateMaybeMessage<::SC2APIProtocol::VitalScoreDetails>(GetArenaForAllocation());
    _impl_.total_healed_ = p;
  }
  return _impl_.total_healed_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_healed() {
  ::SC2APIProtocol::VitalScoreDetails* _msg = _internal_mutable_total_healed();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_healed)
  return _msg;
}
inline void ScoreDetails::set_allocated_total_healed(::SC2APIProtocol::VitalScoreDetails* total_healed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_healed_;
  }
  if (total_healed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_healed);
    if (message_arena != submessage_arena) {
      total_healed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_healed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.total_healed_ = total_healed;
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_healed)
}

// optional float current_apm = 27;
inline bool ScoreDetails::_internal_has_current_apm() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ScoreDetails::has_current_apm() const {
  return _internal_has_current_apm();
}
inline void ScoreDetails::clear_current_apm() {
  _impl_.current_apm_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float ScoreDetails::_internal_current_apm() const {
  return _impl_.current_apm_;
}
inline float ScoreDetails::current_apm() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.current_apm)
  return _internal_current_apm();
}
inline void ScoreDetails::_internal_set_current_apm(float value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.current_apm_ = value;
}
inline void ScoreDetails::set_current_apm(float value) {
  _internal_set_current_apm(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.current_apm)
}

// optional float current_effective_apm = 28;
inline bool ScoreDetails::_internal_has_current_effective_apm() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ScoreDetails::has_current_effective_apm() const {
  return _internal_has_current_effective_apm();
}
inline void ScoreDetails::clear_current_effective_apm() {
  _impl_.current_effective_apm_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline float ScoreDetails::_internal_current_effective_apm() const {
  return _impl_.current_effective_apm_;
}
inline float ScoreDetails::current_effective_apm() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.current_effective_apm)
  return _internal_current_effective_apm();
}
inline void ScoreDetails::_internal_set_current_effective_apm(float value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.current_effective_apm_ = value;
}
inline void ScoreDetails::set_current_effective_apm(float value) {
  _internal_set_current_effective_apm(value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.current_effective_apm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SC2APIProtocol::Score_ScoreType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::Score_ScoreType>() {
  return ::SC2APIProtocol::Score_ScoreType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_s2clientprotocol_2fscore_2eproto

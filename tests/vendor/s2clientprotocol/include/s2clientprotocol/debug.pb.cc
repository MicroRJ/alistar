// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/debug.proto

#include "s2clientprotocol/debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SC2APIProtocol {
PROTOBUF_CONSTEXPR DebugCommand::DebugCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DebugCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugCommandDefaultTypeInternal() {}
  union {
    DebugCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugCommandDefaultTypeInternal _DebugCommand_default_instance_;
PROTOBUF_CONSTEXPR DebugDraw::DebugDraw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.boxes_)*/{}
  , /*decltype(_impl_.spheres_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugDrawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugDrawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugDrawDefaultTypeInternal() {}
  union {
    DebugDraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugDrawDefaultTypeInternal _DebugDraw_default_instance_;
PROTOBUF_CONSTEXPR Line::Line(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.p0_)*/nullptr
  , /*decltype(_impl_.p1_)*/nullptr} {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.r_)*/0u
  , /*decltype(_impl_.g_)*/0u
  , /*decltype(_impl_.b_)*/0u} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR DebugText::DebugText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.virtual_pos_)*/nullptr
  , /*decltype(_impl_.world_pos_)*/nullptr
  , /*decltype(_impl_.size_)*/0u} {}
struct DebugTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugTextDefaultTypeInternal() {}
  union {
    DebugText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugTextDefaultTypeInternal _DebugText_default_instance_;
PROTOBUF_CONSTEXPR DebugLine::DebugLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.line_)*/nullptr} {}
struct DebugLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugLineDefaultTypeInternal() {}
  union {
    DebugLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugLineDefaultTypeInternal _DebugLine_default_instance_;
PROTOBUF_CONSTEXPR DebugBox::DebugBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.min_)*/nullptr
  , /*decltype(_impl_.max_)*/nullptr} {}
struct DebugBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugBoxDefaultTypeInternal() {}
  union {
    DebugBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugBoxDefaultTypeInternal _DebugBox_default_instance_;
PROTOBUF_CONSTEXPR DebugSphere::DebugSphere(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.p_)*/nullptr
  , /*decltype(_impl_.r_)*/0} {}
struct DebugSphereDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugSphereDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugSphereDefaultTypeInternal() {}
  union {
    DebugSphere _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugSphereDefaultTypeInternal _DebugSphere_default_instance_;
PROTOBUF_CONSTEXPR DebugCreateUnit::DebugCreateUnit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.unit_type_)*/0u
  , /*decltype(_impl_.owner_)*/0
  , /*decltype(_impl_.quantity_)*/0u} {}
struct DebugCreateUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugCreateUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugCreateUnitDefaultTypeInternal() {}
  union {
    DebugCreateUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugCreateUnitDefaultTypeInternal _DebugCreateUnit_default_instance_;
PROTOBUF_CONSTEXPR DebugKillUnit::DebugKillUnit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugKillUnitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugKillUnitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugKillUnitDefaultTypeInternal() {}
  union {
    DebugKillUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugKillUnitDefaultTypeInternal _DebugKillUnit_default_instance_;
PROTOBUF_CONSTEXPR DebugTestProcess::DebugTestProcess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delay_ms_)*/0
  , /*decltype(_impl_.test_)*/1} {}
struct DebugTestProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugTestProcessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugTestProcessDefaultTypeInternal() {}
  union {
    DebugTestProcess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugTestProcessDefaultTypeInternal _DebugTestProcess_default_instance_;
PROTOBUF_CONSTEXPR DebugSetScore::DebugSetScore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.score_)*/0} {}
struct DebugSetScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugSetScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugSetScoreDefaultTypeInternal() {}
  union {
    DebugSetScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugSetScoreDefaultTypeInternal _DebugSetScore_default_instance_;
PROTOBUF_CONSTEXPR DebugEndGame::DebugEndGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.end_result_)*/1} {}
struct DebugEndGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugEndGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugEndGameDefaultTypeInternal() {}
  union {
    DebugEndGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugEndGameDefaultTypeInternal _DebugEndGame_default_instance_;
PROTOBUF_CONSTEXPR DebugSetUnitValue::DebugSetUnitValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_tag_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.unit_value_)*/1} {}
struct DebugSetUnitValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugSetUnitValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugSetUnitValueDefaultTypeInternal() {}
  union {
    DebugSetUnitValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugSetUnitValueDefaultTypeInternal _DebugSetUnitValue_default_instance_;
}  // namespace SC2APIProtocol
static ::_pb::Metadata file_level_metadata_s2clientprotocol_2fdebug_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_s2clientprotocol_2fdebug_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2clientprotocol_2fdebug_2eproto = nullptr;

const uint32_t TableStruct_s2clientprotocol_2fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCommand, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCommand, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugDraw, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugDraw, _impl_.lines_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugDraw, _impl_.boxes_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugDraw, _impl_.spheres_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Line, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Line, _impl_.p0_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Line, _impl_.p1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Color, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Color, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Color, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Color, _impl_.b_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _impl_.virtual_pos_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _impl_.world_pos_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugText, _impl_.size_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugLine, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugLine, _impl_.line_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugBox, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugBox, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugBox, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugBox, _impl_.max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSphere, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSphere, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSphere, _impl_.p_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSphere, _impl_.r_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCreateUnit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCreateUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCreateUnit, _impl_.unit_type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCreateUnit, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCreateUnit, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugCreateUnit, _impl_.quantity_),
  1,
  2,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugKillUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugKillUnit, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugTestProcess, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugTestProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugTestProcess, _impl_.test_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugTestProcess, _impl_.delay_ms_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetScore, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetScore, _impl_.score_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugEndGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugEndGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugEndGame, _impl_.end_result_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetUnitValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetUnitValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetUnitValue, _impl_.unit_value_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetUnitValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::DebugSetUnitValue, _impl_.unit_tag_),
  2,
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SC2APIProtocol::DebugCommand)},
  { 15, -1, -1, sizeof(::SC2APIProtocol::DebugDraw)},
  { 25, 33, -1, sizeof(::SC2APIProtocol::Line)},
  { 35, 44, -1, sizeof(::SC2APIProtocol::Color)},
  { 47, 58, -1, sizeof(::SC2APIProtocol::DebugText)},
  { 63, 71, -1, sizeof(::SC2APIProtocol::DebugLine)},
  { 73, 82, -1, sizeof(::SC2APIProtocol::DebugBox)},
  { 85, 94, -1, sizeof(::SC2APIProtocol::DebugSphere)},
  { 97, 107, -1, sizeof(::SC2APIProtocol::DebugCreateUnit)},
  { 111, -1, -1, sizeof(::SC2APIProtocol::DebugKillUnit)},
  { 118, 126, -1, sizeof(::SC2APIProtocol::DebugTestProcess)},
  { 128, 135, -1, sizeof(::SC2APIProtocol::DebugSetScore)},
  { 136, 143, -1, sizeof(::SC2APIProtocol::DebugEndGame)},
  { 144, 153, -1, sizeof(::SC2APIProtocol::DebugSetUnitValue)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SC2APIProtocol::_DebugCommand_default_instance_._instance,
  &::SC2APIProtocol::_DebugDraw_default_instance_._instance,
  &::SC2APIProtocol::_Line_default_instance_._instance,
  &::SC2APIProtocol::_Color_default_instance_._instance,
  &::SC2APIProtocol::_DebugText_default_instance_._instance,
  &::SC2APIProtocol::_DebugLine_default_instance_._instance,
  &::SC2APIProtocol::_DebugBox_default_instance_._instance,
  &::SC2APIProtocol::_DebugSphere_default_instance_._instance,
  &::SC2APIProtocol::_DebugCreateUnit_default_instance_._instance,
  &::SC2APIProtocol::_DebugKillUnit_default_instance_._instance,
  &::SC2APIProtocol::_DebugTestProcess_default_instance_._instance,
  &::SC2APIProtocol::_DebugSetScore_default_instance_._instance,
  &::SC2APIProtocol::_DebugEndGame_default_instance_._instance,
  &::SC2APIProtocol::_DebugSetUnitValue_default_instance_._instance,
};

const char descriptor_table_protodef_s2clientprotocol_2fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034s2clientprotocol/debug.proto\022\016SC2APIPr"
  "otocol\032\035s2clientprotocol/common.proto\"\273\003"
  "\n\014DebugCommand\022)\n\004draw\030\001 \001(\0132\031.SC2APIPro"
  "tocol.DebugDrawH\000\0224\n\ngame_state\030\002 \001(\0162\036."
  "SC2APIProtocol.DebugGameStateH\000\0226\n\013creat"
  "e_unit\030\003 \001(\0132\037.SC2APIProtocol.DebugCreat"
  "eUnitH\000\0222\n\tkill_unit\030\004 \001(\0132\035.SC2APIProto"
  "col.DebugKillUnitH\000\0228\n\014test_process\030\005 \001("
  "\0132 .SC2APIProtocol.DebugTestProcessH\000\022.\n"
  "\005score\030\006 \001(\0132\035.SC2APIProtocol.DebugSetSc"
  "oreH\000\0220\n\010end_game\030\007 \001(\0132\034.SC2APIProtocol"
  ".DebugEndGameH\000\0227\n\nunit_value\030\010 \001(\0132!.SC"
  "2APIProtocol.DebugSetUnitValueH\000B\t\n\007comm"
  "and\"\265\001\n\tDebugDraw\022\'\n\004text\030\001 \003(\0132\031.SC2API"
  "Protocol.DebugText\022(\n\005lines\030\002 \003(\0132\031.SC2A"
  "PIProtocol.DebugLine\022\'\n\005boxes\030\003 \003(\0132\030.SC"
  "2APIProtocol.DebugBox\022,\n\007spheres\030\004 \003(\0132\033"
  ".SC2APIProtocol.DebugSphere\"L\n\004Line\022!\n\002p"
  "0\030\001 \001(\0132\025.SC2APIProtocol.Point\022!\n\002p1\030\002 \001"
  "(\0132\025.SC2APIProtocol.Point\"(\n\005Color\022\t\n\001r\030"
  "\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001(\r\"\243\001\n\tDebugTex"
  "t\022$\n\005color\030\001 \001(\0132\025.SC2APIProtocol.Color\022"
  "\014\n\004text\030\002 \001(\t\022*\n\013virtual_pos\030\003 \001(\0132\025.SC2"
  "APIProtocol.Point\022(\n\tworld_pos\030\004 \001(\0132\025.S"
  "C2APIProtocol.Point\022\014\n\004size\030\005 \001(\r\"U\n\tDeb"
  "ugLine\022$\n\005color\030\001 \001(\0132\025.SC2APIProtocol.C"
  "olor\022\"\n\004line\030\002 \001(\0132\024.SC2APIProtocol.Line"
  "\"x\n\010DebugBox\022$\n\005color\030\001 \001(\0132\025.SC2APIProt"
  "ocol.Color\022\"\n\003min\030\002 \001(\0132\025.SC2APIProtocol"
  ".Point\022\"\n\003max\030\003 \001(\0132\025.SC2APIProtocol.Poi"
  "nt\"`\n\013DebugSphere\022$\n\005color\030\001 \001(\0132\025.SC2AP"
  "IProtocol.Color\022 \n\001p\030\002 \001(\0132\025.SC2APIProto"
  "col.Point\022\t\n\001r\030\003 \001(\002\"k\n\017DebugCreateUnit\022"
  "\021\n\tunit_type\030\001 \001(\r\022\r\n\005owner\030\002 \001(\005\022$\n\003pos"
  "\030\003 \001(\0132\027.SC2APIProtocol.Point2D\022\020\n\010quant"
  "ity\030\004 \001(\r\"\034\n\rDebugKillUnit\022\013\n\003tag\030\001 \003(\004\""
  "\200\001\n\020DebugTestProcess\0223\n\004test\030\001 \001(\0162%.SC2"
  "APIProtocol.DebugTestProcess.Test\022\020\n\010del"
  "ay_ms\030\002 \001(\005\"%\n\004Test\022\010\n\004hang\020\001\022\t\n\005crash\020\002"
  "\022\010\n\004exit\020\003\"\036\n\rDebugSetScore\022\r\n\005score\030\001 \001"
  "(\002\"z\n\014DebugEndGame\022:\n\nend_result\030\001 \001(\0162&"
  ".SC2APIProtocol.DebugEndGame.EndResult\"."
  "\n\tEndResult\022\r\n\tSurrender\020\001\022\022\n\016DeclareVic"
  "tory\020\002\"\245\001\n\021DebugSetUnitValue\022\?\n\nunit_val"
  "ue\030\001 \001(\0162+.SC2APIProtocol.DebugSetUnitVa"
  "lue.UnitValue\022\r\n\005value\030\002 \001(\002\022\020\n\010unit_tag"
  "\030\003 \001(\004\".\n\tUnitValue\022\n\n\006Energy\020\001\022\010\n\004Life\020"
  "\002\022\013\n\007Shields\020\003*\262\001\n\016DebugGameState\022\014\n\010sho"
  "w_map\020\001\022\021\n\rcontrol_enemy\020\002\022\010\n\004food\020\003\022\010\n\004"
  "free\020\004\022\021\n\rall_resources\020\005\022\007\n\003god\020\006\022\014\n\010mi"
  "nerals\020\007\022\007\n\003gas\020\010\022\014\n\010cooldown\020\t\022\r\n\ttech_"
  "tree\020\n\022\013\n\007upgrade\020\013\022\016\n\nfast_build\020\014"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_s2clientprotocol_2fdebug_2eproto_deps[1] = {
  &::descriptor_table_s2clientprotocol_2fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_s2clientprotocol_2fdebug_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2clientprotocol_2fdebug_2eproto = {
    false, false, 2075, descriptor_table_protodef_s2clientprotocol_2fdebug_2eproto,
    "s2clientprotocol/debug.proto",
    &descriptor_table_s2clientprotocol_2fdebug_2eproto_once, descriptor_table_s2clientprotocol_2fdebug_2eproto_deps, 1, 14,
    schemas, file_default_instances, TableStruct_s2clientprotocol_2fdebug_2eproto::offsets,
    file_level_metadata_s2clientprotocol_2fdebug_2eproto, file_level_enum_descriptors_s2clientprotocol_2fdebug_2eproto,
    file_level_service_descriptors_s2clientprotocol_2fdebug_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2clientprotocol_2fdebug_2eproto_getter() {
  return &descriptor_table_s2clientprotocol_2fdebug_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2clientprotocol_2fdebug_2eproto(&descriptor_table_s2clientprotocol_2fdebug_2eproto);
namespace SC2APIProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugTestProcess_Test_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fdebug_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fdebug_2eproto[0];
}
bool DebugTestProcess_Test_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugTestProcess_Test DebugTestProcess::hang;
constexpr DebugTestProcess_Test DebugTestProcess::crash;
constexpr DebugTestProcess_Test DebugTestProcess::exit;
constexpr DebugTestProcess_Test DebugTestProcess::Test_MIN;
constexpr DebugTestProcess_Test DebugTestProcess::Test_MAX;
constexpr int DebugTestProcess::Test_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugEndGame_EndResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fdebug_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fdebug_2eproto[1];
}
bool DebugEndGame_EndResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugEndGame_EndResult DebugEndGame::Surrender;
constexpr DebugEndGame_EndResult DebugEndGame::DeclareVictory;
constexpr DebugEndGame_EndResult DebugEndGame::EndResult_MIN;
constexpr DebugEndGame_EndResult DebugEndGame::EndResult_MAX;
constexpr int DebugEndGame::EndResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugSetUnitValue_UnitValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fdebug_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fdebug_2eproto[2];
}
bool DebugSetUnitValue_UnitValue_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DebugSetUnitValue_UnitValue DebugSetUnitValue::Energy;
constexpr DebugSetUnitValue_UnitValue DebugSetUnitValue::Life;
constexpr DebugSetUnitValue_UnitValue DebugSetUnitValue::Shields;
constexpr DebugSetUnitValue_UnitValue DebugSetUnitValue::UnitValue_MIN;
constexpr DebugSetUnitValue_UnitValue DebugSetUnitValue::UnitValue_MAX;
constexpr int DebugSetUnitValue::UnitValue_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugGameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fdebug_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fdebug_2eproto[3];
}
bool DebugGameState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DebugCommand::_Internal {
 public:
  static const ::SC2APIProtocol::DebugDraw& draw(const DebugCommand* msg);
  static const ::SC2APIProtocol::DebugCreateUnit& create_unit(const DebugCommand* msg);
  static const ::SC2APIProtocol::DebugKillUnit& kill_unit(const DebugCommand* msg);
  static const ::SC2APIProtocol::DebugTestProcess& test_process(const DebugCommand* msg);
  static const ::SC2APIProtocol::DebugSetScore& score(const DebugCommand* msg);
  static const ::SC2APIProtocol::DebugEndGame& end_game(const DebugCommand* msg);
  static const ::SC2APIProtocol::DebugSetUnitValue& unit_value(const DebugCommand* msg);
};

const ::SC2APIProtocol::DebugDraw&
DebugCommand::_Internal::draw(const DebugCommand* msg) {
  return *msg->_impl_.command_.draw_;
}
const ::SC2APIProtocol::DebugCreateUnit&
DebugCommand::_Internal::create_unit(const DebugCommand* msg) {
  return *msg->_impl_.command_.create_unit_;
}
const ::SC2APIProtocol::DebugKillUnit&
DebugCommand::_Internal::kill_unit(const DebugCommand* msg) {
  return *msg->_impl_.command_.kill_unit_;
}
const ::SC2APIProtocol::DebugTestProcess&
DebugCommand::_Internal::test_process(const DebugCommand* msg) {
  return *msg->_impl_.command_.test_process_;
}
const ::SC2APIProtocol::DebugSetScore&
DebugCommand::_Internal::score(const DebugCommand* msg) {
  return *msg->_impl_.command_.score_;
}
const ::SC2APIProtocol::DebugEndGame&
DebugCommand::_Internal::end_game(const DebugCommand* msg) {
  return *msg->_impl_.command_.end_game_;
}
const ::SC2APIProtocol::DebugSetUnitValue&
DebugCommand::_Internal::unit_value(const DebugCommand* msg) {
  return *msg->_impl_.command_.unit_value_;
}
void DebugCommand::set_allocated_draw(::SC2APIProtocol::DebugDraw* draw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (draw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(draw);
    if (message_arena != submessage_arena) {
      draw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draw, submessage_arena);
    }
    set_has_draw();
    _impl_.command_.draw_ = draw;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.draw)
}
void DebugCommand::set_allocated_create_unit(::SC2APIProtocol::DebugCreateUnit* create_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (create_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_unit);
    if (message_arena != submessage_arena) {
      create_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_unit, submessage_arena);
    }
    set_has_create_unit();
    _impl_.command_.create_unit_ = create_unit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.create_unit)
}
void DebugCommand::set_allocated_kill_unit(::SC2APIProtocol::DebugKillUnit* kill_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (kill_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kill_unit);
    if (message_arena != submessage_arena) {
      kill_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kill_unit, submessage_arena);
    }
    set_has_kill_unit();
    _impl_.command_.kill_unit_ = kill_unit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.kill_unit)
}
void DebugCommand::set_allocated_test_process(::SC2APIProtocol::DebugTestProcess* test_process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (test_process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_process);
    if (message_arena != submessage_arena) {
      test_process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_process, submessage_arena);
    }
    set_has_test_process();
    _impl_.command_.test_process_ = test_process;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.test_process)
}
void DebugCommand::set_allocated_score(::SC2APIProtocol::DebugSetScore* score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(score);
    if (message_arena != submessage_arena) {
      score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, score, submessage_arena);
    }
    set_has_score();
    _impl_.command_.score_ = score;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.score)
}
void DebugCommand::set_allocated_end_game(::SC2APIProtocol::DebugEndGame* end_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (end_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_game);
    if (message_arena != submessage_arena) {
      end_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_game, submessage_arena);
    }
    set_has_end_game();
    _impl_.command_.end_game_ = end_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.end_game)
}
void DebugCommand::set_allocated_unit_value(::SC2APIProtocol::DebugSetUnitValue* unit_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (unit_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unit_value);
    if (message_arena != submessage_arena) {
      unit_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_value, submessage_arena);
    }
    set_has_unit_value();
    _impl_.command_.unit_value_ = unit_value;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.unit_value)
}
DebugCommand::DebugCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugCommand)
}
DebugCommand::DebugCommand(const DebugCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kDraw: {
      _this->_internal_mutable_draw()->::SC2APIProtocol::DebugDraw::MergeFrom(
          from._internal_draw());
      break;
    }
    case kGameState: {
      _this->_internal_set_game_state(from._internal_game_state());
      break;
    }
    case kCreateUnit: {
      _this->_internal_mutable_create_unit()->::SC2APIProtocol::DebugCreateUnit::MergeFrom(
          from._internal_create_unit());
      break;
    }
    case kKillUnit: {
      _this->_internal_mutable_kill_unit()->::SC2APIProtocol::DebugKillUnit::MergeFrom(
          from._internal_kill_unit());
      break;
    }
    case kTestProcess: {
      _this->_internal_mutable_test_process()->::SC2APIProtocol::DebugTestProcess::MergeFrom(
          from._internal_test_process());
      break;
    }
    case kScore: {
      _this->_internal_mutable_score()->::SC2APIProtocol::DebugSetScore::MergeFrom(
          from._internal_score());
      break;
    }
    case kEndGame: {
      _this->_internal_mutable_end_game()->::SC2APIProtocol::DebugEndGame::MergeFrom(
          from._internal_end_game());
      break;
    }
    case kUnitValue: {
      _this->_internal_mutable_unit_value()->::SC2APIProtocol::DebugSetUnitValue::MergeFrom(
          from._internal_unit_value());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugCommand)
}

inline void DebugCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_command();
}

DebugCommand::~DebugCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void DebugCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.DebugCommand)
  switch (command_case()) {
    case kDraw: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.draw_;
      }
      break;
    }
    case kGameState: {
      // No need to clear
      break;
    }
    case kCreateUnit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.create_unit_;
      }
      break;
    }
    case kKillUnit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.kill_unit_;
      }
      break;
    }
    case kTestProcess: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.test_process_;
      }
      break;
    }
    case kScore: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.score_;
      }
      break;
    }
    case kEndGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.end_game_;
      }
      break;
    }
    case kUnitValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.unit_value_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}


void DebugCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.DebugDraw draw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_draw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugGameState game_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::DebugGameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::SC2APIProtocol::DebugGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugCreateUnit create_unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugKillUnit kill_unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kill_unit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugTestProcess test_process = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_process(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugSetScore score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_score(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugEndGame end_game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kDraw: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::draw(this),
          _Internal::draw(this).GetCachedSize(), target, stream);
      break;
    }
    case kGameState: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_game_state(), target);
      break;
    }
    case kCreateUnit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::create_unit(this),
          _Internal::create_unit(this).GetCachedSize(), target, stream);
      break;
    }
    case kKillUnit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::kill_unit(this),
          _Internal::kill_unit(this).GetCachedSize(), target, stream);
      break;
    }
    case kTestProcess: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::test_process(this),
          _Internal::test_process(this).GetCachedSize(), target, stream);
      break;
    }
    case kScore: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::score(this),
          _Internal::score(this).GetCachedSize(), target, stream);
      break;
    }
    case kEndGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::end_game(this),
          _Internal::end_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnitValue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::unit_value(this),
          _Internal::unit_value(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugCommand)
  return target;
}

size_t DebugCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .SC2APIProtocol.DebugDraw draw = 1;
    case kDraw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.draw_);
      break;
    }
    // .SC2APIProtocol.DebugGameState game_state = 2;
    case kGameState: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
      break;
    }
    // .SC2APIProtocol.DebugCreateUnit create_unit = 3;
    case kCreateUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.create_unit_);
      break;
    }
    // .SC2APIProtocol.DebugKillUnit kill_unit = 4;
    case kKillUnit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.kill_unit_);
      break;
    }
    // .SC2APIProtocol.DebugTestProcess test_process = 5;
    case kTestProcess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.test_process_);
      break;
    }
    // .SC2APIProtocol.DebugSetScore score = 6;
    case kScore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.score_);
      break;
    }
    // .SC2APIProtocol.DebugEndGame end_game = 7;
    case kEndGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.end_game_);
      break;
    }
    // .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
    case kUnitValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.unit_value_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugCommand::GetClassData() const { return &_class_data_; }


void DebugCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugCommand*>(&to_msg);
  auto& from = static_cast<const DebugCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kDraw: {
      _this->_internal_mutable_draw()->::SC2APIProtocol::DebugDraw::MergeFrom(
          from._internal_draw());
      break;
    }
    case kGameState: {
      _this->_internal_set_game_state(from._internal_game_state());
      break;
    }
    case kCreateUnit: {
      _this->_internal_mutable_create_unit()->::SC2APIProtocol::DebugCreateUnit::MergeFrom(
          from._internal_create_unit());
      break;
    }
    case kKillUnit: {
      _this->_internal_mutable_kill_unit()->::SC2APIProtocol::DebugKillUnit::MergeFrom(
          from._internal_kill_unit());
      break;
    }
    case kTestProcess: {
      _this->_internal_mutable_test_process()->::SC2APIProtocol::DebugTestProcess::MergeFrom(
          from._internal_test_process());
      break;
    }
    case kScore: {
      _this->_internal_mutable_score()->::SC2APIProtocol::DebugSetScore::MergeFrom(
          from._internal_score());
      break;
    }
    case kEndGame: {
      _this->_internal_mutable_end_game()->::SC2APIProtocol::DebugEndGame::MergeFrom(
          from._internal_end_game());
      break;
    }
    case kUnitValue: {
      _this->_internal_mutable_unit_value()->::SC2APIProtocol::DebugSetUnitValue::MergeFrom(
          from._internal_unit_value());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugCommand::CopyFrom(const DebugCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCommand::IsInitialized() const {
  return true;
}

void DebugCommand::InternalSwap(DebugCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.command_, other->_impl_.command_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[0]);
}

// ===================================================================

class DebugDraw::_Internal {
 public:
};

DebugDraw::DebugDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugDraw)
}
DebugDraw::DebugDraw(const DebugDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugDraw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){from._impl_.text_}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.boxes_){from._impl_.boxes_}
    , decltype(_impl_.spheres_){from._impl_.spheres_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugDraw)
}

inline void DebugDraw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){arena}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.boxes_){arena}
    , decltype(_impl_.spheres_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DebugDraw::~DebugDraw() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugDraw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.~RepeatedPtrField();
  _impl_.lines_.~RepeatedPtrField();
  _impl_.boxes_.~RepeatedPtrField();
  _impl_.spheres_.~RepeatedPtrField();
}

void DebugDraw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugDraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.Clear();
  _impl_.lines_.Clear();
  _impl_.boxes_.Clear();
  _impl_.spheres_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugDraw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.DebugText text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.DebugLine lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.DebugBox boxes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.DebugSphere spheres = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spheres(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugDraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugDraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.DebugText text = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_text_size()); i < n; i++) {
    const auto& repfield = this->_internal_text(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.DebugLine lines = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.DebugBox boxes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boxes_size()); i < n; i++) {
    const auto& repfield = this->_internal_boxes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.DebugSphere spheres = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spheres_size()); i < n; i++) {
    const auto& repfield = this->_internal_spheres(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugDraw)
  return target;
}

size_t DebugDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugDraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.DebugText text = 1;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->_impl_.text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.DebugLine lines = 2;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_impl_.lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.DebugBox boxes = 3;
  total_size += 1UL * this->_internal_boxes_size();
  for (const auto& msg : this->_impl_.boxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.DebugSphere spheres = 4;
  total_size += 1UL * this->_internal_spheres_size();
  for (const auto& msg : this->_impl_.spheres_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugDraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugDraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugDraw::GetClassData() const { return &_class_data_; }


void DebugDraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugDraw*>(&to_msg);
  auto& from = static_cast<const DebugDraw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugDraw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.text_.MergeFrom(from._impl_.text_);
  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  _this->_impl_.boxes_.MergeFrom(from._impl_.boxes_);
  _this->_impl_.spheres_.MergeFrom(from._impl_.spheres_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugDraw::CopyFrom(const DebugDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugDraw::IsInitialized() const {
  return true;
}

void DebugDraw::InternalSwap(DebugDraw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.text_.InternalSwap(&other->_impl_.text_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  _impl_.boxes_.InternalSwap(&other->_impl_.boxes_);
  _impl_.spheres_.InternalSwap(&other->_impl_.spheres_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugDraw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[1]);
}

// ===================================================================

class Line::_Internal {
 public:
  using HasBits = decltype(std::declval<Line>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Point& p0(const Line* msg);
  static void set_has_p0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Point& p1(const Line* msg);
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::Point&
Line::_Internal::p0(const Line* msg) {
  return *msg->_impl_.p0_;
}
const ::SC2APIProtocol::Point&
Line::_Internal::p1(const Line* msg) {
  return *msg->_impl_.p1_;
}
void Line::clear_p0() {
  if (_impl_.p0_ != nullptr) _impl_.p0_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Line::clear_p1() {
  if (_impl_.p1_ != nullptr) _impl_.p1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Line* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.p0_){nullptr}
    , decltype(_impl_.p1_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p0()) {
    _this->_impl_.p0_ = new ::SC2APIProtocol::Point(*from._impl_.p0_);
  }
  if (from._internal_has_p1()) {
    _this->_impl_.p1_ = new ::SC2APIProtocol::Point(*from._impl_.p1_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Line)
}

inline void Line::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.p0_){nullptr}
    , decltype(_impl_.p1_){nullptr}
  };
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Line)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.p0_;
  if (this != internal_default_instance()) delete _impl_.p1_;
}

void Line::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Line)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.p0_ != nullptr);
      _impl_.p0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.p1_ != nullptr);
      _impl_.p1_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Point p0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Line::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Line)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Point p0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p0(this),
        _Internal::p0(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Point p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p1(this),
        _Internal::p1(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Line)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.Point p0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.p0_);
    }

    // optional .SC2APIProtocol.Point p1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.p1_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }


void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Line)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_p0()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_p0());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_p1()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_p1());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, _impl_.p1_)
      + sizeof(Line::_impl_.p1_)
      - PROTOBUF_FIELD_OFFSET(Line, _impl_.p0_)>(
          reinterpret_cast<char*>(&_impl_.p0_),
          reinterpret_cast<char*>(&other->_impl_.p0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[2]);
}

// ===================================================================

class Color::_Internal {
 public:
  using HasBits = decltype(std::declval<Color>()._impl_._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.b_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.r_){0u}
    , decltype(_impl_.g_){0u}
    , decltype(_impl_.b_){0u}
  };
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.b_) -
        reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.b_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_r(&has_bits);
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_g(&has_bits);
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_r(), target);
  }

  // optional uint32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // optional uint32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 r = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_r());
    }

    // optional uint32 g = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_g());
    }

    // optional uint32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.b_)
      + sizeof(Color::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[3]);
}

// ===================================================================

class DebugText::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugText>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Color& color(const DebugText* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Point& virtual_pos(const DebugText* msg);
  static void set_has_virtual_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::Point& world_pos(const DebugText* msg);
  static void set_has_world_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::SC2APIProtocol::Color&
DebugText::_Internal::color(const DebugText* msg) {
  return *msg->_impl_.color_;
}
const ::SC2APIProtocol::Point&
DebugText::_Internal::virtual_pos(const DebugText* msg) {
  return *msg->_impl_.virtual_pos_;
}
const ::SC2APIProtocol::Point&
DebugText::_Internal::world_pos(const DebugText* msg) {
  return *msg->_impl_.world_pos_;
}
void DebugText::clear_virtual_pos() {
  if (_impl_.virtual_pos_ != nullptr) _impl_.virtual_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DebugText::clear_world_pos() {
  if (_impl_.world_pos_ != nullptr) _impl_.world_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DebugText::DebugText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugText)
}
DebugText::DebugText(const DebugText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.virtual_pos_){nullptr}
    , decltype(_impl_.world_pos_){nullptr}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::SC2APIProtocol::Color(*from._impl_.color_);
  }
  if (from._internal_has_virtual_pos()) {
    _this->_impl_.virtual_pos_ = new ::SC2APIProtocol::Point(*from._impl_.virtual_pos_);
  }
  if (from._internal_has_world_pos()) {
    _this->_impl_.world_pos_ = new ::SC2APIProtocol::Point(*from._impl_.world_pos_);
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugText)
}

inline void DebugText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.virtual_pos_){nullptr}
    , decltype(_impl_.world_pos_){nullptr}
    , decltype(_impl_.size_){0u}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugText::~DebugText() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.virtual_pos_;
  if (this != internal_default_instance()) delete _impl_.world_pos_;
}

void DebugText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugText::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.virtual_pos_ != nullptr);
      _impl_.virtual_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.world_pos_ != nullptr);
      _impl_.world_pos_->Clear();
    }
  }
  _impl_.size_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.DebugText.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point virtual_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point world_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.DebugText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional .SC2APIProtocol.Point virtual_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::virtual_pos(this),
        _Internal::virtual_pos(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Point world_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::world_pos(this),
        _Internal::world_pos(this).GetCachedSize(), target, stream);
  }

  // optional uint32 size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugText)
  return target;
}

size_t DebugText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .SC2APIProtocol.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .SC2APIProtocol.Point virtual_pos = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.virtual_pos_);
    }

    // optional .SC2APIProtocol.Point world_pos = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_pos_);
    }

    // optional uint32 size = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugText::GetClassData() const { return &_class_data_; }


void DebugText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugText*>(&to_msg);
  auto& from = static_cast<const DebugText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_color()->::SC2APIProtocol::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_virtual_pos()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_virtual_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_world_pos()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_world_pos());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugText::CopyFrom(const DebugText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugText::IsInitialized() const {
  return true;
}

void DebugText::InternalSwap(DebugText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugText, _impl_.size_)
      + sizeof(DebugText::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(DebugText, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[4]);
}

// ===================================================================

class DebugLine::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugLine>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Color& color(const DebugLine* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Line& line(const DebugLine* msg);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::Color&
DebugLine::_Internal::color(const DebugLine* msg) {
  return *msg->_impl_.color_;
}
const ::SC2APIProtocol::Line&
DebugLine::_Internal::line(const DebugLine* msg) {
  return *msg->_impl_.line_;
}
DebugLine::DebugLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugLine)
}
DebugLine::DebugLine(const DebugLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.line_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::SC2APIProtocol::Color(*from._impl_.color_);
  }
  if (from._internal_has_line()) {
    _this->_impl_.line_ = new ::SC2APIProtocol::Line(*from._impl_.line_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugLine)
}

inline void DebugLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.line_){nullptr}
  };
}

DebugLine::~DebugLine() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.line_;
}

void DebugLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.line_ != nullptr);
      _impl_.line_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Line line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Line line = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::line(this),
        _Internal::line(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugLine)
  return target;
}

size_t DebugLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .SC2APIProtocol.Line line = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.line_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugLine::GetClassData() const { return &_class_data_; }


void DebugLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugLine*>(&to_msg);
  auto& from = static_cast<const DebugLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::SC2APIProtocol::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_line()->::SC2APIProtocol::Line::MergeFrom(
          from._internal_line());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugLine::CopyFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLine::IsInitialized() const {
  return true;
}

void DebugLine::InternalSwap(DebugLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugLine, _impl_.line_)
      + sizeof(DebugLine::_impl_.line_)
      - PROTOBUF_FIELD_OFFSET(DebugLine, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[5]);
}

// ===================================================================

class DebugBox::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugBox>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Color& color(const DebugBox* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Point& min(const DebugBox* msg);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::Point& max(const DebugBox* msg);
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::SC2APIProtocol::Color&
DebugBox::_Internal::color(const DebugBox* msg) {
  return *msg->_impl_.color_;
}
const ::SC2APIProtocol::Point&
DebugBox::_Internal::min(const DebugBox* msg) {
  return *msg->_impl_.min_;
}
const ::SC2APIProtocol::Point&
DebugBox::_Internal::max(const DebugBox* msg) {
  return *msg->_impl_.max_;
}
void DebugBox::clear_min() {
  if (_impl_.min_ != nullptr) _impl_.min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DebugBox::clear_max() {
  if (_impl_.max_ != nullptr) _impl_.max_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DebugBox::DebugBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugBox)
}
DebugBox::DebugBox(const DebugBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugBox* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::SC2APIProtocol::Color(*from._impl_.color_);
  }
  if (from._internal_has_min()) {
    _this->_impl_.min_ = new ::SC2APIProtocol::Point(*from._impl_.min_);
  }
  if (from._internal_has_max()) {
    _this->_impl_.max_ = new ::SC2APIProtocol::Point(*from._impl_.max_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugBox)
}

inline void DebugBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.min_){nullptr}
    , decltype(_impl_.max_){nullptr}
  };
}

DebugBox::~DebugBox() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.min_;
  if (this != internal_default_instance()) delete _impl_.max_;
}

void DebugBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugBox::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.min_ != nullptr);
      _impl_.min_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.max_ != nullptr);
      _impl_.max_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Point min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::min(this),
        _Internal::min(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Point max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugBox)
  return target;
}

size_t DebugBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .SC2APIProtocol.Point min = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.min_);
    }

    // optional .SC2APIProtocol.Point max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.max_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugBox::GetClassData() const { return &_class_data_; }


void DebugBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugBox*>(&to_msg);
  auto& from = static_cast<const DebugBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugBox)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::SC2APIProtocol::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_min()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_min());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_max()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_max());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugBox::CopyFrom(const DebugBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugBox::IsInitialized() const {
  return true;
}

void DebugBox::InternalSwap(DebugBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugBox, _impl_.max_)
      + sizeof(DebugBox::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(DebugBox, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[6]);
}

// ===================================================================

class DebugSphere::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugSphere>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Color& color(const DebugSphere* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Point& p(const DebugSphere* msg);
  static void set_has_p(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::SC2APIProtocol::Color&
DebugSphere::_Internal::color(const DebugSphere* msg) {
  return *msg->_impl_.color_;
}
const ::SC2APIProtocol::Point&
DebugSphere::_Internal::p(const DebugSphere* msg) {
  return *msg->_impl_.p_;
}
void DebugSphere::clear_p() {
  if (_impl_.p_ != nullptr) _impl_.p_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DebugSphere::DebugSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugSphere)
}
DebugSphere::DebugSphere(const DebugSphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugSphere* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.p_){nullptr}
    , decltype(_impl_.r_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::SC2APIProtocol::Color(*from._impl_.color_);
  }
  if (from._internal_has_p()) {
    _this->_impl_.p_ = new ::SC2APIProtocol::Point(*from._impl_.p_);
  }
  _this->_impl_.r_ = from._impl_.r_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugSphere)
}

inline void DebugSphere::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.p_){nullptr}
    , decltype(_impl_.r_){0}
  };
}

DebugSphere::~DebugSphere() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugSphere)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugSphere::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.p_;
}

void DebugSphere::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugSphere)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.p_ != nullptr);
      _impl_.p_->Clear();
    }
  }
  _impl_.r_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugSphere::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_r(&has_bits);
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugSphere::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugSphere)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Point p = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p(this),
        _Internal::p(this).GetCachedSize(), target, stream);
  }

  // optional float r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugSphere)
  return target;
}

size_t DebugSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugSphere)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .SC2APIProtocol.Point p = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.p_);
    }

    // optional float r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugSphere::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugSphere::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugSphere::GetClassData() const { return &_class_data_; }


void DebugSphere::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugSphere*>(&to_msg);
  auto& from = static_cast<const DebugSphere&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugSphere)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::SC2APIProtocol::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_p()->::SC2APIProtocol::Point::MergeFrom(
          from._internal_p());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugSphere::CopyFrom(const DebugSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSphere::IsInitialized() const {
  return true;
}

void DebugSphere::InternalSwap(DebugSphere* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugSphere, _impl_.r_)
      + sizeof(DebugSphere::_impl_.r_)
      - PROTOBUF_FIELD_OFFSET(DebugSphere, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugSphere::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[7]);
}

// ===================================================================

class DebugCreateUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugCreateUnit>()._impl_._has_bits_);
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::Point2D& pos(const DebugCreateUnit* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::SC2APIProtocol::Point2D&
DebugCreateUnit::_Internal::pos(const DebugCreateUnit* msg) {
  return *msg->_impl_.pos_;
}
void DebugCreateUnit::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DebugCreateUnit::DebugCreateUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugCreateUnit)
}
DebugCreateUnit::DebugCreateUnit(const DebugCreateUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugCreateUnit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.unit_type_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.quantity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::SC2APIProtocol::Point2D(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.unit_type_, &from._impl_.unit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.unit_type_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugCreateUnit)
}

inline void DebugCreateUnit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.unit_type_){0u}
    , decltype(_impl_.owner_){0}
    , decltype(_impl_.quantity_){0u}
  };
}

DebugCreateUnit::~DebugCreateUnit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugCreateUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugCreateUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void DebugCreateUnit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugCreateUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugCreateUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pos_ != nullptr);
    _impl_.pos_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.unit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quantity_) -
        reinterpret_cast<char*>(&_impl_.unit_type_)) + sizeof(_impl_.quantity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugCreateUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 unit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_type(&has_bits);
          _impl_.unit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner(&has_bits);
          _impl_.owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point2D pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quantity(&has_bits);
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugCreateUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugCreateUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 unit_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit_type(), target);
  }

  // optional int32 owner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner(), target);
  }

  // optional .SC2APIProtocol.Point2D pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugCreateUnit)
  return target;
}

size_t DebugCreateUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugCreateUnit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .SC2APIProtocol.Point2D pos = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pos_);
    }

    // optional uint32 unit_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unit_type());
    }

    // optional int32 owner = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_owner());
    }

    // optional uint32 quantity = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugCreateUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugCreateUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugCreateUnit::GetClassData() const { return &_class_data_; }


void DebugCreateUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugCreateUnit*>(&to_msg);
  auto& from = static_cast<const DebugCreateUnit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugCreateUnit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::SC2APIProtocol::Point2D::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unit_type_ = from._impl_.unit_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.owner_ = from._impl_.owner_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.quantity_ = from._impl_.quantity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugCreateUnit::CopyFrom(const DebugCreateUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugCreateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCreateUnit::IsInitialized() const {
  return true;
}

void DebugCreateUnit::InternalSwap(DebugCreateUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugCreateUnit, _impl_.quantity_)
      + sizeof(DebugCreateUnit::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(DebugCreateUnit, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugCreateUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[8]);
}

// ===================================================================

class DebugKillUnit::_Internal {
 public:
};

DebugKillUnit::DebugKillUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugKillUnit)
}
DebugKillUnit::DebugKillUnit(const DebugKillUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugKillUnit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){from._impl_.tag_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugKillUnit)
}

inline void DebugKillUnit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DebugKillUnit::~DebugKillUnit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugKillUnit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugKillUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.~RepeatedField();
}

void DebugKillUnit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugKillUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugKillUnit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugKillUnit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_tag(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugKillUnit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugKillUnit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tag = 1;
  for (int i = 0, n = this->_internal_tag_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tag(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugKillUnit)
  return target;
}

size_t DebugKillUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugKillUnit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tag = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.tag_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tag_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugKillUnit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugKillUnit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugKillUnit::GetClassData() const { return &_class_data_; }


void DebugKillUnit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugKillUnit*>(&to_msg);
  auto& from = static_cast<const DebugKillUnit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugKillUnit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tag_.MergeFrom(from._impl_.tag_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugKillUnit::CopyFrom(const DebugKillUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugKillUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugKillUnit::IsInitialized() const {
  return true;
}

void DebugKillUnit::InternalSwap(DebugKillUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tag_.InternalSwap(&other->_impl_.tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugKillUnit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[9]);
}

// ===================================================================

class DebugTestProcess::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugTestProcess>()._impl_._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugTestProcess::DebugTestProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugTestProcess)
}
DebugTestProcess::DebugTestProcess(const DebugTestProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugTestProcess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delay_ms_){}
    , decltype(_impl_.test_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.delay_ms_, &from._impl_.delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.test_) -
    reinterpret_cast<char*>(&_impl_.delay_ms_)) + sizeof(_impl_.test_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugTestProcess)
}

inline void DebugTestProcess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delay_ms_){0}
    , decltype(_impl_.test_){1}
  };
}

DebugTestProcess::~DebugTestProcess() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugTestProcess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugTestProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DebugTestProcess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugTestProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugTestProcess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.delay_ms_ = 0;
    _impl_.test_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugTestProcess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::DebugTestProcess_Test_IsValid(val))) {
            _internal_set_test(static_cast<::SC2APIProtocol::DebugTestProcess_Test>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_delay_ms(&has_bits);
          _impl_.delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugTestProcess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugTestProcess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_test(), target);
  }

  // optional int32 delay_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugTestProcess)
  return target;
}

size_t DebugTestProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugTestProcess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 delay_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay_ms());
    }

    // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_test());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugTestProcess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugTestProcess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugTestProcess::GetClassData() const { return &_class_data_; }


void DebugTestProcess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugTestProcess*>(&to_msg);
  auto& from = static_cast<const DebugTestProcess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugTestProcess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.delay_ms_ = from._impl_.delay_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.test_ = from._impl_.test_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugTestProcess::CopyFrom(const DebugTestProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugTestProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTestProcess::IsInitialized() const {
  return true;
}

void DebugTestProcess::InternalSwap(DebugTestProcess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.delay_ms_, other->_impl_.delay_ms_);
  swap(_impl_.test_, other->_impl_.test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugTestProcess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[10]);
}

// ===================================================================

class DebugSetScore::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugSetScore>()._impl_._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugSetScore::DebugSetScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugSetScore)
}
DebugSetScore::DebugSetScore(const DebugSetScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugSetScore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.score_ = from._impl_.score_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugSetScore)
}

inline void DebugSetScore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.score_){0}
  };
}

DebugSetScore::~DebugSetScore() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugSetScore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugSetScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DebugSetScore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugSetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugSetScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.score_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugSetScore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugSetScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugSetScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugSetScore)
  return target;
}

size_t DebugSetScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugSetScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float score = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugSetScore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugSetScore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugSetScore::GetClassData() const { return &_class_data_; }


void DebugSetScore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugSetScore*>(&to_msg);
  auto& from = static_cast<const DebugSetScore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugSetScore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_score()) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugSetScore::CopyFrom(const DebugSetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSetScore::IsInitialized() const {
  return true;
}

void DebugSetScore::InternalSwap(DebugSetScore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.score_, other->_impl_.score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugSetScore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[11]);
}

// ===================================================================

class DebugEndGame::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugEndGame>()._impl_._has_bits_);
  static void set_has_end_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugEndGame::DebugEndGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugEndGame)
}
DebugEndGame::DebugEndGame(const DebugEndGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugEndGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.end_result_ = from._impl_.end_result_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugEndGame)
}

inline void DebugEndGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_result_){1}
  };
}

DebugEndGame::~DebugEndGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugEndGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugEndGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DebugEndGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugEndGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugEndGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.end_result_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugEndGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::DebugEndGame_EndResult_IsValid(val))) {
            _internal_set_end_result(static_cast<::SC2APIProtocol::DebugEndGame_EndResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugEndGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugEndGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_end_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugEndGame)
  return target;
}

size_t DebugEndGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugEndGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_end_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugEndGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugEndGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugEndGame::GetClassData() const { return &_class_data_; }


void DebugEndGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugEndGame*>(&to_msg);
  auto& from = static_cast<const DebugEndGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugEndGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end_result()) {
    _this->_internal_set_end_result(from._internal_end_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugEndGame::CopyFrom(const DebugEndGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugEndGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEndGame::IsInitialized() const {
  return true;
}

void DebugEndGame::InternalSwap(DebugEndGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.end_result_, other->_impl_.end_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugEndGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[12]);
}

// ===================================================================

class DebugSetUnitValue::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugSetUnitValue>()._impl_._has_bits_);
  static void set_has_unit_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugSetUnitValue::DebugSetUnitValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.DebugSetUnitValue)
}
DebugSetUnitValue::DebugSetUnitValue(const DebugSetUnitValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugSetUnitValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_tag_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.unit_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unit_tag_, &from._impl_.unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_value_) -
    reinterpret_cast<char*>(&_impl_.unit_tag_)) + sizeof(_impl_.unit_value_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugSetUnitValue)
}

inline void DebugSetUnitValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_tag_){uint64_t{0u}}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.unit_value_){1}
  };
}

DebugSetUnitValue::~DebugSetUnitValue() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugSetUnitValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugSetUnitValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DebugSetUnitValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugSetUnitValue::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugSetUnitValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.unit_tag_)) + sizeof(_impl_.value_));
    _impl_.unit_value_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugSetUnitValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::DebugSetUnitValue_UnitValue_IsValid(val))) {
            _internal_set_unit_value(static_cast<::SC2APIProtocol::DebugSetUnitValue_UnitValue>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 unit_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unit_tag(&has_bits);
          _impl_.unit_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugSetUnitValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugSetUnitValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_unit_value(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // optional uint64 unit_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_unit_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugSetUnitValue)
  return target;
}

size_t DebugSetUnitValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugSetUnitValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 unit_tag = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unit_tag());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_unit_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugSetUnitValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugSetUnitValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugSetUnitValue::GetClassData() const { return &_class_data_; }


void DebugSetUnitValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugSetUnitValue*>(&to_msg);
  auto& from = static_cast<const DebugSetUnitValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugSetUnitValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unit_tag_ = from._impl_.unit_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unit_value_ = from._impl_.unit_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugSetUnitValue::CopyFrom(const DebugSetUnitValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugSetUnitValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSetUnitValue::IsInitialized() const {
  return true;
}

void DebugSetUnitValue::InternalSwap(DebugSetUnitValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugSetUnitValue, _impl_.value_)
      + sizeof(DebugSetUnitValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(DebugSetUnitValue, _impl_.unit_tag_)>(
          reinterpret_cast<char*>(&_impl_.unit_tag_),
          reinterpret_cast<char*>(&other->_impl_.unit_tag_));
  swap(_impl_.unit_value_, other->_impl_.unit_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugSetUnitValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fdebug_2eproto_getter, &descriptor_table_s2clientprotocol_2fdebug_2eproto_once,
      file_level_metadata_s2clientprotocol_2fdebug_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugCommand*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugDraw*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Line*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Color*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugText*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugText >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugLine*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugLine >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugBox*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugBox >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugSphere*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugSphere >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugSphere >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugCreateUnit*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugCreateUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugCreateUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugKillUnit*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugKillUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugKillUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugTestProcess*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugTestProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugTestProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugSetScore*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugSetScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugSetScore >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugEndGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugEndGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugEndGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::DebugSetUnitValue*
Arena::CreateMaybeMessage< ::SC2APIProtocol::DebugSetUnitValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::DebugSetUnitValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

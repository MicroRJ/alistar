// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/sc2api.proto

#include "s2clientprotocol/sc2api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SC2APIProtocol {
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.status_)*/1
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR RequestCreateGame::RequestCreateGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_setup_)*/{}
  , /*decltype(_impl_.random_seed_)*/0u
  , /*decltype(_impl_.disable_fog_)*/false
  , /*decltype(_impl_.realtime_)*/false
  , /*decltype(_impl_.Map_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestCreateGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestCreateGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestCreateGameDefaultTypeInternal() {}
  union {
    RequestCreateGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestCreateGameDefaultTypeInternal _RequestCreateGame_default_instance_;
PROTOBUF_CONSTEXPR LocalMap::LocalMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct LocalMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalMapDefaultTypeInternal() {}
  union {
    LocalMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalMapDefaultTypeInternal _LocalMap_default_instance_;
PROTOBUF_CONSTEXPR ResponseCreateGame::ResponseCreateGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseCreateGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseCreateGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseCreateGameDefaultTypeInternal() {}
  union {
    ResponseCreateGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseCreateGameDefaultTypeInternal _ResponseCreateGame_default_instance_;
PROTOBUF_CONSTEXPR RequestJoinGame::RequestJoinGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_ports_)*/{}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.server_ports_)*/nullptr
  , /*decltype(_impl_.shared_port_)*/0
  , /*decltype(_impl_.participation_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestJoinGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestJoinGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestJoinGameDefaultTypeInternal() {}
  union {
    RequestJoinGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestJoinGameDefaultTypeInternal _RequestJoinGame_default_instance_;
PROTOBUF_CONSTEXPR PortSet::PortSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_port_)*/0
  , /*decltype(_impl_.base_port_)*/0} {}
struct PortSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortSetDefaultTypeInternal() {}
  union {
    PortSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortSetDefaultTypeInternal _PortSet_default_instance_;
PROTOBUF_CONSTEXPR ResponseJoinGame::ResponseJoinGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseJoinGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseJoinGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseJoinGameDefaultTypeInternal() {}
  union {
    ResponseJoinGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseJoinGameDefaultTypeInternal _ResponseJoinGame_default_instance_;
PROTOBUF_CONSTEXPR RequestRestartGame::RequestRestartGame(
    ::_pbi::ConstantInitialized) {}
struct RequestRestartGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestRestartGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestRestartGameDefaultTypeInternal() {}
  union {
    RequestRestartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestRestartGameDefaultTypeInternal _RequestRestartGame_default_instance_;
PROTOBUF_CONSTEXPR ResponseRestartGame::ResponseRestartGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.need_hard_reset_)*/false
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseRestartGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseRestartGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseRestartGameDefaultTypeInternal() {}
  union {
    ResponseRestartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseRestartGameDefaultTypeInternal _ResponseRestartGame_default_instance_;
PROTOBUF_CONSTEXPR RequestStartReplay::RequestStartReplay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.observed_player_id_)*/0
  , /*decltype(_impl_.disable_fog_)*/false
  , /*decltype(_impl_.realtime_)*/false
  , /*decltype(_impl_.record_replay_)*/false
  , /*decltype(_impl_.replay_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestStartReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestStartReplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestStartReplayDefaultTypeInternal() {}
  union {
    RequestStartReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestStartReplayDefaultTypeInternal _RequestStartReplay_default_instance_;
PROTOBUF_CONSTEXPR ResponseStartReplay::ResponseStartReplay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseStartReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseStartReplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseStartReplayDefaultTypeInternal() {}
  union {
    ResponseStartReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseStartReplayDefaultTypeInternal _ResponseStartReplay_default_instance_;
PROTOBUF_CONSTEXPR RequestMapCommand::RequestMapCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trigger_cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RequestMapCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestMapCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestMapCommandDefaultTypeInternal() {}
  union {
    RequestMapCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestMapCommandDefaultTypeInternal _RequestMapCommand_default_instance_;
PROTOBUF_CONSTEXPR ResponseMapCommand::ResponseMapCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseMapCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseMapCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseMapCommandDefaultTypeInternal() {}
  union {
    ResponseMapCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseMapCommandDefaultTypeInternal _ResponseMapCommand_default_instance_;
PROTOBUF_CONSTEXPR RequestLeaveGame::RequestLeaveGame(
    ::_pbi::ConstantInitialized) {}
struct RequestLeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLeaveGameDefaultTypeInternal() {}
  union {
    RequestLeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLeaveGameDefaultTypeInternal _RequestLeaveGame_default_instance_;
PROTOBUF_CONSTEXPR ResponseLeaveGame::ResponseLeaveGame(
    ::_pbi::ConstantInitialized) {}
struct ResponseLeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLeaveGameDefaultTypeInternal() {}
  union {
    ResponseLeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLeaveGameDefaultTypeInternal _ResponseLeaveGame_default_instance_;
PROTOBUF_CONSTEXPR RequestQuickSave::RequestQuickSave(
    ::_pbi::ConstantInitialized) {}
struct RequestQuickSaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQuickSaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQuickSaveDefaultTypeInternal() {}
  union {
    RequestQuickSave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQuickSaveDefaultTypeInternal _RequestQuickSave_default_instance_;
PROTOBUF_CONSTEXPR ResponseQuickSave::ResponseQuickSave(
    ::_pbi::ConstantInitialized) {}
struct ResponseQuickSaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQuickSaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQuickSaveDefaultTypeInternal() {}
  union {
    ResponseQuickSave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQuickSaveDefaultTypeInternal _ResponseQuickSave_default_instance_;
PROTOBUF_CONSTEXPR RequestQuickLoad::RequestQuickLoad(
    ::_pbi::ConstantInitialized) {}
struct RequestQuickLoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQuickLoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQuickLoadDefaultTypeInternal() {}
  union {
    RequestQuickLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQuickLoadDefaultTypeInternal _RequestQuickLoad_default_instance_;
PROTOBUF_CONSTEXPR ResponseQuickLoad::ResponseQuickLoad(
    ::_pbi::ConstantInitialized) {}
struct ResponseQuickLoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQuickLoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQuickLoadDefaultTypeInternal() {}
  union {
    ResponseQuickLoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQuickLoadDefaultTypeInternal _ResponseQuickLoad_default_instance_;
PROTOBUF_CONSTEXPR RequestQuit::RequestQuit(
    ::_pbi::ConstantInitialized) {}
struct RequestQuitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQuitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQuitDefaultTypeInternal() {}
  union {
    RequestQuit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQuitDefaultTypeInternal _RequestQuit_default_instance_;
PROTOBUF_CONSTEXPR ResponseQuit::ResponseQuit(
    ::_pbi::ConstantInitialized) {}
struct ResponseQuitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQuitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQuitDefaultTypeInternal() {}
  union {
    ResponseQuit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQuitDefaultTypeInternal _ResponseQuit_default_instance_;
PROTOBUF_CONSTEXPR RequestGameInfo::RequestGameInfo(
    ::_pbi::ConstantInitialized) {}
struct RequestGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestGameInfoDefaultTypeInternal() {}
  union {
    RequestGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestGameInfoDefaultTypeInternal _RequestGameInfo_default_instance_;
PROTOBUF_CONSTEXPR ResponseGameInfo::ResponseGameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_info_)*/{}
  , /*decltype(_impl_.mod_names_)*/{}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_map_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_raw_)*/nullptr
  , /*decltype(_impl_.options_)*/nullptr} {}
struct ResponseGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseGameInfoDefaultTypeInternal() {}
  union {
    ResponseGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseGameInfoDefaultTypeInternal _ResponseGameInfo_default_instance_;
PROTOBUF_CONSTEXPR RequestObservation::RequestObservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disable_fog_)*/false
  , /*decltype(_impl_.game_loop_)*/0u} {}
struct RequestObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestObservationDefaultTypeInternal() {}
  union {
    RequestObservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestObservationDefaultTypeInternal _RequestObservation_default_instance_;
PROTOBUF_CONSTEXPR ResponseObservation::ResponseObservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actions_)*/{}
  , /*decltype(_impl_.action_errors_)*/{}
  , /*decltype(_impl_.player_result_)*/{}
  , /*decltype(_impl_.chat_)*/{}
  , /*decltype(_impl_.observation_)*/nullptr} {}
struct ResponseObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseObservationDefaultTypeInternal() {}
  union {
    ResponseObservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseObservationDefaultTypeInternal _ResponseObservation_default_instance_;
PROTOBUF_CONSTEXPR ChatReceived::ChatReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/0u} {}
struct ChatReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatReceivedDefaultTypeInternal() {}
  union {
    ChatReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatReceivedDefaultTypeInternal _ChatReceived_default_instance_;
PROTOBUF_CONSTEXPR RequestAction::RequestAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestActionDefaultTypeInternal() {}
  union {
    RequestAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestActionDefaultTypeInternal _RequestAction_default_instance_;
PROTOBUF_CONSTEXPR ResponseAction::ResponseAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseActionDefaultTypeInternal() {}
  union {
    ResponseAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseActionDefaultTypeInternal _ResponseAction_default_instance_;
PROTOBUF_CONSTEXPR RequestObserverAction::RequestObserverAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestObserverActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestObserverActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestObserverActionDefaultTypeInternal() {}
  union {
    RequestObserverAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestObserverActionDefaultTypeInternal _RequestObserverAction_default_instance_;
PROTOBUF_CONSTEXPR ResponseObserverAction::ResponseObserverAction(
    ::_pbi::ConstantInitialized) {}
struct ResponseObserverActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseObserverActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseObserverActionDefaultTypeInternal() {}
  union {
    ResponseObserverAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseObserverActionDefaultTypeInternal _ResponseObserverAction_default_instance_;
PROTOBUF_CONSTEXPR RequestStep::RequestStep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.count_)*/0u} {}
struct RequestStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestStepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestStepDefaultTypeInternal() {}
  union {
    RequestStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestStepDefaultTypeInternal _RequestStep_default_instance_;
PROTOBUF_CONSTEXPR ResponseStep::ResponseStep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.simulation_loop_)*/0u} {}
struct ResponseStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseStepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseStepDefaultTypeInternal() {}
  union {
    ResponseStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseStepDefaultTypeInternal _ResponseStep_default_instance_;
PROTOBUF_CONSTEXPR RequestData::RequestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/false
  , /*decltype(_impl_.unit_type_id_)*/false
  , /*decltype(_impl_.upgrade_id_)*/false
  , /*decltype(_impl_.buff_id_)*/false
  , /*decltype(_impl_.effect_id_)*/false} {}
struct RequestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDataDefaultTypeInternal() {}
  union {
    RequestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDataDefaultTypeInternal _RequestData_default_instance_;
PROTOBUF_CONSTEXPR ResponseData::ResponseData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.units_)*/{}
  , /*decltype(_impl_.upgrades_)*/{}
  , /*decltype(_impl_.buffs_)*/{}
  , /*decltype(_impl_.effects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDataDefaultTypeInternal() {}
  union {
    ResponseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDataDefaultTypeInternal _ResponseData_default_instance_;
PROTOBUF_CONSTEXPR RequestSaveReplay::RequestSaveReplay(
    ::_pbi::ConstantInitialized) {}
struct RequestSaveReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestSaveReplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestSaveReplayDefaultTypeInternal() {}
  union {
    RequestSaveReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestSaveReplayDefaultTypeInternal _RequestSaveReplay_default_instance_;
PROTOBUF_CONSTEXPR ResponseSaveReplay::ResponseSaveReplay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ResponseSaveReplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseSaveReplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseSaveReplayDefaultTypeInternal() {}
  union {
    ResponseSaveReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseSaveReplayDefaultTypeInternal _ResponseSaveReplay_default_instance_;
PROTOBUF_CONSTEXPR RequestReplayInfo::RequestReplayInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.download_data_)*/false
  , /*decltype(_impl_.replay_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestReplayInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestReplayInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestReplayInfoDefaultTypeInternal() {}
  union {
    RequestReplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestReplayInfoDefaultTypeInternal _RequestReplayInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfoExtra::PlayerInfoExtra(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.player_result_)*/nullptr
  , /*decltype(_impl_.player_mmr_)*/0
  , /*decltype(_impl_.player_apm_)*/0} {}
struct PlayerInfoExtraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoExtraDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoExtraDefaultTypeInternal() {}
  union {
    PlayerInfoExtra _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoExtraDefaultTypeInternal _PlayerInfoExtra_default_instance_;
PROTOBUF_CONSTEXPR ResponseReplayInfo::ResponseReplayInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_info_)*/{}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_map_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_details_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_duration_loops_)*/0u
  , /*decltype(_impl_.game_duration_seconds_)*/0
  , /*decltype(_impl_.data_build_)*/0u
  , /*decltype(_impl_.base_build_)*/0u
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseReplayInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseReplayInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseReplayInfoDefaultTypeInternal() {}
  union {
    ResponseReplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseReplayInfoDefaultTypeInternal _ResponseReplayInfo_default_instance_;
PROTOBUF_CONSTEXPR RequestAvailableMaps::RequestAvailableMaps(
    ::_pbi::ConstantInitialized) {}
struct RequestAvailableMapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestAvailableMapsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestAvailableMapsDefaultTypeInternal() {}
  union {
    RequestAvailableMaps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestAvailableMapsDefaultTypeInternal _RequestAvailableMaps_default_instance_;
PROTOBUF_CONSTEXPR ResponseAvailableMaps::ResponseAvailableMaps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_map_paths_)*/{}
  , /*decltype(_impl_.battlenet_map_names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseAvailableMapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseAvailableMapsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseAvailableMapsDefaultTypeInternal() {}
  union {
    ResponseAvailableMaps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseAvailableMapsDefaultTypeInternal _ResponseAvailableMaps_default_instance_;
PROTOBUF_CONSTEXPR RequestSaveMap::RequestSaveMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RequestSaveMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestSaveMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestSaveMapDefaultTypeInternal() {}
  union {
    RequestSaveMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestSaveMapDefaultTypeInternal _RequestSaveMap_default_instance_;
PROTOBUF_CONSTEXPR ResponseSaveMap::ResponseSaveMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/1} {}
struct ResponseSaveMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseSaveMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseSaveMapDefaultTypeInternal() {}
  union {
    ResponseSaveMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseSaveMapDefaultTypeInternal _ResponseSaveMap_default_instance_;
PROTOBUF_CONSTEXPR RequestPing::RequestPing(
    ::_pbi::ConstantInitialized) {}
struct RequestPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestPingDefaultTypeInternal() {}
  union {
    RequestPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestPingDefaultTypeInternal _RequestPing_default_instance_;
PROTOBUF_CONSTEXPR ResponsePing::ResponsePing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_build_)*/0u
  , /*decltype(_impl_.base_build_)*/0u} {}
struct ResponsePingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponsePingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponsePingDefaultTypeInternal() {}
  union {
    ResponsePing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponsePingDefaultTypeInternal _ResponsePing_default_instance_;
PROTOBUF_CONSTEXPR RequestDebug::RequestDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debug_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDebugDefaultTypeInternal() {}
  union {
    RequestDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDebugDefaultTypeInternal _RequestDebug_default_instance_;
PROTOBUF_CONSTEXPR ResponseDebug::ResponseDebug(
    ::_pbi::ConstantInitialized) {}
struct ResponseDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDebugDefaultTypeInternal() {}
  union {
    ResponseDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDebugDefaultTypeInternal _ResponseDebug_default_instance_;
PROTOBUF_CONSTEXPR PlayerSetup::PlayerSetup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.race_)*/0
  , /*decltype(_impl_.ai_build_)*/1
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.difficulty_)*/1} {}
struct PlayerSetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSetupDefaultTypeInternal() {}
  union {
    PlayerSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSetupDefaultTypeInternal _PlayerSetup_default_instance_;
PROTOBUF_CONSTEXPR SpatialCameraSetup::SpatialCameraSetup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.resolution_)*/nullptr
  , /*decltype(_impl_.minimap_resolution_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.crop_to_playable_area_)*/false
  , /*decltype(_impl_.allow_cheating_layers_)*/false} {}
struct SpatialCameraSetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpatialCameraSetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpatialCameraSetupDefaultTypeInternal() {}
  union {
    SpatialCameraSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpatialCameraSetupDefaultTypeInternal _SpatialCameraSetup_default_instance_;
PROTOBUF_CONSTEXPR InterfaceOptions::InterfaceOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.feature_layer_)*/nullptr
  , /*decltype(_impl_.render_)*/nullptr
  , /*decltype(_impl_.raw_)*/false
  , /*decltype(_impl_.score_)*/false
  , /*decltype(_impl_.show_cloaked_)*/false
  , /*decltype(_impl_.show_burrowed_shadows_)*/false
  , /*decltype(_impl_.show_placeholders_)*/false
  , /*decltype(_impl_.raw_affects_selection_)*/false
  , /*decltype(_impl_.raw_crop_to_playable_area_)*/false} {}
struct InterfaceOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterfaceOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterfaceOptionsDefaultTypeInternal() {}
  union {
    InterfaceOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterfaceOptionsDefaultTypeInternal _InterfaceOptions_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.race_requested_)*/0
  , /*decltype(_impl_.race_actual_)*/0
  , /*decltype(_impl_.ai_build_)*/1
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.difficulty_)*/1} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerCommon::PlayerCommon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.minerals_)*/0u
  , /*decltype(_impl_.vespene_)*/0u
  , /*decltype(_impl_.food_cap_)*/0u
  , /*decltype(_impl_.food_used_)*/0u
  , /*decltype(_impl_.food_army_)*/0u
  , /*decltype(_impl_.food_workers_)*/0u
  , /*decltype(_impl_.idle_worker_count_)*/0u
  , /*decltype(_impl_.army_count_)*/0u
  , /*decltype(_impl_.warp_gate_count_)*/0u
  , /*decltype(_impl_.larva_count_)*/0u} {}
struct PlayerCommonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerCommonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerCommonDefaultTypeInternal() {}
  union {
    PlayerCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerCommonDefaultTypeInternal _PlayerCommon_default_instance_;
PROTOBUF_CONSTEXPR Observation::Observation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.alerts_)*/{}
  , /*decltype(_impl_.player_common_)*/nullptr
  , /*decltype(_impl_.score_)*/nullptr
  , /*decltype(_impl_.raw_data_)*/nullptr
  , /*decltype(_impl_.feature_layer_data_)*/nullptr
  , /*decltype(_impl_.render_data_)*/nullptr
  , /*decltype(_impl_.ui_data_)*/nullptr
  , /*decltype(_impl_.game_loop_)*/0u} {}
struct ObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationDefaultTypeInternal() {}
  union {
    Observation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationDefaultTypeInternal _Observation_default_instance_;
PROTOBUF_CONSTEXPR Action::Action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_raw_)*/nullptr
  , /*decltype(_impl_.action_feature_layer_)*/nullptr
  , /*decltype(_impl_.action_render_)*/nullptr
  , /*decltype(_impl_.action_ui_)*/nullptr
  , /*decltype(_impl_.action_chat_)*/nullptr
  , /*decltype(_impl_.game_loop_)*/0u} {}
struct ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionDefaultTypeInternal _Action_default_instance_;
PROTOBUF_CONSTEXPR ActionChat::ActionChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_)*/1} {}
struct ActionChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionChatDefaultTypeInternal() {}
  union {
    ActionChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionChatDefaultTypeInternal _ActionChat_default_instance_;
PROTOBUF_CONSTEXPR ActionError::ActionError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_tag_)*/uint64_t{0u}
  , /*decltype(_impl_.ability_id_)*/uint64_t{0u}
  , /*decltype(_impl_.result_)*/1} {}
struct ActionErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionErrorDefaultTypeInternal() {}
  union {
    ActionError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionErrorDefaultTypeInternal _ActionError_default_instance_;
PROTOBUF_CONSTEXPR ObserverAction::ObserverAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObserverActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObserverActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObserverActionDefaultTypeInternal() {}
  union {
    ObserverAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObserverActionDefaultTypeInternal _ObserverAction_default_instance_;
PROTOBUF_CONSTEXPR ActionObserverPlayerPerspective::ActionObserverPlayerPerspective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/0u} {}
struct ActionObserverPlayerPerspectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionObserverPlayerPerspectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionObserverPlayerPerspectiveDefaultTypeInternal() {}
  union {
    ActionObserverPlayerPerspective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionObserverPlayerPerspectiveDefaultTypeInternal _ActionObserverPlayerPerspective_default_instance_;
PROTOBUF_CONSTEXPR ActionObserverCameraMove::ActionObserverCameraMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.world_pos_)*/nullptr
  , /*decltype(_impl_.distance_)*/0} {}
struct ActionObserverCameraMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionObserverCameraMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionObserverCameraMoveDefaultTypeInternal() {}
  union {
    ActionObserverCameraMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionObserverCameraMoveDefaultTypeInternal _ActionObserverCameraMove_default_instance_;
PROTOBUF_CONSTEXPR ActionObserverCameraFollowPlayer::ActionObserverCameraFollowPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/0u} {}
struct ActionObserverCameraFollowPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionObserverCameraFollowPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionObserverCameraFollowPlayerDefaultTypeInternal() {}
  union {
    ActionObserverCameraFollowPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionObserverCameraFollowPlayerDefaultTypeInternal _ActionObserverCameraFollowPlayer_default_instance_;
PROTOBUF_CONSTEXPR ActionObserverCameraFollowUnits::ActionObserverCameraFollowUnits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unit_tags_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionObserverCameraFollowUnitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionObserverCameraFollowUnitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionObserverCameraFollowUnitsDefaultTypeInternal() {}
  union {
    ActionObserverCameraFollowUnits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionObserverCameraFollowUnitsDefaultTypeInternal _ActionObserverCameraFollowUnits_default_instance_;
PROTOBUF_CONSTEXPR PlayerResult::PlayerResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.result_)*/1} {}
struct PlayerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerResultDefaultTypeInternal() {}
  union {
    PlayerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;
}  // namespace SC2APIProtocol
static ::_pb::Metadata file_level_metadata_s2clientprotocol_2fsc2api_2eproto[63];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[14];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2clientprotocol_2fsc2api_2eproto = nullptr;

const uint32_t TableStruct_s2clientprotocol_2fsc2api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Request, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Request, _impl_.request_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Response, _impl_.response_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_.player_setup_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_.disable_fog_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_.random_seed_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_.realtime_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _impl_.Map_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::LocalMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::LocalMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::LocalMap, _impl_.map_path_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::LocalMap, _impl_.map_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, _impl_.error_details_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.server_ports_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.client_ports_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.shared_port_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.host_ip_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _impl_.participation_),
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PortSet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PortSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PortSet, _impl_.game_port_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PortSet, _impl_.base_port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _impl_.error_details_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestRestartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _impl_.error_details_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _impl_.need_hard_reset_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.map_data_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.observed_player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.disable_fog_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.realtime_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.record_replay_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _impl_.replay_),
  ~0u,
  ~0u,
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, _impl_.error_details_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestMapCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestMapCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestMapCommand, _impl_.trigger_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseMapCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseMapCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseMapCommand, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseMapCommand, _impl_.error_details_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuickSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuickSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuickLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuickLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_.mod_names_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_.local_map_path_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_.start_raw_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _impl_.options_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, _impl_.disable_fog_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, _impl_.game_loop_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _impl_.actions_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _impl_.action_errors_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _impl_.observation_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _impl_.player_result_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _impl_.chat_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, _impl_.message_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestAction, _impl_.actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseAction, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestObserverAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestObserverAction, _impl_.actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseObserverAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStep, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestStep, _impl_.count_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStep, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseStep, _impl_.simulation_loop_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _impl_.unit_type_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _impl_.upgrade_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _impl_.buff_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestData, _impl_.effect_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _impl_.units_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _impl_.upgrades_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _impl_.buffs_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _impl_.effects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestSaveReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveReplay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveReplay, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _impl_.download_data_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _impl_.replay_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _impl_.player_result_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _impl_.player_mmr_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _impl_.player_apm_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.local_map_path_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.game_duration_loops_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.game_duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.game_version_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.data_version_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.data_build_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.base_build_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _impl_.error_details_),
  0,
  1,
  ~0u,
  5,
  6,
  2,
  4,
  7,
  8,
  9,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestAvailableMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, _impl_.local_map_paths_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, _impl_.battlenet_map_names_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, _impl_.map_path_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, _impl_.map_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveMap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveMap, _impl_.error_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _impl_.game_version_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _impl_.data_version_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _impl_.data_build_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _impl_.base_build_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestDebug, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _impl_.race_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _impl_.ai_build_),
  3,
  1,
  4,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _impl_.minimap_resolution_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _impl_.crop_to_playable_area_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _impl_.allow_cheating_layers_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.raw_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.feature_layer_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.render_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.show_cloaked_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.show_burrowed_shadows_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.show_placeholders_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.raw_affects_selection_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _impl_.raw_crop_to_playable_area_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.race_requested_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.race_actual_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.ai_build_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _impl_.player_name_),
  1,
  5,
  2,
  3,
  6,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.minerals_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.vespene_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.food_cap_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.food_used_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.food_army_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.food_workers_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.idle_worker_count_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.army_count_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.warp_gate_count_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _impl_.larva_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.game_loop_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.player_common_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.alerts_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.raw_data_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.feature_layer_data_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.render_data_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Observation, _impl_.ui_data_),
  6,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_.action_raw_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_.action_feature_layer_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_.action_render_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_.action_ui_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_.action_chat_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::Action, _impl_.game_loop_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionChat, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionChat, _impl_.message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionError, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionError, _impl_.unit_tag_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionError, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionError, _impl_.result_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverPlayerPerspective, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverPlayerPerspective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverPlayerPerspective, _impl_.player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, _impl_.world_pos_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowPlayer, _impl_.player_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowUnits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowUnits, _impl_.unit_tags_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, _impl_.result_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, -1, sizeof(::SC2APIProtocol::Request)},
  { 53, 85, -1, sizeof(::SC2APIProtocol::Response)},
  { 110, 123, -1, sizeof(::SC2APIProtocol::RequestCreateGame)},
  { 129, 137, -1, sizeof(::SC2APIProtocol::LocalMap)},
  { 139, 147, -1, sizeof(::SC2APIProtocol::ResponseCreateGame)},
  { 149, 164, -1, sizeof(::SC2APIProtocol::RequestJoinGame)},
  { 172, 180, -1, sizeof(::SC2APIProtocol::PortSet)},
  { 182, 191, -1, sizeof(::SC2APIProtocol::ResponseJoinGame)},
  { 194, -1, -1, sizeof(::SC2APIProtocol::RequestRestartGame)},
  { 200, 209, -1, sizeof(::SC2APIProtocol::ResponseRestartGame)},
  { 212, 227, -1, sizeof(::SC2APIProtocol::RequestStartReplay)},
  { 235, 243, -1, sizeof(::SC2APIProtocol::ResponseStartReplay)},
  { 245, 252, -1, sizeof(::SC2APIProtocol::RequestMapCommand)},
  { 253, 261, -1, sizeof(::SC2APIProtocol::ResponseMapCommand)},
  { 263, -1, -1, sizeof(::SC2APIProtocol::RequestLeaveGame)},
  { 269, -1, -1, sizeof(::SC2APIProtocol::ResponseLeaveGame)},
  { 275, -1, -1, sizeof(::SC2APIProtocol::RequestQuickSave)},
  { 281, -1, -1, sizeof(::SC2APIProtocol::ResponseQuickSave)},
  { 287, -1, -1, sizeof(::SC2APIProtocol::RequestQuickLoad)},
  { 293, -1, -1, sizeof(::SC2APIProtocol::ResponseQuickLoad)},
  { 299, -1, -1, sizeof(::SC2APIProtocol::RequestQuit)},
  { 305, -1, -1, sizeof(::SC2APIProtocol::ResponseQuit)},
  { 311, -1, -1, sizeof(::SC2APIProtocol::RequestGameInfo)},
  { 317, 329, -1, sizeof(::SC2APIProtocol::ResponseGameInfo)},
  { 335, 343, -1, sizeof(::SC2APIProtocol::RequestObservation)},
  { 345, 356, -1, sizeof(::SC2APIProtocol::ResponseObservation)},
  { 361, 369, -1, sizeof(::SC2APIProtocol::ChatReceived)},
  { 371, -1, -1, sizeof(::SC2APIProtocol::RequestAction)},
  { 378, -1, -1, sizeof(::SC2APIProtocol::ResponseAction)},
  { 385, -1, -1, sizeof(::SC2APIProtocol::RequestObserverAction)},
  { 392, -1, -1, sizeof(::SC2APIProtocol::ResponseObserverAction)},
  { 398, 405, -1, sizeof(::SC2APIProtocol::RequestStep)},
  { 406, 413, -1, sizeof(::SC2APIProtocol::ResponseStep)},
  { 414, 425, -1, sizeof(::SC2APIProtocol::RequestData)},
  { 430, -1, -1, sizeof(::SC2APIProtocol::ResponseData)},
  { 441, -1, -1, sizeof(::SC2APIProtocol::RequestSaveReplay)},
  { 447, 454, -1, sizeof(::SC2APIProtocol::ResponseSaveReplay)},
  { 455, 465, -1, sizeof(::SC2APIProtocol::RequestReplayInfo)},
  { 468, 478, -1, sizeof(::SC2APIProtocol::PlayerInfoExtra)},
  { 482, 499, -1, sizeof(::SC2APIProtocol::ResponseReplayInfo)},
  { 510, -1, -1, sizeof(::SC2APIProtocol::RequestAvailableMaps)},
  { 516, -1, -1, sizeof(::SC2APIProtocol::ResponseAvailableMaps)},
  { 524, 532, -1, sizeof(::SC2APIProtocol::RequestSaveMap)},
  { 534, 541, -1, sizeof(::SC2APIProtocol::ResponseSaveMap)},
  { 542, -1, -1, sizeof(::SC2APIProtocol::RequestPing)},
  { 548, 558, -1, sizeof(::SC2APIProtocol::ResponsePing)},
  { 562, -1, -1, sizeof(::SC2APIProtocol::RequestDebug)},
  { 569, -1, -1, sizeof(::SC2APIProtocol::ResponseDebug)},
  { 575, 586, -1, sizeof(::SC2APIProtocol::PlayerSetup)},
  { 591, 602, -1, sizeof(::SC2APIProtocol::SpatialCameraSetup)},
  { 607, 622, -1, sizeof(::SC2APIProtocol::InterfaceOptions)},
  { 631, 644, -1, sizeof(::SC2APIProtocol::PlayerInfo)},
  { 651, 668, -1, sizeof(::SC2APIProtocol::PlayerCommon)},
  { 679, 694, -1, sizeof(::SC2APIProtocol::Observation)},
  { 703, 715, -1, sizeof(::SC2APIProtocol::Action)},
  { 721, 729, -1, sizeof(::SC2APIProtocol::ActionChat)},
  { 731, 740, -1, sizeof(::SC2APIProtocol::ActionError)},
  { 743, -1, -1, sizeof(::SC2APIProtocol::ObserverAction)},
  { 754, 761, -1, sizeof(::SC2APIProtocol::ActionObserverPlayerPerspective)},
  { 762, 770, -1, sizeof(::SC2APIProtocol::ActionObserverCameraMove)},
  { 772, 779, -1, sizeof(::SC2APIProtocol::ActionObserverCameraFollowPlayer)},
  { 780, -1, -1, sizeof(::SC2APIProtocol::ActionObserverCameraFollowUnits)},
  { 787, 795, -1, sizeof(::SC2APIProtocol::PlayerResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SC2APIProtocol::_Request_default_instance_._instance,
  &::SC2APIProtocol::_Response_default_instance_._instance,
  &::SC2APIProtocol::_RequestCreateGame_default_instance_._instance,
  &::SC2APIProtocol::_LocalMap_default_instance_._instance,
  &::SC2APIProtocol::_ResponseCreateGame_default_instance_._instance,
  &::SC2APIProtocol::_RequestJoinGame_default_instance_._instance,
  &::SC2APIProtocol::_PortSet_default_instance_._instance,
  &::SC2APIProtocol::_ResponseJoinGame_default_instance_._instance,
  &::SC2APIProtocol::_RequestRestartGame_default_instance_._instance,
  &::SC2APIProtocol::_ResponseRestartGame_default_instance_._instance,
  &::SC2APIProtocol::_RequestStartReplay_default_instance_._instance,
  &::SC2APIProtocol::_ResponseStartReplay_default_instance_._instance,
  &::SC2APIProtocol::_RequestMapCommand_default_instance_._instance,
  &::SC2APIProtocol::_ResponseMapCommand_default_instance_._instance,
  &::SC2APIProtocol::_RequestLeaveGame_default_instance_._instance,
  &::SC2APIProtocol::_ResponseLeaveGame_default_instance_._instance,
  &::SC2APIProtocol::_RequestQuickSave_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQuickSave_default_instance_._instance,
  &::SC2APIProtocol::_RequestQuickLoad_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQuickLoad_default_instance_._instance,
  &::SC2APIProtocol::_RequestQuit_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQuit_default_instance_._instance,
  &::SC2APIProtocol::_RequestGameInfo_default_instance_._instance,
  &::SC2APIProtocol::_ResponseGameInfo_default_instance_._instance,
  &::SC2APIProtocol::_RequestObservation_default_instance_._instance,
  &::SC2APIProtocol::_ResponseObservation_default_instance_._instance,
  &::SC2APIProtocol::_ChatReceived_default_instance_._instance,
  &::SC2APIProtocol::_RequestAction_default_instance_._instance,
  &::SC2APIProtocol::_ResponseAction_default_instance_._instance,
  &::SC2APIProtocol::_RequestObserverAction_default_instance_._instance,
  &::SC2APIProtocol::_ResponseObserverAction_default_instance_._instance,
  &::SC2APIProtocol::_RequestStep_default_instance_._instance,
  &::SC2APIProtocol::_ResponseStep_default_instance_._instance,
  &::SC2APIProtocol::_RequestData_default_instance_._instance,
  &::SC2APIProtocol::_ResponseData_default_instance_._instance,
  &::SC2APIProtocol::_RequestSaveReplay_default_instance_._instance,
  &::SC2APIProtocol::_ResponseSaveReplay_default_instance_._instance,
  &::SC2APIProtocol::_RequestReplayInfo_default_instance_._instance,
  &::SC2APIProtocol::_PlayerInfoExtra_default_instance_._instance,
  &::SC2APIProtocol::_ResponseReplayInfo_default_instance_._instance,
  &::SC2APIProtocol::_RequestAvailableMaps_default_instance_._instance,
  &::SC2APIProtocol::_ResponseAvailableMaps_default_instance_._instance,
  &::SC2APIProtocol::_RequestSaveMap_default_instance_._instance,
  &::SC2APIProtocol::_ResponseSaveMap_default_instance_._instance,
  &::SC2APIProtocol::_RequestPing_default_instance_._instance,
  &::SC2APIProtocol::_ResponsePing_default_instance_._instance,
  &::SC2APIProtocol::_RequestDebug_default_instance_._instance,
  &::SC2APIProtocol::_ResponseDebug_default_instance_._instance,
  &::SC2APIProtocol::_PlayerSetup_default_instance_._instance,
  &::SC2APIProtocol::_SpatialCameraSetup_default_instance_._instance,
  &::SC2APIProtocol::_InterfaceOptions_default_instance_._instance,
  &::SC2APIProtocol::_PlayerInfo_default_instance_._instance,
  &::SC2APIProtocol::_PlayerCommon_default_instance_._instance,
  &::SC2APIProtocol::_Observation_default_instance_._instance,
  &::SC2APIProtocol::_Action_default_instance_._instance,
  &::SC2APIProtocol::_ActionChat_default_instance_._instance,
  &::SC2APIProtocol::_ActionError_default_instance_._instance,
  &::SC2APIProtocol::_ObserverAction_default_instance_._instance,
  &::SC2APIProtocol::_ActionObserverPlayerPerspective_default_instance_._instance,
  &::SC2APIProtocol::_ActionObserverCameraMove_default_instance_._instance,
  &::SC2APIProtocol::_ActionObserverCameraFollowPlayer_default_instance_._instance,
  &::SC2APIProtocol::_ActionObserverCameraFollowUnits_default_instance_._instance,
  &::SC2APIProtocol::_PlayerResult_default_instance_._instance,
};

const char descriptor_table_protodef_s2clientprotocol_2fsc2api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035s2clientprotocol/sc2api.proto\022\016SC2APIP"
  "rotocol\032\035s2clientprotocol/common.proto\032\033"
  "s2clientprotocol/data.proto\032\034s2clientpro"
  "tocol/debug.proto\032\034s2clientprotocol/erro"
  "r.proto\032\034s2clientprotocol/query.proto\032\032s"
  "2clientprotocol/raw.proto\032\034s2clientproto"
  "col/score.proto\032\036s2clientprotocol/spatia"
  "l.proto\032\031s2clientprotocol/ui.proto\"\303\t\n\007R"
  "equest\0228\n\013create_game\030\001 \001(\0132!.SC2APIProt"
  "ocol.RequestCreateGameH\000\0224\n\tjoin_game\030\002 "
  "\001(\0132\037.SC2APIProtocol.RequestJoinGameH\000\022:"
  "\n\014restart_game\030\003 \001(\0132\".SC2APIProtocol.Re"
  "questRestartGameH\000\022:\n\014start_replay\030\004 \001(\013"
  "2\".SC2APIProtocol.RequestStartReplayH\000\0226"
  "\n\nleave_game\030\005 \001(\0132 .SC2APIProtocol.Requ"
  "estLeaveGameH\000\0226\n\nquick_save\030\006 \001(\0132 .SC2"
  "APIProtocol.RequestQuickSaveH\000\0226\n\nquick_"
  "load\030\007 \001(\0132 .SC2APIProtocol.RequestQuick"
  "LoadH\000\022+\n\004quit\030\010 \001(\0132\033.SC2APIProtocol.Re"
  "questQuitH\000\0224\n\tgame_info\030\t \001(\0132\037.SC2APIP"
  "rotocol.RequestGameInfoH\000\0229\n\013observation"
  "\030\n \001(\0132\".SC2APIProtocol.RequestObservati"
  "onH\000\022/\n\006action\030\013 \001(\0132\035.SC2APIProtocol.Re"
  "questActionH\000\022;\n\nobs_action\030\025 \001(\0132%.SC2A"
  "PIProtocol.RequestObserverActionH\000\022+\n\004st"
  "ep\030\014 \001(\0132\033.SC2APIProtocol.RequestStepH\000\022"
  "+\n\004data\030\r \001(\0132\033.SC2APIProtocol.RequestDa"
  "taH\000\022-\n\005query\030\016 \001(\0132\034.SC2APIProtocol.Req"
  "uestQueryH\000\0228\n\013save_replay\030\017 \001(\0132!.SC2AP"
  "IProtocol.RequestSaveReplayH\000\0228\n\013map_com"
  "mand\030\026 \001(\0132!.SC2APIProtocol.RequestMapCo"
  "mmandH\000\0228\n\013replay_info\030\020 \001(\0132!.SC2APIPro"
  "tocol.RequestReplayInfoH\000\022>\n\016available_m"
  "aps\030\021 \001(\0132$.SC2APIProtocol.RequestAvaila"
  "bleMapsH\000\0222\n\010save_map\030\022 \001(\0132\036.SC2APIProt"
  "ocol.RequestSaveMapH\000\022+\n\004ping\030\023 \001(\0132\033.SC"
  "2APIProtocol.RequestPingH\000\022-\n\005debug\030\024 \001("
  "\0132\034.SC2APIProtocol.RequestDebugH\000\022\n\n\002id\030"
  "a \001(\rB\t\n\007request\"\222\n\n\010Response\0229\n\013create_"
  "game\030\001 \001(\0132\".SC2APIProtocol.ResponseCrea"
  "teGameH\000\0225\n\tjoin_game\030\002 \001(\0132 .SC2APIProt"
  "ocol.ResponseJoinGameH\000\022;\n\014restart_game\030"
  "\003 \001(\0132#.SC2APIProtocol.ResponseRestartGa"
  "meH\000\022;\n\014start_replay\030\004 \001(\0132#.SC2APIProto"
  "col.ResponseStartReplayH\000\0227\n\nleave_game\030"
  "\005 \001(\0132!.SC2APIProtocol.ResponseLeaveGame"
  "H\000\0227\n\nquick_save\030\006 \001(\0132!.SC2APIProtocol."
  "ResponseQuickSaveH\000\0227\n\nquick_load\030\007 \001(\0132"
  "!.SC2APIProtocol.ResponseQuickLoadH\000\022,\n\004"
  "quit\030\010 \001(\0132\034.SC2APIProtocol.ResponseQuit"
  "H\000\0225\n\tgame_info\030\t \001(\0132 .SC2APIProtocol.R"
  "esponseGameInfoH\000\022:\n\013observation\030\n \001(\0132#"
  ".SC2APIProtocol.ResponseObservationH\000\0220\n"
  "\006action\030\013 \001(\0132\036.SC2APIProtocol.ResponseA"
  "ctionH\000\022<\n\nobs_action\030\025 \001(\0132&.SC2APIProt"
  "ocol.ResponseObserverActionH\000\022,\n\004step\030\014 "
  "\001(\0132\034.SC2APIProtocol.ResponseStepH\000\022,\n\004d"
  "ata\030\r \001(\0132\034.SC2APIProtocol.ResponseDataH"
  "\000\022.\n\005query\030\016 \001(\0132\035.SC2APIProtocol.Respon"
  "seQueryH\000\0229\n\013save_replay\030\017 \001(\0132\".SC2APIP"
  "rotocol.ResponseSaveReplayH\000\0229\n\013replay_i"
  "nfo\030\020 \001(\0132\".SC2APIProtocol.ResponseRepla"
  "yInfoH\000\022\?\n\016available_maps\030\021 \001(\0132%.SC2API"
  "Protocol.ResponseAvailableMapsH\000\0223\n\010save"
  "_map\030\022 \001(\0132\037.SC2APIProtocol.ResponseSave"
  "MapH\000\0229\n\013map_command\030\026 \001(\0132\".SC2APIProto"
  "col.ResponseMapCommandH\000\022,\n\004ping\030\023 \001(\0132\034"
  ".SC2APIProtocol.ResponsePingH\000\022.\n\005debug\030"
  "\024 \001(\0132\035.SC2APIProtocol.ResponseDebugH\000\022\n"
  "\n\002id\030a \001(\r\022\r\n\005error\030b \003(\t\022&\n\006status\030c \001("
  "\0162\026.SC2APIProtocol.StatusB\n\n\010response\"\326\001"
  "\n\021RequestCreateGame\022-\n\tlocal_map\030\001 \001(\0132\030"
  ".SC2APIProtocol.LocalMapH\000\022\034\n\022battlenet_"
  "map_name\030\002 \001(\tH\000\0221\n\014player_setup\030\003 \003(\0132\033"
  ".SC2APIProtocol.PlayerSetup\022\023\n\013disable_f"
  "og\030\004 \001(\010\022\023\n\013random_seed\030\005 \001(\r\022\020\n\010realtim"
  "e\030\006 \001(\010B\005\n\003Map\".\n\010LocalMap\022\020\n\010map_path\030\001"
  " \001(\t\022\020\n\010map_data\030\007 \001(\014\"\234\002\n\022ResponseCreat"
  "eGame\0227\n\005error\030\001 \001(\0162(.SC2APIProtocol.Re"
  "sponseCreateGame.Error\022\025\n\rerror_details\030"
  "\002 \001(\t\"\265\001\n\005Error\022\016\n\nMissingMap\020\001\022\022\n\016Inval"
  "idMapPath\020\002\022\022\n\016InvalidMapData\020\003\022\022\n\016Inval"
  "idMapName\020\004\022\024\n\020InvalidMapHandle\020\005\022\026\n\022Mis"
  "singPlayerSetup\020\006\022\026\n\022InvalidPlayerSetup\020"
  "\007\022\032\n\026MultiplayerUnsupported\020\010\"\262\002\n\017Reques"
  "tJoinGame\022$\n\004race\030\001 \001(\0162\024.SC2APIProtocol"
  ".RaceH\000\022\034\n\022observed_player_id\030\002 \001(\rH\000\0221\n"
  "\007options\030\003 \001(\0132 .SC2APIProtocol.Interfac"
  "eOptions\022-\n\014server_ports\030\004 \001(\0132\027.SC2APIP"
  "rotocol.PortSet\022-\n\014client_ports\030\005 \003(\0132\027."
  "SC2APIProtocol.PortSet\022\023\n\013shared_port\030\006 "
  "\001(\005\022\023\n\013player_name\030\007 \001(\t\022\017\n\007host_ip\030\010 \001("
  "\tB\017\n\rparticipation\"/\n\007PortSet\022\021\n\tgame_po"
  "rt\030\001 \001(\005\022\021\n\tbase_port\030\002 \001(\005\"\202\003\n\020Response"
  "JoinGame\022\021\n\tplayer_id\030\001 \001(\r\0225\n\005error\030\002 \001"
  "(\0162&.SC2APIProtocol.ResponseJoinGame.Err"
  "or\022\025\n\rerror_details\030\003 \001(\t\"\214\002\n\005Error\022\030\n\024M"
  "issingParticipation\020\001\022\033\n\027InvalidObserved"
  "PlayerId\020\002\022\022\n\016MissingOptions\020\003\022\020\n\014Missin"
  "gPorts\020\004\022\014\n\010GameFull\020\005\022\017\n\013LaunchError\020\006\022"
  "\026\n\022FeatureUnsupported\020\007\022\022\n\016NoSpaceForUse"
  "r\020\010\022\023\n\017MapDoesNotExist\020\t\022\021\n\rCannotOpenMa"
  "p\020\n\022\021\n\rChecksumError\020\013\022\020\n\014NetworkError\020\014"
  "\022\016\n\nOtherError\020\r\"\024\n\022RequestRestartGame\"\231"
  "\001\n\023ResponseRestartGame\0228\n\005error\030\001 \001(\0162)."
  "SC2APIProtocol.ResponseRestartGame.Error"
  "\022\025\n\rerror_details\030\002 \001(\t\022\027\n\017need_hard_res"
  "et\030\003 \001(\010\"\030\n\005Error\022\017\n\013LaunchError\020\001\"\353\001\n\022R"
  "equestStartReplay\022\025\n\013replay_path\030\001 \001(\tH\000"
  "\022\025\n\013replay_data\030\005 \001(\014H\000\022\020\n\010map_data\030\006 \001("
  "\014\022\032\n\022observed_player_id\030\002 \001(\005\0221\n\007options"
  "\030\003 \001(\0132 .SC2APIProtocol.InterfaceOptions"
  "\022\023\n\013disable_fog\030\004 \001(\010\022\020\n\010realtime\030\007 \001(\010\022"
  "\025\n\rrecord_replay\030\010 \001(\010B\010\n\006replay\"\207\002\n\023Res"
  "ponseStartReplay\0228\n\005error\030\001 \001(\0162).SC2API"
  "Protocol.ResponseStartReplay.Error\022\025\n\rer"
  "ror_details\030\002 \001(\t\"\236\001\n\005Error\022\021\n\rMissingRe"
  "play\020\001\022\025\n\021InvalidReplayPath\020\002\022\025\n\021Invalid"
  "ReplayData\020\003\022\022\n\016InvalidMapData\020\004\022\033\n\027Inva"
  "lidObservedPlayerId\020\005\022\022\n\016MissingOptions\020"
  "\006\022\017\n\013LaunchError\020\007\"(\n\021RequestMapCommand\022"
  "\023\n\013trigger_cmd\030\001 \001(\t\"\201\001\n\022ResponseMapComm"
  "and\0227\n\005error\030\001 \001(\0162(.SC2APIProtocol.Resp"
  "onseMapCommand.Error\022\025\n\rerror_details\030\002 "
  "\001(\t\"\033\n\005Error\022\022\n\016NoTriggerError\020\001\"\022\n\020Requ"
  "estLeaveGame\"\023\n\021ResponseLeaveGame\"\022\n\020Req"
  "uestQuickSave\"\023\n\021ResponseQuickSave\"\022\n\020Re"
  "questQuickLoad\"\023\n\021ResponseQuickLoad\"\r\n\013R"
  "equestQuit\"\016\n\014ResponseQuit\"\021\n\017RequestGam"
  "eInfo\"\340\001\n\020ResponseGameInfo\022\020\n\010map_name\030\001"
  " \001(\t\022\021\n\tmod_names\030\006 \003(\t\022\026\n\016local_map_pat"
  "h\030\002 \001(\t\022/\n\013player_info\030\003 \003(\0132\032.SC2APIPro"
  "tocol.PlayerInfo\022+\n\tstart_raw\030\004 \001(\0132\030.SC"
  "2APIProtocol.StartRaw\0221\n\007options\030\005 \001(\0132 "
  ".SC2APIProtocol.InterfaceOptions\"<\n\022Requ"
  "estObservation\022\023\n\013disable_fog\030\001 \001(\010\022\021\n\tg"
  "ame_loop\030\002 \001(\r\"\205\002\n\023ResponseObservation\022\'"
  "\n\007actions\030\001 \003(\0132\026.SC2APIProtocol.Action\022"
  "2\n\raction_errors\030\002 \003(\0132\033.SC2APIProtocol."
  "ActionError\0220\n\013observation\030\003 \001(\0132\033.SC2AP"
  "IProtocol.Observation\0223\n\rplayer_result\030\004"
  " \003(\0132\034.SC2APIProtocol.PlayerResult\022*\n\004ch"
  "at\030\005 \003(\0132\034.SC2APIProtocol.ChatReceived\"2"
  "\n\014ChatReceived\022\021\n\tplayer_id\030\001 \001(\r\022\017\n\007mes"
  "sage\030\002 \001(\t\"8\n\rRequestAction\022\'\n\007actions\030\001"
  " \003(\0132\026.SC2APIProtocol.Action\">\n\016Response"
  "Action\022,\n\006result\030\001 \003(\0162\034.SC2APIProtocol."
  "ActionResult\"H\n\025RequestObserverAction\022/\n"
  "\007actions\030\001 \003(\0132\036.SC2APIProtocol.Observer"
  "Action\"\030\n\026ResponseObserverAction\"\034\n\013Requ"
  "estStep\022\r\n\005count\030\001 \001(\r\"\'\n\014ResponseStep\022\027"
  "\n\017simulation_loop\030\001 \001(\r\"o\n\013RequestData\022\022"
  "\n\nability_id\030\001 \001(\010\022\024\n\014unit_type_id\030\002 \001(\010"
  "\022\022\n\nupgrade_id\030\003 \001(\010\022\017\n\007buff_id\030\004 \001(\010\022\021\n"
  "\teffect_id\030\005 \001(\010\"\360\001\n\014ResponseData\022.\n\tabi"
  "lities\030\001 \003(\0132\033.SC2APIProtocol.AbilityDat"
  "a\022+\n\005units\030\002 \003(\0132\034.SC2APIProtocol.UnitTy"
  "peData\022-\n\010upgrades\030\003 \003(\0132\033.SC2APIProtoco"
  "l.UpgradeData\022\'\n\005buffs\030\004 \003(\0132\030.SC2APIPro"
  "tocol.BuffData\022+\n\007effects\030\005 \003(\0132\032.SC2API"
  "Protocol.EffectData\"\023\n\021RequestSaveReplay"
  "\"\"\n\022ResponseSaveReplay\022\014\n\004data\030\001 \001(\014\"b\n\021"
  "RequestReplayInfo\022\025\n\013replay_path\030\001 \001(\tH\000"
  "\022\025\n\013replay_data\030\002 \001(\014H\000\022\025\n\rdownload_data"
  "\030\003 \001(\010B\010\n\006replay\"\237\001\n\017PlayerInfoExtra\022/\n\013"
  "player_info\030\001 \001(\0132\032.SC2APIProtocol.Playe"
  "rInfo\0223\n\rplayer_result\030\002 \001(\0132\034.SC2APIPro"
  "tocol.PlayerResult\022\022\n\nplayer_mmr\030\003 \001(\005\022\022"
  "\n\nplayer_apm\030\004 \001(\005\"\303\003\n\022ResponseReplayInf"
  "o\022\020\n\010map_name\030\001 \001(\t\022\026\n\016local_map_path\030\002 "
  "\001(\t\0224\n\013player_info\030\003 \003(\0132\037.SC2APIProtoco"
  "l.PlayerInfoExtra\022\033\n\023game_duration_loops"
  "\030\004 \001(\r\022\035\n\025game_duration_seconds\030\005 \001(\002\022\024\n"
  "\014game_version\030\006 \001(\t\022\024\n\014data_version\030\013 \001("
  "\t\022\022\n\ndata_build\030\007 \001(\r\022\022\n\nbase_build\030\010 \001("
  "\r\0227\n\005error\030\t \001(\0162(.SC2APIProtocol.Respon"
  "seReplayInfo.Error\022\025\n\rerror_details\030\n \001("
  "\t\"m\n\005Error\022\021\n\rMissingReplay\020\001\022\025\n\021Invalid"
  "ReplayPath\020\002\022\025\n\021InvalidReplayData\020\003\022\020\n\014P"
  "arsingError\020\004\022\021\n\rDownloadError\020\005\"\026\n\024Requ"
  "estAvailableMaps\"M\n\025ResponseAvailableMap"
  "s\022\027\n\017local_map_paths\030\001 \003(\t\022\033\n\023battlenet_"
  "map_names\030\002 \003(\t\"4\n\016RequestSaveMap\022\020\n\010map"
  "_path\030\001 \001(\t\022\020\n\010map_data\030\002 \001(\014\"d\n\017Respons"
  "eSaveMap\0224\n\005error\030\001 \001(\0162%.SC2APIProtocol"
  ".ResponseSaveMap.Error\"\033\n\005Error\022\022\n\016Inval"
  "idMapData\020\001\"\r\n\013RequestPing\"b\n\014ResponsePi"
  "ng\022\024\n\014game_version\030\001 \001(\t\022\024\n\014data_version"
  "\030\002 \001(\t\022\022\n\ndata_build\030\003 \001(\r\022\022\n\nbase_build"
  "\030\004 \001(\r\";\n\014RequestDebug\022+\n\005debug\030\001 \003(\0132\034."
  "SC2APIProtocol.DebugCommand\"\017\n\rResponseD"
  "ebug\"\313\001\n\013PlayerSetup\022(\n\004type\030\001 \001(\0162\032.SC2"
  "APIProtocol.PlayerType\022\"\n\004race\030\002 \001(\0162\024.S"
  "C2APIProtocol.Race\022.\n\ndifficulty\030\003 \001(\0162\032"
  ".SC2APIProtocol.Difficulty\022\023\n\013player_nam"
  "e\030\004 \001(\t\022)\n\010ai_build\030\005 \001(\0162\027.SC2APIProtoc"
  "ol.AIBuild\"\303\001\n\022SpatialCameraSetup\022+\n\nres"
  "olution\030\002 \001(\0132\027.SC2APIProtocol.Size2DI\0223"
  "\n\022minimap_resolution\030\003 \001(\0132\027.SC2APIProto"
  "col.Size2DI\022\r\n\005width\030\001 \001(\002\022\035\n\025crop_to_pl"
  "ayable_area\030\004 \001(\010\022\035\n\025allow_cheating_laye"
  "rs\030\005 \001(\010\"\257\002\n\020InterfaceOptions\022\013\n\003raw\030\001 \001"
  "(\010\022\r\n\005score\030\002 \001(\010\0229\n\rfeature_layer\030\003 \001(\013"
  "2\".SC2APIProtocol.SpatialCameraSetup\0222\n\006"
  "render\030\004 \001(\0132\".SC2APIProtocol.SpatialCam"
  "eraSetup\022\024\n\014show_cloaked\030\005 \001(\010\022\035\n\025show_b"
  "urrowed_shadows\030\t \001(\010\022\031\n\021show_placeholde"
  "rs\030\010 \001(\010\022\035\n\025raw_affects_selection\030\006 \001(\010\022"
  "!\n\031raw_crop_to_playable_area\030\007 \001(\010\"\222\002\n\nP"
  "layerInfo\022\021\n\tplayer_id\030\001 \001(\r\022(\n\004type\030\002 \001"
  "(\0162\032.SC2APIProtocol.PlayerType\022,\n\016race_r"
  "equested\030\003 \001(\0162\024.SC2APIProtocol.Race\022)\n\013"
  "race_actual\030\004 \001(\0162\024.SC2APIProtocol.Race\022"
  ".\n\ndifficulty\030\005 \001(\0162\032.SC2APIProtocol.Dif"
  "ficulty\022)\n\010ai_build\030\007 \001(\0162\027.SC2APIProtoc"
  "ol.AIBuild\022\023\n\013player_name\030\006 \001(\t\"\357\001\n\014Play"
  "erCommon\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010minerals\030"
  "\002 \001(\r\022\017\n\007vespene\030\003 \001(\r\022\020\n\010food_cap\030\004 \001(\r"
  "\022\021\n\tfood_used\030\005 \001(\r\022\021\n\tfood_army\030\006 \001(\r\022\024"
  "\n\014food_workers\030\007 \001(\r\022\031\n\021idle_worker_coun"
  "t\030\010 \001(\r\022\022\n\narmy_count\030\t \001(\r\022\027\n\017warp_gate"
  "_count\030\n \001(\r\022\023\n\013larva_count\030\013 \001(\r\"\266\003\n\013Ob"
  "servation\022\021\n\tgame_loop\030\t \001(\r\0223\n\rplayer_c"
  "ommon\030\001 \001(\0132\034.SC2APIProtocol.PlayerCommo"
  "n\022%\n\006alerts\030\n \003(\0162\025.SC2APIProtocol.Alert"
  "\0223\n\tabilities\030\003 \003(\0132 .SC2APIProtocol.Ava"
  "ilableAbility\022$\n\005score\030\004 \001(\0132\025.SC2APIPro"
  "tocol.Score\0220\n\010raw_data\030\005 \001(\0132\036.SC2APIPr"
  "otocol.ObservationRaw\022C\n\022feature_layer_d"
  "ata\030\006 \001(\0132\'.SC2APIProtocol.ObservationFe"
  "atureLayer\0226\n\013render_data\030\007 \001(\0132!.SC2API"
  "Protocol.ObservationRender\022.\n\007ui_data\030\010 "
  "\001(\0132\035.SC2APIProtocol.ObservationUI\"\233\002\n\006A"
  "ction\022-\n\naction_raw\030\001 \001(\0132\031.SC2APIProtoc"
  "ol.ActionRaw\022;\n\024action_feature_layer\030\002 \001"
  "(\0132\035.SC2APIProtocol.ActionSpatial\0224\n\ract"
  "ion_render\030\003 \001(\0132\035.SC2APIProtocol.Action"
  "Spatial\022+\n\taction_ui\030\004 \001(\0132\030.SC2APIProto"
  "col.ActionUI\022/\n\013action_chat\030\006 \001(\0132\032.SC2A"
  "PIProtocol.ActionChat\022\021\n\tgame_loop\030\007 \001(\r"
  "\"v\n\nActionChat\0223\n\007channel\030\001 \001(\0162\".SC2API"
  "Protocol.ActionChat.Channel\022\017\n\007message\030\002"
  " \001(\t\"\"\n\007Channel\022\r\n\tBroadcast\020\001\022\010\n\004Team\020\002"
  "\"a\n\013ActionError\022\020\n\010unit_tag\030\001 \001(\004\022\022\n\nabi"
  "lity_id\030\002 \001(\004\022,\n\006result\030\003 \001(\0162\034.SC2APIPr"
  "otocol.ActionResult\"\314\002\n\016ObserverAction\022M"
  "\n\022player_perspective\030\001 \001(\0132/.SC2APIProto"
  "col.ActionObserverPlayerPerspectiveH\000\022\?\n"
  "\013camera_move\030\002 \001(\0132(.SC2APIProtocol.Acti"
  "onObserverCameraMoveH\000\022P\n\024camera_follow_"
  "player\030\003 \001(\01320.SC2APIProtocol.ActionObse"
  "rverCameraFollowPlayerH\000\022N\n\023camera_follo"
  "w_units\030\004 \001(\0132/.SC2APIProtocol.ActionObs"
  "erverCameraFollowUnitsH\000B\010\n\006action\"4\n\037Ac"
  "tionObserverPlayerPerspective\022\021\n\tplayer_"
  "id\030\001 \001(\r\"X\n\030ActionObserverCameraMove\022*\n\t"
  "world_pos\030\001 \001(\0132\027.SC2APIProtocol.Point2D"
  "\022\020\n\010distance\030\002 \001(\002\"5\n ActionObserverCame"
  "raFollowPlayer\022\021\n\tplayer_id\030\001 \001(\r\"4\n\037Act"
  "ionObserverCameraFollowUnits\022\021\n\tunit_tag"
  "s\030\001 \003(\004\"I\n\014PlayerResult\022\021\n\tplayer_id\030\001 \001"
  "(\r\022&\n\006result\030\002 \001(\0162\026.SC2APIProtocol.Resu"
  "lt*c\n\006Status\022\014\n\010launched\020\001\022\r\n\tinit_game\020"
  "\002\022\013\n\007in_game\020\003\022\r\n\tin_replay\020\004\022\t\n\005ended\020\005"
  "\022\010\n\004quit\020\006\022\013\n\007unknown\020c*\226\001\n\nDifficulty\022\014"
  "\n\010VeryEasy\020\001\022\010\n\004Easy\020\002\022\n\n\006Medium\020\003\022\016\n\nMe"
  "diumHard\020\004\022\010\n\004Hard\020\005\022\n\n\006Harder\020\006\022\014\n\010Very"
  "Hard\020\007\022\017\n\013CheatVision\020\010\022\016\n\nCheatMoney\020\t\022"
  "\017\n\013CheatInsane\020\n*9\n\nPlayerType\022\017\n\013Partic"
  "ipant\020\001\022\014\n\010Computer\020\002\022\014\n\010Observer\020\003*O\n\007A"
  "IBuild\022\017\n\013RandomBuild\020\001\022\010\n\004Rush\020\002\022\n\n\006Tim"
  "ing\020\003\022\t\n\005Power\020\004\022\t\n\005Macro\020\005\022\007\n\003Air\020\006*\333\003\n"
  "\005Alert\022\016\n\nAlertError\020\003\022\021\n\rAddOnComplete\020"
  "\004\022\024\n\020BuildingComplete\020\005\022\027\n\023BuildingUnder"
  "Attack\020\006\022\020\n\014LarvaHatched\020\007\022\021\n\rMergeCompl"
  "ete\020\010\022\025\n\021MineralsExhausted\020\t\022\021\n\rMorphCom"
  "plete\020\n\022\026\n\022MothershipComplete\020\013\022\017\n\013MULEE"
  "xpired\020\014\022\031\n\025NuclearLaunchDetected\020\001\022\020\n\014N"
  "ukeComplete\020\r\022\025\n\021NydusWormDetected\020\002\022\024\n\020"
  "ResearchComplete\020\016\022\016\n\nTrainError\020\017\022\025\n\021Tr"
  "ainUnitComplete\020\020\022\027\n\023TrainWorkerComplete"
  "\020\021\022\032\n\026TransformationComplete\020\022\022\023\n\017UnitUn"
  "derAttack\020\023\022\023\n\017UpgradeComplete\020\024\022\024\n\020Vesp"
  "eneExhausted\020\025\022\022\n\016WarpInComplete\020\026*9\n\006Re"
  "sult\022\013\n\007Victory\020\001\022\n\n\006Defeat\020\002\022\007\n\003Tie\020\003\022\r"
  "\n\tUndecided\020\004"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_s2clientprotocol_2fsc2api_2eproto_deps[9] = {
  &::descriptor_table_s2clientprotocol_2fcommon_2eproto,
  &::descriptor_table_s2clientprotocol_2fdata_2eproto,
  &::descriptor_table_s2clientprotocol_2fdebug_2eproto,
  &::descriptor_table_s2clientprotocol_2ferror_2eproto,
  &::descriptor_table_s2clientprotocol_2fquery_2eproto,
  &::descriptor_table_s2clientprotocol_2fraw_2eproto,
  &::descriptor_table_s2clientprotocol_2fscore_2eproto,
  &::descriptor_table_s2clientprotocol_2fspatial_2eproto,
  &::descriptor_table_s2clientprotocol_2fui_2eproto,
};
static ::_pbi::once_flag descriptor_table_s2clientprotocol_2fsc2api_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2clientprotocol_2fsc2api_2eproto = {
    false, false, 11413, descriptor_table_protodef_s2clientprotocol_2fsc2api_2eproto,
    "s2clientprotocol/sc2api.proto",
    &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once, descriptor_table_s2clientprotocol_2fsc2api_2eproto_deps, 9, 63,
    schemas, file_default_instances, TableStruct_s2clientprotocol_2fsc2api_2eproto::offsets,
    file_level_metadata_s2clientprotocol_2fsc2api_2eproto, file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto,
    file_level_service_descriptors_s2clientprotocol_2fsc2api_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter() {
  return &descriptor_table_s2clientprotocol_2fsc2api_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2clientprotocol_2fsc2api_2eproto(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
namespace SC2APIProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCreateGame_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[0];
}
bool ResponseCreateGame_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseCreateGame_Error ResponseCreateGame::MissingMap;
constexpr ResponseCreateGame_Error ResponseCreateGame::InvalidMapPath;
constexpr ResponseCreateGame_Error ResponseCreateGame::InvalidMapData;
constexpr ResponseCreateGame_Error ResponseCreateGame::InvalidMapName;
constexpr ResponseCreateGame_Error ResponseCreateGame::InvalidMapHandle;
constexpr ResponseCreateGame_Error ResponseCreateGame::MissingPlayerSetup;
constexpr ResponseCreateGame_Error ResponseCreateGame::InvalidPlayerSetup;
constexpr ResponseCreateGame_Error ResponseCreateGame::MultiplayerUnsupported;
constexpr ResponseCreateGame_Error ResponseCreateGame::Error_MIN;
constexpr ResponseCreateGame_Error ResponseCreateGame::Error_MAX;
constexpr int ResponseCreateGame::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseJoinGame_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[1];
}
bool ResponseJoinGame_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseJoinGame_Error ResponseJoinGame::MissingParticipation;
constexpr ResponseJoinGame_Error ResponseJoinGame::InvalidObservedPlayerId;
constexpr ResponseJoinGame_Error ResponseJoinGame::MissingOptions;
constexpr ResponseJoinGame_Error ResponseJoinGame::MissingPorts;
constexpr ResponseJoinGame_Error ResponseJoinGame::GameFull;
constexpr ResponseJoinGame_Error ResponseJoinGame::LaunchError;
constexpr ResponseJoinGame_Error ResponseJoinGame::FeatureUnsupported;
constexpr ResponseJoinGame_Error ResponseJoinGame::NoSpaceForUser;
constexpr ResponseJoinGame_Error ResponseJoinGame::MapDoesNotExist;
constexpr ResponseJoinGame_Error ResponseJoinGame::CannotOpenMap;
constexpr ResponseJoinGame_Error ResponseJoinGame::ChecksumError;
constexpr ResponseJoinGame_Error ResponseJoinGame::NetworkError;
constexpr ResponseJoinGame_Error ResponseJoinGame::OtherError;
constexpr ResponseJoinGame_Error ResponseJoinGame::Error_MIN;
constexpr ResponseJoinGame_Error ResponseJoinGame::Error_MAX;
constexpr int ResponseJoinGame::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseRestartGame_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[2];
}
bool ResponseRestartGame_Error_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseRestartGame_Error ResponseRestartGame::LaunchError;
constexpr ResponseRestartGame_Error ResponseRestartGame::Error_MIN;
constexpr ResponseRestartGame_Error ResponseRestartGame::Error_MAX;
constexpr int ResponseRestartGame::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStartReplay_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[3];
}
bool ResponseStartReplay_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseStartReplay_Error ResponseStartReplay::MissingReplay;
constexpr ResponseStartReplay_Error ResponseStartReplay::InvalidReplayPath;
constexpr ResponseStartReplay_Error ResponseStartReplay::InvalidReplayData;
constexpr ResponseStartReplay_Error ResponseStartReplay::InvalidMapData;
constexpr ResponseStartReplay_Error ResponseStartReplay::InvalidObservedPlayerId;
constexpr ResponseStartReplay_Error ResponseStartReplay::MissingOptions;
constexpr ResponseStartReplay_Error ResponseStartReplay::LaunchError;
constexpr ResponseStartReplay_Error ResponseStartReplay::Error_MIN;
constexpr ResponseStartReplay_Error ResponseStartReplay::Error_MAX;
constexpr int ResponseStartReplay::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseMapCommand_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[4];
}
bool ResponseMapCommand_Error_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseMapCommand_Error ResponseMapCommand::NoTriggerError;
constexpr ResponseMapCommand_Error ResponseMapCommand::Error_MIN;
constexpr ResponseMapCommand_Error ResponseMapCommand::Error_MAX;
constexpr int ResponseMapCommand::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseReplayInfo_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[5];
}
bool ResponseReplayInfo_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseReplayInfo_Error ResponseReplayInfo::MissingReplay;
constexpr ResponseReplayInfo_Error ResponseReplayInfo::InvalidReplayPath;
constexpr ResponseReplayInfo_Error ResponseReplayInfo::InvalidReplayData;
constexpr ResponseReplayInfo_Error ResponseReplayInfo::ParsingError;
constexpr ResponseReplayInfo_Error ResponseReplayInfo::DownloadError;
constexpr ResponseReplayInfo_Error ResponseReplayInfo::Error_MIN;
constexpr ResponseReplayInfo_Error ResponseReplayInfo::Error_MAX;
constexpr int ResponseReplayInfo::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseSaveMap_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[6];
}
bool ResponseSaveMap_Error_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseSaveMap_Error ResponseSaveMap::InvalidMapData;
constexpr ResponseSaveMap_Error ResponseSaveMap::Error_MIN;
constexpr ResponseSaveMap_Error ResponseSaveMap::Error_MAX;
constexpr int ResponseSaveMap::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionChat_Channel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[7];
}
bool ActionChat_Channel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionChat_Channel ActionChat::Broadcast;
constexpr ActionChat_Channel ActionChat::Team;
constexpr ActionChat_Channel ActionChat::Channel_MIN;
constexpr ActionChat_Channel ActionChat::Channel_MAX;
constexpr int ActionChat::Channel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[8];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difficulty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[9];
}
bool Difficulty_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[10];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIBuild_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[11];
}
bool AIBuild_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alert_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[12];
}
bool Alert_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fsc2api_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fsc2api_2eproto[13];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._impl_._has_bits_);
  static const ::SC2APIProtocol::RequestCreateGame& create_game(const Request* msg);
  static const ::SC2APIProtocol::RequestJoinGame& join_game(const Request* msg);
  static const ::SC2APIProtocol::RequestRestartGame& restart_game(const Request* msg);
  static const ::SC2APIProtocol::RequestStartReplay& start_replay(const Request* msg);
  static const ::SC2APIProtocol::RequestLeaveGame& leave_game(const Request* msg);
  static const ::SC2APIProtocol::RequestQuickSave& quick_save(const Request* msg);
  static const ::SC2APIProtocol::RequestQuickLoad& quick_load(const Request* msg);
  static const ::SC2APIProtocol::RequestQuit& quit(const Request* msg);
  static const ::SC2APIProtocol::RequestGameInfo& game_info(const Request* msg);
  static const ::SC2APIProtocol::RequestObservation& observation(const Request* msg);
  static const ::SC2APIProtocol::RequestAction& action(const Request* msg);
  static const ::SC2APIProtocol::RequestObserverAction& obs_action(const Request* msg);
  static const ::SC2APIProtocol::RequestStep& step(const Request* msg);
  static const ::SC2APIProtocol::RequestData& data(const Request* msg);
  static const ::SC2APIProtocol::RequestQuery& query(const Request* msg);
  static const ::SC2APIProtocol::RequestSaveReplay& save_replay(const Request* msg);
  static const ::SC2APIProtocol::RequestMapCommand& map_command(const Request* msg);
  static const ::SC2APIProtocol::RequestReplayInfo& replay_info(const Request* msg);
  static const ::SC2APIProtocol::RequestAvailableMaps& available_maps(const Request* msg);
  static const ::SC2APIProtocol::RequestSaveMap& save_map(const Request* msg);
  static const ::SC2APIProtocol::RequestPing& ping(const Request* msg);
  static const ::SC2APIProtocol::RequestDebug& debug(const Request* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SC2APIProtocol::RequestCreateGame&
Request::_Internal::create_game(const Request* msg) {
  return *msg->_impl_.request_.create_game_;
}
const ::SC2APIProtocol::RequestJoinGame&
Request::_Internal::join_game(const Request* msg) {
  return *msg->_impl_.request_.join_game_;
}
const ::SC2APIProtocol::RequestRestartGame&
Request::_Internal::restart_game(const Request* msg) {
  return *msg->_impl_.request_.restart_game_;
}
const ::SC2APIProtocol::RequestStartReplay&
Request::_Internal::start_replay(const Request* msg) {
  return *msg->_impl_.request_.start_replay_;
}
const ::SC2APIProtocol::RequestLeaveGame&
Request::_Internal::leave_game(const Request* msg) {
  return *msg->_impl_.request_.leave_game_;
}
const ::SC2APIProtocol::RequestQuickSave&
Request::_Internal::quick_save(const Request* msg) {
  return *msg->_impl_.request_.quick_save_;
}
const ::SC2APIProtocol::RequestQuickLoad&
Request::_Internal::quick_load(const Request* msg) {
  return *msg->_impl_.request_.quick_load_;
}
const ::SC2APIProtocol::RequestQuit&
Request::_Internal::quit(const Request* msg) {
  return *msg->_impl_.request_.quit_;
}
const ::SC2APIProtocol::RequestGameInfo&
Request::_Internal::game_info(const Request* msg) {
  return *msg->_impl_.request_.game_info_;
}
const ::SC2APIProtocol::RequestObservation&
Request::_Internal::observation(const Request* msg) {
  return *msg->_impl_.request_.observation_;
}
const ::SC2APIProtocol::RequestAction&
Request::_Internal::action(const Request* msg) {
  return *msg->_impl_.request_.action_;
}
const ::SC2APIProtocol::RequestObserverAction&
Request::_Internal::obs_action(const Request* msg) {
  return *msg->_impl_.request_.obs_action_;
}
const ::SC2APIProtocol::RequestStep&
Request::_Internal::step(const Request* msg) {
  return *msg->_impl_.request_.step_;
}
const ::SC2APIProtocol::RequestData&
Request::_Internal::data(const Request* msg) {
  return *msg->_impl_.request_.data_;
}
const ::SC2APIProtocol::RequestQuery&
Request::_Internal::query(const Request* msg) {
  return *msg->_impl_.request_.query_;
}
const ::SC2APIProtocol::RequestSaveReplay&
Request::_Internal::save_replay(const Request* msg) {
  return *msg->_impl_.request_.save_replay_;
}
const ::SC2APIProtocol::RequestMapCommand&
Request::_Internal::map_command(const Request* msg) {
  return *msg->_impl_.request_.map_command_;
}
const ::SC2APIProtocol::RequestReplayInfo&
Request::_Internal::replay_info(const Request* msg) {
  return *msg->_impl_.request_.replay_info_;
}
const ::SC2APIProtocol::RequestAvailableMaps&
Request::_Internal::available_maps(const Request* msg) {
  return *msg->_impl_.request_.available_maps_;
}
const ::SC2APIProtocol::RequestSaveMap&
Request::_Internal::save_map(const Request* msg) {
  return *msg->_impl_.request_.save_map_;
}
const ::SC2APIProtocol::RequestPing&
Request::_Internal::ping(const Request* msg) {
  return *msg->_impl_.request_.ping_;
}
const ::SC2APIProtocol::RequestDebug&
Request::_Internal::debug(const Request* msg) {
  return *msg->_impl_.request_.debug_;
}
void Request::set_allocated_create_game(::SC2APIProtocol::RequestCreateGame* create_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (create_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_game);
    if (message_arena != submessage_arena) {
      create_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_game, submessage_arena);
    }
    set_has_create_game();
    _impl_.request_.create_game_ = create_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.create_game)
}
void Request::set_allocated_join_game(::SC2APIProtocol::RequestJoinGame* join_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (join_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(join_game);
    if (message_arena != submessage_arena) {
      join_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_game, submessage_arena);
    }
    set_has_join_game();
    _impl_.request_.join_game_ = join_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.join_game)
}
void Request::set_allocated_restart_game(::SC2APIProtocol::RequestRestartGame* restart_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (restart_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(restart_game);
    if (message_arena != submessage_arena) {
      restart_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_game, submessage_arena);
    }
    set_has_restart_game();
    _impl_.request_.restart_game_ = restart_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.restart_game)
}
void Request::set_allocated_start_replay(::SC2APIProtocol::RequestStartReplay* start_replay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (start_replay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_replay);
    if (message_arena != submessage_arena) {
      start_replay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_replay, submessage_arena);
    }
    set_has_start_replay();
    _impl_.request_.start_replay_ = start_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.start_replay)
}
void Request::set_allocated_leave_game(::SC2APIProtocol::RequestLeaveGame* leave_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (leave_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leave_game);
    if (message_arena != submessage_arena) {
      leave_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave_game, submessage_arena);
    }
    set_has_leave_game();
    _impl_.request_.leave_game_ = leave_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.leave_game)
}
void Request::set_allocated_quick_save(::SC2APIProtocol::RequestQuickSave* quick_save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (quick_save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quick_save);
    if (message_arena != submessage_arena) {
      quick_save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quick_save, submessage_arena);
    }
    set_has_quick_save();
    _impl_.request_.quick_save_ = quick_save;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quick_save)
}
void Request::set_allocated_quick_load(::SC2APIProtocol::RequestQuickLoad* quick_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (quick_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quick_load);
    if (message_arena != submessage_arena) {
      quick_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quick_load, submessage_arena);
    }
    set_has_quick_load();
    _impl_.request_.quick_load_ = quick_load;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quick_load)
}
void Request::set_allocated_quit(::SC2APIProtocol::RequestQuit* quit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (quit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quit);
    if (message_arena != submessage_arena) {
      quit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quit, submessage_arena);
    }
    set_has_quit();
    _impl_.request_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quit)
}
void Request::set_allocated_game_info(::SC2APIProtocol::RequestGameInfo* game_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (game_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_info);
    if (message_arena != submessage_arena) {
      game_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_info, submessage_arena);
    }
    set_has_game_info();
    _impl_.request_.game_info_ = game_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.game_info)
}
void Request::set_allocated_observation(::SC2APIProtocol::RequestObservation* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(observation);
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    set_has_observation();
    _impl_.request_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.observation)
}
void Request::set_allocated_action(::SC2APIProtocol::RequestAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    _impl_.request_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.action)
}
void Request::set_allocated_obs_action(::SC2APIProtocol::RequestObserverAction* obs_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (obs_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obs_action);
    if (message_arena != submessage_arena) {
      obs_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_action, submessage_arena);
    }
    set_has_obs_action();
    _impl_.request_.obs_action_ = obs_action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.obs_action)
}
void Request::set_allocated_step(::SC2APIProtocol::RequestStep* step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(step);
    if (message_arena != submessage_arena) {
      step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step, submessage_arena);
    }
    set_has_step();
    _impl_.request_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.step)
}
void Request::set_allocated_data(::SC2APIProtocol::RequestData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.request_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.data)
}
void Request::set_allocated_query(::SC2APIProtocol::RequestQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query));
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.request_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.query)
}
void Request::clear_query() {
  if (_internal_has_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.query_;
    }
    clear_has_request();
  }
}
void Request::set_allocated_save_replay(::SC2APIProtocol::RequestSaveReplay* save_replay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (save_replay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_replay);
    if (message_arena != submessage_arena) {
      save_replay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_replay, submessage_arena);
    }
    set_has_save_replay();
    _impl_.request_.save_replay_ = save_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.save_replay)
}
void Request::set_allocated_map_command(::SC2APIProtocol::RequestMapCommand* map_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (map_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_command);
    if (message_arena != submessage_arena) {
      map_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_command, submessage_arena);
    }
    set_has_map_command();
    _impl_.request_.map_command_ = map_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.map_command)
}
void Request::set_allocated_replay_info(::SC2APIProtocol::RequestReplayInfo* replay_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (replay_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replay_info);
    if (message_arena != submessage_arena) {
      replay_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_info, submessage_arena);
    }
    set_has_replay_info();
    _impl_.request_.replay_info_ = replay_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.replay_info)
}
void Request::set_allocated_available_maps(::SC2APIProtocol::RequestAvailableMaps* available_maps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (available_maps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(available_maps);
    if (message_arena != submessage_arena) {
      available_maps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, available_maps, submessage_arena);
    }
    set_has_available_maps();
    _impl_.request_.available_maps_ = available_maps;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.available_maps)
}
void Request::set_allocated_save_map(::SC2APIProtocol::RequestSaveMap* save_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (save_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_map);
    if (message_arena != submessage_arena) {
      save_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_map, submessage_arena);
    }
    set_has_save_map();
    _impl_.request_.save_map_ = save_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.save_map)
}
void Request::set_allocated_ping(::SC2APIProtocol::RequestPing* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.request_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.ping)
}
void Request::set_allocated_debug(::SC2APIProtocol::RequestDebug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    set_has_debug();
    _impl_.request_.debug_ = debug;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.debug)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  clear_has_request();
  switch (from.request_case()) {
    case kCreateGame: {
      _this->_internal_mutable_create_game()->::SC2APIProtocol::RequestCreateGame::MergeFrom(
          from._internal_create_game());
      break;
    }
    case kJoinGame: {
      _this->_internal_mutable_join_game()->::SC2APIProtocol::RequestJoinGame::MergeFrom(
          from._internal_join_game());
      break;
    }
    case kRestartGame: {
      _this->_internal_mutable_restart_game()->::SC2APIProtocol::RequestRestartGame::MergeFrom(
          from._internal_restart_game());
      break;
    }
    case kStartReplay: {
      _this->_internal_mutable_start_replay()->::SC2APIProtocol::RequestStartReplay::MergeFrom(
          from._internal_start_replay());
      break;
    }
    case kLeaveGame: {
      _this->_internal_mutable_leave_game()->::SC2APIProtocol::RequestLeaveGame::MergeFrom(
          from._internal_leave_game());
      break;
    }
    case kQuickSave: {
      _this->_internal_mutable_quick_save()->::SC2APIProtocol::RequestQuickSave::MergeFrom(
          from._internal_quick_save());
      break;
    }
    case kQuickLoad: {
      _this->_internal_mutable_quick_load()->::SC2APIProtocol::RequestQuickLoad::MergeFrom(
          from._internal_quick_load());
      break;
    }
    case kQuit: {
      _this->_internal_mutable_quit()->::SC2APIProtocol::RequestQuit::MergeFrom(
          from._internal_quit());
      break;
    }
    case kGameInfo: {
      _this->_internal_mutable_game_info()->::SC2APIProtocol::RequestGameInfo::MergeFrom(
          from._internal_game_info());
      break;
    }
    case kObservation: {
      _this->_internal_mutable_observation()->::SC2APIProtocol::RequestObservation::MergeFrom(
          from._internal_observation());
      break;
    }
    case kAction: {
      _this->_internal_mutable_action()->::SC2APIProtocol::RequestAction::MergeFrom(
          from._internal_action());
      break;
    }
    case kObsAction: {
      _this->_internal_mutable_obs_action()->::SC2APIProtocol::RequestObserverAction::MergeFrom(
          from._internal_obs_action());
      break;
    }
    case kStep: {
      _this->_internal_mutable_step()->::SC2APIProtocol::RequestStep::MergeFrom(
          from._internal_step());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::SC2APIProtocol::RequestData::MergeFrom(
          from._internal_data());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::SC2APIProtocol::RequestQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kSaveReplay: {
      _this->_internal_mutable_save_replay()->::SC2APIProtocol::RequestSaveReplay::MergeFrom(
          from._internal_save_replay());
      break;
    }
    case kMapCommand: {
      _this->_internal_mutable_map_command()->::SC2APIProtocol::RequestMapCommand::MergeFrom(
          from._internal_map_command());
      break;
    }
    case kReplayInfo: {
      _this->_internal_mutable_replay_info()->::SC2APIProtocol::RequestReplayInfo::MergeFrom(
          from._internal_replay_info());
      break;
    }
    case kAvailableMaps: {
      _this->_internal_mutable_available_maps()->::SC2APIProtocol::RequestAvailableMaps::MergeFrom(
          from._internal_available_maps());
      break;
    }
    case kSaveMap: {
      _this->_internal_mutable_save_map()->::SC2APIProtocol::RequestSaveMap::MergeFrom(
          from._internal_save_map());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::SC2APIProtocol::RequestPing::MergeFrom(
          from._internal_ping());
      break;
    }
    case kDebug: {
      _this->_internal_mutable_debug()->::SC2APIProtocol::RequestDebug::MergeFrom(
          from._internal_debug());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.Request)
  switch (request_case()) {
    case kCreateGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.create_game_;
      }
      break;
    }
    case kJoinGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.join_game_;
      }
      break;
    }
    case kRestartGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.restart_game_;
      }
      break;
    }
    case kStartReplay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.start_replay_;
      }
      break;
    }
    case kLeaveGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.leave_game_;
      }
      break;
    }
    case kQuickSave: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.quick_save_;
      }
      break;
    }
    case kQuickLoad: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.quick_load_;
      }
      break;
    }
    case kQuit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.quit_;
      }
      break;
    }
    case kGameInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.game_info_;
      }
      break;
    }
    case kObservation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.observation_;
      }
      break;
    }
    case kAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.action_;
      }
      break;
    }
    case kObsAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.obs_action_;
      }
      break;
    }
    case kStep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.step_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.data_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.query_;
      }
      break;
    }
    case kSaveReplay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.save_replay_;
      }
      break;
    }
    case kMapCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.map_command_;
      }
      break;
    }
    case kReplayInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.replay_info_;
      }
      break;
    }
    case kAvailableMaps: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.available_maps_;
      }
      break;
    }
    case kSaveMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.save_map_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.ping_;
      }
      break;
    }
    case kDebug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.debug_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  clear_request();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.RequestCreateGame create_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestJoinGame join_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestRestartGame restart_game = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestStartReplay start_replay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_replay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestLeaveGame leave_game = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestQuickSave quick_save = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quick_save(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestQuickLoad quick_load = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_quick_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestQuit quit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_quit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestGameInfo game_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestObservation observation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestAction action = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestStep step = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestData data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestQuery query = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestSaveReplay save_replay = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_replay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestReplayInfo replay_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_available_maps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestSaveMap save_map = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestPing ping = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestDebug debug = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestObserverAction obs_action = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.RequestMapCommand map_command = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (request_case()) {
    case kCreateGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::create_game(this),
          _Internal::create_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kJoinGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::join_game(this),
          _Internal::join_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kRestartGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::restart_game(this),
          _Internal::restart_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kStartReplay: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::start_replay(this),
          _Internal::start_replay(this).GetCachedSize(), target, stream);
      break;
    }
    case kLeaveGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::leave_game(this),
          _Internal::leave_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuickSave: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::quick_save(this),
          _Internal::quick_save(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuickLoad: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::quick_load(this),
          _Internal::quick_load(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::quit(this),
          _Internal::quit(this).GetCachedSize(), target, stream);
      break;
    }
    case kGameInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::game_info(this),
          _Internal::game_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kObservation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::observation(this),
          _Internal::observation(this).GetCachedSize(), target, stream);
      break;
    }
    case kAction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::action(this),
          _Internal::action(this).GetCachedSize(), target, stream);
      break;
    }
    case kStep: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::step(this),
          _Internal::step(this).GetCachedSize(), target, stream);
      break;
    }
    case kData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::data(this),
          _Internal::data(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuery: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::query(this),
          _Internal::query(this).GetCachedSize(), target, stream);
      break;
    }
    case kSaveReplay: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::save_replay(this),
          _Internal::save_replay(this).GetCachedSize(), target, stream);
      break;
    }
    case kReplayInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::replay_info(this),
          _Internal::replay_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kAvailableMaps: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::available_maps(this),
          _Internal::available_maps(this).GetCachedSize(), target, stream);
      break;
    }
    case kSaveMap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::save_map(this),
          _Internal::save_map(this).GetCachedSize(), target, stream);
      break;
    }
    case kPing: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::ping(this),
          _Internal::ping(this).GetCachedSize(), target, stream);
      break;
    }
    case kDebug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::debug(this),
          _Internal::debug(this).GetCachedSize(), target, stream);
      break;
    }
    case kObsAction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::obs_action(this),
          _Internal::obs_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kMapCommand: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::map_command(this),
          _Internal::map_command(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 97;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(97, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 97;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  switch (request_case()) {
    // .SC2APIProtocol.RequestCreateGame create_game = 1;
    case kCreateGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.create_game_);
      break;
    }
    // .SC2APIProtocol.RequestJoinGame join_game = 2;
    case kJoinGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.join_game_);
      break;
    }
    // .SC2APIProtocol.RequestRestartGame restart_game = 3;
    case kRestartGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.restart_game_);
      break;
    }
    // .SC2APIProtocol.RequestStartReplay start_replay = 4;
    case kStartReplay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.start_replay_);
      break;
    }
    // .SC2APIProtocol.RequestLeaveGame leave_game = 5;
    case kLeaveGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.leave_game_);
      break;
    }
    // .SC2APIProtocol.RequestQuickSave quick_save = 6;
    case kQuickSave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.quick_save_);
      break;
    }
    // .SC2APIProtocol.RequestQuickLoad quick_load = 7;
    case kQuickLoad: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.quick_load_);
      break;
    }
    // .SC2APIProtocol.RequestQuit quit = 8;
    case kQuit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.quit_);
      break;
    }
    // .SC2APIProtocol.RequestGameInfo game_info = 9;
    case kGameInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.game_info_);
      break;
    }
    // .SC2APIProtocol.RequestObservation observation = 10;
    case kObservation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.observation_);
      break;
    }
    // .SC2APIProtocol.RequestAction action = 11;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.action_);
      break;
    }
    // .SC2APIProtocol.RequestObserverAction obs_action = 21;
    case kObsAction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.obs_action_);
      break;
    }
    // .SC2APIProtocol.RequestStep step = 12;
    case kStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.step_);
      break;
    }
    // .SC2APIProtocol.RequestData data = 13;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.data_);
      break;
    }
    // .SC2APIProtocol.RequestQuery query = 14;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.query_);
      break;
    }
    // .SC2APIProtocol.RequestSaveReplay save_replay = 15;
    case kSaveReplay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.save_replay_);
      break;
    }
    // .SC2APIProtocol.RequestMapCommand map_command = 22;
    case kMapCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.map_command_);
      break;
    }
    // .SC2APIProtocol.RequestReplayInfo replay_info = 16;
    case kReplayInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.replay_info_);
      break;
    }
    // .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
    case kAvailableMaps: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.available_maps_);
      break;
    }
    // .SC2APIProtocol.RequestSaveMap save_map = 18;
    case kSaveMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.save_map_);
      break;
    }
    // .SC2APIProtocol.RequestPing ping = 19;
    case kPing: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.ping_);
      break;
    }
    // .SC2APIProtocol.RequestDebug debug = 20;
    case kDebug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.debug_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  switch (from.request_case()) {
    case kCreateGame: {
      _this->_internal_mutable_create_game()->::SC2APIProtocol::RequestCreateGame::MergeFrom(
          from._internal_create_game());
      break;
    }
    case kJoinGame: {
      _this->_internal_mutable_join_game()->::SC2APIProtocol::RequestJoinGame::MergeFrom(
          from._internal_join_game());
      break;
    }
    case kRestartGame: {
      _this->_internal_mutable_restart_game()->::SC2APIProtocol::RequestRestartGame::MergeFrom(
          from._internal_restart_game());
      break;
    }
    case kStartReplay: {
      _this->_internal_mutable_start_replay()->::SC2APIProtocol::RequestStartReplay::MergeFrom(
          from._internal_start_replay());
      break;
    }
    case kLeaveGame: {
      _this->_internal_mutable_leave_game()->::SC2APIProtocol::RequestLeaveGame::MergeFrom(
          from._internal_leave_game());
      break;
    }
    case kQuickSave: {
      _this->_internal_mutable_quick_save()->::SC2APIProtocol::RequestQuickSave::MergeFrom(
          from._internal_quick_save());
      break;
    }
    case kQuickLoad: {
      _this->_internal_mutable_quick_load()->::SC2APIProtocol::RequestQuickLoad::MergeFrom(
          from._internal_quick_load());
      break;
    }
    case kQuit: {
      _this->_internal_mutable_quit()->::SC2APIProtocol::RequestQuit::MergeFrom(
          from._internal_quit());
      break;
    }
    case kGameInfo: {
      _this->_internal_mutable_game_info()->::SC2APIProtocol::RequestGameInfo::MergeFrom(
          from._internal_game_info());
      break;
    }
    case kObservation: {
      _this->_internal_mutable_observation()->::SC2APIProtocol::RequestObservation::MergeFrom(
          from._internal_observation());
      break;
    }
    case kAction: {
      _this->_internal_mutable_action()->::SC2APIProtocol::RequestAction::MergeFrom(
          from._internal_action());
      break;
    }
    case kObsAction: {
      _this->_internal_mutable_obs_action()->::SC2APIProtocol::RequestObserverAction::MergeFrom(
          from._internal_obs_action());
      break;
    }
    case kStep: {
      _this->_internal_mutable_step()->::SC2APIProtocol::RequestStep::MergeFrom(
          from._internal_step());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::SC2APIProtocol::RequestData::MergeFrom(
          from._internal_data());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::SC2APIProtocol::RequestQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kSaveReplay: {
      _this->_internal_mutable_save_replay()->::SC2APIProtocol::RequestSaveReplay::MergeFrom(
          from._internal_save_replay());
      break;
    }
    case kMapCommand: {
      _this->_internal_mutable_map_command()->::SC2APIProtocol::RequestMapCommand::MergeFrom(
          from._internal_map_command());
      break;
    }
    case kReplayInfo: {
      _this->_internal_mutable_replay_info()->::SC2APIProtocol::RequestReplayInfo::MergeFrom(
          from._internal_replay_info());
      break;
    }
    case kAvailableMaps: {
      _this->_internal_mutable_available_maps()->::SC2APIProtocol::RequestAvailableMaps::MergeFrom(
          from._internal_available_maps());
      break;
    }
    case kSaveMap: {
      _this->_internal_mutable_save_map()->::SC2APIProtocol::RequestSaveMap::MergeFrom(
          from._internal_save_map());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::SC2APIProtocol::RequestPing::MergeFrom(
          from._internal_ping());
      break;
    }
    case kDebug: {
      _this->_internal_mutable_debug()->::SC2APIProtocol::RequestDebug::MergeFrom(
          from._internal_debug());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[0]);
}

// ===================================================================

class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._impl_._has_bits_);
  static const ::SC2APIProtocol::ResponseCreateGame& create_game(const Response* msg);
  static const ::SC2APIProtocol::ResponseJoinGame& join_game(const Response* msg);
  static const ::SC2APIProtocol::ResponseRestartGame& restart_game(const Response* msg);
  static const ::SC2APIProtocol::ResponseStartReplay& start_replay(const Response* msg);
  static const ::SC2APIProtocol::ResponseLeaveGame& leave_game(const Response* msg);
  static const ::SC2APIProtocol::ResponseQuickSave& quick_save(const Response* msg);
  static const ::SC2APIProtocol::ResponseQuickLoad& quick_load(const Response* msg);
  static const ::SC2APIProtocol::ResponseQuit& quit(const Response* msg);
  static const ::SC2APIProtocol::ResponseGameInfo& game_info(const Response* msg);
  static const ::SC2APIProtocol::ResponseObservation& observation(const Response* msg);
  static const ::SC2APIProtocol::ResponseAction& action(const Response* msg);
  static const ::SC2APIProtocol::ResponseObserverAction& obs_action(const Response* msg);
  static const ::SC2APIProtocol::ResponseStep& step(const Response* msg);
  static const ::SC2APIProtocol::ResponseData& data(const Response* msg);
  static const ::SC2APIProtocol::ResponseQuery& query(const Response* msg);
  static const ::SC2APIProtocol::ResponseSaveReplay& save_replay(const Response* msg);
  static const ::SC2APIProtocol::ResponseReplayInfo& replay_info(const Response* msg);
  static const ::SC2APIProtocol::ResponseAvailableMaps& available_maps(const Response* msg);
  static const ::SC2APIProtocol::ResponseSaveMap& save_map(const Response* msg);
  static const ::SC2APIProtocol::ResponseMapCommand& map_command(const Response* msg);
  static const ::SC2APIProtocol::ResponsePing& ping(const Response* msg);
  static const ::SC2APIProtocol::ResponseDebug& debug(const Response* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::ResponseCreateGame&
Response::_Internal::create_game(const Response* msg) {
  return *msg->_impl_.response_.create_game_;
}
const ::SC2APIProtocol::ResponseJoinGame&
Response::_Internal::join_game(const Response* msg) {
  return *msg->_impl_.response_.join_game_;
}
const ::SC2APIProtocol::ResponseRestartGame&
Response::_Internal::restart_game(const Response* msg) {
  return *msg->_impl_.response_.restart_game_;
}
const ::SC2APIProtocol::ResponseStartReplay&
Response::_Internal::start_replay(const Response* msg) {
  return *msg->_impl_.response_.start_replay_;
}
const ::SC2APIProtocol::ResponseLeaveGame&
Response::_Internal::leave_game(const Response* msg) {
  return *msg->_impl_.response_.leave_game_;
}
const ::SC2APIProtocol::ResponseQuickSave&
Response::_Internal::quick_save(const Response* msg) {
  return *msg->_impl_.response_.quick_save_;
}
const ::SC2APIProtocol::ResponseQuickLoad&
Response::_Internal::quick_load(const Response* msg) {
  return *msg->_impl_.response_.quick_load_;
}
const ::SC2APIProtocol::ResponseQuit&
Response::_Internal::quit(const Response* msg) {
  return *msg->_impl_.response_.quit_;
}
const ::SC2APIProtocol::ResponseGameInfo&
Response::_Internal::game_info(const Response* msg) {
  return *msg->_impl_.response_.game_info_;
}
const ::SC2APIProtocol::ResponseObservation&
Response::_Internal::observation(const Response* msg) {
  return *msg->_impl_.response_.observation_;
}
const ::SC2APIProtocol::ResponseAction&
Response::_Internal::action(const Response* msg) {
  return *msg->_impl_.response_.action_;
}
const ::SC2APIProtocol::ResponseObserverAction&
Response::_Internal::obs_action(const Response* msg) {
  return *msg->_impl_.response_.obs_action_;
}
const ::SC2APIProtocol::ResponseStep&
Response::_Internal::step(const Response* msg) {
  return *msg->_impl_.response_.step_;
}
const ::SC2APIProtocol::ResponseData&
Response::_Internal::data(const Response* msg) {
  return *msg->_impl_.response_.data_;
}
const ::SC2APIProtocol::ResponseQuery&
Response::_Internal::query(const Response* msg) {
  return *msg->_impl_.response_.query_;
}
const ::SC2APIProtocol::ResponseSaveReplay&
Response::_Internal::save_replay(const Response* msg) {
  return *msg->_impl_.response_.save_replay_;
}
const ::SC2APIProtocol::ResponseReplayInfo&
Response::_Internal::replay_info(const Response* msg) {
  return *msg->_impl_.response_.replay_info_;
}
const ::SC2APIProtocol::ResponseAvailableMaps&
Response::_Internal::available_maps(const Response* msg) {
  return *msg->_impl_.response_.available_maps_;
}
const ::SC2APIProtocol::ResponseSaveMap&
Response::_Internal::save_map(const Response* msg) {
  return *msg->_impl_.response_.save_map_;
}
const ::SC2APIProtocol::ResponseMapCommand&
Response::_Internal::map_command(const Response* msg) {
  return *msg->_impl_.response_.map_command_;
}
const ::SC2APIProtocol::ResponsePing&
Response::_Internal::ping(const Response* msg) {
  return *msg->_impl_.response_.ping_;
}
const ::SC2APIProtocol::ResponseDebug&
Response::_Internal::debug(const Response* msg) {
  return *msg->_impl_.response_.debug_;
}
void Response::set_allocated_create_game(::SC2APIProtocol::ResponseCreateGame* create_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (create_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_game);
    if (message_arena != submessage_arena) {
      create_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_game, submessage_arena);
    }
    set_has_create_game();
    _impl_.response_.create_game_ = create_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.create_game)
}
void Response::set_allocated_join_game(::SC2APIProtocol::ResponseJoinGame* join_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (join_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(join_game);
    if (message_arena != submessage_arena) {
      join_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_game, submessage_arena);
    }
    set_has_join_game();
    _impl_.response_.join_game_ = join_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.join_game)
}
void Response::set_allocated_restart_game(::SC2APIProtocol::ResponseRestartGame* restart_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (restart_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(restart_game);
    if (message_arena != submessage_arena) {
      restart_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_game, submessage_arena);
    }
    set_has_restart_game();
    _impl_.response_.restart_game_ = restart_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.restart_game)
}
void Response::set_allocated_start_replay(::SC2APIProtocol::ResponseStartReplay* start_replay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (start_replay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_replay);
    if (message_arena != submessage_arena) {
      start_replay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_replay, submessage_arena);
    }
    set_has_start_replay();
    _impl_.response_.start_replay_ = start_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.start_replay)
}
void Response::set_allocated_leave_game(::SC2APIProtocol::ResponseLeaveGame* leave_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (leave_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leave_game);
    if (message_arena != submessage_arena) {
      leave_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave_game, submessage_arena);
    }
    set_has_leave_game();
    _impl_.response_.leave_game_ = leave_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.leave_game)
}
void Response::set_allocated_quick_save(::SC2APIProtocol::ResponseQuickSave* quick_save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (quick_save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quick_save);
    if (message_arena != submessage_arena) {
      quick_save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quick_save, submessage_arena);
    }
    set_has_quick_save();
    _impl_.response_.quick_save_ = quick_save;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quick_save)
}
void Response::set_allocated_quick_load(::SC2APIProtocol::ResponseQuickLoad* quick_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (quick_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quick_load);
    if (message_arena != submessage_arena) {
      quick_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quick_load, submessage_arena);
    }
    set_has_quick_load();
    _impl_.response_.quick_load_ = quick_load;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quick_load)
}
void Response::set_allocated_quit(::SC2APIProtocol::ResponseQuit* quit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (quit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quit);
    if (message_arena != submessage_arena) {
      quit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quit, submessage_arena);
    }
    set_has_quit();
    _impl_.response_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quit)
}
void Response::set_allocated_game_info(::SC2APIProtocol::ResponseGameInfo* game_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (game_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_info);
    if (message_arena != submessage_arena) {
      game_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_info, submessage_arena);
    }
    set_has_game_info();
    _impl_.response_.game_info_ = game_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.game_info)
}
void Response::set_allocated_observation(::SC2APIProtocol::ResponseObservation* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(observation);
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    set_has_observation();
    _impl_.response_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.observation)
}
void Response::set_allocated_action(::SC2APIProtocol::ResponseAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    _impl_.response_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.action)
}
void Response::set_allocated_obs_action(::SC2APIProtocol::ResponseObserverAction* obs_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (obs_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(obs_action);
    if (message_arena != submessage_arena) {
      obs_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_action, submessage_arena);
    }
    set_has_obs_action();
    _impl_.response_.obs_action_ = obs_action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.obs_action)
}
void Response::set_allocated_step(::SC2APIProtocol::ResponseStep* step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(step);
    if (message_arena != submessage_arena) {
      step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, step, submessage_arena);
    }
    set_has_step();
    _impl_.response_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.step)
}
void Response::set_allocated_data(::SC2APIProtocol::ResponseData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.data)
}
void Response::set_allocated_query(::SC2APIProtocol::ResponseQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query));
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.response_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.query)
}
void Response::clear_query() {
  if (_internal_has_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.query_;
    }
    clear_has_response();
  }
}
void Response::set_allocated_save_replay(::SC2APIProtocol::ResponseSaveReplay* save_replay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (save_replay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_replay);
    if (message_arena != submessage_arena) {
      save_replay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_replay, submessage_arena);
    }
    set_has_save_replay();
    _impl_.response_.save_replay_ = save_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.save_replay)
}
void Response::set_allocated_replay_info(::SC2APIProtocol::ResponseReplayInfo* replay_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (replay_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(replay_info);
    if (message_arena != submessage_arena) {
      replay_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_info, submessage_arena);
    }
    set_has_replay_info();
    _impl_.response_.replay_info_ = replay_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.replay_info)
}
void Response::set_allocated_available_maps(::SC2APIProtocol::ResponseAvailableMaps* available_maps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (available_maps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(available_maps);
    if (message_arena != submessage_arena) {
      available_maps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, available_maps, submessage_arena);
    }
    set_has_available_maps();
    _impl_.response_.available_maps_ = available_maps;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.available_maps)
}
void Response::set_allocated_save_map(::SC2APIProtocol::ResponseSaveMap* save_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (save_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(save_map);
    if (message_arena != submessage_arena) {
      save_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_map, submessage_arena);
    }
    set_has_save_map();
    _impl_.response_.save_map_ = save_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.save_map)
}
void Response::set_allocated_map_command(::SC2APIProtocol::ResponseMapCommand* map_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (map_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_command);
    if (message_arena != submessage_arena) {
      map_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_command, submessage_arena);
    }
    set_has_map_command();
    _impl_.response_.map_command_ = map_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.map_command)
}
void Response::set_allocated_ping(::SC2APIProtocol::ResponsePing* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.response_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.ping)
}
void Response::set_allocated_debug(::SC2APIProtocol::ResponseDebug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    set_has_debug();
    _impl_.response_.debug_ = debug;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.debug)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){from._impl_.error_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  clear_has_response();
  switch (from.response_case()) {
    case kCreateGame: {
      _this->_internal_mutable_create_game()->::SC2APIProtocol::ResponseCreateGame::MergeFrom(
          from._internal_create_game());
      break;
    }
    case kJoinGame: {
      _this->_internal_mutable_join_game()->::SC2APIProtocol::ResponseJoinGame::MergeFrom(
          from._internal_join_game());
      break;
    }
    case kRestartGame: {
      _this->_internal_mutable_restart_game()->::SC2APIProtocol::ResponseRestartGame::MergeFrom(
          from._internal_restart_game());
      break;
    }
    case kStartReplay: {
      _this->_internal_mutable_start_replay()->::SC2APIProtocol::ResponseStartReplay::MergeFrom(
          from._internal_start_replay());
      break;
    }
    case kLeaveGame: {
      _this->_internal_mutable_leave_game()->::SC2APIProtocol::ResponseLeaveGame::MergeFrom(
          from._internal_leave_game());
      break;
    }
    case kQuickSave: {
      _this->_internal_mutable_quick_save()->::SC2APIProtocol::ResponseQuickSave::MergeFrom(
          from._internal_quick_save());
      break;
    }
    case kQuickLoad: {
      _this->_internal_mutable_quick_load()->::SC2APIProtocol::ResponseQuickLoad::MergeFrom(
          from._internal_quick_load());
      break;
    }
    case kQuit: {
      _this->_internal_mutable_quit()->::SC2APIProtocol::ResponseQuit::MergeFrom(
          from._internal_quit());
      break;
    }
    case kGameInfo: {
      _this->_internal_mutable_game_info()->::SC2APIProtocol::ResponseGameInfo::MergeFrom(
          from._internal_game_info());
      break;
    }
    case kObservation: {
      _this->_internal_mutable_observation()->::SC2APIProtocol::ResponseObservation::MergeFrom(
          from._internal_observation());
      break;
    }
    case kAction: {
      _this->_internal_mutable_action()->::SC2APIProtocol::ResponseAction::MergeFrom(
          from._internal_action());
      break;
    }
    case kObsAction: {
      _this->_internal_mutable_obs_action()->::SC2APIProtocol::ResponseObserverAction::MergeFrom(
          from._internal_obs_action());
      break;
    }
    case kStep: {
      _this->_internal_mutable_step()->::SC2APIProtocol::ResponseStep::MergeFrom(
          from._internal_step());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::SC2APIProtocol::ResponseData::MergeFrom(
          from._internal_data());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::SC2APIProtocol::ResponseQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kSaveReplay: {
      _this->_internal_mutable_save_replay()->::SC2APIProtocol::ResponseSaveReplay::MergeFrom(
          from._internal_save_replay());
      break;
    }
    case kReplayInfo: {
      _this->_internal_mutable_replay_info()->::SC2APIProtocol::ResponseReplayInfo::MergeFrom(
          from._internal_replay_info());
      break;
    }
    case kAvailableMaps: {
      _this->_internal_mutable_available_maps()->::SC2APIProtocol::ResponseAvailableMaps::MergeFrom(
          from._internal_available_maps());
      break;
    }
    case kSaveMap: {
      _this->_internal_mutable_save_map()->::SC2APIProtocol::ResponseSaveMap::MergeFrom(
          from._internal_save_map());
      break;
    }
    case kMapCommand: {
      _this->_internal_mutable_map_command()->::SC2APIProtocol::ResponseMapCommand::MergeFrom(
          from._internal_map_command());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::SC2APIProtocol::ResponsePing::MergeFrom(
          from._internal_ping());
      break;
    }
    case kDebug: {
      _this->_internal_mutable_debug()->::SC2APIProtocol::ResponseDebug::MergeFrom(
          from._internal_debug());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){arena}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.status_){1}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.~RepeatedPtrField();
  if (has_response()) {
    clear_response();
  }
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.Response)
  switch (response_case()) {
    case kCreateGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.create_game_;
      }
      break;
    }
    case kJoinGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.join_game_;
      }
      break;
    }
    case kRestartGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.restart_game_;
      }
      break;
    }
    case kStartReplay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.start_replay_;
      }
      break;
    }
    case kLeaveGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.leave_game_;
      }
      break;
    }
    case kQuickSave: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.quick_save_;
      }
      break;
    }
    case kQuickLoad: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.quick_load_;
      }
      break;
    }
    case kQuit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.quit_;
      }
      break;
    }
    case kGameInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.game_info_;
      }
      break;
    }
    case kObservation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.observation_;
      }
      break;
    }
    case kAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.action_;
      }
      break;
    }
    case kObsAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.obs_action_;
      }
      break;
    }
    case kStep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.step_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.data_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.query_;
      }
      break;
    }
    case kSaveReplay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.save_replay_;
      }
      break;
    }
    case kReplayInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.replay_info_;
      }
      break;
    }
    case kAvailableMaps: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.available_maps_;
      }
      break;
    }
    case kSaveMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.save_map_;
      }
      break;
    }
    case kMapCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.map_command_;
      }
      break;
    }
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.ping_;
      }
      break;
    }
    case kDebug: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.debug_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.id_ = 0u;
    _impl_.status_ = 1;
  }
  clear_response();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.ResponseCreateGame create_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseJoinGame join_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseRestartGame restart_game = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseStartReplay start_replay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_replay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseQuickSave quick_save = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quick_save(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_quick_load(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseQuit quit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_quit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseGameInfo game_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseObservation observation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseAction action = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseStep step = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseData data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseQuery query = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_replay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_available_maps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseSaveMap save_map = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponsePing ping = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseDebug debug = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseObserverAction obs_action = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ResponseMapCommand map_command = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string error = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_error();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SC2APIProtocol.Response.error");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<786>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Status status = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Status_IsValid(val))) {
            _internal_set_status(static_cast<::SC2APIProtocol::Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(99, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kCreateGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::create_game(this),
          _Internal::create_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kJoinGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::join_game(this),
          _Internal::join_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kRestartGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::restart_game(this),
          _Internal::restart_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kStartReplay: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::start_replay(this),
          _Internal::start_replay(this).GetCachedSize(), target, stream);
      break;
    }
    case kLeaveGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::leave_game(this),
          _Internal::leave_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuickSave: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::quick_save(this),
          _Internal::quick_save(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuickLoad: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::quick_load(this),
          _Internal::quick_load(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuit: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::quit(this),
          _Internal::quit(this).GetCachedSize(), target, stream);
      break;
    }
    case kGameInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::game_info(this),
          _Internal::game_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kObservation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::observation(this),
          _Internal::observation(this).GetCachedSize(), target, stream);
      break;
    }
    case kAction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::action(this),
          _Internal::action(this).GetCachedSize(), target, stream);
      break;
    }
    case kStep: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::step(this),
          _Internal::step(this).GetCachedSize(), target, stream);
      break;
    }
    case kData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::data(this),
          _Internal::data(this).GetCachedSize(), target, stream);
      break;
    }
    case kQuery: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::query(this),
          _Internal::query(this).GetCachedSize(), target, stream);
      break;
    }
    case kSaveReplay: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::save_replay(this),
          _Internal::save_replay(this).GetCachedSize(), target, stream);
      break;
    }
    case kReplayInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::replay_info(this),
          _Internal::replay_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kAvailableMaps: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::available_maps(this),
          _Internal::available_maps(this).GetCachedSize(), target, stream);
      break;
    }
    case kSaveMap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::save_map(this),
          _Internal::save_map(this).GetCachedSize(), target, stream);
      break;
    }
    case kPing: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::ping(this),
          _Internal::ping(this).GetCachedSize(), target, stream);
      break;
    }
    case kDebug: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::debug(this),
          _Internal::debug(this).GetCachedSize(), target, stream);
      break;
    }
    case kObsAction: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::obs_action(this),
          _Internal::obs_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kMapCommand: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::map_command(this),
          _Internal::map_command(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 97;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(97, this->_internal_id(), target);
  }

  // repeated string error = 98;
  for (int i = 0, n = this->_internal_error_size(); i < n; i++) {
    const auto& s = this->_internal_error(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.Response.error");
    target = stream->WriteString(98, s, target);
  }

  // optional .SC2APIProtocol.Status status = 99;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      99, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string error = 98;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.error_.size());
  for (int i = 0, n = _impl_.error_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.error_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 id = 97;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .SC2APIProtocol.Status status = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  switch (response_case()) {
    // .SC2APIProtocol.ResponseCreateGame create_game = 1;
    case kCreateGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.create_game_);
      break;
    }
    // .SC2APIProtocol.ResponseJoinGame join_game = 2;
    case kJoinGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.join_game_);
      break;
    }
    // .SC2APIProtocol.ResponseRestartGame restart_game = 3;
    case kRestartGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.restart_game_);
      break;
    }
    // .SC2APIProtocol.ResponseStartReplay start_replay = 4;
    case kStartReplay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.start_replay_);
      break;
    }
    // .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
    case kLeaveGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.leave_game_);
      break;
    }
    // .SC2APIProtocol.ResponseQuickSave quick_save = 6;
    case kQuickSave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.quick_save_);
      break;
    }
    // .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
    case kQuickLoad: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.quick_load_);
      break;
    }
    // .SC2APIProtocol.ResponseQuit quit = 8;
    case kQuit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.quit_);
      break;
    }
    // .SC2APIProtocol.ResponseGameInfo game_info = 9;
    case kGameInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.game_info_);
      break;
    }
    // .SC2APIProtocol.ResponseObservation observation = 10;
    case kObservation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.observation_);
      break;
    }
    // .SC2APIProtocol.ResponseAction action = 11;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.action_);
      break;
    }
    // .SC2APIProtocol.ResponseObserverAction obs_action = 21;
    case kObsAction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.obs_action_);
      break;
    }
    // .SC2APIProtocol.ResponseStep step = 12;
    case kStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.step_);
      break;
    }
    // .SC2APIProtocol.ResponseData data = 13;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.data_);
      break;
    }
    // .SC2APIProtocol.ResponseQuery query = 14;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.query_);
      break;
    }
    // .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
    case kSaveReplay: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.save_replay_);
      break;
    }
    // .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
    case kReplayInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.replay_info_);
      break;
    }
    // .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
    case kAvailableMaps: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.available_maps_);
      break;
    }
    // .SC2APIProtocol.ResponseSaveMap save_map = 18;
    case kSaveMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.save_map_);
      break;
    }
    // .SC2APIProtocol.ResponseMapCommand map_command = 22;
    case kMapCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.map_command_);
      break;
    }
    // .SC2APIProtocol.ResponsePing ping = 19;
    case kPing: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.ping_);
      break;
    }
    // .SC2APIProtocol.ResponseDebug debug = 20;
    case kDebug: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.debug_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.error_.MergeFrom(from._impl_.error_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.response_case()) {
    case kCreateGame: {
      _this->_internal_mutable_create_game()->::SC2APIProtocol::ResponseCreateGame::MergeFrom(
          from._internal_create_game());
      break;
    }
    case kJoinGame: {
      _this->_internal_mutable_join_game()->::SC2APIProtocol::ResponseJoinGame::MergeFrom(
          from._internal_join_game());
      break;
    }
    case kRestartGame: {
      _this->_internal_mutable_restart_game()->::SC2APIProtocol::ResponseRestartGame::MergeFrom(
          from._internal_restart_game());
      break;
    }
    case kStartReplay: {
      _this->_internal_mutable_start_replay()->::SC2APIProtocol::ResponseStartReplay::MergeFrom(
          from._internal_start_replay());
      break;
    }
    case kLeaveGame: {
      _this->_internal_mutable_leave_game()->::SC2APIProtocol::ResponseLeaveGame::MergeFrom(
          from._internal_leave_game());
      break;
    }
    case kQuickSave: {
      _this->_internal_mutable_quick_save()->::SC2APIProtocol::ResponseQuickSave::MergeFrom(
          from._internal_quick_save());
      break;
    }
    case kQuickLoad: {
      _this->_internal_mutable_quick_load()->::SC2APIProtocol::ResponseQuickLoad::MergeFrom(
          from._internal_quick_load());
      break;
    }
    case kQuit: {
      _this->_internal_mutable_quit()->::SC2APIProtocol::ResponseQuit::MergeFrom(
          from._internal_quit());
      break;
    }
    case kGameInfo: {
      _this->_internal_mutable_game_info()->::SC2APIProtocol::ResponseGameInfo::MergeFrom(
          from._internal_game_info());
      break;
    }
    case kObservation: {
      _this->_internal_mutable_observation()->::SC2APIProtocol::ResponseObservation::MergeFrom(
          from._internal_observation());
      break;
    }
    case kAction: {
      _this->_internal_mutable_action()->::SC2APIProtocol::ResponseAction::MergeFrom(
          from._internal_action());
      break;
    }
    case kObsAction: {
      _this->_internal_mutable_obs_action()->::SC2APIProtocol::ResponseObserverAction::MergeFrom(
          from._internal_obs_action());
      break;
    }
    case kStep: {
      _this->_internal_mutable_step()->::SC2APIProtocol::ResponseStep::MergeFrom(
          from._internal_step());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::SC2APIProtocol::ResponseData::MergeFrom(
          from._internal_data());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::SC2APIProtocol::ResponseQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kSaveReplay: {
      _this->_internal_mutable_save_replay()->::SC2APIProtocol::ResponseSaveReplay::MergeFrom(
          from._internal_save_replay());
      break;
    }
    case kReplayInfo: {
      _this->_internal_mutable_replay_info()->::SC2APIProtocol::ResponseReplayInfo::MergeFrom(
          from._internal_replay_info());
      break;
    }
    case kAvailableMaps: {
      _this->_internal_mutable_available_maps()->::SC2APIProtocol::ResponseAvailableMaps::MergeFrom(
          from._internal_available_maps());
      break;
    }
    case kSaveMap: {
      _this->_internal_mutable_save_map()->::SC2APIProtocol::ResponseSaveMap::MergeFrom(
          from._internal_save_map());
      break;
    }
    case kMapCommand: {
      _this->_internal_mutable_map_command()->::SC2APIProtocol::ResponseMapCommand::MergeFrom(
          from._internal_map_command());
      break;
    }
    case kPing: {
      _this->_internal_mutable_ping()->::SC2APIProtocol::ResponsePing::MergeFrom(
          from._internal_ping());
      break;
    }
    case kDebug: {
      _this->_internal_mutable_debug()->::SC2APIProtocol::ResponseDebug::MergeFrom(
          from._internal_debug());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.error_.InternalSwap(&other->_impl_.error_);
  swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[1]);
}

// ===================================================================

class RequestCreateGame::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestCreateGame>()._impl_._has_bits_);
  static const ::SC2APIProtocol::LocalMap& local_map(const RequestCreateGame* msg);
  static void set_has_disable_fog(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::SC2APIProtocol::LocalMap&
RequestCreateGame::_Internal::local_map(const RequestCreateGame* msg) {
  return *msg->_impl_.Map_.local_map_;
}
void RequestCreateGame::set_allocated_local_map(::SC2APIProtocol::LocalMap* local_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Map();
  if (local_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_map);
    if (message_arena != submessage_arena) {
      local_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_map, submessage_arena);
    }
    set_has_local_map();
    _impl_.Map_.local_map_ = local_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestCreateGame.local_map)
}
RequestCreateGame::RequestCreateGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestCreateGame)
}
RequestCreateGame::RequestCreateGame(const RequestCreateGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestCreateGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_setup_){from._impl_.player_setup_}
    , decltype(_impl_.random_seed_){}
    , decltype(_impl_.disable_fog_){}
    , decltype(_impl_.realtime_){}
    , decltype(_impl_.Map_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.random_seed_, &from._impl_.random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.realtime_) -
    reinterpret_cast<char*>(&_impl_.random_seed_)) + sizeof(_impl_.realtime_));
  clear_has_Map();
  switch (from.Map_case()) {
    case kLocalMap: {
      _this->_internal_mutable_local_map()->::SC2APIProtocol::LocalMap::MergeFrom(
          from._internal_local_map());
      break;
    }
    case kBattlenetMapName: {
      _this->_internal_set_battlenet_map_name(from._internal_battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestCreateGame)
}

inline void RequestCreateGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_setup_){arena}
    , decltype(_impl_.random_seed_){0u}
    , decltype(_impl_.disable_fog_){false}
    , decltype(_impl_.realtime_){false}
    , decltype(_impl_.Map_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Map();
}

RequestCreateGame::~RequestCreateGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestCreateGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestCreateGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_setup_.~RepeatedPtrField();
  if (has_Map()) {
    clear_Map();
  }
}

void RequestCreateGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestCreateGame::clear_Map() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestCreateGame)
  switch (Map_case()) {
    case kLocalMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Map_.local_map_;
      }
      break;
    }
    case kBattlenetMapName: {
      _impl_.Map_.battlenet_map_name_.Destroy();
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MAP_NOT_SET;
}


void RequestCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestCreateGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_setup_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.realtime_) -
        reinterpret_cast<char*>(&_impl_.random_seed_)) + sizeof(_impl_.realtime_));
  }
  clear_Map();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestCreateGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.LocalMap local_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string battlenet_map_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_battlenet_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_setup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_fog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_disable_fog(&has_bits);
          _impl_.disable_fog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 random_seed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_random_seed(&has_bits);
          _impl_.random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool realtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_realtime(&has_bits);
          _impl_.realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestCreateGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestCreateGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (Map_case()) {
    case kLocalMap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::local_map(this),
          _Internal::local_map(this).GetCachedSize(), target, stream);
      break;
    }
    case kBattlenetMapName: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_battlenet_map_name().data(), static_cast<int>(this->_internal_battlenet_map_name().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_battlenet_map_name(), target);
      break;
    }
    default: ;
  }
  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_setup_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_setup(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool disable_fog = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_disable_fog(), target);
  }

  // optional uint32 random_seed = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_random_seed(), target);
  }

  // optional bool realtime = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_realtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestCreateGame)
  return target;
}

size_t RequestCreateGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestCreateGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  total_size += 1UL * this->_internal_player_setup_size();
  for (const auto& msg : this->_impl_.player_setup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 random_seed = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random_seed());
    }

    // optional bool disable_fog = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool realtime = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  switch (Map_case()) {
    // .SC2APIProtocol.LocalMap local_map = 1;
    case kLocalMap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Map_.local_map_);
      break;
    }
    // string battlenet_map_name = 2;
    case kBattlenetMapName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCreateGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestCreateGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCreateGame::GetClassData() const { return &_class_data_; }


void RequestCreateGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestCreateGame*>(&to_msg);
  auto& from = static_cast<const RequestCreateGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestCreateGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_setup_.MergeFrom(from._impl_.player_setup_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.random_seed_ = from._impl_.random_seed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disable_fog_ = from._impl_.disable_fog_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.realtime_ = from._impl_.realtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.Map_case()) {
    case kLocalMap: {
      _this->_internal_mutable_local_map()->::SC2APIProtocol::LocalMap::MergeFrom(
          from._internal_local_map());
      break;
    }
    case kBattlenetMapName: {
      _this->_internal_set_battlenet_map_name(from._internal_battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestCreateGame::CopyFrom(const RequestCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateGame::IsInitialized() const {
  return true;
}

void RequestCreateGame::InternalSwap(RequestCreateGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_setup_.InternalSwap(&other->_impl_.player_setup_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestCreateGame, _impl_.realtime_)
      + sizeof(RequestCreateGame::_impl_.realtime_)
      - PROTOBUF_FIELD_OFFSET(RequestCreateGame, _impl_.random_seed_)>(
          reinterpret_cast<char*>(&_impl_.random_seed_),
          reinterpret_cast<char*>(&other->_impl_.random_seed_));
  swap(_impl_.Map_, other->_impl_.Map_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCreateGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[2]);
}

// ===================================================================

class LocalMap::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalMap>()._impl_._has_bits_);
  static void set_has_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LocalMap::LocalMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.LocalMap)
}
LocalMap::LocalMap(const LocalMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_path_){}
    , decltype(_impl_.map_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_path()) {
    _this->_impl_.map_path_.Set(from._internal_map_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.map_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_data()) {
    _this->_impl_.map_data_.Set(from._internal_map_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.LocalMap)
}

inline void LocalMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_path_){}
    , decltype(_impl_.map_data_){}
  };
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.map_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalMap::~LocalMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.LocalMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_path_.Destroy();
  _impl_.map_data_.Destroy();
}

void LocalMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.LocalMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.map_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string map_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.LocalMap.map_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes map_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_map_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.LocalMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_path().data(), static_cast<int>(this->_internal_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.LocalMap.map_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_path(), target);
  }

  // optional bytes map_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_map_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.LocalMap)
  return target;
}

size_t LocalMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.LocalMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_path());
    }

    // optional bytes map_data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_map_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalMap::GetClassData() const { return &_class_data_; }


void LocalMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalMap*>(&to_msg);
  auto& from = static_cast<const LocalMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.LocalMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_path(from._internal_map_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_map_data(from._internal_map_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalMap::CopyFrom(const LocalMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.LocalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalMap::IsInitialized() const {
  return true;
}

void LocalMap::InternalSwap(LocalMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_path_, lhs_arena,
      &other->_impl_.map_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_data_, lhs_arena,
      &other->_impl_.map_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[3]);
}

// ===================================================================

class ResponseCreateGame::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseCreateGame>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseCreateGame::ResponseCreateGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseCreateGame)
}
ResponseCreateGame::ResponseCreateGame(const ResponseCreateGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseCreateGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_details()) {
    _this->_impl_.error_details_.Set(from._internal_error_details(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseCreateGame)
}

inline void ResponseCreateGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.error_){1}
  };
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseCreateGame::~ResponseCreateGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseCreateGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseCreateGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_details_.Destroy();
}

void ResponseCreateGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseCreateGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_details_.ClearNonDefaultToEmpty();
    }
    _impl_.error_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCreateGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseCreateGame_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseCreateGame_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseCreateGame.error_details");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCreateGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseCreateGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseCreateGame.error_details");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseCreateGame)
  return target;
}

size_t ResponseCreateGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseCreateGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_details());
    }

    // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCreateGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseCreateGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCreateGame::GetClassData() const { return &_class_data_; }


void ResponseCreateGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseCreateGame*>(&to_msg);
  auto& from = static_cast<const ResponseCreateGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseCreateGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_details(from._internal_error_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCreateGame::CopyFrom(const ResponseCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateGame::IsInitialized() const {
  return true;
}

void ResponseCreateGame::InternalSwap(ResponseCreateGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_details_, lhs_arena,
      &other->_impl_.error_details_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCreateGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[4]);
}

// ===================================================================

class RequestJoinGame::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestJoinGame>()._impl_._has_bits_);
  static const ::SC2APIProtocol::InterfaceOptions& options(const RequestJoinGame* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::PortSet& server_ports(const RequestJoinGame* msg);
  static void set_has_server_ports(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shared_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::InterfaceOptions&
RequestJoinGame::_Internal::options(const RequestJoinGame* msg) {
  return *msg->_impl_.options_;
}
const ::SC2APIProtocol::PortSet&
RequestJoinGame::_Internal::server_ports(const RequestJoinGame* msg) {
  return *msg->_impl_.server_ports_;
}
RequestJoinGame::RequestJoinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestJoinGame)
}
RequestJoinGame::RequestJoinGame(const RequestJoinGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestJoinGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_ports_){from._impl_.client_ports_}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.host_ip_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.server_ports_){nullptr}
    , decltype(_impl_.shared_port_){}
    , decltype(_impl_.participation_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_ip()) {
    _this->_impl_.host_ip_.Set(from._internal_host_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::SC2APIProtocol::InterfaceOptions(*from._impl_.options_);
  }
  if (from._internal_has_server_ports()) {
    _this->_impl_.server_ports_ = new ::SC2APIProtocol::PortSet(*from._impl_.server_ports_);
  }
  _this->_impl_.shared_port_ = from._impl_.shared_port_;
  clear_has_participation();
  switch (from.participation_case()) {
    case kRace: {
      _this->_internal_set_race(from._internal_race());
      break;
    }
    case kObservedPlayerId: {
      _this->_internal_set_observed_player_id(from._internal_observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestJoinGame)
}

inline void RequestJoinGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_ports_){arena}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.host_ip_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.server_ports_){nullptr}
    , decltype(_impl_.shared_port_){0}
    , decltype(_impl_.participation_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_participation();
}

RequestJoinGame::~RequestJoinGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestJoinGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestJoinGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_ports_.~RepeatedPtrField();
  _impl_.player_name_.Destroy();
  _impl_.host_ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.server_ports_;
  if (has_participation()) {
    clear_participation();
  }
}

void RequestJoinGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestJoinGame::clear_participation() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestJoinGame)
  switch (participation_case()) {
    case kRace: {
      // No need to clear
      break;
    }
    case kObservedPlayerId: {
      // No need to clear
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARTICIPATION_NOT_SET;
}


void RequestJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestJoinGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_ports_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.host_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.server_ports_ != nullptr);
      _impl_.server_ports_->Clear();
    }
  }
  _impl_.shared_port_ = 0;
  clear_participation();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestJoinGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.Race race = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Race_IsValid(val))) {
            _internal_set_race(static_cast<::SC2APIProtocol::Race>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // uint32 observed_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_observed_player_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.InterfaceOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.PortSet server_ports = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_ports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.PortSet client_ports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_client_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 shared_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_shared_port(&has_bits);
          _impl_.shared_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestJoinGame.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string host_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_host_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestJoinGame.host_ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestJoinGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestJoinGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (participation_case()) {
    case kRace: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_race(), target);
      break;
    }
    case kObservedPlayerId: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_observed_player_id(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.PortSet server_ports = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::server_ports(this),
        _Internal::server_ports(this).GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_client_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_client_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 shared_port = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_shared_port(), target);
  }

  // optional string player_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestJoinGame.player_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_player_name(), target);
  }

  // optional string host_ip = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_ip().data(), static_cast<int>(this->_internal_host_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestJoinGame.host_ip");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_host_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestJoinGame)
  return target;
}

size_t RequestJoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestJoinGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  total_size += 1UL * this->_internal_client_ports_size();
  for (const auto& msg : this->_impl_.client_ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string player_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional string host_ip = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_ip());
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_);
    }

    // optional .SC2APIProtocol.PortSet server_ports = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.server_ports_);
    }

    // optional int32 shared_port = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shared_port());
    }

  }
  switch (participation_case()) {
    // .SC2APIProtocol.Race race = 1;
    case kRace: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_race());
      break;
    }
    // uint32 observed_player_id = 2;
    case kObservedPlayerId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestJoinGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestJoinGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestJoinGame::GetClassData() const { return &_class_data_; }


void RequestJoinGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestJoinGame*>(&to_msg);
  auto& from = static_cast<const RequestJoinGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestJoinGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.client_ports_.MergeFrom(from._impl_.client_ports_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_host_ip(from._internal_host_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(
          from._internal_options());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_server_ports()->::SC2APIProtocol::PortSet::MergeFrom(
          from._internal_server_ports());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shared_port_ = from._impl_.shared_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.participation_case()) {
    case kRace: {
      _this->_internal_set_race(from._internal_race());
      break;
    }
    case kObservedPlayerId: {
      _this->_internal_set_observed_player_id(from._internal_observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestJoinGame::CopyFrom(const RequestJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinGame::IsInitialized() const {
  return true;
}

void RequestJoinGame::InternalSwap(RequestJoinGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.client_ports_.InternalSwap(&other->_impl_.client_ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_ip_, lhs_arena,
      &other->_impl_.host_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestJoinGame, _impl_.shared_port_)
      + sizeof(RequestJoinGame::_impl_.shared_port_)
      - PROTOBUF_FIELD_OFFSET(RequestJoinGame, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
  swap(_impl_.participation_, other->_impl_.participation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestJoinGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[5]);
}

// ===================================================================

class PortSet::_Internal {
 public:
  using HasBits = decltype(std::declval<PortSet>()._impl_._has_bits_);
  static void set_has_game_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PortSet::PortSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.PortSet)
}
PortSet::PortSet(const PortSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_port_){}
    , decltype(_impl_.base_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_port_, &from._impl_.game_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_port_) -
    reinterpret_cast<char*>(&_impl_.game_port_)) + sizeof(_impl_.base_port_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PortSet)
}

inline void PortSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_port_){0}
    , decltype(_impl_.base_port_){0}
  };
}

PortSet::~PortSet() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PortSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortSet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PortSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.game_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_port_) -
        reinterpret_cast<char*>(&_impl_.game_port_)) + sizeof(_impl_.base_port_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 game_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_port(&has_bits);
          _impl_.game_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 base_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_base_port(&has_bits);
          _impl_.base_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PortSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 game_port = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_port(), target);
  }

  // optional int32 base_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_base_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PortSet)
  return target;
}

size_t PortSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PortSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 game_port = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_port());
    }

    // optional int32 base_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_base_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortSet::GetClassData() const { return &_class_data_; }


void PortSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortSet*>(&to_msg);
  auto& from = static_cast<const PortSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PortSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_port_ = from._impl_.game_port_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.base_port_ = from._impl_.base_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortSet::CopyFrom(const PortSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PortSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortSet::IsInitialized() const {
  return true;
}

void PortSet::InternalSwap(PortSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortSet, _impl_.base_port_)
      + sizeof(PortSet::_impl_.base_port_)
      - PROTOBUF_FIELD_OFFSET(PortSet, _impl_.game_port_)>(
          reinterpret_cast<char*>(&_impl_.game_port_),
          reinterpret_cast<char*>(&other->_impl_.game_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[6]);
}

// ===================================================================

class ResponseJoinGame::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseJoinGame>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseJoinGame::ResponseJoinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseJoinGame)
}
ResponseJoinGame::ResponseJoinGame(const ResponseJoinGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseJoinGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_details()) {
    _this->_impl_.error_details_.Set(from._internal_error_details(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseJoinGame)
}

inline void ResponseJoinGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.error_){1}
  };
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseJoinGame::~ResponseJoinGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseJoinGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseJoinGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_details_.Destroy();
}

void ResponseJoinGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseJoinGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_details_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.player_id_ = 0u;
    _impl_.error_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseJoinGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseJoinGame_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseJoinGame_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseJoinGame.error_details");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseJoinGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseJoinGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // optional string error_details = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseJoinGame.error_details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseJoinGame)
  return target;
}

size_t ResponseJoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseJoinGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string error_details = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_details());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

    // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseJoinGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseJoinGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseJoinGame::GetClassData() const { return &_class_data_; }


void ResponseJoinGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseJoinGame*>(&to_msg);
  auto& from = static_cast<const ResponseJoinGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseJoinGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_details(from._internal_error_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseJoinGame::CopyFrom(const ResponseJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseJoinGame::IsInitialized() const {
  return true;
}

void ResponseJoinGame::InternalSwap(ResponseJoinGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_details_, lhs_arena,
      &other->_impl_.error_details_, rhs_arena
  );
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseJoinGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[7]);
}

// ===================================================================

class RequestRestartGame::_Internal {
 public:
};

RequestRestartGame::RequestRestartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestRestartGame)
}
RequestRestartGame::RequestRestartGame(const RequestRestartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestRestartGame* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestRestartGame)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestRestartGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestRestartGame::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestRestartGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[8]);
}

// ===================================================================

class ResponseRestartGame::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseRestartGame>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_need_hard_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ResponseRestartGame::ResponseRestartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseRestartGame)
}
ResponseRestartGame::ResponseRestartGame(const ResponseRestartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseRestartGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.need_hard_reset_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_details()) {
    _this->_impl_.error_details_.Set(from._internal_error_details(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.need_hard_reset_, &from._impl_.need_hard_reset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.need_hard_reset_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseRestartGame)
}

inline void ResponseRestartGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.need_hard_reset_){false}
    , decltype(_impl_.error_){1}
  };
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseRestartGame::~ResponseRestartGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseRestartGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseRestartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_details_.Destroy();
}

void ResponseRestartGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseRestartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseRestartGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_details_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.need_hard_reset_ = false;
    _impl_.error_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRestartGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseRestartGame_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseRestartGame_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseRestartGame.error_details");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool need_hard_reset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_need_hard_reset(&has_bits);
          _impl_.need_hard_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseRestartGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseRestartGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseRestartGame.error_details");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_details(), target);
  }

  // optional bool need_hard_reset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_need_hard_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseRestartGame)
  return target;
}

size_t ResponseRestartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseRestartGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string error_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_details());
    }

    // optional bool need_hard_reset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseRestartGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseRestartGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseRestartGame::GetClassData() const { return &_class_data_; }


void ResponseRestartGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseRestartGame*>(&to_msg);
  auto& from = static_cast<const ResponseRestartGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseRestartGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_details(from._internal_error_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.need_hard_reset_ = from._impl_.need_hard_reset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseRestartGame::CopyFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRestartGame::IsInitialized() const {
  return true;
}

void ResponseRestartGame::InternalSwap(ResponseRestartGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_details_, lhs_arena,
      &other->_impl_.error_details_, rhs_arena
  );
  swap(_impl_.need_hard_reset_, other->_impl_.need_hard_reset_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRestartGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[9]);
}

// ===================================================================

class RequestStartReplay::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestStartReplay>()._impl_._has_bits_);
  static void set_has_map_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_observed_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::InterfaceOptions& options(const RequestStartReplay* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_disable_fog(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_record_replay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::SC2APIProtocol::InterfaceOptions&
RequestStartReplay::_Internal::options(const RequestStartReplay* msg) {
  return *msg->_impl_.options_;
}
RequestStartReplay::RequestStartReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestStartReplay)
}
RequestStartReplay::RequestStartReplay(const RequestStartReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestStartReplay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_data_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.observed_player_id_){}
    , decltype(_impl_.disable_fog_){}
    , decltype(_impl_.realtime_){}
    , decltype(_impl_.record_replay_){}
    , decltype(_impl_.replay_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_data()) {
    _this->_impl_.map_data_.Set(from._internal_map_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::SC2APIProtocol::InterfaceOptions(*from._impl_.options_);
  }
  ::memcpy(&_impl_.observed_player_id_, &from._impl_.observed_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.record_replay_) -
    reinterpret_cast<char*>(&_impl_.observed_player_id_)) + sizeof(_impl_.record_replay_));
  clear_has_replay();
  switch (from.replay_case()) {
    case kReplayPath: {
      _this->_internal_set_replay_path(from._internal_replay_path());
      break;
    }
    case kReplayData: {
      _this->_internal_set_replay_data(from._internal_replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestStartReplay)
}

inline void RequestStartReplay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_data_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.observed_player_id_){0}
    , decltype(_impl_.disable_fog_){false}
    , decltype(_impl_.realtime_){false}
    , decltype(_impl_.record_replay_){false}
    , decltype(_impl_.replay_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.map_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_replay();
}

RequestStartReplay::~RequestStartReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestStartReplay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestStartReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
  if (has_replay()) {
    clear_replay();
  }
}

void RequestStartReplay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestStartReplay::clear_replay() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestStartReplay)
  switch (replay_case()) {
    case kReplayPath: {
      _impl_.replay_.replay_path_.Destroy();
      break;
    }
    case kReplayData: {
      _impl_.replay_.replay_data_.Destroy();
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REPLAY_NOT_SET;
}


void RequestStartReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestStartReplay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.observed_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.record_replay_) -
        reinterpret_cast<char*>(&_impl_.observed_player_id_)) + sizeof(_impl_.record_replay_));
  }
  clear_replay();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestStartReplay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string replay_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_replay_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestStartReplay.replay_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 observed_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_observed_player_id(&has_bits);
          _impl_.observed_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.InterfaceOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_fog = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_disable_fog(&has_bits);
          _impl_.disable_fog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes replay_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_replay_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes map_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_map_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool realtime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_realtime(&has_bits);
          _impl_.realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool record_replay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_record_replay(&has_bits);
          _impl_.record_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestStartReplay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestStartReplay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string replay_path = 1;
  if (_internal_has_replay_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_replay_path().data(), static_cast<int>(this->_internal_replay_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestStartReplay.replay_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_replay_path(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 observed_player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_observed_player_id(), target);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // optional bool disable_fog = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_disable_fog(), target);
  }

  // bytes replay_data = 5;
  if (_internal_has_replay_data()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_replay_data(), target);
  }

  // optional bytes map_data = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_map_data(), target);
  }

  // optional bool realtime = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_realtime(), target);
  }

  // optional bool record_replay = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_record_replay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestStartReplay)
  return target;
}

size_t RequestStartReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestStartReplay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes map_data = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_map_data());
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_);
    }

    // optional int32 observed_player_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_observed_player_id());
    }

    // optional bool disable_fog = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool realtime = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool record_replay = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  switch (replay_case()) {
    // string replay_path = 1;
    case kReplayPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replay_path());
      break;
    }
    // bytes replay_data = 5;
    case kReplayData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestStartReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestStartReplay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestStartReplay::GetClassData() const { return &_class_data_; }


void RequestStartReplay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestStartReplay*>(&to_msg);
  auto& from = static_cast<const RequestStartReplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestStartReplay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_data(from._internal_map_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(
          from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.observed_player_id_ = from._impl_.observed_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.disable_fog_ = from._impl_.disable_fog_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.realtime_ = from._impl_.realtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.record_replay_ = from._impl_.record_replay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.replay_case()) {
    case kReplayPath: {
      _this->_internal_set_replay_path(from._internal_replay_path());
      break;
    }
    case kReplayData: {
      _this->_internal_set_replay_data(from._internal_replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestStartReplay::CopyFrom(const RequestStartReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartReplay::IsInitialized() const {
  return true;
}

void RequestStartReplay::InternalSwap(RequestStartReplay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_data_, lhs_arena,
      &other->_impl_.map_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestStartReplay, _impl_.record_replay_)
      + sizeof(RequestStartReplay::_impl_.record_replay_)
      - PROTOBUF_FIELD_OFFSET(RequestStartReplay, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
  swap(_impl_.replay_, other->_impl_.replay_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStartReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[10]);
}

// ===================================================================

class ResponseStartReplay::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseStartReplay>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseStartReplay::ResponseStartReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseStartReplay)
}
ResponseStartReplay::ResponseStartReplay(const ResponseStartReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseStartReplay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_details()) {
    _this->_impl_.error_details_.Set(from._internal_error_details(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseStartReplay)
}

inline void ResponseStartReplay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.error_){1}
  };
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseStartReplay::~ResponseStartReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseStartReplay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseStartReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_details_.Destroy();
}

void ResponseStartReplay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseStartReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseStartReplay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_details_.ClearNonDefaultToEmpty();
    }
    _impl_.error_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseStartReplay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseStartReplay_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseStartReplay_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseStartReplay.error_details");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseStartReplay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseStartReplay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseStartReplay.error_details");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseStartReplay)
  return target;
}

size_t ResponseStartReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseStartReplay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_details());
    }

    // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseStartReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseStartReplay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseStartReplay::GetClassData() const { return &_class_data_; }


void ResponseStartReplay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseStartReplay*>(&to_msg);
  auto& from = static_cast<const ResponseStartReplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseStartReplay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_details(from._internal_error_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseStartReplay::CopyFrom(const ResponseStartReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStartReplay::IsInitialized() const {
  return true;
}

void ResponseStartReplay::InternalSwap(ResponseStartReplay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_details_, lhs_arena,
      &other->_impl_.error_details_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseStartReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[11]);
}

// ===================================================================

class RequestMapCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestMapCommand>()._impl_._has_bits_);
  static void set_has_trigger_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestMapCommand::RequestMapCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestMapCommand)
}
RequestMapCommand::RequestMapCommand(const RequestMapCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestMapCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trigger_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trigger_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trigger_cmd()) {
    _this->_impl_.trigger_cmd_.Set(from._internal_trigger_cmd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestMapCommand)
}

inline void RequestMapCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trigger_cmd_){}
  };
  _impl_.trigger_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestMapCommand::~RequestMapCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestMapCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestMapCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trigger_cmd_.Destroy();
}

void RequestMapCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestMapCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestMapCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.trigger_cmd_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMapCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trigger_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trigger_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestMapCommand.trigger_cmd");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestMapCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestMapCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string trigger_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trigger_cmd().data(), static_cast<int>(this->_internal_trigger_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestMapCommand.trigger_cmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trigger_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestMapCommand)
  return target;
}

size_t RequestMapCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestMapCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string trigger_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestMapCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestMapCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestMapCommand::GetClassData() const { return &_class_data_; }


void RequestMapCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestMapCommand*>(&to_msg);
  auto& from = static_cast<const RequestMapCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestMapCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trigger_cmd()) {
    _this->_internal_set_trigger_cmd(from._internal_trigger_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestMapCommand::CopyFrom(const RequestMapCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestMapCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMapCommand::IsInitialized() const {
  return true;
}

void RequestMapCommand::InternalSwap(RequestMapCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_cmd_, lhs_arena,
      &other->_impl_.trigger_cmd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMapCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[12]);
}

// ===================================================================

class ResponseMapCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseMapCommand>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseMapCommand::ResponseMapCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseMapCommand)
}
ResponseMapCommand::ResponseMapCommand(const ResponseMapCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseMapCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_details()) {
    _this->_impl_.error_details_.Set(from._internal_error_details(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseMapCommand)
}

inline void ResponseMapCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.error_){1}
  };
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseMapCommand::~ResponseMapCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseMapCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseMapCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_details_.Destroy();
}

void ResponseMapCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseMapCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseMapCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_details_.ClearNonDefaultToEmpty();
    }
    _impl_.error_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseMapCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ResponseMapCommand.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseMapCommand_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseMapCommand_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseMapCommand.error_details");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseMapCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseMapCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ResponseMapCommand.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseMapCommand.error_details");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseMapCommand)
  return target;
}

size_t ResponseMapCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseMapCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_details());
    }

    // optional .SC2APIProtocol.ResponseMapCommand.Error error = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseMapCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseMapCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseMapCommand::GetClassData() const { return &_class_data_; }


void ResponseMapCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseMapCommand*>(&to_msg);
  auto& from = static_cast<const ResponseMapCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseMapCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_details(from._internal_error_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseMapCommand::CopyFrom(const ResponseMapCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseMapCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMapCommand::IsInitialized() const {
  return true;
}

void ResponseMapCommand::InternalSwap(ResponseMapCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_details_, lhs_arena,
      &other->_impl_.error_details_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseMapCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[13]);
}

// ===================================================================

class RequestLeaveGame::_Internal {
 public:
};

RequestLeaveGame::RequestLeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestLeaveGame)
}
RequestLeaveGame::RequestLeaveGame(const RequestLeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestLeaveGame* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestLeaveGame)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLeaveGame::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestLeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[14]);
}

// ===================================================================

class ResponseLeaveGame::_Internal {
 public:
};

ResponseLeaveGame::ResponseLeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseLeaveGame)
}
ResponseLeaveGame::ResponseLeaveGame(const ResponseLeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseLeaveGame* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseLeaveGame)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLeaveGame::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseLeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[15]);
}

// ===================================================================

class RequestQuickSave::_Internal {
 public:
};

RequestQuickSave::RequestQuickSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQuickSave)
}
RequestQuickSave::RequestQuickSave(const RequestQuickSave& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestQuickSave* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuickSave)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQuickSave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQuickSave::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestQuickSave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[16]);
}

// ===================================================================

class ResponseQuickSave::_Internal {
 public:
};

ResponseQuickSave::ResponseQuickSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQuickSave)
}
ResponseQuickSave::ResponseQuickSave(const ResponseQuickSave& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseQuickSave* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuickSave)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQuickSave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQuickSave::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseQuickSave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[17]);
}

// ===================================================================

class RequestQuickLoad::_Internal {
 public:
};

RequestQuickLoad::RequestQuickLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQuickLoad)
}
RequestQuickLoad::RequestQuickLoad(const RequestQuickLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestQuickLoad* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuickLoad)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQuickLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQuickLoad::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestQuickLoad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[18]);
}

// ===================================================================

class ResponseQuickLoad::_Internal {
 public:
};

ResponseQuickLoad::ResponseQuickLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQuickLoad)
}
ResponseQuickLoad::ResponseQuickLoad(const ResponseQuickLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseQuickLoad* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuickLoad)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQuickLoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQuickLoad::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseQuickLoad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[19]);
}

// ===================================================================

class RequestQuit::_Internal {
 public:
};

RequestQuit::RequestQuit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQuit)
}
RequestQuit::RequestQuit(const RequestQuit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestQuit* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQuit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQuit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestQuit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[20]);
}

// ===================================================================

class ResponseQuit::_Internal {
 public:
};

ResponseQuit::ResponseQuit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQuit)
}
ResponseQuit::ResponseQuit(const ResponseQuit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseQuit* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQuit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQuit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseQuit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[21]);
}

// ===================================================================

class RequestGameInfo::_Internal {
 public:
};

RequestGameInfo::RequestGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestGameInfo)
}
RequestGameInfo::RequestGameInfo(const RequestGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestGameInfo* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestGameInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestGameInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[22]);
}

// ===================================================================

class ResponseGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseGameInfo>()._impl_._has_bits_);
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::StartRaw& start_raw(const ResponseGameInfo* msg);
  static void set_has_start_raw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::InterfaceOptions& options(const ResponseGameInfo* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::SC2APIProtocol::StartRaw&
ResponseGameInfo::_Internal::start_raw(const ResponseGameInfo* msg) {
  return *msg->_impl_.start_raw_;
}
const ::SC2APIProtocol::InterfaceOptions&
ResponseGameInfo::_Internal::options(const ResponseGameInfo* msg) {
  return *msg->_impl_.options_;
}
void ResponseGameInfo::clear_start_raw() {
  if (_impl_.start_raw_ != nullptr) _impl_.start_raw_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ResponseGameInfo::ResponseGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseGameInfo)
}
ResponseGameInfo::ResponseGameInfo(const ResponseGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseGameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){from._impl_.player_info_}
    , decltype(_impl_.mod_names_){from._impl_.mod_names_}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.local_map_path_){}
    , decltype(_impl_.start_raw_){nullptr}
    , decltype(_impl_.options_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_name()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_map_path()) {
    _this->_impl_.local_map_path_.Set(from._internal_local_map_path(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_start_raw()) {
    _this->_impl_.start_raw_ = new ::SC2APIProtocol::StartRaw(*from._impl_.start_raw_);
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::SC2APIProtocol::InterfaceOptions(*from._impl_.options_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseGameInfo)
}

inline void ResponseGameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){arena}
    , decltype(_impl_.mod_names_){arena}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.local_map_path_){}
    , decltype(_impl_.start_raw_){nullptr}
    , decltype(_impl_.options_){nullptr}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseGameInfo::~ResponseGameInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_info_.~RepeatedPtrField();
  _impl_.mod_names_.~RepeatedPtrField();
  _impl_.map_name_.Destroy();
  _impl_.local_map_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_raw_;
  if (this != internal_default_instance()) delete _impl_.options_;
}

void ResponseGameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_info_.Clear();
  _impl_.mod_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.local_map_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.start_raw_ != nullptr);
      _impl_.start_raw_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string map_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseGameInfo.map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string local_map_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseGameInfo.local_map_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.StartRaw start_raw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_raw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.InterfaceOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string mod_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mod_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseGameInfo.mod_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.map_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_name(), target);
  }

  // optional string local_map_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_map_path().data(), static_cast<int>(this->_internal_local_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.local_map_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_map_path(), target);
  }

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.StartRaw start_raw = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::start_raw(this),
        _Internal::start_raw(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // repeated string mod_names = 6;
  for (int i = 0, n = this->_internal_mod_names_size(); i < n; i++) {
    const auto& s = this->_internal_mod_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.mod_names");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseGameInfo)
  return target;
}

size_t ResponseGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  total_size += 1UL * this->_internal_player_info_size();
  for (const auto& msg : this->_impl_.player_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string mod_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.mod_names_.size());
  for (int i = 0, n = _impl_.mod_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.mod_names_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string map_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional string local_map_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_map_path());
    }

    // optional .SC2APIProtocol.StartRaw start_raw = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_raw_);
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.options_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseGameInfo::GetClassData() const { return &_class_data_; }


void ResponseGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseGameInfo*>(&to_msg);
  auto& from = static_cast<const ResponseGameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseGameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_info_.MergeFrom(from._impl_.player_info_);
  _this->_impl_.mod_names_.MergeFrom(from._impl_.mod_names_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_local_map_path(from._internal_local_map_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_start_raw()->::SC2APIProtocol::StartRaw::MergeFrom(
          from._internal_start_raw());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(
          from._internal_options());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseGameInfo::CopyFrom(const ResponseGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGameInfo::IsInitialized() const {
  return true;
}

void ResponseGameInfo::InternalSwap(ResponseGameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_info_.InternalSwap(&other->_impl_.player_info_);
  _impl_.mod_names_.InternalSwap(&other->_impl_.mod_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_map_path_, lhs_arena,
      &other->_impl_.local_map_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseGameInfo, _impl_.options_)
      + sizeof(ResponseGameInfo::_impl_.options_)
      - PROTOBUF_FIELD_OFFSET(ResponseGameInfo, _impl_.start_raw_)>(
          reinterpret_cast<char*>(&_impl_.start_raw_),
          reinterpret_cast<char*>(&other->_impl_.start_raw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[23]);
}

// ===================================================================

class RequestObservation::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestObservation>()._impl_._has_bits_);
  static void set_has_disable_fog(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RequestObservation::RequestObservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestObservation)
}
RequestObservation::RequestObservation(const RequestObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestObservation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disable_fog_){}
    , decltype(_impl_.game_loop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.disable_fog_, &from._impl_.disable_fog_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_loop_) -
    reinterpret_cast<char*>(&_impl_.disable_fog_)) + sizeof(_impl_.game_loop_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestObservation)
}

inline void RequestObservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disable_fog_){false}
    , decltype(_impl_.game_loop_){0u}
  };
}

RequestObservation::~RequestObservation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestObservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestObservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestObservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestObservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.disable_fog_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_loop_) -
        reinterpret_cast<char*>(&_impl_.disable_fog_)) + sizeof(_impl_.game_loop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestObservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool disable_fog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_disable_fog(&has_bits);
          _impl_.disable_fog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_loop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_loop(&has_bits);
          _impl_.game_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestObservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestObservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool disable_fog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_disable_fog(), target);
  }

  // optional uint32 game_loop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_loop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestObservation)
  return target;
}

size_t RequestObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestObservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool disable_fog = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 game_loop = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_loop());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestObservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestObservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestObservation::GetClassData() const { return &_class_data_; }


void RequestObservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestObservation*>(&to_msg);
  auto& from = static_cast<const RequestObservation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestObservation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.disable_fog_ = from._impl_.disable_fog_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_loop_ = from._impl_.game_loop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestObservation::CopyFrom(const RequestObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestObservation::IsInitialized() const {
  return true;
}

void RequestObservation::InternalSwap(RequestObservation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestObservation, _impl_.game_loop_)
      + sizeof(RequestObservation::_impl_.game_loop_)
      - PROTOBUF_FIELD_OFFSET(RequestObservation, _impl_.disable_fog_)>(
          reinterpret_cast<char*>(&_impl_.disable_fog_),
          reinterpret_cast<char*>(&other->_impl_.disable_fog_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestObservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[24]);
}

// ===================================================================

class ResponseObservation::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseObservation>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Observation& observation(const ResponseObservation* msg);
  static void set_has_observation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SC2APIProtocol::Observation&
ResponseObservation::_Internal::observation(const ResponseObservation* msg) {
  return *msg->_impl_.observation_;
}
ResponseObservation::ResponseObservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseObservation)
}
ResponseObservation::ResponseObservation(const ResponseObservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseObservation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actions_){from._impl_.actions_}
    , decltype(_impl_.action_errors_){from._impl_.action_errors_}
    , decltype(_impl_.player_result_){from._impl_.player_result_}
    , decltype(_impl_.chat_){from._impl_.chat_}
    , decltype(_impl_.observation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_observation()) {
    _this->_impl_.observation_ = new ::SC2APIProtocol::Observation(*from._impl_.observation_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseObservation)
}

inline void ResponseObservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actions_){arena}
    , decltype(_impl_.action_errors_){arena}
    , decltype(_impl_.player_result_){arena}
    , decltype(_impl_.chat_){arena}
    , decltype(_impl_.observation_){nullptr}
  };
}

ResponseObservation::~ResponseObservation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseObservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseObservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actions_.~RepeatedPtrField();
  _impl_.action_errors_.~RepeatedPtrField();
  _impl_.player_result_.~RepeatedPtrField();
  _impl_.chat_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.observation_;
}

void ResponseObservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseObservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _impl_.action_errors_.Clear();
  _impl_.player_result_.Clear();
  _impl_.chat_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.observation_ != nullptr);
    _impl_.observation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseObservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.Action actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.ActionError action_errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Observation observation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.PlayerResult player_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.ChatReceived chat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseObservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseObservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Observation observation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::observation(this),
        _Internal::observation(this).GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chat_size()); i < n; i++) {
    const auto& repfield = this->_internal_chat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseObservation)
  return target;
}

size_t ResponseObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseObservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->_impl_.actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  total_size += 1UL * this->_internal_action_errors_size();
  for (const auto& msg : this->_impl_.action_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  total_size += 1UL * this->_internal_player_result_size();
  for (const auto& msg : this->_impl_.player_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  total_size += 1UL * this->_internal_chat_size();
  for (const auto& msg : this->_impl_.chat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .SC2APIProtocol.Observation observation = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.observation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseObservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseObservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseObservation::GetClassData() const { return &_class_data_; }


void ResponseObservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseObservation*>(&to_msg);
  auto& from = static_cast<const ResponseObservation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseObservation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actions_.MergeFrom(from._impl_.actions_);
  _this->_impl_.action_errors_.MergeFrom(from._impl_.action_errors_);
  _this->_impl_.player_result_.MergeFrom(from._impl_.player_result_);
  _this->_impl_.chat_.MergeFrom(from._impl_.chat_);
  if (from._internal_has_observation()) {
    _this->_internal_mutable_observation()->::SC2APIProtocol::Observation::MergeFrom(
        from._internal_observation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseObservation::CopyFrom(const ResponseObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseObservation::IsInitialized() const {
  return true;
}

void ResponseObservation::InternalSwap(ResponseObservation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
  _impl_.action_errors_.InternalSwap(&other->_impl_.action_errors_);
  _impl_.player_result_.InternalSwap(&other->_impl_.player_result_);
  _impl_.chat_.InternalSwap(&other->_impl_.chat_);
  swap(_impl_.observation_, other->_impl_.observation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseObservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[25]);
}

// ===================================================================

class ChatReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatReceived>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatReceived::ChatReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ChatReceived)
}
ChatReceived::ChatReceived(const ChatReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ChatReceived)
}

inline void ChatReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.player_id_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatReceived::~ChatReceived() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ChatReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ChatReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ChatReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.player_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ChatReceived.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ChatReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ChatReceived.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ChatReceived)
  return target;
}

size_t ChatReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ChatReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatReceived::GetClassData() const { return &_class_data_; }


void ChatReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatReceived*>(&to_msg);
  auto& from = static_cast<const ChatReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ChatReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatReceived::CopyFrom(const ChatReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ChatReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReceived::IsInitialized() const {
  return true;
}

void ChatReceived::InternalSwap(ChatReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[26]);
}

// ===================================================================

class RequestAction::_Internal {
 public:
};

RequestAction::RequestAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestAction)
}
RequestAction::RequestAction(const RequestAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actions_){from._impl_.actions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestAction)
}

inline void RequestAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestAction::~RequestAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actions_.~RepeatedPtrField();
}

void RequestAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.Action actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestAction)
  return target;
}

size_t RequestAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->_impl_.actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAction::GetClassData() const { return &_class_data_; }


void RequestAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestAction*>(&to_msg);
  auto& from = static_cast<const RequestAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actions_.MergeFrom(from._impl_.actions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAction::CopyFrom(const RequestAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAction::IsInitialized() const {
  return true;
}

void RequestAction::InternalSwap(RequestAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[27]);
}

// ===================================================================

class ResponseAction::_Internal {
 public:
};

ResponseAction::ResponseAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseAction)
}
ResponseAction::ResponseAction(const ResponseAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseAction)
}

inline void ResponseAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseAction::~ResponseAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedField();
}

void ResponseAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.ActionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionResult_IsValid(val))) {
              _internal_add_result(static_cast<::SC2APIProtocol::ActionResult>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_result(), ptr, ctx, ::SC2APIProtocol::ActionResult_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ActionResult result = 1;
  for (int i = 0, n = this->_internal_result_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseAction)
  return target;
}

size_t ResponseAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ActionResult result = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_result_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_result(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseAction::GetClassData() const { return &_class_data_; }


void ResponseAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseAction*>(&to_msg);
  auto& from = static_cast<const ResponseAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseAction::CopyFrom(const ResponseAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAction::IsInitialized() const {
  return true;
}

void ResponseAction::InternalSwap(ResponseAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[28]);
}

// ===================================================================

class RequestObserverAction::_Internal {
 public:
};

RequestObserverAction::RequestObserverAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestObserverAction)
}
RequestObserverAction::RequestObserverAction(const RequestObserverAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestObserverAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actions_){from._impl_.actions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestObserverAction)
}

inline void RequestObserverAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestObserverAction::~RequestObserverAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestObserverAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestObserverAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actions_.~RepeatedPtrField();
}

void RequestObserverAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestObserverAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestObserverAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestObserverAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.ObserverAction actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestObserverAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestObserverAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ObserverAction actions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestObserverAction)
  return target;
}

size_t RequestObserverAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestObserverAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ObserverAction actions = 1;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->_impl_.actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestObserverAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestObserverAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestObserverAction::GetClassData() const { return &_class_data_; }


void RequestObserverAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestObserverAction*>(&to_msg);
  auto& from = static_cast<const RequestObserverAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestObserverAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actions_.MergeFrom(from._impl_.actions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestObserverAction::CopyFrom(const RequestObserverAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestObserverAction::IsInitialized() const {
  return true;
}

void RequestObserverAction::InternalSwap(RequestObserverAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestObserverAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[29]);
}

// ===================================================================

class ResponseObserverAction::_Internal {
 public:
};

ResponseObserverAction::ResponseObserverAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseObserverAction)
}
ResponseObserverAction::ResponseObserverAction(const ResponseObserverAction& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseObserverAction* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseObserverAction)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseObserverAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseObserverAction::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseObserverAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[30]);
}

// ===================================================================

class RequestStep::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestStep>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestStep::RequestStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestStep)
}
RequestStep::RequestStep(const RequestStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestStep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestStep)
}

inline void RequestStep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){0u}
  };
}

RequestStep::~RequestStep() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestStep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestStep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestStep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestStep)
  return target;
}

size_t RequestStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestStep::GetClassData() const { return &_class_data_; }


void RequestStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestStep*>(&to_msg);
  auto& from = static_cast<const RequestStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestStep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_count()) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestStep::CopyFrom(const RequestStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStep::IsInitialized() const {
  return true;
}

void RequestStep::InternalSwap(RequestStep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[31]);
}

// ===================================================================

class ResponseStep::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseStep>()._impl_._has_bits_);
  static void set_has_simulation_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseStep::ResponseStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseStep)
}
ResponseStep::ResponseStep(const ResponseStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseStep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.simulation_loop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.simulation_loop_ = from._impl_.simulation_loop_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseStep)
}

inline void ResponseStep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.simulation_loop_){0u}
  };
}

ResponseStep::~ResponseStep() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseStep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseStep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.simulation_loop_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseStep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 simulation_loop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_simulation_loop(&has_bits);
          _impl_.simulation_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 simulation_loop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_simulation_loop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseStep)
  return target;
}

size_t ResponseStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 simulation_loop = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_simulation_loop());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseStep::GetClassData() const { return &_class_data_; }


void ResponseStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseStep*>(&to_msg);
  auto& from = static_cast<const ResponseStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseStep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_simulation_loop()) {
    _this->_internal_set_simulation_loop(from._internal_simulation_loop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseStep::CopyFrom(const ResponseStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStep::IsInitialized() const {
  return true;
}

void ResponseStep::InternalSwap(ResponseStep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.simulation_loop_, other->_impl_.simulation_loop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseStep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[32]);
}

// ===================================================================

class RequestData::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestData>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upgrade_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buff_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_effect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RequestData::RequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestData)
}
RequestData::RequestData(const RequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.unit_type_id_){}
    , decltype(_impl_.upgrade_id_){}
    , decltype(_impl_.buff_id_){}
    , decltype(_impl_.effect_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.effect_id_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.effect_id_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestData)
}

inline void RequestData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){false}
    , decltype(_impl_.unit_type_id_){false}
    , decltype(_impl_.upgrade_id_){false}
    , decltype(_impl_.buff_id_){false}
    , decltype(_impl_.effect_id_){false}
  };
}

RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.effect_id_) -
        reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.effect_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unit_type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unit_type_id(&has_bits);
          _impl_.unit_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool upgrade_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upgrade_id(&has_bits);
          _impl_.upgrade_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool buff_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_buff_id(&has_bits);
          _impl_.buff_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool effect_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_effect_id(&has_bits);
          _impl_.effect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ability_id(), target);
  }

  // optional bool unit_type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unit_type_id(), target);
  }

  // optional bool upgrade_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_upgrade_id(), target);
  }

  // optional bool buff_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_buff_id(), target);
  }

  // optional bool effect_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_effect_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestData)
  return target;
}

size_t RequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool unit_type_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool upgrade_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool buff_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool effect_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestData::GetClassData() const { return &_class_data_; }


void RequestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestData*>(&to_msg);
  auto& from = static_cast<const RequestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unit_type_id_ = from._impl_.unit_type_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.upgrade_id_ = from._impl_.upgrade_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.buff_id_ = from._impl_.buff_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.effect_id_ = from._impl_.effect_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestData::IsInitialized() const {
  return true;
}

void RequestData::InternalSwap(RequestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestData, _impl_.effect_id_)
      + sizeof(RequestData::_impl_.effect_id_)
      - PROTOBUF_FIELD_OFFSET(RequestData, _impl_.ability_id_)>(
          reinterpret_cast<char*>(&_impl_.ability_id_),
          reinterpret_cast<char*>(&other->_impl_.ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[33]);
}

// ===================================================================

class ResponseData::_Internal {
 public:
};

void ResponseData::clear_abilities() {
  _impl_.abilities_.Clear();
}
void ResponseData::clear_units() {
  _impl_.units_.Clear();
}
void ResponseData::clear_upgrades() {
  _impl_.upgrades_.Clear();
}
void ResponseData::clear_buffs() {
  _impl_.buffs_.Clear();
}
void ResponseData::clear_effects() {
  _impl_.effects_.Clear();
}
ResponseData::ResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseData)
}
ResponseData::ResponseData(const ResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.units_){from._impl_.units_}
    , decltype(_impl_.upgrades_){from._impl_.upgrades_}
    , decltype(_impl_.buffs_){from._impl_.buffs_}
    , decltype(_impl_.effects_){from._impl_.effects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseData)
}

inline void ResponseData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.abilities_){arena}
    , decltype(_impl_.units_){arena}
    , decltype(_impl_.upgrades_){arena}
    , decltype(_impl_.buffs_){arena}
    , decltype(_impl_.effects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.units_.~RepeatedPtrField();
  _impl_.upgrades_.~RepeatedPtrField();
  _impl_.buffs_.~RepeatedPtrField();
  _impl_.effects_.~RepeatedPtrField();
}

void ResponseData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  _impl_.units_.Clear();
  _impl_.upgrades_.Clear();
  _impl_.buffs_.Clear();
  _impl_.effects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.AbilityData abilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.UnitTypeData units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upgrades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.BuffData buffs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.EffectData effects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_upgrades_size()); i < n; i++) {
    const auto& repfield = this->_internal_upgrades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.EffectData effects = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_effects_size()); i < n; i++) {
    const auto& repfield = this->_internal_effects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseData)
  return target;
}

size_t ResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->_impl_.units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  total_size += 1UL * this->_internal_upgrades_size();
  for (const auto& msg : this->_impl_.upgrades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  total_size += 1UL * this->_internal_buffs_size();
  for (const auto& msg : this->_impl_.buffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.EffectData effects = 5;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->_impl_.effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseData::GetClassData() const { return &_class_data_; }


void ResponseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseData*>(&to_msg);
  auto& from = static_cast<const ResponseData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  _this->_impl_.units_.MergeFrom(from._impl_.units_);
  _this->_impl_.upgrades_.MergeFrom(from._impl_.upgrades_);
  _this->_impl_.buffs_.MergeFrom(from._impl_.buffs_);
  _this->_impl_.effects_.MergeFrom(from._impl_.effects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseData::IsInitialized() const {
  return true;
}

void ResponseData::InternalSwap(ResponseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  _impl_.units_.InternalSwap(&other->_impl_.units_);
  _impl_.upgrades_.InternalSwap(&other->_impl_.upgrades_);
  _impl_.buffs_.InternalSwap(&other->_impl_.buffs_);
  _impl_.effects_.InternalSwap(&other->_impl_.effects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[34]);
}

// ===================================================================

class RequestSaveReplay::_Internal {
 public:
};

RequestSaveReplay::RequestSaveReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestSaveReplay)
}
RequestSaveReplay::RequestSaveReplay(const RequestSaveReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestSaveReplay* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestSaveReplay)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSaveReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSaveReplay::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestSaveReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[35]);
}

// ===================================================================

class ResponseSaveReplay::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseSaveReplay>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseSaveReplay::ResponseSaveReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseSaveReplay)
}
ResponseSaveReplay::ResponseSaveReplay(const ResponseSaveReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseSaveReplay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseSaveReplay)
}

inline void ResponseSaveReplay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseSaveReplay::~ResponseSaveReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseSaveReplay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseSaveReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ResponseSaveReplay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseSaveReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseSaveReplay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseSaveReplay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseSaveReplay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseSaveReplay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseSaveReplay)
  return target;
}

size_t ResponseSaveReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseSaveReplay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseSaveReplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseSaveReplay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseSaveReplay::GetClassData() const { return &_class_data_; }


void ResponseSaveReplay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseSaveReplay*>(&to_msg);
  auto& from = static_cast<const ResponseSaveReplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseSaveReplay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseSaveReplay::CopyFrom(const ResponseSaveReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSaveReplay::IsInitialized() const {
  return true;
}

void ResponseSaveReplay::InternalSwap(ResponseSaveReplay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSaveReplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[36]);
}

// ===================================================================

class RequestReplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestReplayInfo>()._impl_._has_bits_);
  static void set_has_download_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestReplayInfo::RequestReplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestReplayInfo)
}
RequestReplayInfo::RequestReplayInfo(const RequestReplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestReplayInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.download_data_){}
    , decltype(_impl_.replay_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.download_data_ = from._impl_.download_data_;
  clear_has_replay();
  switch (from.replay_case()) {
    case kReplayPath: {
      _this->_internal_set_replay_path(from._internal_replay_path());
      break;
    }
    case kReplayData: {
      _this->_internal_set_replay_data(from._internal_replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestReplayInfo)
}

inline void RequestReplayInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.download_data_){false}
    , decltype(_impl_.replay_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_replay();
}

RequestReplayInfo::~RequestReplayInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestReplayInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestReplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_replay()) {
    clear_replay();
  }
}

void RequestReplayInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestReplayInfo::clear_replay() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestReplayInfo)
  switch (replay_case()) {
    case kReplayPath: {
      _impl_.replay_.replay_path_.Destroy();
      break;
    }
    case kReplayData: {
      _impl_.replay_.replay_data_.Destroy();
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REPLAY_NOT_SET;
}


void RequestReplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestReplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.download_data_ = false;
  clear_replay();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestReplayInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string replay_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_replay_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestReplayInfo.replay_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes replay_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_replay_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_download_data(&has_bits);
          _impl_.download_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestReplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestReplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (replay_case()) {
    case kReplayPath: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_replay_path().data(), static_cast<int>(this->_internal_replay_path().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "SC2APIProtocol.RequestReplayInfo.replay_path");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_replay_path(), target);
      break;
    }
    case kReplayData: {
      target = stream->WriteBytesMaybeAliased(
          2, this->_internal_replay_data(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional bool download_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_download_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestReplayInfo)
  return target;
}

size_t RequestReplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestReplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool download_data = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  switch (replay_case()) {
    // string replay_path = 1;
    case kReplayPath: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_replay_path());
      break;
    }
    // bytes replay_data = 2;
    case kReplayData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestReplayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestReplayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestReplayInfo::GetClassData() const { return &_class_data_; }


void RequestReplayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestReplayInfo*>(&to_msg);
  auto& from = static_cast<const RequestReplayInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestReplayInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_download_data()) {
    _this->_internal_set_download_data(from._internal_download_data());
  }
  switch (from.replay_case()) {
    case kReplayPath: {
      _this->_internal_set_replay_path(from._internal_replay_path());
      break;
    }
    case kReplayData: {
      _this->_internal_set_replay_data(from._internal_replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestReplayInfo::CopyFrom(const RequestReplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReplayInfo::IsInitialized() const {
  return true;
}

void RequestReplayInfo::InternalSwap(RequestReplayInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.download_data_, other->_impl_.download_data_);
  swap(_impl_.replay_, other->_impl_.replay_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestReplayInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[37]);
}

// ===================================================================

class PlayerInfoExtra::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfoExtra>()._impl_._has_bits_);
  static const ::SC2APIProtocol::PlayerInfo& player_info(const PlayerInfoExtra* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::PlayerResult& player_result(const PlayerInfoExtra* msg);
  static void set_has_player_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_apm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::SC2APIProtocol::PlayerInfo&
PlayerInfoExtra::_Internal::player_info(const PlayerInfoExtra* msg) {
  return *msg->_impl_.player_info_;
}
const ::SC2APIProtocol::PlayerResult&
PlayerInfoExtra::_Internal::player_result(const PlayerInfoExtra* msg) {
  return *msg->_impl_.player_result_;
}
PlayerInfoExtra::PlayerInfoExtra(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.PlayerInfoExtra)
}
PlayerInfoExtra::PlayerInfoExtra(const PlayerInfoExtra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfoExtra* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.player_result_){nullptr}
    , decltype(_impl_.player_mmr_){}
    , decltype(_impl_.player_apm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::SC2APIProtocol::PlayerInfo(*from._impl_.player_info_);
  }
  if (from._internal_has_player_result()) {
    _this->_impl_.player_result_ = new ::SC2APIProtocol::PlayerResult(*from._impl_.player_result_);
  }
  ::memcpy(&_impl_.player_mmr_, &from._impl_.player_mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_apm_) -
    reinterpret_cast<char*>(&_impl_.player_mmr_)) + sizeof(_impl_.player_apm_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerInfoExtra)
}

inline void PlayerInfoExtra::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.player_result_){nullptr}
    , decltype(_impl_.player_mmr_){0}
    , decltype(_impl_.player_apm_){0}
  };
}

PlayerInfoExtra::~PlayerInfoExtra() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerInfoExtra)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfoExtra::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_info_;
  if (this != internal_default_instance()) delete _impl_.player_result_;
}

void PlayerInfoExtra::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfoExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerInfoExtra)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.player_info_ != nullptr);
      _impl_.player_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.player_result_ != nullptr);
      _impl_.player_result_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.player_mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_apm_) -
        reinterpret_cast<char*>(&_impl_.player_mmr_)) + sizeof(_impl_.player_apm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoExtra::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.PlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.PlayerResult player_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_mmr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_mmr(&has_bits);
          _impl_.player_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_apm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_player_apm(&has_bits);
          _impl_.player_apm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfoExtra::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerInfoExtra)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.PlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.PlayerResult player_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player_result(this),
        _Internal::player_result(this).GetCachedSize(), target, stream);
  }

  // optional int32 player_mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_mmr(), target);
  }

  // optional int32 player_apm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_apm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerInfoExtra)
  return target;
}

size_t PlayerInfoExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerInfoExtra)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .SC2APIProtocol.PlayerInfo player_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_info_);
    }

    // optional .SC2APIProtocol.PlayerResult player_result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_result_);
    }

    // optional int32 player_mmr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_mmr());
    }

    // optional int32 player_apm = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_apm());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfoExtra::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfoExtra::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfoExtra::GetClassData() const { return &_class_data_; }


void PlayerInfoExtra::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfoExtra*>(&to_msg);
  auto& from = static_cast<const PlayerInfoExtra&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerInfoExtra)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_player_info()->::SC2APIProtocol::PlayerInfo::MergeFrom(
          from._internal_player_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_player_result()->::SC2APIProtocol::PlayerResult::MergeFrom(
          from._internal_player_result());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_mmr_ = from._impl_.player_mmr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_apm_ = from._impl_.player_apm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfoExtra::CopyFrom(const PlayerInfoExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoExtra::IsInitialized() const {
  return true;
}

void PlayerInfoExtra::InternalSwap(PlayerInfoExtra* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfoExtra, _impl_.player_apm_)
      + sizeof(PlayerInfoExtra::_impl_.player_apm_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfoExtra, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoExtra::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[38]);
}

// ===================================================================

class ResponseReplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseReplayInfo>()._impl_._has_bits_);
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_duration_loops(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_build(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_base_build(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_error_details(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ResponseReplayInfo::ResponseReplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseReplayInfo)
}
ResponseReplayInfo::ResponseReplayInfo(const ResponseReplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseReplayInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){from._impl_.player_info_}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.local_map_path_){}
    , decltype(_impl_.game_version_){}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.data_version_){}
    , decltype(_impl_.game_duration_loops_){}
    , decltype(_impl_.game_duration_seconds_){}
    , decltype(_impl_.data_build_){}
    , decltype(_impl_.base_build_){}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_name()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.local_map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_map_path()) {
    _this->_impl_.local_map_path_.Set(from._internal_local_map_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_version()) {
    _this->_impl_.game_version_.Set(from._internal_game_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_details()) {
    _this->_impl_.error_details_.Set(from._internal_error_details(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data_version()) {
    _this->_impl_.data_version_.Set(from._internal_data_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.game_duration_loops_, &from._impl_.game_duration_loops_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.game_duration_loops_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseReplayInfo)
}

inline void ResponseReplayInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_info_){arena}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.local_map_path_){}
    , decltype(_impl_.game_version_){}
    , decltype(_impl_.error_details_){}
    , decltype(_impl_.data_version_){}
    , decltype(_impl_.game_duration_loops_){0u}
    , decltype(_impl_.game_duration_seconds_){0}
    , decltype(_impl_.data_build_){0u}
    , decltype(_impl_.base_build_){0u}
    , decltype(_impl_.error_){1}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.local_map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseReplayInfo::~ResponseReplayInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseReplayInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseReplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_info_.~RepeatedPtrField();
  _impl_.map_name_.Destroy();
  _impl_.local_map_path_.Destroy();
  _impl_.game_version_.Destroy();
  _impl_.error_details_.Destroy();
  _impl_.data_version_.Destroy();
}

void ResponseReplayInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseReplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseReplayInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.local_map_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.game_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.error_details_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.data_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.game_duration_loops_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_build_) -
        reinterpret_cast<char*>(&_impl_.game_duration_loops_)) + sizeof(_impl_.data_build_));
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.base_build_ = 0u;
    _impl_.error_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseReplayInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string map_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseReplayInfo.map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string local_map_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseReplayInfo.local_map_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_duration_loops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_duration_loops(&has_bits);
          _impl_.game_duration_loops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float game_duration_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_game_duration_seconds(&has_bits);
          _impl_.game_duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string game_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_game_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseReplayInfo.game_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_build = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_data_build(&has_bits);
          _impl_.data_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_build = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_base_build(&has_bits);
          _impl_.base_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseReplayInfo_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseReplayInfo_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_details = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_error_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseReplayInfo.error_details");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string data_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_data_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseReplayInfo.data_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseReplayInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseReplayInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.map_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_name(), target);
  }

  // optional string local_map_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_map_path().data(), static_cast<int>(this->_internal_local_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.local_map_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_map_path(), target);
  }

  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 game_duration_loops = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_duration_loops(), target);
  }

  // optional float game_duration_seconds = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_game_duration_seconds(), target);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_version().data(), static_cast<int>(this->_internal_game_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.game_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_game_version(), target);
  }

  // optional uint32 data_build = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_build(), target);
  }

  // optional uint32 base_build = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base_build(), target);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_error(), target);
  }

  // optional string error_details = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_details().data(), static_cast<int>(this->_internal_error_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.error_details");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_error_details(), target);
  }

  // optional string data_version = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data_version().data(), static_cast<int>(this->_internal_data_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.data_version");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_data_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseReplayInfo)
  return target;
}

size_t ResponseReplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseReplayInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  total_size += 1UL * this->_internal_player_info_size();
  for (const auto& msg : this->_impl_.player_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional string local_map_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_map_path());
    }

    // optional string game_version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_version());
    }

    // optional string error_details = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_details());
    }

    // optional string data_version = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_version());
    }

    // optional uint32 game_duration_loops = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_duration_loops());
    }

    // optional float game_duration_seconds = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 data_build = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_build());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 base_build = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_build());
    }

    // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseReplayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseReplayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseReplayInfo::GetClassData() const { return &_class_data_; }


void ResponseReplayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseReplayInfo*>(&to_msg);
  auto& from = static_cast<const ResponseReplayInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseReplayInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_info_.MergeFrom(from._impl_.player_info_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_local_map_path(from._internal_local_map_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_game_version(from._internal_game_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_error_details(from._internal_error_details());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_data_version(from._internal_data_version());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.game_duration_loops_ = from._impl_.game_duration_loops_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_duration_seconds_ = from._impl_.game_duration_seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.data_build_ = from._impl_.data_build_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.base_build_ = from._impl_.base_build_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseReplayInfo::CopyFrom(const ResponseReplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseReplayInfo::IsInitialized() const {
  return true;
}

void ResponseReplayInfo::InternalSwap(ResponseReplayInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_info_.InternalSwap(&other->_impl_.player_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_map_path_, lhs_arena,
      &other->_impl_.local_map_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_version_, lhs_arena,
      &other->_impl_.game_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_details_, lhs_arena,
      &other->_impl_.error_details_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_version_, lhs_arena,
      &other->_impl_.data_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseReplayInfo, _impl_.base_build_)
      + sizeof(ResponseReplayInfo::_impl_.base_build_)
      - PROTOBUF_FIELD_OFFSET(ResponseReplayInfo, _impl_.game_duration_loops_)>(
          reinterpret_cast<char*>(&_impl_.game_duration_loops_),
          reinterpret_cast<char*>(&other->_impl_.game_duration_loops_));
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseReplayInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[39]);
}

// ===================================================================

class RequestAvailableMaps::_Internal {
 public:
};

RequestAvailableMaps::RequestAvailableMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestAvailableMaps)
}
RequestAvailableMaps::RequestAvailableMaps(const RequestAvailableMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestAvailableMaps* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestAvailableMaps)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAvailableMaps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAvailableMaps::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestAvailableMaps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[40]);
}

// ===================================================================

class ResponseAvailableMaps::_Internal {
 public:
};

ResponseAvailableMaps::ResponseAvailableMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseAvailableMaps)
}
ResponseAvailableMaps::ResponseAvailableMaps(const ResponseAvailableMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseAvailableMaps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_map_paths_){from._impl_.local_map_paths_}
    , decltype(_impl_.battlenet_map_names_){from._impl_.battlenet_map_names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseAvailableMaps)
}

inline void ResponseAvailableMaps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_map_paths_){arena}
    , decltype(_impl_.battlenet_map_names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseAvailableMaps::~ResponseAvailableMaps() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseAvailableMaps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseAvailableMaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_map_paths_.~RepeatedPtrField();
  _impl_.battlenet_map_names_.~RepeatedPtrField();
}

void ResponseAvailableMaps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseAvailableMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseAvailableMaps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_map_paths_.Clear();
  _impl_.battlenet_map_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseAvailableMaps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string local_map_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_local_map_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string battlenet_map_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_battlenet_map_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseAvailableMaps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseAvailableMaps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string local_map_paths = 1;
  for (int i = 0, n = this->_internal_local_map_paths_size(); i < n; i++) {
    const auto& s = this->_internal_local_map_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
    target = stream->WriteString(1, s, target);
  }

  // repeated string battlenet_map_names = 2;
  for (int i = 0, n = this->_internal_battlenet_map_names_size(); i < n; i++) {
    const auto& s = this->_internal_battlenet_map_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseAvailableMaps)
  return target;
}

size_t ResponseAvailableMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseAvailableMaps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string local_map_paths = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.local_map_paths_.size());
  for (int i = 0, n = _impl_.local_map_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.local_map_paths_.Get(i));
  }

  // repeated string battlenet_map_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.battlenet_map_names_.size());
  for (int i = 0, n = _impl_.battlenet_map_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.battlenet_map_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseAvailableMaps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseAvailableMaps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseAvailableMaps::GetClassData() const { return &_class_data_; }


void ResponseAvailableMaps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseAvailableMaps*>(&to_msg);
  auto& from = static_cast<const ResponseAvailableMaps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseAvailableMaps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_map_paths_.MergeFrom(from._impl_.local_map_paths_);
  _this->_impl_.battlenet_map_names_.MergeFrom(from._impl_.battlenet_map_names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseAvailableMaps::CopyFrom(const ResponseAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAvailableMaps::IsInitialized() const {
  return true;
}

void ResponseAvailableMaps::InternalSwap(ResponseAvailableMaps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.local_map_paths_.InternalSwap(&other->_impl_.local_map_paths_);
  _impl_.battlenet_map_names_.InternalSwap(&other->_impl_.battlenet_map_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseAvailableMaps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[41]);
}

// ===================================================================

class RequestSaveMap::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestSaveMap>()._impl_._has_bits_);
  static void set_has_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RequestSaveMap::RequestSaveMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestSaveMap)
}
RequestSaveMap::RequestSaveMap(const RequestSaveMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestSaveMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_path_){}
    , decltype(_impl_.map_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_path()) {
    _this->_impl_.map_path_.Set(from._internal_map_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.map_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_data()) {
    _this->_impl_.map_data_.Set(from._internal_map_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestSaveMap)
}

inline void RequestSaveMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_path_){}
    , decltype(_impl_.map_data_){}
  };
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.map_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestSaveMap::~RequestSaveMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestSaveMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestSaveMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_path_.Destroy();
  _impl_.map_data_.Destroy();
}

void RequestSaveMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestSaveMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestSaveMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.map_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSaveMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string map_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.RequestSaveMap.map_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes map_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_map_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestSaveMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestSaveMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_path().data(), static_cast<int>(this->_internal_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestSaveMap.map_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_path(), target);
  }

  // optional bytes map_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_map_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestSaveMap)
  return target;
}

size_t RequestSaveMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestSaveMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_path());
    }

    // optional bytes map_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_map_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSaveMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestSaveMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSaveMap::GetClassData() const { return &_class_data_; }


void RequestSaveMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestSaveMap*>(&to_msg);
  auto& from = static_cast<const RequestSaveMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestSaveMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_path(from._internal_map_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_map_data(from._internal_map_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestSaveMap::CopyFrom(const RequestSaveMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSaveMap::IsInitialized() const {
  return true;
}

void RequestSaveMap::InternalSwap(RequestSaveMap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_path_, lhs_arena,
      &other->_impl_.map_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_data_, lhs_arena,
      &other->_impl_.map_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSaveMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[42]);
}

// ===================================================================

class ResponseSaveMap::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseSaveMap>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseSaveMap::ResponseSaveMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseSaveMap)
}
ResponseSaveMap::ResponseSaveMap(const ResponseSaveMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseSaveMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseSaveMap)
}

inline void ResponseSaveMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){1}
  };
}

ResponseSaveMap::~ResponseSaveMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseSaveMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseSaveMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseSaveMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseSaveMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseSaveMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseSaveMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ResponseSaveMap_Error_IsValid(val))) {
            _internal_set_error(static_cast<::SC2APIProtocol::ResponseSaveMap_Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseSaveMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseSaveMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseSaveMap)
  return target;
}

size_t ResponseSaveMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseSaveMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseSaveMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseSaveMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseSaveMap::GetClassData() const { return &_class_data_; }


void ResponseSaveMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseSaveMap*>(&to_msg);
  auto& from = static_cast<const ResponseSaveMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseSaveMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseSaveMap::CopyFrom(const ResponseSaveMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSaveMap::IsInitialized() const {
  return true;
}

void ResponseSaveMap::InternalSwap(ResponseSaveMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseSaveMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[43]);
}

// ===================================================================

class RequestPing::_Internal {
 public:
};

RequestPing::RequestPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestPing)
}
RequestPing::RequestPing(const RequestPing& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestPing* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestPing)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPing::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[44]);
}

// ===================================================================

class ResponsePing::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponsePing>()._impl_._has_bits_);
  static void set_has_game_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_build(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ResponsePing::ResponsePing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponsePing)
}
ResponsePing::ResponsePing(const ResponsePing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponsePing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_version_){}
    , decltype(_impl_.data_version_){}
    , decltype(_impl_.data_build_){}
    , decltype(_impl_.base_build_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_version()) {
    _this->_impl_.game_version_.Set(from._internal_game_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data_version()) {
    _this->_impl_.data_version_.Set(from._internal_data_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.data_build_, &from._impl_.data_build_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_build_) -
    reinterpret_cast<char*>(&_impl_.data_build_)) + sizeof(_impl_.base_build_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponsePing)
}

inline void ResponsePing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_version_){}
    , decltype(_impl_.data_version_){}
    , decltype(_impl_.data_build_){0u}
    , decltype(_impl_.base_build_){0u}
  };
  _impl_.game_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponsePing::~ResponsePing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponsePing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponsePing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_version_.Destroy();
  _impl_.data_version_.Destroy();
}

void ResponsePing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponsePing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponsePing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.data_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.data_build_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_build_) -
        reinterpret_cast<char*>(&_impl_.data_build_)) + sizeof(_impl_.base_build_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string game_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_game_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponsePing.game_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string data_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ResponsePing.data_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 data_build = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_build(&has_bits);
          _impl_.data_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_build = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_base_build(&has_bits);
          _impl_.base_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponsePing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponsePing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string game_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_version().data(), static_cast<int>(this->_internal_game_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.game_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_version(), target);
  }

  // optional string data_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data_version().data(), static_cast<int>(this->_internal_data_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.data_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data_version(), target);
  }

  // optional uint32 data_build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_build(), target);
  }

  // optional uint32 base_build = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_base_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponsePing)
  return target;
}

size_t ResponsePing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponsePing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string game_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_version());
    }

    // optional string data_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_version());
    }

    // optional uint32 data_build = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_build());
    }

    // optional uint32 base_build = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_build());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponsePing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponsePing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponsePing::GetClassData() const { return &_class_data_; }


void ResponsePing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponsePing*>(&to_msg);
  auto& from = static_cast<const ResponsePing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponsePing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_version(from._internal_game_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_data_version(from._internal_data_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_build_ = from._impl_.data_build_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.base_build_ = from._impl_.base_build_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponsePing::CopyFrom(const ResponsePing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponsePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePing::IsInitialized() const {
  return true;
}

void ResponsePing::InternalSwap(ResponsePing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_version_, lhs_arena,
      &other->_impl_.game_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_version_, lhs_arena,
      &other->_impl_.data_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePing, _impl_.base_build_)
      + sizeof(ResponsePing::_impl_.base_build_)
      - PROTOBUF_FIELD_OFFSET(ResponsePing, _impl_.data_build_)>(
          reinterpret_cast<char*>(&_impl_.data_build_),
          reinterpret_cast<char*>(&other->_impl_.data_build_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[45]);
}

// ===================================================================

class RequestDebug::_Internal {
 public:
};

void RequestDebug::clear_debug() {
  _impl_.debug_.Clear();
}
RequestDebug::RequestDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestDebug)
}
RequestDebug::RequestDebug(const RequestDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestDebug* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_){from._impl_.debug_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestDebug)
}

inline void RequestDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestDebug::~RequestDebug() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debug_.~RepeatedPtrField();
}

void RequestDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.DebugCommand debug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestDebug)
  return target;
}

size_t RequestDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  total_size += 1UL * this->_internal_debug_size();
  for (const auto& msg : this->_impl_.debug_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestDebug::GetClassData() const { return &_class_data_; }


void RequestDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestDebug*>(&to_msg);
  auto& from = static_cast<const RequestDebug&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestDebug)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.debug_.MergeFrom(from._impl_.debug_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestDebug::CopyFrom(const RequestDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDebug::IsInitialized() const {
  return true;
}

void RequestDebug::InternalSwap(RequestDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.debug_.InternalSwap(&other->_impl_.debug_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[46]);
}

// ===================================================================

class ResponseDebug::_Internal {
 public:
};

ResponseDebug::ResponseDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseDebug)
}
ResponseDebug::ResponseDebug(const ResponseDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseDebug* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseDebug)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseDebug::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[47]);
}

// ===================================================================

class PlayerSetup::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerSetup>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_race(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ai_build(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerSetup::PlayerSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.PlayerSetup)
}
PlayerSetup::PlayerSetup(const PlayerSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSetup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.race_){}
    , decltype(_impl_.ai_build_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.difficulty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.race_, &from._impl_.race_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.difficulty_) -
    reinterpret_cast<char*>(&_impl_.race_)) + sizeof(_impl_.difficulty_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerSetup)
}

inline void PlayerSetup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.race_){0}
    , decltype(_impl_.ai_build_){1}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.difficulty_){1}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerSetup::~PlayerSetup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerSetup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void PlayerSetup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerSetup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.player_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    _impl_.race_ = 0;
    _impl_.ai_build_ = 1;
    _impl_.type_ = 1;
    _impl_.difficulty_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSetup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.PlayerType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::PlayerType_IsValid(val))) {
            _internal_set_type(static_cast<::SC2APIProtocol::PlayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Race race = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Race_IsValid(val))) {
            _internal_set_race(static_cast<::SC2APIProtocol::Race>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Difficulty difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Difficulty_IsValid(val))) {
            _internal_set_difficulty(static_cast<::SC2APIProtocol::Difficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.PlayerSetup.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.AIBuild ai_build = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::AIBuild_IsValid(val))) {
            _internal_set_ai_build(static_cast<::SC2APIProtocol::AIBuild>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSetup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerSetup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.PlayerType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .SC2APIProtocol.Race race = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_race(), target);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_difficulty(), target);
  }

  // optional string player_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.PlayerSetup.player_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_player_name(), target);
  }

  // optional .SC2APIProtocol.AIBuild ai_build = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ai_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerSetup)
  return target;
}

size_t PlayerSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerSetup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string player_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional .SC2APIProtocol.Race race = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_race());
    }

    // optional .SC2APIProtocol.AIBuild ai_build = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ai_build());
    }

    // optional .SC2APIProtocol.PlayerType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .SC2APIProtocol.Difficulty difficulty = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSetup::GetClassData() const { return &_class_data_; }


void PlayerSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSetup*>(&to_msg);
  auto& from = static_cast<const PlayerSetup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerSetup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.race_ = from._impl_.race_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ai_build_ = from._impl_.ai_build_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.difficulty_ = from._impl_.difficulty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSetup::CopyFrom(const PlayerSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSetup::IsInitialized() const {
  return true;
}

void PlayerSetup::InternalSwap(PlayerSetup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.race_, other->_impl_.race_);
  swap(_impl_.ai_build_, other->_impl_.ai_build_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.difficulty_, other->_impl_.difficulty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSetup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[48]);
}

// ===================================================================

class SpatialCameraSetup::_Internal {
 public:
  using HasBits = decltype(std::declval<SpatialCameraSetup>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Size2DI& resolution(const SpatialCameraSetup* msg);
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Size2DI& minimap_resolution(const SpatialCameraSetup* msg);
  static void set_has_minimap_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crop_to_playable_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_cheating_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::SC2APIProtocol::Size2DI&
SpatialCameraSetup::_Internal::resolution(const SpatialCameraSetup* msg) {
  return *msg->_impl_.resolution_;
}
const ::SC2APIProtocol::Size2DI&
SpatialCameraSetup::_Internal::minimap_resolution(const SpatialCameraSetup* msg) {
  return *msg->_impl_.minimap_resolution_;
}
void SpatialCameraSetup::clear_resolution() {
  if (_impl_.resolution_ != nullptr) _impl_.resolution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SpatialCameraSetup::clear_minimap_resolution() {
  if (_impl_.minimap_resolution_ != nullptr) _impl_.minimap_resolution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SpatialCameraSetup::SpatialCameraSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.SpatialCameraSetup)
}
SpatialCameraSetup::SpatialCameraSetup(const SpatialCameraSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpatialCameraSetup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resolution_){nullptr}
    , decltype(_impl_.minimap_resolution_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.crop_to_playable_area_){}
    , decltype(_impl_.allow_cheating_layers_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resolution()) {
    _this->_impl_.resolution_ = new ::SC2APIProtocol::Size2DI(*from._impl_.resolution_);
  }
  if (from._internal_has_minimap_resolution()) {
    _this->_impl_.minimap_resolution_ = new ::SC2APIProtocol::Size2DI(*from._impl_.minimap_resolution_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allow_cheating_layers_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.allow_cheating_layers_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.SpatialCameraSetup)
}

inline void SpatialCameraSetup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.resolution_){nullptr}
    , decltype(_impl_.minimap_resolution_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.crop_to_playable_area_){false}
    , decltype(_impl_.allow_cheating_layers_){false}
  };
}

SpatialCameraSetup::~SpatialCameraSetup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.SpatialCameraSetup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpatialCameraSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.resolution_;
  if (this != internal_default_instance()) delete _impl_.minimap_resolution_;
}

void SpatialCameraSetup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpatialCameraSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.SpatialCameraSetup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.resolution_ != nullptr);
      _impl_.resolution_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.minimap_resolution_ != nullptr);
      _impl_.minimap_resolution_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allow_cheating_layers_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.allow_cheating_layers_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialCameraSetup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Size2DI resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimap_resolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool crop_to_playable_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_crop_to_playable_area(&has_bits);
          _impl_.crop_to_playable_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_cheating_layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_allow_cheating_layers(&has_bits);
          _impl_.allow_cheating_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialCameraSetup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.SpatialCameraSetup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float width = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_width(), target);
  }

  // optional .SC2APIProtocol.Size2DI resolution = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resolution(this),
        _Internal::resolution(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::minimap_resolution(this),
        _Internal::minimap_resolution(this).GetCachedSize(), target, stream);
  }

  // optional bool crop_to_playable_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_crop_to_playable_area(), target);
  }

  // optional bool allow_cheating_layers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_cheating_layers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.SpatialCameraSetup)
  return target;
}

size_t SpatialCameraSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.SpatialCameraSetup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .SC2APIProtocol.Size2DI resolution = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resolution_);
    }

    // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.minimap_resolution_);
    }

    // optional float width = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool crop_to_playable_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool allow_cheating_layers = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialCameraSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpatialCameraSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialCameraSetup::GetClassData() const { return &_class_data_; }


void SpatialCameraSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpatialCameraSetup*>(&to_msg);
  auto& from = static_cast<const SpatialCameraSetup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.SpatialCameraSetup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_resolution()->::SC2APIProtocol::Size2DI::MergeFrom(
          from._internal_resolution());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_minimap_resolution()->::SC2APIProtocol::Size2DI::MergeFrom(
          from._internal_minimap_resolution());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.crop_to_playable_area_ = from._impl_.crop_to_playable_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.allow_cheating_layers_ = from._impl_.allow_cheating_layers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialCameraSetup::CopyFrom(const SpatialCameraSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialCameraSetup::IsInitialized() const {
  return true;
}

void SpatialCameraSetup::InternalSwap(SpatialCameraSetup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialCameraSetup, _impl_.allow_cheating_layers_)
      + sizeof(SpatialCameraSetup::_impl_.allow_cheating_layers_)
      - PROTOBUF_FIELD_OFFSET(SpatialCameraSetup, _impl_.resolution_)>(
          reinterpret_cast<char*>(&_impl_.resolution_),
          reinterpret_cast<char*>(&other->_impl_.resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialCameraSetup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[49]);
}

// ===================================================================

class InterfaceOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<InterfaceOptions>()._impl_._has_bits_);
  static void set_has_raw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SC2APIProtocol::SpatialCameraSetup& feature_layer(const InterfaceOptions* msg);
  static void set_has_feature_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::SpatialCameraSetup& render(const InterfaceOptions* msg);
  static void set_has_render(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_cloaked(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_burrowed_shadows(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_show_placeholders(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_affects_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_raw_crop_to_playable_area(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::SC2APIProtocol::SpatialCameraSetup&
InterfaceOptions::_Internal::feature_layer(const InterfaceOptions* msg) {
  return *msg->_impl_.feature_layer_;
}
const ::SC2APIProtocol::SpatialCameraSetup&
InterfaceOptions::_Internal::render(const InterfaceOptions* msg) {
  return *msg->_impl_.render_;
}
InterfaceOptions::InterfaceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.InterfaceOptions)
}
InterfaceOptions::InterfaceOptions(const InterfaceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InterfaceOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feature_layer_){nullptr}
    , decltype(_impl_.render_){nullptr}
    , decltype(_impl_.raw_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.show_cloaked_){}
    , decltype(_impl_.show_burrowed_shadows_){}
    , decltype(_impl_.show_placeholders_){}
    , decltype(_impl_.raw_affects_selection_){}
    , decltype(_impl_.raw_crop_to_playable_area_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature_layer()) {
    _this->_impl_.feature_layer_ = new ::SC2APIProtocol::SpatialCameraSetup(*from._impl_.feature_layer_);
  }
  if (from._internal_has_render()) {
    _this->_impl_.render_ = new ::SC2APIProtocol::SpatialCameraSetup(*from._impl_.render_);
  }
  ::memcpy(&_impl_.raw_, &from._impl_.raw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.raw_crop_to_playable_area_) -
    reinterpret_cast<char*>(&_impl_.raw_)) + sizeof(_impl_.raw_crop_to_playable_area_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.InterfaceOptions)
}

inline void InterfaceOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.feature_layer_){nullptr}
    , decltype(_impl_.render_){nullptr}
    , decltype(_impl_.raw_){false}
    , decltype(_impl_.score_){false}
    , decltype(_impl_.show_cloaked_){false}
    , decltype(_impl_.show_burrowed_shadows_){false}
    , decltype(_impl_.show_placeholders_){false}
    , decltype(_impl_.raw_affects_selection_){false}
    , decltype(_impl_.raw_crop_to_playable_area_){false}
  };
}

InterfaceOptions::~InterfaceOptions() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.InterfaceOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterfaceOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feature_layer_;
  if (this != internal_default_instance()) delete _impl_.render_;
}

void InterfaceOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InterfaceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.InterfaceOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.feature_layer_ != nullptr);
      _impl_.feature_layer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.render_ != nullptr);
      _impl_.render_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.raw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raw_affects_selection_) -
        reinterpret_cast<char*>(&_impl_.raw_)) + sizeof(_impl_.raw_affects_selection_));
  }
  _impl_.raw_crop_to_playable_area_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_raw(&has_bits);
          _impl_.raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_render(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_cloaked = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_show_cloaked(&has_bits);
          _impl_.show_cloaked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_affects_selection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_raw_affects_selection(&has_bits);
          _impl_.raw_affects_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool raw_crop_to_playable_area = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_raw_crop_to_playable_area(&has_bits);
          _impl_.raw_crop_to_playable_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_placeholders = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_show_placeholders(&has_bits);
          _impl_.show_placeholders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_burrowed_shadows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_show_burrowed_shadows(&has_bits);
          _impl_.show_burrowed_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterfaceOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.InterfaceOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool raw = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_raw(), target);
  }

  // optional bool score = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_score(), target);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::feature_layer(this),
        _Internal::feature_layer(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::render(this),
        _Internal::render(this).GetCachedSize(), target, stream);
  }

  // optional bool show_cloaked = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_cloaked(), target);
  }

  // optional bool raw_affects_selection = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_raw_affects_selection(), target);
  }

  // optional bool raw_crop_to_playable_area = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_crop_to_playable_area(), target);
  }

  // optional bool show_placeholders = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_show_placeholders(), target);
  }

  // optional bool show_burrowed_shadows = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_show_burrowed_shadows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.InterfaceOptions)
  return target;
}

size_t InterfaceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.InterfaceOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feature_layer_);
    }

    // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.render_);
    }

    // optional bool raw = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool score = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool show_cloaked = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool show_burrowed_shadows = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool show_placeholders = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool raw_affects_selection = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool raw_crop_to_playable_area = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InterfaceOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceOptions::GetClassData() const { return &_class_data_; }


void InterfaceOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InterfaceOptions*>(&to_msg);
  auto& from = static_cast<const InterfaceOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.InterfaceOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_feature_layer()->::SC2APIProtocol::SpatialCameraSetup::MergeFrom(
          from._internal_feature_layer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_render()->::SC2APIProtocol::SpatialCameraSetup::MergeFrom(
          from._internal_render());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.raw_ = from._impl_.raw_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.show_cloaked_ = from._impl_.show_cloaked_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.show_burrowed_shadows_ = from._impl_.show_burrowed_shadows_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.show_placeholders_ = from._impl_.show_placeholders_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.raw_affects_selection_ = from._impl_.raw_affects_selection_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_raw_crop_to_playable_area(from._internal_raw_crop_to_playable_area());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceOptions::CopyFrom(const InterfaceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.InterfaceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceOptions::IsInitialized() const {
  return true;
}

void InterfaceOptions::InternalSwap(InterfaceOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceOptions, _impl_.raw_crop_to_playable_area_)
      + sizeof(InterfaceOptions::_impl_.raw_crop_to_playable_area_)
      - PROTOBUF_FIELD_OFFSET(InterfaceOptions, _impl_.feature_layer_)>(
          reinterpret_cast<char*>(&_impl_.feature_layer_),
          reinterpret_cast<char*>(&other->_impl_.feature_layer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[50]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerInfo>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_race_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_race_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ai_build(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.race_requested_){}
    , decltype(_impl_.race_actual_){}
    , decltype(_impl_.ai_build_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.difficulty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.difficulty_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.difficulty_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.race_requested_){0}
    , decltype(_impl_.race_actual_){0}
    , decltype(_impl_.ai_build_){1}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.difficulty_){1}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.player_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.race_actual_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.race_actual_));
    _impl_.ai_build_ = 1;
    _impl_.type_ = 1;
    _impl_.difficulty_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.PlayerType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::PlayerType_IsValid(val))) {
            _internal_set_type(static_cast<::SC2APIProtocol::PlayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Race race_requested = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Race_IsValid(val))) {
            _internal_set_race_requested(static_cast<::SC2APIProtocol::Race>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Race race_actual = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Race_IsValid(val))) {
            _internal_set_race_actual(static_cast<::SC2APIProtocol::Race>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Difficulty difficulty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Difficulty_IsValid(val))) {
            _internal_set_difficulty(static_cast<::SC2APIProtocol::Difficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.PlayerInfo.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.AIBuild ai_build = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::AIBuild_IsValid(val))) {
            _internal_set_ai_build(static_cast<::SC2APIProtocol::AIBuild>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .SC2APIProtocol.PlayerType type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .SC2APIProtocol.Race race_requested = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_race_requested(), target);
  }

  // optional .SC2APIProtocol.Race race_actual = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_race_actual(), target);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_difficulty(), target);
  }

  // optional string player_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.PlayerInfo.player_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player_name(), target);
  }

  // optional .SC2APIProtocol.AIBuild ai_build = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_ai_build(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string player_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

    // optional .SC2APIProtocol.Race race_requested = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_race_requested());
    }

    // optional .SC2APIProtocol.Race race_actual = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_race_actual());
    }

    // optional .SC2APIProtocol.AIBuild ai_build = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ai_build());
    }

    // optional .SC2APIProtocol.PlayerType type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .SC2APIProtocol.Difficulty difficulty = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.race_requested_ = from._impl_.race_requested_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.race_actual_ = from._impl_.race_actual_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ai_build_ = from._impl_.ai_build_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.difficulty_ = from._impl_.difficulty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.race_actual_)
      + sizeof(PlayerInfo::_impl_.race_actual_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
  swap(_impl_.ai_build_, other->_impl_.ai_build_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.difficulty_, other->_impl_.difficulty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[51]);
}

// ===================================================================

class PlayerCommon::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerCommon>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minerals(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vespene(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_food_cap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_food_used(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_food_army(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_food_workers(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_idle_worker_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_army_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_warp_gate_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_larva_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

PlayerCommon::PlayerCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.PlayerCommon)
}
PlayerCommon::PlayerCommon(const PlayerCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerCommon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.minerals_){}
    , decltype(_impl_.vespene_){}
    , decltype(_impl_.food_cap_){}
    , decltype(_impl_.food_used_){}
    , decltype(_impl_.food_army_){}
    , decltype(_impl_.food_workers_){}
    , decltype(_impl_.idle_worker_count_){}
    , decltype(_impl_.army_count_){}
    , decltype(_impl_.warp_gate_count_){}
    , decltype(_impl_.larva_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.larva_count_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.larva_count_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerCommon)
}

inline void PlayerCommon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.minerals_){0u}
    , decltype(_impl_.vespene_){0u}
    , decltype(_impl_.food_cap_){0u}
    , decltype(_impl_.food_used_){0u}
    , decltype(_impl_.food_army_){0u}
    , decltype(_impl_.food_workers_){0u}
    , decltype(_impl_.idle_worker_count_){0u}
    , decltype(_impl_.army_count_){0u}
    , decltype(_impl_.warp_gate_count_){0u}
    , decltype(_impl_.larva_count_){0u}
  };
}

PlayerCommon::~PlayerCommon() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerCommon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerCommon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerCommon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerCommon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.idle_worker_count_) -
        reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.idle_worker_count_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.army_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.larva_count_) -
        reinterpret_cast<char*>(&_impl_.army_count_)) + sizeof(_impl_.larva_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCommon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 minerals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_minerals(&has_bits);
          _impl_.minerals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 vespene = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vespene(&has_bits);
          _impl_.vespene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 food_cap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_food_cap(&has_bits);
          _impl_.food_cap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 food_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_food_used(&has_bits);
          _impl_.food_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 food_army = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_food_army(&has_bits);
          _impl_.food_army_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 food_workers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_food_workers(&has_bits);
          _impl_.food_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 idle_worker_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_idle_worker_count(&has_bits);
          _impl_.idle_worker_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 army_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_army_count(&has_bits);
          _impl_.army_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 warp_gate_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_warp_gate_count(&has_bits);
          _impl_.warp_gate_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 larva_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_larva_count(&has_bits);
          _impl_.larva_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerCommon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerCommon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 minerals = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minerals(), target);
  }

  // optional uint32 vespene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vespene(), target);
  }

  // optional uint32 food_cap = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_food_cap(), target);
  }

  // optional uint32 food_used = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_food_used(), target);
  }

  // optional uint32 food_army = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_food_army(), target);
  }

  // optional uint32 food_workers = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_food_workers(), target);
  }

  // optional uint32 idle_worker_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_idle_worker_count(), target);
  }

  // optional uint32 army_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_army_count(), target);
  }

  // optional uint32 warp_gate_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_warp_gate_count(), target);
  }

  // optional uint32 larva_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_larva_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerCommon)
  return target;
}

size_t PlayerCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerCommon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

    // optional uint32 minerals = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minerals());
    }

    // optional uint32 vespene = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vespene());
    }

    // optional uint32 food_cap = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_food_cap());
    }

    // optional uint32 food_used = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_food_used());
    }

    // optional uint32 food_army = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_food_army());
    }

    // optional uint32 food_workers = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_food_workers());
    }

    // optional uint32 idle_worker_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_idle_worker_count());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 army_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_army_count());
    }

    // optional uint32 warp_gate_count = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_warp_gate_count());
    }

    // optional uint32 larva_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_larva_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerCommon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerCommon::GetClassData() const { return &_class_data_; }


void PlayerCommon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerCommon*>(&to_msg);
  auto& from = static_cast<const PlayerCommon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerCommon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.minerals_ = from._impl_.minerals_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vespene_ = from._impl_.vespene_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.food_cap_ = from._impl_.food_cap_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.food_used_ = from._impl_.food_used_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.food_army_ = from._impl_.food_army_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.food_workers_ = from._impl_.food_workers_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.idle_worker_count_ = from._impl_.idle_worker_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.army_count_ = from._impl_.army_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.warp_gate_count_ = from._impl_.warp_gate_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.larva_count_ = from._impl_.larva_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerCommon::CopyFrom(const PlayerCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommon::IsInitialized() const {
  return true;
}

void PlayerCommon::InternalSwap(PlayerCommon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerCommon, _impl_.larva_count_)
      + sizeof(PlayerCommon::_impl_.larva_count_)
      - PROTOBUF_FIELD_OFFSET(PlayerCommon, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCommon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[52]);
}

// ===================================================================

class Observation::_Internal {
 public:
  using HasBits = decltype(std::declval<Observation>()._impl_._has_bits_);
  static void set_has_game_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SC2APIProtocol::PlayerCommon& player_common(const Observation* msg);
  static void set_has_player_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::Score& score(const Observation* msg);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::ObservationRaw& raw_data(const Observation* msg);
  static void set_has_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::ObservationFeatureLayer& feature_layer_data(const Observation* msg);
  static void set_has_feature_layer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SC2APIProtocol::ObservationRender& render_data(const Observation* msg);
  static void set_has_render_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::SC2APIProtocol::ObservationUI& ui_data(const Observation* msg);
  static void set_has_ui_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::SC2APIProtocol::PlayerCommon&
Observation::_Internal::player_common(const Observation* msg) {
  return *msg->_impl_.player_common_;
}
const ::SC2APIProtocol::Score&
Observation::_Internal::score(const Observation* msg) {
  return *msg->_impl_.score_;
}
const ::SC2APIProtocol::ObservationRaw&
Observation::_Internal::raw_data(const Observation* msg) {
  return *msg->_impl_.raw_data_;
}
const ::SC2APIProtocol::ObservationFeatureLayer&
Observation::_Internal::feature_layer_data(const Observation* msg) {
  return *msg->_impl_.feature_layer_data_;
}
const ::SC2APIProtocol::ObservationRender&
Observation::_Internal::render_data(const Observation* msg) {
  return *msg->_impl_.render_data_;
}
const ::SC2APIProtocol::ObservationUI&
Observation::_Internal::ui_data(const Observation* msg) {
  return *msg->_impl_.ui_data_;
}
void Observation::clear_abilities() {
  _impl_.abilities_.Clear();
}
void Observation::clear_score() {
  if (_impl_.score_ != nullptr) _impl_.score_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Observation::clear_raw_data() {
  if (_impl_.raw_data_ != nullptr) _impl_.raw_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Observation::clear_feature_layer_data() {
  if (_impl_.feature_layer_data_ != nullptr) _impl_.feature_layer_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Observation::clear_render_data() {
  if (_impl_.render_data_ != nullptr) _impl_.render_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Observation::clear_ui_data() {
  if (_impl_.ui_data_ != nullptr) _impl_.ui_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
Observation::Observation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Observation)
}
Observation::Observation(const Observation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Observation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.alerts_){from._impl_.alerts_}
    , decltype(_impl_.player_common_){nullptr}
    , decltype(_impl_.score_){nullptr}
    , decltype(_impl_.raw_data_){nullptr}
    , decltype(_impl_.feature_layer_data_){nullptr}
    , decltype(_impl_.render_data_){nullptr}
    , decltype(_impl_.ui_data_){nullptr}
    , decltype(_impl_.game_loop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_common()) {
    _this->_impl_.player_common_ = new ::SC2APIProtocol::PlayerCommon(*from._impl_.player_common_);
  }
  if (from._internal_has_score()) {
    _this->_impl_.score_ = new ::SC2APIProtocol::Score(*from._impl_.score_);
  }
  if (from._internal_has_raw_data()) {
    _this->_impl_.raw_data_ = new ::SC2APIProtocol::ObservationRaw(*from._impl_.raw_data_);
  }
  if (from._internal_has_feature_layer_data()) {
    _this->_impl_.feature_layer_data_ = new ::SC2APIProtocol::ObservationFeatureLayer(*from._impl_.feature_layer_data_);
  }
  if (from._internal_has_render_data()) {
    _this->_impl_.render_data_ = new ::SC2APIProtocol::ObservationRender(*from._impl_.render_data_);
  }
  if (from._internal_has_ui_data()) {
    _this->_impl_.ui_data_ = new ::SC2APIProtocol::ObservationUI(*from._impl_.ui_data_);
  }
  _this->_impl_.game_loop_ = from._impl_.game_loop_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Observation)
}

inline void Observation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.alerts_){arena}
    , decltype(_impl_.player_common_){nullptr}
    , decltype(_impl_.score_){nullptr}
    , decltype(_impl_.raw_data_){nullptr}
    , decltype(_impl_.feature_layer_data_){nullptr}
    , decltype(_impl_.render_data_){nullptr}
    , decltype(_impl_.ui_data_){nullptr}
    , decltype(_impl_.game_loop_){0u}
  };
}

Observation::~Observation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Observation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Observation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.alerts_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.player_common_;
  if (this != internal_default_instance()) delete _impl_.score_;
  if (this != internal_default_instance()) delete _impl_.raw_data_;
  if (this != internal_default_instance()) delete _impl_.feature_layer_data_;
  if (this != internal_default_instance()) delete _impl_.render_data_;
  if (this != internal_default_instance()) delete _impl_.ui_data_;
}

void Observation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Observation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Observation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  _impl_.alerts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.player_common_ != nullptr);
      _impl_.player_common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.score_ != nullptr);
      _impl_.score_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.raw_data_ != nullptr);
      _impl_.raw_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.feature_layer_data_ != nullptr);
      _impl_.feature_layer_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.render_data_ != nullptr);
      _impl_.render_data_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.ui_data_ != nullptr);
      _impl_.ui_data_->Clear();
    }
  }
  _impl_.game_loop_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Observation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.PlayerCommon player_common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_common(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Score score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_score(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_layer_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ObservationRender render_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ObservationUI ui_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_loop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_game_loop(&has_bits);
          _impl_.game_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.Alert alerts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Alert_IsValid(val))) {
              _internal_add_alerts(static_cast<::SC2APIProtocol::Alert>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_alerts(), ptr, ctx, ::SC2APIProtocol::Alert_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Observation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Observation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.PlayerCommon player_common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_common(this),
        _Internal::player_common(this).GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.Score score = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::score(this),
        _Internal::score(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::raw_data(this),
        _Internal::raw_data(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::feature_layer_data(this),
        _Internal::feature_layer_data(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ObservationRender render_data = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::render_data(this),
        _Internal::render_data(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ObservationUI ui_data = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ui_data(this),
        _Internal::ui_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 game_loop = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_game_loop(), target);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  for (int i = 0, n = this->_internal_alerts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_alerts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Observation)
  return target;
}

size_t Observation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Observation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_alerts_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_alerts(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .SC2APIProtocol.PlayerCommon player_common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_common_);
    }

    // optional .SC2APIProtocol.Score score = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.score_);
    }

    // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.raw_data_);
    }

    // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.feature_layer_data_);
    }

    // optional .SC2APIProtocol.ObservationRender render_data = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.render_data_);
    }

    // optional .SC2APIProtocol.ObservationUI ui_data = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ui_data_);
    }

    // optional uint32 game_loop = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_loop());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Observation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Observation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Observation::GetClassData() const { return &_class_data_; }


void Observation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Observation*>(&to_msg);
  auto& from = static_cast<const Observation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Observation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  _this->_impl_.alerts_.MergeFrom(from._impl_.alerts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_player_common()->::SC2APIProtocol::PlayerCommon::MergeFrom(
          from._internal_player_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_score()->::SC2APIProtocol::Score::MergeFrom(
          from._internal_score());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_raw_data()->::SC2APIProtocol::ObservationRaw::MergeFrom(
          from._internal_raw_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_feature_layer_data()->::SC2APIProtocol::ObservationFeatureLayer::MergeFrom(
          from._internal_feature_layer_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_render_data()->::SC2APIProtocol::ObservationRender::MergeFrom(
          from._internal_render_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_ui_data()->::SC2APIProtocol::ObservationUI::MergeFrom(
          from._internal_ui_data());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_loop_ = from._impl_.game_loop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Observation::CopyFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observation::IsInitialized() const {
  return true;
}

void Observation::InternalSwap(Observation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  _impl_.alerts_.InternalSwap(&other->_impl_.alerts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Observation, _impl_.game_loop_)
      + sizeof(Observation::_impl_.game_loop_)
      - PROTOBUF_FIELD_OFFSET(Observation, _impl_.player_common_)>(
          reinterpret_cast<char*>(&_impl_.player_common_),
          reinterpret_cast<char*>(&other->_impl_.player_common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Observation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[53]);
}

// ===================================================================

class Action::_Internal {
 public:
  using HasBits = decltype(std::declval<Action>()._impl_._has_bits_);
  static const ::SC2APIProtocol::ActionRaw& action_raw(const Action* msg);
  static void set_has_action_raw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::ActionSpatial& action_feature_layer(const Action* msg);
  static void set_has_action_feature_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::ActionSpatial& action_render(const Action* msg);
  static void set_has_action_render(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::ActionUI& action_ui(const Action* msg);
  static void set_has_action_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SC2APIProtocol::ActionChat& action_chat(const Action* msg);
  static void set_has_action_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_loop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::SC2APIProtocol::ActionRaw&
Action::_Internal::action_raw(const Action* msg) {
  return *msg->_impl_.action_raw_;
}
const ::SC2APIProtocol::ActionSpatial&
Action::_Internal::action_feature_layer(const Action* msg) {
  return *msg->_impl_.action_feature_layer_;
}
const ::SC2APIProtocol::ActionSpatial&
Action::_Internal::action_render(const Action* msg) {
  return *msg->_impl_.action_render_;
}
const ::SC2APIProtocol::ActionUI&
Action::_Internal::action_ui(const Action* msg) {
  return *msg->_impl_.action_ui_;
}
const ::SC2APIProtocol::ActionChat&
Action::_Internal::action_chat(const Action* msg) {
  return *msg->_impl_.action_chat_;
}
void Action::clear_action_raw() {
  if (_impl_.action_raw_ != nullptr) _impl_.action_raw_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Action::clear_action_feature_layer() {
  if (_impl_.action_feature_layer_ != nullptr) _impl_.action_feature_layer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Action::clear_action_render() {
  if (_impl_.action_render_ != nullptr) _impl_.action_render_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Action::clear_action_ui() {
  if (_impl_.action_ui_ != nullptr) _impl_.action_ui_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_raw_){nullptr}
    , decltype(_impl_.action_feature_layer_){nullptr}
    , decltype(_impl_.action_render_){nullptr}
    , decltype(_impl_.action_ui_){nullptr}
    , decltype(_impl_.action_chat_){nullptr}
    , decltype(_impl_.game_loop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_raw()) {
    _this->_impl_.action_raw_ = new ::SC2APIProtocol::ActionRaw(*from._impl_.action_raw_);
  }
  if (from._internal_has_action_feature_layer()) {
    _this->_impl_.action_feature_layer_ = new ::SC2APIProtocol::ActionSpatial(*from._impl_.action_feature_layer_);
  }
  if (from._internal_has_action_render()) {
    _this->_impl_.action_render_ = new ::SC2APIProtocol::ActionSpatial(*from._impl_.action_render_);
  }
  if (from._internal_has_action_ui()) {
    _this->_impl_.action_ui_ = new ::SC2APIProtocol::ActionUI(*from._impl_.action_ui_);
  }
  if (from._internal_has_action_chat()) {
    _this->_impl_.action_chat_ = new ::SC2APIProtocol::ActionChat(*from._impl_.action_chat_);
  }
  _this->_impl_.game_loop_ = from._impl_.game_loop_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Action)
}

inline void Action::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_raw_){nullptr}
    , decltype(_impl_.action_feature_layer_){nullptr}
    , decltype(_impl_.action_render_){nullptr}
    , decltype(_impl_.action_ui_){nullptr}
    , decltype(_impl_.action_chat_){nullptr}
    , decltype(_impl_.game_loop_){0u}
  };
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.action_raw_;
  if (this != internal_default_instance()) delete _impl_.action_feature_layer_;
  if (this != internal_default_instance()) delete _impl_.action_render_;
  if (this != internal_default_instance()) delete _impl_.action_ui_;
  if (this != internal_default_instance()) delete _impl_.action_chat_;
}

void Action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.action_raw_ != nullptr);
      _impl_.action_raw_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.action_feature_layer_ != nullptr);
      _impl_.action_feature_layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.action_render_ != nullptr);
      _impl_.action_render_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.action_ui_ != nullptr);
      _impl_.action_ui_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.action_chat_ != nullptr);
      _impl_.action_chat_->Clear();
    }
  }
  _impl_.game_loop_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ActionRaw action_raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_raw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_feature_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ActionSpatial action_render = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_render(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ActionUI action_ui = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_ui(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ActionChat action_chat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_loop = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_game_loop(&has_bits);
          _impl_.game_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ActionRaw action_raw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::action_raw(this),
        _Internal::action_raw(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::action_feature_layer(this),
        _Internal::action_feature_layer(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ActionSpatial action_render = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::action_render(this),
        _Internal::action_render(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ActionUI action_ui = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::action_ui(this),
        _Internal::action_ui(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ActionChat action_chat = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::action_chat(this),
        _Internal::action_chat(this).GetCachedSize(), target, stream);
  }

  // optional uint32 game_loop = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_loop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .SC2APIProtocol.ActionRaw action_raw = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_raw_);
    }

    // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_feature_layer_);
    }

    // optional .SC2APIProtocol.ActionSpatial action_render = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_render_);
    }

    // optional .SC2APIProtocol.ActionUI action_ui = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_ui_);
    }

    // optional .SC2APIProtocol.ActionChat action_chat = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_chat_);
    }

    // optional uint32 game_loop = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_loop());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }


void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Action*>(&to_msg);
  auto& from = static_cast<const Action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Action)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_action_raw()->::SC2APIProtocol::ActionRaw::MergeFrom(
          from._internal_action_raw());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_action_feature_layer()->::SC2APIProtocol::ActionSpatial::MergeFrom(
          from._internal_action_feature_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_action_render()->::SC2APIProtocol::ActionSpatial::MergeFrom(
          from._internal_action_render());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_action_ui()->::SC2APIProtocol::ActionUI::MergeFrom(
          from._internal_action_ui());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_action_chat()->::SC2APIProtocol::ActionChat::MergeFrom(
          from._internal_action_chat());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.game_loop_ = from._impl_.game_loop_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action, _impl_.game_loop_)
      + sizeof(Action::_impl_.game_loop_)
      - PROTOBUF_FIELD_OFFSET(Action, _impl_.action_raw_)>(
          reinterpret_cast<char*>(&_impl_.action_raw_),
          reinterpret_cast<char*>(&other->_impl_.action_raw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[54]);
}

// ===================================================================

class ActionChat::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionChat>()._impl_._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionChat::ActionChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionChat)
}
ActionChat::ActionChat(const ActionChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.channel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_ = from._impl_.channel_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionChat)
}

inline void ActionChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.channel_){1}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActionChat::~ActionChat() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ActionChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionChat::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    _impl_.channel_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionChat_Channel_IsValid(val))) {
            _internal_set_channel(static_cast<::SC2APIProtocol::ActionChat_Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SC2APIProtocol.ActionChat.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_channel(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ActionChat.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionChat)
  return target;
}

size_t ActionChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionChat::GetClassData() const { return &_class_data_; }


void ActionChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionChat*>(&to_msg);
  auto& from = static_cast<const ActionChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionChat::CopyFrom(const ActionChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionChat::IsInitialized() const {
  return true;
}

void ActionChat::InternalSwap(ActionChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[55]);
}

// ===================================================================

class ActionError::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionError>()._impl_._has_bits_);
  static void set_has_unit_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ActionError::ActionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionError)
}
ActionError::ActionError(const ActionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_tag_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unit_tag_, &from._impl_.unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.unit_tag_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionError)
}

inline void ActionError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_tag_){uint64_t{0u}}
    , decltype(_impl_.ability_id_){uint64_t{0u}}
    , decltype(_impl_.result_){1}
  };
}

ActionError::~ActionError() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionError::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ability_id_) -
        reinterpret_cast<char*>(&_impl_.unit_tag_)) + sizeof(_impl_.ability_id_));
    _impl_.result_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 unit_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_tag(&has_bits);
          _impl_.unit_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ActionResult result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionResult_IsValid(val))) {
            _internal_set_result(static_cast<::SC2APIProtocol::ActionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 unit_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unit_tag(), target);
  }

  // optional uint64 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ability_id(), target);
  }

  // optional .SC2APIProtocol.ActionResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionError)
  return target;
}

size_t ActionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 unit_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unit_tag());
    }

    // optional uint64 ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ability_id());
    }

    // optional .SC2APIProtocol.ActionResult result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionError::GetClassData() const { return &_class_data_; }


void ActionError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionError*>(&to_msg);
  auto& from = static_cast<const ActionError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unit_tag_ = from._impl_.unit_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionError::CopyFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionError::IsInitialized() const {
  return true;
}

void ActionError::InternalSwap(ActionError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionError, _impl_.ability_id_)
      + sizeof(ActionError::_impl_.ability_id_)
      - PROTOBUF_FIELD_OFFSET(ActionError, _impl_.unit_tag_)>(
          reinterpret_cast<char*>(&_impl_.unit_tag_),
          reinterpret_cast<char*>(&other->_impl_.unit_tag_));
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[56]);
}

// ===================================================================

class ObserverAction::_Internal {
 public:
  static const ::SC2APIProtocol::ActionObserverPlayerPerspective& player_perspective(const ObserverAction* msg);
  static const ::SC2APIProtocol::ActionObserverCameraMove& camera_move(const ObserverAction* msg);
  static const ::SC2APIProtocol::ActionObserverCameraFollowPlayer& camera_follow_player(const ObserverAction* msg);
  static const ::SC2APIProtocol::ActionObserverCameraFollowUnits& camera_follow_units(const ObserverAction* msg);
};

const ::SC2APIProtocol::ActionObserverPlayerPerspective&
ObserverAction::_Internal::player_perspective(const ObserverAction* msg) {
  return *msg->_impl_.action_.player_perspective_;
}
const ::SC2APIProtocol::ActionObserverCameraMove&
ObserverAction::_Internal::camera_move(const ObserverAction* msg) {
  return *msg->_impl_.action_.camera_move_;
}
const ::SC2APIProtocol::ActionObserverCameraFollowPlayer&
ObserverAction::_Internal::camera_follow_player(const ObserverAction* msg) {
  return *msg->_impl_.action_.camera_follow_player_;
}
const ::SC2APIProtocol::ActionObserverCameraFollowUnits&
ObserverAction::_Internal::camera_follow_units(const ObserverAction* msg) {
  return *msg->_impl_.action_.camera_follow_units_;
}
void ObserverAction::set_allocated_player_perspective(::SC2APIProtocol::ActionObserverPlayerPerspective* player_perspective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (player_perspective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_perspective);
    if (message_arena != submessage_arena) {
      player_perspective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_perspective, submessage_arena);
    }
    set_has_player_perspective();
    _impl_.action_.player_perspective_ = player_perspective;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.player_perspective)
}
void ObserverAction::set_allocated_camera_move(::SC2APIProtocol::ActionObserverCameraMove* camera_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (camera_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_move);
    if (message_arena != submessage_arena) {
      camera_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_move, submessage_arena);
    }
    set_has_camera_move();
    _impl_.action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.camera_move)
}
void ObserverAction::set_allocated_camera_follow_player(::SC2APIProtocol::ActionObserverCameraFollowPlayer* camera_follow_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (camera_follow_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_follow_player);
    if (message_arena != submessage_arena) {
      camera_follow_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_follow_player, submessage_arena);
    }
    set_has_camera_follow_player();
    _impl_.action_.camera_follow_player_ = camera_follow_player;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.camera_follow_player)
}
void ObserverAction::set_allocated_camera_follow_units(::SC2APIProtocol::ActionObserverCameraFollowUnits* camera_follow_units) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (camera_follow_units) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_follow_units);
    if (message_arena != submessage_arena) {
      camera_follow_units = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_follow_units, submessage_arena);
    }
    set_has_camera_follow_units();
    _impl_.action_.camera_follow_units_ = camera_follow_units;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.camera_follow_units)
}
ObserverAction::ObserverAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ObserverAction)
}
ObserverAction::ObserverAction(const ObserverAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObserverAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kPlayerPerspective: {
      _this->_internal_mutable_player_perspective()->::SC2APIProtocol::ActionObserverPlayerPerspective::MergeFrom(
          from._internal_player_perspective());
      break;
    }
    case kCameraMove: {
      _this->_internal_mutable_camera_move()->::SC2APIProtocol::ActionObserverCameraMove::MergeFrom(
          from._internal_camera_move());
      break;
    }
    case kCameraFollowPlayer: {
      _this->_internal_mutable_camera_follow_player()->::SC2APIProtocol::ActionObserverCameraFollowPlayer::MergeFrom(
          from._internal_camera_follow_player());
      break;
    }
    case kCameraFollowUnits: {
      _this->_internal_mutable_camera_follow_units()->::SC2APIProtocol::ActionObserverCameraFollowUnits::MergeFrom(
          from._internal_camera_follow_units());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObserverAction)
}

inline void ObserverAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action();
}

ObserverAction::~ObserverAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObserverAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObserverAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ObserverAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObserverAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ObserverAction)
  switch (action_case()) {
    case kPlayerPerspective: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.player_perspective_;
      }
      break;
    }
    case kCameraMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.camera_move_;
      }
      break;
    }
    case kCameraFollowPlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.camera_follow_player_;
      }
      break;
    }
    case kCameraFollowUnits: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.camera_follow_units_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void ObserverAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObserverAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObserverAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.ActionObserverPlayerPerspective player_perspective = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_perspective(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionObserverCameraMove camera_move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionObserverCameraFollowPlayer camera_follow_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_follow_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionObserverCameraFollowUnits camera_follow_units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_follow_units(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObserverAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObserverAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kPlayerPerspective: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::player_perspective(this),
          _Internal::player_perspective(this).GetCachedSize(), target, stream);
      break;
    }
    case kCameraMove: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::camera_move(this),
          _Internal::camera_move(this).GetCachedSize(), target, stream);
      break;
    }
    case kCameraFollowPlayer: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::camera_follow_player(this),
          _Internal::camera_follow_player(this).GetCachedSize(), target, stream);
      break;
    }
    case kCameraFollowUnits: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::camera_follow_units(this),
          _Internal::camera_follow_units(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObserverAction)
  return target;
}

size_t ObserverAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObserverAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .SC2APIProtocol.ActionObserverPlayerPerspective player_perspective = 1;
    case kPlayerPerspective: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.player_perspective_);
      break;
    }
    // .SC2APIProtocol.ActionObserverCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.camera_move_);
      break;
    }
    // .SC2APIProtocol.ActionObserverCameraFollowPlayer camera_follow_player = 3;
    case kCameraFollowPlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.camera_follow_player_);
      break;
    }
    // .SC2APIProtocol.ActionObserverCameraFollowUnits camera_follow_units = 4;
    case kCameraFollowUnits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.camera_follow_units_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObserverAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObserverAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObserverAction::GetClassData() const { return &_class_data_; }


void ObserverAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObserverAction*>(&to_msg);
  auto& from = static_cast<const ObserverAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObserverAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kPlayerPerspective: {
      _this->_internal_mutable_player_perspective()->::SC2APIProtocol::ActionObserverPlayerPerspective::MergeFrom(
          from._internal_player_perspective());
      break;
    }
    case kCameraMove: {
      _this->_internal_mutable_camera_move()->::SC2APIProtocol::ActionObserverCameraMove::MergeFrom(
          from._internal_camera_move());
      break;
    }
    case kCameraFollowPlayer: {
      _this->_internal_mutable_camera_follow_player()->::SC2APIProtocol::ActionObserverCameraFollowPlayer::MergeFrom(
          from._internal_camera_follow_player());
      break;
    }
    case kCameraFollowUnits: {
      _this->_internal_mutable_camera_follow_units()->::SC2APIProtocol::ActionObserverCameraFollowUnits::MergeFrom(
          from._internal_camera_follow_units());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObserverAction::CopyFrom(const ObserverAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserverAction::IsInitialized() const {
  return true;
}

void ObserverAction::InternalSwap(ObserverAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObserverAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[57]);
}

// ===================================================================

class ActionObserverPlayerPerspective::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionObserverPlayerPerspective>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionObserverPlayerPerspective::ActionObserverPlayerPerspective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionObserverPlayerPerspective)
}
ActionObserverPlayerPerspective::ActionObserverPlayerPerspective(const ActionObserverPlayerPerspective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionObserverPlayerPerspective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverPlayerPerspective)
}

inline void ActionObserverPlayerPerspective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){0u}
  };
}

ActionObserverPlayerPerspective::~ActionObserverPlayerPerspective() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverPlayerPerspective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionObserverPlayerPerspective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionObserverPlayerPerspective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionObserverPlayerPerspective::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionObserverPlayerPerspective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionObserverPlayerPerspective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverPlayerPerspective)
  return target;
}

size_t ActionObserverPlayerPerspective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionObserverPlayerPerspective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionObserverPlayerPerspective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionObserverPlayerPerspective::GetClassData() const { return &_class_data_; }


void ActionObserverPlayerPerspective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionObserverPlayerPerspective*>(&to_msg);
  auto& from = static_cast<const ActionObserverPlayerPerspective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionObserverPlayerPerspective::CopyFrom(const ActionObserverPlayerPerspective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverPlayerPerspective::IsInitialized() const {
  return true;
}

void ActionObserverPlayerPerspective::InternalSwap(ActionObserverPlayerPerspective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionObserverPlayerPerspective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[58]);
}

// ===================================================================

class ActionObserverCameraMove::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionObserverCameraMove>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Point2D& world_pos(const ActionObserverCameraMove* msg);
  static void set_has_world_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::Point2D&
ActionObserverCameraMove::_Internal::world_pos(const ActionObserverCameraMove* msg) {
  return *msg->_impl_.world_pos_;
}
void ActionObserverCameraMove::clear_world_pos() {
  if (_impl_.world_pos_ != nullptr) _impl_.world_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActionObserverCameraMove::ActionObserverCameraMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionObserverCameraMove)
}
ActionObserverCameraMove::ActionObserverCameraMove(const ActionObserverCameraMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionObserverCameraMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_pos_){nullptr}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_pos()) {
    _this->_impl_.world_pos_ = new ::SC2APIProtocol::Point2D(*from._impl_.world_pos_);
  }
  _this->_impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverCameraMove)
}

inline void ActionObserverCameraMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_pos_){nullptr}
    , decltype(_impl_.distance_){0}
  };
}

ActionObserverCameraMove::~ActionObserverCameraMove() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverCameraMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionObserverCameraMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.world_pos_;
}

void ActionObserverCameraMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionObserverCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverCameraMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.world_pos_ != nullptr);
    _impl_.world_pos_->Clear();
  }
  _impl_.distance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionObserverCameraMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.Point2D world_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionObserverCameraMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverCameraMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Point2D world_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::world_pos(this),
        _Internal::world_pos(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverCameraMove)
  return target;
}

size_t ActionObserverCameraMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverCameraMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.Point2D world_pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_pos_);
    }

    // optional float distance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionObserverCameraMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionObserverCameraMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionObserverCameraMove::GetClassData() const { return &_class_data_; }


void ActionObserverCameraMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionObserverCameraMove*>(&to_msg);
  auto& from = static_cast<const ActionObserverCameraMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverCameraMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_world_pos()->::SC2APIProtocol::Point2D::MergeFrom(
          from._internal_world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionObserverCameraMove::CopyFrom(const ActionObserverCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverCameraMove::IsInitialized() const {
  return true;
}

void ActionObserverCameraMove::InternalSwap(ActionObserverCameraMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionObserverCameraMove, _impl_.distance_)
      + sizeof(ActionObserverCameraMove::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(ActionObserverCameraMove, _impl_.world_pos_)>(
          reinterpret_cast<char*>(&_impl_.world_pos_),
          reinterpret_cast<char*>(&other->_impl_.world_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionObserverCameraMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[59]);
}

// ===================================================================

class ActionObserverCameraFollowPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionObserverCameraFollowPlayer>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActionObserverCameraFollowPlayer::ActionObserverCameraFollowPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionObserverCameraFollowPlayer)
}
ActionObserverCameraFollowPlayer::ActionObserverCameraFollowPlayer(const ActionObserverCameraFollowPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionObserverCameraFollowPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverCameraFollowPlayer)
}

inline void ActionObserverCameraFollowPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){0u}
  };
}

ActionObserverCameraFollowPlayer::~ActionObserverCameraFollowPlayer() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionObserverCameraFollowPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionObserverCameraFollowPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionObserverCameraFollowPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionObserverCameraFollowPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionObserverCameraFollowPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  return target;
}

size_t ActionObserverCameraFollowPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionObserverCameraFollowPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionObserverCameraFollowPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionObserverCameraFollowPlayer::GetClassData() const { return &_class_data_; }


void ActionObserverCameraFollowPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionObserverCameraFollowPlayer*>(&to_msg);
  auto& from = static_cast<const ActionObserverCameraFollowPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionObserverCameraFollowPlayer::CopyFrom(const ActionObserverCameraFollowPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverCameraFollowPlayer::IsInitialized() const {
  return true;
}

void ActionObserverCameraFollowPlayer::InternalSwap(ActionObserverCameraFollowPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionObserverCameraFollowPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[60]);
}

// ===================================================================

class ActionObserverCameraFollowUnits::_Internal {
 public:
};

ActionObserverCameraFollowUnits::ActionObserverCameraFollowUnits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionObserverCameraFollowUnits)
}
ActionObserverCameraFollowUnits::ActionObserverCameraFollowUnits(const ActionObserverCameraFollowUnits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionObserverCameraFollowUnits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unit_tags_){from._impl_.unit_tags_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverCameraFollowUnits)
}

inline void ActionObserverCameraFollowUnits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unit_tags_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActionObserverCameraFollowUnits::~ActionObserverCameraFollowUnits() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverCameraFollowUnits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionObserverCameraFollowUnits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unit_tags_.~RepeatedField();
}

void ActionObserverCameraFollowUnits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionObserverCameraFollowUnits::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionObserverCameraFollowUnits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 unit_tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unit_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unit_tags(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionObserverCameraFollowUnits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 unit_tags = 1;
  for (int i = 0, n = this->_internal_unit_tags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unit_tags(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverCameraFollowUnits)
  return target;
}

size_t ActionObserverCameraFollowUnits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 unit_tags = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.unit_tags_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_unit_tags_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionObserverCameraFollowUnits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionObserverCameraFollowUnits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionObserverCameraFollowUnits::GetClassData() const { return &_class_data_; }


void ActionObserverCameraFollowUnits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionObserverCameraFollowUnits*>(&to_msg);
  auto& from = static_cast<const ActionObserverCameraFollowUnits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unit_tags_.MergeFrom(from._impl_.unit_tags_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionObserverCameraFollowUnits::CopyFrom(const ActionObserverCameraFollowUnits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverCameraFollowUnits::IsInitialized() const {
  return true;
}

void ActionObserverCameraFollowUnits::InternalSwap(ActionObserverCameraFollowUnits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.unit_tags_.InternalSwap(&other->_impl_.unit_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionObserverCameraFollowUnits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[61]);
}

// ===================================================================

class PlayerResult::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerResult>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayerResult::PlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerResult)
}

inline void PlayerResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.result_){1}
  };
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.player_id_ = 0u;
    _impl_.result_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::Result_IsValid(val))) {
            _internal_set_result(static_cast<::SC2APIProtocol::Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .SC2APIProtocol.Result result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerResult)
  return target;
}

size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

    // optional .SC2APIProtocol.Result result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerResult::GetClassData() const { return &_class_data_; }


void PlayerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerResult*>(&to_msg);
  auto& from = static_cast<const PlayerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  return true;
}

void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.player_id_, other->_impl_.player_id_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fsc2api_2eproto_getter, &descriptor_table_s2clientprotocol_2fsc2api_2eproto_once,
      file_level_metadata_s2clientprotocol_2fsc2api_2eproto[62]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Request*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Response*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestCreateGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestCreateGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestCreateGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::LocalMap*
Arena::CreateMaybeMessage< ::SC2APIProtocol::LocalMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::LocalMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseCreateGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseCreateGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseCreateGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestJoinGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestJoinGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestJoinGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::PortSet*
Arena::CreateMaybeMessage< ::SC2APIProtocol::PortSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::PortSet >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseJoinGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseJoinGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseJoinGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestRestartGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestRestartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestRestartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseRestartGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseRestartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseRestartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestStartReplay*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestStartReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestStartReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseStartReplay*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseStartReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseStartReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestMapCommand*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestMapCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestMapCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseMapCommand*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseMapCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseMapCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestLeaveGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestLeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestLeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseLeaveGame*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseLeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseLeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQuickSave*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuickSave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQuickSave >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQuickSave*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuickSave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQuickSave >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQuickLoad*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuickLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQuickLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQuickLoad*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuickLoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQuickLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQuit*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQuit >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQuit*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQuit >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestGameInfo*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseGameInfo*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestObservation*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestObservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseObservation*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseObservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ChatReceived*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ChatReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ChatReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestAction*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestAction >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseAction*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseAction >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestObserverAction*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestObserverAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestObserverAction >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseObserverAction*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseObserverAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseObserverAction >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestStep*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestStep >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseStep*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseStep >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestData*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseData*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseData >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestSaveReplay*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestSaveReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestSaveReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseSaveReplay*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseSaveReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseSaveReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestReplayInfo*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestReplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestReplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::PlayerInfoExtra*
Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerInfoExtra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::PlayerInfoExtra >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseReplayInfo*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseReplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseReplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestAvailableMaps*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestAvailableMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestAvailableMaps >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseAvailableMaps*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseAvailableMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseAvailableMaps >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestSaveMap*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestSaveMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestSaveMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseSaveMap*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseSaveMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseSaveMap >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestPing*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestPing >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponsePing*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponsePing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponsePing >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestDebug*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseDebug*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::PlayerSetup*
Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::PlayerSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::SpatialCameraSetup*
Arena::CreateMaybeMessage< ::SC2APIProtocol::SpatialCameraSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::SpatialCameraSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::InterfaceOptions*
Arena::CreateMaybeMessage< ::SC2APIProtocol::InterfaceOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::InterfaceOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::PlayerInfo*
Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::PlayerCommon*
Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::PlayerCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Observation*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Observation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Observation >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::Action*
Arena::CreateMaybeMessage< ::SC2APIProtocol::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionChat*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionChat >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionError*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionError >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ObserverAction*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ObserverAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ObserverAction >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionObserverPlayerPerspective*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverPlayerPerspective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionObserverPlayerPerspective >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionObserverCameraMove*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverCameraMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionObserverCameraMove >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionObserverCameraFollowPlayer*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverCameraFollowPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionObserverCameraFollowPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionObserverCameraFollowUnits*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverCameraFollowUnits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionObserverCameraFollowUnits >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::PlayerResult*
Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::PlayerResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

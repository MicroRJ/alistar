// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/spatial.proto

#include "s2clientprotocol/spatial.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SC2APIProtocol {
PROTOBUF_CONSTEXPR ObservationFeatureLayer::ObservationFeatureLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.renders_)*/nullptr
  , /*decltype(_impl_.minimap_renders_)*/nullptr} {}
struct ObservationFeatureLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationFeatureLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationFeatureLayerDefaultTypeInternal() {}
  union {
    ObservationFeatureLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationFeatureLayerDefaultTypeInternal _ObservationFeatureLayer_default_instance_;
PROTOBUF_CONSTEXPR FeatureLayers::FeatureLayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.height_map_)*/nullptr
  , /*decltype(_impl_.visibility_map_)*/nullptr
  , /*decltype(_impl_.creep_)*/nullptr
  , /*decltype(_impl_.power_)*/nullptr
  , /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.unit_type_)*/nullptr
  , /*decltype(_impl_.selected_)*/nullptr
  , /*decltype(_impl_.unit_hit_points_)*/nullptr
  , /*decltype(_impl_.unit_energy_)*/nullptr
  , /*decltype(_impl_.unit_shields_)*/nullptr
  , /*decltype(_impl_.player_relative_)*/nullptr
  , /*decltype(_impl_.unit_density_aa_)*/nullptr
  , /*decltype(_impl_.unit_density_)*/nullptr
  , /*decltype(_impl_.unit_hit_points_ratio_)*/nullptr
  , /*decltype(_impl_.unit_energy_ratio_)*/nullptr
  , /*decltype(_impl_.unit_shields_ratio_)*/nullptr
  , /*decltype(_impl_.effects_)*/nullptr
  , /*decltype(_impl_.hallucinations_)*/nullptr
  , /*decltype(_impl_.cloaked_)*/nullptr
  , /*decltype(_impl_.blip_)*/nullptr
  , /*decltype(_impl_.buffs_)*/nullptr
  , /*decltype(_impl_.active_)*/nullptr
  , /*decltype(_impl_.buff_duration_)*/nullptr
  , /*decltype(_impl_.build_progress_)*/nullptr
  , /*decltype(_impl_.buildable_)*/nullptr
  , /*decltype(_impl_.pathable_)*/nullptr
  , /*decltype(_impl_.placeholder_)*/nullptr} {}
struct FeatureLayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureLayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureLayersDefaultTypeInternal() {}
  union {
    FeatureLayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureLayersDefaultTypeInternal _FeatureLayers_default_instance_;
PROTOBUF_CONSTEXPR FeatureLayersMinimap::FeatureLayersMinimap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.height_map_)*/nullptr
  , /*decltype(_impl_.visibility_map_)*/nullptr
  , /*decltype(_impl_.creep_)*/nullptr
  , /*decltype(_impl_.camera_)*/nullptr
  , /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.player_relative_)*/nullptr
  , /*decltype(_impl_.selected_)*/nullptr
  , /*decltype(_impl_.unit_type_)*/nullptr
  , /*decltype(_impl_.alerts_)*/nullptr
  , /*decltype(_impl_.buildable_)*/nullptr
  , /*decltype(_impl_.pathable_)*/nullptr} {}
struct FeatureLayersMinimapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureLayersMinimapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureLayersMinimapDefaultTypeInternal() {}
  union {
    FeatureLayersMinimap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureLayersMinimapDefaultTypeInternal _FeatureLayersMinimap_default_instance_;
PROTOBUF_CONSTEXPR ObservationRender::ObservationRender(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_)*/nullptr
  , /*decltype(_impl_.minimap_)*/nullptr} {}
struct ObservationRenderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationRenderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationRenderDefaultTypeInternal() {}
  union {
    ObservationRender _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationRenderDefaultTypeInternal _ObservationRender_default_instance_;
PROTOBUF_CONSTEXPR ActionSpatial::ActionSpatial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ActionSpatialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSpatialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSpatialDefaultTypeInternal() {}
  union {
    ActionSpatial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSpatialDefaultTypeInternal _ActionSpatial_default_instance_;
PROTOBUF_CONSTEXPR ActionSpatialUnitCommand::ActionSpatialUnitCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_id_)*/0
  , /*decltype(_impl_.queue_command_)*/false
  , /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ActionSpatialUnitCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSpatialUnitCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSpatialUnitCommandDefaultTypeInternal() {}
  union {
    ActionSpatialUnitCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSpatialUnitCommandDefaultTypeInternal _ActionSpatialUnitCommand_default_instance_;
PROTOBUF_CONSTEXPR ActionSpatialCameraMove::ActionSpatialCameraMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.center_minimap_)*/nullptr} {}
struct ActionSpatialCameraMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSpatialCameraMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSpatialCameraMoveDefaultTypeInternal() {}
  union {
    ActionSpatialCameraMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSpatialCameraMoveDefaultTypeInternal _ActionSpatialCameraMove_default_instance_;
PROTOBUF_CONSTEXPR ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_screen_coord_)*/nullptr
  , /*decltype(_impl_.type_)*/1} {}
struct ActionSpatialUnitSelectionPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSpatialUnitSelectionPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSpatialUnitSelectionPointDefaultTypeInternal() {}
  union {
    ActionSpatialUnitSelectionPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSpatialUnitSelectionPointDefaultTypeInternal _ActionSpatialUnitSelectionPoint_default_instance_;
PROTOBUF_CONSTEXPR ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selection_screen_coord_)*/{}
  , /*decltype(_impl_.selection_add_)*/false} {}
struct ActionSpatialUnitSelectionRectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionSpatialUnitSelectionRectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionSpatialUnitSelectionRectDefaultTypeInternal() {}
  union {
    ActionSpatialUnitSelectionRect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionSpatialUnitSelectionRectDefaultTypeInternal _ActionSpatialUnitSelectionRect_default_instance_;
}  // namespace SC2APIProtocol
static ::_pb::Metadata file_level_metadata_s2clientprotocol_2fspatial_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_s2clientprotocol_2fspatial_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2clientprotocol_2fspatial_2eproto = nullptr;

const uint32_t TableStruct_s2clientprotocol_2fspatial_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationFeatureLayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationFeatureLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationFeatureLayer, _impl_.renders_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationFeatureLayer, _impl_.minimap_renders_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.height_map_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.visibility_map_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.creep_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_type_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.selected_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_hit_points_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_hit_points_ratio_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_energy_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_energy_ratio_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_shields_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_shields_ratio_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.player_relative_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_density_aa_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.unit_density_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.effects_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.hallucinations_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.cloaked_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.blip_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.buffs_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.buff_duration_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.build_progress_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.buildable_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.pathable_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayers, _impl_.placeholder_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  14,
  9,
  15,
  10,
  11,
  12,
  16,
  17,
  18,
  19,
  20,
  22,
  21,
  23,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.height_map_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.visibility_map_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.creep_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.camera_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.player_relative_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.selected_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.alerts_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.buildable_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.pathable_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::FeatureLayersMinimap, _impl_.unit_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  7,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationRender, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationRender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationRender, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ObservationRender, _impl_.minimap_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatial, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatial, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatial, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitCommand, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitCommand, _impl_.ability_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitCommand, _impl_.queue_command_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitCommand, _impl_.target_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialCameraMove, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialCameraMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialCameraMove, _impl_.center_minimap_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionPoint, _impl_.selection_screen_coord_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionPoint, _impl_.type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionRect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionRect, _impl_.selection_screen_coord_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ActionSpatialUnitSelectionRect, _impl_.selection_add_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::SC2APIProtocol::ObservationFeatureLayer)},
  { 10, 43, -1, sizeof(::SC2APIProtocol::FeatureLayers)},
  { 70, 87, -1, sizeof(::SC2APIProtocol::FeatureLayersMinimap)},
  { 98, 106, -1, sizeof(::SC2APIProtocol::ObservationRender)},
  { 108, -1, -1, sizeof(::SC2APIProtocol::ActionSpatial)},
  { 119, 130, -1, sizeof(::SC2APIProtocol::ActionSpatialUnitCommand)},
  { 134, 141, -1, sizeof(::SC2APIProtocol::ActionSpatialCameraMove)},
  { 142, 150, -1, sizeof(::SC2APIProtocol::ActionSpatialUnitSelectionPoint)},
  { 152, 160, -1, sizeof(::SC2APIProtocol::ActionSpatialUnitSelectionRect)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SC2APIProtocol::_ObservationFeatureLayer_default_instance_._instance,
  &::SC2APIProtocol::_FeatureLayers_default_instance_._instance,
  &::SC2APIProtocol::_FeatureLayersMinimap_default_instance_._instance,
  &::SC2APIProtocol::_ObservationRender_default_instance_._instance,
  &::SC2APIProtocol::_ActionSpatial_default_instance_._instance,
  &::SC2APIProtocol::_ActionSpatialUnitCommand_default_instance_._instance,
  &::SC2APIProtocol::_ActionSpatialCameraMove_default_instance_._instance,
  &::SC2APIProtocol::_ActionSpatialUnitSelectionPoint_default_instance_._instance,
  &::SC2APIProtocol::_ActionSpatialUnitSelectionRect_default_instance_._instance,
};

const char descriptor_table_protodef_s2clientprotocol_2fspatial_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036s2clientprotocol/spatial.proto\022\016SC2API"
  "Protocol\032\035s2clientprotocol/common.proto\""
  "\210\001\n\027ObservationFeatureLayer\022.\n\007renders\030\001"
  " \001(\0132\035.SC2APIProtocol.FeatureLayers\022=\n\017m"
  "inimap_renders\030\002 \001(\0132$.SC2APIProtocol.Fe"
  "atureLayersMinimap\"\234\n\n\rFeatureLayers\022-\n\n"
  "height_map\030\001 \001(\0132\031.SC2APIProtocol.ImageD"
  "ata\0221\n\016visibility_map\030\002 \001(\0132\031.SC2APIProt"
  "ocol.ImageData\022(\n\005creep\030\003 \001(\0132\031.SC2APIPr"
  "otocol.ImageData\022(\n\005power\030\004 \001(\0132\031.SC2API"
  "Protocol.ImageData\022,\n\tplayer_id\030\005 \001(\0132\031."
  "SC2APIProtocol.ImageData\022,\n\tunit_type\030\006 "
  "\001(\0132\031.SC2APIProtocol.ImageData\022+\n\010select"
  "ed\030\007 \001(\0132\031.SC2APIProtocol.ImageData\0222\n\017u"
  "nit_hit_points\030\010 \001(\0132\031.SC2APIProtocol.Im"
  "ageData\0228\n\025unit_hit_points_ratio\030\021 \001(\0132\031"
  ".SC2APIProtocol.ImageData\022.\n\013unit_energy"
  "\030\t \001(\0132\031.SC2APIProtocol.ImageData\0224\n\021uni"
  "t_energy_ratio\030\022 \001(\0132\031.SC2APIProtocol.Im"
  "ageData\022/\n\014unit_shields\030\n \001(\0132\031.SC2APIPr"
  "otocol.ImageData\0225\n\022unit_shields_ratio\030\023"
  " \001(\0132\031.SC2APIProtocol.ImageData\0222\n\017playe"
  "r_relative\030\013 \001(\0132\031.SC2APIProtocol.ImageD"
  "ata\0222\n\017unit_density_aa\030\016 \001(\0132\031.SC2APIPro"
  "tocol.ImageData\022/\n\014unit_density\030\017 \001(\0132\031."
  "SC2APIProtocol.ImageData\022*\n\007effects\030\024 \001("
  "\0132\031.SC2APIProtocol.ImageData\0221\n\016hallucin"
  "ations\030\025 \001(\0132\031.SC2APIProtocol.ImageData\022"
  "*\n\007cloaked\030\026 \001(\0132\031.SC2APIProtocol.ImageD"
  "ata\022\'\n\004blip\030\027 \001(\0132\031.SC2APIProtocol.Image"
  "Data\022(\n\005buffs\030\030 \001(\0132\031.SC2APIProtocol.Ima"
  "geData\0220\n\rbuff_duration\030\032 \001(\0132\031.SC2APIPr"
  "otocol.ImageData\022)\n\006active\030\031 \001(\0132\031.SC2AP"
  "IProtocol.ImageData\0221\n\016build_progress\030\033 "
  "\001(\0132\031.SC2APIProtocol.ImageData\022,\n\tbuilda"
  "ble\030\034 \001(\0132\031.SC2APIProtocol.ImageData\022+\n\010"
  "pathable\030\035 \001(\0132\031.SC2APIProtocol.ImageDat"
  "a\022.\n\013placeholder\030\036 \001(\0132\031.SC2APIProtocol."
  "ImageData\"\220\004\n\024FeatureLayersMinimap\022-\n\nhe"
  "ight_map\030\001 \001(\0132\031.SC2APIProtocol.ImageDat"
  "a\0221\n\016visibility_map\030\002 \001(\0132\031.SC2APIProtoc"
  "ol.ImageData\022(\n\005creep\030\003 \001(\0132\031.SC2APIProt"
  "ocol.ImageData\022)\n\006camera\030\004 \001(\0132\031.SC2APIP"
  "rotocol.ImageData\022,\n\tplayer_id\030\005 \001(\0132\031.S"
  "C2APIProtocol.ImageData\0222\n\017player_relati"
  "ve\030\006 \001(\0132\031.SC2APIProtocol.ImageData\022+\n\010s"
  "elected\030\007 \001(\0132\031.SC2APIProtocol.ImageData"
  "\022)\n\006alerts\030\t \001(\0132\031.SC2APIProtocol.ImageD"
  "ata\022,\n\tbuildable\030\n \001(\0132\031.SC2APIProtocol."
  "ImageData\022+\n\010pathable\030\013 \001(\0132\031.SC2APIProt"
  "ocol.ImageData\022,\n\tunit_type\030\010 \001(\0132\031.SC2A"
  "PIProtocol.ImageData\"g\n\021ObservationRende"
  "r\022&\n\003map\030\001 \001(\0132\031.SC2APIProtocol.ImageDat"
  "a\022*\n\007minimap\030\002 \001(\0132\031.SC2APIProtocol.Imag"
  "eData\"\273\002\n\rActionSpatial\022@\n\014unit_command\030"
  "\001 \001(\0132(.SC2APIProtocol.ActionSpatialUnit"
  "CommandH\000\022>\n\013camera_move\030\002 \001(\0132\'.SC2APIP"
  "rotocol.ActionSpatialCameraMoveH\000\022O\n\024uni"
  "t_selection_point\030\003 \001(\0132/.SC2APIProtocol"
  ".ActionSpatialUnitSelectionPointH\000\022M\n\023un"
  "it_selection_rect\030\004 \001(\0132..SC2APIProtocol"
  ".ActionSpatialUnitSelectionRectH\000B\010\n\006act"
  "ion\"\276\001\n\030ActionSpatialUnitCommand\022\022\n\nabil"
  "ity_id\030\001 \001(\005\0225\n\023target_screen_coord\030\002 \001("
  "\0132\026.SC2APIProtocol.PointIH\000\0226\n\024target_mi"
  "nimap_coord\030\003 \001(\0132\026.SC2APIProtocol.Point"
  "IH\000\022\025\n\rqueue_command\030\004 \001(\010B\010\n\006target\"I\n\027"
  "ActionSpatialCameraMove\022.\n\016center_minima"
  "p\030\001 \001(\0132\026.SC2APIProtocol.PointI\"\332\001\n\037Acti"
  "onSpatialUnitSelectionPoint\0226\n\026selection"
  "_screen_coord\030\001 \001(\0132\026.SC2APIProtocol.Poi"
  "ntI\022B\n\004type\030\002 \001(\01624.SC2APIProtocol.Actio"
  "nSpatialUnitSelectionPoint.Type\";\n\004Type\022"
  "\n\n\006Select\020\001\022\n\n\006Toggle\020\002\022\013\n\007AllType\020\003\022\016\n\n"
  "AddAllType\020\004\"s\n\036ActionSpatialUnitSelecti"
  "onRect\022:\n\026selection_screen_coord\030\001 \003(\0132\032"
  ".SC2APIProtocol.RectangleI\022\025\n\rselection_"
  "add\030\002 \001(\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_s2clientprotocol_2fspatial_2eproto_deps[1] = {
  &::descriptor_table_s2clientprotocol_2fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_s2clientprotocol_2fspatial_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2clientprotocol_2fspatial_2eproto = {
    false, false, 3089, descriptor_table_protodef_s2clientprotocol_2fspatial_2eproto,
    "s2clientprotocol/spatial.proto",
    &descriptor_table_s2clientprotocol_2fspatial_2eproto_once, descriptor_table_s2clientprotocol_2fspatial_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_s2clientprotocol_2fspatial_2eproto::offsets,
    file_level_metadata_s2clientprotocol_2fspatial_2eproto, file_level_enum_descriptors_s2clientprotocol_2fspatial_2eproto,
    file_level_service_descriptors_s2clientprotocol_2fspatial_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2clientprotocol_2fspatial_2eproto_getter() {
  return &descriptor_table_s2clientprotocol_2fspatial_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2clientprotocol_2fspatial_2eproto(&descriptor_table_s2clientprotocol_2fspatial_2eproto);
namespace SC2APIProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionSpatialUnitSelectionPoint_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s2clientprotocol_2fspatial_2eproto);
  return file_level_enum_descriptors_s2clientprotocol_2fspatial_2eproto[0];
}
bool ActionSpatialUnitSelectionPoint_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Select;
constexpr ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Toggle;
constexpr ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::AllType;
constexpr ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::AddAllType;
constexpr ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Type_MIN;
constexpr ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Type_MAX;
constexpr int ActionSpatialUnitSelectionPoint::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ObservationFeatureLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<ObservationFeatureLayer>()._impl_._has_bits_);
  static const ::SC2APIProtocol::FeatureLayers& renders(const ObservationFeatureLayer* msg);
  static void set_has_renders(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::FeatureLayersMinimap& minimap_renders(const ObservationFeatureLayer* msg);
  static void set_has_minimap_renders(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::FeatureLayers&
ObservationFeatureLayer::_Internal::renders(const ObservationFeatureLayer* msg) {
  return *msg->_impl_.renders_;
}
const ::SC2APIProtocol::FeatureLayersMinimap&
ObservationFeatureLayer::_Internal::minimap_renders(const ObservationFeatureLayer* msg) {
  return *msg->_impl_.minimap_renders_;
}
ObservationFeatureLayer::ObservationFeatureLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ObservationFeatureLayer)
}
ObservationFeatureLayer::ObservationFeatureLayer(const ObservationFeatureLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservationFeatureLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.renders_){nullptr}
    , decltype(_impl_.minimap_renders_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_renders()) {
    _this->_impl_.renders_ = new ::SC2APIProtocol::FeatureLayers(*from._impl_.renders_);
  }
  if (from._internal_has_minimap_renders()) {
    _this->_impl_.minimap_renders_ = new ::SC2APIProtocol::FeatureLayersMinimap(*from._impl_.minimap_renders_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationFeatureLayer)
}

inline void ObservationFeatureLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.renders_){nullptr}
    , decltype(_impl_.minimap_renders_){nullptr}
  };
}

ObservationFeatureLayer::~ObservationFeatureLayer() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationFeatureLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservationFeatureLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.renders_;
  if (this != internal_default_instance()) delete _impl_.minimap_renders_;
}

void ObservationFeatureLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservationFeatureLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationFeatureLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.renders_ != nullptr);
      _impl_.renders_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.minimap_renders_ != nullptr);
      _impl_.minimap_renders_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservationFeatureLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.FeatureLayers renders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_renders(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimap_renders(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObservationFeatureLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationFeatureLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.FeatureLayers renders = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::renders(this),
        _Internal::renders(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::minimap_renders(this),
        _Internal::minimap_renders(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationFeatureLayer)
  return target;
}

size_t ObservationFeatureLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationFeatureLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.FeatureLayers renders = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.renders_);
    }

    // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.minimap_renders_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservationFeatureLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservationFeatureLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservationFeatureLayer::GetClassData() const { return &_class_data_; }


void ObservationFeatureLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservationFeatureLayer*>(&to_msg);
  auto& from = static_cast<const ObservationFeatureLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationFeatureLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_renders()->::SC2APIProtocol::FeatureLayers::MergeFrom(
          from._internal_renders());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_minimap_renders()->::SC2APIProtocol::FeatureLayersMinimap::MergeFrom(
          from._internal_minimap_renders());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationFeatureLayer::CopyFrom(const ObservationFeatureLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationFeatureLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationFeatureLayer::IsInitialized() const {
  return true;
}

void ObservationFeatureLayer::InternalSwap(ObservationFeatureLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObservationFeatureLayer, _impl_.minimap_renders_)
      + sizeof(ObservationFeatureLayer::_impl_.minimap_renders_)
      - PROTOBUF_FIELD_OFFSET(ObservationFeatureLayer, _impl_.renders_)>(
          reinterpret_cast<char*>(&_impl_.renders_),
          reinterpret_cast<char*>(&other->_impl_.renders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationFeatureLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[0]);
}

// ===================================================================

class FeatureLayers::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureLayers>()._impl_._has_bits_);
  static const ::SC2APIProtocol::ImageData& height_map(const FeatureLayers* msg);
  static void set_has_height_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::ImageData& visibility_map(const FeatureLayers* msg);
  static void set_has_visibility_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::ImageData& creep(const FeatureLayers* msg);
  static void set_has_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::ImageData& power(const FeatureLayers* msg);
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SC2APIProtocol::ImageData& player_id(const FeatureLayers* msg);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::SC2APIProtocol::ImageData& unit_type(const FeatureLayers* msg);
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::SC2APIProtocol::ImageData& selected(const FeatureLayers* msg);
  static void set_has_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SC2APIProtocol::ImageData& unit_hit_points(const FeatureLayers* msg);
  static void set_has_unit_hit_points(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::SC2APIProtocol::ImageData& unit_hit_points_ratio(const FeatureLayers* msg);
  static void set_has_unit_hit_points_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::SC2APIProtocol::ImageData& unit_energy(const FeatureLayers* msg);
  static void set_has_unit_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::SC2APIProtocol::ImageData& unit_energy_ratio(const FeatureLayers* msg);
  static void set_has_unit_energy_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::SC2APIProtocol::ImageData& unit_shields(const FeatureLayers* msg);
  static void set_has_unit_shields(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::SC2APIProtocol::ImageData& unit_shields_ratio(const FeatureLayers* msg);
  static void set_has_unit_shields_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::SC2APIProtocol::ImageData& player_relative(const FeatureLayers* msg);
  static void set_has_player_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::SC2APIProtocol::ImageData& unit_density_aa(const FeatureLayers* msg);
  static void set_has_unit_density_aa(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::SC2APIProtocol::ImageData& unit_density(const FeatureLayers* msg);
  static void set_has_unit_density(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::SC2APIProtocol::ImageData& effects(const FeatureLayers* msg);
  static void set_has_effects(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::SC2APIProtocol::ImageData& hallucinations(const FeatureLayers* msg);
  static void set_has_hallucinations(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::SC2APIProtocol::ImageData& cloaked(const FeatureLayers* msg);
  static void set_has_cloaked(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::SC2APIProtocol::ImageData& blip(const FeatureLayers* msg);
  static void set_has_blip(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::SC2APIProtocol::ImageData& buffs(const FeatureLayers* msg);
  static void set_has_buffs(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::SC2APIProtocol::ImageData& buff_duration(const FeatureLayers* msg);
  static void set_has_buff_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::SC2APIProtocol::ImageData& active(const FeatureLayers* msg);
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::SC2APIProtocol::ImageData& build_progress(const FeatureLayers* msg);
  static void set_has_build_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::SC2APIProtocol::ImageData& buildable(const FeatureLayers* msg);
  static void set_has_buildable(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::SC2APIProtocol::ImageData& pathable(const FeatureLayers* msg);
  static void set_has_pathable(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::SC2APIProtocol::ImageData& placeholder(const FeatureLayers* msg);
  static void set_has_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::height_map(const FeatureLayers* msg) {
  return *msg->_impl_.height_map_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::visibility_map(const FeatureLayers* msg) {
  return *msg->_impl_.visibility_map_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::creep(const FeatureLayers* msg) {
  return *msg->_impl_.creep_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::power(const FeatureLayers* msg) {
  return *msg->_impl_.power_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::player_id(const FeatureLayers* msg) {
  return *msg->_impl_.player_id_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_type(const FeatureLayers* msg) {
  return *msg->_impl_.unit_type_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::selected(const FeatureLayers* msg) {
  return *msg->_impl_.selected_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_hit_points(const FeatureLayers* msg) {
  return *msg->_impl_.unit_hit_points_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_hit_points_ratio(const FeatureLayers* msg) {
  return *msg->_impl_.unit_hit_points_ratio_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_energy(const FeatureLayers* msg) {
  return *msg->_impl_.unit_energy_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_energy_ratio(const FeatureLayers* msg) {
  return *msg->_impl_.unit_energy_ratio_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_shields(const FeatureLayers* msg) {
  return *msg->_impl_.unit_shields_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_shields_ratio(const FeatureLayers* msg) {
  return *msg->_impl_.unit_shields_ratio_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::player_relative(const FeatureLayers* msg) {
  return *msg->_impl_.player_relative_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_density_aa(const FeatureLayers* msg) {
  return *msg->_impl_.unit_density_aa_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::unit_density(const FeatureLayers* msg) {
  return *msg->_impl_.unit_density_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::effects(const FeatureLayers* msg) {
  return *msg->_impl_.effects_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::hallucinations(const FeatureLayers* msg) {
  return *msg->_impl_.hallucinations_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::cloaked(const FeatureLayers* msg) {
  return *msg->_impl_.cloaked_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::blip(const FeatureLayers* msg) {
  return *msg->_impl_.blip_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::buffs(const FeatureLayers* msg) {
  return *msg->_impl_.buffs_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::buff_duration(const FeatureLayers* msg) {
  return *msg->_impl_.buff_duration_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::active(const FeatureLayers* msg) {
  return *msg->_impl_.active_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::build_progress(const FeatureLayers* msg) {
  return *msg->_impl_.build_progress_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::buildable(const FeatureLayers* msg) {
  return *msg->_impl_.buildable_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::pathable(const FeatureLayers* msg) {
  return *msg->_impl_.pathable_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayers::_Internal::placeholder(const FeatureLayers* msg) {
  return *msg->_impl_.placeholder_;
}
void FeatureLayers::clear_height_map() {
  if (_impl_.height_map_ != nullptr) _impl_.height_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FeatureLayers::clear_visibility_map() {
  if (_impl_.visibility_map_ != nullptr) _impl_.visibility_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FeatureLayers::clear_creep() {
  if (_impl_.creep_ != nullptr) _impl_.creep_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void FeatureLayers::clear_power() {
  if (_impl_.power_ != nullptr) _impl_.power_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FeatureLayers::clear_player_id() {
  if (_impl_.player_id_ != nullptr) _impl_.player_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void FeatureLayers::clear_unit_type() {
  if (_impl_.unit_type_ != nullptr) _impl_.unit_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void FeatureLayers::clear_selected() {
  if (_impl_.selected_ != nullptr) _impl_.selected_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void FeatureLayers::clear_unit_hit_points() {
  if (_impl_.unit_hit_points_ != nullptr) _impl_.unit_hit_points_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void FeatureLayers::clear_unit_hit_points_ratio() {
  if (_impl_.unit_hit_points_ratio_ != nullptr) _impl_.unit_hit_points_ratio_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void FeatureLayers::clear_unit_energy() {
  if (_impl_.unit_energy_ != nullptr) _impl_.unit_energy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void FeatureLayers::clear_unit_energy_ratio() {
  if (_impl_.unit_energy_ratio_ != nullptr) _impl_.unit_energy_ratio_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void FeatureLayers::clear_unit_shields() {
  if (_impl_.unit_shields_ != nullptr) _impl_.unit_shields_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void FeatureLayers::clear_unit_shields_ratio() {
  if (_impl_.unit_shields_ratio_ != nullptr) _impl_.unit_shields_ratio_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void FeatureLayers::clear_player_relative() {
  if (_impl_.player_relative_ != nullptr) _impl_.player_relative_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void FeatureLayers::clear_unit_density_aa() {
  if (_impl_.unit_density_aa_ != nullptr) _impl_.unit_density_aa_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void FeatureLayers::clear_unit_density() {
  if (_impl_.unit_density_ != nullptr) _impl_.unit_density_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void FeatureLayers::clear_effects() {
  if (_impl_.effects_ != nullptr) _impl_.effects_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void FeatureLayers::clear_hallucinations() {
  if (_impl_.hallucinations_ != nullptr) _impl_.hallucinations_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void FeatureLayers::clear_cloaked() {
  if (_impl_.cloaked_ != nullptr) _impl_.cloaked_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void FeatureLayers::clear_blip() {
  if (_impl_.blip_ != nullptr) _impl_.blip_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void FeatureLayers::clear_buffs() {
  if (_impl_.buffs_ != nullptr) _impl_.buffs_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void FeatureLayers::clear_buff_duration() {
  if (_impl_.buff_duration_ != nullptr) _impl_.buff_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void FeatureLayers::clear_active() {
  if (_impl_.active_ != nullptr) _impl_.active_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void FeatureLayers::clear_build_progress() {
  if (_impl_.build_progress_ != nullptr) _impl_.build_progress_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void FeatureLayers::clear_buildable() {
  if (_impl_.buildable_ != nullptr) _impl_.buildable_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void FeatureLayers::clear_pathable() {
  if (_impl_.pathable_ != nullptr) _impl_.pathable_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
void FeatureLayers::clear_placeholder() {
  if (_impl_.placeholder_ != nullptr) _impl_.placeholder_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
FeatureLayers::FeatureLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.FeatureLayers)
}
FeatureLayers::FeatureLayers(const FeatureLayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeatureLayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_map_){nullptr}
    , decltype(_impl_.visibility_map_){nullptr}
    , decltype(_impl_.creep_){nullptr}
    , decltype(_impl_.power_){nullptr}
    , decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.unit_type_){nullptr}
    , decltype(_impl_.selected_){nullptr}
    , decltype(_impl_.unit_hit_points_){nullptr}
    , decltype(_impl_.unit_energy_){nullptr}
    , decltype(_impl_.unit_shields_){nullptr}
    , decltype(_impl_.player_relative_){nullptr}
    , decltype(_impl_.unit_density_aa_){nullptr}
    , decltype(_impl_.unit_density_){nullptr}
    , decltype(_impl_.unit_hit_points_ratio_){nullptr}
    , decltype(_impl_.unit_energy_ratio_){nullptr}
    , decltype(_impl_.unit_shields_ratio_){nullptr}
    , decltype(_impl_.effects_){nullptr}
    , decltype(_impl_.hallucinations_){nullptr}
    , decltype(_impl_.cloaked_){nullptr}
    , decltype(_impl_.blip_){nullptr}
    , decltype(_impl_.buffs_){nullptr}
    , decltype(_impl_.active_){nullptr}
    , decltype(_impl_.buff_duration_){nullptr}
    , decltype(_impl_.build_progress_){nullptr}
    , decltype(_impl_.buildable_){nullptr}
    , decltype(_impl_.pathable_){nullptr}
    , decltype(_impl_.placeholder_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_height_map()) {
    _this->_impl_.height_map_ = new ::SC2APIProtocol::ImageData(*from._impl_.height_map_);
  }
  if (from._internal_has_visibility_map()) {
    _this->_impl_.visibility_map_ = new ::SC2APIProtocol::ImageData(*from._impl_.visibility_map_);
  }
  if (from._internal_has_creep()) {
    _this->_impl_.creep_ = new ::SC2APIProtocol::ImageData(*from._impl_.creep_);
  }
  if (from._internal_has_power()) {
    _this->_impl_.power_ = new ::SC2APIProtocol::ImageData(*from._impl_.power_);
  }
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::SC2APIProtocol::ImageData(*from._impl_.player_id_);
  }
  if (from._internal_has_unit_type()) {
    _this->_impl_.unit_type_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_type_);
  }
  if (from._internal_has_selected()) {
    _this->_impl_.selected_ = new ::SC2APIProtocol::ImageData(*from._impl_.selected_);
  }
  if (from._internal_has_unit_hit_points()) {
    _this->_impl_.unit_hit_points_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_hit_points_);
  }
  if (from._internal_has_unit_energy()) {
    _this->_impl_.unit_energy_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_energy_);
  }
  if (from._internal_has_unit_shields()) {
    _this->_impl_.unit_shields_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_shields_);
  }
  if (from._internal_has_player_relative()) {
    _this->_impl_.player_relative_ = new ::SC2APIProtocol::ImageData(*from._impl_.player_relative_);
  }
  if (from._internal_has_unit_density_aa()) {
    _this->_impl_.unit_density_aa_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_density_aa_);
  }
  if (from._internal_has_unit_density()) {
    _this->_impl_.unit_density_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_density_);
  }
  if (from._internal_has_unit_hit_points_ratio()) {
    _this->_impl_.unit_hit_points_ratio_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_hit_points_ratio_);
  }
  if (from._internal_has_unit_energy_ratio()) {
    _this->_impl_.unit_energy_ratio_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_energy_ratio_);
  }
  if (from._internal_has_unit_shields_ratio()) {
    _this->_impl_.unit_shields_ratio_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_shields_ratio_);
  }
  if (from._internal_has_effects()) {
    _this->_impl_.effects_ = new ::SC2APIProtocol::ImageData(*from._impl_.effects_);
  }
  if (from._internal_has_hallucinations()) {
    _this->_impl_.hallucinations_ = new ::SC2APIProtocol::ImageData(*from._impl_.hallucinations_);
  }
  if (from._internal_has_cloaked()) {
    _this->_impl_.cloaked_ = new ::SC2APIProtocol::ImageData(*from._impl_.cloaked_);
  }
  if (from._internal_has_blip()) {
    _this->_impl_.blip_ = new ::SC2APIProtocol::ImageData(*from._impl_.blip_);
  }
  if (from._internal_has_buffs()) {
    _this->_impl_.buffs_ = new ::SC2APIProtocol::ImageData(*from._impl_.buffs_);
  }
  if (from._internal_has_active()) {
    _this->_impl_.active_ = new ::SC2APIProtocol::ImageData(*from._impl_.active_);
  }
  if (from._internal_has_buff_duration()) {
    _this->_impl_.buff_duration_ = new ::SC2APIProtocol::ImageData(*from._impl_.buff_duration_);
  }
  if (from._internal_has_build_progress()) {
    _this->_impl_.build_progress_ = new ::SC2APIProtocol::ImageData(*from._impl_.build_progress_);
  }
  if (from._internal_has_buildable()) {
    _this->_impl_.buildable_ = new ::SC2APIProtocol::ImageData(*from._impl_.buildable_);
  }
  if (from._internal_has_pathable()) {
    _this->_impl_.pathable_ = new ::SC2APIProtocol::ImageData(*from._impl_.pathable_);
  }
  if (from._internal_has_placeholder()) {
    _this->_impl_.placeholder_ = new ::SC2APIProtocol::ImageData(*from._impl_.placeholder_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.FeatureLayers)
}

inline void FeatureLayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_map_){nullptr}
    , decltype(_impl_.visibility_map_){nullptr}
    , decltype(_impl_.creep_){nullptr}
    , decltype(_impl_.power_){nullptr}
    , decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.unit_type_){nullptr}
    , decltype(_impl_.selected_){nullptr}
    , decltype(_impl_.unit_hit_points_){nullptr}
    , decltype(_impl_.unit_energy_){nullptr}
    , decltype(_impl_.unit_shields_){nullptr}
    , decltype(_impl_.player_relative_){nullptr}
    , decltype(_impl_.unit_density_aa_){nullptr}
    , decltype(_impl_.unit_density_){nullptr}
    , decltype(_impl_.unit_hit_points_ratio_){nullptr}
    , decltype(_impl_.unit_energy_ratio_){nullptr}
    , decltype(_impl_.unit_shields_ratio_){nullptr}
    , decltype(_impl_.effects_){nullptr}
    , decltype(_impl_.hallucinations_){nullptr}
    , decltype(_impl_.cloaked_){nullptr}
    , decltype(_impl_.blip_){nullptr}
    , decltype(_impl_.buffs_){nullptr}
    , decltype(_impl_.active_){nullptr}
    , decltype(_impl_.buff_duration_){nullptr}
    , decltype(_impl_.build_progress_){nullptr}
    , decltype(_impl_.buildable_){nullptr}
    , decltype(_impl_.pathable_){nullptr}
    , decltype(_impl_.placeholder_){nullptr}
  };
}

FeatureLayers::~FeatureLayers() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.FeatureLayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureLayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.height_map_;
  if (this != internal_default_instance()) delete _impl_.visibility_map_;
  if (this != internal_default_instance()) delete _impl_.creep_;
  if (this != internal_default_instance()) delete _impl_.power_;
  if (this != internal_default_instance()) delete _impl_.player_id_;
  if (this != internal_default_instance()) delete _impl_.unit_type_;
  if (this != internal_default_instance()) delete _impl_.selected_;
  if (this != internal_default_instance()) delete _impl_.unit_hit_points_;
  if (this != internal_default_instance()) delete _impl_.unit_energy_;
  if (this != internal_default_instance()) delete _impl_.unit_shields_;
  if (this != internal_default_instance()) delete _impl_.player_relative_;
  if (this != internal_default_instance()) delete _impl_.unit_density_aa_;
  if (this != internal_default_instance()) delete _impl_.unit_density_;
  if (this != internal_default_instance()) delete _impl_.unit_hit_points_ratio_;
  if (this != internal_default_instance()) delete _impl_.unit_energy_ratio_;
  if (this != internal_default_instance()) delete _impl_.unit_shields_ratio_;
  if (this != internal_default_instance()) delete _impl_.effects_;
  if (this != internal_default_instance()) delete _impl_.hallucinations_;
  if (this != internal_default_instance()) delete _impl_.cloaked_;
  if (this != internal_default_instance()) delete _impl_.blip_;
  if (this != internal_default_instance()) delete _impl_.buffs_;
  if (this != internal_default_instance()) delete _impl_.active_;
  if (this != internal_default_instance()) delete _impl_.buff_duration_;
  if (this != internal_default_instance()) delete _impl_.build_progress_;
  if (this != internal_default_instance()) delete _impl_.buildable_;
  if (this != internal_default_instance()) delete _impl_.pathable_;
  if (this != internal_default_instance()) delete _impl_.placeholder_;
}

void FeatureLayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.FeatureLayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.height_map_ != nullptr);
      _impl_.height_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.visibility_map_ != nullptr);
      _impl_.visibility_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.creep_ != nullptr);
      _impl_.creep_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.power_ != nullptr);
      _impl_.power_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.player_id_ != nullptr);
      _impl_.player_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.unit_type_ != nullptr);
      _impl_.unit_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.selected_ != nullptr);
      _impl_.selected_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.unit_hit_points_ != nullptr);
      _impl_.unit_hit_points_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.unit_energy_ != nullptr);
      _impl_.unit_energy_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.unit_shields_ != nullptr);
      _impl_.unit_shields_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.player_relative_ != nullptr);
      _impl_.player_relative_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.unit_density_aa_ != nullptr);
      _impl_.unit_density_aa_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.unit_density_ != nullptr);
      _impl_.unit_density_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.unit_hit_points_ratio_ != nullptr);
      _impl_.unit_hit_points_ratio_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.unit_energy_ratio_ != nullptr);
      _impl_.unit_energy_ratio_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.unit_shields_ratio_ != nullptr);
      _impl_.unit_shields_ratio_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.effects_ != nullptr);
      _impl_.effects_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.hallucinations_ != nullptr);
      _impl_.hallucinations_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.cloaked_ != nullptr);
      _impl_.cloaked_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.blip_ != nullptr);
      _impl_.blip_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.buffs_ != nullptr);
      _impl_.buffs_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.active_ != nullptr);
      _impl_.active_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.buff_duration_ != nullptr);
      _impl_.buff_duration_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.build_progress_ != nullptr);
      _impl_.build_progress_->Clear();
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.buildable_ != nullptr);
      _impl_.buildable_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.pathable_ != nullptr);
      _impl_.pathable_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.placeholder_ != nullptr);
      _impl_.placeholder_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureLayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ImageData height_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_height_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData visibility_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData creep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_creep(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData player_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData selected = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_hit_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_energy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_energy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_shields = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_shields(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData player_relative = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_relative(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_density_aa(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_density = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_density(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_hit_points_ratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_energy_ratio = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_energy_ratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_shields_ratio = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_shields_ratio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData effects = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_effects(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData hallucinations = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_hallucinations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData cloaked = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloaked(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData blip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_blip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData buffs = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_buffs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData active = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_active(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData buff_duration = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData build_progress = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_progress(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData buildable = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData pathable = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData placeholder = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureLayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.FeatureLayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ImageData height_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::height_map(this),
        _Internal::height_map(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData visibility_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::visibility_map(this),
        _Internal::visibility_map(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData creep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::creep(this),
        _Internal::creep(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData power = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::power(this),
        _Internal::power(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData player_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::unit_type(this),
        _Internal::unit_type(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData selected = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::selected(this),
        _Internal::selected(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::unit_hit_points(this),
        _Internal::unit_hit_points(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_energy = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::unit_energy(this),
        _Internal::unit_energy(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_shields = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::unit_shields(this),
        _Internal::unit_shields(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData player_relative = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::player_relative(this),
        _Internal::player_relative(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::unit_density_aa(this),
        _Internal::unit_density_aa(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_density = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::unit_density(this),
        _Internal::unit_density(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::unit_hit_points_ratio(this),
        _Internal::unit_hit_points_ratio(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_energy_ratio = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::unit_energy_ratio(this),
        _Internal::unit_energy_ratio(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_shields_ratio = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::unit_shields_ratio(this),
        _Internal::unit_shields_ratio(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData effects = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::effects(this),
        _Internal::effects(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData hallucinations = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::hallucinations(this),
        _Internal::hallucinations(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData cloaked = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::cloaked(this),
        _Internal::cloaked(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData blip = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::blip(this),
        _Internal::blip(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData buffs = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::buffs(this),
        _Internal::buffs(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData active = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::active(this),
        _Internal::active(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData buff_duration = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::buff_duration(this),
        _Internal::buff_duration(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData build_progress = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::build_progress(this),
        _Internal::build_progress(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData buildable = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::buildable(this),
        _Internal::buildable(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData pathable = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::pathable(this),
        _Internal::pathable(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData placeholder = 30;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::placeholder(this),
        _Internal::placeholder(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.FeatureLayers)
  return target;
}

size_t FeatureLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.FeatureLayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SC2APIProtocol.ImageData height_map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_map_);
    }

    // optional .SC2APIProtocol.ImageData visibility_map = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.visibility_map_);
    }

    // optional .SC2APIProtocol.ImageData creep = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.creep_);
    }

    // optional .SC2APIProtocol.ImageData power = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.power_);
    }

    // optional .SC2APIProtocol.ImageData player_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_id_);
    }

    // optional .SC2APIProtocol.ImageData unit_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_type_);
    }

    // optional .SC2APIProtocol.ImageData selected = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selected_);
    }

    // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_hit_points_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .SC2APIProtocol.ImageData unit_energy = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_energy_);
    }

    // optional .SC2APIProtocol.ImageData unit_shields = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_shields_);
    }

    // optional .SC2APIProtocol.ImageData player_relative = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_relative_);
    }

    // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_density_aa_);
    }

    // optional .SC2APIProtocol.ImageData unit_density = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_density_);
    }

    // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_hit_points_ratio_);
    }

    // optional .SC2APIProtocol.ImageData unit_energy_ratio = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_energy_ratio_);
    }

    // optional .SC2APIProtocol.ImageData unit_shields_ratio = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_shields_ratio_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .SC2APIProtocol.ImageData effects = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.effects_);
    }

    // optional .SC2APIProtocol.ImageData hallucinations = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hallucinations_);
    }

    // optional .SC2APIProtocol.ImageData cloaked = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cloaked_);
    }

    // optional .SC2APIProtocol.ImageData blip = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.blip_);
    }

    // optional .SC2APIProtocol.ImageData buffs = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buffs_);
    }

    // optional .SC2APIProtocol.ImageData active = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.active_);
    }

    // optional .SC2APIProtocol.ImageData buff_duration = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buff_duration_);
    }

    // optional .SC2APIProtocol.ImageData build_progress = 27;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_progress_);
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional .SC2APIProtocol.ImageData buildable = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buildable_);
    }

    // optional .SC2APIProtocol.ImageData pathable = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pathable_);
    }

    // optional .SC2APIProtocol.ImageData placeholder = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.placeholder_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureLayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeatureLayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureLayers::GetClassData() const { return &_class_data_; }


void FeatureLayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeatureLayers*>(&to_msg);
  auto& from = static_cast<const FeatureLayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.FeatureLayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_height_map()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_height_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_visibility_map()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_visibility_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_creep()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_creep());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_power()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_power());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_player_id()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_player_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_unit_type()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_selected()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_selected());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_unit_hit_points()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_hit_points());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_unit_energy()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_energy());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_unit_shields()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_shields());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_player_relative()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_player_relative());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_unit_density_aa()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_density_aa());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_unit_density()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_density());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_unit_hit_points_ratio()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_hit_points_ratio());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_unit_energy_ratio()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_energy_ratio());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_unit_shields_ratio()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_shields_ratio());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_effects()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_effects());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_hallucinations()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_hallucinations());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_cloaked()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_cloaked());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_blip()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_blip());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_buffs()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_buffs());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_active()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_active());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_buff_duration()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_buff_duration());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_build_progress()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_build_progress());
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_buildable()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_buildable());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_pathable()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_pathable());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_placeholder()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_placeholder());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureLayers::CopyFrom(const FeatureLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.FeatureLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureLayers::IsInitialized() const {
  return true;
}

void FeatureLayers::InternalSwap(FeatureLayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeatureLayers, _impl_.placeholder_)
      + sizeof(FeatureLayers::_impl_.placeholder_)
      - PROTOBUF_FIELD_OFFSET(FeatureLayers, _impl_.height_map_)>(
          reinterpret_cast<char*>(&_impl_.height_map_),
          reinterpret_cast<char*>(&other->_impl_.height_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureLayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[1]);
}

// ===================================================================

class FeatureLayersMinimap::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureLayersMinimap>()._impl_._has_bits_);
  static const ::SC2APIProtocol::ImageData& height_map(const FeatureLayersMinimap* msg);
  static void set_has_height_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::ImageData& visibility_map(const FeatureLayersMinimap* msg);
  static void set_has_visibility_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SC2APIProtocol::ImageData& creep(const FeatureLayersMinimap* msg);
  static void set_has_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::ImageData& camera(const FeatureLayersMinimap* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SC2APIProtocol::ImageData& player_id(const FeatureLayersMinimap* msg);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::SC2APIProtocol::ImageData& player_relative(const FeatureLayersMinimap* msg);
  static void set_has_player_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::SC2APIProtocol::ImageData& selected(const FeatureLayersMinimap* msg);
  static void set_has_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SC2APIProtocol::ImageData& alerts(const FeatureLayersMinimap* msg);
  static void set_has_alerts(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::SC2APIProtocol::ImageData& buildable(const FeatureLayersMinimap* msg);
  static void set_has_buildable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::SC2APIProtocol::ImageData& pathable(const FeatureLayersMinimap* msg);
  static void set_has_pathable(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::SC2APIProtocol::ImageData& unit_type(const FeatureLayersMinimap* msg);
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::height_map(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.height_map_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::visibility_map(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.visibility_map_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::creep(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.creep_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::camera(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.camera_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::player_id(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.player_id_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::player_relative(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.player_relative_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::selected(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.selected_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::alerts(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.alerts_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::buildable(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.buildable_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::pathable(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.pathable_;
}
const ::SC2APIProtocol::ImageData&
FeatureLayersMinimap::_Internal::unit_type(const FeatureLayersMinimap* msg) {
  return *msg->_impl_.unit_type_;
}
void FeatureLayersMinimap::clear_height_map() {
  if (_impl_.height_map_ != nullptr) _impl_.height_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FeatureLayersMinimap::clear_visibility_map() {
  if (_impl_.visibility_map_ != nullptr) _impl_.visibility_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FeatureLayersMinimap::clear_creep() {
  if (_impl_.creep_ != nullptr) _impl_.creep_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void FeatureLayersMinimap::clear_camera() {
  if (_impl_.camera_ != nullptr) _impl_.camera_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FeatureLayersMinimap::clear_player_id() {
  if (_impl_.player_id_ != nullptr) _impl_.player_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void FeatureLayersMinimap::clear_player_relative() {
  if (_impl_.player_relative_ != nullptr) _impl_.player_relative_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void FeatureLayersMinimap::clear_selected() {
  if (_impl_.selected_ != nullptr) _impl_.selected_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void FeatureLayersMinimap::clear_alerts() {
  if (_impl_.alerts_ != nullptr) _impl_.alerts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void FeatureLayersMinimap::clear_buildable() {
  if (_impl_.buildable_ != nullptr) _impl_.buildable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void FeatureLayersMinimap::clear_pathable() {
  if (_impl_.pathable_ != nullptr) _impl_.pathable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void FeatureLayersMinimap::clear_unit_type() {
  if (_impl_.unit_type_ != nullptr) _impl_.unit_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
FeatureLayersMinimap::FeatureLayersMinimap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.FeatureLayersMinimap)
}
FeatureLayersMinimap::FeatureLayersMinimap(const FeatureLayersMinimap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeatureLayersMinimap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_map_){nullptr}
    , decltype(_impl_.visibility_map_){nullptr}
    , decltype(_impl_.creep_){nullptr}
    , decltype(_impl_.camera_){nullptr}
    , decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.player_relative_){nullptr}
    , decltype(_impl_.selected_){nullptr}
    , decltype(_impl_.unit_type_){nullptr}
    , decltype(_impl_.alerts_){nullptr}
    , decltype(_impl_.buildable_){nullptr}
    , decltype(_impl_.pathable_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_height_map()) {
    _this->_impl_.height_map_ = new ::SC2APIProtocol::ImageData(*from._impl_.height_map_);
  }
  if (from._internal_has_visibility_map()) {
    _this->_impl_.visibility_map_ = new ::SC2APIProtocol::ImageData(*from._impl_.visibility_map_);
  }
  if (from._internal_has_creep()) {
    _this->_impl_.creep_ = new ::SC2APIProtocol::ImageData(*from._impl_.creep_);
  }
  if (from._internal_has_camera()) {
    _this->_impl_.camera_ = new ::SC2APIProtocol::ImageData(*from._impl_.camera_);
  }
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::SC2APIProtocol::ImageData(*from._impl_.player_id_);
  }
  if (from._internal_has_player_relative()) {
    _this->_impl_.player_relative_ = new ::SC2APIProtocol::ImageData(*from._impl_.player_relative_);
  }
  if (from._internal_has_selected()) {
    _this->_impl_.selected_ = new ::SC2APIProtocol::ImageData(*from._impl_.selected_);
  }
  if (from._internal_has_unit_type()) {
    _this->_impl_.unit_type_ = new ::SC2APIProtocol::ImageData(*from._impl_.unit_type_);
  }
  if (from._internal_has_alerts()) {
    _this->_impl_.alerts_ = new ::SC2APIProtocol::ImageData(*from._impl_.alerts_);
  }
  if (from._internal_has_buildable()) {
    _this->_impl_.buildable_ = new ::SC2APIProtocol::ImageData(*from._impl_.buildable_);
  }
  if (from._internal_has_pathable()) {
    _this->_impl_.pathable_ = new ::SC2APIProtocol::ImageData(*from._impl_.pathable_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.FeatureLayersMinimap)
}

inline void FeatureLayersMinimap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_map_){nullptr}
    , decltype(_impl_.visibility_map_){nullptr}
    , decltype(_impl_.creep_){nullptr}
    , decltype(_impl_.camera_){nullptr}
    , decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.player_relative_){nullptr}
    , decltype(_impl_.selected_){nullptr}
    , decltype(_impl_.unit_type_){nullptr}
    , decltype(_impl_.alerts_){nullptr}
    , decltype(_impl_.buildable_){nullptr}
    , decltype(_impl_.pathable_){nullptr}
  };
}

FeatureLayersMinimap::~FeatureLayersMinimap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.FeatureLayersMinimap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeatureLayersMinimap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.height_map_;
  if (this != internal_default_instance()) delete _impl_.visibility_map_;
  if (this != internal_default_instance()) delete _impl_.creep_;
  if (this != internal_default_instance()) delete _impl_.camera_;
  if (this != internal_default_instance()) delete _impl_.player_id_;
  if (this != internal_default_instance()) delete _impl_.player_relative_;
  if (this != internal_default_instance()) delete _impl_.selected_;
  if (this != internal_default_instance()) delete _impl_.unit_type_;
  if (this != internal_default_instance()) delete _impl_.alerts_;
  if (this != internal_default_instance()) delete _impl_.buildable_;
  if (this != internal_default_instance()) delete _impl_.pathable_;
}

void FeatureLayersMinimap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeatureLayersMinimap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.FeatureLayersMinimap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.height_map_ != nullptr);
      _impl_.height_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.visibility_map_ != nullptr);
      _impl_.visibility_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.creep_ != nullptr);
      _impl_.creep_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.camera_ != nullptr);
      _impl_.camera_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.player_id_ != nullptr);
      _impl_.player_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.player_relative_ != nullptr);
      _impl_.player_relative_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.selected_ != nullptr);
      _impl_.selected_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.unit_type_ != nullptr);
      _impl_.unit_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.alerts_ != nullptr);
      _impl_.alerts_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.buildable_ != nullptr);
      _impl_.buildable_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.pathable_ != nullptr);
      _impl_.pathable_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureLayersMinimap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ImageData height_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_height_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData visibility_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData creep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_creep(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData player_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData player_relative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_relative(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData selected = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData unit_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData alerts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_alerts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData buildable = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_buildable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData pathable = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeatureLayersMinimap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.FeatureLayersMinimap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ImageData height_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::height_map(this),
        _Internal::height_map(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData visibility_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::visibility_map(this),
        _Internal::visibility_map(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData creep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::creep(this),
        _Internal::creep(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData camera = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::camera(this),
        _Internal::camera(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData player_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData player_relative = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::player_relative(this),
        _Internal::player_relative(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData selected = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::selected(this),
        _Internal::selected(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData unit_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::unit_type(this),
        _Internal::unit_type(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData alerts = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::alerts(this),
        _Internal::alerts(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData buildable = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::buildable(this),
        _Internal::buildable(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData pathable = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pathable(this),
        _Internal::pathable(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.FeatureLayersMinimap)
  return target;
}

size_t FeatureLayersMinimap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.FeatureLayersMinimap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .SC2APIProtocol.ImageData height_map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_map_);
    }

    // optional .SC2APIProtocol.ImageData visibility_map = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.visibility_map_);
    }

    // optional .SC2APIProtocol.ImageData creep = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.creep_);
    }

    // optional .SC2APIProtocol.ImageData camera = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.camera_);
    }

    // optional .SC2APIProtocol.ImageData player_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_id_);
    }

    // optional .SC2APIProtocol.ImageData player_relative = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.player_relative_);
    }

    // optional .SC2APIProtocol.ImageData selected = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selected_);
    }

    // optional .SC2APIProtocol.ImageData unit_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_type_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .SC2APIProtocol.ImageData alerts = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.alerts_);
    }

    // optional .SC2APIProtocol.ImageData buildable = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buildable_);
    }

    // optional .SC2APIProtocol.ImageData pathable = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pathable_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeatureLayersMinimap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeatureLayersMinimap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeatureLayersMinimap::GetClassData() const { return &_class_data_; }


void FeatureLayersMinimap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeatureLayersMinimap*>(&to_msg);
  auto& from = static_cast<const FeatureLayersMinimap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.FeatureLayersMinimap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_height_map()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_height_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_visibility_map()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_visibility_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_creep()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_creep());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_camera()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_camera());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_player_id()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_player_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_player_relative()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_player_relative());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_selected()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_selected());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_unit_type()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_unit_type());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_alerts()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_alerts());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_buildable()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_buildable());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_pathable()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_pathable());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeatureLayersMinimap::CopyFrom(const FeatureLayersMinimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.FeatureLayersMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureLayersMinimap::IsInitialized() const {
  return true;
}

void FeatureLayersMinimap::InternalSwap(FeatureLayersMinimap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeatureLayersMinimap, _impl_.pathable_)
      + sizeof(FeatureLayersMinimap::_impl_.pathable_)
      - PROTOBUF_FIELD_OFFSET(FeatureLayersMinimap, _impl_.height_map_)>(
          reinterpret_cast<char*>(&_impl_.height_map_),
          reinterpret_cast<char*>(&other->_impl_.height_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureLayersMinimap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[2]);
}

// ===================================================================

class ObservationRender::_Internal {
 public:
  using HasBits = decltype(std::declval<ObservationRender>()._impl_._has_bits_);
  static const ::SC2APIProtocol::ImageData& map(const ObservationRender* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::ImageData& minimap(const ObservationRender* msg);
  static void set_has_minimap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::ImageData&
ObservationRender::_Internal::map(const ObservationRender* msg) {
  return *msg->_impl_.map_;
}
const ::SC2APIProtocol::ImageData&
ObservationRender::_Internal::minimap(const ObservationRender* msg) {
  return *msg->_impl_.minimap_;
}
void ObservationRender::clear_map() {
  if (_impl_.map_ != nullptr) _impl_.map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ObservationRender::clear_minimap() {
  if (_impl_.minimap_ != nullptr) _impl_.minimap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ObservationRender::ObservationRender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ObservationRender)
}
ObservationRender::ObservationRender(const ObservationRender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservationRender* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.minimap_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map()) {
    _this->_impl_.map_ = new ::SC2APIProtocol::ImageData(*from._impl_.map_);
  }
  if (from._internal_has_minimap()) {
    _this->_impl_.minimap_ = new ::SC2APIProtocol::ImageData(*from._impl_.minimap_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationRender)
}

inline void ObservationRender::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.minimap_){nullptr}
  };
}

ObservationRender::~ObservationRender() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationRender)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservationRender::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.map_;
  if (this != internal_default_instance()) delete _impl_.minimap_;
}

void ObservationRender::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservationRender::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationRender)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.map_ != nullptr);
      _impl_.map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.minimap_ != nullptr);
      _impl_.minimap_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservationRender::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ImageData map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ImageData minimap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObservationRender::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationRender)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ImageData map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ImageData minimap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::minimap(this),
        _Internal::minimap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationRender)
  return target;
}

size_t ObservationRender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationRender)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.ImageData map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.map_);
    }

    // optional .SC2APIProtocol.ImageData minimap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.minimap_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservationRender::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservationRender::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservationRender::GetClassData() const { return &_class_data_; }


void ObservationRender::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservationRender*>(&to_msg);
  auto& from = static_cast<const ObservationRender&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationRender)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_map()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_minimap()->::SC2APIProtocol::ImageData::MergeFrom(
          from._internal_minimap());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservationRender::CopyFrom(const ObservationRender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationRender::IsInitialized() const {
  return true;
}

void ObservationRender::InternalSwap(ObservationRender* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObservationRender, _impl_.minimap_)
      + sizeof(ObservationRender::_impl_.minimap_)
      - PROTOBUF_FIELD_OFFSET(ObservationRender, _impl_.map_)>(
          reinterpret_cast<char*>(&_impl_.map_),
          reinterpret_cast<char*>(&other->_impl_.map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationRender::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[3]);
}

// ===================================================================

class ActionSpatial::_Internal {
 public:
  static const ::SC2APIProtocol::ActionSpatialUnitCommand& unit_command(const ActionSpatial* msg);
  static const ::SC2APIProtocol::ActionSpatialCameraMove& camera_move(const ActionSpatial* msg);
  static const ::SC2APIProtocol::ActionSpatialUnitSelectionPoint& unit_selection_point(const ActionSpatial* msg);
  static const ::SC2APIProtocol::ActionSpatialUnitSelectionRect& unit_selection_rect(const ActionSpatial* msg);
};

const ::SC2APIProtocol::ActionSpatialUnitCommand&
ActionSpatial::_Internal::unit_command(const ActionSpatial* msg) {
  return *msg->_impl_.action_.unit_command_;
}
const ::SC2APIProtocol::ActionSpatialCameraMove&
ActionSpatial::_Internal::camera_move(const ActionSpatial* msg) {
  return *msg->_impl_.action_.camera_move_;
}
const ::SC2APIProtocol::ActionSpatialUnitSelectionPoint&
ActionSpatial::_Internal::unit_selection_point(const ActionSpatial* msg) {
  return *msg->_impl_.action_.unit_selection_point_;
}
const ::SC2APIProtocol::ActionSpatialUnitSelectionRect&
ActionSpatial::_Internal::unit_selection_rect(const ActionSpatial* msg) {
  return *msg->_impl_.action_.unit_selection_rect_;
}
void ActionSpatial::set_allocated_unit_command(::SC2APIProtocol::ActionSpatialUnitCommand* unit_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (unit_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unit_command);
    if (message_arena != submessage_arena) {
      unit_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_command, submessage_arena);
    }
    set_has_unit_command();
    _impl_.action_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.unit_command)
}
void ActionSpatial::set_allocated_camera_move(::SC2APIProtocol::ActionSpatialCameraMove* camera_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (camera_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_move);
    if (message_arena != submessage_arena) {
      camera_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_move, submessage_arena);
    }
    set_has_camera_move();
    _impl_.action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.camera_move)
}
void ActionSpatial::set_allocated_unit_selection_point(::SC2APIProtocol::ActionSpatialUnitSelectionPoint* unit_selection_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (unit_selection_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unit_selection_point);
    if (message_arena != submessage_arena) {
      unit_selection_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_selection_point, submessage_arena);
    }
    set_has_unit_selection_point();
    _impl_.action_.unit_selection_point_ = unit_selection_point;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.unit_selection_point)
}
void ActionSpatial::set_allocated_unit_selection_rect(::SC2APIProtocol::ActionSpatialUnitSelectionRect* unit_selection_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (unit_selection_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unit_selection_rect);
    if (message_arena != submessage_arena) {
      unit_selection_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_selection_rect, submessage_arena);
    }
    set_has_unit_selection_rect();
    _impl_.action_.unit_selection_rect_ = unit_selection_rect;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.unit_selection_rect)
}
ActionSpatial::ActionSpatial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSpatial)
}
ActionSpatial::ActionSpatial(const ActionSpatial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSpatial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kUnitCommand: {
      _this->_internal_mutable_unit_command()->::SC2APIProtocol::ActionSpatialUnitCommand::MergeFrom(
          from._internal_unit_command());
      break;
    }
    case kCameraMove: {
      _this->_internal_mutable_camera_move()->::SC2APIProtocol::ActionSpatialCameraMove::MergeFrom(
          from._internal_camera_move());
      break;
    }
    case kUnitSelectionPoint: {
      _this->_internal_mutable_unit_selection_point()->::SC2APIProtocol::ActionSpatialUnitSelectionPoint::MergeFrom(
          from._internal_unit_selection_point());
      break;
    }
    case kUnitSelectionRect: {
      _this->_internal_mutable_unit_selection_rect()->::SC2APIProtocol::ActionSpatialUnitSelectionRect::MergeFrom(
          from._internal_unit_selection_rect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatial)
}

inline void ActionSpatial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_action();
}

ActionSpatial::~ActionSpatial() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSpatial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ActionSpatial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSpatial::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionSpatial)
  switch (action_case()) {
    case kUnitCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.unit_command_;
      }
      break;
    }
    case kCameraMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.camera_move_;
      }
      break;
    }
    case kUnitSelectionPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.unit_selection_point_;
      }
      break;
    }
    case kUnitSelectionRect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.unit_selection_rect_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void ActionSpatial::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSpatial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_selection_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_selection_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSpatial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kUnitCommand: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::unit_command(this),
          _Internal::unit_command(this).GetCachedSize(), target, stream);
      break;
    }
    case kCameraMove: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::camera_move(this),
          _Internal::camera_move(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnitSelectionPoint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::unit_selection_point(this),
          _Internal::unit_selection_point(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnitSelectionRect: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::unit_selection_rect(this),
          _Internal::unit_selection_rect(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatial)
  return target;
}

size_t ActionSpatial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
    case kUnitCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.unit_command_);
      break;
    }
    // .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.camera_move_);
      break;
    }
    // .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
    case kUnitSelectionPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.unit_selection_point_);
      break;
    }
    // .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
    case kUnitSelectionRect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.unit_selection_rect_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSpatial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSpatial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSpatial::GetClassData() const { return &_class_data_; }


void ActionSpatial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSpatial*>(&to_msg);
  auto& from = static_cast<const ActionSpatial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kUnitCommand: {
      _this->_internal_mutable_unit_command()->::SC2APIProtocol::ActionSpatialUnitCommand::MergeFrom(
          from._internal_unit_command());
      break;
    }
    case kCameraMove: {
      _this->_internal_mutable_camera_move()->::SC2APIProtocol::ActionSpatialCameraMove::MergeFrom(
          from._internal_camera_move());
      break;
    }
    case kUnitSelectionPoint: {
      _this->_internal_mutable_unit_selection_point()->::SC2APIProtocol::ActionSpatialUnitSelectionPoint::MergeFrom(
          from._internal_unit_selection_point());
      break;
    }
    case kUnitSelectionRect: {
      _this->_internal_mutable_unit_selection_rect()->::SC2APIProtocol::ActionSpatialUnitSelectionRect::MergeFrom(
          from._internal_unit_selection_rect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSpatial::CopyFrom(const ActionSpatial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatial::IsInitialized() const {
  return true;
}

void ActionSpatial::InternalSwap(ActionSpatial* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSpatial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[4]);
}

// ===================================================================

class ActionSpatialUnitCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSpatialUnitCommand>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SC2APIProtocol::PointI& target_screen_coord(const ActionSpatialUnitCommand* msg);
  static const ::SC2APIProtocol::PointI& target_minimap_coord(const ActionSpatialUnitCommand* msg);
  static void set_has_queue_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::PointI&
ActionSpatialUnitCommand::_Internal::target_screen_coord(const ActionSpatialUnitCommand* msg) {
  return *msg->_impl_.target_.target_screen_coord_;
}
const ::SC2APIProtocol::PointI&
ActionSpatialUnitCommand::_Internal::target_minimap_coord(const ActionSpatialUnitCommand* msg) {
  return *msg->_impl_.target_.target_minimap_coord_;
}
void ActionSpatialUnitCommand::set_allocated_target_screen_coord(::SC2APIProtocol::PointI* target_screen_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (target_screen_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_screen_coord));
    if (message_arena != submessage_arena) {
      target_screen_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_screen_coord, submessage_arena);
    }
    set_has_target_screen_coord();
    _impl_.target_.target_screen_coord_ = target_screen_coord;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatialUnitCommand.target_screen_coord)
}
void ActionSpatialUnitCommand::clear_target_screen_coord() {
  if (_internal_has_target_screen_coord()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.target_.target_screen_coord_;
    }
    clear_has_target();
  }
}
void ActionSpatialUnitCommand::set_allocated_target_minimap_coord(::SC2APIProtocol::PointI* target_minimap_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (target_minimap_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_minimap_coord));
    if (message_arena != submessage_arena) {
      target_minimap_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_minimap_coord, submessage_arena);
    }
    set_has_target_minimap_coord();
    _impl_.target_.target_minimap_coord_ = target_minimap_coord;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatialUnitCommand.target_minimap_coord)
}
void ActionSpatialUnitCommand::clear_target_minimap_coord() {
  if (_internal_has_target_minimap_coord()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.target_.target_minimap_coord_;
    }
    clear_has_target();
  }
}
ActionSpatialUnitCommand::ActionSpatialUnitCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSpatialUnitCommand)
}
ActionSpatialUnitCommand::ActionSpatialUnitCommand(const ActionSpatialUnitCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSpatialUnitCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.queue_command_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_id_, &from._impl_.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.queue_command_) -
    reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.queue_command_));
  clear_has_target();
  switch (from.target_case()) {
    case kTargetScreenCoord: {
      _this->_internal_mutable_target_screen_coord()->::SC2APIProtocol::PointI::MergeFrom(
          from._internal_target_screen_coord());
      break;
    }
    case kTargetMinimapCoord: {
      _this->_internal_mutable_target_minimap_coord()->::SC2APIProtocol::PointI::MergeFrom(
          from._internal_target_minimap_coord());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialUnitCommand)
}

inline void ActionSpatialUnitCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_id_){0}
    , decltype(_impl_.queue_command_){false}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_target();
}

ActionSpatialUnitCommand::~ActionSpatialUnitCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialUnitCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSpatialUnitCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void ActionSpatialUnitCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSpatialUnitCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionSpatialUnitCommand)
  switch (target_case()) {
    case kTargetScreenCoord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.target_.target_screen_coord_;
      }
      break;
    }
    case kTargetMinimapCoord: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.target_.target_minimap_coord_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}


void ActionSpatialUnitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialUnitCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.queue_command_) -
        reinterpret_cast<char*>(&_impl_.ability_id_)) + sizeof(_impl_.queue_command_));
  }
  clear_target();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSpatialUnitCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.PointI target_screen_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_screen_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SC2APIProtocol.PointI target_minimap_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_minimap_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool queue_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_queue_command(&has_bits);
          _impl_.queue_command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSpatialUnitCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialUnitCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  switch (target_case()) {
    case kTargetScreenCoord: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::target_screen_coord(this),
          _Internal::target_screen_coord(this).GetCachedSize(), target, stream);
      break;
    }
    case kTargetMinimapCoord: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::target_minimap_coord(this),
          _Internal::target_minimap_coord(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional bool queue_command = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_queue_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialUnitCommand)
  return target;
}

size_t ActionSpatialUnitCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialUnitCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

    // optional bool queue_command = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  switch (target_case()) {
    // .SC2APIProtocol.PointI target_screen_coord = 2;
    case kTargetScreenCoord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_.target_screen_coord_);
      break;
    }
    // .SC2APIProtocol.PointI target_minimap_coord = 3;
    case kTargetMinimapCoord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_.target_minimap_coord_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSpatialUnitCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSpatialUnitCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSpatialUnitCommand::GetClassData() const { return &_class_data_; }


void ActionSpatialUnitCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSpatialUnitCommand*>(&to_msg);
  auto& from = static_cast<const ActionSpatialUnitCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialUnitCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.queue_command_ = from._impl_.queue_command_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.target_case()) {
    case kTargetScreenCoord: {
      _this->_internal_mutable_target_screen_coord()->::SC2APIProtocol::PointI::MergeFrom(
          from._internal_target_screen_coord());
      break;
    }
    case kTargetMinimapCoord: {
      _this->_internal_mutable_target_minimap_coord()->::SC2APIProtocol::PointI::MergeFrom(
          from._internal_target_minimap_coord());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSpatialUnitCommand::CopyFrom(const ActionSpatialUnitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitCommand::IsInitialized() const {
  return true;
}

void ActionSpatialUnitCommand::InternalSwap(ActionSpatialUnitCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionSpatialUnitCommand, _impl_.queue_command_)
      + sizeof(ActionSpatialUnitCommand::_impl_.queue_command_)
      - PROTOBUF_FIELD_OFFSET(ActionSpatialUnitCommand, _impl_.ability_id_)>(
          reinterpret_cast<char*>(&_impl_.ability_id_),
          reinterpret_cast<char*>(&other->_impl_.ability_id_));
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSpatialUnitCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[5]);
}

// ===================================================================

class ActionSpatialCameraMove::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSpatialCameraMove>()._impl_._has_bits_);
  static const ::SC2APIProtocol::PointI& center_minimap(const ActionSpatialCameraMove* msg);
  static void set_has_center_minimap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SC2APIProtocol::PointI&
ActionSpatialCameraMove::_Internal::center_minimap(const ActionSpatialCameraMove* msg) {
  return *msg->_impl_.center_minimap_;
}
void ActionSpatialCameraMove::clear_center_minimap() {
  if (_impl_.center_minimap_ != nullptr) _impl_.center_minimap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActionSpatialCameraMove::ActionSpatialCameraMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSpatialCameraMove)
}
ActionSpatialCameraMove::ActionSpatialCameraMove(const ActionSpatialCameraMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSpatialCameraMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.center_minimap_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_minimap()) {
    _this->_impl_.center_minimap_ = new ::SC2APIProtocol::PointI(*from._impl_.center_minimap_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialCameraMove)
}

inline void ActionSpatialCameraMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.center_minimap_){nullptr}
  };
}

ActionSpatialCameraMove::~ActionSpatialCameraMove() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialCameraMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSpatialCameraMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.center_minimap_;
}

void ActionSpatialCameraMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSpatialCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialCameraMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.center_minimap_ != nullptr);
    _impl_.center_minimap_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSpatialCameraMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.PointI center_minimap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_minimap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSpatialCameraMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialCameraMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.PointI center_minimap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center_minimap(this),
        _Internal::center_minimap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialCameraMove)
  return target;
}

size_t ActionSpatialCameraMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialCameraMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SC2APIProtocol.PointI center_minimap = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_minimap_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSpatialCameraMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSpatialCameraMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSpatialCameraMove::GetClassData() const { return &_class_data_; }


void ActionSpatialCameraMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSpatialCameraMove*>(&to_msg);
  auto& from = static_cast<const ActionSpatialCameraMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialCameraMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center_minimap()) {
    _this->_internal_mutable_center_minimap()->::SC2APIProtocol::PointI::MergeFrom(
        from._internal_center_minimap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSpatialCameraMove::CopyFrom(const ActionSpatialCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialCameraMove::IsInitialized() const {
  return true;
}

void ActionSpatialCameraMove::InternalSwap(ActionSpatialCameraMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.center_minimap_, other->_impl_.center_minimap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSpatialCameraMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[6]);
}

// ===================================================================

class ActionSpatialUnitSelectionPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSpatialUnitSelectionPoint>()._impl_._has_bits_);
  static const ::SC2APIProtocol::PointI& selection_screen_coord(const ActionSpatialUnitSelectionPoint* msg);
  static void set_has_selection_screen_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::PointI&
ActionSpatialUnitSelectionPoint::_Internal::selection_screen_coord(const ActionSpatialUnitSelectionPoint* msg) {
  return *msg->_impl_.selection_screen_coord_;
}
void ActionSpatialUnitSelectionPoint::clear_selection_screen_coord() {
  if (_impl_.selection_screen_coord_ != nullptr) _impl_.selection_screen_coord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
}
ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint(const ActionSpatialUnitSelectionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSpatialUnitSelectionPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_screen_coord_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selection_screen_coord()) {
    _this->_impl_.selection_screen_coord_ = new ::SC2APIProtocol::PointI(*from._impl_.selection_screen_coord_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
}

inline void ActionSpatialUnitSelectionPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_screen_coord_){nullptr}
    , decltype(_impl_.type_){1}
  };
}

ActionSpatialUnitSelectionPoint::~ActionSpatialUnitSelectionPoint() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSpatialUnitSelectionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.selection_screen_coord_;
}

void ActionSpatialUnitSelectionPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSpatialUnitSelectionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.selection_screen_coord_ != nullptr);
      _impl_.selection_screen_coord_->Clear();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSpatialUnitSelectionPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_screen_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type_IsValid(val))) {
            _internal_set_type(static_cast<::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSpatialUnitSelectionPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::selection_screen_coord(this),
        _Internal::selection_screen_coord(this).GetCachedSize(), target, stream);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  return target;
}

size_t ActionSpatialUnitSelectionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_screen_coord_);
    }

    // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSpatialUnitSelectionPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSpatialUnitSelectionPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSpatialUnitSelectionPoint::GetClassData() const { return &_class_data_; }


void ActionSpatialUnitSelectionPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSpatialUnitSelectionPoint*>(&to_msg);
  auto& from = static_cast<const ActionSpatialUnitSelectionPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_selection_screen_coord()->::SC2APIProtocol::PointI::MergeFrom(
          from._internal_selection_screen_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSpatialUnitSelectionPoint::CopyFrom(const ActionSpatialUnitSelectionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitSelectionPoint::IsInitialized() const {
  return true;
}

void ActionSpatialUnitSelectionPoint::InternalSwap(ActionSpatialUnitSelectionPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.selection_screen_coord_, other->_impl_.selection_screen_coord_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSpatialUnitSelectionPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[7]);
}

// ===================================================================

class ActionSpatialUnitSelectionRect::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionSpatialUnitSelectionRect>()._impl_._has_bits_);
  static void set_has_selection_add(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ActionSpatialUnitSelectionRect::clear_selection_screen_coord() {
  _impl_.selection_screen_coord_.Clear();
}
ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ActionSpatialUnitSelectionRect)
}
ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect(const ActionSpatialUnitSelectionRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionSpatialUnitSelectionRect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_screen_coord_){from._impl_.selection_screen_coord_}
    , decltype(_impl_.selection_add_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.selection_add_ = from._impl_.selection_add_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialUnitSelectionRect)
}

inline void ActionSpatialUnitSelectionRect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selection_screen_coord_){arena}
    , decltype(_impl_.selection_add_){false}
  };
}

ActionSpatialUnitSelectionRect::~ActionSpatialUnitSelectionRect() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionSpatialUnitSelectionRect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selection_screen_coord_.~RepeatedPtrField();
}

void ActionSpatialUnitSelectionRect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionSpatialUnitSelectionRect::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selection_screen_coord_.Clear();
  _impl_.selection_add_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionSpatialUnitSelectionRect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection_screen_coord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool selection_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_selection_add(&has_bits);
          _impl_.selection_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionSpatialUnitSelectionRect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selection_screen_coord_size()); i < n; i++) {
    const auto& repfield = this->_internal_selection_screen_coord(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool selection_add = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_selection_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  return target;
}

size_t ActionSpatialUnitSelectionRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
  total_size += 1UL * this->_internal_selection_screen_coord_size();
  for (const auto& msg : this->_impl_.selection_screen_coord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool selection_add = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionSpatialUnitSelectionRect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionSpatialUnitSelectionRect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionSpatialUnitSelectionRect::GetClassData() const { return &_class_data_; }


void ActionSpatialUnitSelectionRect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionSpatialUnitSelectionRect*>(&to_msg);
  auto& from = static_cast<const ActionSpatialUnitSelectionRect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selection_screen_coord_.MergeFrom(from._impl_.selection_screen_coord_);
  if (from._internal_has_selection_add()) {
    _this->_internal_set_selection_add(from._internal_selection_add());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionSpatialUnitSelectionRect::CopyFrom(const ActionSpatialUnitSelectionRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitSelectionRect::IsInitialized() const {
  return true;
}

void ActionSpatialUnitSelectionRect::InternalSwap(ActionSpatialUnitSelectionRect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.selection_screen_coord_.InternalSwap(&other->_impl_.selection_screen_coord_);
  swap(_impl_.selection_add_, other->_impl_.selection_add_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSpatialUnitSelectionRect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fspatial_2eproto_getter, &descriptor_table_s2clientprotocol_2fspatial_2eproto_once,
      file_level_metadata_s2clientprotocol_2fspatial_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ObservationFeatureLayer*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ObservationFeatureLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ObservationFeatureLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::FeatureLayers*
Arena::CreateMaybeMessage< ::SC2APIProtocol::FeatureLayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::FeatureLayers >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::FeatureLayersMinimap*
Arena::CreateMaybeMessage< ::SC2APIProtocol::FeatureLayersMinimap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::FeatureLayersMinimap >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ObservationRender*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ObservationRender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ObservationRender >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSpatial*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSpatial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSpatial >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSpatialUnitCommand*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSpatialUnitCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSpatialUnitCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSpatialCameraMove*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSpatialCameraMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSpatialCameraMove >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSpatialUnitSelectionPoint*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSpatialUnitSelectionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSpatialUnitSelectionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ActionSpatialUnitSelectionRect*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionSpatialUnitSelectionRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ActionSpatialUnitSelectionRect >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

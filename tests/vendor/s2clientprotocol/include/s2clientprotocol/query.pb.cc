// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/query.proto

#include "s2clientprotocol/query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SC2APIProtocol {
PROTOBUF_CONSTEXPR RequestQuery::RequestQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pathing_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.placements_)*/{}
  , /*decltype(_impl_.ignore_resource_requirements_)*/false} {}
struct RequestQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQueryDefaultTypeInternal() {}
  union {
    RequestQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQueryDefaultTypeInternal _RequestQuery_default_instance_;
PROTOBUF_CONSTEXPR ResponseQuery::ResponseQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pathing_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.placements_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQueryDefaultTypeInternal() {}
  union {
    ResponseQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
PROTOBUF_CONSTEXPR RequestQueryPathing::RequestQueryPathing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.end_pos_)*/nullptr
  , /*decltype(_impl_.start_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestQueryPathingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQueryPathingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQueryPathingDefaultTypeInternal() {}
  union {
    RequestQueryPathing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQueryPathingDefaultTypeInternal _RequestQueryPathing_default_instance_;
PROTOBUF_CONSTEXPR ResponseQueryPathing::ResponseQueryPathing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.distance_)*/0} {}
struct ResponseQueryPathingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQueryPathingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQueryPathingDefaultTypeInternal() {}
  union {
    ResponseQueryPathing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQueryPathingDefaultTypeInternal _ResponseQueryPathing_default_instance_;
PROTOBUF_CONSTEXPR RequestQueryAvailableAbilities::RequestQueryAvailableAbilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unit_tag_)*/uint64_t{0u}} {}
struct RequestQueryAvailableAbilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQueryAvailableAbilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQueryAvailableAbilitiesDefaultTypeInternal() {}
  union {
    RequestQueryAvailableAbilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQueryAvailableAbilitiesDefaultTypeInternal _RequestQueryAvailableAbilities_default_instance_;
PROTOBUF_CONSTEXPR ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.unit_tag_)*/uint64_t{0u}
  , /*decltype(_impl_.unit_type_id_)*/0u} {}
struct ResponseQueryAvailableAbilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQueryAvailableAbilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQueryAvailableAbilitiesDefaultTypeInternal() {}
  union {
    ResponseQueryAvailableAbilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQueryAvailableAbilitiesDefaultTypeInternal _ResponseQueryAvailableAbilities_default_instance_;
PROTOBUF_CONSTEXPR RequestQueryBuildingPlacement::RequestQueryBuildingPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_pos_)*/nullptr
  , /*decltype(_impl_.placing_unit_tag_)*/uint64_t{0u}
  , /*decltype(_impl_.ability_id_)*/0} {}
struct RequestQueryBuildingPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQueryBuildingPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQueryBuildingPlacementDefaultTypeInternal() {}
  union {
    RequestQueryBuildingPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQueryBuildingPlacementDefaultTypeInternal _RequestQueryBuildingPlacement_default_instance_;
PROTOBUF_CONSTEXPR ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/1} {}
struct ResponseQueryBuildingPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQueryBuildingPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQueryBuildingPlacementDefaultTypeInternal() {}
  union {
    ResponseQueryBuildingPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQueryBuildingPlacementDefaultTypeInternal _ResponseQueryBuildingPlacement_default_instance_;
}  // namespace SC2APIProtocol
static ::_pb::Metadata file_level_metadata_s2clientprotocol_2fquery_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_s2clientprotocol_2fquery_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_s2clientprotocol_2fquery_2eproto = nullptr;

const uint32_t TableStruct_s2clientprotocol_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuery, _impl_.pathing_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuery, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuery, _impl_.placements_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQuery, _impl_.ignore_resource_requirements_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuery, _impl_.pathing_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuery, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQuery, _impl_.placements_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryPathing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryPathing, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryPathing, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryPathing, _impl_.end_pos_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryPathing, _impl_.start_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryPathing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryPathing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryPathing, _impl_.distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryAvailableAbilities, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryAvailableAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryAvailableAbilities, _impl_.unit_tag_),
  0,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryAvailableAbilities, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryAvailableAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryAvailableAbilities, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryAvailableAbilities, _impl_.unit_tag_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryAvailableAbilities, _impl_.unit_type_id_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryBuildingPlacement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryBuildingPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryBuildingPlacement, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryBuildingPlacement, _impl_.target_pos_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::RequestQueryBuildingPlacement, _impl_.placing_unit_tag_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryBuildingPlacement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryBuildingPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SC2APIProtocol::ResponseQueryBuildingPlacement, _impl_.result_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::SC2APIProtocol::RequestQuery)},
  { 14, -1, -1, sizeof(::SC2APIProtocol::ResponseQuery)},
  { 23, 33, -1, sizeof(::SC2APIProtocol::RequestQueryPathing)},
  { 36, 43, -1, sizeof(::SC2APIProtocol::ResponseQueryPathing)},
  { 44, 51, -1, sizeof(::SC2APIProtocol::RequestQueryAvailableAbilities)},
  { 52, 61, -1, sizeof(::SC2APIProtocol::ResponseQueryAvailableAbilities)},
  { 64, 73, -1, sizeof(::SC2APIProtocol::RequestQueryBuildingPlacement)},
  { 76, 83, -1, sizeof(::SC2APIProtocol::ResponseQueryBuildingPlacement)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SC2APIProtocol::_RequestQuery_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQuery_default_instance_._instance,
  &::SC2APIProtocol::_RequestQueryPathing_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQueryPathing_default_instance_._instance,
  &::SC2APIProtocol::_RequestQueryAvailableAbilities_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQueryAvailableAbilities_default_instance_._instance,
  &::SC2APIProtocol::_RequestQueryBuildingPlacement_default_instance_._instance,
  &::SC2APIProtocol::_ResponseQueryBuildingPlacement_default_instance_._instance,
};

const char descriptor_table_protodef_s2clientprotocol_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034s2clientprotocol/query.proto\022\016SC2APIPr"
  "otocol\032\035s2clientprotocol/common.proto\032\034s"
  "2clientprotocol/error.proto\"\360\001\n\014RequestQ"
  "uery\0224\n\007pathing\030\001 \003(\0132#.SC2APIProtocol.R"
  "equestQueryPathing\022A\n\tabilities\030\002 \003(\0132.."
  "SC2APIProtocol.RequestQueryAvailableAbil"
  "ities\022A\n\nplacements\030\003 \003(\0132-.SC2APIProtoc"
  "ol.RequestQueryBuildingPlacement\022$\n\034igno"
  "re_resource_requirements\030\004 \001(\010\"\316\001\n\rRespo"
  "nseQuery\0225\n\007pathing\030\001 \003(\0132$.SC2APIProtoc"
  "ol.ResponseQueryPathing\022B\n\tabilities\030\002 \003"
  "(\0132/.SC2APIProtocol.ResponseQueryAvailab"
  "leAbilities\022B\n\nplacements\030\003 \003(\0132..SC2API"
  "Protocol.ResponseQueryBuildingPlacement\""
  "\212\001\n\023RequestQueryPathing\022,\n\tstart_pos\030\001 \001"
  "(\0132\027.SC2APIProtocol.Point2DH\000\022\022\n\010unit_ta"
  "g\030\002 \001(\004H\000\022(\n\007end_pos\030\003 \001(\0132\027.SC2APIProto"
  "col.Point2DB\007\n\005start\"(\n\024ResponseQueryPat"
  "hing\022\020\n\010distance\030\001 \001(\002\"2\n\036RequestQueryAv"
  "ailableAbilities\022\020\n\010unit_tag\030\001 \001(\004\"~\n\037Re"
  "sponseQueryAvailableAbilities\0223\n\tabiliti"
  "es\030\001 \003(\0132 .SC2APIProtocol.AvailableAbili"
  "ty\022\020\n\010unit_tag\030\002 \001(\004\022\024\n\014unit_type_id\030\003 \001"
  "(\r\"z\n\035RequestQueryBuildingPlacement\022\022\n\na"
  "bility_id\030\001 \001(\005\022+\n\ntarget_pos\030\002 \001(\0132\027.SC"
  "2APIProtocol.Point2D\022\030\n\020placing_unit_tag"
  "\030\003 \001(\004\"N\n\036ResponseQueryBuildingPlacement"
  "\022,\n\006result\030\001 \001(\0162\034.SC2APIProtocol.Action"
  "Result"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_s2clientprotocol_2fquery_2eproto_deps[2] = {
  &::descriptor_table_s2clientprotocol_2fcommon_2eproto,
  &::descriptor_table_s2clientprotocol_2ferror_2eproto,
};
static ::_pbi::once_flag descriptor_table_s2clientprotocol_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_s2clientprotocol_2fquery_2eproto = {
    false, false, 1126, descriptor_table_protodef_s2clientprotocol_2fquery_2eproto,
    "s2clientprotocol/query.proto",
    &descriptor_table_s2clientprotocol_2fquery_2eproto_once, descriptor_table_s2clientprotocol_2fquery_2eproto_deps, 2, 8,
    schemas, file_default_instances, TableStruct_s2clientprotocol_2fquery_2eproto::offsets,
    file_level_metadata_s2clientprotocol_2fquery_2eproto, file_level_enum_descriptors_s2clientprotocol_2fquery_2eproto,
    file_level_service_descriptors_s2clientprotocol_2fquery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_s2clientprotocol_2fquery_2eproto_getter() {
  return &descriptor_table_s2clientprotocol_2fquery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_s2clientprotocol_2fquery_2eproto(&descriptor_table_s2clientprotocol_2fquery_2eproto);
namespace SC2APIProtocol {

// ===================================================================

class RequestQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestQuery>()._impl_._has_bits_);
  static void set_has_ignore_resource_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestQuery::RequestQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pathing_){from._impl_.pathing_}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.placements_){from._impl_.placements_}
    , decltype(_impl_.ignore_resource_requirements_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ignore_resource_requirements_ = from._impl_.ignore_resource_requirements_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuery)
}

inline void RequestQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pathing_){arena}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.placements_){arena}
    , decltype(_impl_.ignore_resource_requirements_){false}
  };
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathing_.~RepeatedPtrField();
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.placements_.~RepeatedPtrField();
}

void RequestQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathing_.Clear();
  _impl_.abilities_.Clear();
  _impl_.placements_.Clear();
  _impl_.ignore_resource_requirements_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_resource_requirements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ignore_resource_requirements(&has_bits);
          _impl_.ignore_resource_requirements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pathing_size()); i < n; i++) {
    const auto& repfield = this->_internal_pathing(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_placements_size()); i < n; i++) {
    const auto& repfield = this->_internal_placements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool ignore_resource_requirements = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ignore_resource_requirements(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuery)
  return target;
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
  total_size += 1UL * this->_internal_pathing_size();
  for (const auto& msg : this->_impl_.pathing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
  total_size += 1UL * this->_internal_placements_size();
  for (const auto& msg : this->_impl_.placements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool ignore_resource_requirements = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQuery::GetClassData() const { return &_class_data_; }


void RequestQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestQuery*>(&to_msg);
  auto& from = static_cast<const RequestQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pathing_.MergeFrom(from._impl_.pathing_);
  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  _this->_impl_.placements_.MergeFrom(from._impl_.placements_);
  if (from._internal_has_ignore_resource_requirements()) {
    _this->_internal_set_ignore_resource_requirements(from._internal_ignore_resource_requirements());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::InternalSwap(RequestQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pathing_.InternalSwap(&other->_impl_.pathing_);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  _impl_.placements_.InternalSwap(&other->_impl_.placements_);
  swap(_impl_.ignore_resource_requirements_, other->_impl_.ignore_resource_requirements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[0]);
}

// ===================================================================

class ResponseQuery::_Internal {
 public:
};

ResponseQuery::ResponseQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pathing_){from._impl_.pathing_}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.placements_){from._impl_.placements_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuery)
}

inline void ResponseQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pathing_){arena}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.placements_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pathing_.~RepeatedPtrField();
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.placements_.~RepeatedPtrField();
}

void ResponseQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pathing_.Clear();
  _impl_.abilities_.Clear();
  _impl_.placements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pathing_size()); i < n; i++) {
    const auto& repfield = this->_internal_pathing(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_placements_size()); i < n; i++) {
    const auto& repfield = this->_internal_placements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
  total_size += 1UL * this->_internal_pathing_size();
  for (const auto& msg : this->_impl_.pathing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
  total_size += 1UL * this->_internal_placements_size();
  for (const auto& msg : this->_impl_.placements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQuery::GetClassData() const { return &_class_data_; }


void ResponseQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseQuery*>(&to_msg);
  auto& from = static_cast<const ResponseQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pathing_.MergeFrom(from._impl_.pathing_);
  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  _this->_impl_.placements_.MergeFrom(from._impl_.placements_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pathing_.InternalSwap(&other->_impl_.pathing_);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  _impl_.placements_.InternalSwap(&other->_impl_.placements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[1]);
}

// ===================================================================

class RequestQueryPathing::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestQueryPathing>()._impl_._has_bits_);
  static const ::SC2APIProtocol::Point2D& start_pos(const RequestQueryPathing* msg);
  static const ::SC2APIProtocol::Point2D& end_pos(const RequestQueryPathing* msg);
  static void set_has_end_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SC2APIProtocol::Point2D&
RequestQueryPathing::_Internal::start_pos(const RequestQueryPathing* msg) {
  return *msg->_impl_.start_.start_pos_;
}
const ::SC2APIProtocol::Point2D&
RequestQueryPathing::_Internal::end_pos(const RequestQueryPathing* msg) {
  return *msg->_impl_.end_pos_;
}
void RequestQueryPathing::set_allocated_start_pos(::SC2APIProtocol::Point2D* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_start();
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_pos));
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    set_has_start_pos();
    _impl_.start_.start_pos_ = start_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestQueryPathing.start_pos)
}
void RequestQueryPathing::clear_start_pos() {
  if (_internal_has_start_pos()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.start_.start_pos_;
    }
    clear_has_start();
  }
}
void RequestQueryPathing::clear_end_pos() {
  if (_impl_.end_pos_ != nullptr) _impl_.end_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RequestQueryPathing::RequestQueryPathing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQueryPathing)
}
RequestQueryPathing::RequestQueryPathing(const RequestQueryPathing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestQueryPathing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_pos_){nullptr}
    , decltype(_impl_.start_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_pos()) {
    _this->_impl_.end_pos_ = new ::SC2APIProtocol::Point2D(*from._impl_.end_pos_);
  }
  clear_has_start();
  switch (from.start_case()) {
    case kStartPos: {
      _this->_internal_mutable_start_pos()->::SC2APIProtocol::Point2D::MergeFrom(
          from._internal_start_pos());
      break;
    }
    case kUnitTag: {
      _this->_internal_set_unit_tag(from._internal_unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQueryPathing)
}

inline void RequestQueryPathing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_pos_){nullptr}
    , decltype(_impl_.start_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_start();
}

RequestQueryPathing::~RequestQueryPathing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQueryPathing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestQueryPathing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.end_pos_;
  if (has_start()) {
    clear_start();
  }
}

void RequestQueryPathing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestQueryPathing::clear_start() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestQueryPathing)
  switch (start_case()) {
    case kStartPos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.start_.start_pos_;
      }
      break;
    }
    case kUnitTag: {
      // No need to clear
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = START_NOT_SET;
}


void RequestQueryPathing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQueryPathing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.end_pos_ != nullptr);
    _impl_.end_pos_->Clear();
  }
  clear_start();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestQueryPathing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SC2APIProtocol.Point2D start_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 unit_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_unit_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point2D end_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestQueryPathing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQueryPathing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (start_case()) {
    case kStartPos: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::start_pos(this),
          _Internal::start_pos(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnitTag: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unit_tag(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.Point2D end_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::end_pos(this),
        _Internal::end_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQueryPathing)
  return target;
}

size_t RequestQueryPathing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQueryPathing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SC2APIProtocol.Point2D end_pos = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_pos_);
  }

  switch (start_case()) {
    // .SC2APIProtocol.Point2D start_pos = 1;
    case kStartPos: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_.start_pos_);
      break;
    }
    // uint64 unit_tag = 2;
    case kUnitTag: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQueryPathing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestQueryPathing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQueryPathing::GetClassData() const { return &_class_data_; }


void RequestQueryPathing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestQueryPathing*>(&to_msg);
  auto& from = static_cast<const RequestQueryPathing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQueryPathing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end_pos()) {
    _this->_internal_mutable_end_pos()->::SC2APIProtocol::Point2D::MergeFrom(
        from._internal_end_pos());
  }
  switch (from.start_case()) {
    case kStartPos: {
      _this->_internal_mutable_start_pos()->::SC2APIProtocol::Point2D::MergeFrom(
          from._internal_start_pos());
      break;
    }
    case kUnitTag: {
      _this->_internal_set_unit_tag(from._internal_unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestQueryPathing::CopyFrom(const RequestQueryPathing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryPathing::IsInitialized() const {
  return true;
}

void RequestQueryPathing::InternalSwap(RequestQueryPathing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.end_pos_, other->_impl_.end_pos_);
  swap(_impl_.start_, other->_impl_.start_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestQueryPathing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[2]);
}

// ===================================================================

class ResponseQueryPathing::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseQueryPathing>()._impl_._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseQueryPathing::ResponseQueryPathing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQueryPathing)
}
ResponseQueryPathing::ResponseQueryPathing(const ResponseQueryPathing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseQueryPathing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQueryPathing)
}

inline void ResponseQueryPathing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.distance_){0}
  };
}

ResponseQueryPathing::~ResponseQueryPathing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQueryPathing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseQueryPathing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseQueryPathing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseQueryPathing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQueryPathing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.distance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseQueryPathing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseQueryPathing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQueryPathing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQueryPathing)
  return target;
}

size_t ResponseQueryPathing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQueryPathing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float distance = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQueryPathing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseQueryPathing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQueryPathing::GetClassData() const { return &_class_data_; }


void ResponseQueryPathing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseQueryPathing*>(&to_msg);
  auto& from = static_cast<const ResponseQueryPathing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQueryPathing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distance()) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseQueryPathing::CopyFrom(const ResponseQueryPathing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryPathing::IsInitialized() const {
  return true;
}

void ResponseQueryPathing::InternalSwap(ResponseQueryPathing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseQueryPathing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[3]);
}

// ===================================================================

class RequestQueryAvailableAbilities::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestQueryAvailableAbilities>()._impl_._has_bits_);
  static void set_has_unit_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestQueryAvailableAbilities::RequestQueryAvailableAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQueryAvailableAbilities)
}
RequestQueryAvailableAbilities::RequestQueryAvailableAbilities(const RequestQueryAvailableAbilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestQueryAvailableAbilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_tag_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unit_tag_ = from._impl_.unit_tag_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQueryAvailableAbilities)
}

inline void RequestQueryAvailableAbilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unit_tag_){uint64_t{0u}}
  };
}

RequestQueryAvailableAbilities::~RequestQueryAvailableAbilities() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQueryAvailableAbilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestQueryAvailableAbilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestQueryAvailableAbilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestQueryAvailableAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unit_tag_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestQueryAvailableAbilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 unit_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unit_tag(&has_bits);
          _impl_.unit_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestQueryAvailableAbilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 unit_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unit_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQueryAvailableAbilities)
  return target;
}

size_t RequestQueryAvailableAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 unit_tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unit_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQueryAvailableAbilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestQueryAvailableAbilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQueryAvailableAbilities::GetClassData() const { return &_class_data_; }


void RequestQueryAvailableAbilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestQueryAvailableAbilities*>(&to_msg);
  auto& from = static_cast<const RequestQueryAvailableAbilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit_tag()) {
    _this->_internal_set_unit_tag(from._internal_unit_tag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestQueryAvailableAbilities::CopyFrom(const RequestQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryAvailableAbilities::IsInitialized() const {
  return true;
}

void RequestQueryAvailableAbilities::InternalSwap(RequestQueryAvailableAbilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unit_tag_, other->_impl_.unit_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestQueryAvailableAbilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[4]);
}

// ===================================================================

class ResponseQueryAvailableAbilities::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseQueryAvailableAbilities>()._impl_._has_bits_);
  static void set_has_unit_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ResponseQueryAvailableAbilities::clear_abilities() {
  _impl_.abilities_.Clear();
}
ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQueryAvailableAbilities)
}
ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities(const ResponseQueryAvailableAbilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseQueryAvailableAbilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.unit_tag_){}
    , decltype(_impl_.unit_type_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.unit_tag_, &from._impl_.unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_type_id_) -
    reinterpret_cast<char*>(&_impl_.unit_tag_)) + sizeof(_impl_.unit_type_id_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQueryAvailableAbilities)
}

inline void ResponseQueryAvailableAbilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.unit_tag_){uint64_t{0u}}
    , decltype(_impl_.unit_type_id_){0u}
  };
}

ResponseQueryAvailableAbilities::~ResponseQueryAvailableAbilities() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQueryAvailableAbilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseQueryAvailableAbilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
}

void ResponseQueryAvailableAbilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseQueryAvailableAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unit_type_id_) -
        reinterpret_cast<char*>(&_impl_.unit_tag_)) + sizeof(_impl_.unit_type_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseQueryAvailableAbilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 unit_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unit_tag(&has_bits);
          _impl_.unit_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unit_type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unit_type_id(&has_bits);
          _impl_.unit_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseQueryAvailableAbilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 unit_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unit_tag(), target);
  }

  // optional uint32 unit_type_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unit_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQueryAvailableAbilities)
  return target;
}

size_t ResponseQueryAvailableAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 unit_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unit_tag());
    }

    // optional uint32 unit_type_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unit_type_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQueryAvailableAbilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseQueryAvailableAbilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQueryAvailableAbilities::GetClassData() const { return &_class_data_; }


void ResponseQueryAvailableAbilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseQueryAvailableAbilities*>(&to_msg);
  auto& from = static_cast<const ResponseQueryAvailableAbilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.unit_tag_ = from._impl_.unit_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unit_type_id_ = from._impl_.unit_type_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseQueryAvailableAbilities::CopyFrom(const ResponseQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryAvailableAbilities::IsInitialized() const {
  return true;
}

void ResponseQueryAvailableAbilities::InternalSwap(ResponseQueryAvailableAbilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseQueryAvailableAbilities, _impl_.unit_type_id_)
      + sizeof(ResponseQueryAvailableAbilities::_impl_.unit_type_id_)
      - PROTOBUF_FIELD_OFFSET(ResponseQueryAvailableAbilities, _impl_.unit_tag_)>(
          reinterpret_cast<char*>(&_impl_.unit_tag_),
          reinterpret_cast<char*>(&other->_impl_.unit_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseQueryAvailableAbilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[5]);
}

// ===================================================================

class RequestQueryBuildingPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestQueryBuildingPlacement>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SC2APIProtocol::Point2D& target_pos(const RequestQueryBuildingPlacement* msg);
  static void set_has_target_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_placing_unit_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SC2APIProtocol::Point2D&
RequestQueryBuildingPlacement::_Internal::target_pos(const RequestQueryBuildingPlacement* msg) {
  return *msg->_impl_.target_pos_;
}
void RequestQueryBuildingPlacement::clear_target_pos() {
  if (_impl_.target_pos_ != nullptr) _impl_.target_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RequestQueryBuildingPlacement::RequestQueryBuildingPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.RequestQueryBuildingPlacement)
}
RequestQueryBuildingPlacement::RequestQueryBuildingPlacement(const RequestQueryBuildingPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestQueryBuildingPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.placing_unit_tag_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_pos()) {
    _this->_impl_.target_pos_ = new ::SC2APIProtocol::Point2D(*from._impl_.target_pos_);
  }
  ::memcpy(&_impl_.placing_unit_tag_, &from._impl_.placing_unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.placing_unit_tag_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQueryBuildingPlacement)
}

inline void RequestQueryBuildingPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.placing_unit_tag_){uint64_t{0u}}
    , decltype(_impl_.ability_id_){0}
  };
}

RequestQueryBuildingPlacement::~RequestQueryBuildingPlacement() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQueryBuildingPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestQueryBuildingPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_pos_;
}

void RequestQueryBuildingPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestQueryBuildingPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.target_pos_ != nullptr);
    _impl_.target_pos_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.placing_unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ability_id_) -
        reinterpret_cast<char*>(&_impl_.placing_unit_tag_)) + sizeof(_impl_.ability_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestQueryBuildingPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SC2APIProtocol.Point2D target_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 placing_unit_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_placing_unit_tag(&has_bits);
          _impl_.placing_unit_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestQueryBuildingPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional .SC2APIProtocol.Point2D target_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_pos(this),
        _Internal::target_pos(this).GetCachedSize(), target, stream);
  }

  // optional uint64 placing_unit_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_placing_unit_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQueryBuildingPlacement)
  return target;
}

size_t RequestQueryBuildingPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .SC2APIProtocol.Point2D target_pos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_pos_);
    }

    // optional uint64 placing_unit_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_placing_unit_tag());
    }

    // optional int32 ability_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQueryBuildingPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestQueryBuildingPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQueryBuildingPlacement::GetClassData() const { return &_class_data_; }


void RequestQueryBuildingPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestQueryBuildingPlacement*>(&to_msg);
  auto& from = static_cast<const RequestQueryBuildingPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_pos()->::SC2APIProtocol::Point2D::MergeFrom(
          from._internal_target_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.placing_unit_tag_ = from._impl_.placing_unit_tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestQueryBuildingPlacement::CopyFrom(const RequestQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryBuildingPlacement::IsInitialized() const {
  return true;
}

void RequestQueryBuildingPlacement::InternalSwap(RequestQueryBuildingPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestQueryBuildingPlacement, _impl_.ability_id_)
      + sizeof(RequestQueryBuildingPlacement::_impl_.ability_id_)
      - PROTOBUF_FIELD_OFFSET(RequestQueryBuildingPlacement, _impl_.target_pos_)>(
          reinterpret_cast<char*>(&_impl_.target_pos_),
          reinterpret_cast<char*>(&other->_impl_.target_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestQueryBuildingPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[6]);
}

// ===================================================================

class ResponseQueryBuildingPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseQueryBuildingPlacement>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SC2APIProtocol.ResponseQueryBuildingPlacement)
}
ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement(const ResponseQueryBuildingPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseQueryBuildingPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQueryBuildingPlacement)
}

inline void ResponseQueryBuildingPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){1}
  };
}

ResponseQueryBuildingPlacement::~ResponseQueryBuildingPlacement() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQueryBuildingPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseQueryBuildingPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseQueryBuildingPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseQueryBuildingPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseQueryBuildingPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SC2APIProtocol.ActionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SC2APIProtocol::ActionResult_IsValid(val))) {
            _internal_set_result(static_cast<::SC2APIProtocol::ActionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseQueryBuildingPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SC2APIProtocol.ActionResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQueryBuildingPlacement)
  return target;
}

size_t ResponseQueryBuildingPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SC2APIProtocol.ActionResult result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQueryBuildingPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseQueryBuildingPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQueryBuildingPlacement::GetClassData() const { return &_class_data_; }


void ResponseQueryBuildingPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseQueryBuildingPlacement*>(&to_msg);
  auto& from = static_cast<const ResponseQueryBuildingPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseQueryBuildingPlacement::CopyFrom(const ResponseQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryBuildingPlacement::IsInitialized() const {
  return true;
}

void ResponseQueryBuildingPlacement::InternalSwap(ResponseQueryBuildingPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseQueryBuildingPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_s2clientprotocol_2fquery_2eproto_getter, &descriptor_table_s2clientprotocol_2fquery_2eproto_once,
      file_level_metadata_s2clientprotocol_2fquery_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQuery*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQuery*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQueryPathing*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQueryPathing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQueryPathing >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQueryPathing*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQueryPathing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQueryPathing >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQueryAvailableAbilities*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQueryAvailableAbilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQueryAvailableAbilities >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQueryAvailableAbilities*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQueryAvailableAbilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQueryAvailableAbilities >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::RequestQueryBuildingPlacement*
Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQueryBuildingPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::RequestQueryBuildingPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::SC2APIProtocol::ResponseQueryBuildingPlacement*
Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQueryBuildingPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SC2APIProtocol::ResponseQueryBuildingPlacement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

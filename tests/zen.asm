; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?stb__log_filename@@3PEBDEB			; stb__log_filename
PUBLIC	?stb__source_path@@3PEADEA			; stb__source_path
PUBLIC	?stb_alloc_chunk_size@@3HA			; stb_alloc_chunk_size
PUBLIC	?stb_alloc_count_free@@3HA			; stb_alloc_count_free
PUBLIC	?stb_alloc_count_alloc@@3HA			; stb_alloc_count_alloc
PUBLIC	?stb_alloc_alignment@@3HA			; stb_alloc_alignment
PUBLIC	?fdata@@3PAUZenGlyph@@A				; fdata
PUBLIC	stbi_write_tga_with_rle
PUBLIC	stbi_write_png_compression_level
PUBLIC	stbi_write_force_png_filter
PUBLIC	?stb__rec_max@@3HA				; stb__rec_max
PUBLIC	?hlog@@3PEAU_iobuf@@EA				; hlog
PUBLIC	?stb__allocations@@3PEAUstb_malloc_record@@EA	; stb__allocations
PUBLIC	?stb__alloc_count@@3HA				; stb__alloc_count
PUBLIC	?stb__alloc_history@@3PAUstb_malloc_record@@A	; stb__alloc_history
PUBLIC	?stb__history_pos@@3HA				; stb__history_pos
PUBLIC	?stb__mt_index@@3HA				; stb__mt_index
PUBLIC	?stb__mt_buffer@@3PAIA				; stb__mt_buffer
_BSS	SEGMENT
?stb__source_path@@3PEADEA DQ 01H DUP (?)		; stb__source_path
?stb_alloc_count_free@@3HA DD 01H DUP (?)		; stb_alloc_count_free
?stb_alloc_count_alloc@@3HA DD 01H DUP (?)		; stb_alloc_count_alloc
?fdata@@3PAUZenGlyph@@A DB 0e00H DUP (?)		; fdata
?hlog@@3PEAU_iobuf@@EA DQ 01H DUP (?)			; hlog
?stb__allocations@@3PEAUstb_malloc_record@@EA DQ 01H DUP (?) ; stb__allocations
?stb__alloc_count@@3HA DD 01H DUP (?)			; stb__alloc_count
?stb__alloc_history@@3PAUstb_malloc_record@@A DB 0640H DUP (?) ; stb__alloc_history
?stb__history_pos@@3HA DD 01H DUP (?)			; stb__history_pos
?stb__mt_buffer@@3PAIA DD 0270H DUP (?)			; stb__mt_buffer
_BSS	ENDS
_DATA	SEGMENT
?stb__log_filename@@3PEBDEB DQ FLAT:$SG83281		; stb__log_filename
?stb_alloc_chunk_size@@3HA DD 010000H			; stb_alloc_chunk_size
?stb_alloc_alignment@@3HA DD 0fffffff0H			; stb_alloc_alignment
stbi_write_tga_with_rle DD 01H
stbi_write_png_compression_level DD 08H
stbi_write_force_png_filter DD 0ffffffffH
?stb__rec_max@@3HA DD 07fffffffH			; stb__rec_max
?stb__mt_index@@3HA DD 09c1H				; stb__mt_index
_DATA	ENDS
CONST	SEGMENT
$SG90174 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
$SG8309	DB	00H
$SG84023 DB	00H
$SG8323	DB	00H, 00H
$SG101399 DB	00H
$SG87301 DB	00H
$SG90175 DB	'!', 00H, '(', 00H, '(', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H, 'm', 00H, 'a'
	DB	00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H, '-', 00H
	DB	'>', 00H, 'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, ')'
	DB	00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H
	DB	'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
$SG87660 DB	00H
$SG88287 DB	00H
$SG90192 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90193 DB	'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 't', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG90195 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG90300 DB	'0', 00H, 00H, 00H
$SG98554 DB	'bad SOS component count', 00H
$SG90196 DB	'!', 00H, '(', 00H, '(', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, '[', 00H, 'f', 00H
	DB	'r', 00H, 'o', 00H, 'm', 00H, ']', 00H, '.', 00H, 'e', 00H, 'p'
	DB	00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H
	DB	'(', 00H, '(', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 's', 00H, '[', 00H, 'f', 00H, 'r', 00H, 'o'
	DB	00H, 'm', 00H, ']', 00H, '.', 00H, 'e', 00H, 'p', 00H, 's', 00H
	DB	')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H
	DB	's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90216 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG98502 DB	'expected marker', 00H
$SG98567 DB	'bad SOS', 00H
$SG90217 DB	'!', 00H, '(', 00H, '(', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, '[', 00H, 'f', 00H
	DB	'r', 00H, 'o', 00H, 'm', 00H, ']', 00H, '.', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H
	DB	'(', 00H, '(', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 's', 00H, '[', 00H, 'f', 00H, 'r', 00H, 'o'
	DB	00H, 'm', 00H, ']', 00H, '.', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H
	DB	's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90299 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG98643 DB	'bad TQ', 00H
	ORG $+1
$SG90875 DB	'0', 00H, 00H, 00H
$SG98505 DB	'bad DRI len', 00H
$SG90890 DB	'rb', 00H
	ORG $+1
$SG98508 DB	'bad DQT type', 00H
	ORG $+3
$SG98510 DB	'bad DQT table', 00H
	ORG $+2
$SG90319 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG98668 DB	'no SOI', 00H
	ORG $+1
$SG91137 DB	'wb', 00H
	ORG $+1
$SG90320 DB	'*', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'e', 00H, 'x', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H, '|', 00H, ''''
	DB	00H, 00H, 00H
$SG165136 DB	'1', 00H
	ORG $+2
$SG98514 DB	'bad DHT header', 00H
	ORG $+1
$SG98526 DB	'bad COM len', 00H
$SG91414 DB	'0', 00H, 00H, 00H
$SG98527 DB	'bad APP len', 00H
$SG91423 DB	'0', 00H, 00H, 00H
$SG98535 DB	'unknown marker', 00H
	ORG $+1
$SG98556 DB	'bad SOS len', 00H
$SG91431 DB	'0', 00H, 00H, 00H
$SG98560 DB	'bad DC huff', 00H
$SG91440 DB	'0', 00H, 00H, 00H
$SG98562 DB	'bad AC huff', 00H
$SG91450 DB	'0', 00H, 00H, 00H
$SG98569 DB	'bad SOS', 00H
$SG98572 DB	'bad SOS', 00H
$SG98620 DB	'bad SOF len', 00H
$SG83271 DB	0aH, 00H
	ORG $+2
$SG98622 DB	'only 8-bit', 00H
	ORG $+1
$SG83322 DB	'a', 00H
	ORG $+2
$SG98624 DB	'no header height', 00H
	ORG $+3
$SG98638 DB	'bad H', 00H
	ORG $+2
$SG98672 DB	'no SOF', 00H
	ORG $+1
$SG83326 DB	0aH, 00H
	ORG $+2
$SG98626 DB	'0 width', 00H
$SG98628 DB	'too large', 00H
	ORG $+2
$SG165024 DB	'MainVS', 00H
	ORG $+1
$SG83338 DB	'a', 00H
	ORG $+2
$SG98630 DB	'too large', 00H
	ORG $+2
$SG165027 DB	'MainPS', 00H
	ORG $+1
$SG83340 DB	0aH, 00H
	ORG $+2
$SG98632 DB	'bad component count', 00H
$SG9737	DB	'%f', 00H
	ORG $+1
$SG98634 DB	'bad SOF len', 00H
$SG98641 DB	'bad V', 00H
	ORG $+2
$SG165030 DB	'MainCS', 00H
	ORG $+1
$SG9741	DB	'%s', 00H
	ORG $+1
$SG98646 DB	'too large', 00H
	ORG $+2
$SG98650 DB	'bad H', 00H
	ORG $+2
$SG165036 DB	'vs_4_0', 00H
	ORG $+1
$SG91979 DB	'KD(', 00H
$SG90458 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90459 DB	'!', 00H, '(', 00H, '(', 00H, 'l', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG98652 DB	'bad V', 00H
	ORG $+2
$SG98654 DB	'outofmem', 00H
	ORG $+3
$SG164658 DB	'COLOR', 00H
	ORG $+2
$SG165039 DB	'ps_4_0', 00H
	ORG $+1
$SG91982 DB	'KF(', 00H
$SG98657 DB	'outofmem', 00H
	ORG $+3
$SG164662 DB	'COLOR', 00H
	ORG $+2
$SG165041 DB	'cs_4_0', 00H
	ORG $+1
$SG91992 DB	'KI(', 00H
$SG98698 DB	'bad DNL len', 00H
$SG91995 DB	'KU(', 00H
$SG98700 DB	'bad DNL height', 00H
	ORG $+1
$SG90537 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90538 DB	'!', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'o', 00H, 'u', 00H, 's', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, 'p'
	DB	00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'o', 00H, 'u', 00H
	DB	's', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90539 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90610 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '(', 00H, 'm'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'f', 00H, 'a', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG90540 DB	'!', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG165047 DB	'vs_5_0', 00H
	ORG $+1
$SG84024 DB	's', 00H
	ORG $+2
$SG90609 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG165050 DB	'ps_5_0', 00H
	ORG $+1
$SG84465 DB	'./', 00H
	ORG $+1
$SG90611 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90708 DB	'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H, '_', 00H, '_'
	DB	00H, 'D', 00H, 'F', 00H, 'A', 00H, '_', 00H, 'V', 00H, 'A', 00H
	DB	'L', 00H, 'I', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG90712 DB	'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '(', 00H
	DB	'm', 00H, '-', 00H, '>', 00H, 'd', 00H, 'f', 00H, 'a', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG90612 DB	'!', 00H, '(', 00H, 'm', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'f', 00H, 'a', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'p'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'(', 00H, '(', 00H, 'm', 00H, '-', 00H, '>', 00H, 'd', 00H, 'f'
	DB	00H, 'a', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'p', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90613 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90716 DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'n', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, '_', 00H, '_', 00H, 'D', 00H, 'F', 00H
	DB	'A', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'D', 00H, 'E', 00H, 'F'
	DB	00H, 00H, 00H
	ORG $+2
$SG90614 DB	'!', 00H, '(', 00H, '(', 00H, 'm', 00H, '-', 00H, '>', 00H
	DB	'd', 00H, 'f', 00H, 'a', 00H, ')', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, '(', 00H, '(', 00H, '(', 00H, 'm', 00H, '-', 00H, '>', 00H
	DB	'd', 00H, 'f', 00H, 'a', 00H, ')', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90617 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90618 DB	'!', 00H, '(', 00H, '(', 00H, 'm', 00H, '-', 00H, '>', 00H
	DB	'd', 00H, 'f', 00H, 'a', 00H, '_', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_'
	DB	00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, '(', 00H, '(', 00H, '(', 00H, 'm', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'f', 00H, 'a', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG165052 DB	'cs_5_0', 00H
	ORG $+1
$SG92803 DB	'0', 00H, 00H, 00H
$SG90707 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG91973 DB	'STB_D(', 00H
	ORG $+1
$SG84638 DB	'0', 00H, 00H, 00H
$SG90709 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90710 DB	'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H, '_', 00H, '_'
	DB	00H, 'D', 00H, 'F', 00H, 'A', 00H, '_', 00H, 'M', 00H, 'G', 00H
	DB	'O', 00H, 'A', 00H, 'L', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '(', 00H, 'm', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'f', 00H, 'a', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG91976 DB	'STB_F(', 00H
	ORG $+1
$SG84682 DB	'0', 00H, 00H, 00H
$SG90711 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG91986 DB	'STB_I(', 00H
	ORG $+1
$SG84828 DB	'0', 00H, 00H, 00H
$SG90715 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG93080 DB	'0', 00H, 00H, 00H
$SG90717 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90718 DB	'!', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	's', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H
	DB	'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 's', 00H, ')', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90719 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90720 DB	'!', 00H, 'n', 00H, 'e', 00H, 'w', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '('
	DB	00H, 'n', 00H, 'e', 00H, 'w', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, ')', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG93098 DB	'0', 00H, 00H, 00H
$SG90722 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90723 DB	'!', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, '(', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90748 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG93313 DB	'0', 00H, 00H, 00H
$SG90749 DB	'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H, '_', 00H, '_'
	DB	00H, 'D', 00H, 'F', 00H, 'A', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'F', 00H, 00H, 00H
	ORG $+2
$SG90756 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG101816 DB	'#?RGBE', 00H
	ORG $+1
$SG101824 DB	'-Y ', 00H
$SG90757 DB	'm', 00H, '-', 00H, '>', 00H, 'd', 00H, 'o', 00H, 'e', 00H
	DB	's', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG101827 DB	'+X ', 00H
$SG90765 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG167372 DB	'assets', 00H
	ORG $+1
$SG167377 DB	'..', 00H
	ORG $+1
$SG90766 DB	'm', 00H, '-', 00H, '>', 00H, 'd', 00H, 'o', 00H, 'e', 00H
	DB	's', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'x', 00H, 00H, 00H
$SG90815 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90816 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'i', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG90825 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90871 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, 00H, 00H
	ORG $+2
$SG90826 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'i', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG90870 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG101882 DB	'-Y ', 00H
$SG90874 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG101884 DB	'+X ', 00H
$SG90876 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG102084 DB	'rb', 00H
	ORG $+1
$SG90877 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, 00H, 00H
	ORG $+2
$SG164644 DB	'modules\renderer\model.hlsl', 00H
$SG102101 DB	'rb', 00H
	ORG $+1
$SG164645 DB	'plain3D', 00H
$SG164646 DB	'POSITION', 00H
	ORG $+3
$SG164666 DB	'COLOR', 00H
	ORG $+2
$SG102264 DB	'wb', 00H
	ORG $+1
$SG164647 DB	'plain3D', 00H
$SG164648 DB	'modules\renderer\textured.hlsl', 00H
	ORG $+1
$SG164649 DB	'textured3D', 00H
	ORG $+1
$SG167859 DB	'zen', 00H
$SG164650 DB	'TEXCOORD', 00H
	ORG $+3
$SG165143 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG167863 DB	'ttf', 00H
$SG164651 DB	'POSITION', 00H
	ORG $+3
$SG91880 DB	'%s/%s', 00H
	ORG $+2
$SG167864 DB	'otf', 00H
$SG164652 DB	'textured3D', 00H
	ORG $+1
$SG102330 DB	'0', 00H, 00H, 00H
$SG164653 DB	'modules\renderer\text.hlsl', 00H
	ORG $+1
$SG167867 DB	'ttf', 00H
$SG164654 DB	'POSITION', 00H
	ORG $+3
$SG91883 DB	'../%s', 00H
	ORG $+2
$SG167868 DB	'otf', 00H
$SG164655 DB	'GLYPHIDX', 00H
	ORG $+3
$SG164656 DB	'text', 00H
	ORG $+3
$SG84483 DB	'%s/%s', 00H
	ORG $+2
$SG168000 DB	'zen', 00H
$SG164657 DB	'TEXCOORD', 00H
	ORG $+3
$SG84492 DB	'%s.%s', 00H
	ORG $+2
$SG102706 DB	'p', 00H, 00H, 00H
$SG164659 DB	'POSITION', 00H
	ORG $+3
$SG167895 DB	'ASCII', 00H
	ORG $+2
$SG168395 DB	'.', 00H, 00H, 00H
$SG164660 DB	'ImGui::ShaderBundle(A)', 00H
	ORG $+1
$SG164661 DB	'TEXCOORD', 00H
	ORG $+3
$SG168408 DB	'.', 00H, 00H, 00H
$SG164663 DB	'POSITION', 00H
	ORG $+3
$SG168438 DB	'.', 00H
	ORG $+2
$SG164664 DB	'ImGui::ShaderBundle(B)', 00H
	ORG $+1
$SG164665 DB	'TEXCOORD', 00H
	ORG $+3
$SG168439 DB	'assets', 00H
	ORG $+1
$SG168614 DB	'Zen', 00H
$SG164667 DB	'POSITION', 00H
	ORG $+3
$SG103160 DB	'wb', 00H
	ORG $+1
$SG164668 DB	'ImGui::ShaderBundle(C)', 00H
	ORG $+1
$SG164697 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H
$SG164698 DB	'D3D11Driver_InitializeCompatible', 00H
	ORG $+3
$SG86791 DB	'rb', 00H
	ORG $+1
$SG164699 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG9739	DB	'%lli', 00H
	ORG $+7
$SG164706 DB	'cbuffer ConstBuffer : register(b0)', 0dH, 0aH, '{ float4'
	DB	'x4 ProjectionMatrix;', 0dH, 0aH, '};', 0dH, 0aH, 'struct VS_I'
	DB	'NPUT', 0dH, 0aH, '{ float2 pos : POSITION;', 0dH, 0aH, '  flo'
	DB	'at4 col : COLOR0;', 0dH, 0aH, '};', 0dH, 0aH, 'struct PS_INPU'
	DB	'T', 0dH, 0aH, '{ float4 pos : SV_POSITION;', 0dH, 0aH, '  flo'
	DB	'at4 col : COLOR0;', 0dH, 0aH, '  float4 tex : TEXCOORD0;', 0dH
	DB	0aH, '};', 0dH, 0aH, 'PS_INPUT MainVS(VS_INPUT input)', 0dH, 0aH
	DB	'{ PS_INPUT output;', 0dH, 0aH, '  output.pos = mul( Projectio'
	DB	'nMatrix, float4(input.pos.xy, 0.f, 1.f));', 0dH, 0aH, '  outp'
	DB	'ut.col = input.col;', 0dH, 0aH, '  output.tex = float4(0,0,0,'
	DB	'0);', 0dH, 0aH, '  return output;', 0dH, 0aH, '}', 0dH, 0aH, 'f'
	DB	'loat4 MainPS(PS_INPUT input) : SV_Target', 0dH, 0aH, '{ retur'
	DB	'n input.col;', 0dH, 0aH, '}', 0dH, 0aH, 00H
$SG92883 DB	'typ1', 00H
	ORG $+7
$SG164713 DB	'cbuffer ConstBuffer : register(b0)', 0dH, 0aH, '{ float4'
	DB	'x4 ProjectionMatrix;', 0dH, 0aH, '};', 0dH, 0aH, 'struct VS_I'
	DB	'NPUT', 0dH, 0aH, '{ float2 pos : POSITION;', 0dH, 0aH, '  flo'
	DB	'at4 col : COLOR0;', 0dH, 0aH, '  float2 uv  : TEXCOORD0;', 0dH
	DB	0aH, '};', 0dH, 0aH, 'struct PS_INPUT', 0dH, 0aH, '{ float4 po'
	DB	's : SV_POSITION;', 0dH, 0aH, '  float4 col : COLOR0;', 0dH, 0aH
	DB	'  float2 uv  : TEXCOORD0;', 0dH, 0aH, '};', 0dH, 0aH, 'PS_INP'
	DB	'UT MainVS(VS_INPUT input)', 0dH, 0aH, '{ PS_INPUT output;', 0dH
	DB	0aH, '  output.pos = mul( ProjectionMatrix, float4(input.pos.x'
	DB	'y, 0.f, 1.f));', 0dH, 0aH, '  output.col = input.col;', 0dH, 0aH
	DB	'  output.uv  = input.uv;', 0dH, 0aH, '  return output;', 0dH, 0aH
	DB	'}', 0dH, 0aH, 'SamplerState     sampler0;', 0dH, 0aH, 'Textur'
	DB	'e2D<float> texture0;', 0dH, 0aH, 'float4 MainPS(PS_INPUT inpu'
	DB	't) : SV_Target', 0dH, 0aH, '{ float alpha = texture0.Sample(s'
	DB	'ampler0, input.uv);', 0dH, 0aH, '  float4 out_col = input.col'
	DB	' * alpha;', 0dH, 0aH, '  return out_col;', 0dH, 0aH, '}', 0dH
	DB	0aH, 00H
	ORG $+5
$SG164720 DB	'cbuffer ConstBuffer : register(b0)', 0dH, 0aH, '{ float4'
	DB	'x4 ProjectionMatrix;', 0dH, 0aH, '  float    FieldMin;', 0dH, 0aH
	DB	'  float    FieldOff;', 0dH, 0aH, '  float    FieldMax;', 0dH, 0aH
	DB	'};', 0dH, 0aH, 'struct VS_INPUT', 0dH, 0aH, '{ float2 pos : P'
	DB	'OSITION;', 0dH, 0aH, '  float4 col : COLOR0;', 0dH, 0aH, '  f'
	DB	'loat2 uv  : TEXCOORD0;', 0dH, 0aH, '};', 0dH, 0aH, 'struct PS'
	DB	'_INPUT', 0dH, 0aH, '{ float4 pos : SV_POSITION;', 0dH, 0aH, ' '
	DB	' float4 col : COLOR0;', 0dH, 0aH, '  float2 uv  : TEXCOORD0;', 0dH
	DB	0aH, '};', 0dH, 0aH, 'PS_INPUT MainVS(VS_INPUT input)', 0dH, 0aH
	DB	'{ PS_INPUT output;', 0dH, 0aH, '  output.pos = mul( Projectio'
	DB	'nMatrix, float4(input.pos.xy, 0.f, 1.f));', 0dH, 0aH, '  outp'
	DB	'ut.col = input.col;', 0dH, 0aH, '  output.uv  = input.uv;', 0dH
	DB	0aH, '  return output;', 0dH, 0aH, '}', 0dH, 0aH, 'SamplerStat'
	DB	'e     sampler0;', 0dH, 0aH, 'Texture2D<float> texture0;', 0dH
	DB	0aH, 'float4 MainPS(PS_INPUT input) : SV_Target', 0dH, 0aH, '{'
	DB	0dH, 0aH, '  float4 Color = float4(0,0,0,0); ', 0dH, 0aH, '  f'
	DB	'loat Distance = texture0.Sample(sampler0, input.uv);', 0dH, 0aH
	DB	'  if(Distance >= FieldOff) ', 0dH, 0aH, '  { float Alpha = sm'
	DB	'oothstep(FieldOff, FieldMax, Distance);', 0dH, 0aH, '    Colo'
	DB	'r = float4(input.col.rgb * Alpha, Alpha);', 0dH, 0aH, '  } el'
	DB	'se ', 0dH, 0aH, '  { ', 0dH, 0aH, '  } ', 0dH, 0aH, '  return'
	DB	' Color;', 0dH, 0aH, '}', 0dH, 0aH, 00H
	ORG $+2
$SG86809 DB	'wb', 00H
	ORG $+1
$SG164740 DB	'u', 00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, 00H, 00H
$SG86828 DB	'rb', 00H
	ORG $+1
$SG164741 DB	'ZenExternalizeResourceAccessFlags', 00H
	ORG $+2
$SG86853 DB	'rb', 00H
	ORG $+1
$SG99205 DB	'bad req_comp', 00H
	ORG $+3
$SG164742 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG86945 DB	'rb', 00H
	ORG $+1
$SG99211 DB	'outofmem', 00H
	ORG $+3
$SG78616 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG86946 DB	'rb', 00H
	ORG $+1
$SG99221 DB	'outofmem', 00H
	ORG $+3
$SG86961 DB	'rb', 00H
	ORG $+1
$SG164764 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'I', 00H, 'D', 00H, 'X', 00H, 'G', 00H, 'I', 00H
	DB	'_', 00H, 'F', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'O', 00H, 'R'
	DB	00H, 'Y', 00H, 00H, 00H
$SG164765 DB	'ID3D11Driver_GetFactory', 00H
$SG164766 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG86962 DB	'rb', 00H
	ORG $+1
$SG99263 DB	'outofmem', 00H
	ORG $+3
$SG87019 DB	'0', 00H, 00H, 00H
$SG99272 DB	'outofmem', 00H
	ORG $+3
$SG87051 DB	'wb', 00H
	ORG $+1
$SG91083 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG87076 DB	'rb', 00H
	ORG $+1
$SG91084 DB	'd', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG87078 DB	'wb', 00H
	ORG $+1
$SG99294 DB	'outofmem', 00H
	ORG $+3
$SG103623 DB	'error', 00H
	ORG $+2
$SG79227 DB	'C:', 00H
	ORG $+1
$SG164845 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG164846 DB	'ID3D11Driver_CreateBuffer', 00H
	ORG $+2
$SG87441 DB	'*.*', 00H
$SG164847 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG79253 DB	'*', 00H
	ORG $+2
$SG91123 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG87446 DB	'Unable', 00H
	ORG $+1
$SG87649 DB	't', 00H, 00H, 00H
$SG91124 DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+4
$SG99322 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG99323 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG164886 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG164887 DB	'ID3D11Driver_CreateBufferShaderAccess', 00H
	ORG $+2
$SG164888 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG79537 DB	'%s,', 00H
$SG99358 DB	'bad sizes', 00H
	ORG $+2
$SG79502 DB	'DEVICE', 00H
	ORG $+1
$SG87830 DB	'rb', 00H
	ORG $+1
$SG99361 DB	'bad codelengths', 00H
$SG164899 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG164900 DB	'ID3D11Driver_CreateSimpleSampler', 00H
	ORG $+3
$SG79505 DB	'HIDDEN', 00H
	ORG $+1
$SG87899 DB	'cu', 00H
	ORG $+1
$SG164901 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG164924 DB	'I', 00H, 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '1', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '_'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'R'
	DB	00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H
	DB	'E', 00H, 'D', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG79507 DB	'NORMAL', 00H
	ORG $+1
$SG87904 DB	'lm', 00H
	ORG $+1
$SG164925 DB	'ID3D11Driver_CreateTexture2DShaderAccess', 00H
	ORG $+3
$SG79516 DB	'SYSTEM', 00H
	ORG $+1
$SG88063 DB	'wb', 00H
	ORG $+1
$SG164926 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG96433 DB	'rb', 00H
	ORG $+1
$SG164927 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
$SG164928 DB	'ID3D11Driver_CreateTexture2DShaderAccess', 00H
	ORG $+3
$SG79519 DB	'PINNED', 00H
	ORG $+1
$SG96470 DB	'rb', 00H
	ORG $+1
$SG164929 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG92884 DB	'typ1', 00H
	ORG $+7
$SG164943 DB	'I', 00H, 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '1', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '_'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'V', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, '(', 00H, ')', 00H, ' ', 00H, '['
	DB	00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E', 00H, 'D', 00H
	DB	']', 00H, 00H, 00H
	ORG $+2
$SG164944 DB	'ID3D11Driver_CreateTexture2DRenderTargetView', 00H
	ORG $+3
$SG164945 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG88288 DB	'wb', 00H
	ORG $+1
$SG164946 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
$SG164947 DB	'ID3D11Driver_CreateTexture2DRenderTargetView', 00H
	ORG $+3
$SG164948 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG88319 DB	'rb', 00H
	ORG $+1
$SG164965 DB	'(', 00H, '.', 00H, 'D', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'n', 00H, 'X', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, '.', 00H, 'D', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 'Y', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, 'i', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG88049 DB	'c:/stb', 00H
	ORG $+1
$SG88371 DB	'<', 00H
	ORG $+2
$SG164966 DB	'ID3D11Driver_CreateTexture2D', 00H
	ORG $+3
$SG91238 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG96571 DB	'rb', 00H
	ORG $+1
$SG164967 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG88380 DB	'D', 00H
	ORG $+2
$SG91239 DB	'a', 00H, 'm', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG91240 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91241 DB	'x', 00H, 't', 00H, 'b', 00H, '.', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'x'
	DB	00H, 't', 00H, 'b', 00H, '.', 00H, 'f', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x'
	DB	00H, 't', 00H, 'b', 00H, '.', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG91242 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG88382 DB	'E', 00H
	ORG $+2
$SG164971 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG91243 DB	'x', 00H, 't', 00H, 'b', 00H, '.', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, 'f', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG164972 DB	'ID3D11Driver_CreateTexture2D', 00H
	ORG $+3
$SG91244 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG88384 DB	'[', 00H
	ORG $+2
$SG164973 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG88387 DB	')', 00H
	ORG $+2
$SG91245 DB	'x', 00H, 't', 00H, 'b', 00H, '.', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, 'f', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG99446 DB	'output buffer limit', 00H
$SG88398 DB	'...', 00H
$SG99448 DB	'outofmem', 00H
	ORG $+3
$SG79538 DB	'%s %s', 00H
	ORG $+2
$SG88399 DB	'%s', 0dH, 00H
$SG99450 DB	'outofmem', 00H
	ORG $+3
$SG88051 DB	'rHKLM', 00H
	ORG $+2
$SG96592 DB	'rb', 00H
	ORG $+1
$SG99452 DB	'outofmem', 00H
	ORG $+7
$SG99480 DB	'bad huffman code', 00H
	ORG $+7
?stbi__zlength_base@@3QBHB DD 03H			; stbi__zlength_base
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	DD	00H
	DD	00H
	ORG $+4
?stbi__zlength_extra@@3QBHB DD 00H			; stbi__zlength_extra
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
?stbi__zdist_base@@3QBHB DD 01H				; stbi__zdist_base
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
	DD	00H
	DD	00H
?stbi__zdist_extra@@3QBHB DD 00H			; stbi__zdist_extra
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
$SG165020 DB	'invalid', 00H
$SG165021 DB	'invalid', 00H
$SG99486 DB	'bad huffman code', 00H
	ORG $+3
$SG88377 DB	'C[%d]', 00H
	ORG $+2
$SG88401 DB	'(', 00H
	ORG $+2
$SG99489 DB	'bad dist', 00H
	ORG $+3
$SG80190 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG88403 DB	']', 00H
	ORG $+2
$SG99523 DB	'bad codelengths', 00H
$SG99529 DB	'bad codelengths', 00H
$SG99534 DB	'bad codelengths', 00H
$SG99536 DB	'bad codelengths', 00H
$SG99538 DB	'bad codelengths', 00H
$SG165081 DB	'u', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG165082 DB	'ID3D11Driver_CreateShaderInternal', 00H
	ORG $+2
$SG88405 DB	'>', 0aH, 00H
	ORG $+1
$SG165083 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG88449 DB	'.', 00H
	ORG $+2
$SG99555 DB	'zlib corrupt', 00H
	ORG $+3
$SG99557 DB	'zlib corrupt', 00H
	ORG $+3
$SG99559 DB	'read past buffer', 00H
	ORG $+3
$SG88394 DB	'%s/%s', 00H
	ORG $+2
$SG96774 DB	'0', 00H, 00H, 00H
$SG99569 DB	'bad zlib header', 00H
$SG99571 DB	'bad zlib header', 00H
$SG99573 DB	'no preset dict', 00H
	ORG $+1
$SG99575 DB	'bad compression', 00H
?stbi__zdefault_length@@3QBEB DB 08H			; stbi__zdefault_length
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
?stbi__zdefault_distance@@3QBEB DB 05H			; stbi__zdefault_distance
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
$SG165135 DB	'COMPILE_SHADER', 00H
	ORG $+1
$SG165140 DB	'*', 00H, '*', 00H, '*', 00H, ' ', 00H, 's', 00H, 'h', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	00H, 00H
$SG96866 DB	'0', 00H, 00H, 00H
$SG165141 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+2
$SG88678 DB	'0', 00H, 00H, 00H
$SG91413 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG88717 DB	'0', 00H, 00H, 00H
$SG165142 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG88749 DB	'w', 00H
	ORG $+2
$SG165144 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+2
$SG88939 DB	'0', 00H, 00H, 00H
$SG165145 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165146 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	00H, 00H
$SG105874 DB	'%f', 00H
	ORG $+1
$SG165147 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG165148 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG91422 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91430 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91439 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91449 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG83269 DB	'[%s:%d] ', 00H
	ORG $+7
$SG83270 DB	'Fatal error: ', 00H
	ORG $+2
$SG9545	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9546	DB	'V <= ((unsigned __int64)(0x000000000000000F))', 00H
	ORG $+2
$SG165195 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9547	DB	'safe_cast_u4', 00H
	ORG $+3
$SG165196 DB	'(void *)Record == (void *)External', 00H
	ORG $+5
$SG9548	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG165197 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG165198 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165199 DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'T', 00H
	DB	'E', 00H, 'X', 00H, 'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, ','
	DB	00H, ' ', 00H, 'C', 00H, 'A', 00H, 'N', 00H, 'N', 00H, 'O', 00H
	DB	'T', 00H, ' ', 00H, 'M', 00H, 'A', 00H, 'P', 00H, 00H, 00H
	ORG $+6
$SG165200 DB	'Record->Resource != NULL', 00H
	ORG $+7
$SG165201 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG83281 DB	'stb.log', 00H
$SG165202 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG9554	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG165203 DB	'M', 00H, 'A', 00H, 'P', 00H, ' ', 00H, 'A', 00H, 'L', 00H
	DB	'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, ' ', 00H, 'A'
	DB	00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'E', 00H, ',', 00H
	DB	' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG9555	DB	'V <= 0xffui8', 00H
	ORG $+3
$SG165204 DB	'Record->BorrowedCounter == 0', 00H
	ORG $+3
$SG9556	DB	'safe_cast_u8', 00H
	ORG $+3
$SG165205 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG9557	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG165206 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG9563	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9564	DB	'V <= 0xffffui16', 00H
$SG9565	DB	'safe_cast_u16', 00H
	ORG $+2
$SG165214 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9566	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG165215 DB	'TODO(RJ):', 00H
	ORG $+6
$SG165216 DB	'!"TODO(RJ):"', 00H
	ORG $+3
$SG165217 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG165218 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165219 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG165220 DB	'ID3D11Driver_BorrowTextureChronicle', 00H
	ORG $+4
$SG9572	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG165221 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG9573	DB	'V <= 0xffffffffui32', 00H
	ORG $+4
$SG9574	DB	'safe_cast_u32', 00H
	ORG $+2
$SG9575	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG9581	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9582	DB	'V <= 0xffffffffffffffffui64', 00H
	ORG $+4
$SG9583	DB	'safe_cast_u64', 00H
	ORG $+2
$SG165232 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+2
$SG9584	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG165233 DB	'ID3D11Driver_ReturnTextureChronicle', 00H
	ORG $+4
$SG165234 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG91513 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91514 DB	'!', 00H, '(', 00H, '(', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H
	DB	'f', 00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG83325 DB	'[%s:%4d] ', 00H
	ORG $+6
$SG99712 DB	'bad png sig', 00H
	ORG $+4
$SG91532 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91533 DB	'!', 00H, '(', 00H, 'f', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, '(', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
?stbi__depth_scale_table@@3QBEB DB 00H			; stbi__depth_scale_table
	DB	0ffH
	DB	055H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+7
$SG91658 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG91659 DB	'a', 00H, '-', 00H, '>', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'f', 00H, 'f'
	DB	00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '-', 00H
	DB	'1', 00H, 00H, 00H
	ORG $+6
$SG9743	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9744	DB	'Unsupported Format Specifier!', 00H
	ORG $+2
$SG9745	DB	'! "Unsupported Format Specifier!"', 00H
	ORG $+6
$SG9746	DB	'rx__printf', 00H
	ORG $+5
$SG9747	DB	'W:\cpp\void\dr/text.c', 00H
	ORG $+2
$SG99902 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG83518 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG83523 DB	'a', 00H, 'x', 00H, 'i', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'a', 00H, 'x', 00H, 'i', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '3', 00H, 00H, 00H
$SG92885 DB	'typ1', 00H
	ORG $+7
$SG99903 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+'
	DB	00H, '1', 00H, 00H, 00H
	ORG $+6
$SG99909 DB	'not enough pixels', 00H
	ORG $+6
$SG83519 DB	'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '_', 00H, 'n', 00H
	DB	'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '_', 00H, 'n'
	DB	00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '6', 00H, 00H, 00H
$SG83520 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG99905 DB	'outofmem', 00H
	ORG $+7
$SG83522 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG99911 DB	'invalid filter', 00H
	ORG $+1
$SG99940 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, '_', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG83521 DB	'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H
	DB	'_', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, '_', 00H, 'n', 00H, 'u', 00H, 'm', 00H
	DB	'b', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '4'
	DB	00H, 00H, 00H
$SG99907 DB	'too large', 00H
	ORG $+6
$SG99914 DB	'invalid width', 00H
	ORG $+2
$SG99939 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG99971 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG99970 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG100009 DB	'outofmem', 00H
	ORG $+7
$SG100030 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG100029 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG165567 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG165568 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG165569 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165570 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG165571 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG165572 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165573 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG165574 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG165575 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG92886 DB	'typ1', 00H
	ORG $+7
$SG100052 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG100053 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG100079 DB	'outofmem', 00H
	ORG $+7
$SG100125 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG165662 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l'
	DB	00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG100126 DB	's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'm', 00H, 'g', 00H
	DB	'_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG165663 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG165664 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165666 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG165667 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG165668 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG165669 DB	'l', 00H, 'o', 00H, 'o', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
$SG165670 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG165671 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG91989 DB	'STB_UI(', 00H
$SG100223 DB	'multiple IHDR', 00H
	ORG $+2
$SG100225 DB	'bad IHDR len', 00H
	ORG $+3
$SG100227 DB	'too large', 00H
	ORG $+6
$SG83843 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG83844 DB	's', 00H, '-', 00H, '>', 00H, 'm', 00H, 'i', 00H, 'n', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, ' ', 00H, '<', 00H, ' ', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'x', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H
	ORG $+4
$SG100229 DB	'too large', 00H
	ORG $+6
$SG100231 DB	'1/2/4/8/16-bit only', 00H
	ORG $+4
$SG83847 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG83848 DB	's', 00H, '-', 00H, '>', 00H, 'm', 00H, 'i', 00H, 'n', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, ' ', 00H, '<', 00H, ' ', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'x', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H
	ORG $+4
$SG100233 DB	'bad ctype', 00H
	ORG $+6
$SG100235 DB	'bad ctype', 00H
	ORG $+6
$SG92043 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG92044 DB	'!', 00H, '(', 00H, '(', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '(', 00H
	DB	'(', 00H, 'f', 00H, '-', 00H, '>', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_'
	DB	00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 00H, 00H
	ORG $+2
$SG100239 DB	'bad ctype', 00H
	ORG $+6
$SG100241 DB	'bad comp method', 00H
$SG100243 DB	'bad filter method', 00H
	ORG $+6
$SG100245 DB	'bad interlace method', 00H
	ORG $+3
$SG100248 DB	'0-pixel image', 00H
	ORG $+2
$SG100252 DB	'too large', 00H
	ORG $+6
$SG100255 DB	'too large', 00H
	ORG $+6
$SG100258 DB	'first not IHDR', 00H
	ORG $+1
$SG100260 DB	'invalid PLTE', 00H
	ORG $+3
$SG100262 DB	'invalid PLTE', 00H
	ORG $+3
$SG100265 DB	'first not IHDR', 00H
	ORG $+1
$SG100267 DB	'tRNS after IDAT', 00H
$SG100272 DB	'tRNS before PLTE', 00H
	ORG $+7
$SG100274 DB	'bad tRNS len', 00H
	ORG $+3
$SG100276 DB	'tRNS with alpha', 00H
$SG100278 DB	'bad tRNS len', 00H
	ORG $+3
$SG100283 DB	'first not IHDR', 00H
	ORG $+1
$SG100285 DB	'no PLTE', 00H
$SG100291 DB	'outofmem', 00H
	ORG $+7
$SG100293 DB	'outofdata', 00H
	ORG $+6
$SG100296 DB	'first not IHDR', 00H
	ORG $+1
$SG100299 DB	'no IDAT', 00H
$SG100319 DB	'first not IHDR', 00H
	ORG $+1
$SG100338 DB	'bad req_comp', 00H
	ORG $+3
$SG100344 DB	'bad bits_per_channel', 00H
	ORG $+3
$SG100427 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG100428 DB	'v', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H
	DB	'6', 00H, 00H, 00H
$SG100495 DB	'not BMP', 00H
$SG100429 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG100430 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG166032 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG166033 DB	'TemporaryPushCounterUntilAStackIsAdded ++ < 1', 00H
	ORG $+2
$SG100497 DB	'bad BMP', 00H
$SG166034 DB	'ZenCorePushCurrentDir', 00H
	ORG $+2
$SG166035 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+6
$SG100499 DB	'unknown BMP', 00H
	ORG $+4
$SG166036 DB	'S', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	'A', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG166037 DB	'ZenCorePushCurrentDir', 00H
	ORG $+2
$SG166038 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+6
$SG100503 DB	'bad BMP', 00H
$SG100507 DB	'BMP RLE', 00H
$SG166044 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG166045 DB	'TemporaryPushCounterUntilAStackIsAdded -- > 0', 00H
	ORG $+2
$SG100509 DB	'BMP JPEG/PNG', 00H
	ORG $+3
$SG166046 DB	'ZenCorePullCurrentDir', 00H
	ORG $+2
$SG166047 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+6
$SG100511 DB	'bad BMP', 00H
$SG166048 DB	'S', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'u', 00H, 'r', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	'A', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG166049 DB	'ZenCorePullCurrentDir', 00H
	ORG $+2
$SG166050 DB	'W:\cpp\void\detroit\brazen-core.h', 00H
	ORG $+6
$SG100523 DB	'bad BMP', 00H
$SG100524 DB	'bad BMP', 00H
$SG100526 DB	'bad BMP', 00H
$SG100648 DB	'too large', 00H
	ORG $+6
$SG100650 DB	'too large', 00H
	ORG $+6
$SG100657 DB	'bad offset', 00H
	ORG $+5
$SG100663 DB	'too large', 00H
	ORG $+6
$SG100665 DB	'outofmem', 00H
	ORG $+7
$SG100670 DB	'invalid', 00H
$SG100678 DB	'bad bpp', 00H
$SG100699 DB	'bad masks', 00H
	ORG $+6
$SG100702 DB	'bad masks', 00H
	ORG $+6
$SG84362 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84363 DB	's', 00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	'(', 00H, 'p', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	'(', 00H, 's', 00H, 'r', 00H, 'c', 00H, ')', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'*', 00H, '(', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'-', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '_', 00H, 'f', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG84380 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84381 DB	'd', 00H, 'e', 00H, 'l', 00H, 't', 00H, 'a', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG84427 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84428 DB	'r', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'n', 00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r'
	DB	00H, '2', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'n', 00H
	DB	'2', 00H, 00H, 00H
	ORG $+6
$SG100890 DB	'too large', 00H
	ORG $+6
$SG100892 DB	'too large', 00H
	ORG $+6
$SG100897 DB	'bad format', 00H
	ORG $+5
$SG100900 DB	'too large', 00H
	ORG $+6
$SG100902 DB	'outofmem', 00H
	ORG $+7
$SG100907 DB	'bad palette', 00H
	ORG $+4
$SG100909 DB	'outofmem', 00H
	ORG $+7
$SG100913 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG100915 DB	'bad palette', 00H
$SG92888 DB	'OTTO', 00H
	ORG $+7
$SG100912 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG92737 DB	'!', 00H, '(', 00H, 'o', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'b', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG92754 DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG100927 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG100928 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG92765 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '4', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG92736 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92753 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92764 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92785 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92786 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG92802 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92813 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92814 DB	'b', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'2', 00H, '8', 00H, 00H, 00H
	ORG $+6
$SG84637 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84665 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84666 DB	'*', 00H, 'n', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 'v', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG84668 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG92863 DB	'i', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
$SG84669 DB	'*', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H
	DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'n', 00H, '(', 00H, 'n'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '&', 00H, 'n'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	00H, 00H
	ORG $+6
$SG84673 DB	'*', 00H, 's', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 'v', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG101061 DB	'not PSD', 00H
$SG92862 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG92864 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84672 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG92865 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG84675 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84676 DB	'*', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H
	DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'n', 00H, '(', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'l', 00H
	DB	'd', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '&'
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'c', 00H, 'h', 00H, 'i', 00H
	DB	'l', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG84678 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG101063 DB	'wrong version', 00H
	ORG $+2
$SG101066 DB	'wrong channel count', 00H
	ORG $+4
$SG84679 DB	'*', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H
	DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'n', 00H, '(', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '&', 00H, 's'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	00H, 00H
	ORG $+6
$SG84681 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG101068 DB	'too large', 00H
	ORG $+6
$SG101070 DB	'too large', 00H
	ORG $+6
$SG101072 DB	'unsupported bit depth', 00H
	ORG $+2
$SG101074 DB	'wrong color format', 00H
	ORG $+5
$SG101076 DB	'bad compression', 00H
$SG101078 DB	'too large', 00H
	ORG $+2
$SG92889 DB	'OTTO', 00H
	ORG $+7
$SG101082 DB	'outofmem', 00H
	ORG $+3
$SG92890 DB	'OTTO', 00H
	ORG $+3
$SG92891 DB	'OTTO', 00H
	ORG $+7
$SG84700 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84701 DB	'(', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'u', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'a', 00H, ')', 00H, ' '
	DB	00H, '(', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'b', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, '+', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 't', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ')', 00H, ' ', 00H, '&', 00H, ' '
	DB	00H, '(', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'-', 00H, '1', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG92894 DB	'true', 00H
	ORG $+3
$SG92895 DB	'true', 00H
	ORG $+3
$SG101088 DB	'corrupt', 00H
$SG92896 DB	'true', 00H
	ORG $+3
$SG92897 DB	'true', 00H
	ORG $+3
$SG92918 DB	'ttcf', 00H
	ORG $+3
$SG92919 DB	'ttcf', 00H
	ORG $+3
$SG92920 DB	'ttcf', 00H
	ORG $+3
$SG92921 DB	'ttcf', 00H
	ORG $+3
$SG92930 DB	'ttcf', 00H
	ORG $+3
$SG92931 DB	'ttcf', 00H
	ORG $+3
$SG92932 DB	'ttcf', 00H
	ORG $+3
$SG101125 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG92933 DB	'ttcf', 00H
	ORG $+3
$SG101127 DB	'PICT', 00H
	ORG $+3
$SG84746 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84747 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, '*', 00H, 'n', 00H, ')', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'p', 00H, 'r', 00H, 'e', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG92956 DB	'SVG ', 00H
	ORG $+7
$SG101157 DB	'bad file', 00H
	ORG $+3
$SG93000 DB	'cmap', 00H
	ORG $+3
$SG93001 DB	'loca', 00H
	ORG $+3
$SG93002 DB	'head', 00H
	ORG $+3
$SG93003 DB	'glyf', 00H
	ORG $+3
$SG93004 DB	'hhea', 00H
	ORG $+3
$SG93005 DB	'hmtx', 00H
	ORG $+3
$SG93006 DB	'kern', 00H
	ORG $+7
$SG84814 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG93007 DB	'GPOS', 00H
	ORG $+7
$SG84815 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'i', 00H, 's', 00H
	DB	'_', 00H, 'p', 00H, 'o', 00H, 'w', 00H, '2', 00H, '(', 00H, 'a'
	DB	00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG93013 DB	'CFF ', 00H
	ORG $+3
$SG93019 DB	'maxp', 00H
	ORG $+3
$SG84827 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG101239 DB	'bad format', 00H
	ORG $+5
$SG101241 DB	'bad file', 00H
	ORG $+7
$SG101243 DB	'bad format', 00H
	ORG $+5
$SG101245 DB	'bad format', 00H
	ORG $+5
$SG101250 DB	'bad file', 00H
	ORG $+7
$SG84868 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG93125 DB	'!', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'f', 00H, 'f', 00H, '.', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG101394 DB	'not GIF', 00H
$SG84869 DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H
	DB	'T', 00H, 'B', 00H, '_', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'T'
	DB	00H, 'B', 00H, '_', 00H, '_', 00H, 'n', 00H, 'o', 00H, 'c', 00H
	DB	'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 00H, 00H
$SG101255 DB	'bad file', 00H
	ORG $+7
$SG101261 DB	'bad file', 00H
	ORG $+7
$SG101264 DB	'bad file', 00H
	ORG $+7
$SG93079 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84896 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84897 DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H
	DB	'T', 00H, 'B', 00H, '_', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'T'
	DB	00H, 'B', 00H, '_', 00H, '_', 00H, 'n', 00H, 'o', 00H, 'c', 00H
	DB	'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 00H, 00H
$SG93097 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG101296 DB	'too large', 00H
	ORG $+6
$SG101298 DB	'too large', 00H
	ORG $+6
$SG101300 DB	'bad file', 00H
	ORG $+7
$SG101302 DB	'too large', 00H
	ORG $+6
$SG101304 DB	'outofmem', 00H
	ORG $+7
$SG93124 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84979 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84980 DB	'!', 00H, 'p', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '2', 00H, '(', 00H
	DB	'p', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG84990 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG84991 DB	'!', 00H, 'p', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '2', 00H, '(', 00H
	DB	'p', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG85010 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG85011 DB	'!', 00H, 'p', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '2', 00H, '(', 00H
	DB	'p', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG101396 DB	'not GIF', 00H
$SG101398 DB	'not GIF', 00H
$SG101401 DB	'too large', 00H
	ORG $+6
$SG101403 DB	'too large', 00H
	ORG $+6
$SG85032 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG101417 DB	'outofmem', 00H
	ORG $+7
$SG85033 DB	'!', 00H, 'p', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '2', 00H, '(', 00H
	DB	'p', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG85045 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG85046 DB	'!', 00H, 'p', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '2', 00H, '(', 00H
	DB	'p', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG101484 DB	'no clear code', 00H
	ORG $+2
$SG101488 DB	'too many codes', 00H
	ORG $+1
$SG101490 DB	'illegal code in raster', 00H
	ORG $+1
$SG101492 DB	'illegal code in raster', 00H
	ORG $+1
$SG93312 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG101549 DB	'too large', 00H
	ORG $+6
$SG101552 DB	'outofmem', 00H
	ORG $+7
$SG101563 DB	'bad Image Descriptor', 00H
	ORG $+3
$SG101571 DB	'missing color table', 00H
	ORG $+4
$SG101585 DB	'unknown code', 00H
	ORG $+3
$SG101595 DB	'outofmem', 00H
	ORG $+7
$SG101649 DB	'not GIF', 00H
$SG101686 DB	'#?RADIANCE', 0aH, 00H
	ORG $+4
$SG101688 DB	'#?RGBE', 0aH, 00H
$SG93615 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG93616 DB	'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG167351 DB	'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'l', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H
	ORG $+6
$SG101815 DB	'#?RADIANCE', 00H
	ORG $+5
$SG167352 DB	'LoadModel', 00H
	ORG $+6
$SG167353 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG101817 DB	'not HDR', 00H
$SG101820 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG101822 DB	'unsupported format', 00H
	ORG $+5
$SG101825 DB	'unsupported data layout', 00H
$SG167361 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167362 DB	'LoadModel', 00H
	ORG $+6
$SG167363 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG101828 DB	'unsupported data layout', 00H
$SG101830 DB	'too large', 00H
	ORG $+6
$SG101832 DB	'too large', 00H
	ORG $+6
$SG167371 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167369 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167370 DB	'LoadModel', 00H
	ORG $+6
$SG101836 DB	'too large', 00H
	ORG $+6
$SG167374 DB	'l', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'y', 00H, ' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG101838 DB	'outofmem', 00H
	ORG $+7
$SG167375 DB	'LoadModel', 00H
	ORG $+6
$SG167376 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG101845 DB	'invalid decoded scanline length', 00H
$SG101848 DB	'outofmem', 00H
	ORG $+7
$SG167385 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167386 DB	'LoadModel', 00H
	ORG $+6
$SG167387 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG101852 DB	'corrupt', 00H
$SG101854 DB	'corrupt', 00H
$SG167395 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167396 DB	'LoadModel', 00H
	ORG $+6
$SG167397 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167415 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, '(', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, 'd', 00H, '>', 00H, '?', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG101879 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG167416 DB	'LoadModel', 00H
	ORG $+6
$SG167417 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167426 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, '(', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, 'N', 00H, 's', 00H, '>', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '<', 00H, 'N', 00H, 'i'
	DB	00H, '>', 00H, '?', 00H, ')', 00H, 00H, 00H
$SG167427 DB	'LoadModel', 00H
	ORG $+6
$SG167428 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167436 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167437 DB	'Invalid Statement, (Did You Mean <Ka> or <Kd> or <Ks> or'
	DB	' <Ke>?)', 00H
$SG167438 DB	'! "Invalid Statement, (Did You Mean <Ka> or <Kd> or <Ks>'
	DB	' or <Ke>?)"', 00H
	ORG $+4
$SG167439 DB	'LoadModel', 00H
	ORG $+6
$SG167440 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167441 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167445 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167442 DB	'Invalid Statement, Did You Mean (<Ns> or <Ni> or <Ka> or'
	DB	' <Kd> or <Ks> or <Ke>?)', 00H
$SG167443 DB	'! "Invalid Statement, Did You Mean (<Ns> or <Ni> or <Ka>'
	DB	' or <Kd> or <Ks> or <Ke>?)"', 00H
	ORG $+4
$SG167444 DB	'LoadModel', 00H
	ORG $+6
$SG167458 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167459 DB	'Invalid Statement, Did You Mean <map_d> or <map_Kd> or <'
	DB	'map_Ke> or <map_Bump>?', 00H
	ORG $+1
$SG167460 DB	'! "Invalid Statement, Did You Mean <map_d> or <map_Kd> o'
	DB	'r <map_Ke> or <map_Bump>?"', 00H
	ORG $+5
$SG167461 DB	'LoadModel', 00H
	ORG $+6
$SG167462 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167465 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167469 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167466 DB	'Invalid Statement, Did You Mean <newmtl> or <illum> or <'
	DB	'map_d> or <map_Kd> or <map_Ke> or <map_Bump>?', 00H
	ORG $+2
$SG167477 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167467 DB	'! "Invalid Statement, Did You Mean <newmtl> or <illum> o'
	DB	'r <map_d> or <map_Kd> or <map_Ke> or <map_Bump>?"', 00H
	ORG $+6
$SG167468 DB	'LoadModel', 00H
	ORG $+6
$SG167475 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167476 DB	'LoadModel', 00H
	ORG $+2
$SG101948 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+7
$SG167483 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167484 DB	'LoadModel', 00H
	ORG $+6
$SG167485 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167493 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167494 DB	'LoadModel', 00H
	ORG $+6
$SG167495 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167501 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167502 DB	'LoadModel', 00H
	ORG $+6
$SG167503 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167509 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167510 DB	'LoadModel', 00H
	ORG $+6
$SG167511 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167517 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167518 DB	'LoadModel', 00H
	ORG $+6
$SG167519 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG101987 DB	'too large', 00H
	ORG $+6
$SG101989 DB	'too large', 00H
	ORG $+6
$SG167526 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167527 DB	'LoadModel', 00H
	ORG $+6
$SG167528 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG101992 DB	'too large', 00H
	ORG $+6
$SG167530 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 's', 00H
	DB	'''', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG101994 DB	'outofmem', 00H
	ORG $+7
$SG167531 DB	'LoadModel', 00H
	ORG $+6
$SG167532 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167536 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 'f', 00H
	DB	'''', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG167537 DB	'LoadModel', 00H
	ORG $+6
$SG167538 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167550 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG167551 DB	'LoadModel', 00H
	ORG $+6
$SG167552 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG167569 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167570 DB	'Area.Min.X <= Texture->DimenX', 00H
	ORG $+2
$SG167571 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG167572 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG167573 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167574 DB	'Area.Min.Y <= Texture->DimenY', 00H
	ORG $+2
$SG167575 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG167576 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG167577 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167578 DB	'Area.Max.X >= 0', 00H
$SG167579 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG167580 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG167581 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167582 DB	'Area.Max.Y >= 0', 00H
$SG167583 DB	'ZenRectifyTextureArea', 00H
	ORG $+2
$SG102047 DB	'max value > 65535', 00H
	ORG $+6
$SG167584 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG102069 DB	'unknown image type', 00H
	ORG $+5
$SG167606 DB	'ZenCoreCreateSoftTexture', 00H
	ORG $+7
$SG167607 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG93880 DB	'OS/2', 00H
	ORG $+3
$SG102086 DB	'can''t fopen', 00H
	ORG $+4
$SG167633 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG167634 DB	'internal error', 00H
	ORG $+1
$SG167635 DB	'!"internal error"', 00H
	ORG $+6
$SG167636 DB	'ZenCoreSoftLoadTextureFromFile', 00H
	ORG $+1
$SG167637 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG102103 DB	'can''t fopen', 00H
$SG168617 DB	'Font', 00H
	ORG $+7
$SG94105 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94106 DB	'z', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG167841 DB	'assets\fonts\%s.%s', 00H
	ORG $+5
$SG167842 DB	'C:\Windows\Fonts\%s.%s', 00H
	ORG $+1
$SG94134 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94135 DB	'y', 00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H
	DB	'1', 00H, 00H, 00H
$SG94136 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG102329 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG94137 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG94145 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+4
$SG94144 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94148 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94149 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG94152 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94153 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG94156 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94157 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
$SG103133 DB	'IHDR', 00H
	ORG $+7
$SG94158 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94159 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, 00H, 00H
	ORG $+6
$SG94164 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94165 DB	'x', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+6
$SG167898 DB	'ASCII-EX', 00H
	ORG $+7
$SG94175 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94176 DB	't', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG94177 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94178 DB	'b', 00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG167967 DB	'ZenCoreCreateGlyphFontAtlas', 00H
	ORG $+4
$SG167968 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG94258 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG102451 DB	'11 4 22 44 44 22 444444', 00H
$SG94259 DB	'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG102452 DB	'11 4 22 44 44 22 444444 4444 4 444 444 444 444', 00H
	ORG $+1
$SG167997 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG94265 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94266 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o'
	DB	00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, 00H, 00H
$SG167995 DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, ',', 00H, ' ', 00H, 'N', 00H, 'o', 00H, 't', 00H, ' ', 00H
	DB	'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG167996 DB	'ZenCoreLoadGlyphFontCaller', 00H
	ORG $+5
$SG168002 DB	'ZenCoreLoadGlyphFontCaller', 00H
	ORG $+5
$SG168003 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG94275 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG168004 DB	'ZenCoreLoadGlyphFontCaller', 00H
	ORG $+5
$SG94276 DB	'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG168005 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG94278 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94279 DB	'd', 00H, 'y', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG94280 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94281 DB	'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG94284 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94285 DB	'f', 00H, 'a', 00H, 'b', 00H, 's', 00H, '(', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, ')', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG94287 DB	's', 00H, 'y', 00H, '1', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'y', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, '-', 00H, '0', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG94286 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG168043 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG168044 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168045 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG168046 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168048 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG168049 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168050 DB	'ZenCoreMaterializeGlyphFont', 00H
	ORG $+4
$SG168051 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG102518 DB	'111 221 2222 11', 00H
$SG102519 DB	'111 221 2222 11', 00H
$SG168074 DB	'ZenCoreSerializeGlyphFont', 00H
	ORG $+6
$SG168075 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG94361 DB	'z', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, '_', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H
	DB	00H, 00H
$SG94354 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94355 DB	'z', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+6
$SG94360 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG102577 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG102578 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	'+', 00H, '1', 00H, '2', 00H, '8', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, '5', 00H, '5', 00H, 00H, 00H
	ORG $+4
$SG168117 DB	'ZenCoreLoadMetalFontFromFile', 00H
	ORG $+3
$SG168118 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168119 DB	'ZenCoreLoadMetalFontFromFile', 00H
	ORG $+3
$SG168120 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG102588 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG102589 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '8'
	DB	00H, 00H, 00H
	ORG $+4
$SG168180 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG168181 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168182 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG168183 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168184 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG168185 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168187 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG168188 DB	'CurX <= MaxPackX', 00H
	ORG $+7
$SG168189 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG168190 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168191 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG168192 DB	'CurY <= MaxPackY', 00H
	ORG $+7
$SG168193 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG168194 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168196 DB	'%', 00H, 'i', 00H, ' ', 00H, '.', 00H, '.', 00H, '.', 00H
	DB	00H, 00H
	ORG $+2
$SG168197 DB	'ZenCoreGenerateGlyphFontExtended', 00H
	ORG $+7
$SG168198 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG102663 DB	'EXPOSURE=          1.0000000000000', 0aH, 0aH, '-Y %d +X'
	DB	' %d', 0aH, 00H
	ORG $+7
$SG102662 DB	'#?RADIANCE', 0aH, '# Written by stb_image_write.h', 0aH, 'F'
	DB	'ORMAT=32-bit_rle_rgbe', 0aH, 00H
	ORG $+6
$SG168199 DB	'SomeFile', 00H
	ORG $+7
$SG168200 DB	'%s_debug_atlas.png', 00H
	ORG $+5
$SG102705 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG168253 DB	'W:\cpp\void\detroit', 00H
	ORG $+4
$SG168254 DB	'UnifrakturCook\UnifrakturCook-Bold', 00H
	ORG $+5
$SG168255 DB	'ZenConductSDFFontTest', 00H
	ORG $+2
$SG168256 DB	'W:\cpp\void\detroit\brazen-glyphics.c', 00H
	ORG $+2
$SG168257 DB	'W:\cpp\void\detroit\assets', 00H
	ORG $+5
$SG168258 DB	'images\the_savage.jpg', 00H
	ORG $+2
$SG168259 DB	'test\circle.png', 00H
$SG168260 DB	'test\sdf_circle.png', 00H
	ORG $+4
$SG168261 DB	'test\blurred.png', 00H
	ORG $+7
$SG168262 DB	'1234111 jjyyggiiill110099 QQ11jjiiiyy``.. [%d]', 00H
	ORG $+1
$SG168263 DB	'test\sdf_test.png', 00H
	ORG $+6
$SG168335 DB	'D3D11_FILL_MODE', 00H
$SG168336 DB	'D3D11_FILL_WIREFRAME', 00H
	ORG $+3
$SG168337 DB	'D3D11_FILL_SOLID', 00H
	ORG $+7
$SG168338 DB	'D3D11_CULL_MODE', 00H
$SG168339 DB	'D3D11_CULL_NONE', 00H
$SG168340 DB	'D3D11_CULL_FRONT', 00H
	ORG $+7
$SG168341 DB	'D3D11_CULL_BACK', 00H
$SG168342 DB	'D3D11_RASTERIZER_DESC', 00H
	ORG $+2
$SG168343 DB	'FillMode', 00H
	ORG $+7
$SG168344 DB	'CullMode', 00H
	ORG $+7
$SG168345 DB	'FrontCounterClockwise', 00H
	ORG $+2
$SG168346 DB	'DepthBias', 00H
	ORG $+6
$SG168347 DB	'DepthBiasClamp', 00H
	ORG $+1
$SG168348 DB	'SlopeScaledDepthBias', 00H
	ORG $+3
$SG168349 DB	'DepthClipEnable', 00H
$SG168350 DB	'ScissorEnable', 00H
	ORG $+2
$SG168351 DB	'MultisampleEnable', 00H
	ORG $+6
$SG168352 DB	'AntialiasedLineEnable', 00H
	ORG $+2
$SG168359 DB	'ZenAlloc', 00H
	ORG $+7
$SG168360 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG168365 DB	'ZenFrameAlloc', 00H
	ORG $+2
$SG168366 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG168396 DB	'ZenInternalDebugInternalFiberFun', 00H
	ORG $+7
$SG168397 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG168409 DB	'ZenInternalDebugExternalFiberFun', 00H
	ORG $+7
$SG168410 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG168428 DB	'user32.dll', 00H
	ORG $+5
$SG168431 DB	'SetProcessDPIAwarenessContext', 00H
	ORG $+2
$SG168433 DB	'SetProcessDPIAware', 00H
	ORG $+5
$SG168434 DB	'W:\cpp\void\detroit', 00H
	ORG $+4
$SG168440 DB	'shaders', 00H
$SG168441 DB	'UnifrakturCook\UnifrakturCook-Bold', 00H
	ORG $+5
$SG168442 DB	'ZenInitialize', 00H
	ORG $+2
$SG168443 DB	'W:\cpp\void\detroit\brazen-global.h', 00H
	ORG $+4
$SG102950 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG102951 DB	'd', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, '7', 00H, '6', 00H, '7', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '2', 00H, '5', 00H, '8', 00H, 00H
	DB	00H
	ORG $+4
$SG94782 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94783 DB	'x', 00H, '+', 00H, 'g', 00H, 'w', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'w', 00H, 00H, 00H
$SG103134 DB	'IHDR', 00H
	ORG $+7
$SG94784 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94785 DB	'y', 00H, '+', 00H, 'g', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG168594 DB	'ColorPicker', 00H
	ORG $+4
$SG168620 DB	'Font Shader', 00H
	ORG $+4
$SG168623 DB	'Font Shader', 00H
	ORG $+4
$SG168631 DB	'Text Tester', 00H
	ORG $+4
$SG168636 DB	'Min: %f', 00H
$SG168637 DB	'Off: %f', 00H
$SG168638 DB	'Max: %f', 00H
$SG168639 DB	'Font Atlas', 00H
	ORG $+5
$SG168641 DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 00H
	ORG $+5
$SG94913 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG168642 DB	'abcdefghijklmnopqrstuvwxyz', 00H
	ORG $+5
$SG94914 DB	'h', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+4
$SG168643 DB	'0123456789', 00H
	ORG $+5
$SG168644 DB	'`~!@#$%^&*()-_=+[]{}|\;:"<>,.?/', 00H
$SG94916 DB	'v', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+4
$SG94915 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG168654 DB	'z', 00H, 'e', 00H, 'n', 00H, 00H, 00H
$SG103135 DB	'IHDR', 00H
	ORG $+3
$SG103136 DB	'IHDR', 00H
	ORG $+3
$SG103137 DB	'IDAT', 00H
	ORG $+3
$SG103138 DB	'IDAT', 00H
	ORG $+3
$SG103139 DB	'IDAT', 00H
	ORG $+3
$SG103140 DB	'IDAT', 00H
	ORG $+3
$SG103141 DB	'IEND', 00H
	ORG $+3
$SG103142 DB	'IEND', 00H
	ORG $+3
$SG103143 DB	'IEND', 00H
	ORG $+3
$SG103144 DB	'IEND', 00H
	ORG $+3
$SG103146 DB	'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '*', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG103145 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG78579 DB	'[WARNING] write console failed, are you using visual stu'
	DB	'dio?', 0aH, 00H
	ORG $+2
$SG78586 DB	'[WARNING] write console failed, are you using visual stu'
	DB	'dio?', 0aH, 00H
	ORG $+2
$SG78612 DB	'%s, %i %s() [%i] %s', 00H
	ORG $+4
$SG94971 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG94972 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
?stbiw__jpg_ZigZag@@3QBEB DB 00H			; stbiw__jpg_ZigZag
	DB	01H
	DB	05H
	DB	06H
	DB	0eH
	DB	0fH
	DB	01bH
	DB	01cH
	DB	02H
	DB	04H
	DB	07H
	DB	0dH
	DB	010H
	DB	01aH
	DB	01dH
	DB	02aH
	DB	03H
	DB	08H
	DB	0cH
	DB	011H
	DB	019H
	DB	01eH
	DB	029H
	DB	02bH
	DB	09H
	DB	0bH
	DB	012H
	DB	018H
	DB	01fH
	DB	028H
	DB	02cH
	DB	035H
	DB	0aH
	DB	013H
	DB	017H
	DB	020H
	DB	027H
	DB	02dH
	DB	034H
	DB	036H
	DB	014H
	DB	016H
	DB	021H
	DB	026H
	DB	02eH
	DB	033H
	DB	037H
	DB	03cH
	DB	015H
	DB	022H
	DB	025H
	DB	02fH
	DB	032H
	DB	038H
	DB	03bH
	DB	03dH
	DB	023H
	DB	024H
	DB	030H
	DB	031H
	DB	039H
	DB	03aH
	DB	03eH
	DB	03fH
$SG78613 DB	'Break Handler Invoked', 00H
	ORG $+2
$SG78614 DB	'B', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, ' ', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'o', 00H, 'k', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG78615 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
	ORG $+4
$SG78617 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
	ORG $+4
$SG78618 DB	'Choose Your Poison', 00H
	ORG $+5
$SG78619 DB	'Would You Like To Exit (Abort), Debug (Retry) or Continu'
	DB	'e (Ignore)?', 00H
	ORG $+4
$SG86812 DB	'Failed while writing %s', 0aH, 00H
	ORG $+7
$SG78635 DB	'GetErrorCode', 00H
	ORG $+3
$SG95022 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H
	DB	'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG78660 DB	'GetErrorStringA', 00H
$SG78669 DB	'no error message, or message too large', 00H
	ORG $+1
$SG78634 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 'E', 00H
	DB	'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H, 'L'
	DB	00H, 'A', 00H, 'S', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'E', 00H
	DB	'N', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'L', 00H, '''', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '''', 00H, 'E', 00H, 'R', 00H
	DB	'R', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'A'
	DB	00H, 'S', 00H, 'S', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'T', 00H
	DB	'W', 00H, 'O', 00H, 'R', 00H, 'K', 00H, '''', 00H, 00H, 00H
	ORG $+6
$SG78636 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG95021 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG78659 DB	'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'w', 00H, 'h', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'e'
	DB	00H, 'c', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+4
$SG78661 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78666 DB	'n', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG78667 DB	'GetErrorStringA', 00H
$SG78668 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78683 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+4
$SG78684 DB	'CreateInheritablePipe', 00H
	ORG $+2
$SG78685 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78726 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'p'
	DB	00H, 'i', 00H, 'p', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG78727 DB	'CreateProcessWithArguments', 00H
	ORG $+5
$SG78728 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78729 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG78730 DB	'CreateProcessWithArguments', 00H
	ORG $+5
$SG78731 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78765 DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '?', 00H, 00H, 00H
	ORG $+2
$SG78766 DB	'FlushProcessOutputAndErrorToStandardOut', 00H
$SG78767 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78769 DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '?', 00H, 00H, 00H
	ORG $+2
$SG78770 DB	'FlushProcessOutputAndErrorToStandardOut', 00H
$SG78771 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG86997 DB	'stmpXXXXXX', 00H
	ORG $+5
$SG78812 DB	'user32.dll', 00H
	ORG $+5
$SG78813 DB	'SetProcessDPIAwarenessContext', 00H
	ORG $+2
$SG78814 DB	'SetProcessDPIAware', 00H
	ORG $+5
$SG87018 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG78870 DB	'(', 00H, '.', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG78871 DB	'LoadFileData', 00H
	ORG $+3
$SG78872 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78876 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78877 DB	'LoadFileData', 00H
	ORG $+3
$SG78878 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78880 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78881 DB	'LoadFileData', 00H
	ORG $+3
$SG78882 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78897 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78898 DB	'WriteFileData', 00H
	ORG $+2
$SG78899 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG78900 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG78901 DB	'WriteFileData', 00H
	ORG $+2
$SG78902 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG87214 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87215 DB	'(', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'u', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, ' ', 00H, 'v', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG79029 DB	'w', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 's', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 's'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ' ', 00H, 's', 00H, 'h'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'g', 00H
	DB	'o', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+6
$SG79030 DB	'FileNameMerge', 00H
	ORG $+2
$SG79031 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG103610 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'a'
	DB	00H, 00H, 00H
	ORG $+2
$SG103611 DB	'ZenArenaInit', 00H
	ORG $+3
$SG103612 DB	'W:\cpp\void\detroit\brazen-memory.h', 00H
	ORG $+4
$SG103622 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG103624 DB	'! "error"', 00H
	ORG $+6
$SG103625 DB	'ZenArenaAlloc', 00H
	ORG $+2
$SG103626 DB	'W:\cpp\void\detroit\brazen-memory.h', 00H
	ORG $+4
?COLOR_GRAY@@3Tf32x4@@B DD 03f000000r		; 0.5	; COLOR_GRAY
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
?COLOR_BLUE@@3Tf32x4@@B DD 000000000r		; 0	; COLOR_BLUE
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
?COLOR_GREEN@@3Tf32x4@@B DD 000000000r		; 0	; COLOR_GREEN
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
?COLOR_RED@@3Tf32x4@@B DD 03f800000r		; 1	; COLOR_RED
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
$SG79098 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ',', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG79099 DB	'CreateCompleteFilePath', 00H
	ORG $+1
$SG79100 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG95508 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG95509 DB	'i', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG87357 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79165 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'P', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG87358 DB	'!', 00H, '(', 00H, '(', 00H, 'o', 00H, 'p', 00H, 't', 00H
	DB	's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'o', 00H, 'p', 00H, 't', 00H, 's', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG79166 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG79167 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79170 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG79171 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG79172 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG87366 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79174 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG87367 DB	'!', 00H, '(', 00H, '(', 00H, 'o', 00H, 'p', 00H, 't', 00H
	DB	's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'o', 00H, 'p', 00H, 't', 00H, 's', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG79175 DB	'Old->File.IsFile == New->File.IsFile', 00H
	ORG $+3
$SG87368 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79176 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG79179 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'M', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG87369 DB	'!', 00H, '(', 00H, '(', 00H, 'o', 00H, 'p', 00H, 't', 00H
	DB	's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'o', 00H, 'p', 00H, 't', 00H, 's', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG79177 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79180 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG79181 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79183 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'd', 00H, 'i'
	DB	00H, 't', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG79184 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG79185 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79187 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG79188 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG79189 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG103800 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, 'X', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'l', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG103801 DB	'X < Texture->DimenX', 00H
	ORG $+4
$SG103802 DB	'ZenGetTextureMemoryAt', 00H
	ORG $+2
$SG95610 DB	'name', 00H
	ORG $+3
$SG103803 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG103805 DB	'Y < Texture->DimenY', 00H
	ORG $+4
$SG103804 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, 'Y', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'l', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG103806 DB	'ZenGetTextureMemoryAt', 00H
	ORG $+2
$SG103807 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG87445 DB	'utf8', 00H
	ORG $+3
$SG87447 DB	'%s to convert ''%S'' to %s!', 0aH, 00H
	ORG $+5
$SG103838 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG87454 DB	'%s%s', 00H
	ORG $+3
$SG103839 DB	'Destination->DimenX >= Source->DimenX', 00H
	ORG $+2
$SG103840 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG87456 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG103841 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG87457 DB	'!', 00H, '(', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, 's', 00H, ')', 00H, ')', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 's', 00H, ')', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG103842 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG103843 DB	'Destination->DimenY >= Source->DimenY', 00H
	ORG $+2
$SG103844 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG103845 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG103846 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG103847 DB	'Destination->Stride >= Source->Stride', 00H
	ORG $+2
$SG103848 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG103849 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG103850 DB	'M', 00H, 'i', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG103851 DB	'Destination->Memory != NULL', 00H
	ORG $+4
$SG103852 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG103853 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG103854 DB	'M', 00H, 'i', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
	ORG $+4
$SG103855 DB	'Source->Memory != NULL', 00H
	ORG $+1
$SG95663 DB	'head', 00H
	ORG $+3
$SG103856 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG103857 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG95665 DB	'name', 00H
	ORG $+3
$SG103858 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'b', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG103859 DB	'RowSize <= Source->Stride', 00H
	ORG $+6
$SG103860 DB	'ZenCopyTexture', 00H
	ORG $+1
$SG103861 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG103882 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG103883 DB	'Texture->Format == PIXEL_FORMAT_RGB8', 00H
	ORG $+3
$SG103884 DB	'ZenDrawQuadOnTexture', 00H
	ORG $+3
$SG103885 DB	'W:\cpp\void\detroit\brazen-texture.h', 00H
	ORG $+3
$SG87501 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87502 DB	'!', 00H, '(', 00H, '(', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	'a', 00H, 'r', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '('
	DB	00H, '(', 00H, '(', 00H, 's', 00H, 'o', 00H, 'f', 00H, 'a', 00H
	DB	'r', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG79340 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79341 DB	'Queue->ConsumerTail <= Queue->Consumer', 00H
	ORG $+1
$SG79342 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG79343 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79344 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79345 DB	'Queue->ProducerTail <= Queue->Producer', 00H
	ORG $+1
$SG79346 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG79347 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79351 DB	'N', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'E', 00H, 'n', 00H
	DB	'o', 00H, 'u', 00H, 'g', 00H, 'h', 00H, ' ', 00H, 'T', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, 's', 00H, ',', 00H, ' ', 00H, 'A', 00H
	DB	's', 00H, 'k', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'F', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, 'T', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'A', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'O', 00H, 'n', 00H
	DB	'l', 00H, 'y', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']'
	DB	00H, 00H, 00H
	ORG $+6
$SG79352 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG79353 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79372 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79373 DB	'Queue->ConsumerTail <= Queue->Consumer', 00H
	ORG $+1
$SG79374 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG79375 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79376 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG79377 DB	'Queue->ProducerTail <= Queue->Producer', 00H
	ORG $+1
$SG79378 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG79379 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79383 DB	'T', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'M', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, ' ', 00H, 'T', 00H, 'a', 00H, 's', 00H, 'k'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG79384 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG79385 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79409 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG79410 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG79411 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79412 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'a', 00H
	DB	's', 00H, 'k', 00H, '.', 00H, 'W', 00H, 'o', 00H, 'r', 00H, 'k'
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG79413 DB	'FileTask.Work != NULL', 00H
	ORG $+2
$SG79414 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG79415 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79419 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'L', 00H, 'e', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG79420 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG79421 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG87633 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87652 DB	't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+4
$SG87634 DB	'!', 00H, '(', 00H, '(', 00H, 'd', 00H, 'e', 00H, 's', 00H
	DB	'c', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H
	DB	'(', 00H, '(', 00H, 'd', 00H, 'e', 00H, 's', 00H, 'c', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H
	DB	')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H
	DB	's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG87642 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79472 DB	'FileQueueBegin', 00H
	ORG $+1
$SG79500 DB	'ARCHIVE', 00H
$SG87643 DB	'!', 00H, '(', 00H, '(', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '('
	DB	00H, '(', 00H, '(', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	's', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG87644 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87645 DB	'!', 00H, 'd', 00H, 'e', 00H, 's', 00H, 'c', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, 'd', 00H, 'e', 00H, 's', 00H, 'c', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG87648 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87651 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87653 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79473 DB	'W:\cpp\void\dr/plat-win32.c', 00H
$SG87900 DB	'hkcu', 00H
	ORG $+7
$SG87654 DB	'!', 00H, '(', 00H, '(', 00H, 'd', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 's'
	DB	00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '(', 00H
	DB	'(', 00H, 'd', 00H, '-', 00H, '>', 00H, 's', 00H, 'u', 00H, 'b'
	DB	00H, 'd', 00H, 'i', 00H, 'r', 00H, 's', 00H, ')', 00H, ')', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_'
	DB	00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 00H, 00H
	ORG $+2
$SG79471 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'Q', 00H, 'u', 00H
	DB	'e', 00H, 'u', 00H, 'e', 00H, '.', 00H, 'C', 00H, 'o', 00H, 'r'
	DB	00H, 'e', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H, '.', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, 00H, 00H
$SG79501 DB	'COMPRESSED', 00H
	ORG $+5
$SG79503 DB	'DIRECTORY', 00H
	ORG $+6
$SG79504 DB	'ENCRYPTED', 00H
	ORG $+6
$SG79506 DB	'INTEGRITY_STREAM', 00H
	ORG $+7
$SG79508 DB	'NOT_CONTENT_INDEXED', 00H
	ORG $+4
$SG79509 DB	'NO_SCRUB_DATA', 00H
	ORG $+2
$SG79510 DB	'OFFLINE', 00H
$SG79511 DB	'READONLY', 00H
	ORG $+7
$SG79512 DB	'RECALL_ON_DATA_ACCESS', 00H
	ORG $+2
$SG79513 DB	'RECALL_ON_OPEN', 00H
	ORG $+1
$SG79514 DB	'REPARSE_POINT', 00H
	ORG $+2
$SG79515 DB	'SPARSE_FILE', 00H
	ORG $+4
$SG79517 DB	'TEMPORARY', 00H
	ORG $+6
$SG79518 DB	'VIRTUAL', 00H
$SG79520 DB	'UNPINNED', 00H
	ORG $+7
$SG79534 DB	'INVALID_FILE_ATTRIBUTES', 00H
$SG79545 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, ')', 00H, 00H, 00H
$SG79547 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'R', 00H, 'E', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79549 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79551 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '3', 00H, ')', 00H, 00H, 00H
$SG79553 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '5', 00H, ')', 00H, 00H, 00H
$SG79555 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'T', 00H
	DB	'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG79557 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'C', 00H, 'U', 00H, 'S', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '7', 00H, ')', 00H
	DB	00H, 00H
$SG79559 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'I', 00H, 'L', 00H
	DB	'L', 00H, 'F', 00H, 'O', 00H, 'C', 00H, 'U', 00H, 'S', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79561 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'A', 00H
	DB	'B', 00H, 'L', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79563 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'R', 00H, 'E', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'W', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, 'B', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79565 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79567 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79569 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 'L', 00H, 'E', 00H, 'N'
	DB	00H, 'G', 00H, 'T', 00H, 'H', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '0', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79571 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79573 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H
	DB	'S', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '1', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79575 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'S', 00H, 'E'
	DB	00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79577 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'O', 00H, 'P', 00H, 'E', 00H, 'N', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79579 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'D', 00H
	DB	'S', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79581 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'I', 00H
	DB	'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
$SG79583 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'R', 00H, 'A', 00H
	DB	'S', 00H, 'E', 00H, 'B', 00H, 'K', 00H, 'G', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79585 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '0', 00H, '1', 00H, '5', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79587 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'H', 00H, 'O', 00H
	DB	'W', 00H, 'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79589 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'I', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG79591 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'M', 00H, 'O', 00H, 'D', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '1', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79593 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'T', 00H
	DB	'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, 'A', 00H, 'P'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'1', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79595 DB	'W', 00H, 'M', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H
	DB	'T', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79597 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG87790 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87791 DB	'e', 00H, 'n', 00H, 'd', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '1'
	DB	00H, '2', 00H, '8', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, '+', 00H, '9', 00H, 00H, 00H
	ORG $+6
$SG79599 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 'L', 00H, 'M', 00H, 'O', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG87792 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG87793 DB	'e', 00H, 'n', 00H, 'd', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, '6'
	DB	00H, '4', 00H, '-', 00H, '9', 00H, 00H, 00H
	ORG $+4
$SG79601 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'C', 00H, 'U', 00H, 'R', 00H, 'S', 00H, 'O', 00H, 'R', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG87795 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79603 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79605 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'I', 00H
	DB	'L', 00H, 'D', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG87796 DB	'j', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	'2', 00H, '8', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, '_', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	'r', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'j', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+2
$SG79607 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'U', 00H, 'E', 00H, 'S', 00H, 'Y', 00H, 'N', 00H, 'C', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79609 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'M', 00H, 'I', 00H, 'N', 00H, 'M', 00H, 'A', 00H, 'X', 00H, 'I'
	DB	00H, 'N', 00H, 'F', 00H, 'O', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79611 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '6', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79613 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'C', 00H, 'O', 00H
	DB	'N', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'S', 00H, 'E', 00H, 'B'
	DB	00H, 'K', 00H, 'G', 00H, 'N', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '0', 00H, '2', 00H, '7', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79615 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'X', 00H
	DB	'T', 00H, 'D', 00H, 'L', 00H, 'G', 00H, 'C', 00H, 'T', 00H, 'L'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79617 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'P', 00H, 'O', 00H
	DB	'O', 00H, 'L', 00H, 'E', 00H, 'R', 00H, 'S', 00H, 'T', 00H, 'A'
	DB	00H, 'T', 00H, 'U', 00H, 'S', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79619 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'W', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, 'B', 00H, ')', 00H
	DB	00H, 00H
$SG79621 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'A', 00H
	DB	'S', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'2', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79623 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79625 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'K', 00H, 'E', 00H
	DB	'Y', 00H, 'T', 00H, 'O', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79627 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'R', 00H, 'T', 00H, 'O', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79629 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '3', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79631 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '3', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79633 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'O', 00H, 'T', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79635 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'O', 00H, 'T', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79637 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'G', 00H, 'I'
	DB	00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '3', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79639 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79641 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'O', 00H, 'B', 00H, 'J', 00H, 'E', 00H, 'C', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, 'D', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG87835 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79643 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'P', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG87836 DB	'i', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+2
$SG79645 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'M', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG87839 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79647 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4'
	DB	00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG87840 DB	'b', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '6', 00H, '4', 00H, 00H, 00H
$SG79649 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H, '7'
	DB	00H, ')', 00H, 00H, 00H
$SG79651 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H
	DB	'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '4', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79653 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'P', 00H
	DB	'Y', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'A', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H, 'A', 00H, ')', 00H
	DB	00H, 00H
$SG79655 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 'L', 00H, 'J', 00H, 'O', 00H, 'U', 00H, 'R'
	DB	00H, 'N', 00H, 'A', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '4', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79657 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'I', 00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '4', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79659 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, 'L', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'R', 00H
	DB	'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG79661 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, 'L', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79663 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'C', 00H, 'A', 00H
	DB	'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '5', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79665 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'E', 00H, 'L', 00H
	DB	'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5'
	DB	00H, '3', 00H, ')', 00H, 00H, 00H
$SG79673 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'Y', 00H
	DB	'L', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '7', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG87857 DB	'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST'
	DB	'UVWXYZ%$', 00H
	ORG $+7
$SG87859 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79667 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'S', 00H, 'E', 00H
	DB	'R', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'5', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG87860 DB	'i', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '2', 00H
	DB	'0', 00H, 00H, 00H
$SG87861 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79669 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'I', 00H, 'F', 00H, 'Y', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '5', 00H, '5', 00H, ')', 00H, 00H, 00H
$SG87862 DB	'n', 00H, 'u', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '2'
	DB	00H, '0', 00H, '*', 00H, '8', 00H, ' ', 00H, '-', 00H, ' ', 00H
	DB	'2', 00H, '6', 00H, '*', 00H, '6', 00H, 00H, 00H
$SG79671 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N'
	DB	00H, 'U', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'7', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79675 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'Y', 00H
	DB	'L', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '7', 00H, 'D', 00H, ')', 00H, 00H, 00H
$SG79677 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'S', 00H
	DB	'P', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '7', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79679 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '7', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79681 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79683 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'C', 00H
	DB	'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '1', 00H, ')', 00H
	DB	00H, 00H
$SG79685 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'D', 00H
	DB	'E', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79687 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'C', 00H
	DB	'A', 00H, 'L', 00H, 'C', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79689 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'H', 00H
	DB	'I', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '4', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79691 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'A', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79693 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'A', 00H
	DB	'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79695 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'D', 00H, 'L', 00H, 'G', 00H, 'C', 00H, 'O', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'7', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79697 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'N', 00H
	DB	'C', 00H, 'P', 00H, 'A', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79699 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79701 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79703 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79705 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '3', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79707 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79709 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79711 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '6', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG87905 DB	'hklm', 00H
	ORG $+3
$SG79713 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79715 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79717 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '9', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79719 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79721 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79723 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79725 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I'
	DB	00H, 'C', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, 'F', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79727 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, 'F', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79729 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'N', 00H, '_', 00H, 'O', 00H, 'R'
	DB	00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'F', 00H, 'I', 00H
	DB	'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '1', 00H, '0', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79731 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79733 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '0'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
$SG79735 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'A', 00H
	DB	'D', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG79737 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'N'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H
	DB	'4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79739 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H, '5', 00H, ')', 00H
	DB	00H, 00H
$SG79741 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79743 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'D', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'0', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79745 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '_', 00H, 'O', 00H, 'R'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79747 DB	'U', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'O', 00H, 'D', 00H
	DB	'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H
	DB	'F', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79749 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79759 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'M', 00H, 'A', 00H, 'N', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79751 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'R', 00H, 'T', 00H, 'C'
	DB	00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H
	DB	'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
$SG79753 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'C', 00H, 'O', 00H, 'M'
	DB	00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H, 'T', 00H, 'I', 00H
	DB	'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79755 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '_', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '0', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79757 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'D', 00H, 'I', 00H, 'A', 00H, 'L', 00H, 'O', 00H, 'G'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79761 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79763 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '1', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79765 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79767 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79769 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG79771 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'P', 00H, 'O'
	DB	00H, 'P', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '1', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79773 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79775 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'O', 00H, 'T'
	DB	00H, 'I', 00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79777 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79779 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '0', 00H, ')', 00H
	DB	00H, 00H
$SG79781 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'I', 00H, 'D', 00H, 'L', 00H, 'E', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '1', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79783 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'R', 00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O'
	DB	00H, 'N', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79785 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'G', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG79787 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'G', 00H, 'E', 00H, 'T', 00H, 'O', 00H, 'B', 00H, 'J'
	DB	00H, 'E', 00H, 'C', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79789 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'I', 00H
	DB	'N', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H, 'P', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '5', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79791 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N'
	DB	00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'2', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79793 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79795 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'P', 00H, 'D', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79797 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T', 00H, 'A'
	DB	00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'1', 00H, '2', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG79799 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'S'
	DB	00H, 'G', 00H, 'B', 00H, 'O', 00H, 'X', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '1', 00H, '3', 00H, '2', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79801 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'E', 00H, 'D'
	DB	00H, 'I', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, ')', 00H, 00H, 00H
$SG79803 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'L', 00H, 'I'
	DB	00H, 'S', 00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '1', 00H, '3', 00H, '4', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79805 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'B', 00H, 'T'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79807 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'D', 00H, 'L'
	DB	00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79809 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 'C'
	DB	00H, 'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'B', 00H, 'A', 00H
	DB	'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '3'
	DB	00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79811 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'C', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '1', 00H, '3', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79813 DB	'M', 00H, 'N', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, 'E', 00H, '1', 00H, ')', 00H
	DB	00H, 00H
$SG79815 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E', 00H, '_'
	DB	00H, 'O', 00H, 'R', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'F', 00H, 'I', 00H, 'R', 00H, 'S', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79817 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79819 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79821 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG88014 DB	'sTbCoNfIg!', 00H, 00H, 00H
	ORG $+3
$SG79823 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79825 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '5', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79827 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79829 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79831 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79833 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79835 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E', 00H, 'L'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	'A', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79837 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79839 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, 'C', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79841 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79845 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, 'N', 00H, 'T', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I'
	DB	00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG79847 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'O', 00H, 'O', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '1', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79843 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'H', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E'
	DB	00H, 'L', 00H, '_', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG79849 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'O'
	DB	00H, 'O', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG79851 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'X', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '1', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG79853 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '1', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79855 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'P', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '1', 00H, '5', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79857 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '1', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG88050 DB	'Software\SilverSpaceship\stb', 00H
	ORG $+3
$SG79859 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H
	DB	'E', 00H, 'R', 00H, 'B', 00H, 'R', 00H, 'O', 00H, 'A', 00H, 'D'
	DB	00H, 'C', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '1', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG88053 DB	'config_dir', 00H
	ORG $+5
$SG79861 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'I', 00H, 'C', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG88054 DB	'%s/%s.cfg', 00H
	ORG $+6
$SG79863 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG88057 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79865 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'D', 00H, 'E', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG88058 DB	'!', 00H, '(', 00H, '(', 00H, 'z', 00H, '-', 00H, '>', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, ')', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H, 'z', 00H, '-', 00H
	DB	'>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG88059 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79867 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG88060 DB	's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'z', 00H
	DB	'-', 00H, '>', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'd', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+4
$SG79869 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'R', 00H, 'E', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'R', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79871 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'N', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '2', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79873 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'M', 00H, 'A', 00H, 'X', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'Z'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79875 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'T', 00H, 'I', 00H, 'L', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '2', 00H, '2', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79877 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'C', 00H, 'A', 00H, 'S', 00H, 'C', 00H, 'A', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'7', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79879 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'A', 00H, 'R', 00H, 'R'
	DB	00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '2', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG104457 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H
$SG79881 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'G', 00H, 'E', 00H, 'T', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '2', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG104458 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG104459 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79883 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'S', 00H, 'E', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '3', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79885 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'M'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '3', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79887 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'I', 00H
	DB	'T', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'M', 00H, 'O'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG79889 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'O', 00H
	DB	'P', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H, 'S', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '3', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79891 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'R', 00H, 'E', 00H, 'F', 00H, 'R', 00H, 'E', 00H, 'S', 00H, 'H'
	DB	00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '3', 00H, '4', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG104468 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG104469 DB	'~Event->Counter & 0x01', 00H
	ORG $+1
$SG79893 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '2'
	DB	00H, '3', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG104470 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG104471 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79895 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'I', 00H, 'N', 00H, 'R', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '2', 00H, '3', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79897 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'O', 00H, 'U', 00H, 'T', 00H
	DB	'O', 00H, 'F', 00H, 'R', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '2', 00H, '3', 00H, 'A', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG79899 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'U', 00H
	DB	'C', 00H, 'H', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2'
	DB	00H, '4', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104477 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG79901 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U'
	DB	00H, 'P', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG104478 DB	'Event->Counter & 0x01', 00H
	ORG $+2
$SG104479 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG79903 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104480 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
$SG88393 DB	'%s%s', 00H
	ORG $+7
$SG104481 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, ',', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'u'
	DB	00H, 'l', 00H, 'd', 00H, ' ', 00H, 'h', 00H, 'a', 00H, 'v', 00H
	DB	'e', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'e', 00H, 'n', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'c', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H
	ORG $+6
$SG79905 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'4', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG104482 DB	'Window->ClickFocused', 00H
	ORG $+3
$SG104483 DB	'ZenHandleNativeWindowMessage', 00H
	ORG $+3
$SG79907 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U', 00H, 'P', 00H, 'D'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104484 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG96293 DB	'unknown image type', 00H
	ORG $+5
$SG79909 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'4', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79911 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, '7', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79913 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, 'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG79915 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'L', 00H, 'E', 00H, 'A'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG79917 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'T'
	DB	00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'B', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79921 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'U', 00H
	DB	'C', 00H, 'H', 00H, 'H', 00H, 'I', 00H, 'T', 00H, 'T', 00H, 'E'
	DB	00H, 'S', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79919 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'C', 00H, 'A', 00H, 'P'
	DB	00H, 'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'C', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG88114 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79923 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'H', 00H, 'E'
	DB	00H, 'E', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG104501 DB	'ZenNativeWindowCallback', 00H
$SG88115 DB	'!', 00H, '(', 00H, '(', 00H, 'z', 00H, '-', 00H, '>', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, ')', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H, 'z', 00H, '-', 00H
	DB	'>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG104500 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG79925 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'H', 00H, 'W', 00H, 'H'
	DB	00H, 'E', 00H, 'E', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104502 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG96311 DB	'outofmem', 00H
	ORG $+7
$SG79927 DB	'D', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'H', 00H, 'I', 00H, 'T'
	DB	00H, 'T', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '5', 00H, '0', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79929 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'T', 00H, 'O', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '5', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG79931 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'A', 00H, 'W', 00H, 'A', 00H
	DB	'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '5'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79935 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '8', 00H, '1', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG79933 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'R', 00H, 'E', 00H, 'L', 00H
	DB	'E', 00H, 'A', 00H, 'S', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '5', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG79937 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG88131 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG79939 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O'
	DB	00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79945 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG88132 DB	'!', 00H, 'z', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, 'z', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+6
$SG79941 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S'
	DB	00H, 'I', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'F', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '8', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79943 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H
	DB	'5', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG96330 DB	'outofmem', 00H
	ORG $+7
$SG79947 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79949 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'9', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79951 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '9', 00H, '1', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG79953 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'H', 00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'A', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79955 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'A', 00H, 'V', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'A', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG79957 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'H', 00H, 'O', 00H, 'V'
	DB	00H, 'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'A', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG79959 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'A'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'A', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG79961 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'T', 00H, 'S', 00H
	DB	'S', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'B'
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79963 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'A', 00H, 'B', 00H
	DB	'L', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'R'
	DB	00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'c', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG79965 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'A', 00H, 'B', 00H
	DB	'L', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'd', 00H, 'f', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG104542 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, '[', 00H, 'x', 00H, ']', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG104543 DB	'Location.Max.X != 0', 00H
	ORG $+4
$SG79967 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG104544 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG104545 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79969 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '_', 00H, 'B', 00H, 'E', 00H, 'F', 00H, 'O', 00H, 'R', 00H
	DB	'E', 00H, 'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG104546 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, '[', 00H, 'y', 00H, ']', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG104547 DB	'Location.Max.Y != 0', 00H
	ORG $+4
$SG79971 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '_', 00H, 'A', 00H, 'F', 00H, 'T', 00H, 'E', 00H, 'R', 00H
	DB	'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG104548 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG104549 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79973 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'D', 00H, 'P', 00H, 'I', 00H, 'S', 00H, 'C', 00H, 'A', 00H, 'L'
	DB	00H, 'E', 00H, 'D', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H, '4'
	DB	00H, ')', 00H, 00H, 00H
$SG104550 DB	'Z', 00H, 'e', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, ':', 00H, ':', 00H, '%', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG79975 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'U', 00H, 'T', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG79977 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'P', 00H
	DB	'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
$SG79979 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'S', 00H
	DB	'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '0', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104556 DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'F', 00H, 'i', 00H, 'b', 00H, 'e', 00H, 'r', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H
	DB	'E', 00H, 'D', 00H, ']', 00H, 00H, 00H
	ORG $+2
$SG104557 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG79981 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'E', 00H
	DB	'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '0', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104558 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79983 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'D', 00H
	DB	'O', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '4', 00H, ')', 00H, 00H, 00H
$SG104560 DB	'S', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, 'A', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E'
	DB	00H, 'D', 00H, ']', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+6
$SG104561 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG79985 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'R', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '0', 00H, '5', 00H, ')', 00H, 00H, 00H
$SG104562 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79987 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'L', 00H, 'L', 00H, 'F'
	DB	00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, 'S', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '6'
	DB	00H, ')', 00H, 00H, 00H
$SG104564 DB	'G', 00H, 'e', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, 'A', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, '[', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E'
	DB	00H, 'D', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG104565 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG79989 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '7'
	DB	00H, ')', 00H, 00H, 00H
$SG104566 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG104567 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG79991 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'W', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B', 00H, 'O'
	DB	00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG104568 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG104569 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79993 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B'
	DB	00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '0', 00H, '9', 00H, ')', 00H, 00H
	DB	00H
$SG88509 DB	'.bin', 00H
	ORG $+7
$SG104570 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG104571 DB	'ZenCreateNativeWindow', 00H
	ORG $+2
$SG79995 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'A'
	DB	00H, ')', 00H, 00H, 00H
$SG104572 DB	'W:\cpp\void\detroit\brazen-window.h', 00H
	ORG $+4
$SG79997 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B', 00H, 'O'
	DB	00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG96382 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG79999 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'S', 00H, 'K', 00H
	DB	'C', 00H, 'B', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A'
	DB	00H, 'T', 00H, 'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'C', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG96383 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG80001 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, 'C', 00H, 'B', 00H, 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'I', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80003 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'E'
	DB	00H, ')', 00H, 00H, 00H
$SG80005 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'N', 00H, 'E', 00H, 'W', 00H, 'P', 00H, 'A'
	DB	00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'F', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80007 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'I', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1'
	DB	00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80009 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '1', 00H, '1', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG80011 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'O', 00H, 'T', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '3', 00H, '1', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80013 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '1', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80015 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'E', 00H, 'N'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'1', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80017 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'P', 00H, 'P', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H
	DB	'9', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG96402 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG80019 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'H', 00H, 'E', 00H
	DB	'M', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG80021 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'I', 00H
	DB	'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H, 'U'
	DB	00H, 'P', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG96403 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG80023 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I'
	DB	00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'E', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG80037 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H
	DB	'D', 00H, 'H', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'F', 00H, 'I'
	DB	00H, 'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '5', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80025 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'N', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'E'
	DB	00H, 'R', 00H, 'I', 00H, 'N', 00H, 'G', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'F', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG80039 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H
	DB	'D', 00H, 'H', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'L', 00H, 'A'
	DB	00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '5', 00H, 'F', 00H, ')', 00H, 00H, 00H
$SG80041 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'F', 00H, 'X', 00H
	DB	'F', 00H, 'I', 00H, 'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '6', 00H, '0', 00H, ')', 00H
	DB	00H, 00H
$SG80027 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'I', 00H, 'Z'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'C', 00H
	DB	'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '2', 00H, '0', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG80029 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'M'
	DB	00H, 'A', 00H, 'X', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 'D', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'2', 00H, '1', 00H, ')', 00H, 00H, 00H
$SG80043 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'F', 00H, 'X', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '3', 00H, '7', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80031 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'C', 00H, 'O'
	DB	00H, 'N', 00H, 'I', 00H, 'C', 00H, 'T', 00H, 'H', 00H, 'U', 00H
	DB	'M', 00H, 'B', 00H, 'N', 00H, 'A', 00H, 'I', 00H, 'L', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '2', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
$SG88517 DB	'rHKLM', 00H
	ORG $+6
$SG80033 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'C', 00H, 'O'
	DB	00H, 'N', 00H, 'I', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'V', 00H
	DB	'E', 00H, 'P', 00H, 'R', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'E'
	DB	00H, 'W', 00H, 'B', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'A', 00H
	DB	'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '2'
	DB	00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80035 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'I', 00H, 'T', 00H, 'L', 00H, 'E', 00H, 'B', 00H, 'A'
	DB	00H, 'R', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'E', 00H
	DB	'X', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '3'
	DB	00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG88236 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG80045 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'R', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'8', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80050 DB	'U', 00H, 'N', 00H, 'K', 00H, 'N', 00H, 'O', 00H, 'W', 00H
	DB	'N', 00H, 00H, 00H
$SG80076 DB	'STATIC_ALLOCATOR', 00H
	ORG $+7
$SG88237 DB	'!', 00H, '(', 00H, '(', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i'
	DB	00H, 'r', 00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'(', 00H, '(', 00H, '(', 00H, 'a', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H
	DB	'r', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG80047 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'L', 00H, 'A', 00H, 'S', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '8', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80049 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'P', 00H, 'P', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '8', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG96435 DB	'can''t fopen', 00H
	ORG $+4
$SG88254 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG80077 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG88255 DB	'!', 00H, '(', 00H, '(', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '-', 00H, '>', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_'
	DB	00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, '(', 00H, '(', 00H, '(', 00H, 'a', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'v', 00H, 'e', 00H, '-', 00H, '>', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+6
$SG80075 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, 'o', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'g', 00H, 00H
	DB	00H
	ORG $+6
$SG80081 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80082 DB	'not supported for static allocations', 00H
	ORG $+3
$SG80083 DB	'!"not supported for static allocations"', 00H
$SG80084 DB	'STATIC_ALLOCATOR', 00H
	ORG $+7
$SG80085 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG96472 DB	'can''t fopen', 00H
	ORG $+4
$SG80101 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG80124 DB	'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80126 DB	'D', 00H, 'E', 00H, 'B', 00H, 'U', 00H, 'G', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80128 DB	'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80130 DB	'W', 00H, 'A', 00H, 'R', 00H, 'N', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, ':', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80132 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80134 DB	'F', 00H, 'A', 00H, 'T', 00H, 'A', 00H, 'L', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80136 DB	'V', 00H, 'E', 00H, 'R', 00H, 'B', 00H, 'O', 00H, 'S', 00H
	DB	'E', 00H, ':', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80138 DB	'P', 00H, 'E', 00H, 'D', 00H, 'A', 00H, 'N', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, ':', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG80139 DB	'I', 00H, 'N', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 'I', 00H
	DB	'D', 00H, '_', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'A', 00H
	DB	'G', 00H, 'E', 00H, 00H, 00H
	ORG $+4
$SG96540 DB	'unknown image type', 00H
	ORG $+5
$SG80158 DB	'K', 00H, 'L', 00H, 'A', 00H, 'R', 00H, 'K', 00H, '_', 00H
	DB	'A', 00H, 'P', 00H, 'P', 00H, ' ', 00H, '%', 00H, 's', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	'(', 00H, ')', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']'
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG80172 DB	'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, ' ', 00H, '['
	DB	00H, '%', 00H, 's', 00H, ']', 00H, ' ', 00H, '%', 00H, 'f', 00H
	DB	'(', 00H, 'm', 00H, 's', 00H, ')', 00H, 00H, 00H
$SG88374 DB	'%', 00H, 's', 00H, '*', 00H, 00H, 00H
$SG88375 DB	'%', 00H, 's', 00H, '/', 00H, '*', 00H, 00H, 00H
	ORG $+6
$SG96573 DB	'can''t fopen', 00H
	ORG $+4
$SG88457 DB	'Changed: %s - %08x:%08x', 0aH, 00H
	ORG $+7
$SG88458 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88459 DB	'!', 00H, '(', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'c', 00H, 'a', 00H, 'n', 00H, ')', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, '(', 00H, '(', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'c', 00H, 'a', 00H, 'n', 00H, ')', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG88483 DB	'No cache file', 0aH, 00H
	ORG $+1
$SG88485 DB	'                                                        '
	DB	'                      ', 0dH, 00H
$SG88507 DB	'dirtree_', 00H
	ORG $+7
$SG88508 DB	'0123456789abcdef', 00H
	ORG $+7
$SG88515 DB	'c:/bindata', 00H
	ORG $+5
$SG88516 DB	'Software\SilverSpaceship\stb', 00H
	ORG $+3
$SG88519 DB	'dirtree', 00H
$SG96756 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG96757 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG96759 DB	'outofmem', 00H
	ORG $+7
$SG96775 DB	'unsupported', 00H
	ORG $+12
$SG96773 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG88623 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG88624 DB	'Internal error: couldn''t grow malloc wrapper table', 00H
	ORG $+5
$SG88626 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88627 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'h', 00H
	DB	'a', 00H, 's', 00H, 'h', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, '(', 00H, 'o', 00H, 'l', 00H, 'd', 00H, '[', 00H, 'i', 00H
	DB	']', 00H, '.', 00H, 'p', 00H, ')', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG88629 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88630 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'h', 00H
	DB	'a', 00H, 's', 00H, 'h', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, '(', 00H, 'o', 00H, 'l', 00H, 'd', 00H, '[', 00H, 'i', 00H
	DB	']', 00H, '.', 00H, 'p', 00H, ')', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG88650 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88651 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, '[', 00H, 'n', 00H, ']', 00H
	DB	'.', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, '[', 00H, 'n', 00H, ']'
	DB	00H, '.', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'S', 00H, 'T', 00H, 'B', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'L'
	DB	00H, 00H, 00H
	ORG $+4
$SG96849 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG88723 DB	'Attempted to realloc unknown block %p at %s:%d', 00H
	ORG $+1
$SG105114 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG96848 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG96851 DB	'outofmem', 00H
	ORG $+7
$SG96867 DB	'unsupported', 00H
	ORG $+4
$SG88681 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG105115 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG96865 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG88677 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88683 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG105118 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG88682 DB	'Attempted to free %d-byte block %p at %s:%d previously f'
	DB	'reed/realloced at %s:%d', 00H
$SG88684 DB	'Attempted to free unknown block %p at %s:%d', 00H
	ORG $+4
$SG88695 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG88696 DB	'Internal error: pointer %p was allocated, but hash searc'
	DB	'h failed', 00H
	ORG $+7
$SG88698 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG88699 DB	'Checked %d-byte block %p previously freed/realloced at %'
	DB	's:%d', 00H
	ORG $+3
$SG88700 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG88701 DB	'Checked unknown block %p', 00H
	ORG $+7
$SG96894 DB	'outofmem', 00H
	ORG $+7
$SG88716 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88720 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG105119 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG88721 DB	'Attempted to realloc %d-byte block %p at %s:%d previousl'
	DB	'y freed/realloced at %s:%d', 00H
	ORG $+5
$SG88722 DB	'W:\cpp\void\vendor\stb\stb.h', 00H
	ORG $+3
$SG105122 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG105113 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG105117 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' '
	DB	00H, 'p', 00H, 'r', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
$SG96926 DB	'outofmem', 00H
	ORG $+7
$SG105121 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H
	DB	'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'i'
	DB	00H, 'm', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+6
$SG105123 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105126 DB	'ZenImposeImmediatePrimitiveCurtail', 00H
	ORG $+5
$SG105125 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H
	DB	'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'i'
	DB	00H, 'm', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG105127 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG88752 DB	'%p %7d - %4d %s', 0aH, 00H
	ORG $+7
$SG105139 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG105140 DB	'Slice->Pos.Count >= Slice->Tex.Count', 00H
	ORG $+3
$SG105141 DB	'ZenImmediatePrimitiveAlloc', 00H
	ORG $+5
$SG105142 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105143 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG105144 DB	'Slice->Pos.Count >= Slice->Col.Count', 00H
	ORG $+3
$SG105145 DB	'ZenImmediatePrimitiveAlloc', 00H
	ORG $+5
$SG105146 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105164 DB	'ZenImmediateModePush', 00H
	ORG $+3
$SG105163 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'd', 00H
	DB	'r', 00H, 'a', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'm', 00H, 'e', 00H
	DB	'd', 00H, 'i', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'm'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
$SG105165 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105235 DB	'(Source.Min.X) <= Texture->DimenX', 00H
	ORG $+6
$SG105234 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, ',', 00H, ' '
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'X', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'D', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 'X', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG105236 DB	'ZenImmediateSkinnedRect', 00H
$SG105237 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105238 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, ',', 00H, ' '
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'Y', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, '.', 00H, 'D', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 'Y', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, 'i', 00H, 00H, 00H
	ORG $+6
$SG105239 DB	'(Source.Min.Y) <= Texture->DimenY', 00H
	ORG $+6
$SG105240 DB	'ZenImmediateSkinnedRect', 00H
$SG105241 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105242 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG105243 DB	'(Source.Min.X + Source.Max.X) <= Texture->DimenX', 00H
	ORG $+7
$SG105244 DB	'ZenImmediateSkinnedRect', 00H
$SG105245 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105246 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG105247 DB	'(Source.Min.Y + Source.Max.Y) <= Texture->DimenY', 00H
	ORG $+7
$SG105248 DB	'ZenImmediateSkinnedRect', 00H
$SG105249 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG97072 DB	'bad code lengths', 00H
	ORG $+7
$SG88882 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88883 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'i', 00H, 's', 00H
	DB	'_', 00H, 'p', 00H, 'o', 00H, 'w', 00H, '2', 00H, '(', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG97176 DB	'bad huffman code', 00H
	ORG $+7
?stbi__bmask@@3QBIB DD 00H				; stbi__bmask
	DD	01H
	DD	03H
	DD	07H
	DD	0fH
	DD	01fH
	DD	03fH
	DD	07fH
	DD	0ffH
	DD	01ffH
	DD	03ffH
	DD	07ffH
	DD	0fffH
	DD	01fffH
	DD	03fffH
	DD	07fffH
	DD	0ffffH
	ORG $+4
$SG97181 DB	'bad huffman code', 00H
	ORG $+7
$SG97127 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG97197 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG97128 DB	'(', 00H, '(', 00H, '(', 00H, 'j', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '(', 00H, '3', 00H, '2', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, '_', 00H, '_', 00H, 'b', 00H, 'm', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, '[', 00H, 'h', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']'
	DB	00H, ']', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '[', 00H, 'c', 00H, ']', 00H, 00H, 00H
	ORG $+4
$SG97203 DB	'can''t merge dc and ac', 00H
	ORG $+2
?stbi__jbias@@3QBHB DD 00H				; stbi__jbias
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0fffffff9H
	DD	0fffffff1H
	DD	0ffffffe1H
	DD	0ffffffc1H
	DD	0ffffff81H
	DD	0ffffff01H
	DD	0fffffe01H
	DD	0fffffc01H
	DD	0fffff801H
	DD	0fffff001H
	DD	0ffffe001H
	DD	0ffffc001H
	DD	0ffff8001H
$SG88938 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
?stbi__jpeg_dezigzag@@3QBEB DB 00H			; stbi__jpeg_dezigzag
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	ORG $+1
$SG88976 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88977 DB	'(', 00H, '3', 00H, ' ', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H
	DB	'_', 00H, 'p', 00H, 's', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG88978 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG88979 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'p', 00H, 's', 00H
	DB	'_', 00H, 'f', 00H, 'a', 00H, 's', 00H, 't', 00H, 'l', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, '(', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG97240 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG89053 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89054 DB	'!', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'p', 00H
	DB	's', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'd', 00H, '('
	DB	00H, 'p', 00H, 's', 00H, ',', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG97248 DB	'bad huffman code', 00H
	ORG $+7
$SG89056 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89061 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H, '_'
	DB	00H, 'D', 00H, 'E', 00H, 'L', 00H, 00H, 00H
	ORG $+6
$SG89057 DB	'(', 00H, '3', 00H, ' ', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H
	DB	'_', 00H, 'p', 00H, 's', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG89058 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89059 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'p', 00H, 's', 00H
	DB	'_', 00H, 'f', 00H, 'a', 00H, 's', 00H, 't', 00H, 'l', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, '(', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG89060 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG97261 DB	'bad huffman code', 00H
	ORG $+7
$SG97268 DB	'bad huffman code', 00H
	ORG $+7
$SG89139 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89140 DB	's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'p', 00H, 's', 00H
	DB	'_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'd', 00H, '(', 00H, 'p'
	DB	00H, 's', 00H, ',', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG89141 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89159 DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H
	ORG $+4
$SG89205 DB	'p', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG89142 DB	'(', 00H, '3', 00H, ' ', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'B', 00H
	DB	'_', 00H, 'p', 00H, 's', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG89158 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89168 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89169 DB	'j', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'h', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+4
$SG89204 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
?STANDARD_BASIS_X@@3Tf32x3@@B DD 03f800000r	; 1	; STANDARD_BASIS_X
	DD	000000000r			; 0
	DD	000000000r			; 0
	ORG $+4
?STANDARD_BASIS_Y@@3Tf32x3@@B DD 000000000r	; 0	; STANDARD_BASIS_Y
	DD	03f800000r			; 1
	DD	000000000r			; 0
	ORG $+4
?STANDARD_BASIS_Z@@3Tf32x3@@B DD 000000000r	; 0	; STANDARD_BASIS_Z
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
$SG105912 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG105913 DB	'PixelPosition.X >= 0', 00H
	ORG $+3
$SG105914 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG105915 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105916 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG105917 DB	'PixelPosition.X < Texture->DimenX', 00H
	ORG $+6
$SG105918 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG105919 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105920 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG105921 DB	'PixelPosition.Y >= 0', 00H
	ORG $+3
$SG105922 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG105923 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG105924 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG105925 DB	'PixelPosition.Y < Texture->DimenY', 00H
	ORG $+6
$SG105926 DB	'ZenGluiDrawableTextureView', 00H
	ORG $+5
$SG105927 DB	'W:\cpp\void\detroit\brazen-immediate.h', 00H
	ORG $+1
$SG89554 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89555 DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'h', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG89562 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89563 DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'h', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG89571 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89572 DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'h', 00H, 'a', 00H
	DB	's', 00H, 'h', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG89603 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89707 DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'd', 00H, 'u', 00H
	DB	'p', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+4
$SG89604 DB	'!', 00H, '(', 00H, '(', 00H, 's', 00H, 'd', 00H, '-', 00H
	DB	'>', 00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, '_', 00H, 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '[', 00H, 'z', 00H
	DB	']', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'h', 00H
	DB	'a', 00H, 's', 00H, 'h', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, '[', 00H, 'z', 00H, ']', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG89706 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89711 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89712 DB	'!', 00H, '(', 00H, '(', 00H, 's', 00H, 'd', 00H, '-', 00H
	DB	'>', 00H, 'd', 00H, 'u', 00H, 'p', 00H, 'e', 00H, 's', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H
	DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'd', 00H, 'u', 00H, 'p'
	DB	00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG89717 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89718 DB	'!', 00H, '(', 00H, '(', 00H, 's', 00H, 'd', 00H, '-', 00H
	DB	'>', 00H, 'd', 00H, 'u', 00H, 'p', 00H, 'e', 00H, 's', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H
	DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'd', 00H, 'u', 00H, 'p'
	DB	00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG89722 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89723 DB	'!', 00H, '(', 00H, '(', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, '(', 00H, '(', 00H, '(', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG89724 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89725 DB	'!', 00H, '(', 00H, '(', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ')', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'a', 00H, 'r', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, '(', 00H, '(', 00H, '(', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG89727 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG89728 DB	'!', 00H, '(', 00H, '(', 00H, 's', 00H, 'd', 00H, '-', 00H
	DB	'>', 00H, 'd', 00H, 'u', 00H, 'p', 00H, 'e', 00H, 's', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'h'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '(', 00H, '(', 00H
	DB	's', 00H, 'd', 00H, '-', 00H, '>', 00H, 'd', 00H, 'u', 00H, 'p'
	DB	00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG163470 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG163471 DB	'Archive->InfoSize == sizeof(* External)', 00H
$SG163472 DB	'ZenAccessionTexture', 00H
	ORG $+4
$SG163473 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG163479 DB	'ZenAccessionTexture', 00H
	ORG $+4
$SG163478 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	's', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG163480 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG163491 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG163492 DB	'Archive->InfoSize == sizeof(* External)', 00H
$SG163493 DB	'ZenAccessionGlyphic', 00H
	ORG $+4
$SG163494 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG163500 DB	'ZenAccessionGlyphic', 00H
	ORG $+4
$SG163499 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'g', 00H
	DB	'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 'i', 00H, 'c', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	's', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG163501 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG163512 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H, 'i'
	DB	00H, 'v', 00H, 'e', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i', 00H, 00H
	DB	00H
	ORG $+4
$SG163513 DB	'Archive->InfoSize == sizeof(* External)', 00H
$SG163514 DB	'ZenAccessionWindow', 00H
	ORG $+5
$SG163515 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG163520 DB	'm', 00H, 'a', 00H, 'x', 00H, 'i', 00H, 'm', 00H, 'u', 00H
	DB	'm', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 's', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG163521 DB	'ZenAccessionWindow', 00H
	ORG $+5
$SG163522 DB	'W:\cpp\void\detroit\detroit-d3d11.h', 00H
	ORG $+4
$SG89854 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90050 DB	's', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '*', 00H, 'e', 00H, 'x'
	DB	00H, 'p', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'''', 00H, '*', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG81875 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG89855 DB	'!', 00H, '(', 00H, '(', 00H, 'l', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'g'
	DB	00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG90049 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90061 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90062 DB	's', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'c', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+2
$SG90063 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG90064 DB	'*', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'r', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '''', 00H, '*', 00H, '''', 00H, 00H
	DB	00H
	ORG $+6
$SG81876 DB	'invalid aspect ratio!', 00H
	ORG $+2
$SG81877 DB	'AspectRatio != 0 && "invalid aspect ratio!"', 00H
	ORG $+4
$SG81878 DB	'MatrixP', 00H
$SG81879 DB	'W:\cpp\void\detroit\brazen-math.h', 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnwprintf_l
PUBLIC	_vsnwprintf
PUBLIC	_vswprintf_c_l
PUBLIC	swprintf
PUBLIC	_vfprintf_l
PUBLIC	vfprintf
PUBLIC	fprintf
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	_vsprintf_s_l
PUBLIC	vsprintf_s
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	sprintf
PUBLIC	sprintf_s
PUBLIC	?strchr@@YAPEADQEADH@Z				; strchr
PUBLIC	?strrchr@@YAPEADQEADH@Z				; strrchr
PUBLIC	?strstr@@YAPEADQEADQEBD@Z			; strstr
PUBLIC	??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z	; _TRACE_BLOCK::_TRACE_BLOCK
PUBLIC	??1_TRACE_BLOCK@@QEAA@XZ			; _TRACE_BLOCK::~_TRACE_BLOCK
PUBLIC	??Bstr32@@QEAAPEADXZ				; str32::operator char *
PUBLIC	??Bstr32@@QEAA_JXZ				; str32::operator __int64
PUBLIC	??Bstr32@@QEAA_KXZ				; str32::operator unsigned __int64
PUBLIC	??Bstr32@@QEAANXZ				; str32::operator double
PUBLIC	??Bstr32@@QEAAMXZ				; str32::operator float
PUBLIC	??Bstr32@@QEAAIXZ				; str32::operator unsigned int
PUBLIC	??Bstr32@@QEAAHXZ				; str32::operator int
PUBLIC	??7str32@@QEAAHXZ				; str32::operator!
PUBLIC	WinMain
PUBLIC	stb_wrapper_malloc
PUBLIC	stb_wrapper_free
PUBLIC	stb_wrapper_realloc
PUBLIC	stb_wrapper_listall
PUBLIC	stb_wrapper_dump
PUBLIC	stb_wrapper_allocsize
PUBLIC	stb_wrapper_check
PUBLIC	stbprint
PUBLIC	stb_sprintf
PUBLIC	stb_mprintf
PUBLIC	stb_snprintf
PUBLIC	stb_vsnprintf
PUBLIC	stb_from_utf8
PUBLIC	stb_to_utf8
PUBLIC	stb__from_utf8
PUBLIC	stb__from_utf8_alt
PUBLIC	stb__to_utf8
PUBLIC	stb_fatal
PUBLIC	stb_
PUBLIC	stb_append_to_file
PUBLIC	stb_log
PUBLIC	stb_log_fileline
PUBLIC	stb_log_name
PUBLIC	stb_swap
PUBLIC	stb_copy
PUBLIC	stb_pointer_array_free
PUBLIC	stb_array_block_alloc
PUBLIC	stb__record_fileline
PUBLIC	stb__temp
PUBLIC	stb_tempfree
PUBLIC	stb_newell_normal
PUBLIC	stb_box_face_vertex_axis_side
PUBLIC	stb_linear_controller
PUBLIC	stb_float_eq
PUBLIC	stb_is_prime
PUBLIC	stb_power_of_two_nearest_prime
PUBLIC	stb_smoothstep
PUBLIC	stb_cubic_bezier_1d
PUBLIC	stb_linear_remap
PUBLIC	?stb_quadratic_controller@@YAMMMMMMPEAM@Z	; stb_quadratic_controller
PUBLIC	stb_bitcount
PUBLIC	stb_bitreverse8
PUBLIC	stb_bitreverse
PUBLIC	stb_is_pow2
PUBLIC	stb_log2_ceil
PUBLIC	stb_log2_floor
PUBLIC	stb_lowbit8
PUBLIC	stb_highbit8
PUBLIC	stb_intcmp
PUBLIC	stb_intcmprev
PUBLIC	stb_qsort_strcmp
PUBLIC	stb_qsort_stricmp
PUBLIC	stb_floatcmp
PUBLIC	stb_doublecmp
PUBLIC	?stb__intcmp@@YAHPEBX0@Z			; stb__intcmp
PUBLIC	?stb__intcmprev@@YAHPEBX0@Z			; stb__intcmprev
PUBLIC	?stb__ucharcmp@@YAHPEBX0@Z			; stb__ucharcmp
PUBLIC	?stb__floatcmp@@YAHPEBX0@Z			; stb__floatcmp
PUBLIC	?stb__doublecmp@@YAHPEBX0@Z			; stb__doublecmp
PUBLIC	?stb__qsort_strcmp@@YAHPEBX0@Z			; stb__qsort_strcmp
PUBLIC	?stb__qsort_stricmp@@YAHPEBX0@Z			; stb__qsort_stricmp
PUBLIC	?stb__memcmp@@YAHPEBX0@Z			; stb__memcmp
PUBLIC	?stb_ucharcmp@@YAP6AHPEBX0@ZH@Z			; stb_ucharcmp
PUBLIC	?stb_memcmp@@YAP6AHPEBX0@ZHH@Z			; stb_memcmp
PUBLIC	stb_search_binary
PUBLIC	stb_search_open
PUBLIC	stb_probe
PUBLIC	stb_skipwhite
PUBLIC	stb_trimwhite
PUBLIC	stb_skipnewline
PUBLIC	stb_strncpy
PUBLIC	stb_substr
PUBLIC	stb_duplower
PUBLIC	stb_tolower
PUBLIC	stb_strchr2
PUBLIC	stb_strrchr2
PUBLIC	stb_strtok
PUBLIC	stb_strtok_keep
PUBLIC	stb_strtok_invert
PUBLIC	stb_dupreplace
PUBLIC	stb_replaceinplace
PUBLIC	stb_splitpath
PUBLIC	stb_splitpathdup
PUBLIC	stb_replacedir
PUBLIC	stb_replaceext
PUBLIC	stb_fixpath
PUBLIC	stb_shorten_path_readable
PUBLIC	stb_suffix
PUBLIC	stb_suffixi
PUBLIC	stb_prefix
PUBLIC	stb_strichr
PUBLIC	stb_stristr
PUBLIC	stb_prefix_count
PUBLIC	stb_plural
PUBLIC	stb_strscpy
PUBLIC	stb_tokens
PUBLIC	stb_tokens_nested
PUBLIC	stb_tokens_nested_empty
PUBLIC	stb_tokens_allowempty
PUBLIC	stb_tokens_stripwhite
PUBLIC	stb_tokens_quoted
PUBLIC	?stb__add_section@@YAXPEAD0_J1@Z		; stb__add_section
PUBLIC	stb_free
PUBLIC	stb_malloc_global
PUBLIC	stb_malloc
PUBLIC	stb_malloc_nofree
PUBLIC	stb_malloc_leaf
PUBLIC	stb_malloc_raw
PUBLIC	stb_realloc
PUBLIC	stb_reassign
PUBLIC	stb_malloc_validate
PUBLIC	?stb_malloc_string@@YAPEADPEAX_K@Z		; stb_malloc_string
PUBLIC	?stb_realloc_c@@YAPEAXPEAX0_K@Z			; stb_realloc_c
PUBLIC	stb_arr_malloc
PUBLIC	stb_arr_malloc_parent
PUBLIC	stb_arr_free_
PUBLIC	stb__arr_copy_
PUBLIC	stb__arr_setsize_
PUBLIC	stb__arr_setlen_
PUBLIC	stb__arr_addlen_
PUBLIC	stb__arr_deleten_
PUBLIC	stb__arr_insertn_
PUBLIC	stb_hash
PUBLIC	stb_hashptr
PUBLIC	stb_hashlen
PUBLIC	stb_rehash_improved
PUBLIC	stb_hash_fast
PUBLIC	stb_hash2
PUBLIC	stb_hash_number
PUBLIC	stb_ptrmap_init
PUBLIC	stb_ptrmap_memory_usage
PUBLIC	stb_ptrmap_create
PUBLIC	stb_ptrmap_copy
PUBLIC	stb_ptrmap_destroy
PUBLIC	stb_ptrmap_get_flag
PUBLIC	stb_ptrmap_get
PUBLIC	stb_ptrmap_set
PUBLIC	stb_ptrmap_add
PUBLIC	stb_ptrmap_update
PUBLIC	stb_ptrmap_remove
PUBLIC	stb_idict_init
PUBLIC	stb_idict_memory_usage
PUBLIC	stb_idict_create
PUBLIC	stb_idict_copy
PUBLIC	stb_idict_destroy
PUBLIC	stb_idict_get_flag
PUBLIC	stb_idict_set
PUBLIC	stb_idict_add
PUBLIC	stb_idict_update
PUBLIC	stb_idict_remove
PUBLIC	stb_ptrmap_delete
PUBLIC	stb_ptrmap_new
PUBLIC	stb_idict_new_size
PUBLIC	stb_idict_remove_all
PUBLIC	stb_uidict_reset
PUBLIC	?stb_ptrmap_getkey@@YAHPEAUstb__st_stb_ptrmap@@PEAXPEAPEAX@Z ; stb_ptrmap_getkey
PUBLIC	?stb_idict_getkey@@YAHPEAUstb__st_stb_idict@@HPEAH@Z ; stb_idict_getkey
PUBLIC	?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z ; stb_uidict_init
PUBLIC	?stb_uidict_memory_usage@@YAHPEAUstb__st_stb_uidict@@@Z ; stb_uidict_memory_usage
PUBLIC	?stb_uidict_create@@YAPEAUstb__st_stb_uidict@@XZ ; stb_uidict_create
PUBLIC	?stb_uidict_destroy@@YAXPEAUstb__st_stb_uidict@@@Z ; stb_uidict_destroy
PUBLIC	?stb_uidict_get_flag@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z ; stb_uidict_get_flag
PUBLIC	?stb_uidict_getkey@@YAHPEAUstb__st_stb_uidict@@HPEAH@Z ; stb_uidict_getkey
PUBLIC	?stb_uidict_set@@YAHPEAUstb__st_stb_uidict@@HI@Z ; stb_uidict_set
PUBLIC	?stb_uidict_add@@YAHPEAUstb__st_stb_uidict@@HI@Z ; stb_uidict_add
PUBLIC	?stb_uidict_update@@YAHPEAUstb__st_stb_uidict@@HI@Z ; stb_uidict_update
PUBLIC	?stb_uidict_remove@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z ; stb_uidict_remove
PUBLIC	?stb_uidict_copy@@YAPEAUstb__st_stb_uidict@@PEAU1@@Z ; stb_uidict_copy
PUBLIC	stb_sparse_ptr_matrix_new
PUBLIC	stb_sparse_ptr_matrix_free
PUBLIC	stb_sparse_ptr_matrix_get
PUBLIC	?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z ; stb__spmatrix_init
PUBLIC	?stb__spmatrix_memory_usage@@YAHPEAUstb__st_stb_spmatrix@@@Z ; stb__spmatrix_memory_usage
PUBLIC	?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ ; stb__spmatrix_create
PUBLIC	?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z ; stb__spmatrix_destroy
PUBLIC	?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z ; stb__spmatrix_get_flag
PUBLIC	?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z ; stb__spmatrix_get
PUBLIC	?stb__spmatrix_getkey@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAU2@@Z ; stb__spmatrix_getkey
PUBLIC	?stb__spmatrix_set@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ; stb__spmatrix_set
PUBLIC	?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ; stb__spmatrix_add
PUBLIC	?stb__spmatrix_update@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ; stb__spmatrix_update
PUBLIC	?stb__spmatrix_remove@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z ; stb__spmatrix_remove
PUBLIC	?stb__spmatrix_copy@@YAPEAUstb__st_stb_spmatrix@@PEAU1@@Z ; stb__spmatrix_copy
PUBLIC	stb_sdict_init
PUBLIC	stb_sdict_memory_usage
PUBLIC	stb_sdict_create
PUBLIC	stb_sdict_copy
PUBLIC	stb_sdict_destroy
PUBLIC	stb_sdict_get_flag
PUBLIC	stb_sdict_get
PUBLIC	stb_sdict_set
PUBLIC	stb_sdict_add
PUBLIC	stb_sdict_update
PUBLIC	stb_sdict_remove
PUBLIC	stb_sdict_new
PUBLIC	stb_sdict_delete
PUBLIC	stb_sdict_change
PUBLIC	stb_sdict_count
PUBLIC	stb_sdict_internal_limit
PUBLIC	stb_sdict_internal_key
PUBLIC	stb_sdict_internal_value
PUBLIC	?stb_sdict_getkey@@YAHPEAUstb__st_stb_sdict@@PEADPEAPEAD@Z ; stb_sdict_getkey
PUBLIC	?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z ; stb_sdictinternal_copy
PUBLIC	stb_fput_varlen64
PUBLIC	stb_fget_varlen64
PUBLIC	stb_size_varlen64
PUBLIC	stb_file
PUBLIC	stb_file_max
PUBLIC	stb_filelen
PUBLIC	stb_filewrite
PUBLIC	stb_filewritestr
PUBLIC	stb_stringfile
PUBLIC	stb_stringfile_trimmed
PUBLIC	stb_fgets
PUBLIC	stb_fgets_malloc
PUBLIC	stb_fexists
PUBLIC	stb_fcmp
PUBLIC	stb_feq
PUBLIC	stb_ftimestamp
PUBLIC	stb_fullpath
PUBLIC	stb_fopen
PUBLIC	stb_fclose
PUBLIC	stb_copyfile
PUBLIC	stb_fwrite32
PUBLIC	stb_fput_varlen
PUBLIC	stb_fput_varlenu
PUBLIC	stb_fget_varlen
PUBLIC	stb_fget_varlenu
PUBLIC	stb_fput_ranged
PUBLIC	stb_fget_ranged
PUBLIC	stb_size_varlen
PUBLIC	stb_size_varlenu
PUBLIC	stb_size_ranged
PUBLIC	?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z		; stb_fput_string
PUBLIC	?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z	; stb_fget_string
PUBLIC	?stb_strdup@@YAPEADPEADPEAX@Z			; stb_strdup
PUBLIC	?stb_strip_final_slash@@YAPEADPEAD@Z		; stb_strip_final_slash
PUBLIC	?stb_strip_final_slash_regardless@@YAPEADPEAD@Z	; stb_strip_final_slash_regardless
PUBLIC	stb_getopt_param
PUBLIC	stb_getopt
PUBLIC	stb_getopt_free
PUBLIC	stb_readdir_files
PUBLIC	stb_readdir_files_mask
PUBLIC	stb_readdir_subdirs
PUBLIC	stb_readdir_subdirs_mask
PUBLIC	stb_readdir_free
PUBLIC	stb_readdir_recursive
PUBLIC	stb_delete_directory_recursive
PUBLIC	stb_wildmatchi
PUBLIC	stb_dirtree2_from_files_relative
PUBLIC	stb_dirtree2_from_files
PUBLIC	stb_dir_is_prefix
PUBLIC	stb_adler32
PUBLIC	stb_crc32_block
PUBLIC	stb_crc32
PUBLIC	stb_sha1
PUBLIC	stb_sha1_file
PUBLIC	stb_sha1_readable
PUBLIC	stb_reg_open
PUBLIC	stb_reg_close
PUBLIC	stb_reg_read
PUBLIC	stb_reg_read_string
PUBLIC	stb_reg_write
PUBLIC	stb_reg_write_string
PUBLIC	stb_cfg_open
PUBLIC	stb_cfg_close
PUBLIC	stb_cfg_read
PUBLIC	stb_cfg_write
PUBLIC	stb_cfg_read_string
PUBLIC	stb_cfg_write_string
PUBLIC	stb_cfg_delete
PUBLIC	stb_cfg_set_directory
PUBLIC	?stb_dirtree_free@@YAXPEAUstb_dirtree@@@Z	; stb_dirtree_free
PUBLIC	?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z	; stb_dirtree_get
PUBLIC	?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z ; stb_dirtree_get_dir
PUBLIC	?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z ; stb_dirtree_get_with_file
PUBLIC	?stb_dirtree_db_add_dir@@YAXPEAUstb_dirtree@@PEAD_J@Z ; stb_dirtree_db_add_dir
PUBLIC	?stb_dirtree_db_add_file@@YAXPEAUstb_dirtree@@PEADH_J2@Z ; stb_dirtree_db_add_file
PUBLIC	?stb_dirtree_db_read@@YAXPEAUstb_dirtree@@PEAD1@Z ; stb_dirtree_db_read
PUBLIC	?stb_dirtree_db_write@@YAXPEAUstb_dirtree@@PEAD1@Z ; stb_dirtree_db_write
PUBLIC	stb_ps_find
PUBLIC	stb_ps_add
PUBLIC	stb_ps_remove
PUBLIC	stb_ps_remove_any
PUBLIC	stb_ps_delete
PUBLIC	stb_ps_count
PUBLIC	stb_ps_copy
PUBLIC	stb_ps_subset
PUBLIC	stb_ps_eq
PUBLIC	stb_ps_getlist
PUBLIC	stb_ps_writelist
PUBLIC	stb_ps_enum
PUBLIC	stb_ps_fastlist
PUBLIC	stb_srandLCG
PUBLIC	stb_randLCG
PUBLIC	stb_frandLCG
PUBLIC	stb_srand
PUBLIC	stb_rand
PUBLIC	stb_frand
PUBLIC	stb_shuffle
PUBLIC	stb_reverse
PUBLIC	stb_randLCG_explicit
PUBLIC	stb_dupe_free
PUBLIC	stb_dupe_create
PUBLIC	stb_dupe_add
PUBLIC	stb_dupe_finish
PUBLIC	stb_dupe_numsets
PUBLIC	stb_dupe_set
PUBLIC	stb_dupe_set_count
PUBLIC	stb_bitset_new
PUBLIC	stb_bitset_union
PUBLIC	stb_bitset_getlist
PUBLIC	stb_bitset_eq
PUBLIC	stb_bitset_disjoint
PUBLIC	stb_bitset_disjoint_0
PUBLIC	stb_bitset_subset
PUBLIC	stb_bitset_unioneq_changed
PUBLIC	stb_wordwrap
PUBLIC	stb_wordwrapalloc
PUBLIC	stb_wildmatch
PUBLIC	stb_wildfind
PUBLIC	stb_wildfindi
PUBLIC	stb_regex_matcher
PUBLIC	stb_matcher_match
PUBLIC	stb_matcher_find
PUBLIC	stb_matcher_free
PUBLIC	stb_lex_matcher
PUBLIC	stb_lex_item
PUBLIC	stb_lex_item_wild
PUBLIC	stb_lex
PUBLIC	?stb__wildmatch_raw2@@YAHPEAD0HH@Z		; stb__wildmatch_raw2
PUBLIC	?stb__wildmatch_raw@@YAHPEAD0HH@Z		; stb__wildmatch_raw
PUBLIC	?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z	; stb__get_dfa_node
PUBLIC	stb_decompress_length
PUBLIC	stb_decompress
PUBLIC	stb_compress
PUBLIC	stb_compress_window
PUBLIC	stb_compress_hashsize
PUBLIC	stb_compress_tofile
PUBLIC	stb_compress_intofile
PUBLIC	stb_decompress_fromfile
PUBLIC	stb_compress_stream_start
PUBLIC	stb_compress_stream_end
PUBLIC	stb_write
PUBLIC	stb_getc
PUBLIC	stb_putc
PUBLIC	stb_getdata
PUBLIC	stb_putdata
PUBLIC	stb_tell
PUBLIC	stb_size
PUBLIC	stb_backpatch
PUBLIC	?stb_close@@YAXPEAUstbfile@@@Z			; stb_close
PUBLIC	?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z	; stb_openf
PUBLIC	?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z	; stb_open_inbuffer
PUBLIC	?stb_open_inbuffer_free@@YAPEAUstbfile@@PEAXI@Z	; stb_open_inbuffer_free
PUBLIC	?stb_open@@YAPEAUstbfile@@PEAD0@Z		; stb_open
PUBLIC	?stb_open_outbuffer@@YAPEAUstbfile@@PEAPEAE@Z	; stb_open_outbuffer
PUBLIC	stb_arith_init_encode
PUBLIC	stb_arith_encode_close
PUBLIC	stb_arith_decode_close
PUBLIC	stb_arith_encode
PUBLIC	stb_arith_encode_log2
PUBLIC	stb_arith_decode_value
PUBLIC	stb_arith_decode_advance
PUBLIC	stb_arith_decode_value_log2
PUBLIC	stb_arith_decode_advance_log2
PUBLIC	stb_source_path
PUBLIC	?stb__get_sourcefile_path@@YAPEADPEAD@Z		; stb__get_sourcefile_path
PUBLIC	stb__double_constant
PUBLIC	stb__int_constant
PUBLIC	stb__string_constant
PUBLIC	?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z ; stb__constant_get_entry
PUBLIC	stbtt_BakeFontBitmap
PUBLIC	stbtt_GetBakedQuad
PUBLIC	stbtt_GetScaledFontVMetrics
PUBLIC	stbtt_PackBegin
PUBLIC	stbtt_PackEnd
PUBLIC	stbtt_PackFontRange
PUBLIC	stbtt_PackFontRanges
PUBLIC	stbtt_PackSetOversampling
PUBLIC	stbtt_PackSetSkipMissingCodepoints
PUBLIC	stbtt_GetPackedQuad
PUBLIC	stbtt_PackFontRangesGatherRects
PUBLIC	stbtt_PackFontRangesPackRects
PUBLIC	stbtt_PackFontRangesRenderIntoRects
PUBLIC	stbtt_GetNumberOfFonts
PUBLIC	stbtt_GetFontOffsetForIndex
PUBLIC	stbtt_InitFont
PUBLIC	stbtt_FindGlyphIndex
PUBLIC	stbtt_ScaleForPixelHeight
PUBLIC	stbtt_ScaleForMappingEmToPixels
PUBLIC	stbtt_GetFontVMetrics
PUBLIC	stbtt_GetFontVMetricsOS2
PUBLIC	stbtt_GetFontBoundingBox
PUBLIC	stbtt_GetCodepointHMetrics
PUBLIC	stbtt_GetCodepointKernAdvance
PUBLIC	stbtt_GetCodepointBox
PUBLIC	stbtt_GetGlyphHMetrics
PUBLIC	stbtt_GetGlyphKernAdvance
PUBLIC	stbtt_GetGlyphBox
PUBLIC	stbtt_GetKerningTableLength
PUBLIC	stbtt_GetKerningTable
PUBLIC	stbtt_IsGlyphEmpty
PUBLIC	stbtt_GetCodepointShape
PUBLIC	stbtt_GetGlyphShape
PUBLIC	stbtt_FreeShape
PUBLIC	stbtt_FindSVGDoc
PUBLIC	stbtt_GetCodepointSVG
PUBLIC	stbtt_GetGlyphSVG
PUBLIC	stbtt_FreeBitmap
PUBLIC	stbtt_GetCodepointBitmap
PUBLIC	stbtt_GetCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmap
PUBLIC	stbtt_MakeCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmapSubpixelPrefilter
PUBLIC	stbtt_GetCodepointBitmapBox
PUBLIC	stbtt_GetCodepointBitmapBoxSubpixel
PUBLIC	stbtt_GetGlyphBitmap
PUBLIC	stbtt_GetGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmap
PUBLIC	stbtt_MakeGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmapSubpixelPrefilter
PUBLIC	stbtt_GetGlyphBitmapBox
PUBLIC	stbtt_GetGlyphBitmapBoxSubpixel
PUBLIC	stbtt_Rasterize
PUBLIC	stbtt_FreeSDF
PUBLIC	stbtt_GetGlyphSDF
PUBLIC	stbtt_GetCodepointSDF
PUBLIC	stbtt_FindMatchingFont
PUBLIC	stbtt_CompareUTF8toUTF16_bigendian
PUBLIC	stbtt_GetFontNameString
PUBLIC	stbi_load_from_memory
PUBLIC	stbi_load_from_callbacks
PUBLIC	stbi_load
PUBLIC	stbi_load_from_file
PUBLIC	stbi_load_gif_from_memory
PUBLIC	stbi_load_16_from_memory
PUBLIC	stbi_load_16_from_callbacks
PUBLIC	stbi_load_16
PUBLIC	stbi_load_from_file_16
PUBLIC	stbi_loadf_from_memory
PUBLIC	stbi_loadf_from_callbacks
PUBLIC	stbi_loadf
PUBLIC	stbi_loadf_from_file
PUBLIC	stbi_hdr_to_ldr_gamma
PUBLIC	stbi_hdr_to_ldr_scale
PUBLIC	stbi_ldr_to_hdr_gamma
PUBLIC	stbi_ldr_to_hdr_scale
PUBLIC	stbi_is_hdr_from_callbacks
PUBLIC	stbi_is_hdr_from_memory
PUBLIC	stbi_is_hdr
PUBLIC	stbi_is_hdr_from_file
PUBLIC	stbi_failure_reason
PUBLIC	stbi_image_free
PUBLIC	stbi_info_from_memory
PUBLIC	stbi_info_from_callbacks
PUBLIC	stbi_is_16_bit_from_memory
PUBLIC	stbi_is_16_bit_from_callbacks
PUBLIC	stbi_info
PUBLIC	stbi_info_from_file
PUBLIC	stbi_is_16_bit
PUBLIC	stbi_is_16_bit_from_file
PUBLIC	stbi_set_unpremultiply_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb
PUBLIC	stbi_set_flip_vertically_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb_thread
PUBLIC	stbi_set_flip_vertically_on_load_thread
PUBLIC	stbi_zlib_decode_malloc_guesssize
PUBLIC	stbi_zlib_decode_malloc_guesssize_headerflag
PUBLIC	stbi_zlib_decode_malloc
PUBLIC	stbi_zlib_decode_buffer
PUBLIC	stbi_zlib_decode_noheader_malloc
PUBLIC	stbi_zlib_decode_noheader_buffer
PUBLIC	?stbi__unpremultiply_on_load_thread@@YAXH@Z	; stbi__unpremultiply_on_load_thread
PUBLIC	stbi_write_png
PUBLIC	stbi_write_bmp
PUBLIC	stbi_write_tga
PUBLIC	stbi_write_hdr
PUBLIC	stbi_write_jpg
PUBLIC	stbi_write_png_to_func
PUBLIC	stbi_write_bmp_to_func
PUBLIC	stbi_write_tga_to_func
PUBLIC	stbi_write_hdr_to_func
PUBLIC	stbi_write_jpg_to_func
PUBLIC	stbi_flip_vertically_on_write
PUBLIC	stbi_zlib_compress
PUBLIC	stbi_write_png_to_mem
PUBLIC	?NewReflectTree@@YAPEAUReflectTree@@H@Z		; NewReflectTree
PUBLIC	?CreateEnum@@YAPEAUReflectTree@@PEBD@Z		; CreateEnum
PUBLIC	?CreateStruct@@YAPEAUReflectTree@@PEBD@Z	; CreateStruct
PUBLIC	?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z	; AddValue
PUBLIC	?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z ; AddMember
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@0a4fb11f
PUBLIC	__real@3b808081
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d4cccd0
PUBLIC	__real@3da685db
PUBLIC	__real@3de978d5
PUBLIC	__real@3e199998
PUBLIC	__real@3e800000
PUBLIC	__real@3e991687
PUBLIC	__real@3e99999a
PUBLIC	__real@3ea99ae9
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec3ef15
PUBLIC	__real@3ed65e89
PUBLIC	__real@3f000000
PUBLIC	__real@3f0a8bd4
PUBLIC	__real@3f1645a2
PUBLIC	__real@3f3504f3
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f59999a
PUBLIC	__real@3f666666
PUBLIC	__real@3f733333
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3fa73d75
PUBLIC	__real@3fc3333333333334
PUBLIC	__real@3fd5555560000000
PUBLIC	__real@3fd82d82d82d82d8
PUBLIC	__real@3fd82d82e38e38e4
PUBLIC	__real@3fdb05b055555555
PUBLIC	__real@3fddb3d7
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3feb333333333333
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff028f5c0000000
PUBLIC	__real@3ff921fafc8b007a
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41800000
PUBLIC	__real@41900000
PUBLIC	__real@41c80000
PUBLIC	__real@41d80000
PUBLIC	__real@41f00000
PUBLIC	__real@41f0000000000000
PUBLIC	__real@42000000
PUBLIC	__real@420c0000
PUBLIC	__real@42200000
PUBLIC	__real@422c0000
PUBLIC	__real@42400000
PUBLIC	__real@42480000
PUBLIC	__real@42960000
PUBLIC	__real@42be0000
PUBLIC	__real@42e60000
PUBLIC	__real@43000000
PUBLIC	__real@43660000
PUBLIC	__real@43700000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@46800000
PUBLIC	__real@477fff00
PUBLIC	__real@47800000
PUBLIC	__real@497423f0
PUBLIC	__real@80000000
PUBLIC	__real@be2cca2e
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__real@c1d80000
PUBLIC	__xmm@00000200000002000000020000000200
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@01010000010100000101000001010000
PUBLIC	__xmm@08a914e808a914e808a914e808a914e8
PUBLIC	__xmm@11c8e09e11c8e09e11c8e09e11c8e09e
PUBLIC	__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
PUBLIC	__xmm@12d0046b12d0046b12d0046b12d0046b
PUBLIC	__xmm@166f166f166f166f166f166f166f166f
PUBLIC	__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
PUBLIC	__xmm@e09ee565e09ee565e09ee565e09ee565
PUBLIC	__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
PUBLIC	__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
PUBLIC	__xmm@f493f493f493f493f493f493f493f493
PUBLIC	__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
PUBLIC	__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__aligned_free_dbg:PROC
EXTRN	__imp__aligned_realloc_dbg:PROC
EXTRN	abs:PROC
EXTRN	acos:PROC
EXTRN	cos:PROC
EXTRN	fabs:PROC
EXTRN	fmod:PROC
EXTRN	pow:PROC
EXTRN	sqrt:PROC
EXTRN	__imp_ceil:PROC
EXTRN	__imp_floor:PROC
EXTRN	__imp_frexp:PROC
EXTRN	__imp_ldexp:PROC
EXTRN	__imp_ceilf:PROC
EXTRN	__imp_floorf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp__wfopen_s:PROC
EXTRN	__imp___stdio_common_vswprintf:PROC
EXTRN	__imp_fopen_s:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_feof:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_fgetc:PROC
EXTRN	__imp_fgets:PROC
EXTRN	__imp_fputc:PROC
EXTRN	__imp_fputs:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_fseek:PROC
EXTRN	__imp_ftell:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_remove:PROC
EXTRN	__imp_ungetc:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsprintf_s:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	__imp_exit:PROC
EXTRN	_lrotl:PROC
EXTRN	__imp_strtod:PROC
EXTRN	__imp_strtol:PROC
EXTRN	__imp__fullpath:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strchr:PROC
EXTRN	strrchr:PROC
EXTRN	strstr:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	__imp_strcpy_s:PROC
EXTRN	__imp_strncpy_s:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__strdup:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_isxdigit:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp_tolower:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_SetCurrentDirectoryA:PROC
EXTRN	__imp_GetCurrentDirectoryA:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileAttributesA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_SetLastError:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_WaitForSingleObjectEx:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_SwitchToFiber:PROC
EXTRN	__imp_CreateFiber:PROC
EXTRN	__imp_ConvertThreadToFiber:PROC
EXTRN	__imp_FormatMessageA:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageW:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_PostQuitMessage:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_IsWindow:PROC
EXTRN	__imp_ShowWindow:PROC
EXTRN	__imp_GetWindowPlacement:PROC
EXTRN	__imp_SetCapture:PROC
EXTRN	__imp_ReleaseCapture:PROC
EXTRN	__imp_SetTimer:PROC
EXTRN	__imp_KillTimer:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_AdjustWindowRect:PROC
EXTRN	__imp_MessageBoxA:PROC
EXTRN	__imp_GetWindowLongPtrA:PROC
EXTRN	__imp_SetWindowLongPtrA:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_AllocConsole:PROC
EXTRN	__imp_WriteConsoleA:PROC
EXTRN	__imp_WriteConsoleW:PROC
EXTRN	__imp_SetConsoleTextAttribute:PROC
EXTRN	__imp_GetConsoleWindow:PROC
EXTRN	__imp_RegCloseKey:PROC
EXTRN	__imp_RegCreateKeyExA:PROC
EXTRN	__imp_RegOpenKeyExA:PROC
EXTRN	__imp_RegQueryValueExA:PROC
EXTRN	__imp_RegSetValueExA:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__imp_timeEndPeriod:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__wrename:PROC
EXTRN	__imp__wfindfirst64i32:PROC
EXTRN	__imp__wfindfirst64:PROC
EXTRN	__imp__wfindnext64i32:PROC
EXTRN	__imp__wfindnext64:PROC
EXTRN	__imp__chmod:PROC
EXTRN	__imp__findclose:PROC
EXTRN	__imp__mktemp_s:PROC
EXTRN	__imp__rmdir:PROC
EXTRN	__imp__stat64i32:PROC
EXTRN	__imp__wstat64i32:PROC
EXTRN	D3DCompile:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	IID_IDXGIDevice:BYTE
EXTRN	IID_IDXGIFactory2:BYTE
EXTRN	IID_ID3D11Texture2D:BYTE
EXTRN	IID_ID3D11InfoQueue:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA DQ 01H DUP (?) ; Global_TraceMessageHook
?ARGUMENTS@@3U_ARGUMENTS@@A DB 030H DUP (?)		; ARGUMENTS
?SYSTEM@@3U_SYSTEM@@A DB 048H DUP (?)			; SYSTEM
?PROCESS@@3U_PROCESS@@A DB 088H DUP (?)			; PROCESS
_BSS	ENDS
;	COMDAT ?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
_TLS	SEGMENT
?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA DQ 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::Bed
_TLS	ENDS
;	COMDAT ?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
_TLS	SEGMENT
?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA DD 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::$S1
_TLS	ENDS
_BSS	SEGMENT
?STANDARD_BASIS@@3QBTf32x3@@B DB 024H DUP (?)		; STANDARD_BASIS
_BSS	ENDS
;	COMDAT ?buffer@?1??stb_sprintf@@9@4PADA
_BSS	SEGMENT
?buffer@?1??stb_sprintf@@9@4PADA DB 0400H DUP (?)	; `stb_sprintf'::`2'::buffer
_BSS	ENDS
;	COMDAT ?buffer@?1??stb_mprintf@@9@4PADA
_BSS	SEGMENT
?buffer@?1??stb_mprintf@@9@4PADA DB 0400H DUP (?)	; `stb_mprintf'::`2'::buffer
_BSS	ENDS
;	COMDAT ?buffer@?1??stb__from_utf8@@9@4PAGA
_BSS	SEGMENT
?buffer@?1??stb__from_utf8@@9@4PAGA DW 01000H DUP (?)	; `stb__from_utf8'::`2'::buffer
_BSS	ENDS
;	COMDAT ?buffer@?1??stb__from_utf8_alt@@9@4PAGA
_BSS	SEGMENT
?buffer@?1??stb__from_utf8_alt@@9@4PAGA DW 01000H DUP (?) ; `stb__from_utf8_alt'::`2'::buffer
_BSS	ENDS
;	COMDAT ?buffer@?1??stb__to_utf8@@9@4PADA
_BSS	SEGMENT
?buffer@?1??stb__to_utf8@@9@4PADA DB 01000H DUP (?)	; `stb__to_utf8'::`2'::buffer
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	8

?stb__file@@3PEADEA DQ 01H DUP (?)			; stb__file
?stb__line@@3HA DD 01H DUP (?)				; stb__line
?stb__intcmpoffset@@3HA DD 01H DUP (?)			; stb__intcmpoffset
?stb__ucharcmpoffset@@3HA DD 01H DUP (?)		; stb__ucharcmpoffset
?stb__strcmpoffset@@3HA DD 01H DUP (?)			; stb__strcmpoffset
?stb__floatcmpoffset@@3HA DD 01H DUP (?)		; stb__floatcmpoffset
?stb__doublecmpoffset@@3HA DD 01H DUP (?)		; stb__doublecmpoffset
?stb__memcmpoffset@@3HA DD 01H DUP (?)			; stb__memcmpoffset
?stb__memcmpsize@@3HA DD 01H DUP (?)			; stb__memcmpsize
_BSS	ENDS
;	COMDAT ?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
_BSS	SEGMENT
?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA DB 0100H DUP (?) ; `stb_tokens_raw'::`2'::stb_tokentable
_BSS	ENDS
;	COMDAT ?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
_BSS	SEGMENT
?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA DB 0100H DUP (?) ; `stb_tokens_raw'::`2'::stable
_BSS	ENDS
;	COMDAT ?etable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
_BSS	SEGMENT
?etable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA DB 0100H DUP (?) ; `stb_tokens_raw'::`2'::etable
_BSS	ENDS
;	COMDAT ?buffer@?1??stb_shorten_path_readable@@9@4PADA
_BSS	SEGMENT
?buffer@?1??stb_shorten_path_readable@@9@4PADA DB 0400H DUP (?) ; `stb_shorten_path_readable'::`2'::buffer
_BSS	ENDS
_BSS	SEGMENT
?stb__arr_context@@3PEAXEA DQ 01H DUP (?)		; stb__arr_context
?stb__files@@3PEAUstb__st_stb_ptrmap@@EA DQ 01H DUP (?)	; stb__files
_BSS	ENDS
;	COMDAT ?crc_table@?1??stb_crc32_block@@9@4PAIA
_BSS	SEGMENT
?crc_table@?1??stb_crc32_block@@9@4PAIA DD 0100H DUP (?) ; `stb_crc32_block'::`2'::crc_table
_BSS	ENDS
_BSS	SEGMENT
?stb__cfg_dir@@3PADA DB 0200H DUP (?)			; stb__cfg_dir
?stb__dircount@@3HA DD 01H DUP (?)			; stb__dircount
?stb__dircount_mask@@3HA DD 01H DUP (?)			; stb__dircount_mask
?stb__showfile@@3HA DD 01H DUP (?)			; stb__showfile
?stb__alloc_size@@3HA DD 01H DUP (?)			; stb__alloc_size
?stb__alloc_limit@@3HA DD 01H DUP (?)			; stb__alloc_limit
?stb__alloc_mask@@3HA DD 01H DUP (?)			; stb__alloc_mask
_BSS	ENDS
;	COMDAT ?storage@?1??stb_ps_fastlist@@9@4PEAXEA
_BSS	SEGMENT
?storage@?1??stb_ps_fastlist@@9@4PEAXEA DQ 01H DUP (?)	; `stb_ps_fastlist'::`2'::storage
_BSS	ENDS
_BSS	SEGMENT
?stb__rand_seed@@3IA DD 01H DUP (?)			; stb__rand_seed
	ALIGN	8

?stb__compare@@3P6AHPEAX0@ZEA DQ 01H DUP (?)		; stb__compare
?stb__barrier@@3PEAEEA DQ 01H DUP (?)			; stb__barrier
?stb__barrier2@@3PEAEEA DQ 01H DUP (?)			; stb__barrier2
?stb__barrier3@@3PEAEEA DQ 01H DUP (?)			; stb__barrier3
?stb__barrier4@@3PEAEEA DQ 01H DUP (?)			; stb__barrier4
?stb__dout@@3PEAEEA DQ 01H DUP (?)			; stb__dout
?stb__out@@3PEAEEA DQ 01H DUP (?)			; stb__out
?stb__outfile@@3PEAU_iobuf@@EA DQ 01H DUP (?)		; stb__outfile
?stb__outbytes@@3IA DD 01H DUP (?)			; stb__outbytes
?stb__running_adler@@3IA DD 01H DUP (?)			; stb__running_adler
?xtb@@3U<unnamed-type-xtb>@@A DB 038H DUP (?)		; xtb
_BSS	ENDS
;	COMDAT ?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
_BSS	SEGMENT
?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA DB 0200H DUP (?) ; `stb__get_sourcefile_path'::`2'::filebuf
_BSS	ENDS
_BSS	SEGMENT
?stb__constant_file_hash@@3PEAUstb__st_stb_sdict@@EA DQ 01H DUP (?) ; stb__constant_file_hash
_BSS	ENDS
_TLS	SEGMENT
?stbi__g_failure_reason@@3PEBDEB DQ 01H DUP (?)		; stbi__g_failure_reason
_TLS	ENDS
_BSS	SEGMENT
?stbi__vertically_flip_on_load_global@@3HA DD 01H DUP (?) ; stbi__vertically_flip_on_load_global
_BSS	ENDS
_TLS	SEGMENT
?stbi__vertically_flip_on_load_local@@3HA DD 01H DUP (?) ; stbi__vertically_flip_on_load_local
?stbi__vertically_flip_on_load_set@@3HA DD 01H DUP (?)	; stbi__vertically_flip_on_load_set
_TLS	ENDS
_BSS	SEGMENT
?stbi__unpremultiply_on_load_global@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_global
?stbi__de_iphone_flag_global@@3HA DD 01H DUP (?)	; stbi__de_iphone_flag_global
_BSS	ENDS
_TLS	SEGMENT
?stbi__unpremultiply_on_load_local@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_local
?stbi__unpremultiply_on_load_set@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_set
?stbi__de_iphone_flag_local@@3HA DD 01H DUP (?)		; stbi__de_iphone_flag_local
?stbi__de_iphone_flag_set@@3HA DD 01H DUP (?)		; stbi__de_iphone_flag_set
_TLS	ENDS
_BSS	SEGMENT
?stbi__flip_vertically_on_write@@3HA DD 01H DUP (?)	; stbi__flip_vertically_on_write
?STANDARD_BASIS_COLOR@@3QBTf32x4@@B DB 030H DUP (?)	; STANDARD_BASIS_COLOR
_BSS	ENDS
;	COMDAT ?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB
_BSS	SEGMENT
?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB DQ 01H DUP (?) ; `ZenGluiReviseClickFocus'::`2'::ActiveFocus
_BSS	ENDS
_BSS	SEGMENT
?LastView@@3PEAUZenView@@EA DQ 01H DUP (?)		; LastView
_BSS	ENDS
;	COMDAT ?CursorStart@?9??ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z@4Ui32x2@@A
_BSS	SEGMENT
?CursorStart@?9??ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z@4Ui32x2@@A DQ 01H DUP (?) ; `ZenGluiPushWindow'::`10'::CursorStart
_BSS	ENDS
_BSS	SEGMENT
?TemporaryPushCounterUntilAStackIsAdded@@3HA DD 01H DUP (?) ; TemporaryPushCounterUntilAStackIsAdded
?Zen@@3UZenCore@@A DB 03718H DUP (?)			; Zen
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnwprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$_vsnwprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vswprintf_c_l DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$_vswprintf_c_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$swprintf DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$swprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vfprintf DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$vfprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsprintf_s DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$vsprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strchr@@YAPEADQEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?strchr@@YAPEADQEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strrchr@@YAPEADQEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?strrchr@@YAPEADQEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strstr@@YAPEADQEADQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?strstr@@YAPEADQEADQEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z
	DD	imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z+496
	DD	imagerel $unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z
$pdata$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
$pdata$??1_TRACE_BLOCK@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+242
	DD	imagerel $unwind$??1_TRACE_BLOCK@@QEAA@XZ
$pdata$?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z DD imagerel ?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z
	DD	imagerel ?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z+92
	DD	imagerel $unwind$?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z
$pdata$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+424
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
$pdata$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+82
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
$pdata$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+82
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
$pdata$?HeapFree@@YAXPEAX@Z DD imagerel ?HeapFree@@YAXPEAX@Z
	DD	imagerel ?HeapFree@@YAXPEAX@Z+51
	DD	imagerel $unwind$?HeapFree@@YAXPEAX@Z
$pdata$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+803
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
$pdata$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+222
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
$pdata$??Bstr32@@QEAA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAA_JXZ
$pdata$??Bstr32@@QEAA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAA_KXZ
$pdata$??Bstr32@@QEAANXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bstr32@@QEAANXZ
$pdata$??Bstr32@@QEAAMXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bstr32@@QEAAMXZ
$pdata$??Bstr32@@QEAAIXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAAIXZ
$pdata$??Bstr32@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAAHXZ
$pdata$??7str32@@QEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??7str32@@QEAAHXZ
$pdata$?strtoi@@YA_JUstr32@@@Z DD imagerel ?strtoi@@YA_JUstr32@@@Z
	DD	imagerel ?strtoi@@YA_JUstr32@@@Z+71
	DD	imagerel $unwind$?strtoi@@YA_JUstr32@@@Z
$pdata$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ
	DD	imagerel ?MAIN@@YAXXZ+185
	DD	imagerel $unwind$?MAIN@@YAXXZ
$pdata$?FileExists@@YAHPEBD@Z DD imagerel ?FileExists@@YAHPEBD@Z
	DD	imagerel ?FileExists@@YAHPEBD@Z+66
	DD	imagerel $unwind$?FileExists@@YAHPEBD@Z
$pdata$?GetThreadID@@YAHXZ DD imagerel ?GetThreadID@@YAHXZ
	DD	imagerel ?GetThreadID@@YAHXZ+15
	DD	imagerel $unwind$?GetThreadID@@YAHXZ
$pdata$?GetPerformanceFrequency@@YA_KXZ DD imagerel ?GetPerformanceFrequency@@YA_KXZ
	DD	imagerel ?GetPerformanceFrequency@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceFrequency@@YA_KXZ
$pdata$?GetPerformanceCounter@@YA_KXZ DD imagerel ?GetPerformanceCounter@@YA_KXZ
	DD	imagerel ?GetPerformanceCounter@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceCounter@@YA_KXZ
$pdata$?Widen@@YAPEA_WHPEBD@Z DD imagerel ?Widen@@YAPEA_WHPEBD@Z
	DD	imagerel ?Widen@@YAPEA_WHPEBD@Z+339
	DD	imagerel $unwind$?Widen@@YAPEA_WHPEBD@Z
$pdata$?OutputW@@YAXPEB_W@Z DD imagerel ?OutputW@@YAXPEB_W@Z
	DD	imagerel ?OutputW@@YAXPEB_W@Z+103
	DD	imagerel $unwind$?OutputW@@YAXPEB_W@Z
$pdata$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
	DD	imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z+475
	DD	imagerel $unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
$pdata$?UnloadFileData@@YAXPEAX@Z DD imagerel ?UnloadFileData@@YAXPEAX@Z
	DD	imagerel ?UnloadFileData@@YAXPEAX@Z+33
	DD	imagerel $unwind$?UnloadFileData@@YAXPEAX@Z
$pdata$?WriteFileData@@YAIIPEAXPEBD@Z DD imagerel ?WriteFileData@@YAIIPEAXPEBD@Z
	DD	imagerel ?WriteFileData@@YAIIPEAXPEBD@Z+504
	DD	imagerel $unwind$?WriteFileData@@YAIIPEAXPEBD@Z
$pdata$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+794
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
$pdata$?GetErrorCode@@YAHH@Z DD imagerel ?GetErrorCode@@YAHH@Z
	DD	imagerel ?GetErrorCode@@YAHH@Z+180
	DD	imagerel $unwind$?GetErrorCode@@YAHH@Z
$pdata$?GetErrorStringA@@YAPEBDHH@Z DD imagerel ?GetErrorStringA@@YAPEBDHH@Z
	DD	imagerel ?GetErrorStringA@@YAPEBDHH@Z+473
	DD	imagerel $unwind$?GetErrorStringA@@YAPEBDHH@Z
$pdata$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+257
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
$pdata$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
	DD	imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z+119
	DD	imagerel $unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
$pdata$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
	DD	imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z+122
	DD	imagerel $unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
$pdata$?FormatA@@YAPEADPEBDZZ DD imagerel ?FormatA@@YAPEADPEBDZZ
	DD	imagerel ?FormatA@@YAPEADPEBDZZ+104
	DD	imagerel $unwind$?FormatA@@YAPEADPEBDZZ
$pdata$?FormatW@@YAPEA_WPEB_WZZ DD imagerel ?FormatW@@YAPEA_WPEB_WZZ
	DD	imagerel ?FormatW@@YAPEA_WPEB_WZZ+105
	DD	imagerel $unwind$?FormatW@@YAPEA_WPEB_WZZ
$pdata$?RuneIsEOL@@YAHH@Z DD imagerel ?RuneIsEOL@@YAHH@Z
	DD	imagerel ?RuneIsEOL@@YAHH@Z+46
	DD	imagerel $unwind$?RuneIsEOL@@YAHH@Z
$pdata$WinMain DD imagerel $LN9
	DD	imagerel $LN9+480
	DD	imagerel $unwind$WinMain
$pdata$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+267
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
$pdata$?PlatformDeinitialize@@YAXXZ DD imagerel ?PlatformDeinitialize@@YAXXZ
	DD	imagerel ?PlatformDeinitialize@@YAXXZ+30
	DD	imagerel $unwind$?PlatformDeinitialize@@YAXXZ
$pdata$?CStrW@@YAPEB_WPEBD@Z DD imagerel ?CStrW@@YAPEB_WPEBD@Z
	DD	imagerel ?CStrW@@YAPEB_WPEBD@Z+29
	DD	imagerel $unwind$?CStrW@@YAPEB_WPEBD@Z
$pdata$?FileNameIsSymLink@@YAHPEBD@Z DD imagerel ?FileNameIsSymLink@@YAHPEBD@Z
	DD	imagerel ?FileNameIsSymLink@@YAHPEBD@Z+131
	DD	imagerel $unwind$?FileNameIsSymLink@@YAHPEBD@Z
$pdata$?TraceMessageKindToString@@YAPEB_WH@Z DD imagerel ?TraceMessageKindToString@@YAPEB_WH@Z
	DD	imagerel ?TraceMessageKindToString@@YAPEB_WH@Z+160
	DD	imagerel $unwind$?TraceMessageKindToString@@YAPEB_WH@Z
$pdata$?f32x2_make@@YA?AUf32x2@@MM@Z DD imagerel ?f32x2_make@@YA?AUf32x2@@MM@Z
	DD	imagerel ?f32x2_make@@YA?AUf32x2@@MM@Z+48
	DD	imagerel $unwind$?f32x2_make@@YA?AUf32x2@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ESTANDARD_BASIS@@YAXXZ DD imagerel ??__ESTANDARD_BASIS@@YAXXZ
	DD	imagerel ??__ESTANDARD_BASIS@@YAXXZ+87
	DD	imagerel $unwind$??__ESTANDARD_BASIS@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?zen_lmap@@YAMMMMMM@Z DD imagerel ?zen_lmap@@YAMMMMMM@Z
	DD	imagerel ?zen_lmap@@YAMMMMMM@Z+73
	DD	imagerel $unwind$?zen_lmap@@YAMMMMMM@Z
$pdata$?zen_clamp@@YAMMMM@Z DD imagerel ?zen_clamp@@YAMMMM@Z
	DD	imagerel ?zen_clamp@@YAMMMM@Z+108
	DD	imagerel $unwind$?zen_clamp@@YAMMMM@Z
$pdata$?zen_clampi@@YAHHHH@Z DD imagerel ?zen_clampi@@YAHHHH@Z
	DD	imagerel ?zen_clampi@@YAHHHH@Z+79
	DD	imagerel $unwind$?zen_clampi@@YAHHHH@Z
$pdata$??D@YA?AUf32x2@@U0@0@Z DD imagerel ??D@YA?AUf32x2@@U0@0@Z
	DD	imagerel ??D@YA?AUf32x2@@U0@0@Z+58
	DD	imagerel $unwind$??D@YA?AUf32x2@@U0@0@Z
$pdata$??D@YA?AUf32x2@@U0@Ui32x2@@@Z DD imagerel ??D@YA?AUf32x2@@U0@Ui32x2@@@Z
	DD	imagerel ??D@YA?AUf32x2@@U0@Ui32x2@@@Z+72
	DD	imagerel $unwind$??D@YA?AUf32x2@@U0@Ui32x2@@@Z
$pdata$??D@YA?AUf32x2@@Ui32x2@@U0@@Z DD imagerel ??D@YA?AUf32x2@@Ui32x2@@U0@@Z
	DD	imagerel ??D@YA?AUf32x2@@Ui32x2@@U0@@Z+58
	DD	imagerel $unwind$??D@YA?AUf32x2@@Ui32x2@@U0@@Z
$pdata$??K@YA?AUi32x2@@U0@H@Z DD imagerel ??K@YA?AUi32x2@@U0@H@Z
	DD	imagerel ??K@YA?AUi32x2@@U0@H@Z+47
	DD	imagerel $unwind$??K@YA?AUi32x2@@U0@H@Z
$pdata$??K@YA?AUf32x2@@MUi32x2@@@Z DD imagerel ??K@YA?AUf32x2@@MUi32x2@@@Z
	DD	imagerel ??K@YA?AUf32x2@@MUi32x2@@@Z+73
	DD	imagerel $unwind$??K@YA?AUf32x2@@MUi32x2@@@Z
$pdata$??H@YA?AUi32x2@@U0@0@Z DD imagerel ??H@YA?AUi32x2@@U0@0@Z
	DD	imagerel ??H@YA?AUi32x2@@U0@0@Z+54
	DD	imagerel $unwind$??H@YA?AUi32x2@@U0@0@Z
$pdata$??G@YA?AUi32x2@@U0@0@Z DD imagerel ??G@YA?AUi32x2@@U0@0@Z
	DD	imagerel ??G@YA?AUi32x2@@U0@0@Z+54
	DD	imagerel $unwind$??G@YA?AUi32x2@@U0@0@Z
$pdata$??G@YA?AUf32x2@@U0@0@Z DD imagerel ??G@YA?AUf32x2@@U0@0@Z
	DD	imagerel ??G@YA?AUf32x2@@U0@0@Z+58
	DD	imagerel $unwind$??G@YA?AUf32x2@@U0@0@Z
$pdata$?MatrixI@@YA?AUf32_4x4@@XZ DD imagerel ?MatrixI@@YA?AUf32_4x4@@XZ
	DD	imagerel ?MatrixI@@YA?AUf32_4x4@@XZ+233
	DD	imagerel $unwind$?MatrixI@@YA?AUf32_4x4@@XZ
$pdata$?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z DD imagerel ?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z
	DD	imagerel ?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z+137
	DD	imagerel $unwind$?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z
$pdata$?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z DD imagerel ?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z
	DD	imagerel ?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z+37
	DD	imagerel $unwind$?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z
$pdata$?PIXEL_FORMAT_SIZE@@YAHH@Z DD imagerel ?PIXEL_FORMAT_SIZE@@YAHH@Z
	DD	imagerel ?PIXEL_FORMAT_SIZE@@YAHH@Z+66
	DD	imagerel $unwind$?PIXEL_FORMAT_SIZE@@YAHH@Z
$pdata$?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z+55
	DD	imagerel $unwind$?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z DD imagerel ?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z
	DD	imagerel ?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z+55
	DD	imagerel $unwind$?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z
$pdata$?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z DD imagerel ?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z
	DD	imagerel ?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z+50
	DD	imagerel $unwind$?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z
$pdata$?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z DD imagerel ?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z
	DD	imagerel ?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z+60
	DD	imagerel $unwind$?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z
$pdata$stb_wrapper_malloc DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$stb_wrapper_malloc
$pdata$stb_wrapper_free DD imagerel $LN9
	DD	imagerel $LN9+342
	DD	imagerel $unwind$stb_wrapper_free
$pdata$stb_wrapper_realloc DD imagerel $LN12
	DD	imagerel $LN12+540
	DD	imagerel $unwind$stb_wrapper_realloc
$pdata$stb_wrapper_listall DD imagerel $LN7
	DD	imagerel $LN7+185
	DD	imagerel $unwind$stb_wrapper_listall
$pdata$stb_wrapper_dump DD imagerel $LN8
	DD	imagerel $LN8+221
	DD	imagerel $unwind$stb_wrapper_dump
$pdata$stb_wrapper_allocsize DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$stb_wrapper_allocsize
$pdata$stb_wrapper_check DD imagerel $LN10
	DD	imagerel $LN10+330
	DD	imagerel $unwind$stb_wrapper_check
$pdata$?stb__realloc_raw@@YAPEAXPEAXH@Z DD imagerel ?stb__realloc_raw@@YAPEAXPEAXH@Z
	DD	imagerel ?stb__realloc_raw@@YAPEAXPEAXH@Z+83
	DD	imagerel $unwind$?stb__realloc_raw@@YAPEAXPEAXH@Z
$pdata$stbprint DD imagerel $LN5
	DD	imagerel $LN5+264
	DD	imagerel $unwind$stbprint
$pdata$stb_sprintf DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$stb_sprintf
$pdata$stb_mprintf DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$stb_mprintf
$pdata$stb_snprintf DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$stb_snprintf
$pdata$stb_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+137
	DD	imagerel $unwind$stb_vsnprintf
$pdata$?stb__print_one@@YAXPEAXPEAD_J@Z DD imagerel ?stb__print_one@@YAXPEAXPEAD_J@Z
	DD	imagerel ?stb__print_one@@YAXPEAXPEAD_J@Z+65
	DD	imagerel $unwind$?stb__print_one@@YAXPEAXPEAD_J@Z
$pdata$?stb__print@@YAXPEAD@Z DD imagerel ?stb__print@@YAXPEAD@Z
	DD	imagerel ?stb__print@@YAXPEAD@Z+1065
	DD	imagerel $unwind$?stb__print@@YAXPEAD@Z
$pdata$stb_from_utf8 DD imagerel $LN31
	DD	imagerel $LN31+1242
	DD	imagerel $unwind$stb_from_utf8
$pdata$stb_to_utf8 DD imagerel $LN17
	DD	imagerel $LN17+779
	DD	imagerel $unwind$stb_to_utf8
$pdata$stb__from_utf8 DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$stb__from_utf8
$pdata$stb__from_utf8_alt DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$stb__from_utf8_alt
$pdata$stb__to_utf8 DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$stb__to_utf8
$pdata$stb_fatal DD imagerel $LN4
	DD	imagerel $LN4+235
	DD	imagerel $unwind$stb_fatal
$pdata$stb_ DD	imagerel $LN6
	DD	imagerel $LN6+192
	DD	imagerel $unwind$stb_
$pdata$stb_append_to_file DD imagerel $LN4
	DD	imagerel $LN4+127
	DD	imagerel $unwind$stb_append_to_file
$pdata$stb_swap DD imagerel $LN9
	DD	imagerel $LN9+413
	DD	imagerel $unwind$stb_swap
$pdata$stb_copy DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$stb_copy
$pdata$stb_pointer_array_free DD imagerel $LN6
	DD	imagerel $LN6+80
	DD	imagerel $unwind$stb_pointer_array_free
$pdata$stb_array_block_alloc DD imagerel $LN7
	DD	imagerel $LN7+166
	DD	imagerel $unwind$stb_array_block_alloc
$pdata$stb__temp DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$stb__temp
$pdata$stb_tempfree DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$stb_tempfree
$pdata$stb_newell_normal DD imagerel $LN7
	DD	imagerel $LN7+888
	DD	imagerel $unwind$stb_newell_normal
$pdata$stb_box_face_vertex_axis_side DD imagerel $LN9
	DD	imagerel $LN9+190
	DD	imagerel $unwind$stb_box_face_vertex_axis_side
$pdata$stb_linear_controller DD imagerel $LN10
	DD	imagerel $LN10+351
	DD	imagerel $unwind$stb_linear_controller
$pdata$stb_float_eq DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$stb_float_eq
$pdata$stb_is_prime DD imagerel $LN16
	DD	imagerel $LN16+246
	DD	imagerel $unwind$stb_is_prime
$pdata$stb_power_of_two_nearest_prime DD imagerel $LN8
	DD	imagerel $LN8+186
	DD	imagerel $unwind$stb_power_of_two_nearest_prime
$pdata$stb_cubic_bezier_1d DD imagerel $LN3
	DD	imagerel $LN3+170
	DD	imagerel $unwind$stb_cubic_bezier_1d
$pdata$stb_is_pow2 DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$stb_is_pow2
$pdata$stb_log2_ceil DD imagerel $LN5
	DD	imagerel $LN5+54
	DD	imagerel $unwind$stb_log2_ceil
$pdata$stb_log2_floor DD imagerel $LN5
	DD	imagerel $LN5+53
	DD	imagerel $unwind$stb_log2_floor
$pdata$stb_lowbit8 DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$stb_lowbit8
$pdata$stb_highbit8 DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$stb_highbit8
$pdata$?stb__intcmp@@YAHPEBX0@Z DD imagerel $LN7
	DD	imagerel $LN7+114
	DD	imagerel $unwind$?stb__intcmp@@YAHPEBX0@Z
$pdata$?stb__intcmprev@@YAHPEBX0@Z DD imagerel $LN7
	DD	imagerel $LN7+114
	DD	imagerel $unwind$?stb__intcmprev@@YAHPEBX0@Z
$pdata$?stb__ucharcmp@@YAHPEBX0@Z DD imagerel $LN7
	DD	imagerel $LN7+116
	DD	imagerel $unwind$?stb__ucharcmp@@YAHPEBX0@Z
$pdata$?stb__floatcmp@@YAHPEBX0@Z DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$?stb__floatcmp@@YAHPEBX0@Z
$pdata$?stb__doublecmp@@YAHPEBX0@Z DD imagerel $LN7
	DD	imagerel $LN7+130
	DD	imagerel $unwind$?stb__doublecmp@@YAHPEBX0@Z
$pdata$?stb__qsort_strcmp@@YAHPEBX0@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?stb__qsort_strcmp@@YAHPEBX0@Z
$pdata$?stb__qsort_stricmp@@YAHPEBX0@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?stb__qsort_stricmp@@YAHPEBX0@Z
$pdata$?stb__memcmp@@YAHPEBX0@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?stb__memcmp@@YAHPEBX0@Z
$pdata$stb_search_binary DD imagerel $LN6
	DD	imagerel $LN6+125
	DD	imagerel $unwind$stb_search_binary
$pdata$stb_search_open DD imagerel $LN5
	DD	imagerel $LN5+126
	DD	imagerel $unwind$stb_search_open
$pdata$stb_probe DD imagerel $LN17
	DD	imagerel $LN17+289
	DD	imagerel $unwind$stb_probe
$pdata$?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z DD imagerel ?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z
	DD	imagerel ?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z+352
	DD	imagerel $unwind$?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z
$pdata$stb_skipwhite DD imagerel $LN5
	DD	imagerel $LN5+54
	DD	imagerel $unwind$stb_skipwhite
$pdata$stb_trimwhite DD imagerel $LN7
	DD	imagerel $LN7+124
	DD	imagerel $unwind$stb_trimwhite
$pdata$stb_strncpy DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$stb_strncpy
$pdata$stb_substr DD imagerel $LN4
	DD	imagerel $LN4+126
	DD	imagerel $unwind$stb_substr
$pdata$stb_duplower DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$stb_duplower
$pdata$stb_tolower DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$stb_tolower
$pdata$stb_strrchr2 DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$stb_strrchr2
$pdata$stb_strtok DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$stb_strtok
$pdata$stb_strtok_keep DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$stb_strtok_keep
$pdata$stb_strtok_invert DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$stb_strtok_invert
$pdata$stb_dupreplace DD imagerel $LN13
	DD	imagerel $LN13+580
	DD	imagerel $unwind$stb_dupreplace
$pdata$stb_replaceinplace DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$stb_replaceinplace
$pdata$stb_splitpath DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stb_splitpath
$pdata$stb_splitpathdup DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$stb_splitpathdup
$pdata$stb_replacedir DD imagerel $LN5
	DD	imagerel $LN5+181
	DD	imagerel $unwind$stb_replacedir
$pdata$stb_replaceext DD imagerel $LN7
	DD	imagerel $LN7+235
	DD	imagerel $unwind$stb_replaceext
$pdata$stb_shorten_path_readable DD imagerel $LN18
	DD	imagerel $LN18+603
	DD	imagerel $unwind$stb_shorten_path_readable
$pdata$stb_suffix DD imagerel $LN7
	DD	imagerel $LN7+127
	DD	imagerel $unwind$stb_suffix
$pdata$stb_suffixi DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$stb_suffixi
$pdata$stb_prefix DD imagerel $LN6
	DD	imagerel $LN6+100
	DD	imagerel $unwind$stb_prefix
$pdata$stb_strichr DD imagerel $LN4
	DD	imagerel $LN4+128
	DD	imagerel $unwind$stb_strichr
$pdata$stb_stristr DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$stb_stristr
$pdata$stb_prefix_count DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$stb_prefix_count
$pdata$stb_plural DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$stb_plural
$pdata$stb_strscpy DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$stb_strscpy
$pdata$stb_tokens DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$stb_tokens
$pdata$stb_tokens_nested DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$stb_tokens_nested
$pdata$stb_tokens_nested_empty DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$stb_tokens_nested_empty
$pdata$stb_tokens_allowempty DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$stb_tokens_allowempty
$pdata$stb_tokens_stripwhite DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$stb_tokens_stripwhite
$pdata$stb_tokens_quoted DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$stb_tokens_quoted
$pdata$?stb_strtok_raw@@YAPEADPEAD00HH@Z DD imagerel ?stb_strtok_raw@@YAPEADPEAD00HH@Z
	DD	imagerel ?stb_strtok_raw@@YAPEADPEAD00HH@Z+282
	DD	imagerel $unwind$?stb_strtok_raw@@YAPEADPEAD00HH@Z
$pdata$?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z DD imagerel ?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z
	DD	imagerel ?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z+2482
	DD	imagerel $unwind$?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z
$pdata$?stb__add_section@@YAXPEAD0_J1@Z DD imagerel $LN5
	DD	imagerel $LN5+237
	DD	imagerel $unwind$?stb__add_section@@YAXPEAD0_J1@Z
$pdata$?stb__splitpath_raw@@YAPEADPEAD0H@Z DD imagerel ?stb__splitpath_raw@@YAPEADPEAD0H@Z
	DD	imagerel ?stb__splitpath_raw@@YAPEADPEAD0H@Z+690
	DD	imagerel $unwind$?stb__splitpath_raw@@YAPEADPEAD0H@Z
$pdata$stb_free DD imagerel $LN17
	DD	imagerel $LN17+468
	DD	imagerel $unwind$stb_free
$pdata$stb_malloc_global DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$stb_malloc_global
$pdata$stb_malloc DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$stb_malloc
$pdata$stb_malloc_nofree DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$stb_malloc_nofree
$pdata$stb_malloc_leaf DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stb_malloc_leaf
$pdata$stb_malloc_raw DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$stb_malloc_raw
$pdata$stb_realloc DD imagerel $LN13
	DD	imagerel $LN13+457
	DD	imagerel $unwind$stb_realloc
$pdata$stb_reassign DD imagerel $LN8
	DD	imagerel $LN8+290
	DD	imagerel $unwind$stb_reassign
$pdata$stb_malloc_validate DD imagerel $LN21
	DD	imagerel $LN21+517
	DD	imagerel $unwind$stb_malloc_validate
$pdata$?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z DD imagerel ?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z
	DD	imagerel ?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z+44
	DD	imagerel $unwind$?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z
$pdata$?stb__prevn@@YAPEAPEAPEAXPEAX@Z DD imagerel ?stb__prevn@@YAPEAPEAPEAXPEAX@Z
	DD	imagerel ?stb__prevn@@YAPEAPEAPEAXPEAX@Z+75
	DD	imagerel $unwind$?stb__prevn@@YAPEAPEAPEAXPEAX@Z
$pdata$?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z DD imagerel ?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z
	DD	imagerel ?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z+241
	DD	imagerel $unwind$?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z
$pdata$?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z DD imagerel ?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z
	DD	imagerel ?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z+126
	DD	imagerel $unwind$?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z
$pdata$?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z DD imagerel ?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z
	DD	imagerel ?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z+522
	DD	imagerel $unwind$?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z
$pdata$?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z DD imagerel ?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z
	DD	imagerel ?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z+92
	DD	imagerel $unwind$?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z
$pdata$?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z DD imagerel ?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z
	DD	imagerel ?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z+120
	DD	imagerel $unwind$?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z
$pdata$?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z DD imagerel ?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z
	DD	imagerel ?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z+114
	DD	imagerel $unwind$?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z
$pdata$?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z DD imagerel ?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z
	DD	imagerel ?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z+705
	DD	imagerel $unwind$?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z
$pdata$?stb_malloc_string@@YAPEADPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?stb_malloc_string@@YAPEADPEAX_K@Z
$pdata$?stb_realloc_c@@YAPEAXPEAX0_K@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$?stb_realloc_c@@YAPEAXPEAX0_K@Z
$pdata$stb_arr_malloc DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$stb_arr_malloc
$pdata$stb_arr_malloc_parent DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$stb_arr_malloc_parent
$pdata$stb_arr_free_ DD imagerel $LN7
	DD	imagerel $LN7+145
	DD	imagerel $unwind$stb_arr_free_
$pdata$stb__arr_copy_ DD imagerel $LN7
	DD	imagerel $LN7+214
	DD	imagerel $unwind$stb__arr_copy_
$pdata$stb__arr_setsize_ DD imagerel $LN6
	DD	imagerel $LN6+140
	DD	imagerel $unwind$stb__arr_setsize_
$pdata$stb__arr_setlen_ DD imagerel $LN9
	DD	imagerel $LN9+172
	DD	imagerel $unwind$stb__arr_setlen_
$pdata$stb__arr_addlen_ DD imagerel $LN5
	DD	imagerel $LN5+88
	DD	imagerel $unwind$stb__arr_addlen_
$pdata$stb__arr_deleten_ DD imagerel $LN6
	DD	imagerel $LN6+226
	DD	imagerel $unwind$stb__arr_deleten_
$pdata$stb__arr_insertn_ DD imagerel $LN7
	DD	imagerel $LN7+258
	DD	imagerel $unwind$stb__arr_insertn_
$pdata$?stb__arr_malloc@@YAPEAXH@Z DD imagerel ?stb__arr_malloc@@YAPEAXH@Z
	DD	imagerel ?stb__arr_malloc@@YAPEAXH@Z+59
	DD	imagerel $unwind$?stb__arr_malloc@@YAPEAXH@Z
$pdata$?stb__arrsize_@@YAXPEAPEAXHHH@Z DD imagerel ?stb__arrsize_@@YAXPEAPEAXHHH@Z
	DD	imagerel ?stb__arrsize_@@YAXPEAPEAXHHH@Z+489
	DD	imagerel $unwind$?stb__arrsize_@@YAXPEAPEAXHHH@Z
$pdata$stb_hash DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$stb_hash
$pdata$stb_hashptr DD imagerel $LN3
	DD	imagerel $LN3+162
	DD	imagerel $unwind$stb_hashptr
$pdata$stb_hashlen DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$stb_hashlen
$pdata$stb_rehash_improved DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stb_rehash_improved
$pdata$stb_hash_fast DD imagerel $LN14
	DD	imagerel $LN14+637
	DD	imagerel $unwind$stb_hash_fast
$pdata$stb_hash2 DD imagerel $LN5
	DD	imagerel $LN5+153
	DD	imagerel $unwind$stb_hash2
$pdata$stb_ptrmap_init DD imagerel $LN10
	DD	imagerel $LN10+320
	DD	imagerel $unwind$stb_ptrmap_init
$pdata$stb_ptrmap_create DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$stb_ptrmap_create
$pdata$stb_ptrmap_copy DD imagerel $LN9
	DD	imagerel $LN9+364
	DD	imagerel $unwind$stb_ptrmap_copy
$pdata$stb_ptrmap_destroy DD imagerel $LN8
	DD	imagerel $LN8+129
	DD	imagerel $unwind$stb_ptrmap_destroy
$pdata$stb_ptrmap_get_flag DD imagerel $LN14
	DD	imagerel $LN14+405
	DD	imagerel $unwind$stb_ptrmap_get_flag
$pdata$stb_ptrmap_get DD imagerel $LN5
	DD	imagerel $LN5+54
	DD	imagerel $unwind$stb_ptrmap_get
$pdata$stb_ptrmap_set DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$stb_ptrmap_set
$pdata$stb_ptrmap_add DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$stb_ptrmap_add
$pdata$stb_ptrmap_update DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$stb_ptrmap_update
$pdata$stb_ptrmap_remove DD imagerel $LN20
	DD	imagerel $LN20+555
	DD	imagerel $unwind$stb_ptrmap_remove
$pdata$stb_idict_init DD imagerel $LN10
	DD	imagerel $LN10+318
	DD	imagerel $unwind$stb_idict_init
$pdata$stb_idict_create DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$stb_idict_create
$pdata$stb_idict_copy DD imagerel $LN9
	DD	imagerel $LN9+347
	DD	imagerel $unwind$stb_idict_copy
$pdata$stb_idict_destroy DD imagerel $LN8
	DD	imagerel $LN8+123
	DD	imagerel $unwind$stb_idict_destroy
$pdata$stb_idict_get_flag DD imagerel $LN14
	DD	imagerel $LN14+369
	DD	imagerel $unwind$stb_idict_get_flag
$pdata$stb_idict_set DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$stb_idict_set
$pdata$stb_idict_add DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$stb_idict_add
$pdata$stb_idict_update DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$stb_idict_update
$pdata$stb_idict_remove DD imagerel $LN20
	DD	imagerel $LN20+520
	DD	imagerel $unwind$stb_idict_remove
$pdata$stb_ptrmap_delete DD imagerel $LN10
	DD	imagerel $LN10+212
	DD	imagerel $unwind$stb_ptrmap_delete
$pdata$stb_ptrmap_new DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$stb_ptrmap_new
$pdata$stb_idict_new_size DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$stb_idict_new_size
$pdata$stb_idict_remove_all DD imagerel $LN6
	DD	imagerel $LN6+108
	DD	imagerel $unwind$stb_idict_remove_all
$pdata$stb_uidict_reset DD imagerel $LN6
	DD	imagerel $LN6+107
	DD	imagerel $unwind$stb_uidict_reset
$pdata$?stb__stb_ptrmap_hash@@YAIPEAX@Z DD imagerel ?stb__stb_ptrmap_hash@@YAIPEAX@Z
	DD	imagerel ?stb__stb_ptrmap_hash@@YAIPEAX@Z+24
	DD	imagerel $unwind$?stb__stb_ptrmap_hash@@YAIPEAX@Z
$pdata$?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z DD imagerel ?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z
	DD	imagerel ?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z+370
	DD	imagerel $unwind$?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z
$pdata$?stb_ptrmap_getkey@@YAHPEAUstb__st_stb_ptrmap@@PEAXPEAPEAX@Z DD imagerel $LN12
	DD	imagerel $LN12+322
	DD	imagerel $unwind$?stb_ptrmap_getkey@@YAHPEAUstb__st_stb_ptrmap@@PEAXPEAPEAX@Z
$pdata$?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z DD imagerel ?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z
	DD	imagerel ?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z+906
	DD	imagerel $unwind$?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z
$pdata$?stb__stb_idict_hash@@YAIH@Z DD imagerel ?stb__stb_idict_hash@@YAIH@Z
	DD	imagerel ?stb__stb_idict_hash@@YAIH@Z+22
	DD	imagerel $unwind$?stb__stb_idict_hash@@YAIH@Z
$pdata$?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z DD imagerel ?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z
	DD	imagerel ?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z+357
	DD	imagerel $unwind$?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z
$pdata$?stb_idict_getkey@@YAHPEAUstb__st_stb_idict@@HPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+290
	DD	imagerel $unwind$?stb_idict_getkey@@YAHPEAUstb__st_stb_idict@@HPEAH@Z
$pdata$?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z DD imagerel ?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z
	DD	imagerel ?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z+848
	DD	imagerel $unwind$?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z
$pdata$?stb__stb_uidict_hash@@YAIH@Z DD imagerel ?stb__stb_uidict_hash@@YAIH@Z
	DD	imagerel ?stb__stb_uidict_hash@@YAIH@Z+22
	DD	imagerel $unwind$?stb__stb_uidict_hash@@YAIH@Z
$pdata$?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z DD imagerel $LN10
	DD	imagerel $LN10+315
	DD	imagerel $unwind$?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z
$pdata$?stb_uidict_create@@YAPEAUstb__st_stb_uidict@@XZ DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$?stb_uidict_create@@YAPEAUstb__st_stb_uidict@@XZ
$pdata$?stb_uidict_destroy@@YAXPEAUstb__st_stb_uidict@@@Z DD imagerel $LN8
	DD	imagerel $LN8+120
	DD	imagerel $unwind$?stb_uidict_destroy@@YAXPEAUstb__st_stb_uidict@@@Z
$pdata$?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z DD imagerel ?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z
	DD	imagerel ?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z+345
	DD	imagerel $unwind$?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z
$pdata$?stb_uidict_get_flag@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z DD imagerel $LN14
	DD	imagerel $LN14+363
	DD	imagerel $unwind$?stb_uidict_get_flag@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z
$pdata$?stb_uidict_getkey@@YAHPEAUstb__st_stb_uidict@@HPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+284
	DD	imagerel $unwind$?stb_uidict_getkey@@YAHPEAUstb__st_stb_uidict@@HPEAH@Z
$pdata$?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z DD imagerel ?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z
	DD	imagerel ?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z+835
	DD	imagerel $unwind$?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z
$pdata$?stb_uidict_set@@YAHPEAUstb__st_stb_uidict@@HI@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?stb_uidict_set@@YAHPEAUstb__st_stb_uidict@@HI@Z
$pdata$?stb_uidict_add@@YAHPEAUstb__st_stb_uidict@@HI@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?stb_uidict_add@@YAHPEAUstb__st_stb_uidict@@HI@Z
$pdata$?stb_uidict_update@@YAHPEAUstb__st_stb_uidict@@HI@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?stb_uidict_update@@YAHPEAUstb__st_stb_uidict@@HI@Z
$pdata$?stb_uidict_remove@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z DD imagerel $LN20
	DD	imagerel $LN20+514
	DD	imagerel $unwind$?stb_uidict_remove@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z
$pdata$?stb_uidict_copy@@YAPEAUstb__st_stb_uidict@@PEAU1@@Z DD imagerel $LN9
	DD	imagerel $LN9+341
	DD	imagerel $unwind$?stb_uidict_copy@@YAPEAUstb__st_stb_uidict@@PEAU1@@Z
$pdata$stb_sparse_ptr_matrix_new DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$stb_sparse_ptr_matrix_new
$pdata$stb_sparse_ptr_matrix_free DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$stb_sparse_ptr_matrix_free
$pdata$stb_sparse_ptr_matrix_get DD imagerel $LN5
	DD	imagerel $LN5+252
	DD	imagerel $unwind$stb_sparse_ptr_matrix_get
$pdata$?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z DD imagerel ?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z
	DD	imagerel ?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z+109
	DD	imagerel $unwind$?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z
$pdata$?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z DD imagerel $LN10
	DD	imagerel $LN10+340
	DD	imagerel $unwind$?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z
$pdata$?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ
$pdata$?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z
$pdata$?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z DD imagerel ?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z
	DD	imagerel ?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z+489
	DD	imagerel $unwind$?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z
$pdata$?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z DD imagerel $LN14
	DD	imagerel $LN14+638
	DD	imagerel $unwind$?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z
$pdata$?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z DD imagerel $LN5
	DD	imagerel $LN5+78
	DD	imagerel $unwind$?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z
$pdata$?stb__spmatrix_getkey@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAU2@@Z DD imagerel $LN13
	DD	imagerel $LN13+563
	DD	imagerel $unwind$?stb__spmatrix_getkey@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAU2@@Z
$pdata$?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z DD imagerel ?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z
	DD	imagerel ?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z+1418
	DD	imagerel $unwind$?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z
$pdata$?stb__spmatrix_set@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?stb__spmatrix_set@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z
$pdata$?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z
$pdata$?stb__spmatrix_update@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?stb__spmatrix_update@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z
$pdata$?stb__spmatrix_remove@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z DD imagerel $LN21
	DD	imagerel $LN21+805
	DD	imagerel $unwind$?stb__spmatrix_remove@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z
$pdata$?stb__spmatrix_copy@@YAPEAUstb__st_stb_spmatrix@@PEAU1@@Z DD imagerel $LN11
	DD	imagerel $LN11+464
	DD	imagerel $unwind$?stb__spmatrix_copy@@YAPEAUstb__st_stb_spmatrix@@PEAU1@@Z
$pdata$stb_sdict_init DD imagerel $LN10
	DD	imagerel $LN10+323
	DD	imagerel $unwind$stb_sdict_init
$pdata$stb_sdict_create DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$stb_sdict_create
$pdata$stb_sdict_copy DD imagerel $LN8
	DD	imagerel $LN8+158
	DD	imagerel $unwind$stb_sdict_copy
$pdata$stb_sdict_destroy DD imagerel $LN9
	DD	imagerel $LN9+178
	DD	imagerel $unwind$stb_sdict_destroy
$pdata$stb_sdict_get_flag DD imagerel $LN16
	DD	imagerel $LN16+478
	DD	imagerel $unwind$stb_sdict_get_flag
$pdata$stb_sdict_get DD imagerel $LN5
	DD	imagerel $LN5+54
	DD	imagerel $unwind$stb_sdict_get
$pdata$stb_sdict_set DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$stb_sdict_set
$pdata$stb_sdict_add DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$stb_sdict_add
$pdata$stb_sdict_update DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$stb_sdict_update
$pdata$stb_sdict_remove DD imagerel $LN23
	DD	imagerel $LN23+667
	DD	imagerel $unwind$stb_sdict_remove
$pdata$stb_sdict_new DD imagerel $LN6
	DD	imagerel $LN6+86
	DD	imagerel $unwind$stb_sdict_new
$pdata$stb_sdict_delete DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$stb_sdict_delete
$pdata$stb_sdict_change DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$stb_sdict_change
$pdata$?stb__stb_sdict_hash@@YAIPEAD@Z DD imagerel ?stb__stb_sdict_hash@@YAIPEAD@Z
	DD	imagerel ?stb__stb_sdict_hash@@YAIPEAD@Z+24
	DD	imagerel $unwind$?stb__stb_sdict_hash@@YAIPEAD@Z
$pdata$?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z DD imagerel ?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z
	DD	imagerel ?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z+376
	DD	imagerel $unwind$?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z
$pdata$?stb_sdict_getkey@@YAHPEAUstb__st_stb_sdict@@PEADPEAPEAD@Z DD imagerel $LN14
	DD	imagerel $LN14+395
	DD	imagerel $unwind$?stb_sdict_getkey@@YAHPEAUstb__st_stb_sdict@@PEADPEAPEAD@Z
$pdata$?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z DD imagerel ?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z
	DD	imagerel ?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z+1216
	DD	imagerel $unwind$?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z
$pdata$?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z DD imagerel $LN11
	DD	imagerel $LN11+580
	DD	imagerel $unwind$?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z
$pdata$stb_fput_varlen64 DD imagerel $LN27
	DD	imagerel $LN27+818
	DD	imagerel $unwind$stb_fput_varlen64
$pdata$stb_fget_varlen64 DD imagerel $LN21
	DD	imagerel $LN21+629
	DD	imagerel $unwind$stb_fget_varlen64
$pdata$stb_file DD imagerel $LN7
	DD	imagerel $LN7+245
	DD	imagerel $unwind$stb_file
$pdata$stb_file_max DD imagerel $LN4
	DD	imagerel $LN4+197
	DD	imagerel $unwind$stb_file_max
$pdata$stb_filelen DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$stb_filelen
$pdata$stb_filewrite DD imagerel $LN11
	DD	imagerel $LN11+303
	DD	imagerel $unwind$stb_filewrite
$pdata$stb_filewritestr DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$stb_filewritestr
$pdata$stb_stringfile DD imagerel $LN21
	DD	imagerel $LN21+695
	DD	imagerel $unwind$stb_stringfile
$pdata$stb_stringfile_trimmed DD imagerel $LN9
	DD	imagerel $LN9+223
	DD	imagerel $unwind$stb_stringfile_trimmed
$pdata$stb_fgets DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$stb_fgets
$pdata$stb_fgets_malloc DD imagerel $LN17
	DD	imagerel $LN17+558
	DD	imagerel $unwind$stb_fgets_malloc
$pdata$stb_fexists DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$stb_fexists
$pdata$stb_fcmp DD imagerel $LN9
	DD	imagerel $LN9+231
	DD	imagerel $unwind$stb_fcmp
$pdata$stb_feq DD imagerel $LN12
	DD	imagerel $LN12+315
	DD	imagerel $unwind$stb_feq
$pdata$stb_ftimestamp DD imagerel $LN5
	DD	imagerel $LN5+81
	DD	imagerel $unwind$stb_ftimestamp
$pdata$stb_fullpath DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$stb_fullpath
$pdata$stb_fopen DD imagerel $LN11
	DD	imagerel $LN11+469
	DD	imagerel $unwind$stb_fopen
$pdata$stb_fclose DD imagerel $LN20
	DD	imagerel $LN20+767
	DD	imagerel $unwind$stb_fclose
$pdata$stb_copyfile DD imagerel $LN11
	DD	imagerel $LN11+433
	DD	imagerel $unwind$stb_copyfile
$pdata$stb_fwrite32 DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$stb_fwrite32
$pdata$stb_fput_varlen DD imagerel $LN5
	DD	imagerel $LN5+65
	DD	imagerel $unwind$stb_fput_varlen
$pdata$stb_fput_varlenu DD imagerel $LN13
	DD	imagerel $LN13+287
	DD	imagerel $unwind$stb_fput_varlenu
$pdata$stb_fget_varlen DD imagerel $LN5
	DD	imagerel $LN5+67
	DD	imagerel $unwind$stb_fget_varlen
$pdata$stb_fget_varlenu DD imagerel $LN11
	DD	imagerel $LN11+262
	DD	imagerel $unwind$stb_fget_varlenu
$pdata$stb_fput_ranged DD imagerel $LN8
	DD	imagerel $LN8+197
	DD	imagerel $unwind$stb_fput_ranged
$pdata$stb_fget_ranged DD imagerel $LN6
	DD	imagerel $LN6+186
	DD	imagerel $unwind$stb_fget_ranged
$pdata$stb_size_varlen DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$stb_size_varlen
$pdata$?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z DD imagerel ?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z
	DD	imagerel ?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z+310
	DD	imagerel $unwind$?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z
$pdata$?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z DD imagerel ?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z
	DD	imagerel ?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z+329
	DD	imagerel $unwind$?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z
$pdata$?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z
$pdata$?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z
$pdata$?stb_strdup@@YAPEADPEADPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?stb_strdup@@YAPEADPEADPEAX@Z
$pdata$?stb_strip_final_slash@@YAPEADPEAD@Z DD imagerel $LN9
	DD	imagerel $LN9+160
	DD	imagerel $unwind$?stb_strip_final_slash@@YAPEADPEAD@Z
$pdata$?stb_strip_final_slash_regardless@@YAPEADPEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+121
	DD	imagerel $unwind$?stb_strip_final_slash_regardless@@YAPEADPEAD@Z
$pdata$stb_getopt_param DD imagerel $LN51
	DD	imagerel $LN51+1610
	DD	imagerel $unwind$stb_getopt_param
$pdata$stb_getopt DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$stb_getopt
$pdata$stb_getopt_free DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$stb_getopt_free
$pdata$stb_readdir_files DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$stb_readdir_files
$pdata$stb_readdir_files_mask DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$stb_readdir_files_mask
$pdata$stb_readdir_subdirs DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$stb_readdir_subdirs
$pdata$stb_readdir_subdirs_mask DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$stb_readdir_subdirs_mask
$pdata$stb_readdir_free DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$stb_readdir_free
$pdata$stb_readdir_recursive DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$stb_readdir_recursive
$pdata$stb_delete_directory_recursive DD imagerel $LN14
	DD	imagerel $LN14+287
	DD	imagerel $unwind$stb_delete_directory_recursive
$pdata$?isdotdirname@@YAHPEAD@Z DD imagerel ?isdotdirname@@YAHPEAD@Z
	DD	imagerel ?isdotdirname@@YAHPEAD@Z+163
	DD	imagerel $unwind$?isdotdirname@@YAHPEAD@Z
$pdata$stb_wildmatchi DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$stb_wildmatchi
$pdata$?readdir_raw@@YAPEAPEADPEADH0@Z DD imagerel ?readdir_raw@@YAPEAPEADPEADH0@Z
	DD	imagerel ?readdir_raw@@YAPEAPEADPEADH0@Z+1041
	DD	imagerel $unwind$?readdir_raw@@YAPEAPEADPEADH0@Z
$pdata$?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z DD imagerel ?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z
	DD	imagerel ?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z+754
	DD	imagerel $unwind$?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z
$pdata$stb_dirtree2_from_files_relative DD imagerel $LN68
	DD	imagerel $LN68+2233
	DD	imagerel $unwind$stb_dirtree2_from_files_relative
$pdata$stb_dirtree2_from_files DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$stb_dirtree2_from_files
$pdata$stb_dir_is_prefix DD imagerel $LN7
	DD	imagerel $LN7+116
	DD	imagerel $unwind$stb_dir_is_prefix
$pdata$stb_adler32 DD imagerel $LN11
	DD	imagerel $LN11+638
	DD	imagerel $unwind$stb_adler32
$pdata$stb_crc32_block DD imagerel $LN15
	DD	imagerel $LN15+260
	DD	imagerel $unwind$stb_crc32_block
$pdata$stb_crc32 DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$stb_crc32
$pdata$stb_sha1 DD imagerel $LN24
	DD	imagerel $LN24+983
	DD	imagerel $unwind$stb_sha1
$pdata$stb_sha1_file DD imagerel $LN17
	DD	imagerel $LN17+970
	DD	imagerel $unwind$stb_sha1_file
$pdata$stb_sha1_readable DD imagerel $LN8
	DD	imagerel $LN8+385
	DD	imagerel $unwind$stb_sha1_readable
$pdata$?stb__sha1@@YAXPEAEQEAI@Z DD imagerel ?stb__sha1@@YAXPEAEQEAI@Z
	DD	imagerel ?stb__sha1@@YAXPEAEQEAI@Z+1319
	DD	imagerel $unwind$?stb__sha1@@YAXPEAEQEAI@Z
$pdata$stb_reg_open DD imagerel $LN15
	DD	imagerel $LN15+382
	DD	imagerel $unwind$stb_reg_open
$pdata$stb_reg_close DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$stb_reg_close
$pdata$stb_reg_read DD imagerel $LN7
	DD	imagerel $LN7+138
	DD	imagerel $unwind$stb_reg_read
$pdata$stb_reg_read_string DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$stb_reg_read_string
$pdata$stb_reg_write DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$stb_reg_write
$pdata$stb_reg_write_string DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$stb_reg_write_string
$pdata$stb_cfg_open DD imagerel $LN22
	DD	imagerel $LN22+992
	DD	imagerel $unwind$stb_cfg_open
$pdata$stb_cfg_close DD imagerel $LN9
	DD	imagerel $LN9+431
	DD	imagerel $unwind$stb_cfg_close
$pdata$stb_cfg_read DD imagerel $LN12
	DD	imagerel $LN12+287
	DD	imagerel $unwind$stb_cfg_read
$pdata$stb_cfg_write DD imagerel $LN21
	DD	imagerel $LN21+743
	DD	imagerel $unwind$stb_cfg_write
$pdata$stb_cfg_read_string DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$stb_cfg_read_string
$pdata$stb_cfg_write_string DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$stb_cfg_write_string
$pdata$stb_cfg_delete DD imagerel $LN10
	DD	imagerel $LN10+316
	DD	imagerel $unwind$stb_cfg_delete
$pdata$stb_cfg_set_directory DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$stb_cfg_set_directory
$pdata$?stb_dirtree_free@@YAXPEAUstb_dirtree@@@Z DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?stb_dirtree_free@@YAXPEAUstb_dirtree@@@Z
$pdata$?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+164
	DD	imagerel $unwind$?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z
$pdata$?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z DD imagerel $LN8
	DD	imagerel $LN8+492
	DD	imagerel $unwind$?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z
$pdata$?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z DD imagerel $LN13
	DD	imagerel $LN13+398
	DD	imagerel $unwind$?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z
$pdata$?stb_dirtree_db_add_dir@@YAXPEAUstb_dirtree@@PEAD_J@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?stb_dirtree_db_add_dir@@YAXPEAUstb_dirtree@@PEAD_J@Z
$pdata$?stb_dirtree_db_add_file@@YAXPEAUstb_dirtree@@PEADH_J2@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?stb_dirtree_db_add_file@@YAXPEAUstb_dirtree@@PEADH_J2@Z
$pdata$?stb_dirtree_db_read@@YAXPEAUstb_dirtree@@PEAD1@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?stb_dirtree_db_read@@YAXPEAUstb_dirtree@@PEAD1@Z
$pdata$?stb_dirtree_db_write@@YAXPEAUstb_dirtree@@PEAD1@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?stb_dirtree_db_write@@YAXPEAUstb_dirtree@@PEAD1@Z
$pdata$?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z DD imagerel ?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z
	DD	imagerel ?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z+417
	DD	imagerel $unwind$?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z
$pdata$?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z DD imagerel ?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z
	DD	imagerel ?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z+514
	DD	imagerel $unwind$?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z
$pdata$?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z DD imagerel ?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z
	DD	imagerel ?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z+1199
	DD	imagerel $unwind$?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z
$pdata$?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z DD imagerel ?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z
	DD	imagerel ?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z+1045
	DD	imagerel $unwind$?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z
$pdata$?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z DD imagerel ?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z
	DD	imagerel ?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z+1257
	DD	imagerel $unwind$?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z
$pdata$?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z DD imagerel ?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z
	DD	imagerel ?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z+1553
	DD	imagerel $unwind$?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z
$pdata$?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z DD imagerel ?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z
	DD	imagerel ?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z+58
	DD	imagerel $unwind$?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z
$pdata$?stb__hashfind@@YAHPEAX@Z DD imagerel ?stb__hashfind@@YAHPEAX@Z
	DD	imagerel ?stb__hashfind@@YAHPEAX@Z+197
	DD	imagerel $unwind$?stb__hashfind@@YAHPEAX@Z
$pdata$?stb__historyfind@@YAHPEAX@Z DD imagerel ?stb__historyfind@@YAHPEAX@Z
	DD	imagerel ?stb__historyfind@@YAHPEAX@Z+109
	DD	imagerel $unwind$?stb__historyfind@@YAHPEAX@Z
$pdata$?stb__add_alloc@@YAXPEAX_KPEADH@Z DD imagerel ?stb__add_alloc@@YAXPEAX_KPEADH@Z
	DD	imagerel ?stb__add_alloc@@YAXPEAX_KPEADH@Z+368
	DD	imagerel $unwind$?stb__add_alloc@@YAXPEAX_KPEADH@Z
$pdata$?stb__grow_alloc@@YAXXZ DD imagerel ?stb__grow_alloc@@YAXXZ
	DD	imagerel ?stb__grow_alloc@@YAXXZ+529
	DD	imagerel $unwind$?stb__grow_alloc@@YAXXZ
$pdata$?stb__remove_alloc@@YAXHPEADH@Z DD imagerel ?stb__remove_alloc@@YAXHPEADH@Z
	DD	imagerel ?stb__remove_alloc@@YAXHPEADH@Z+193
	DD	imagerel $unwind$?stb__remove_alloc@@YAXHPEADH@Z
$pdata$stb_ps_find DD imagerel $LN23
	DD	imagerel $LN23+601
	DD	imagerel $unwind$stb_ps_find
$pdata$stb_ps_add DD imagerel $LN29
	DD	imagerel $LN29+1399
	DD	imagerel $unwind$stb_ps_add
$pdata$stb_ps_remove DD imagerel $LN52
	DD	imagerel $LN52+1774
	DD	imagerel $unwind$stb_ps_remove
$pdata$stb_ps_remove_any DD imagerel $LN20
	DD	imagerel $LN20+783
	DD	imagerel $unwind$stb_ps_remove_any
$pdata$stb_ps_delete DD imagerel $LN9
	DD	imagerel $LN9+106
	DD	imagerel $unwind$stb_ps_delete
$pdata$stb_ps_count DD imagerel $LN19
	DD	imagerel $LN19+336
	DD	imagerel $unwind$stb_ps_count
$pdata$stb_ps_copy DD imagerel $LN13
	DD	imagerel $LN13+356
	DD	imagerel $unwind$stb_ps_copy
$pdata$stb_ps_subset DD imagerel $LN8
	DD	imagerel $LN8+125
	DD	imagerel $unwind$stb_ps_subset
$pdata$stb_ps_eq DD imagerel $LN4
	DD	imagerel $LN4+70
	DD	imagerel $unwind$stb_ps_eq
$pdata$stb_ps_getlist DD imagerel $LN18
	DD	imagerel $LN18+541
	DD	imagerel $unwind$stb_ps_getlist
$pdata$stb_ps_writelist DD imagerel $LN23
	DD	imagerel $LN23+491
	DD	imagerel $unwind$stb_ps_writelist
$pdata$stb_ps_enum DD imagerel $LN24
	DD	imagerel $LN24+470
	DD	imagerel $unwind$stb_ps_enum
$pdata$stb_ps_fastlist DD imagerel $LN10
	DD	imagerel $LN10+231
	DD	imagerel $unwind$stb_ps_fastlist
$pdata$?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z DD imagerel ?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z
	DD	imagerel ?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z+25
	DD	imagerel $unwind$?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z
$pdata$?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z DD imagerel ?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z
	DD	imagerel ?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z+130
	DD	imagerel $unwind$?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z
$pdata$?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z DD imagerel ?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z
	DD	imagerel ?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z+165
	DD	imagerel $unwind$?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z
$pdata$?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z DD imagerel ?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z
	DD	imagerel ?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z+366
	DD	imagerel $unwind$?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z
$pdata$stb_srandLCG DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$stb_srandLCG
$pdata$stb_frandLCG DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$stb_frandLCG
$pdata$stb_srand DD imagerel $LN6
	DD	imagerel $LN6+138
	DD	imagerel $unwind$stb_srand
$pdata$stb_rand DD imagerel $LN11
	DD	imagerel $LN11+569
	DD	imagerel $unwind$stb_rand
$pdata$stb_frand DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$stb_frand
$pdata$stb_shuffle DD imagerel $LN8
	DD	imagerel $LN8+202
	DD	imagerel $unwind$stb_shuffle
$pdata$stb_reverse DD imagerel $LN6
	DD	imagerel $LN6+145
	DD	imagerel $unwind$stb_reverse
$pdata$stb_dupe_free DD imagerel $LN9
	DD	imagerel $LN9+159
	DD	imagerel $unwind$stb_dupe_free
$pdata$stb_dupe_create DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$stb_dupe_create
$pdata$stb_dupe_add DD imagerel $LN12
	DD	imagerel $LN12+480
	DD	imagerel $unwind$stb_dupe_add
$pdata$stb_dupe_finish DD imagerel $LN87
	DD	imagerel $LN87+2815
	DD	imagerel $unwind$stb_dupe_finish
$pdata$stb_dupe_numsets DD imagerel $LN6
	DD	imagerel $LN6+95
	DD	imagerel $unwind$stb_dupe_numsets
$pdata$stb_dupe_set DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$stb_dupe_set
$pdata$stb_dupe_set_count DD imagerel $LN6
	DD	imagerel $LN6+117
	DD	imagerel $unwind$stb_dupe_set_count
$pdata$?stb__dupe_compare@@YAHPEBX0@Z DD imagerel ?stb__dupe_compare@@YAHPEBX0@Z
	DD	imagerel ?stb__dupe_compare@@YAHPEBX0@Z+71
	DD	imagerel $unwind$?stb__dupe_compare@@YAHPEBX0@Z
$pdata$stb_bitset_new DD imagerel $LN7
	DD	imagerel $LN7+109
	DD	imagerel $unwind$stb_bitset_new
$pdata$stb_bitset_union DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$stb_bitset_union
$pdata$stb_bitset_getlist DD imagerel $LN16
	DD	imagerel $LN16+354
	DD	imagerel $unwind$stb_bitset_getlist
$pdata$stb_bitset_eq DD imagerel $LN7
	DD	imagerel $LN7+88
	DD	imagerel $unwind$stb_bitset_eq
$pdata$stb_bitset_disjoint DD imagerel $LN7
	DD	imagerel $LN7+92
	DD	imagerel $unwind$stb_bitset_disjoint
$pdata$stb_bitset_disjoint_0 DD imagerel $LN7
	DD	imagerel $LN7+93
	DD	imagerel $unwind$stb_bitset_disjoint_0
$pdata$stb_bitset_subset DD imagerel $LN7
	DD	imagerel $LN7+102
	DD	imagerel $unwind$stb_bitset_subset
$pdata$stb_bitset_unioneq_changed DD imagerel $LN7
	DD	imagerel $LN7+137
	DD	imagerel $unwind$stb_bitset_unioneq_changed
$pdata$stb_wordwrap DD imagerel $LN47
	DD	imagerel $LN47+1314
	DD	imagerel $unwind$stb_wordwrap
$pdata$stb_wordwrapalloc DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$stb_wordwrapalloc
$pdata$stb_wildmatch DD imagerel $LN5
	DD	imagerel $LN5+66
	DD	imagerel $unwind$stb_wildmatch
$pdata$stb_wildfind DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$stb_wildfind
$pdata$stb_wildfindi DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$stb_wildfindi
$pdata$stb_regex_matcher DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$stb_regex_matcher
$pdata$stb_matcher_match DD imagerel $LN49
	DD	imagerel $LN49+1554
	DD	imagerel $unwind$stb_matcher_match
$pdata$stb_matcher_find DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$stb_matcher_find
$pdata$stb_matcher_free DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stb_matcher_free
$pdata$stb_lex_matcher DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stb_lex_matcher
$pdata$stb_lex_item DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$stb_lex_item
$pdata$stb_lex_item_wild DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$stb_lex_item_wild
$pdata$stb_lex DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$stb_lex
$pdata$?stb__match_qstring@@YAHPEAD0HH@Z DD imagerel ?stb__match_qstring@@YAHPEAD0HH@Z
	DD	imagerel ?stb__match_qstring@@YAHPEAD0HH@Z+294
	DD	imagerel $unwind$?stb__match_qstring@@YAHPEAD0HH@Z
$pdata$?stb__find_qstring@@YAHPEAD0HH@Z DD imagerel ?stb__find_qstring@@YAHPEAD0HH@Z
	DD	imagerel ?stb__find_qstring@@YAHPEAD0HH@Z+342
	DD	imagerel $unwind$?stb__find_qstring@@YAHPEAD0HH@Z
$pdata$?stb__wildmatch_raw2@@YAHPEAD0HH@Z DD imagerel $LN49
	DD	imagerel $LN49+1061
	DD	imagerel $unwind$?stb__wildmatch_raw2@@YAHPEAD0HH@Z
$pdata$?stb__wildmatch_raw@@YAHPEAD0HH@Z DD imagerel $LN8
	DD	imagerel $LN8+357
	DD	imagerel $unwind$?stb__wildmatch_raw@@YAHPEAD0HH@Z
$pdata$?stb__add_node@@YAHPEAUstb_matcher@@@Z DD imagerel ?stb__add_node@@YAHPEAUstb_matcher@@@Z
	DD	imagerel ?stb__add_node@@YAHPEAUstb_matcher@@@Z+451
	DD	imagerel $unwind$?stb__add_node@@YAHPEAUstb_matcher@@@Z
$pdata$?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z DD imagerel ?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z
	DD	imagerel ?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z+584
	DD	imagerel $unwind$?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z
$pdata$?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z DD imagerel ?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z
	DD	imagerel ?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z+567
	DD	imagerel $unwind$?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z
$pdata$?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z DD imagerel ?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
	DD	imagerel ?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z+408
	DD	imagerel $unwind$?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
$pdata$?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z DD imagerel ?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
	DD	imagerel ?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z+2069
	DD	imagerel $unwind$?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
$pdata$?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z DD imagerel ?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
	DD	imagerel ?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z+564
	DD	imagerel $unwind$?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
$pdata$?stb__opt@@YAHPEAUstb_matcher@@H@Z DD imagerel ?stb__opt@@YAHPEAUstb_matcher@@H@Z
	DD	imagerel ?stb__opt@@YAHPEAUstb_matcher@@H@Z+192
	DD	imagerel $unwind$?stb__opt@@YAHPEAUstb_matcher@@H@Z
$pdata$?stb__optimize@@YAXPEAUstb_matcher@@@Z DD imagerel ?stb__optimize@@YAXPEAUstb_matcher@@@Z
	DD	imagerel ?stb__optimize@@YAXPEAUstb_matcher@@@Z+400
	DD	imagerel $unwind$?stb__optimize@@YAXPEAUstb_matcher@@@Z
$pdata$?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ DD imagerel ?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ
	DD	imagerel ?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ+189
	DD	imagerel $unwind$?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ
$pdata$?stb__lex_reset@@YAXPEAUstb_matcher@@@Z DD imagerel ?stb__lex_reset@@YAXPEAUstb_matcher@@@Z
	DD	imagerel ?stb__lex_reset@@YAXPEAUstb_matcher@@@Z+103
	DD	imagerel $unwind$?stb__lex_reset@@YAXPEAUstb_matcher@@@Z
$pdata$?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z DD imagerel ?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z
	DD	imagerel ?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z+108
	DD	imagerel $unwind$?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z
$pdata$?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z DD imagerel ?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z
	DD	imagerel ?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z+162
	DD	imagerel $unwind$?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z
$pdata$?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z DD imagerel ?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z
	DD	imagerel ?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z+322
	DD	imagerel $unwind$?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z
$pdata$?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z DD imagerel ?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z
	DD	imagerel ?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z+295
	DD	imagerel $unwind$?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z
$pdata$?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z DD imagerel $LN52
	DD	imagerel $LN52+1869
	DD	imagerel $unwind$?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z
$pdata$?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z DD imagerel ?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z
	DD	imagerel ?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z+2803
	DD	imagerel $unwind$?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z
$pdata$stb_decompress DD imagerel $LN16
	DD	imagerel $LN16+777
	DD	imagerel $unwind$stb_decompress
$pdata$stb_compress DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$stb_compress
$pdata$stb_compress_hashsize DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$stb_compress_hashsize
$pdata$stb_compress_tofile DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$stb_compress_tofile
$pdata$stb_compress_intofile DD imagerel $LN5
	DD	imagerel $LN5+99
	DD	imagerel $unwind$stb_compress_intofile
$pdata$stb_decompress_fromfile DD imagerel $LN10
	DD	imagerel $LN10+418
	DD	imagerel $unwind$stb_decompress_fromfile
$pdata$stb_compress_stream_start DD imagerel $LN5
	DD	imagerel $LN5+67
	DD	imagerel $unwind$stb_compress_stream_start
$pdata$stb_compress_stream_end DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$stb_compress_stream_end
$pdata$stb_write DD imagerel $LN19
	DD	imagerel $LN19+876
	DD	imagerel $unwind$stb_write
$pdata$?stb__match@@YAXPEAEI@Z DD imagerel ?stb__match@@YAXPEAEI@Z
	DD	imagerel ?stb__match@@YAXPEAEI@Z+240
	DD	imagerel $unwind$?stb__match@@YAXPEAEI@Z
$pdata$?stb__lit@@YAXPEAEI@Z DD imagerel ?stb__lit@@YAXPEAEI@Z
	DD	imagerel ?stb__lit@@YAXPEAEI@Z+205
	DD	imagerel $unwind$?stb__lit@@YAXPEAEI@Z
$pdata$?stb_decompress_token@@YAPEAEPEAE@Z DD imagerel ?stb_decompress_token@@YAPEAEPEAE@Z
	DD	imagerel ?stb_decompress_token@@YAPEAEPEAE@Z+1260
	DD	imagerel $unwind$?stb_decompress_token@@YAPEAEPEAE@Z
$pdata$?stb_matchlen@@YAIPEAE0I@Z DD imagerel ?stb_matchlen@@YAIPEAE0I@Z
	DD	imagerel ?stb_matchlen@@YAIPEAE0I@Z+88
	DD	imagerel $unwind$?stb_matchlen@@YAIPEAE0I@Z
$pdata$?stb__write@@YAXE@Z DD imagerel ?stb__write@@YAXE@Z
	DD	imagerel ?stb__write@@YAXE@Z+47
	DD	imagerel $unwind$?stb__write@@YAXE@Z
$pdata$?stb_out2@@YAXI@Z DD imagerel ?stb_out2@@YAXI@Z
	DD	imagerel ?stb_out2@@YAXI@Z+126
	DD	imagerel $unwind$?stb_out2@@YAXI@Z
$pdata$?stb_out3@@YAXI@Z DD imagerel ?stb_out3@@YAXI@Z
	DD	imagerel ?stb_out3@@YAXI@Z+186
	DD	imagerel $unwind$?stb_out3@@YAXI@Z
$pdata$?stb_out4@@YAXI@Z DD imagerel ?stb_out4@@YAXI@Z
	DD	imagerel ?stb_out4@@YAXI@Z+246
	DD	imagerel $unwind$?stb_out4@@YAXI@Z
$pdata$?outliterals@@YAXPEAE_J@Z DD imagerel ?outliterals@@YAXPEAE_J@Z
	DD	imagerel ?outliterals@@YAXPEAE_J@Z+291
	DD	imagerel $unwind$?outliterals@@YAXPEAE_J@Z
$pdata$?stb_not_crap@@YAHHH@Z DD imagerel ?stb_not_crap@@YAHHH@Z
	DD	imagerel ?stb_not_crap@@YAHHH@Z+87
	DD	imagerel $unwind$?stb_not_crap@@YAHHH@Z
$pdata$?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z DD imagerel ?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z
	DD	imagerel ?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z+2951
	DD	imagerel $unwind$?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z
$pdata$?stb_compress_inner@@YAHPEAEI@Z DD imagerel ?stb_compress_inner@@YAHPEAEI@Z
	DD	imagerel ?stb_compress_inner@@YAHPEAEI@Z+437
	DD	imagerel $unwind$?stb_compress_inner@@YAHPEAEI@Z
$pdata$?stb_out_backpatch_id@@YA_KXZ DD imagerel ?stb_out_backpatch_id@@YA_KXZ
	DD	imagerel ?stb_out_backpatch_id@@YA_KXZ+45
	DD	imagerel $unwind$?stb_out_backpatch_id@@YA_KXZ
$pdata$?stb_out_backpatch@@YAX_KI@Z DD imagerel ?stb_out_backpatch@@YAX_KI@Z
	DD	imagerel ?stb_out_backpatch@@YAX_KI@Z+179
	DD	imagerel $unwind$?stb_out_backpatch@@YAX_KI@Z
$pdata$?stb_compress_streaming_start@@YAHXZ DD imagerel ?stb_compress_streaming_start@@YAHXZ
	DD	imagerel ?stb_compress_streaming_start@@YAHXZ+399
	DD	imagerel $unwind$?stb_compress_streaming_start@@YAHXZ
$pdata$?stb_compress_streaming_end@@YAHXZ DD imagerel ?stb_compress_streaming_end@@YAHXZ
	DD	imagerel ?stb_compress_streaming_end@@YAHXZ+237
	DD	imagerel $unwind$?stb_compress_streaming_end@@YAHXZ
$pdata$stb_getc DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$stb_getc
$pdata$stb_putc DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$stb_putc
$pdata$stb_getdata DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$stb_getdata
$pdata$stb_putdata DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$stb_putdata
$pdata$stb_tell DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$stb_tell
$pdata$stb_size DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$stb_size
$pdata$stb_backpatch DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$stb_backpatch
$pdata$?stb_close@@YAXPEAUstbfile@@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?stb_close@@YAXPEAUstbfile@@@Z
$pdata$?stb__fgetbyte@@YAHPEAUstbfile@@@Z DD imagerel ?stb__fgetbyte@@YAHPEAUstbfile@@@Z
	DD	imagerel ?stb__fgetbyte@@YAHPEAUstbfile@@@Z+29
	DD	imagerel $unwind$?stb__fgetbyte@@YAHPEAUstbfile@@@Z
$pdata$?stb__fputbyte@@YAHPEAUstbfile@@H@Z DD imagerel ?stb__fputbyte@@YAHPEAUstbfile@@H@Z
	DD	imagerel ?stb__fputbyte@@YAHPEAUstbfile@@H@Z+63
	DD	imagerel $unwind$?stb__fputbyte@@YAHPEAUstbfile@@H@Z
$pdata$?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z DD imagerel ?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z
	DD	imagerel ?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z+56
	DD	imagerel $unwind$?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z
$pdata$?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z DD imagerel ?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z
	DD	imagerel ?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z+56
	DD	imagerel $unwind$?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z
$pdata$?stb__fsize@@YAIPEAUstbfile@@@Z DD imagerel ?stb__fsize@@YAIPEAUstbfile@@@Z
	DD	imagerel ?stb__fsize@@YAIPEAUstbfile@@@Z+28
	DD	imagerel $unwind$?stb__fsize@@YAIPEAUstbfile@@@Z
$pdata$?stb__ftell@@YAIPEAUstbfile@@@Z DD imagerel ?stb__ftell@@YAIPEAUstbfile@@@Z
	DD	imagerel ?stb__ftell@@YAIPEAUstbfile@@@Z+29
	DD	imagerel $unwind$?stb__ftell@@YAIPEAUstbfile@@@Z
$pdata$?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z DD imagerel ?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z
	DD	imagerel ?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z+105
	DD	imagerel $unwind$?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z
$pdata$?stb__fclose@@YAXPEAUstbfile@@@Z DD imagerel ?stb__fclose@@YAXPEAUstbfile@@@Z
	DD	imagerel ?stb__fclose@@YAXPEAUstbfile@@@Z+29
	DD	imagerel $unwind$?stb__fclose@@YAXPEAUstbfile@@@Z
$pdata$?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z DD imagerel $LN4
	DD	imagerel $LN4+236
	DD	imagerel $unwind$?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z
$pdata$?stb__nogetbyte@@YAHPEAUstbfile@@@Z DD imagerel ?stb__nogetbyte@@YAHPEAUstbfile@@@Z
	DD	imagerel ?stb__nogetbyte@@YAHPEAUstbfile@@@Z+53
	DD	imagerel $unwind$?stb__nogetbyte@@YAHPEAUstbfile@@@Z
$pdata$?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z DD imagerel ?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z
	DD	imagerel ?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z+60
	DD	imagerel $unwind$?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z
$pdata$?stb__noputbyte@@YAHPEAUstbfile@@H@Z DD imagerel ?stb__noputbyte@@YAHPEAUstbfile@@H@Z
	DD	imagerel ?stb__noputbyte@@YAHPEAUstbfile@@H@Z+54
	DD	imagerel $unwind$?stb__noputbyte@@YAHPEAUstbfile@@H@Z
$pdata$?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z DD imagerel ?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z
	DD	imagerel ?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z+60
	DD	imagerel $unwind$?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z
$pdata$?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z DD imagerel ?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z
	DD	imagerel ?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z+62
	DD	imagerel $unwind$?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z
$pdata$?stb__bgetbyte@@YAHPEAUstbfile@@@Z DD imagerel ?stb__bgetbyte@@YAHPEAUstbfile@@@Z
	DD	imagerel ?stb__bgetbyte@@YAHPEAUstbfile@@@Z+82
	DD	imagerel $unwind$?stb__bgetbyte@@YAHPEAUstbfile@@@Z
$pdata$?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z DD imagerel ?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z
	DD	imagerel ?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z+125
	DD	imagerel $unwind$?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z
$pdata$?stb__bclose@@YAXPEAUstbfile@@@Z DD imagerel ?stb__bclose@@YAXPEAUstbfile@@@Z
	DD	imagerel ?stb__bclose@@YAXPEAUstbfile@@@Z+40
	DD	imagerel $unwind$?stb__bclose@@YAXPEAUstbfile@@@Z
$pdata$?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+250
	DD	imagerel $unwind$?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z
$pdata$?stb_open_inbuffer_free@@YAPEAUstbfile@@PEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$?stb_open_inbuffer_free@@YAPEAUstbfile@@PEAXI@Z
$pdata$?stb__fclose2@@YAXPEAUstbfile@@@Z DD imagerel ?stb__fclose2@@YAXPEAUstbfile@@@Z
	DD	imagerel ?stb__fclose2@@YAXPEAUstbfile@@@Z+36
	DD	imagerel $unwind$?stb__fclose2@@YAXPEAUstbfile@@@Z
$pdata$?stb_open@@YAPEAUstbfile@@PEAD0@Z DD imagerel $LN9
	DD	imagerel $LN9+196
	DD	imagerel $unwind$?stb_open@@YAPEAUstbfile@@PEAD0@Z
$pdata$?stb__aputbyte@@YAHPEAUstbfile@@H@Z DD imagerel ?stb__aputbyte@@YAHPEAUstbfile@@H@Z
	DD	imagerel ?stb__aputbyte@@YAHPEAUstbfile@@H@Z+311
	DD	imagerel $unwind$?stb__aputbyte@@YAHPEAUstbfile@@H@Z
$pdata$?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z DD imagerel ?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z
	DD	imagerel ?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z+356
	DD	imagerel $unwind$?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z
$pdata$?stb__asize@@YAIPEAUstbfile@@@Z DD imagerel ?stb__asize@@YAIPEAUstbfile@@@Z
	DD	imagerel ?stb__asize@@YAIPEAUstbfile@@@Z+53
	DD	imagerel $unwind$?stb__asize@@YAIPEAUstbfile@@@Z
$pdata$?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z DD imagerel ?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z
	DD	imagerel ?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z+58
	DD	imagerel $unwind$?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z
$pdata$?stb_open_outbuffer@@YAPEAUstbfile@@PEAPEAE@Z DD imagerel $LN4
	DD	imagerel $LN4+203
	DD	imagerel $unwind$?stb_open_outbuffer@@YAPEAUstbfile@@PEAPEAE@Z
$pdata$stb_arith_encode_close DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$stb_arith_encode_close
$pdata$stb_arith_encode DD imagerel $LN6
	DD	imagerel $LN6+180
	DD	imagerel $unwind$stb_arith_encode
$pdata$stb_arith_encode_log2 DD imagerel $LN6
	DD	imagerel $LN6+183
	DD	imagerel $unwind$stb_arith_encode_log2
$pdata$stb_arith_decode_value DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$stb_arith_decode_value
$pdata$stb_arith_decode_advance DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$stb_arith_decode_advance
$pdata$stb_arith_decode_value_log2 DD imagerel $LN5
	DD	imagerel $LN5+134
	DD	imagerel $unwind$stb_arith_decode_value_log2
$pdata$stb_arith_decode_advance_log2 DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$stb_arith_decode_advance_log2
$pdata$?stb__arith_carry@@YAXPEAUstb_arith@@@Z DD imagerel ?stb__arith_carry@@YAXPEAUstb_arith@@@Z
	DD	imagerel ?stb__arith_carry@@YAXPEAUstb_arith@@@Z+127
	DD	imagerel $unwind$?stb__arith_carry@@YAXPEAUstb_arith@@@Z
$pdata$?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z DD imagerel ?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z
	DD	imagerel ?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z+273
	DD	imagerel $unwind$?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z
$pdata$?stb__arith_flush@@YAXPEAUstb_arith@@@Z DD imagerel ?stb__arith_flush@@YAXPEAUstb_arith@@@Z
	DD	imagerel ?stb__arith_flush@@YAXPEAUstb_arith@@@Z+102
	DD	imagerel $unwind$?stb__arith_flush@@YAXPEAUstb_arith@@@Z
$pdata$?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z DD imagerel ?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z
	DD	imagerel ?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z+77
	DD	imagerel $unwind$?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z
$pdata$?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z DD imagerel ?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z
	DD	imagerel ?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z+80
	DD	imagerel $unwind$?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z
$pdata$?stb__get_sourcefile_path@@YAPEADPEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+170
	DD	imagerel $unwind$?stb__get_sourcefile_path@@YAPEADPEAD@Z
$pdata$stb__double_constant DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$stb__double_constant
$pdata$stb__int_constant DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$stb__int_constant
$pdata$stb__string_constant DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$stb__string_constant
$pdata$?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z DD imagerel ?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z
	DD	imagerel ?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z+1087
	DD	imagerel $unwind$?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z
$pdata$?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z DD imagerel $LN32
	DD	imagerel $LN32+1124
	DD	imagerel $unwind$?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z
$pdata$stbtt_BakeFontBitmap DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$stbtt_BakeFontBitmap
$pdata$stbtt_GetBakedQuad DD imagerel $LN5
	DD	imagerel $LN5+549
	DD	imagerel $unwind$stbtt_GetBakedQuad
$pdata$stbtt_GetScaledFontVMetrics DD imagerel $LN5
	DD	imagerel $LN5+265
	DD	imagerel $unwind$stbtt_GetScaledFontVMetrics
$pdata$stbtt_PackBegin DD imagerel $LN10
	DD	imagerel $LN10+417
	DD	imagerel $unwind$stbtt_PackBegin
$pdata$stbtt_PackEnd DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_PackEnd
$pdata$stbtt_PackFontRange DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_PackFontRange
$pdata$stbtt_PackFontRanges DD imagerel $LN13
	DD	imagerel $LN13+597
	DD	imagerel $unwind$stbtt_PackFontRanges
$pdata$stbtt_PackSetOversampling DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$stbtt_PackSetOversampling
$pdata$stbtt_GetPackedQuad DD imagerel $LN5
	DD	imagerel $LN5+622
	DD	imagerel $unwind$stbtt_GetPackedQuad
$pdata$stbtt_PackFontRangesGatherRects DD imagerel $LN17
	DD	imagerel $LN17+832
	DD	imagerel $unwind$stbtt_PackFontRangesGatherRects
$pdata$stbtt_PackFontRangesPackRects DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbtt_PackFontRangesPackRects
$pdata$stbtt_PackFontRangesRenderIntoRects DD imagerel $LN22
	DD	imagerel $LN22+2037
	DD	imagerel $unwind$stbtt_PackFontRangesRenderIntoRects
$pdata$stbtt_GetNumberOfFonts DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stbtt_GetNumberOfFonts
$pdata$stbtt_GetFontOffsetForIndex DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex
$pdata$stbtt_InitFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_InitFont
$pdata$stbtt_FindGlyphIndex DD imagerel $LN33
	DD	imagerel $LN33+1540
	DD	imagerel $unwind$stbtt_FindGlyphIndex
$pdata$stbtt_ScaleForPixelHeight DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$stbtt_ScaleForPixelHeight
$pdata$stbtt_ScaleForMappingEmToPixels DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$stbtt_ScaleForMappingEmToPixels
$pdata$stbtt_GetFontVMetrics DD imagerel $LN6
	DD	imagerel $LN6+170
	DD	imagerel $unwind$stbtt_GetFontVMetrics
$pdata$stbtt_GetFontVMetricsOS2 DD imagerel $LN7
	DD	imagerel $LN7+210
	DD	imagerel $unwind$stbtt_GetFontVMetricsOS2
$pdata$stbtt_GetFontBoundingBox DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$stbtt_GetFontBoundingBox
$pdata$stbtt_GetCodepointHMetrics DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$stbtt_GetCodepointHMetrics
$pdata$stbtt_GetCodepointKernAdvance DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$stbtt_GetCodepointKernAdvance
$pdata$stbtt_GetCodepointBox DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$stbtt_GetCodepointBox
$pdata$stbtt_GetGlyphHMetrics DD imagerel $LN9
	DD	imagerel $LN9+357
	DD	imagerel $unwind$stbtt_GetGlyphHMetrics
$pdata$stbtt_GetGlyphKernAdvance DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$stbtt_GetGlyphKernAdvance
$pdata$stbtt_GetGlyphBox DD imagerel $LN10
	DD	imagerel $LN10+297
	DD	imagerel $unwind$stbtt_GetGlyphBox
$pdata$stbtt_GetKerningTableLength DD imagerel $LN6
	DD	imagerel $LN6+130
	DD	imagerel $unwind$stbtt_GetKerningTableLength
$pdata$stbtt_GetKerningTable DD imagerel $LN10
	DD	imagerel $LN10+349
	DD	imagerel $unwind$stbtt_GetKerningTable
$pdata$stbtt_IsGlyphEmpty DD imagerel $LN9
	DD	imagerel $LN9+185
	DD	imagerel $unwind$stbtt_IsGlyphEmpty
$pdata$stbtt_GetCodepointShape DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointShape
$pdata$stbtt_GetGlyphShape DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$stbtt_GetGlyphShape
$pdata$stbtt_FreeShape DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$stbtt_FreeShape
$pdata$stbtt_FindSVGDoc DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$stbtt_FindSVGDoc
$pdata$stbtt_GetCodepointSVG DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointSVG
$pdata$stbtt_GetGlyphSVG DD imagerel $LN6
	DD	imagerel $LN6+162
	DD	imagerel $unwind$stbtt_GetGlyphSVG
$pdata$stbtt_FreeBitmap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$stbtt_FreeBitmap
$pdata$stbtt_GetCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_GetCodepointBitmap
$pdata$stbtt_GetCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$stbtt_GetCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$stbtt_MakeCodepointBitmap
$pdata$stbtt_MakeCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmapSubpixelPrefilter DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter
$pdata$stbtt_GetCodepointBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBox
$pdata$stbtt_GetCodepointBitmapBoxSubpixel DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBoxSubpixel
$pdata$stbtt_GetGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_GetGlyphBitmap
$pdata$stbtt_GetGlyphBitmapSubpixel DD imagerel $LN12
	DD	imagerel $LN12+686
	DD	imagerel $unwind$stbtt_GetGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$stbtt_MakeGlyphBitmap
$pdata$stbtt_MakeGlyphBitmapSubpixel DD imagerel $LN4
	DD	imagerel $LN4+383
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmapSubpixelPrefilter DD imagerel $LN5
	DD	imagerel $LN5+310
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter
$pdata$stbtt_GetGlyphBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBox
$pdata$stbtt_GetGlyphBitmapBoxSubpixel DD imagerel $LN13
	DD	imagerel $LN13+419
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBoxSubpixel
$pdata$stbtt_Rasterize DD imagerel $LN6
	DD	imagerel $LN6+355
	DD	imagerel $unwind$stbtt_Rasterize
$pdata$stbtt_FreeSDF DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$stbtt_FreeSDF
$pdata$stbtt_GetGlyphSDF DD imagerel $LN83
	DD	imagerel $LN83+6497
	DD	imagerel $unwind$stbtt_GetGlyphSDF
$pdata$stbtt_GetCodepointSDF DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$stbtt_GetCodepointSDF
$pdata$stbtt_FindMatchingFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_FindMatchingFont
$pdata$stbtt_CompareUTF8toUTF16_bigendian DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$stbtt_CompareUTF8toUTF16_bigendian
$pdata$stbtt_GetFontNameString DD imagerel $LN8
	DD	imagerel $LN8+445
	DD	imagerel $unwind$stbtt_GetFontNameString
$pdata$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z+82
	DD	imagerel $unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
$pdata$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z+122
	DD	imagerel $unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
$pdata$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z+42
	DD	imagerel $unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
$pdata$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z+140
	DD	imagerel $unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
$pdata$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
	DD	imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z+118
	DD	imagerel $unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
$pdata$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
	DD	imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z+192
	DD	imagerel $unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
$pdata$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
	DD	imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z+249
	DD	imagerel $unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
$pdata$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z+289
	DD	imagerel $unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
$pdata$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z+163
	DD	imagerel $unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
$pdata$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
	DD	imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z+368
	DD	imagerel $unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
$pdata$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
	DD	imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z+141
	DD	imagerel $unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
$pdata$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z+41
	DD	imagerel $unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
$pdata$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z+324
	DD	imagerel $unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
$pdata$?stbtt__find_table@@YAIPEAEIPEBD@Z DD imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z
	DD	imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z+349
	DD	imagerel $unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z
$pdata$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
	DD	imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z+366
	DD	imagerel $unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
$pdata$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z DD imagerel ?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z
	DD	imagerel ?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z+283
	DD	imagerel $unwind$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z
$pdata$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
	DD	imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z+485
	DD	imagerel $unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
$pdata$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z DD imagerel ?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z
	DD	imagerel ?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z+137
	DD	imagerel $unwind$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z
$pdata$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
	DD	imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z+2243
	DD	imagerel $unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
$pdata$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z+393
	DD	imagerel $unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
$pdata$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
	DD	imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z+387
	DD	imagerel $unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
$pdata$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
	DD	imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z+416
	DD	imagerel $unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
$pdata$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+5055
	DD	imagerel $unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
$pdata$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
	DD	imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z+250
	DD	imagerel $unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
$pdata$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z+130
	DD	imagerel $unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
$pdata$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z+214
	DD	imagerel $unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
$pdata$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z+148
	DD	imagerel $unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
$pdata$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
	DD	imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z+244
	DD	imagerel $unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
$pdata$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z+303
	DD	imagerel $unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
$pdata$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z+559
	DD	imagerel $unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
$pdata$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z+5164
	DD	imagerel $unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
$pdata$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+407
	DD	imagerel $unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
$pdata$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD imagerel ?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
	DD	imagerel ?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z+313
	DD	imagerel $unwind$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
$pdata$?stbtt__GetCoverageIndex@@YAHPEAEH@Z DD imagerel ?stbtt__GetCoverageIndex@@YAHPEAEH@Z
	DD	imagerel ?stbtt__GetCoverageIndex@@YAHPEAEH@Z+553
	DD	imagerel $unwind$?stbtt__GetCoverageIndex@@YAHPEAEH@Z
$pdata$?stbtt__GetGlyphClass@@YAHPEAEH@Z DD imagerel ?stbtt__GetGlyphClass@@YAHPEAEH@Z
	DD	imagerel ?stbtt__GetGlyphClass@@YAHPEAEH@Z+472
	DD	imagerel $unwind$?stbtt__GetGlyphClass@@YAHPEAEH@Z
$pdata$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD imagerel ?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
	DD	imagerel ?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z+1552
	DD	imagerel $unwind$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
$pdata$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
	DD	imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z+300
	DD	imagerel $unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
$pdata$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z+76
	DD	imagerel $unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
$pdata$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
	DD	imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z+440
	DD	imagerel $unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
$pdata$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
	DD	imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z+1093
	DD	imagerel $unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
$pdata$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z
	DD	imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z+139
	DD	imagerel $unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z
$pdata$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z
	DD	imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z+71
	DD	imagerel $unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z
$pdata$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
	DD	imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z+4086
	DD	imagerel $unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
$pdata$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z+1285
	DD	imagerel $unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
$pdata$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z+340
	DD	imagerel $unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z+1114
	DD	imagerel $unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z+46
	DD	imagerel $unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z+1004
	DD	imagerel $unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
$pdata$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z+637
	DD	imagerel $unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
$pdata$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z+1345
	DD	imagerel $unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
$pdata$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
	DD	imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z+1483
	DD	imagerel $unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
$pdata$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z DD imagerel ?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z
	DD	imagerel ?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z+929
	DD	imagerel $unwind$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z
$pdata$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z DD imagerel ?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z
	DD	imagerel ?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z+384
	DD	imagerel $unwind$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z
$pdata$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z+1091
	DD	imagerel $unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z
$pdata$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z+1214
	DD	imagerel $unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z
$pdata$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z DD imagerel ?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z
	DD	imagerel ?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z+1800
	DD	imagerel $unwind$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z
$pdata$?equal@@YAHPEAM0@Z DD imagerel ?equal@@YAHPEAM0@Z
	DD	imagerel ?equal@@YAHPEAM0@Z+122
	DD	imagerel $unwind$?equal@@YAHPEAM0@Z
$pdata$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z+2325
	DD	imagerel $unwind$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
$pdata$?stbtt__cuberoot@@YAMM@Z DD imagerel ?stbtt__cuberoot@@YAMM@Z
	DD	imagerel ?stbtt__cuberoot@@YAMM@Z+93
	DD	imagerel $unwind$?stbtt__cuberoot@@YAMM@Z
$pdata$?stbtt__solve_cubic@@YAHMMMPEAM@Z DD imagerel ?stbtt__solve_cubic@@YAHMMMPEAM@Z
	DD	imagerel ?stbtt__solve_cubic@@YAHMMMPEAM@Z+769
	DD	imagerel $unwind$?stbtt__solve_cubic@@YAHMMMPEAM@Z
$pdata$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z DD imagerel ?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z
	DD	imagerel ?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z+1079
	DD	imagerel $unwind$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z
$pdata$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z DD imagerel ?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z
	DD	imagerel ?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z+80
	DD	imagerel $unwind$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z
$pdata$?stbtt__matchpair@@YAHPEAEI0HHH@Z DD imagerel ?stbtt__matchpair@@YAHPEAEI0HHH@Z
	DD	imagerel ?stbtt__matchpair@@YAHPEAEI0HHH@Z+874
	DD	imagerel $unwind$?stbtt__matchpair@@YAHPEAEI0HHH@Z
$pdata$?stbtt__matches@@YAHPEAEI0H@Z DD imagerel ?stbtt__matches@@YAHPEAEI0H@Z
	DD	imagerel ?stbtt__matches@@YAHPEAEI0H@Z+526
	DD	imagerel $unwind$?stbtt__matches@@YAHPEAEI0H@Z
$pdata$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z DD imagerel ?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z
	DD	imagerel ?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z+111
	DD	imagerel $unwind$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z
$pdata$stbi_load_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_from_memory
$pdata$stbi_load_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_from_callbacks
$pdata$stbi_load DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$stbi_load
$pdata$stbi_load_from_file DD imagerel $LN4
	DD	imagerel $LN4+196
	DD	imagerel $unwind$stbi_load_from_file
$pdata$stbi_load_gif_from_memory DD imagerel $LN6
	DD	imagerel $LN6+315
	DD	imagerel $unwind$stbi_load_gif_from_memory
$pdata$stbi_load_16_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_16_from_memory
$pdata$stbi_load_16_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_16_from_callbacks
$pdata$stbi_load_16 DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$stbi_load_16
$pdata$stbi_load_from_file_16 DD imagerel $LN4
	DD	imagerel $LN4+196
	DD	imagerel $unwind$stbi_load_from_file_16
$pdata$stbi_loadf_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_loadf_from_memory
$pdata$stbi_loadf_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_loadf_from_callbacks
$pdata$stbi_loadf DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$stbi_loadf
$pdata$stbi_loadf_from_file DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$stbi_loadf_from_file
$pdata$stbi_is_hdr_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_hdr_from_callbacks
$pdata$stbi_is_hdr_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_hdr_from_memory
$pdata$stbi_is_hdr DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$stbi_is_hdr
$pdata$stbi_is_hdr_from_file DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_is_hdr_from_file
$pdata$stbi_image_free DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$stbi_image_free
$pdata$stbi_info_from_memory DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbi_info_from_memory
$pdata$stbi_info_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_info_from_callbacks
$pdata$stbi_is_16_bit_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_16_bit_from_memory
$pdata$stbi_is_16_bit_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_16_bit_from_callbacks
$pdata$stbi_info DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$stbi_info
$pdata$stbi_info_from_file DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$stbi_info_from_file
$pdata$stbi_is_16_bit DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$stbi_is_16_bit
$pdata$stbi_is_16_bit_from_file DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_is_16_bit_from_file
$pdata$stbi_zlib_decode_malloc_guesssize DD imagerel $LN7
	DD	imagerel $LN7+250
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize
$pdata$stbi_zlib_decode_malloc_guesssize_headerflag DD imagerel $LN7
	DD	imagerel $LN7+253
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize_headerflag
$pdata$stbi_zlib_decode_malloc DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbi_zlib_decode_malloc
$pdata$stbi_zlib_decode_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_buffer
$pdata$stbi_zlib_decode_noheader_malloc DD imagerel $LN7
	DD	imagerel $LN7+237
	DD	imagerel $unwind$stbi_zlib_decode_noheader_malloc
$pdata$stbi_zlib_decode_noheader_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_noheader_buffer
$pdata$?stbi__cpuid3@@YAHXZ DD imagerel ?stbi__cpuid3@@YAHXZ
	DD	imagerel ?stbi__cpuid3@@YAHXZ+80
	DD	imagerel $unwind$?stbi__cpuid3@@YAHXZ
$pdata$?stbi__sse2_available@@YAHXZ DD imagerel ?stbi__sse2_available@@YAHXZ
	DD	imagerel ?stbi__sse2_available@@YAHXZ+54
	DD	imagerel $unwind$?stbi__sse2_available@@YAHXZ
$pdata$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z DD imagerel ?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z
	DD	imagerel ?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z+241
	DD	imagerel $unwind$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z
$pdata$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z DD imagerel ?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z
	DD	imagerel ?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z+147
	DD	imagerel $unwind$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z
$pdata$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z DD imagerel ?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z
	DD	imagerel ?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z+184
	DD	imagerel $unwind$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z
$pdata$?stbi__stdio_read@@YAHPEAXPEADH@Z DD imagerel ?stbi__stdio_read@@YAHPEAXPEADH@Z
	DD	imagerel ?stbi__stdio_read@@YAHPEAXPEADH@Z+53
	DD	imagerel $unwind$?stbi__stdio_read@@YAHPEAXPEADH@Z
$pdata$?stbi__stdio_skip@@YAXPEAXH@Z DD imagerel ?stbi__stdio_skip@@YAXPEAXH@Z
	DD	imagerel ?stbi__stdio_skip@@YAXPEAXH@Z+76
	DD	imagerel $unwind$?stbi__stdio_skip@@YAXPEAXH@Z
$pdata$?stbi__stdio_eof@@YAHPEAX@Z DD imagerel ?stbi__stdio_eof@@YAHPEAX@Z
	DD	imagerel ?stbi__stdio_eof@@YAHPEAX@Z+66
	DD	imagerel $unwind$?stbi__stdio_eof@@YAHPEAX@Z
$pdata$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z DD imagerel ?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z
	DD	imagerel ?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z+41
	DD	imagerel $unwind$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z
$pdata$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z+118
	DD	imagerel $unwind$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+173
	DD	imagerel $unwind$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z+123
	DD	imagerel $unwind$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__png_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__png_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__png_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__png_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+94
	DD	imagerel $unwind$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z+64
	DD	imagerel $unwind$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__png_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__png_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__png_is16@@YAHPEAUstbi__context@@@Z+76
	DD	imagerel $unwind$?stbi__png_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__bmp_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__bmp_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+4553
	DD	imagerel $unwind$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z+249
	DD	imagerel $unwind$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__tga_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__tga_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__tga_test@@YAHPEAUstbi__context@@@Z+402
	DD	imagerel $unwind$?stbi__tga_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+2686
	DD	imagerel $unwind$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z+612
	DD	imagerel $unwind$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__psd_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__psd_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__psd_test@@YAHPEAUstbi__context@@@Z+71
	DD	imagerel $unwind$?stbi__psd_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD imagerel ?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
	DD	imagerel ?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z+2964
	DD	imagerel $unwind$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
$pdata$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z+327
	DD	imagerel $unwind$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__psd_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__psd_is16@@YAHPEAUstbi__context@@@Z+194
	DD	imagerel $unwind$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__hdr_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__hdr_test@@YAHPEAUstbi__context@@@Z+87
	DD	imagerel $unwind$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+2336
	DD	imagerel $unwind$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z+543
	DD	imagerel $unwind$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pic_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pic_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pic_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__pic_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+657
	DD	imagerel $unwind$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z+652
	DD	imagerel $unwind$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__gif_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__gif_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__gif_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__gif_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+319
	DD	imagerel $unwind$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z DD imagerel ?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
	DD	imagerel ?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z+1010
	DD	imagerel $unwind$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
$pdata$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z+54
	DD	imagerel $unwind$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pnm_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pnm_test@@YAHPEAUstbi__context@@@Z+91
	DD	imagerel $unwind$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+661
	DD	imagerel $unwind$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z+379
	DD	imagerel $unwind$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z+46
	DD	imagerel $unwind$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__malloc@@YAPEAX_K@Z DD imagerel ?stbi__malloc@@YAPEAX_K@Z
	DD	imagerel ?stbi__malloc@@YAPEAX_K@Z+25
	DD	imagerel $unwind$?stbi__malloc@@YAPEAX_K@Z
$pdata$?stbi__addsizes_valid@@YAHHH@Z DD imagerel ?stbi__addsizes_valid@@YAHHH@Z
	DD	imagerel ?stbi__addsizes_valid@@YAHHH@Z+62
	DD	imagerel $unwind$?stbi__addsizes_valid@@YAHHH@Z
$pdata$?stbi__mul2sizes_valid@@YAHHH@Z DD imagerel ?stbi__mul2sizes_valid@@YAHHH@Z
	DD	imagerel ?stbi__mul2sizes_valid@@YAHHH@Z+84
	DD	imagerel $unwind$?stbi__mul2sizes_valid@@YAHHH@Z
$pdata$?stbi__mad2sizes_valid@@YAHHHH@Z DD imagerel ?stbi__mad2sizes_valid@@YAHHHH@Z
	DD	imagerel ?stbi__mad2sizes_valid@@YAHHHH@Z+85
	DD	imagerel $unwind$?stbi__mad2sizes_valid@@YAHHHH@Z
$pdata$?stbi__mad3sizes_valid@@YAHHHHH@Z DD imagerel ?stbi__mad3sizes_valid@@YAHHHHH@Z
	DD	imagerel ?stbi__mad3sizes_valid@@YAHHHHH@Z+119
	DD	imagerel $unwind$?stbi__mad3sizes_valid@@YAHHHHH@Z
$pdata$?stbi__mad4sizes_valid@@YAHHHHHH@Z DD imagerel ?stbi__mad4sizes_valid@@YAHHHHHH@Z
	DD	imagerel ?stbi__mad4sizes_valid@@YAHHHHHH@Z+153
	DD	imagerel $unwind$?stbi__mad4sizes_valid@@YAHHHHHH@Z
$pdata$?stbi__malloc_mad2@@YAPEAXHHH@Z DD imagerel ?stbi__malloc_mad2@@YAPEAXHHH@Z
	DD	imagerel ?stbi__malloc_mad2@@YAPEAXHHH@Z+71
	DD	imagerel $unwind$?stbi__malloc_mad2@@YAPEAXHHH@Z
$pdata$?stbi__malloc_mad3@@YAPEAXHHHH@Z DD imagerel ?stbi__malloc_mad3@@YAPEAXHHHH@Z
	DD	imagerel ?stbi__malloc_mad3@@YAPEAXHHHH@Z+86
	DD	imagerel $unwind$?stbi__malloc_mad3@@YAPEAXHHHH@Z
$pdata$?stbi__malloc_mad4@@YAPEAXHHHHH@Z DD imagerel ?stbi__malloc_mad4@@YAPEAXHHHHH@Z
	DD	imagerel ?stbi__malloc_mad4@@YAPEAXHHHHH@Z+99
	DD	imagerel $unwind$?stbi__malloc_mad4@@YAPEAXHHHHH@Z
$pdata$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z DD imagerel ?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z
	DD	imagerel ?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z+486
	DD	imagerel $unwind$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z
$pdata$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z DD imagerel ?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z
	DD	imagerel ?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z+566
	DD	imagerel $unwind$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z
$pdata$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD imagerel ?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
	DD	imagerel ?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z+819
	DD	imagerel $unwind$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
$pdata$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z DD imagerel ?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z
	DD	imagerel ?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z+196
	DD	imagerel $unwind$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z
$pdata$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z DD imagerel ?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z
	DD	imagerel ?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z+211
	DD	imagerel $unwind$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z
$pdata$?stbi__vertical_flip@@YAXPEAXHHH@Z DD imagerel ?stbi__vertical_flip@@YAXPEAXHHH@Z
	DD	imagerel ?stbi__vertical_flip@@YAXPEAXHHH@Z+410
	DD	imagerel $unwind$?stbi__vertical_flip@@YAXPEAXHHH@Z
$pdata$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z DD imagerel ?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z
	DD	imagerel ?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z+133
	DD	imagerel $unwind$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z
$pdata$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z+454
	DD	imagerel $unwind$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z+460
	DD	imagerel $unwind$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z DD imagerel ?stbi__float_postprocess@@YAXPEAMPEAH11H@Z
	DD	imagerel ?stbi__float_postprocess@@YAXPEAMPEAH11H@Z+194
	DD	imagerel $unwind$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z
$pdata$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z+58
	DD	imagerel $unwind$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z+354
	DD	imagerel $unwind$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__get8@@YAEPEAUstbi__context@@@Z DD imagerel ?stbi__get8@@YAEPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get8@@YAEPEAUstbi__context@@@Z+169
	DD	imagerel $unwind$?stbi__get8@@YAEPEAUstbi__context@@@Z
$pdata$?stbi__at_eof@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__at_eof@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__at_eof@@YAHPEAUstbi__context@@@Z+127
	DD	imagerel $unwind$?stbi__at_eof@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__skip@@YAXPEAUstbi__context@@H@Z DD imagerel ?stbi__skip@@YAXPEAUstbi__context@@H@Z
	DD	imagerel ?stbi__skip@@YAXPEAUstbi__context@@H@Z+215
	DD	imagerel $unwind$?stbi__skip@@YAXPEAUstbi__context@@H@Z
$pdata$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z DD imagerel ?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z
	DD	imagerel ?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z+355
	DD	imagerel $unwind$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z
$pdata$?stbi__get16be@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__get16be@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get16be@@YAHPEAUstbi__context@@@Z+63
	DD	imagerel $unwind$?stbi__get16be@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__get32be@@YAIPEAUstbi__context@@@Z DD imagerel ?stbi__get32be@@YAIPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get32be@@YAIPEAUstbi__context@@@Z+57
	DD	imagerel $unwind$?stbi__get32be@@YAIPEAUstbi__context@@@Z
$pdata$?stbi__get16le@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__get16le@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get16le@@YAHPEAUstbi__context@@@Z+55
	DD	imagerel $unwind$?stbi__get16le@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__get32le@@YAIPEAUstbi__context@@@Z DD imagerel ?stbi__get32le@@YAIPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get32le@@YAIPEAUstbi__context@@@Z+57
	DD	imagerel $unwind$?stbi__get32le@@YAIPEAUstbi__context@@@Z
$pdata$?stbi__convert_format@@YAPEAEPEAEHHII@Z DD imagerel ?stbi__convert_format@@YAPEAEPEAEHHII@Z
	DD	imagerel ?stbi__convert_format@@YAPEAEPEAEHHII@Z+2668
	DD	imagerel $unwind$?stbi__convert_format@@YAPEAEPEAEHHII@Z
$pdata$?stbi__convert_format16@@YAPEAGPEAGHHII@Z DD imagerel ?stbi__convert_format16@@YAPEAGPEAGHHII@Z
	DD	imagerel ?stbi__convert_format16@@YAPEAGPEAGHHII@Z+2720
	DD	imagerel $unwind$?stbi__convert_format16@@YAPEAGPEAGHHII@Z
$pdata$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z DD imagerel ?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z
	DD	imagerel ?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z+658
	DD	imagerel $unwind$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z
$pdata$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z DD imagerel ?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z
	DD	imagerel ?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z+367
	DD	imagerel $unwind$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z
$pdata$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z+264
	DD	imagerel $unwind$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z DD imagerel ?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z
	DD	imagerel ?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z+662
	DD	imagerel $unwind$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z
$pdata$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z+209
	DD	imagerel $unwind$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z+164
	DD	imagerel $unwind$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z+110
	DD	imagerel $unwind$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z DD imagerel ?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z
	DD	imagerel ?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z+762
	DD	imagerel $unwind$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z
$pdata$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z DD imagerel ?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z
	DD	imagerel ?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z+414
	DD	imagerel $unwind$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z
$pdata$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z DD imagerel ?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z
	DD	imagerel ?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z+1710
	DD	imagerel $unwind$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z
$pdata$?stbi__idct_block@@YAXPEAEHQEAF@Z DD imagerel ?stbi__idct_block@@YAXPEAEHQEAF@Z
	DD	imagerel ?stbi__idct_block@@YAXPEAEHQEAF@Z+2715
	DD	imagerel $unwind$?stbi__idct_block@@YAXPEAEHQEAF@Z
$pdata$?stbi__idct_simd@@YAXPEAEHQEAF@Z DD imagerel ?stbi__idct_simd@@YAXPEAEHQEAF@Z
	DD	imagerel ?stbi__idct_simd@@YAXPEAEHQEAF@Z+11018
	DD	imagerel $unwind$?stbi__idct_simd@@YAXPEAEHQEAF@Z
$pdata$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z DD imagerel ?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z+137
	DD	imagerel $unwind$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z+237
	DD	imagerel $unwind$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z+3188
	DD	imagerel $unwind$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z DD imagerel ?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z
	DD	imagerel ?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z+88
	DD	imagerel $unwind$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z
$pdata$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z+467
	DD	imagerel $unwind$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z+1716
	DD	imagerel $unwind$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z+812
	DD	imagerel $unwind$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z DD imagerel ?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z
	DD	imagerel ?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z+355
	DD	imagerel $unwind$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z
$pdata$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z+2318
	DD	imagerel $unwind$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z+345
	DD	imagerel $unwind$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z+487
	DD	imagerel $unwind$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z+110
	DD	imagerel $unwind$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z+474
	DD	imagerel $unwind$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z+383
	DD	imagerel $unwind$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z+1637
	DD	imagerel $unwind$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z+131
	DD	imagerel $unwind$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z
$pdata$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z DD imagerel ?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z
	DD	imagerel ?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z+451
	DD	imagerel $unwind$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z
$pdata$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z DD imagerel ?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z
	DD	imagerel ?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z+1986
	DD	imagerel $unwind$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z
$pdata$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z+137
	DD	imagerel $unwind$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z+38
	DD	imagerel $unwind$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__blinn_8x8@@YAEEE@Z DD imagerel ?stbi__blinn_8x8@@YAEEE@Z
	DD	imagerel ?stbi__blinn_8x8@@YAEEE@Z+54
	DD	imagerel $unwind$?stbi__blinn_8x8@@YAEEE@Z
$pdata$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z DD imagerel ?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
	DD	imagerel ?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z+4606
	DD	imagerel $unwind$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
$pdata$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z DD imagerel ?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z
	DD	imagerel ?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z+172
	DD	imagerel $unwind$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z
$pdata$?stbi__bit_reverse@@YAHHH@Z DD imagerel ?stbi__bit_reverse@@YAHHH@Z
	DD	imagerel ?stbi__bit_reverse@@YAHHH@Z+72
	DD	imagerel $unwind$?stbi__bit_reverse@@YAHHH@Z
$pdata$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z DD imagerel ?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
	DD	imagerel ?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z+896
	DD	imagerel $unwind$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
$pdata$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z+52
	DD	imagerel $unwind$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z DD imagerel ?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z+77
	DD	imagerel $unwind$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z
$pdata$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z DD imagerel ?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z+181
	DD	imagerel $unwind$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z
$pdata$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z DD imagerel ?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z
	DD	imagerel ?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z+143
	DD	imagerel $unwind$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z
$pdata$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD imagerel ?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
	DD	imagerel ?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z+290
	DD	imagerel $unwind$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
$pdata$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD imagerel ?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
	DD	imagerel ?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z+193
	DD	imagerel $unwind$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
$pdata$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z DD imagerel ?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z
	DD	imagerel ?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z+325
	DD	imagerel $unwind$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z
$pdata$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z+716
	DD	imagerel $unwind$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z+787
	DD	imagerel $unwind$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z+498
	DD	imagerel $unwind$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z+178
	DD	imagerel $unwind$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z DD imagerel ?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z
	DD	imagerel ?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z+296
	DD	imagerel $unwind$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z
$pdata$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z DD imagerel ?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z
	DD	imagerel ?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z+108
	DD	imagerel $unwind$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z
$pdata$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z DD imagerel ?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z
	DD	imagerel ?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z+47
	DD	imagerel $unwind$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z
$pdata$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__check_png_header@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__check_png_header@@YAHPEAUstbi__context@@@Z+95
	DD	imagerel $unwind$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__paeth@@YAHHHH@Z DD imagerel ?stbi__paeth@@YAHHHH@Z
	DD	imagerel ?stbi__paeth@@YAHHHH@Z+157
	DD	imagerel $unwind$?stbi__paeth@@YAHHHH@Z
$pdata$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z DD imagerel ?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z
	DD	imagerel ?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z+6312
	DD	imagerel $unwind$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z
$pdata$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z DD imagerel ?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
	DD	imagerel ?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z+1286
	DD	imagerel $unwind$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
$pdata$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z DD imagerel ?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z
	DD	imagerel ?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z+451
	DD	imagerel $unwind$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z
$pdata$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z DD imagerel ?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z
	DD	imagerel ?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z+454
	DD	imagerel $unwind$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z
$pdata$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z DD imagerel ?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z
	DD	imagerel ?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z+563
	DD	imagerel $unwind$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z
$pdata$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z DD imagerel ?stbi__de_iphone@@YAXPEAUstbi__png@@@Z
	DD	imagerel ?stbi__de_iphone@@YAXPEAUstbi__png@@@Z+801
	DD	imagerel $unwind$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z
$pdata$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z DD imagerel ?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
	DD	imagerel ?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z+3413
	DD	imagerel $unwind$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
$pdata$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z+581
	DD	imagerel $unwind$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z DD imagerel ?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z
	DD	imagerel ?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z+150
	DD	imagerel $unwind$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z
$pdata$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z+180
	DD	imagerel $unwind$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__high_bit@@YAHI@Z DD imagerel ?stbi__high_bit@@YAHI@Z
	DD	imagerel ?stbi__high_bit@@YAHI@Z+169
	DD	imagerel $unwind$?stbi__high_bit@@YAHI@Z
$pdata$?stbi__shiftsigned@@YAHIHH@Z DD imagerel ?stbi__shiftsigned@@YAHIHH@Z
	DD	imagerel ?stbi__shiftsigned@@YAHIHH@Z+208
	DD	imagerel $unwind$?stbi__shiftsigned@@YAHIHH@Z
$pdata$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z DD imagerel ?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z
	DD	imagerel ?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z+1359
	DD	imagerel $unwind$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z
$pdata$?stbi__tga_get_comp@@YAHHHPEAH@Z DD imagerel ?stbi__tga_get_comp@@YAHHHPEAH@Z
	DD	imagerel ?stbi__tga_get_comp@@YAHHHPEAH@Z+144
	DD	imagerel $unwind$?stbi__tga_get_comp@@YAHHHPEAH@Z
$pdata$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z DD imagerel ?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z
	DD	imagerel ?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z+197
	DD	imagerel $unwind$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z
$pdata$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z DD imagerel ?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z
	DD	imagerel ?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z+318
	DD	imagerel $unwind$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z
$pdata$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z DD imagerel ?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z
	DD	imagerel ?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z+88
	DD	imagerel $unwind$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z
$pdata$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z+108
	DD	imagerel $unwind$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z DD imagerel ?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z
	DD	imagerel ?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z+169
	DD	imagerel $unwind$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z
$pdata$?stbi__copyval@@YAXHPEAEPEBE@Z DD imagerel ?stbi__copyval@@YAXHPEAEPEBE@Z
	DD	imagerel ?stbi__copyval@@YAXHPEAEPEBE@Z+108
	DD	imagerel $unwind$?stbi__copyval@@YAXHPEAEPEBE@Z
$pdata$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z DD imagerel ?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
	DD	imagerel ?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z+1609
	DD	imagerel $unwind$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
$pdata$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z+152
	DD	imagerel $unwind$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z DD imagerel ?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z
	DD	imagerel ?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z+235
	DD	imagerel $unwind$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z
$pdata$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z DD imagerel ?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z
	DD	imagerel ?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z+524
	DD	imagerel $unwind$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z
$pdata$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z+182
	DD	imagerel $unwind$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z DD imagerel ?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z
	DD	imagerel ?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z+662
	DD	imagerel $unwind$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z
$pdata$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z DD imagerel ?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z
	DD	imagerel ?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z+1107
	DD	imagerel $unwind$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z
$pdata$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z DD imagerel ?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z
	DD	imagerel ?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z+2536
	DD	imagerel $unwind$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z
$pdata$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z DD imagerel ?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z
	DD	imagerel ?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z+160
	DD	imagerel $unwind$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z
$pdata$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z DD imagerel ?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z
	DD	imagerel ?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z+109
	DD	imagerel $unwind$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z
$pdata$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z+179
	DD	imagerel $unwind$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z
$pdata$?stbi__hdr_convert@@YAXPEAMPEAEH@Z DD imagerel ?stbi__hdr_convert@@YAXPEAMPEAEH@Z
	DD	imagerel ?stbi__hdr_convert@@YAXPEAMPEAEH@Z+609
	DD	imagerel $unwind$?stbi__hdr_convert@@YAXPEAMPEAEH@Z
$pdata$?stbi__pnm_isspace@@YAHD@Z DD imagerel ?stbi__pnm_isspace@@YAHD@Z
	DD	imagerel ?stbi__pnm_isspace@@YAHD@Z+92
	DD	imagerel $unwind$?stbi__pnm_isspace@@YAHD@Z
$pdata$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z+162
	DD	imagerel $unwind$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z
$pdata$?stbi__pnm_isdigit@@YAHD@Z DD imagerel ?stbi__pnm_isdigit@@YAHD@Z
	DD	imagerel ?stbi__pnm_isdigit@@YAHD@Z+52
	DD	imagerel $unwind$?stbi__pnm_isdigit@@YAHD@Z
$pdata$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z+102
	DD	imagerel $unwind$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z
$pdata$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z+380
	DD	imagerel $unwind$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__is_16_main@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__is_16_main@@YAHPEAUstbi__context@@@Z+79
	DD	imagerel $unwind$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z
$pdata$stbi_write_png DD imagerel $LN5
	DD	imagerel $LN5+194
	DD	imagerel $unwind$stbi_write_png
$pdata$stbi_write_bmp DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_bmp
$pdata$stbi_write_tga DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_tga
$pdata$stbi_write_hdr DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_hdr
$pdata$stbi_write_jpg DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$stbi_write_jpg
$pdata$stbi_write_png_to_func DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$stbi_write_png_to_func
$pdata$stbi_write_bmp_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_bmp_to_func
$pdata$stbi_write_tga_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_tga_to_func
$pdata$stbi_write_hdr_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_hdr_to_func
$pdata$stbi_write_jpg_to_func DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$stbi_write_jpg_to_func
$pdata$?stbi__stdio_write@@YAXPEAX0H@Z DD imagerel ?stbi__stdio_write@@YAXPEAX0H@Z
	DD	imagerel ?stbi__stdio_write@@YAXPEAX0H@Z+53
	DD	imagerel $unwind$?stbi__stdio_write@@YAXPEAX0H@Z
$pdata$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z+58
	DD	imagerel $unwind$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z DD imagerel ?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z
	DD	imagerel ?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z+93
	DD	imagerel $unwind$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z
$pdata$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z DD imagerel ?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z
	DD	imagerel ?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z+29
	DD	imagerel $unwind$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z
$pdata$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z DD imagerel ?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z
	DD	imagerel ?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z+699
	DD	imagerel $unwind$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z
$pdata$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ DD imagerel ?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ
	DD	imagerel ?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ+68
	DD	imagerel $unwind$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ
$pdata$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z DD imagerel ?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z
	DD	imagerel ?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z+84
	DD	imagerel $unwind$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z
$pdata$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z DD imagerel ?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z
	DD	imagerel ?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z+55
	DD	imagerel $unwind$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z
$pdata$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z DD imagerel ?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z
	DD	imagerel ?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z+87
	DD	imagerel $unwind$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z
$pdata$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z DD imagerel ?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z
	DD	imagerel ?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z+149
	DD	imagerel $unwind$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z
$pdata$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z DD imagerel ?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z
	DD	imagerel ?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z+519
	DD	imagerel $unwind$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z
$pdata$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z DD imagerel ?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z
	DD	imagerel ?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z+329
	DD	imagerel $unwind$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z
$pdata$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ DD imagerel ?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ
	DD	imagerel ?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ+208
	DD	imagerel $unwind$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ
$pdata$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z DD imagerel ?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z
	DD	imagerel ?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z+902
	DD	imagerel $unwind$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z
$pdata$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z DD imagerel ?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z
	DD	imagerel ?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z+1764
	DD	imagerel $unwind$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z
$pdata$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z DD imagerel ?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z
	DD	imagerel ?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z+577
	DD	imagerel $unwind$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z
$pdata$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z DD imagerel ?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z
	DD	imagerel ?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z+159
	DD	imagerel $unwind$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z
$pdata$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z DD imagerel ?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z
	DD	imagerel ?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z+147
	DD	imagerel $unwind$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z
$pdata$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z DD imagerel ?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
	DD	imagerel ?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z+1573
	DD	imagerel $unwind$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
$pdata$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z DD imagerel ?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
	DD	imagerel ?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z+456
	DD	imagerel $unwind$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
$pdata$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z DD imagerel ?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z
	DD	imagerel ?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z+292
	DD	imagerel $unwind$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z
$pdata$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z DD imagerel ?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z
	DD	imagerel ?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z+244
	DD	imagerel $unwind$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z
$pdata$?stbiw__zlib_bitrev@@YAHHH@Z DD imagerel ?stbiw__zlib_bitrev@@YAHHH@Z
	DD	imagerel ?stbiw__zlib_bitrev@@YAHHH@Z+81
	DD	imagerel $unwind$?stbiw__zlib_bitrev@@YAHHH@Z
$pdata$?stbiw__zlib_countm@@YAIPEAE0H@Z DD imagerel ?stbiw__zlib_countm@@YAIPEAE0H@Z
	DD	imagerel ?stbiw__zlib_countm@@YAIPEAE0H@Z+96
	DD	imagerel $unwind$?stbiw__zlib_countm@@YAIPEAE0H@Z
$pdata$?stbiw__zhash@@YAIPEAE@Z DD imagerel ?stbiw__zhash@@YAIPEAE@Z
	DD	imagerel ?stbiw__zhash@@YAIPEAE@Z+180
	DD	imagerel $unwind$?stbiw__zhash@@YAIPEAE@Z
$pdata$stbi_zlib_compress DD imagerel $LN100
	DD	imagerel $LN100+6676
	DD	imagerel $unwind$stbi_zlib_compress
$pdata$?stbiw__crc32@@YAIPEAEH@Z DD imagerel ?stbiw__crc32@@YAIPEAEH@Z
	DD	imagerel ?stbiw__crc32@@YAIPEAEH@Z+108
	DD	imagerel $unwind$?stbiw__crc32@@YAIPEAEH@Z
$pdata$?stbiw__wpcrc@@YAXPEAPEAEH@Z DD imagerel ?stbiw__wpcrc@@YAXPEAPEAEH@Z
	DD	imagerel ?stbiw__wpcrc@@YAXPEAPEAEH@Z+204
	DD	imagerel $unwind$?stbiw__wpcrc@@YAXPEAPEAEH@Z
$pdata$?stbiw__paeth@@YAEHHH@Z DD imagerel ?stbiw__paeth@@YAEHHH@Z
	DD	imagerel ?stbiw__paeth@@YAEHHH@Z+172
	DD	imagerel $unwind$?stbiw__paeth@@YAEHHH@Z
$pdata$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z DD imagerel ?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z
	DD	imagerel ?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z+1576
	DD	imagerel $unwind$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z
$pdata$stbi_write_png_to_mem DD imagerel $LN23
	DD	imagerel $LN23+2558
	DD	imagerel $unwind$stbi_write_png_to_mem
$pdata$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z DD imagerel ?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z
	DD	imagerel ?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z+230
	DD	imagerel $unwind$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z
$pdata$?stbiw__jpg_DCT@@YAXPEAM0000000@Z DD imagerel ?stbiw__jpg_DCT@@YAXPEAM0000000@Z
	DD	imagerel ?stbiw__jpg_DCT@@YAXPEAM0000000@Z+837
	DD	imagerel $unwind$?stbiw__jpg_DCT@@YAXPEAM0000000@Z
$pdata$?stbiw__jpg_calcBits@@YAXHQEAG@Z DD imagerel ?stbiw__jpg_calcBits@@YAXHQEAG@Z
	DD	imagerel ?stbiw__jpg_calcBits@@YAXHQEAG@Z+229
	DD	imagerel $unwind$?stbiw__jpg_calcBits@@YAXHQEAG@Z
$pdata$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z DD imagerel ?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
	DD	imagerel ?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z+1769
	DD	imagerel $unwind$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
$pdata$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z DD imagerel ?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
	DD	imagerel ?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z+4895
	DD	imagerel $unwind$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
$pdata$?ZenArenaInit@@YAHPEAUZenArena@@I@Z DD imagerel ?ZenArenaInit@@YAHPEAUZenArena@@I@Z
	DD	imagerel ?ZenArenaInit@@YAHPEAUZenArena@@I@Z+231
	DD	imagerel $unwind$?ZenArenaInit@@YAHPEAUZenArena@@I@Z
$pdata$?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z DD imagerel ?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z
	DD	imagerel ?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z+273
	DD	imagerel $unwind$?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z
$pdata$?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z DD imagerel ?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z
	DD	imagerel ?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z+79
	DD	imagerel $unwind$?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z
$pdata$?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z DD imagerel ?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z
	DD	imagerel ?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z+106
	DD	imagerel $unwind$?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ESTANDARD_BASIS_COLOR@@YAXXZ DD imagerel ??__ESTANDARD_BASIS_COLOR@@YAXXZ
	DD	imagerel ??__ESTANDARD_BASIS_COLOR@@YAXXZ+87
	DD	imagerel $unwind$??__ESTANDARD_BASIS_COLOR@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?ColorNormalize@@YA?ATf32x4@@T1@@Z DD imagerel ?ColorNormalize@@YA?ATf32x4@@T1@@Z
	DD	imagerel ?ColorNormalize@@YA?ATf32x4@@T1@@Z+184
	DD	imagerel $unwind$?ColorNormalize@@YA?ATf32x4@@T1@@Z
$pdata$?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z DD imagerel ?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z
	DD	imagerel ?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z+181
	DD	imagerel $unwind$?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z
$pdata$?ColorPackU@@YAITf32x4@@@Z DD imagerel ?ColorPackU@@YAITf32x4@@@Z
	DD	imagerel ?ColorPackU@@YAITf32x4@@@Z+131
	DD	imagerel $unwind$?ColorPackU@@YAITf32x4@@@Z
$pdata$?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z DD imagerel ?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z
	DD	imagerel ?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z+176
	DD	imagerel $unwind$?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z
$pdata$?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z DD imagerel ?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z
	DD	imagerel ?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z+69
	DD	imagerel $unwind$?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z
$pdata$?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z DD imagerel ?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z
	DD	imagerel ?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z+449
	DD	imagerel $unwind$?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z
$pdata$?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z DD imagerel ?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z
	DD	imagerel ?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z+141
	DD	imagerel $unwind$?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z
$pdata$?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z DD imagerel ?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z
	DD	imagerel ?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z+44
	DD	imagerel $unwind$?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z
$pdata$?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z DD imagerel ?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z
	DD	imagerel ?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z+1129
	DD	imagerel $unwind$?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z
$pdata$?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z DD imagerel ?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z
	DD	imagerel ?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z+542
	DD	imagerel $unwind$?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z
$pdata$?ZenFillTexture@@YAXPEAUZenTexture@@I@Z DD imagerel ?ZenFillTexture@@YAXPEAUZenTexture@@I@Z
	DD	imagerel ?ZenFillTexture@@YAXPEAUZenTexture@@I@Z+132
	DD	imagerel $unwind$?ZenFillTexture@@YAXPEAUZenTexture@@I@Z
$pdata$?ZenSensitiveCeil32@@YAHHM@Z DD imagerel ?ZenSensitiveCeil32@@YAHHM@Z
	DD	imagerel ?ZenSensitiveCeil32@@YAHHM@Z+59
	DD	imagerel $unwind$?ZenSensitiveCeil32@@YAHHM@Z
$pdata$?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z DD imagerel ?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z
	DD	imagerel ?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z+423
	DD	imagerel $unwind$?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z
$pdata$?ZenGetSystemStandardOutputHandle@@YAPEAXXZ DD imagerel ?ZenGetSystemStandardOutputHandle@@YAPEAXXZ
	DD	imagerel ?ZenGetSystemStandardOutputHandle@@YAPEAXXZ+20
	DD	imagerel $unwind$?ZenGetSystemStandardOutputHandle@@YAPEAXXZ
$pdata$?ZenGetSystemStandardInputHandle@@YAPEAXXZ DD imagerel ?ZenGetSystemStandardInputHandle@@YAPEAXXZ
	DD	imagerel ?ZenGetSystemStandardInputHandle@@YAPEAXXZ+20
	DD	imagerel $unwind$?ZenGetSystemStandardInputHandle@@YAPEAXXZ
$pdata$?ZenGetSystemStandardErrorHandle@@YAPEAXXZ DD imagerel ?ZenGetSystemStandardErrorHandle@@YAPEAXXZ
	DD	imagerel ?ZenGetSystemStandardErrorHandle@@YAPEAXXZ+20
	DD	imagerel $unwind$?ZenGetSystemStandardErrorHandle@@YAPEAXXZ
$pdata$?ZenGetNativePerformanceCounter@@YA_KXZ DD imagerel ?ZenGetNativePerformanceCounter@@YA_KXZ
	DD	imagerel ?ZenGetNativePerformanceCounter@@YA_KXZ+25
	DD	imagerel $unwind$?ZenGetNativePerformanceCounter@@YA_KXZ
$pdata$?ZenGetNativePerformanceFrequency@@YA_KXZ DD imagerel ?ZenGetNativePerformanceFrequency@@YA_KXZ
	DD	imagerel ?ZenGetNativePerformanceFrequency@@YA_KXZ+25
	DD	imagerel $unwind$?ZenGetNativePerformanceFrequency@@YA_KXZ
$pdata$?ZenInternalizeMouseEvent@@YAHK_K@Z DD imagerel ?ZenInternalizeMouseEvent@@YAHK_K@Z
	DD	imagerel ?ZenInternalizeMouseEvent@@YAHK_K@Z+192
	DD	imagerel $unwind$?ZenInternalizeMouseEvent@@YAHK_K@Z
$pdata$?InternalizeKeyboardEvent@@YAH_K@Z DD imagerel ?InternalizeKeyboardEvent@@YAH_K@Z
	DD	imagerel ?InternalizeKeyboardEvent@@YAH_K@Z+1746
	DD	imagerel $unwind$?InternalizeKeyboardEvent@@YAH_K@Z
$pdata$?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z DD imagerel ?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z
	DD	imagerel ?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z+38
	DD	imagerel $unwind$?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z
$pdata$?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z DD imagerel ?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z
	DD	imagerel ?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z+66
	DD	imagerel $unwind$?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z
$pdata$?ZenShowWindow@@YAXPEAUZenWindow@@@Z DD imagerel ?ZenShowWindow@@YAXPEAUZenWindow@@@Z
	DD	imagerel ?ZenShowWindow@@YAXPEAUZenWindow@@@Z+118
	DD	imagerel $unwind$?ZenShowWindow@@YAXPEAUZenWindow@@@Z
$pdata$?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z DD imagerel ?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z
	DD	imagerel ?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z+134
	DD	imagerel $unwind$?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z
$pdata$?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z DD imagerel ?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z
	DD	imagerel ?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z+217
	DD	imagerel $unwind$?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z
$pdata$?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z DD imagerel ?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z
	DD	imagerel ?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z+1942
	DD	imagerel $unwind$?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z
$pdata$?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+289
	DD	imagerel $unwind$?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z DD imagerel ?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z
	DD	imagerel ?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z+97
	DD	imagerel $unwind$?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z
$pdata$?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z DD imagerel ?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z
	DD	imagerel ?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z+54
	DD	imagerel $unwind$?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z
$pdata$?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z DD imagerel ?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z
	DD	imagerel ?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z+1531
	DD	imagerel $unwind$?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z
$pdata$?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z DD imagerel ?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z
	DD	imagerel ?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z+88
	DD	imagerel $unwind$?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z
$pdata$?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z DD imagerel ?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z
	DD	imagerel ?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z+85
	DD	imagerel $unwind$?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z
$pdata$?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z DD imagerel ?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z
	DD	imagerel ?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z+273
	DD	imagerel $unwind$?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z
$pdata$?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z DD imagerel ?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z
	DD	imagerel ?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z+97
	DD	imagerel $unwind$?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z
$pdata$?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z DD imagerel ?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z
	DD	imagerel ?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z+391
	DD	imagerel $unwind$?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z
$pdata$?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z DD imagerel ?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z
	DD	imagerel ?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z+736
	DD	imagerel $unwind$?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z
$pdata$?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z DD imagerel ?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z
	DD	imagerel ?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z+800
	DD	imagerel $unwind$?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z
$pdata$?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z DD imagerel ?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z
	DD	imagerel ?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z+54
	DD	imagerel $unwind$?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z
$pdata$?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z DD imagerel ?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z
	DD	imagerel ?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z+528
	DD	imagerel $unwind$?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z
$pdata$?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z DD imagerel ?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z
	DD	imagerel ?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z+78
	DD	imagerel $unwind$?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z
$pdata$?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z DD imagerel ?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z
	DD	imagerel ?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z+633
	DD	imagerel $unwind$?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z
$pdata$?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z DD imagerel ?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z
	DD	imagerel ?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z+1885
	DD	imagerel $unwind$?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z
$pdata$?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z DD imagerel ?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z
	DD	imagerel ?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z+53
	DD	imagerel $unwind$?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z
$pdata$?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z DD imagerel ?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z
	DD	imagerel ?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z+413
	DD	imagerel $unwind$?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z
$pdata$?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z DD imagerel ?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z
	DD	imagerel ?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z+3258
	DD	imagerel $unwind$?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z
$pdata$?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z DD imagerel ?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z
	DD	imagerel ?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z+108
	DD	imagerel $unwind$?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z
$pdata$?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z DD imagerel ?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z
	DD	imagerel ?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z+65
	DD	imagerel $unwind$?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z
$pdata$?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z DD imagerel ?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z
	DD	imagerel ?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z+180
	DD	imagerel $unwind$?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z
$pdata$?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z DD imagerel ?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z
	DD	imagerel ?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z+491
	DD	imagerel $unwind$?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z
$pdata$?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z DD imagerel ?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z
	DD	imagerel ?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z+534
	DD	imagerel $unwind$?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z
$pdata$?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z DD imagerel ?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z
	DD	imagerel ?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z+102
	DD	imagerel $unwind$?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z
$pdata$?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z DD imagerel ?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z
	DD	imagerel ?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z+69
	DD	imagerel $unwind$?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z
$pdata$?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z DD imagerel ?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z
	DD	imagerel ?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z+118
	DD	imagerel $unwind$?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z
$pdata$?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z DD imagerel ?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z
	DD	imagerel ?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z+780
	DD	imagerel $unwind$?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z
$pdata$?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z DD imagerel ?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z
	DD	imagerel ?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z+557
	DD	imagerel $unwind$?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z
$pdata$?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z DD imagerel ?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z
	DD	imagerel ?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z+1016
	DD	imagerel $unwind$?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z
$pdata$?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z DD imagerel ?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z
	DD	imagerel ?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z+1693
	DD	imagerel $unwind$?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z
$pdata$?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z DD imagerel ?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z
	DD	imagerel ?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z+24
	DD	imagerel $unwind$?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z
$pdata$?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z DD imagerel ?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z
	DD	imagerel ?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z+538
	DD	imagerel $unwind$?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z
$pdata$?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z DD imagerel ?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z
	DD	imagerel ?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z+1566
	DD	imagerel $unwind$?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z
$pdata$?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z DD imagerel ?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z
	DD	imagerel ?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z+149
	DD	imagerel $unwind$?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z
$pdata$?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z DD imagerel ?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z
	DD	imagerel ?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z+118
	DD	imagerel $unwind$?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z
$pdata$?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z DD imagerel ?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z
	DD	imagerel ?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z+118
	DD	imagerel $unwind$?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z
$pdata$?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z DD imagerel ?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z
	DD	imagerel ?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z+118
	DD	imagerel $unwind$?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z
$pdata$?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z DD imagerel ?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z
	DD	imagerel ?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z+132
	DD	imagerel $unwind$?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z
$pdata$?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z DD imagerel ?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z
	DD	imagerel ?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z+421
	DD	imagerel $unwind$?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z
$pdata$?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z DD imagerel ?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z
	DD	imagerel ?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z+387
	DD	imagerel $unwind$?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z
$pdata$?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z DD imagerel ?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z
	DD	imagerel ?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z+421
	DD	imagerel $unwind$?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z
$pdata$?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z DD imagerel ?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z
	DD	imagerel ?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z+501
	DD	imagerel $unwind$?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z
$pdata$?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z DD imagerel ?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z
	DD	imagerel ?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z+5698
	DD	imagerel $unwind$?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z
$pdata$?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD imagerel ?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	imagerel ?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z+892
	DD	imagerel $unwind$?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
$pdata$?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z DD imagerel ?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z
	DD	imagerel ?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z+1097
	DD	imagerel $unwind$?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z
$pdata$?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z DD imagerel ?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z
	DD	imagerel ?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z+1640
	DD	imagerel $unwind$?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z
$pdata$?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z DD imagerel ?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z
	DD	imagerel ?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z+208
	DD	imagerel $unwind$?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z
$pdata$?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z DD imagerel ?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	imagerel ?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z+242
	DD	imagerel $unwind$?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z
$pdata$?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z DD imagerel ?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z
	DD	imagerel ?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z+937
	DD	imagerel $unwind$?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z
$pdata$?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z DD imagerel ?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z
	DD	imagerel ?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z+220
	DD	imagerel $unwind$?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z
$pdata$?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ DD imagerel ?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ
	DD	imagerel ?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ+69
	DD	imagerel $unwind$?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ
$pdata$?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ DD imagerel ?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ
	DD	imagerel ?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ+69
	DD	imagerel $unwind$?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ
$pdata$?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ DD imagerel ?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ
	DD	imagerel ?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ+69
	DD	imagerel $unwind$?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ
$pdata$?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z DD imagerel ?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z
	DD	imagerel ?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z+444
	DD	imagerel $unwind$?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z
$pdata$?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z DD imagerel ?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z
	DD	imagerel ?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z+72
	DD	imagerel $unwind$?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z
$pdata$?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z DD imagerel ?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z
	DD	imagerel ?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z+72
	DD	imagerel $unwind$?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z
$pdata$?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z DD imagerel ?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z
	DD	imagerel ?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z+72
	DD	imagerel $unwind$?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z
$pdata$?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z DD imagerel ?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z
	DD	imagerel ?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z+323
	DD	imagerel $unwind$?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z
$pdata$?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z DD imagerel ?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z
	DD	imagerel ?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z+35
	DD	imagerel $unwind$?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z
$pdata$?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z DD imagerel ?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z
	DD	imagerel ?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z+32
	DD	imagerel $unwind$?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z
$pdata$?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z DD imagerel ?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z
	DD	imagerel ?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z+523
	DD	imagerel $unwind$?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z
$pdata$?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z DD imagerel ?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z
	DD	imagerel ?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z+114
	DD	imagerel $unwind$?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z
$pdata$?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ DD imagerel ?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ
	DD	imagerel ?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ+274
	DD	imagerel $unwind$?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ
$pdata$?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z DD imagerel ?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z
	DD	imagerel ?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z+578
	DD	imagerel $unwind$?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z
$pdata$?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z DD imagerel ?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z
	DD	imagerel ?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z+364
	DD	imagerel $unwind$?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z
$pdata$?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z DD imagerel ?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z
	DD	imagerel ?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z+45
	DD	imagerel $unwind$?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z
$pdata$?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z DD imagerel ?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z
	DD	imagerel ?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z+577
	DD	imagerel $unwind$?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z
$pdata$?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z DD imagerel ?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z
	DD	imagerel ?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z+50
	DD	imagerel $unwind$?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z
$pdata$?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z DD imagerel ?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z
	DD	imagerel ?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z+146
	DD	imagerel $unwind$?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z
$pdata$?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z DD imagerel ?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z
	DD	imagerel ?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z+152
	DD	imagerel $unwind$?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z
$pdata$?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD imagerel ?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	imagerel ?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z+409
	DD	imagerel $unwind$?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
$pdata$?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD imagerel ?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	imagerel ?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z+393
	DD	imagerel $unwind$?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
$pdata$?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD imagerel ?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	imagerel ?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z+45
	DD	imagerel $unwind$?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
$pdata$?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z DD imagerel ?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
	DD	imagerel ?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z+728
	DD	imagerel $unwind$?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
$pdata$?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z DD imagerel ?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z
	DD	imagerel ?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z+533
	DD	imagerel $unwind$?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z
$pdata$?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z DD imagerel ?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z
	DD	imagerel ?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z+223
	DD	imagerel $unwind$?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z
$pdata$?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z DD imagerel ?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z
	DD	imagerel ?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z+427
	DD	imagerel $unwind$?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z
$pdata$?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z DD imagerel ?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z
	DD	imagerel ?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z+162
	DD	imagerel $unwind$?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z
$pdata$?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z DD imagerel ?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z
	DD	imagerel ?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z+537
	DD	imagerel $unwind$?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z
$pdata$?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z DD imagerel ?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z
	DD	imagerel ?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z+173
	DD	imagerel $unwind$?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z
$pdata$?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z DD imagerel ?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z
	DD	imagerel ?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z+109
	DD	imagerel $unwind$?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z
$pdata$?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z DD imagerel ?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
	DD	imagerel ?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z+128
	DD	imagerel $unwind$?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
$pdata$?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z DD imagerel ?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z
	DD	imagerel ?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z+1127
	DD	imagerel $unwind$?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z
$pdata$?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z DD imagerel ?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
	DD	imagerel ?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z+338
	DD	imagerel $unwind$?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
$pdata$?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z DD imagerel ?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z
	DD	imagerel ?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z+232
	DD	imagerel $unwind$?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z
$pdata$?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z DD imagerel ?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z
	DD	imagerel ?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z+59
	DD	imagerel $unwind$?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z
$pdata$?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z DD imagerel ?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z
	DD	imagerel ?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z+128
	DD	imagerel $unwind$?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z
$pdata$?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z DD imagerel ?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z
	DD	imagerel ?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z+115
	DD	imagerel $unwind$?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z
$pdata$?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z DD imagerel ?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z
	DD	imagerel ?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z+149
	DD	imagerel $unwind$?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z
$pdata$?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z DD imagerel ?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z
	DD	imagerel ?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z+1291
	DD	imagerel $unwind$?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z
$pdata$?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z DD imagerel ?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z
	DD	imagerel ?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z+1462
	DD	imagerel $unwind$?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z
$pdata$?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z DD imagerel ?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z
	DD	imagerel ?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z+525
	DD	imagerel $unwind$?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z
$pdata$?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z DD imagerel ?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	imagerel ?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z+49
	DD	imagerel $unwind$?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z
$pdata$?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z DD imagerel ?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z
	DD	imagerel ?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z+92
	DD	imagerel $unwind$?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z
$pdata$?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z DD imagerel ?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z
	DD	imagerel ?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z+78
	DD	imagerel $unwind$?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z
$pdata$?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z DD imagerel ?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z
	DD	imagerel ?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z+82
	DD	imagerel $unwind$?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z
$pdata$?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z DD imagerel ?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z
	DD	imagerel ?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z+103
	DD	imagerel $unwind$?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z
$pdata$?ZenCoreInitTime@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCoreInitTime@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCoreInitTime@@YAXPEAUZenCore@@@Z+62
	DD	imagerel $unwind$?ZenCoreInitTime@@YAXPEAUZenCore@@@Z
$pdata$?ZenCoreInitArena@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCoreInitArena@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCoreInitArena@@YAXPEAUZenCore@@@Z+248
	DD	imagerel $unwind$?ZenCoreInitArena@@YAXPEAUZenCore@@@Z
$pdata$?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z+142
	DD	imagerel $unwind$?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z
$pdata$?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z DD imagerel ?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z
	DD	imagerel ?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z+161
	DD	imagerel $unwind$?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z
$pdata$?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z DD imagerel ?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z
	DD	imagerel ?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z+41
	DD	imagerel $unwind$?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z
$pdata$?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z DD imagerel ?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z
	DD	imagerel ?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z+85
	DD	imagerel $unwind$?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z
$pdata$?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z DD imagerel ?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z
	DD	imagerel ?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z+75
	DD	imagerel $unwind$?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z
$pdata$?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z DD imagerel ?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z
	DD	imagerel ?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z+65
	DD	imagerel $unwind$?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z
$pdata$?ZenCorePullTime@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCorePullTime@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCorePullTime@@YAXPEAUZenCore@@@Z+503
	DD	imagerel $unwind$?ZenCorePullTime@@YAXPEAUZenCore@@@Z
$pdata$?ZenCorePull@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCorePull@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCorePull@@YAXPEAUZenCore@@@Z+155
	DD	imagerel $unwind$?ZenCorePull@@YAXPEAUZenCore@@@Z
$pdata$?ZenCoreTick@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCoreTick@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCoreTick@@YAXPEAUZenCore@@@Z+203
	DD	imagerel $unwind$?ZenCoreTick@@YAXPEAUZenCore@@@Z
$pdata$?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z DD imagerel ?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z
	DD	imagerel ?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z+404
	DD	imagerel $unwind$?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z
$pdata$?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z DD imagerel ?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z
	DD	imagerel ?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z+389
	DD	imagerel $unwind$?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z
$pdata$?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z DD imagerel ?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z
	DD	imagerel ?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z+921
	DD	imagerel $unwind$?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z
$pdata$?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z DD imagerel ?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z
	DD	imagerel ?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z+52
	DD	imagerel $unwind$?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z
$pdata$?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z DD imagerel ?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z
	DD	imagerel ?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z+41
	DD	imagerel $unwind$?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z
$pdata$?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z DD imagerel ?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z
	DD	imagerel ?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z+323
	DD	imagerel $unwind$?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z
$pdata$?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z DD imagerel ?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z
	DD	imagerel ?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z+152
	DD	imagerel $unwind$?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z
$pdata$?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z DD imagerel ?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z
	DD	imagerel ?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z+406
	DD	imagerel $unwind$?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z
$pdata$?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z DD imagerel ?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z
	DD	imagerel ?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z+468
	DD	imagerel $unwind$?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z
$pdata$?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z DD imagerel ?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z
	DD	imagerel ?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z+661
	DD	imagerel $unwind$?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z
$pdata$?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z DD imagerel ?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z
	DD	imagerel ?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z+454
	DD	imagerel $unwind$?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z
$pdata$?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z DD imagerel ?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z
	DD	imagerel ?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z+346
	DD	imagerel $unwind$?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z
$pdata$?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z DD imagerel ?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z
	DD	imagerel ?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z+776
	DD	imagerel $unwind$?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z
$pdata$?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z DD imagerel ?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z
	DD	imagerel ?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z+508
	DD	imagerel $unwind$?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z
$pdata$?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z DD imagerel ?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z
	DD	imagerel ?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z+242
	DD	imagerel $unwind$?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z
$pdata$?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z DD imagerel ?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z
	DD	imagerel ?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z+1047
	DD	imagerel $unwind$?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z
$pdata$?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z DD imagerel ?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z
	DD	imagerel ?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z+81
	DD	imagerel $unwind$?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z
$pdata$?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z DD imagerel ?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z
	DD	imagerel ?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z+303
	DD	imagerel $unwind$?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z
$pdata$?ZenCharSet@@YAPEAHPEBD@Z DD imagerel ?ZenCharSet@@YAPEAHPEBD@Z
	DD	imagerel ?ZenCharSet@@YAPEAHPEBD@Z+418
	DD	imagerel $unwind$?ZenCharSet@@YAPEAHPEBD@Z
$pdata$?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z DD imagerel ?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z
	DD	imagerel ?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z+87
	DD	imagerel $unwind$?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z
$pdata$?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z DD imagerel ?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z
	DD	imagerel ?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z+1422
	DD	imagerel $unwind$?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z
$pdata$?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z DD imagerel ?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z
	DD	imagerel ?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z+827
	DD	imagerel $unwind$?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z
$pdata$?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z DD imagerel ?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z
	DD	imagerel ?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z+704
	DD	imagerel $unwind$?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z
$pdata$?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z DD imagerel ?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z
	DD	imagerel ?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z+278
	DD	imagerel $unwind$?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z
$pdata$?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z DD imagerel ?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z
	DD	imagerel ?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z+173
	DD	imagerel $unwind$?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z
$pdata$?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z DD imagerel ?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z
	DD	imagerel ?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z+802
	DD	imagerel $unwind$?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z
$pdata$?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z DD imagerel ?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z
	DD	imagerel ?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z+141
	DD	imagerel $unwind$?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z
$pdata$?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z DD imagerel ?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z
	DD	imagerel ?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z+1225
	DD	imagerel $unwind$?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z
$pdata$?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z DD imagerel ?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z
	DD	imagerel ?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z+3250
	DD	imagerel $unwind$?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z
$pdata$?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z DD imagerel ?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z
	DD	imagerel ?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z+1237
	DD	imagerel $unwind$?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z
$pdata$?NewReflectTree@@YAPEAUReflectTree@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?NewReflectTree@@YAPEAUReflectTree@@H@Z
$pdata$?CreateEnum@@YAPEAUReflectTree@@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?CreateEnum@@YAPEAUReflectTree@@PEBD@Z
$pdata$?CreateStruct@@YAPEAUReflectTree@@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?CreateStruct@@YAPEAUReflectTree@@PEBD@Z
$pdata$?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z
$pdata$?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z
$pdata$?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ DD imagerel ?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ
	DD	imagerel ?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ+21
	DD	imagerel $unwind$?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ
$pdata$?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z DD imagerel ?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z
	DD	imagerel ?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z+210
	DD	imagerel $unwind$?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z
$pdata$?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z DD imagerel ?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z
	DD	imagerel ?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z+210
	DD	imagerel $unwind$?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z
$pdata$?ZenInitialize@@YAXTi32x4@@PEB_W@Z DD imagerel ?ZenInitialize@@YAXTi32x4@@PEB_W@Z
	DD	imagerel ?ZenInitialize@@YAXTi32x4@@PEB_W@Z+593
	DD	imagerel $unwind$?ZenInitialize@@YAXTi32x4@@PEB_W@Z
$pdata$?ZenTick@@YAXXZ DD imagerel ?ZenTick@@YAXXZ
	DD	imagerel ?ZenTick@@YAXXZ+21
	DD	imagerel $unwind$?ZenTick@@YAXXZ
$pdata$?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z DD imagerel ?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z
	DD	imagerel ?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z+670
	DD	imagerel $unwind$?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z
$pdata$?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z DD imagerel ?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z
	DD	imagerel ?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z+1075
	DD	imagerel $unwind$?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z
$pdata$?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z DD imagerel ?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z
	DD	imagerel ?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z+276
	DD	imagerel $unwind$?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z
$pdata$?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z DD imagerel ?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z
	DD	imagerel ?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z+806
	DD	imagerel $unwind$?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z
pdata	ENDS
;	COMDAT ?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
_TLS	SEGMENT
?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA DD 00H ; `STATIC_ALLOCATOR'::`2'::Min
_TLS	ENDS
CRT$XCU	SEGMENT
?STANDARD_BASIS$initializer$@@3P6AXXZEA DQ FLAT:??__ESTANDARD_BASIS@@YAXXZ ; STANDARD_BASIS$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
CONST	SEGMENT
__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e DB '~', 0faH, '~', 0faH, '~', 0faH
	DB	'~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH
CONST	ENDS
;	COMDAT __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
CONST	SEGMENT
__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d DB 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH
	DB	0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H
CONST	ENDS
;	COMDAT __xmm@f493f493f493f493f493f493f493f493
CONST	SEGMENT
__xmm@f493f493f493f493f493f493f493f493 DB 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
	DB	093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
CONST	ENDS
;	COMDAT __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
CONST	SEGMENT
__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9 DB 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H
	DB	01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH
CONST	ENDS
;	COMDAT __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
CONST	SEGMENT
__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0 DB 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H
	DB	0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H
CONST	ENDS
;	COMDAT __xmm@e09ee565e09ee565e09ee565e09ee565
CONST	SEGMENT
__xmm@e09ee565e09ee565e09ee565e09ee565 DB 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H
	DB	09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H
CONST	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
CONST	SEGMENT
__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a DB 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
	DB	'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
CONST	ENDS
;	COMDAT __xmm@166f166f166f166f166f166f166f166f
CONST	SEGMENT
__xmm@166f166f166f166f166f166f166f166f DB 'o', 016H, 'o', 016H, 'o', 016H
	DB	'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H
CONST	ENDS
;	COMDAT __xmm@12d0046b12d0046b12d0046b12d0046b
CONST	SEGMENT
__xmm@12d0046b12d0046b12d0046b12d0046b DB 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H
	DB	012H, 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H, 012H
CONST	ENDS
;	COMDAT __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
CONST	SEGMENT
__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3 DB 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H
	DB	0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
CONST	SEGMENT
__xmm@11c8e09e11c8e09e11c8e09e11c8e09e DB 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H
	DB	0c8H, 011H, 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@08a914e808a914e808a914e808a914e8
CONST	SEGMENT
__xmm@08a914e808a914e808a914e808a914e8 DB 0e8H, 014H, 0a9H, 08H, 0e8H, 014H
	DB	0a9H, 08H, 0e8H, 014H, 0a9H, 08H, 0e8H, 014H, 0a9H, 08H
CONST	ENDS
;	COMDAT __xmm@01010000010100000101000001010000
CONST	SEGMENT
__xmm@01010000010100000101000001010000 DB 00H, 00H, 01H, 01H, 00H, 00H, 01H
	DB	01H, 00H, 00H, 01H, 01H, 00H, 00H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00000200000002000000020000000200
CONST	SEGMENT
__xmm@00000200000002000000020000000200 DB 00H, 02H, 00H, 00H, 00H, 02H, 00H
	DB	00H, 00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c1d80000
CONST	SEGMENT
__real@c1d80000 DD 0c1d80000r			; -27
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be2cca2e
CONST	SEGMENT
__real@be2cca2e DD 0be2cca2er			; -0.16874
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@497423f0
CONST	SEGMENT
__real@497423f0 DD 0497423f0r			; 999999
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@43660000
CONST	SEGMENT
__real@43660000 DD 043660000r			; 230
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42e60000
CONST	SEGMENT
__real@42e60000 DD 042e60000r			; 115
CONST	ENDS
;	COMDAT __real@42be0000
CONST	SEGMENT
__real@42be0000 DD 042be0000r			; 95
CONST	ENDS
;	COMDAT __real@42960000
CONST	SEGMENT
__real@42960000 DD 042960000r			; 75
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@422c0000
CONST	SEGMENT
__real@422c0000 DD 0422c0000r			; 43
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41d80000
CONST	SEGMENT
__real@41d80000 DD 041d80000r			; 27
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fafc8b007a
CONST	SEGMENT
__real@3ff921fafc8b007a DQ 03ff921fafc8b007ar	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff028f5c0000000
CONST	SEGMENT
__real@3ff028f5c0000000 DQ 03ff028f5c0000000r	; 1.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feb333333333333
CONST	SEGMENT
__real@3feb333333333333 DQ 03feb333333333333r	; 0.85
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fddb3d7
CONST	SEGMENT
__real@3fddb3d7 DD 03fddb3d7r			; 1.73205
CONST	ENDS
;	COMDAT __real@3fdb05b055555555
CONST	SEGMENT
__real@3fdb05b055555555 DQ 03fdb05b055555555r	; 0.422222
CONST	ENDS
;	COMDAT __real@3fd82d82e38e38e4
CONST	SEGMENT
__real@3fd82d82e38e38e4 DQ 03fd82d82e38e38e4r	; 0.377778
CONST	ENDS
;	COMDAT __real@3fd82d82d82d82d8
CONST	SEGMENT
__real@3fd82d82d82d82d8 DQ 03fd82d82d82d82d8r	; 0.377778
CONST	ENDS
;	COMDAT __real@3fd5555560000000
CONST	SEGMENT
__real@3fd5555560000000 DQ 03fd5555560000000r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fc3333333333334
CONST	SEGMENT
__real@3fc3333333333334 DQ 03fc3333333333334r	; 0.15
CONST	ENDS
;	COMDAT __real@3fa73d75
CONST	SEGMENT
__real@3fa73d75 DD 03fa73d75r			; 1.30656
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f1645a2
CONST	SEGMENT
__real@3f1645a2 DD 03f1645a2r			; 0.587
CONST	ENDS
;	COMDAT __real@3f0a8bd4
CONST	SEGMENT
__real@3f0a8bd4 DD 03f0a8bd4r			; 0.541196
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed65e89
CONST	SEGMENT
__real@3ed65e89 DD 03ed65e89r			; 0.41869
CONST	ENDS
;	COMDAT __real@3ec3ef15
CONST	SEGMENT
__real@3ec3ef15 DD 03ec3ef15r			; 0.382683
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3ea99ae9
CONST	SEGMENT
__real@3ea99ae9 DD 03ea99ae9r			; 0.33126
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e991687
CONST	SEGMENT
__real@3e991687 DD 03e991687r			; 0.299
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e199998
CONST	SEGMENT
__real@3e199998 DD 03e199998r			; 0.15
CONST	ENDS
;	COMDAT __real@3de978d5
CONST	SEGMENT
__real@3de978d5 DD 03de978d5r			; 0.114
CONST	ENDS
;	COMDAT __real@3da685db
CONST	SEGMENT
__real@3da685db DD 03da685dbr			; 0.08131
CONST	ENDS
;	COMDAT __real@3d4cccd0
CONST	SEGMENT
__real@3d4cccd0 DD 03d4cccd0r			; 0.05
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@0a4fb11f
CONST	SEGMENT
__real@0a4fb11f DD 00a4fb11fr			; 1e-32
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?TextWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
_DATA	SEGMENT
?TextWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A DD 00H ; `ZenFontDebugUI'::`2'::TextWindow
	DD	00H
	DD	0400H
	DD	0200H
	DQ	FLAT:$SG168631
	ORG $+88
_DATA	ENDS
;	COMDAT ?FontShaderWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
_DATA	SEGMENT
?FontShaderWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A DD 00H ; `ZenFontDebugUI'::`2'::FontShaderWindow
	DD	00H
	DD	02d0H
	DD	02d0H
	DQ	FLAT:$SG168623
	ORG $+88
_DATA	ENDS
;	COMDAT ?ZenFontShaderTab@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
_DATA	SEGMENT
?ZenFontShaderTab@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A DD 00H ; `ZenFontDebugUI'::`2'::ZenFontShaderTab
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DQ	FLAT:$SG168620
	ORG $+88
_DATA	ENDS
;	COMDAT ?ZenFontTab@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
_DATA	SEGMENT
?ZenFontTab@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A DD 00H ; `ZenFontDebugUI'::`2'::ZenFontTab
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DQ	FLAT:$SG168617
	ORG $+88
_DATA	ENDS
;	COMDAT ?ZenWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
_DATA	SEGMENT
?ZenWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A DD 00H ; `ZenFontDebugUI'::`2'::ZenWindow
	DD	00H
	DD	02d0H
	DD	02d0H
	DQ	FLAT:$SG168614
	ORG $+88
_DATA	ENDS
;	COMDAT ?Window@?1??ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z@4UZenView@@A
_DATA	SEGMENT
?Window@?1??ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z@4UZenView@@A DD 00H ; `ZenGluiColorPickerWindowView'::`2'::Window
	DD	00H
	DD	0100H
	DD	0200H
	DQ	FLAT:$SG168594
	ORG $+88
_DATA	ENDS
;	COMDAT ?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB
CONST	SEGMENT
?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB DW 07fH ; `stbi_write_jpg_core'::`13'::fillBits
	DW	07H
CONST	ENDS
;	COMDAT ?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 0ffH ; `stbi_write_jpg_core'::`12'::head2
	DB	0daH
	DB	00H
	DB	0cH
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	011H
	DB	03H
	DB	011H
	DB	00H
	DB	03fH
	DB	00H
CONST	ENDS
;	COMDAT ?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 0ffH ; `stbi_write_jpg_core'::`12'::head0
	DB	0d8H
	DB	0ffH
	DB	0e0H
	DB	00H
	DB	010H
	DB	04aH
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0dbH
	DB	00H
	DB	084H
	DB	00H
CONST	ENDS
;	COMDAT ?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
CONST	SEGMENT
?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB DD 0403504f3r ; 2.82843 ; `stbi_write_jpg_core'::`2'::aasf
	DD	0407b14bfr			; 3.92314
	DD	0406c835fr			; 3.69552
	DD	04054db30r			; 3.32588
	DD	0403504f3r			; 2.82843
	DD	0400e39dar			; 2.22228
	DD	03fc3ef15r			; 1.53073
	DD	03f47c5c2r			; 0.780361
CONST	ENDS
;	COMDAT ?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
CONST	SEGMENT
?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB DD 011H ; `stbi_write_jpg_core'::`2'::UVQT
	DD	012H
	DD	018H
	DD	02fH
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	012H
	DD	015H
	DD	01aH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	018H
	DD	01aH
	DD	038H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	02fH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
CONST	ENDS
;	COMDAT ?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
CONST	SEGMENT
?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB DD 010H ; `stbi_write_jpg_core'::`2'::YQT
	DD	0bH
	DD	0aH
	DD	010H
	DD	018H
	DD	028H
	DD	033H
	DD	03dH
	DD	0cH
	DD	0cH
	DD	0eH
	DD	013H
	DD	01aH
	DD	03aH
	DD	03cH
	DD	037H
	DD	0eH
	DD	0dH
	DD	010H
	DD	018H
	DD	028H
	DD	039H
	DD	045H
	DD	038H
	DD	0eH
	DD	011H
	DD	016H
	DD	01dH
	DD	033H
	DD	057H
	DD	050H
	DD	03eH
	DD	012H
	DD	016H
	DD	025H
	DD	038H
	DD	044H
	DD	06dH
	DD	067H
	DD	04dH
	DD	018H
	DD	023H
	DD	037H
	DD	040H
	DD	051H
	DD	068H
	DD	071H
	DD	05cH
	DD	031H
	DD	040H
	DD	04eH
	DD	057H
	DD	067H
	DD	079H
	DD	078H
	DD	065H
	DD	048H
	DD	05cH
	DD	05fH
	DD	062H
	DD	070H
	DD	064H
	DD	067H
	DD	063H
CONST	ENDS
;	COMDAT ?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::UVAC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0aH
	DW	04H
	DW	018H
	DW	05H
	DW	019H
	DW	05H
	DW	038H
	DW	06H
	DW	078H
	DW	07H
	DW	01f4H
	DW	09H
	DW	03f6H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0bH
	DW	04H
	DW	039H
	DW	06H
	DW	0f6H
	DW	08H
	DW	01f5H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff5H
	DW	0cH
	DW	0ff88H
	DW	010H
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01aH
	DW	05H
	DW	0f7H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff6H
	DW	0cH
	DW	07fc2H
	DW	0fH
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01bH
	DW	05H
	DW	0f8H
	DW	08H
	DW	03f8H
	DW	0aH
	DW	0ff7H
	DW	0cH
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	0ff96H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f6H
	DW	09H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	0ff9eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f9H
	DW	0aH
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	0ffa6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	079H
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	0ffaeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f8H
	DW	0bH
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	0ffb6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0f9H
	DW	08H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f7H
	DW	09H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03fe0H
	DW	0eH
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	0fff5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	07fc3H
	DW	0fH
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 0aH ; `stbi_write_jpg_core'::`2'::YAC_HT
	DW	04H
	DW	00H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0bH
	DW	04H
	DW	01aH
	DW	05H
	DW	078H
	DW	07H
	DW	0f8H
	DW	08H
	DW	03f6H
	DW	0aH
	DW	0ff82H
	DW	010H
	DW	0ff83H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0cH
	DW	04H
	DW	01bH
	DW	05H
	DW	079H
	DW	07H
	DW	01f6H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff84H
	DW	010H
	DW	0ff85H
	DW	010H
	DW	0ff86H
	DW	010H
	DW	0ff87H
	DW	010H
	DW	0ff88H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01cH
	DW	05H
	DW	0f9H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f7H
	DW	09H
	DW	0ff5H
	DW	0cH
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f8H
	DW	0aH
	DW	0ff96H
	DW	010H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ff9eH
	DW	010H
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07bH
	DW	07H
	DW	0ff6H
	DW	0cH
	DW	0ffa6H
	DW	010H
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0faH
	DW	08H
	DW	0ff7H
	DW	0cH
	DW	0ffaeH
	DW	010H
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	07fc0H
	DW	0fH
	DW	0ffb6H
	DW	010H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03f9H
	DW	0aH
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f8H
	DW	0bH
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0fff5H
	DW	010H
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::UVDC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	DW	03feH
	DW	0aH
	DW	07feH
	DW	0bH
	ORG $+976
CONST	ENDS
;	COMDAT ?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::YDC_HT
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	03H
	DW	05H
	DW	03H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	ORG $+976
CONST	ENDS
;	COMDAT ?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	011H
	DB	04H
	DB	05H
	DB	021H
	DB	031H
	DB	06H
	DB	012H
	DB	041H
	DB	051H
	DB	07H
	DB	061H
	DB	071H
	DB	013H
	DB	022H
	DB	032H
	DB	081H
	DB	08H
	DB	014H
	DB	042H
	DB	091H
	DB	0a1H
	DB	0b1H
	DB	0c1H
	DB	09H
	DB	023H
	DB	033H
	DB	052H
	DB	0f0H
	DB	015H
	DB	062H
	DB	072H
	DB	0d1H
	DB	0aH
	DB	016H
	DB	024H
	DB	034H
	DB	0e1H
	DB	025H
	DB	0f1H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
CONST	ENDS
;	COMDAT ?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	04H
	DB	04H
	DB	03H
	DB	04H
	DB	07H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	01H
	DB	02H
	DB	077H
CONST	ENDS
;	COMDAT ?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT ?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_nrcodes
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 01H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_values
	DB	02H
	DB	03H
	DB	00H
	DB	04H
	DB	011H
	DB	05H
	DB	012H
	DB	021H
	DB	031H
	DB	041H
	DB	06H
	DB	013H
	DB	051H
	DB	061H
	DB	07H
	DB	022H
	DB	071H
	DB	014H
	DB	032H
	DB	081H
	DB	091H
	DB	0a1H
	DB	08H
	DB	023H
	DB	042H
	DB	0b1H
	DB	0c1H
	DB	015H
	DB	052H
	DB	0d1H
	DB	0f0H
	DB	024H
	DB	033H
	DB	062H
	DB	072H
	DB	082H
	DB	09H
	DB	0aH
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
CONST	ENDS
;	COMDAT ?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	07dH
CONST	ENDS
;	COMDAT ?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT ?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_nrcodes
	DB	00H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
_DATA	SEGMENT
?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA DD 00H ; `stbiw__encode_png_line'::`2'::firstmap
	DD	01H
	DD	00H
	DD	05H
	DD	06H
_DATA	ENDS
;	COMDAT ?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
_DATA	SEGMENT
?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA DD 00H ; `stbiw__encode_png_line'::`2'::mapping
	DD	01H
	DD	02H
	DD	03H
	DD	04H
_DATA	ENDS
;	COMDAT ?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA
_DATA	SEGMENT
?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA DD 00H	; `stbiw__crc32'::`2'::crc_table
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
;	COMDAT ?disteb@?1??stbi_zlib_compress@@9@4PAEA
_DATA	SEGMENT
?disteb@?1??stbi_zlib_compress@@9@4PAEA DB 00H		; `stbi_zlib_compress'::`2'::disteb
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT ?distc@?1??stbi_zlib_compress@@9@4PAGA
_DATA	SEGMENT
?distc@?1??stbi_zlib_compress@@9@4PAGA DW 01H		; `stbi_zlib_compress'::`2'::distc
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	08000H
_DATA	ENDS
;	COMDAT ?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
_DATA	SEGMENT
?lengtheb@?1??stbi_zlib_compress@@9@4PAEA DB 00H	; `stbi_zlib_compress'::`2'::lengtheb
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	00H
_DATA	ENDS
;	COMDAT ?lengthc@?1??stbi_zlib_compress@@9@4PAGA
_DATA	SEGMENT
?lengthc@?1??stbi_zlib_compress@@9@4PAGA DW 03H		; `stbi_zlib_compress'::`2'::lengthc
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	0103H
_DATA	ENDS
;	COMDAT ?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
_DATA	SEGMENT
?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA DD 00H ; `stbi__shiftsigned'::`2'::shift_table
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	04H
	DD	06H
	DD	00H
_DATA	ENDS
;	COMDAT ?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
_DATA	SEGMENT
?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA DD 00H	; `stbi__shiftsigned'::`2'::mul_table
	DD	0ffH
	DD	055H
	DD	049H
	DD	011H
	DD	021H
	DD	041H
	DD	081H
	DD	01H
_DATA	ENDS
;	COMDAT ?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
_DATA	SEGMENT
?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA DB 'X'
	DB	'XXX PNG chunk not known', 00H		; `stbi__parse_png_file'::`151'::invalid_chunk
_DATA	ENDS
;	COMDAT ?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB
CONST	SEGMENT
?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB DB 089H ; `stbi__check_png_header'::`2'::png_sig
	DB	050H
	DB	04eH
	DB	047H
	DB	0dH
	DB	0aH
	DB	01aH
	DB	0aH
CONST	ENDS
;	COMDAT ?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB
CONST	SEGMENT
?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB DB 010H ; `stbi__compute_huffman_codes'::`2'::length_dezigzag
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
CONST	ENDS
;	COMDAT ?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 052H ; `stbi__process_frame_header'::`22'::rgb
	DB	047H
	DB	042H
CONST	ENDS
;	COMDAT ?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 041H ; `stbi__process_marker'::`52'::tag
	DB	064H
	DB	06fH
	DB	062H
	DB	065H
	DB	00H
CONST	ENDS
;	COMDAT ?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 04aH ; `stbi__process_marker'::`43'::tag
	DB	046H
	DB	049H
	DB	046H
	DB	00H
CONST	ENDS
;	COMDAT ?lowbit4@?1??stb_lowbit8@@9@4PACA
_DATA	SEGMENT
?lowbit4@?1??stb_lowbit8@@9@4PACA DB 0ffH		; `stb_lowbit8'::`2'::lowbit4
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	01H
	DB	00H
_DATA	ENDS
;	COMDAT ?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
_DATA	SEGMENT
?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA DB 00H	; `stb_power_of_two_nearest_prime'::`2'::tab
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	0ffH
	DB	00H
	DB	01H
	DB	0ffH
	DB	0ffH
	DB	03H
	DB	0ffH
	DB	00H
	DB	0ffH
	DB	02H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	DB	0ffH
	DB	0fcH
	DB	0ffH
	DB	05H
	DB	0ffH
	DB	012H
	DB	0feH
	DB	0fH
	DB	02H
	DB	0ffH
	DB	02H
	DB	00H
_DATA	ENDS
;	COMDAT ?box_vertices@?1??stb_box_face_vertex_axis_side@@9@4PAY132HA
_DATA	SEGMENT
?box_vertices@?1??stb_box_face_vertex_axis_side@@9@4PAY132HA DD 01H ; `stb_box_face_vertex_axis_side'::`2'::box_vertices
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
_DATA	ENDS
_DATA	SEGMENT
?stb__log_active@@3HA DD 01H				; stb__log_active
?stb__log_fileline@@3HA DD 01H				; stb__log_fileline
?stb_ps_array_max@@3HA DD 0dH				; stb_ps_array_max
?stb__alloc_global@@3Ustb__alloc@@A DQ 0000000000000000H ; stb__alloc_global
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000002H
?stb__ptrpair_empty@@3Ustb__ptrpair@@A DQ 0000000000000001H ; stb__ptrpair_empty
	DQ	0000000000000001H
?stb__ptrpair_del@@3Ustb__ptrpair@@A DQ 0000000000000002H ; stb__ptrpair_del
	DQ	0000000000000002H
?stb__cfg_sig@@3PEBDEB DQ FLAT:$SG88014			; stb__cfg_sig
?stb__signature@@3PADA DB 073H				; stb__signature
	DB	054H
	DB	062H
	DB	044H
	DB	069H
	DB	052H
	DB	074H
	DB	052H
	DB	065H
	DB	045H
	DB	030H
	DB	032H
?stb__window@@3HA DD 040000H				; stb__window
?stb__hashsize@@3IA DD 08000H				; stb__hashsize
?stbi__l2h_gamma@@3MA DD 0400ccccdr		; 2.2	; stbi__l2h_gamma
?stbi__stdio_callbacks@@3Ustbi_io_callbacks@@A DQ FLAT:?stbi__stdio_read@@YAHPEAXPEADH@Z ; stbi__stdio_callbacks
	DQ	FLAT:?stbi__stdio_skip@@YAXPEAXH@Z
	DQ	FLAT:?stbi__stdio_eof@@YAHPEAX@Z
?stbi__l2h_scale@@3MA DD 03f800000r		; 1	; stbi__l2h_scale
?stbi__h2l_gamma_i@@3MA DD 03ee8ba2er		; 0.454545 ; stbi__h2l_gamma_i
?stbi__h2l_scale_i@@3MA DD 03f800000r		; 1	; stbi__h2l_scale_i
?first_row_filter@@3PAEA DB 00H				; first_row_filter
	DB	01H
	DB	00H
	DB	05H
	DB	06H
	ORG $+7
?TypeInteger@@3UReflectTree@@A DD 0200002H		; TypeInteger
	DD	00H
	DB	'int', 00H
	ORG $+124
	ORG $+296
?FontShaderMax@@3NA DQ 0407ef00000000000r	; 495	; FontShaderMax
?FontShaderOff@@3NA DQ 0407ca00000000000r	; 458	; FontShaderOff
?FontShaderMin@@3NA DQ 0406d600000000000r	; 235	; FontShaderMin
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ESTANDARD_BASIS_COLOR@@YAXXZ DD 020301H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ESTANDARD_BASIS@@YAXXZ DD 020301H
	DD	060027003H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z
	DD	021H
	DD	0faH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z
	DD	027H
	DD	0419H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z
	DD	028H
	DD	0284H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z
	DD	018H
	DD	04bbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z
	DD	027H
	DD	0c98H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z
	DD	027H
	DD	02a9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z
	DD	028H
	DD	03fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z
	DD	022H
	DD	0dbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z
	DD	026H
	DD	02eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z
	DD	01eH
	DD	0146H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z
	DD	026H
	DD	01afH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z
	DD	027H
	DD	027bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z
	DD	018H
	DD	01c2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z
	DD	027H
	DD	037fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenCoreTick@@YAXPEAUZenCore@@@Z
	DD	015H
	DD	0b7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z
	DD	01bH
	DD	059eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z
	DD	01dH
	DD	04f1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z
	DD	018H
	DD	0c5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z
	DD	024H
	DD	01fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z
	DD	01dH
	DD	02beH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z
	DD	01dH
	DD	086H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z
	DD	017H
	DD	080H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z
	DD	025H
	DD	0229H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z
	DD	021H
	DD	0129H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z
	DD	026H
	DD	01a2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z
	DD	01dH
	DD	038fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	018H
	DD	0d8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	01dH
	DD	0362H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z
	DD	027H
	DD	0604H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z
	DD	027H
	DD	0200H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z
	DD	01dH
	DD	0683H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z
	DD	028H
	DD	03deH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z
	DD	028H
	DD	0213H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z
	DD	026H
	DD	02f2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z
	DD	024H
	DD	0202H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z
	DD	024H
	DD	01d7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z
	DD	022H
	DD	0ca0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z
	DD	01aH
	DD	0189H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z
	DD	026H
	DD	0705H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z
	DD	014H
	DD	0c6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z
	DD	013H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenFillTexture@@YAXPEAUZenTexture@@I@Z
	DD	019H
	DD	070H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ColorPackU@@YAITf32x4@@@Z
	DD	015H
	DD	06fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z
	DD	01aH
	DD	0a1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ColorNormalize@@YA?ATf32x4@@T1@@Z
	DD	01aH
	DD	0a4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
	DD	02aH
	DD	01307H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
	DD	027H
	DD	06cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_png_to_mem
	DD	024H
	DD	09e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
	DD	026H
	DD	01aeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
	DD	024H
	DD	0610H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_to_func
	DD	026H
	DD	092H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg
	DD	025H
	DD	0a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
	DD	024H
	DD	0631H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
	DD	020H
	DD	0d3cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
	DD	025H
	DD	04eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
	DD	016H
	DD	02fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
	DD	020H
	DD	0368H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
	DD	025H
	DD	011e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
	DD	01aH
	DD	069cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
	DD	016H
	DD	0c5cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__idct_block@@YAXPEAEHQEAF@Z
	DD	01fH
	DD	0a83H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
	DD	022H
	DD	0150H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
	DD	025H
	DD	01b7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
	DD	025H
	DD	01b1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__vertical_flip@@YAXPEAXHHH@Z
	DD	024H
	DD	0182H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
	DD	02bH
	DD	03daH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	02bH
	DD	0127H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	022H
	DD	027aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	025H
	DD	0207H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	025H
	DD	0908H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	022H
	DD	0e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	025H
	DD	011b1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__cpuid3@@YAHXZ
	DD	010H
	DD	03dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_malloc
	DD	025H
	DD	0d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize_headerflag
	DD	02aH
	DD	0e5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize
	DD	02aH
	DD	0e2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_file
	DD	016H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_file
	DD	025H
	DD	090H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_callbacks
	DD	025H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_memory
	DD	024H
	DD	068H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_file
	DD	016H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_file
	DD	025H
	DD	06cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file_16
	DD	025H
	DD	0acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_gif_from_memory
	DD	024H
	DD	0123H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file
	DD	025H
	DD	0acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
	DD	027H
	DD	08fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	021H
	DD	04acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	021H
	DD	0431H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	01cH
	DD	0440H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	019H
	DD	0140H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	025H
	DD	04edH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	021H
	DD	01393H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	01fH
	DD	013a7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt_GetGlyphSDF
	DD	026H
	DD	01949H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z
	DD	01bH
	DD	0735H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z
	DD	024H
	DD	0772H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__wildmatch_raw@@YAHPEAD0HH@Z
	DD	025H
	DD	014dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z
	DD	01cH
	DD	05f8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z
	DD	020H
	DD	04d1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z
	DD	020H
	DD	03fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z
	DD	01bH
	DD	01d4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z
	DD	016H
	DD	08cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_cfg_open
	DD	01dH
	DD	03c6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb__sha1@@YAXPEAEQEAI@Z
	DD	01bH
	DD	050fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_sha1_readable
	DD	01dH
	DD	0167H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_sha1_file
	DD	01bH
	DD	03b2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_sha1
	DD	020H
	DD	03bfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_dirtree2_from_files_relative
	DD	020H
	DD	08a1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?readdir_raw@@YAPEAPEADPEADH0@Z
	DD	025H
	DD	03f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z
	DD	01bH
	DD	011eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_copyfile
	DD	01bH
	DD	0199H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_fclose
	DD	020H
	DD	02e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_fopen
	DD	021H
	DD	01bdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_ftimestamp
	DD	013H
	DD	03fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_fexists
	DD	013H
	DD	04aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_fgets_malloc
	DD	016H
	DD	0216H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_replaceext
	DD	026H
	DD	0d3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_replacedir
	DD	026H
	DD	09dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stb_swap
	DD	020H
	DD	0185H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbprint
	DD	025H
	DD	0f0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z
	DD	01aH
	DD	075H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixI@@YA?AUf32_4x4@@XZ
	DD	015H
	DD	0d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MAIN@@YAXXZ
	DD	011H
	DD	0a5H
voltbl	ENDS
xdata	SEGMENT
$unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD 011701H
	DD	06217H
$unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD 031501H
	DD	070114215H
	DD	06010H
$unwind$??1_TRACE_BLOCK@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z DD 031a01H
	DD	07016421aH
	DD	06015H
$unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 041c01H
	DD	019011cH
	DD	060147015H
$unwind$?StaticAlloc@@YAPEAXH_K@Z DD 010d01H
	DD	0820dH
$unwind$?HeapAlloc@@YAPEAXH_K@Z DD 010d01H
	DD	0820dH
$unwind$?HeapFree@@YAXPEAX@Z DD 010901H
	DD	06209H
$unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 041c01H
	DD	01f011cH
	DD	060147015H
$unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 011701H
	DD	08217H
$unwind$??Bstr32@@QEAA_JXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAA_KXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAANXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAMXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAIXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAHXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??7str32@@QEAAHXZ DD 010901H
	DD	02209H
$unwind$?strtoi@@YA_JUstr32@@@Z DD 010901H
	DD	06209H
$unwind$?MAIN@@YAXXZ DD 031619H
	DD	07003e207H
	DD	06002H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$?FileExists@@YAHPEBD@Z DD 010901H
	DD	06209H
$unwind$?GetThreadID@@YAHXZ DD 010401H
	DD	04204H
$unwind$?GetPerformanceFrequency@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?GetPerformanceCounter@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?Widen@@YAPEA_WHPEBD@Z DD 010d01H
	DD	0820dH
$unwind$?OutputW@@YAXPEB_W@Z DD 010901H
	DD	08209H
$unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?UnloadFileData@@YAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?WriteFileData@@YAIIPEAXPEBD@Z DD 041701H
	DD	0270117H
	DD	0600f7010H
$unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 041301H
	DD	0390113H
	DD	0600b700cH
$unwind$?GetErrorCode@@YAHH@Z DD 040d01H
	DD	013010dH
	DD	060057006H
$unwind$?GetErrorStringA@@YAPEBDHH@Z DD 041101H
	DD	0210111H
	DD	06009700aH
$unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD 011701H
	DD	06217H
$unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD 011701H
	DD	06217H
$unwind$?FormatA@@YAPEADPEBDZZ DD 011801H
	DD	08218H
$unwind$?FormatW@@YAPEA_WPEB_WZZ DD 011801H
	DD	08218H
$unwind$?RuneIsEOL@@YAHH@Z DD 010801H
	DD	02208H
$unwind$WinMain DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$?PlatformInitialize@@YAXXZ DD 010401H
	DD	08204H
$unwind$?PlatformDeinitialize@@YAXXZ DD 010401H
	DD	04204H
$unwind$?CStrW@@YAPEB_WPEBD@Z DD 010901H
	DD	04209H
$unwind$?FileNameIsSymLink@@YAHPEBD@Z DD 010901H
	DD	02209H
$unwind$?TraceMessageKindToString@@YAPEB_WH@Z DD 010801H
	DD	02208H
$unwind$?f32x2_make@@YA?AUf32x2@@MM@Z DD 011001H
	DD	02210H
$unwind$?zen_lmap@@YAMMMMMM@Z DD 011c01H
	DD	0421cH
$unwind$?zen_clamp@@YAMMMM@Z DD 011601H
	DD	02216H
$unwind$?zen_clampi@@YAHHHH@Z DD 011101H
	DD	02211H
$unwind$??D@YA?AUf32x2@@U0@0@Z DD 010e01H
	DD	0220eH
$unwind$??D@YA?AUf32x2@@U0@Ui32x2@@@Z DD 010e01H
	DD	0220eH
$unwind$??D@YA?AUf32x2@@Ui32x2@@U0@@Z DD 010e01H
	DD	0220eH
$unwind$??K@YA?AUi32x2@@U0@H@Z DD 010d01H
	DD	0220dH
$unwind$??K@YA?AUf32x2@@MUi32x2@@@Z DD 010f01H
	DD	0220fH
$unwind$??H@YA?AUi32x2@@U0@0@Z DD 010e01H
	DD	0220eH
$unwind$??G@YA?AUi32x2@@U0@0@Z DD 010e01H
	DD	0220eH
$unwind$??G@YA?AUf32x2@@U0@0@Z DD 010e01H
	DD	0220eH
$unwind$?MatrixI@@YA?AUf32_4x4@@XZ DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z DD 031f19H
	DD	0700c4210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z DD 010901H
	DD	02209H
$unwind$?PIXEL_FORMAT_SIZE@@YAHH@Z DD 010801H
	DD	02208H
$unwind$?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z DD 010e01H
	DD	0620eH
$unwind$?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z DD 011301H
	DD	04213H
$unwind$?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z DD 011801H
	DD	04218H
$unwind$stb_wrapper_malloc DD 011801H
	DD	04218H
$unwind$stb_wrapper_free DD 011301H
	DD	0c213H
$unwind$stb_wrapper_realloc DD 011801H
	DD	0c218H
$unwind$stb_wrapper_listall DD 010901H
	DD	08209H
$unwind$stb_wrapper_dump DD 010901H
	DD	08209H
$unwind$stb_wrapper_allocsize DD 010901H
	DD	06209H
$unwind$stb_wrapper_check DD 010901H
	DD	0a209H
$unwind$?stb__realloc_raw@@YAPEAXPEAXH@Z DD 010d01H
	DD	0420dH
$unwind$stbprint DD 022d19H
	DD	08b011bH
	DD	imagerel __GSHandlerCheck
	DD	0440H
$unwind$stb_sprintf DD 011801H
	DD	06218H
$unwind$stb_mprintf DD 011801H
	DD	06218H
$unwind$stb_snprintf DD 011801H
	DD	06218H
$unwind$stb_vsnprintf DD 011801H
	DD	08218H
$unwind$?stb__print_one@@YAXPEAXPEAD_J@Z DD 011301H
	DD	06213H
$unwind$?stb__print@@YAXPEAD@Z DD 010901H
	DD	08209H
$unwind$stb_from_utf8 DD 011301H
	DD	08213H
$unwind$stb_to_utf8 DD 011301H
	DD	02213H
$unwind$stb__from_utf8 DD 010901H
	DD	04209H
$unwind$stb__from_utf8_alt DD 010901H
	DD	04209H
$unwind$stb__to_utf8 DD 010901H
	DD	04209H
$unwind$stb_fatal DD 011801H
	DD	0a218H
$unwind$stb_ DD	011801H
	DD	06218H
$unwind$stb_append_to_file DD 011801H
	DD	06218H
$unwind$stb_swap DD 022819H
	DD	0290116H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$stb_copy DD 010e01H
	DD	0620eH
$unwind$stb_pointer_array_free DD 010d01H
	DD	0620dH
$unwind$stb_array_block_alloc DD 010c01H
	DD	0820cH
$unwind$stb__temp DD 011201H
	DD	04212H
$unwind$stb_tempfree DD 010e01H
	DD	0420eH
$unwind$stb_newell_normal DD 011701H
	DD	08217H
$unwind$stb_box_face_vertex_axis_side DD 011101H
	DD	04211H
$unwind$stb_linear_controller DD 011b01H
	DD	0221bH
$unwind$stb_float_eq DD 011b01H
	DD	0421bH
$unwind$stb_is_prime DD 010801H
	DD	04208H
$unwind$stb_power_of_two_nearest_prime DD 010801H
	DD	02208H
$unwind$stb_cubic_bezier_1d DD 011c01H
	DD	0221cH
$unwind$stb_is_pow2 DD 010901H
	DD	02209H
$unwind$stb_log2_ceil DD 010901H
	DD	04209H
$unwind$stb_log2_floor DD 010901H
	DD	02209H
$unwind$stb_lowbit8 DD 010801H
	DD	02208H
$unwind$stb_highbit8 DD 010801H
	DD	04208H
$unwind$?stb__intcmp@@YAHPEBX0@Z DD 010e01H
	DD	0220eH
$unwind$?stb__intcmprev@@YAHPEBX0@Z DD 010e01H
	DD	0220eH
$unwind$?stb__ucharcmp@@YAHPEBX0@Z DD 010e01H
	DD	0220eH
$unwind$?stb__floatcmp@@YAHPEBX0@Z DD 010e01H
	DD	0220eH
$unwind$?stb__doublecmp@@YAHPEBX0@Z DD 010e01H
	DD	0420eH
$unwind$?stb__qsort_strcmp@@YAHPEBX0@Z DD 010e01H
	DD	0620eH
$unwind$?stb__qsort_stricmp@@YAHPEBX0@Z DD 010e01H
	DD	0620eH
$unwind$?stb__memcmp@@YAHPEBX0@Z DD 010e01H
	DD	0620eH
$unwind$stb_search_binary DD 011701H
	DD	06217H
$unwind$stb_search_open DD 011201H
	DD	06212H
$unwind$stb_probe DD 011201H
	DD	06212H
$unwind$?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z DD 010e01H
	DD	0620eH
$unwind$stb_skipwhite DD 010901H
	DD	04209H
$unwind$stb_trimwhite DD 010901H
	DD	06209H
$unwind$stb_strncpy DD 011301H
	DD	04213H
$unwind$stb_substr DD 010d01H
	DD	0620dH
$unwind$stb_duplower DD 010901H
	DD	06209H
$unwind$stb_tolower DD 010901H
	DD	04209H
$unwind$stb_strrchr2 DD 011201H
	DD	02212H
$unwind$stb_strtok DD 011301H
	DD	06213H
$unwind$stb_strtok_keep DD 011301H
	DD	06213H
$unwind$stb_strtok_invert DD 011301H
	DD	06213H
$unwind$stb_dupreplace DD 011301H
	DD	0c213H
$unwind$stb_replaceinplace DD 011301H
	DD	0a213H
$unwind$stb_splitpath DD 011301H
	DD	04213H
$unwind$stb_splitpathdup DD 010d01H
	DD	0420dH
$unwind$stb_replacedir DD 022e19H
	DD	0209011cH
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stb_replaceext DD 022e19H
	DD	020b011cH
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stb_shorten_path_readable DD 010d01H
	DD	0c20dH
$unwind$stb_suffix DD 010e01H
	DD	0820eH
$unwind$stb_suffixi DD 010e01H
	DD	0820eH
$unwind$stb_prefix DD 010e01H
	DD	0220eH
$unwind$stb_strichr DD 010d01H
	DD	0620dH
$unwind$stb_stristr DD 010e01H
	DD	0620eH
$unwind$stb_prefix_count DD 010e01H
	DD	0220eH
$unwind$stb_plural DD 010801H
	DD	02208H
$unwind$stb_strscpy DD 011301H
	DD	06213H
$unwind$stb_tokens DD 011301H
	DD	08213H
$unwind$stb_tokens_nested DD 011801H
	DD	08218H
$unwind$stb_tokens_nested_empty DD 011801H
	DD	08218H
$unwind$stb_tokens_allowempty DD 011301H
	DD	08213H
$unwind$stb_tokens_stripwhite DD 011301H
	DD	08213H
$unwind$stb_tokens_quoted DD 011301H
	DD	08213H
$unwind$?stb_strtok_raw@@YAPEADPEAD00HH@Z DD 011801H
	DD	06218H
$unwind$?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z DD 021b01H
	DD	011011bH
$unwind$?stb__add_section@@YAXPEAD0_J1@Z DD 011801H
	DD	08218H
$unwind$?stb__splitpath_raw@@YAPEADPEAD0H@Z DD 011301H
	DD	0e213H
$unwind$stb_free DD 010901H
	DD	0c209H
$unwind$stb_malloc_global DD 010901H
	DD	04209H
$unwind$stb_malloc DD 010e01H
	DD	0420eH
$unwind$stb_malloc_nofree DD 010e01H
	DD	0420eH
$unwind$stb_malloc_leaf DD 010e01H
	DD	0420eH
$unwind$stb_malloc_raw DD 010e01H
	DD	0420eH
$unwind$stb_realloc DD 010e01H
	DD	0a20eH
$unwind$stb_reassign DD 010e01H
	DD	0a20eH
$unwind$stb_malloc_validate DD 010e01H
	DD	0820eH
$unwind$?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z DD 010901H
	DD	02209H
$unwind$?stb__prevn@@YAPEAPEAPEAXPEAX@Z DD 010901H
	DD	06209H
$unwind$?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z DD 011701H
	DD	08217H
$unwind$?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z DD 010901H
	DD	02209H
$unwind$?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z DD 011701H
	DD	08217H
$unwind$?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z DD 010901H
	DD	06209H
$unwind$?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z DD 010e01H
	DD	0620eH
$unwind$?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z DD 010e01H
	DD	0620eH
$unwind$?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z DD 011801H
	DD	0c218H
$unwind$?stb_malloc_string@@YAPEADPEAX_K@Z DD 010e01H
	DD	0420eH
$unwind$?stb_realloc_c@@YAPEAXPEAX0_K@Z DD 011301H
	DD	04213H
$unwind$stb_arr_malloc DD 010e01H
	DD	0620eH
$unwind$stb_arr_malloc_parent DD 010901H
	DD	02209H
$unwind$stb_arr_free_ DD 010901H
	DD	06209H
$unwind$stb__arr_copy_ DD 010d01H
	DD	0620dH
$unwind$stb__arr_setsize_ DD 011201H
	DD	06212H
$unwind$stb__arr_setlen_ DD 011201H
	DD	06212H
$unwind$stb__arr_addlen_ DD 011201H
	DD	06212H
$unwind$stb__arr_deleten_ DD 011701H
	DD	08217H
$unwind$stb__arr_insertn_ DD 011701H
	DD	08217H
$unwind$?stb__arr_malloc@@YAPEAXH@Z DD 010801H
	DD	04208H
$unwind$?stb__arrsize_@@YAXPEAPEAXHHH@Z DD 011701H
	DD	08217H
$unwind$stb_hash DD 010901H
	DD	02209H
$unwind$stb_hashptr DD 010901H
	DD	02209H
$unwind$stb_hashlen DD 010d01H
	DD	0220dH
$unwind$stb_rehash_improved DD 010801H
	DD	04208H
$unwind$stb_hash_fast DD 010d01H
	DD	0420dH
$unwind$stb_hash2 DD 010e01H
	DD	0220eH
$unwind$stb_ptrmap_init DD 010d01H
	DD	0620dH
$unwind$stb_ptrmap_create DD 010401H
	DD	06204H
$unwind$stb_ptrmap_copy DD 010901H
	DD	06209H
$unwind$stb_ptrmap_destroy DD 010901H
	DD	06209H
$unwind$stb_ptrmap_get_flag DD 011301H
	DD	06213H
$unwind$stb_ptrmap_get DD 010e01H
	DD	0620eH
$unwind$stb_ptrmap_set DD 011301H
	DD	06213H
$unwind$stb_ptrmap_add DD 011301H
	DD	06213H
$unwind$stb_ptrmap_update DD 011301H
	DD	06213H
$unwind$stb_ptrmap_remove DD 011301H
	DD	06213H
$unwind$stb_idict_init DD 010d01H
	DD	0620dH
$unwind$stb_idict_create DD 010401H
	DD	06204H
$unwind$stb_idict_copy DD 010901H
	DD	06209H
$unwind$stb_idict_destroy DD 010901H
	DD	06209H
$unwind$stb_idict_get_flag DD 011201H
	DD	06212H
$unwind$stb_idict_set DD 011201H
	DD	06212H
$unwind$stb_idict_add DD 011201H
	DD	06212H
$unwind$stb_idict_update DD 011201H
	DD	06212H
$unwind$stb_idict_remove DD 011201H
	DD	06212H
$unwind$stb_ptrmap_delete DD 010e01H
	DD	0620eH
$unwind$stb_ptrmap_new DD 010401H
	DD	04204H
$unwind$stb_idict_new_size DD 010801H
	DD	06208H
$unwind$stb_idict_remove_all DD 010901H
	DD	02209H
$unwind$stb_uidict_reset DD 010901H
	DD	02209H
$unwind$?stb__stb_ptrmap_hash@@YAIPEAX@Z DD 010901H
	DD	04209H
$unwind$?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z DD 021001H
	DD	0110110H
$unwind$?stb_ptrmap_getkey@@YAHPEAUstb__st_stb_ptrmap@@PEAXPEAPEAX@Z DD 011301H
	DD	06213H
$unwind$?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z DD 011801H
	DD	0a218H
$unwind$?stb__stb_idict_hash@@YAIH@Z DD 010801H
	DD	04208H
$unwind$?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z DD 021001H
	DD	0110110H
$unwind$?stb_idict_getkey@@YAHPEAUstb__st_stb_idict@@HPEAH@Z DD 011201H
	DD	06212H
$unwind$?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z DD 011701H
	DD	0a217H
$unwind$?stb__stb_uidict_hash@@YAIH@Z DD 010801H
	DD	04208H
$unwind$?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stb_uidict_create@@YAPEAUstb__st_stb_uidict@@XZ DD 010401H
	DD	06204H
$unwind$?stb_uidict_destroy@@YAXPEAUstb__st_stb_uidict@@@Z DD 010901H
	DD	06209H
$unwind$?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z DD 010d01H
	DD	0e20dH
$unwind$?stb_uidict_get_flag@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z DD 011201H
	DD	06212H
$unwind$?stb_uidict_getkey@@YAHPEAUstb__st_stb_uidict@@HPEAH@Z DD 011201H
	DD	06212H
$unwind$?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z DD 011701H
	DD	0a217H
$unwind$?stb_uidict_set@@YAHPEAUstb__st_stb_uidict@@HI@Z DD 011201H
	DD	06212H
$unwind$?stb_uidict_add@@YAHPEAUstb__st_stb_uidict@@HI@Z DD 011201H
	DD	06212H
$unwind$?stb_uidict_update@@YAHPEAUstb__st_stb_uidict@@HI@Z DD 011201H
	DD	06212H
$unwind$?stb_uidict_remove@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z DD 011201H
	DD	06212H
$unwind$?stb_uidict_copy@@YAPEAUstb__st_stb_uidict@@PEAU1@@Z DD 010901H
	DD	06209H
$unwind$stb_sparse_ptr_matrix_new DD 010801H
	DD	06208H
$unwind$stb_sparse_ptr_matrix_free DD 010901H
	DD	04209H
$unwind$stb_sparse_ptr_matrix_get DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z DD 010901H
	DD	06209H
$unwind$?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z DD 030f01H
	DD	0700b620fH
	DD	0600aH
$unwind$?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ DD 010401H
	DD	06204H
$unwind$?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z DD 010901H
	DD	06209H
$unwind$?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$?stb__spmatrix_getkey@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAU2@@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z DD 031a01H
	DD	07016e21aH
	DD	06015H
$unwind$?stb__spmatrix_set@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stb__spmatrix_update@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stb__spmatrix_remove@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?stb__spmatrix_copy@@YAPEAUstb__st_stb_spmatrix@@PEAU1@@Z DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$stb_sdict_init DD 010d01H
	DD	0620dH
$unwind$stb_sdict_create DD 010401H
	DD	06204H
$unwind$stb_sdict_copy DD 010901H
	DD	08209H
$unwind$stb_sdict_destroy DD 010901H
	DD	06209H
$unwind$stb_sdict_get_flag DD 011301H
	DD	06213H
$unwind$stb_sdict_get DD 010e01H
	DD	0620eH
$unwind$stb_sdict_set DD 011301H
	DD	06213H
$unwind$stb_sdict_add DD 011301H
	DD	06213H
$unwind$stb_sdict_update DD 011301H
	DD	06213H
$unwind$stb_sdict_remove DD 011301H
	DD	06213H
$unwind$stb_sdict_new DD 010801H
	DD	06208H
$unwind$stb_sdict_delete DD 010901H
	DD	04209H
$unwind$stb_sdict_change DD 011301H
	DD	06213H
$unwind$?stb__stb_sdict_hash@@YAIPEAD@Z DD 010901H
	DD	04209H
$unwind$?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z DD 021001H
	DD	0110110H
$unwind$?stb_sdict_getkey@@YAHPEAUstb__st_stb_sdict@@PEADPEAPEAD@Z DD 011301H
	DD	06213H
$unwind$?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z DD 011801H
	DD	0e218H
$unwind$?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z DD 010901H
	DD	0c209H
$unwind$stb_fput_varlen64 DD 021101H
	DD	0130111H
$unwind$stb_fget_varlen64 DD 010901H
	DD	08209H
$unwind$stb_file DD 010e01H
	DD	0a20eH
$unwind$stb_file_max DD 010e01H
	DD	0a20eH
$unwind$stb_filelen DD 010901H
	DD	06209H
$unwind$stb_filewrite DD 011301H
	DD	0c213H
$unwind$stb_filewritestr DD 010e01H
	DD	0420eH
$unwind$stb_stringfile DD 021101H
	DD	0110111H
$unwind$stb_stringfile_trimmed DD 011301H
	DD	08213H
$unwind$stb_fgets DD 011201H
	DD	06212H
$unwind$stb_fgets_malloc DD 021e19H
	DD	071010cH
	DD	imagerel __GSHandlerCheck
	DD	0370H
$unwind$stb_fexists DD 011819H
	DD	0c209H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$stb_fcmp DD 010e01H
	DD	0c20eH
$unwind$stb_feq DD 010e01H
	DD	0c20eH
$unwind$stb_ftimestamp DD 011819H
	DD	0c209H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$stb_fullpath DD 011201H
	DD	06212H
$unwind$stb_fopen DD 022919H
	DD	040f0117H
	DD	imagerel __GSHandlerCheck
	DD	02060H
$unwind$stb_fclose DD 022819H
	DD	02150116H
	DD	imagerel __GSHandlerCheck
	DD	01090H
$unwind$stb_copyfile DD 022319H
	DD	0910111H
	DD	imagerel __GSHandlerCheck
	DD	0470H
$unwind$stb_fwrite32 DD 010d01H
	DD	0420dH
$unwind$stb_fput_varlen DD 010d01H
	DD	0620dH
$unwind$stb_fput_varlenu DD 010d01H
	DD	0a20dH
$unwind$stb_fget_varlen DD 010901H
	DD	06209H
$unwind$stb_fget_varlenu DD 010901H
	DD	06209H
$unwind$stb_fput_ranged DD 011701H
	DD	04217H
$unwind$stb_fget_ranged DD 011201H
	DD	06212H
$unwind$stb_size_varlen DD 010801H
	DD	06208H
$unwind$?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z DD 022319H
	DD	010b0111H
	DD	imagerel __GSHandlerCheck
	DD	0840H
$unwind$?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z DD 011301H
	DD	08213H
$unwind$?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z DD 010e01H
	DD	0820eH
$unwind$?stb_strdup@@YAPEADPEADPEAX@Z DD 010e01H
	DD	0620eH
$unwind$?stb_strip_final_slash@@YAPEADPEAD@Z DD 010901H
	DD	06209H
$unwind$?stb_strip_final_slash_regardless@@YAPEADPEAD@Z DD 010901H
	DD	06209H
$unwind$stb_getopt_param DD 021601H
	DD	0170116H
$unwind$stb_getopt DD 010e01H
	DD	0420eH
$unwind$stb_getopt_free DD 010901H
	DD	06209H
$unwind$stb_readdir_files DD 010901H
	DD	04209H
$unwind$stb_readdir_files_mask DD 010e01H
	DD	0420eH
$unwind$stb_readdir_subdirs DD 010901H
	DD	04209H
$unwind$stb_readdir_subdirs_mask DD 010e01H
	DD	0420eH
$unwind$stb_readdir_free DD 010901H
	DD	06209H
$unwind$stb_readdir_recursive DD 010e01H
	DD	0420eH
$unwind$stb_delete_directory_recursive DD 010901H
	DD	08209H
$unwind$?isdotdirname@@YAHPEAD@Z DD 010901H
	DD	02209H
$unwind$stb_wildmatchi DD 010e01H
	DD	0620eH
$unwind$?readdir_raw@@YAPEAPEADPEADH0@Z DD 022d19H
	DD	065d011bH
	DD	imagerel __GSHandlerCheck
	DD	032d0H
$unwind$?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z DD 011301H
	DD	0e213H
$unwind$stb_dirtree2_from_files_relative DD 022819H
	DD	01250116H
	DD	imagerel __GSHandlerCheck
	DD	0910H
$unwind$stb_dirtree2_from_files DD 010d01H
	DD	0420dH
$unwind$stb_dir_is_prefix DD 011201H
	DD	04212H
$unwind$stb_adler32 DD 011201H
	DD	04212H
$unwind$stb_crc32_block DD 011201H
	DD	02212H
$unwind$stb_crc32 DD 010d01H
	DD	0420dH
$unwind$stb_sha1 DD 022819H
	DD	01f0116H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$stb_sha1_file DD 022319H
	DD	0210111H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$stb_sha1_readable DD 042519H
	DD	0150113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?stb__sha1@@YAXPEAEQEAI@Z DD 022319H
	DD	0310111H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$stb_reg_open DD 010e01H
	DD	0e20eH
$unwind$stb_reg_close DD 010901H
	DD	04209H
$unwind$stb_reg_read DD 011801H
	DD	08218H
$unwind$stb_reg_read_string DD 011801H
	DD	04218H
$unwind$stb_reg_write DD 011801H
	DD	06218H
$unwind$stb_reg_write_string DD 011301H
	DD	06213H
$unwind$stb_cfg_open DD 042519H
	DD	0570113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	02a0H
$unwind$stb_cfg_close DD 010901H
	DD	08209H
$unwind$stb_cfg_read DD 011801H
	DD	06218H
$unwind$stb_cfg_write DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$stb_cfg_read_string DD 011801H
	DD	04218H
$unwind$stb_cfg_write_string DD 011301H
	DD	04213H
$unwind$stb_cfg_delete DD 010e01H
	DD	0820eH
$unwind$stb_cfg_set_directory DD 010901H
	DD	04209H
$unwind$?stb_dirtree_free@@YAXPEAUstb_dirtree@@@Z DD 010901H
	DD	04209H
$unwind$?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z DD 021e19H
	DD	029010cH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z DD 022319H
	DD	010d0111H
	DD	imagerel __GSHandlerCheck
	DD	0850H
$unwind$?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$?stb_dirtree_db_add_dir@@YAXPEAUstb_dirtree@@PEAD_J@Z DD 011301H
	DD	04213H
$unwind$?stb_dirtree_db_add_file@@YAXPEAUstb_dirtree@@PEADH_J2@Z DD 011801H
	DD	06218H
$unwind$?stb_dirtree_db_read@@YAXPEAUstb_dirtree@@PEAD1@Z DD 011301H
	DD	06213H
$unwind$?stb_dirtree_db_write@@YAXPEAUstb_dirtree@@PEAD1@Z DD 011301H
	DD	04213H
$unwind$?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z DD 031501H
	DD	07011c215H
	DD	06010H
$unwind$?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z DD 041c01H
	DD	011011cH
	DD	060147015H
$unwind$?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z DD 011301H
	DD	0e213H
$unwind$?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z DD 022819H
	DD	010f0116H
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z DD 022819H
	DD	01670116H
	DD	imagerel __GSHandlerCheck
	DD	0b20H
$unwind$?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z DD 032419H
	DD	01e0112H
	DD	0300bH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z DD 010901H
	DD	04209H
$unwind$?stb__hashfind@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?stb__historyfind@@YAHPEAX@Z DD 010901H
	DD	02209H
$unwind$?stb__add_alloc@@YAXPEAX_KPEADH@Z DD 011801H
	DD	06218H
$unwind$?stb__grow_alloc@@YAXXZ DD 010401H
	DD	08204H
$unwind$?stb__remove_alloc@@YAXHPEADH@Z DD 021001H
	DD	0600f7010H
$unwind$stb_ps_find DD 010e01H
	DD	0c20eH
$unwind$stb_ps_add DD 021101H
	DD	0130111H
$unwind$stb_ps_remove DD 021101H
	DD	0150111H
$unwind$stb_ps_remove_any DD 010e01H
	DD	0c20eH
$unwind$stb_ps_delete DD 010901H
	DD	06209H
$unwind$stb_ps_count DD 010901H
	DD	06209H
$unwind$stb_ps_copy DD 030b01H
	DD	07007a20bH
	DD	06006H
$unwind$stb_ps_subset DD 010e01H
	DD	0620eH
$unwind$stb_ps_eq DD 010e01H
	DD	0620eH
$unwind$stb_ps_getlist DD 010e01H
	DD	0a20eH
$unwind$stb_ps_writelist DD 011301H
	DD	0a213H
$unwind$stb_ps_enum DD 011301H
	DD	0c213H
$unwind$stb_ps_fastlist DD 010e01H
	DD	0420eH
$unwind$?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z DD 010901H
	DD	04209H
$unwind$?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z DD 010e01H
	DD	0620eH
$unwind$?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z DD 010901H
	DD	06209H
$unwind$?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z DD 011101H
	DD	06211H
$unwind$stb_srandLCG DD 010801H
	DD	02208H
$unwind$stb_frandLCG DD 010401H
	DD	04204H
$unwind$stb_srand DD 010801H
	DD	02208H
$unwind$stb_rand DD 010401H
	DD	08204H
$unwind$stb_frand DD 010401H
	DD	04204H
$unwind$stb_shuffle DD 011801H
	DD	08218H
$unwind$stb_reverse DD 011301H
	DD	06213H
$unwind$stb_dupe_free DD 010901H
	DD	06209H
$unwind$stb_dupe_create DD 011801H
	DD	08218H
$unwind$stb_dupe_add DD 010e01H
	DD	0a20eH
$unwind$stb_dupe_finish DD 020c01H
	DD	01f010cH
$unwind$stb_dupe_numsets DD 010901H
	DD	06209H
$unwind$stb_dupe_set DD 010d01H
	DD	0420dH
$unwind$stb_dupe_set_count DD 010d01H
	DD	0620dH
$unwind$?stb__dupe_compare@@YAHPEBX0@Z DD 010e01H
	DD	0820eH
$unwind$stb_bitset_new DD 010c01H
	DD	0620cH
$unwind$stb_bitset_union DD 011301H
	DD	06213H
$unwind$stb_bitset_getlist DD 011201H
	DD	08212H
$unwind$stb_bitset_eq DD 011301H
	DD	02213H
$unwind$stb_bitset_disjoint DD 011301H
	DD	02213H
$unwind$stb_bitset_disjoint_0 DD 011301H
	DD	02213H
$unwind$stb_bitset_subset DD 011301H
	DD	02213H
$unwind$stb_bitset_unioneq_changed DD 011301H
	DD	02213H
$unwind$stb_wordwrap DD 011701H
	DD	08217H
$unwind$stb_wordwrapalloc DD 010d01H
	DD	0620dH
$unwind$stb_wildmatch DD 010e01H
	DD	0620eH
$unwind$stb_wildfind DD 010e01H
	DD	0420eH
$unwind$stb_wildfindi DD 010e01H
	DD	0420eH
$unwind$stb_regex_matcher DD 010901H
	DD	08209H
$unwind$stb_matcher_match DD 021101H
	DD	0130111H
$unwind$stb_matcher_find DD 010e01H
	DD	0420eH
$unwind$stb_matcher_free DD 010901H
	DD	04209H
$unwind$stb_lex_matcher DD 010401H
	DD	06204H
$unwind$stb_lex_item DD 011301H
	DD	06213H
$unwind$stb_lex_item_wild DD 011301H
	DD	06213H
$unwind$stb_lex DD 011301H
	DD	04213H
$unwind$?stb__match_qstring@@YAHPEAD0HH@Z DD 011801H
	DD	06218H
$unwind$?stb__find_qstring@@YAHPEAD0HH@Z DD 011801H
	DD	06218H
$unwind$?stb__wildmatch_raw2@@YAHPEAD0HH@Z DD 011801H
	DD	0a218H
$unwind$?stb__wildmatch_raw@@YAHPEAD0HH@Z DD 022d19H
	DD	02b011bH
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$?stb__add_node@@YAHPEAUstb_matcher@@@Z DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z DD 011201H
	DD	08212H
$unwind$?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z DD 011701H
	DD	08217H
$unwind$?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z DD 011701H
	DD	06217H
$unwind$?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z DD 022c19H
	DD	031011aH
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z DD 011701H
	DD	06217H
$unwind$?stb__opt@@YAHPEAUstb_matcher@@H@Z DD 010d01H
	DD	0220dH
$unwind$?stb__optimize@@YAXPEAUstb_matcher@@@Z DD 010901H
	DD	08209H
$unwind$?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ DD 010401H
	DD	06204H
$unwind$?stb__lex_reset@@YAXPEAUstb_matcher@@@Z DD 010901H
	DD	04209H
$unwind$?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z DD 010e01H
	DD	0220eH
$unwind$?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z DD 010e01H
	DD	0220eH
$unwind$?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z DD 011301H
	DD	08213H
$unwind$?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z DD 010e01H
	DD	0a20eH
$unwind$?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z DD 022319H
	DD	0190111H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z DD 021601H
	DD	0190116H
$unwind$stb_decompress DD 011301H
	DD	06213H
$unwind$stb_compress DD 011301H
	DD	04213H
$unwind$stb_compress_hashsize DD 010801H
	DD	02208H
$unwind$stb_compress_tofile DD 011301H
	DD	04213H
$unwind$stb_compress_intofile DD 011301H
	DD	04213H
$unwind$stb_decompress_fromfile DD 010e01H
	DD	0820eH
$unwind$stb_compress_stream_start DD 010901H
	DD	04209H
$unwind$stb_compress_stream_end DD 010801H
	DD	04208H
$unwind$stb_write DD 010d01H
	DD	0c20dH
$unwind$?stb__match@@YAXPEAEI@Z DD 010d01H
	DD	0620dH
$unwind$?stb__lit@@YAXPEAEI@Z DD 010d01H
	DD	0420dH
$unwind$?stb_decompress_token@@YAPEAEPEAE@Z DD 010901H
	DD	04209H
$unwind$?stb_matchlen@@YAIPEAE0I@Z DD 011301H
	DD	02213H
$unwind$?stb__write@@YAXE@Z DD 010801H
	DD	04208H
$unwind$?stb_out2@@YAXI@Z DD 010801H
	DD	04208H
$unwind$?stb_out3@@YAXI@Z DD 010801H
	DD	04208H
$unwind$?stb_out4@@YAXI@Z DD 010801H
	DD	04208H
$unwind$?outliterals@@YAXPEAE_J@Z DD 010e01H
	DD	0420eH
$unwind$?stb_not_crap@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z DD 021b01H
	DD	013011bH
$unwind$?stb_compress_inner@@YAHPEAEI@Z DD 010d01H
	DD	0c20dH
$unwind$?stb_out_backpatch_id@@YA_KXZ DD 010401H
	DD	04204H
$unwind$?stb_out_backpatch@@YAX_KI@Z DD 010d01H
	DD	0620dH
$unwind$?stb_compress_streaming_start@@YAHXZ DD 010401H
	DD	06204H
$unwind$?stb_compress_streaming_end@@YAHXZ DD 010401H
	DD	08204H
$unwind$stb_getc DD 010901H
	DD	06209H
$unwind$stb_putc DD 010d01H
	DD	0620dH
$unwind$stb_getdata DD 011301H
	DD	06213H
$unwind$stb_putdata DD 011301H
	DD	06213H
$unwind$stb_tell DD 010901H
	DD	06209H
$unwind$stb_size DD 010901H
	DD	06209H
$unwind$stb_backpatch DD 011701H
	DD	06217H
$unwind$?stb_close@@YAXPEAUstbfile@@@Z DD 010901H
	DD	06209H
$unwind$?stb__fgetbyte@@YAHPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb__fputbyte@@YAHPEAUstbfile@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z DD 011301H
	DD	04213H
$unwind$?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z DD 011301H
	DD	04213H
$unwind$?stb__fsize@@YAIPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb__ftell@@YAIPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z DD 011701H
	DD	04217H
$unwind$?stb__fclose@@YAXPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$?stb__nogetbyte@@YAHPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z DD 011301H
	DD	04213H
$unwind$?stb__noputbyte@@YAHPEAUstbfile@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z DD 011301H
	DD	04213H
$unwind$?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z DD 011701H
	DD	04217H
$unwind$?stb__bgetbyte@@YAHPEAUstbfile@@@Z DD 010901H
	DD	02209H
$unwind$?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z DD 011301H
	DD	04213H
$unwind$?stb__bclose@@YAXPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$?stb_open_inbuffer_free@@YAPEAUstbfile@@PEAXI@Z DD 010d01H
	DD	0620dH
$unwind$?stb__fclose2@@YAXPEAUstbfile@@@Z DD 010901H
	DD	04209H
$unwind$?stb_open@@YAPEAUstbfile@@PEAD0@Z DD 010e01H
	DD	0820eH
$unwind$?stb__aputbyte@@YAHPEAUstbfile@@H@Z DD 010d01H
	DD	0820dH
$unwind$?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z DD 011301H
	DD	08213H
$unwind$?stb__asize@@YAIPEAUstbfile@@@Z DD 010901H
	DD	02209H
$unwind$?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z DD 011701H
	DD	04217H
$unwind$?stb_open_outbuffer@@YAPEAUstbfile@@PEAPEAE@Z DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$stb_arith_encode_close DD 010901H
	DD	04209H
$unwind$stb_arith_encode DD 011701H
	DD	06217H
$unwind$stb_arith_encode_log2 DD 011701H
	DD	06217H
$unwind$stb_arith_decode_value DD 010d01H
	DD	0220dH
$unwind$stb_arith_decode_advance DD 011701H
	DD	06217H
$unwind$stb_arith_decode_value_log2 DD 010d01H
	DD	0420dH
$unwind$stb_arith_decode_advance_log2 DD 011701H
	DD	06217H
$unwind$?stb__arith_carry@@YAXPEAUstb_arith@@@Z DD 010901H
	DD	06209H
$unwind$?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stb__arith_flush@@YAXPEAUstb_arith@@@Z DD 010901H
	DD	06209H
$unwind$?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z DD 010901H
	DD	04209H
$unwind$?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z DD 010901H
	DD	06209H
$unwind$?stb__get_sourcefile_path@@YAPEADPEAD@Z DD 010901H
	DD	06209H
$unwind$stb__double_constant DD 011301H
	DD	06213H
$unwind$stb__int_constant DD 011201H
	DD	06212H
$unwind$stb__string_constant DD 011201H
	DD	06212H
$unwind$?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z DD 010d01H
	DD	0c20dH
$unwind$?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z DD 041701H
	DD	0130117H
	DD	0600f7010H
$unwind$stbtt_BakeFontBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_GetBakedQuad DD 011701H
	DD	08217H
$unwind$stbtt_GetScaledFontVMetrics DD 021b01H
	DD	01d011bH
$unwind$stbtt_PackBegin DD 011801H
	DD	0a218H
$unwind$stbtt_PackEnd DD 010901H
	DD	04209H
$unwind$stbtt_PackFontRange DD 011901H
	DD	0c219H
$unwind$stbtt_PackFontRanges DD 021b01H
	DD	01f011bH
$unwind$stbtt_PackSetOversampling DD 011201H
	DD	04212H
$unwind$stbtt_GetPackedQuad DD 011701H
	DD	08217H
$unwind$stbtt_PackFontRangesGatherRects DD 021b01H
	DD	013011bH
$unwind$stbtt_PackFontRangesPackRects DD 011301H
	DD	04213H
$unwind$stbtt_PackFontRangesRenderIntoRects DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$stbtt_GetNumberOfFonts DD 010901H
	DD	04209H
$unwind$stbtt_GetFontOffsetForIndex DD 010d01H
	DD	0420dH
$unwind$stbtt_InitFont DD 011301H
	DD	04213H
$unwind$stbtt_FindGlyphIndex DD 021001H
	DD	0130110H
$unwind$stbtt_ScaleForPixelHeight DD 010f01H
	DD	0620fH
$unwind$stbtt_ScaleForMappingEmToPixels DD 010f01H
	DD	0620fH
$unwind$stbtt_GetFontVMetrics DD 011801H
	DD	04218H
$unwind$stbtt_GetFontVMetricsOS2 DD 011801H
	DD	06218H
$unwind$stbtt_GetFontBoundingBox DD 011801H
	DD	04218H
$unwind$stbtt_GetCodepointHMetrics DD 011701H
	DD	04217H
$unwind$stbtt_GetCodepointKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetCodepointBox DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphHMetrics DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetGlyphBox DD 011701H
	DD	08217H
$unwind$stbtt_GetKerningTableLength DD 010901H
	DD	06209H
$unwind$stbtt_GetKerningTable DD 011301H
	DD	06213H
$unwind$stbtt_IsGlyphEmpty DD 010d01H
	DD	0820dH
$unwind$stbtt_GetCodepointShape DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphShape DD 011201H
	DD	04212H
$unwind$stbtt_FreeShape DD 010e01H
	DD	0420eH
$unwind$stbtt_FindSVGDoc DD 010d01H
	DD	0a20dH
$unwind$stbtt_GetCodepointSVG DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphSVG DD 011201H
	DD	08212H
$unwind$stbtt_FreeBitmap DD 010e01H
	DD	0420eH
$unwind$stbtt_GetCodepointBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetCodepointBitmapSubpixel DD 011b01H
	DD	0a21bH
$unwind$stbtt_MakeCodepointBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixel DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter DD 011801H
	DD	0e218H
$unwind$stbtt_GetCodepointBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetCodepointBitmapBoxSubpixel DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetGlyphBitmapSubpixel DD 021e01H
	DD	015011eH
$unwind$stbtt_MakeGlyphBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeGlyphBitmapSubpixel DD 021b01H
	DD	013011bH
$unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter DD 011801H
	DD	0a218H
$unwind$stbtt_GetGlyphBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmapBoxSubpixel DD 011901H
	DD	08219H
$unwind$stbtt_Rasterize DD 021c01H
	DD	011011cH
$unwind$stbtt_FreeSDF DD 010e01H
	DD	0420eH
$unwind$stbtt_GetGlyphSDF DD 022e19H
	DD	03f011cH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$stbtt_GetCodepointSDF DD 011901H
	DD	0a219H
$unwind$stbtt_FindMatchingFont DD 011301H
	DD	04213H
$unwind$stbtt_CompareUTF8toUTF16_bigendian DD 011701H
	DD	04217H
$unwind$stbtt_GetFontNameString DD 011801H
	DD	0a218H
$unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD 010901H
	DD	02209H
$unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
$unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD 010901H
	DD	04209H
$unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD 031501H
	DD	07011a215H
	DD	06010H
$unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z DD 011201H
	DD	06212H
$unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z DD 010901H
	DD	04209H
$unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD 041801H
	DD	04b0118H
	DD	060107011H
$unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD 011701H
	DD	0e217H
$unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 022719H
	DD	0310115H
	DD	imagerel __GSHandlerCheck
	DD	0178H
$unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD 011701H
	DD	06217H
$unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD 010901H
	DD	08209H
$unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD 011501H
	DD	0a215H
$unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD 011501H
	DD	08215H
$unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD 011b01H
	DD	0a21bH
$unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD 041801H
	DD	0110118H
	DD	060107011H
$unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD 041801H
	DD	01d0118H
	DD	060107011H
$unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD 042919H
	DD	05d0117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	02d0H
$unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 021501H
	DD	0130115H
$unwind$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD 011201H
	DD	08212H
$unwind$?stbtt__GetCoverageIndex@@YAHPEAEH@Z DD 021001H
	DD	0110110H
$unwind$?stbtt__GetGlyphClass@@YAHPEAEH@Z DD 010d01H
	DD	0e20dH
$unwind$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD 021501H
	DD	0210115H
$unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD 011301H
	DD	08213H
$unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD 010e01H
	DD	0620eH
$unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD 011901H
	DD	08219H
$unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD 011801H
	DD	04218H
$unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD 011601H
	DD	04216H
$unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD 011c01H
	DD	0421cH
$unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD 021b01H
	DD	01d011bH
$unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD 022d19H
	DD	05b011bH
	DD	imagerel __GSHandlerCheck
	DD	02c0H
$unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD 031e19H
	DD	0700ba20fH
	DD	0600aH
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD 042419H
	DD	0130112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD 021b01H
	DD	013011bH
$unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD 011a01H
	DD	0c21aH
$unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD 021d01H
	DD	01b011dH
$unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD 042301H
	DD	0a6823H
	DD	017011bH
$unwind$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z DD 021b01H
	DD	025011bH
$unwind$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z DD 011301H
	DD	02213H
$unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z DD 021b01H
	DD	011011bH
$unwind$?equal@@YAHPEAM0@Z DD 010e01H
	DD	0220eH
$unwind$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z DD 022f19H
	DD	023011dH
	DD	imagerel __GSHandlerCheck
	DD	0108H
$unwind$?stbtt__cuberoot@@YAMM@Z DD 010a01H
	DD	0420aH
$unwind$?stbtt__solve_cubic@@YAHMMMPEAM@Z DD 011b01H
	DD	0a21bH
$unwind$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z DD 011701H
	DD	0c217H
$unwind$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z DD 011701H
	DD	06217H
$unwind$?stbtt__matchpair@@YAHPEAEI0HHH@Z DD 011701H
	DD	0c217H
$unwind$?stbtt__matches@@YAHPEAEI0H@Z DD 011701H
	DD	08217H
$unwind$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z DD 011301H
	DD	06213H
$unwind$stbi_load_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_load_gif_from_memory DD 022c19H
	DD	029011aH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$stbi_load_16_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16 DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file_16 DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_loadf_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf DD 011801H
	DD	0a218H
$unwind$stbi_loadf_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_hdr_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr DD 010901H
	DD	06209H
$unwind$stbi_is_hdr_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_image_free DD 010901H
	DD	04209H
$unwind$stbi_info_from_memory DD 022c19H
	DD	023011aH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info_from_callbacks DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info DD 011801H
	DD	06218H
$unwind$stbi_info_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_16_bit DD 010901H
	DD	06209H
$unwind$stbi_is_16_bit_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_zlib_decode_malloc_guesssize DD 023219H
	DD	020b0120H
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_malloc_guesssize_headerflag DD 023219H
	DD	020b0120H
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_malloc DD 011201H
	DD	04212H
$unwind$stbi_zlib_decode_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi_zlib_decode_noheader_malloc DD 022d19H
	DD	020b011bH
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_noheader_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$?stbi__cpuid3@@YAHXZ DD 021519H
	DD	030023206H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$?stbi__sse2_available@@YAHXZ DD 010401H
	DD	06204H
$unwind$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z DD 011301H
	DD	02213H
$unwind$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?stbi__stdio_read@@YAHPEAXPEADH@Z DD 011301H
	DD	04213H
$unwind$?stbi__stdio_skip@@YAXPEAXH@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__stdio_eof@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z DD 010e01H
	DD	0420eH
$unwind$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0a218H
$unwind$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__png_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0c218H
$unwind$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	0a218H
$unwind$?stbi__png_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 022d19H
	DD	0ab011bH
	DD	imagerel __GSHandlerCheck
	DD	0540H
$unwind$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?stbi__tga_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 031c01H
	DD	020011cH
	DD	07015H
$unwind$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	0a218H
$unwind$?stbi__psd_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD 021b01H
	DD	01f011bH
$unwind$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 022d19H
	DD	09d011bH
	DD	imagerel __GSHandlerCheck
	DD	04d0H
$unwind$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z DD 022d19H
	DD	089011bH
	DD	imagerel __GSHandlerCheck
	DD	0430H
$unwind$?stbi__pic_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0c218H
$unwind$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?stbi__gif_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 023319H
	DD	011190121H
	DD	imagerel __GSHandlerCheck
	DD	088b0H
$unwind$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z DD 023319H
	DD	0111f0121H
	DD	imagerel __GSHandlerCheck
	DD	088e0H
$unwind$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0a218H
$unwind$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__malloc@@YAPEAX_K@Z DD 010901H
	DD	04209H
$unwind$?stbi__addsizes_valid@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbi__mul2sizes_valid@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbi__mad2sizes_valid@@YAHHHH@Z DD 011101H
	DD	06211H
$unwind$?stbi__mad3sizes_valid@@YAHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__mad4sizes_valid@@YAHHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__malloc_mad2@@YAPEAXHHH@Z DD 011101H
	DD	04211H
$unwind$?stbi__malloc_mad3@@YAPEAXHHHH@Z DD 011601H
	DD	04216H
$unwind$?stbi__malloc_mad4@@YAPEAXHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD 011801H
	DD	0a218H
$unwind$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z DD 011701H
	DD	08217H
$unwind$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z DD 011701H
	DD	08217H
$unwind$?stbi__vertical_flip@@YAXPEAXHHH@Z DD 022c19H
	DD	010f011aH
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z DD 011701H
	DD	06217H
$unwind$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z DD 011801H
	DD	06218H
$unwind$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?stbi__get8@@YAEPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__at_eof@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__skip@@YAXPEAUstbi__context@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z DD 011301H
	DD	08213H
$unwind$?stbi__get16be@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get32be@@YAIPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get16le@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get32le@@YAIPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__convert_format@@YAPEAEPEAEHHII@Z DD 011701H
	DD	0c217H
$unwind$?stbi__convert_format16@@YAPEAGPEAGHHII@Z DD 011701H
	DD	0c217H
$unwind$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z DD 010e01H
	DD	0a20eH
$unwind$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z DD 010e01H
	DD	0a20eH
$unwind$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z DD 011801H
	DD	0c218H
$unwind$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z DD 011801H
	DD	08218H
$unwind$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z DD 021b01H
	DD	015011bH
$unwind$?stbi__idct_block@@YAXPEAEHQEAF@Z DD 022719H
	DD	0390115H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?stbi__idct_simd@@YAXPEAEHQEAF@Z DD 021b01H
	DD	036b011bH
$unwind$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	02209H
$unwind$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z DD 021e19H
	DD	041010cH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z DD 010e01H
	DD	0220eH
$unwind$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z DD 022219H
	DD	01b0110H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z DD 011201H
	DD	06212H
$unwind$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0c20dH
$unwind$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z DD 021b01H
	DD	063011bH
$unwind$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z DD 011801H
	DD	04218H
$unwind$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z DD 021b01H
	DD	08d011bH
$unwind$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__blinn_8x8@@YAEEE@Z DD 010c01H
	DD	0220cH
$unwind$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z DD 022d19H
	DD	041011bH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__bit_reverse@@YAHHH@Z DD 010c01H
	DD	0420cH
$unwind$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z DD 022819H
	DD	01d0116H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	02209H
$unwind$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z DD 011301H
	DD	08213H
$unwind$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z DD 021e19H
	DD	0149010cH
	DD	imagerel __GSHandlerCheck
	DD	0a30H
$unwind$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z DD 011801H
	DD	04218H
$unwind$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__paeth@@YAHHHH@Z DD 011101H
	DD	06211H
$unwind$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z DD 021b01H
	DD	01b011bH
$unwind$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z DD 011301H
	DD	08213H
$unwind$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z DD 011301H
	DD	08213H
$unwind$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z DD 011801H
	DD	0a218H
$unwind$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z DD 032819H
	DD	09c0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	04d0H
$unwind$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	08218H
$unwind$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__high_bit@@YAHI@Z DD 010801H
	DD	02208H
$unwind$?stbi__shiftsigned@@YAHIHH@Z DD 011101H
	DD	04211H
$unwind$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z DD 010e01H
	DD	0c20eH
$unwind$?stbi__tga_get_comp@@YAHHHPEAH@Z DD 011101H
	DD	02211H
$unwind$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z DD 011301H
	DD	06213H
$unwind$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z DD 011201H
	DD	06212H
$unwind$?stbi__copyval@@YAXHPEAEPEBE@Z DD 011201H
	DD	02212H
$unwind$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z DD 011801H
	DD	06218H
$unwind$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z DD 011801H
	DD	06218H
$unwind$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z DD 021101H
	DD	0110111H
$unwind$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z DD 021b01H
	DD	011011bH
$unwind$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z DD 011301H
	DD	06213H
$unwind$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__hdr_convert@@YAXPEAMPEAEH@Z DD 011301H
	DD	06213H
$unwind$?stbi__pnm_isspace@@YAHD@Z DD 010801H
	DD	02208H
$unwind$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0420eH
$unwind$?stbi__pnm_isdigit@@YAHD@Z DD 010801H
	DD	02208H
$unwind$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	04209H
$unwind$stbi_write_png DD 011701H
	DD	0a217H
$unwind$stbi_write_bmp DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_tga DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_hdr DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_jpg DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_png_to_func DD 011801H
	DD	0a218H
$unwind$stbi_write_bmp_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_tga_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_hdr_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_jpg_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?stbi__stdio_write@@YAXPEAX0H@Z DD 011301H
	DD	04213H
$unwind$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z DD 010901H
	DD	04209H
$unwind$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z DD 011301H
	DD	0c213H
$unwind$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ DD 011801H
	DD	06218H
$unwind$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z DD 010901H
	DD	06209H
$unwind$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z DD 010d01H
	DD	0620dH
$unwind$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z DD 010d01H
	DD	0420dH
$unwind$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z DD 011701H
	DD	06217H
$unwind$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z DD 011701H
	DD	08217H
$unwind$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ DD 011701H
	DD	0c217H
$unwind$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z DD 021a01H
	DD	031011aH
$unwind$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z DD 021a01H
	DD	023011aH
$unwind$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z DD 010e01H
	DD	0820eH
$unwind$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z DD 011201H
	DD	08212H
$unwind$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z DD 011201H
	DD	08212H
$unwind$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z DD 022919H
	DD	011011aH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z DD 042e19H
	DD	029011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z DD 011201H
	DD	08212H
$unwind$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z DD 011301H
	DD	06213H
$unwind$?stbiw__zlib_bitrev@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbiw__zlib_countm@@YAIPEAE0H@Z DD 011301H
	DD	02213H
$unwind$?stbiw__zhash@@YAIPEAE@Z DD 010901H
	DD	02209H
$unwind$stbi_zlib_compress DD 021a01H
	DD	049011aH
$unwind$?stbiw__crc32@@YAIPEAEH@Z DD 010d01H
	DD	0220dH
$unwind$?stbiw__wpcrc@@YAXPEAPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?stbiw__paeth@@YAEHHH@Z DD 011101H
	DD	06211H
$unwind$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z DD 011701H
	DD	0e217H
$unwind$stbi_write_png_to_mem DD 022c19H
	DD	019011aH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z DD 011801H
	DD	06218H
$unwind$?stbiw__jpg_DCT@@YAXPEAM0000000@Z DD 011801H
	DD	0e218H
$unwind$?stbiw__jpg_calcBits@@YAXHQEAG@Z DD 010d01H
	DD	0220dH
$unwind$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z DD 042f19H
	DD	035011dH
	DD	030157016H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z DD 023219H
	DD	02ab0120H
	DD	imagerel __GSHandlerCheck
	DD	01540H
$unwind$?ZenArenaInit@@YAHPEAUZenArena@@I@Z DD 041201H
	DD	0130112H
	DD	0600a700bH
$unwind$?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z DD 031001H
	DD	0700c2210H
	DD	0600bH
$unwind$?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?ColorNormalize@@YA?ATf32x4@@T1@@Z DD 031f19H
	DD	0700c4210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	018H
$unwind$?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z DD 031f19H
	DD	0700c4210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$?ColorPackU@@YAITf32x4@@@Z DD 031a19H
	DD	07007c20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z DD 011201H
	DD	02212H
$unwind$?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z DD 041701H
	DD	01f0117H
	DD	0600f7010H
$unwind$?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z DD 010e01H
	DD	0a20eH
$unwind$?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z DD 010901H
	DD	06209H
$unwind$?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z DD 041301H
	DD	04d0113H
	DD	0600b700cH
$unwind$?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z DD 041701H
	DD	0190117H
	DD	0600f7010H
$unwind$?ZenFillTexture@@YAXPEAUZenTexture@@I@Z DD 031e19H
	DD	0700ba20fH
	DD	0600aH
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?ZenSensitiveCeil32@@YAHHM@Z DD 010e01H
	DD	0220eH
$unwind$?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z DD 011801H
	DD	0a218H
$unwind$?ZenGetSystemStandardOutputHandle@@YAPEAXXZ DD 010401H
	DD	04204H
$unwind$?ZenGetSystemStandardInputHandle@@YAPEAXXZ DD 010401H
	DD	04204H
$unwind$?ZenGetSystemStandardErrorHandle@@YAPEAXXZ DD 010401H
	DD	04204H
$unwind$?ZenGetNativePerformanceCounter@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?ZenGetNativePerformanceFrequency@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?ZenInternalizeMouseEvent@@YAHK_K@Z DD 010d01H
	DD	0220dH
$unwind$?InternalizeKeyboardEvent@@YAH_K@Z DD 010901H
	DD	02209H
$unwind$?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z DD 010901H
	DD	04209H
$unwind$?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z DD 010901H
	DD	06209H
$unwind$?ZenShowWindow@@YAXPEAUZenWindow@@@Z DD 010901H
	DD	06209H
$unwind$?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z DD 021919H
	DD	07006d20aH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z DD 042e19H
	DD	047011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z DD 010901H
	DD	0c209H
$unwind$?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z DD 010901H
	DD	06209H
$unwind$?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z DD 041d01H
	DD	06b011dH
	DD	060157016H
$unwind$?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z DD 010901H
	DD	02209H
$unwind$?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z DD 010901H
	DD	04209H
$unwind$?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z DD 031c01H
	DD	07018c21cH
	DD	06017H
$unwind$?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z DD 031601H
	DD	070126216H
	DD	06011H
$unwind$?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z DD 041f01H
	DD	033011fH
	DD	060177018H
$unwind$?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z DD 040e01H
	DD	033010eH
	DD	060067007H
$unwind$?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z DD 041301H
	DD	01d0113H
	DD	0600b700cH
$unwind$?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z DD 010901H
	DD	04209H
$unwind$?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z DD 041c01H
	DD	015011cH
	DD	060147015H
$unwind$?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z DD 021501H
	DD	0150115H
$unwind$?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z DD 041c01H
	DD	04b011cH
	DD	060147015H
$unwind$?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z DD 010e01H
	DD	0420eH
$unwind$?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z DD 031f19H
	DD	0700ca210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z DD 042a19H
	DD	0970118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	04a0H
$unwind$?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z DD 010e01H
	DD	0220eH
$unwind$?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z DD 031901H
	DD	070156219H
	DD	06014H
$unwind$?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z DD 032919H
	DD	07016821aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z DD 032919H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z DD 030b01H
	DD	07007220bH
	DD	06006H
$unwind$?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z DD 031401H
	DD	070106214H
	DD	0600fH
$unwind$?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z DD 042e19H
	DD	017011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z DD 043019H
	DD	019011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z DD 043019H
	DD	02f011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z DD 042519H
	DD	0510113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0270H
$unwind$?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z DD 010901H
	DD	04209H
$unwind$?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z DD 042f19H
	DD	01f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z DD 042f19H
	DD	03d011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z DD 010e01H
	DD	0220eH
$unwind$?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z DD 040e01H
	DD	029010eH
	DD	060067007H
$unwind$?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z DD 042301H
	DD	02190123H
	DD	060157016H
$unwind$?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD 042519H
	DD	0150113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z DD 041e01H
	DD	049011eH
	DD	060167017H
$unwind$?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z DD 020c01H
	DD	01b010cH
$unwind$?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z DD 010e01H
	DD	0a20eH
$unwind$?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z DD 042019H
	DD	029010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z DD 042519H
	DD	0390113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	01b8H
$unwind$?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z DD 042e19H
	DD	01b011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z DD 011701H
	DD	06217H
$unwind$?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z DD 011701H
	DD	06217H
$unwind$?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z DD 011701H
	DD	06217H
$unwind$?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z DD 042919H
	DD	01d0117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z DD 010901H
	DD	04209H
$unwind$?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z DD 010901H
	DD	04209H
$unwind$?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z DD 041d01H
	DD	02f011dH
	DD	060157016H
$unwind$?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z DD 031a01H
	DD	07016421aH
	DD	06015H
$unwind$?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z DD 040e01H
	DD	01b010eH
	DD	060067007H
$unwind$?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z DD 010e01H
	DD	0620eH
$unwind$?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z DD 022d19H
	DD	019011bH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z DD 010801H
	DD	02208H
$unwind$?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z DD 011c19H
	DD	0e20dH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z DD 012219H
	DD	0c213H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD 041301H
	DD	0210113H
	DD	0600b700cH
$unwind$?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD 041301H
	DD	0210113H
	DD	0600b700cH
$unwind$?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD 010e01H
	DD	0620eH
$unwind$?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z DD 042519H
	DD	0290113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z DD 022c19H
	DD	019011aH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z DD 042019H
	DD	02f010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z DD 011801H
	DD	06218H
$unwind$?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z DD 011801H
	DD	08218H
$unwind$?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z DD 041e01H
	DD	017011eH
	DD	060167017H
$unwind$?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z DD 010e01H
	DD	0820eH
$unwind$?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z DD 011901H
	DD	06219H
$unwind$?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z DD 010e01H
	DD	0620eH
$unwind$?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z DD 041d01H
	DD	045011dH
	DD	060157016H
$unwind$?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z DD 010e01H
	DD	0620eH
$unwind$?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z DD 010e01H
	DD	0620eH
$unwind$?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z DD 031501H
	DD	07011c215H
	DD	06010H
$unwind$?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z DD 011301H
	DD	06213H
$unwind$?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z DD 042519H
	DD	0250113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z DD 022319H
	DD	0250111H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z DD 041301H
	DD	0110113H
	DD	0600b700cH
$unwind$?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z DD 010901H
	DD	06209H
$unwind$?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z DD 031a01H
	DD	07016421aH
	DD	06015H
$unwind$?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z DD 011301H
	DD	06213H
$unwind$?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z DD 011301H
	DD	06213H
$unwind$?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$?ZenCoreInitTime@@YAXPEAUZenCore@@@Z DD 010901H
	DD	04209H
$unwind$?ZenCoreInitArena@@YAXPEAUZenCore@@@Z DD 040e01H
	DD	013010eH
	DD	060067007H
$unwind$?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z DD 010901H
	DD	04209H
$unwind$?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z DD 010901H
	DD	06209H
$unwind$?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z DD 031501H
	DD	070118215H
	DD	06010H
$unwind$?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z DD 010e01H
	DD	0620eH
$unwind$?ZenCorePullTime@@YAXPEAUZenCore@@@Z DD 010901H
	DD	08209H
$unwind$?ZenCorePull@@YAXPEAUZenCore@@@Z DD 030b01H
	DD	07007820bH
	DD	06006H
$unwind$?ZenCoreTick@@YAXPEAUZenCore@@@Z DD 031a19H
	DD	07007c20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z DD 041301H
	DD	0210113H
	DD	0600b700cH
$unwind$?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z DD 040e01H
	DD	021010eH
	DD	060067007H
$unwind$?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z DD 042f19H
	DD	03b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z DD 010901H
	DD	04209H
$unwind$?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z DD 011101H
	DD	04211H
$unwind$?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z DD 041d01H
	DD	01f011dH
	DD	060157016H
$unwind$?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z DD 041801H
	DD	01f0118H
	DD	060107011H
$unwind$?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z DD 011d19H
	DD	0e20eH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z DD 042f19H
	DD	013011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z DD 042b19H
	DD	011011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z DD 032319H
	DD	07010e214H
	DD	0600fH
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z DD 042e19H
	DD	017011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z DD 011801H
	DD	0c218H
$unwind$?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z DD 042719H
	DD	0110118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z DD 043019H
	DD	019011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z DD 011701H
	DD	04217H
$unwind$?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z DD 011301H
	DD	06213H
$unwind$?ZenCharSet@@YAPEAHPEBD@Z DD 010901H
	DD	08209H
$unwind$?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z DD 010d01H
	DD	0420dH
$unwind$?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z DD 041801H
	DD	0430118H
	DD	060107011H
$unwind$?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z DD 041801H
	DD	0290118H
	DD	060107011H
$unwind$?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z DD 042c19H
	DD	011011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z DD 041701H
	DD	0190117H
	DD	0600f7010H
$unwind$?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z DD 031a01H
	DD	07016e21aH
	DD	06015H
$unwind$?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z DD 041d01H
	DD	035011dH
	DD	060157016H
$unwind$?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z DD 041d01H
	DD	029011dH
	DD	060157016H
$unwind$?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z DD 042f19H
	DD	089011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0430H
$unwind$?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z DD 042019H
	DD	059010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	02b0H
$unwind$?NewReflectTree@@YAPEAUReflectTree@@H@Z DD 010801H
	DD	06208H
$unwind$?CreateEnum@@YAPEAUReflectTree@@PEBD@Z DD 010901H
	DD	06209H
$unwind$?CreateStruct@@YAPEAUReflectTree@@PEBD@Z DD 010901H
	DD	06209H
$unwind$?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z DD 011201H
	DD	06212H
$unwind$?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z DD 011801H
	DD	06218H
$unwind$?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ DD 010401H
	DD	04204H
$unwind$?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$?ZenInitialize@@YAXTi32x4@@PEB_W@Z DD 041301H
	DD	0190113H
	DD	0600b700cH
$unwind$?ZenTick@@YAXXZ DD 010401H
	DD	04204H
$unwind$?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z DD 043019H
	DD	01f011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z DD 042f19H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z DD 042919H
	DD	0150117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strstr@@YAPEADQEADQEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strrchr@@YAPEADQEADH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strchr@@YAPEADQEADH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vfprintf DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$swprintf DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vswprintf_c_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf_l DD 011801H
	DD	08218H
xdata	ENDS
CRT$XCU	SEGMENT
?STANDARD_BASIS_COLOR$initializer$@@3P6AXXZEA DQ FLAT:??__ESTANDARD_BASIS_COLOR@@YAXXZ ; STANDARD_BASIS_COLOR$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
Glui$ = 80
?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z PROC		; ZenFontDebugUI
; File W:\cpp\void\zen\zen.c
; Line 136
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 144
	lea	rdx, OFFSET FLAT:?ZenWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ; ZenGluiPushWindow
	test	eax, eax
	je	SHORT $LN2@ZenFontDeb
; Line 145
	mov	edx, 1
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiTabMode@@YAXPEAUZEN_IMGLUI@@H@Z	; ZenGluiTabMode
; Line 147
	lea	rdx, OFFSET FLAT:?ZenFontTab@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ; ZenGluiPushWindow
; Line 148
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullWindow
; Line 150
	lea	rdx, OFFSET FLAT:?ZenFontShaderTab@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ; ZenGluiPushWindow
; Line 151
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullWindow
; Line 153
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiTabMode@@YAXPEAUZEN_IMGLUI@@H@Z	; ZenGluiTabMode
; Line 155
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullWindow
$LN2@ZenFontDeb:
; Line 158
	movsd	xmm0, QWORD PTR ?FontShaderMin@@3NA
	comisd	xmm0, QWORD PTR ?FontShaderOff@@3NA
	jbe	SHORT $LN3@ZenFontDeb
	movsd	xmm0, QWORD PTR ?FontShaderOff@@3NA
	movsd	QWORD PTR ?FontShaderMin@@3NA, xmm0
$LN3@ZenFontDeb:
; Line 159
	movsd	xmm0, QWORD PTR ?FontShaderOff@@3NA
	comisd	xmm0, QWORD PTR ?FontShaderMax@@3NA
	jbe	SHORT $LN4@ZenFontDeb
	movsd	xmm0, QWORD PTR ?FontShaderMax@@3NA
	movsd	QWORD PTR ?FontShaderMax@@3NA, xmm0
$LN4@ZenFontDeb:
; Line 163
	lea	rdx, OFFSET FLAT:?FontShaderWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ; ZenGluiPushWindow
	test	eax, eax
	je	$LN5@ZenFontDeb
; Line 164
	movsd	xmm0, QWORD PTR ?FontShaderOff@@3NA
	movsd	QWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	lea	r8, OFFSET FLAT:?FontShaderMin@@3NA
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z ; ZenGluiSlider
; Line 165
	movsd	xmm1, QWORD PTR ?FontShaderMin@@3NA
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG168636
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR __real@42400000
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z ; ZenGluiTextView
; Line 166
	movsd	xmm0, QWORD PTR ?FontShaderMax@@3NA
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR ?FontShaderMin@@3NA
	lea	r8, OFFSET FLAT:?FontShaderOff@@3NA
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z ; ZenGluiSlider
; Line 167
	movsd	xmm1, QWORD PTR ?FontShaderOff@@3NA
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG168637
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR __real@42400000
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z ; ZenGluiTextView
; Line 168
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR ?FontShaderOff@@3NA
	lea	r8, OFFSET FLAT:?FontShaderMax@@3NA
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z ; ZenGluiSlider
; Line 169
	movsd	xmm1, QWORD PTR ?FontShaderMax@@3NA
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG168638
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR __real@42400000
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z ; ZenGluiTextView
; Line 170
	movsd	xmm0, QWORD PTR ?FontShaderMin@@3NA
	divsd	xmm0, QWORD PTR __real@408f400000000000
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax]
	movss	DWORD PTR [rax+96], xmm0
; Line 171
	movsd	xmm0, QWORD PTR ?FontShaderOff@@3NA
	divsd	xmm0, QWORD PTR __real@408f400000000000
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax]
	movss	DWORD PTR [rax+100], xmm0
; Line 172
	movsd	xmm0, QWORD PTR ?FontShaderMax@@3NA
	divsd	xmm0, QWORD PTR __real@408f400000000000
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax]
	movss	DWORD PTR [rax+104], xmm0
; Line 173
	mov	DWORD PTR $T1[rsp], -1
	mov	DWORD PTR $T1[rsp+4], -1
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+3064]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG168639
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z ; ZenGluiTextureView
; Line 174
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullWindow
$LN5@ZenFontDeb:
; Line 178
	lea	rdx, OFFSET FLAT:?TextWindow@?1??ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z@4UZenView@@A
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ; ZenGluiPushWindow
	test	eax, eax
	je	SHORT $LN6@ZenFontDeb
; Line 179
	lea	r9, OFFSET FLAT:$SG168641
	movss	xmm2, DWORD PTR __real@43000000
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z ; ZenGluiDebugTextView
; Line 180
	lea	r9, OFFSET FLAT:$SG168642
	movss	xmm2, DWORD PTR __real@43000000
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z ; ZenGluiDebugTextView
; Line 181
	lea	r9, OFFSET FLAT:$SG168643
	movss	xmm2, DWORD PTR __real@43000000
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z ; ZenGluiDebugTextView
; Line 182
	lea	r9, OFFSET FLAT:$SG168644
	movss	xmm2, DWORD PTR __real@43000000
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z ; ZenGluiDebugTextView
; Line 183
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullWindow
$LN6@ZenFontDeb:
; Line 185
	add	rsp, 72					; 00000048H
	ret	0
?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z ENDP		; ZenFontDebugUI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
ViewCenter$ = 64
$T3 = 80
$T4 = 96
$T5 = 112
View$ = 128
__$ArrayPad$ = 144
Glui$ = 192
Flags$ = 200
Selection$ = 208
?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z PROC ; ZenGluiColorPickerWindowView
; File W:\cpp\void\zen\zen.c
; Line 107
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 109
	lea	rdx, OFFSET FLAT:?Window@?1??ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z@4UZenView@@A
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ; ZenGluiPushWindow
; Line 111
	mov	DWORD PTR $T1[rsp], 256			; 00000100H
	mov	DWORD PTR $T1[rsp+4], 512		; 00000200H
	mov	DWORD PTR $T5[rsp], 1
	mov	DWORD PTR $T5[rsp+4], 1
	mov	DWORD PTR $T5[rsp+8], 1
	mov	DWORD PTR $T5[rsp+12], 1
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T3[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ; ZenGluiLayoutAllot
	lea	rcx, QWORD PTR View$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 112
	mov	edx, 2
	mov	rcx, QWORD PTR View$[rsp+8]
	call	??K@YA?AUi32x2@@U0@H@Z			; operator/
	mov	QWORD PTR $T2[rsp], rax
	mov	rdx, QWORD PTR $T2[rsp]
	mov	rcx, QWORD PTR View$[rsp]
	call	??H@YA?AUi32x2@@U0@0@Z			; operator+
	mov	QWORD PTR ViewCenter$[rsp], rax
; Line 125
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullWindow
; Line 127
	xor	eax, eax
; Line 128
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z ENDP ; ZenGluiColorPickerWindowView
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Scale$ = 64
I$1 = 68
VertCount$ = 72
Font$ = 80
LineY$ = 88
CharY$ = 92
SizeY$ = 96
Clipped$ = 100
VertArray$ = 104
$T2 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
$T11 = 256
Layout$ = 272
$T12 = 288
Underline$ = 304
SizeView$ = 320
$T13 = 336
$T14 = 352
LineView$ = 368
CharView$ = 384
__$ArrayPad$ = 400
Glui$ = 448
Flags$ = 456
RasterSizeY$ = 464
Value$ = 472
?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z PROC	; ZenGluiDebugTextView
; File W:\cpp\void\zen\zen.c
; Line 42
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 43
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+3064]
	mov	QWORD PTR Font$[rsp], rax
; Line 45
	mov	rcx, QWORD PTR Value$[rsp]
	call	strlen
	mov	DWORD PTR VertCount$[rsp], eax
; Line 48
	movsxd	rax, DWORD PTR VertCount$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, eax
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR VertArray$[rsp], rax
; Line 50
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Scale$[rsp], xmm0
; Line 53
	lea	rax, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+1196]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR Layout$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 54
	mov	rax, QWORD PTR Value$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR VertArray$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR VertCount$[rsp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR Scale$[rsp]
	lea	r8, QWORD PTR Layout$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z ; ZenArrangeFontGlyphs
	mov	DWORD PTR Clipped$[rsp], eax
; Line 55
	mov	rcx, QWORD PTR Layout$[rsp+8]
	call	?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z	; ZenToInt
	mov	QWORD PTR $T2[rsp], rax
	mov	DWORD PTR $T12[rsp], 1
	mov	DWORD PTR $T12[rsp+4], 1
	mov	DWORD PTR $T12[rsp+8], 1
	mov	DWORD PTR $T12[rsp+12], 1
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T5[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ; ZenGluiLayoutAllot
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR Layout$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 57
	mov	rax, QWORD PTR Font$[rsp]
	movss	xmm0, DWORD PTR Scale$[rsp]
	mulss	xmm0, DWORD PTR [rax+72]
	movss	DWORD PTR LineY$[rsp], xmm0
; Line 58
	mov	rax, QWORD PTR Font$[rsp]
	movss	xmm0, DWORD PTR Scale$[rsp]
	mulss	xmm0, DWORD PTR [rax+68]
	movss	DWORD PTR CharY$[rsp], xmm0
; Line 59
	mov	rax, QWORD PTR Font$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+44]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR SizeY$[rsp], xmm0
; Line 61
	lea	rax, QWORD PTR LineView$[rsp]
	lea	rcx, QWORD PTR Layout$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 62
	movss	xmm0, DWORD PTR LineY$[rsp]
	movss	DWORD PTR LineView$[rsp+12], xmm0
; Line 64
	lea	rax, QWORD PTR CharView$[rsp]
	lea	rcx, QWORD PTR Layout$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 65
	movss	xmm0, DWORD PTR CharY$[rsp]
	movss	DWORD PTR CharView$[rsp+12], xmm0
; Line 67
	lea	rax, QWORD PTR SizeView$[rsp]
	lea	rcx, QWORD PTR Layout$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 68
	movss	xmm0, DWORD PTR SizeY$[rsp]
	movss	DWORD PTR SizeView$[rsp+12], xmm0
; Line 70
	lea	rax, QWORD PTR Underline$[rsp]
	lea	rcx, QWORD PTR Layout$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 71
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Underline$[rsp+12], xmm0
; Line 72
	mov	rax, QWORD PTR Font$[rsp]
	movss	xmm0, DWORD PTR Scale$[rsp]
	mulss	xmm0, DWORD PTR [rax+60]
	movaps	xmm1, xmm0
	mov	ecx, 65535				; 0000ffffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR Underline$[rsp+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Underline$[rsp+4], xmm0
; Line 74
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR SizeView$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T7[rsp]
	mov	edx, -16776961				; ff0000ffH
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 78
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ZenGluiDeb
$LN2@ZenGluiDeb:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ZenGluiDeb:
	mov	eax, DWORD PTR Clipped$[rsp]
	mov	ecx, DWORD PTR VertCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN3@ZenGluiDeb
; Line 79
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdx, QWORD PTR VertArray$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 12
	rep movsb
	movss	xmm3, DWORD PTR Scale$[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	mov	rdx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z ; ZenGluiDrawDebugGlyphAtScale
; Line 80
	jmp	SHORT $LN2@ZenGluiDeb
$LN3@ZenGluiDeb:
; Line 82
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Underline$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T8[rsp]
	mov	edx, -16711936				; ff00ff00H
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 83
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiDebugTextView@@YAXPEAUZEN_IMGLUI@@HMPEBD@Z ENDP	; ZenGluiDebugTextView
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Color$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
Loca$ = 144
Glyph$ = 160
BaselineY$ = 192
BaselineX$ = 208
__$ArrayPad$ = 224
Glui$ = 272
Font$ = 280
Vert$ = 288
Scale$ = 296
?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z PROC ; ZenGluiDrawDebugGlyphAtScale
; File W:\cpp\void\zen\zen.c
; Line 13
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 14
	mov	rax, QWORD PTR Vert$[rsp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	lea	rdx, QWORD PTR Glyph$[rsp]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 28
	rep movsb
; Line 17
	mov	rax, QWORD PTR Vert$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR Loca$[rsp], xmm0
; Line 18
	mov	rax, QWORD PTR Vert$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR Loca$[rsp+4], xmm0
; Line 21
	cvtsi2ss xmm0, DWORD PTR Glyph$[rsp+8]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Loca$[rsp+8], xmm0
; Line 22
	cvtsi2ss xmm0, DWORD PTR Glyph$[rsp+12]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Loca$[rsp+12], xmm0
; Line 24
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR Loca$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T1[rsp]
	mov	r8d, 1
	mov	edx, -16777216				; ff000000H
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z ; ZenGluiDrawRectOutline
; Line 26
	lea	rax, QWORD PTR BaselineY$[rsp]
	lea	rcx, QWORD PTR Loca$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 27
	movss	xmm0, DWORD PTR Glyph$[rsp+20]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR BaselineY$[rsp+12], xmm0
; Line 29
	lea	rax, QWORD PTR BaselineX$[rsp]
	lea	rcx, QWORD PTR Loca$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 30
	movss	xmm0, DWORD PTR Glyph$[rsp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR BaselineX$[rsp+8], xmm0
; Line 32
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR BaselineY$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T2[rsp]
	mov	r8d, 1
	mov	edx, -65536				; ffff0000H
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z ; ZenGluiDrawRectOutline
; Line 33
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR BaselineX$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T3[rsp]
	mov	r8d, 1
	mov	edx, -65536				; ffff0000H
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z ; ZenGluiDrawRectOutline
; Line 35
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	eax, DWORD PTR [rcx+rax+3080]
	mov	DWORD PTR Color$[rsp], eax
; Line 36
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR Glyph$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR Loca$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR Font$[rsp]
	mov	r9, QWORD PTR [rax+104]
	lea	r8, QWORD PTR $T5[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ; ZenGluiDrawSkinnedRect
; Line 37
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiDrawDebugGlyphAtScale@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@UZenGlyphVert@@M@Z ENDP ; ZenGluiDrawDebugGlyphAtScale
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?ZenTick@@YAXXZ PROC					; ZenTick
; File W:\cpp\void\detroit\brazen-global.h
; Line 128
	sub	rsp, 40					; 00000028H
; Line 129
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCoreTick@@YAXPEAUZenCore@@@Z	; ZenCoreTick
; Line 130
	add	rsp, 40					; 00000028H
	ret	0
?ZenTick@@YAXXZ ENDP					; ZenTick
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
User32$ = 48
XXX$1 = 56
YYY$2 = 64
tv76 = 72
$T3 = 80
$T4 = 96
$T5 = 128
$T6 = 160
WindowLocation$ = 224
WindowName$ = 232
?ZenInitialize@@YAXTi32x4@@PEB_W@Z PROC			; ZenInitialize
; File W:\cpp\void\detroit\brazen-global.h
; Line 76
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 77
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCoreInitTime@@YAXPEAUZenCore@@@Z	; ZenCoreInitTime
; Line 78
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCoreInitArena@@YAXPEAUZenCore@@@Z	; ZenCoreInitArena
; Line 79
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z ; ZenCoreInitConsoleIO
; Line 84
	lea	rcx, OFFSET FLAT:$SG168428
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR User32$[rsp], rax
; Line 85
	lea	rdx, OFFSET FLAT:$SG168431
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR XXX$1[rsp], rax
	cmp	QWORD PTR XXX$1[rsp], 0
	je	SHORT $LN2@ZenInitial
; Line 86
	mov	rax, QWORD PTR XXX$1[rsp]
	mov	QWORD PTR tv76[rsp], rax
	mov	rcx, -3
	call	QWORD PTR tv76[rsp]
; Line 87
	jmp	SHORT $LN3@ZenInitial
$LN2@ZenInitial:
; Line 88
	lea	rdx, OFFSET FLAT:$SG168433
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR YYY$2[rsp], rax
	cmp	QWORD PTR YYY$2[rsp], 0
	je	SHORT $LN4@ZenInitial
; Line 89
	call	QWORD PTR YYY$2[rsp]
$LN4@ZenInitial:
$LN3@ZenInitial:
; Line 91
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_FreeLibrary
; Line 99
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	QWORD PTR __imp_ConvertThreadToFiber
	mov	QWORD PTR ?Zen@@3UZenCore@@A+13920, rax
; Line 100
	lea	r8, OFFSET FLAT:?Zen@@3UZenCore@@A
	lea	rdx, OFFSET FLAT:?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z ; ZenInternalDebugInternalFiberFun
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateFiber
	mov	QWORD PTR ?Zen@@3UZenCore@@A+13928, rax
; Line 101
	lea	r8, OFFSET FLAT:?Zen@@3UZenCore@@A
	lea	rdx, OFFSET FLAT:?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z ; ZenInternalDebugExternalFiberFun
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateFiber
	mov	QWORD PTR ?Zen@@3UZenCore@@A+13936, rax
; Line 103
	lea	rdx, OFFSET FLAT:$SG168434
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z ; ZenCorePushCurrentDir
; Line 105
	mov	rax, QWORD PTR WindowLocation$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN5@ZenInitial
	mov	rax, QWORD PTR WindowLocation$[rsp]
	mov	DWORD PTR [rax+8], 1440			; 000005a0H
$LN5@ZenInitial:
; Line 106
	mov	rax, QWORD PTR WindowLocation$[rsp]
	cmp	DWORD PTR [rax+12], 0
	jg	SHORT $LN6@ZenInitial
	mov	rax, QWORD PTR WindowLocation$[rsp]
	mov	DWORD PTR [rax+12], 720			; 000002d0H
$LN6@ZenInitial:
; Line 108
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR WindowLocation$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR WindowName$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T3[rsp]
	mov	r8, QWORD PTR ?Zen@@3UZenCore@@A+13920
	lea	rdx, OFFSET FLAT:?Zen@@3UZenCore@@A+32
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A+64
	call	?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z ; ID3D11Graphics_Initialize
; Line 113
	lea	rax, OFFSET FLAT:$SG168438
	mov	QWORD PTR ?Zen@@3UZenCore@@A+13616, rax
; Line 114
	lea	rax, OFFSET FLAT:$SG168439
	mov	QWORD PTR ?Zen@@3UZenCore@@A+13632, rax
; Line 115
	lea	rax, OFFSET FLAT:$SG168440
	mov	QWORD PTR ?Zen@@3UZenCore@@A+13624, rax
; Line 118
	mov	DWORD PTR [rsp+32], 166			; 000000a6H
	mov	r9d, 118				; 00000076H
	lea	r8, OFFSET FLAT:$SG168442
	lea	rdx, OFFSET FLAT:$SG168443
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG168441
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:?Zen@@3UZenCore@@A
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z ; ZenCoreCreateGlyphFontCaller
	mov	QWORD PTR ?Zen@@3UZenCore@@A+7456, rax
; Line 121
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z ; ZenCorePullCurrentDir
; Line 123
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCorePull@@YAXPEAUZenCore@@@Z	; ZenCorePull
; Line 124
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?ZenInitialize@@YAXTi32x4@@PEB_W@Z ENDP			; ZenInitialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Core$ = 48
tv87 = 56
$T1 = 64
$T2 = 96
$T3 = 128
lpCore$ = 192
?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z PROC	; ZenInternalDebugExternalFiberFun
; File W:\cpp\void\detroit\brazen-global.h
; Line 63
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR lpCore$[rsp]
	mov	QWORD PTR Core$[rsp], rax
$LN2@ZenInterna:
; Line 65
	mov	DWORD PTR [rsp+32], 165			; 000000a5H
	mov	r9d, 65					; 00000041H
	lea	r8, OFFSET FLAT:$SG168409
	lea	rdx, OFFSET FLAT:$SG168410
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG168408
	mov	edx, 2
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 66
	mov	rax, QWORD PTR Core$[rsp]
	cmp	QWORD PTR [rax+13976], 0
	je	SHORT $LN5@ZenInterna
; Line 68
	mov	rax, QWORD PTR Core$[rsp]
	mov	rax, QWORD PTR [rax+13976]
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR Core$[rsp]
	mov	rdx, QWORD PTR [rax+13952]
	mov	rcx, QWORD PTR Core$[rsp]
	call	QWORD PTR tv87[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	DWORD PTR [rcx+13964], eax
$LN5@ZenInterna:
; Line 70
	jmp	$LN2@ZenInterna
; Line 71
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenInternalDebugExternalFiberFun@@YAXPEAX@Z ENDP	; ZenInternalDebugExternalFiberFun
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Core$ = 48
tv87 = 56
$T1 = 64
$T2 = 96
$T3 = 128
lpCore$ = 192
?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z PROC	; ZenInternalDebugInternalFiberFun
; File W:\cpp\void\detroit\brazen-global.h
; Line 49
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR lpCore$[rsp]
	mov	QWORD PTR Core$[rsp], rax
$LN2@ZenInterna:
; Line 51
	mov	DWORD PTR [rsp+32], 164			; 000000a4H
	mov	r9d, 51					; 00000033H
	lea	r8, OFFSET FLAT:$SG168396
	lea	rdx, OFFSET FLAT:$SG168397
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG168395
	mov	edx, 2
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 52
	mov	rax, QWORD PTR Core$[rsp]
	cmp	QWORD PTR [rax+13968], 0
	je	SHORT $LN5@ZenInterna
; Line 54
	mov	rax, QWORD PTR Core$[rsp]
	mov	rax, QWORD PTR [rax+13968]
	mov	QWORD PTR tv87[rsp], rax
	mov	rax, QWORD PTR Core$[rsp]
	mov	rdx, QWORD PTR [rax+13944]
	mov	rcx, QWORD PTR Core$[rsp]
	call	QWORD PTR tv87[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	DWORD PTR [rcx+13960], eax
$LN5@ZenInterna:
; Line 56
	jmp	$LN2@ZenInterna
; Line 57
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenInternalDebugInternalFiberFun@@YAXPEAX@Z ENDP	; ZenInternalDebugInternalFiberFun
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ PROC		; ZenGetActiveWindow
; File W:\cpp\void\detroit\brazen-global.h
; Line 28
	sub	rsp, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z ; ZenCoreGetActiveWindow
; Line 29
	add	rsp, 40					; 00000028H
	ret	0
?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ ENDP		; ZenGetActiveWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Member$ = 32
Tree$ = 64
Type$ = 72
PointerToValue$ = 80
Name$ = 88
?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z PROC	; AddMember
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 71
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 6
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Member$[rsp], rax
; Line 72
	mov	rax, QWORD PTR Member$[rsp]
	mov	rcx, QWORD PTR Type$[rsp]
	mov	QWORD PTR [rax+136], rcx
; Line 73
	mov	rax, QWORD PTR Member$[rsp]
	mov	rcx, QWORD PTR PointerToValue$[rsp]
	mov	QWORD PTR [rax+160], rcx
; Line 74
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Member$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 76
	mov	rax, QWORD PTR Tree$[rsp]
	movsxd	rax, DWORD PTR [rax+168]
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	rdx, QWORD PTR Member$[rsp]
	mov	QWORD PTR [rcx+rax*8+176], rdx
	mov	rax, QWORD PTR Tree$[rsp]
	mov	eax, DWORD PTR [rax+168]
	inc	eax
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 77
	mov	rax, QWORD PTR Member$[rsp]
; Line 78
	add	rsp, 56					; 00000038H
	ret	0
?AddMember@@YAPEAUReflectTree@@PEAU1@0PEAXPEBD@Z ENDP	; AddMember
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Value$ = 32
Tree$ = 64
IntValue$ = 72
Name$ = 80
?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z PROC	; AddValue
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 61
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 5
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Value$[rsp], rax
; Line 62
	mov	rax, QWORD PTR Value$[rsp]
	lea	rcx, OFFSET FLAT:?TypeInteger@@3UReflectTree@@A
	mov	QWORD PTR [rax+136], rcx
; Line 63
	mov	rax, QWORD PTR Value$[rsp]
	mov	ecx, DWORD PTR IntValue$[rsp]
	mov	DWORD PTR [rax+152], ecx
; Line 64
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Value$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 66
	mov	rax, QWORD PTR Tree$[rsp]
	movsxd	rax, DWORD PTR [rax+168]
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	rdx, QWORD PTR Value$[rsp]
	mov	QWORD PTR [rcx+rax*8+176], rdx
	mov	rax, QWORD PTR Tree$[rsp]
	mov	eax, DWORD PTR [rax+168]
	inc	eax
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 67
	mov	rax, QWORD PTR Value$[rsp]
; Line 68
	add	rsp, 56					; 00000038H
	ret	0
?AddValue@@YAPEAUReflectTree@@PEAU1@HPEBD@Z ENDP	; AddValue
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Tree$ = 32
Name$ = 64
?CreateStruct@@YAPEAUReflectTree@@PEBD@Z PROC		; CreateStruct
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 55
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 8
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Tree$[rsp], rax
; Line 56
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Tree$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 57
	mov	rax, QWORD PTR Tree$[rsp]
; Line 58
	add	rsp, 56					; 00000038H
	ret	0
?CreateStruct@@YAPEAUReflectTree@@PEBD@Z ENDP		; CreateStruct
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Tree$ = 32
Name$ = 64
?CreateEnum@@YAPEAUReflectTree@@PEBD@Z PROC		; CreateEnum
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 49
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 7
	call	?NewReflectTree@@YAPEAUReflectTree@@H@Z	; NewReflectTree
	mov	QWORD PTR Tree$[rsp], rax
; Line 50
	mov	rcx, QWORD PTR Name$[rsp]
	call	strlen
	mov	rcx, QWORD PTR Tree$[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR Name$[rsp]
	call	memcpy
; Line 51
	mov	rax, QWORD PTR Tree$[rsp]
; Line 52
	add	rsp, 56					; 00000038H
	ret	0
?CreateEnum@@YAPEAUReflectTree@@PEBD@Z ENDP		; CreateEnum
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Tree$ = 32
Kind$ = 64
?NewReflectTree@@YAPEAUReflectTree@@H@Z PROC		; NewReflectTree
; File W:\cpp\void\detroit\detroit-reflect.c
; Line 42
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	ecx, 432				; 000001b0H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR Tree$[rsp], rax
; Line 43
	mov	r8d, 432				; 000001b0H
	xor	edx, edx
	mov	rcx, QWORD PTR Tree$[rsp]
	call	memset
; Line 44
	mov	eax, DWORD PTR Kind$[rsp]
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -65536				; ffff0000H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Tree$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 45
	mov	rax, QWORD PTR Tree$[rsp]
; Line 46
	add	rsp, 56					; 00000038H
	ret	0
?NewReflectTree@@YAPEAUReflectTree@@H@Z ENDP		; NewReflectTree
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Char$1 = 48
S$2 = 52
I$3 = 56
CursorX$ = 60
Scale$4 = 64
CursorY$ = 68
TextLength$ = 72
TextSample$ = 80
$T5 = 88
CircleTarget$ = 96
BlurTarget$ = 128
FieldTarget$ = 160
BlurResult$ = 192
TextBuffer$ = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 344
$T10 = 376
$T11 = 408
$T12 = 440
$T13 = 472
Font$ = 512
Glyph$14 = 624
G$15 = 656
__$ArrayPad$ = 688
Core$ = 736
?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z PROC		; ZenConductSDFFontTest
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 913
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 712				; 000002c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 915
	lea	rdx, OFFSET FLAT:$SG168253
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z ; ZenCorePushCurrentDir
; Line 919
	mov	DWORD PTR [rsp+32], 161			; 000000a1H
	mov	r9d, 919				; 00000397H
	lea	r8, OFFSET FLAT:$SG168255
	lea	rdx, OFFSET FLAT:$SG168256
	lea	rcx, QWORD PTR $T8[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG168254
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	lea	r8, QWORD PTR Font$[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z ; ZenCoreLoadGlyphFontCaller
; Line 922
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z ; ZenCorePullCurrentDir
; Line 925
	lea	rdx, OFFSET FLAT:$SG168257
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z ; ZenCorePushCurrentDir
; Line 926
	mov	DWORD PTR [rsp+32], 512			; 00000200H
	mov	r9d, 512				; 00000200H
	mov	r8d, 1
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ; ZenCoreCreateSoftTexture
	lea	rcx, QWORD PTR CircleTarget$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 927
	mov	DWORD PTR [rsp+32], 256			; 00000100H
	mov	r9d, 256				; 00000100H
	mov	r8d, 128				; 00000080H
	mov	edx, 255				; 000000ffH
	lea	rcx, QWORD PTR CircleTarget$[rsp]
	call	?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z ; ZenDrawCircleInTexture
; Line 928
	mov	DWORD PTR [rsp+32], 32			; 00000020H
	mov	r9d, 32					; 00000020H
	mov	r8d, 1
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ; ZenCoreCreateSoftTexture
	lea	rcx, QWORD PTR FieldTarget$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 930
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR CircleTarget$[rsp]
	lea	rcx, QWORD PTR FieldTarget$[rsp]
	call	?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z ; ZenApplyTextureSDF
; Line 932
	lea	r8, OFFSET FLAT:$SG168258
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z ; ZenCoreSoftLoadTextureFromFile
	lea	rcx, QWORD PTR BlurTarget$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 933
	lea	r8, QWORD PTR BlurTarget$[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z ; ZenCoreSoftCloneTexture
	lea	rcx, QWORD PTR BlurResult$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 934
	lea	r8, QWORD PTR BlurTarget$[rsp]
	mov	edx, 8
	lea	rcx, QWORD PTR BlurResult$[rsp]
	call	?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z ; ZenApplyGaussainBlur
; Line 936
	lea	rdx, OFFSET FLAT:$SG168259
	lea	rcx, QWORD PTR CircleTarget$[rsp]
	call	?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ; ZenWriteTextureToFile
; Line 937
	lea	rdx, OFFSET FLAT:$SG168260
	lea	rcx, QWORD PTR FieldTarget$[rsp]
	call	?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ; ZenWriteTextureToFile
; Line 938
	lea	rdx, OFFSET FLAT:$SG168261
	lea	rcx, QWORD PTR BlurResult$[rsp]
	call	?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ; ZenWriteTextureToFile
; Line 969
	mov	BYTE PTR Char$1[rsp], 32		; 00000020H
	jmp	SHORT $LN4@ZenConduct
$LN2@ZenConduct:
	movzx	eax, BYTE PTR Char$1[rsp]
	inc	al
	mov	BYTE PTR Char$1[rsp], al
$LN4@ZenConduct:
	movzx	eax, BYTE PTR Char$1[rsp]
	cmp	eax, 127				; 0000007fH
	jge	SHORT $LN3@ZenConduct
; Line 970
	movzx	eax, BYTE PTR Char$1[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR Font$[rsp]
	call	?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z ; ZenGetGlyphIndex
	cdqe
	imul	rax, rax, 28
	lea	rcx, QWORD PTR G$15[rsp]
	mov	rdx, QWORD PTR Font$[rsp+88]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 28
	rep movsb
; Line 971
	movzx	eax, BYTE PTR Char$1[rsp]
	imul	rax, rax, 28
	lea	rcx, OFFSET FLAT:?fdata@@3PAUZenGlyph@@A ; fdata
	lea	rdx, QWORD PTR G$15[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 28
	rep movsb
; Line 972
	jmp	SHORT $LN2@ZenConduct
$LN3@ZenConduct:
; Line 975
	lea	rax, OFFSET FLAT:$SG168262
	mov	QWORD PTR TextSample$[rsp], rax
; Line 976
	mov	rcx, QWORD PTR TextSample$[rsp]
	call	strlen
	mov	DWORD PTR TextLength$[rsp], eax
; Line 979
	mov	DWORD PTR [rsp+32], 6144		; 00001800H
	mov	r9d, 2048				; 00000800H
	mov	r8d, 1
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ; ZenCoreCreateSoftTexture
	lea	rcx, QWORD PTR TextBuffer$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 982
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR CursorY$[rsp], xmm0
; Line 983
	xorps	xmm0, xmm0
	movss	DWORD PTR CursorX$[rsp], xmm0
; Line 985
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR S$2[rsp], xmm0
	jmp	SHORT $LN7@ZenConduct
$LN5@ZenConduct:
	movss	xmm0, DWORD PTR S$2[rsp]
	addss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR S$2[rsp], xmm0
$LN7@ZenConduct:
	movss	xmm0, DWORD PTR __real@43800000
	comiss	xmm0, DWORD PTR S$2[rsp]
	jbe	$LN6@ZenConduct
; Line 986
	cvtsi2ss xmm0, DWORD PTR Font$[rsp+44]
	movss	xmm1, DWORD PTR S$2[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Scale$4[rsp], xmm0
; Line 987
	mov	DWORD PTR I$3[rsp], 0
	jmp	SHORT $LN10@ZenConduct
$LN8@ZenConduct:
	mov	eax, DWORD PTR I$3[rsp]
	inc	eax
	mov	DWORD PTR I$3[rsp], eax
$LN10@ZenConduct:
	mov	eax, DWORD PTR TextLength$[rsp]
	cmp	DWORD PTR I$3[rsp], eax
	jge	$LN9@ZenConduct
; Line 989
	movsxd	rax, DWORD PTR I$3[rsp]
	mov	rcx, QWORD PTR TextSample$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	edx, eax
	lea	rcx, QWORD PTR Font$[rsp]
	call	?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z ; ZenGetGlyphIndex
	cdqe
	imul	rax, rax, 28
	lea	rcx, QWORD PTR Glyph$14[rsp]
	mov	rdx, QWORD PTR Font$[rsp+88]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 28
	rep movsb
; Line 990
	movss	xmm0, DWORD PTR CursorX$[rsp]
	movss	DWORD PTR $T5[rsp], xmm0
	movss	xmm0, DWORD PTR CursorY$[rsp]
	movss	DWORD PTR $T5[rsp+4], xmm0
	lea	rax, QWORD PTR Glyph$14[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR Font$[rsp+104]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR Scale$4[rsp]
	mov	r8, QWORD PTR $T5[rsp]
	lea	rdx, QWORD PTR TextBuffer$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z ; ZenSoftRasterizeSDFGlyph
; Line 991
	movss	xmm0, DWORD PTR Glyph$14[rsp+24]
	mulss	xmm0, DWORD PTR Scale$4[rsp]
	movss	xmm1, DWORD PTR CursorX$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR CursorX$[rsp], xmm0
; Line 992
	jmp	$LN8@ZenConduct
$LN9@ZenConduct:
; Line 993
	movss	xmm0, DWORD PTR Font$[rsp+72]
	mulss	xmm0, DWORD PTR Scale$4[rsp]
	addss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR CursorY$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR CursorY$[rsp], xmm0
; Line 994
	xorps	xmm0, xmm0
	movss	DWORD PTR CursorX$[rsp], xmm0
; Line 995
	jmp	$LN5@ZenConduct
$LN6@ZenConduct:
; Line 997
	lea	rdx, OFFSET FLAT:$SG168263
	lea	rcx, QWORD PTR TextBuffer$[rsp]
	call	?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ; ZenWriteTextureToFile
; Line 1000
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z ; ZenCorePullCurrentDir
; Line 1003
	xor	eax, eax
; Line 1004
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 712				; 000002c8H
	pop	rdi
	pop	rsi
	ret	0
?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z ENDP		; ZenConductSDFFontTest
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
MetalToPixel$ = 64
Decor$ = 68
I$1 = 72
Glyph$2 = 80
CurX$ = 88
J$3 = 92
CurY$ = 96
Padd$ = 100
MetalGlyph$4 = 104
MaxPackX$ = 112
tv327 = 116
tv340 = 120
AdvX$ = 124
RasterBufferSize$ = 128
CodePoint$5 = 136
AdvY$ = 140
MaxPackY$ = 144
GlyphIndex$6 = 148
tv420 = 152
tv418 = 156
RasterBuffer$ = 160
Metal$ = 192
tv416 = 248
tv526 = 256
tv524 = 264
$T7 = 272
$T8 = 288
$T9 = 304
$T10 = 320
$T11 = 352
$T12 = 384
$T13 = 416
$T14 = 448
$T15 = 480
$T16 = 512
$T17 = 544
$T18 = 576
$T19 = 608
$T20 = 640
$T21 = 672
$T22 = 704
$T23 = 728
$T24 = 752
$T25 = 776
$T26 = 800
$T27 = 824
$T28 = 848
FontLoader$ = 880
SourcePixel$29 = 1040
RasterPixel$30 = 1056
__$ArrayPad$ = 1072
Core$ = 1120
Font$ = 1128
CharSet$ = 1136
RealY$ = 1144
Field$ = 1152
Downscale$ = 1160
File$ = 1168
?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z PROC ; ZenCoreGenerateGlyphFontExtended
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 769
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1096				; 00000448H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 770
	mov	r8d, 112				; 00000070H
	xor	edx, edx
	mov	rcx, QWORD PTR Font$[rsp]
	call	memset
; Line 772
	cmp	QWORD PTR CharSet$[rsp], 0
	jne	SHORT $LN8@ZenCoreGen
	xor	ecx, ecx
	call	?ZenCharSet@@YAPEAHPEBD@Z		; ZenCharSet
	mov	QWORD PTR CharSet$[rsp], rax
$LN8@ZenCoreGen:
; Line 777
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR File$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR CharSet$[rsp]
	lea	r8, QWORD PTR FontLoader$[rsp]
	lea	rdx, QWORD PTR Metal$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z ; ZenCoreLoadMetalFontFromFile
	test	eax, eax
	je	SHORT $LN9@ZenCoreGen
; Line 780
	jmp	SHORT $LN10@ZenCoreGen
$LN9@ZenCoreGen:
; Line 783
	xor	eax, eax
	jmp	$LN1@ZenCoreGen
$LN10@ZenCoreGen:
; Line 786
	cvtsi2ss xmm0, DWORD PTR RealY$[rsp]
	movss	xmm1, DWORD PTR Metal$[rsp+24]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR MetalToPixel$[rsp], xmm0
; Line 788
	lea	rax, QWORD PTR Metal$[rsp]
	mov	rdi, QWORD PTR Font$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
; Line 790
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR RealY$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 791
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR Downscale$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 792
	mov	eax, DWORD PTR RealY$[rsp]
	cdq
	idiv	DWORD PTR Downscale$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 793
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR Field$[rsp]
	mov	DWORD PTR [rax+48], ecx
; Line 794
	mov	eax, DWORD PTR Field$[rsp]
	mov	ecx, DWORD PTR Downscale$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+52], eax
; Line 796
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+4]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+56], xmm0
; Line 797
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+8]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+60], xmm0
; Line 798
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+12]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+64], xmm0
; Line 799
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+16]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+68], xmm0
; Line 800
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+20]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+72], xmm0
; Line 801
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+28]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, 4095				; 00000fffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+76], eax
; Line 802
	cvtsi2ss xmm0, DWORD PTR Metal$[rsp+32]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, 4095				; 00000fffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 804
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR Metal$[rsp+36]
	mov	DWORD PTR [rax+84], ecx
; Line 805
	mov	DWORD PTR [rsp+32], 155			; 0000009bH
	mov	r9d, 805				; 00000325H
	lea	r8, OFFSET FLAT:$SG168180
	lea	rdx, OFFSET FLAT:$SG168181
	lea	rcx, QWORD PTR $T22[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Font$[rsp]
	movsxd	rax, DWORD PTR [rax+84]
	imul	rax, rax, 28
	lea	rcx, QWORD PTR $T11[rsp]
	lea	rdx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8d, eax
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+88], rax
; Line 806
	mov	DWORD PTR [rsp+32], 156			; 0000009cH
	mov	r9d, 806				; 00000326H
	lea	r8, OFFSET FLAT:$SG168182
	lea	rdx, OFFSET FLAT:$SG168183
	lea	rcx, QWORD PTR $T23[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Font$[rsp]
	movsxd	rax, DWORD PTR [rax+84]
	shl	rax, 2
	mov	rcx, QWORD PTR Font$[rsp]
	movsxd	rcx, DWORD PTR [rcx+84]
	imul	rax, rcx
	lea	rcx, QWORD PTR $T13[rsp]
	lea	rdx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8d, eax
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+96], rax
; Line 808
	mov	r8d, 2048				; 00000800H
	mov	edx, 4096				; 00001000H
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z ; ZenCoreCreateGlyphFontAtlas
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+104], rax
; Line 811
	mov	DWORD PTR J$3[rsp], 0
	jmp	SHORT $LN4@ZenCoreGen
$LN2@ZenCoreGen:
	mov	eax, DWORD PTR J$3[rsp]
	inc	eax
	mov	DWORD PTR J$3[rsp], eax
$LN4@ZenCoreGen:
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	eax, DWORD PTR [rax+84]
	imul	eax, DWORD PTR [rcx+84]
	cmp	DWORD PTR J$3[rsp], eax
	jge	SHORT $LN3@ZenCoreGen
; Line 812
	movsxd	rax, DWORD PTR J$3[rsp]
	mov	rcx, QWORD PTR Metal$[rsp+48]
	movsx	eax, WORD PTR [rcx+rax*2]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR Downscale$[rsp]
	divss	xmm0, xmm1
	movsxd	rax, DWORD PTR J$3[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 813
	jmp	SHORT $LN2@ZenCoreGen
$LN3@ZenCoreGen:
; Line 816
	mov	eax, DWORD PTR Field$[rsp]
	mov	ecx, DWORD PTR Downscale$[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR Decor$[rsp], eax
; Line 819
	mov	eax, DWORD PTR Decor$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR Metal$[rsp+28]
	movss	xmm2, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, 65535				; 0000ffffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	DWORD PTR RasterBufferSize$[rsp], eax
; Line 820
	mov	eax, DWORD PTR Decor$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR Metal$[rsp+32]
	movss	xmm2, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, 65535				; 0000ffffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	DWORD PTR RasterBufferSize$[rsp+4], eax
; Line 824
	mov	DWORD PTR [rsp+32], 157			; 0000009dH
	mov	r9d, 825				; 00000339H
	lea	r8, OFFSET FLAT:$SG168184
	lea	rdx, OFFSET FLAT:$SG168185
	lea	rcx, QWORD PTR $T24[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR RasterBufferSize$[rsp]
	imul	eax, DWORD PTR RasterBufferSize$[rsp+4]
	lea	rcx, QWORD PTR $T15[rsp]
	lea	rdx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8d, eax
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugFrameAlloc
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR RasterBufferSize$[rsp+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR RasterBufferSize$[rsp]
	mov	r8d, 1
	mov	edx, 12
	lea	rcx, QWORD PTR $T28[rsp]
	call	?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ; ZenUnboundTexture
	lea	rcx, QWORD PTR RasterBuffer$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 827
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR MaxPackX$[rsp], eax
; Line 828
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR MaxPackY$[rsp], eax
; Line 830
	mov	eax, DWORD PTR Decor$[rsp]
	cdq
	idiv	DWORD PTR Downscale$[rsp]
	add	eax, 2
	mov	DWORD PTR Padd$[rsp], eax
; Line 831
	mov	eax, DWORD PTR Decor$[rsp]
	shl	eax, 1
	cdq
	idiv	DWORD PTR Downscale$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+80]
	lea	eax, DWORD PTR [rax+rcx+2]
	mov	DWORD PTR AdvY$[rsp], eax
; Line 832
	mov	eax, DWORD PTR Decor$[rsp]
	shl	eax, 1
	cdq
	idiv	DWORD PTR Downscale$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+76]
	lea	eax, DWORD PTR [rax+rcx+2]
	mov	DWORD PTR AdvX$[rsp], eax
; Line 834
	mov	eax, DWORD PTR Padd$[rsp]
	mov	DWORD PTR CurX$[rsp], eax
	mov	eax, DWORD PTR Padd$[rsp]
	mov	DWORD PTR CurY$[rsp], eax
; Line 836
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN7@ZenCoreGen
$LN5@ZenCoreGen:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN7@ZenCoreGen:
	mov	rax, QWORD PTR Font$[rsp]
	mov	eax, DWORD PTR [rax+84]
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN6@ZenCoreGen
; Line 838
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Metal$[rsp+40]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR MetalGlyph$4[rsp], rax
; Line 840
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR CodePoint$5[rsp], eax
; Line 841
	mov	edx, DWORD PTR CodePoint$5[rsp]
	lea	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR GlyphIndex$6[rsp], eax
; Line 843
	mov	eax, DWORD PTR AdvX$[rsp]
	mov	ecx, DWORD PTR CurX$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR MaxPackX$[rsp]
	jle	SHORT $LN11@ZenCoreGen
; Line 844
	mov	eax, DWORD PTR Padd$[rsp]
	mov	DWORD PTR CurX$[rsp], eax
; Line 845
	mov	eax, DWORD PTR AdvY$[rsp]
	mov	ecx, DWORD PTR CurY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR CurY$[rsp], eax
$LN11@ZenCoreGen:
; Line 847
	mov	DWORD PTR [rsp+32], 158			; 0000009eH
	mov	r9d, 847				; 0000034fH
	lea	r8, OFFSET FLAT:$SG168189
	lea	rdx, OFFSET FLAT:$SG168190
	lea	rcx, QWORD PTR $T25[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR MaxPackX$[rsp]
	cmp	DWORD PTR CurX$[rsp], eax
	jg	SHORT $LN14@ZenCoreGen
	mov	DWORD PTR tv327[rsp], 1
	jmp	SHORT $LN15@ZenCoreGen
$LN14@ZenCoreGen:
	mov	DWORD PTR tv327[rsp], 0
$LN15@ZenCoreGen:
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG168187
	mov	r8d, DWORD PTR tv327[rsp]
	lea	rdx, OFFSET FLAT:$SG168188
	lea	rcx, QWORD PTR $T17[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 848
	mov	DWORD PTR [rsp+32], 159			; 0000009fH
	mov	r9d, 848				; 00000350H
	lea	r8, OFFSET FLAT:$SG168193
	lea	rdx, OFFSET FLAT:$SG168194
	lea	rcx, QWORD PTR $T26[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR MaxPackY$[rsp]
	cmp	DWORD PTR CurY$[rsp], eax
	jg	SHORT $LN16@ZenCoreGen
	mov	DWORD PTR tv340[rsp], 1
	jmp	SHORT $LN17@ZenCoreGen
$LN16@ZenCoreGen:
	mov	DWORD PTR tv340[rsp], 0
$LN17@ZenCoreGen:
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG168191
	mov	r8d, DWORD PTR tv340[rsp]
	lea	rdx, OFFSET FLAT:$SG168192
	lea	rcx, QWORD PTR $T19[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 850
	mov	eax, DWORD PTR RasterBuffer$[rsp+16]
	imul	eax, DWORD PTR RasterBuffer$[rsp+8]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR RasterBuffer$[rsp+24]
	call	memset
; Line 853
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+12]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR RasterBuffer$[rsp+8]
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	DWORD PTR tv420[rsp], eax
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+8]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR RasterBuffer$[rsp+4]
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	DWORD PTR tv418[rsp], eax
	mov	r8d, DWORD PTR Decor$[rsp]
	mov	edx, DWORD PTR Decor$[rsp]
	lea	rcx, QWORD PTR RasterBuffer$[rsp]
	call	?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAt
	mov	QWORD PTR tv416[rsp], rax
	mov	eax, DWORD PTR GlyphIndex$6[rsp]
	mov	DWORD PTR [rsp+56], eax
	movss	xmm0, DWORD PTR MetalToPixel$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR MetalToPixel$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR RasterBuffer$[rsp+16]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tv420[rsp]
	mov	r8d, DWORD PTR tv418[rsp]
	mov	rdx, QWORD PTR tv416[rsp]
	lea	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_MakeGlyphBitmap
; Line 862
	mov	DWORD PTR SourcePixel$29[rsp], 0
; Line 863
	mov	DWORD PTR SourcePixel$29[rsp+4], 0
; Line 864
	mov	eax, DWORD PTR Decor$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	movss	xmm2, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR RasterBuffer$[rsp+4]
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	DWORD PTR SourcePixel$29[rsp+8], eax
; Line 865
	mov	eax, DWORD PTR Decor$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+12]
	movss	xmm2, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR RasterBuffer$[rsp+8]
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	DWORD PTR SourcePixel$29[rsp+12], eax
; Line 868
	mov	eax, DWORD PTR CurX$[rsp]
	mov	DWORD PTR RasterPixel$30[rsp], eax
	mov	eax, DWORD PTR SourcePixel$29[rsp+8]
	cdq
	idiv	DWORD PTR Downscale$[rsp]
	mov	DWORD PTR RasterPixel$30[rsp+8], eax
; Line 869
	mov	eax, DWORD PTR CurY$[rsp]
	mov	DWORD PTR RasterPixel$30[rsp+4], eax
	mov	eax, DWORD PTR SourcePixel$29[rsp+12]
	cdq
	idiv	DWORD PTR Downscale$[rsp]
	mov	DWORD PTR RasterPixel$30[rsp+12], eax
; Line 871
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR SourcePixel$29[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR RasterPixel$30[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR Field$[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR RasterBuffer$[rsp]
	lea	r8, QWORD PTR $T8[rsp]
	mov	rax, QWORD PTR Font$[rsp]
	mov	rdx, QWORD PTR [rax+104]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z ; ZenComputeGlyphSDF
	test	eax, eax
	je	SHORT $LN12@ZenCoreGen
; Line 873
	mov	DWORD PTR [rsp+32], 160			; 000000a0H
	mov	r9d, 873				; 00000369H
	lea	r8, OFFSET FLAT:$SG168197
	lea	rdx, OFFSET FLAT:$SG168198
	lea	rcx, QWORD PTR $T27[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR I$1[rsp]
	lea	r8, OFFSET FLAT:$SG168196
	mov	edx, 2
	lea	rcx, QWORD PTR $T21[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN12@ZenCoreGen:
; Line 876
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR Font$[rsp]
	add	rax, QWORD PTR [rcx+88]
	mov	QWORD PTR Glyph$2[rsp], rax
; Line 878
	lea	rax, QWORD PTR RasterPixel$30[rsp]
	mov	rdi, QWORD PTR Glyph$2[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 880
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 881
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 882
	mov	rax, QWORD PTR MetalGlyph$4[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+16]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 883
	cvtsi2ss xmm0, DWORD PTR Decor$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	xmm1, DWORD PTR [rax+16]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 884
	cvtsi2ss xmm0, DWORD PTR Decor$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 885
	cvtsi2ss xmm0, DWORD PTR Downscale$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	xmm1, DWORD PTR [rax+16]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 886
	cvtsi2ss xmm0, DWORD PTR Downscale$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 887
	cvtsi2ss xmm0, DWORD PTR Downscale$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	xmm1, DWORD PTR [rax+24]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 889
	mov	eax, DWORD PTR AdvX$[rsp]
	mov	ecx, DWORD PTR CurX$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR CurX$[rsp], eax
; Line 890
	jmp	$LN5@ZenCoreGen
$LN6@ZenCoreGen:
; Line 894
	lea	rdx, OFFSET FLAT:$SG168199
	lea	rcx, OFFSET FLAT:$SG168200
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR tv526[rsp], rax
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR tv524[rsp], rax
	mov	rdx, QWORD PTR tv526[rsp]
	mov	rcx, QWORD PTR tv524[rsp]
	call	?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ; ZenWriteTextureToFile
; Line 896
	mov	eax, 1
$LN1@ZenCoreGen:
; Line 897
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1096				; 00000448H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z ENDP ; ZenCoreGenerateGlyphFontExtended
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 48
Glyph$2 = 56
J$3 = 64
GlyphIndex$4 = 68
AdvanceX$5 = 72
ShapeX0$6 = 76
ShapeY0$7 = 80
tv76 = 84
Above$ = 88
Below$ = 92
Under$ = 96
CodePoint$8 = 100
NextCodePoint$9 = 104
NextGlyphIndex$10 = 108
ShapeX1$11 = 112
ShapeY1$12 = 116
BearingL$13 = 120
tv74 = 128
Entry$14 = 136
$T15 = 144
$T16 = 176
$T17 = 208
$T18 = 240
$T19 = 272
$T20 = 296
Core$ = 352
Font$ = 360
FontLoader$ = 368
CharSet$ = 376
File$ = 384
?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z PROC ; ZenCoreLoadMetalFontFromFile
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 709
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 711
	xor	edx, edx
	mov	rax, QWORD PTR File$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbtt_GetFontOffsetForIndex
	mov	DWORD PTR tv76[rsp], eax
	mov	rax, QWORD PTR File$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv74[rsp], rax
	mov	r8d, DWORD PTR tv76[rsp]
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_InitFont
	test	eax, eax
	jne	SHORT $LN8@ZenCoreLoa
; Line 712
	xor	eax, eax
	jmp	$LN1@ZenCoreLoa
$LN8@ZenCoreLoa:
; Line 715
	lea	r9, QWORD PTR Under$[rsp]
	lea	r8, QWORD PTR Below$[rsp]
	lea	rdx, QWORD PTR Above$[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_GetFontVMetrics
; Line 717
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR Above$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 718
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR Below$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 719
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR Under$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 720
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 721
	mov	rax, QWORD PTR Font$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR Font$[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 722
	mov	rax, QWORD PTR Font$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+16]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 723
	mov	rax, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 724
	mov	rax, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 726
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	eax, DWORD PTR [rdx+rax]
	mov	DWORD PTR [rcx+36], eax
; Line 727
	mov	DWORD PTR [rsp+32], 153			; 00000099H
	mov	r9d, 727				; 000002d7H
	lea	r8, OFFSET FLAT:$SG168117
	lea	rdx, OFFSET FLAT:$SG168118
	lea	rcx, QWORD PTR $T19[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Font$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8d, eax
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 728
	mov	DWORD PTR [rsp+32], 154			; 0000009aH
	mov	r9d, 728				; 000002d8H
	lea	r8, OFFSET FLAT:$SG168119
	lea	rdx, OFFSET FLAT:$SG168120
	lea	rcx, QWORD PTR $T20[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Font$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	shl	rax, 1
	mov	rcx, QWORD PTR Font$[rsp]
	movsxd	rcx, DWORD PTR [rcx+36]
	imul	rax, rcx
	lea	rcx, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	r8d, eax
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+48], rax
; Line 729
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ZenCoreLoa
$LN2@ZenCoreLoa:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ZenCoreLoa:
	mov	rax, QWORD PTR Font$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN3@ZenCoreLoa
; Line 730
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR CodePoint$8[rsp], eax
; Line 731
	mov	edx, DWORD PTR CodePoint$8[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR GlyphIndex$4[rsp], eax
; Line 732
	mov	DWORD PTR J$3[rsp], 0
	jmp	SHORT $LN7@ZenCoreLoa
$LN5@ZenCoreLoa:
	mov	eax, DWORD PTR J$3[rsp]
	inc	eax
	mov	DWORD PTR J$3[rsp], eax
$LN7@ZenCoreLoa:
	mov	rax, QWORD PTR Font$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR J$3[rsp], eax
	jge	SHORT $LN6@ZenCoreLoa
; Line 733
	movsxd	rax, DWORD PTR J$3[rsp]
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR NextCodePoint$9[rsp], eax
; Line 734
	mov	edx, DWORD PTR NextCodePoint$9[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR NextGlyphIndex$10[rsp], eax
; Line 735
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR I$1[rsp]
	imul	ecx, DWORD PTR [rax+36]
	mov	eax, ecx
	add	eax, DWORD PTR J$3[rsp]
	cdqe
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR Entry$14[rsp], rax
; Line 736
	mov	r8d, DWORD PTR NextGlyphIndex$10[rsp]
	mov	edx, DWORD PTR GlyphIndex$4[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_GetGlyphKernAdvance
	mov	rcx, QWORD PTR Entry$14[rsp]
	mov	WORD PTR [rcx], ax
; Line 737
	jmp	$LN5@ZenCoreLoa
$LN6@ZenCoreLoa:
; Line 740
	lea	r9, QWORD PTR BearingL$13[rsp]
	lea	r8, QWORD PTR AdvanceX$5[rsp]
	mov	edx, DWORD PTR GlyphIndex$4[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 742
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Font$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR Glyph$2[rsp], rax
; Line 743
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	ecx, DWORD PTR AdvanceX$5[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 744
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	DWORD PTR [rax], 0
; Line 745
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 746
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	ecx, DWORD PTR AdvanceX$5[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 747
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	DWORD PTR [rax+12], 1
; Line 751
	lea	rax, QWORD PTR ShapeY1$12[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR ShapeX1$11[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR ShapeY0$7[rsp]
	lea	r8, QWORD PTR ShapeX0$6[rsp]
	mov	edx, DWORD PTR GlyphIndex$4[rsp]
	mov	rcx, QWORD PTR FontLoader$[rsp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	je	SHORT $LN9@ZenCoreLoa
; Line 752
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	ecx, DWORD PTR ShapeX0$6[rsp]
	mov	DWORD PTR [rax], ecx
; Line 753
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	ecx, DWORD PTR ShapeY0$7[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 754
	mov	eax, DWORD PTR ShapeX0$6[rsp]
	mov	ecx, DWORD PTR ShapeX1$11[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Glyph$2[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 755
	mov	eax, DWORD PTR ShapeY0$7[rsp]
	mov	ecx, DWORD PTR ShapeY1$12[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Glyph$2[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN9@ZenCoreLoa:
; Line 757
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+28]
	cmp	DWORD PTR [rax+8], ecx
	jle	SHORT $LN10@ZenCoreLoa
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Glyph$2[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+28], ecx
$LN10@ZenCoreLoa:
; Line 758
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	cmp	DWORD PTR [rax+12], ecx
	jle	SHORT $LN11@ZenCoreLoa
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Glyph$2[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+32], ecx
$LN11@ZenCoreLoa:
; Line 759
	jmp	$LN2@ZenCoreLoa
$LN3@ZenCoreLoa:
; Line 760
	mov	eax, 1
$LN1@ZenCoreLoa:
; Line 761
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreLoadMetalFontFromFile@@YAHPEAUZenCore@@PEAUZenMetalFont@@PEAUstbtt_fontinfo@@PEAHUZenSlice@@@Z ENDP ; ZenCoreLoadMetalFontFromFile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Record$1 = 48
$T2 = 64
Caller$ = 128
Core$ = 136
CharSet$ = 144
FileName$ = 152
?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z PROC ; ZenCoreCreateGlyphFontCaller
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 598
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 599
	xor	edx, edx
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z ; ZenCoreAccessionGlyphic
	mov	QWORD PTR Record$1[rsp], rax
	cmp	QWORD PTR Record$1[rsp], 0
	je	SHORT $LN2@ZenCoreCre
; Line 601
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR FileName$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR CharSet$[rsp]
	mov	r8, QWORD PTR Record$1[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z ; ZenCoreLoadGlyphFontCaller
	test	eax, eax
	je	SHORT $LN3@ZenCoreCre
; Line 603
	mov	rax, QWORD PTR Record$1[rsp]
	jmp	SHORT $LN1@ZenCoreCre
$LN3@ZenCoreCre:
$LN2@ZenCoreCre:
; Line 606
	xor	eax, eax
$LN1@ZenCoreCre:
; Line 607
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreCreateGlyphFontCaller@@YAPEAUZenGlyphFont@@UZenCaller@@PEAUZenCore@@PEAHPEBD@Z ENDP ; ZenCoreCreateGlyphFontCaller
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Success$ = 48
IsZenFile$ = 52
FileSize$ = 56
FileData$ = 64
ActualFileName$ = 72
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
PrevAtlas$9 = 304
$T10 = 336
$T11 = 360
$T12 = 384
Caller$ = 448
Core$ = 456
Font$ = 464
CharSet$ = 472
FileName$ = 480
?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z PROC ; ZenCoreLoadGlyphFontCaller
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 563
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
; Line 564
	mov	DWORD PTR IsZenFile$[rsp], 0
; Line 565
	lea	r8, QWORD PTR IsZenFile$[rsp]
	mov	rdx, QWORD PTR FileName$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z ; ZenCoreFindFontFile
	mov	QWORD PTR ActualFileName$[rsp], rax
; Line 568
	mov	rdx, QWORD PTR ActualFileName$[rsp]
	lea	rcx, QWORD PTR FileSize$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$[rsp], rax
; Line 569
	cmp	QWORD PTR FileData$[rsp], 0
	jne	$LN2@ZenCoreLoa
; Line 570
	mov	DWORD PTR [rsp+32], 145			; 00000091H
	mov	r9d, 570				; 0000023aH
	lea	r8, OFFSET FLAT:$SG167996
	lea	rdx, OFFSET FLAT:$SG167997
	lea	rcx, QWORD PTR $T10[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR FileName$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ActualFileName$[rsp]
	lea	r8, OFFSET FLAT:$SG167995
	mov	edx, 6
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 571
	xor	eax, eax
	jmp	$LN1@ZenCoreLoa
$LN2@ZenCoreLoa:
; Line 573
	cmp	DWORD PTR IsZenFile$[rsp], 0
	je	SHORT $LN3@ZenCoreLoa
; Line 574
	mov	eax, DWORD PTR FileSize$[rsp]
	mov	DWORD PTR $T1[rsp], eax
	mov	rax, QWORD PTR FileData$[rsp]
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T2[rsp]
	mov	rdx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z ; ZenCoreMaterializeGlyphFont
	mov	ecx, DWORD PTR Success$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Success$[rsp], eax
; Line 575
	mov	eax, DWORD PTR Success$[rsp]
	inc	eax
	mov	DWORD PTR Success$[rsp], eax
; Line 576
	jmp	$LN4@ZenCoreLoa
$LN3@ZenCoreLoa:
; Line 577
	mov	rax, QWORD PTR FileData$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR FileSize$[rsp]
	mov	r8, QWORD PTR CharSet$[rsp]
	mov	rdx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z ; ZenCoreGenerateGlyphFont
	mov	ecx, DWORD PTR Success$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Success$[rsp], eax
; Line 578
	mov	r9, QWORD PTR FileName$[rsp]
	lea	r8, OFFSET FLAT:$SG168000
	mov	edx, 1
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ; ZenCoreGetFontFileName
	mov	r8, rax
	mov	rdx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z ; ZenCoreSerializeGlyphFont
	mov	ecx, DWORD PTR Success$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Success$[rsp], eax
; Line 581
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+104]
	lea	rcx, QWORD PTR PrevAtlas$9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 582
	mov	DWORD PTR [rsp+32], 146			; 00000092H
	mov	r9d, 582				; 00000246H
	lea	r8, OFFSET FLAT:$SG168002
	lea	rdx, OFFSET FLAT:$SG168003
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	xor	r9d, r9d
	mov	rax, QWORD PTR Font$[rsp]
	mov	r8, QWORD PTR [rax+104]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z ; ZenCoreBorrowTextureChronicleCaller
	test	eax, eax
	je	$LN5@ZenCoreLoa
; Line 583
	lea	rdx, QWORD PTR PrevAtlas$9[rsp]
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rax+104]
	call	?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z ; ZenCopyTexture
; Line 584
	mov	DWORD PTR [rsp+32], 147			; 00000093H
	mov	r9d, 584				; 00000248H
	lea	r8, OFFSET FLAT:$SG168004
	lea	rdx, OFFSET FLAT:$SG168005
	lea	rcx, QWORD PTR $T12[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Font$[rsp]
	mov	r8, QWORD PTR [rax+104]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z ; ZenCoreReturnTextureChronicleCaller
$LN5@ZenCoreLoa:
$LN4@ZenCoreLoa:
; Line 587
	mov	rcx, QWORD PTR FileData$[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 588
	mov	eax, DWORD PTR Success$[rsp]
$LN1@ZenCoreLoa:
; Line 589
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreLoadGlyphFontCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenGlyphFont@@PEAHPEBD@Z ENDP ; ZenCoreLoadGlyphFontCaller
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
SizeY$ = 64
Scale$ = 68
Field$ = 72
$T1 = 80
$T2 = 96
Core$ = 144
Font$ = 152
CharSet$ = 160
FileSize$ = 168
FileData$ = 176
?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z PROC ; ZenCoreGenerateGlyphFont
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 904
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 905
	mov	DWORD PTR SizeY$[rsp], 2048		; 00000800H
; Line 906
	mov	eax, DWORD PTR SizeY$[rsp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR Field$[rsp], eax
; Line 907
	mov	DWORD PTR Scale$[rsp], 16
; Line 908
	mov	eax, DWORD PTR FileSize$[rsp]
	mov	DWORD PTR $T1[rsp], eax
	mov	rax, QWORD PTR FileData$[rsp]
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR Scale$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR Field$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR SizeY$[rsp]
	mov	r8, QWORD PTR CharSet$[rsp]
	mov	rdx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGenerateGlyphFontExtended@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHHHHUZenSlice@@@Z ; ZenCoreGenerateGlyphFontExtended
; Line 909
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreGenerateGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@PEAHIPEAX@Z ENDP ; ZenCoreGenerateGlyphFont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Format$ = 48
tv80 = 52
Texture$ = 56
Local$ = 64
$T1 = 72
$T2 = 96
$T3 = 128
$T4 = 160
Core$ = 224
SizeX$ = 232
SizeY$ = 240
?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z PROC ; ZenCoreCreateGlyphFontAtlas
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 540
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 544
	mov	DWORD PTR Format$[rsp], 1
; Line 545
	mov	DWORD PTR [rsp+32], 144			; 00000090H
	mov	r9d, 545				; 00000221H
	lea	r8, OFFSET FLAT:$SG167967
	lea	rdx, OFFSET FLAT:$SG167968
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	ecx, DWORD PTR Format$[rsp]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	imul	eax, DWORD PTR SizeX$[rsp]
	mov	DWORD PTR tv80[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR tv80[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	QWORD PTR Local$[rsp], rax
; Line 546
	mov	rax, QWORD PTR Local$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR SizeY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR SizeX$[rsp]
	mov	r8d, DWORD PTR Format$[rsp]
	mov	edx, 9
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z ; ZenCoreCreateTexture
	mov	QWORD PTR Texture$[rsp], rax
; Line 548
	mov	edx, 170				; 000000aaH
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenFillTexture@@YAXPEAUZenTexture@@I@Z	; ZenFillTexture
; Line 549
	mov	rax, QWORD PTR Texture$[rsp]
; Line 550
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z ENDP ; ZenCoreCreateGlyphFontAtlas
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Lead$ = 32
AdvanceY$ = 40
GlyphIndex$1 = 44
AdvanceX$2 = 48
Size$ = 56
tv67 = 64
tv72 = 68
NextGlyphIndex$3 = 72
KerningX$4 = 76
Glyph$5 = 80
__$ArrayPad$ = 112
Font$ = 160
Flags$ = 168
Limit$ = 176
Scale$ = 184
Count$ = 192
Array$ = 200
Slice$ = 208
?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z PROC ; ZenMarshalGlyphVertexArray
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 473
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 474
	mov	rax, QWORD PTR Font$[rsp]
	movss	xmm0, DWORD PTR Scale$[rsp]
	mulss	xmm0, DWORD PTR [rax+72]
	movss	DWORD PTR AdvanceY$[rsp], xmm0
; Line 475
	xorps	xmm0, xmm0
	movss	DWORD PTR Lead$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR Lead$[rsp+4], xmm0
; Line 476
	xorps	xmm0, xmm0
	movss	DWORD PTR Size$[rsp], xmm0
	cmp	DWORD PTR Count$[rsp], 0
	je	SHORT $LN7@ZenMarshal
	movss	xmm0, DWORD PTR AdvanceY$[rsp]
	movss	DWORD PTR tv67[rsp], xmm0
	jmp	SHORT $LN8@ZenMarshal
$LN7@ZenMarshal:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv67[rsp], xmm0
$LN8@ZenMarshal:
	movss	xmm0, DWORD PTR tv67[rsp]
	movss	DWORD PTR Size$[rsp+4], xmm0
$LN2@ZenMarshal:
; Line 478
	cmp	DWORD PTR Count$[rsp], 0
	je	$LN3@ZenMarshal
; Line 480
	mov	rax, QWORD PTR Slice$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	mov	rax, QWORD PTR Slice$[rsp]
	inc	rax
	mov	QWORD PTR Slice$[rsp], rax
	mov	edx, DWORD PTR tv72[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z ; ZenGetGlyphIndex
	mov	DWORD PTR GlyphIndex$1[rsp], eax
; Line 481
	mov	rax, QWORD PTR Slice$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z ; ZenGetGlyphIndex
	mov	DWORD PTR NextGlyphIndex$3[rsp], eax
; Line 482
	movsxd	rax, DWORD PTR GlyphIndex$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	lea	rdx, QWORD PTR Glyph$5[rsp]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 28
	rep movsb
; Line 484
	mov	rax, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR GlyphIndex$1[rsp]
	imul	ecx, DWORD PTR [rax+84]
	mov	eax, ecx
	add	eax, DWORD PTR NextGlyphIndex$3[rsp]
	cdqe
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR KerningX$4[rsp], xmm0
; Line 485
	movss	xmm0, DWORD PTR Glyph$5[rsp+24]
	addss	xmm0, DWORD PTR KerningX$4[rsp]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR AdvanceX$2[rsp], xmm0
; Line 487
	movss	xmm0, DWORD PTR Lead$[rsp]
	addss	xmm0, DWORD PTR AdvanceX$2[rsp]
	mov	rax, QWORD PTR Limit$[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN4@ZenMarshal
; Line 488
	xorps	xmm0, xmm0
	movss	DWORD PTR Lead$[rsp], xmm0
; Line 489
	xorps	xmm0, xmm0
	movss	DWORD PTR Size$[rsp], xmm0
; Line 490
	movss	xmm0, DWORD PTR Lead$[rsp+4]
	subss	xmm0, DWORD PTR AdvanceY$[rsp]
	movss	DWORD PTR Lead$[rsp+4], xmm0
; Line 491
	movss	xmm0, DWORD PTR Size$[rsp+4]
	addss	xmm0, DWORD PTR AdvanceY$[rsp]
	movss	DWORD PTR Size$[rsp+4], xmm0
$LN4@ZenMarshal:
; Line 493
	movss	xmm0, DWORD PTR Lead$[rsp+4]
	addss	xmm0, DWORD PTR AdvanceY$[rsp]
	mov	rax, QWORD PTR Limit$[rsp]
	comiss	xmm0, DWORD PTR [rax+4]
	jbe	SHORT $LN5@ZenMarshal
; Line 494
	jmp	$LN3@ZenMarshal
$LN5@ZenMarshal:
; Line 496
	mov	rax, QWORD PTR Array$[rsp]
	mov	ecx, DWORD PTR GlyphIndex$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 498
	mov	rax, QWORD PTR Array$[rsp]
	movss	xmm0, DWORD PTR Lead$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 499
	movss	xmm0, DWORD PTR Scale$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR Font$[rsp]
	mulss	xmm0, DWORD PTR [rax+60]
	movss	xmm1, DWORD PTR Lead$[rsp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, DWORD PTR Glyph$5[rsp+20]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR Array$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 501
	movss	xmm0, DWORD PTR Lead$[rsp]
	addss	xmm0, DWORD PTR AdvanceX$2[rsp]
	movss	DWORD PTR Lead$[rsp], xmm0
; Line 502
	movss	xmm0, DWORD PTR Size$[rsp]
	addss	xmm0, DWORD PTR AdvanceX$2[rsp]
	movss	DWORD PTR Size$[rsp], xmm0
; Line 503
	mov	rax, QWORD PTR Array$[rsp]
	add	rax, 12
	mov	QWORD PTR Array$[rsp], rax
; Line 504
	mov	eax, DWORD PTR Count$[rsp]
	dec	eax
	mov	DWORD PTR Count$[rsp], eax
; Line 505
	jmp	$LN2@ZenMarshal
$LN3@ZenMarshal:
; Line 507
	mov	rax, QWORD PTR Limit$[rsp]
	mov	rcx, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 508
	mov	eax, DWORD PTR Count$[rsp]
; Line 509
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z ENDP ; ZenMarshalGlyphVertexArray
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FontFile$ = 48
GlyphBytes$ = 56
TableBytes$ = 60
AtlasBytes$ = 64
FFileSize$ = 68
Success$ = 72
FileArena$ = 80
tv173 = 96
tv171 = 104
tv185 = 112
tv183 = 120
FileSlice$ = 128
AtlasInFile$ = 144
$T1 = 176
$T2 = 192
$T3 = 224
$T4 = 256
$T5 = 272
$T6 = 288
Core$ = 352
Font$ = 360
FileName$ = 368
?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z PROC ; ZenCoreSerializeGlyphFont
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 670
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 673
	mov	rax, QWORD PTR Font$[rsp]
	movsxd	rax, DWORD PTR [rax+84]
	imul	rax, rax, 28
	mov	DWORD PTR GlyphBytes$[rsp], eax
; Line 674
	mov	rax, QWORD PTR Font$[rsp]
	movsxd	rax, DWORD PTR [rax+84]
	shl	rax, 2
	mov	rcx, QWORD PTR Font$[rsp]
	movsxd	rcx, DWORD PTR [rcx+84]
	imul	rax, rcx
	mov	DWORD PTR TableBytes$[rsp], eax
; Line 675
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR AtlasBytes$[rsp], eax
; Line 676
	mov	eax, DWORD PTR GlyphBytes$[rsp]
	mov	ecx, DWORD PTR TableBytes$[rsp]
	lea	rax, QWORD PTR [rax+rcx+92]
	mov	ecx, DWORD PTR AtlasBytes$[rsp]
	add	rax, rcx
	mov	DWORD PTR FFileSize$[rsp], eax
; Line 678
	mov	DWORD PTR [rsp+32], 152			; 00000098H
	mov	r9d, 678				; 000002a6H
	lea	r8, OFFSET FLAT:$SG168074
	lea	rdx, OFFSET FLAT:$SG168075
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR FFileSize$[rsp]
	mov	r8, QWORD PTR Core$[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugFrameSlice
	lea	rcx, QWORD PTR FileSlice$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 679
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR FileSlice$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z ; ZenSliceToEmptyArena
	lea	rcx, QWORD PTR FileArena$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 681
	mov	edx, 92					; 0000005cH
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR FontFile$[rsp], rax
; Line 683
	mov	rdi, QWORD PTR FontFile$[rsp]
	mov	rsi, QWORD PTR Font$[rsp]
	mov	ecx, 36					; 00000024H
	rep movsb
; Line 684
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR FontFile$[rsp]
	lea	rdi, QWORD PTR [rcx+36]
	mov	rsi, rax
	mov	ecx, 20
	rep movsb
; Line 686
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rax+56], ecx
; Line 687
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax+60], ecx
; Line 688
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax+64], ecx
; Line 689
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax+68], ecx
; Line 690
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax+72], ecx
; Line 692
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	mov	ecx, DWORD PTR [rcx+84]
	mov	DWORD PTR [rax+76], ecx
; Line 693
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR GlyphBytes$[rsp]
	mov	DWORD PTR [rax+80], ecx
; Line 694
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR TableBytes$[rsp]
	mov	DWORD PTR [rax+84], ecx
; Line 695
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR AtlasBytes$[rsp]
	mov	DWORD PTR [rax+88], ecx
; Line 696
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv173[rsp], rax
	mov	edx, DWORD PTR GlyphBytes$[rsp]
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR tv171[rsp], rax
	mov	eax, DWORD PTR GlyphBytes$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tv173[rsp]
	mov	rcx, QWORD PTR tv171[rsp]
	call	memcpy
; Line 697
	mov	rax, QWORD PTR Font$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tv185[rsp], rax
	mov	edx, DWORD PTR TableBytes$[rsp]
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR tv183[rsp], rax
	mov	eax, DWORD PTR TableBytes$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tv185[rsp]
	mov	rcx, QWORD PTR tv183[rsp]
	call	memcpy
; Line 699
	mov	rax, QWORD PTR FontFile$[rsp]
	add	rax, 36					; 00000024H
	mov	r8d, 20
	mov	rdx, rax
	lea	rcx, QWORD PTR AtlasInFile$[rsp]
	call	memcpy
; Line 700
	mov	eax, DWORD PTR AtlasInFile$[rsp+16]
	imul	eax, DWORD PTR AtlasInFile$[rsp+8]
	mov	edx, eax
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR AtlasInFile$[rsp+24], rax
; Line 701
	mov	rax, QWORD PTR Font$[rsp]
	mov	rdx, QWORD PTR [rax+104]
	lea	rcx, QWORD PTR AtlasInFile$[rsp]
	call	?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z ; ZenCopyTexture
; Line 702
	mov	r8, QWORD PTR FileName$[rsp]
	mov	rdx, QWORD PTR FileSlice$[rsp+8]
	mov	ecx, DWORD PTR FileSlice$[rsp]
	call	?WriteFileData@@YAIIPEAXPEBD@Z		; WriteFileData
	mov	DWORD PTR Success$[rsp], eax
; Line 703
	mov	eax, DWORD PTR Success$[rsp]
; Line 704
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreSerializeGlyphFont@@YAHPEAUZenCore@@PEBUZenGlyphFont@@PEBD@Z ENDP ; ZenCoreSerializeGlyphFont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FontFile$ = 48
MetalToPixel$ = 56
ArraySize$ = 60
TableSize$ = 64
AtlasSize$ = 68
FileArena$ = 72
GlyphMemory$ = 88
TableMemory$ = 96
AtlasMemory$ = 104
$T1 = 112
AtlasInFile$ = 128
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
$T7 = 320
$T8 = 352
$T9 = 384
$T10 = 416
$T11 = 432
$T12 = 456
$T13 = 480
$T14 = 504
Core$ = 560
Font$ = 568
File$ = 576
?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z PROC ; ZenCoreMaterializeGlyphFont
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 612
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 536				; 00000218H
; Line 614
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR File$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z ; ZenSliceToEmptyArena
	lea	rcx, QWORD PTR FileArena$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 616
	mov	edx, 92					; 0000005cH
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR FontFile$[rsp], rax
; Line 618
	mov	rax, QWORD PTR FontFile$[rsp]
	movsxd	rax, DWORD PTR [rax+76]
	imul	rax, rax, 28
	mov	DWORD PTR ArraySize$[rsp], eax
; Line 619
	mov	rax, QWORD PTR FontFile$[rsp]
	movsxd	rax, DWORD PTR [rax+76]
	shl	rax, 2
	mov	rcx, QWORD PTR FontFile$[rsp]
	movsxd	rcx, DWORD PTR [rcx+76]
	imul	rax, rcx
	mov	DWORD PTR TableSize$[rsp], eax
; Line 620
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	rcx, QWORD PTR FontFile$[rsp]
	mov	eax, DWORD PTR [rax+52]
	imul	eax, DWORD PTR [rcx+44]
	mov	DWORD PTR AtlasSize$[rsp], eax
; Line 622
	mov	edx, DWORD PTR ArraySize$[rsp]
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR GlyphMemory$[rsp], rax
; Line 623
	mov	edx, DWORD PTR TableSize$[rsp]
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR TableMemory$[rsp], rax
; Line 624
	mov	edx, DWORD PTR AtlasSize$[rsp]
	lea	rcx, QWORD PTR FileArena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR AtlasMemory$[rsp], rax
; Line 626
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+56]
	mov	rax, QWORD PTR FontFile$[rsp]
	mulss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR MetalToPixel$[rsp], xmm0
; Line 628
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	mov	DWORD PTR [rax+36], ecx
; Line 629
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR [rcx+60]
	mov	DWORD PTR [rax+40], ecx
; Line 630
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR [rcx+64]
	mov	DWORD PTR [rax+44], ecx
; Line 631
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR [rcx+68]
	mov	DWORD PTR [rax+48], ecx
; Line 632
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR FontFile$[rsp]
	mov	ecx, DWORD PTR [rcx+72]
	mov	DWORD PTR [rax+52], ecx
; Line 635
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+56], xmm0
; Line 636
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+8]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+60], xmm0
; Line 637
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+12]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+64], xmm0
; Line 638
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+16]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+68], xmm0
; Line 639
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+20]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Font$[rsp]
	movss	DWORD PTR [rax+72], xmm0
; Line 640
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+28]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, 4095				; 00000fffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+76], eax
; Line 641
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+32]
	movss	xmm1, DWORD PTR MetalToPixel$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR FontFile$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+60]
	divss	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	ecx, 4095				; 00000fffH
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	rcx, QWORD PTR Font$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 644
	mov	DWORD PTR [rsp+32], 148			; 00000094H
	mov	r9d, 644				; 00000284H
	lea	r8, OFFSET FLAT:$SG168043
	lea	rdx, OFFSET FLAT:$SG168044
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR ArraySize$[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+88], rax
; Line 645
	mov	DWORD PTR [rsp+32], 149			; 00000095H
	mov	r9d, 645				; 00000285H
	lea	r8, OFFSET FLAT:$SG168045
	lea	rdx, OFFSET FLAT:$SG168046
	lea	rcx, QWORD PTR $T12[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR TableSize$[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+96], rax
; Line 647
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	r8d, DWORD PTR [rax+44]
	mov	rax, QWORD PTR FontFile$[rsp]
	mov	edx, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreCreateGlyphFontAtlas@@YAPEAUZenTexture@@PEAUZenCore@@HH@Z ; ZenCoreCreateGlyphFontAtlas
	mov	rcx, QWORD PTR Font$[rsp]
	mov	QWORD PTR [rcx+104], rax
; Line 649
	mov	eax, DWORD PTR ArraySize$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR GlyphMemory$[rsp]
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rax+88]
	call	memcpy
; Line 650
	mov	eax, DWORD PTR TableSize$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR TableMemory$[rsp]
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rax+96]
	call	memcpy
; Line 654
	mov	rax, QWORD PTR FontFile$[rsp]
	add	rax, 36					; 00000024H
	mov	r8d, 20
	mov	rdx, rax
	lea	rcx, QWORD PTR AtlasInFile$[rsp]
	call	memcpy
; Line 655
	mov	rax, QWORD PTR AtlasMemory$[rsp]
	mov	QWORD PTR AtlasInFile$[rsp+24], rax
; Line 658
	mov	DWORD PTR [rsp+32], 150			; 00000096H
	mov	r9d, 658				; 00000292H
	lea	r8, OFFSET FLAT:$SG168048
	lea	rdx, OFFSET FLAT:$SG168049
	lea	rcx, QWORD PTR $T13[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	xor	r9d, r9d
	mov	rax, QWORD PTR Font$[rsp]
	mov	r8, QWORD PTR [rax+104]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z ; ZenCoreBorrowTextureChronicleCaller
	test	eax, eax
	je	$LN2@ZenCoreMat
; Line 659
	lea	rdx, QWORD PTR AtlasInFile$[rsp]
	mov	rax, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rax+104]
	call	?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z ; ZenCopyTexture
; Line 660
	mov	DWORD PTR [rsp+32], 151			; 00000097H
	mov	r9d, 660				; 00000294H
	lea	r8, OFFSET FLAT:$SG168050
	lea	rdx, OFFSET FLAT:$SG168051
	lea	rcx, QWORD PTR $T14[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Font$[rsp]
	mov	r8, QWORD PTR [rax+104]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z ; ZenCoreReturnTextureChronicleCaller
$LN2@ZenCoreMat:
; Line 664
	mov	eax, 1
; Line 665
	add	rsp, 536				; 00000218H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreMaterializeGlyphFont@@YAHPEAUZenCore@@PEAUZenGlyphFont@@UZenSlice@@@Z ENDP ; ZenCoreMaterializeGlyphFont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Font$ = 48
Code$ = 56
?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z PROC	; ZenGetGlyphIndex
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 447
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 449
	cmp	DWORD PTR Code$[rsp], 32		; 00000020H
	jl	SHORT $LN2@ZenGetGlyp
	cmp	DWORD PTR Code$[rsp], 127		; 0000007fH
	jg	SHORT $LN2@ZenGetGlyp
	mov	eax, DWORD PTR Code$[rsp]
	sub	eax, 32					; 00000020H
	jmp	SHORT $LN1@ZenGetGlyp
$LN2@ZenGetGlyp:
; Line 450
	cmp	DWORD PTR Code$[rsp], 128		; 00000080H
	jl	SHORT $LN3@ZenGetGlyp
	cmp	DWORD PTR Code$[rsp], 255		; 000000ffH
	jg	SHORT $LN3@ZenGetGlyp
	mov	eax, DWORD PTR Code$[rsp]
	sub	eax, 128				; 00000080H
	jmp	SHORT $LN1@ZenGetGlyp
$LN3@ZenGetGlyp:
; Line 451
	mov	edx, 63					; 0000003fH
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z ; ZenGetGlyphIndex
$LN1@ZenGetGlyp:
; Line 452
	add	rsp, 40					; 00000028H
	ret	0
?ZenGetGlyphIndex@@YAHPEAUZenGlyphFont@@H@Z ENDP	; ZenGetGlyphIndex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 32
I$2 = 36
CharSetSize$ = 40
IsCustom$ = 44
ASCII_CHARSET_LENGTH$ = 48
ASCII_CHARSET_LENGTH_EXTENDED$ = 52
CharSet$ = 56
Format$ = 80
?ZenCharSet@@YAPEAHPEBD@Z PROC				; ZenCharSet
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 407
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	DWORD PTR ASCII_CHARSET_LENGTH$[rsp], 95 ; 0000005fH
; Line 408
	mov	DWORD PTR ASCII_CHARSET_LENGTH_EXTENDED$[rsp], 127 ; 0000007fH
; Line 410
	mov	DWORD PTR IsCustom$[rsp], 0
; Line 412
	cmp	QWORD PTR Format$[rsp], 0
	je	SHORT $LN13@ZenCharSet
	lea	rdx, OFFSET FLAT:$SG167895
	mov	rcx, QWORD PTR Format$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN11@ZenCharSet
$LN13@ZenCharSet:
; Line 413
	mov	DWORD PTR CharSetSize$[rsp], 95		; 0000005fH
; Line 414
	jmp	SHORT $LN12@ZenCharSet
$LN11@ZenCharSet:
; Line 415
	lea	rdx, OFFSET FLAT:$SG167898
	mov	rcx, QWORD PTR Format$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN14@ZenCharSet
; Line 416
	mov	DWORD PTR CharSetSize$[rsp], 222	; 000000deH
; Line 417
	jmp	SHORT $LN15@ZenCharSet
$LN14@ZenCharSet:
; Line 418
	mov	rcx, QWORD PTR Format$[rsp]
	call	strlen
	mov	DWORD PTR CharSetSize$[rsp], eax
; Line 419
	mov	DWORD PTR IsCustom$[rsp], 1
$LN15@ZenCharSet:
$LN12@ZenCharSet:
; Line 422
	mov	eax, DWORD PTR CharSetSize$[rsp]
	inc	eax
	cdqe
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR CharSet$[rsp], rax
; Line 423
	mov	rax, QWORD PTR CharSet$[rsp]
	mov	ecx, DWORD PTR CharSetSize$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR CharSet$[rsp]
	add	rax, 4
	mov	QWORD PTR CharSet$[rsp], rax
; Line 425
	cmp	DWORD PTR IsCustom$[rsp], 0
	je	SHORT $LN16@ZenCharSet
; Line 426
	mov	DWORD PTR I$2[rsp], 0
	jmp	SHORT $LN4@ZenCharSet
$LN2@ZenCharSet:
	mov	eax, DWORD PTR I$2[rsp]
	inc	eax
	mov	DWORD PTR I$2[rsp], eax
$LN4@ZenCharSet:
	mov	eax, DWORD PTR CharSetSize$[rsp]
	cmp	DWORD PTR I$2[rsp], eax
	jge	SHORT $LN3@ZenCharSet
; Line 427
	movsxd	rax, DWORD PTR I$2[rsp]
	mov	ecx, DWORD PTR I$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	r8, QWORD PTR CharSet$[rsp]
	mov	eax, DWORD PTR [r8+rax*4]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 428
	mov	eax, DWORD PTR I$2[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rcx+rax*4], 0
; Line 429
	jmp	SHORT $LN2@ZenCharSet
$LN3@ZenCharSet:
; Line 430
	jmp	$LN17@ZenCharSet
$LN16@ZenCharSet:
; Line 431
	mov	DWORD PTR I$1[rsp], 0
; Line 432
	jmp	SHORT $LN7@ZenCharSet
$LN5@ZenCharSet:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN7@ZenCharSet:
	cmp	DWORD PTR I$1[rsp], 95			; 0000005fH
	jge	SHORT $LN6@ZenCharSet
; Line 433
	mov	eax, DWORD PTR I$1[rsp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR I$1[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 434
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rcx+rax*4], 0
; Line 435
	jmp	SHORT $LN5@ZenCharSet
$LN6@ZenCharSet:
; Line 436
	jmp	SHORT $LN10@ZenCharSet
$LN8@ZenCharSet:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN10@ZenCharSet:
	mov	eax, DWORD PTR CharSetSize$[rsp]
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN9@ZenCharSet
; Line 437
	mov	eax, DWORD PTR I$1[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR I$1[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 438
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rcx+rax*4], 0
; Line 439
	jmp	SHORT $LN8@ZenCharSet
$LN9@ZenCharSet:
$LN17@ZenCharSet:
; Line 441
	mov	rax, QWORD PTR CharSet$[rsp]
; Line 442
	add	rsp, 72					; 00000048H
	ret	0
?ZenCharSet@@YAPEAHPEBD@Z ENDP				; ZenCharSet
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
NewFileName$ = 32
Core$ = 64
FileName$ = 72
IsZen$ = 80
?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z PROC ; ZenCoreFindFontFile
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 375
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 382
	mov	rax, QWORD PTR IsZen$[rsp]
	mov	DWORD PTR [rax], 0
; Line 385
	mov	r9, QWORD PTR FileName$[rsp]
	lea	r8, OFFSET FLAT:$SG167859
	mov	edx, 1
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ; ZenCoreGetFontFileName
	mov	QWORD PTR NewFileName$[rsp], rax
	mov	rcx, QWORD PTR NewFileName$[rsp]
	call	?FileExists@@YAHPEBD@Z			; FileExists
	test	eax, eax
	je	SHORT $LN2@ZenCoreFin
; Line 387
	mov	rax, QWORD PTR IsZen$[rsp]
	mov	DWORD PTR [rax], 1
; Line 389
	mov	rax, QWORD PTR NewFileName$[rsp]
	jmp	$LN1@ZenCoreFin
; Line 390
	jmp	$LN3@ZenCoreFin
$LN2@ZenCoreFin:
; Line 391
	mov	r9, QWORD PTR FileName$[rsp]
	lea	r8, OFFSET FLAT:$SG167863
	mov	edx, 1
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ; ZenCoreGetFontFileName
	mov	QWORD PTR NewFileName$[rsp], rax
	mov	rcx, QWORD PTR NewFileName$[rsp]
	call	?FileExists@@YAHPEBD@Z			; FileExists
	test	eax, eax
	jne	SHORT $LN6@ZenCoreFin
	mov	r9, QWORD PTR FileName$[rsp]
	lea	r8, OFFSET FLAT:$SG167864
	mov	edx, 1
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ; ZenCoreGetFontFileName
	mov	QWORD PTR NewFileName$[rsp], rax
	mov	rcx, QWORD PTR NewFileName$[rsp]
	call	?FileExists@@YAHPEBD@Z			; FileExists
	test	eax, eax
	je	SHORT $LN4@ZenCoreFin
$LN6@ZenCoreFin:
; Line 394
	mov	rax, QWORD PTR NewFileName$[rsp]
	jmp	SHORT $LN1@ZenCoreFin
; Line 395
	jmp	SHORT $LN5@ZenCoreFin
$LN4@ZenCoreFin:
; Line 396
	mov	r9, QWORD PTR FileName$[rsp]
	lea	r8, OFFSET FLAT:$SG167867
	xor	edx, edx
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ; ZenCoreGetFontFileName
	mov	QWORD PTR NewFileName$[rsp], rax
	mov	rcx, QWORD PTR NewFileName$[rsp]
	call	?FileExists@@YAHPEBD@Z			; FileExists
	test	eax, eax
	jne	SHORT $LN8@ZenCoreFin
	mov	r9, QWORD PTR FileName$[rsp]
	lea	r8, OFFSET FLAT:$SG167868
	xor	edx, edx
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ; ZenCoreGetFontFileName
	mov	QWORD PTR NewFileName$[rsp], rax
	mov	rcx, QWORD PTR NewFileName$[rsp]
	call	?FileExists@@YAHPEBD@Z			; FileExists
	test	eax, eax
	je	SHORT $LN7@ZenCoreFin
$LN8@ZenCoreFin:
; Line 399
	mov	rax, QWORD PTR NewFileName$[rsp]
	jmp	SHORT $LN1@ZenCoreFin
$LN7@ZenCoreFin:
$LN5@ZenCoreFin:
$LN3@ZenCoreFin:
; Line 401
	xor	eax, eax
$LN1@ZenCoreFin:
; Line 402
	add	rsp, 56					; 00000038H
	ret	0
?ZenCoreFindFontFile@@YAPEBDPEAUZenCore@@PEBDPEAH@Z ENDP ; ZenCoreFindFontFile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Core$ = 48
Local$ = 56
Extension$ = 64
FileName$ = 72
?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z PROC ; ZenCoreGetFontFileName
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 357
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 358
	cmp	DWORD PTR Local$[rsp], 0
	je	SHORT $LN2@ZenCoreGet
	mov	r8, QWORD PTR Extension$[rsp]
	mov	rdx, QWORD PTR FileName$[rsp]
	lea	rcx, OFFSET FLAT:$SG167841
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	jmp	SHORT $LN1@ZenCoreGet
$LN2@ZenCoreGet:
; Line 360
	mov	r8, QWORD PTR Extension$[rsp]
	mov	rdx, QWORD PTR FileName$[rsp]
	lea	rcx, OFFSET FLAT:$SG167842
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
$LN1@ZenCoreGet:
; Line 361
	add	rsp, 40					; 00000028H
	ret	0
?ZenCoreGetFontFileName@@YAPEBDPEAUZenCore@@HPEBD1@Z ENDP ; ZenCoreGetFontFileName
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
Normal$3 = 56
tv83 = 60
tv81 = 64
tv128 = 68
tv94 = 72
tv141 = 76
tv139 = 80
tv154 = 84
tv152 = 88
tv200 = 92
tv210 = 96
Sample$4 = 100
sdf_dist$5 = 104
AtlasTexel$6 = 112
Pixel$7 = 120
Float$ = 128
Loca$ = 144
MinMax$ = 160
__$ArrayPad$ = 176
Core$ = 224
Surface$ = 232
P$ = 240
S$ = 248
Atlas$ = 256
Glyph$ = 264
?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z PROC ; ZenSoftRasterizeSDFGlyph
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 307
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 309
	lea	rax, QWORD PTR Loca$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Glyph$[rsp]
	mov	ecx, 16
	rep movsb
; Line 312
	movss	xmm0, DWORD PTR P$[rsp]
	movss	DWORD PTR Float$[rsp], xmm0
; Line 313
	movss	xmm0, DWORD PTR P$[rsp+4]
	movss	DWORD PTR Float$[rsp+4], xmm0
; Line 314
	cvtsi2ss xmm0, DWORD PTR Loca$[rsp+8]
	movss	xmm1, DWORD PTR S$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR P$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Float$[rsp+8], xmm0
; Line 315
	cvtsi2ss xmm0, DWORD PTR Loca$[rsp+12]
	movss	xmm1, DWORD PTR S$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR P$[rsp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Float$[rsp+12], xmm0
; Line 319
	mov	rax, QWORD PTR Surface$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv83[rsp], xmm0
	movss	xmm0, DWORD PTR Float$[rsp]
	call	QWORD PTR __imp_floorf
	movss	DWORD PTR tv81[rsp], xmm0
	movss	xmm2, DWORD PTR tv83[rsp]
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR tv81[rsp]
	call	?zen_clamp@@YAMMMM@Z			; zen_clamp
	cvttss2si eax, xmm0
	mov	DWORD PTR MinMax$[rsp], eax
; Line 320
	mov	rax, QWORD PTR Surface$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR tv128[rsp], xmm0
	movss	xmm0, DWORD PTR Float$[rsp+4]
	call	QWORD PTR __imp_floorf
	movss	DWORD PTR tv94[rsp], xmm0
	movss	xmm2, DWORD PTR tv128[rsp]
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR tv94[rsp]
	call	?zen_clamp@@YAMMMM@Z			; zen_clamp
	cvttss2si eax, xmm0
	mov	DWORD PTR MinMax$[rsp+4], eax
; Line 321
	mov	rax, QWORD PTR Surface$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv141[rsp], xmm0
	movss	xmm0, DWORD PTR Float$[rsp+8]
	call	QWORD PTR __imp_ceilf
	movss	DWORD PTR tv139[rsp], xmm0
	movss	xmm2, DWORD PTR tv141[rsp]
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR tv139[rsp]
	call	?zen_clamp@@YAMMMM@Z			; zen_clamp
	cvttss2si eax, xmm0
	mov	DWORD PTR MinMax$[rsp+8], eax
; Line 322
	mov	rax, QWORD PTR Surface$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR tv154[rsp], xmm0
	movss	xmm0, DWORD PTR Float$[rsp+12]
	call	QWORD PTR __imp_ceilf
	movss	DWORD PTR tv152[rsp], xmm0
	movss	xmm2, DWORD PTR tv154[rsp]
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR tv152[rsp]
	call	?zen_clamp@@YAMMMM@Z			; zen_clamp
	cvttss2si eax, xmm0
	mov	DWORD PTR MinMax$[rsp+12], eax
; Line 324
	mov	eax, DWORD PTR MinMax$[rsp+4]
	mov	DWORD PTR Y$1[rsp], eax
	jmp	SHORT $LN4@ZenSoftRas
$LN2@ZenSoftRas:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenSoftRas:
	mov	eax, DWORD PTR MinMax$[rsp+12]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	$LN3@ZenSoftRas
	mov	eax, DWORD PTR MinMax$[rsp]
	mov	DWORD PTR X$2[rsp], eax
	jmp	SHORT $LN7@ZenSoftRas
$LN5@ZenSoftRas:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenSoftRas:
	mov	eax, DWORD PTR MinMax$[rsp+8]
	cmp	DWORD PTR X$2[rsp], eax
	jge	$LN6@ZenSoftRas
; Line 326
	mov	eax, DWORD PTR Loca$[rsp+8]
	mov	ecx, DWORD PTR Loca$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR Loca$[rsp]
	cvtsi2ss xmm2, DWORD PTR X$2[rsp]
	movss	DWORD PTR tv200[rsp], xmm2
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR Float$[rsp+8]
	movss	xmm1, DWORD PTR Float$[rsp]
	movss	xmm0, DWORD PTR tv200[rsp]
	call	?zen_lmap@@YAMMMMMM@Z			; zen_lmap
	movss	DWORD PTR AtlasTexel$6[rsp], xmm0
; Line 327
	mov	eax, DWORD PTR Loca$[rsp+12]
	mov	ecx, DWORD PTR Loca$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR Loca$[rsp+4]
	cvtsi2ss xmm2, DWORD PTR Y$1[rsp]
	movss	DWORD PTR tv210[rsp], xmm2
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR Float$[rsp+12]
	movss	xmm1, DWORD PTR Float$[rsp+4]
	movss	xmm0, DWORD PTR tv210[rsp]
	call	?zen_lmap@@YAMMMMMM@Z			; zen_lmap
	movss	DWORD PTR AtlasTexel$6[rsp+4], xmm0
; Line 329
	mov	rdx, QWORD PTR AtlasTexel$6[rsp]
	mov	rcx, QWORD PTR Atlas$[rsp]
	call	?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z ; ZenBilinearSampleTexture8
	movss	DWORD PTR Sample$4[rsp], xmm0
; Line 331
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@bf000000
	movss	xmm2, DWORD PTR __real@437f0000
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR Sample$4[rsp]
	call	?zen_lmap@@YAMMMMMM@Z			; zen_lmap
	movss	DWORD PTR sdf_dist$5[rsp], xmm0
; Line 332
	movss	xmm0, DWORD PTR sdf_dist$5[rsp]
	mulss	xmm0, DWORD PTR __real@41000000
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm1
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@80000000
	call	?zen_lmap@@YAMMMMMM@Z			; zen_lmap
	movss	DWORD PTR Normal$3[rsp], xmm0
; Line 334
	movss	xmm0, DWORD PTR Normal$3[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN8@ZenSoftRas
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Normal$3[rsp], xmm0
$LN8@ZenSoftRas:
; Line 335
	movss	xmm0, DWORD PTR Normal$3[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@ZenSoftRas
; Line 336
	mov	r8d, DWORD PTR Y$1[rsp]
	mov	edx, DWORD PTR X$2[rsp]
	mov	rcx, QWORD PTR Surface$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	mov	QWORD PTR Pixel$7[rsp], rax
; Line 339
	mov	rax, QWORD PTR Pixel$7[rsp]
	movzx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	movss	xmm2, DWORD PTR __real@437f0000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR Normal$3[rsp]
	call	?zen_lerp@@YAMMMM@Z			; zen_lerp
	movss	xmm1, DWORD PTR __real@3f000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR Pixel$7[rsp]
	mov	BYTE PTR [rcx], al
$LN9@ZenSoftRas:
; Line 341
	jmp	$LN5@ZenSoftRas
$LN6@ZenSoftRas:
	jmp	$LN2@ZenSoftRas
$LN3@ZenSoftRas:
; Line 342
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?ZenSoftRasterizeSDFGlyph@@YAXPEAUZenCore@@PEAUZenTexture@@Uf32x2@@M1PEAUZenGlyph@@@Z ENDP ; ZenSoftRasterizeSDFGlyph
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
DstRegion$ = 80
SrcRegion$ = 96
__$ArrayPad$ = 112
Src$ = 160
Dst$ = 168
Field$ = 176
?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z PROC	; ZenApplyTextureSDF
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 295
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 296
	mov	DWORD PTR SrcRegion$[rsp], 0
	mov	DWORD PTR SrcRegion$[rsp+4], 0
	mov	rax, QWORD PTR Src$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR SrcRegion$[rsp+8], eax
	mov	rax, QWORD PTR Src$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR SrcRegion$[rsp+12], eax
; Line 297
	mov	DWORD PTR DstRegion$[rsp], 0
	mov	DWORD PTR DstRegion$[rsp+4], 0
	mov	rax, QWORD PTR Dst$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR DstRegion$[rsp+8], eax
	mov	rax, QWORD PTR Dst$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR DstRegion$[rsp+12], eax
; Line 298
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR DstRegion$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR SrcRegion$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR Field$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR Dst$[rsp]
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR Src$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z ; ZenComputeGlyphSDF
; Line 299
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?ZenApplyTextureSDF@@YAXPEAUZenTexture@@0H@Z ENDP	; ZenApplyTextureSDF
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
Q$3 = 56
RY$4 = 60
RX$5 = 64
UpscaleX$ = 68
UpscaleY$ = 72
DS$6 = 76
RP$7 = 80
LP$8 = 88
LI$ = 112
L$ = 120
RI$ = 128
R$ = 136
Field$ = 144
?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z PROC ; ZenComputeGlyphSDF
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 275
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR RI$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR LI$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	divss	xmm0, xmm1
	movss	DWORD PTR UpscaleX$[rsp], xmm0
; Line 276
	mov	rax, QWORD PTR RI$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+12]
	mov	rax, QWORD PTR LI$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+12]
	divss	xmm0, xmm1
	movss	DWORD PTR UpscaleY$[rsp], xmm0
; Line 277
	mov	DWORD PTR Y$1[rsp], 0
	jmp	SHORT $LN4@ZenCompute
$LN2@ZenCompute:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenCompute:
	mov	rax, QWORD PTR LI$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	$LN3@ZenCompute
; Line 278
	mov	DWORD PTR X$2[rsp], 0
	jmp	SHORT $LN7@ZenCompute
$LN5@ZenCompute:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenCompute:
	mov	rax, QWORD PTR LI$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR X$2[rsp], eax
	jge	$LN6@ZenCompute
; Line 279
	cvtsi2ss xmm0, DWORD PTR X$2[rsp]
	movss	xmm1, DWORD PTR UpscaleX$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR RI$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	rcx, QWORD PTR RI$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	DWORD PTR RX$5[rsp], eax
; Line 280
	cvtsi2ss xmm0, DWORD PTR Y$1[rsp]
	movss	xmm1, DWORD PTR UpscaleY$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR RI$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?ZenSensitiveCeil32@@YAHHM@Z		; ZenSensitiveCeil32
	mov	rcx, QWORD PTR RI$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR RY$4[rsp], eax
; Line 281
	mov	r9d, DWORD PTR Field$[rsp]
	mov	r8d, DWORD PTR RY$4[rsp]
	mov	edx, DWORD PTR RX$5[rsp]
	mov	rcx, QWORD PTR R$[rsp]
	call	?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z ; ZenFindNearestPixelOfOppositeState
	mov	DWORD PTR DS$6[rsp], eax
; Line 282
	mov	eax, DWORD PTR DS$6[rsp]
	cvtsi2ss xmm0, rax
	call	QWORD PTR __imp_sqrtf
	movss	DWORD PTR Q$3[rsp], xmm0
; Line 283
	mov	r8d, DWORD PTR RY$4[rsp]
	mov	edx, DWORD PTR RX$5[rsp]
	mov	rcx, QWORD PTR R$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR RP$7[rsp], eax
; Line 284
	cmp	DWORD PTR RP$7[rsp], 0
	jne	SHORT $LN8@ZenCompute
	movss	xmm0, DWORD PTR Q$3[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR Q$3[rsp], xmm0
$LN8@ZenCompute:
; Line 285
	mov	rax, QWORD PTR LI$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR Y$1[rsp]
	mov	rcx, QWORD PTR LI$[rsp]
	mov	ecx, DWORD PTR [rcx]
	add	ecx, DWORD PTR X$2[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR L$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	mov	QWORD PTR LP$8[rsp], rax
; Line 286
	cvtsi2ss xmm0, DWORD PTR Field$[rsp]
	mov	eax, DWORD PTR Field$[rsp]
	neg	eax
	cvtsi2ss xmm1, eax
	movss	xmm2, DWORD PTR __real@437f0000
	movss	DWORD PTR [rsp+32], xmm2
	xorps	xmm3, xmm3
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR Q$3[rsp]
	call	?zen_lmap@@YAMMMMMM@Z			; zen_lmap
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR LP$8[rsp]
	mov	BYTE PTR [rcx], al
; Line 287
	jmp	$LN5@ZenCompute
$LN6@ZenCompute:
; Line 288
	jmp	$LN2@ZenCompute
$LN3@ZenCompute:
; Line 289
	mov	eax, 1
; Line 290
	add	rsp, 104				; 00000068H
	ret	0
?ZenComputeGlyphSDF@@YAHTi32x4@@PEAUZenTexture@@01H@Z ENDP ; ZenComputeGlyphSDF
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
MinDS$ = 56
D$3 = 60
DX$4 = 64
DY$5 = 68
DS$6 = 72
tv90 = 76
tv129 = 80
MaxDS$ = 84
Pixel$7 = 88
Root$ = 92
$T8 = 96
$T9 = 112
Area$ = 128
$T10 = 144
__$ArrayPad$ = 160
T$ = 208
RootX$ = 216
RootY$ = 224
Rad$ = 232
?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z PROC ; ZenFindNearestPixelOfOppositeState
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 206
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 207
	mov	eax, DWORD PTR Rad$[rsp]
	mov	ecx, DWORD PTR RootY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR Rad$[rsp]
	mov	edx, DWORD PTR RootX$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR Rad$[rsp]
	mov	r8d, DWORD PTR RootY$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR Rad$[rsp]
	mov	r9d, DWORD PTR RootX$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	mov	rdx, QWORD PTR T$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z ; ZenRectifyTextureArea
	lea	rcx, QWORD PTR Area$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 210
	mov	rax, QWORD PTR T$[rsp]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR RootY$[rsp]
	add	eax, DWORD PTR RootX$[rsp]
	cdqe
	mov	rcx, QWORD PTR T$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR Root$[rsp], eax
; Line 211
	mov	eax, DWORD PTR Rad$[rsp]
	imul	eax, DWORD PTR Rad$[rsp]
	mov	DWORD PTR MaxDS$[rsp], eax
; Line 212
	mov	eax, DWORD PTR MaxDS$[rsp]
	mov	DWORD PTR MinDS$[rsp], eax
; Line 214
	mov	eax, DWORD PTR Area$[rsp+4]
	mov	DWORD PTR Y$1[rsp], eax
	jmp	SHORT $LN4@ZenFindNea
$LN2@ZenFindNea:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenFindNea:
	mov	eax, DWORD PTR Area$[rsp+12]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	$LN3@ZenFindNea
; Line 215
	mov	eax, DWORD PTR RootY$[rsp]
	cmp	DWORD PTR Y$1[rsp], eax
	jle	SHORT $LN13@ZenFindNea
	mov	eax, DWORD PTR RootY$[rsp]
	mov	ecx, DWORD PTR Y$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv90[rsp], eax
	jmp	SHORT $LN14@ZenFindNea
$LN13@ZenFindNea:
	mov	eax, DWORD PTR Y$1[rsp]
	mov	ecx, DWORD PTR RootY$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv90[rsp], eax
$LN14@ZenFindNea:
	mov	eax, DWORD PTR tv90[rsp]
	mov	DWORD PTR DY$5[rsp], eax
; Line 216
	mov	eax, DWORD PTR MinDS$[rsp]
	cmp	DWORD PTR DY$5[rsp], eax
	jbe	SHORT $LN8@ZenFindNea
	jmp	SHORT $LN2@ZenFindNea
$LN8@ZenFindNea:
; Line 217
	mov	eax, DWORD PTR Area$[rsp]
	mov	DWORD PTR X$2[rsp], eax
	jmp	SHORT $LN7@ZenFindNea
$LN5@ZenFindNea:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenFindNea:
	mov	eax, DWORD PTR Area$[rsp+8]
	cmp	DWORD PTR X$2[rsp], eax
	jge	$LN6@ZenFindNea
; Line 218
	mov	eax, DWORD PTR RootX$[rsp]
	cmp	DWORD PTR X$2[rsp], eax
	jle	SHORT $LN15@ZenFindNea
	mov	eax, DWORD PTR RootX$[rsp]
	mov	ecx, DWORD PTR X$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv129[rsp], eax
	jmp	SHORT $LN16@ZenFindNea
$LN15@ZenFindNea:
	mov	eax, DWORD PTR X$2[rsp]
	mov	ecx, DWORD PTR RootX$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv129[rsp], eax
$LN16@ZenFindNea:
	mov	eax, DWORD PTR tv129[rsp]
	mov	DWORD PTR DX$4[rsp], eax
; Line 219
	mov	eax, DWORD PTR MinDS$[rsp]
	cmp	DWORD PTR DX$4[rsp], eax
	jbe	SHORT $LN9@ZenFindNea
	jmp	SHORT $LN5@ZenFindNea
$LN9@ZenFindNea:
; Line 220
	mov	eax, DWORD PTR DX$4[rsp]
	imul	eax, DWORD PTR DX$4[rsp]
	mov	ecx, DWORD PTR DY$5[rsp]
	imul	ecx, DWORD PTR DY$5[rsp]
	add	eax, ecx
	mov	DWORD PTR DS$6[rsp], eax
; Line 221
	mov	eax, DWORD PTR MinDS$[rsp]
	cmp	DWORD PTR DS$6[rsp], eax
	jae	$LN10@ZenFindNea
; Line 222
	mov	r8d, DWORD PTR Y$1[rsp]
	mov	edx, DWORD PTR X$2[rsp]
	mov	rcx, QWORD PTR T$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR Pixel$7[rsp], eax
; Line 223
	mov	eax, DWORD PTR Pixel$7[rsp]
	cmp	DWORD PTR Root$[rsp], eax
	je	$LN11@ZenFindNea
; Line 224
	mov	eax, DWORD PTR DS$6[rsp]
	cvtsi2ss xmm0, rax
	call	QWORD PTR __imp_sqrtf
	call	QWORD PTR __imp_ceilf
	cvttss2si eax, xmm0
	mov	DWORD PTR D$3[rsp], eax
; Line 225
	mov	eax, DWORD PTR D$3[rsp]
	mov	ecx, DWORD PTR RootY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR D$3[rsp]
	mov	edx, DWORD PTR RootX$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR D$3[rsp]
	mov	edi, DWORD PTR RootY$[rsp]
	sub	edi, edx
	mov	edx, edi
	mov	edi, DWORD PTR D$3[rsp]
	mov	esi, DWORD PTR RootX$[rsp]
	sub	esi, edi
	mov	edi, esi
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	mov	r8d, edi
	mov	rdx, QWORD PTR T$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z ; ZenRectifyTextureArea
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR Area$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 227
	mov	eax, DWORD PTR DS$6[rsp]
	mov	DWORD PTR MinDS$[rsp], eax
$LN11@ZenFindNea:
$LN10@ZenFindNea:
; Line 230
	jmp	$LN5@ZenFindNea
$LN6@ZenFindNea:
; Line 231
	jmp	$LN2@ZenFindNea
$LN3@ZenFindNea:
; Line 232
	mov	eax, DWORD PTR MinDS$[rsp]
; Line 233
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?ZenFindNearestPixelOfOppositeState@@YAIPEAUZenTexture@@HHH@Z ENDP ; ZenFindNearestPixelOfOppositeState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
Z$ = 56
Pixel$3 = 64
$T4 = 72
Blur$5 = 88
__$ArrayPad$ = 104
Dst$ = 144
F$ = 152
Src$ = 160
?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z PROC	; ZenApplyGaussainBlur
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 190
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR Dst$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR Z$[rsp], eax
; Line 191
	mov	DWORD PTR Y$1[rsp], 0
	jmp	SHORT $LN4@ZenApplyGa
$LN2@ZenApplyGa:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenApplyGa:
	mov	rax, QWORD PTR Dst$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	$LN3@ZenApplyGa
; Line 192
	mov	DWORD PTR X$2[rsp], 0
	jmp	SHORT $LN7@ZenApplyGa
$LN5@ZenApplyGa:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenApplyGa:
	mov	rax, QWORD PTR Dst$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR X$2[rsp], eax
	jge	$LN6@ZenApplyGa
; Line 193
	mov	eax, DWORD PTR Y$1[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR X$2[rsp]
	mov	r8d, DWORD PTR F$[rsp]
	mov	rdx, QWORD PTR Src$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z ; ZenComputePixelAverageAround
	lea	rcx, QWORD PTR Blur$5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
; Line 194
	mov	rax, QWORD PTR Dst$[rsp]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR Y$1[rsp]
	cdqe
	mov	rcx, QWORD PTR Dst$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR X$2[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR Pixel$3[rsp], rax
; Line 195
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Pixel$3[rsp]
	movzx	edx, BYTE PTR Blur$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 196
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Pixel$3[rsp]
	movzx	edx, BYTE PTR Blur$5[rsp+4]
	mov	BYTE PTR [rcx+rax], dl
; Line 197
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Pixel$3[rsp]
	movzx	edx, BYTE PTR Blur$5[rsp+8]
	mov	BYTE PTR [rcx+rax], dl
; Line 198
	jmp	$LN5@ZenApplyGa
$LN6@ZenApplyGa:
; Line 199
	jmp	$LN2@ZenApplyGa
$LN3@ZenApplyGa:
; Line 200
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ZenApplyGaussainBlur@@YAXPEAUZenTexture@@H0@Z ENDP	; ZenApplyGaussainBlur
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
DX$3 = 56
DY$4 = 60
MaxD$ = 64
DS$5 = 68
Z$ = 72
Pixel$6 = 80
$T7 = 88
Area$ = 104
__$ArrayPad$ = 120
T$ = 160
Color$ = 168
Rad$ = 176
CenterX$ = 184
CenterY$ = 192
?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z PROC	; ZenDrawCircleInTexture
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 165
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 166
	mov	eax, DWORD PTR Rad$[rsp]
	mov	ecx, DWORD PTR CenterY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR Rad$[rsp]
	mov	edx, DWORD PTR CenterX$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR Rad$[rsp]
	mov	r8d, DWORD PTR CenterY$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR Rad$[rsp]
	mov	r9d, DWORD PTR CenterX$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	mov	rdx, QWORD PTR T$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z ; ZenRectifyTextureArea
	lea	rcx, QWORD PTR Area$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 169
	mov	rax, QWORD PTR T$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR Z$[rsp], eax
; Line 171
	mov	eax, DWORD PTR Rad$[rsp]
	imul	eax, DWORD PTR Rad$[rsp]
	mov	DWORD PTR MaxD$[rsp], eax
; Line 173
	mov	eax, DWORD PTR Area$[rsp+4]
	mov	DWORD PTR Y$1[rsp], eax
	jmp	SHORT $LN4@ZenDrawCir
$LN2@ZenDrawCir:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenDrawCir:
	mov	eax, DWORD PTR Area$[rsp+12]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	$LN3@ZenDrawCir
; Line 174
	mov	eax, DWORD PTR CenterY$[rsp]
	mov	ecx, DWORD PTR Y$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR DY$4[rsp], eax
; Line 175
	mov	eax, DWORD PTR Area$[rsp]
	mov	DWORD PTR X$2[rsp], eax
	jmp	SHORT $LN7@ZenDrawCir
$LN5@ZenDrawCir:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenDrawCir:
	mov	eax, DWORD PTR Area$[rsp+8]
	cmp	DWORD PTR X$2[rsp], eax
	jge	$LN6@ZenDrawCir
; Line 176
	mov	eax, DWORD PTR CenterX$[rsp]
	mov	ecx, DWORD PTR X$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR DX$3[rsp], eax
; Line 177
	mov	eax, DWORD PTR DX$3[rsp]
	imul	eax, DWORD PTR DX$3[rsp]
	mov	ecx, DWORD PTR DY$4[rsp]
	imul	ecx, DWORD PTR DY$4[rsp]
	add	eax, ecx
	mov	DWORD PTR DS$5[rsp], eax
; Line 178
	mov	eax, DWORD PTR MaxD$[rsp]
	cmp	DWORD PTR DS$5[rsp], eax
	ja	SHORT $LN8@ZenDrawCir
; Line 179
	mov	rax, QWORD PTR T$[rsp]
	mov	ecx, DWORD PTR Y$1[rsp]
	imul	ecx, DWORD PTR [rax+16]
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR T$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR X$2[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR Pixel$6[rsp], rax
; Line 180
	mov	rax, QWORD PTR Pixel$6[rsp]
	movzx	ecx, BYTE PTR Color$[rsp]
	mov	BYTE PTR [rax], cl
$LN8@ZenDrawCir:
; Line 182
	jmp	$LN5@ZenDrawCir
$LN6@ZenDrawCir:
; Line 183
	jmp	$LN2@ZenDrawCir
$LN3@ZenDrawCir:
; Line 184
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?ZenDrawCircleInTexture@@YAXPEAUZenTexture@@IHHH@Z ENDP	; ZenDrawCircleInTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
C$ = 56
DX$3 = 60
DY$4 = 64
MaxD$ = 68
DS$5 = 72
Z$ = 76
Pixel$6 = 80
$T7 = 88
A$ = 104
Area$ = 120
__$ArrayPad$ = 136
__$ReturnAddress$ = 176
T$ = 184
Rad$ = 192
RootX$ = 200
RootY$ = 208
?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z PROC ; ZenComputePixelAverageAround
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 126
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 127
	mov	eax, DWORD PTR Rad$[rsp]
	mov	ecx, DWORD PTR RootY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR Rad$[rsp]
	mov	edx, DWORD PTR RootX$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR Rad$[rsp]
	mov	r8d, DWORD PTR RootY$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR Rad$[rsp]
	mov	r9d, DWORD PTR RootX$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	mov	rdx, QWORD PTR T$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z ; ZenRectifyTextureArea
	lea	rcx, QWORD PTR Area$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 130
	mov	eax, DWORD PTR Rad$[rsp]
	imul	eax, DWORD PTR Rad$[rsp]
	mov	DWORD PTR MaxD$[rsp], eax
; Line 132
	mov	rax, QWORD PTR T$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR Z$[rsp], eax
; Line 134
	mov	DWORD PTR C$[rsp], 0
; Line 137
	mov	DWORD PTR A$[rsp], 0
; Line 138
	mov	DWORD PTR A$[rsp+4], 0
; Line 139
	mov	DWORD PTR A$[rsp+8], 0
; Line 141
	mov	eax, DWORD PTR Area$[rsp+4]
	mov	DWORD PTR Y$1[rsp], eax
	jmp	SHORT $LN4@ZenCompute
$LN2@ZenCompute:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenCompute:
	mov	eax, DWORD PTR Area$[rsp+12]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	$LN3@ZenCompute
; Line 142
	mov	eax, DWORD PTR RootY$[rsp]
	mov	ecx, DWORD PTR Y$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR DY$4[rsp], eax
; Line 143
	mov	eax, DWORD PTR Area$[rsp]
	mov	DWORD PTR X$2[rsp], eax
	jmp	SHORT $LN7@ZenCompute
$LN5@ZenCompute:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenCompute:
	mov	eax, DWORD PTR Area$[rsp+8]
	cmp	DWORD PTR X$2[rsp], eax
	jge	$LN6@ZenCompute
; Line 144
	mov	eax, DWORD PTR RootX$[rsp]
	mov	ecx, DWORD PTR X$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR DX$3[rsp], eax
; Line 145
	mov	eax, DWORD PTR DX$3[rsp]
	imul	eax, DWORD PTR DX$3[rsp]
	mov	ecx, DWORD PTR DY$4[rsp]
	imul	ecx, DWORD PTR DY$4[rsp]
	add	eax, ecx
	mov	DWORD PTR DS$5[rsp], eax
; Line 146
	mov	eax, DWORD PTR MaxD$[rsp]
	cmp	DWORD PTR DS$5[rsp], eax
	ja	$LN8@ZenCompute
; Line 147
	mov	rax, QWORD PTR T$[rsp]
	mov	ecx, DWORD PTR Y$1[rsp]
	imul	ecx, DWORD PTR [rax+16]
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR T$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR X$2[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR Pixel$6[rsp], rax
; Line 148
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR A$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR A$[rsp], eax
; Line 149
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR A$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR A$[rsp+4], eax
; Line 150
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR A$[rsp+8]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR A$[rsp+8], eax
; Line 151
	mov	eax, DWORD PTR C$[rsp]
	inc	eax
	mov	DWORD PTR C$[rsp], eax
$LN8@ZenCompute:
; Line 153
	jmp	$LN5@ZenCompute
$LN6@ZenCompute:
; Line 154
	jmp	$LN2@ZenCompute
$LN3@ZenCompute:
; Line 156
	xor	edx, edx
	mov	eax, DWORD PTR A$[rsp]
	div	DWORD PTR C$[rsp]
	mov	DWORD PTR A$[rsp], eax
; Line 157
	xor	edx, edx
	mov	eax, DWORD PTR A$[rsp+4]
	div	DWORD PTR C$[rsp]
	mov	DWORD PTR A$[rsp+4], eax
; Line 158
	xor	edx, edx
	mov	eax, DWORD PTR A$[rsp+8]
	div	DWORD PTR C$[rsp]
	mov	DWORD PTR A$[rsp+8], eax
; Line 160
	lea	rax, QWORD PTR A$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 161
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenComputePixelAverageAround@@YA?ATu32x3@@PEBUZenTexture@@HHH@Z ENDP ; ZenComputePixelAverageAround
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
DimenX$ = 32
DimenY$ = 36
Bias$ = 40
tv167 = 48
tv165 = 52
FinalColor$ = 56
Indices$ = 64
Samples$ = 80
__$ArrayPad$ = 96
Texture$ = 128
Texel$ = 136
?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z PROC ; ZenBilinearSampleTexture8
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 95
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR DimenX$[rsp], eax
; Line 96
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR DimenY$[rsp], eax
; Line 100
	mov	eax, DWORD PTR DimenX$[rsp]
	dec	eax
	cvttss2si ecx, DWORD PTR Texel$[rsp]
	mov	r8d, eax
	xor	edx, edx
	call	?zen_clampi@@YAHHHH@Z			; zen_clampi
	mov	DWORD PTR Indices$[rsp], eax
; Line 101
	mov	eax, DWORD PTR DimenY$[rsp]
	dec	eax
	cvttss2si ecx, DWORD PTR Texel$[rsp+4]
	mov	r8d, eax
	xor	edx, edx
	call	?zen_clampi@@YAHHHH@Z			; zen_clampi
	mov	DWORD PTR Indices$[rsp+4], eax
; Line 102
	mov	eax, DWORD PTR DimenX$[rsp]
	dec	eax
	cvttss2si ecx, DWORD PTR Texel$[rsp]
	inc	ecx
	mov	r8d, eax
	xor	edx, edx
	call	?zen_clampi@@YAHHHH@Z			; zen_clampi
	mov	DWORD PTR Indices$[rsp+8], eax
; Line 103
	mov	eax, DWORD PTR DimenY$[rsp]
	dec	eax
	cvttss2si ecx, DWORD PTR Texel$[rsp+4]
	inc	ecx
	mov	r8d, eax
	xor	edx, edx
	call	?zen_clampi@@YAHHHH@Z			; zen_clampi
	mov	DWORD PTR Indices$[rsp+12], eax
; Line 107
	mov	r8d, DWORD PTR Indices$[rsp+4]
	mov	edx, DWORD PTR Indices$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR Samples$[rsp], eax
; Line 108
	mov	r8d, DWORD PTR Indices$[rsp+4]
	mov	edx, DWORD PTR Indices$[rsp+8]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR Samples$[rsp+4], eax
; Line 109
	mov	r8d, DWORD PTR Indices$[rsp+12]
	mov	edx, DWORD PTR Indices$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR Samples$[rsp+8], eax
; Line 110
	mov	r8d, DWORD PTR Indices$[rsp+12]
	mov	edx, DWORD PTR Indices$[rsp+8]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR Samples$[rsp+12], eax
; Line 113
	cvtsi2ss xmm0, DWORD PTR Indices$[rsp]
	movss	xmm1, DWORD PTR Texel$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Bias$[rsp], xmm0
; Line 114
	cvtsi2ss xmm0, DWORD PTR Indices$[rsp+4]
	movss	xmm1, DWORD PTR Texel$[rsp+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Bias$[rsp+4], xmm0
; Line 116
	cvtsi2ss xmm0, DWORD PTR Samples$[rsp+12]
	cvtsi2ss xmm1, DWORD PTR Samples$[rsp+8]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR Bias$[rsp]
	call	?zen_lerp@@YAMMMM@Z			; zen_lerp
	movss	DWORD PTR tv167[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR Samples$[rsp+4]
	cvtsi2ss xmm1, DWORD PTR Samples$[rsp]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR Bias$[rsp]
	call	?zen_lerp@@YAMMMM@Z			; zen_lerp
	movss	DWORD PTR tv165[rsp], xmm0
	movss	xmm2, DWORD PTR tv167[rsp]
	movss	xmm1, DWORD PTR tv165[rsp]
	movss	xmm0, DWORD PTR Bias$[rsp+4]
	call	?zen_lerp@@YAMMMM@Z			; zen_lerp
	movss	DWORD PTR FinalColor$[rsp], xmm0
; Line 120
	movss	xmm0, DWORD PTR FinalColor$[rsp]
; Line 121
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?ZenBilinearSampleTexture8@@YAMPEAUZenTexture@@Uf32x2@@@Z ENDP ; ZenBilinearSampleTexture8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Format$ = 48
tv80 = 52
FileSize$ = 56
DimenY$ = 60
DimenX$ = 64
FileData$ = 72
Memory$ = 80
$T1 = 88
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 200
__$ReturnAddress$ = 272
Core$ = 280
FileName$ = 288
?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z PROC ; ZenCoreSoftLoadTextureFromFile
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 77
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 80
	mov	rdx, QWORD PTR FileName$[rsp]
	lea	rcx, QWORD PTR FileSize$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$[rsp], rax
; Line 82
	mov	DWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR Format$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR DimenY$[rsp]
	lea	r8, QWORD PTR DimenX$[rsp]
	mov	edx, DWORD PTR FileSize$[rsp]
	mov	rcx, QWORD PTR FileData$[rsp]
	call	stbi_load_from_memory
	mov	QWORD PTR Memory$[rsp], rax
; Line 84
	cmp	DWORD PTR Format$[rsp], 1
	jne	SHORT $LN2@ZenCoreSof
	mov	DWORD PTR Format$[rsp], 1
	jmp	$LN3@ZenCoreSof
$LN2@ZenCoreSof:
; Line 85
	cmp	DWORD PTR Format$[rsp], 3
	jne	SHORT $LN4@ZenCoreSof
	mov	DWORD PTR Format$[rsp], 3
	jmp	$LN5@ZenCoreSof
$LN4@ZenCoreSof:
; Line 86
	cmp	DWORD PTR Format$[rsp], 4
	jne	SHORT $LN6@ZenCoreSof
	mov	DWORD PTR Format$[rsp], 4
	jmp	$LN7@ZenCoreSof
$LN6@ZenCoreSof:
; Line 87
	mov	DWORD PTR [rsp+32], 143			; 0000008fH
	mov	r9d, 87					; 00000057H
	lea	r8, OFFSET FLAT:$SG167636
	lea	rdx, OFFSET FLAT:$SG167637
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG167634
	test	rax, rax
	jne	SHORT $LN9@ZenCoreSof
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN10@ZenCoreSof
$LN9@ZenCoreSof:
	mov	DWORD PTR tv80[rsp], 0
$LN10@ZenCoreSof:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG167633
	mov	r8d, DWORD PTR tv80[rsp]
	lea	rdx, OFFSET FLAT:$SG167635
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@ZenCoreSof:
$LN5@ZenCoreSof:
$LN3@ZenCoreSof:
; Line 89
	mov	rax, QWORD PTR Memory$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR DimenY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR DimenX$[rsp]
	mov	r8d, DWORD PTR Format$[rsp]
	mov	edx, 12
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ; ZenUnboundTexture
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 90
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreSoftLoadTextureFromFile@@YA?AUZenTexture@@PEAUZenCore@@PEBD@Z ENDP ; ZenCoreSoftLoadTextureFromFile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Texture$ = 48
$T1 = 80
__$ReturnAddress$ = 144
Core$ = 152
T$ = 160
?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z PROC ; ZenCoreSoftCloneTexture
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 68
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR T$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR T$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR T$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ; ZenCoreCreateSoftTexture
	lea	rcx, QWORD PTR Texture$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 69
	mov	rdx, QWORD PTR T$[rsp]
	lea	rcx, QWORD PTR Texture$[rsp]
	call	?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z ; ZenCopyTexture
; Line 70
	lea	rax, QWORD PTR Texture$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 71
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreSoftCloneTexture@@YA?AUZenTexture@@PEAUZenCore@@PEBU1@@Z ENDP ; ZenCoreSoftCloneTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 48
Memory$ = 56
Texture$ = 64
$T1 = 96
$T2 = 120
$T3 = 144
$T4 = 176
$T5 = 200
__$ReturnAddress$ = 272
Core$ = 280
Format$ = 288
DimenX$ = 296
DimenY$ = 304
?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z PROC ; ZenCoreCreateSoftTexture
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 59
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR [rsp+32], 142			; 0000008eH
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:$SG167606
	lea	rdx, OFFSET FLAT:$SG167607
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ; ZenCreateCallerInfo
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR DimenY$[rsp]
	mov	edx, DWORD PTR DimenX$[rsp]
	mov	ecx, DWORD PTR Format$[rsp]
	call	?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z ; ZenComputeTrimmedSizeForTexture
	mov	DWORD PTR tv81[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8d, DWORD PTR tv81[rsp]
	mov	rdx, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ; ZenCoreDebugAlloc
	mov	QWORD PTR Memory$[rsp], rax
; Line 60
	mov	rax, QWORD PTR Memory$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR DimenY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR DimenX$[rsp]
	mov	r8d, DWORD PTR Format$[rsp]
	mov	edx, 12
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ; ZenUnboundTexture
	lea	rcx, QWORD PTR Texture$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 62
	lea	rcx, QWORD PTR Texture$[rsp]
	call	?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z ; ZenZeroTextureMemory
; Line 63
	lea	rax, QWORD PTR Texture$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 64
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreCreateSoftTexture@@YA?AUZenTexture@@PEAUZenCore@@HHH@Z ENDP ; ZenCoreCreateSoftTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Format$ = 48
DimenX$ = 56
DimenY$ = 64
?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z PROC		; ZenComputeTrimmedSizeForTexture
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 43
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 45
	mov	ecx, DWORD PTR Format$[rsp]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	imul	eax, DWORD PTR DimenX$[rsp]
	imul	eax, DWORD PTR DimenY$[rsp]
; Line 46
	add	rsp, 40					; 00000028H
	ret	0
?ZenComputeTrimmedSizeForTexture@@YAIHHH@Z ENDP		; ZenComputeTrimmedSizeForTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Texture$ = 48
?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z PROC	; ZenZeroTextureMemory
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 36
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 37
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR [rcx+8]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 38
	add	rsp, 40					; 00000028H
	ret	0
?ZenZeroTextureMemory@@YAXPEAUZenTexture@@@Z ENDP	; ZenZeroTextureMemory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
tv67 = 52
tv71 = 56
tv75 = 60
tv80 = 64
tv94 = 68
tv139 = 72
tv152 = 76
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
$T9 = 336
$T10 = 360
$T11 = 384
$T12 = 408
Area$ = 432
__$ArrayPad$ = 448
__$ReturnAddress$ = 496
Texture$ = 504
MinX$ = 512
MinY$ = 520
MaxX$ = 528
MaxY$ = 536
?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z PROC ; ZenRectifyTextureArea
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 16
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 472				; 000001d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 17
	cmp	DWORD PTR MinX$[rsp], 0
	jle	SHORT $LN3@ZenRectify
	mov	eax, DWORD PTR MinX$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@ZenRectify
$LN3@ZenRectify:
	mov	DWORD PTR tv65[rsp], 0
$LN4@ZenRectify:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR Area$[rsp], eax
; Line 18
	cmp	DWORD PTR MinY$[rsp], 0
	jle	SHORT $LN5@ZenRectify
	mov	eax, DWORD PTR MinY$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN6@ZenRectify
$LN5@ZenRectify:
	mov	DWORD PTR tv67[rsp], 0
$LN6@ZenRectify:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR Area$[rsp+4], eax
; Line 19
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR MaxX$[rsp], eax
	jge	SHORT $LN7@ZenRectify
	mov	eax, DWORD PTR MaxX$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN8@ZenRectify
$LN7@ZenRectify:
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv71[rsp], eax
$LN8@ZenRectify:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR Area$[rsp+8], eax
; Line 20
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR MaxY$[rsp], eax
	jge	SHORT $LN9@ZenRectify
	mov	eax, DWORD PTR MaxY$[rsp]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN10@ZenRectify
$LN9@ZenRectify:
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv75[rsp], eax
$LN10@ZenRectify:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR Area$[rsp+12], eax
; Line 22
	mov	DWORD PTR [rsp+32], 138			; 0000008aH
	mov	r9d, 22
	lea	r8, OFFSET FLAT:$SG167571
	lea	rdx, OFFSET FLAT:$SG167572
	lea	rcx, QWORD PTR $T9[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR Area$[rsp], eax
	jg	SHORT $LN11@ZenRectify
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN12@ZenRectify
$LN11@ZenRectify:
	mov	DWORD PTR tv80[rsp], 0
$LN12@ZenRectify:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG167569
	mov	r8d, DWORD PTR tv80[rsp]
	lea	rdx, OFFSET FLAT:$SG167570
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 23
	mov	DWORD PTR [rsp+32], 139			; 0000008bH
	mov	r9d, 23
	lea	r8, OFFSET FLAT:$SG167575
	lea	rdx, OFFSET FLAT:$SG167576
	lea	rcx, QWORD PTR $T10[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR Area$[rsp+4], eax
	jg	SHORT $LN13@ZenRectify
	mov	DWORD PTR tv94[rsp], 1
	jmp	SHORT $LN14@ZenRectify
$LN13@ZenRectify:
	mov	DWORD PTR tv94[rsp], 0
$LN14@ZenRectify:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG167573
	mov	r8d, DWORD PTR tv94[rsp]
	lea	rdx, OFFSET FLAT:$SG167574
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 25
	mov	DWORD PTR [rsp+32], 140			; 0000008cH
	mov	r9d, 25
	lea	r8, OFFSET FLAT:$SG167579
	lea	rdx, OFFSET FLAT:$SG167580
	lea	rcx, QWORD PTR $T11[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	cmp	DWORD PTR Area$[rsp+8], 0
	jl	SHORT $LN15@ZenRectify
	mov	DWORD PTR tv139[rsp], 1
	jmp	SHORT $LN16@ZenRectify
$LN15@ZenRectify:
	mov	DWORD PTR tv139[rsp], 0
$LN16@ZenRectify:
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG167577
	mov	r8d, DWORD PTR tv139[rsp]
	lea	rdx, OFFSET FLAT:$SG167578
	lea	rcx, QWORD PTR $T6[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 26
	mov	DWORD PTR [rsp+32], 141			; 0000008dH
	mov	r9d, 26
	lea	r8, OFFSET FLAT:$SG167583
	lea	rdx, OFFSET FLAT:$SG167584
	lea	rcx, QWORD PTR $T12[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	cmp	DWORD PTR Area$[rsp+12], 0
	jl	SHORT $LN17@ZenRectify
	mov	DWORD PTR tv152[rsp], 1
	jmp	SHORT $LN18@ZenRectify
$LN17@ZenRectify:
	mov	DWORD PTR tv152[rsp], 0
$LN18@ZenRectify:
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG167581
	mov	r8d, DWORD PTR tv152[rsp]
	lea	rdx, OFFSET FLAT:$SG167582
	lea	rcx, QWORD PTR $T8[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 28
	lea	rax, QWORD PTR Area$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 29
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 472				; 000001d8H
	pop	rdi
	pop	rsi
	ret	0
?ZenRectifyTextureArea@@YA?ATi32x4@@PEBUZenTexture@@HHHH@Z ENDP ; ZenRectifyTextureArea
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
tv68 = 52
tv132 = 56
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 152
$T5 = 176
$T6 = 208
$T7 = 232
Core$ = 288
?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z PROC		; ZenCorePullCurrentDir
; File W:\cpp\void\detroit\brazen-core.h
; Line 289
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	DWORD PTR [rsp+32], 114			; 00000072H
	mov	r9d, 289				; 00000121H
	lea	r8, OFFSET FLAT:$SG166046
	lea	rdx, OFFSET FLAT:$SG166047
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR ?TemporaryPushCounterUntilAStackIsAdded@@3HA
	mov	DWORD PTR tv68[rsp], eax
	mov	eax, DWORD PTR ?TemporaryPushCounterUntilAStackIsAdded@@3HA
	dec	eax
	mov	DWORD PTR ?TemporaryPushCounterUntilAStackIsAdded@@3HA, eax
	cmp	DWORD PTR tv68[rsp], 0
	jle	SHORT $LN3@ZenCorePul
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@ZenCorePul
$LN3@ZenCorePul:
	mov	DWORD PTR tv69[rsp], 0
$LN4@ZenCorePul:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG166044
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG166045
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 290
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 13664				; 00003560H
	mov	rcx, rax
	call	QWORD PTR __imp_SetCurrentDirectoryA
; Line 291
	mov	DWORD PTR [rsp+32], 115			; 00000073H
	mov	r9d, 291				; 00000123H
	lea	r8, OFFSET FLAT:$SG166049
	lea	rdx, OFFSET FLAT:$SG166050
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 13664				; 00003560H
	mov	rdx, rax
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv132[rsp], rax
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv132[rsp]
	lea	r8, OFFSET FLAT:$SG166048
	mov	edx, 2
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 292
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?ZenCorePullCurrentDir@@YAXPEAUZenCore@@@Z ENDP		; ZenCorePullCurrentDir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
tv68 = 52
tv132 = 56
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 152
$T5 = 176
$T6 = 208
$T7 = 232
Core$ = 288
FileName$ = 296
?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z PROC	; ZenCorePushCurrentDir
; File W:\cpp\void\detroit\brazen-core.h
; Line 280
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	DWORD PTR [rsp+32], 112			; 00000070H
	mov	r9d, 280				; 00000118H
	lea	r8, OFFSET FLAT:$SG166034
	lea	rdx, OFFSET FLAT:$SG166035
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR ?TemporaryPushCounterUntilAStackIsAdded@@3HA
	mov	DWORD PTR tv68[rsp], eax
	mov	eax, DWORD PTR ?TemporaryPushCounterUntilAStackIsAdded@@3HA
	inc	eax
	mov	DWORD PTR ?TemporaryPushCounterUntilAStackIsAdded@@3HA, eax
	cmp	DWORD PTR tv68[rsp], 1
	jge	SHORT $LN3@ZenCorePus
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@ZenCorePus
$LN3@ZenCorePus:
	mov	DWORD PTR tv69[rsp], 0
$LN4@ZenCorePus:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG166032
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG166033
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 281
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 13664				; 00003560H
	mov	rdx, rax
	mov	ecx, 256				; 00000100H
	call	QWORD PTR __imp_GetCurrentDirectoryA
; Line 282
	mov	rcx, QWORD PTR FileName$[rsp]
	call	QWORD PTR __imp_SetCurrentDirectoryA
; Line 283
	mov	DWORD PTR [rsp+32], 113			; 00000071H
	mov	r9d, 283				; 0000011bH
	lea	r8, OFFSET FLAT:$SG166037
	lea	rdx, OFFSET FLAT:$SG166038
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR FileName$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv132[rsp], rax
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv132[rsp]
	lea	r8, OFFSET FLAT:$SG166036
	mov	edx, 2
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 284
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?ZenCorePushCurrentDir@@YAXPEAUZenCore@@PEBD@Z ENDP	; ZenCorePushCurrentDir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Mode$ = 32
$T1 = 48
$T2 = 64
__$ArrayPad$ = 80
Core$ = 128
?ZenCoreTick@@YAXPEAUZenCore@@@Z PROC			; ZenCoreTick
; File W:\cpp\void\detroit\brazen-core.h
; Line 260
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 261
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 4280				; 000010b8H
	mov	QWORD PTR Mode$[rsp], rax
; Line 264
	mov	DWORD PTR $T2[rsp], 0
	mov	DWORD PTR $T2[rsp+4], 0
	mov	DWORD PTR $T2[rsp+8], 1048576		; 00100000H
	mov	DWORD PTR $T2[rsp+12], 1048576		; 00100000H
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z ; ZenImmediateClip
; Line 265
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	mov	rdx, QWORD PTR Mode$[rsp]
	mov	rcx, rax
	call	?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z ; ID3D11Graphics_RasterizeImmediateMode
; Line 266
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z ; ZenImmediateModeReset
; Line 269
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	mov	rcx, rax
	call	?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_PushWindow
; Line 270
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCorePull@@YAXPEAUZenCore@@@Z	; ZenCorePull
; Line 271
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreTick@@YAXPEAUZenCore@@@Z ENDP			; ZenCoreTick
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Window$ = 32
$T1 = 48
Core$ = 96
?ZenCorePull@@YAXPEAUZenCore@@@Z PROC			; ZenCorePull
; File W:\cpp\void\detroit\brazen-core.h
; Line 242
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z ; ZenCoreGetActiveWindow
	mov	QWORD PTR Window$[rsp], rax
; Line 243
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:?COLOR_GRAY@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z ; ID3D11Graphics_PullWindow
	mov	rcx, QWORD PTR Core$[rsp]
	mov	DWORD PTR [rcx+13612], eax
; Line 249
	mov	eax, 20
	imul	rax, rax, 46				; 0000002eH
	mov	rcx, QWORD PTR Window$[rsp]
	movsx	eax, WORD PTR [rcx+rax+568]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@ZenCorePul
; Line 250
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+528]
	or	eax, 2
	mov	rcx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rcx+528], eax
$LN2@ZenCorePul:
; Line 254
	mov	rcx, QWORD PTR Core$[rsp]
	call	?ZenCorePullTime@@YAXPEAUZenCore@@@Z	; ZenCorePullTime
; Line 255
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenCorePull@@YAXPEAUZenCore@@@Z ENDP			; ZenCorePull
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
TicksPerSecond$ = 32
TicksCurrent$ = 40
TicksElapsed$ = 48
Core$ = 80
?ZenCorePullTime@@YAXPEAUZenCore@@@Z PROC		; ZenCorePullTime
; File W:\cpp\void\detroit\brazen-core.h
; Line 222
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	call	?ZenGetNativePerformanceCounter@@YA_KXZ	; ZenGetNativePerformanceCounter
	mov	QWORD PTR TicksCurrent$[rsp], rax
; Line 224
	mov	rax, QWORD PTR Core$[rsp]
	mov	rax, QWORD PTR [rax+14024]
	mov	rcx, QWORD PTR TicksCurrent$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR TicksElapsed$[rsp], rax
; Line 225
	mov	rax, QWORD PTR Core$[rsp]
	mov	rax, QWORD PTR [rax+14016]
	mov	QWORD PTR TicksPerSecond$[rsp], rax
; Line 227
	mov	rax, QWORD PTR Core$[rsp]
	mov	rcx, QWORD PTR TicksElapsed$[rsp]
	mov	QWORD PTR [rax+14064], rcx
; Line 228
	imul	rax, QWORD PTR TicksElapsed$[rsp], 1000000000 ; 3b9aca00H
	xor	edx, edx
	div	QWORD PTR TicksPerSecond$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14072], rax
; Line 229
	imul	rax, QWORD PTR TicksElapsed$[rsp], 1000000 ; 000f4240H
	xor	edx, edx
	div	QWORD PTR TicksPerSecond$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14080], rax
; Line 230
	imul	rax, QWORD PTR TicksElapsed$[rsp], 1000	; 000003e8H
	xor	edx, edx
	div	QWORD PTR TicksPerSecond$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14088], rax
; Line 231
	mov	rax, QWORD PTR TicksElapsed$[rsp]
	test	rax, rax
	jl	SHORT $LN9@ZenCorePul
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN10@ZenCorePul
$LN9@ZenCorePul:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN10@ZenCorePul:
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR TicksPerSecond$[rsp]
	test	rax, rax
	jl	SHORT $LN7@ZenCorePul
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN8@ZenCorePul
$LN7@ZenCorePul:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN8@ZenCorePul:
	divss	xmm0, xmm1
	mov	rax, QWORD PTR Core$[rsp]
	movss	DWORD PTR [rax+14096], xmm0
; Line 233
	mov	rax, QWORD PTR Core$[rsp]
	mov	rcx, QWORD PTR TicksCurrent$[rsp]
	mov	QWORD PTR [rax+14024], rcx
; Line 234
	imul	rax, QWORD PTR TicksCurrent$[rsp], 1000000000 ; 3b9aca00H
	xor	edx, edx
	div	QWORD PTR TicksPerSecond$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14032], rax
; Line 235
	imul	rax, QWORD PTR TicksCurrent$[rsp], 1000000 ; 000f4240H
	xor	edx, edx
	div	QWORD PTR TicksPerSecond$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14040], rax
; Line 236
	imul	rax, QWORD PTR TicksCurrent$[rsp], 1000	; 000003e8H
	xor	edx, edx
	div	QWORD PTR TicksPerSecond$[rsp]
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14048], rax
; Line 237
	mov	rax, QWORD PTR TicksCurrent$[rsp]
	test	rax, rax
	jl	SHORT $LN5@ZenCorePul
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@ZenCorePul
$LN5@ZenCorePul:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@ZenCorePul:
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR TicksPerSecond$[rsp]
	test	rax, rax
	jl	SHORT $LN3@ZenCorePul
	cvtsi2sd xmm1, rax
	jmp	SHORT $LN4@ZenCorePul
$LN3@ZenCorePul:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
	movaps	xmm1, xmm2
$LN4@ZenCorePul:
	divsd	xmm0, xmm1
	mov	rax, QWORD PTR Core$[rsp]
	movsd	QWORD PTR [rax+14056], xmm0
; Line 238
	add	rsp, 72					; 00000048H
	ret	0
?ZenCorePullTime@@YAXPEAUZenCore@@@Z ENDP		; ZenCorePullTime
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 32
Core$ = 64
External$ = 72
?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z PROC ; ZenCoreAccessionGlyphic
; File W:\cpp\void\detroit\brazen-core.h
; Line 215
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	mov	rcx, rax
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR Driver$[rsp], rax
; Line 216
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1752				; 000006d8H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z ; ZenAccessionGlyphic
; Line 217
	add	rsp, 56					; 00000038H
	ret	0
?ZenCoreAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenCore@@PEAUZenGlyphFont@@@Z ENDP ; ZenCoreAccessionGlyphic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
Caller$ = 96
Core$ = 104
External$ = 112
?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z PROC ; ZenCoreReturnTextureChronicleCaller
; File W:\cpp\void\detroit\brazen-core.h
; Line 204
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	mov	r8, QWORD PTR External$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z ; ID3D11Graphics_ReturnTextureChronicle
; Line 205
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreReturnTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@@Z ENDP ; ZenCoreReturnTextureChronicleCaller
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
Caller$ = 96
Core$ = 104
External$ = 112
Flags$ = 120
?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z PROC ; ZenCoreBorrowTextureChronicleCaller
; File W:\cpp\void\detroit\brazen-core.h
; Line 198
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR Flags$[rsp]
	mov	r8, QWORD PTR External$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z ; ID3D11Graphics_BorrowTextureChronicle
; Line 199
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreBorrowTextureChronicleCaller@@YAHUZenCaller@@PEAUZenCore@@PEAUZenTexture@@H@Z ENDP ; ZenCoreBorrowTextureChronicleCaller
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Window$ = 32
Core$ = 64
?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z PROC ; ZenCoreGetActiveWindow
; File W:\cpp\void\detroit\brazen-core.h
; Line 186
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	mov	rcx, rax
	call	?ID3D11Graphics_GetActiveWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveWindow
	mov	QWORD PTR Window$[rsp], rax
; Line 187
	mov	rax, QWORD PTR Window$[rsp]
; Line 188
	add	rsp, 56					; 00000038H
	ret	0
?ZenCoreGetActiveWindow@@YAPEAUZenWindow@@PEAUZenCore@@@Z ENDP ; ZenCoreGetActiveWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Unbound$ = 48
$T1 = 80
$T2 = 112
Core$ = 176
Access$ = 184
Format$ = 192
DimenX$ = 200
DimenY$ = 208
Memory$ = 216
?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z PROC ; ZenCoreCreateTexture
; File W:\cpp\void\detroit\brazen-core.h
; Line 177
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR Memory$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR DimenY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR DimenX$[rsp]
	mov	r8d, DWORD PTR Format$[rsp]
	mov	edx, DWORD PTR Access$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ; ZenUnboundTexture
	lea	rcx, QWORD PTR Unbound$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 178
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR Unbound$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 64					; 00000040H
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z ; ID3D11Graphics_InternalizeTexture
; Line 179
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreCreateTexture@@YAPEAUZenTexture@@PEAUZenCore@@HHHHPEAX@Z ENDP ; ZenCoreCreateTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Core$ = 48
?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z PROC		; ZenCoreInitConsoleIO
; File W:\cpp\void\detroit\brazen-core.h
; Line 164
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 165
	mov	rax, QWORD PTR Core$[rsp]
	cmp	DWORD PTR [rax+8440], 0
	jg	SHORT $LN2@ZenCoreIni
	mov	rax, QWORD PTR Core$[rsp]
	mov	DWORD PTR [rax+8440], 1920		; 00000780H
$LN2@ZenCoreIni:
; Line 166
	mov	rax, QWORD PTR Core$[rsp]
	cmp	DWORD PTR [rax+8444], 0
	jg	SHORT $LN3@ZenCoreIni
	mov	rax, QWORD PTR Core$[rsp]
	mov	DWORD PTR [rax+8444], 720		; 000002d0H
$LN3@ZenCoreIni:
; Line 168
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 7920				; 00001ef0H
	mov	rcx, rax
	call	?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z ; ZenAcquireNativeConsoleWindow
; Line 170
	call	?ZenGetSystemStandardOutputHandle@@YAPEAXXZ ; ZenGetSystemStandardOutputHandle
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+13984], rax
; Line 171
	call	?ZenGetSystemStandardErrorHandle@@YAPEAXXZ ; ZenGetSystemStandardErrorHandle
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+13992], rax
; Line 172
	call	?ZenGetSystemStandardInputHandle@@YAPEAXXZ ; ZenGetSystemStandardInputHandle
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14000], rax
; Line 173
	add	rsp, 40					; 00000028H
	ret	0
?ZenCoreInitConsoleIO@@YAXPEAUZenCore@@@Z ENDP		; ZenCoreInitConsoleIO
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
Core$ = 176
?ZenCoreInitArena@@YAXPEAUZenCore@@@Z PROC		; ZenCoreInitArena
; File W:\cpp\void\detroit\brazen-core.h
; Line 155
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 157
	mov	rax, QWORD PTR Core$[rsp]
	mov	edx, 268435456				; 10000000H
	mov	rcx, rax
	call	?ZenArenaInit@@YAHPEAUZenArena@@I@Z	; ZenArenaInit
; Line 158
	mov	rax, QWORD PTR Core$[rsp]
	mov	r8d, 67108864				; 04000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z ; ZenSliceArena
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+32]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 159
	mov	rax, QWORD PTR Core$[rsp]
	mov	r8d, 67108864				; 04000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z ; ZenSliceArena
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z ; ZenSliceToEmptyArena
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Core$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 160
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreInitArena@@YAXPEAUZenCore@@@Z ENDP		; ZenCoreInitArena
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Core$ = 48
?ZenCoreInitTime@@YAXPEAUZenCore@@@Z PROC		; ZenCoreInitTime
; File W:\cpp\void\detroit\brazen-core.h
; Line 146
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR Core$[rsp]
	cmp	DWORD PTR [rax+14008], 0
	jne	SHORT $LN2@ZenCoreIni
; Line 148
	call	?ZenGetNativePerformanceCounter@@YA_KXZ	; ZenGetNativePerformanceCounter
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14024], rax
; Line 149
	call	?ZenGetNativePerformanceFrequency@@YA_KXZ ; ZenGetNativePerformanceFrequency
	mov	rcx, QWORD PTR Core$[rsp]
	mov	QWORD PTR [rcx+14016], rax
$LN2@ZenCoreIni:
; Line 151
	add	rsp, 40					; 00000028H
	ret	0
?ZenCoreInitTime@@YAXPEAUZenCore@@@Z ENDP		; ZenCoreInitTime
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ReturnAddress$ = 96
Caller$ = 104
Core$ = 112
Size$ = 120
?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z PROC ; ZenCoreDebugFrameSlice
; File W:\cpp\void\detroit\brazen-core.h
; Line 136
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 137
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 16
	mov	r8d, DWORD PTR Size$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z ; ZenSliceArena
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 138
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenCoreDebugFrameSlice@@YA?AUZenSlice@@UZenCaller@@PEAUZenCore@@I@Z ENDP ; ZenCoreDebugFrameSlice
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memory$ = 32
Caller$ = 64
Core$ = 72
Size$ = 80
?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z PROC ; ZenCoreDebugFrameAlloc
; File W:\cpp\void\detroit\brazen-core.h
; Line 122
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 123
	mov	rax, QWORD PTR Core$[rsp]
	add	rax, 16
	mov	edx, DWORD PTR Size$[rsp]
	mov	rcx, rax
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR Memory$[rsp], rax
; Line 126
	cmp	QWORD PTR Memory$[rsp], 0
	je	SHORT $LN2@ZenCoreDeb
	mov	eax, DWORD PTR Size$[rsp]
	mov	r8d, eax
	xor	edx, edx
	mov	rcx, QWORD PTR Memory$[rsp]
	call	memset
$LN2@ZenCoreDeb:
; Line 128
	mov	rax, QWORD PTR Memory$[rsp]
; Line 129
	add	rsp, 56					; 00000038H
	ret	0
?ZenCoreDebugFrameAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ENDP ; ZenCoreDebugFrameAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memory$ = 32
Caller$ = 64
Core$ = 72
Size$ = 80
?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z PROC ; ZenCoreDebugAlloc
; File W:\cpp\void\detroit\brazen-core.h
; Line 108
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 109
	mov	rax, QWORD PTR Core$[rsp]
	mov	edx, DWORD PTR Size$[rsp]
	mov	rcx, rax
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR Memory$[rsp], rax
; Line 112
	cmp	QWORD PTR Memory$[rsp], 0
	je	SHORT $LN2@ZenCoreDeb
	mov	eax, DWORD PTR Size$[rsp]
	mov	r8d, eax
	xor	edx, edx
	mov	rcx, QWORD PTR Memory$[rsp]
	call	memset
$LN2@ZenCoreDeb:
; Line 114
	mov	rax, QWORD PTR Memory$[rsp]
; Line 115
	add	rsp, 56					; 00000038H
	ret	0
?ZenCoreDebugAlloc@@YAPEAXUZenCaller@@PEAUZenCore@@I@Z ENDP ; ZenCoreDebugAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ReturnAddress$ = 64
File$ = 72
Func$ = 80
Line$ = 88
Guid$ = 96
?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z PROC	; ZenCreateCallerInfo
; File W:\cpp\void\detroit\brazen-core.h
; Line 86
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR File$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR Func$[rsp]
	mov	QWORD PTR $T1[rsp+8], rax
	mov	eax, DWORD PTR Line$[rsp]
	mov	DWORD PTR $T1[rsp+16], eax
	mov	eax, DWORD PTR Guid$[rsp]
	mov	DWORD PTR $T1[rsp+20], eax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 87
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?ZenCreateCallerInfo@@YA?AUZenCaller@@PEBD0HH@Z ENDP	; ZenCreateCallerInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Window$ = 32
Graphics$ = 64
?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_PushWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1488
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveWindow
	mov	QWORD PTR Window$[rsp], rax
; Line 1489
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z ; ZenPushNativeWindow
; Line 1490
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z ; ID3D11Window_Present
; Line 1491
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_PushWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 32
Glui$ = 40
CursorNormalized$ = 48
Window$ = 56
Quitted$ = 64
Cursor$ = 72
Event$2 = 80
tv72 = 88
$T3 = 96
$T4 = 112
Graphics$ = 160
FlushColor$ = 168
?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z PROC ; ID3D11Graphics_PullWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1446
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1448
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	rcx, rax
	call	?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z ; ID3D11Driver_CommitContextState
; Line 1450
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR FlushColor$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR tv72[rsp], rax
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z ; ID3D11Driver_ClearRenderTargetViews
; Line 1452
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveWindow
	mov	QWORD PTR Window$[rsp], rax
; Line 1455
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z ; ZenPullNativeWindow
	mov	DWORD PTR Quitted$[rsp], eax
; Line 1458
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4328				; 000010e8H
	mov	QWORD PTR Glui$[rsp], rax
; Line 1461
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR [rcx+rax+576]
	mov	QWORD PTR CursorNormalized$[rsp], rax
; Line 1462
	movss	xmm0, DWORD PTR CursorNormalized$[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR CursorNormalized$[rsp], xmm0
; Line 1463
	movss	xmm0, DWORD PTR CursorNormalized$[rsp+4]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR CursorNormalized$[rsp+4], xmm0
; Line 1464
	mov	rax, QWORD PTR Window$[rsp]
	mov	rdx, QWORD PTR [rax+520]
	mov	rcx, QWORD PTR CursorNormalized$[rsp]
	call	??D@YA?AUf32x2@@U0@Ui32x2@@@Z		; operator*
	mov	QWORD PTR Cursor$[rsp], rax
; Line 1467
	mov	rax, QWORD PTR Window$[rsp]
	add	rax, 564				; 00000234H
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 1469
	cvttss2si eax, DWORD PTR Cursor$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rcx+3024], eax
; Line 1470
	cvttss2si eax, DWORD PTR Cursor$[rsp+4]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rcx+3028], eax
; Line 1471
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ID3D11Grap
$LN2@ID3D11Grap:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ID3D11Grap:
	cmp	DWORD PTR I$1[rsp], 7
	jge	$LN3@ID3D11Grap
; Line 1472
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Window$[rsp]
	lea	rax, QWORD PTR [rcx+rax+604]
	mov	QWORD PTR Event$2[rsp], rax
; Line 1473
	mov	rax, QWORD PTR Event$2[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@ID3D11Grap
; Line 1474
	mov	rax, QWORD PTR Event$2[rsp]
	movsx	eax, WORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@ID3D11Grap
; Line 1475
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	ecx, DWORD PTR [rcx+3032]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rcx+3032], eax
; Line 1476
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	ecx, DWORD PTR [rcx+3036]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rcx+3036], eax
; Line 1477
	jmp	SHORT $LN7@ID3D11Grap
$LN6@ID3D11Grap:
; Line 1478
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	not	eax
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	ecx, DWORD PTR [rcx+3032]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rcx+3032], eax
$LN7@ID3D11Grap:
$LN5@ID3D11Grap:
; Line 1481
	jmp	$LN2@ID3D11Grap
$LN3@ID3D11Grap:
; Line 1483
	mov	eax, DWORD PTR Quitted$[rsp]
; Line 1484
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Tf32x4@@@Z ENDP ; ID3D11Graphics_PullWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 48
Draw$1 = 56
NewVertexShader$2 = 64
NewPixelShader$3 = 72
ClipMin$4 = 80
ClipMax$5 = 88
Offset$ = 96
Stride$ = 100
ConstBuffer$ = 104
VertexShader$ = 112
PixelShader$ = 120
tv89 = 128
VertexBuffer$ = 136
tv134 = 144
IndexBuffer$ = 152
tv145 = 160
tv153 = 168
tv164 = 176
tv175 = 184
tv187 = 192
tv219 = 200
ShaderResourceView$6 = 208
tv245 = 216
tv263 = 224
tv274 = 232
tv285 = 240
tv304 = 248
R$7 = 256
__$ArrayPad$ = 272
Graphics$ = 304
Mode$ = 312
?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z PROC ; ID3D11Graphics_RasterizeImmediateMode
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1351
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1355
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+82]
	test	eax, eax
	jne	SHORT $LN5@ID3D11Grap
; Line 1356
	jmp	$LN1@ID3D11Grap
$LN5@ID3D11Grap:
; Line 1359
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR Driver$[rsp], rax
; Line 1361
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4024				; 00000fb8H
	mov	QWORD PTR VertexBuffer$[rsp], rax
; Line 1362
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4040				; 00000fc8H
	mov	QWORD PTR IndexBuffer$[rsp], rax
; Line 1363
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4008				; 00000fa8H
	mov	QWORD PTR ConstBuffer$[rsp], rax
; Line 1365
	mov	rdx, QWORD PTR Mode$[rsp]
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z ; ID3D11Graphics_UploadImmediateMode
; Line 1368
	mov	DWORD PTR Stride$[rsp], 20
; Line 1369
	mov	DWORD PTR Offset$[rsp], 0
; Line 1371
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tv89[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rax+4128]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv89[rsp]
; Line 1372
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv134[rsp], rax
	mov	rax, QWORD PTR VertexBuffer$[rsp]
	add	rax, 8
	lea	rcx, QWORD PTR Offset$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, QWORD PTR Stride$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv134[rsp]
; Line 1373
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+152]
	mov	QWORD PTR tv145[rsp], rax
	xor	r9d, r9d
	mov	r8d, 57					; 00000039H
	mov	rax, QWORD PTR IndexBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv145[rsp]
; Line 1374
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR tv153[rsp], rax
	mov	edx, 4
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv153[rsp]
; Line 1375
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv164[rsp], rax
	mov	rax, QWORD PTR ConstBuffer$[rsp]
	add	rax, 8
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv164[rsp]
; Line 1377
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR tv175[rsp], rax
	mov	rax, QWORD PTR ConstBuffer$[rsp]
	add	rax, 8
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv175[rsp]
; Line 1378
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv187[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 7664				; 00001df0H
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv187[rsp]
; Line 1380
	mov	QWORD PTR VertexShader$[rsp], 0
; Line 1381
	mov	QWORD PTR PixelShader$[rsp], 0
; Line 1383
	mov	rax, QWORD PTR Mode$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR Draw$1[rsp], rax
	jmp	SHORT $LN4@ID3D11Grap
$LN2@ID3D11Grap:
	mov	rax, QWORD PTR Draw$1[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR Draw$1[rsp], rax
$LN4@ID3D11Grap:
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+82]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR Mode$[rsp]
	add	rax, QWORD PTR [rcx+88]
	cmp	QWORD PTR Draw$1[rsp], rax
	jae	$LN3@ID3D11Grap
; Line 1385
	mov	rax, QWORD PTR Draw$1[rsp]
	cmp	DWORD PTR [rax], 1
	jne	$LN6@ID3D11Grap
; Line 1391
	mov	rax, QWORD PTR Draw$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR ClipMin$4[rsp], rax
; Line 1392
	mov	rax, QWORD PTR Draw$1[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR ClipMax$5[rsp], rax
; Line 1394
	mov	eax, DWORD PTR ClipMax$5[rsp]
	cmp	DWORD PTR ClipMin$4[rsp], eax
	jge	SHORT $LN8@ID3D11Grap
	mov	eax, DWORD PTR ClipMax$5[rsp+4]
	cmp	DWORD PTR ClipMin$4[rsp+4], eax
	jge	SHORT $LN8@ID3D11Grap
; Line 1398
	mov	eax, DWORD PTR ClipMin$4[rsp]
	mov	DWORD PTR R$7[rsp], eax
	mov	eax, DWORD PTR ClipMin$4[rsp+4]
	mov	DWORD PTR R$7[rsp+4], eax
	mov	eax, DWORD PTR ClipMax$5[rsp]
	mov	DWORD PTR R$7[rsp+8], eax
	mov	eax, DWORD PTR ClipMax$5[rsp+4]
	mov	DWORD PTR R$7[rsp+12], eax
; Line 1399
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+360]
	mov	QWORD PTR tv219[rsp], rax
	lea	r8, QWORD PTR R$7[rsp]
	mov	edx, 1
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv219[rsp]
$LN8@ID3D11Grap:
; Line 1401
	jmp	$LN7@ID3D11Grap
$LN6@ID3D11Grap:
; Line 1402
	mov	rax, QWORD PTR Draw$1[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN9@ID3D11Grap
; Line 1404
	mov	QWORD PTR NewVertexShader$2[rsp], 0
; Line 1405
	mov	QWORD PTR NewPixelShader$3[rsp], 0
; Line 1408
	mov	rax, QWORD PTR Draw$1[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	$LN10@ID3D11Grap
; Line 1409
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4136]
	mov	QWORD PTR NewVertexShader$2[rsp], rax
; Line 1416
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4208]
	mov	QWORD PTR NewPixelShader$3[rsp], rax
; Line 1419
	mov	rax, QWORD PTR Draw$1[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z ; ID3D11Driver_AcquireTextureShaderAccess
	mov	QWORD PTR ShaderResourceView$6[rsp], rax
; Line 1420
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv245[rsp], rax
	lea	r9, QWORD PTR ShaderResourceView$6[rsp]
	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv245[rsp]
; Line 1422
	jmp	SHORT $LN11@ID3D11Grap
$LN10@ID3D11Grap:
; Line 1423
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4088]
	mov	QWORD PTR NewVertexShader$2[rsp], rax
; Line 1424
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4112]
	mov	QWORD PTR NewPixelShader$3[rsp], rax
; Line 1425
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv263[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv263[rsp]
$LN11@ID3D11Grap:
; Line 1428
	mov	rax, QWORD PTR NewVertexShader$2[rsp]
	cmp	QWORD PTR VertexShader$[rsp], rax
	je	SHORT $LN12@ID3D11Grap
; Line 1429
	mov	rax, QWORD PTR NewVertexShader$2[rsp]
	mov	QWORD PTR VertexShader$[rsp], rax
; Line 1430
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv274[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR NewVertexShader$2[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv274[rsp]
$LN12@ID3D11Grap:
; Line 1432
	mov	rax, QWORD PTR NewPixelShader$3[rsp]
	cmp	QWORD PTR PixelShader$[rsp], rax
	je	SHORT $LN13@ID3D11Grap
; Line 1433
	mov	rax, QWORD PTR NewPixelShader$3[rsp]
	mov	QWORD PTR PixelShader$[rsp], rax
; Line 1434
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv285[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR NewPixelShader$3[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv285[rsp]
$LN13@ID3D11Grap:
; Line 1437
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tv304[rsp], rax
	mov	rax, QWORD PTR Draw$1[rsp]
	movzx	eax, WORD PTR [rax+20]
	mov	rcx, QWORD PTR Draw$1[rsp]
	movzx	ecx, WORD PTR [rcx+16]
	mov	rdx, QWORD PTR Draw$1[rsp]
	movzx	edx, WORD PTR [rdx+18]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv304[rsp]
$LN9@ID3D11Grap:
$LN7@ID3D11Grap:
; Line 1440
	jmp	$LN2@ID3D11Grap
$LN3@ID3D11Grap:
$LN1@ID3D11Grap:
; Line 1441
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
?ID3D11Graphics_RasterizeImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z ENDP ; ID3D11Graphics_RasterizeImmediateMode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 48
VertexBuffer$ = 56
IndexBuffer$ = 64
ConstBuffer$ = 72
Uniform$1 = 80
R$2 = 88
L$3 = 92
B$4 = 96
T$5 = 100
Window$ = 104
tv171 = 112
tv235 = 120
tv249 = 128
tv264 = 136
tv279 = 144
tv289 = 152
ConstMapped$ = 160
IndexMapped$ = 176
VertexMapped$ = 192
$T6 = 208
__$ArrayPad$ = 272
Graphics$ = 320
Mode$ = 328
?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z PROC ; ID3D11Graphics_UploadImmediateMode
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1283
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1285
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR Driver$[rsp], rax
; Line 1287
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveWindow
	mov	QWORD PTR Window$[rsp], rax
; Line 1289
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4024				; 00000fb8H
	mov	QWORD PTR VertexBuffer$[rsp], rax
; Line 1290
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4040				; 00000fc8H
	mov	QWORD PTR IndexBuffer$[rsp], rax
; Line 1291
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4008				; 00000fa8H
	mov	QWORD PTR ConstBuffer$[rsp], rax
; Line 1293
	mov	rax, QWORD PTR ConstBuffer$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN2@ID3D11Grap
; Line 1294
	xor	r9d, r9d
	mov	r8d, 80					; 00000050H
	mov	edx, 9
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ; ID3D11Driver_CreateConstantBuffer
	mov	rcx, QWORD PTR ConstBuffer$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN2@ID3D11Grap:
; Line 1297
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+18]
	mov	r8d, eax
	mov	rdx, QWORD PTR IndexBuffer$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z ; ID3D11Driver_ReviseCapacity
	test	eax, eax
	je	SHORT $LN3@ID3D11Grap
; Line 1298
	mov	rax, QWORD PTR IndexBuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	rax, 1
	xor	r9d, r9d
	mov	r8d, eax
	mov	edx, 9
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ; ID3D11Driver_CreateIndexBuffer
	mov	rcx, QWORD PTR IndexBuffer$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN3@ID3D11Grap:
; Line 1301
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+34]
	mov	r8d, eax
	mov	rdx, QWORD PTR VertexBuffer$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z ; ID3D11Driver_ReviseCapacity
	test	eax, eax
	je	SHORT $LN4@ID3D11Grap
; Line 1302
	mov	rax, QWORD PTR VertexBuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	rax, rax, 20
	xor	r9d, r9d
	mov	r8d, eax
	mov	edx, 9
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ; ID3D11Driver_CreateVertexBuffer
	mov	rcx, QWORD PTR VertexBuffer$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN4@ID3D11Grap:
; Line 1306
	mov	rax, QWORD PTR ConstBuffer$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN6@ID3D11Grap
	mov	rax, QWORD PTR IndexBuffer$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN6@ID3D11Grap
	mov	rax, QWORD PTR VertexBuffer$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN5@ID3D11Grap
$LN6@ID3D11Grap:
; Line 1309
	jmp	$LN1@ID3D11Grap
$LN5@ID3D11Grap:
; Line 1316
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv171[rsp], rax
	lea	rax, QWORD PTR ConstMapped$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rax, QWORD PTR ConstBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv171[rsp]
	test	eax, eax
	jl	$LN7@ID3D11Grap
; Line 1318
	mov	rax, QWORD PTR ConstMapped$[rsp]
	mov	QWORD PTR Uniform$1[rsp], rax
; Line 1321
	xorps	xmm0, xmm0
	movss	DWORD PTR L$3[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR T$5[rsp], xmm0
; Line 1322
	mov	rax, QWORD PTR Window$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+520]
	movss	DWORD PTR R$2[rsp], xmm0
; Line 1323
	mov	rax, QWORD PTR Window$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+524]
	movss	DWORD PTR B$4[rsp], xmm0
; Line 1325
	movss	xmm0, DWORD PTR R$2[rsp]
	subss	xmm0, DWORD PTR L$3[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T6[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+16], xmm0
	movss	xmm0, DWORD PTR B$4[rsp]
	subss	xmm0, DWORD PTR T$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T6[rsp+20], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+24], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+28], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+32], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+36], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $T6[rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+44], xmm0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T6[rsp+48], xmm0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T6[rsp+52], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T6[rsp+56], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T6[rsp+60], xmm0
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, QWORD PTR Uniform$1[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1331
	mov	rax, QWORD PTR Uniform$1[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	movss	xmm0, DWORD PTR [rcx+96]
	movss	DWORD PTR [rax+64], xmm0
; Line 1332
	mov	rax, QWORD PTR Uniform$1[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	movss	xmm0, DWORD PTR [rcx+100]
	movss	DWORD PTR [rax+68], xmm0
; Line 1333
	mov	rax, QWORD PTR Uniform$1[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	movss	xmm0, DWORD PTR [rcx+104]
	movss	DWORD PTR [rax+72], xmm0
; Line 1335
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv235[rsp], rax
	xor	r8d, r8d
	mov	rax, QWORD PTR ConstBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv235[rsp]
$LN7@ID3D11Grap:
; Line 1339
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv249[rsp], rax
	lea	rax, QWORD PTR VertexMapped$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rax, QWORD PTR VertexBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv249[rsp]
	test	eax, eax
	jl	$LN8@ID3D11Grap
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv264[rsp], rax
	lea	rax, QWORD PTR IndexMapped$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rax, QWORD PTR IndexBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv264[rsp]
	test	eax, eax
	jl	SHORT $LN8@ID3D11Grap
; Line 1341
	mov	rdx, QWORD PTR IndexMapped$[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z ; ZenImmediateModeToIndexArray
; Line 1342
	mov	rdx, QWORD PTR VertexMapped$[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z ; ZenImmediateModeToVertexArray
$LN8@ID3D11Grap:
; Line 1344
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv279[rsp], rax
	xor	r8d, r8d
	mov	rax, QWORD PTR VertexBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv279[rsp]
; Line 1345
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv289[rsp], rax
	xor	r8d, r8d
	mov	rax, QWORD PTR IndexBuffer$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv289[rsp]
$LN1@ID3D11Grap:
; Line 1346
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_UploadImmediateMode@@YAXPEAUID3D11_GRAPHICS@@PEAUZEN_IMMODE@@@Z ENDP ; ID3D11Graphics_UploadImmediateMode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
tv75 = 40
Driver$ = 64
Buffer$ = 72
RequiredCapacity$ = 80
?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z PROC ; ID3D11Driver_ReviseCapacity
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1268
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR RequiredCapacity$[rsp], eax
	jbe	SHORT $LN4@ID3D11Driv
; Line 1269
	mov	rax, QWORD PTR Buffer$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN5@ID3D11Driv
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv75[rsp], rax
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv75[rsp]
$LN5@ID3D11Driv:
; Line 1274
	mov	rax, QWORD PTR Buffer$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN6@ID3D11Driv
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	DWORD PTR [rax], 1
$LN6@ID3D11Driv:
$LN2@ID3D11Driv:
; Line 1275
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR tv80[rsp], eax
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	mov	DWORD PTR [rax], ecx
	mov	eax, DWORD PTR tv80[rsp]
	cmp	DWORD PTR RequiredCapacity$[rsp], eax
	jbe	SHORT $LN3@ID3D11Driv
	jmp	SHORT $LN2@ID3D11Driv
$LN3@ID3D11Driv:
; Line 1276
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Driv
$LN4@ID3D11Driv:
; Line 1278
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 1279
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_ReviseCapacity@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_IMBUFF@@I@Z ENDP ; ID3D11Driver_ReviseCapacity
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
$T1 = 40
$T2 = 64
Caller$ = 128
Graphics$ = 136
External$ = 144
?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z PROC ; ID3D11Graphics_ReturnTextureChronicle
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1260
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR tv72[rsp], rax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8, QWORD PTR External$[rsp]
	mov	rdx, QWORD PTR tv72[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z ; ID3D11Driver_ReturnTextureChronicle
; Line 1261
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@@Z ENDP ; ID3D11Graphics_ReturnTextureChronicle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
$T1 = 40
$T2 = 64
Caller$ = 128
Graphics$ = 136
External$ = 144
Flags$ = 152
?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z PROC ; ID3D11Graphics_BorrowTextureChronicle
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1255
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR tv73[rsp], rax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9d, DWORD PTR Flags$[rsp]
	mov	r8, QWORD PTR External$[rsp]
	mov	rdx, QWORD PTR tv73[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z ; ID3D11Driver_BorrowTextureChronicle
; Line 1256
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_GRAPHICS@@PEAUZenTexture@@H@Z ENDP ; ID3D11Graphics_BorrowTextureChronicle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv70 = 40
Graphics$ = 64
External$ = 72
?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z PROC ; ID3D11Graphics_InternalizeTexture
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1244
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR External$[rsp]
	mov	QWORD PTR tv72[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR tv70[rsp], rax
	mov	rdx, QWORD PTR tv72[rsp]
	mov	rcx, QWORD PTR tv70[rsp]
	call	?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z ; ID3D11Driver_InternalizeTexture
; Line 1245
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Graphics_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_GRAPHICS@@U1@@Z ENDP ; ID3D11Graphics_InternalizeTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Record$1 = 32
Driver$ = 64
External$ = 72
?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z PROC ; ID3D11Driver_InternalizeTexture
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1184
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1185
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1720				; 000006b8H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z ; ZenAccessionTexture
	mov	QWORD PTR Record$1[rsp], rax
	cmp	QWORD PTR Record$1[rsp], 0
	je	$LN2@ID3D11Driv
; Line 1189
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	QWORD PTR [rax+408], 0
	je	SHORT $LN5@ID3D11Driv
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rcx, QWORD PTR External$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+92], ecx
	jne	SHORT $LN5@ID3D11Driv
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rcx, QWORD PTR External$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+84], ecx
	jne	SHORT $LN5@ID3D11Driv
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rcx, QWORD PTR External$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+88], ecx
	je	SHORT $LN4@ID3D11Driv
$LN5@ID3D11Driv:
; Line 1192
	mov	rax, QWORD PTR Record$1[rsp]
	add	rax, 80					; 00000050H
	mov	r8d, 20
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	memcpy
; Line 1194
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	QWORD PTR [rax+408], 0
	je	SHORT $LN6@ID3D11Driv
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rdx, QWORD PTR [rax+408]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ; ID3D11Driver_ReleaseTexture2D
$LN6@ID3D11Driv:
; Line 1196
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z ; ID3D11Driver_CreateTexture2D
	mov	rcx, QWORD PTR Record$1[rsp]
	mov	QWORD PTR [rcx+408], rax
$LN4@ID3D11Driv:
; Line 1199
	mov	rax, QWORD PTR Record$1[rsp]
	jmp	SHORT $LN1@ID3D11Driv
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1201
	xor	eax, eax
$LN3@ID3D11Driv:
$LN1@ID3D11Driv:
; Line 1219
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_InternalizeTexture@@YAPEAUZenTexture@@PEAUID3D11_DRIVER@@PEAU1@@Z ENDP ; ID3D11Driver_InternalizeTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Record$1 = 48
tv82 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Caller$ = 192
Driver$ = 200
External$ = 208
?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z PROC ; ID3D11Driver_ReturnTextureChronicle
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1166
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 1167
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1720				; 000006b8H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z ; ZenAccessionTexture
	mov	QWORD PTR Record$1[rsp], rax
	cmp	QWORD PTR Record$1[rsp], 0
	je	$LN2@ID3D11Driv
; Line 1168
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	QWORD PTR [rax+408], 0
	je	$LN4@ID3D11Driv
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	DWORD PTR [rax+400], 0
	je	SHORT $LN4@ID3D11Driv
; Line 1171
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv82[rsp], rax
	xor	r8d, r8d
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rdx, QWORD PTR [rax+408]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv82[rsp]
; Line 1172
	mov	rax, QWORD PTR Record$1[rsp]
	mov	eax, DWORD PTR [rax+400]
	dec	eax
	mov	rcx, QWORD PTR Record$1[rsp]
	mov	DWORD PTR [rcx+400], eax
; Line 1174
	mov	rax, QWORD PTR Record$1[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
; Line 1175
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Driv
$LN4@ID3D11Driv:
; Line 1176
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1177
	mov	DWORD PTR [rsp+32], 105			; 00000069H
	mov	r9d, 1177				; 00000499H
	lea	r8, OFFSET FLAT:$SG165233
	lea	rdx, OFFSET FLAT:$SG165234
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165232
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Driv:
; Line 1178
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 1179
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_ReturnTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z ENDP ; ID3D11Driver_ReturnTextureChronicle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Record$1 = 48
Map$2 = 56
tv72 = 60
tv86 = 64
tv134 = 68
tv180 = 72
tv146 = 76
tv167 = 80
Mapped$3 = 88
$T4 = 104
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 224
$T9 = 256
$T10 = 288
$T11 = 320
$T12 = 352
$T13 = 384
$T14 = 416
$T15 = 440
$T16 = 464
$T17 = 488
$T18 = 512
Caller$ = 576
Driver$ = 584
External$ = 592
Flags$ = 600
?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z PROC ; ID3D11Driver_BorrowTextureChronicle
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1122
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 552				; 00000228H
; Line 1124
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1720				; 000006b8H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z ; ZenAccessionTexture
	mov	QWORD PTR Record$1[rsp], rax
	cmp	QWORD PTR Record$1[rsp], 0
	je	$LN2@ID3D11Driv
; Line 1127
	mov	DWORD PTR [rsp+32], 100			; 00000064H
	mov	r9d, 1127				; 00000467H
	lea	r8, OFFSET FLAT:$SG165197
	lea	rdx, OFFSET FLAT:$SG165198
	lea	rcx, QWORD PTR $T14[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR External$[rsp]
	cmp	QWORD PTR Record$1[rsp], rax
	jne	SHORT $LN12@ID3D11Driv
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN13@ID3D11Driv
$LN12@ID3D11Driv:
	mov	DWORD PTR tv72[rsp], 0
$LN13@ID3D11Driv:
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG165195
	mov	r8d, DWORD PTR tv72[rsp]
	lea	rdx, OFFSET FLAT:$SG165196
	lea	rcx, QWORD PTR $T5[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 1129
	mov	DWORD PTR [rsp+32], 101			; 00000065H
	mov	r9d, 1129				; 00000469H
	lea	r8, OFFSET FLAT:$SG165201
	lea	rdx, OFFSET FLAT:$SG165202
	lea	rcx, QWORD PTR $T15[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	QWORD PTR [rax+408], 0
	je	SHORT $LN14@ID3D11Driv
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN15@ID3D11Driv
$LN14@ID3D11Driv:
	mov	DWORD PTR tv86[rsp], 0
$LN15@ID3D11Driv:
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG165199
	mov	r8d, DWORD PTR tv86[rsp]
	lea	rdx, OFFSET FLAT:$SG165200
	lea	rcx, QWORD PTR $T7[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 1130
	mov	DWORD PTR [rsp+32], 102			; 00000066H
	mov	r9d, 1130				; 0000046aH
	lea	r8, OFFSET FLAT:$SG165205
	lea	rdx, OFFSET FLAT:$SG165206
	lea	rcx, QWORD PTR $T16[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Record$1[rsp]
	mov	eax, DWORD PTR [rax+400]
	mov	DWORD PTR tv146[rsp], eax
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	DWORD PTR [rax+400], 0
	jne	SHORT $LN16@ID3D11Driv
	mov	DWORD PTR tv134[rsp], 1
	jmp	SHORT $LN17@ID3D11Driv
$LN16@ID3D11Driv:
	mov	DWORD PTR tv134[rsp], 0
$LN17@ID3D11Driv:
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv146[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG165203
	mov	r8d, DWORD PTR tv134[rsp]
	lea	rdx, OFFSET FLAT:$SG165204
	lea	rcx, QWORD PTR $T9[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 1132
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	DWORD PTR [rax+400], 0
	jne	$LN4@ID3D11Driv
; Line 1133
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	QWORD PTR [rax+408], 0
	je	$LN5@ID3D11Driv
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	DWORD PTR [rax+400], 0
	jne	$LN5@ID3D11Driv
; Line 1136
	mov	DWORD PTR Map$2[rsp], 1
; Line 1137
	cmp	DWORD PTR Flags$[rsp], 0
	jne	SHORT $LN7@ID3D11Driv
; Line 1138
	mov	DWORD PTR Map$2[rsp], 4
; Line 1139
	jmp	SHORT $LN8@ID3D11Driv
$LN7@ID3D11Driv:
; Line 1140
	cmp	DWORD PTR Flags$[rsp], 1
	jne	SHORT $LN9@ID3D11Driv
; Line 1141
	mov	DWORD PTR Map$2[rsp], 1
$LN9@ID3D11Driv:
$LN8@ID3D11Driv:
; Line 1144
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv167[rsp], rax
	lea	rax, QWORD PTR Mapped$3[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Map$2[rsp]
	xor	r8d, r8d
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rdx, QWORD PTR [rax+408]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv167[rsp]
	test	eax, eax
	jl	SHORT $LN10@ID3D11Driv
; Line 1147
	mov	rax, QWORD PTR External$[rsp]
	mov	ecx, DWORD PTR Mapped$3[rsp+8]
	mov	DWORD PTR [rax+16], ecx
; Line 1148
	mov	rax, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Mapped$3[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 1150
	mov	rax, QWORD PTR Record$1[rsp]
	mov	eax, DWORD PTR [rax+400]
	inc	eax
	mov	rcx, QWORD PTR Record$1[rsp]
	mov	DWORD PTR [rcx+400], eax
; Line 1152
	mov	eax, 1
	jmp	$LN1@ID3D11Driv
$LN10@ID3D11Driv:
; Line 1155
	mov	rax, QWORD PTR Record$1[rsp]
	lea	rdi, QWORD PTR [rax+32]
	mov	rsi, QWORD PTR Caller$[rsp]
	mov	ecx, 24
	rep movsb
; Line 1156
	jmp	$LN6@ID3D11Driv
$LN5@ID3D11Driv:
; Line 1158
	mov	DWORD PTR [rsp+32], 103			; 00000067H
	mov	r9d, 1158				; 00000486H
	lea	r8, OFFSET FLAT:$SG165217
	lea	rdx, OFFSET FLAT:$SG165218
	lea	rcx, QWORD PTR $T17[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG165215
	test	rax, rax
	jne	SHORT $LN18@ID3D11Driv
	mov	DWORD PTR tv180[rsp], 1
	jmp	SHORT $LN19@ID3D11Driv
$LN18@ID3D11Driv:
	mov	DWORD PTR tv180[rsp], 0
$LN19@ID3D11Driv:
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG165214
	mov	r8d, DWORD PTR tv180[rsp]
	lea	rdx, OFFSET FLAT:$SG165216
	lea	rcx, QWORD PTR $T11[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN6@ID3D11Driv:
$LN4@ID3D11Driv:
; Line 1159
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1160
	mov	DWORD PTR [rsp+32], 104			; 00000068H
	mov	r9d, 1160				; 00000488H
	lea	r8, OFFSET FLAT:$SG165220
	lea	rdx, OFFSET FLAT:$SG165221
	lea	rcx, QWORD PTR $T18[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165219
	mov	edx, 6
	lea	rcx, QWORD PTR $T13[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Driv:
; Line 1161
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 1162
	add	rsp, 552				; 00000228H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_BorrowTextureChronicle@@YAHUZenCaller@@PEAUID3D11_DRIVER@@PEAUZenTexture@@H@Z ENDP ; ID3D11Driver_BorrowTextureChronicle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Record$1 = 32
Driver$ = 64
Texture$ = 72
?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z PROC ; ID3D11Driver_AcquireTextureShaderAccess
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1096
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1097
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1720				; 000006b8H
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rcx, rax
	call	?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z ; ZenAccessionTexture
	mov	QWORD PTR Record$1[rsp], rax
	cmp	QWORD PTR Record$1[rsp], 0
	je	SHORT $LN2@ID3D11Driv
; Line 1099
	mov	rax, QWORD PTR Record$1[rsp]
; Line 1104
	mov	rax, QWORD PTR Record$1[rsp]
	cmp	QWORD PTR [rax+416], 0
	jne	SHORT $LN5@ID3D11Driv
; Line 1105
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rdx, QWORD PTR [rax+408]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ; ID3D11Driver_CreateTexture2DShaderAccess
	mov	rcx, QWORD PTR Record$1[rsp]
	mov	QWORD PTR [rcx+416], rax
$LN5@ID3D11Driv:
; Line 1108
	mov	rax, QWORD PTR Record$1[rsp]
	mov	rax, QWORD PTR [rax+416]
	jmp	SHORT $LN1@ID3D11Driv
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1109
	xor	eax, eax
$LN3@ID3D11Driv:
$LN1@ID3D11Driv:
; Line 1110
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_AcquireTextureShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z ENDP ; ID3D11Driver_AcquireTextureShaderAccess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 64
Shader$ = 72
ShaderType$ = 80
ByteCode$ = 88
?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z PROC ; ID3D11Driver_CreateShader
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 999
	mov	QWORD PTR [rsp+32], r9
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1000
	mov	rax, QWORD PTR Shader$[rsp]
	mov	DWORD PTR [rax], 0
; Line 1002
	mov	rax, QWORD PTR ByteCode$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR ByteCode$[rsp]
	mov	r9d, DWORD PTR [rax]
	movzx	r8d, WORD PTR ShaderType$[rsp]
	mov	rdx, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z ; ID3D11Driver_CreateShaderInternal
	test	eax, eax
	je	SHORT $LN2@ID3D11Driv
; Line 1004
	movzx	eax, WORD PTR ShaderType$[rsp]
	mov	rcx, QWORD PTR Shader$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1006
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1008
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 1009
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z ENDP ; ID3D11Driver_CreateShader
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
tv75 = 40
tv82 = 48
tv89 = 56
Driver$ = 80
Shader$ = 88
?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z PROC ; ID3D11Driver_ReleaseShader
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 980
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 983
	mov	rax, QWORD PTR Shader$[rsp]
	cmp	DWORD PTR [rax], 0
	je	$LN4@ID3D11Driv
	mov	rax, QWORD PTR Shader$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN5@ID3D11Driv
	cmp	DWORD PTR tv67[rsp], 2
	je	SHORT $LN6@ID3D11Driv
	cmp	DWORD PTR tv67[rsp], 3
	je	SHORT $LN7@ID3D11Driv
	jmp	SHORT $LN2@ID3D11Driv
$LN5@ID3D11Driv:
; Line 985
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv75[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR tv75[rsp]
	jmp	SHORT $LN2@ID3D11Driv
$LN6@ID3D11Driv:
; Line 987
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv82[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR tv82[rsp]
	jmp	SHORT $LN2@ID3D11Driv
$LN7@ID3D11Driv:
; Line 989
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv89[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR tv89[rsp]
$LN2@ID3D11Driv:
$LN4@ID3D11Driv:
; Line 991
	add	rsp, 72					; 00000048H
	ret	0
?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z ENDP ; ID3D11Driver_ReleaseShader
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
tv81 = 52
tv129 = 56
tv145 = 60
tv79 = 64
tv95 = 72
tv143 = 80
$T1 = 88
$T2 = 112
$T3 = 144
Driver$ = 208
Shader$ = 216
ShaderType$ = 224
ByteCodeSize$ = 232
ByteCodeData$ = 240
?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z PROC ; ID3D11Driver_CreateShaderInternal
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 963
	mov	DWORD PTR [rsp+32], r9d
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
; Line 965
	movzx	eax, WORD PTR ShaderType$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN4@ID3D11Driv
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN5@ID3D11Driv
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN6@ID3D11Driv
	jmp	$LN2@ID3D11Driv
$LN4@ID3D11Driv:
; Line 967
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tv79[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 16
	mov	ecx, DWORD PTR ByteCodeSize$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, ecx
	mov	rdx, QWORD PTR ByteCodeData$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv79[rsp]
	test	eax, eax
	jl	SHORT $LN8@ID3D11Driv
	mov	DWORD PTR tv81[rsp], 1
	jmp	SHORT $LN9@ID3D11Driv
$LN8@ID3D11Driv:
	mov	DWORD PTR tv81[rsp], 0
$LN9@ID3D11Driv:
	mov	eax, DWORD PTR tv81[rsp]
	jmp	$LN1@ID3D11Driv
$LN5@ID3D11Driv:
; Line 969
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv95[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 16
	mov	ecx, DWORD PTR ByteCodeSize$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, ecx
	mov	rdx, QWORD PTR ByteCodeData$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv95[rsp]
	test	eax, eax
	jl	SHORT $LN10@ID3D11Driv
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN11@ID3D11Driv
$LN10@ID3D11Driv:
	mov	DWORD PTR tv129[rsp], 0
$LN11@ID3D11Driv:
	mov	eax, DWORD PTR tv129[rsp]
	jmp	$LN1@ID3D11Driv
$LN6@ID3D11Driv:
; Line 971
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv143[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 16
	mov	ecx, DWORD PTR ByteCodeSize$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, ecx
	mov	rdx, QWORD PTR ByteCodeData$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv143[rsp]
	test	eax, eax
	jl	SHORT $LN12@ID3D11Driv
	mov	DWORD PTR tv145[rsp], 1
	jmp	SHORT $LN13@ID3D11Driv
$LN12@ID3D11Driv:
	mov	DWORD PTR tv145[rsp], 0
$LN13@ID3D11Driv:
	mov	eax, DWORD PTR tv145[rsp]
	jmp	SHORT $LN1@ID3D11Driv
$LN2@ID3D11Driv:
; Line 974
	mov	DWORD PTR [rsp+32], 96			; 00000060H
	mov	r9d, 974				; 000003ceH
	lea	r8, OFFSET FLAT:$SG165082
	lea	rdx, OFFSET FLAT:$SG165083
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165081
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 975
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 976
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateShaderInternal@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAX@Z ENDP ; ID3D11Driver_CreateShaderInternal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv85 = 48
tv83 = 56
Driver$ = 80
Layout$ = 88
LayoutHelper$ = 96
ByteCode$ = 104
?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z PROC ; ID3D11Driver_CreateInputLayout
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 948
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 949
	mov	rax, QWORD PTR LayoutHelper$[rsp]
	cmp	DWORD PTR [rax], 1
	jl	SHORT $LN2@ID3D11Driv
; Line 951
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR ByteCode$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Layout$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR ByteCode$[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR LayoutHelper$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR LayoutHelper$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv83[rsp]
	test	eax, eax
	jl	SHORT $LN5@ID3D11Driv
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN6@ID3D11Driv
$LN5@ID3D11Driv:
	mov	DWORD PTR tv85[rsp], 0
$LN6@ID3D11Driv:
	mov	eax, DWORD PTR tv85[rsp]
	jmp	SHORT $LN1@ID3D11Driv
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 953
	mov	eax, 1
$LN3@ID3D11Driv:
$LN1@ID3D11Driv:
; Line 954
	add	rsp, 72					; 00000048H
	ret	0
?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z ENDP ; ID3D11Driver_CreateInputLayout
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
DeviceFeatureLevel$ = 32
tv77 = 40
Driver$ = 64
ShaderKind$ = 72
CompilationFlags$ = 80
CompilationModel$ = 88
CompilationEntryPoint$ = 96
?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z PROC ; ID3D11Driver_GetShaderCompilationInfo
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 912
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 914
	mov	rax, QWORD PTR CompilationFlags$[rsp]
	mov	DWORD PTR [rax], -1
; Line 915
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165020
	mov	QWORD PTR [rax], rcx
; Line 916
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG165021
	mov	QWORD PTR [rax], rcx
; Line 918
	mov	rax, QWORD PTR CompilationFlags$[rsp]
	mov	DWORD PTR [rax], 5
; Line 920
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 1
	jne	SHORT $LN2@ID3D11Driv
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG165024
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 921
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 2
	jne	SHORT $LN4@ID3D11Driv
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG165027
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN5@ID3D11Driv
$LN4@ID3D11Driv:
; Line 922
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 3
	jne	SHORT $LN6@ID3D11Driv
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG165030
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN7@ID3D11Driv
$LN6@ID3D11Driv:
; Line 923
	xor	eax, eax
	jmp	$LN1@ID3D11Driv
$LN7@ID3D11Driv:
$LN5@ID3D11Driv:
$LN3@ID3D11Driv:
; Line 925
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+296]
	mov	QWORD PTR tv77[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv77[rsp]
	mov	DWORD PTR DeviceFeatureLevel$[rsp], eax
; Line 926
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 40960 ; 0000a000H
	je	SHORT $LN10@ID3D11Driv
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 41216 ; 0000a100H
	jne	SHORT $LN8@ID3D11Driv
$LN10@ID3D11Driv:
; Line 928
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 1
	jne	SHORT $LN11@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165036
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN12@ID3D11Driv
$LN11@ID3D11Driv:
; Line 929
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 2
	jne	SHORT $LN13@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165039
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN14@ID3D11Driv
$LN13@ID3D11Driv:
; Line 930
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 3
	jne	SHORT $LN15@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165041
	mov	QWORD PTR [rax], rcx
$LN15@ID3D11Driv:
$LN14@ID3D11Driv:
$LN12@ID3D11Driv:
; Line 931
	jmp	SHORT $LN9@ID3D11Driv
$LN8@ID3D11Driv:
; Line 932
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 45056 ; 0000b000H
	je	SHORT $LN18@ID3D11Driv
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 45312 ; 0000b100H
	jne	SHORT $LN16@ID3D11Driv
$LN18@ID3D11Driv:
; Line 934
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 1
	jne	SHORT $LN19@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165047
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN20@ID3D11Driv
$LN19@ID3D11Driv:
; Line 935
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 2
	jne	SHORT $LN21@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165050
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN22@ID3D11Driv
$LN21@ID3D11Driv:
; Line 936
	movzx	eax, WORD PTR ShaderKind$[rsp]
	cmp	eax, 3
	jne	SHORT $LN23@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG165052
	mov	QWORD PTR [rax], rcx
$LN23@ID3D11Driv:
$LN22@ID3D11Driv:
$LN20@ID3D11Driv:
	jmp	SHORT $LN17@ID3D11Driv
$LN16@ID3D11Driv:
; Line 937
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Driv
$LN17@ID3D11Driv:
$LN9@ID3D11Driv:
; Line 939
	mov	eax, 1
$LN1@ID3D11Driv:
; Line 940
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z ENDP ; ID3D11Driver_GetShaderCompilationInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
R$ = 40
T$ = 48
D$ = 80
__$ArrayPad$ = 352
Device$ = 400
?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z PROC ; ID3D11Device_CreateDefaultBlendState
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 805
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 808
	mov	DWORD PTR T$[rsp], 1
; Line 809
	mov	DWORD PTR T$[rsp+4], 5
; Line 810
	mov	DWORD PTR T$[rsp+8], 6
; Line 811
	mov	DWORD PTR T$[rsp+12], 1
; Line 812
	mov	DWORD PTR T$[rsp+16], 1
; Line 813
	mov	DWORD PTR T$[rsp+20], 1
; Line 814
	mov	DWORD PTR T$[rsp+24], 1
; Line 815
	mov	BYTE PTR T$[rsp+28], 15
; Line 817
	lea	rax, QWORD PTR D$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 264				; 00000108H
	rep stosb
; Line 818
	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	lea	rcx, QWORD PTR T$[rsp]
	lea	rdi, QWORD PTR D$[rsp+rax+8]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 834
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+160]
	mov	QWORD PTR tv77[rsp], rax
	lea	r8, QWORD PTR R$[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv77[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Devi
; Line 835
	mov	rax, QWORD PTR R$[rsp]
	jmp	SHORT $LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 837
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 838
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z ENDP ; ID3D11Device_CreateDefaultBlendState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Texture$ = 32
State$ = 40
View$ = 48
tv71 = 56
tv81 = 64
tv91 = 72
S$ = 80
T$ = 136
__$ArrayPad$ = 184
Device$ = 208
SizeX$ = 216
SizeY$ = 224
TheState$ = 232
TheView$ = 240
?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z PROC ; ID3D11Device_CreateDefaultDepthStencil
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 704
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 705
	mov	QWORD PTR State$[rsp], 0
; Line 706
	mov	QWORD PTR Texture$[rsp], 0
; Line 707
	mov	QWORD PTR View$[rsp], 0
; Line 734
	mov	DWORD PTR S$[rsp], 0
; Line 735
	mov	DWORD PTR S$[rsp+4], 1
; Line 736
	mov	DWORD PTR S$[rsp+8], 2
; Line 737
	mov	DWORD PTR S$[rsp+12], 0
; Line 738
	mov	BYTE PTR S$[rsp+16], 255		; 000000ffH
; Line 739
	mov	BYTE PTR S$[rsp+17], 255		; 000000ffH
; Line 741
	mov	DWORD PTR S$[rsp+20], 1
; Line 742
	mov	DWORD PTR S$[rsp+24], 8
; Line 743
	mov	DWORD PTR S$[rsp+28], 1
; Line 744
	mov	DWORD PTR S$[rsp+32], 8
; Line 747
	mov	DWORD PTR S$[rsp+36], 1
; Line 748
	mov	DWORD PTR S$[rsp+40], 8
; Line 749
	mov	DWORD PTR S$[rsp+44], 1
; Line 750
	mov	DWORD PTR S$[rsp+48], 8
; Line 766
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+168]
	mov	QWORD PTR tv71[rsp], rax
	lea	r8, QWORD PTR State$[rsp]
	lea	rdx, QWORD PTR S$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv71[rsp]
	test	eax, eax
	jge	SHORT $LN2@ID3D11Devi
; Line 768
	xor	eax, eax
	jmp	$LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 772
	mov	eax, DWORD PTR SizeX$[rsp]
	mov	DWORD PTR T$[rsp], eax
; Line 773
	mov	eax, DWORD PTR SizeY$[rsp]
	mov	DWORD PTR T$[rsp+4], eax
; Line 774
	mov	DWORD PTR T$[rsp+8], 1
; Line 775
	mov	DWORD PTR T$[rsp+12], 1
; Line 776
	mov	DWORD PTR T$[rsp+16], 40		; 00000028H
; Line 778
	mov	DWORD PTR T$[rsp+20], 1
; Line 779
	mov	DWORD PTR T$[rsp+24], 0
; Line 781
	mov	DWORD PTR T$[rsp+28], 0
; Line 782
	mov	DWORD PTR T$[rsp+32], 64		; 00000040H
; Line 783
	mov	DWORD PTR T$[rsp+36], 0
; Line 784
	mov	DWORD PTR T$[rsp+40], 0
; Line 787
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv81[rsp], rax
	lea	r9, QWORD PTR Texture$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR T$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv81[rsp]
	test	eax, eax
	jge	SHORT $LN3@ID3D11Devi
; Line 789
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Devi
$LN3@ID3D11Devi:
; Line 792
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv91[rsp], rax
	lea	r9, QWORD PTR View$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv91[rsp]
	test	eax, eax
	jge	SHORT $LN4@ID3D11Devi
; Line 795
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Devi
$LN4@ID3D11Devi:
; Line 798
	mov	rax, QWORD PTR TheState$[rsp]
	mov	rcx, QWORD PTR State$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 799
	mov	rax, QWORD PTR TheView$[rsp]
	mov	rcx, QWORD PTR View$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 800
	mov	eax, 1
$LN1@ID3D11Devi:
; Line 801
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z ENDP ; ID3D11Device_CreateDefaultDepthStencil
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv148 = 48
Result$1 = 56
tv154 = 64
D$ = 72
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 232
T$ = 256
__$ArrayPad$ = 304
Driver$ = 352
Texture$ = 360
?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z PROC ; ID3D11Driver_CreateTexture2D
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 666
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	DWORD PTR [rsp+32], 94			; 0000005eH
	mov	r9d, 666				; 0000029aH
	lea	r8, OFFSET FLAT:$SG164966
	lea	rdx, OFFSET FLAT:$SG164967
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	lea	r8, OFFSET FLAT:$SG164965
	mov	edx, 2
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 668
	mov	r8d, 44					; 0000002cH
	xor	edx, edx
	lea	rcx, QWORD PTR T$[rsp]
	call	memset
; Line 669
	mov	r8d, 16
	xor	edx, edx
	lea	rcx, QWORD PTR D$[rsp]
	call	memset
; Line 672
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?ZenHasBindTarget@@YAHH@Z		; ZenHasBindTarget
	test	eax, eax
	jne	SHORT $LN2@ID3D11Driv
; Line 673
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax]
	bts	eax, 7
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@ID3D11Driv:
; Line 676
	lea	r9, QWORD PTR T$[rsp+36]
	lea	r8, QWORD PTR T$[rsp+28]
	lea	rdx, QWORD PTR T$[rsp+32]
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z ; ZenExternalizeResourceAccessFlags
	test	eax, eax
	je	$LN3@ID3D11Driv
; Line 677
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR T$[rsp], eax
; Line 678
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR T$[rsp+4], eax
; Line 679
	mov	DWORD PTR T$[rsp+8], 1
; Line 680
	mov	DWORD PTR T$[rsp+12], 1
; Line 681
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z ; PIXEL_FORMAT_DXGIF
	mov	DWORD PTR T$[rsp+16], eax
; Line 682
	mov	DWORD PTR T$[rsp+20], 1
; Line 683
	mov	DWORD PTR T$[rsp+24], 0
; Line 684
	mov	DWORD PTR T$[rsp+40], 0
; Line 685
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR D$[rsp], rax
; Line 686
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR D$[rsp+8], eax
; Line 688
	mov	QWORD PTR Result$1[rsp], 0
; Line 689
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv154[rsp], rax
	mov	rax, QWORD PTR Texture$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN6@ID3D11Driv
	lea	rax, QWORD PTR D$[rsp]
	mov	QWORD PTR tv148[rsp], rax
	jmp	SHORT $LN7@ID3D11Driv
$LN6@ID3D11Driv:
	mov	QWORD PTR tv148[rsp], 0
$LN7@ID3D11Driv:
	lea	r9, QWORD PTR Result$1[rsp]
	mov	r8, QWORD PTR tv148[rsp]
	lea	rdx, QWORD PTR T$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv154[rsp]
	test	eax, eax
	jl	SHORT $LN4@ID3D11Driv
; Line 690
	mov	rax, QWORD PTR Result$1[rsp]
	jmp	SHORT $LN1@ID3D11Driv
$LN4@ID3D11Driv:
$LN3@ID3D11Driv:
; Line 693
	mov	DWORD PTR [rsp+32], 95			; 0000005fH
	mov	r9d, 693				; 000002b5H
	lea	r8, OFFSET FLAT:$SG164972
	lea	rdx, OFFSET FLAT:$SG164973
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164971
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 694
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 695
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateTexture2D@@YAPEAUID3D11Texture2D@@PEAUID3D11_DRIVER@@PEAUZenTexture@@@Z ENDP ; ID3D11Driver_CreateTexture2D
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
Driver$ = 64
Resource$ = 72
?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z PROC ; ID3D11Driver_ReleaseTexture2D
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 660
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 661
	mov	rax, QWORD PTR Resource$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv69[rsp], rax
	mov	rcx, QWORD PTR Resource$[rsp]
	call	QWORD PTR tv69[rsp]
; Line 662
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_ReleaseTexture2D@@YAXPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ENDP ; ID3D11Driver_ReleaseTexture2D
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 48
tv81 = 56
I$1 = 64
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 232
Driver$ = 288
Texture$ = 296
?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z PROC ; ID3D11Driver_CreateTexture2DRenderTargetView
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 644
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	QWORD PTR Result$[rsp], 0
; Line 645
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z ; ID3D11Texture2D_CompareBindFlags
	test	eax, eax
	je	$LN2@ID3D11Driv
; Line 646
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR I$1[rsp]
	call	memset
; Line 647
	mov	DWORD PTR I$1[rsp], 0
; Line 648
	mov	DWORD PTR I$1[rsp+4], 4
; Line 649
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv81[rsp], rax
	lea	r9, QWORD PTR Result$[rsp]
	lea	r8, QWORD PTR I$1[rsp]
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv81[rsp]
	test	eax, eax
	jge	SHORT $LN4@ID3D11Driv
; Line 650
	mov	DWORD PTR [rsp+32], 92			; 0000005cH
	mov	r9d, 650				; 0000028aH
	lea	r8, OFFSET FLAT:$SG164944
	lea	rdx, OFFSET FLAT:$SG164945
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164943
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ID3D11Driv:
; Line 652
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 653
	mov	DWORD PTR [rsp+32], 93			; 0000005dH
	mov	r9d, 653				; 0000028dH
	lea	r8, OFFSET FLAT:$SG164947
	lea	rdx, OFFSET FLAT:$SG164948
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164946
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Driv:
; Line 655
	mov	rax, QWORD PTR Result$[rsp]
; Line 656
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ENDP ; ID3D11Driver_CreateTexture2DRenderTargetView
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 48
tv81 = 56
I$1 = 64
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 232
Driver$ = 288
Texture$ = 296
?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z PROC ; ID3D11Driver_CreateTexture2DShaderAccess
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 626
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	QWORD PTR Result$[rsp], 0
; Line 627
	mov	edx, 8
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z ; ID3D11Texture2D_CompareBindFlags
	test	eax, eax
	je	$LN2@ID3D11Driv
; Line 628
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR I$1[rsp]
	call	memset
; Line 629
	mov	DWORD PTR I$1[rsp], 0
; Line 630
	mov	DWORD PTR I$1[rsp+4], 4
; Line 631
	mov	DWORD PTR I$1[rsp+8], 0
; Line 632
	mov	DWORD PTR I$1[rsp+12], 1
; Line 633
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv81[rsp], rax
	lea	r9, QWORD PTR Result$[rsp]
	lea	r8, QWORD PTR I$1[rsp]
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv81[rsp]
	test	eax, eax
	jge	SHORT $LN4@ID3D11Driv
; Line 634
	mov	DWORD PTR [rsp+32], 90			; 0000005aH
	mov	r9d, 634				; 0000027aH
	lea	r8, OFFSET FLAT:$SG164925
	lea	rdx, OFFSET FLAT:$SG164926
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164924
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ID3D11Driv:
; Line 636
	jmp	SHORT $LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 637
	mov	DWORD PTR [rsp+32], 91			; 0000005bH
	mov	r9d, 637				; 0000027dH
	lea	r8, OFFSET FLAT:$SG164928
	lea	rdx, OFFSET FLAT:$SG164929
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164927
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Driv:
; Line 639
	mov	rax, QWORD PTR Result$[rsp]
; Line 640
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateTexture2DShaderAccess@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ENDP ; ID3D11Driver_CreateTexture2DShaderAccess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
GreatInfo$1 = 40
__$ArrayPad$ = 88
Texture$ = 112
SizeX$ = 120
SizeY$ = 128
?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z PROC ; ID3D11Texture2D_GetSize
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 509
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	cmp	QWORD PTR Texture$[rsp], 0
	je	SHORT $LN2@ID3D11Text
; Line 511
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv70[rsp], rax
	lea	rdx, QWORD PTR GreatInfo$1[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 512
	mov	rax, QWORD PTR SizeX$[rsp]
	mov	ecx, DWORD PTR GreatInfo$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 513
	mov	rax, QWORD PTR SizeY$[rsp]
	mov	ecx, DWORD PTR GreatInfo$1[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 514
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Text
; Line 515
	jmp	SHORT $LN3@ID3D11Text
$LN2@ID3D11Text:
; Line 516
	mov	rax, QWORD PTR SizeX$[rsp]
	mov	DWORD PTR [rax], -1
; Line 517
	mov	rax, QWORD PTR SizeY$[rsp]
	mov	DWORD PTR [rax], -1
; Line 518
	xor	eax, eax
$LN3@ID3D11Text:
$LN1@ID3D11Text:
; Line 520
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z ENDP ; ID3D11Texture2D_GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv70 = 40
GreatInfo$1 = 48
__$ArrayPad$ = 96
Texture$ = 128
BindFlags$ = 136
?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z PROC ; ID3D11Texture2D_CompareBindFlags
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 498
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	cmp	QWORD PTR Texture$[rsp], 0
	je	SHORT $LN2@ID3D11Text
; Line 500
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv70[rsp], rax
	lea	rdx, QWORD PTR GreatInfo$1[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 501
	mov	eax, DWORD PTR BindFlags$[rsp]
	mov	ecx, DWORD PTR GreatInfo$1[rsp+32]
	and	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR BindFlags$[rsp]
	jne	SHORT $LN5@ID3D11Text
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN6@ID3D11Text
$LN5@ID3D11Text:
	mov	DWORD PTR tv73[rsp], 0
$LN6@ID3D11Text:
	mov	eax, DWORD PTR tv73[rsp]
	jmp	SHORT $LN1@ID3D11Text
; Line 502
	jmp	SHORT $LN3@ID3D11Text
$LN2@ID3D11Text:
; Line 503
	xor	eax, eax
$LN3@ID3D11Text:
$LN1@ID3D11Text:
; Line 505
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?ID3D11Texture2D_CompareBindFlags@@YAHPEAUID3D11Texture2D@@H@Z ENDP ; ID3D11Texture2D_CompareBindFlags
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
F$ = 32
?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z PROC	; PIXEL_FORMAT_DXGIF
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 488
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN5@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 4
	je	SHORT $LN4@PIXEL_FORM
	jmp	SHORT $LN6@PIXEL_FORM
$LN4@PIXEL_FORM:
; Line 490
	mov	eax, 28
	jmp	SHORT $LN1@PIXEL_FORM
$LN5@PIXEL_FORM:
; Line 491
	mov	eax, 61					; 0000003dH
	jmp	SHORT $LN1@PIXEL_FORM
$LN6@PIXEL_FORM:
; Line 492
	xor	eax, eax
$LN1@PIXEL_FORM:
; Line 494
	add	rsp, 24
	ret	0
?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z ENDP	; PIXEL_FORMAT_DXGIF
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Success$ = 64
tv86 = 68
tv170 = 72
Factory$ = 80
tv84 = 88
tv94 = 96
tv168 = 104
FD$ = 112
D$ = 136
__$ArrayPad$ = 184
Driver$ = 208
WindowNativeHandle$ = 216
BufferSize$ = 224
SwapChain$ = 232
Texture2D$ = 240
FrameAwaitNativeHandle$ = 248
?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z PROC ; ID3D11Driver_CreateSwapChain
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 437
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 438
	mov	DWORD PTR Success$[rsp], 0
; Line 441
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	lea	rcx, QWORD PTR D$[rsp]
	call	memset
; Line 442
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR FD$[rsp]
	call	memset
; Line 444
	mov	eax, DWORD PTR BufferSize$[rsp]
	mov	DWORD PTR D$[rsp], eax
; Line 445
	mov	eax, DWORD PTR BufferSize$[rsp+4]
	mov	DWORD PTR D$[rsp+4], eax
; Line 446
	mov	DWORD PTR D$[rsp+8], 28
; Line 447
	mov	DWORD PTR D$[rsp+16], 1
; Line 448
	mov	DWORD PTR D$[rsp+20], 0
; Line 449
	mov	DWORD PTR D$[rsp+24], 32		; 00000020H
; Line 450
	mov	DWORD PTR D$[rsp+28], 2
; Line 451
	mov	DWORD PTR D$[rsp+36], 3
; Line 452
	mov	DWORD PTR D$[rsp+44], 66		; 00000042H
; Line 453
	mov	DWORD PTR FD$[rsp], 1
; Line 454
	mov	DWORD PTR FD$[rsp+4], 1
; Line 455
	mov	DWORD PTR FD$[rsp+16], 1
; Line 457
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z ; ID3D11Driver_GetFactory
	mov	QWORD PTR Factory$[rsp], rax
; Line 459
	mov	rax, QWORD PTR Factory$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR SwapChain$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR FD$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR D$[rsp]
	mov	r8, QWORD PTR WindowNativeHandle$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+264]
	mov	rcx, QWORD PTR Factory$[rsp]
	call	QWORD PTR tv84[rsp]
	test	eax, eax
	jl	SHORT $LN7@ID3D11Driv
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@ID3D11Driv
$LN7@ID3D11Driv:
	mov	DWORD PTR tv86[rsp], 0
$LN8@ID3D11Driv:
	mov	eax, DWORD PTR tv86[rsp]
	mov	DWORD PTR Success$[rsp], eax
	cmp	DWORD PTR Success$[rsp], 0
	je	$LN2@ID3D11Driv
; Line 462
	cmp	QWORD PTR FrameAwaitNativeHandle$[rsp], 0
	je	SHORT $LN3@ID3D11Driv
	mov	rax, QWORD PTR SwapChain$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv94[rsp], rax
	mov	rax, QWORD PTR SwapChain$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv94[rsp]
	mov	rcx, QWORD PTR FrameAwaitNativeHandle$[rsp]
	mov	QWORD PTR [rcx], rax
$LN3@ID3D11Driv:
; Line 464
	cmp	QWORD PTR Texture2D$[rsp], 0
	je	SHORT $LN4@ID3D11Driv
; Line 465
	mov	rax, QWORD PTR SwapChain$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv168[rsp], rax
	mov	r9, QWORD PTR Texture2D$[rsp]
	lea	r8, OFFSET FLAT:IID_ID3D11Texture2D
	xor	edx, edx
	mov	rax, QWORD PTR SwapChain$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR tv168[rsp]
	test	eax, eax
	jl	SHORT $LN9@ID3D11Driv
	mov	DWORD PTR tv170[rsp], 1
	jmp	SHORT $LN10@ID3D11Driv
$LN9@ID3D11Driv:
	mov	DWORD PTR tv170[rsp], 0
$LN10@ID3D11Driv:
	mov	eax, DWORD PTR tv170[rsp]
	mov	DWORD PTR Success$[rsp], eax
$LN4@ID3D11Driv:
$LN2@ID3D11Driv:
; Line 470
	mov	rdx, QWORD PTR Factory$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z ; ID3D11Driver_ReleaseFactory
; Line 471
	mov	eax, DWORD PTR Success$[rsp]
; Line 472
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z ENDP ; ID3D11Driver_CreateSwapChain
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
Driver$ = 64
Factory$ = 72
?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z PROC ; ID3D11Driver_ReleaseFactory
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 425
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 426
	mov	rax, QWORD PTR Factory$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv69[rsp], rax
	mov	rcx, QWORD PTR Factory$[rsp]
	call	QWORD PTR tv69[rsp]
; Line 427
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_ReleaseFactory@@YAXPEAUID3D11_DRIVER@@PEAUIDXGIFactory2@@@Z ENDP ; ID3D11Driver_ReleaseFactory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
DXGIAdapter$1 = 48
DXGIDevice$ = 56
DXGIFactory$ = 64
tv73 = 72
tv81 = 80
tv90 = 88
tv139 = 96
tv144 = 104
$T2 = 112
$T3 = 144
$T4 = 176
Driver$ = 240
?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z PROC ; ID3D11Driver_GetFactory
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 407
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	QWORD PTR DXGIFactory$[rsp], 0
; Line 408
	mov	QWORD PTR DXGIDevice$[rsp], 0
; Line 409
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv73[rsp], rax
	lea	r8, QWORD PTR DXGIDevice$[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIDevice
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv73[rsp]
	test	eax, eax
	jl	$LN2@ID3D11Driv
; Line 410
	mov	QWORD PTR DXGIAdapter$1[rsp], 0
; Line 411
	mov	rax, QWORD PTR DXGIDevice$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv81[rsp], rax
	lea	rdx, QWORD PTR DXGIAdapter$1[rsp]
	mov	rcx, QWORD PTR DXGIDevice$[rsp]
	call	QWORD PTR tv81[rsp]
	test	eax, eax
	jl	$LN3@ID3D11Driv
; Line 413
	mov	rax, QWORD PTR DXGIAdapter$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv90[rsp], rax
	lea	r8, QWORD PTR DXGIFactory$[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIFactory2
	mov	rcx, QWORD PTR DXGIAdapter$1[rsp]
	call	QWORD PTR tv90[rsp]
	test	eax, eax
	jge	SHORT $LN4@ID3D11Driv
; Line 414
	mov	DWORD PTR [rsp+32], 86			; 00000056H
	mov	r9d, 414				; 0000019eH
	lea	r8, OFFSET FLAT:$SG164765
	lea	rdx, OFFSET FLAT:$SG164766
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164764
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ID3D11Driv:
; Line 416
	mov	rax, QWORD PTR DXGIAdapter$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv139[rsp], rax
	mov	rcx, QWORD PTR DXGIAdapter$1[rsp]
	call	QWORD PTR tv139[rsp]
$LN3@ID3D11Driv:
; Line 418
	mov	rax, QWORD PTR DXGIDevice$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv144[rsp], rax
	mov	rcx, QWORD PTR DXGIDevice$[rsp]
	call	QWORD PTR tv144[rsp]
$LN2@ID3D11Driv:
; Line 420
	mov	rax, QWORD PTR DXGIFactory$[rsp]
; Line 421
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_GetFactory@@YAPEAUIDXGIFactory2@@PEAUID3D11_DRIVER@@@Z ENDP ; ID3D11Driver_GetFactory
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Access$ = 8
?ZenHasBindTarget@@YAHH@Z PROC				; ZenHasBindTarget
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 387
	mov	DWORD PTR [rsp+8], ecx
; Line 388
	mov	eax, DWORD PTR Access$[rsp]
	and	eax, 1968				; 000007b0H
; Line 395
	ret	0
?ZenHasBindTarget@@YAHH@Z ENDP				; ZenHasBindTarget
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
AccessFlags$ = 176
BindFlags$ = 184
Usage$ = 192
LocalAccess$ = 200
?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z PROC ; ZenExternalizeResourceAccessFlags
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 335
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 357
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN2@ZenExterna
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 32					; 00000020H
	mov	rcx, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@ZenExterna:
; Line 358
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN3@ZenExterna
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 64					; 00000040H
	mov	rcx, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@ZenExterna:
; Line 359
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN4@ZenExterna
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 8
	mov	rcx, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@ZenExterna:
; Line 360
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN5@ZenExterna
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 4
	mov	rcx, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@ZenExterna:
; Line 361
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN6@ZenExterna
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 2
	mov	rcx, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@ZenExterna:
; Line 362
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN7@ZenExterna
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@ZenExterna:
; Line 364
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 12
	test	eax, eax
	jne	SHORT $LN8@ZenExterna
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN8@ZenExterna
; Line 366
	mov	rax, QWORD PTR Usage$[rsp]
	mov	DWORD PTR [rax], 1
; Line 367
	mov	rax, QWORD PTR LocalAccess$[rsp]
	mov	DWORD PTR [rax], 0
; Line 368
	mov	eax, 1
	jmp	$LN1@ZenExterna
; Line 369
	jmp	$LN9@ZenExterna
$LN8@ZenExterna:
; Line 370
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 12
	test	eax, eax
	jne	SHORT $LN10@ZenExterna
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 3
	test	eax, eax
	je	SHORT $LN10@ZenExterna
; Line 372
	mov	rax, QWORD PTR Usage$[rsp]
	mov	DWORD PTR [rax], 0
; Line 373
	mov	rax, QWORD PTR LocalAccess$[rsp]
	mov	DWORD PTR [rax], 0
; Line 374
	mov	eax, 1
	jmp	$LN1@ZenExterna
; Line 375
	jmp	$LN11@ZenExterna
$LN10@ZenExterna:
; Line 376
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN12@ZenExterna
	mov	eax, DWORD PTR AccessFlags$[rsp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN12@ZenExterna
; Line 378
	mov	rax, QWORD PTR Usage$[rsp]
	mov	DWORD PTR [rax], 2
; Line 379
	mov	rax, QWORD PTR LocalAccess$[rsp]
	mov	DWORD PTR [rax], 65536			; 00010000H
; Line 380
	mov	eax, 1
	jmp	SHORT $LN1@ZenExterna
	jmp	SHORT $LN13@ZenExterna
$LN12@ZenExterna:
; Line 381
	mov	DWORD PTR [rsp+32], 85			; 00000055H
	mov	r9d, 381				; 0000017dH
	lea	r8, OFFSET FLAT:$SG164741
	lea	rdx, OFFSET FLAT:$SG164742
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164740
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN13@ZenExterna:
$LN11@ZenExterna:
$LN9@ZenExterna:
; Line 382
	xor	eax, eax
$LN1@ZenExterna:
; Line 383
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z ENDP ; ZenExternalizeResourceAccessFlags
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ElementCount$ = 32
ElementList$ = 40
ElementArray$ = 48
tv78 = 56
$T1 = 64
$T2 = 72
__$ReturnAddress$ = 128
Ignored$ = 136
?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ PROC ; D3D11DescribeInputLayoutInternal
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1539
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 1541
	mov	edx, 64					; 00000040H
	xor	ecx, ecx
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR ElementArray$[rsp], rax
; Line 1544
	lea	rax, QWORD PTR Ignored$[rsp+8]
	mov	QWORD PTR ElementList$[rsp], rax
; Line 1546
	mov	DWORD PTR ElementCount$[rsp], 0
$LN2@D3D11Descr:
; Line 1548
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN8@D3D11Descr
	mov	rax, QWORD PTR ElementList$[rsp]
	add	rax, 8
	mov	QWORD PTR ElementList$[rsp], rax
	mov	rax, QWORD PTR ElementList$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv78[rsp], rax
	jmp	SHORT $LN9@D3D11Descr
$LN8@D3D11Descr:
	mov	rax, QWORD PTR ElementList$[rsp]
	add	rax, 8
	mov	QWORD PTR ElementList$[rsp], rax
	mov	rax, QWORD PTR ElementList$[rsp]
	sub	rax, 8
	mov	QWORD PTR tv78[rsp], rax
$LN9@D3D11Descr:
	mov	rax, QWORD PTR tv78[rsp]
	mov	QWORD PTR $T1[rsp], rax
	movsxd	rax, DWORD PTR ElementCount$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ElementArray$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR $T1[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 1549
	movsxd	rax, DWORD PTR ElementCount$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ElementArray$[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN5@D3D11Descr
; Line 1550
	mov	eax, DWORD PTR ElementCount$[rsp]
	inc	eax
	mov	DWORD PTR ElementCount$[rsp], eax
; Line 1551
	jmp	SHORT $LN6@D3D11Descr
$LN5@D3D11Descr:
	jmp	SHORT $LN3@D3D11Descr
$LN6@D3D11Descr:
; Line 1552
	jmp	$LN2@D3D11Descr
$LN3@D3D11Descr:
; Line 1554
	mov	QWORD PTR ElementList$[rsp], 0
; Line 1556
	mov	eax, DWORD PTR ElementCount$[rsp]
	mov	DWORD PTR $T2[rsp], eax
	mov	rax, QWORD PTR ElementArray$[rsp]
	mov	QWORD PTR $T2[rsp+8], rax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1557
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ENDP ; D3D11DescribeInputLayoutInternal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$ = 0
__$ReturnAddress$ = 64
SemanticName$ = 72
SemanticIndex$ = 80
Format$ = 88
InputSlot$ = 96
AlignedByteOffset$ = 104
InputSlotClass$ = 112
InstanceDataStepRate$ = 120
?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z PROC ; D3D11DescribeInputElement
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1525
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 1527
	mov	rax, QWORD PTR SemanticName$[rsp]
	mov	QWORD PTR I$[rsp], rax
; Line 1528
	mov	eax, DWORD PTR SemanticIndex$[rsp]
	mov	DWORD PTR I$[rsp+8], eax
; Line 1529
	mov	eax, DWORD PTR Format$[rsp]
	mov	DWORD PTR I$[rsp+12], eax
; Line 1530
	mov	eax, DWORD PTR InputSlot$[rsp]
	mov	DWORD PTR I$[rsp+16], eax
; Line 1531
	mov	eax, DWORD PTR AlignedByteOffset$[rsp]
	mov	DWORD PTR I$[rsp+20], eax
; Line 1532
	mov	eax, DWORD PTR InputSlotClass$[rsp]
	mov	DWORD PTR I$[rsp+24], eax
; Line 1533
	mov	eax, DWORD PTR InstanceDataStepRate$[rsp]
	mov	DWORD PTR I$[rsp+28], eax
; Line 1534
	lea	rax, QWORD PTR I$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1535
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ENDP ; D3D11DescribeInputElement
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 224
Bundle$ = 256
$T9 = 304
$T10 = 336
__$ReturnAddress$ = 400
Driver$ = 408
ShaderCode$ = 416
ShaderDebugName$ = 424
ShaderLayout$ = 432
?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z PROC ; D3D11Driver_CreateShaderBundleFromData
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1080
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
; Line 1082
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR ShaderLayout$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR ShaderDebugName$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ShaderCode$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR ShaderCode$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8w, 1
	lea	rdx, QWORD PTR Bundle$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 1083
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T7[rsp]
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR ShaderDebugName$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ShaderCode$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR ShaderCode$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8w, 2
	lea	rdx, QWORD PTR Bundle$[rsp+24]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 1085
	lea	rax, QWORD PTR Bundle$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1086
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z ENDP ; D3D11Driver_CreateShaderBundleFromData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 48
?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z PROC ; ID3D11Driver_CreatePointSamplerClamp
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 618
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 3
	xor	edx, edx
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ; ID3D11Driver_CreateSimpleSampler
; Line 619
	add	rsp, 40					; 00000028H
	ret	0
?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z ENDP ; ID3D11Driver_CreatePointSamplerClamp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 48
?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z PROC ; ID3D11Driver_CreateLinearSamplerClamp
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 613
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 3
	mov	edx, 21
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ; ID3D11Driver_CreateSimpleSampler
; Line 614
	add	rsp, 40					; 00000028H
	ret	0
?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z ENDP ; ID3D11Driver_CreateLinearSamplerClamp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 48
R$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
I$ = 152
__$ArrayPad$ = 208
Driver$ = 256
Filter$ = 264
Address$ = 272
?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z PROC ; ID3D11Driver_CreateSimpleSampler
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 589
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 591
	mov	r8d, 52					; 00000034H
	xor	edx, edx
	lea	rcx, QWORD PTR I$[rsp]
	call	memset
; Line 592
	mov	eax, DWORD PTR Filter$[rsp]
	mov	DWORD PTR I$[rsp], eax
; Line 593
	mov	eax, DWORD PTR Address$[rsp]
	mov	DWORD PTR I$[rsp+4], eax
; Line 594
	mov	eax, DWORD PTR Address$[rsp]
	mov	DWORD PTR I$[rsp+8], eax
; Line 595
	mov	eax, DWORD PTR Address$[rsp]
	mov	DWORD PTR I$[rsp+12], eax
; Line 598
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+184]
	mov	QWORD PTR tv76[rsp], rax
	lea	r8, QWORD PTR R$[rsp]
	lea	rdx, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv76[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Driv
; Line 599
	mov	rax, QWORD PTR R$[rsp]
	jmp	SHORT $LN1@ID3D11Driv
$LN2@ID3D11Driv:
; Line 602
	mov	DWORD PTR [rsp+32], 89			; 00000059H
	mov	r9d, 602				; 0000025aH
	lea	r8, OFFSET FLAT:$SG164900
	lea	rdx, OFFSET FLAT:$SG164901
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164899
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 603
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 604
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateSimpleSampler@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ENDP ; ID3D11Driver_CreateSimpleSampler
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 64
AccessFlags$ = 72
ByteWidth$ = 80
ByteData$ = 88
?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z PROC ; ID3D11Driver_CreateVertexBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 563
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR AccessFlags$[rsp]
	bts	eax, 9
	mov	rcx, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR ByteWidth$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, eax
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z ; ID3D11Driver_CreateBuffer
; Line 564
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ENDP ; ID3D11Driver_CreateVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 64
AccessFlags$ = 72
ByteWidth$ = 80
ByteData$ = 88
?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z PROC ; ID3D11Driver_CreateIndexBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 558
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR AccessFlags$[rsp]
	bts	eax, 8
	mov	rcx, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR ByteWidth$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, eax
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z ; ID3D11Driver_CreateBuffer
; Line 559
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_CreateIndexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ENDP ; ID3D11Driver_CreateIndexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 64
AccessFlags$ = 72
ByteWidth$ = 80
ByteData$ = 88
?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z PROC ; ID3D11Driver_CreateConstantBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 553
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR AccessFlags$[rsp]
	bts	eax, 10
	mov	rcx, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR ByteWidth$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, eax
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z ; ID3D11Driver_CreateBuffer
; Line 554
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ENDP ; ID3D11Driver_CreateConstantBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 48
Result$1 = 56
tv82 = 64
I$ = 72
$T2 = 88
$T3 = 112
$T4 = 144
D$ = 168
__$ArrayPad$ = 192
Driver$ = 240
AccessFlags$ = 248
MiscFlags$ = 256
StructureByteStride$ = 264
ByteWidth$ = 272
ByteData$ = 280
?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z PROC ; ID3D11Driver_CreateBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 525
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 528
	mov	DWORD PTR D$[rsp+4], 0
; Line 529
	mov	DWORD PTR D$[rsp+8], 0
; Line 530
	mov	DWORD PTR D$[rsp+12], 0
; Line 531
	mov	eax, DWORD PTR MiscFlags$[rsp]
	mov	DWORD PTR D$[rsp+16], eax
; Line 532
	mov	eax, DWORD PTR ByteWidth$[rsp]
	mov	DWORD PTR D$[rsp], eax
; Line 533
	mov	eax, DWORD PTR StructureByteStride$[rsp]
	mov	DWORD PTR D$[rsp+20], eax
; Line 534
	mov	rax, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR I$[rsp], rax
; Line 535
	mov	DWORD PTR I$[rsp+8], 0
; Line 536
	mov	DWORD PTR I$[rsp+12], 0
; Line 537
	lea	r9, QWORD PTR D$[rsp+12]
	lea	r8, QWORD PTR D$[rsp+4]
	lea	rdx, QWORD PTR D$[rsp+8]
	mov	ecx, DWORD PTR AccessFlags$[rsp]
	call	?ZenExternalizeResourceAccessFlags@@YAHIPEAIPEAW4D3D11_USAGE@@0@Z ; ZenExternalizeResourceAccessFlags
	test	eax, eax
	je	$LN2@ID3D11Driv
; Line 538
	mov	QWORD PTR Result$1[rsp], 0
; Line 539
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv82[rsp], rax
	cmp	QWORD PTR ByteData$[rsp], 0
	je	SHORT $LN6@ID3D11Driv
	lea	rax, QWORD PTR I$[rsp]
	mov	QWORD PTR tv76[rsp], rax
	jmp	SHORT $LN7@ID3D11Driv
$LN6@ID3D11Driv:
	mov	QWORD PTR tv76[rsp], 0
$LN7@ID3D11Driv:
	lea	r9, QWORD PTR Result$1[rsp]
	mov	r8, QWORD PTR tv76[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv82[rsp]
	test	eax, eax
	jl	SHORT $LN3@ID3D11Driv
; Line 540
	mov	rax, QWORD PTR Result$1[rsp]
	jmp	SHORT $LN1@ID3D11Driv
	jmp	SHORT $LN4@ID3D11Driv
$LN3@ID3D11Driv:
; Line 541
	mov	DWORD PTR [rsp+32], 87			; 00000057H
	mov	r9d, 541				; 0000021dH
	lea	r8, OFFSET FLAT:$SG164846
	lea	rdx, OFFSET FLAT:$SG164847
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164845
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ID3D11Driv:
$LN2@ID3D11Driv:
; Line 543
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 544
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIIIPEAX@Z ENDP ; ID3D11Driver_CreateBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Slice$ = 32
__$ReturnAddress$ = 80
?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ PROC ; ID3D11Graphics_AcquireShaderCCode
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 282
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 283
	lea	rax, OFFSET FLAT:$SG164720
	mov	QWORD PTR Slice$[rsp+8], rax
; Line 325
	mov	rcx, QWORD PTR Slice$[rsp+8]
	call	strlen
	mov	DWORD PTR Slice$[rsp], eax
; Line 326
	lea	rax, QWORD PTR Slice$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 327
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ ENDP ; ID3D11Graphics_AcquireShaderCCode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Slice$ = 32
__$ReturnAddress$ = 80
?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ PROC ; ID3D11Graphics_AcquireShaderBCode
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 247
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 248
	lea	rax, OFFSET FLAT:$SG164713
	mov	QWORD PTR Slice$[rsp+8], rax
; Line 276
	mov	rcx, QWORD PTR Slice$[rsp+8]
	call	strlen
	mov	DWORD PTR Slice$[rsp], eax
; Line 277
	lea	rax, QWORD PTR Slice$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 278
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ ENDP ; ID3D11Graphics_AcquireShaderBCode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Slice$ = 32
__$ReturnAddress$ = 80
?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ PROC ; ID3D11Graphics_AcquireShaderACode
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 217
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 218
	lea	rax, OFFSET FLAT:$SG164706
	mov	QWORD PTR Slice$[rsp+8], rax
; Line 241
	mov	rcx, QWORD PTR Slice$[rsp+8]
	call	strlen
	mov	DWORD PTR Slice$[rsp], eax
; Line 242
	lea	rax, QWORD PTR Slice$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 243
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ ENDP ; ID3D11Graphics_AcquireShaderACode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Internal$1 = 48
$T2 = 64
Driver$ = 112
ControlFiber$ = 120
Location$ = 128
WindowTitle$ = 136
?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z PROC ; ID3D11Driver_CreateWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 476
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1784				; 000006f8H
	xor	edx, edx
	mov	rcx, rax
	call	?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z ; ZenAccessionWindow
	mov	QWORD PTR Internal$1[rsp], rax
	cmp	QWORD PTR Internal$1[rsp], 0
	je	$LN2@ID3D11Driv
; Line 477
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Internal$1[rsp]
	mov	r9, QWORD PTR WindowTitle$[rsp]
	lea	r8, QWORD PTR $T2[rsp]
	mov	rdx, QWORD PTR ControlFiber$[rsp]
	mov	rcx, rax
	call	?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z ; ZenCreateNativeWindow
	test	eax, eax
	je	SHORT $LN3@ID3D11Driv
; Line 478
	mov	rax, QWORD PTR Internal$1[rsp]
	add	rax, 5960				; 00001748H
	mov	rcx, QWORD PTR Internal$1[rsp]
	add	rcx, 5968				; 00001750H
	mov	rdx, QWORD PTR Internal$1[rsp]
	add	rdx, 5952				; 00001740H
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	mov	rax, QWORD PTR Location$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Internal$1[rsp]
	mov	rdx, QWORD PTR [rax+536]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateSwapChain@@YAHPEAUID3D11_DRIVER@@PEAXUi32x2@@PEAPEAUIDXGISwapChain2@@PEAPEAUID3D11Texture2D@@PEAPEAX@Z ; ID3D11Driver_CreateSwapChain
$LN3@ID3D11Driv:
; Line 481
	mov	rax, QWORD PTR Internal$1[rsp]
	jmp	SHORT $LN1@ID3D11Driv
$LN2@ID3D11Driv:
; Line 483
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 484
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z ENDP ; ID3D11Driver_CreateWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
InfoQueue$1 = 80
Flags$ = 88
Device$ = 96
Feature$ = 104
Context$ = 112
tv151 = 120
tv160 = 128
tv167 = 136
tv174 = 144
$T2 = 152
$T3 = 176
$T4 = 208
$T5 = 240
$T6 = 272
$T7 = 304
$T8 = 328
$T9 = 360
$T10 = 392
FeatureMenu$ = 424
__$ArrayPad$ = 440
Driver$ = 480
Arena$ = 488
?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z PROC ; D3D11Driver_InitializeCompatible
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 175
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 176
	mov	r8d, 255				; 000000ffH
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z ; ZenAllocateTextureArchive
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR Driver$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR [rax+1720]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 177
	mov	r8d, 16
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z ; ZenAllocateGlyphicArchive
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR Driver$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	lea	rdi, QWORD PTR [rax+1752]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 178
	mov	r8d, 16
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z ; ZenAllocateWindowArchive
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR Driver$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR [rax+1784]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 180
	mov	DWORD PTR Flags$[rsp], 35		; 00000023H
; Line 185
	mov	DWORD PTR FeatureMenu$[rsp], 45312	; 0000b100H
	mov	DWORD PTR FeatureMenu$[rsp+4], 45056	; 0000b000H
; Line 186
	mov	DWORD PTR FeatureMenu$[rsp+8], 41216	; 0000a100H
	mov	DWORD PTR FeatureMenu$[rsp+12], 40960	; 0000a000H
; Line 194
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR FeatureMenu$[rsp+rax]
	lea	rcx, QWORD PTR Context$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR Feature$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, QWORD PTR Device$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Flags$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jge	SHORT $LN4@D3D11Drive
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR FeatureMenu$[rsp+rax]
	lea	rcx, QWORD PTR Context$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR Feature$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, QWORD PTR Device$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Flags$[rsp]
	xor	r8d, r8d
	mov	edx, 5
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jl	$LN2@D3D11Drive
$LN4@D3D11Drive:
; Line 198
	mov	QWORD PTR InfoQueue$1[rsp], 0
; Line 199
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN5@D3D11Drive
; Line 200
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv151[rsp], rax
	lea	r8, QWORD PTR InfoQueue$1[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11InfoQueue
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv151[rsp]
	test	eax, eax
	jl	$LN6@D3D11Drive
; Line 201
	mov	rax, QWORD PTR InfoQueue$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+248]
	mov	QWORD PTR tv160[rsp], rax
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR InfoQueue$1[rsp]
	call	QWORD PTR tv160[rsp]
; Line 202
	mov	rax, QWORD PTR InfoQueue$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+248]
	mov	QWORD PTR tv167[rsp], rax
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR InfoQueue$1[rsp]
	call	QWORD PTR tv167[rsp]
; Line 203
	mov	rax, QWORD PTR InfoQueue$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+248]
	mov	QWORD PTR tv174[rsp], rax
	mov	r8d, 1
	mov	edx, 2
	mov	rcx, QWORD PTR InfoQueue$1[rsp]
	call	QWORD PTR tv174[rsp]
$LN6@D3D11Drive:
$LN5@D3D11Drive:
; Line 206
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	mov	QWORD PTR [rax+264], rcx
; Line 207
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR InfoQueue$1[rsp]
	mov	QWORD PTR [rax+256], rcx
; Line 208
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR Context$[rsp]
	mov	QWORD PTR [rax+272], rcx
; Line 209
	mov	eax, 1
	jmp	SHORT $LN1@D3D11Drive
	jmp	SHORT $LN3@D3D11Drive
$LN2@D3D11Drive:
; Line 210
	mov	DWORD PTR [rsp+32], 84			; 00000054H
	mov	r9d, 210				; 000000d2H
	lea	r8, OFFSET FLAT:$SG164698
	lea	rdx, OFFSET FLAT:$SG164699
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG164697
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@D3D11Drive:
; Line 211
	xor	eax, eax
$LN1@D3D11Drive:
; Line 212
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	pop	rdi
	pop	rsi
	ret	0
?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z ENDP ; D3D11Driver_InitializeCompatible
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
tv78 = 40
$T1 = 48
$T2 = 112
$T3 = 176
$T4 = 240
__$ArrayPad$ = 304
Graphics$ = 352
?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_InitializeMatrixStack
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 2178
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2179
	lea	rcx, QWORD PTR $T1[rsp]
	call	?MatrixI@@YA?AUf32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv69[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv69[rsp]
	mov	QWORD PTR [rax+1136], rcx
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR tv69[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2180
	lea	rcx, QWORD PTR $T2[rsp]
	call	?MatrixI@@YA?AUf32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 1144				; 00000478H
	mov	QWORD PTR tv78[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv78[rsp]
	mov	QWORD PTR [rax+2168], rcx
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2181
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_InitializeMatrixStack
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_GetActiveDriver
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1229
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+3992]
; Line 1230
	ret	0
?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_GetActiveDriver
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
?ID3D11Graphics_GetActiveWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_GetActiveWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1224
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4000]
; Line 1225
	ret	0
?ID3D11Graphics_GetActiveWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_GetActiveWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 48
FloatColor$ = 56
tv85 = 64
tv131 = 72
Driver$ = 96
Color$ = 104
?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z PROC ; ID3D11Driver_ClearRenderTargetViews
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1583
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1584
	mov	rax, QWORD PTR Color$[rsp]
	mov	QWORD PTR FloatColor$[rsp], rax
; Line 1586
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ID3D11Driv
$LN2@ID3D11Driv:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ID3D11Driv:
	mov	rax, QWORD PTR Driver$[rsp]
	mov	eax, DWORD PTR [rax+448]
	cmp	DWORD PTR I$1[rsp], eax
	jae	SHORT $LN3@ID3D11Driv
; Line 1587
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR tv85[rsp], rax
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	r8, QWORD PTR FloatColor$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rcx+rax*8+456]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv85[rsp]
; Line 1589
	jmp	SHORT $LN2@ID3D11Driv
$LN3@ID3D11Driv:
; Line 1591
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv131[rsp], rax
	mov	BYTE PTR [rsp+32], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, 3
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+496]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv131[rsp]
; Line 1593
	add	rsp, 88					; 00000058H
	ret	0
?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Tf32x4@@@Z ENDP ; ID3D11Driver_ClearRenderTargetViews
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 48
tv91 = 56
tv144 = 64
tv156 = 72
tv169 = 80
tv180 = 88
tv191 = 96
tv204 = 104
tv224 = 112
tv244 = 120
tv264 = 128
tv285 = 136
tv298 = 144
tv318 = 152
tv338 = 160
tv358 = 168
tv371 = 176
tv391 = 184
tv411 = 192
tv431 = 200
Driver$ = 224
?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z PROC ; ID3D11Driver_CommitContextState
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1598
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 1599
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+344]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+328]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv74[rsp]
; Line 1601
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+352]
	mov	QWORD PTR tv91[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 340				; 00000154H
	mov	r8, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	edx, DWORD PTR [rax+336]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv91[rsp]
; Line 1604
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv144[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 456				; 000001c8H
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	r9, QWORD PTR [rcx+496]
	mov	r8, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	edx, DWORD PTR [rax+448]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv144[rsp]
; Line 1608
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+288]
	mov	QWORD PTR tv156[rsp], rax
	mov	r8d, 1
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+488]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv156[rsp]
; Line 1611
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+280]
	mov	QWORD PTR tv169[rsp], rax
	mov	r9d, 268435455				; 0fffffffH
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+440]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv169[rsp]
; Line 1615
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR tv180[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	edx, DWORD PTR [rax+504]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv180[rsp]
; Line 1617
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tv191[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+512]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv191[rsp]
; Line 1623
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+552]
	mov	QWORD PTR tv204[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+792]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv204[rsp]
; Line 1627
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+568]
	mov	QWORD PTR tv224[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 816				; 00000330H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+808]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv224[rsp]
; Line 1631
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+560]
	mov	QWORD PTR tv244[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 856				; 00000358H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+848]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv244[rsp]
; Line 1635
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+536]
	mov	QWORD PTR tv264[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 928				; 000003a0H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+920]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv264[rsp]
; Line 1640
	mov	rax, QWORD PTR Driver$[rsp]
	cmp	DWORD PTR [rax+1184], 0
	je	SHORT $LN2@ID3D11Driv
; Line 1641
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+544]
	mov	QWORD PTR tv285[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1056				; 00000420H
	mov	QWORD PTR [rsp+32], 0
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1184]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv285[rsp]
$LN2@ID3D11Driv:
; Line 1650
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv298[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+1192]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv298[rsp]
; Line 1654
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv318[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1216				; 000004c0H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1208]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv318[rsp]
; Line 1658
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+208]
	mov	QWORD PTR tv338[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1256				; 000004e8H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1248]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv338[rsp]
; Line 1662
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+200]
	mov	QWORD PTR tv358[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1328				; 00000530H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1320]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv358[rsp]
; Line 1669
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv371[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+1456]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv371[rsp]
; Line 1673
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR tv391[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1480				; 000005c8H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1472]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv391[rsp]
; Line 1677
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv411[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1520				; 000005f0H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1512]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv411[rsp]
; Line 1681
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv431[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1592				; 00000638H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1584]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv431[rsp]
; Line 1685
	add	rsp, 216				; 000000d8H
	ret	0
?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z ENDP ; ID3D11Driver_CommitContextState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
MessageBlob$1 = 96
ShaderBlob$2 = 104
CompilationFlags$ = 112
ShaderModel$ = 120
ShaderEntry$ = 128
tv129 = 136
tv136 = 144
tv163 = 152
tv180 = 160
tv187 = 168
ByteCode$3 = 176
Message$4 = 192
$T5 = 208
$T6 = 224
$T7 = 240
CompilationMacros$ = 256
$T8 = 288
$T9 = 320
$T10 = 352
$T11 = 376
$T12 = 400
$T13 = 432
$T14 = 464
$T15 = 496
$T16 = 520
$T17 = 544
Driver$ = 608
Shader$ = 616
ShaderKind$ = 624
ShaderFileSize$ = 632
ShaderFileData$ = 640
ShaderDebugName$ = 648
ShaderLayout$ = 656
?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z PROC ; ID3D11Driver_CreateShaderFromData
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1021
	mov	DWORD PTR [rsp+32], r9d
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 584				; 00000248H
; Line 1023
	cmp	QWORD PTR ShaderFileData$[rsp], 0
	je	SHORT $LN3@ID3D11Driv
	cmp	DWORD PTR ShaderFileSize$[rsp], 0
	jne	SHORT $LN2@ID3D11Driv
$LN3@ID3D11Driv:
	xor	eax, eax
	jmp	$LN1@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1027
	lea	rax, OFFSET FLAT:$SG165135
	mov	QWORD PTR CompilationMacros$[rsp], rax
	lea	rax, OFFSET FLAT:$SG165136
	mov	QWORD PTR CompilationMacros$[rsp+8], rax
	lea	rax, QWORD PTR CompilationMacros$[rsp+16]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
; Line 1034
	lea	rax, QWORD PTR ShaderEntry$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR ShaderModel$[rsp]
	lea	r8, QWORD PTR CompilationFlags$[rsp]
	movzx	edx, WORD PTR ShaderKind$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4DE_SHADER_KIND@@PEAHPEAPEBD3@Z ; ID3D11Driver_GetShaderCompilationInfo
	test	eax, eax
	je	$LN4@ID3D11Driv
; Line 1036
	mov	QWORD PTR ShaderBlob$2[rsp], 0
	mov	QWORD PTR MessageBlob$1[rsp], 0
; Line 1038
	mov	eax, DWORD PTR ShaderFileSize$[rsp]
	lea	rcx, QWORD PTR MessageBlob$1[rsp]
	mov	QWORD PTR [rsp+80], rcx
	lea	rcx, QWORD PTR ShaderBlob$2[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	DWORD PTR [rsp+64], 0
	mov	ecx, DWORD PTR CompilationFlags$[rsp]
	mov	DWORD PTR [rsp+56], ecx
	mov	rcx, QWORD PTR ShaderModel$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR ShaderEntry$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR CompilationMacros$[rsp]
	mov	r8, QWORD PTR ShaderDebugName$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR ShaderFileData$[rsp]
	call	D3DCompile
; Line 1044
	cmp	QWORD PTR MessageBlob$1[rsp], 0
	je	$LN6@ID3D11Driv
; Line 1046
	mov	rax, QWORD PTR MessageBlob$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv129[rsp], rax
	mov	rcx, QWORD PTR MessageBlob$1[rsp]
	call	QWORD PTR tv129[rsp]
	mov	DWORD PTR Message$4[rsp], eax
; Line 1047
	mov	rax, QWORD PTR MessageBlob$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv136[rsp], rax
	mov	rcx, QWORD PTR MessageBlob$1[rsp]
	call	QWORD PTR tv136[rsp]
	mov	QWORD PTR Message$4[rsp+8], rax
; Line 1049
	mov	DWORD PTR [rsp+32], 97			; 00000061H
	mov	r9d, 1049				; 00000419H
	lea	r8, OFFSET FLAT:$SG165141
	lea	rdx, OFFSET FLAT:$SG165142
	lea	rcx, QWORD PTR $T15[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165140
	mov	edx, 4
	lea	rcx, QWORD PTR $T9[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1050
	mov	DWORD PTR [rsp+32], 98			; 00000062H
	mov	r9d, 1050				; 0000041aH
	lea	r8, OFFSET FLAT:$SG165144
	lea	rdx, OFFSET FLAT:$SG165145
	lea	rcx, QWORD PTR $T16[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR Message$4[rsp+8]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv163[rsp], rax
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv163[rsp]
	lea	r8, OFFSET FLAT:$SG165143
	mov	edx, 4
	lea	rcx, QWORD PTR $T12[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1051
	mov	DWORD PTR [rsp+32], 99			; 00000063H
	mov	r9d, 1051				; 0000041bH
	lea	r8, OFFSET FLAT:$SG165147
	lea	rdx, OFFSET FLAT:$SG165148
	lea	rcx, QWORD PTR $T17[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165146
	mov	edx, 4
	lea	rcx, QWORD PTR $T14[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN6@ID3D11Driv:
; Line 1054
	cmp	QWORD PTR ShaderBlob$2[rsp], 0
	je	$LN7@ID3D11Driv
; Line 1056
	mov	rax, QWORD PTR ShaderBlob$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv180[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$2[rsp]
	call	QWORD PTR tv180[rsp]
	mov	DWORD PTR ByteCode$3[rsp], eax
; Line 1057
	mov	rax, QWORD PTR ShaderBlob$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv187[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$2[rsp]
	call	QWORD PTR tv187[rsp]
	mov	QWORD PTR ByteCode$3[rsp+8], rax
; Line 1059
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR ByteCode$3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T5[rsp]
	movzx	r8d, WORD PTR ShaderKind$[rsp]
	mov	rdx, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateShader@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@UZenSlice@@@Z ; ID3D11Driver_CreateShader
	test	eax, eax
	je	$LN8@ID3D11Driv
; Line 1061
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR ByteCode$3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR ShaderLayout$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 8
	lea	r9, QWORD PTR $T6[rsp]
	lea	r8, QWORD PTR $T7[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateInputLayout@@YAHPEAUID3D11_DRIVER@@PEAPEAUID3D11InputLayout@@UD3D11_INPUT_LAYOUT@@UZenSlice@@@Z ; ID3D11Driver_CreateInputLayout
	test	eax, eax
	je	SHORT $LN9@ID3D11Driv
; Line 1063
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Driv
; Line 1064
	jmp	SHORT $LN10@ID3D11Driv
$LN9@ID3D11Driv:
; Line 1065
	mov	rdx, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_ReleaseShader@@YAXPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@@Z ; ID3D11Driver_ReleaseShader
$LN10@ID3D11Driv:
$LN8@ID3D11Driv:
$LN7@ID3D11Driv:
$LN4@ID3D11Driv:
; Line 1071
	xor	eax, eax
$LN1@ID3D11Driv:
; Line 1072
	add	rsp, 584				; 00000248H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ENDP ; ID3D11Driver_CreateShaderFromData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
SamplerState$ = 48
BackBufferWidth$ = 56
BackBufferHeight$ = 60
tv153 = 64
tv196 = 72
tv201 = 80
Viewport$ = 88
R$ = 112
__$ArrayPad$ = 152
Driver$ = 192
BackBuffer$ = 200
?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z PROC ; ID3D11Driver_ConfigureForBackBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 844
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 848
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+288], 3
; Line 849
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+292], 1
; Line 850
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+296], 0
; Line 851
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+300], 0
; Line 852
	mov	rax, QWORD PTR Driver$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+304], xmm0
; Line 853
	mov	rax, QWORD PTR Driver$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+308], xmm0
; Line 854
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+312], 1
; Line 855
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+316], 1
; Line 856
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+320], 0
; Line 857
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+324], 0
; Line 860
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR R$[rsp]
	call	memset
; Line 861
	mov	rax, QWORD PTR Driver$[rsp]
	mov	eax, DWORD PTR [rax+288]
	mov	DWORD PTR R$[rsp], eax
; Line 862
	mov	rax, QWORD PTR Driver$[rsp]
	mov	eax, DWORD PTR [rax+292]
	mov	DWORD PTR R$[rsp+4], eax
; Line 863
	mov	rax, QWORD PTR Driver$[rsp]
	mov	eax, DWORD PTR [rax+316]
	mov	DWORD PTR R$[rsp+28], eax
; Line 864
	mov	rax, QWORD PTR Driver$[rsp]
	mov	eax, DWORD PTR [rax+312]
	mov	DWORD PTR R$[rsp+24], eax
; Line 865
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+176]
	mov	QWORD PTR tv153[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 328				; 00000148H
	mov	r8, rax
	lea	rdx, QWORD PTR R$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv153[rsp]
; Line 869
	lea	r8, QWORD PTR BackBufferHeight$[rsp]
	lea	rdx, QWORD PTR BackBufferWidth$[rsp]
	mov	rcx, QWORD PTR BackBuffer$[rsp]
	call	?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z ; ID3D11Texture2D_GetSize
; Line 871
	mov	rdx, QWORD PTR BackBuffer$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateTexture2DRenderTargetView@@YAPEAUID3D11RenderTargetView@@PEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ; ID3D11Driver_CreateTexture2DRenderTargetView
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	QWORD PTR [rcx+456], rax
; Line 872
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+448], 1
; Line 874
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 496				; 000001f0H
	mov	rcx, QWORD PTR Driver$[rsp]
	add	rcx, 488				; 000001e8H
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8d, DWORD PTR BackBufferHeight$[rsp]
	mov	edx, DWORD PTR BackBufferWidth$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z ; ID3D11Device_CreateDefaultDepthStencil
; Line 879
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp+4], xmm0
	cvtsi2ss xmm0, DWORD PTR BackBufferWidth$[rsp]
	movss	DWORD PTR Viewport$[rsp+8], xmm0
; Line 880
	cvtsi2ss xmm0, DWORD PTR BackBufferHeight$[rsp]
	movss	DWORD PTR Viewport$[rsp+12], xmm0
; Line 881
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp+16], xmm0
; Line 882
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Viewport$[rsp+20], xmm0
; Line 884
	mov	rax, QWORD PTR Driver$[rsp]
	lea	rcx, QWORD PTR Viewport$[rsp]
	lea	rdi, QWORD PTR [rax+340]
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 885
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+336], 1
; Line 887
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z ; ID3D11Driver_CreateLinearSamplerClamp
	mov	QWORD PTR SamplerState$[rsp], rax
; Line 888
	mov	rax, QWORD PTR SamplerState$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv196[rsp], rax
	mov	rcx, QWORD PTR SamplerState$[rsp]
	call	QWORD PTR tv196[rsp]
; Line 889
	mov	rax, QWORD PTR SamplerState$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv201[rsp], rax
	mov	rcx, QWORD PTR SamplerState$[rsp]
	call	QWORD PTR tv201[rsp]
; Line 891
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z ; ID3D11Device_CreateDefaultBlendState
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	QWORD PTR [rcx+440], rax
; Line 893
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR SamplerState$[rsp]
	mov	QWORD PTR [rax+1520], rcx
; Line 894
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+1512], 1
; Line 896
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR SamplerState$[rsp]
	mov	QWORD PTR [rax+1256], rcx
; Line 897
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+1248], 1
; Line 899
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR SamplerState$[rsp]
	mov	QWORD PTR [rax+856], rcx
; Line 900
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+848], 1
; Line 902
	mov	eax, 1
; Line 903
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ENDP ; ID3D11Driver_ConfigureForBackBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileSize$1 = 64
MainDriver$ = 72
FileData$2 = 80
tv92 = 88
tv145 = 96
MyArena$ = 104
$T3 = 120
MemorySlice$ = 136
$T4 = 160
$T5 = 176
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
$T12 = 288
$T13 = 304
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
$T20 = 416
$T21 = 432
$T22 = 448
$T23 = 464
$T24 = 480
$T25 = 496
$T26 = 512
$T27 = 528
$T28 = 544
$T29 = 560
$T30 = 576
$T31 = 592
$T32 = 608
$T33 = 624
$T34 = 640
$T35 = 656
$T36 = 672
$T37 = 688
$T38 = 704
$T39 = 720
$T40 = 736
$T41 = 752
$T42 = 768
$T43 = 784
$T44 = 800
$T45 = 832
$T46 = 864
$T47 = 896
$T48 = 928
$T49 = 960
$T50 = 992
$T51 = 1024
$T52 = 1056
$T53 = 1088
$T54 = 1120
$T55 = 1152
$T56 = 1184
$T57 = 1216
$T58 = 1248
$T59 = 1280
$T60 = 1312
$T61 = 1344
$T62 = 1376
$T63 = 1408
$T64 = 1440
$T65 = 1472
$T66 = 1504
$T67 = 1536
$T68 = 1568
$T69 = 1600
$T70 = 1632
$T71 = 1664
$T72 = 1696
$T73 = 1728
$T74 = 1760
$T75 = 1792
$T76 = 1824
$T77 = 1856
$T78 = 1888
$T79 = 1920
$T80 = 1952
$T81 = 1984
$T82 = 2016
$T83 = 2048
$T84 = 2080
$T85 = 2112
$T86 = 2144
$T87 = 2176
$T88 = 2208
$T89 = 2240
$T90 = 2272
$T91 = 2304
$T92 = 2336
$T93 = 2368
$T94 = 2400
$T95 = 2432
$T96 = 2464
$T97 = 2496
$T98 = 2528
$T99 = 2560
$T100 = 2592
$T101 = 2624
$T102 = 2656
$T103 = 2688
$T104 = 2720
$T105 = 2768
$T106 = 2816
$T107 = 2864
$T108 = 2912
$T109 = 2944
$T110 = 2976
$T111 = 3008
$T112 = 3040
$T113 = 3072
$T114 = 3104
$T115 = 3136
$T116 = 3168
$T117 = 3200
$T118 = 3232
$T119 = 3264
$T120 = 3296
$T121 = 3328
$T122 = 3360
$T123 = 3392
$T124 = 3424
$T125 = 3456
$T126 = 3488
$T127 = 3520
$T128 = 3552
$T129 = 3584
$T130 = 3616
$T131 = 3648
$T132 = 3680
$T133 = 3712
$T134 = 3744
$T135 = 3776
$T136 = 3808
$T137 = 3840
$T138 = 3872
$T139 = 3920
$T140 = 3968
$T141 = 4016
$T142 = 4064
$T143 = 4176
Graphics$ = 4320
PointerMemorySlice$ = 4328
ControlFiber$ = 4336
WindowLocation$ = 4344
WindowTitle$ = 4352
?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z PROC ; ID3D11Graphics_Initialize
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 85
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4296				; 000010c8H
	call	__chkstk
	sub	rsp, rax
; Line 88
	cmp	QWORD PTR PointerMemorySlice$[rsp], 0
	je	SHORT $LN2@ID3D11Grap
; Line 89
	lea	rax, QWORD PTR MemorySlice$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR PointerMemorySlice$[rsp]
	mov	ecx, 16
	rep movsb
$LN2@ID3D11Grap:
; Line 95
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR MemorySlice$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z ; ZenSliceToEmptyArena
	lea	rcx, QWORD PTR MyArena$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 98
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_InitializeMatrixStack
; Line 100
	mov	WORD PTR [rsp+48], 32768		; 00008000H
	mov	WORD PTR [rsp+40], 32768		; 00008000H
	mov	WORD PTR [rsp+32], 32768		; 00008000H
	mov	r9w, 32768				; 00008000H
	mov	r8w, 4096				; 00001000H
	lea	rdx, QWORD PTR MyArena$[rsp]
	lea	rcx, QWORD PTR $T143[rsp]
	call	?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z ; ZenAllocateImmediateMode
	lea	rcx, QWORD PTR $T142[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 112				; 00000070H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR $T142[rsp]
	lea	rdi, QWORD PTR [rax+4216]
	mov	rsi, rcx
	mov	ecx, 112				; 00000070H
	rep movsb
; Line 102
	mov	r8d, 458752				; 00070000H
	lea	rdx, QWORD PTR MyArena$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z ; ZenSliceArena
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 4216				; 00001078H
	lea	rcx, QWORD PTR $T6[rsp]
	lea	rdx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
	mov	rcx, QWORD PTR Graphics$[rsp]
	add	rcx, 4328				; 000010e8H
	mov	r8, rax
	lea	rdx, QWORD PTR $T6[rsp]
	call	?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z ; ZenGluiInit
; Line 104
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 2176				; 00000880H
	mov	QWORD PTR tv92[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv92[rsp]
	mov	QWORD PTR [rax+3992], rcx
	mov	rax, QWORD PTR tv92[rsp]
	mov	QWORD PTR MainDriver$[rsp], rax
; Line 105
	lea	rdx, QWORD PTR MyArena$[rsp]
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?D3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@PEAUZenArena@@@Z ; D3D11Driver_InitializeCompatible
	test	eax, eax
	je	$LN4@ID3D11Grap
; Line 107
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreatePointSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z ; ID3D11Driver_CreatePointSamplerClamp
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+7672], rax
; Line 108
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateLinearSamplerClamp@@YAPEAUID3D11SamplerState@@PEAUID3D11_DRIVER@@@Z ; ID3D11Driver_CreateLinearSamplerClamp
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+7664], rax
; Line 110
	xor	r9d, r9d
	mov	r8d, 144				; 00000090H
	mov	edx, 3
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateConstantBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11_DRIVER@@IIPEAX@Z ; ID3D11Driver_CreateConstantBuffer
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+7704], rax
; Line 113
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR WindowLocation$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r9, QWORD PTR WindowTitle$[rsp]
	lea	r8, QWORD PTR $T7[rsp]
	mov	rdx, QWORD PTR ControlFiber$[rsp]
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateWindow@@YAPEAUZenWindowRecord@@PEAUID3D11_DRIVER@@PEAXTi32x4@@PEB_W@Z ; ID3D11Driver_CreateWindow
	mov	QWORD PTR tv145[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv145[rsp]
	mov	QWORD PTR [rax+4000], rcx
	cmp	QWORD PTR tv145[rsp], 0
	je	$LN5@ID3D11Grap
; Line 116
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4000]
	mov	rdx, QWORD PTR [rax+5968]
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ; ID3D11Driver_ConfigureForBackBuffer
	test	eax, eax
	je	$LN6@ID3D11Grap
; Line 122
	lea	rdx, OFFSET FLAT:$SG164644
	lea	rcx, QWORD PTR FileSize$1[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$2[rsp], rax
; Line 123
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T134[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T44[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T135[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T45[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T46[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T47[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T46[rsp]
	lea	rdx, QWORD PTR $T47[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 7616				; 00001dc0H
	lea	rcx, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG164645
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8w, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 125
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T136[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T48[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 2
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164646
	lea	rcx, QWORD PTR $T137[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T49[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T108[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T50[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T51[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T52[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T53[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r9, QWORD PTR $T51[rsp]
	lea	r8, QWORD PTR $T52[rsp]
	lea	rdx, QWORD PTR $T53[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 7568				; 00001d90H
	lea	rcx, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG164647
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8w, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 128
	mov	rcx, QWORD PTR FileData$2[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 130
	lea	rdx, OFFSET FLAT:$SG164648
	lea	rcx, QWORD PTR FileSize$1[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$2[rsp], rax
; Line 131
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T109[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T54[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T110[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T55[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T56[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T57[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T56[rsp]
	lea	rdx, QWORD PTR $T57[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 7640				; 00001dd8H
	lea	rcx, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG164649
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8w, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 133
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T111[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T58[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164650
	lea	rcx, QWORD PTR $T112[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T59[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 2
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164651
	lea	rcx, QWORD PTR $T113[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T60[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T114[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T61[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T62[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T63[rsp]
	lea	rcx, QWORD PTR $T59[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T64[rsp]
	lea	rcx, QWORD PTR $T60[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T65[rsp]
	lea	rcx, QWORD PTR $T61[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T62[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T63[rsp]
	lea	r8, QWORD PTR $T64[rsp]
	lea	rdx, QWORD PTR $T65[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 7592				; 00001da8H
	lea	rcx, QWORD PTR $T15[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG164652
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8w, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4DE_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 137
	mov	rcx, QWORD PTR FileData$2[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 139
	lea	rdx, OFFSET FLAT:$SG164653
	lea	rcx, QWORD PTR FileSize$1[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$2[rsp], rax
; Line 141
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T115[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 1
	mov	DWORD PTR [rsp+48], 1
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 18
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164654
	lea	rcx, QWORD PTR $T116[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T67[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 1
	mov	DWORD PTR [rsp+48], 1
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 43					; 0000002bH
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164655
	lea	rcx, QWORD PTR $T117[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T68[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T118[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T69[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T70[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T71[rsp]
	lea	rcx, QWORD PTR $T67[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T72[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T73[rsp]
	lea	rcx, QWORD PTR $T69[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T70[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T71[rsp]
	lea	r8, QWORD PTR $T72[rsp]
	lea	rdx, QWORD PTR $T73[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR FileSize$1[rsp]
	mov	DWORD PTR $T3[rsp], eax
	mov	rax, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR $T3[rsp+8], rax
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T17[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG164656
	lea	r8, QWORD PTR $T18[rsp]
	mov	rdx, QWORD PTR MainDriver$[rsp]
	lea	rcx, QWORD PTR $T138[rsp]
	call	?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z ; D3D11Driver_CreateShaderBundleFromData
	lea	rcx, QWORD PTR $T104[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	lea	rdi, QWORD PTR [rax+7520]
	mov	rsi, rcx
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 146
	mov	rcx, QWORD PTR FileData$2[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 148
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T119[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T74[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164657
	lea	rcx, QWORD PTR $T120[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T75[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 28
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164658
	lea	rcx, QWORD PTR $T121[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T76[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164659
	lea	rcx, QWORD PTR $T122[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T77[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T123[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T78[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T79[rsp]
	lea	rcx, QWORD PTR $T74[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T80[rsp]
	lea	rcx, QWORD PTR $T75[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T81[rsp]
	lea	rcx, QWORD PTR $T76[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T82[rsp]
	lea	rcx, QWORD PTR $T77[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T83[rsp]
	lea	rcx, QWORD PTR $T78[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T79[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T80[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T81[rsp]
	lea	r8, QWORD PTR $T82[rsp]
	lea	rdx, QWORD PTR $T83[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T39[rsp]
	call	?ID3D11Graphics_AcquireShaderACode@@YA?AUZenSlice@@XZ ; ID3D11Graphics_AcquireShaderACode
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T21[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG164660
	lea	r8, QWORD PTR $T22[rsp]
	mov	rdx, QWORD PTR MainDriver$[rsp]
	lea	rcx, QWORD PTR $T139[rsp]
	call	?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z ; D3D11Driver_CreateShaderBundleFromData
	lea	rcx, QWORD PTR $T105[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR $T105[rsp]
	lea	rdi, QWORD PTR [rax+4072]
	mov	rsi, rcx
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 154
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T124[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T84[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164661
	lea	rcx, QWORD PTR $T125[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T85[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 28
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164662
	lea	rcx, QWORD PTR $T126[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T86[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164663
	lea	rcx, QWORD PTR $T127[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T87[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T128[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T88[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T89[rsp]
	lea	rcx, QWORD PTR $T84[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T90[rsp]
	lea	rcx, QWORD PTR $T85[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T91[rsp]
	lea	rcx, QWORD PTR $T86[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T92[rsp]
	lea	rcx, QWORD PTR $T87[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T93[rsp]
	lea	rcx, QWORD PTR $T88[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T89[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T90[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T91[rsp]
	lea	r8, QWORD PTR $T92[rsp]
	lea	rdx, QWORD PTR $T93[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T41[rsp]
	call	?ID3D11Graphics_AcquireShaderBCode@@YA?AUZenSlice@@XZ ; ID3D11Graphics_AcquireShaderBCode
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T25[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T25[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG164664
	lea	r8, QWORD PTR $T26[rsp]
	mov	rdx, QWORD PTR MainDriver$[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z ; D3D11Driver_CreateShaderBundleFromData
	lea	rcx, QWORD PTR $T106[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	lea	rdi, QWORD PTR [rax+4120]
	mov	rsi, rcx
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 160
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T129[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T94[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164665
	lea	rcx, QWORD PTR $T130[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T95[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 28
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164666
	lea	rcx, QWORD PTR $T131[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T96[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG164667
	lea	rcx, QWORD PTR $T132[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T97[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T133[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T98[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T99[rsp]
	lea	rcx, QWORD PTR $T94[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T100[rsp]
	lea	rcx, QWORD PTR $T95[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T101[rsp]
	lea	rcx, QWORD PTR $T96[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T102[rsp]
	lea	rcx, QWORD PTR $T97[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T103[rsp]
	lea	rcx, QWORD PTR $T98[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T99[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T100[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T101[rsp]
	lea	r8, QWORD PTR $T102[rsp]
	lea	rdx, QWORD PTR $T103[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T43[rsp]
	call	?ID3D11Graphics_AcquireShaderCCode@@YA?AUZenSlice@@XZ ; ID3D11Graphics_AcquireShaderCCode
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T29[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T29[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG164668
	lea	r8, QWORD PTR $T30[rsp]
	mov	rdx, QWORD PTR MainDriver$[rsp]
	lea	rcx, QWORD PTR $T141[rsp]
	call	?D3D11Driver_CreateShaderBundleFromData@@YA?AUD3D11_SHADER_BUNDLE@@PEAUID3D11_DRIVER@@UZenSlice@@PEBDUD3D11_INPUT_LAYOUT@@@Z ; D3D11Driver_CreateShaderBundleFromData
	lea	rcx, QWORD PTR $T107[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR $T107[rsp]
	lea	rdi, QWORD PTR [rax+4168]
	mov	rsi, rcx
	mov	ecx, 48					; 00000030H
	rep movsb
; Line 165
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Grap
$LN6@ID3D11Grap:
$LN5@ID3D11Grap:
$LN4@ID3D11Grap:
; Line 170
	xor	eax, eax
$LN1@ID3D11Grap:
; Line 171
	add	rsp, 4296				; 000010c8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAUZenSlice@@PEAXTi32x4@@PEB_W@Z ENDP ; ID3D11Graphics_Initialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 48
$T1 = 56
$T2 = 80
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 264
$T9 = 288
Window$ = 352
?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z PROC	; ID3D11Window_Present
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1745
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 1746
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z	; ZenIsWindowValid
	test	eax, eax
	je	$LN2@ID3D11Wind
; Line 1747
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ZenShowWindow@@YAXPEAUZenWindow@@@Z	; ZenShowWindow
; Line 1749
	mov	rax, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR [rax+5952]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv77[rsp], rax
	xor	r8d, r8d
	mov	edx, 1
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+5952]
	call	QWORD PTR tv77[rsp]
	test	eax, eax
	jl	$LN4@ID3D11Wind
; Line 1751
	mov	r8d, 1
	mov	edx, 33					; 00000021H
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+5960]
	call	QWORD PTR __imp_WaitForSingleObjectEx
	test	eax, eax
	jge	SHORT $LN6@ID3D11Wind
; Line 1752
	mov	DWORD PTR [rsp+32], 106			; 0000006aH
	mov	r9d, 1752				; 000006d8H
	lea	r8, OFFSET FLAT:$SG165568
	lea	rdx, OFFSET FLAT:$SG165569
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165567
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1753
	mov	ecx, 33					; 00000021H
	call	QWORD PTR __imp_Sleep
$LN6@ID3D11Wind:
; Line 1755
	jmp	SHORT $LN5@ID3D11Wind
$LN4@ID3D11Wind:
; Line 1756
	mov	DWORD PTR [rsp+32], 107			; 0000006bH
	mov	r9d, 1756				; 000006dcH
	lea	r8, OFFSET FLAT:$SG165571
	lea	rdx, OFFSET FLAT:$SG165572
	lea	rcx, QWORD PTR $T8[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165570
	mov	edx, 7
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ID3D11Wind:
; Line 1757
	jmp	SHORT $LN3@ID3D11Wind
$LN2@ID3D11Wind:
; Line 1758
	mov	DWORD PTR [rsp+32], 108			; 0000006cH
	mov	r9d, 1758				; 000006deH
	lea	r8, OFFSET FLAT:$SG165574
	lea	rdx, OFFSET FLAT:$SG165575
	lea	rcx, QWORD PTR $T9[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG165573
	mov	edx, 6
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Wind:
; Line 1759
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Window_Present@@YAXPEAUZenWindowRecord@@@Z ENDP	; ID3D11Window_Present
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 48
Internal$1 = 56
tv84 = 64
$T2 = 72
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 216
Archive$ = 272
External$ = 280
?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z PROC ; ZenAccessionWindow
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 177
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR [rsp+32], 82			; 00000052H
	mov	r9d, 177				; 000000b1H
	lea	r8, OFFSET FLAT:$SG163514
	lea	rdx, OFFSET FLAT:$SG163515
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Archive$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR tv84[rsp], eax
	mov	rax, QWORD PTR Archive$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	cmp	rax, 5688				; 00001638H
	jne	SHORT $LN7@ZenAccessi
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN8@ZenAccessi
$LN7@ZenAccessi:
	mov	DWORD PTR tv72[rsp], 0
$LN8@ZenAccessi:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	QWORD PTR [rsp+40], 5688		; 00001638H
	mov	eax, DWORD PTR tv84[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG163512
	mov	r8d, DWORD PTR tv72[rsp]
	lea	rdx, OFFSET FLAT:$SG163513
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 178
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Archive$[rsp]
	call	?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z ; ZenAccessionArcaneRecord
	mov	QWORD PTR Internal$1[rsp], rax
	cmp	QWORD PTR Internal$1[rsp], 0
	je	SHORT $LN2@ZenAccessi
; Line 179
	mov	rax, QWORD PTR External$[rsp]
	cmp	QWORD PTR Internal$1[rsp], rax
	je	SHORT $LN4@ZenAccessi
	cmp	QWORD PTR External$[rsp], 0
	je	SHORT $LN5@ZenAccessi
; Line 180
	mov	r8d, 5688				; 00001638H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Internal$1[rsp]
	call	memcpy
$LN5@ZenAccessi:
$LN4@ZenAccessi:
; Line 182
	mov	rax, QWORD PTR Internal$1[rsp]
	jmp	SHORT $LN1@ZenAccessi
	jmp	SHORT $LN3@ZenAccessi
$LN2@ZenAccessi:
; Line 183
	mov	DWORD PTR [rsp+32], 83			; 00000053H
	mov	r9d, 183				; 000000b7H
	lea	r8, OFFSET FLAT:$SG163521
	lea	rdx, OFFSET FLAT:$SG163522
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG163520
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenAccessi:
; Line 184
	xor	eax, eax
$LN1@ZenAccessi:
; Line 185
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenAccessionWindow@@YAPEAUZenWindowRecord@@PEAUZenArcaneArchive@@PEAUZenWindow@@@Z ENDP ; ZenAccessionWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
Internal$1 = 56
$T2 = 64
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 216
Archive$ = 272
External$ = 280
?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z PROC ; ZenAccessionGlyphic
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 165
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR [rsp+32], 80			; 00000050H
	mov	r9d, 165				; 000000a5H
	lea	r8, OFFSET FLAT:$SG163493
	lea	rdx, OFFSET FLAT:$SG163494
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Archive$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	cmp	rax, 112				; 00000070H
	jne	SHORT $LN7@ZenAccessi
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN8@ZenAccessi
$LN7@ZenAccessi:
	mov	DWORD PTR tv69[rsp], 0
$LN8@ZenAccessi:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG163491
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG163492
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 166
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Archive$[rsp]
	call	?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z ; ZenAccessionArcaneRecord
	mov	QWORD PTR Internal$1[rsp], rax
	cmp	QWORD PTR Internal$1[rsp], 0
	je	SHORT $LN2@ZenAccessi
; Line 167
	mov	rax, QWORD PTR External$[rsp]
	cmp	QWORD PTR Internal$1[rsp], rax
	je	SHORT $LN4@ZenAccessi
	cmp	QWORD PTR External$[rsp], 0
	je	SHORT $LN5@ZenAccessi
; Line 168
	mov	r8d, 112				; 00000070H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Internal$1[rsp]
	call	memcpy
$LN5@ZenAccessi:
$LN4@ZenAccessi:
; Line 170
	mov	rax, QWORD PTR Internal$1[rsp]
	jmp	SHORT $LN1@ZenAccessi
	jmp	SHORT $LN3@ZenAccessi
$LN2@ZenAccessi:
; Line 171
	mov	DWORD PTR [rsp+32], 81			; 00000051H
	mov	r9d, 171				; 000000abH
	lea	r8, OFFSET FLAT:$SG163500
	lea	rdx, OFFSET FLAT:$SG163501
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG163499
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenAccessi:
; Line 172
	xor	eax, eax
$LN1@ZenAccessi:
; Line 173
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenAccessionGlyphic@@YAPEAUZenGlyphicRecord@@PEAUZenArcaneArchive@@PEAUZenGlyphFont@@@Z ENDP ; ZenAccessionGlyphic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
Internal$1 = 56
$T2 = 64
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 216
Archive$ = 272
External$ = 280
?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z PROC ; ZenAccessionTexture
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 150
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR [rsp+32], 78			; 0000004eH
	mov	r9d, 150				; 00000096H
	lea	r8, OFFSET FLAT:$SG163472
	lea	rdx, OFFSET FLAT:$SG163473
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Archive$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	cmp	rax, 32					; 00000020H
	jne	SHORT $LN7@ZenAccessi
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN8@ZenAccessi
$LN7@ZenAccessi:
	mov	DWORD PTR tv69[rsp], 0
$LN8@ZenAccessi:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG163470
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG163471
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 151
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, QWORD PTR Archive$[rsp]
	call	?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z ; ZenAccessionArcaneRecord
	mov	QWORD PTR Internal$1[rsp], rax
	cmp	QWORD PTR Internal$1[rsp], 0
	je	SHORT $LN2@ZenAccessi
; Line 152
	mov	rax, QWORD PTR External$[rsp]
	cmp	QWORD PTR Internal$1[rsp], rax
	je	SHORT $LN4@ZenAccessi
; Line 153
	cmp	QWORD PTR External$[rsp], 0
	je	SHORT $LN5@ZenAccessi
; Line 154
	mov	rax, QWORD PTR Internal$1[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	memcpy
; Line 155
	mov	rax, QWORD PTR Internal$1[rsp]
	add	rax, 80					; 00000050H
	mov	r8d, 20
	mov	rdx, QWORD PTR External$[rsp]
	mov	rcx, rax
	call	memcpy
$LN5@ZenAccessi:
$LN4@ZenAccessi:
; Line 158
	mov	rax, QWORD PTR Internal$1[rsp]
	jmp	SHORT $LN1@ZenAccessi
	jmp	SHORT $LN3@ZenAccessi
$LN2@ZenAccessi:
; Line 159
	mov	DWORD PTR [rsp+32], 79			; 0000004fH
	mov	r9d, 159				; 0000009fH
	lea	r8, OFFSET FLAT:$SG163479
	lea	rdx, OFFSET FLAT:$SG163480
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG163478
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenAccessi:
; Line 160
	xor	eax, eax
$LN1@ZenAccessi:
; Line 161
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenAccessionTexture@@YAPEAUZenTextureRecord@@PEAUZenArcaneArchive@@PEAUZenTexture@@@Z ENDP ; ZenAccessionTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Internal$ = 0
Archive$ = 32
External$ = 40
?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z PROC ; ZenAccessionArcaneRecord
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 136
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR Archive$[rsp]
	mov	rcx, QWORD PTR Archive$[rsp]
	mov	eax, DWORD PTR [rax+24]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	rcx, QWORD PTR Archive$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR Internal$[rsp], rax
; Line 137
	mov	rax, QWORD PTR Archive$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR External$[rsp], rax
	jb	SHORT $LN2@ZenAccessi
	mov	rax, QWORD PTR Internal$[rsp]
	cmp	QWORD PTR External$[rsp], rax
	ja	SHORT $LN2@ZenAccessi
; Line 138
	mov	rax, QWORD PTR External$[rsp]
	jmp	SHORT $LN1@ZenAccessi
; Line 139
	jmp	SHORT $LN3@ZenAccessi
$LN2@ZenAccessi:
; Line 140
	mov	rax, QWORD PTR Archive$[rsp]
	mov	rcx, QWORD PTR Archive$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+4], ecx
	jge	SHORT $LN4@ZenAccessi
; Line 141
	mov	rax, QWORD PTR Archive$[rsp]
	mov	eax, DWORD PTR [rax+4]
	inc	eax
	mov	rcx, QWORD PTR Archive$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 142
	mov	rax, QWORD PTR Internal$[rsp]
	jmp	SHORT $LN1@ZenAccessi
; Line 143
	jmp	SHORT $LN5@ZenAccessi
$LN4@ZenAccessi:
; Line 144
	xor	eax, eax
$LN5@ZenAccessi:
$LN3@ZenAccessi:
$LN1@ZenAccessi:
; Line 146
	add	rsp, 24
	ret	0
?ZenAccessionArcaneRecord@@YAPEAXPEAUZenArcaneArchive@@PEAX@Z ENDP ; ZenAccessionArcaneRecord
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
__$ReturnAddress$ = 144
Arena$ = 152
MaxCount$ = 160
?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z PROC ; ZenAllocateGlyphicArchive
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 131
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	eax, DWORD PTR MaxCount$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 112				; 00000070H
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z ; ZenAllocateArcaneArchive
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 132
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocateGlyphicArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z ENDP ; ZenAllocateGlyphicArchive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
__$ReturnAddress$ = 144
Arena$ = 152
MaxCount$ = 160
?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z PROC ; ZenAllocateTextureArchive
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 126
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	eax, DWORD PTR MaxCount$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 32					; 00000020H
	mov	r8d, 432				; 000001b0H
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z ; ZenAllocateArcaneArchive
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 127
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocateTextureArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z ENDP ; ZenAllocateTextureArchive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
__$ReturnAddress$ = 144
Arena$ = 152
MaxCount$ = 160
?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z PROC ; ZenAllocateWindowArchive
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 121
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	eax, DWORD PTR MaxCount$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 5688				; 00001638H
	mov	r8d, 5976				; 00001758H
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z ; ZenAllocateArcaneArchive
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 122
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocateWindowArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@H@Z ENDP ; ZenAllocateWindowArchive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Archive$ = 32
__$ReturnAddress$ = 96
Arena$ = 104
ItemSize$ = 112
InfoSize$ = 120
MaxCount$ = 128
?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z PROC ; ZenAllocateArcaneArchive
; File W:\cpp\void\detroit\detroit-d3d11.h
; Line 109
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 110
	mov	eax, DWORD PTR MaxCount$[rsp]
	mov	DWORD PTR Archive$[rsp], eax
; Line 111
	mov	DWORD PTR Archive$[rsp+4], 0
; Line 112
	mov	eax, DWORD PTR ItemSize$[rsp]
	mov	DWORD PTR Archive$[rsp+24], eax
; Line 113
	mov	eax, DWORD PTR InfoSize$[rsp]
	mov	DWORD PTR Archive$[rsp+28], eax
; Line 114
	movsxd	rax, DWORD PTR MaxCount$[rsp]
	shl	rax, 2
	mov	edx, eax
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR Archive$[rsp+8], rax
; Line 115
	movsxd	rax, DWORD PTR MaxCount$[rsp]
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR Archive$[rsp+8]
	call	memset
; Line 116
	lea	rax, QWORD PTR Archive$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 117
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocateArcaneArchive@@YA?AUZenArcaneArchive@@PEAUZenArena@@HHH@Z ENDP ; ZenAllocateArcaneArchive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
PositionNormal$1 = 64
SliderPadding$ = 68
ClickFocus$ = 72
tv162 = 76
tv164 = 80
SliderThumbW$ = 84
IsActive$ = 88
SliderW$ = 92
$T2 = 96
SliderThumbXNormal$ = 104
SliderThumbX$ = 112
ThumbTag$ = 120
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
$T11 = 256
$T12 = 272
$T13 = 288
$T14 = 304
$T15 = 320
SliderGroove$ = 336
SliderThumb$ = 352
Slider$ = 368
$T16 = 384
ThumbTagBounds$ = 400
$T17 = 416
$T18 = 432
$T19 = 448
__$ArrayPad$ = 464
Glui$ = 512
Flags$ = 520
Value$ = 528
ValueMin$ = 536
ValueMax$ = 544
?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z PROC	; ZenGluiSlider
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 1048
	movsd	QWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 488				; 000001e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1049
	mov	DWORD PTR $T2[rsp], -1
	mov	DWORD PTR $T2[rsp+4], 24
	mov	DWORD PTR $T16[rsp], 1
	mov	DWORD PTR $T16[rsp+4], 1
	mov	DWORD PTR $T16[rsp+8], 1
	mov	DWORD PTR $T16[rsp+12], 1
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T6[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ; ZenGluiLayoutAllot
	lea	rcx, QWORD PTR Slider$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1051
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR Slider$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T5[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiIsVisible@@YAHPEAUZEN_IMGLUI@@PEBDTi32x4@@@Z ; ZenGluiIsVisible
	test	eax, eax
	jne	SHORT $LN2@ZenGluiSli
; Line 1052
	xor	eax, eax
	jmp	$LN1@ZenGluiSli
$LN2@ZenGluiSli:
; Line 1055
	mov	rax, QWORD PTR Value$[rsp]
	movsd	xmm0, QWORD PTR ValueMin$[rsp]
	comisd	xmm0, QWORD PTR [rax]
	jbe	SHORT $LN3@ZenGluiSli
	mov	rax, QWORD PTR Value$[rsp]
	movsd	xmm0, QWORD PTR ValueMin$[rsp]
	movsd	QWORD PTR [rax], xmm0
$LN3@ZenGluiSli:
; Line 1056
	mov	rax, QWORD PTR Value$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR ValueMax$[rsp]
	jbe	SHORT $LN4@ZenGluiSli
	mov	rax, QWORD PTR Value$[rsp]
	movsd	xmm0, QWORD PTR ValueMax$[rsp]
	movsd	QWORD PTR [rax], xmm0
$LN4@ZenGluiSli:
; Line 1058
	mov	DWORD PTR SliderPadding$[rsp], 2
; Line 1060
	lea	rax, QWORD PTR SliderGroove$[rsp]
	lea	rcx, QWORD PTR Slider$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1061
	mov	eax, DWORD PTR SliderPadding$[rsp]
	mov	ecx, DWORD PTR SliderGroove$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SliderGroove$[rsp], eax
; Line 1062
	mov	eax, DWORD PTR SliderPadding$[rsp]
	mov	ecx, DWORD PTR SliderGroove$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SliderGroove$[rsp+4], eax
; Line 1063
	mov	eax, DWORD PTR SliderPadding$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR SliderGroove$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SliderGroove$[rsp+8], eax
; Line 1064
	mov	eax, DWORD PTR SliderPadding$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR SliderGroove$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SliderGroove$[rsp+12], eax
; Line 1066
	mov	DWORD PTR IsActive$[rsp], 0
; Line 1067
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR Slider$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	r9, QWORD PTR Value$[rsp]
	lea	r8, QWORD PTR $T4[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z ; ZenGluiReviseClickFocus
	mov	DWORD PTR ClickFocus$[rsp], eax
; Line 1069
	cmp	DWORD PTR ClickFocus$[rsp], 1
	je	SHORT $LN6@ZenGluiSli
	cmp	DWORD PTR ClickFocus$[rsp], 2
	jne	$LN5@ZenGluiSli
$LN6@ZenGluiSli:
; Line 1073
	mov	rax, QWORD PTR Glui$[rsp]
	mov	ecx, DWORD PTR SliderGroove$[rsp]
	mov	eax, DWORD PTR [rax+3024]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR SliderGroove$[rsp+8]
	divss	xmm0, xmm1
	movss	DWORD PTR PositionNormal$1[rsp], xmm0
; Line 1074
	movss	xmm0, DWORD PTR PositionNormal$1[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN9@ZenGluiSli
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv162[rsp], xmm0
	jmp	SHORT $LN10@ZenGluiSli
$LN9@ZenGluiSli:
	movss	xmm0, DWORD PTR PositionNormal$1[rsp]
	movss	DWORD PTR tv162[rsp], xmm0
$LN10@ZenGluiSli:
	movss	xmm0, DWORD PTR tv162[rsp]
	movss	DWORD PTR PositionNormal$1[rsp], xmm0
; Line 1075
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR PositionNormal$1[rsp]
	jbe	SHORT $LN11@ZenGluiSli
	xorps	xmm0, xmm0
	movss	DWORD PTR tv164[rsp], xmm0
	jmp	SHORT $LN12@ZenGluiSli
$LN11@ZenGluiSli:
	movss	xmm0, DWORD PTR PositionNormal$1[rsp]
	movss	DWORD PTR tv164[rsp], xmm0
$LN12@ZenGluiSli:
	movss	xmm0, DWORD PTR tv164[rsp]
	movss	DWORD PTR PositionNormal$1[rsp], xmm0
; Line 1076
	movsd	xmm0, QWORD PTR ValueMax$[rsp]
	subsd	xmm0, QWORD PTR ValueMin$[rsp]
	cvtss2sd xmm1, DWORD PTR PositionNormal$1[rsp]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR ValueMin$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Value$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1077
	mov	DWORD PTR IsActive$[rsp], 1
$LN5@ZenGluiSli:
; Line 1081
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR Slider$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 9
	lea	r8, QWORD PTR $T7[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	edx, DWORD PTR [rcx+rax+3080]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 1085
	mov	eax, DWORD PTR SliderGroove$[rsp+8]
	mov	DWORD PTR SliderW$[rsp], eax
; Line 1086
	mov	DWORD PTR SliderThumbW$[rsp], 12
; Line 1087
	mov	rax, QWORD PTR Value$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	subsd	xmm0, QWORD PTR ValueMin$[rsp]
	movsd	xmm1, QWORD PTR ValueMax$[rsp]
	subsd	xmm1, QWORD PTR ValueMin$[rsp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR SliderThumbXNormal$[rsp], xmm0
; Line 1088
	mov	eax, DWORD PTR SliderThumbW$[rsp]
	mov	ecx, DWORD PTR SliderW$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2sd xmm0, eax
	movsd	xmm1, QWORD PTR SliderThumbXNormal$[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR SliderThumbX$[rsp], xmm0
; Line 1090
	lea	rax, QWORD PTR SliderThumb$[rsp]
	lea	rcx, QWORD PTR SliderGroove$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1091
	cvttsd2si eax, QWORD PTR SliderThumbX$[rsp]
	mov	ecx, DWORD PTR SliderThumb$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SliderThumb$[rsp], eax
; Line 1092
	mov	eax, DWORD PTR SliderThumbW$[rsp]
	mov	DWORD PTR SliderThumb$[rsp+8], eax
; Line 1094
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR SliderThumb$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 6
	lea	r8, QWORD PTR $T9[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	edx, DWORD PTR [rcx+rax+3080]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 1096
	lea	rax, QWORD PTR ThumbTagBounds$[rsp]
	lea	rcx, QWORD PTR SliderGroove$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1098
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	comisd	xmm0, QWORD PTR SliderThumbXNormal$[rsp]
	jbe	SHORT $LN7@ZenGluiSli
; Line 1099
	mov	eax, DWORD PTR SliderThumb$[rsp]
	mov	ecx, DWORD PTR SliderThumb$[rsp+8]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR ThumbTagBounds$[rsp], eax
$LN7@ZenGluiSli:
; Line 1102
	mov	rax, QWORD PTR Value$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG105874
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR ThumbTag$[rsp], rax
; Line 1103
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR ThumbTagBounds$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ThumbTag$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	eax, DWORD PTR [rcx+rax+3080]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR __real@41900000
	mov	r8d, 2
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rdx, QWORD PTR [rax+3064]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z ; ZenGluiDrawText
; Line 1104
	mov	eax, DWORD PTR IsActive$[rsp]
$LN1@ZenGluiSli:
; Line 1105
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 488				; 000001e8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiSlider@@YAHPEAUZEN_IMGLUI@@HPEANNN@Z ENDP	; ZenGluiSlider
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Max$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
Source$ = 176
View$ = 192
$T8 = 208
__$ArrayPad$ = 224
Glui$ = 272
Identifier$ = 280
Flags$ = 288
Size$ = 296
Texture$ = 304
?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z PROC ; ZenGluiTextureView
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 997
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+1204]
	mov	QWORD PTR Max$[rsp], rax
; Line 1000
	cmp	DWORD PTR Size$[rsp], -1
	jne	SHORT $LN2@ZenGluiTex
	mov	eax, DWORD PTR Max$[rsp]
	mov	DWORD PTR Size$[rsp], eax
$LN2@ZenGluiTex:
; Line 1001
	cmp	DWORD PTR Size$[rsp+4], -1
	jne	SHORT $LN3@ZenGluiTex
	mov	eax, DWORD PTR Max$[rsp+4]
	mov	DWORD PTR Size$[rsp+4], eax
$LN3@ZenGluiTex:
; Line 1002
	cvtsi2ss xmm0, DWORD PTR Size$[rsp]
	mov	rax, QWORD PTR Texture$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR Texture$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax+4]
	divss	xmm1, xmm2
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR Size$[rsp+4], eax
; Line 1004
	mov	DWORD PTR $T7[rsp], 1
	mov	DWORD PTR $T7[rsp+4], 1
	mov	DWORD PTR $T7[rsp+8], 1
	mov	DWORD PTR $T7[rsp+12], 1
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ; ZenGluiLayoutAllot
	lea	rcx, QWORD PTR View$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1005
	mov	DWORD PTR Source$[rsp], 0
	mov	DWORD PTR Source$[rsp+4], 0
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR Source$[rsp+8], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR Source$[rsp+12], eax
; Line 1007
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR View$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR Source$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR Texture$[rsp]
	lea	r8, QWORD PTR $T4[rsp]
	mov	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ; ZenGluiDrawSkinnedRect
; Line 1008
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiTextureView@@YAXPEAUZEN_IMGLUI@@PEBDHUi32x2@@PEAUZenTexture@@@Z ENDP ; ZenGluiTextureView
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Glui$ = 48
?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z PROC		; ZenGluiPullWindow
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 988
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 989
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z ; ZenGluiPullLayout
; Line 990
	add	rsp, 40					; 00000028H
	ret	0
?ZenGluiPullWindow@@YAXPEAUZEN_IMGLUI@@@Z ENDP		; ZenGluiPullWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ClickFocus$1 = 64
tv260 = 68
TitlebarSize$2 = 72
Delta$3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$T9 = 176
$T10 = 192
$T11 = 208
$T12 = 224
$T13 = 240
$T14 = 256
$T15 = 272
$T16 = 288
$T17 = 304
$T18 = 320
$T19 = 336
$T20 = 352
$T21 = 368
$T22 = 384
$T23 = 400
$T24 = 416
Titlebar$ = 432
CloseButton$ = 448
$T25 = 464
WindowView$ = 480
$T26 = 496
$T27 = 512
$T28 = 528
$T29 = 544
$T30 = 560
$T31 = 576
$T32 = 592
$T33 = 608
__$ArrayPad$ = 624
Glui$ = 672
View$ = 680
?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z PROC ; ZenGluiPushWindow
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 922
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 648				; 00000288H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 924
	mov	rax, QWORD PTR View$[rsp]
	mov	DWORD PTR [rax+24], 1
; Line 930
	mov	rax, QWORD PTR View$[rsp]
	cmp	DWORD PTR [rax+72], 0
	jne	$LN2@ZenGluiPus
; Line 932
	lea	rax, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR View$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T8[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z ; ZenGluiPushLayout
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR WindowView$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 935
	mov	DWORD PTR TitlebarSize$2[rsp], -1
	mov	rax, QWORD PTR Glui$[rsp]
	mov	eax, DWORD PTR [rax+3040]
	mov	DWORD PTR TitlebarSize$2[rsp+4], eax
; Line 936
	lea	rax, QWORD PTR $T27[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR TitlebarSize$2[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T11[rsp]
	mov	r8d, 1
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ; ZenGluiLayoutAllot
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR Titlebar$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 940
	mov	DWORD PTR $T25[rsp], 0
	mov	DWORD PTR $T25[rsp+4], 0
	mov	DWORD PTR $T25[rsp+8], 18
	mov	DWORD PTR $T25[rsp+12], 18
	lea	rax, QWORD PTR CloseButton$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 941
	mov	eax, DWORD PTR Titlebar$[rsp+12]
	sar	eax, 1
	mov	ecx, DWORD PTR Titlebar$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR CloseButton$[rsp+12]
	sar	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR CloseButton$[rsp+4], eax
; Line 942
	mov	eax, DWORD PTR Titlebar$[rsp+8]
	mov	ecx, DWORD PTR Titlebar$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR CloseButton$[rsp+8]
	mov	ecx, DWORD PTR CloseButton$[rsp+12]
	mov	edx, DWORD PTR Titlebar$[rsp+12]
	sub	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR CloseButton$[rsp], eax
; Line 944
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR Titlebar$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	r9, QWORD PTR View$[rsp]
	lea	r8, QWORD PTR $T13[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z ; ZenGluiReviseClickFocus
	mov	DWORD PTR ClickFocus$1[rsp], eax
; Line 946
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR CloseButton$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T14[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z ; ZenGluiIsMouseCursorOver
	test	eax, eax
	je	SHORT $LN3@ZenGluiPus
	cmp	DWORD PTR ClickFocus$1[rsp], -1
	jne	SHORT $LN3@ZenGluiPus
; Line 947
	mov	rax, QWORD PTR View$[rsp]
	mov	DWORD PTR [rax+72], 1
; Line 948
	jmp	$LN4@ZenGluiPus
$LN3@ZenGluiPus:
; Line 952
	cmp	DWORD PTR ClickFocus$1[rsp], 1
	jne	SHORT $LN5@ZenGluiPus
; Line 953
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+3024]
	mov	QWORD PTR ?CursorStart@?9??ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z@4Ui32x2@@A, rax
; Line 954
	mov	rax, QWORD PTR View$[rsp]
	mov	DWORD PTR [rax+76], 1
; Line 955
	jmp	SHORT $LN6@ZenGluiPus
$LN5@ZenGluiPus:
; Line 956
	cmp	DWORD PTR ClickFocus$1[rsp], 2
	jne	SHORT $LN7@ZenGluiPus
; Line 957
	mov	rdx, QWORD PTR ?CursorStart@?9??ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z@4Ui32x2@@A
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rax+3024]
	call	??G@YA?AUi32x2@@U0@0@Z			; operator-
	mov	QWORD PTR Delta$3[rsp], rax
; Line 958
	mov	rax, QWORD PTR View$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR Delta$3[rsp]
	mov	rcx, QWORD PTR View$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 959
	mov	rax, QWORD PTR View$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR Delta$3[rsp+4]
	mov	rcx, QWORD PTR View$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 960
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+3024]
	mov	QWORD PTR ?CursorStart@?9??ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z@4Ui32x2@@A, rax
; Line 961
	mov	rax, QWORD PTR View$[rsp]
	mov	DWORD PTR [rax+76], 1
$LN7@ZenGluiPus:
$LN6@ZenGluiPus:
$LN4@ZenGluiPus:
; Line 966
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR WindowView$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 2
	lea	r8, QWORD PTR $T17[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	edx, DWORD PTR [rcx+rax+3080]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 969
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR Titlebar$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 3
	lea	r8, QWORD PTR $T5[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	edx, DWORD PTR [rcx+rax+3080]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 970
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR Titlebar$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR View$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	eax, DWORD PTR [rcx+rax+3080]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR __real@42000000
	mov	r8d, 2
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rdx, QWORD PTR [rax+3064]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z ; ZenGluiDrawText
; Line 973
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR CloseButton$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 6
	lea	r8, QWORD PTR $T10[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	edx, DWORD PTR [rcx+rax+3080]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 977
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR WindowView$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, 4
	imul	rax, rax, 1
	lea	r9, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	r8d, DWORD PTR [rcx+3136]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	edx, DWORD PTR [rcx+rax+3080]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z ; ZenGluiDrawRectOutline
$LN2@ZenGluiPus:
; Line 981
	mov	rax, QWORD PTR View$[rsp]
	mov	QWORD PTR ?LastView@@3PEAUZenView@@EA, rax
; Line 983
	mov	rax, QWORD PTR View$[rsp]
	cmp	DWORD PTR [rax+72], 0
	jne	SHORT $LN9@ZenGluiPus
	mov	DWORD PTR tv260[rsp], 1
	jmp	SHORT $LN10@ZenGluiPus
$LN9@ZenGluiPus:
	mov	DWORD PTR tv260[rsp], 0
$LN10@ZenGluiPus:
	mov	eax, DWORD PTR tv260[rsp]
; Line 984
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 648				; 00000288H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiPushWindow@@YAHPEAUZEN_IMGLUI@@PEAUZenView@@@Z ENDP ; ZenGluiPushWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Glui$ = 8
TabMode$ = 16
?ZenGluiTabMode@@YAXPEAUZEN_IMGLUI@@H@Z PROC		; ZenGluiTabMode
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 913
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 914
	cmp	QWORD PTR ?LastView@@3PEAUZenView@@EA, 0
	je	SHORT $LN2@ZenGluiTab
; Line 916
	mov	rax, QWORD PTR ?LastView@@3PEAUZenView@@EA
	mov	ecx, DWORD PTR TabMode$[rsp]
	mov	DWORD PTR [rax+28], ecx
$LN2@ZenGluiTab:
; Line 918
	ret	0
?ZenGluiTabMode@@YAXPEAUZEN_IMGLUI@@H@Z ENDP		; ZenGluiTabMode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 64
VertCount$ = 68
Scale$ = 72
VertArray$ = 80
Font$ = 88
Clipped$ = 96
Color$ = 100
$T2 = 104
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
$T10 = 224
Layout$ = 240
$T11 = 256
Loca$12 = 272
Glyph$13 = 288
$T14 = 320
$T15 = 336
__$ArrayPad$ = 352
Glui$ = 400
Identifier$ = 408
Flags$ = 416
SizeY$ = 424
Value$ = 432
?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z PROC	; ZenGluiTextView
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 852
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 853
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+3064]
	mov	QWORD PTR Font$[rsp], rax
; Line 855
	mov	rcx, QWORD PTR Value$[rsp]
	call	strlen
	mov	DWORD PTR VertCount$[rsp], eax
; Line 856
	movsxd	rax, DWORD PTR VertCount$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, eax
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR VertArray$[rsp], rax
; Line 858
	mov	rax, QWORD PTR Font$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+44]
	movss	xmm1, DWORD PTR SizeY$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Scale$[rsp], xmm0
; Line 861
	lea	rax, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+1196]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR Layout$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 862
	movss	xmm0, DWORD PTR Layout$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Layout$[rsp], xmm0
; Line 863
	movss	xmm0, DWORD PTR Layout$[rsp+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Layout$[rsp+4], xmm0
; Line 864
	movss	xmm0, DWORD PTR Layout$[rsp+8]
	subss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR Layout$[rsp+8], xmm0
; Line 865
	movss	xmm0, DWORD PTR Layout$[rsp+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR Layout$[rsp+12], xmm0
; Line 867
	mov	rax, QWORD PTR Value$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR VertArray$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR VertCount$[rsp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR Scale$[rsp]
	lea	r8, QWORD PTR Layout$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z ; ZenArrangeFontGlyphs
	mov	DWORD PTR Clipped$[rsp], eax
; Line 868
	mov	rcx, QWORD PTR Layout$[rsp+8]
	call	?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z	; ZenToInt
	mov	QWORD PTR $T2[rsp], rax
	mov	DWORD PTR $T11[rsp], 1
	mov	DWORD PTR $T11[rsp+4], 1
	mov	DWORD PTR $T11[rsp+8], 1
	mov	DWORD PTR $T11[rsp+12], 1
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T4[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ; ZenGluiLayoutAllot
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z	; ZenToFloat
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR Layout$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 870
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	eax, DWORD PTR [rcx+rax+3080]
	mov	DWORD PTR Color$[rsp], eax
; Line 872
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ZenGluiTex
$LN2@ZenGluiTex:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ZenGluiTex:
	mov	eax, DWORD PTR Clipped$[rsp]
	mov	ecx, DWORD PTR VertCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN3@ZenGluiTex
; Line 873
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertArray$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	lea	rdx, QWORD PTR Glyph$13[rsp]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 28
	rep movsb
; Line 875
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertArray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax+4]
	movss	DWORD PTR Loca$12[rsp], xmm0
; Line 876
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertArray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax+8]
	movss	DWORD PTR Loca$12[rsp+4], xmm0
; Line 877
	cvtsi2ss xmm0, DWORD PTR Glyph$13[rsp+8]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Loca$12[rsp+8], xmm0
; Line 878
	cvtsi2ss xmm0, DWORD PTR Glyph$13[rsp+12]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Loca$12[rsp+12], xmm0
; Line 879
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR Glyph$13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR Loca$12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR Font$[rsp]
	mov	r9, QWORD PTR [rax+104]
	lea	r8, QWORD PTR $T7[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ; ZenGluiDrawSkinnedRect
; Line 880
	jmp	$LN2@ZenGluiTex
$LN3@ZenGluiTex:
; Line 881
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiTextView@@YAXPEAUZEN_IMGLUI@@PEBDHM1@Z ENDP	; ZenGluiTextView
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 64
VertCount$ = 68
Scale$ = 72
VertArray$ = 80
Clipped$ = 88
GlyphIndex$2 = 92
$T3 = 96
$T4 = 112
Loca$5 = 128
Glyph$6 = 144
__$ArrayPad$ = 176
Glui$ = 224
Font$ = 232
Flags$ = 240
SizeY$ = 248
Color$ = 256
Limit$ = 264
String$ = 272
?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z PROC ; ZenGluiDrawText
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 824
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 826
	mov	rcx, QWORD PTR String$[rsp]
	call	strlen
	mov	DWORD PTR VertCount$[rsp], eax
; Line 829
	movsxd	rax, DWORD PTR VertCount$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, eax
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR VertArray$[rsp], rax
; Line 830
	mov	rax, QWORD PTR Font$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+44]
	movss	xmm1, DWORD PTR SizeY$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Scale$[rsp], xmm0
; Line 831
	mov	rax, QWORD PTR String$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR VertArray$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR VertCount$[rsp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR Scale$[rsp]
	mov	r8, QWORD PTR Limit$[rsp]
	mov	edx, DWORD PTR Flags$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z ; ZenArrangeFontGlyphs
	mov	DWORD PTR Clipped$[rsp], eax
; Line 836
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ZenGluiDra
$LN2@ZenGluiDra:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ZenGluiDra:
	mov	eax, DWORD PTR Clipped$[rsp]
	mov	ecx, DWORD PTR VertCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN3@ZenGluiDra
; Line 838
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertArray$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR GlyphIndex$2[rsp], eax
; Line 839
	movsxd	rax, DWORD PTR GlyphIndex$2[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	lea	rdx, QWORD PTR Glyph$6[rsp]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 28
	rep movsb
; Line 841
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertArray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax+4]
	movss	DWORD PTR Loca$5[rsp], xmm0
; Line 842
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertArray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax+8]
	movss	DWORD PTR Loca$5[rsp+4], xmm0
; Line 843
	cvtsi2ss xmm0, DWORD PTR Glyph$6[rsp+8]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Loca$5[rsp+8], xmm0
; Line 844
	cvtsi2ss xmm0, DWORD PTR Glyph$6[rsp+12]
	movss	xmm1, DWORD PTR Scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Loca$5[rsp+12], xmm0
; Line 845
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR Glyph$6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR Loca$5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR Font$[rsp]
	mov	r9, QWORD PTR [rax+104]
	lea	r8, QWORD PTR $T4[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ; ZenGluiDrawSkinnedRect
; Line 846
	jmp	$LN2@ZenGluiDra
$LN3@ZenGluiDra:
; Line 847
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiDrawText@@YAXPEAUZEN_IMGLUI@@PEAUZenGlyphFont@@HMITf32x4@@PEBD@Z ENDP ; ZenGluiDrawText
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
__$ArrayPad$ = 160
Glui$ = 208
Color$ = 216
T$ = 224
Rect$ = 232
?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z PROC ; ZenGluiDrawRectOutline
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 814
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 816
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T5[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T5[rsp+4], xmm0
	mov	eax, DWORD PTR T$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T5[rsp+8], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	movss	DWORD PTR $T5[rsp+12], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 817
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T6[rsp], xmm0
	mov	rax, QWORD PTR Rect$[rsp]
	mov	rcx, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR $T6[rsp+4], xmm0
	mov	eax, DWORD PTR T$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T6[rsp+8], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	movss	DWORD PTR $T6[rsp+12], xmm0
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T2[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 818
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T7[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T7[rsp+4], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	movss	DWORD PTR $T7[rsp+8], xmm0
	mov	eax, DWORD PTR T$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T7[rsp+12], xmm0
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 819
	mov	rax, QWORD PTR Rect$[rsp]
	mov	rcx, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR $T8[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T8[rsp+4], xmm0
	cvtsi2ss xmm0, DWORD PTR T$[rsp]
	movss	DWORD PTR $T8[rsp+8], xmm0
	mov	eax, DWORD PTR T$[rsp]
	shl	eax, 1
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T8[rsp+12], xmm0
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T4[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ; ZenGluiDrawRect
; Line 820
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiDrawRectOutline@@YAXPEAUZEN_IMGLUI@@IHTf32x4@@@Z ENDP ; ZenGluiDrawRectOutline
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
Glui$ = 112
Color$ = 120
Rect$ = 128
Texture$ = 136
Source$ = 144
?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z PROC ; ZenGluiDrawSkinnedRect
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 809
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Source$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR Texture$[rsp]
	lea	r8, QWORD PTR $T2[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ; ZenImmediateSkinnedRect
; Line 810
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiDrawSkinnedRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ENDP ; ZenGluiDrawSkinnedRect
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
Glui$ = 80
Color$ = 88
Rect$ = 96
?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z PROC	; ZenGluiDrawRect
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 803
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z ; ZenImmediateRect
; Line 804
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiDrawRect@@YAXPEAUZEN_IMGLUI@@ITf32x4@@@Z ENDP	; ZenGluiDrawRect
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 0
Glui$ = 48
?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z PROC		; ZenGluiPullLayout
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 795
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24
	mov	rax, QWORD PTR Glui$[rsp]
	add	rax, 584				; 00000248H
	mov	rcx, QWORD PTR Glui$[rsp]
	cmp	QWORD PTR [rcx+1168], rax
	jbe	SHORT $LN2@ZenGluiPul
; Line 796
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+1168]
	sub	rax, 36					; 00000024H
	mov	QWORD PTR tv70[rsp], rax
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR tv70[rsp]
	mov	QWORD PTR [rax+1168], rcx
	mov	rax, QWORD PTR Glui$[rsp]
	lea	rdi, QWORD PTR [rax+1176]
	mov	rsi, QWORD PTR tv70[rsp]
	mov	ecx, 36					; 00000024H
	rep movsb
$LN2@ZenGluiPul:
; Line 798
	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiPullLayout@@YAXPEAUZEN_IMGLUI@@@Z ENDP		; ZenGluiPullLayout
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
OldLayout$ = 0
NewLayout$ = 40
__$ArrayPad$ = 80
__$ReturnAddress$ = 128
Glui$ = 136
TypeAndFlags$ = 144
Location$ = 152
?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z PROC ; ZenGluiPushLayout
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 758
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rax, QWORD PTR OldLayout$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+1176]
	mov	ecx, 36					; 00000024H
	rep movsb
; Line 760
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+8], -1
	jne	SHORT $LN2@ZenGluiPus
	mov	rax, QWORD PTR Location$[rsp]
	mov	ecx, DWORD PTR OldLayout$[rsp+12]
	mov	DWORD PTR [rax+8], ecx
$LN2@ZenGluiPus:
; Line 761
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+12], -1
	jne	SHORT $LN3@ZenGluiPus
	mov	rax, QWORD PTR Location$[rsp]
	mov	ecx, DWORD PTR OldLayout$[rsp+16]
	mov	DWORD PTR [rax+12], ecx
$LN3@ZenGluiPus:
; Line 764
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax], -1
	jne	SHORT $LN4@ZenGluiPus
; Line 765
	mov	rax, QWORD PTR Location$[rsp]
	mov	ecx, DWORD PTR OldLayout$[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 767
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Location$[rsp]
	add	eax, DWORD PTR [rcx+8]
	cmp	eax, DWORD PTR OldLayout$[rsp+12]
	jle	SHORT $LN5@ZenGluiPus
; Line 768
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR OldLayout$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Location$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN5@ZenGluiPus:
$LN4@ZenGluiPus:
; Line 772
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+4], -1
	jne	SHORT $LN6@ZenGluiPus
; Line 773
	mov	rax, QWORD PTR Location$[rsp]
	mov	ecx, DWORD PTR OldLayout$[rsp+8]
	mov	DWORD PTR [rax+4], ecx
; Line 775
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR Location$[rsp]
	add	eax, DWORD PTR [rcx+12]
	cmp	eax, DWORD PTR OldLayout$[rsp+16]
	jle	SHORT $LN7@ZenGluiPus
; Line 776
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR OldLayout$[rsp+16]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Location$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN7@ZenGluiPus:
$LN6@ZenGluiPus:
; Line 781
	mov	eax, DWORD PTR TypeAndFlags$[rsp]
	mov	DWORD PTR NewLayout$[rsp], eax
; Line 782
	lea	rax, QWORD PTR NewLayout$[rsp+4]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 16
	rep movsb
; Line 783
	lea	rax, QWORD PTR NewLayout$[rsp+20]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 16
	rep movsb
; Line 785
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR [rcx+1160]
	cmp	QWORD PTR [rax+1168], rcx
	jae	SHORT $LN8@ZenGluiPus
; Line 786
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+1168]
	lea	rcx, QWORD PTR OldLayout$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rax, QWORD PTR [rax+1168]
	add	rax, 36					; 00000024H
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	QWORD PTR [rcx+1168], rax
$LN8@ZenGluiPus:
; Line 789
	mov	rax, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR NewLayout$[rsp]
	lea	rdi, QWORD PTR [rax+1176]
	mov	rsi, rcx
	mov	ecx, 36					; 00000024H
	rep movsb
; Line 790
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 791
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiPushLayout@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@@Z ENDP ; ZenGluiPushLayout
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
V$ = 0
tv68 = 4
tv70 = 8
H$ = 12
Child$ = 16
Reserved$ = 32
__$ArrayPad$ = 48
__$ReturnAddress$ = 96
Glui$ = 104
Flags$ = 112
Margin$ = 120
SizeAndFlags$ = 128
?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z PROC ; ZenGluiLayoutAllot
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 717
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 718
	lea	rax, QWORD PTR Reserved$[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+1196]
	mov	ecx, 16
	rep movsb
; Line 721
	cmp	DWORD PTR SizeAndFlags$[rsp], -1
	je	SHORT $LN10@ZenGluiLay
	mov	eax, DWORD PTR SizeAndFlags$[rsp]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN11@ZenGluiLay
$LN10@ZenGluiLay:
	mov	eax, DWORD PTR Reserved$[rsp+8]
	mov	DWORD PTR tv68[rsp], eax
$LN11@ZenGluiLay:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR Child$[rsp+8], eax
; Line 722
	cmp	DWORD PTR SizeAndFlags$[rsp+4], -1
	je	SHORT $LN12@ZenGluiLay
	mov	eax, DWORD PTR SizeAndFlags$[rsp+4]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN13@ZenGluiLay
$LN12@ZenGluiLay:
	mov	eax, DWORD PTR Reserved$[rsp+12]
	mov	DWORD PTR tv70[rsp], eax
$LN13@ZenGluiLay:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR Child$[rsp+12], eax
; Line 723
	mov	rax, QWORD PTR Margin$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR Reserved$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Child$[rsp], eax
; Line 724
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@ZenGluiLay
; Line 725
	mov	eax, DWORD PTR Reserved$[rsp+12]
	mov	ecx, DWORD PTR Reserved$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR Child$[rsp+12]
	mov	rcx, QWORD PTR Margin$[rsp]
	sub	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR Child$[rsp+4], eax
; Line 726
	jmp	SHORT $LN3@ZenGluiLay
$LN2@ZenGluiLay:
; Line 727
	mov	rax, QWORD PTR Margin$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR Reserved$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Child$[rsp+4], eax
$LN3@ZenGluiLay:
; Line 729
	mov	rax, QWORD PTR Margin$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR Margin$[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	DWORD PTR V$[rsp], eax
; Line 730
	mov	rax, QWORD PTR Margin$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Margin$[rsp]
	add	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR H$[rsp], eax
; Line 732
	mov	eax, DWORD PTR H$[rsp]
	mov	ecx, DWORD PTR Child$[rsp+8]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR Reserved$[rsp+8]
	jle	SHORT $LN4@ZenGluiLay
	mov	eax, DWORD PTR H$[rsp]
	mov	ecx, DWORD PTR Reserved$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Child$[rsp+8], eax
$LN4@ZenGluiLay:
; Line 733
	mov	eax, DWORD PTR V$[rsp]
	mov	ecx, DWORD PTR Child$[rsp+12]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR Reserved$[rsp+12]
	jle	SHORT $LN5@ZenGluiLay
	mov	eax, DWORD PTR V$[rsp]
	mov	ecx, DWORD PTR Reserved$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Child$[rsp+12], eax
$LN5@ZenGluiLay:
; Line 735
	cmp	DWORD PTR Child$[rsp+8], 0
	jge	SHORT $LN6@ZenGluiLay
	mov	DWORD PTR Child$[rsp+8], 0
$LN6@ZenGluiLay:
; Line 736
	cmp	DWORD PTR Child$[rsp+12], 0
	jge	SHORT $LN7@ZenGluiLay
	mov	DWORD PTR Child$[rsp+12], 0
$LN7@ZenGluiLay:
; Line 739
	mov	eax, DWORD PTR Flags$[rsp]
	not	eax
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@ZenGluiLay
; Line 740
	mov	eax, DWORD PTR Child$[rsp+12]
	mov	ecx, DWORD PTR V$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR Reserved$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Reserved$[rsp+4], eax
$LN8@ZenGluiLay:
; Line 742
	mov	eax, DWORD PTR Child$[rsp+12]
	mov	ecx, DWORD PTR V$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR Reserved$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Reserved$[rsp+12], eax
; Line 745
	mov	rax, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR Reserved$[rsp]
	lea	rdi, QWORD PTR [rax+1196]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 746
	lea	rax, QWORD PTR Child$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 747
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiLayoutAllot@@YA?ATi32x4@@PEAUZEN_IMGLUI@@HT1@Ui32x2@@@Z ENDP ; ZenGluiLayoutAllot
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
Glui$ = 80
Button$ = 88
Receiver$ = 96
ReceiverID$ = 104
?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z PROC ; ZenGluiReviseClickFocus
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 684
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 687
	mov	rax, QWORD PTR Glui$[rsp]
	mov	ecx, DWORD PTR Button$[rsp]
	mov	eax, DWORD PTR [rax+3032]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN2@ZenGluiRev
; Line 689
	mov	rax, QWORD PTR ReceiverID$[rsp]
	cmp	QWORD PTR ?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB, rax
	jne	SHORT $LN4@ZenGluiRev
; Line 690
	mov	eax, 2
	jmp	SHORT $LN1@ZenGluiRev
; Line 691
	jmp	SHORT $LN5@ZenGluiRev
$LN4@ZenGluiRev:
; Line 694
	cmp	QWORD PTR ?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB, 0
	jne	SHORT $LN6@ZenGluiRev
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Receiver$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR Glui$[rsp]
	call	?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z ; ZenGluiIsMouseCursorOver
	test	eax, eax
	je	SHORT $LN6@ZenGluiRev
; Line 695
	mov	rax, QWORD PTR ReceiverID$[rsp]
	mov	QWORD PTR ?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB, rax
; Line 696
	mov	eax, 1
	jmp	SHORT $LN1@ZenGluiRev
$LN6@ZenGluiRev:
$LN5@ZenGluiRev:
; Line 698
	jmp	SHORT $LN3@ZenGluiRev
$LN2@ZenGluiRev:
; Line 700
	mov	rax, QWORD PTR ReceiverID$[rsp]
	cmp	QWORD PTR ?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB, rax
	jne	SHORT $LN7@ZenGluiRev
; Line 701
	mov	QWORD PTR ?ActiveFocus@?1??ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z@4PEBXEB, 0
; Line 702
	mov	eax, -1
	jmp	SHORT $LN1@ZenGluiRev
$LN7@ZenGluiRev:
$LN3@ZenGluiRev:
; Line 705
	xor	eax, eax
$LN1@ZenGluiRev:
; Line 706
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiReviseClickFocus@@YAHPEAUZEN_IMGLUI@@HTi32x4@@PEBX@Z ENDP ; ZenGluiReviseClickFocus
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Glui$ = 8
Identifier$ = 16
Location$ = 24
?ZenGluiIsVisible@@YAHPEAUZEN_IMGLUI@@PEBDTi32x4@@@Z PROC ; ZenGluiIsVisible
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 659
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 661
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN3@ZenGluiIsV
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@ZenGluiIsV
$LN3@ZenGluiIsV:
; Line 664
	xor	eax, eax
	jmp	SHORT $LN1@ZenGluiIsV
$LN2@ZenGluiIsV:
; Line 666
	mov	eax, 1
$LN1@ZenGluiIsV:
; Line 667
	ret	0
?ZenGluiIsVisible@@YAHPEAUZEN_IMGLUI@@PEBDTi32x4@@@Z ENDP ; ZenGluiIsVisible
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
Glui$ = 80
Quad$ = 88
?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z PROC ; ZenGluiIsMouseCursorOver
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 649
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 650
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Quad$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rdx, QWORD PTR [rax+3024]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z ; ZenPlaneOverlaps
; Line 652
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiIsMouseCursorOver@@YAHPEAUZEN_IMGLUI@@Ti32x4@@@Z ENDP ; ZenGluiIsMouseCursorOver
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 0
R$ = 32
P$ = 40
?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z PROC		; ZenPlaneOverlaps
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 603
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 604
	mov	rax, QWORD PTR R$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR P$[rsp], eax
	jl	SHORT $LN3@ZenPlaneOv
	mov	rax, QWORD PTR R$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR P$[rsp+4], eax
	jl	SHORT $LN3@ZenPlaneOv
	mov	rax, QWORD PTR R$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR R$[rsp]
	add	eax, DWORD PTR [rcx+8]
	cmp	DWORD PTR P$[rsp], eax
	jge	SHORT $LN3@ZenPlaneOv
	mov	rax, QWORD PTR R$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR R$[rsp]
	add	eax, DWORD PTR [rcx+12]
	cmp	DWORD PTR P$[rsp+4], eax
	jge	SHORT $LN3@ZenPlaneOv
	mov	DWORD PTR tv82[rsp], 1
	jmp	SHORT $LN4@ZenPlaneOv
$LN3@ZenPlaneOv:
	mov	DWORD PTR tv82[rsp], 0
$LN4@ZenPlaneOv:
	mov	eax, DWORD PTR tv82[rsp]
; Line 608
	add	rsp, 24
	ret	0
?ZenPlaneOverlaps@@YAHTi32x4@@Ui32x2@@@Z ENDP		; ZenPlaneOverlaps
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
$T9 = 160
$T10 = 176
$T11 = 192
$T12 = 208
$T13 = 224
$T14 = 240
$T15 = 256
$T16 = 272
$T17 = 288
$T18 = 304
$T19 = 320
$T20 = 336
$T21 = 352
$T22 = 368
$T23 = 384
$T24 = 400
$T25 = 416
$T26 = 432
$T27 = 448
$T28 = 464
$T29 = 480
$T30 = 496
$T31 = 512
$T32 = 528
$T33 = 544
$T34 = 560
$T35 = 576
$T36 = 592
$T37 = 608
$T38 = 624
$T39 = 640
$T40 = 656
$T41 = 672
$T42 = 688
$T43 = 704
$T44 = 720
$T45 = 736
$T46 = 752
$T47 = 768
$T48 = 784
$T49 = 800
$T50 = 816
$T51 = 832
$T52 = 848
$T53 = 864
$T54 = 880
$T55 = 896
$T56 = 912
$T57 = 928
$T58 = 944
$T59 = 960
$T60 = 976
$T61 = 992
$T62 = 1008
$T63 = 1024
$T64 = 1040
$T65 = 1056
$T66 = 1072
$T67 = 1088
$T68 = 1104
$T69 = 1120
$T70 = 1136
$T71 = 1152
$T72 = 1168
__$ArrayPad$ = 1184
Glui$ = 1232
MemorySlice$ = 1240
Mode$ = 1248
?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z PROC ; ZenGluiInit
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 558
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1208				; 000004b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 559
	mov	r8d, 3144				; 00000c48H
	xor	edx, edx
	mov	rcx, QWORD PTR Glui$[rsp]
	call	memset
; Line 561
	mov	rax, QWORD PTR MemorySlice$[rsp]
	mov	eax, DWORD PTR [rax]
	xor	edx, edx
	mov	ecx, 112				; 00000070H
	div	rcx
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 562
	mov	rax, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rax+20], 0
; Line 563
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR MemorySlice$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+24], rcx
; Line 565
	mov	rax, QWORD PTR Glui$[rsp]
	mov	rcx, QWORD PTR Mode$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 567
	mov	rax, QWORD PTR Glui$[rsp]
	add	rax, 1160				; 00000488H
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	QWORD PTR [rcx+1160], rax
; Line 568
	mov	rax, QWORD PTR Glui$[rsp]
	add	rax, 584				; 00000248H
	mov	rcx, QWORD PTR Glui$[rsp]
	mov	QWORD PTR [rcx+1168], rax
; Line 571
	mov	rax, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rax+1176], 0
; Line 572
	mov	DWORD PTR $T56[rsp], 0
	mov	DWORD PTR $T56[rsp+4], 0
	mov	DWORD PTR $T56[rsp+8], 65536		; 00010000H
	mov	DWORD PTR $T56[rsp+12], 65536		; 00010000H
	mov	rax, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T56[rsp]
	lea	rdi, QWORD PTR [rax+1180]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 573
	mov	DWORD PTR $T43[rsp], 0
	mov	DWORD PTR $T43[rsp+4], 0
	mov	DWORD PTR $T43[rsp+8], 65536		; 00010000H
	mov	DWORD PTR $T43[rsp+12], 65536		; 00010000H
	mov	rax, QWORD PTR Glui$[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	lea	rdi, QWORD PTR [rax+1196]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 576
	mov	rax, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rax+3040], 34		; 00000022H
; Line 577
	mov	rax, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rax+3136], 2
; Line 578
	movss	xmm0, DWORD PTR __real@43660000
	movss	DWORD PTR $T44[rsp], xmm0
	movss	xmm0, DWORD PTR __real@43660000
	movss	DWORD PTR $T44[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@43660000
	movss	DWORD PTR $T44[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T44[rsp+12], xmm0
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T71[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T71[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 579
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR $T45[rsp], xmm0
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR $T45[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR $T45[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T45[rsp+12], xmm0
	lea	rax, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T69[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR $T69[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T22[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 580
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR $T46[rsp], xmm0
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR $T46[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR $T46[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T46[rsp+12], xmm0
	lea	rax, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T67[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T25[rsp]
	lea	rcx, QWORD PTR $T67[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T25[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 581
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR $T47[rsp], xmm0
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR $T47[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@41c80000
	movss	DWORD PTR $T47[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T47[rsp+12], xmm0
	lea	rax, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T28[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 582
	movss	xmm0, DWORD PTR __real@43700000
	movss	DWORD PTR $T48[rsp], xmm0
	movss	xmm0, DWORD PTR __real@43700000
	movss	DWORD PTR $T48[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@43700000
	movss	DWORD PTR $T48[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T48[rsp+12], xmm0
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T64[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T4[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 583
	xorps	xmm0, xmm0
	movss	DWORD PTR $T49[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T49[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T49[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $T49[rsp+12], xmm0
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T63[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T63[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 584
	movss	xmm0, DWORD PTR __real@42960000
	movss	DWORD PTR $T50[rsp], xmm0
	movss	xmm0, DWORD PTR __real@42960000
	movss	DWORD PTR $T50[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@42960000
	movss	DWORD PTR $T50[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T50[rsp+12], xmm0
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T60[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T60[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T10[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 585
	movss	xmm0, DWORD PTR __real@42be0000
	movss	DWORD PTR $T57[rsp], xmm0
	movss	xmm0, DWORD PTR __real@42be0000
	movss	DWORD PTR $T57[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@42be0000
	movss	DWORD PTR $T57[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T57[rsp+12], xmm0
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T57[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T62[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T62[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 586
	movss	xmm0, DWORD PTR __real@42e60000
	movss	DWORD PTR $T55[rsp], xmm0
	movss	xmm0, DWORD PTR __real@42e60000
	movss	DWORD PTR $T55[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@42e60000
	movss	DWORD PTR $T55[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T55[rsp+12], xmm0
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T65[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR $T65[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T27[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 587
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR $T54[rsp], xmm0
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR $T54[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR $T54[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T54[rsp+12], xmm0
	lea	rax, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T68[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T68[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T21[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 588
	movss	xmm0, DWORD PTR __real@420c0000
	movss	DWORD PTR $T53[rsp], xmm0
	movss	xmm0, DWORD PTR __real@420c0000
	movss	DWORD PTR $T53[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@420c0000
	movss	DWORD PTR $T53[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T53[rsp+12], xmm0
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T70[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR $T70[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T18[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 589
	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR $T52[rsp], xmm0
	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR $T52[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR $T52[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T52[rsp+12], xmm0
	lea	rax, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T52[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T59[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T59[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T15[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 590
	movss	xmm0, DWORD PTR __real@422c0000
	movss	DWORD PTR $T51[rsp], xmm0
	movss	xmm0, DWORD PTR __real@422c0000
	movss	DWORD PTR $T51[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@422c0000
	movss	DWORD PTR $T51[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T51[rsp+12], xmm0
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T72[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T72[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T13[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 591
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR $T58[rsp], xmm0
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR $T58[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR $T58[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR $T58[rsp+12], xmm0
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	?ColorNormalize@@YA?ATf32x4@@T1@@Z	; ColorNormalize
	lea	rcx, QWORD PTR $T61[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T61[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T11[rsp]
	call	?ColorPackU@@YAITf32x4@@@Z		; ColorPackU
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR Glui$[rsp]
	mov	DWORD PTR [rdx+rcx+3080], eax
; Line 592
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1208				; 000004b8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGluiInit@@YAXPEAUZEN_IMGLUI@@UZenSlice@@PEAUZEN_IMMODE@@@Z ENDP ; ZenGluiInit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 0
Draw$2 = 8
Col$3 = 16
Pos$4 = 24
Tex$5 = 32
$T6 = 40
__$ArrayPad$ = 64
Mode$ = 112
Destination$ = 120
?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z PROC ; ZenImmediateModeToVertexArray
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 379
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 381
	mov	rax, QWORD PTR Mode$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR Draw$2[rsp], rax
	jmp	SHORT $LN4@ZenImmedia
$LN2@ZenImmedia:
	mov	rax, QWORD PTR Draw$2[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR Draw$2[rsp], rax
$LN4@ZenImmedia:
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+82]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR Mode$[rsp]
	add	rax, QWORD PTR [rcx+88]
	cmp	QWORD PTR Draw$2[rsp], rax
	jae	$LN3@ZenImmedia
; Line 383
	mov	rax, QWORD PTR Draw$2[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN8@ZenImmedia
; Line 385
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN7@ZenImmedia
$LN5@ZenImmedia:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN7@ZenImmedia:
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+22]
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN6@ZenImmedia
; Line 387
	lea	rax, QWORD PTR Pos$4[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+22]
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN9@ZenImmedia
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+20]
	add	eax, DWORD PTR I$1[rsp]
	cdqe
	mov	rcx, QWORD PTR Mode$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR Pos$4[rsp], rax
$LN9@ZenImmedia:
; Line 388
	mov	DWORD PTR Col$3[rsp], 0
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+26]
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN10@ZenImmedia
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+24]
	add	eax, DWORD PTR I$1[rsp]
	cdqe
	mov	rcx, QWORD PTR Mode$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR Col$3[rsp], eax
$LN10@ZenImmedia:
; Line 389
	lea	rax, QWORD PTR Tex$5[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+30]
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN11@ZenImmedia
	mov	rax, QWORD PTR Draw$2[rsp]
	movzx	eax, WORD PTR [rax+28]
	add	eax, DWORD PTR I$1[rsp]
	cdqe
	mov	rcx, QWORD PTR Mode$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR Tex$5[rsp], rax
$LN11@ZenImmedia:
; Line 391
	mov	rax, QWORD PTR Pos$4[rsp]
	mov	QWORD PTR $T6[rsp], rax
	mov	eax, DWORD PTR Col$3[rsp]
	mov	DWORD PTR $T6[rsp+8], eax
	mov	rax, QWORD PTR Tex$5[rsp]
	mov	QWORD PTR $T6[rsp+12], rax
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, QWORD PTR Destination$[rsp]
	mov	rsi, rax
	mov	ecx, 20
	rep movsb
	mov	rax, QWORD PTR Destination$[rsp]
	add	rax, 20
	mov	QWORD PTR Destination$[rsp], rax
; Line 392
	jmp	$LN5@ZenImmedia
$LN6@ZenImmedia:
$LN8@ZenImmedia:
; Line 394
	jmp	$LN2@ZenImmedia
$LN3@ZenImmedia:
; Line 395
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?ZenImmediateModeToVertexArray@@YAXPEAUZEN_IMMODE@@PEAUZEN_IMVERT@@@Z ENDP ; ZenImmediateModeToVertexArray
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Mode$ = 48
Destination$ = 56
?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z PROC ; ZenImmediateModeToIndexArray
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 373
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 374
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+18]
	shl	rax, 1
	mov	r8, rax
	mov	rax, QWORD PTR Mode$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR Destination$[rsp]
	call	memcpy
; Line 375
	add	rsp, 40					; 00000028H
	ret	0
?ZenImmediateModeToIndexArray@@YAXPEAUZEN_IMMODE@@PEAG@Z ENDP ; ZenImmediateModeToIndexArray
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bx$1 = 48
by$2 = 52
ey$3 = 56
ex$4 = 60
tv170 = 64
tv194 = 68
tv217 = 72
tv236 = 76
bx$5 = 80
by$6 = 84
ex$7 = 88
ey$8 = 92
tv182 = 96
tv184 = 100
tv206 = 104
tv208 = 108
$T9 = 112
$T10 = 120
$T11 = 128
$T12 = 136
$T13 = 144
$T14 = 152
$T15 = 160
$T16 = 168
Prim$ = 176
Draw$17 = 240
$T18 = 248
$T19 = 272
$T20 = 304
$T21 = 336
$T22 = 368
$T23 = 400
$T24 = 432
$T25 = 464
$T26 = 496
$T27 = 520
$T28 = 544
$T29 = 568
Mode$ = 624
Color$ = 632
Rect$ = 640
Texture$ = 648
Source$ = 656
?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z PROC ; ZenImmediateSkinnedRect
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 286
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 600				; 00000258H
; Line 288
	mov	eax, 6
	mov	WORD PTR Prim$[rsp+2], ax
; Line 289
	mov	eax, 4
	mov	WORD PTR Prim$[rsp+18], ax
; Line 290
	mov	eax, 4
	mov	WORD PTR Prim$[rsp+50], ax
; Line 291
	mov	eax, 4
	mov	WORD PTR Prim$[rsp+34], ax
; Line 293
	lea	r9, QWORD PTR Prim$[rsp]
	mov	r8, QWORD PTR Texture$[rsp]
	mov	edx, 2
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z ; ZenImmediateModePush
	mov	QWORD PTR Draw$17[rsp], rax
	cmp	QWORD PTR Draw$17[rsp], 0
	je	$LN2@ZenImmedia
; Line 295
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR bx$1[rsp], xmm0
; Line 296
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR by$2[rsp], xmm0
; Line 297
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR bx$1[rsp]
	addss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR ex$4[rsp], xmm0
; Line 298
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR by$2[rsp]
	addss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR ey$3[rsp], xmm0
; Line 299
	movss	xmm0, DWORD PTR bx$1[rsp]
	movss	DWORD PTR $T9[rsp], xmm0
	movss	xmm0, DWORD PTR by$2[rsp]
	movss	DWORD PTR $T9[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T9[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 300
	movss	xmm0, DWORD PTR bx$1[rsp]
	movss	DWORD PTR $T10[rsp], xmm0
	movss	xmm0, DWORD PTR ey$3[rsp]
	movss	DWORD PTR $T10[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 301
	movss	xmm0, DWORD PTR ex$4[rsp]
	movss	DWORD PTR $T11[rsp], xmm0
	movss	xmm0, DWORD PTR ey$3[rsp]
	movss	DWORD PTR $T11[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T11[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 302
	movss	xmm0, DWORD PTR ex$4[rsp]
	movss	DWORD PTR $T12[rsp], xmm0
	movss	xmm0, DWORD PTR by$2[rsp]
	movss	DWORD PTR $T12[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 307
	mov	DWORD PTR [rsp+32], 70			; 00000046H
	mov	r9d, 307				; 00000133H
	lea	r8, OFFSET FLAT:$SG105236
	lea	rdx, OFFSET FLAT:$SG105237
	lea	rcx, QWORD PTR $T26[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv182[rsp], eax
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv184[rsp], eax
	mov	rax, QWORD PTR Source$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jg	SHORT $LN4@ZenImmedia
	mov	DWORD PTR tv170[rsp], 1
	jmp	SHORT $LN5@ZenImmedia
$LN4@ZenImmedia:
	mov	DWORD PTR tv170[rsp], 0
$LN5@ZenImmedia:
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv182[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR tv184[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG105234
	mov	r8d, DWORD PTR tv170[rsp]
	lea	rdx, OFFSET FLAT:$SG105235
	lea	rcx, QWORD PTR $T19[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 308
	mov	DWORD PTR [rsp+32], 71			; 00000047H
	mov	r9d, 308				; 00000134H
	lea	r8, OFFSET FLAT:$SG105240
	lea	rdx, OFFSET FLAT:$SG105241
	lea	rcx, QWORD PTR $T27[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv206[rsp], eax
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv208[rsp], eax
	mov	rax, QWORD PTR Source$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jg	SHORT $LN6@ZenImmedia
	mov	DWORD PTR tv194[rsp], 1
	jmp	SHORT $LN7@ZenImmedia
$LN6@ZenImmedia:
	mov	DWORD PTR tv194[rsp], 0
$LN7@ZenImmedia:
	lea	rax, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv206[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG105238
	mov	r8d, DWORD PTR tv194[rsp]
	lea	rdx, OFFSET FLAT:$SG105239
	lea	rcx, QWORD PTR $T21[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 309
	mov	DWORD PTR [rsp+32], 72			; 00000048H
	mov	r9d, 309				; 00000135H
	lea	r8, OFFSET FLAT:$SG105244
	lea	rdx, OFFSET FLAT:$SG105245
	lea	rcx, QWORD PTR $T28[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Source$[rsp]
	add	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR Texture$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jg	SHORT $LN8@ZenImmedia
	mov	DWORD PTR tv217[rsp], 1
	jmp	SHORT $LN9@ZenImmedia
$LN8@ZenImmedia:
	mov	DWORD PTR tv217[rsp], 0
$LN9@ZenImmedia:
	lea	rax, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG105242
	mov	r8d, DWORD PTR tv217[rsp]
	lea	rdx, OFFSET FLAT:$SG105243
	lea	rcx, QWORD PTR $T23[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 310
	mov	DWORD PTR [rsp+32], 73			; 00000049H
	mov	r9d, 310				; 00000136H
	lea	r8, OFFSET FLAT:$SG105248
	lea	rdx, OFFSET FLAT:$SG105249
	lea	rcx, QWORD PTR $T29[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR Source$[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR Texture$[rsp]
	cmp	eax, DWORD PTR [rcx+8]
	jg	SHORT $LN10@ZenImmedia
	mov	DWORD PTR tv236[rsp], 1
	jmp	SHORT $LN11@ZenImmedia
$LN10@ZenImmedia:
	mov	DWORD PTR tv236[rsp], 0
$LN11@ZenImmedia:
	lea	rax, QWORD PTR $T25[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG105246
	mov	r8d, DWORD PTR tv236[rsp]
	lea	rdx, OFFSET FLAT:$SG105247
	lea	rcx, QWORD PTR $T25[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 312
	mov	rax, QWORD PTR Source$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR Texture$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+4]
	divss	xmm0, xmm1
	movss	DWORD PTR bx$5[rsp], xmm0
; Line 313
	mov	rax, QWORD PTR Source$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR Texture$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	divss	xmm0, xmm1
	movss	DWORD PTR by$6[rsp], xmm0
; Line 314
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Source$[rsp]
	add	eax, DWORD PTR [rcx+8]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR Texture$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+4]
	divss	xmm0, xmm1
	movss	DWORD PTR ex$7[rsp], xmm0
; Line 315
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR Source$[rsp]
	add	eax, DWORD PTR [rcx+12]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR Texture$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	divss	xmm0, xmm1
	movss	DWORD PTR ey$8[rsp], xmm0
; Line 317
	movss	xmm0, DWORD PTR bx$5[rsp]
	movss	DWORD PTR $T13[rsp], xmm0
	movss	xmm0, DWORD PTR ey$8[rsp]
	movss	DWORD PTR $T13[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Prim$[rsp+40]
	mov	rdx, QWORD PTR $T13[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 318
	movss	xmm0, DWORD PTR bx$5[rsp]
	movss	DWORD PTR $T14[rsp], xmm0
	movss	xmm0, DWORD PTR by$6[rsp]
	movss	DWORD PTR $T14[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Prim$[rsp+40]
	mov	rdx, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 319
	movss	xmm0, DWORD PTR ex$7[rsp]
	movss	DWORD PTR $T15[rsp], xmm0
	movss	xmm0, DWORD PTR by$6[rsp]
	movss	DWORD PTR $T15[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Prim$[rsp+40]
	mov	rdx, QWORD PTR $T15[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 320
	movss	xmm0, DWORD PTR ex$7[rsp]
	movss	DWORD PTR $T16[rsp], xmm0
	movss	xmm0, DWORD PTR ey$8[rsp]
	movss	DWORD PTR $T16[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Prim$[rsp+40]
	mov	rdx, QWORD PTR $T16[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 322
	mov	eax, 2
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
; Line 323
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
	mov	eax, 2
	imul	rax, rax, 4
	mov	ecx, 2
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
; Line 324
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
	mov	eax, 2
	imul	rax, rax, 5
	mov	ecx, 3
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
$LN2@ZenImmedia:
; Line 326
	add	rsp, 600				; 00000258H
	pop	rdi
	pop	rsi
	ret	0
?ZenImmediateSkinnedRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@PEAUZenTexture@@Ti32x4@@@Z ENDP ; ZenImmediateSkinnedRect
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bx$1 = 32
by$2 = 36
ey$3 = 40
ex$4 = 44
$T5 = 48
$T6 = 56
$T7 = 64
$T8 = 72
Prim$ = 80
Draw$9 = 144
Mode$ = 176
Color$ = 184
Rect$ = 192
?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z PROC	; ZenImmediateRect
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 262
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 263
	mov	eax, 6
	mov	WORD PTR Prim$[rsp+2], ax
; Line 264
	mov	eax, 4
	mov	WORD PTR Prim$[rsp+18], ax
; Line 265
	mov	eax, 4
	mov	WORD PTR Prim$[rsp+50], ax
; Line 266
	xor	eax, eax
	mov	WORD PTR Prim$[rsp+34], ax
; Line 268
	lea	r9, QWORD PTR Prim$[rsp]
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z ; ZenImmediateModePush
	mov	QWORD PTR Draw$9[rsp], rax
	cmp	QWORD PTR Draw$9[rsp], 0
	je	$LN2@ZenImmedia
; Line 269
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR bx$1[rsp], xmm0
; Line 270
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR by$2[rsp], xmm0
; Line 271
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR bx$1[rsp]
	movss	DWORD PTR ex$4[rsp], xmm0
; Line 272
	mov	rax, QWORD PTR Rect$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR by$2[rsp]
	movss	DWORD PTR ey$3[rsp], xmm0
; Line 273
	movss	xmm0, DWORD PTR bx$1[rsp]
	movss	DWORD PTR $T5[rsp], xmm0
	movss	xmm0, DWORD PTR by$2[rsp]
	movss	DWORD PTR $T5[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T5[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 274
	movss	xmm0, DWORD PTR bx$1[rsp]
	movss	DWORD PTR $T6[rsp], xmm0
	movss	xmm0, DWORD PTR ey$3[rsp]
	movss	DWORD PTR $T6[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 275
	movss	xmm0, DWORD PTR ex$4[rsp]
	movss	DWORD PTR $T7[rsp], xmm0
	movss	xmm0, DWORD PTR ey$3[rsp]
	movss	DWORD PTR $T7[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T7[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 276
	movss	xmm0, DWORD PTR ex$4[rsp]
	movss	DWORD PTR $T8[rsp], xmm0
	movss	xmm0, DWORD PTR by$2[rsp]
	movss	DWORD PTR $T8[rsp+4], xmm0
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Prim$[rsp+24]
	mov	rdx, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Prim$[rsp+56]
	mov	edx, DWORD PTR Color$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 278
	mov	eax, 2
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
; Line 279
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
	mov	eax, 2
	imul	rax, rax, 4
	mov	ecx, 2
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
; Line 280
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
	mov	eax, 2
	imul	rax, rax, 5
	mov	ecx, 3
	mov	rdx, QWORD PTR Prim$[rsp+8]
	mov	WORD PTR [rdx+rax], cx
$LN2@ZenImmedia:
; Line 282
	add	rsp, 168				; 000000a8H
	ret	0
?ZenImmediateRect@@YAXPEAUZEN_IMMODE@@ITf32x4@@@Z ENDP	; ZenImmediateRect
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Draw$1 = 32
Mode$ = 80
Clip$ = 88
?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z PROC	; ZenImmediateClip
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 253
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 254
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR Mode$[rsp]
	call	?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z ; ZenImmediateModePush
	mov	QWORD PTR Draw$1[rsp], rax
	cmp	QWORD PTR Draw$1[rsp], 0
	je	SHORT $LN2@ZenImmedia
; Line 256
	mov	rax, QWORD PTR Draw$1[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR Clip$[rsp]
	mov	ecx, 16
	rep movsb
$LN2@ZenImmedia:
; Line 258
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ZenImmediateClip@@YAXPEAUZEN_IMMODE@@Ti32x4@@@Z ENDP	; ZenImmediateClip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Draw$ = 48
tv89 = 56
$T1 = 64
$T2 = 96
$T3 = 128
Mode$ = 192
Kind$ = 200
Texture$ = 208
Slice$ = 216
?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z PROC ; ZenImmediateModePush
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 228
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	QWORD PTR Draw$[rsp], 0
; Line 230
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+82]
	mov	rcx, QWORD PTR Mode$[rsp]
	movzx	ecx, WORD PTR [rcx+80]
	cmp	eax, ecx
	jge	$LN2@ZenImmedia
; Line 232
	mov	rax, QWORD PTR Mode$[rsp]
	add	rax, 16
	mov	rdx, QWORD PTR Slice$[rsp]
	mov	rcx, rax
	call	?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z ; ZenImmediatePrimitiveAlloc
	test	eax, eax
	je	$LN4@ZenImmedia
; Line 234
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+82]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR Mode$[rsp]
	add	rax, QWORD PTR [rcx+88]
	mov	QWORD PTR tv89[rsp], rax
	mov	rax, QWORD PTR Mode$[rsp]
	movzx	eax, WORD PTR [rax+82]
	inc	ax
	mov	rcx, QWORD PTR Mode$[rsp]
	mov	WORD PTR [rcx+82], ax
	mov	rax, QWORD PTR tv89[rsp]
	mov	QWORD PTR Draw$[rsp], rax
; Line 236
	cmp	DWORD PTR Kind$[rsp], 2
	jne	$LN5@ZenImmedia
; Line 237
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+18], cx
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax+16], cx
; Line 238
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+18]
	mov	WORD PTR [rax+22], cx
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+16]
	mov	WORD PTR [rax+20], cx
; Line 239
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+50]
	mov	WORD PTR [rax+26], cx
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+48]
	mov	WORD PTR [rax+24], cx
; Line 240
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+34]
	mov	WORD PTR [rax+30], cx
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+32]
	mov	WORD PTR [rax+28], cx
	jmp	SHORT $LN6@ZenImmedia
$LN5@ZenImmedia:
; Line 241
	mov	r8d, 56					; 00000038H
	xor	edx, edx
	mov	rcx, QWORD PTR Draw$[rsp]
	call	memset
$LN6@ZenImmedia:
; Line 243
	mov	rax, QWORD PTR Draw$[rsp]
	mov	ecx, DWORD PTR Kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 244
	mov	rax, QWORD PTR Draw$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN4@ZenImmedia:
; Line 245
	jmp	SHORT $LN3@ZenImmedia
$LN2@ZenImmedia:
; Line 246
	mov	DWORD PTR [rsp+32], 69			; 00000045H
	mov	r9d, 246				; 000000f6H
	lea	r8, OFFSET FLAT:$SG105164
	lea	rdx, OFFSET FLAT:$SG105165
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG105163
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenImmedia:
; Line 248
	mov	rax, QWORD PTR Draw$[rsp]
; Line 249
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenImmediateModePush@@YAPEAUZEN_IMDRAW@@PEAUZEN_IMMODE@@W4ZEN_IMKIND@@PEAUZenTexture@@PEAUZEN_IMPRIM@@@Z ENDP ; ZenImmediateModePush
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Mode$ = 48
?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z PROC	; ZenImmediateModeReset
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 221
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR Mode$[rsp]
	add	rax, 16
	mov	rcx, rax
	call	?ZenImmediatePrimitiveReset@@YAXPEAUZEN_IMPRIM@@@Z ; ZenImmediatePrimitiveReset
; Line 222
	mov	rax, QWORD PTR Mode$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 223
	xor	eax, eax
	mov	rcx, QWORD PTR Mode$[rsp]
	mov	WORD PTR [rcx+82], ax
; Line 224
	add	rsp, 40					; 00000028H
	ret	0
?ZenImmediateModeReset@@YAXPEAUZEN_IMMODE@@@Z ENDP	; ZenImmediateModeReset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 48
tv93 = 52
$T1 = 56
$T2 = 80
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 200
Arena$ = 256
Slice$ = 264
?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z PROC ; ZenImmediatePrimitiveAlloc
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 204
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	cmp	QWORD PTR Slice$[rsp], 0
	je	$LN2@ZenImmedia
; Line 206
	mov	DWORD PTR [rsp+32], 67			; 00000043H
	mov	r9d, 206				; 000000ceH
	lea	r8, OFFSET FLAT:$SG105141
	lea	rdx, OFFSET FLAT:$SG105142
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+18]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+34]
	cmp	eax, ecx
	jl	SHORT $LN5@ZenImmedia
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN6@ZenImmedia
$LN5@ZenImmedia:
	mov	DWORD PTR tv74[rsp], 0
$LN6@ZenImmedia:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG105139
	mov	r8d, DWORD PTR tv74[rsp]
	lea	rdx, OFFSET FLAT:$SG105140
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 207
	mov	DWORD PTR [rsp+32], 68			; 00000044H
	mov	r9d, 207				; 000000cfH
	lea	r8, OFFSET FLAT:$SG105145
	lea	rdx, OFFSET FLAT:$SG105146
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+18]
	mov	rcx, QWORD PTR Slice$[rsp]
	movzx	ecx, WORD PTR [rcx+50]
	cmp	eax, ecx
	jl	SHORT $LN7@ZenImmedia
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN8@ZenImmedia
$LN7@ZenImmedia:
	mov	DWORD PTR tv93[rsp], 0
$LN8@ZenImmedia:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG105143
	mov	r8d, DWORD PTR tv93[rsp]
	lea	rdx, OFFSET FLAT:$SG105144
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 209
	mov	rax, QWORD PTR Slice$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR Slice$[rsp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 210
	mov	rax, QWORD PTR Slice$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+18]
	mov	WORD PTR [rax+16], cx
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+16]
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR Slice$[rsp]
	mov	QWORD PTR [rcx+24], rax
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+18]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+18]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	WORD PTR [rcx+18], ax
; Line 211
	mov	rax, QWORD PTR Slice$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+50]
	mov	WORD PTR [rax+48], cx
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+48]
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR Slice$[rsp]
	mov	QWORD PTR [rcx+56], rax
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+50]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	WORD PTR [rcx+50], ax
; Line 212
	mov	rax, QWORD PTR Slice$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+34]
	mov	WORD PTR [rax+32], cx
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+32]
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR Slice$[rsp]
	mov	QWORD PTR [rcx+40], rax
	mov	rax, QWORD PTR Slice$[rsp]
	movzx	eax, WORD PTR [rax+34]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+34]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	WORD PTR [rcx+34], ax
; Line 214
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z ; ZenImposeImmediatePrimitiveCurtail
	jmp	SHORT $LN1@ZenImmedia
	jmp	SHORT $LN3@ZenImmedia
$LN2@ZenImmedia:
; Line 216
	mov	eax, 1
$LN3@ZenImmedia:
$LN1@ZenImmedia:
; Line 217
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?ZenImmediatePrimitiveAlloc@@YAHPEAUZEN_IMPRIM@@0@Z ENDP ; ZenImmediatePrimitiveAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Prim$ = 8
?ZenImmediatePrimitiveReset@@YAXPEAUZEN_IMPRIM@@@Z PROC	; ZenImmediatePrimitiveReset
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 194
	mov	QWORD PTR [rsp+8], rcx
; Line 196
	xor	eax, eax
	mov	rcx, QWORD PTR Prim$[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 197
	xor	eax, eax
	mov	rcx, QWORD PTR Prim$[rsp]
	mov	WORD PTR [rcx+18], ax
; Line 198
	xor	eax, eax
	mov	rcx, QWORD PTR Prim$[rsp]
	mov	WORD PTR [rcx+34], ax
; Line 199
	xor	eax, eax
	mov	rcx, QWORD PTR Prim$[rsp]
	mov	WORD PTR [rcx+50], ax
; Line 200
	ret	0
?ZenImmediatePrimitiveReset@@YAXPEAUZEN_IMPRIM@@@Z ENDP	; ZenImmediatePrimitiveReset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Success$ = 48
$T1 = 56
$T2 = 80
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
$T9 = 304
$T10 = 328
$T11 = 352
$T12 = 376
Arena$ = 432
?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z PROC ; ZenImposeImmediatePrimitiveCurtail
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 168
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	mov	DWORD PTR Success$[rsp], 1
; Line 169
	mov	rax, QWORD PTR Arena$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jle	$LN2@ZenImposeI
; Line 170
	mov	rax, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax+2], cx
; Line 171
	mov	DWORD PTR Success$[rsp], 0
; Line 172
	mov	DWORD PTR [rsp+32], 63			; 0000003fH
	mov	r9d, 172				; 000000acH
	lea	r8, OFFSET FLAT:$SG105114
	lea	rdx, OFFSET FLAT:$SG105115
	lea	rcx, QWORD PTR $T9[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG105113
	mov	edx, 4
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN2@ZenImposeI:
; Line 174
	mov	rax, QWORD PTR Arena$[rsp]
	movzx	eax, WORD PTR [rax+18]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+16]
	cmp	eax, ecx
	jle	$LN3@ZenImposeI
; Line 175
	mov	rax, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+16]
	mov	WORD PTR [rax+18], cx
; Line 176
	mov	DWORD PTR Success$[rsp], 0
; Line 177
	mov	DWORD PTR [rsp+32], 64			; 00000040H
	mov	r9d, 177				; 000000b1H
	lea	r8, OFFSET FLAT:$SG105118
	lea	rdx, OFFSET FLAT:$SG105119
	lea	rcx, QWORD PTR $T10[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG105117
	mov	edx, 4
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenImposeI:
; Line 179
	mov	rax, QWORD PTR Arena$[rsp]
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+48]
	cmp	eax, ecx
	jle	$LN4@ZenImposeI
; Line 180
	mov	rax, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+48]
	mov	WORD PTR [rax+50], cx
; Line 181
	mov	DWORD PTR Success$[rsp], 0
; Line 182
	mov	DWORD PTR [rsp+32], 65			; 00000041H
	mov	r9d, 182				; 000000b6H
	lea	r8, OFFSET FLAT:$SG105122
	lea	rdx, OFFSET FLAT:$SG105123
	lea	rcx, QWORD PTR $T11[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG105121
	mov	edx, 4
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@ZenImposeI:
; Line 184
	mov	rax, QWORD PTR Arena$[rsp]
	movzx	eax, WORD PTR [rax+34]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+32]
	cmp	eax, ecx
	jle	$LN5@ZenImposeI
; Line 185
	mov	rax, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	movzx	ecx, WORD PTR [rcx+32]
	mov	WORD PTR [rax+34], cx
; Line 186
	mov	DWORD PTR Success$[rsp], 0
; Line 187
	mov	DWORD PTR [rsp+32], 66			; 00000042H
	mov	r9d, 187				; 000000bbH
	lea	r8, OFFSET FLAT:$SG105126
	lea	rdx, OFFSET FLAT:$SG105127
	lea	rcx, QWORD PTR $T12[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG105125
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ZenImposeI:
; Line 189
	mov	eax, DWORD PTR Success$[rsp]
; Line 190
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
?ZenImposeImmediatePrimitiveCurtail@@YAHPEAUZEN_IMPRIM@@@Z ENDP ; ZenImposeImmediatePrimitiveCurtail
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
Mode$ = 160
$T8 = 272
$T9 = 336
__$ReturnAddress$ = 432
Arena$ = 440
CmdMax$ = 448
IdxMax$ = 456
PosMax$ = 464
TexMax$ = 472
ColMax$ = 480
?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z PROC ; ZenAllocateImmediateMode
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 157
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
; Line 159
	movzx	r8d, WORD PTR CmdMax$[rsp]
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z ; ZenAllocateDrawStash
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR Mode$[rsp+80]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 160
	movzx	eax, WORD PTR ColMax$[rsp]
	mov	WORD PTR [rsp+40], ax
	movzx	eax, WORD PTR TexMax$[rsp]
	mov	WORD PTR [rsp+32], ax
	movzx	r9d, WORD PTR PosMax$[rsp]
	movzx	r8d, WORD PTR IdxMax$[rsp]
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z ; ZenAllocatePrimitiveStash
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR Mode$[rsp+16]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 161
	mov	r8d, 49152				; 0000c000H
	mov	rdx, QWORD PTR Arena$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z ; ZenSliceArena
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z ; ZenSliceToEmptyArena
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR Mode$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 162
	lea	rax, QWORD PTR Mode$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 112				; 00000070H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 163
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocateImmediateMode@@YA?AUZEN_IMMODE@@PEAUZenArena@@GGGGG@Z ENDP ; ZenAllocateImmediateMode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Commands$ = 32
__$ReturnAddress$ = 80
Arena$ = 88
CmdMax$ = 96
?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z PROC ; ZenAllocateDrawStash
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 144
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 146
	movzx	eax, WORD PTR CmdMax$[rsp]
	mov	WORD PTR Commands$[rsp], ax
; Line 147
	xor	eax, eax
	mov	WORD PTR Commands$[rsp+2], ax
; Line 148
	movzx	eax, WORD PTR CmdMax$[rsp]
	imul	rax, rax, 56				; 00000038H
	mov	edx, eax
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR Commands$[rsp+8], rax
; Line 149
	lea	rax, QWORD PTR Commands$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 150
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocateDrawStash@@YA?AUZEN_IMLIST@@PEAUZenArena@@G@Z ENDP ; ZenAllocateDrawStash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
List$ = 32
__$ReturnAddress$ = 128
Arena$ = 136
IdxMax$ = 144
PosMax$ = 152
TexMax$ = 160
ColMax$ = 168
?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z PROC ; ZenAllocatePrimitiveStash
; File W:\cpp\void\detroit\brazen-immediate.h
; Line 124
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 127
	movzx	eax, WORD PTR IdxMax$[rsp]
	mov	WORD PTR List$[rsp], ax
	xor	eax, eax
	mov	WORD PTR List$[rsp+2], ax
; Line 128
	movzx	eax, WORD PTR PosMax$[rsp]
	mov	WORD PTR List$[rsp+16], ax
	xor	eax, eax
	mov	WORD PTR List$[rsp+18], ax
; Line 129
	movzx	eax, WORD PTR TexMax$[rsp]
	mov	WORD PTR List$[rsp+32], ax
	xor	eax, eax
	mov	WORD PTR List$[rsp+34], ax
; Line 130
	movzx	eax, WORD PTR ColMax$[rsp]
	mov	WORD PTR List$[rsp+48], ax
	xor	eax, eax
	mov	WORD PTR List$[rsp+50], ax
; Line 132
	movzx	eax, WORD PTR IdxMax$[rsp]
	shl	rax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR List$[rsp+8], rax
; Line 133
	movzx	eax, WORD PTR PosMax$[rsp]
	shl	rax, 3
	mov	edx, eax
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR List$[rsp+24], rax
; Line 134
	movzx	eax, WORD PTR TexMax$[rsp]
	shl	rax, 3
	mov	edx, eax
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR List$[rsp+40], rax
; Line 135
	movzx	eax, WORD PTR ColMax$[rsp]
	shl	rax, 2
	mov	edx, eax
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR List$[rsp+56], rax
; Line 137
	lea	rax, QWORD PTR List$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 138
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ZenAllocatePrimitiveStash@@YA?AUZEN_IMPRIM@@PEAUZenArena@@GGGG@Z ENDP ; ZenAllocatePrimitiveStash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Window$ = 48
?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z PROC		; ZenPullNativeWindow
; File W:\cpp\void\detroit\brazen-window.h
; Line 519
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z ; ZenPullWindowMeasure
; Line 520
	mov	rax, QWORD PTR Window$[rsp]
	cmp	QWORD PTR [rax+552], 0
	je	SHORT $LN2@ZenPullNat
; Line 521
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+552]
	call	QWORD PTR __imp_SwitchToFiber
; Line 522
	jmp	SHORT $LN3@ZenPullNat
$LN2@ZenPullNat:
; Line 523
	mov	rcx, QWORD PTR Window$[rsp]
	call	?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z ; ZenWindowMessageRoutineInternal
$LN3@ZenPullNat:
; Line 525
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+528]
	shr	eax, 1
	and	eax, 1
; Line 526
	add	rsp, 40					; 00000028H
	ret	0
?ZenPullNativeWindow@@YAHPEAUZenWindow@@@Z ENDP		; ZenPullNativeWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 0
Window$ = 32
?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z PROC		; ZenPushNativeWindow
; File W:\cpp\void\detroit\brazen-window.h
; Line 512
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ZenPushNat
$LN2@ZenPushNat:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ZenPushNat:
	movsxd	rax, DWORD PTR I$1[rsp]
	cmp	rax, 256				; 00000100H
	jae	SHORT $LN3@ZenPushNat
; Line 513
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rcx+rax+564]
	and	eax, -2					; fffffffeH
	movsxd	rcx, DWORD PTR I$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rdx+rcx+564], eax
; Line 514
	jmp	SHORT $LN2@ZenPushNat
$LN3@ZenPushNat:
; Line 515
	add	rsp, 24
	ret	0
?ZenPushNativeWindow@@YAXPEAUZenWindow@@@Z ENDP		; ZenPushNativeWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 96
tv84 = 100
WindowSize$1 = 104
WindowClassName$ = 112
tv212 = 120
WindowClass$ = 128
$T2 = 208
$T3 = 240
$T4 = 272
$T5 = 304
$T6 = 336
$T7 = 368
$T8 = 400
$T9 = 424
$T10 = 448
$T11 = 480
$T12 = 512
$T13 = 544
$T14 = 576
$T15 = 608
$T16 = 640
$T17 = 672
$T18 = 696
$T19 = 720
$T20 = 744
$T21 = 768
$T22 = 792
$T23 = 816
NativeWindow$ = 880
ControlFiber$ = 888
Location$ = 896
WindowTitle$ = 904
?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z PROC ; ZenCreateNativeWindow
; File W:\cpp\void\detroit\brazen-window.h
; Line 463
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 856				; 00000358H
; Line 464
	mov	DWORD PTR [rsp+32], 56			; 00000038H
	mov	r9d, 464				; 000001d0H
	lea	r8, OFFSET FLAT:$SG104544
	lea	rdx, OFFSET FLAT:$SG104545
	lea	rcx, QWORD PTR $T17[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN10@ZenCreateN
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN11@ZenCreateN
$LN10@ZenCreateN:
	mov	DWORD PTR tv69[rsp], 0
$LN11@ZenCreateN:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG104542
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG104543
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 465
	mov	DWORD PTR [rsp+32], 57			; 00000039H
	mov	r9d, 465				; 000001d1H
	lea	r8, OFFSET FLAT:$SG104548
	lea	rdx, OFFSET FLAT:$SG104549
	lea	rcx, QWORD PTR $T18[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+12], 0
	je	SHORT $LN12@ZenCreateN
	mov	DWORD PTR tv84[rsp], 1
	jmp	SHORT $LN13@ZenCreateN
$LN12@ZenCreateN:
	mov	DWORD PTR tv84[rsp], 0
$LN13@ZenCreateN:
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG104546
	mov	r8d, DWORD PTR tv84[rsp]
	lea	rdx, OFFSET FLAT:$SG104547
	lea	rcx, QWORD PTR $T5[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 467
	mov	r8d, 5688				; 00001638H
	xor	edx, edx
	mov	rcx, QWORD PTR NativeWindow$[rsp]
	call	memset
; Line 469
	mov	rdx, QWORD PTR WindowTitle$[rsp]
	lea	rcx, OFFSET FLAT:$SG104550
	call	?FormatW@@YAPEA_WPEB_WZZ		; FormatW
	mov	QWORD PTR WindowClassName$[rsp], rax
; Line 472
	mov	r8d, 72					; 00000048H
	xor	edx, edx
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	memset
; Line 474
	lea	rax, OFFSET FLAT:?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; ZenNativeWindowCallback
	mov	QWORD PTR WindowClass$[rsp+8], rax
; Line 475
	xor	ecx, ecx
	call	QWORD PTR __imp_GetModuleHandleW
	mov	QWORD PTR WindowClass$[rsp+24], rax
; Line 476
	mov	rax, QWORD PTR WindowClassName$[rsp]
	mov	QWORD PTR WindowClass$[rsp+64], rax
; Line 478
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	QWORD PTR __imp_RegisterClassW
	movzx	eax, ax
	test	eax, eax
	je	$LN2@ZenCreateN
; Line 479
	mov	rax, QWORD PTR Location$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z ; ZenGetWindowTrimFromClient
	mov	QWORD PTR WindowSize$1[rsp], rax
; Line 481
	mov	QWORD PTR [rsp+88], 0
	mov	rax, QWORD PTR WindowClass$[rsp+24]
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	eax, DWORD PTR WindowSize$1[rsp+4]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR WindowSize$1[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 13565952				; 00cf0000H
	mov	r8, QWORD PTR WindowTitle$[rsp]
	mov	rdx, QWORD PTR WindowClass$[rsp+64]
	mov	ecx, 2097152				; 00200000H
	call	QWORD PTR __imp_CreateWindowExW
	mov	rcx, QWORD PTR NativeWindow$[rsp]
	mov	QWORD PTR [rcx+536], rax
; Line 484
	mov	rax, QWORD PTR NativeWindow$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_IsWindow
	test	eax, eax
	je	$LN4@ZenCreateN
; Line 485
	mov	rax, QWORD PTR NativeWindow$[rsp]
	lea	rdi, QWORD PTR [rax+512]
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 16
	rep movsb
; Line 486
	mov	rax, QWORD PTR NativeWindow$[rsp]
	mov	rcx, QWORD PTR ControlFiber$[rsp]
	mov	QWORD PTR [rax+544], rcx
; Line 487
	mov	r8, QWORD PTR NativeWindow$[rsp]
	lea	rdx, OFFSET FLAT:?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z ; ZenWindowMessageFiberRoutineInternal
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateFiber
	mov	rcx, QWORD PTR NativeWindow$[rsp]
	mov	QWORD PTR [rcx+552], rax
; Line 489
	mov	rax, QWORD PTR NativeWindow$[rsp]
	cmp	QWORD PTR [rax+552], 0
	jne	SHORT $LN6@ZenCreateN
; Line 490
	mov	DWORD PTR [rsp+32], 58			; 0000003aH
	mov	r9d, 490				; 000001eaH
	lea	r8, OFFSET FLAT:$SG104557
	lea	rdx, OFFSET FLAT:$SG104558
	lea	rcx, QWORD PTR $T19[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG104556
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN6@ZenCreateN:
; Line 496
	xor	ecx, ecx
	call	QWORD PTR __imp_SetLastError
; Line 497
	mov	r8, QWORD PTR NativeWindow$[rsp]
	mov	edx, -21
	mov	rax, QWORD PTR NativeWindow$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_SetWindowLongPtrA
	test	rax, rax
	je	$LN7@ZenCreateN
; Line 498
	mov	DWORD PTR [rsp+32], 59			; 0000003bH
	mov	r9d, 498				; 000001f2H
	lea	r8, OFFSET FLAT:$SG104561
	lea	rdx, OFFSET FLAT:$SG104562
	lea	rcx, QWORD PTR $T20[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	edx, -1
	mov	ecx, 1
	call	?GetErrorStringA@@YAPEBDHH@Z		; GetErrorStringA
	mov	rdx, rax
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv212[rsp], rax
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv212[rsp]
	lea	r8, OFFSET FLAT:$SG104560
	mov	edx, 7
	lea	rcx, QWORD PTR $T10[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN7@ZenCreateN:
; Line 500
	xor	ecx, ecx
	call	QWORD PTR __imp_SetLastError
; Line 501
	mov	edx, -21
	mov	rax, QWORD PTR NativeWindow$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_GetWindowLongPtrA
	test	rax, rax
	jne	SHORT $LN8@ZenCreateN
; Line 502
	mov	DWORD PTR [rsp+32], 60			; 0000003cH
	mov	r9d, 502				; 000001f6H
	lea	r8, OFFSET FLAT:$SG104565
	lea	rdx, OFFSET FLAT:$SG104566
	lea	rcx, QWORD PTR $T21[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG104564
	mov	edx, 7
	lea	rcx, QWORD PTR $T12[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN8@ZenCreateN:
; Line 504
	mov	eax, 1
	jmp	$LN1@ZenCreateN
	jmp	SHORT $LN5@ZenCreateN
$LN4@ZenCreateN:
; Line 505
	mov	DWORD PTR [rsp+32], 61			; 0000003dH
	mov	r9d, 505				; 000001f9H
	lea	r8, OFFSET FLAT:$SG104568
	lea	rdx, OFFSET FLAT:$SG104569
	lea	rcx, QWORD PTR $T22[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG104567
	mov	edx, 6
	lea	rcx, QWORD PTR $T14[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ZenCreateN:
	jmp	SHORT $LN3@ZenCreateN
$LN2@ZenCreateN:
; Line 506
	mov	DWORD PTR [rsp+32], 62			; 0000003eH
	mov	r9d, 506				; 000001faH
	lea	r8, OFFSET FLAT:$SG104571
	lea	rdx, OFFSET FLAT:$SG104572
	lea	rcx, QWORD PTR $T23[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG104570
	mov	edx, 6
	lea	rcx, QWORD PTR $T16[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenCreateN:
; Line 507
	xor	eax, eax
$LN1@ZenCreateN:
; Line 508
	add	rsp, 856				; 00000358H
	pop	rdi
	pop	rsi
	ret	0
?ZenCreateNativeWindow@@YAHPEAUZenWindow@@PEAXTi32x4@@PEB_W@Z ENDP ; ZenCreateNativeWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
NativeWindow$ = 32
lpNativeWindow$ = 64
?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z PROC	; ZenWindowMessageFiberRoutineInternal
; File W:\cpp\void\detroit\brazen-window.h
; Line 452
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR lpNativeWindow$[rsp]
	mov	QWORD PTR NativeWindow$[rsp], rax
$LN2@ZenWindowM:
; Line 454
	mov	rcx, QWORD PTR NativeWindow$[rsp]
	call	?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z ; ZenWindowMessageRoutineInternal
; Line 455
	mov	rax, QWORD PTR NativeWindow$[rsp]
	mov	rcx, QWORD PTR [rax+544]
	call	QWORD PTR __imp_SwitchToFiber
; Line 456
	jmp	SHORT $LN2@ZenWindowM
; Line 457
	add	rsp, 56					; 00000038H
	ret	0
?ZenWindowMessageFiberRoutineInternal@@YAXPEAX@Z ENDP	; ZenWindowMessageFiberRoutineInternal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
M$ = 48
NativeWindow$ = 112
?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z PROC ; ZenWindowMessageRoutineInternal
; File W:\cpp\void\detroit\brazen-window.h
; Line 441
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
$LN2@ZenWindowM:
; Line 442
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR M$[rsp]
	call	QWORD PTR __imp_PeekMessageA
	test	eax, eax
	je	SHORT $LN3@ZenWindowM
; Line 443
	lea	rcx, QWORD PTR M$[rsp]
	call	QWORD PTR __imp_TranslateMessage
; Line 444
	mov	r9, QWORD PTR M$[rsp+24]
	mov	r8, QWORD PTR M$[rsp+16]
	mov	edx, DWORD PTR M$[rsp+8]
	mov	rcx, QWORD PTR NativeWindow$[rsp]
	call	?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z ; ZenHandleNativeWindowMessage
	test	eax, eax
	jne	SHORT $LN4@ZenWindowM
; Line 445
	lea	rcx, QWORD PTR M$[rsp]
	call	QWORD PTR __imp_DispatchMessageW
$LN4@ZenWindowM:
; Line 447
	jmp	SHORT $LN2@ZenWindowM
$LN3@ZenWindowM:
; Line 448
	add	rsp, 104				; 00000068H
	ret	0
?ZenWindowMessageRoutineInternal@@YAXPEAUZenWindow@@@Z ENDP ; ZenWindowMessageRoutineInternal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
NativeWindow$1 = 48
$T2 = 56
$T3 = 80
$T4 = 112
Window$ = 176
Message$ = 184
wParam$ = 192
lParam$ = 200
?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; ZenNativeWindowCallback
; File W:\cpp\void\detroit\brazen-window.h
; Line 431
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	edx, -21
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_GetWindowLongPtrA
	mov	QWORD PTR NativeWindow$1[rsp], rax
	cmp	QWORD PTR NativeWindow$1[rsp], 0
	je	SHORT $LN2@ZenNativeW
; Line 432
	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR Message$[rsp]
	mov	rcx, QWORD PTR NativeWindow$1[rsp]
	call	?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z ; ZenHandleNativeWindowMessage
	test	eax, eax
	jne	SHORT $LN4@ZenNativeW
; Line 433
	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR Message$[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
	jmp	$LN1@ZenNativeW
$LN4@ZenNativeW:
; Line 434
	jmp	SHORT $LN3@ZenNativeW
$LN2@ZenNativeW:
; Line 435
	mov	DWORD PTR [rsp+32], 55			; 00000037H
	mov	r9d, 435				; 000001b3H
	lea	r8, OFFSET FLAT:$SG104501
	lea	rdx, OFFSET FLAT:$SG104502
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG104500
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenNativeW:
; Line 436
	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR Message$[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
$LN1@ZenNativeW:
; Line 437
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenNativeWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; ZenNativeWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 48
tv283 = 52
IsDown$1 = 56
Event$2 = 64
Event$3 = 72
tv176 = 80
tv216 = 84
tv271 = 88
Event$4 = 96
Event$5 = 104
tv188 = 112
tv260 = 116
WindowSize$6 = 120
Cursor$7 = 128
Half$8 = 136
InvWindowSize$9 = 144
$T10 = 152
$T11 = 160
Normalized$12 = 168
Inverted$13 = 176
$T14 = 184
$T15 = 208
$T16 = 240
$T17 = 272
$T18 = 304
$T19 = 336
$T20 = 368
$T21 = 400
$T22 = 432
$T23 = 456
$T24 = 480
$T25 = 504
WindowQuad$26 = 528
__$ArrayPad$ = 544
Window$ = 592
Message$ = 600
wParam$ = 608
lParam$ = 616
?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z PROC ; ZenHandleNativeWindowMessage
; File W:\cpp\void\detroit\brazen-window.h
; Line 326
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	eax, DWORD PTR Message$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 512		; 00000200H
	ja	SHORT $LN40@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 512		; 00000200H
	je	$LN12@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 256		; 00000100H
	ja	SHORT $LN41@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 256		; 00000100H
	je	$LN29@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 15
	je	SHORT $LN4@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 16
	je	$LN10@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 18
	je	$LN11@ZenHandleN
	jmp	$LN30@ZenHandleN
$LN41@ZenHandleN:
	cmp	DWORD PTR tv64[rsp], 257		; 00000101H
	je	$LN28@ZenHandleN
	cmp	DWORD PTR tv64[rsp], 275		; 00000113H
	je	SHORT $LN5@ZenHandleN
	jmp	$LN30@ZenHandleN
$LN40@ZenHandleN:
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 513				; 00000201H
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 49			; 00000031H
	ja	$LN30@ZenHandleN
	mov	eax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN44@ZenHandleN[rcx+rax]
	mov	eax, DWORD PTR $LN45@ZenHandleN[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@ZenHandleN:
$LN5@ZenHandleN:
; Line 347
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+544]
	call	QWORD PTR __imp_SwitchToFiber
; Line 348
	jmp	$LN2@ZenHandleN
$LN6@ZenHandleN:
$LN7@ZenHandleN:
; Line 351
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_SetTimer
; Line 352
	jmp	$LN2@ZenHandleN
$LN8@ZenHandleN:
$LN9@ZenHandleN:
; Line 355
	xor	edx, edx
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_KillTimer
; Line 356
	jmp	$LN2@ZenHandleN
$LN10@ZenHandleN:
$LN11@ZenHandleN:
; Line 359
	xor	ecx, ecx
	call	QWORD PTR __imp_PostQuitMessage
; Line 360
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+528]
	or	eax, 2
	mov	rcx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rcx+528], eax
; Line 361
	jmp	$LN2@ZenHandleN
$LN12@ZenHandleN:
; Line 364
	lea	rax, QWORD PTR WindowQuad$26[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+512]
	mov	ecx, 16
	rep movsb
; Line 365
	mov	rax, QWORD PTR WindowQuad$26[rsp+8]
	mov	QWORD PTR WindowSize$6[rsp], rax
; Line 366
	cvtsi2ss xmm0, DWORD PTR WindowSize$6[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN43@ZenHandleN
	je	$LN13@ZenHandleN
$LN43@ZenHandleN:
	cvtsi2ss xmm0, DWORD PTR WindowSize$6[rsp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN42@ZenHandleN
	je	$LN13@ZenHandleN
$LN42@ZenHandleN:
; Line 369
	mov	rdx, QWORD PTR WindowSize$6[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	call	??K@YA?AUf32x2@@MUi32x2@@@Z		; operator/
	mov	QWORD PTR InvWindowSize$9[rsp], rax
; Line 371
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Half$8[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR Half$8[rsp+4], xmm0
; Line 374
	mov	rax, QWORD PTR lParam$[rsp]
	and	rax, 65535				; 0000ffffH
	cwde
	mov	DWORD PTR Cursor$7[rsp], eax
; Line 375
	mov	rax, QWORD PTR lParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	cwde
	mov	DWORD PTR Cursor$7[rsp+4], eax
; Line 377
	mov	rdx, QWORD PTR InvWindowSize$9[rsp]
	mov	rcx, QWORD PTR Cursor$7[rsp]
	call	??D@YA?AUf32x2@@Ui32x2@@U0@@Z		; operator*
	mov	QWORD PTR $T10[rsp], rax
	mov	rdx, QWORD PTR Half$8[rsp]
	mov	rcx, QWORD PTR $T10[rsp]
	call	??G@YA?AUf32x2@@U0@0@Z			; operator-
	mov	QWORD PTR Normalized$12[rsp], rax
; Line 379
	movss	xmm1, DWORD PTR __real@bf800000
	movss	xmm0, DWORD PTR __real@3f800000
	call	?f32x2_make@@YA?AUf32x2@@MM@Z		; f32x2_make
	mov	QWORD PTR $T11[rsp], rax
	mov	rdx, QWORD PTR $T11[rsp]
	mov	rcx, QWORD PTR Normalized$12[rsp]
	call	??D@YA?AUf32x2@@U0@0@Z			; operator*
	mov	QWORD PTR Inverted$13[rsp], rax
; Line 381
	mov	rax, QWORD PTR Window$[rsp]
	add	rax, 584				; 00000248H
	mov	QWORD PTR Event$4[rsp], rax
; Line 382
	mov	rax, QWORD PTR Event$4[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR Event$4[rsp]
	mov	DWORD PTR [rcx], eax
; Line 383
	mov	rax, QWORD PTR Event$4[rsp]
	mov	rcx, QWORD PTR Inverted$13[rsp]
	mov	QWORD PTR [rax+12], rcx
; Line 384
	mov	rax, QWORD PTR Event$4[rsp]
	movzx	eax, WORD PTR [rax+4]
	inc	ax
	mov	rcx, QWORD PTR Event$4[rsp]
	mov	WORD PTR [rcx+4], ax
	jmp	SHORT $LN14@ZenHandleN
$LN13@ZenHandleN:
; Line 386
	mov	DWORD PTR [rsp+32], 51			; 00000033H
	mov	r9d, 386				; 00000182H
	lea	r8, OFFSET FLAT:$SG104458
	lea	rdx, OFFSET FLAT:$SG104459
	lea	rcx, QWORD PTR $T22[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG104457
	mov	edx, 4
	lea	rcx, QWORD PTR $T15[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN14@ZenHandleN:
; Line 387
	jmp	$LN2@ZenHandleN
$LN15@ZenHandleN:
$LN16@ZenHandleN:
$LN17@ZenHandleN:
$LN18@ZenHandleN:
$LN19@ZenHandleN:
$LN20@ZenHandleN:
$LN21@ZenHandleN:
$LN22@ZenHandleN:
; Line 393
	mov	rdx, QWORD PTR wParam$[rsp]
	mov	ecx, DWORD PTR Message$[rsp]
	call	?ZenInternalizeMouseEvent@@YAHK_K@Z	; ZenInternalizeMouseEvent
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Window$[rsp]
	lea	rax, QWORD PTR [rcx+rax+564]
	mov	QWORD PTR Event$2[rsp], rax
; Line 394
	mov	DWORD PTR [rsp+32], 52			; 00000034H
	mov	r9d, 394				; 0000018aH
	lea	r8, OFFSET FLAT:$SG104470
	lea	rdx, OFFSET FLAT:$SG104471
	lea	rcx, QWORD PTR $T23[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Event$2[rsp]
	movsx	eax, WORD PTR [rax+4]
	mov	DWORD PTR tv188[rsp], eax
	mov	rax, QWORD PTR Event$2[rsp]
	movsx	eax, WORD PTR [rax+4]
	not	eax
	and	eax, 1
	test	eax, eax
	je	SHORT $LN32@ZenHandleN
	mov	DWORD PTR tv176[rsp], 1
	jmp	SHORT $LN33@ZenHandleN
$LN32@ZenHandleN:
	mov	DWORD PTR tv176[rsp], 0
$LN33@ZenHandleN:
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv188[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG104468
	mov	r8d, DWORD PTR tv176[rsp]
	lea	rdx, OFFSET FLAT:$SG104469
	lea	rcx, QWORD PTR $T17[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 395
	mov	rax, QWORD PTR Event$2[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR Event$2[rsp]
	mov	DWORD PTR [rcx], eax
; Line 396
	mov	rax, QWORD PTR Event$2[rsp]
	movzx	eax, WORD PTR [rax+4]
	inc	ax
	mov	rcx, QWORD PTR Event$2[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 398
	mov	rax, QWORD PTR Window$[rsp]
	cmp	DWORD PTR [rax+560], 0
	jne	SHORT $LN23@ZenHandleN
; Line 399
	mov	rax, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rax+560], 1
; Line 400
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_SetCapture
$LN23@ZenHandleN:
; Line 402
	jmp	$LN2@ZenHandleN
$LN24@ZenHandleN:
$LN25@ZenHandleN:
$LN26@ZenHandleN:
$LN27@ZenHandleN:
; Line 405
	mov	rdx, QWORD PTR wParam$[rsp]
	mov	ecx, DWORD PTR Message$[rsp]
	call	?ZenInternalizeMouseEvent@@YAHK_K@Z	; ZenInternalizeMouseEvent
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Window$[rsp]
	lea	rax, QWORD PTR [rcx+rax+564]
	mov	QWORD PTR Event$3[rsp], rax
; Line 406
	mov	DWORD PTR [rsp+32], 53			; 00000035H
	mov	r9d, 406				; 00000196H
	lea	r8, OFFSET FLAT:$SG104479
	lea	rdx, OFFSET FLAT:$SG104480
	lea	rcx, QWORD PTR $T24[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Event$3[rsp]
	movsx	eax, WORD PTR [rax+4]
	mov	DWORD PTR tv260[rsp], eax
	mov	rax, QWORD PTR Event$3[rsp]
	movsx	eax, WORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN34@ZenHandleN
	mov	DWORD PTR tv216[rsp], 1
	jmp	SHORT $LN35@ZenHandleN
$LN34@ZenHandleN:
	mov	DWORD PTR tv216[rsp], 0
$LN35@ZenHandleN:
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv260[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG104477
	mov	r8d, DWORD PTR tv216[rsp]
	lea	rdx, OFFSET FLAT:$SG104478
	lea	rcx, QWORD PTR $T19[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 407
	mov	rax, QWORD PTR Event$3[rsp]
	movzx	eax, WORD PTR [rax+4]
	dec	ax
	mov	rcx, QWORD PTR Event$3[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 408
	mov	rax, QWORD PTR Event$3[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR Event$3[rsp]
	mov	DWORD PTR [rcx], eax
; Line 410
	mov	DWORD PTR [rsp+32], 54			; 00000036H
	mov	r9d, 410				; 0000019aH
	lea	r8, OFFSET FLAT:$SG104483
	lea	rdx, OFFSET FLAT:$SG104484
	lea	rcx, QWORD PTR $T25[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Window$[rsp]
	cmp	DWORD PTR [rax+560], 0
	je	SHORT $LN36@ZenHandleN
	mov	DWORD PTR tv271[rsp], 1
	jmp	SHORT $LN37@ZenHandleN
$LN36@ZenHandleN:
	mov	DWORD PTR tv271[rsp], 0
$LN37@ZenHandleN:
	lea	rax, QWORD PTR $T21[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG104481
	mov	r8d, DWORD PTR tv271[rsp]
	lea	rdx, OFFSET FLAT:$SG104482
	lea	rcx, QWORD PTR $T21[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 411
	mov	rax, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rax+560], 0
; Line 412
	call	QWORD PTR __imp_ReleaseCapture
; Line 413
	jmp	$LN2@ZenHandleN
$LN28@ZenHandleN:
$LN29@ZenHandleN:
; Line 416
	cmp	DWORD PTR Message$[rsp], 256		; 00000100H
	jne	SHORT $LN38@ZenHandleN
	mov	eax, 1
	mov	WORD PTR tv283[rsp], ax
	jmp	SHORT $LN39@ZenHandleN
$LN38@ZenHandleN:
	xor	eax, eax
	mov	WORD PTR tv283[rsp], ax
$LN39@ZenHandleN:
	movzx	eax, WORD PTR tv283[rsp]
	mov	WORD PTR IsDown$1[rsp], ax
; Line 417
	mov	rcx, QWORD PTR wParam$[rsp]
	call	?InternalizeKeyboardEvent@@YAH_K@Z	; InternalizeKeyboardEvent
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR Window$[rsp]
	lea	rax, QWORD PTR [rcx+rax+564]
	mov	QWORD PTR Event$5[rsp], rax
; Line 418
	mov	rax, QWORD PTR Event$5[rsp]
	movzx	ecx, WORD PTR wParam$[rsp]
	mov	WORD PTR [rax+8], cx
; Line 419
	mov	rax, QWORD PTR Event$5[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR Event$5[rsp]
	mov	DWORD PTR [rcx], eax
; Line 420
	movsx	eax, WORD PTR IsDown$1[rsp]
	mov	rcx, QWORD PTR Event$5[rsp]
	movsx	ecx, WORD PTR [rcx+4]
	lea	eax, DWORD PTR [rcx+rax*2-1]
	mov	rcx, QWORD PTR Event$5[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 421
	jmp	SHORT $LN2@ZenHandleN
$LN30@ZenHandleN:
; Line 423
	xor	eax, eax
	jmp	SHORT $LN1@ZenHandleN
$LN2@ZenHandleN:
; Line 426
	mov	eax, 1
$LN1@ZenHandleN:
; Line 427
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN45@ZenHandleN:
	DD	$LN15@ZenHandleN
	DD	$LN24@ZenHandleN
	DD	$LN16@ZenHandleN
	DD	$LN17@ZenHandleN
	DD	$LN25@ZenHandleN
	DD	$LN18@ZenHandleN
	DD	$LN19@ZenHandleN
	DD	$LN26@ZenHandleN
	DD	$LN20@ZenHandleN
	DD	$LN21@ZenHandleN
	DD	$LN27@ZenHandleN
	DD	$LN22@ZenHandleN
	DD	$LN7@ZenHandleN
	DD	$LN9@ZenHandleN
	DD	$LN6@ZenHandleN
	DD	$LN8@ZenHandleN
	DD	$LN30@ZenHandleN
$LN44@ZenHandleN:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	16
	DB	9
	DB	10
	DB	11
	DB	16
	DB	16
	DB	16
	DB	12
	DB	13
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	14
	DB	15
?ZenHandleNativeWindowMessage@@YAHPEAUZenWindow@@I_K_J@Z ENDP ; ZenHandleNativeWindowMessage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Client$ = 32
Placement$ = 48
__$ArrayPad$ = 96
Window$ = 128
?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z PROC	; ZenPullWindowMeasure
; File W:\cpp\void\detroit\brazen-window.h
; Line 283
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 284
	mov	DWORD PTR Placement$[rsp], 44		; 0000002cH
	lea	rax, QWORD PTR Placement$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb
; Line 288
	lea	rdx, QWORD PTR Placement$[rsp]
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_GetWindowPlacement
	test	eax, eax
	je	SHORT $LN2@ZenPullWin
; Line 289
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR Placement$[rsp+28]
	mov	DWORD PTR [rax+512], ecx
; Line 290
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR Placement$[rsp+32]
	mov	DWORD PTR [rax+516], ecx
$LN2@ZenPullWin:
; Line 295
	lea	rdx, QWORD PTR Client$[rsp]
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_GetClientRect
	test	eax, eax
	je	SHORT $LN3@ZenPullWin
; Line 296
	mov	eax, DWORD PTR Client$[rsp]
	mov	ecx, DWORD PTR Client$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rcx+520], eax
; Line 297
	mov	eax, DWORD PTR Client$[rsp+4]
	mov	ecx, DWORD PTR Client$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rcx+524], eax
$LN3@ZenPullWin:
; Line 299
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?ZenPullWindowMeasure@@YAXPEAUZenWindow@@@Z ENDP	; ZenPullWindowMeasure
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Client$ = 32
__$ArrayPad$ = 48
ClientArea$ = 80
?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z PROC	; ZenGetWindowTrimFromClient
; File W:\cpp\void\detroit\brazen-window.h
; Line 271
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 272
	mov	DWORD PTR Client$[rsp], 0
	mov	eax, DWORD PTR ClientArea$[rsp]
	mov	DWORD PTR Client$[rsp+8], eax
; Line 273
	mov	DWORD PTR Client$[rsp+4], 0
	mov	eax, DWORD PTR ClientArea$[rsp+4]
	mov	DWORD PTR Client$[rsp+12], eax
; Line 274
	xor	r8d, r8d
	mov	edx, 13565952				; 00cf0000H
	lea	rcx, QWORD PTR Client$[rsp]
	call	QWORD PTR __imp_AdjustWindowRect
	test	eax, eax
	je	SHORT $LN2@ZenGetWind
; Line 275
	mov	eax, DWORD PTR Client$[rsp]
	mov	ecx, DWORD PTR Client$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ClientArea$[rsp], eax
; Line 276
	mov	eax, DWORD PTR Client$[rsp+4]
	mov	ecx, DWORD PTR Client$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ClientArea$[rsp+4], eax
$LN2@ZenGetWind:
; Line 278
	mov	rax, QWORD PTR ClientArea$[rsp]
; Line 279
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
?ZenGetWindowTrimFromClient@@YA?AUi32x2@@U1@@Z ENDP	; ZenGetWindowTrimFromClient
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Window$ = 64
?ZenShowWindow@@YAXPEAUZenWindow@@@Z PROC		; ZenShowWindow
; File W:\cpp\void\detroit\brazen-window.h
; Line 264
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR Window$[rsp], 0
	je	SHORT $LN2@ZenShowWin
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+528]
	and	eax, 1
	mov	DWORD PTR tv76[rsp], eax
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+528]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR [rcx+528]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rcx+528], eax
	cmp	DWORD PTR tv76[rsp], 0
	jne	SHORT $LN2@ZenShowWin
; Line 265
	mov	edx, 5
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_ShowWindow
$LN2@ZenShowWin:
; Line 267
	add	rsp, 56					; 00000038H
	ret	0
?ZenShowWindow@@YAXPEAUZenWindow@@@Z ENDP		; ZenShowWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
Window$ = 64
?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z PROC		; ZenIsWindowValid
; File W:\cpp\void\detroit\brazen-window.h
; Line 254
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR Window$[rsp], 0
	je	SHORT $LN3@ZenIsWindo
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+536]
	call	QWORD PTR __imp_IsWindow
	test	eax, eax
	je	SHORT $LN3@ZenIsWindo
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@ZenIsWindo
$LN3@ZenIsWindo:
	mov	DWORD PTR tv69[rsp], 0
$LN4@ZenIsWindo:
	mov	eax, DWORD PTR tv69[rsp]
; Line 255
	add	rsp, 56					; 00000038H
	ret	0
?ZenIsWindowValid@@YAHPEAUZenWindow@@@Z ENDP		; ZenIsWindowValid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Window$ = 48
?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z PROC ; ZenAcquireNativeConsoleWindow
; File W:\cpp\void\detroit\brazen-window.h
; Line 247
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	call	QWORD PTR __imp_AllocConsole
; Line 248
	call	QWORD PTR __imp_GetConsoleWindow
	mov	rcx, QWORD PTR Window$[rsp]
	mov	QWORD PTR [rcx+536], rax
; Line 249
	add	rsp, 40					; 00000028H
	ret	0
?ZenAcquireNativeConsoleWindow@@YAXPEAUZenWindow@@@Z ENDP ; ZenAcquireNativeConsoleWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
wParam$ = 32
?InternalizeKeyboardEvent@@YAH_K@Z PROC			; InternalizeKeyboardEvent
; File W:\cpp\void\detroit\brazen-window.h
; Line 165
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR wParam$[rsp]
	mov	QWORD PTR tv64[rsp], rax
	mov	rax, QWORD PTR tv64[rsp]
	sub	rax, 8
	mov	QWORD PTR tv64[rsp], rax
	cmp	QWORD PTR tv64[rsp], 261		; 00000105H
	ja	SHORT $LN4@Internaliz
	lea	rax, OFFSET FLAT:__ImageBase
	mov	rcx, QWORD PTR tv64[rsp]
	movzx	ecx, BYTE PTR $LN110@Internaliz[rax+rcx]
	mov	ecx, DWORD PTR $LN111@Internaliz[rax+rcx*4]
	add	rcx, rax
	jmp	rcx
$LN4@Internaliz:
; Line 166
	xor	eax, eax
	jmp	$LN1@Internaliz
$LN5@Internaliz:
; Line 168
	mov	eax, 20
	jmp	$LN1@Internaliz
$LN6@Internaliz:
	mov	eax, 21
	jmp	$LN1@Internaliz
$LN7@Internaliz:
	mov	eax, 22
	jmp	$LN1@Internaliz
$LN8@Internaliz:
	mov	eax, 23
	jmp	$LN1@Internaliz
$LN9@Internaliz:
	mov	eax, 24
	jmp	$LN1@Internaliz
$LN10@Internaliz:
; Line 169
	mov	eax, 25
	jmp	$LN1@Internaliz
$LN11@Internaliz:
	mov	eax, 26
	jmp	$LN1@Internaliz
$LN12@Internaliz:
	mov	eax, 27
	jmp	$LN1@Internaliz
$LN13@Internaliz:
	mov	eax, 28
	jmp	$LN1@Internaliz
$LN14@Internaliz:
	mov	eax, 29
	jmp	$LN1@Internaliz
$LN15@Internaliz:
; Line 170
	mov	eax, 30
	jmp	$LN1@Internaliz
$LN16@Internaliz:
	mov	eax, 31
	jmp	$LN1@Internaliz
$LN17@Internaliz:
	mov	eax, 32					; 00000020H
	jmp	$LN1@Internaliz
$LN18@Internaliz:
	mov	eax, 33					; 00000021H
	jmp	$LN1@Internaliz
$LN19@Internaliz:
	mov	eax, 34					; 00000022H
	jmp	$LN1@Internaliz
$LN20@Internaliz:
; Line 171
	mov	eax, 35					; 00000023H
	jmp	$LN1@Internaliz
$LN21@Internaliz:
	mov	eax, 36					; 00000024H
	jmp	$LN1@Internaliz
$LN22@Internaliz:
	mov	eax, 37					; 00000025H
	jmp	$LN1@Internaliz
$LN23@Internaliz:
	mov	eax, 38					; 00000026H
	jmp	$LN1@Internaliz
$LN24@Internaliz:
	mov	eax, 39					; 00000027H
	jmp	$LN1@Internaliz
$LN25@Internaliz:
; Line 172
	mov	eax, 40					; 00000028H
	jmp	$LN1@Internaliz
$LN26@Internaliz:
	mov	eax, 41					; 00000029H
	jmp	$LN1@Internaliz
$LN27@Internaliz:
	mov	eax, 42					; 0000002aH
	jmp	$LN1@Internaliz
$LN28@Internaliz:
	mov	eax, 43					; 0000002bH
	jmp	$LN1@Internaliz
$LN29@Internaliz:
	mov	eax, 44					; 0000002cH
	jmp	$LN1@Internaliz
$LN30@Internaliz:
; Line 173
	mov	eax, 45					; 0000002dH
	jmp	$LN1@Internaliz
$LN31@Internaliz:
	mov	eax, 46					; 0000002eH
	jmp	$LN1@Internaliz
$LN32@Internaliz:
	mov	eax, 47					; 0000002fH
	jmp	$LN1@Internaliz
$LN33@Internaliz:
	mov	eax, 48					; 00000030H
	jmp	$LN1@Internaliz
$LN34@Internaliz:
	mov	eax, 49					; 00000031H
	jmp	$LN1@Internaliz
$LN35@Internaliz:
; Line 174
	mov	eax, 50					; 00000032H
	jmp	$LN1@Internaliz
$LN36@Internaliz:
	mov	eax, 51					; 00000033H
	jmp	$LN1@Internaliz
$LN37@Internaliz:
	mov	eax, 52					; 00000034H
	jmp	$LN1@Internaliz
$LN38@Internaliz:
	mov	eax, 53					; 00000035H
	jmp	$LN1@Internaliz
$LN39@Internaliz:
	mov	eax, 54					; 00000036H
	jmp	$LN1@Internaliz
$LN40@Internaliz:
; Line 175
	mov	eax, 55					; 00000037H
	jmp	$LN1@Internaliz
$LN41@Internaliz:
; Line 177
	mov	eax, 56					; 00000038H
	jmp	$LN1@Internaliz
$LN42@Internaliz:
	mov	eax, 57					; 00000039H
	jmp	$LN1@Internaliz
$LN43@Internaliz:
	mov	eax, 58					; 0000003aH
	jmp	$LN1@Internaliz
$LN44@Internaliz:
	mov	eax, 59					; 0000003bH
	jmp	$LN1@Internaliz
$LN45@Internaliz:
; Line 178
	mov	eax, 60					; 0000003cH
	jmp	$LN1@Internaliz
$LN46@Internaliz:
	mov	eax, 61					; 0000003dH
	jmp	$LN1@Internaliz
$LN47@Internaliz:
	mov	eax, 62					; 0000003eH
	jmp	$LN1@Internaliz
$LN48@Internaliz:
	mov	eax, 63					; 0000003fH
	jmp	$LN1@Internaliz
$LN49@Internaliz:
; Line 179
	mov	eax, 64					; 00000040H
	jmp	$LN1@Internaliz
$LN50@Internaliz:
	mov	eax, 65					; 00000041H
	jmp	$LN1@Internaliz
$LN51@Internaliz:
	mov	eax, 66					; 00000042H
	jmp	$LN1@Internaliz
$LN52@Internaliz:
	mov	eax, 67					; 00000043H
	jmp	$LN1@Internaliz
$LN53@Internaliz:
; Line 181
	mov	eax, 10
	jmp	$LN1@Internaliz
$LN54@Internaliz:
	mov	eax, 11
	jmp	$LN1@Internaliz
$LN55@Internaliz:
; Line 182
	mov	eax, 12
	jmp	$LN1@Internaliz
$LN56@Internaliz:
	mov	eax, 13
	jmp	$LN1@Internaliz
$LN57@Internaliz:
; Line 183
	mov	eax, 14
	jmp	$LN1@Internaliz
$LN58@Internaliz:
	mov	eax, 15
	jmp	$LN1@Internaliz
$LN59@Internaliz:
; Line 184
	mov	eax, 16
	jmp	$LN1@Internaliz
$LN60@Internaliz:
	mov	eax, 17
	jmp	$LN1@Internaliz
$LN61@Internaliz:
; Line 185
	mov	eax, 18
	jmp	$LN1@Internaliz
$LN62@Internaliz:
	mov	eax, 19
	jmp	$LN1@Internaliz
$LN63@Internaliz:
; Line 187
	mov	eax, 68					; 00000044H
	jmp	$LN1@Internaliz
$LN64@Internaliz:
; Line 188
	mov	eax, 69					; 00000045H
	jmp	$LN1@Internaliz
$LN65@Internaliz:
; Line 189
	mov	eax, 70					; 00000046H
	jmp	$LN1@Internaliz
$LN66@Internaliz:
; Line 190
	mov	eax, 71					; 00000047H
	jmp	$LN1@Internaliz
$LN67@Internaliz:
; Line 192
	mov	eax, 72					; 00000048H
	jmp	$LN1@Internaliz
$LN68@Internaliz:
; Line 194
	mov	eax, 73					; 00000049H
	jmp	$LN1@Internaliz
$LN69@Internaliz:
; Line 195
	mov	eax, 74					; 0000004aH
	jmp	$LN1@Internaliz
$LN70@Internaliz:
; Line 196
	mov	eax, 75					; 0000004bH
	jmp	$LN1@Internaliz
$LN71@Internaliz:
; Line 197
	mov	eax, 76					; 0000004cH
	jmp	$LN1@Internaliz
$LN72@Internaliz:
; Line 198
	mov	eax, 77					; 0000004dH
	jmp	$LN1@Internaliz
$LN73@Internaliz:
; Line 199
	mov	eax, 78					; 0000004eH
	jmp	$LN1@Internaliz
$LN74@Internaliz:
; Line 200
	mov	eax, 79					; 0000004fH
	jmp	$LN1@Internaliz
$LN75@Internaliz:
; Line 201
	mov	eax, 80					; 00000050H
	jmp	$LN1@Internaliz
$LN76@Internaliz:
; Line 202
	mov	eax, 81					; 00000051H
	jmp	$LN1@Internaliz
$LN77@Internaliz:
; Line 203
	mov	eax, 82					; 00000052H
	jmp	$LN1@Internaliz
$LN78@Internaliz:
; Line 204
	mov	eax, 83					; 00000053H
	jmp	$LN1@Internaliz
$LN79@Internaliz:
; Line 205
	mov	eax, 84					; 00000054H
	jmp	$LN1@Internaliz
$LN80@Internaliz:
; Line 206
	mov	eax, 85					; 00000055H
	jmp	$LN1@Internaliz
$LN81@Internaliz:
; Line 207
	mov	eax, 86					; 00000056H
	jmp	$LN1@Internaliz
$LN82@Internaliz:
; Line 208
	mov	eax, 87					; 00000057H
	jmp	$LN1@Internaliz
$LN83@Internaliz:
; Line 209
	mov	eax, 88					; 00000058H
	jmp	$LN1@Internaliz
$LN84@Internaliz:
; Line 210
	mov	eax, 89					; 00000059H
	jmp	$LN1@Internaliz
$LN85@Internaliz:
; Line 211
	mov	eax, 90					; 0000005aH
	jmp	$LN1@Internaliz
$LN86@Internaliz:
; Line 212
	mov	eax, 91					; 0000005bH
	jmp	$LN1@Internaliz
$LN87@Internaliz:
; Line 213
	mov	eax, 92					; 0000005cH
	jmp	$LN1@Internaliz
$LN88@Internaliz:
; Line 214
	mov	eax, 93					; 0000005dH
	jmp	$LN1@Internaliz
$LN89@Internaliz:
; Line 215
	mov	eax, 94					; 0000005eH
	jmp	$LN1@Internaliz
$LN90@Internaliz:
; Line 216
	mov	eax, 95					; 0000005fH
	jmp	SHORT $LN1@Internaliz
$LN91@Internaliz:
; Line 217
	mov	eax, 96					; 00000060H
	jmp	SHORT $LN1@Internaliz
$LN92@Internaliz:
; Line 218
	mov	eax, 97					; 00000061H
	jmp	SHORT $LN1@Internaliz
$LN93@Internaliz:
; Line 219
	mov	eax, 98					; 00000062H
	jmp	SHORT $LN1@Internaliz
$LN94@Internaliz:
; Line 221
	mov	eax, 100				; 00000064H
	jmp	SHORT $LN1@Internaliz
$LN95@Internaliz:
; Line 222
	mov	eax, 101				; 00000065H
	jmp	SHORT $LN1@Internaliz
$LN96@Internaliz:
; Line 223
	mov	eax, 102				; 00000066H
	jmp	SHORT $LN1@Internaliz
$LN97@Internaliz:
; Line 224
	mov	eax, 103				; 00000067H
	jmp	SHORT $LN1@Internaliz
$LN98@Internaliz:
; Line 225
	mov	eax, 104				; 00000068H
	jmp	SHORT $LN1@Internaliz
$LN99@Internaliz:
; Line 227
	mov	eax, 105				; 00000069H
	jmp	SHORT $LN1@Internaliz
$LN100@Internaliz:
; Line 228
	mov	eax, 106				; 0000006aH
	jmp	SHORT $LN1@Internaliz
$LN101@Internaliz:
; Line 229
	mov	eax, 108				; 0000006cH
	jmp	SHORT $LN1@Internaliz
$LN102@Internaliz:
; Line 230
	mov	eax, 110				; 0000006eH
	jmp	SHORT $LN1@Internaliz
$LN103@Internaliz:
; Line 231
	mov	eax, 112				; 00000070H
	jmp	SHORT $LN1@Internaliz
$LN104@Internaliz:
; Line 232
	mov	eax, 107				; 0000006bH
	jmp	SHORT $LN1@Internaliz
$LN105@Internaliz:
; Line 233
	mov	eax, 109				; 0000006dH
	jmp	SHORT $LN1@Internaliz
$LN106@Internaliz:
; Line 234
	mov	eax, 111				; 0000006fH
	jmp	SHORT $LN1@Internaliz
$LN107@Internaliz:
; Line 235
	mov	eax, 113				; 00000071H
	jmp	SHORT $LN1@Internaliz
$LN108@Internaliz:
; Line 236
	mov	eax, 99					; 00000063H
$LN1@Internaliz:
; Line 238
	add	rsp, 24
	ret	0
$LN111@Internaliz:
	DD	$LN74@Internaliz
	DD	$LN67@Internaliz
	DD	$LN76@Internaliz
	DD	$LN93@Internaliz
	DD	$LN89@Internaliz
	DD	$LN77@Internaliz
	DD	$LN75@Internaliz
	DD	$LN68@Internaliz
	DD	$LN69@Internaliz
	DD	$LN71@Internaliz
	DD	$LN70@Internaliz
	DD	$LN63@Internaliz
	DD	$LN65@Internaliz
	DD	$LN64@Internaliz
	DD	$LN66@Internaliz
	DD	$LN92@Internaliz
	DD	$LN72@Internaliz
	DD	$LN73@Internaliz
	DD	$LN5@Internaliz
	DD	$LN6@Internaliz
	DD	$LN7@Internaliz
	DD	$LN8@Internaliz
	DD	$LN9@Internaliz
	DD	$LN10@Internaliz
	DD	$LN11@Internaliz
	DD	$LN12@Internaliz
	DD	$LN13@Internaliz
	DD	$LN14@Internaliz
	DD	$LN15@Internaliz
	DD	$LN16@Internaliz
	DD	$LN17@Internaliz
	DD	$LN18@Internaliz
	DD	$LN19@Internaliz
	DD	$LN20@Internaliz
	DD	$LN21@Internaliz
	DD	$LN22@Internaliz
	DD	$LN23@Internaliz
	DD	$LN24@Internaliz
	DD	$LN25@Internaliz
	DD	$LN26@Internaliz
	DD	$LN27@Internaliz
	DD	$LN28@Internaliz
	DD	$LN29@Internaliz
	DD	$LN30@Internaliz
	DD	$LN31@Internaliz
	DD	$LN32@Internaliz
	DD	$LN33@Internaliz
	DD	$LN34@Internaliz
	DD	$LN35@Internaliz
	DD	$LN36@Internaliz
	DD	$LN37@Internaliz
	DD	$LN38@Internaliz
	DD	$LN39@Internaliz
	DD	$LN40@Internaliz
	DD	$LN103@Internaliz
	DD	$LN107@Internaliz
	DD	$LN108@Internaliz
	DD	$LN53@Internaliz
	DD	$LN54@Internaliz
	DD	$LN55@Internaliz
	DD	$LN56@Internaliz
	DD	$LN57@Internaliz
	DD	$LN58@Internaliz
	DD	$LN59@Internaliz
	DD	$LN60@Internaliz
	DD	$LN61@Internaliz
	DD	$LN62@Internaliz
	DD	$LN96@Internaliz
	DD	$LN98@Internaliz
	DD	$LN97@Internaliz
	DD	$LN94@Internaliz
	DD	$LN95@Internaliz
	DD	$LN41@Internaliz
	DD	$LN42@Internaliz
	DD	$LN43@Internaliz
	DD	$LN44@Internaliz
	DD	$LN45@Internaliz
	DD	$LN46@Internaliz
	DD	$LN47@Internaliz
	DD	$LN48@Internaliz
	DD	$LN49@Internaliz
	DD	$LN50@Internaliz
	DD	$LN51@Internaliz
	DD	$LN52@Internaliz
	DD	$LN91@Internaliz
	DD	$LN90@Internaliz
	DD	$LN100@Internaliz
	DD	$LN104@Internaliz
	DD	$LN101@Internaliz
	DD	$LN105@Internaliz
	DD	$LN102@Internaliz
	DD	$LN106@Internaliz
	DD	$LN83@Internaliz
	DD	$LN84@Internaliz
	DD	$LN79@Internaliz
	DD	$LN80@Internaliz
	DD	$LN81@Internaliz
	DD	$LN82@Internaliz
	DD	$LN88@Internaliz
	DD	$LN85@Internaliz
	DD	$LN86@Internaliz
	DD	$LN87@Internaliz
	DD	$LN78@Internaliz
	DD	$LN99@Internaliz
	DD	$LN4@Internaliz
$LN110@Internaliz:
	DB	0
	DB	1
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	2
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	3
	DB	4
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	5
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	15
	DB	16
	DB	17
	DB	104					; 00000068H
	DB	18
	DB	19
	DB	20
	DB	21
	DB	22
	DB	23
	DB	24
	DB	25
	DB	26
	DB	27
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	28
	DB	29
	DB	30
	DB	31
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	45					; 0000002dH
	DB	46					; 0000002eH
	DB	47					; 0000002fH
	DB	48					; 00000030H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	53					; 00000035H
	DB	54					; 00000036H
	DB	55					; 00000037H
	DB	56					; 00000038H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	57					; 00000039H
	DB	58					; 0000003aH
	DB	59					; 0000003bH
	DB	60					; 0000003cH
	DB	61					; 0000003dH
	DB	62					; 0000003eH
	DB	63					; 0000003fH
	DB	64					; 00000040H
	DB	65					; 00000041H
	DB	66					; 00000042H
	DB	67					; 00000043H
	DB	68					; 00000044H
	DB	104					; 00000068H
	DB	69					; 00000045H
	DB	70					; 00000046H
	DB	71					; 00000047H
	DB	72					; 00000048H
	DB	73					; 00000049H
	DB	74					; 0000004aH
	DB	75					; 0000004bH
	DB	76					; 0000004cH
	DB	77					; 0000004dH
	DB	78					; 0000004eH
	DB	79					; 0000004fH
	DB	80					; 00000050H
	DB	81					; 00000051H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	84					; 00000054H
	DB	85					; 00000055H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	86					; 00000056H
	DB	87					; 00000057H
	DB	88					; 00000058H
	DB	89					; 00000059H
	DB	90					; 0000005aH
	DB	91					; 0000005bH
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	92					; 0000005cH
	DB	93					; 0000005dH
	DB	94					; 0000005eH
	DB	95					; 0000005fH
	DB	96					; 00000060H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	103					; 00000067H
?InternalizeKeyboardEvent@@YAH_K@Z ENDP			; InternalizeKeyboardEvent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
tv70 = 4
Message$ = 32
wParam$ = 40
?ZenInternalizeMouseEvent@@YAHK_K@Z PROC		; ZenInternalizeMouseEvent
; File W:\cpp\void\detroit\brazen-window.h
; Line 151
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 152
	mov	eax, DWORD PTR Message$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 513				; 00000201H
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 12
	ja	SHORT $LN2@ZenInterna
	mov	eax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN19@ZenInterna[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@ZenInterna:
$LN5@ZenInterna:
$LN6@ZenInterna:
; Line 154
	mov	eax, 2
	jmp	SHORT $LN1@ZenInterna
$LN7@ZenInterna:
$LN8@ZenInterna:
$LN9@ZenInterna:
; Line 155
	mov	eax, 3
	jmp	SHORT $LN1@ZenInterna
$LN10@ZenInterna:
$LN11@ZenInterna:
$LN12@ZenInterna:
; Line 156
	mov	eax, 4
	jmp	SHORT $LN1@ZenInterna
$LN13@ZenInterna:
$LN14@ZenInterna:
$LN15@ZenInterna:
; Line 158
	mov	rax, QWORD PTR wParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	movzx	eax, ax
	cmp	eax, 1
	jne	SHORT $LN17@ZenInterna
	mov	DWORD PTR tv70[rsp], 5
	jmp	SHORT $LN18@ZenInterna
$LN17@ZenInterna:
	mov	DWORD PTR tv70[rsp], 6
$LN18@ZenInterna:
	mov	eax, DWORD PTR tv70[rsp]
	jmp	SHORT $LN1@ZenInterna
$LN2@ZenInterna:
; Line 161
	mov	eax, -1
$LN1@ZenInterna:
; Line 162
	add	rsp, 24
	ret	0
	npad	3
$LN19@ZenInterna:
	DD	$LN5@ZenInterna
	DD	$LN4@ZenInterna
	DD	$LN6@ZenInterna
	DD	$LN8@ZenInterna
	DD	$LN7@ZenInterna
	DD	$LN9@ZenInterna
	DD	$LN11@ZenInterna
	DD	$LN10@ZenInterna
	DD	$LN12@ZenInterna
	DD	$LN2@ZenInterna
	DD	$LN14@ZenInterna
	DD	$LN13@ZenInterna
	DD	$LN15@ZenInterna
?ZenInternalizeMouseEvent@@YAHK_K@Z ENDP		; ZenInternalizeMouseEvent
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$ = 32
?ZenGetNativePerformanceFrequency@@YA_KXZ PROC		; ZenGetNativePerformanceFrequency
; File W:\cpp\void\detroit\brazen-window.h
; Line 32
	sub	rsp, 56					; 00000038H
; Line 33
	lea	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 34
	mov	rax, QWORD PTR I$[rsp]
; Line 35
	add	rsp, 56					; 00000038H
	ret	0
?ZenGetNativePerformanceFrequency@@YA_KXZ ENDP		; ZenGetNativePerformanceFrequency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$ = 32
?ZenGetNativePerformanceCounter@@YA_KXZ PROC		; ZenGetNativePerformanceCounter
; File W:\cpp\void\detroit\brazen-window.h
; Line 25
	sub	rsp, 56					; 00000038H
; Line 26
	lea	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 27
	mov	rax, QWORD PTR I$[rsp]
; Line 28
	add	rsp, 56					; 00000038H
	ret	0
?ZenGetNativePerformanceCounter@@YA_KXZ ENDP		; ZenGetNativePerformanceCounter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?ZenGetSystemStandardErrorHandle@@YAPEAXXZ PROC		; ZenGetSystemStandardErrorHandle
; File W:\cpp\void\detroit\brazen-window.h
; Line 19
	sub	rsp, 40					; 00000028H
	mov	ecx, -12				; fffffff4H
	call	QWORD PTR __imp_GetStdHandle
; Line 20
	add	rsp, 40					; 00000028H
	ret	0
?ZenGetSystemStandardErrorHandle@@YAPEAXXZ ENDP		; ZenGetSystemStandardErrorHandle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?ZenGetSystemStandardInputHandle@@YAPEAXXZ PROC		; ZenGetSystemStandardInputHandle
; File W:\cpp\void\detroit\brazen-window.h
; Line 14
	sub	rsp, 40					; 00000028H
	mov	ecx, -10				; fffffff6H
	call	QWORD PTR __imp_GetStdHandle
; Line 15
	add	rsp, 40					; 00000028H
	ret	0
?ZenGetSystemStandardInputHandle@@YAPEAXXZ ENDP		; ZenGetSystemStandardInputHandle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?ZenGetSystemStandardOutputHandle@@YAPEAXXZ PROC	; ZenGetSystemStandardOutputHandle
; File W:\cpp\void\detroit\brazen-window.h
; Line 9
	sub	rsp, 40					; 00000028H
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
; Line 10
	add	rsp, 40					; 00000028H
	ret	0
?ZenGetSystemStandardOutputHandle@@YAPEAXXZ ENDP	; ZenGetSystemStandardOutputHandle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 64
Clipped$ = 68
Layout$ = 72
Font$ = 96
Flags$ = 104
Limit$ = 112
Scale$ = 120
Count$ = 128
Array$ = 136
Slice$ = 144
?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z PROC ; ZenArrangeFontGlyphs
; File W:\cpp\void\detroit\brazen-glyphics.c
; Line 515
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 518
	mov	rax, QWORD PTR Limit$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR Layout$[rsp], rax
; Line 519
	mov	rax, QWORD PTR Limit$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR Slice$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR Array$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR Count$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	movss	xmm3, DWORD PTR Scale$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR Flags$[rsp]
	mov	rcx, QWORD PTR Font$[rsp]
	call	?ZenMarshalGlyphVertexArray@@YAHPEAUZenGlyphFont@@HPEAUf32x2@@MIPEAUZenGlyphVert@@PEBD@Z ; ZenMarshalGlyphVertexArray
	mov	DWORD PTR Clipped$[rsp], eax
; Line 522
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@ZenArrange
; Line 523
	movss	xmm0, DWORD PTR Layout$[rsp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR Limit$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	mov	rax, QWORD PTR Limit$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Limit$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN5@ZenArrange:
; Line 525
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@ZenArrange
; Line 526
	movss	xmm0, DWORD PTR Layout$[rsp+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR Limit$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	mov	rax, QWORD PTR Limit$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR Limit$[rsp]
	movss	DWORD PTR [rax+4], xmm0
$LN6@ZenArrange:
; Line 530
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ZenArrange
$LN2@ZenArrange:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ZenArrange:
	mov	eax, DWORD PTR Clipped$[rsp]
	mov	ecx, DWORD PTR Count$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN3@ZenArrange
; Line 531
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Array$[rsp]
	mov	rdx, QWORD PTR Limit$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax+4]
	addss	xmm0, DWORD PTR [rdx]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Array$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 532
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Array$[rsp]
	mov	rdx, QWORD PTR Limit$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax+8]
	addss	xmm0, DWORD PTR [rdx+4]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Array$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 533
	jmp	$LN2@ZenArrange
$LN3@ZenArrange:
; Line 534
	mov	eax, DWORD PTR Clipped$[rsp]
; Line 535
	add	rsp, 88					; 00000058H
	ret	0
?ZenArrangeFontGlyphs@@YAHPEAUZenGlyphFont@@HPEATf32x4@@MHPEAUZenGlyphVert@@PEBD@Z ENDP ; ZenArrangeFontGlyphs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
AsInt$ = 0
LimitMax$ = 32
Float$ = 40
?ZenSensitiveCeil32@@YAHHM@Z PROC			; ZenSensitiveCeil32
; File W:\cpp\void\detroit\brazen-texture.h
; Line 144
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	movss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR Float$[rsp]
	cvttss2si eax, xmm0
	mov	DWORD PTR AsInt$[rsp], eax
; Line 145
	mov	eax, DWORD PTR LimitMax$[rsp]
	cmp	DWORD PTR AsInt$[rsp], eax
	jle	SHORT $LN2@ZenSensiti
	mov	eax, DWORD PTR LimitMax$[rsp]
	mov	DWORD PTR AsInt$[rsp], eax
$LN2@ZenSensiti:
; Line 146
	mov	eax, DWORD PTR AsInt$[rsp]
; Line 147
	add	rsp, 24
	ret	0
?ZenSensitiveCeil32@@YAHHM@Z ENDP			; ZenSensitiveCeil32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
FullQuad$ = 48
__$ArrayPad$ = 64
Texture$ = 112
Color$ = 120
?ZenFillTexture@@YAXPEAUZenTexture@@I@Z PROC		; ZenFillTexture
; File W:\cpp\void\detroit\brazen-texture.h
; Line 124
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 125
	mov	DWORD PTR FullQuad$[rsp], 0
; Line 126
	mov	DWORD PTR FullQuad$[rsp+4], 0
; Line 127
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR FullQuad$[rsp+8], eax
; Line 128
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR FullQuad$[rsp+12], eax
; Line 129
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR FullQuad$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	edx, DWORD PTR Color$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z ; ZenDrawQuadOnTexture
; Line 130
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?ZenFillTexture@@YAXPEAUZenTexture@@I@Z ENDP		; ZenFillTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
X$2 = 52
MinY$ = 56
MinX$ = 60
tv68 = 64
tv83 = 68
tv89 = 72
tv131 = 76
tv141 = 80
MaxY$ = 84
MaxX$ = 88
tv150 = 92
$T3 = 96
$T4 = 128
$T5 = 160
Texture$ = 224
Color$ = 232
Location$ = 240
?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z PROC ; ZenDrawQuadOnTexture
; File W:\cpp\void\detroit\brazen-texture.h
; Line 109
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	DWORD PTR [rsp+32], 50			; 00000032H
	mov	r9d, 109				; 0000006dH
	lea	r8, OFFSET FLAT:$SG103884
	lea	rdx, OFFSET FLAT:$SG103885
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	cmp	DWORD PTR [rax+12], 1
	jne	SHORT $LN9@ZenDrawQua
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN10@ZenDrawQua
$LN9@ZenDrawQua:
	mov	DWORD PTR tv68[rsp], 0
$LN10@ZenDrawQua:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103882
	mov	r8d, DWORD PTR tv68[rsp]
	lea	rdx, OFFSET FLAT:$SG103883
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 111
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN11@ZenDrawQua
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN12@ZenDrawQua
$LN11@ZenDrawQua:
	mov	DWORD PTR tv83[rsp], 0
$LN12@ZenDrawQua:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR MinX$[rsp], eax
; Line 112
	mov	rax, QWORD PTR Location$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN13@ZenDrawQua
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN14@ZenDrawQua
$LN13@ZenDrawQua:
	mov	DWORD PTR tv89[rsp], 0
$LN14@ZenDrawQua:
	mov	eax, DWORD PTR tv89[rsp]
	mov	DWORD PTR MinY$[rsp], eax
; Line 113
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR MinX$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Texture$[rsp]
	cmp	DWORD PTR [rcx+4], eax
	jge	SHORT $LN15@ZenDrawQua
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN16@ZenDrawQua
$LN15@ZenDrawQua:
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR MinX$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv131[rsp], eax
$LN16@ZenDrawQua:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR MaxX$[rsp], eax
; Line 114
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR MinY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR Texture$[rsp]
	cmp	DWORD PTR [rcx+8], eax
	jge	SHORT $LN17@ZenDrawQua
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv141[rsp], eax
	jmp	SHORT $LN18@ZenDrawQua
$LN17@ZenDrawQua:
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR MinY$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv141[rsp], eax
$LN18@ZenDrawQua:
	mov	eax, DWORD PTR tv141[rsp]
	mov	DWORD PTR MaxY$[rsp], eax
; Line 115
	mov	eax, DWORD PTR MinY$[rsp]
	mov	DWORD PTR Y$1[rsp], eax
	jmp	SHORT $LN4@ZenDrawQua
$LN2@ZenDrawQua:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenDrawQua:
	mov	eax, DWORD PTR MaxY$[rsp]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	SHORT $LN3@ZenDrawQua
; Line 116
	mov	eax, DWORD PTR MinX$[rsp]
	mov	DWORD PTR X$2[rsp], eax
	jmp	SHORT $LN7@ZenDrawQua
$LN5@ZenDrawQua:
	mov	eax, DWORD PTR X$2[rsp]
	inc	eax
	mov	DWORD PTR X$2[rsp], eax
$LN7@ZenDrawQua:
	mov	eax, DWORD PTR MaxX$[rsp]
	cmp	DWORD PTR X$2[rsp], eax
	jge	SHORT $LN6@ZenDrawQua
; Line 117
	mov	eax, DWORD PTR Color$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv150[rsp], eax
	mov	r8d, DWORD PTR Y$1[rsp]
	mov	edx, DWORD PTR X$2[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAt
	mov	ecx, DWORD PTR tv150[rsp]
	mov	BYTE PTR [rax], cl
; Line 118
	jmp	SHORT $LN5@ZenDrawQua
$LN6@ZenDrawQua:
; Line 119
	jmp	SHORT $LN2@ZenDrawQua
$LN3@ZenDrawQua:
; Line 120
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?ZenDrawQuadOnTexture@@YAXPEAUZenTexture@@ITi32x4@@@Z ENDP ; ZenDrawQuadOnTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Y$1 = 48
tv69 = 52
tv84 = 56
tv131 = 60
tv145 = 64
tv159 = 68
tv175 = 72
RowSize$ = 76
tv201 = 80
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
$T9 = 304
$T10 = 336
$T11 = 368
$T12 = 400
$T13 = 432
$T14 = 464
$T15 = 488
$T16 = 512
$T17 = 536
$T18 = 560
$T19 = 584
Destination$ = 640
Source$ = 648
?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z PROC	; ZenCopyTexture
; File W:\cpp\void\detroit\brazen-texture.h
; Line 93
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 616				; 00000268H
	mov	DWORD PTR [rsp+32], 44			; 0000002cH
	mov	r9d, 93					; 0000005dH
	lea	r8, OFFSET FLAT:$SG103840
	lea	rdx, OFFSET FLAT:$SG103841
	lea	rcx, QWORD PTR $T14[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Destination$[rsp]
	mov	rcx, QWORD PTR Source$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jl	SHORT $LN6@ZenCopyTex
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN7@ZenCopyTex
$LN6@ZenCopyTex:
	mov	DWORD PTR tv69[rsp], 0
$LN7@ZenCopyTex:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103838
	mov	r8d, DWORD PTR tv69[rsp]
	lea	rdx, OFFSET FLAT:$SG103839
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 94
	mov	DWORD PTR [rsp+32], 45			; 0000002dH
	mov	r9d, 94					; 0000005eH
	lea	r8, OFFSET FLAT:$SG103844
	lea	rdx, OFFSET FLAT:$SG103845
	lea	rcx, QWORD PTR $T15[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Destination$[rsp]
	mov	rcx, QWORD PTR Source$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN8@ZenCopyTex
	mov	DWORD PTR tv84[rsp], 1
	jmp	SHORT $LN9@ZenCopyTex
$LN8@ZenCopyTex:
	mov	DWORD PTR tv84[rsp], 0
$LN9@ZenCopyTex:
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103842
	mov	r8d, DWORD PTR tv84[rsp]
	lea	rdx, OFFSET FLAT:$SG103843
	lea	rcx, QWORD PTR $T5[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 95
	mov	DWORD PTR [rsp+32], 46			; 0000002eH
	mov	r9d, 95					; 0000005fH
	lea	r8, OFFSET FLAT:$SG103848
	lea	rdx, OFFSET FLAT:$SG103849
	lea	rcx, QWORD PTR $T16[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Destination$[rsp]
	mov	rcx, QWORD PTR Source$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+16], ecx
	jl	SHORT $LN10@ZenCopyTex
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN11@ZenCopyTex
$LN10@ZenCopyTex:
	mov	DWORD PTR tv131[rsp], 0
$LN11@ZenCopyTex:
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103846
	mov	r8d, DWORD PTR tv131[rsp]
	lea	rdx, OFFSET FLAT:$SG103847
	lea	rcx, QWORD PTR $T7[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 96
	mov	DWORD PTR [rsp+32], 47			; 0000002fH
	mov	r9d, 96					; 00000060H
	lea	r8, OFFSET FLAT:$SG103852
	lea	rdx, OFFSET FLAT:$SG103853
	lea	rcx, QWORD PTR $T17[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Destination$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN12@ZenCopyTex
	mov	DWORD PTR tv145[rsp], 1
	jmp	SHORT $LN13@ZenCopyTex
$LN12@ZenCopyTex:
	mov	DWORD PTR tv145[rsp], 0
$LN13@ZenCopyTex:
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103850
	mov	r8d, DWORD PTR tv145[rsp]
	lea	rdx, OFFSET FLAT:$SG103851
	lea	rcx, QWORD PTR $T9[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 97
	mov	DWORD PTR [rsp+32], 48			; 00000030H
	mov	r9d, 97					; 00000061H
	lea	r8, OFFSET FLAT:$SG103856
	lea	rdx, OFFSET FLAT:$SG103857
	lea	rcx, QWORD PTR $T18[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Source$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN14@ZenCopyTex
	mov	DWORD PTR tv159[rsp], 1
	jmp	SHORT $LN15@ZenCopyTex
$LN14@ZenCopyTex:
	mov	DWORD PTR tv159[rsp], 0
$LN15@ZenCopyTex:
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103854
	mov	r8d, DWORD PTR tv159[rsp]
	lea	rdx, OFFSET FLAT:$SG103855
	lea	rcx, QWORD PTR $T11[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 98
	mov	rcx, QWORD PTR Source$[rsp]
	call	?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z ; ZenGetTextureRowSize
	mov	DWORD PTR RowSize$[rsp], eax
; Line 99
	mov	DWORD PTR [rsp+32], 49			; 00000031H
	mov	r9d, 99					; 00000063H
	lea	r8, OFFSET FLAT:$SG103860
	lea	rdx, OFFSET FLAT:$SG103861
	lea	rcx, QWORD PTR $T19[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR RowSize$[rsp], eax
	jg	SHORT $LN16@ZenCopyTex
	mov	DWORD PTR tv175[rsp], 1
	jmp	SHORT $LN17@ZenCopyTex
$LN16@ZenCopyTex:
	mov	DWORD PTR tv175[rsp], 0
$LN17@ZenCopyTex:
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103858
	mov	r8d, DWORD PTR tv175[rsp]
	lea	rdx, OFFSET FLAT:$SG103859
	lea	rcx, QWORD PTR $T13[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 101
	mov	DWORD PTR Y$1[rsp], 0
	jmp	SHORT $LN4@ZenCopyTex
$LN2@ZenCopyTex:
	mov	eax, DWORD PTR Y$1[rsp]
	inc	eax
	mov	DWORD PTR Y$1[rsp], eax
$LN4@ZenCopyTex:
	mov	rax, QWORD PTR Source$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR Y$1[rsp], eax
	jge	SHORT $LN3@ZenCopyTex
; Line 102
	movsxd	rax, DWORD PTR RowSize$[rsp]
	mov	rcx, QWORD PTR Source$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	imul	ecx, DWORD PTR Y$1[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR Source$[rsp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdx, QWORD PTR Destination$[rsp]
	mov	edx, DWORD PTR [rdx+16]
	imul	edx, DWORD PTR Y$1[rsp]
	movsxd	rdx, edx
	mov	rdi, QWORD PTR Destination$[rsp]
	add	rdx, QWORD PTR [rdi+24]
	mov	QWORD PTR tv201[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv201[rsp]
	mov	rcx, rax
	call	memcpy
; Line 103
	jmp	SHORT $LN2@ZenCopyTex
$LN3@ZenCopyTex:
; Line 104
	add	rsp, 616				; 00000268H
	pop	rdi
	pop	rsi
	ret	0
?ZenCopyTexture@@YAXPEAUZenTexture@@PEBU1@@Z ENDP	; ZenCopyTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
RowSize$ = 32
Texture$ = 64
?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z PROC	; ZenGetTextureRowSize
; File W:\cpp\void\detroit\brazen-texture.h
; Line 76
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	rcx, QWORD PTR Texture$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR RowSize$[rsp], eax
; Line 77
	mov	eax, DWORD PTR RowSize$[rsp]
; Line 78
	add	rsp, 56					; 00000038H
	ret	0
?ZenGetTextureRowSize@@YAHPEBUZenTexture@@@Z ENDP	; ZenGetTextureRowSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv87 = 48
tv81 = 52
tv83 = 56
tv79 = 60
tv85 = 64
Texture$ = 96
FileName$ = 104
?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z PROC	; ZenWriteTextureToFile
; File W:\cpp\void\detroit\brazen-texture.h
; Line 61
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 64
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv87[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv85[rsp], rax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR tv81[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv83[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv79[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR tv85[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR tv81[rsp]
	mov	r8d, DWORD PTR tv83[rsp]
	mov	edx, DWORD PTR tv79[rsp]
	mov	rcx, QWORD PTR FileName$[rsp]
	call	stbi_write_png
	test	eax, eax
	je	SHORT $LN2@ZenWriteTe
; Line 67
	mov	eax, 1
	jmp	SHORT $LN1@ZenWriteTe
$LN2@ZenWriteTe:
; Line 70
	xor	eax, eax
$LN1@ZenWriteTe:
; Line 71
	add	rsp, 88					; 00000058H
	ret	0
?ZenWriteTextureToFile@@YAHPEAUZenTexture@@PEBD@Z ENDP	; ZenWriteTextureToFile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 48
tv94 = 52
tv87 = 56
tv138 = 60
MemoryAtOffset$ = 64
$T1 = 72
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 216
Texture$ = 272
X$ = 280
Y$ = 288
?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z PROC	; ZenGetTextureMemoryAt
; File W:\cpp\void\detroit\brazen-texture.h
; Line 52
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	r8d, DWORD PTR Y$[rsp]
	mov	edx, DWORD PTR X$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ; ZenGetTextureMemoryAtUnchecked
	mov	QWORD PTR MemoryAtOffset$[rsp], rax
; Line 54
	mov	DWORD PTR [rsp+32], 42			; 0000002aH
	mov	r9d, 54					; 00000036H
	lea	r8, OFFSET FLAT:$SG103802
	lea	rdx, OFFSET FLAT:$SG103803
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv87[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR X$[rsp], eax
	jge	SHORT $LN3@ZenGetText
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN4@ZenGetText
$LN3@ZenGetText:
	mov	DWORD PTR tv75[rsp], 0
$LN4@ZenGetText:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR X$[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG103800
	mov	r8d, DWORD PTR tv75[rsp]
	lea	rdx, OFFSET FLAT:$SG103801
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 55
	mov	DWORD PTR [rsp+32], 43			; 0000002bH
	mov	r9d, 55					; 00000037H
	lea	r8, OFFSET FLAT:$SG103806
	lea	rdx, OFFSET FLAT:$SG103807
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv138[rsp], eax
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR Y$[rsp], eax
	jge	SHORT $LN5@ZenGetText
	mov	DWORD PTR tv94[rsp], 1
	jmp	SHORT $LN6@ZenGetText
$LN5@ZenGetText:
	mov	DWORD PTR tv94[rsp], 0
$LN6@ZenGetText:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR tv138[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR Y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, OFFSET FLAT:$SG103804
	mov	r8d, DWORD PTR tv94[rsp]
	lea	rdx, OFFSET FLAT:$SG103805
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 56
	mov	rax, QWORD PTR MemoryAtOffset$[rsp]
; Line 57
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ZenGetTextureMemoryAt@@YAPEAEPEAUZenTexture@@HH@Z ENDP	; ZenGetTextureMemoryAt
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
MemoryAtOffset$ = 0
Texture$ = 32
X$ = 40
Y$ = 48
?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z PROC ; ZenGetTextureMemoryAtUnchecked
; File W:\cpp\void\detroit\brazen-texture.h
; Line 46
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR Texture$[rsp]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR Y$[rsp]
	cdqe
	mov	rcx, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR X$[rsp]
	add	rax, rcx
	mov	QWORD PTR MemoryAtOffset$[rsp], rax
; Line 47
	mov	rax, QWORD PTR MemoryAtOffset$[rsp]
; Line 48
	add	rsp, 24
	ret	0
?ZenGetTextureMemoryAtUnchecked@@YAPEAEPEAUZenTexture@@HH@Z ENDP ; ZenGetTextureMemoryAtUnchecked
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
Stride$ = 36
T$ = 40
__$ReturnAddress$ = 112
Access$ = 120
Format$ = 128
DimenX$ = 136
DimenY$ = 144
Memory$ = 152
?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z PROC	; ZenUnboundTexture
; File W:\cpp\void\detroit\brazen-texture.h
; Line 32
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	cmp	QWORD PTR Memory$[rsp], 0
	je	SHORT $LN3@ZenUnbound
	mov	ecx, DWORD PTR Format$[rsp]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	ecx, DWORD PTR DimenX$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@ZenUnbound
$LN3@ZenUnbound:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ZenUnbound:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR Stride$[rsp], eax
; Line 35
	mov	eax, DWORD PTR Access$[rsp]
	mov	DWORD PTR T$[rsp], eax
; Line 36
	mov	eax, DWORD PTR Format$[rsp]
	mov	DWORD PTR T$[rsp+12], eax
; Line 37
	mov	eax, DWORD PTR DimenX$[rsp]
	mov	DWORD PTR T$[rsp+4], eax
; Line 38
	mov	eax, DWORD PTR DimenY$[rsp]
	mov	DWORD PTR T$[rsp+8], eax
; Line 39
	mov	eax, DWORD PTR Stride$[rsp]
	mov	DWORD PTR T$[rsp+16], eax
; Line 40
	mov	rax, QWORD PTR Memory$[rsp]
	mov	QWORD PTR T$[rsp+24], rax
; Line 41
	lea	rax, QWORD PTR T$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 42
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?ZenUnboundTexture@@YA?AUZenTexture@@HHHHPEAX@Z ENDP	; ZenUnboundTexture
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
Denormalized$ = 64
__$ArrayPad$ = 80
Color$ = 128
?ColorPackU@@YAITf32x4@@@Z PROC				; ColorPackU
; File W:\cpp\void\detroit\brazen-color.h
; Line 65
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z ; ColorDenormalize
	lea	rcx, QWORD PTR Denormalized$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 66
	mov	eax, DWORD PTR Denormalized$[rsp+12]
	shl	eax, 24
	mov	ecx, DWORD PTR Denormalized$[rsp+8]
	shl	ecx, 16
	or	eax, ecx
	mov	ecx, DWORD PTR Denormalized$[rsp+4]
	shl	ecx, 8
	or	eax, ecx
	or	eax, DWORD PTR Denormalized$[rsp]
; Line 71
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?ColorPackU@@YAITf32x4@@@Z ENDP				; ColorPackU
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
Color$ = 72
?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z PROC		; ColorDenormalize
; File W:\cpp\void\detroit\brazen-color.h
; Line 42
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si rax, xmm0
	mov	DWORD PTR $T1[rsp], eax
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si rax, xmm0
	mov	DWORD PTR $T1[rsp+4], eax
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si rax, xmm0
	mov	DWORD PTR $T1[rsp+8], eax
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si rax, xmm0
	mov	DWORD PTR $T1[rsp+12], eax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 48
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?ColorDenormalize@@YA?ATu32x4@@Tf32x4@@@Z ENDP		; ColorDenormalize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Normalize$ = 0
$T1 = 8
__$ArrayPad$ = 24
__$ReturnAddress$ = 64
Color$ = 72
?ColorNormalize@@YA?ATf32x4@@T1@@Z PROC			; ColorNormalize
; File W:\cpp\void\detroit\brazen-color.h
; Line 31
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR Normalize$[rsp], xmm0
; Line 32
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T1[rsp+4], xmm0
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T1[rsp+8], xmm0
	mov	rax, QWORD PTR Color$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T1[rsp+12], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 38
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?ColorNormalize@@YA?ATf32x4@@T1@@Z ENDP			; ColorNormalize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__ESTANDARD_BASIS_COLOR@@YAXXZ
text$di	SEGMENT
??__ESTANDARD_BASIS_COLOR@@YAXXZ PROC			; `dynamic initializer for 'STANDARD_BASIS_COLOR'', COMDAT
; File W:\cpp\void\detroit\brazen-color.h
; Line 27
	push	rsi
	push	rdi
; Line 24
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBTf32x4@@B
	lea	rcx, OFFSET FLAT:?COLOR_RED@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 25
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBTf32x4@@B+16
	lea	rcx, OFFSET FLAT:?COLOR_GREEN@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 26
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBTf32x4@@B+32
	lea	rcx, OFFSET FLAT:?COLOR_BLUE@@3Tf32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	pop	rdi
	pop	rsi
	ret	0
??__ESTANDARD_BASIS_COLOR@@YAXXZ ENDP			; `dynamic initializer for 'STANDARD_BASIS_COLOR''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
Slice$ = 40
__$ReturnAddress$ = 96
Arena$ = 104
Size$ = 112
?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z PROC	; ZenSliceArena
; File W:\cpp\void\detroit\brazen-memory.h
; Line 73
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 74
	mov	edx, DWORD PTR Size$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	call	?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z	; ZenArenaAlloc
	mov	QWORD PTR Slice$[rsp+8], rax
; Line 75
	cmp	QWORD PTR Slice$[rsp+8], 0
	je	SHORT $LN3@ZenSliceAr
	mov	eax, DWORD PTR Size$[rsp]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN4@ZenSliceAr
$LN3@ZenSliceAr:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ZenSliceAr:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR Slice$[rsp], eax
; Line 76
	lea	rax, QWORD PTR Slice$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 77
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ZenSliceArena@@YA?AUZenSlice@@PEAUZenArena@@I@Z ENDP	; ZenSliceArena
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Arena$ = 0
__$ReturnAddress$ = 48
Slice$ = 56
?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z PROC ; ZenSliceToEmptyArena
; File W:\cpp\void\detroit\brazen-memory.h
; Line 63
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24
; Line 64
	mov	rax, QWORD PTR Slice$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR Arena$[rsp], eax
; Line 65
	mov	DWORD PTR Arena$[rsp+4], 0
; Line 66
	mov	rax, QWORD PTR Slice$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR Arena$[rsp+8], rax
; Line 67
	lea	rax, QWORD PTR Arena$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 68
	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
?ZenSliceToEmptyArena@@YA?AUZenArena@@UZenSlice@@@Z ENDP ; ZenSliceToEmptyArena
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 48
Result$1 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Arena$ = 192
Commit$ = 200
?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z PROC		; ZenArenaAlloc
; File W:\cpp\void\detroit\brazen-memory.h
; Line 53
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR Arena$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR Commit$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	cmp	eax, DWORD PTR [rcx]
	ja	SHORT $LN2@ZenArenaAl
; Line 54
	mov	rax, QWORD PTR Arena$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR Arena$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR Result$1[rsp], rax
; Line 55
	mov	rax, QWORD PTR Arena$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR Commit$[rsp]
	mov	rcx, QWORD PTR Arena$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 56
	mov	rax, QWORD PTR Result$1[rsp]
	jmp	$LN1@ZenArenaAl
	jmp	$LN3@ZenArenaAl
$LN2@ZenArenaAl:
; Line 57
	mov	DWORD PTR [rsp+32], 41			; 00000029H
	mov	r9d, 57					; 00000039H
	lea	r8, OFFSET FLAT:$SG103625
	lea	rdx, OFFSET FLAT:$SG103626
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG103623
	test	rax, rax
	jne	SHORT $LN5@ZenArenaAl
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN6@ZenArenaAl
$LN5@ZenArenaAl:
	mov	DWORD PTR tv78[rsp], 0
$LN6@ZenArenaAl:
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG103622
	mov	r8d, DWORD PTR tv78[rsp]
	lea	rdx, OFFSET FLAT:$SG103624
	lea	rcx, QWORD PTR $T3[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN3@ZenArenaAl:
; Line 58
	xor	eax, eax
$LN1@ZenArenaAl:
; Line 59
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ZenArenaAlloc@@YAPEAXPEAUZenArena@@I@Z ENDP		; ZenArenaAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Mem$1 = 48
$T2 = 56
$T3 = 80
$T4 = 112
Arena$ = 176
Max$ = 184
?ZenArenaInit@@YAHPEAUZenArena@@I@Z PROC		; ZenArenaInit
; File W:\cpp\void\detroit\brazen-memory.h
; Line 41
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 42
	mov	eax, DWORD PTR Max$[rsp]
	mov	r9d, 4
	mov	r8d, 12288				; 00003000H
	mov	edx, eax
	xor	ecx, ecx
	call	QWORD PTR __imp_VirtualAlloc
	mov	QWORD PTR Mem$1[rsp], rax
	cmp	QWORD PTR Mem$1[rsp], 0
	je	SHORT $LN2@ZenArenaIn
; Line 43
	mov	rax, QWORD PTR Arena$[rsp]
	mov	ecx, DWORD PTR Max$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 44
	mov	rax, QWORD PTR Arena$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 45
	mov	rax, QWORD PTR Arena$[rsp]
	mov	rcx, QWORD PTR Mem$1[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 46
	mov	eax, 1
	jmp	SHORT $LN1@ZenArenaIn
	jmp	SHORT $LN3@ZenArenaIn
$LN2@ZenArenaIn:
; Line 47
	mov	DWORD PTR [rsp+32], 40			; 00000028H
	mov	r9d, 47					; 0000002fH
	lea	r8, OFFSET FLAT:$SG103611
	lea	rdx, OFFSET FLAT:$SG103612
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG103610
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ZenArenaIn:
; Line 48
	xor	eax, eax
$LN1@ZenArenaIn:
; Line 49
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ZenArenaInit@@YAHPEAUZenArena@@I@Z ENDP		; ZenArenaInit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 80
col$ = 84
pos$1 = 88
y$2 = 92
x$3 = 96
DCY$4 = 100
bitCnt$5 = 104
bitBuf$6 = 108
j$7 = 112
i$ = 116
k$ = 120
yy$8 = 124
xx$9 = 128
DCU$10 = 132
DCV$11 = 136
yti$12 = 140
uvti$13 = 144
p$14 = 148
r$15 = 152
g$16 = 156
b$17 = 160
p$18 = 164
r$19 = 168
g$20 = 172
b$21 = 176
tv70 = 180
tv72 = 184
tv75 = 188
tv76 = 192
tv81 = 196
tv130 = 200
tv131 = 204
tv147 = 208
tv148 = 212
tv204 = 216
tv374 = 220
tv376 = 224
subsample$ = 228
tv391 = 232
clamped_row$22 = 236
tv395 = 240
tv404 = 244
tv573 = 248
clamped_row$23 = 252
tv577 = 256
tv586 = 260
dataR$24 = 264
ofsG$25 = 272
ofsB$26 = 276
base_p$27 = 280
base_p$28 = 284
dataG$29 = 288
dataB$30 = 296
tv212 = 304
tv219 = 312
tv292 = 320
tv299 = 328
tv307 = 336
tv314 = 344
tv324 = 352
tv331 = 360
tv341 = 368
tv348 = 376
tv358 = 384
tv365 = 392
tv372 = 400
fdtbl_Y$ = 416
fdtbl_UV$ = 672
subU$31 = 928
subV$32 = 1184
Y$33 = 1440
U$34 = 1696
V$35 = 1952
Y$36 = 2208
U$37 = 3232
V$38 = 4256
head1$39 = 5280
YTable$ = 5312
UVTable$ = 5376
__$ArrayPad$ = 5440
s$ = 5472
width$ = 5480
height$ = 5488
comp$ = 5496
data$ = 5504
quality$ = 5512
?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z PROC ; stbi_write_jpg_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1398
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 5464				; 00001558H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1474
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR width$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR height$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	jg	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 1
	jge	SHORT $LN41@stbi_write
$LN42@stbi_write:
; Line 1475
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN41@stbi_write:
; Line 1478
	cmp	DWORD PTR quality$[rsp], 0
	je	SHORT $LN46@stbi_write
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN47@stbi_write
$LN46@stbi_write:
	mov	DWORD PTR tv70[rsp], 90			; 0000005aH
$LN47@stbi_write:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1479
	cmp	DWORD PTR quality$[rsp], 90		; 0000005aH
	jg	SHORT $LN48@stbi_write
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN49@stbi_write
$LN48@stbi_write:
	mov	DWORD PTR tv72[rsp], 0
$LN49@stbi_write:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR subsample$[rsp], eax
; Line 1480
	cmp	DWORD PTR quality$[rsp], 1
	jge	SHORT $LN52@stbi_write
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN53@stbi_write
$LN52@stbi_write:
	cmp	DWORD PTR quality$[rsp], 100		; 00000064H
	jle	SHORT $LN50@stbi_write
	mov	DWORD PTR tv75[rsp], 100		; 00000064H
	jmp	SHORT $LN51@stbi_write
$LN50@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN51@stbi_write:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR tv76[rsp], eax
$LN53@stbi_write:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1481
	cmp	DWORD PTR quality$[rsp], 50		; 00000032H
	jge	SHORT $LN54@stbi_write
	mov	eax, 5000				; 00001388H
	cdq
	idiv	DWORD PTR quality$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN55@stbi_write
$LN54@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	shl	eax, 1
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv81[rsp], eax
$LN55@stbi_write:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1483
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_write:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	$LN3@stbi_write
; Line 1484
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR yti$12[rsp], eax
; Line 1485
	cmp	DWORD PTR yti$12[rsp], 1
	jge	SHORT $LN58@stbi_write
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN59@stbi_write
$LN58@stbi_write:
	cmp	DWORD PTR yti$12[rsp], 255		; 000000ffH
	jle	SHORT $LN56@stbi_write
	mov	DWORD PTR tv130[rsp], 255		; 000000ffH
	jmp	SHORT $LN57@stbi_write
$LN56@stbi_write:
	mov	eax, DWORD PTR yti$12[rsp]
	mov	DWORD PTR tv130[rsp], eax
$LN57@stbi_write:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR tv131[rsp], eax
$LN59@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv131[rsp]
	mov	BYTE PTR YTable$[rsp+rax], cl
; Line 1486
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR uvti$13[rsp], eax
; Line 1487
	cmp	DWORD PTR uvti$13[rsp], 1
	jge	SHORT $LN62@stbi_write
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN63@stbi_write
$LN62@stbi_write:
	cmp	DWORD PTR uvti$13[rsp], 255		; 000000ffH
	jle	SHORT $LN60@stbi_write
	mov	DWORD PTR tv147[rsp], 255		; 000000ffH
	jmp	SHORT $LN61@stbi_write
$LN60@stbi_write:
	mov	eax, DWORD PTR uvti$13[rsp]
	mov	DWORD PTR tv147[rsp], eax
$LN61@stbi_write:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN63@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv148[rsp]
	mov	BYTE PTR UVTable$[rsp+rax], cl
; Line 1488
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1490
	mov	DWORD PTR row$[rsp], 0
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR row$[rsp], 8
	jge	$LN6@stbi_write
; Line 1491
	mov	DWORD PTR col$[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi_write:
	cmp	DWORD PTR col$[rsp], 8
	jge	$LN9@stbi_write
; Line 1492
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR YTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_Y$[rsp+rax*4], xmm0
; Line 1493
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR UVTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_UV$[rsp+rax*4], xmm0
; Line 1494
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 1495
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1501
	mov	BYTE PTR head1$39[rsp], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+1], 192		; 000000c0H
	mov	BYTE PTR head1$39[rsp+2], 0
	mov	BYTE PTR head1$39[rsp+3], 17
	mov	BYTE PTR head1$39[rsp+4], 8
	mov	eax, DWORD PTR height$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+5], al
	mov	eax, DWORD PTR height$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+6], al
	mov	eax, DWORD PTR width$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+7], al
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+8], al
; Line 1502
	mov	BYTE PTR head1$39[rsp+9], 3
	mov	BYTE PTR head1$39[rsp+10], 1
	cmp	DWORD PTR subsample$[rsp], 0
	je	SHORT $LN64@stbi_write
	mov	DWORD PTR tv204[rsp], 34		; 00000022H
	jmp	SHORT $LN65@stbi_write
$LN64@stbi_write:
	mov	DWORD PTR tv204[rsp], 17
$LN65@stbi_write:
	movzx	eax, BYTE PTR tv204[rsp]
	mov	BYTE PTR head1$39[rsp+11], al
	mov	BYTE PTR head1$39[rsp+12], 0
	mov	BYTE PTR head1$39[rsp+13], 2
	mov	BYTE PTR head1$39[rsp+14], 17
	mov	BYTE PTR head1$39[rsp+15], 1
	mov	BYTE PTR head1$39[rsp+16], 3
	mov	BYTE PTR head1$39[rsp+17], 17
	mov	BYTE PTR head1$39[rsp+18], 1
	mov	BYTE PTR head1$39[rsp+19], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+20], 196		; 000000c4H
	mov	BYTE PTR head1$39[rsp+21], 1
	mov	BYTE PTR head1$39[rsp+22], 162		; 000000a2H
	mov	BYTE PTR head1$39[rsp+23], 0
; Line 1503
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv212[rsp], rax
	mov	r8d, 25
	lea	rdx, OFFSET FLAT:?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv212[rsp]
; Line 1504
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv219[rsp], rax
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR YTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv219[rsp]
; Line 1505
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1506
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv292[rsp], rax
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR UVTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv292[rsp]
; Line 1507
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv299[rsp], rax
	mov	r8d, 24
	lea	rdx, QWORD PTR head1$39[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv299[rsp]
; Line 1508
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv307[rsp], rax
	lea	rax, OFFSET FLAT:?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv307[rsp]
; Line 1509
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv314[rsp], rax
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv314[rsp]
; Line 1510
	mov	dl, 16
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1511
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv324[rsp], rax
	lea	rax, OFFSET FLAT:?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv324[rsp]
; Line 1512
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv331[rsp], rax
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv331[rsp]
; Line 1513
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1514
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv341[rsp], rax
	lea	rax, OFFSET FLAT:?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv341[rsp]
; Line 1515
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv348[rsp], rax
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv348[rsp]
; Line 1516
	mov	dl, 17
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1517
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv358[rsp], rax
	lea	rax, OFFSET FLAT:?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv358[rsp]
; Line 1518
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv365[rsp], rax
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv365[rsp]
; Line 1519
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv372[rsp], rax
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv372[rsp]
; Line 1525
	mov	DWORD PTR DCY$4[rsp], 0
	mov	DWORD PTR DCU$10[rsp], 0
	mov	DWORD PTR DCV$11[rsp], 0
; Line 1526
	mov	DWORD PTR bitBuf$6[rsp], 0
	mov	DWORD PTR bitCnt$5[rsp], 0
; Line 1528
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN66@stbi_write
	mov	DWORD PTR tv374[rsp], 1
	jmp	SHORT $LN67@stbi_write
$LN66@stbi_write:
	mov	DWORD PTR tv374[rsp], 0
$LN67@stbi_write:
	mov	eax, DWORD PTR tv374[rsp]
	mov	DWORD PTR ofsG$25[rsp], eax
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN68@stbi_write
	mov	DWORD PTR tv376[rsp], 2
	jmp	SHORT $LN69@stbi_write
$LN68@stbi_write:
	mov	DWORD PTR tv376[rsp], 0
$LN69@stbi_write:
	mov	eax, DWORD PTR tv376[rsp]
	mov	DWORD PTR ofsB$26[rsp], eax
; Line 1529
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR dataR$24[rsp], rax
; Line 1530
	movsxd	rax, DWORD PTR ofsG$25[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataG$29[rsp], rax
; Line 1531
	movsxd	rax, DWORD PTR ofsB$26[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataB$30[rsp], rax
; Line 1533
	cmp	DWORD PTR subsample$[rsp], 0
	je	$LN43@stbi_write
; Line 1534
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	mov	DWORD PTR y$2[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN12@stbi_write
; Line 1535
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	mov	DWORD PTR x$3[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN15@stbi_write
; Line 1537
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN19@stbi_write
$LN17@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN19@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN18@stbi_write
; Line 1539
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN70@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv391[rsp], eax
	jmp	SHORT $LN71@stbi_write
$LN70@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv391[rsp], eax
$LN71@stbi_write:
	mov	eax, DWORD PTR tv391[rsp]
	mov	DWORD PTR clamped_row$22[rsp], eax
; Line 1540
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN72@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv395[rsp], eax
	jmp	SHORT $LN73@stbi_write
$LN72@stbi_write:
	mov	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv395[rsp], eax
$LN73@stbi_write:
	mov	eax, DWORD PTR tv395[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$27[rsp], eax
; Line 1541
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN22@stbi_write
$LN20@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN22@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN21@stbi_write
; Line 1543
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN74@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv404[rsp], eax
	jmp	SHORT $LN75@stbi_write
$LN74@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv404[rsp], eax
$LN75@stbi_write:
	mov	eax, DWORD PTR tv404[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$14[rsp], eax
; Line 1544
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$15[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$16[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$17[rsp], xmm0
; Line 1545
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$16[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$36[rsp+rax*4], xmm0
; Line 1546
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$37[rsp+rax*4], xmm0
; Line 1547
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$17[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$38[rsp+rax*4], xmm0
; Line 1548
	jmp	$LN20@stbi_write
$LN21@stbi_write:
; Line 1549
	jmp	$LN17@stbi_write
$LN18@stbi_write:
; Line 1550
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 16
	lea	r9, QWORD PTR Y$36[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1551
	lea	rax, QWORD PTR Y$36[rsp+32]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1552
	lea	rax, QWORD PTR Y$36[rsp+512]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1553
	lea	rax, QWORD PTR Y$36[rsp+544]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1559
	mov	DWORD PTR yy$8[rsp], 0
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN25@stbi_write
$LN23@stbi_write:
	mov	eax, DWORD PTR yy$8[rsp]
	inc	eax
	mov	DWORD PTR yy$8[rsp], eax
$LN25@stbi_write:
	cmp	DWORD PTR yy$8[rsp], 8
	jge	$LN24@stbi_write
; Line 1560
	mov	DWORD PTR xx$9[rsp], 0
	jmp	SHORT $LN28@stbi_write
$LN26@stbi_write:
	mov	eax, DWORD PTR xx$9[rsp]
	inc	eax
	mov	DWORD PTR xx$9[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN28@stbi_write:
	cmp	DWORD PTR xx$9[rsp], 8
	jge	$LN27@stbi_write
; Line 1561
	imul	eax, DWORD PTR yy$8[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR xx$9[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR j$7[rsp], eax
; Line 1562
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR U$37[rsp+rax*4]
	addss	xmm0, DWORD PTR U$37[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subU$31[rsp+rax*4], xmm0
; Line 1563
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR V$38[rsp+rax*4]
	addss	xmm0, DWORD PTR V$38[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subV$32[rsp+rax*4], xmm0
; Line 1564
	jmp	$LN26@stbi_write
$LN27@stbi_write:
; Line 1565
	jmp	$LN23@stbi_write
$LN24@stbi_write:
; Line 1566
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subU$31[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1567
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subV$32[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1569
	jmp	$LN14@stbi_write
$LN15@stbi_write:
; Line 1570
	jmp	$LN11@stbi_write
$LN12@stbi_write:
; Line 1571
	jmp	$LN44@stbi_write
$LN43@stbi_write:
; Line 1572
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN31@stbi_write
$LN29@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	mov	DWORD PTR y$2[rsp], eax
$LN31@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN30@stbi_write
; Line 1573
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN32@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	mov	DWORD PTR x$3[rsp], eax
$LN34@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN33@stbi_write
; Line 1575
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN37@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN37@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN36@stbi_write
; Line 1577
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN76@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv573[rsp], eax
	jmp	SHORT $LN77@stbi_write
$LN76@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv573[rsp], eax
$LN77@stbi_write:
	mov	eax, DWORD PTR tv573[rsp]
	mov	DWORD PTR clamped_row$23[rsp], eax
; Line 1578
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN78@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv577[rsp], eax
	jmp	SHORT $LN79@stbi_write
$LN78@stbi_write:
	mov	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv577[rsp], eax
$LN79@stbi_write:
	mov	eax, DWORD PTR tv577[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$28[rsp], eax
; Line 1579
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN40@stbi_write
$LN38@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN40@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN39@stbi_write
; Line 1581
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN80@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv586[rsp], eax
	jmp	SHORT $LN81@stbi_write
$LN80@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv586[rsp], eax
$LN81@stbi_write:
	mov	eax, DWORD PTR tv586[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$28[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$18[rsp], eax
; Line 1582
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$19[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$20[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$21[rsp], xmm0
; Line 1583
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$20[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$33[rsp+rax*4], xmm0
; Line 1584
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$34[rsp+rax*4], xmm0
; Line 1585
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$21[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$35[rsp+rax*4], xmm0
; Line 1586
	jmp	$LN38@stbi_write
$LN39@stbi_write:
; Line 1587
	jmp	$LN35@stbi_write
$LN36@stbi_write:
; Line 1589
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR Y$33[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1590
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR U$34[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1591
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR V$35[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1592
	jmp	$LN32@stbi_write
$LN33@stbi_write:
; Line 1593
	jmp	$LN29@stbi_write
$LN30@stbi_write:
$LN44@stbi_write:
; Line 1597
	lea	r9, OFFSET FLAT:?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1601
	mov	dl, 255					; 000000ffH
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1602
	mov	dl, 217					; 000000d9H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1604
	mov	eax, 1
$LN1@stbi_write:
; Line 1605
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 5464				; 00001558H
	ret	0
?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ENDP ; stbi_write_jpg_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dataOff$ = 64
i$ = 68
end0pos$ = 72
nrzeroes$1 = 76
y$ = 80
x$ = 84
j$ = 88
v$2 = 92
nrmarker$3 = 96
EOB$ = 100
tv224 = 104
diff$ = 108
bits$4 = 112
M16zeroes$ = 116
bits$5 = 120
n$ = 124
startpos$6 = 128
lng$7 = 132
tv195 = 136
DU$ = 144
__$ArrayPad$ = 400
s$ = 448
bitBuf$ = 456
bitCnt$ = 464
CDU$ = 472
du_stride$ = 480
fdtbl$ = 488
DC$ = 496
HTDC$ = 504
HTAC$ = 512
?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z PROC ; stbiw__jpg_processDU
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1328
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1329
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp+2], ax
; Line 1330
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp+2], ax
; Line 1335
	mov	DWORD PTR dataOff$[rsp], 0
	mov	eax, DWORD PTR du_stride$[rsp]
	shl	eax, 3
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN4@stbiw__jpg
$LN2@stbiw__jpg:
	mov	eax, DWORD PTR du_stride$[rsp]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dataOff$[rsp], eax
$LN4@stbiw__jpg:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR dataOff$[rsp], eax
	jge	$LN3@stbiw__jpg
; Line 1336
	mov	eax, DWORD PTR dataOff$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, 6
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, 5
	movsxd	rdx, edx
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [r8+rdx*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, 4
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR dataOff$[rsp]
	add	r9d, 3
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, 2
	movsxd	r10, r10d
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	r11d, DWORD PTR dataOff$[rsp]
	inc	r11d
	movsxd	r11, r11d
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rbx+r11*4]
	movsxd	r11, DWORD PTR dataOff$[rsp]
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [rdi+r11*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], r8
	mov	r8, r10
	mov	rdx, rbx
	mov	rcx, rdi
	call	?stbiw__jpg_DCT@@YAXPEAM0000000@Z	; stbiw__jpg_DCT
; Line 1337
	jmp	$LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1339
	mov	DWORD PTR dataOff$[rsp], 0
	jmp	SHORT $LN7@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR dataOff$[rsp]
	inc	eax
	mov	DWORD PTR dataOff$[rsp], eax
$LN7@stbiw__jpg:
	cmp	DWORD PTR dataOff$[rsp], 8
	jge	$LN6@stbiw__jpg
; Line 1340
	imul	eax, DWORD PTR du_stride$[rsp], 7
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	imul	ecx, DWORD PTR du_stride$[rsp], 6
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	imul	edx, DWORD PTR du_stride$[rsp], 5
	mov	ebx, DWORD PTR dataOff$[rsp]
	add	ebx, edx
	mov	edx, ebx
	movsxd	rdx, edx
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [rbx+rdx*4]
	mov	ebx, DWORD PTR dataOff$[rsp]
	mov	edi, DWORD PTR du_stride$[rsp]
	lea	ebx, DWORD PTR [rbx+rdi*4]
	movsxd	rbx, ebx
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rdi+rbx*4]
	imul	edi, DWORD PTR du_stride$[rsp], 3
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, edi
	mov	edi, r8d
	movsxd	rdi, edi
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [r8+rdi*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	mov	r9d, DWORD PTR du_stride$[rsp]
	lea	r8d, DWORD PTR [r8+r9*2]
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR du_stride$[rsp]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, r9d
	mov	r9d, r10d
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	QWORD PTR tv195[rsp], r9
	movsxd	r10, DWORD PTR dataOff$[rsp]
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], rbx
	mov	r9, rdi
	mov	rax, QWORD PTR tv195[rsp]
	mov	rdx, rax
	mov	rcx, r10
	call	?stbiw__jpg_DCT@@YAXPEAM0000000@Z	; stbiw__jpg_DCT
; Line 1342
	jmp	$LN5@stbiw__jpg
$LN6@stbiw__jpg:
; Line 1344
	mov	DWORD PTR y$[rsp], 0
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stbiw__jpg
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN10@stbiw__jpg:
	cmp	DWORD PTR y$[rsp], 8
	jge	$LN9@stbiw__jpg
; Line 1345
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN13@stbiw__jpg
$LN11@stbiw__jpg:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbiw__jpg:
	cmp	DWORD PTR x$[rsp], 8
	jge	$LN12@stbiw__jpg
; Line 1347
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR du_stride$[rsp]
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 1348
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR CDU$[rsp]
	mov	rbx, QWORD PTR fdtbl$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	mulss	xmm0, DWORD PTR [rbx+rcx*4]
	movss	DWORD PTR v$2[rsp], xmm0
; Line 1351
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v$2[rsp]
	jbe	SHORT $LN32@stbiw__jpg
	movss	xmm0, DWORD PTR v$2[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
	jmp	SHORT $LN33@stbiw__jpg
$LN32@stbiw__jpg:
	movss	xmm0, DWORD PTR v$2[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
$LN33@stbiw__jpg:
	cvttss2si eax, DWORD PTR tv224[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	lea	rdx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR DU$[rsp+rcx*4], eax
; Line 1352
	jmp	$LN11@stbiw__jpg
$LN12@stbiw__jpg:
; Line 1353
	jmp	$LN8@stbiw__jpg
$LN9@stbiw__jpg:
; Line 1356
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR DC$[rsp]
	mov	eax, DWORD PTR DU$[rsp+rax]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 1357
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN26@stbiw__jpg
; Line 1358
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTDC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1359
	jmp	SHORT $LN27@stbiw__jpg
$LN26@stbiw__jpg:
; Line 1361
	lea	rdx, QWORD PTR bits$4[rsp]
	mov	ecx, DWORD PTR diff$[rsp]
	call	?stbiw__jpg_calcBits@@YAXHQEAG@Z	; stbiw__jpg_calcBits
; Line 1362
	mov	eax, 2
	imul	rax, rax, 1
	movzx	eax, WORD PTR bits$4[rsp+rax]
	mov	rcx, QWORD PTR HTDC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1363
	lea	r9, QWORD PTR bits$4[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
$LN27@stbiw__jpg:
; Line 1366
	mov	DWORD PTR end0pos$[rsp], 63		; 0000003fH
; Line 1367
	jmp	SHORT $LN16@stbiw__jpg
$LN14@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	dec	eax
	mov	DWORD PTR end0pos$[rsp], eax
$LN16@stbiw__jpg:
	cmp	DWORD PTR end0pos$[rsp], 0
	jle	SHORT $LN15@stbiw__jpg
	movsxd	rax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN15@stbiw__jpg
; Line 1368
	jmp	SHORT $LN14@stbiw__jpg
$LN15@stbiw__jpg:
; Line 1370
	cmp	DWORD PTR end0pos$[rsp], 0
	jne	SHORT $LN28@stbiw__jpg
; Line 1371
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1372
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
	jmp	$LN1@stbiw__jpg
$LN28@stbiw__jpg:
; Line 1374
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN19@stbiw__jpg
$LN17@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	$LN18@stbiw__jpg
; Line 1375
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR startpos$6[rsp], eax
; Line 1378
	jmp	SHORT $LN22@stbiw__jpg
$LN20@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbiw__jpg:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN21@stbiw__jpg
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN21@stbiw__jpg
; Line 1379
	jmp	SHORT $LN20@stbiw__jpg
$LN21@stbiw__jpg:
; Line 1380
	mov	eax, DWORD PTR startpos$6[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nrzeroes$1[rsp], eax
; Line 1381
	cmp	DWORD PTR nrzeroes$1[rsp], 16
	jl	SHORT $LN29@stbiw__jpg
; Line 1382
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	sar	eax, 4
	mov	DWORD PTR lng$7[rsp], eax
; Line 1384
	mov	DWORD PTR nrmarker$3[rsp], 1
	jmp	SHORT $LN25@stbiw__jpg
$LN23@stbiw__jpg:
	mov	eax, DWORD PTR nrmarker$3[rsp]
	inc	eax
	mov	DWORD PTR nrmarker$3[rsp], eax
$LN25@stbiw__jpg:
	mov	eax, DWORD PTR lng$7[rsp]
	cmp	DWORD PTR nrmarker$3[rsp], eax
	jg	SHORT $LN24@stbiw__jpg
; Line 1385
	lea	r9, QWORD PTR M16zeroes$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
	jmp	SHORT $LN23@stbiw__jpg
$LN24@stbiw__jpg:
; Line 1386
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	and	eax, 15
	mov	DWORD PTR nrzeroes$1[rsp], eax
$LN29@stbiw__jpg:
; Line 1388
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rdx, QWORD PTR bits$5[rsp]
	mov	ecx, DWORD PTR DU$[rsp+rax*4]
	call	?stbiw__jpg_calcBits@@YAXHQEAG@Z	; stbiw__jpg_calcBits
; Line 1389
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	shl	eax, 4
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	ecx, WORD PTR bits$5[rsp+rcx]
	add	eax, ecx
	cdqe
	mov	rcx, QWORD PTR HTAC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1390
	lea	r9, QWORD PTR bits$5[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1391
	jmp	$LN17@stbiw__jpg
$LN18@stbiw__jpg:
; Line 1392
	cmp	DWORD PTR end0pos$[rsp], 63		; 0000003fH
	je	SHORT $LN30@stbiw__jpg
; Line 1393
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
$LN30@stbiw__jpg:
; Line 1395
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
$LN1@stbiw__jpg:
; Line 1396
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rbx
	ret	0
?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ENDP ; stbiw__jpg_processDU
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp1$ = 0
tv66 = 4
tv69 = 8
tv140 = 12
val$ = 32
bits$ = 40
?stbiw__jpg_calcBits@@YAXHQEAG@Z PROC			; stbiw__jpg_calcBits
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1319
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN5@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	neg	eax
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN6@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN6@stbiw__jpg:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tmp1$[rsp], eax
; Line 1320
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN7@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN8@stbiw__jpg
$LN7@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR val$[rsp], eax
; Line 1321
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN2@stbiw__jpg:
; Line 1322
	mov	eax, DWORD PTR tmp1$[rsp]
	sar	eax, 1
	mov	DWORD PTR tmp1$[rsp], eax
	cmp	DWORD PTR tmp1$[rsp], 0
	je	SHORT $LN3@stbiw__jpg
; Line 1323
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	inc	ax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1324
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1325
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 1
	mov	DWORD PTR tv140[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv140[rsp]
	shl	eax, cl
	dec	eax
	mov	ecx, DWORD PTR val$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1326
	add	rsp, 24
	ret	0
?stbiw__jpg_calcBits@@YAXHQEAG@Z ENDP			; stbiw__jpg_calcBits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp10$ = 0
tmp12$ = 4
tmp11$ = 8
d0$ = 12
d2$ = 16
d4$ = 20
d6$ = 24
tmp13$ = 28
tmp7$ = 32
d7$ = 36
d1$ = 40
d5$ = 44
d3$ = 48
tmp0$ = 52
tmp3$ = 56
tmp1$ = 60
tmp2$ = 64
z1$ = 68
tmp5$ = 72
tmp6$ = 76
z5$ = 80
z3$ = 84
z13$ = 88
z2$ = 92
z11$ = 96
z4$ = 100
tmp4$ = 104
d0p$ = 128
d1p$ = 136
d2p$ = 144
d3p$ = 152
d4p$ = 160
d5p$ = 168
d6p$ = 176
d7p$ = 184
?stbiw__jpg_DCT@@YAXPEAM0000000@Z PROC			; stbiw__jpg_DCT
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1270
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1271
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d0$[rsp], xmm0
	mov	rax, QWORD PTR d1p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d1$[rsp], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d2$[rsp], xmm0
	mov	rax, QWORD PTR d3p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d3$[rsp], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d4$[rsp], xmm0
	mov	rax, QWORD PTR d5p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d5$[rsp], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d6$[rsp], xmm0
	mov	rax, QWORD PTR d7p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d7$[rsp], xmm0
; Line 1274
	movss	xmm0, DWORD PTR d0$[rsp]
	addss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp0$[rsp], xmm0
; Line 1275
	movss	xmm0, DWORD PTR d0$[rsp]
	subss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp7$[rsp], xmm0
; Line 1276
	movss	xmm0, DWORD PTR d1$[rsp]
	addss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp1$[rsp], xmm0
; Line 1277
	movss	xmm0, DWORD PTR d1$[rsp]
	subss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp6$[rsp], xmm0
; Line 1278
	movss	xmm0, DWORD PTR d2$[rsp]
	addss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp2$[rsp], xmm0
; Line 1279
	movss	xmm0, DWORD PTR d2$[rsp]
	subss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp5$[rsp], xmm0
; Line 1280
	movss	xmm0, DWORD PTR d3$[rsp]
	addss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp3$[rsp], xmm0
; Line 1281
	movss	xmm0, DWORD PTR d3$[rsp]
	subss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp4$[rsp], xmm0
; Line 1284
	movss	xmm0, DWORD PTR tmp0$[rsp]
	addss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1285
	movss	xmm0, DWORD PTR tmp0$[rsp]
	subss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp13$[rsp], xmm0
; Line 1286
	movss	xmm0, DWORD PTR tmp1$[rsp]
	addss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1287
	movss	xmm0, DWORD PTR tmp1$[rsp]
	subss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1289
	movss	xmm0, DWORD PTR tmp10$[rsp]
	addss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d0$[rsp], xmm0
; Line 1290
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d4$[rsp], xmm0
; Line 1292
	movss	xmm0, DWORD PTR tmp12$[rsp]
	addss	xmm0, DWORD PTR tmp13$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z1$[rsp], xmm0
; Line 1293
	movss	xmm0, DWORD PTR tmp13$[rsp]
	addss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d2$[rsp], xmm0
; Line 1294
	movss	xmm0, DWORD PTR tmp13$[rsp]
	subss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d6$[rsp], xmm0
; Line 1297
	movss	xmm0, DWORD PTR tmp4$[rsp]
	addss	xmm0, DWORD PTR tmp5$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1298
	movss	xmm0, DWORD PTR tmp5$[rsp]
	addss	xmm0, DWORD PTR tmp6$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1299
	movss	xmm0, DWORD PTR tmp6$[rsp]
	addss	xmm0, DWORD PTR tmp7$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1302
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3ec3ef15
	movss	DWORD PTR z5$[rsp], xmm0
; Line 1303
	movss	xmm0, DWORD PTR tmp10$[rsp]
	mulss	xmm0, DWORD PTR __real@3f0a8bd4
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z2$[rsp], xmm0
; Line 1304
	movss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3fa73d75
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z4$[rsp], xmm0
; Line 1305
	movss	xmm0, DWORD PTR tmp11$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z3$[rsp], xmm0
; Line 1307
	movss	xmm0, DWORD PTR tmp7$[rsp]
	addss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z11$[rsp], xmm0
; Line 1308
	movss	xmm0, DWORD PTR tmp7$[rsp]
	subss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z13$[rsp], xmm0
; Line 1310
	movss	xmm0, DWORD PTR z13$[rsp]
	addss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d5p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1311
	movss	xmm0, DWORD PTR z13$[rsp]
	subss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d3p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1312
	movss	xmm0, DWORD PTR z11$[rsp]
	addss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d1p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1313
	movss	xmm0, DWORD PTR z11$[rsp]
	subss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d7p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1315
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR d0$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR d2$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1316
	add	rsp, 120				; 00000078H
	ret	0
?stbiw__jpg_DCT@@YAXPEAM0000000@Z ENDP			; stbiw__jpg_DCT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
bitCnt$ = 36
bitBuf$ = 40
s$ = 64
bitBufP$ = 72
bitCntP$ = 80
bs$ = 88
?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z PROC ; stbiw__jpg_writeBits
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1253
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1254
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitBuf$[rsp], eax
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1255
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1256
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 24
	sub	ecx, DWORD PTR bitCnt$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitBuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitBuf$[rsp], eax
$LN2@stbiw__jpg:
; Line 1257
	cmp	DWORD PTR bitCnt$[rsp], 8
	jl	SHORT $LN3@stbiw__jpg
; Line 1258
	mov	eax, DWORD PTR bitBuf$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c$1[rsp], al
; Line 1259
	movzx	edx, BYTE PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1260
	movzx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@stbiw__jpg
; Line 1261
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
$LN4@stbiw__jpg:
; Line 1263
	mov	eax, DWORD PTR bitBuf$[rsp]
	shl	eax, 8
	mov	DWORD PTR bitBuf$[rsp], eax
; Line 1264
	mov	eax, DWORD PTR bitCnt$[rsp]
	sub	eax, 8
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1265
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1266
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	ecx, DWORD PTR bitBuf$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1267
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1268
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ENDP ; stbiw__jpg_writeBits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$ = 64
filter_type$1 = 72
zlen$ = 76
j$ = 80
force_filter$ = 84
i$2 = 88
est$3 = 92
best_filter$4 = 96
line_buffer$ = 104
filt$ = 112
best_filter_val$5 = 120
out$ = 128
zlib$ = 136
ctype$ = 144
sig$ = 168
__$ArrayPad$ = 176
pixels$ = 208
stride_bytes$ = 216
x$ = 224
y$ = 232
n$ = 240
out_len$ = 248
stbi_write_png_to_mem PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1129
$LN23:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1130
	mov	eax, DWORD PTR stbi_write_force_png_filter
	mov	DWORD PTR force_filter$[rsp], eax
; Line 1131
	mov	DWORD PTR ctype$[rsp], -1
	mov	DWORD PTR ctype$[rsp+4], 0
	mov	DWORD PTR ctype$[rsp+8], 4
	mov	DWORD PTR ctype$[rsp+12], 2
	mov	DWORD PTR ctype$[rsp+16], 6
; Line 1132
	mov	BYTE PTR sig$[rsp], 137			; 00000089H
	mov	BYTE PTR sig$[rsp+1], 80		; 00000050H
	mov	BYTE PTR sig$[rsp+2], 78		; 0000004eH
	mov	BYTE PTR sig$[rsp+3], 71		; 00000047H
	mov	BYTE PTR sig$[rsp+4], 13
	mov	BYTE PTR sig$[rsp+5], 10
	mov	BYTE PTR sig$[rsp+6], 26
	mov	BYTE PTR sig$[rsp+7], 10
; Line 1137
	cmp	DWORD PTR stride_bytes$[rsp], 0
	jne	SHORT $LN11@stbi_write
; Line 1138
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR stride_bytes$[rsp], eax
$LN11@stbi_write:
; Line 1140
	cmp	DWORD PTR force_filter$[rsp], 5
	jl	SHORT $LN12@stbi_write
; Line 1141
	mov	DWORD PTR force_filter$[rsp], -1
$LN12@stbi_write:
; Line 1144
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR filt$[rsp], rax
	cmp	QWORD PTR filt$[rsp], 0
	jne	SHORT $LN13@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN13@stbi_write:
; Line 1145
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR line_buffer$[rsp], rax
	cmp	QWORD PTR line_buffer$[rsp], 0
	jne	SHORT $LN14@stbi_write
	mov	rcx, QWORD PTR filt$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN14@stbi_write:
; Line 1146
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi_write
; Line 1148
	cmp	DWORD PTR force_filter$[rsp], -1
	jle	SHORT $LN15@stbi_write
; Line 1149
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
; Line 1150
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1151
	jmp	$LN16@stbi_write
$LN15@stbi_write:
; Line 1152
	mov	DWORD PTR best_filter$4[rsp], 0
	mov	DWORD PTR best_filter_val$5[rsp], 2147483647 ; 7fffffffH
; Line 1153
	mov	DWORD PTR filter_type$1[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR filter_type$1[rsp]
	inc	eax
	mov	DWORD PTR filter_type$1[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR filter_type$1[rsp], 5
	jge	$LN6@stbi_write
; Line 1154
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1157
	mov	DWORD PTR est$3[rsp], 0
; Line 1158
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN9@stbi_write
; Line 1159
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	abs
	mov	ecx, DWORD PTR est$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR est$3[rsp], eax
; Line 1160
	jmp	SHORT $LN8@stbi_write
$LN9@stbi_write:
; Line 1161
	mov	eax, DWORD PTR best_filter_val$5[rsp]
	cmp	DWORD PTR est$3[rsp], eax
	jge	SHORT $LN17@stbi_write
; Line 1162
	mov	eax, DWORD PTR est$3[rsp]
	mov	DWORD PTR best_filter_val$5[rsp], eax
; Line 1163
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR best_filter$4[rsp], eax
$LN17@stbi_write:
; Line 1165
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1166
	mov	eax, DWORD PTR best_filter$4[rsp]
	cmp	DWORD PTR filter_type$1[rsp], eax
	je	SHORT $LN18@stbi_write
; Line 1167
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1168
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
$LN18@stbi_write:
$LN16@stbi_write:
; Line 1172
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR filt$[rsp]
	movzx	edx, BYTE PTR filter_type$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 1173
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR n$[rsp]
	inc	ecx
	mov	edx, DWORD PTR j$[rsp]
	imul	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR filt$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	mov	r8, rax
	mov	rdx, QWORD PTR line_buffer$[rsp]
	call	memmove
; Line 1174
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1175
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	QWORD PTR __imp_free
; Line 1176
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR stbi_write_png_compression_level
	lea	r8, QWORD PTR zlen$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR filt$[rsp]
	call	stbi_zlib_compress
	mov	QWORD PTR zlib$[rsp], rax
; Line 1177
	mov	rcx, QWORD PTR filt$[rsp]
	call	QWORD PTR __imp_free
; Line 1178
	cmp	QWORD PTR zlib$[rsp], 0
	jne	SHORT $LN19@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN19@stbi_write:
; Line 1181
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR out$[rsp], rax
; Line 1182
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN20@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN20@stbi_write:
; Line 1183
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1185
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
; Line 1186
	mov	r8d, 8
	lea	rdx, QWORD PTR sig$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 8
	mov	QWORD PTR o$[rsp], rax
; Line 1187
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 13
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1188
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG103133
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG103134
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG103135
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG103136
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1189
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1191
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 8
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1192
	movsxd	rax, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR ctype$[rsp+rax*4]
	and	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1193
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1194
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1195
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1196
	mov	edx, 13
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1198
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG103137
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG103138
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG103139
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG103140
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1200
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR zlib$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
; Line 1201
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
; Line 1202
	mov	rcx, QWORD PTR zlib$[rsp]
	call	QWORD PTR __imp_free
; Line 1203
	mov	edx, DWORD PTR zlen$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1205
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1206
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG103141
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG103142
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG103143
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG103144
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1207
	xor	edx, edx
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1209
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR o$[rsp], rax
	je	SHORT $LN22@stbi_write
	mov	r8d, 1209				; 000004b9H
	lea	rdx, OFFSET FLAT:$SG103145
	lea	rcx, OFFSET FLAT:$SG103146
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN22@stbi_write:
; Line 1211
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi_write:
; Line 1212
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
stbi_write_png_to_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 40
signed_stride$ = 48
tv87 = 52
tv188 = 56
type$ = 60
tv72 = 64
tv78 = 68
tv161 = 72
tv275 = 76
tv256 = 80
tv307 = 84
tv65 = 88
mymap$ = 96
pixels$ = 128
stride_bytes$ = 136
width$ = 144
height$ = 152
y$ = 160
n$ = 168
filter_type$ = 176
line_buffer$ = 184
?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z PROC	; stbiw__encode_png_line
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1093
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1096
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN41@stbiw__enc
	lea	rax, OFFSET FLAT:?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN42@stbiw__enc
$LN41@stbiw__enc:
	lea	rax, OFFSET FLAT:?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
	mov	QWORD PTR tv65[rsp], rax
$LN42@stbiw__enc:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR mymap$[rsp], rax
; Line 1098
	movsxd	rax, DWORD PTR filter_type$[rsp]
	mov	rcx, QWORD PTR mymap$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR type$[rsp], eax
; Line 1099
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN43@stbiw__enc
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN44@stbiw__enc
$LN43@stbiw__enc:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN44@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	imul	eax, DWORD PTR tv72[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
; Line 1100
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN45@stbiw__enc
	mov	eax, DWORD PTR stride_bytes$[rsp]
	neg	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN46@stbiw__enc
$LN45@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN46@stbiw__enc:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR signed_stride$[rsp], eax
; Line 1102
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN27@stbiw__enc
; Line 1103
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	memcpy
; Line 1104
	jmp	$LN1@stbiw__enc
$LN27@stbiw__enc:
; Line 1108
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__enc
$LN2@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__enc:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbiw__enc
; Line 1109
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	dec	eax
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 5
	ja	$LN5@stbiw__enc
	movsxd	rax, DWORD PTR tv87[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN48@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN28@stbiw__enc:
; Line 1110
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN29@stbiw__enc:
; Line 1111
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN30@stbiw__enc:
; Line 1112
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN31@stbiw__enc:
; Line 1113
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv161[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv161[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN32@stbiw__enc:
; Line 1114
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN33@stbiw__enc:
; Line 1115
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbiw__enc:
; Line 1117
	jmp	$LN2@stbiw__enc
$LN3@stbiw__enc:
; Line 1118
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	dec	eax
	mov	DWORD PTR tv188[rsp], eax
	cmp	DWORD PTR tv188[rsp], 5
	ja	$LN7@stbiw__enc
	movsxd	rax, DWORD PTR tv188[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN47@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN34@stbiw__enc:
; Line 1119
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN11@stbiw__enc
$LN9@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN11@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN10@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN9@stbiw__enc
$LN10@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN35@stbiw__enc:
; Line 1120
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN14@stbiw__enc
$LN12@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN14@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN13@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbiw__enc
$LN13@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN36@stbiw__enc:
; Line 1121
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN17@stbiw__enc
$LN15@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN16@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbiw__enc
$LN16@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN37@stbiw__enc:
; Line 1122
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN20@stbiw__enc
$LN18@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN19@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv256[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR n$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR n$[rsp]
	mov	r9d, DWORD PTR i$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR z$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv275[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv275[rsp]
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv256[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN18@stbiw__enc
$LN19@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN38@stbiw__enc:
; Line 1123
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN23@stbiw__enc
$LN21@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN23@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN22@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN21@stbiw__enc
$LN22@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN39@stbiw__enc:
; Line 1124
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN26@stbiw__enc
$LN24@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN25@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv307[rsp], eax
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv307[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbiw__enc
$LN25@stbiw__enc:
$LN7@stbiw__enc:
$LN1@stbiw__enc:
; Line 1126
	add	rsp, 120				; 00000078H
	ret	0
	npad	1
$LN48@stbiw__enc:
	DD	$LN28@stbiw__enc
	DD	$LN29@stbiw__enc
	DD	$LN30@stbiw__enc
	DD	$LN31@stbiw__enc
	DD	$LN32@stbiw__enc
	DD	$LN33@stbiw__enc
$LN47@stbiw__enc:
	DD	$LN34@stbiw__enc
	DD	$LN35@stbiw__enc
	DD	$LN36@stbiw__enc
	DD	$LN37@stbiw__enc
	DD	$LN38@stbiw__enc
	DD	$LN39@stbiw__enc
?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ENDP	; stbiw__encode_png_line
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
?stbiw__paeth@@YAEHHH@Z PROC				; stbiw__paeth
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1084
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1085
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 1086
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN2@stbiw__pae:
; Line 1087
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbiw__pae
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN3@stbiw__pae:
; Line 1088
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 255				; 000000ffH
$LN1@stbiw__pae:
; Line 1089
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__paeth@@YAEHHH@Z ENDP				; stbiw__paeth
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
crc$ = 32
data$ = 64
len$ = 72
?stbiw__wpcrc@@YAXPEAPEAEH@Z PROC			; stbiw__wpcrc
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1078
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1079
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 4
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rcx
	mov	rcx, rdx
	sub	rcx, 4
	mov	edx, eax
	call	?stbiw__crc32@@YAIPEAEH@Z		; stbiw__crc32
	mov	DWORD PTR crc$[rsp], eax
; Line 1080
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1081
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__wpcrc@@YAXPEAPEAEH@Z ENDP			; stbiw__wpcrc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
crc$ = 4
buffer$ = 32
len$ = 40
?stbiw__crc32@@YAIPEAEH@Z PROC				; stbiw__crc32
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1025
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1065
	mov	DWORD PTR crc$[rsp], -1			; ffffffffH
; Line 1067
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__crc
$LN2@stbiw__crc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__crc:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__crc
; Line 1068
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR crc$[rsp]
	and	edx, 255				; 000000ffH
	xor	ecx, edx
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	DWORD PTR crc$[rsp], eax
	jmp	SHORT $LN2@stbiw__crc
$LN3@stbiw__crc:
; Line 1069
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
; Line 1071
	add	rsp, 24
	ret	0
?stbiw__crc32@@YAIPEAEH@Z ENDP				; stbiw__crc32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitcount$ = 32
out$ = 40
bitbuf$ = 48
j$ = 52
i$ = 56
h$1 = 60
tv768 = 64
blocklen$2 = 68
hash_table$ = 72
best$3 = 80
s1$4 = 84
s2$5 = 88
hlist$6 = 96
n$7 = 104
d$8 = 108
blocklen$9 = 112
tv190 = 116
d$10 = 120
tv313 = 124
bestloc$11 = 128
tv365 = 136
tv370 = 140
tv368 = 144
tv386 = 148
tv388 = 152
tv393 = 156
tv391 = 160
tv409 = 164
tv411 = 168
tv416 = 172
tv414 = 176
tv430 = 180
tv432 = 184
tv437 = 188
tv435 = 192
tv480 = 196
tv482 = 200
tv487 = 204
tv485 = 208
tv530 = 212
tv532 = 216
tv537 = 220
tv535 = 224
tv554 = 228
tv556 = 232
tv561 = 236
tv559 = 240
tv586 = 244
tv588 = 248
tv593 = 252
tv591 = 256
tv610 = 260
tv612 = 264
tv617 = 268
tv615 = 272
tv629 = 276
tv631 = 280
tv636 = 284
tv634 = 288
tv647 = 292
tv649 = 296
tv654 = 300
tv652 = 304
tv665 = 308
tv667 = 312
tv672 = 316
tv670 = 320
tv683 = 324
tv685 = 328
tv690 = 332
tv688 = 336
tv1461 = 340
tv722 = 344
tv1229 = 348
tv1234 = 352
e$12 = 356
tv363 = 360
tv444 = 368
tv445 = 376
tv698 = 384
tv700 = 392
tv84 = 400
tv143 = 408
tv206 = 416
tv237 = 424
tv271 = 432
tv331 = 440
tv446 = 448
tv568 = 456
tv624 = 464
tv702 = 472
tv725 = 480
tv752 = 488
tv782 = 496
tv811 = 504
tv841 = 512
tv871 = 520
tv899 = 528
tv935 = 536
tv965 = 544
tv994 = 552
tv1024 = 560
data$ = 592
data_len$ = 600
out_len$ = 608
quality$ = 616
stbi_zlib_compress PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 896
$LN100:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 584				; 00000248H
; Line 905
	mov	DWORD PTR bitbuf$[rsp], 0
; Line 906
	mov	DWORD PTR bitcount$[rsp], 0
; Line 907
	mov	QWORD PTR out$[rsp], 0
; Line 908
	mov	ecx, 131072				; 00020000H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR hash_table$[rsp], rax
; Line 909
	cmp	QWORD PTR hash_table$[rsp], 0
	jne	SHORT $LN35@stbi_zlib_
; Line 910
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN35@stbi_zlib_:
; Line 911
	cmp	DWORD PTR quality$[rsp], 5
	jge	SHORT $LN36@stbi_zlib_
	mov	DWORD PTR quality$[rsp], 5
$LN36@stbi_zlib_:
; Line 913
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN50@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN50@stbi_zlib_
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN51@stbi_zlib_
$LN50@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv84[rsp], rax
$LN51@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 120			; 00000078H
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 914
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN52@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN52@stbi_zlib_
	mov	QWORD PTR tv143[rsp], 0
	jmp	SHORT $LN53@stbi_zlib_
$LN52@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv143[rsp], rax
$LN53@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 94			; 0000005eH
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 915
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1229[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1229[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 916
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1234[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1234[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 2
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 918
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_zlib_
$LN2@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN3@stbi_zlib_
; Line 919
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stbi_zlib_
$LN3@stbi_zlib_:
; Line 921
	mov	DWORD PTR i$[rsp], 0
$LN5@stbi_zlib_:
; Line 922
	mov	eax, DWORD PTR data_len$[rsp]
	sub	eax, 3
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi_zlib_
; Line 924
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?stbiw__zhash@@YAIPEAE@Z		; stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
	mov	DWORD PTR best$3[rsp], 3
; Line 925
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 926
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 927
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN54@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN55@stbi_zlib_
$LN54@stbi_zlib_:
	mov	DWORD PTR tv190[rsp], 0
$LN55@stbi_zlib_:
	mov	eax, DWORD PTR tv190[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 928
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi_zlib_
$LN7@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi_zlib_
; Line 929
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32768				; 00008000H
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN37@stbi_zlib_
; Line 930
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv206[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv206[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?stbiw__zlib_countm@@YAIPEAE0H@Z	; stbiw__zlib_countm
	mov	DWORD PTR d$10[rsp], eax
; Line 931
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR d$10[rsp], eax
	jl	SHORT $LN38@stbi_zlib_
	mov	eax, DWORD PTR d$10[rsp]
	mov	DWORD PTR best$3[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR bestloc$11[rsp], rax
$LN38@stbi_zlib_:
$LN37@stbi_zlib_:
; Line 933
	jmp	$LN7@stbi_zlib_
$LN8@stbi_zlib_:
; Line 935
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN39@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	shl	edx, 1
	cmp	DWORD PTR [rax+rcx-8], edx
	jne	SHORT $LN39@stbi_zlib_
; Line 936
	movsxd	rax, DWORD PTR quality$[rsp]
	shl	rax, 3
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR quality$[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	QWORD PTR tv237[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR tv237[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	memmove
; Line 937
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN39@stbi_zlib_:
; Line 939
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN56@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN56@stbi_zlib_
	mov	QWORD PTR tv271[rsp], 0
	jmp	SHORT $LN57@stbi_zlib_
$LN56@stbi_zlib_:
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 8
	mov	edx, 1
	mov	rcx, rax
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv271[rsp], rax
$LN57@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	r8d, 4
	imul	r8, r8, 1
	movsxd	rdx, DWORD PTR [rdx+r8-8]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8]
	mov	QWORD PTR [rcx+rdx*8], rax
	mov	eax, 4
	imul	rax, rax, 1
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 941
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN40@stbi_zlib_
; Line 943
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	rcx, rax
	call	?stbiw__zhash@@YAIPEAE@Z		; stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
; Line 944
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 945
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN58@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv313[rsp], eax
	jmp	SHORT $LN59@stbi_zlib_
$LN58@stbi_zlib_:
	mov	DWORD PTR tv313[rsp], 0
$LN59@stbi_zlib_:
	mov	eax, DWORD PTR tv313[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 946
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN12@stbi_zlib_
$LN10@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN12@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN11@stbi_zlib_
; Line 947
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32767				; 00007fffH
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN41@stbi_zlib_
; Line 948
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv331[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv331[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?stbiw__zlib_countm@@YAIPEAE0H@Z	; stbiw__zlib_countm
	mov	DWORD PTR e$12[rsp], eax
; Line 949
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR e$12[rsp], eax
	jle	SHORT $LN42@stbi_zlib_
; Line 950
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 951
	jmp	SHORT $LN11@stbi_zlib_
$LN42@stbi_zlib_:
$LN41@stbi_zlib_:
; Line 954
	jmp	$LN10@stbi_zlib_
$LN11@stbi_zlib_:
$LN40@stbi_zlib_:
; Line 957
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN43@stbi_zlib_
; Line 958
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR bestloc$11[rsp]
	mov	DWORD PTR d$8[rsp], eax
; Line 959
	cmp	DWORD PTR d$8[rsp], 32767		; 00007fffH
	jg	SHORT $LN60@stbi_zlib_
	cmp	DWORD PTR best$3[rsp], 258		; 00000102H
	jle	SHORT $LN61@stbi_zlib_
$LN60@stbi_zlib_:
	mov	r8d, 959				; 000003bfH
	lea	rdx, OFFSET FLAT:$SG102950
	lea	rcx, OFFSET FLAT:$SG102951
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN61@stbi_zlib_:
; Line 960
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi_zlib_
$LN13@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR best$3[rsp], eax
	jle	SHORT $LN14@stbi_zlib_
	jmp	SHORT $LN13@stbi_zlib_
$LN14@stbi_zlib_:
; Line 961
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 143				; 0000008fH
	jg	$LN66@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 305				; 00000131H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv365[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv363[rsp], eax
	mov	eax, DWORD PTR tv363[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv365[rsp]
	shl	eax, cl
	mov	DWORD PTR tv370[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv368[rsp], eax
	mov	eax, DWORD PTR tv370[rsp]
	mov	ecx, DWORD PTR tv368[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv446[rsp], rax
	jmp	$LN67@stbi_zlib_
$LN66@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 255				; 000000ffH
	jg	$LN64@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 513				; 00000201H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv388[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv386[rsp], eax
	mov	eax, DWORD PTR tv386[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv388[rsp]
	shl	eax, cl
	mov	DWORD PTR tv393[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv391[rsp], eax
	mov	eax, DWORD PTR tv393[rsp]
	mov	ecx, DWORD PTR tv391[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv445[rsp], rax
	jmp	$LN65@stbi_zlib_
$LN64@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 279				; 00000117H
	jg	$LN62@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	edx, 7
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv411[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv409[rsp], eax
	mov	eax, DWORD PTR tv409[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv411[rsp]
	shl	eax, cl
	mov	DWORD PTR tv416[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv414[rsp], eax
	mov	eax, DWORD PTR tv416[rsp]
	mov	ecx, DWORD PTR tv414[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv444[rsp], rax
	jmp	$LN63@stbi_zlib_
$LN62@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 169				; 000000a9H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv432[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv430[rsp], eax
	mov	eax, DWORD PTR tv430[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv432[rsp]
	shl	eax, cl
	mov	DWORD PTR tv437[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv435[rsp], eax
	mov	eax, DWORD PTR tv437[rsp]
	mov	ecx, DWORD PTR tv435[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv444[rsp], rax
$LN63@stbi_zlib_:
	mov	rax, QWORD PTR tv444[rsp]
	mov	QWORD PTR tv445[rsp], rax
$LN65@stbi_zlib_:
	mov	rax, QWORD PTR tv445[rsp]
	mov	QWORD PTR tv446[rsp], rax
$LN67@stbi_zlib_:
; Line 962
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN45@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR best$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN45@stbi_zlib_:
; Line 963
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi_zlib_
$LN16@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR d$8[rsp], eax
	jle	SHORT $LN17@stbi_zlib_
	jmp	SHORT $LN16@stbi_zlib_
$LN17@stbi_zlib_:
; Line 964
	mov	edx, 5
	mov	ecx, DWORD PTR j$[rsp]
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv482[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv480[rsp], eax
	mov	eax, DWORD PTR tv480[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv482[rsp]
	shl	eax, cl
	mov	DWORD PTR tv487[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv485[rsp], eax
	mov	eax, DWORD PTR tv487[rsp]
	mov	ecx, DWORD PTR tv485[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 5
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 965
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN46@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR d$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN46@stbi_zlib_:
; Line 966
	mov	eax, DWORD PTR best$3[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
; Line 967
	jmp	$LN44@stbi_zlib_
$LN43@stbi_zlib_:
; Line 968
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	$LN68@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv532[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv530[rsp], eax
	mov	eax, DWORD PTR tv530[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv532[rsp]
	shl	eax, cl
	mov	DWORD PTR tv537[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv535[rsp], eax
	mov	eax, DWORD PTR tv537[rsp]
	mov	ecx, DWORD PTR tv535[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv568[rsp], rax
	jmp	$LN69@stbi_zlib_
$LN68@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv556[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv554[rsp], eax
	mov	eax, DWORD PTR tv554[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv556[rsp]
	shl	eax, cl
	mov	DWORD PTR tv561[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv559[rsp], eax
	mov	eax, DWORD PTR tv561[rsp]
	mov	ecx, DWORD PTR tv559[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv568[rsp], rax
$LN69@stbi_zlib_:
; Line 969
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN44@stbi_zlib_:
; Line 971
	jmp	$LN5@stbi_zlib_
$LN6@stbi_zlib_:
; Line 973
	jmp	SHORT $LN21@stbi_zlib_
$LN19@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN20@stbi_zlib_
; Line 974
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	$LN70@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv588[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv586[rsp], eax
	mov	eax, DWORD PTR tv586[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv588[rsp]
	shl	eax, cl
	mov	DWORD PTR tv593[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv591[rsp], eax
	mov	eax, DWORD PTR tv593[rsp]
	mov	ecx, DWORD PTR tv591[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv624[rsp], rax
	jmp	$LN71@stbi_zlib_
$LN70@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv612[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv610[rsp], eax
	mov	eax, DWORD PTR tv610[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv612[rsp]
	shl	eax, cl
	mov	DWORD PTR tv617[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv615[rsp], eax
	mov	eax, DWORD PTR tv617[rsp]
	mov	ecx, DWORD PTR tv615[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv624[rsp], rax
$LN71@stbi_zlib_:
	jmp	$LN19@stbi_zlib_
$LN20@stbi_zlib_:
; Line 975
	xor	eax, eax
	test	eax, eax
	je	$LN76@stbi_zlib_
	mov	edx, 8
	mov	ecx, 304				; 00000130H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv631[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv629[rsp], eax
	mov	eax, DWORD PTR tv629[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv631[rsp]
	shl	eax, cl
	mov	DWORD PTR tv636[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv634[rsp], eax
	mov	eax, DWORD PTR tv636[rsp]
	mov	ecx, DWORD PTR tv634[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv702[rsp], rax
	jmp	$LN77@stbi_zlib_
$LN76@stbi_zlib_:
	xor	eax, eax
	test	eax, eax
	je	$LN74@stbi_zlib_
	mov	edx, 9
	mov	ecx, 512				; 00000200H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv649[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv647[rsp], eax
	mov	eax, DWORD PTR tv647[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv649[rsp]
	shl	eax, cl
	mov	DWORD PTR tv654[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv652[rsp], eax
	mov	eax, DWORD PTR tv654[rsp]
	mov	ecx, DWORD PTR tv652[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv700[rsp], rax
	jmp	$LN75@stbi_zlib_
$LN74@stbi_zlib_:
	xor	eax, eax
	cmp	eax, 1
	je	$LN72@stbi_zlib_
	mov	edx, 7
	xor	ecx, ecx
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv667[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv665[rsp], eax
	mov	eax, DWORD PTR tv665[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv667[rsp]
	shl	eax, cl
	mov	DWORD PTR tv672[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv670[rsp], eax
	mov	eax, DWORD PTR tv672[rsp]
	mov	ecx, DWORD PTR tv670[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv698[rsp], rax
	jmp	$LN73@stbi_zlib_
$LN72@stbi_zlib_:
	mov	edx, 8
	mov	ecx, 168				; 000000a8H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv685[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv683[rsp], eax
	mov	eax, DWORD PTR tv683[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv685[rsp]
	shl	eax, cl
	mov	DWORD PTR tv690[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv688[rsp], eax
	mov	eax, DWORD PTR tv690[rsp]
	mov	ecx, DWORD PTR tv688[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv698[rsp], rax
$LN73@stbi_zlib_:
	mov	rax, QWORD PTR tv698[rsp]
	mov	QWORD PTR tv700[rsp], rax
$LN75@stbi_zlib_:
	mov	rax, QWORD PTR tv700[rsp]
	mov	QWORD PTR tv702[rsp], rax
$LN77@stbi_zlib_:
$LN22@stbi_zlib_:
; Line 977
	cmp	DWORD PTR bitcount$[rsp], 0
	je	SHORT $LN23@stbi_zlib_
; Line 978
	mov	eax, DWORD PTR bitcount$[rsp]
	xor	ecx, ecx
	mov	DWORD PTR tv1461[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1461[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN22@stbi_zlib_
$LN23@stbi_zlib_:
; Line 980
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN26@stbi_zlib_
$LN24@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN25@stbi_zlib_
; Line 981
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN78@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, 8
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	DWORD PTR tv722[rsp], 0
	jmp	SHORT $LN79@stbi_zlib_
$LN78@stbi_zlib_:
	mov	DWORD PTR tv722[rsp], 0
$LN79@stbi_zlib_:
	jmp	SHORT $LN24@stbi_zlib_
$LN25@stbi_zlib_:
; Line 982
	mov	rcx, QWORD PTR hash_table$[rsp]
	call	QWORD PTR __imp_free
; Line 985
	mov	eax, 4
	imul	rax, rax, 1
	mov	QWORD PTR tv725[rsp], rax
	mov	ecx, DWORD PTR data_len$[rsp]
	add	ecx, 32766				; 00007ffeH
	mov	eax, ecx
	cdq
	mov	ecx, 32767				; 00007fffH
	idiv	ecx
	imul	eax, eax, 5
	mov	ecx, DWORD PTR data_len$[rsp]
	lea	eax, DWORD PTR [rcx+rax+2]
	mov	rcx, QWORD PTR out$[rsp]
	mov	rdx, QWORD PTR tv725[rsp]
	cmp	DWORD PTR [rcx+rdx-8], eax
	jle	$LN47@stbi_zlib_
; Line 986
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rcx+rax-8], 2
; Line 987
	mov	DWORD PTR j$[rsp], 0
$LN27@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN28@stbi_zlib_
; Line 988
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR blocklen$2[rsp], eax
; Line 989
	cmp	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
	jle	SHORT $LN48@stbi_zlib_
	mov	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
$LN48@stbi_zlib_:
; Line 990
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN80@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN80@stbi_zlib_
	mov	QWORD PTR tv752[rsp], 0
	jmp	SHORT $LN81@stbi_zlib_
$LN80@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv752[rsp], rax
$LN81@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR blocklen$2[rsp]
	jne	SHORT $LN82@stbi_zlib_
	mov	BYTE PTR tv768[rsp], 1
	jmp	SHORT $LN83@stbi_zlib_
$LN82@stbi_zlib_:
	mov	BYTE PTR tv768[rsp], 0
$LN83@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv768[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 991
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN84@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN84@stbi_zlib_
	mov	QWORD PTR tv782[rsp], 0
	jmp	SHORT $LN85@stbi_zlib_
$LN84@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv782[rsp], rax
$LN85@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 992
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN86@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN86@stbi_zlib_
	mov	QWORD PTR tv811[rsp], 0
	jmp	SHORT $LN87@stbi_zlib_
$LN86@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv811[rsp], rax
$LN87@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 993
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN88@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN88@stbi_zlib_
	mov	QWORD PTR tv841[rsp], 0
	jmp	SHORT $LN89@stbi_zlib_
$LN88@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv841[rsp], rax
$LN89@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 994
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN90@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN90@stbi_zlib_
	mov	QWORD PTR tv871[rsp], 0
	jmp	SHORT $LN91@stbi_zlib_
$LN90@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv871[rsp], rax
$LN91@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 995
	movsxd	rax, DWORD PTR blocklen$2[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$[rsp]
	movsxd	rdx, DWORD PTR [r8+rdx-8]
	mov	r8, QWORD PTR out$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv899[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv899[rsp]
	mov	rcx, rax
	call	memcpy
; Line 996
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	add	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 997
	mov	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 998
	jmp	$LN27@stbi_zlib_
$LN28@stbi_zlib_:
$LN47@stbi_zlib_:
; Line 1003
	mov	DWORD PTR s1$4[rsp], 1
	mov	DWORD PTR s2$5[rsp], 0
; Line 1004
	mov	eax, DWORD PTR data_len$[rsp]
	cdq
	mov	ecx, 5552				; 000015b0H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$9[rsp], eax
; Line 1005
	mov	DWORD PTR j$[rsp], 0
$LN30@stbi_zlib_:
; Line 1006
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN31@stbi_zlib_
; Line 1007
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi_zlib_
$LN32@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$9[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi_zlib_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$4[rsp], eax
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, DWORD PTR s2$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$5[rsp], eax
	jmp	SHORT $LN32@stbi_zlib_
$LN33@stbi_zlib_:
; Line 1008
	xor	edx, edx
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$4[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$5[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$5[rsp], eax
; Line 1009
	mov	eax, DWORD PTR blocklen$9[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 1010
	mov	DWORD PTR blocklen$9[rsp], 5552		; 000015b0H
; Line 1011
	jmp	$LN30@stbi_zlib_
$LN31@stbi_zlib_:
; Line 1012
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN92@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN92@stbi_zlib_
	mov	QWORD PTR tv935[rsp], 0
	jmp	SHORT $LN93@stbi_zlib_
$LN92@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv935[rsp], rax
$LN93@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1013
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN94@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN94@stbi_zlib_
	mov	QWORD PTR tv965[rsp], 0
	jmp	SHORT $LN95@stbi_zlib_
$LN94@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv965[rsp], rax
$LN95@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1014
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN96@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN96@stbi_zlib_
	mov	QWORD PTR tv994[rsp], 0
	jmp	SHORT $LN97@stbi_zlib_
$LN96@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv994[rsp], rax
$LN97@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1015
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN98@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN98@stbi_zlib_
	mov	QWORD PTR tv1024[rsp], 0
	jmp	SHORT $LN99@stbi_zlib_
$LN98@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv1024[rsp], rax
$LN99@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1017
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rdx+rax-8]
	mov	DWORD PTR [rcx], eax
; Line 1019
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	sub	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR out$[rsp]
	call	memmove
; Line 1020
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
$LN1@stbi_zlib_:
; Line 1022
	add	rsp, 584				; 00000248H
	ret	0
stbi_zlib_compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
data$ = 32
?stbiw__zhash@@YAIPEAE@Z PROC				; stbiw__zhash
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 868
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 869
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 870
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 871
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 872
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 873
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 874
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 875
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 876
	mov	eax, DWORD PTR hash$[rsp]
; Line 877
	add	rsp, 24
	ret	0
?stbiw__zhash@@YAIPEAE@Z ENDP				; stbiw__zhash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
a$ = 32
b$ = 40
limit$ = 48
?stbiw__zlib_countm@@YAIPEAE0H@Z PROC			; stbiw__zlib_countm
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 860
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__zli
$LN2@stbiw__zli:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__zli:
	mov	eax, DWORD PTR limit$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__zli
	cmp	DWORD PTR i$[rsp], 258			; 00000102H
	jge	SHORT $LN3@stbiw__zli
; Line 863
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbiw__zli
	jmp	SHORT $LN3@stbiw__zli
$LN5@stbiw__zli:
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 864
	mov	eax, DWORD PTR i$[rsp]
; Line 865
	add	rsp, 24
	ret	0
?stbiw__zlib_countm@@YAIPEAE0H@Z ENDP			; stbiw__zlib_countm
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 0
tv66 = 4
code$ = 32
codebits$ = 40
?stbiw__zlib_bitrev@@YAHHH@Z PROC			; stbiw__zlib_bitrev
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 850
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 851
	mov	DWORD PTR res$[rsp], 0
$LN2@stbiw__zli:
; Line 852
	mov	eax, DWORD PTR codebits$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR codebits$[rsp]
	dec	eax
	mov	DWORD PTR codebits$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN3@stbiw__zli
; Line 853
	mov	eax, DWORD PTR res$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR code$[rsp]
	and	ecx, 1
	or	eax, ecx
	mov	DWORD PTR res$[rsp], eax
; Line 854
	mov	eax, DWORD PTR code$[rsp]
	sar	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 855
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 856
	mov	eax, DWORD PTR res$[rsp]
; Line 857
	add	rsp, 24
	ret	0
?stbiw__zlib_bitrev@@YAHHH@Z ENDP			; stbiw__zlib_bitrev
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
data$ = 64
bitbuffer$ = 72
bitcount$ = 80
?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z PROC		; stbiw__zlib_flushf
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 840
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@stbiw__zli:
; Line 841
	mov	rax, QWORD PTR bitcount$[rsp]
	cmp	DWORD PTR [rax], 8
	jl	$LN3@stbiw__zli
; Line 842
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN5@stbiw__zli
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN5@stbiw__zli
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbiw__zli
$LN5@stbiw__zli:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR data$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv78[rsp], rax
$LN6@stbiw__zli:
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 843
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 8
	mov	rcx, QWORD PTR bitbuffer$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 844
	mov	rax, QWORD PTR bitcount$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 8
	mov	rcx, QWORD PTR bitcount$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 845
	jmp	$LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 846
	mov	rax, QWORD PTR data$[rsp]
; Line 847
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ENDP		; stbiw__zlib_flushf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
m$ = 36
p$ = 40
tv81 = 48
tv84 = 56
Array$ = 80
increment$ = 88
itemsize$ = 96
?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z PROC			; stbiw__sbgrowf
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 827
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 828
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stbiw__sbg
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	ecx, DWORD PTR increment$[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN6@stbiw__sbg
$LN5@stbiw__sbg:
	mov	eax, DWORD PTR increment$[rsp]
	inc	eax
	mov	DWORD PTR tv71[rsp], eax
$LN6@stbiw__sbg:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR m$[rsp], eax
; Line 829
	mov	eax, DWORD PTR itemsize$[rsp]
	imul	eax, DWORD PTR m$[rsp]
	cdqe
	add	rax, 8
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stbiw__sbg
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 8
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN8@stbiw__sbg
$LN7@stbiw__sbg:
	mov	QWORD PTR tv81[rsp], 0
$LN8@stbiw__sbg:
	mov	rdx, QWORD PTR tv84[rsp]
	mov	rcx, QWORD PTR tv81[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR p$[rsp], rax
; Line 830
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN9@stbiw__sbg
	mov	r8d, 830				; 0000033eH
	lea	rdx, OFFSET FLAT:$SG102705
	lea	rcx, OFFSET FLAT:$SG102706
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stbiw__sbg:
; Line 831
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stbiw__sbg
; Line 832
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN3@stbiw__sbg
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx+rax], 0
$LN3@stbiw__sbg:
; Line 833
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR Array$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 834
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, DWORD PTR m$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN2@stbiw__sbg:
; Line 836
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
; Line 837
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z ENDP			; stbiw__sbgrowf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv138 = 52
len$2 = 56
scratch$3 = 64
tv87 = 72
tv131 = 80
header$4 = 96
buffer$5 = 176
__$ArrayPad$ = 304
s$ = 352
x$ = 360
y$ = 368
comp$ = 376
data$ = 384
?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z PROC ; stbi_write_hdr_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 762
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 763
	cmp	DWORD PTR y$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN5@stbi_write
$LN7@stbi_write:
; Line 764
	xor	eax, eax
	jmp	$LN1@stbi_write
	jmp	$LN6@stbi_write
$LN5@stbi_write:
; Line 767
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR scratch$3[rsp], rax
; Line 770
	lea	rax, QWORD PTR header$4[rsp]
	lea	rcx, OFFSET FLAT:$SG102662
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 66					; 00000042H
	rep movsb
; Line 771
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv87[rsp], rax
	mov	r8d, 65					; 00000041H
	lea	rdx, QWORD PTR header$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv87[rsp]
; Line 776
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	lea	rdx, OFFSET FLAT:$SG102663
	lea	rcx, QWORD PTR buffer$5[rsp]
	call	sprintf
	mov	DWORD PTR len$2[rsp], eax
; Line 778
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv131[rsp], rax
	mov	r8d, DWORD PTR len$2[rsp]
	lea	rdx, QWORD PTR buffer$5[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv131[rsp]
; Line 780
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stbi_write
; Line 781
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN9@stbi_write
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	sub	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN9@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv138[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR tv138[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR scratch$3[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z ; stbiw__write_hdr_scanline
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 782
	mov	rcx, QWORD PTR scratch$3[rsp]
	call	QWORD PTR __imp_free
; Line 783
	mov	eax, 1
$LN6@stbi_write:
$LN1@stbi_write:
; Line 785
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ENDP ; stbi_write_hdr_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
r$1 = 36
rgbe$ = 40
scanlineheader$ = 44
c$2 = 48
len$3 = 52
len$4 = 56
comp$5 = 64
tv77 = 72
tv159 = 76
tv156 = 80
tv234 = 88
linear$ = 96
__$ArrayPad$ = 112
s$ = 144
width$ = 152
ncomp$ = 160
scratch$ = 168
scanline$ = 176
?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z PROC ; stbiw__write_hdr_scanline
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 673
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 674
	mov	BYTE PTR scanlineheader$[rsp], 2
	mov	BYTE PTR scanlineheader$[rsp+1], 2
	mov	BYTE PTR scanlineheader$[rsp+2], 0
	mov	BYTE PTR scanlineheader$[rsp+3], 0
; Line 679
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 680
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 683
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN27@stbiw__wri
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN25@stbiw__wri
$LN27@stbiw__wri:
; Line 684
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbiw__wri
; Line 685
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 3
	je	SHORT $LN29@stbiw__wri
	cmp	DWORD PTR tv77[rsp], 4
	je	SHORT $LN28@stbiw__wri
	jmp	$LN30@stbiw__wri
$LN28@stbiw__wri:
$LN29@stbiw__wri:
; Line 687
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 688
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 689
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 690
	jmp	SHORT $LN5@stbiw__wri
$LN30@stbiw__wri:
; Line 692
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN5@stbiw__wri:
; Line 695
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z	; stbiw__linear_to_rgbe
; Line 696
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv156[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv156[rsp]
; Line 697
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
; Line 698
	jmp	$LN26@stbiw__wri
$LN25@stbiw__wri:
; Line 701
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbiw__wri
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN8@stbiw__wri
; Line 702
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 3
	je	SHORT $LN32@stbiw__wri
	cmp	DWORD PTR tv159[rsp], 4
	je	SHORT $LN31@stbiw__wri
	jmp	$LN33@stbiw__wri
$LN31@stbiw__wri:
$LN32@stbiw__wri:
; Line 704
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 705
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 706
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 707
	jmp	SHORT $LN10@stbiw__wri
$LN33@stbiw__wri:
; Line 709
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN10@stbiw__wri:
; Line 712
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z	; stbiw__linear_to_rgbe
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	imul	ecx, DWORD PTR width$[rsp], 0
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 714
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, DWORD PTR width$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 715
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR width$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 716
	mov	eax, 1
	imul	rax, rax, 3
	imul	ecx, DWORD PTR width$[rsp], 3
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 717
	jmp	$LN7@stbiw__wri
$LN8@stbiw__wri:
; Line 719
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv234[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR scanlineheader$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv234[rsp]
; Line 722
	mov	DWORD PTR c$2[rsp], 0
	jmp	SHORT $LN14@stbiw__wri
$LN12@stbiw__wri:
	mov	eax, DWORD PTR c$2[rsp]
	inc	eax
	mov	DWORD PTR c$2[rsp], eax
$LN14@stbiw__wri:
	cmp	DWORD PTR c$2[rsp], 4
	jge	$LN13@stbiw__wri
; Line 723
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR c$2[rsp]
	cdqe
	mov	rcx, QWORD PTR scratch$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR comp$5[rsp], rax
; Line 725
	mov	DWORD PTR x$[rsp], 0
$LN15@stbiw__wri:
; Line 726
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN16@stbiw__wri
; Line 728
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN17@stbiw__wri:
; Line 729
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	SHORT $LN18@stbiw__wri
; Line 730
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
; Line 731
	jmp	SHORT $LN18@stbiw__wri
$LN34@stbiw__wri:
; Line 732
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
; Line 733
	jmp	SHORT $LN17@stbiw__wri
$LN18@stbiw__wri:
; Line 734
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jl	SHORT $LN35@stbiw__wri
; Line 735
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN35@stbiw__wri:
$LN19@stbiw__wri:
; Line 737
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN20@stbiw__wri
; Line 738
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
; Line 739
	cmp	DWORD PTR len$3[rsp], 128		; 00000080H
	jle	SHORT $LN36@stbiw__wri
	mov	DWORD PTR len$3[rsp], 128		; 00000080H
$LN36@stbiw__wri:
; Line 740
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z ; stbiw__write_dump_data
; Line 741
	mov	eax, DWORD PTR len$3[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 742
	jmp	SHORT $LN19@stbiw__wri
$LN20@stbiw__wri:
; Line 744
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	$LN37@stbiw__wri
$LN21@stbiw__wri:
; Line 746
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR r$1[rsp], eax
	jge	SHORT $LN22@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR x$[rsp]
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN22@stbiw__wri
; Line 747
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
	jmp	SHORT $LN21@stbiw__wri
$LN22@stbiw__wri:
$LN23@stbiw__wri:
; Line 749
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN24@stbiw__wri
; Line 750
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$4[rsp], eax
; Line 751
	cmp	DWORD PTR len$4[rsp], 127		; 0000007fH
	jle	SHORT $LN38@stbiw__wri
	mov	DWORD PTR len$4[rsp], 127		; 0000007fH
$LN38@stbiw__wri:
; Line 752
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	edx, DWORD PTR len$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z ; stbiw__write_run_data
; Line 753
	mov	eax, DWORD PTR len$4[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 754
	jmp	SHORT $LN23@stbiw__wri
$LN24@stbiw__wri:
$LN37@stbiw__wri:
; Line 756
	jmp	$LN15@stbiw__wri
$LN16@stbiw__wri:
; Line 757
	jmp	$LN12@stbiw__wri
$LN13@stbiw__wri:
$LN26@stbiw__wri:
; Line 759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z ENDP ; stbiw__write_hdr_scanline
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
tv77 = 40
tv84 = 48
s$ = 80
length$ = 88
data$ = 96
?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z PROC ; stbiw__write_dump_data
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 665
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 666
	mov	eax, DWORD PTR length$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 667
	cmp	DWORD PTR length$[rsp], 128		; 00000080H
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 667				; 0000029bH
	lea	rdx, OFFSET FLAT:$SG102588
	lea	rcx, OFFSET FLAT:$SG102589
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 668
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv77[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv77[rsp]
; Line 669
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv84[rsp], rax
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv84[rsp]
; Line 670
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z ENDP ; stbiw__write_dump_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
tv79 = 40
tv86 = 48
s$ = 80
length$ = 88
databyte$ = 96
?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z PROC ; stbiw__write_run_data
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 657
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 658
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 659
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:$SG102577
	lea	rcx, OFFSET FLAT:$SG102578
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 660
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv79[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv79[rsp]
; Line 661
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv86[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR databyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv86[rsp]
; Line 662
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z ENDP ; stbiw__write_run_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
maxcomp$ = 32
normalize$1 = 36
tv77 = 40
tv93 = 44
tv94 = 48
exponent$ = 52
rgbe$ = 80
linear$ = 88
?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z PROC		; stbiw__linear_to_rgbe
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 640
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 642
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR linear$[rsp]
	mov	r8, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	comiss	xmm0, DWORD PTR [r8+rcx]
	jbe	SHORT $LN5@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv77[rsp], xmm0
	jmp	SHORT $LN6@stbiw__lin
$LN5@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv77[rsp], xmm0
$LN6@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	comiss	xmm0, DWORD PTR tv77[rsp]
	jbe	SHORT $LN9@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv94[rsp], xmm0
	jmp	SHORT $LN10@stbiw__lin
$LN9@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR linear$[rsp]
	mov	r8, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	comiss	xmm0, DWORD PTR [r8+rcx]
	jbe	SHORT $LN7@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv93[rsp], xmm0
	jmp	SHORT $LN8@stbiw__lin
$LN7@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv93[rsp], xmm0
$LN8@stbiw__lin:
	movss	xmm0, DWORD PTR tv93[rsp]
	movss	DWORD PTR tv94[rsp], xmm0
$LN10@stbiw__lin:
	movss	xmm0, DWORD PTR tv94[rsp]
	movss	DWORD PTR maxcomp$[rsp], xmm0
; Line 644
	movss	xmm0, DWORD PTR __real@0a4fb11f
	comiss	xmm0, DWORD PTR maxcomp$[rsp]
	jbe	SHORT $LN2@stbiw__lin
; Line 645
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 646
	jmp	$LN3@stbiw__lin
$LN2@stbiw__lin:
; Line 647
	cvtss2sd xmm0, DWORD PTR maxcomp$[rsp]
	lea	rdx, QWORD PTR exponent$[rsp]
	call	QWORD PTR __imp_frexp
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@43800000
	divss	xmm0, DWORD PTR maxcomp$[rsp]
	movss	DWORD PTR normalize$1[rsp], xmm0
; Line 649
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 650
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 651
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 652
	mov	eax, DWORD PTR exponent$[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN3@stbiw__lin:
; Line 654
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z ENDP		; stbiw__linear_to_rgbe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$1 = 192
len$2 = 196
i$3 = 200
has_alpha$ = 204
header$4 = 208
header$5 = 209
j$6 = 212
colorbytes$ = 216
diff$7 = 220
tv66 = 224
tv69 = 228
tv71 = 232
format$ = 236
jdir$8 = 240
jend$9 = 244
begin$10 = 248
row$11 = 256
prev$12 = 264
s$ = 288
x$ = 296
y$ = 304
comp$ = 312
data$ = 320
?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z PROC ; stbi_write_tga_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 533
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
; Line 534
	cmp	DWORD PTR comp$[rsp], 2
	je	SHORT $LN33@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	je	SHORT $LN33@stbi_write
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN33@stbi_write:
	mov	DWORD PTR tv66[rsp], 1
$LN34@stbi_write:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR has_alpha$[rsp], eax
; Line 535
	cmp	DWORD PTR has_alpha$[rsp], 0
	je	SHORT $LN35@stbi_write
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN36@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN36@stbi_write:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR colorbytes$[rsp], eax
; Line 536
	cmp	DWORD PTR colorbytes$[rsp], 2
	jge	SHORT $LN37@stbi_write
	mov	DWORD PTR tv71[rsp], 3
	jmp	SHORT $LN38@stbi_write
$LN37@stbi_write:
	mov	DWORD PTR tv71[rsp], 2
$LN38@stbi_write:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR format$[rsp], eax
; Line 538
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN18@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN17@stbi_write
$LN18@stbi_write:
; Line 539
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN17@stbi_write:
; Line 541
	cmp	DWORD PTR stbi_write_tga_with_rle, 0
	jne	$LN19@stbi_write
; Line 542
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	DWORD PTR [rsp+176], eax
	mov	DWORD PTR [rsp+168], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	QWORD PTR [rsp+144], 0
	mov	QWORD PTR [rsp+136], 0
	mov	QWORD PTR [rsp+128], 0
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR [rsp+104], eax
	mov	QWORD PTR [rsp+96], 0
	mov	QWORD PTR [rsp+88], 0
	lea	rax, OFFSET FLAT:$SG102518
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	eax, DWORD PTR has_alpha$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
	jmp	$LN1@stbi_write
; Line 544
	jmp	$LN20@stbi_write
$LN19@stbi_write:
; Line 548
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	edx, DWORD PTR format$[rsp]
	add	edx, 8
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+88], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], edx
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG102519
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ ; stbiw__writef
; Line 550
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN21@stbi_write
; Line 551
	mov	DWORD PTR j$6[rsp], 0
; Line 552
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR jend$9[rsp], eax
; Line 553
	mov	DWORD PTR jdir$8[rsp], 1
; Line 554
	jmp	SHORT $LN22@stbi_write
$LN21@stbi_write:
; Line 555
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$6[rsp], eax
; Line 556
	mov	DWORD PTR jend$9[rsp], -1
; Line 557
	mov	DWORD PTR jdir$8[rsp], -1
$LN22@stbi_write:
; Line 559
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR jdir$8[rsp]
	mov	ecx, DWORD PTR j$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$6[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR jend$9[rsp]
	cmp	DWORD PTR j$6[rsp], eax
	je	$LN3@stbi_write
; Line 560
	mov	eax, DWORD PTR j$6[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row$11[rsp], rax
; Line 563
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$3[rsp], eax
$LN7@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN6@stbi_write
; Line 564
	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR row$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR begin$10[rsp], rax
; Line 565
	mov	DWORD PTR diff$7[rsp], 1
; Line 566
	mov	DWORD PTR len$2[rsp], 1
; Line 568
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN23@stbi_write
; Line 569
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 570
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	inc	ecx
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	mov	DWORD PTR diff$7[rsp], eax
; Line 571
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN24@stbi_write
; Line 572
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR prev$12[rsp], rax
; Line 573
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	$LN9@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	$LN9@stbi_write
; Line 574
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR prev$12[rsp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN26@stbi_write
; Line 575
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR prev$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prev$12[rsp], rax
; Line 576
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 577
	jmp	SHORT $LN27@stbi_write
$LN26@stbi_write:
; Line 578
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 579
	jmp	SHORT $LN9@stbi_write
$LN27@stbi_write:
; Line 581
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 582
	jmp	$LN25@stbi_write
$LN24@stbi_write:
; Line 583
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN12@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	SHORT $LN12@stbi_write
; Line 584
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN28@stbi_write
; Line 585
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 586
	jmp	SHORT $LN29@stbi_write
$LN28@stbi_write:
; Line 587
	jmp	SHORT $LN12@stbi_write
$LN29@stbi_write:
; Line 589
	jmp	$LN11@stbi_write
$LN12@stbi_write:
$LN25@stbi_write:
$LN23@stbi_write:
; Line 593
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN30@stbi_write
; Line 594
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$4[rsp], al
; Line 595
	movzx	edx, BYTE PTR header$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
; Line 596
	mov	DWORD PTR k$1[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN15@stbi_write
; Line 597
	mov	eax, DWORD PTR k$1[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR begin$10[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
; Line 598
	jmp	SHORT $LN14@stbi_write
$LN15@stbi_write:
; Line 599
	jmp	SHORT $LN31@stbi_write
$LN30@stbi_write:
; Line 600
	mov	eax, DWORD PTR len$2[rsp]
	sub	eax, 129				; 00000081H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$5[rsp], al
; Line 601
	movzx	edx, BYTE PTR header$5[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
; Line 602
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
$LN31@stbi_write:
; Line 604
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 605
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 606
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN20@stbi_write:
; Line 608
	mov	eax, 1
$LN1@stbi_write:
; Line 609
	add	rsp, 280				; 00000118H
	ret	0
?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ENDP ; stbi_write_tga_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pad$1 = 368
s$ = 400
x$ = 408
y$ = 416
comp$ = 424
data$ = 432
?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z PROC ; stbi_write_bmp_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 493
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
; Line 494
	cmp	DWORD PTR comp$[rsp], 4
	je	$LN2@stbi_write
; Line 496
	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	imul	eax, eax, 3
	and	eax, 3
	mov	DWORD PTR pad$1[rsp], eax
; Line 497
	imul	eax, DWORD PTR x$[rsp], 3
	add	eax, DWORD PTR pad$1[rsp]
	imul	eax, DWORD PTR y$[rsp]
	add	eax, 54					; 00000036H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	QWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 24
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 40			; 00000028H
	mov	DWORD PTR [rsp+128], 54			; 00000036H
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG102451
	mov	QWORD PTR [rsp+80], rax
	mov	eax, DWORD PTR pad$1[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	QWORD PTR [rsp+64], 0
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
	jmp	$LN1@stbi_write
; Line 501
	jmp	$LN3@stbi_write
$LN2@stbi_write:
; Line 505
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	lea	eax, DWORD PTR [rax*4+122]
	mov	QWORD PTR [rsp+352], 0
	mov	QWORD PTR [rsp+344], 0
	mov	QWORD PTR [rsp+336], 0
	mov	QWORD PTR [rsp+328], 0
	mov	QWORD PTR [rsp+320], 0
	mov	QWORD PTR [rsp+312], 0
	mov	QWORD PTR [rsp+304], 0
	mov	QWORD PTR [rsp+296], 0
	mov	QWORD PTR [rsp+288], 0
	mov	QWORD PTR [rsp+280], 0
	mov	QWORD PTR [rsp+272], 0
	mov	QWORD PTR [rsp+264], 0
	mov	QWORD PTR [rsp+256], 0
	mov	DWORD PTR [rsp+248], -16777216		; ff000000H
	mov	DWORD PTR [rsp+240], 255		; 000000ffH
	mov	DWORD PTR [rsp+232], 65280		; 0000ff00H
	mov	DWORD PTR [rsp+224], 16711680		; 00ff0000H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	DWORD PTR [rsp+176], 3
	mov	DWORD PTR [rsp+168], 32			; 00000020H
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 108		; 0000006cH
	mov	DWORD PTR [rsp+128], 122		; 0000007aH
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG102452
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	DWORD PTR [rsp+64], 1
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
$LN3@stbi_write:
$LN1@stbi_write:
; Line 510
	add	rsp, 392				; 00000188H
	ret	0
?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ENDP ; stbi_write_bmp_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 80
s$ = 112
rgb_dir$ = 120
vdir$ = 128
x$ = 136
y$ = 144
comp$ = 152
expand_mono$ = 160
data$ = 168
alpha$ = 176
pad$ = 184
fmt$ = 192
?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ PROC ; stbiw__outfile
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 479
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 480
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN4@stbiw__out
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN2@stbiw__out
$LN4@stbiw__out:
; Line 481
	xor	eax, eax
	jmp	$LN1@stbiw__out
; Line 482
	jmp	$LN3@stbiw__out
$LN2@stbiw__out:
; Line 484
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$1[rsp], rax
; Line 485
	mov	r8, QWORD PTR v$1[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ; stbiw__writefv
; Line 486
	mov	QWORD PTR v$1[rsp], 0
; Line 487
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR pad$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR alpha$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR vdir$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z ; stbiw__write_pixels
; Line 488
	mov	eax, 1
$LN3@stbiw__out:
$LN1@stbiw__out:
; Line 490
	add	rsp, 104				; 00000068H
	ret	0
?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ENDP ; stbiw__outfile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
i$ = 52
j_end$ = 56
zero$ = 60
d$1 = 64
tv91 = 72
s$ = 96
rgb_dir$ = 104
vdir$ = 112
x$ = 120
y$ = 128
comp$ = 136
data$ = 144
write_alpha$ = 152
scanline_pad$ = 160
expand_mono$ = 168
?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z PROC ; stbiw__write_pixels
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 452
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 453
	mov	DWORD PTR zero$[rsp], 0
; Line 456
	cmp	DWORD PTR y$[rsp], 0
	jg	SHORT $LN8@stbiw__wri
; Line 457
	jmp	$LN1@stbiw__wri
$LN8@stbiw__wri:
; Line 459
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN9@stbiw__wri
; Line 460
	imul	eax, DWORD PTR vdir$[rsp], -1
	mov	DWORD PTR vdir$[rsp], eax
$LN9@stbiw__wri:
; Line 462
	cmp	DWORD PTR vdir$[rsp], 0
	jge	SHORT $LN10@stbiw__wri
; Line 463
	mov	DWORD PTR j_end$[rsp], -1
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 464
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 465
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR j_end$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
$LN11@stbiw__wri:
; Line 468
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR vdir$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR j_end$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	je	$LN3@stbiw__wri
; Line 469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbiw__wri
$LN5@stbiw__wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbiw__wri
; Line 470
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	add	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR d$1[rsp], rax
; Line 471
	mov	rax, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR write_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
; Line 472
	jmp	SHORT $LN5@stbiw__wri
$LN6@stbiw__wri:
; Line 473
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
; Line 474
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv91[rsp], rax
	mov	r8d, DWORD PTR scanline_pad$[rsp]
	lea	rdx, QWORD PTR zero$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv91[rsp]
; Line 475
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 476
	add	rsp, 88					; 00000058H
	ret	0
?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z ENDP ; stbiw__write_pixels
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bg$ = 32
px$ = 36
k$ = 40
tv71 = 44
tv128 = 48
s$ = 80
rgb_dir$ = 88
comp$ = 96
write_alpha$ = 104
expand_mono$ = 112
d$ = 120
?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z PROC ; stbiw__write_pixel
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 419
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 420
	mov	BYTE PTR bg$[rsp], 255			; 000000ffH
	mov	BYTE PTR bg$[rsp+1], 0
	mov	BYTE PTR bg$[rsp+2], 255		; 000000ffH
; Line 423
	cmp	DWORD PTR write_alpha$[rsp], 0
	jge	SHORT $LN7@stbiw__wri
; Line 424
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN7@stbiw__wri:
; Line 426
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	cmp	DWORD PTR tv71[rsp], 1
	je	SHORT $LN9@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 2
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 3
	je	$LN14@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 4
	je	SHORT $LN12@stbiw__wri
	jmp	$LN2@stbiw__wri
$LN8@stbiw__wri:
$LN9@stbiw__wri:
; Line 429
	cmp	DWORD PTR expand_mono$[rsp], 0
	je	SHORT $LN10@stbiw__wri
; Line 430
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 432
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN11@stbiw__wri:
; Line 433
	jmp	$LN2@stbiw__wri
$LN12@stbiw__wri:
; Line 435
	cmp	DWORD PTR write_alpha$[rsp], 0
	jne	$LN13@stbiw__wri
; Line 437
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN6@stbiw__wri
$LN4@stbiw__wri:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN6@stbiw__wri:
	cmp	DWORD PTR k$[rsp], 3
	jge	SHORT $LN5@stbiw__wri
; Line 438
	movsxd	rax, DWORD PTR k$[rsp]
	movzx	eax, BYTE PTR bg$[rsp+rax]
	mov	DWORD PTR tv128[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR d$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	movzx	edx, BYTE PTR bg$[rsp+rdx]
	sub	ecx, edx
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	imul	ecx, edx
	mov	eax, ecx
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	ecx, DWORD PTR tv128[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR px$[rsp+rcx], al
	jmp	SHORT $LN4@stbiw__wri
$LN5@stbiw__wri:
; Line 439
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	movzx	r9d, BYTE PTR px$[rsp+rax]
	movzx	r8d, BYTE PTR px$[rsp+rcx]
	movzx	edx, BYTE PTR px$[rsp+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
; Line 440
	jmp	SHORT $LN2@stbiw__wri
$LN13@stbiw__wri:
$LN14@stbiw__wri:
; Line 444
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
$LN2@stbiw__wri:
; Line 447
	cmp	DWORD PTR write_alpha$[rsp], 0
	jle	SHORT $LN15@stbiw__wri
; Line 448
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN15@stbiw__wri:
; Line 449
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ENDP ; stbiw__write_pixel
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
a$ = 72
b$ = 80
c$ = 88
?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z PROC	; stbiw__write3
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 407
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 409
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	add	rax, 3
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 410
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN2@stbiw__wri:
; Line 411
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR n$[rsp], eax
; Line 412
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 3
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 413
	mov	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 414
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 415
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 416
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ENDP	; stbiw__write3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
a$ = 56
?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z PROC	; stbiw__write1
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 400
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 401
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	inc	rax
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 402
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN2@stbiw__wri:
; Line 403
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 404
	add	rsp, 40					; 00000028H
	ret	0
?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ENDP	; stbiw__write1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s$ = 64
c$ = 72
?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z PROC	; stbiw__putc
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 395
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 396
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv70[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv70[rsp]
; Line 397
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ENDP	; stbiw__putc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
s$ = 64
?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z PROC ; stbiw__write_flush
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 387
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 388
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+80], 0
	je	SHORT $LN2@stbiw__wri
; Line 389
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+80]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv74[rsp]
; Line 390
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+80], 0
$LN2@stbiw__wri:
; Line 392
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ENDP ; stbiw__write_flush
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
s$ = 64
fmt$ = 72
?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ PROC	; stbiw__writef
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 379
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 381
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 382
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ; stbiw__writefv
; Line 383
	mov	QWORD PTR v$[rsp], 0
; Line 384
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ ENDP	; stbiw__writef
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
b$2 = 36
tv69 = 40
x$3 = 44
b$4 = 48
tv76 = 52
tv92 = 56
x$5 = 60
tv147 = 64
tv68 = 68
tv85 = 72
tv140 = 80
tv173 = 88
s$ = 112
fmt$ = 120
v$ = 128
?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z PROC ; stbiw__writefv
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 350
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
$LN2@stbiw__wri:
; Line 351
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stbiw__wri
; Line 352
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	rax, QWORD PTR fmt$[rsp]
	inc	rax
	mov	QWORD PTR fmt$[rsp], rax
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 32			; 00000020H
	je	SHORT $LN6@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 49			; 00000031H
	je	SHORT $LN7@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 50			; 00000032H
	je	$LN8@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 52			; 00000034H
	je	$LN9@stbiw__wri
	jmp	$LN10@stbiw__wri
$LN6@stbiw__wri:
; Line 353
	jmp	$LN4@stbiw__wri
$LN7@stbiw__wri:
; Line 354
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN12@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN13@stbiw__wri
$LN12@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv76[rsp], eax
$LN13@stbiw__wri:
	mov	eax, DWORD PTR tv76[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR x$1[rsp], al
; Line 355
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv85[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR x$1[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv85[rsp]
; Line 356
	jmp	$LN4@stbiw__wri
$LN8@stbiw__wri:
; Line 357
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN14@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv92[rsp], eax
	jmp	SHORT $LN15@stbiw__wri
$LN14@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv92[rsp], eax
$LN15@stbiw__wri:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR x$5[rsp], eax
; Line 359
	mov	eax, DWORD PTR x$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 360
	mov	eax, DWORD PTR x$5[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 361
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv140[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv140[rsp]
; Line 362
	jmp	$LN4@stbiw__wri
$LN9@stbiw__wri:
; Line 363
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv147[rsp], eax
	jmp	SHORT $LN17@stbiw__wri
$LN16@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv147[rsp], eax
$LN17@stbiw__wri:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR x$3[rsp], eax
; Line 365
	mov	eax, DWORD PTR x$3[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 366
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 367
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 368
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 369
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv173[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR b$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv173[rsp]
; Line 370
	jmp	SHORT $LN4@stbiw__wri
$LN10@stbiw__wri:
; Line 372
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbiw__wri
	mov	r8d, 372				; 00000174H
	lea	rdx, OFFSET FLAT:$SG102329
	lea	rcx, OFFSET FLAT:$SG102330
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stbiw__wri:
; Line 373
	jmp	SHORT $LN1@stbiw__wri
$LN4@stbiw__wri:
; Line 375
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 376
	add	rsp, 104				; 00000068H
	ret	0
?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ENDP ; stbiw__writefv
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z PROC ; stbi__end_write_file
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 341
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_fclose
; Line 342
	add	rsp, 40					; 00000028H
	ret	0
?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ENDP ; stbi__end_write_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
f$ = 40
s$ = 64
filename$ = 72
?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z PROC ; stbi__start_write_file
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 333
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 334
	lea	rdx, OFFSET FLAT:$SG102264
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 335
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__stdio_write@@YAXPEAX0H@Z ; stbi__stdio_write
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 336
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stbi__star
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@stbi__star
$LN3@stbi__star:
	mov	DWORD PTR tv71[rsp], 0
$LN4@stbi__star:
	mov	eax, DWORD PTR tv71[rsp]
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ENDP ; stbi__start_write_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stbiw__fopen
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 305
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 324
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fopen_s
	test	eax, eax
	je	SHORT $LN2@stbiw__fop
; Line 325
	mov	QWORD PTR f$[rsp], 0
$LN2@stbiw__fop:
; Line 329
	mov	rax, QWORD PTR f$[rsp]
; Line 330
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stbiw__fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
data$ = 56
size$ = 64
?stbi__stdio_write@@YAXPEAX0H@Z PROC			; stbi__stdio_write
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 285
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 286
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR context$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 287
	add	rsp, 40					; 00000028H
	ret	0
?stbi__stdio_write@@YAXPEAX0H@Z ENDP			; stbi__stdio_write
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
c$ = 16
context$ = 24
?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z PROC ; stbi__start_write_callbacks
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 277
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 278
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 279
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 280
	ret	0
?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ENDP ; stbi__start_write_callbacks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag$ = 8
stbi_flip_vertically_on_write PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 263
	mov	DWORD PTR [rsp+8], ecx
; Line 264
	mov	eax, DWORD PTR flag$[rsp]
	mov	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, eax
; Line 265
	ret	0
stbi_flip_vertically_on_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
quality$ = 224
stbi_write_jpg_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1608
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1609
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1610
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 1611
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ; stbi_write_jpg_core
; Line 1612
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_jpg_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_hdr_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 789
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 790
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 791
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ; stbi_write_hdr_core
; Line 792
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_hdr_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_tga_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 612
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 613
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 614
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 615
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ; stbi_write_tga_core
; Line 616
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_tga_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_bmp_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 514
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 515
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 516
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ; stbi_write_bmp_core
; Line 517
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_bmp_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
tv76 = 64
func$ = 96
context$ = 104
x$ = 112
y$ = 120
comp$ = 128
data$ = 136
stride_bytes$ = 144
stbi_write_png_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1232
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1234
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1235
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1236
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv76[rsp], rax
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR png$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR tv76[rsp]
; Line 1237
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_free
; Line 1238
	mov	eax, 1
$LN1@stbi_write:
; Line 1239
	add	rsp, 88					; 00000058H
	ret	0
stbi_write_png_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
quality$ = 232
stbi_write_jpg PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1617
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1618
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1619
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 1620
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ; stbi_write_jpg_core
	mov	DWORD PTR r$1[rsp], eax
; Line 1621
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 1622
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 1623
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 1624
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 1625
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_jpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_hdr PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 795
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 796
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 797
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 798
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ; stbi_write_hdr_core
	mov	DWORD PTR r$1[rsp], eax
; Line 799
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 800
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 801
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 802
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 803
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_tga PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 620
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 621
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 622
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 623
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ; stbi_write_tga_core
	mov	DWORD PTR r$1[rsp], eax
; Line 624
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 625
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 626
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 627
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 628
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_tga ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_bmp PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 521
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 522
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 523
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 524
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ; stbi_write_bmp_core
	mov	DWORD PTR r$1[rsp], eax
; Line 525
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 526
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 527
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 528
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 529
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_bmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
f$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
data$ = 128
stride_bytes$ = 136
stbi_write_png PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1216
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1219
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1220
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1222
	lea	rdx, OFFSET FLAT:$SG103160
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1223
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN3@stbi_write
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN3@stbi_write:
; Line 1224
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 1225
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1226
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_free
; Line 1227
	mov	eax, 1
$LN1@stbi_write:
; Line 1228
	add	rsp, 88					; 00000058H
	ret	0
stbi_write_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__is_16_main@@YAHPEAUstbi__context@@@Z PROC	; stbi__is_16_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7584
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7586
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_is16@@YAHPEAUstbi__context@@@Z ; stbi__png_is16
	test	eax, eax
	je	SHORT $LN2@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN2@stbi__is_1:
; Line 7590
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_is16@@YAHPEAUstbi__context@@@Z ; stbi__psd_is16
	test	eax, eax
	je	SHORT $LN3@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN3@stbi__is_1:
; Line 7594
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z ; stbi__pnm_is16
	test	eax, eax
	je	SHORT $LN4@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN4@stbi__is_1:
; Line 7596
	xor	eax, eax
$LN1@stbi__is_1:
; Line 7597
	add	rsp, 40					; 00000028H
	ret	0
?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ENDP	; stbi__is_16_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__info_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7542
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7544
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__jpeg_info
	test	eax, eax
	je	SHORT $LN2@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN2@stbi__info:
; Line 7548
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__png_info
	test	eax, eax
	je	SHORT $LN3@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN3@stbi__info:
; Line 7552
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__gif_info
	test	eax, eax
	je	SHORT $LN4@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN4@stbi__info:
; Line 7556
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__bmp_info
	test	eax, eax
	je	SHORT $LN5@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN5@stbi__info:
; Line 7560
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__psd_info
	test	eax, eax
	je	SHORT $LN6@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN6@stbi__info:
; Line 7564
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pic_info
	test	eax, eax
	je	SHORT $LN7@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN7@stbi__info:
; Line 7568
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	test	eax, eax
	je	SHORT $LN8@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN8@stbi__info:
; Line 7572
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__hdr_info
	test	eax, eax
	je	SHORT $LN9@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN9@stbi__info:
; Line 7577
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__tga_info
	test	eax, eax
	je	SHORT $LN10@stbi__info
; Line 7578
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN10@stbi__info:
; Line 7580
	lea	rcx, OFFSET FLAT:$SG102069
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
$LN1@stbi__info:
; Line 7581
	add	rsp, 40					; 00000028H
	ret	0
?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__info_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
s$ = 64
c$ = 72
?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z PROC ; stbi__pnm_getinteger
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7483
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7484
	mov	DWORD PTR value$[rsp], 0
$LN2@stbi__pnm_:
; Line 7486
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	?stbi__pnm_isdigit@@YAHD@Z		; stbi__pnm_isdigit
	test	eax, eax
	je	SHORT $LN3@stbi__pnm_
; Line 7487
	imul	eax, DWORD PTR value$[rsp], 10
	mov	rcx, QWORD PTR c$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR value$[rsp], eax
; Line 7488
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
; Line 7489
	jmp	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7491
	mov	eax, DWORD PTR value$[rsp]
; Line 7492
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ENDP ; stbi__pnm_getinteger
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 0
c$ = 32
?stbi__pnm_isdigit@@YAHD@Z PROC				; stbi__pnm_isdigit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7478
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7479
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv68[rsp]
; Line 7480
	add	rsp, 24
	ret	0
?stbi__pnm_isdigit@@YAHD@Z ENDP				; stbi__pnm_isdigit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z PROC ; stbi__pnm_skip_whitespace
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7464
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stbi__pnm_:
$LN5@stbi__pnm_:
; Line 7466
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	?stbi__pnm_isspace@@YAHD@Z		; stbi__pnm_isspace
	test	eax, eax
	je	SHORT $LN6@stbi__pnm_
; Line 7467
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7469
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN10@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN9@stbi__pnm_
$LN10@stbi__pnm_:
; Line 7470
	jmp	SHORT $LN3@stbi__pnm_
$LN9@stbi__pnm_:
$LN7@stbi__pnm_:
; Line 7472
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN8@stbi__pnm_
; Line 7473
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN7@stbi__pnm_
$LN8@stbi__pnm_:
; Line 7474
	jmp	$LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7475
	add	rsp, 40					; 00000028H
	ret	0
?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ENDP ; stbi__pnm_skip_whitespace
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
c$ = 32
?stbi__pnm_isspace@@YAHD@Z PROC				; stbi__pnm_isspace
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7459
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7460
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 9
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 11
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 12
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	je	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv76[rsp], 1
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv76[rsp]
; Line 7461
	add	rsp, 24
	ret	0
?stbi__pnm_isspace@@YAHD@Z ENDP				; stbi__pnm_isspace
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f1$1 = 32
tv152 = 36
output$ = 64
input$ = 72
req_comp$ = 80
?stbi__hdr_convert@@YAXPEAMPEAEH@Z PROC			; stbi__hdr_convert
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7054
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7055
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN4@stbi__hdr_
; Line 7058
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 136				; 00000088H
	mov	edx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	call	QWORD PTR __imp_ldexp
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR f1$1[rsp], xmm0
; Line 7059
	cmp	DWORD PTR req_comp$[rsp], 2
	jg	SHORT $LN6@stbi__hdr_
; Line 7060
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
	jmp	$LN7@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7062
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7063
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7064
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
$LN7@stbi__hdr_:
; Line 7066
	cmp	DWORD PTR req_comp$[rsp], 2
	jne	SHORT $LN8@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN8@stbi__hdr_:
; Line 7067
	cmp	DWORD PTR req_comp$[rsp], 4
	jne	SHORT $LN9@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN9@stbi__hdr_:
; Line 7068
	jmp	$LN5@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7069
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	cmp	DWORD PTR tv152[rsp], 1
	je	$LN13@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 2
	je	SHORT $LN12@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 3
	je	SHORT $LN11@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 4
	je	SHORT $LN10@stbi__hdr_
	jmp	$LN2@stbi__hdr_
$LN10@stbi__hdr_:
; Line 7070
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN11@stbi__hdr_:
; Line 7071
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7072
	jmp	SHORT $LN2@stbi__hdr_
$LN12@stbi__hdr_:
; Line 7073
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN13@stbi__hdr_:
; Line 7074
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
$LN2@stbi__hdr_:
$LN5@stbi__hdr_:
; Line 7078
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_convert@@YAXPEAMPEAEH@Z ENDP			; stbi__hdr_convert
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
len$ = 36
z$ = 64
buffer$ = 72
?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z PROC ; stbi__hdr_gettoken
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7032
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7033
	mov	DWORD PTR len$[rsp], 0
; Line 7034
	mov	BYTE PTR c$[rsp], 0
; Line 7036
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
$LN2@stbi__hdr_:
; Line 7038
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__hdr_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__hdr_
; Line 7039
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 7040
	cmp	DWORD PTR len$[rsp], 1023		; 000003ffH
	jne	SHORT $LN6@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7042
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN5@stbi__hdr_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 10
	je	SHORT $LN5@stbi__hdr_
; Line 7043
	jmp	SHORT $LN4@stbi__hdr_
$LN5@stbi__hdr_:
; Line 7044
	jmp	SHORT $LN3@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7046
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7047
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7049
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7050
	mov	rax, QWORD PTR buffer$[rsp]
; Line 7051
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ENDP ; stbi__hdr_gettoken
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
signature$ = 72
?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z PROC	; stbi__hdr_test_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7010
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR signature$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@stbi__hdr_
; Line 7013
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR signature$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__hdr_
; Line 7014
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN5@stbi__hdr_:
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7015
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7016
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7017
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ENDP	; stbi__hdr_test_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
g$ = 64
out$ = 72
delays$ = 80
?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z PROC ; stbi__load_gif_main_outofmem
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6875
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6876
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
; Line 6877
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 6878
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
; Line 6880
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN2@stbi__load
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
$LN2@stbi__load:
; Line 6881
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
$LN3@stbi__load:
; Line 6882
	lea	rcx, OFFSET FLAT:$SG101595
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
	mov	DWORD PTR tv78[rsp], 0
$LN6@stbi__load:
	movsxd	rax, DWORD PTR tv78[rsp]
; Line 6883
	add	rsp, 56					; 00000038H
	ret	0
?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ENDP ; stbi__load_gif_main_outofmem
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pi$ = 32
pcount$ = 36
len$1 = 40
dispose$ = 44
tv234 = 48
w$2 = 52
tv83 = 56
tv143 = 60
tv252 = 64
x$3 = 68
y$4 = 72
h$5 = 76
tv299 = 80
tv318 = 84
first_frame$ = 88
tv413 = 92
tag$6 = 96
tv582 = 100
ext$7 = 104
o$8 = 112
s$ = 144
g$ = 152
comp$ = 160
req_comp$ = 168
two_back$ = 176
?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z PROC ; stbi__gif_load_next
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6701
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 6709
	mov	DWORD PTR first_frame$[rsp], 0
; Line 6710
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	$LN18@stbi__gif_
; Line 6711
	xor	r9d, r9d
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ; stbi__gif_header
	test	eax, eax
	jne	SHORT $LN20@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN20@stbi__gif_:
; Line 6712
	xor	r9d, r9d
	mov	rax, QWORD PTR g$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR g$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, 4
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN21@stbi__gif_
; Line 6713
	lea	rcx, OFFSET FLAT:$SG101549
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN55@stbi__gif_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN56@stbi__gif_
$LN55@stbi__gif_:
	mov	DWORD PTR tv83[rsp], 0
$LN56@stbi__gif_:
	movsxd	rax, DWORD PTR tv83[rsp]
	jmp	$LN1@stbi__gif_
$LN21@stbi__gif_:
; Line 6714
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6715
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 6716
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 6717
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 6718
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN22@stbi__gif_
$LN23@stbi__gif_:
; Line 6719
	lea	rcx, OFFSET FLAT:$SG101552
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN57@stbi__gif_
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN58@stbi__gif_
$LN57@stbi__gif_:
	mov	DWORD PTR tv143[rsp], 0
$LN58@stbi__gif_:
	movsxd	rax, DWORD PTR tv143[rsp]
	jmp	$LN1@stbi__gif_
$LN22@stbi__gif_:
; Line 6724
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
; Line 6725
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 6726
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 6727
	mov	DWORD PTR first_frame$[rsp], 1
; Line 6728
	jmp	$LN19@stbi__gif_
$LN18@stbi__gif_:
; Line 6730
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 28
	sar	eax, 2
	mov	DWORD PTR dispose$[rsp], eax
; Line 6731
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6733
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN24@stbi__gif_
	cmp	QWORD PTR two_back$[rsp], 0
	jne	SHORT $LN24@stbi__gif_
; Line 6734
	mov	DWORD PTR dispose$[rsp], 2
$LN24@stbi__gif_:
; Line 6737
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN25@stbi__gif_
; Line 6738
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN3@stbi__gif_
; Line 6739
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN27@stbi__gif_
; Line 6740
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR two_back$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN27@stbi__gif_:
; Line 6742
	jmp	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6743
	jmp	$LN26@stbi__gif_
$LN25@stbi__gif_:
	cmp	DWORD PTR dispose$[rsp], 2
	jne	SHORT $LN28@stbi__gif_
; Line 6745
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN5@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN7@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN6@stbi__gif_
; Line 6746
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN30@stbi__gif_
; Line 6747
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN30@stbi__gif_:
; Line 6749
	jmp	SHORT $LN5@stbi__gif_
$LN6@stbi__gif_:
$LN28@stbi__gif_:
$LN26@stbi__gif_:
; Line 6758
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	mov	rax, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcpy
$LN19@stbi__gif_:
; Line 6762
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
$LN8@stbi__gif_:
; Line 6765
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tag$6[rsp], eax
; Line 6766
	mov	eax, DWORD PTR tag$6[rsp]
	mov	DWORD PTR tv234[rsp], eax
	cmp	DWORD PTR tv234[rsp], 33		; 00000021H
	je	$LN44@stbi__gif_
	cmp	DWORD PTR tv234[rsp], 44		; 0000002cH
	je	SHORT $LN31@stbi__gif_
	cmp	DWORD PTR tv234[rsp], 59		; 0000003bH
	je	$LN52@stbi__gif_
	jmp	$LN53@stbi__gif_
$LN31@stbi__gif_:
; Line 6772
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR x$3[rsp], eax
; Line 6773
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR y$4[rsp], eax
; Line 6774
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR w$2[rsp], eax
; Line 6775
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR h$5[rsp], eax
; Line 6776
	mov	eax, DWORD PTR w$2[rsp]
	mov	ecx, DWORD PTR x$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jg	SHORT $LN33@stbi__gif_
	mov	eax, DWORD PTR h$5[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN32@stbi__gif_
$LN33@stbi__gif_:
; Line 6777
	lea	rcx, OFFSET FLAT:$SG101563
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN59@stbi__gif_
	mov	DWORD PTR tv252[rsp], 0
	jmp	SHORT $LN60@stbi__gif_
$LN59@stbi__gif_:
	mov	DWORD PTR tv252[rsp], 0
$LN60@stbi__gif_:
	movsxd	rax, DWORD PTR tv252[rsp]
	jmp	$LN1@stbi__gif_
$LN32@stbi__gif_:
; Line 6779
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34916], eax
; Line 6780
	mov	eax, DWORD PTR x$3[rsp]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34892], eax
; Line 6781
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34896], eax
; Line 6782
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34892]
	mov	ecx, DWORD PTR w$2[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34900], eax
; Line 6783
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR h$5[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34904], eax
; Line 6784
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6785
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34896]
	mov	DWORD PTR [rax+34912], ecx
; Line 6791
	cmp	DWORD PTR w$2[rsp], 0
	jne	SHORT $LN34@stbi__gif_
; Line 6792
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	mov	DWORD PTR [rax+34912], ecx
$LN34@stbi__gif_:
; Line 6794
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34888], eax
; Line 6796
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN35@stbi__gif_
; Line 6797
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34916]
	shl	eax, 3
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6798
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 3
; Line 6799
	jmp	SHORT $LN36@stbi__gif_
$LN35@stbi__gif_:
; Line 6800
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34916]
	mov	DWORD PTR [rax+34884], ecx
; Line 6801
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 0
$LN36@stbi__gif_:
; Line 6804
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN37@stbi__gif_
; Line 6805
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN61@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR tv299[rsp], eax
	jmp	SHORT $LN62@stbi__gif_
$LN61@stbi__gif_:
	mov	DWORD PTR tv299[rsp], -1
$LN62@stbi__gif_:
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv582[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv582[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 1076				; 00000434H
	mov	r9d, DWORD PTR tv299[rsp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ; stbi__gif_parse_colortable
; Line 6806
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 1076				; 00000434H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
	jmp	SHORT $LN38@stbi__gif_
$LN37@stbi__gif_:
; Line 6807
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN39@stbi__gif_
; Line 6808
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 52					; 00000034H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
; Line 6809
	jmp	SHORT $LN40@stbi__gif_
$LN39@stbi__gif_:
; Line 6810
	lea	rcx, OFFSET FLAT:$SG101571
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN63@stbi__gif_
	mov	DWORD PTR tv318[rsp], 0
	jmp	SHORT $LN64@stbi__gif_
$LN63@stbi__gif_:
	mov	DWORD PTR tv318[rsp], 0
$LN64@stbi__gif_:
	movsxd	rax, DWORD PTR tv318[rsp]
	jmp	$LN1@stbi__gif_
$LN40@stbi__gif_:
$LN38@stbi__gif_:
; Line 6812
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z ; stbi__process_gif_raster
	mov	QWORD PTR o$8[rsp], rax
; Line 6813
	cmp	QWORD PTR o$8[rsp], 0
	jne	SHORT $LN41@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN41@stbi__gif_:
; Line 6816
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6817
	cmp	DWORD PTR first_frame$[rsp], 0
	je	$LN42@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+36], 0
	jle	$LN42@stbi__gif_
; Line 6819
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN15@stbi__gif_
$LN13@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN15@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	$LN14@stbi__gif_
; Line 6820
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN43@stbi__gif_
; Line 6821
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 6822
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN43@stbi__gif_:
; Line 6824
	jmp	$LN13@stbi__gif_
$LN14@stbi__gif_:
$LN42@stbi__gif_:
; Line 6827
	mov	rax, QWORD PTR o$8[rsp]
	jmp	$LN1@stbi__gif_
$LN44@stbi__gif_:
; Line 6833
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR ext$7[rsp], eax
; Line 6834
	cmp	DWORD PTR ext$7[rsp], 249		; 000000f9H
	jne	$LN45@stbi__gif_
; Line 6835
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
; Line 6836
	cmp	DWORD PTR len$1[rsp], 4
	jne	$LN46@stbi__gif_
; Line 6837
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 6838
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	imul	eax, eax, 10
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34920], eax
; Line 6841
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN48@stbi__gif_
; Line 6842
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
$LN48@stbi__gif_:
; Line 6844
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN49@stbi__gif_
; Line 6845
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 6846
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN51@stbi__gif_
; Line 6847
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 0
$LN51@stbi__gif_:
; Line 6849
	jmp	SHORT $LN50@stbi__gif_
$LN49@stbi__gif_:
; Line 6851
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6852
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
$LN50@stbi__gif_:
; Line 6854
	jmp	SHORT $LN47@stbi__gif_
$LN46@stbi__gif_:
; Line 6855
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6856
	jmp	SHORT $LN11@stbi__gif_
$LN47@stbi__gif_:
$LN45@stbi__gif_:
$LN16@stbi__gif_:
; Line 6859
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
	cmp	DWORD PTR len$1[rsp], 0
	je	SHORT $LN17@stbi__gif_
; Line 6860
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6861
	jmp	SHORT $LN16@stbi__gif_
$LN17@stbi__gif_:
; Line 6862
	jmp	SHORT $LN11@stbi__gif_
$LN52@stbi__gif_:
; Line 6866
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN53@stbi__gif_:
; Line 6869
	lea	rcx, OFFSET FLAT:$SG101585
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN65@stbi__gif_
	mov	DWORD PTR tv413[rsp], 0
	jmp	SHORT $LN66@stbi__gif_
$LN65@stbi__gif_:
	mov	DWORD PTR tv413[rsp], 0
$LN66@stbi__gif_:
	movsxd	rax, DWORD PTR tv413[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN11@stbi__gif_:
; Line 6871
	jmp	$LN8@stbi__gif_
$LN1@stbi__gif_:
; Line 6872
	add	rsp, 136				; 00000088H
	ret	0
?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ENDP ; stbi__gif_load_next
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lzw_cs$ = 32
tv194 = 33
avail$ = 36
len$ = 40
codesize$ = 44
init_code$ = 48
code$1 = 52
valid_bits$ = 56
bits$ = 60
clear$ = 64
oldcode$ = 68
codemask$ = 72
first$ = 76
tv163 = 80
tv177 = 84
tv199 = 88
tv212 = 92
p$ = 96
tv244 = 104
tv248 = 108
tv275 = 112
tv302 = 116
tv172 = 120
s$ = 144
g$ = 152
?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z PROC ; stbi__process_gif_raster
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6614
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 6621
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR lzw_cs$[rsp], al
; Line 6622
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	cmp	eax, 12
	jle	SHORT $LN10@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 6623
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv244[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv244[rsp]
	shl	eax, cl
	mov	DWORD PTR clear$[rsp], eax
; Line 6624
	mov	DWORD PTR first$[rsp], 1
; Line 6625
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6626
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv248[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv248[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6627
	mov	DWORD PTR bits$[rsp], 0
; Line 6628
	mov	DWORD PTR valid_bits$[rsp], 0
; Line 6629
	mov	DWORD PTR init_code$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR init_code$[rsp]
	inc	eax
	mov	DWORD PTR init_code$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR init_code$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 6630
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	ecx, -1
	mov	rdx, QWORD PTR g$[rsp]
	mov	WORD PTR [rdx+rax*4+2100], cx
; Line 6631
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2102], dl
; Line 6632
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2103], dl
; Line 6633
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 6636
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6637
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6639
	mov	DWORD PTR len$[rsp], 0
$LN5@stbi__proc:
; Line 6641
	mov	eax, DWORD PTR codesize$[rsp]
	cmp	DWORD PTR valid_bits$[rsp], eax
	jge	SHORT $LN11@stbi__proc
; Line 6642
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN13@stbi__proc
; Line 6643
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6644
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN14@stbi__proc
; Line 6645
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
$LN13@stbi__proc:
; Line 6647
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6648
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR valid_bits$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bits$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bits$[rsp], eax
; Line 6649
	mov	eax, DWORD PTR valid_bits$[rsp]
	add	eax, 8
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6650
	jmp	$LN12@stbi__proc
$LN11@stbi__proc:
; Line 6651
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR bits$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$1[rsp], eax
; Line 6652
	mov	eax, DWORD PTR codesize$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR bits$[rsp]
	sar	eax, cl
	mov	DWORD PTR bits$[rsp], eax
; Line 6653
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, DWORD PTR valid_bits$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6655
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN15@stbi__proc
; Line 6656
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6657
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv275[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv275[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6658
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6659
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6660
	mov	DWORD PTR first$[rsp], 0
	jmp	$LN16@stbi__proc
$LN15@stbi__proc:
; Line 6661
	mov	eax, DWORD PTR clear$[rsp]
	inc	eax
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN17@stbi__proc
; Line 6662
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN8@stbi__proc:
; Line 6663
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN9@stbi__proc
; Line 6664
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
	jmp	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
; Line 6665
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
	jmp	$LN18@stbi__proc
$LN17@stbi__proc:
; Line 6666
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jg	$LN19@stbi__proc
; Line 6667
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN21@stbi__proc
; Line 6668
	lea	rcx, OFFSET FLAT:$SG101484
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN28@stbi__proc
	mov	DWORD PTR tv163[rsp], 0
	jmp	SHORT $LN29@stbi__proc
$LN28@stbi__proc:
	mov	DWORD PTR tv163[rsp], 0
$LN29@stbi__proc:
	movsxd	rax, DWORD PTR tv163[rsp]
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 6671
	cmp	DWORD PTR oldcode$[rsp], 0
	jl	$LN22@stbi__proc
; Line 6672
	movsxd	rax, DWORD PTR avail$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+2100]
	mov	QWORD PTR tv172[rsp], rax
	mov	eax, DWORD PTR avail$[rsp]
	inc	eax
	mov	DWORD PTR avail$[rsp], eax
	mov	rax, QWORD PTR tv172[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 6673
	cmp	DWORD PTR avail$[rsp], 8192		; 00002000H
	jle	SHORT $LN24@stbi__proc
; Line 6674
	lea	rcx, OFFSET FLAT:$SG101488
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN30@stbi__proc
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN31@stbi__proc
$LN30@stbi__proc:
	mov	DWORD PTR tv177[rsp], 0
$LN31@stbi__proc:
	movsxd	rax, DWORD PTR tv177[rsp]
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 6677
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR oldcode$[rsp]
	mov	WORD PTR [rax], cx
; Line 6678
	movsxd	rax, DWORD PTR oldcode$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rdx+rax*4+2102]
	mov	BYTE PTR [rcx+2], al
; Line 6679
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN32@stbi__proc
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	BYTE PTR tv194[rsp], al
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
	movsxd	rax, DWORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2102]
	mov	BYTE PTR tv194[rsp], al
$LN33@stbi__proc:
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR tv194[rsp]
	mov	BYTE PTR [rax+3], cl
	jmp	SHORT $LN23@stbi__proc
$LN22@stbi__proc:
; Line 6680
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN25@stbi__proc
; Line 6681
	lea	rcx, OFFSET FLAT:$SG101490
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__proc
	mov	DWORD PTR tv199[rsp], 0
	jmp	SHORT $LN35@stbi__proc
$LN34@stbi__proc:
	mov	DWORD PTR tv199[rsp], 0
$LN35@stbi__proc:
	movsxd	rax, DWORD PTR tv199[rsp]
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
$LN23@stbi__proc:
; Line 6683
	movzx	edx, WORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	call	?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ; stbi__out_gif_code
; Line 6685
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR avail$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN26@stbi__proc
	cmp	DWORD PTR avail$[rsp], 4095		; 00000fffH
	jg	SHORT $LN26@stbi__proc
; Line 6686
	mov	eax, DWORD PTR codesize$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6687
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv302[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv302[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
$LN26@stbi__proc:
; Line 6690
	mov	eax, DWORD PTR code$1[rsp]
	mov	DWORD PTR oldcode$[rsp], eax
; Line 6691
	jmp	SHORT $LN20@stbi__proc
$LN19@stbi__proc:
; Line 6692
	lea	rcx, OFFSET FLAT:$SG101492
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN37@stbi__proc
$LN36@stbi__proc:
	mov	DWORD PTR tv212[rsp], 0
$LN37@stbi__proc:
	movsxd	rax, DWORD PTR tv212[rsp]
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
$LN18@stbi__proc:
$LN16@stbi__proc:
$LN12@stbi__proc:
; Line 6695
	jmp	$LN5@stbi__proc
$LN1@stbi__proc:
; Line 6696
	add	rsp, 136				; 00000088H
	ret	0
?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z ENDP ; stbi__process_gif_raster
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
idx$ = 32
tv256 = 36
c$ = 40
p$ = 48
g$ = 80
code$ = 88
?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z PROC		; stbi__out_gif_code
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6577
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6583
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movsx	eax, WORD PTR [rcx+rax*4+2100]
	test	eax, eax
	jl	SHORT $LN4@stbi__out_
; Line 6584
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, WORD PTR [rcx+rax*4+2100]
	mov	rcx, QWORD PTR g$[rsp]
	call	?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ; stbi__out_gif_code
$LN4@stbi__out_:
; Line 6586
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	SHORT $LN5@stbi__out_
	jmp	$LN1@stbi__out_
$LN5@stbi__out_:
; Line 6588
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34912]
	mov	DWORD PTR idx$[rsp], eax
; Line 6589
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 6590
	mov	eax, DWORD PTR idx$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax], 1
; Line 6592
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2103]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+34872]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR c$[rsp], rax
; Line 6593
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 128				; 00000080H
	jle	$LN6@stbi__out_
; Line 6594
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6595
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6596
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6597
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN6@stbi__out_:
; Line 6599
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	add	eax, 4
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34908], eax
; Line 6601
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34900]
	cmp	DWORD PTR [rax+34908], ecx
	jl	$LN7@stbi__out_
; Line 6602
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6603
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34912]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34884]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
$LN2@stbi__out_:
; Line 6605
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	$LN3@stbi__out_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+34880], 0
	jle	SHORT $LN3@stbi__out_
; Line 6606
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	mov	ecx, 1
	mov	DWORD PTR tv256[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv256[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+34916]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6607
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34884]
	sar	eax, 1
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
; Line 6608
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	dec	eax
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34880], eax
; Line 6609
	jmp	$LN2@stbi__out_
$LN3@stbi__out_:
$LN7@stbi__out_:
$LN1@stbi__out_:
; Line 6611
	add	rsp, 72					; 00000048H
	ret	0
?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ENDP		; stbi__out_gif_code
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$ = 32
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z PROC ; stbi__gif_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6562
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6563
	mov	ecx, 34928				; 00008870H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR g$[rsp], rax
; Line 6564
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG101417
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6565
	mov	r9d, 1
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ; stbi__gif_header
	test	eax, eax
	jne	SHORT $LN3@stbi__gif_
; Line 6566
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_free
; Line 6567
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6568
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN3@stbi__gif_:
; Line 6570
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN4@stbi__gif_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__gif_:
; Line 6571
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__gif_:
; Line 6572
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_free
; Line 6573
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6574
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z ENDP ; stbi__gif_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
version$ = 32
tv224 = 36
s$ = 64
g$ = 72
comp$ = 80
is_info$ = 88
?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z PROC ; stbi__gif_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6531
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6533
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6534
	lea	rcx, OFFSET FLAT:$SG101394
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6536
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR version$[rsp], al
; Line 6537
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 55					; 00000037H
	je	SHORT $LN4@stbi__gif_
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 57					; 00000039H
	je	SHORT $LN4@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG101396
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6538
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG101398
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6540
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:$SG101399
	mov	QWORD PTR [rax+rcx], rdx
; Line 6541
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 6542
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 6543
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 6544
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 6545
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 6546
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
; Line 6548
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG101401
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN6@stbi__gif_:
; Line 6549
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG101403
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN7@stbi__gif_:
; Line 6551
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN8@stbi__gif_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN8@stbi__gif_:
; Line 6553
	cmp	DWORD PTR is_info$[rsp], 0
	je	SHORT $LN9@stbi__gif_
	mov	eax, 1
	jmp	SHORT $LN1@stbi__gif_
$LN9@stbi__gif_:
; Line 6555
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN10@stbi__gif_
; Line 6556
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv224[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv224[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 52					; 00000034H
	mov	r9d, -1
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ; stbi__gif_parse_colortable
$LN10@stbi__gif_:
; Line 6558
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6559
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ENDP ; stbi__gif_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv93 = 36
s$ = 64
pal$ = 72
num_entries$ = 80
transp$ = 88
?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z PROC ; stbi__gif_parse_colortable
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6520
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6522
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR num_entries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__gif_
; Line 6523
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 6524
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 6525
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 6526
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR transp$[rsp], eax
	jne	SHORT $LN6@stbi__gif_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN6@stbi__gif_:
	mov	DWORD PTR tv93[rsp], 255		; 000000ffH
$LN7@stbi__gif_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pal$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	edx, BYTE PTR tv93[rsp]
	mov	BYTE PTR [rax+rcx], dl
; Line 6527
	jmp	$LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6528
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ENDP ; stbi__gif_parse_colortable
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
s$ = 64
?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z PROC	; stbi__gif_test_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6503
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6505
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6506
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 6507
	cmp	DWORD PTR sz$[rsp], 57			; 00000039H
	je	SHORT $LN4@stbi__gif_
	cmp	DWORD PTR sz$[rsp], 55			; 00000037H
	je	SHORT $LN4@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6508
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6509
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6510
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z ENDP	; stbi__gif_test_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$1 = 32
count$2 = 36
i$3 = 40
dest$4 = 48
num_packets$ = 56
left$5 = 60
left$6 = 64
packet_idx$7 = 68
y$ = 72
act_comp$ = 76
tv157 = 80
x$8 = 84
i$9 = 88
packet$10 = 96
tv69 = 104
tv130 = 108
tv138 = 112
tv143 = 116
tv161 = 120
tv182 = 124
tv214 = 128
tv225 = 132
tv247 = 136
packet$11 = 144
chained$ = 152
value$12 = 156
value$13 = 160
tv76 = 168
packets$ = 176
__$ArrayPad$ = 208
s$ = 240
width$ = 248
height$ = 256
comp$ = 264
result$ = 272
?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z PROC ; stbi__pic_load_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6313
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6314
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
$LN4@stbi__pic_:
; Line 6322
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN29@stbi__pic_
; Line 6323
	lea	rcx, OFFSET FLAT:$SG101239
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__pic_
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN51@stbi__pic_
$LN50@stbi__pic_:
	mov	DWORD PTR tv69[rsp], 0
$LN51@stbi__pic_:
	movsxd	rax, DWORD PTR tv69[rsp]
	jmp	$LN1@stbi__pic_
$LN29@stbi__pic_:
; Line 6325
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR tv76[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
	mov	rax, QWORD PTR tv76[rsp]
	mov	QWORD PTR packet$11[rsp], rax
; Line 6327
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 6328
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx], al
; Line 6329
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 6330
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 6332
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 6334
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN30@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101241
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN52@stbi__pic_
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN53@stbi__pic_
$LN52@stbi__pic_:
	mov	DWORD PTR tv130[rsp], 0
$LN53@stbi__pic_:
	movsxd	rax, DWORD PTR tv130[rsp]
	jmp	$LN1@stbi__pic_
$LN30@stbi__pic_:
; Line 6335
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN31@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101243
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN54@stbi__pic_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN55@stbi__pic_
$LN54@stbi__pic_:
	mov	DWORD PTR tv138[rsp], 0
$LN55@stbi__pic_:
	movsxd	rax, DWORD PTR tv138[rsp]
	jmp	$LN1@stbi__pic_
$LN31@stbi__pic_:
; Line 6336
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 6338
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN56@stbi__pic_
	mov	DWORD PTR tv143[rsp], 4
	jmp	SHORT $LN57@stbi__pic_
$LN56@stbi__pic_:
	mov	DWORD PTR tv143[rsp], 3
$LN57@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv143[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6340
	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN7@stbi__pic_
$LN5@stbi__pic_:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN7@stbi__pic_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN6@stbi__pic_
; Line 6343
	mov	DWORD PTR packet_idx$7[rsp], 0
	jmp	SHORT $LN10@stbi__pic_
$LN8@stbi__pic_:
	mov	eax, DWORD PTR packet_idx$7[rsp]
	inc	eax
	mov	DWORD PTR packet_idx$7[rsp], eax
$LN10@stbi__pic_:
	mov	eax, DWORD PTR num_packets$[rsp]
	cmp	DWORD PTR packet_idx$7[rsp], eax
	jge	$LN9@stbi__pic_
; Line 6344
	movsxd	rax, DWORD PTR packet_idx$7[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$10[rsp], rax
; Line 6345
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$4[rsp], rax
; Line 6347
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	BYTE PTR tv157[rsp], al
	cmp	BYTE PTR tv157[rsp], 0
	je	SHORT $LN33@stbi__pic_
	cmp	BYTE PTR tv157[rsp], 1
	je	$LN35@stbi__pic_
	cmp	BYTE PTR tv157[rsp], 2
	je	$LN39@stbi__pic_
; Line 6349
	lea	rcx, OFFSET FLAT:$SG101245
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__pic_
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN59@stbi__pic_
$LN58@stbi__pic_:
	mov	DWORD PTR tv161[rsp], 0
$LN59@stbi__pic_:
	movsxd	rax, DWORD PTR tv161[rsp]
	jmp	$LN1@stbi__pic_
$LN33@stbi__pic_:
; Line 6354
	mov	DWORD PTR x$8[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN13@stbi__pic_:
	mov	eax, DWORD PTR x$8[rsp]
	inc	eax
	mov	DWORD PTR x$8[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN15@stbi__pic_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$8[rsp], eax
	jge	SHORT $LN14@stbi__pic_
; Line 6355
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN34@stbi__pic_
; Line 6356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN34@stbi__pic_:
	jmp	SHORT $LN13@stbi__pic_
$LN14@stbi__pic_:
; Line 6357
	jmp	$LN11@stbi__pic_
$LN35@stbi__pic_:
; Line 6362
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$5[rsp], eax
$LN16@stbi__pic_:
; Line 6364
	cmp	DWORD PTR left$5[rsp], 0
	jle	$LN17@stbi__pic_
; Line 6367
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR count$1[rsp], al
; Line 6368
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN36@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101250
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__pic_
	mov	DWORD PTR tv182[rsp], 0
	jmp	SHORT $LN61@stbi__pic_
$LN60@stbi__pic_:
	mov	DWORD PTR tv182[rsp], 0
$LN61@stbi__pic_:
	movsxd	rax, DWORD PTR tv182[rsp]
	jmp	$LN1@stbi__pic_
$LN36@stbi__pic_:
; Line 6370
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	eax, DWORD PTR left$5[rsp]
	jle	SHORT $LN37@stbi__pic_
; Line 6371
	movzx	eax, BYTE PTR left$5[rsp]
	mov	BYTE PTR count$1[rsp], al
$LN37@stbi__pic_:
; Line 6373
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN38@stbi__pic_
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN38@stbi__pic_:
; Line 6375
	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN20@stbi__pic_
$LN18@stbi__pic_:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN20@stbi__pic_:
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jge	SHORT $LN19@stbi__pic_
; Line 6376
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	?stbi__copyval@@YAXHPEAEPEBE@Z		; stbi__copyval
	jmp	SHORT $LN18@stbi__pic_
$LN19@stbi__pic_:
; Line 6377
	movzx	eax, BYTE PTR count$1[rsp]
	mov	ecx, DWORD PTR left$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$5[rsp], eax
; Line 6378
	jmp	$LN16@stbi__pic_
$LN17@stbi__pic_:
; Line 6380
	jmp	$LN11@stbi__pic_
$LN39@stbi__pic_:
; Line 6383
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$6[rsp], eax
$LN21@stbi__pic_:
; Line 6384
	cmp	DWORD PTR left$6[rsp], 0
	jle	$LN22@stbi__pic_
; Line 6385
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR count$2[rsp], eax
; Line 6386
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN40@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101255
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__pic_
	mov	DWORD PTR tv214[rsp], 0
	jmp	SHORT $LN63@stbi__pic_
$LN62@stbi__pic_:
	mov	DWORD PTR tv214[rsp], 0
$LN63@stbi__pic_:
	movsxd	rax, DWORD PTR tv214[rsp]
	jmp	$LN1@stbi__pic_
$LN40@stbi__pic_:
; Line 6388
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jl	$LN41@stbi__pic_
; Line 6391
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jne	SHORT $LN43@stbi__pic_
; Line 6392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR count$2[rsp], eax
	jmp	SHORT $LN44@stbi__pic_
$LN43@stbi__pic_:
; Line 6394
	mov	eax, DWORD PTR count$2[rsp]
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR count$2[rsp], eax
$LN44@stbi__pic_:
; Line 6395
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN45@stbi__pic_
; Line 6396
	lea	rcx, OFFSET FLAT:$SG101261
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__pic_
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN65@stbi__pic_
$LN64@stbi__pic_:
	mov	DWORD PTR tv225[rsp], 0
$LN65@stbi__pic_:
	movsxd	rax, DWORD PTR tv225[rsp]
	jmp	$LN1@stbi__pic_
$LN45@stbi__pic_:
; Line 6398
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN46@stbi__pic_
; Line 6399
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN46@stbi__pic_:
; Line 6401
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN25@stbi__pic_
$LN23@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN25@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN24@stbi__pic_
; Line 6402
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	?stbi__copyval@@YAXHPEAEPEBE@Z		; stbi__copyval
	jmp	SHORT $LN23@stbi__pic_
$LN24@stbi__pic_:
; Line 6403
	jmp	$LN42@stbi__pic_
$LN41@stbi__pic_:
; Line 6404
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
; Line 6405
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN47@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101264
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__pic_
	mov	DWORD PTR tv247[rsp], 0
	jmp	SHORT $LN67@stbi__pic_
$LN66@stbi__pic_:
	mov	DWORD PTR tv247[rsp], 0
$LN67@stbi__pic_:
	movsxd	rax, DWORD PTR tv247[rsp]
	jmp	SHORT $LN1@stbi__pic_
$LN47@stbi__pic_:
; Line 6407
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN28@stbi__pic_
$LN26@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN28@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN27@stbi__pic_
; Line 6408
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN48@stbi__pic_
; Line 6409
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN48@stbi__pic_:
	jmp	SHORT $LN26@stbi__pic_
$LN27@stbi__pic_:
$LN42@stbi__pic_:
; Line 6411
	mov	eax, DWORD PTR count$2[rsp]
	mov	ecx, DWORD PTR left$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$6[rsp], eax
; Line 6412
	jmp	$LN21@stbi__pic_
$LN22@stbi__pic_:
$LN11@stbi__pic_:
; Line 6416
	jmp	$LN8@stbi__pic_
$LN9@stbi__pic_:
; Line 6417
	jmp	$LN5@stbi__pic_
$LN6@stbi__pic_:
; Line 6419
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6420
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z ENDP ; stbi__pic_load_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
mask$ = 4
channel$ = 32
dest$ = 40
src$ = 48
?stbi__copyval@@YAXHPEAEPEBE@Z PROC			; stbi__copyval
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6304
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 6305
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__copy
$LN2@stbi__copy:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__copy:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__copy
; Line 6308
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__copy
; Line 6309
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	r8, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__copy:
	jmp	SHORT $LN2@stbi__copy
$LN3@stbi__copy:
; Line 6310
	add	rsp, 24
	ret	0
?stbi__copyval@@YAXHPEAEPEBE@Z ENDP			; stbi__copyval
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
mask$ = 36
tv75 = 40
s$ = 64
channel$ = 72
dest$ = 80
?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z PROC	; stbi__readval
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6290
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6291
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6293
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__read
$LN2@stbi__read:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__read:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__read
; Line 6294
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__read
; Line 6295
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN6@stbi__read
	lea	rcx, OFFSET FLAT:$SG101157
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__read
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN9@stbi__read
$LN8@stbi__read:
	mov	DWORD PTR tv75[rsp], 0
$LN9@stbi__read:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbi__read
$LN6@stbi__read:
; Line 6296
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__read:
; Line 6298
	jmp	SHORT $LN2@stbi__read
$LN3@stbi__read:
; Line 6300
	mov	rax, QWORD PTR dest$[rsp]
$LN1@stbi__read:
; Line 6301
	add	rsp, 56					; 00000038H
	ret	0
?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ENDP	; stbi__readval
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z PROC	; stbi__pic_test_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6269
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6272
	lea	rdx, OFFSET FLAT:$SG101125
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN5@stbi__pic_
; Line 6273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
; Line 6275
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 84			; 00000054H
	jge	SHORT $LN3@stbi__pic_
; Line 6276
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6278
	lea	rdx, OFFSET FLAT:$SG101127
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN6@stbi__pic_
; Line 6279
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6281
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6282
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z ENDP	; stbi__pic_test_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
str$ = 72
?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z PROC	; stbi__pic_is4
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6259
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6261
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__pic_
; Line 6262
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__pic_
; Line 6263
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6265
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6266
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ENDP	; stbi__pic_is4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$1 = 32
len$ = 36
count$ = 40
nleft$ = 44
s$ = 64
p$ = 72
pixelCount$ = 80
?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z PROC ; stbi__psd_decode_rle
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6011
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6014
	mov	DWORD PTR count$[rsp], 0
$LN2@stbi__psd_:
; Line 6015
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR pixelCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$[rsp], eax
	cmp	DWORD PTR nleft$[rsp], 0
	jle	$LN3@stbi__psd_
; Line 6016
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6017
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jne	SHORT $LN8@stbi__psd_
	jmp	$LN9@stbi__psd_
$LN8@stbi__psd_:
; Line 6019
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jge	SHORT $LN10@stbi__psd_
; Line 6021
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6022
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN12@stbi__psd_
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN12@stbi__psd_:
; Line 6023
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN4@stbi__psd_:
; Line 6024
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN5@stbi__psd_
; Line 6025
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx], al
; Line 6026
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6027
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6028
	jmp	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 6029
	jmp	SHORT $LN11@stbi__psd_
$LN10@stbi__psd_:
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jle	SHORT $LN13@stbi__psd_
; Line 6033
	mov	eax, 257				; 00000101H
	sub	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR len$[rsp], eax
; Line 6034
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN14@stbi__psd_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN14@stbi__psd_:
; Line 6035
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR val$1[rsp], al
; Line 6036
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN6@stbi__psd_:
; Line 6037
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN7@stbi__psd_
; Line 6038
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
; Line 6039
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6040
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6041
	jmp	SHORT $LN6@stbi__psd_
$LN7@stbi__psd_:
$LN13@stbi__psd_:
$LN11@stbi__psd_:
$LN9@stbi__psd_:
; Line 6043
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6045
	mov	eax, 1
$LN1@stbi__psd_:
; Line 6046
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z ENDP ; stbi__psd_decode_rle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
px$ = 32
fiveBitMask$ = 36
r$ = 40
g$ = 44
b$ = 48
s$ = 80
out$ = 88
?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z PROC ; stbi__tga_read_rgb16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5775
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5776
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	WORD PTR px$[rsp], ax
; Line 5777
	mov	eax, 31
	mov	WORD PTR fiveBitMask$[rsp], ax
; Line 5779
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 10
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 5780
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 5
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR g$[rsp], eax
; Line 5781
	movzx	eax, WORD PTR px$[rsp]
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 5783
	imul	eax, DWORD PTR r$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5784
	imul	eax, DWORD PTR g$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5785
	imul	eax, DWORD PTR b$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5791
	add	rsp, 72					; 00000048H
	ret	0
?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ENDP ; stbi__tga_read_rgb16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
bits_per_pixel$ = 32
is_grey$ = 40
is_rgb16$ = 48
?stbi__tga_get_comp@@YAHHHPEAH@Z PROC			; stbi__tga_get_comp
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5662
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5664
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN4@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbi__tga_:
; Line 5665
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 8
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 24
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $LN12@stbi__tga_
$LN5@stbi__tga_:
; Line 5666
	mov	eax, 1
	jmp	SHORT $LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5667
	cmp	DWORD PTR is_grey$[rsp], 0
	je	SHORT $LN7@stbi__tga_
	mov	eax, 2
	jmp	SHORT $LN1@stbi__tga_
$LN7@stbi__tga_:
$LN8@stbi__tga_:
; Line 5669
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN9@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 1
$LN9@stbi__tga_:
; Line 5670
	mov	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN10@stbi__tga_:
$LN11@stbi__tga_:
; Line 5672
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5673
	xor	eax, eax
$LN1@stbi__tga_:
; Line 5675
	add	rsp, 24
	ret	0
?stbi__tga_get_comp@@YAHHHPEAH@Z ENDP			; stbi__tga_get_comp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsz$ = 32
compress$1 = 36
i$2 = 40
tv75 = 44
tv128 = 48
tv138 = 52
tv159 = 56
tv172 = 60
tv178 = 64
tv188 = 68
tv231 = 72
tv236 = 76
tv243 = 80
s$ = 112
info$ = 120
?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z PROC ; stbi__bmp_parse_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5385
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5387
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN6@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN5@stbi__bmp_
$LN6@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG100495
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN32@stbi__bmp_
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN33@stbi__bmp_
$LN32@stbi__bmp_:
	mov	DWORD PTR tv75[rsp], 0
$LN33@stbi__bmp_:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	$LN1@stbi__bmp_
$LN5@stbi__bmp_:
; Line 5388
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5389
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5390
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5391
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR hsz$[rsp], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR hsz$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 5393
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 5394
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+32], 14
; Line 5396
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jge	SHORT $LN7@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100497
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__bmp_
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN35@stbi__bmp_
$LN34@stbi__bmp_:
	mov	DWORD PTR tv128[rsp], 0
$LN35@stbi__bmp_:
	movsxd	rax, DWORD PTR tv128[rsp]
	jmp	$LN1@stbi__bmp_
$LN7@stbi__bmp_:
; Line 5398
	cmp	DWORD PTR hsz$[rsp], 12
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN8@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100499
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__bmp_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN37@stbi__bmp_
$LN36@stbi__bmp_:
	mov	DWORD PTR tv138[rsp], 0
$LN37@stbi__bmp_:
	movsxd	rax, DWORD PTR tv138[rsp]
	jmp	$LN1@stbi__bmp_
$LN8@stbi__bmp_:
; Line 5399
	cmp	DWORD PTR hsz$[rsp], 12
	jne	SHORT $LN9@stbi__bmp_
; Line 5400
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5401
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5402
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5403
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5404
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN10@stbi__bmp_:
; Line 5406
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	je	SHORT $LN11@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100503
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN38@stbi__bmp_
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
	mov	DWORD PTR tv159[rsp], 0
$LN39@stbi__bmp_:
	movsxd	rax, DWORD PTR tv159[rsp]
	jmp	$LN1@stbi__bmp_
$LN11@stbi__bmp_:
; Line 5407
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5408
	cmp	DWORD PTR hsz$[rsp], 12
	je	$LN12@stbi__bmp_
; Line 5409
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR compress$1[rsp], eax
; Line 5410
	cmp	DWORD PTR compress$1[rsp], 1
	je	SHORT $LN14@stbi__bmp_
	cmp	DWORD PTR compress$1[rsp], 2
	jne	SHORT $LN13@stbi__bmp_
$LN14@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG100507
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN40@stbi__bmp_
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN41@stbi__bmp_
$LN40@stbi__bmp_:
	mov	DWORD PTR tv172[rsp], 0
$LN41@stbi__bmp_:
	movsxd	rax, DWORD PTR tv172[rsp]
	jmp	$LN1@stbi__bmp_
$LN13@stbi__bmp_:
; Line 5411
	cmp	DWORD PTR compress$1[rsp], 4
	jl	SHORT $LN15@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100509
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN42@stbi__bmp_
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN43@stbi__bmp_
$LN42@stbi__bmp_:
	mov	DWORD PTR tv178[rsp], 0
$LN43@stbi__bmp_:
	movsxd	rax, DWORD PTR tv178[rsp]
	jmp	$LN1@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5412
	cmp	DWORD PTR compress$1[rsp], 3
	jne	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	je	SHORT $LN16@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100511
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN44@stbi__bmp_
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
	mov	DWORD PTR tv188[rsp], 0
$LN45@stbi__bmp_:
	movsxd	rax, DWORD PTR tv188[rsp]
	jmp	$LN1@stbi__bmp_
$LN16@stbi__bmp_:
; Line 5413
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5414
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5415
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5416
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5417
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5418
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN19@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	$LN17@stbi__bmp_
$LN19@stbi__bmp_:
; Line 5419
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	SHORT $LN20@stbi__bmp_
; Line 5420
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5421
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5422
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5423
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
$LN20@stbi__bmp_:
; Line 5425
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN22@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	$LN21@stbi__bmp_
$LN22@stbi__bmp_:
; Line 5426
	cmp	DWORD PTR compress$1[rsp], 0
	jne	SHORT $LN23@stbi__bmp_
; Line 5427
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ; stbi__bmp_set_mask_defaults
	jmp	$LN24@stbi__bmp_
$LN23@stbi__bmp_:
; Line 5428
	cmp	DWORD PTR compress$1[rsp], 3
	jne	$LN25@stbi__bmp_
; Line 5429
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5430
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5431
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5432
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, 12
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 5434
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN27@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN27@stbi__bmp_
; Line 5436
	lea	rcx, OFFSET FLAT:$SG100523
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN46@stbi__bmp_
	mov	DWORD PTR tv231[rsp], 0
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
	mov	DWORD PTR tv231[rsp], 0
$LN47@stbi__bmp_:
	movsxd	rax, DWORD PTR tv231[rsp]
	jmp	$LN1@stbi__bmp_
$LN27@stbi__bmp_:
; Line 5438
	jmp	SHORT $LN26@stbi__bmp_
$LN25@stbi__bmp_:
; Line 5439
	lea	rcx, OFFSET FLAT:$SG100524
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN48@stbi__bmp_
	mov	DWORD PTR tv236[rsp], 0
	jmp	SHORT $LN49@stbi__bmp_
$LN48@stbi__bmp_:
	mov	DWORD PTR tv236[rsp], 0
$LN49@stbi__bmp_:
	movsxd	rax, DWORD PTR tv236[rsp]
	jmp	$LN1@stbi__bmp_
$LN26@stbi__bmp_:
$LN24@stbi__bmp_:
$LN21@stbi__bmp_:
; Line 5441
	jmp	$LN18@stbi__bmp_
$LN17@stbi__bmp_:
; Line 5444
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN28@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN28@stbi__bmp_
; Line 5445
	lea	rcx, OFFSET FLAT:$SG100526
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__bmp_
	mov	DWORD PTR tv243[rsp], 0
	jmp	SHORT $LN51@stbi__bmp_
$LN50@stbi__bmp_:
	mov	DWORD PTR tv243[rsp], 0
$LN51@stbi__bmp_:
	movsxd	rax, DWORD PTR tv243[rsp]
	jmp	$LN1@stbi__bmp_
$LN28@stbi__bmp_:
; Line 5446
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5447
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5448
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5449
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 5450
	cmp	DWORD PTR compress$1[rsp], 3
	je	SHORT $LN29@stbi__bmp_
; Line 5451
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ; stbi__bmp_set_mask_defaults
$LN29@stbi__bmp_:
; Line 5452
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5453
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbi__bmp_:
	cmp	DWORD PTR i$2[rsp], 12
	jge	SHORT $LN3@stbi__bmp_
; Line 5454
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	jmp	SHORT $LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5455
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	jne	SHORT $LN30@stbi__bmp_
; Line 5456
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5457
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5458
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5459
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
$LN30@stbi__bmp_:
$LN18@stbi__bmp_:
$LN12@stbi__bmp_:
; Line 5463
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 5464
	add	rsp, 104				; 00000068H
	ret	0
?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ENDP ; stbi__bmp_parse_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
compress$ = 16
?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z PROC ; stbi__bmp_set_mask_defaults
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5359
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 5361
	cmp	DWORD PTR compress$[rsp], 3
	jne	SHORT $LN2@stbi__bmp_
; Line 5362
	mov	eax, 1
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5364
	cmp	DWORD PTR compress$[rsp], 0
	jne	$LN3@stbi__bmp_
; Line 5365
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN4@stbi__bmp_
; Line 5366
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 31744		; 00007c00H
; Line 5367
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 992			; 000003e0H
; Line 5368
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 31
	jmp	SHORT $LN5@stbi__bmp_
$LN4@stbi__bmp_:
; Line 5369
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	SHORT $LN6@stbi__bmp_
; Line 5370
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 16711680		; 00ff0000H
; Line 5371
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 65280		; 0000ff00H
; Line 5372
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 255			; 000000ffH
; Line 5373
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], -16777216		; ff000000H
; Line 5374
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 5375
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 5379
	mov	eax, 1
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5381
	xor	eax, eax
$LN1@stbi__bmp_:
; Line 5382
	ret	0
?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ENDP ; stbi__bmp_set_mask_defaults
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
shift$ = 56
bits$ = 64
?stbi__shiftsigned@@YAHIHH@Z PROC			; stbi__shiftsigned
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5332
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 5341
	cmp	DWORD PTR shift$[rsp], 0
	jge	SHORT $LN2@stbi__shif
; Line 5342
	mov	eax, DWORD PTR shift$[rsp]
	neg	eax
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, cl
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN3@stbi__shif
$LN2@stbi__shif:
; Line 5344
	mov	eax, DWORD PTR shift$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
$LN3@stbi__shif:
; Line 5345
	cmp	DWORD PTR v$[rsp], 256			; 00000100H
	jb	SHORT $LN5@stbi__shif
	mov	r8d, 5345				; 000014e1H
	lea	rdx, OFFSET FLAT:$SG100427
	lea	rcx, OFFSET FLAT:$SG100428
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbi__shif:
; Line 5346
	mov	eax, 8
	sub	eax, DWORD PTR bits$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
; Line 5347
	cmp	DWORD PTR bits$[rsp], 0
	jl	SHORT $LN6@stbi__shif
	cmp	DWORD PTR bits$[rsp], 8
	jle	SHORT $LN7@stbi__shif
$LN6@stbi__shif:
	mov	r8d, 5347				; 000014e3H
	lea	rdx, OFFSET FLAT:$SG100429
	lea	rcx, OFFSET FLAT:$SG100430
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbi__shif:
; Line 5348
	movsxd	rax, DWORD PTR bits$[rsp]
	lea	rcx, OFFSET FLAT:?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
	mov	edx, DWORD PTR v$[rsp]
	imul	edx, DWORD PTR [rcx+rax*4]
	mov	eax, edx
	movsxd	rcx, DWORD PTR bits$[rsp]
	lea	rdx, OFFSET FLAT:?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
	mov	ecx, DWORD PTR [rdx+rcx*4]
	sar	eax, cl
; Line 5349
	add	rsp, 40					; 00000028H
	ret	0
?stbi__shiftsigned@@YAHIHH@Z ENDP			; stbi__shiftsigned
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
?stbi__bitcount@@YAHI@Z PROC				; stbi__bitcount
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5319
	mov	DWORD PTR [rsp+8], ecx
; Line 5320
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5321
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5322
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR a$[rsp], eax
; Line 5323
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5324
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5325
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
; Line 5326
	ret	0
?stbi__bitcount@@YAHI@Z ENDP				; stbi__bitcount
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
z$ = 32
?stbi__high_bit@@YAHI@Z PROC				; stbi__high_bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5307
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5308
	mov	DWORD PTR n$[rsp], 0
; Line 5309
	cmp	DWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbi__high
	mov	eax, -1
	jmp	$LN1@stbi__high
$LN2@stbi__high:
; Line 5310
	cmp	DWORD PTR z$[rsp], 65536		; 00010000H
	jb	SHORT $LN3@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 16
	mov	DWORD PTR z$[rsp], eax
$LN3@stbi__high:
; Line 5311
	cmp	DWORD PTR z$[rsp], 256			; 00000100H
	jb	SHORT $LN4@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 8
	mov	DWORD PTR z$[rsp], eax
$LN4@stbi__high:
; Line 5312
	cmp	DWORD PTR z$[rsp], 16
	jb	SHORT $LN5@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 4
	mov	DWORD PTR z$[rsp], eax
$LN5@stbi__high:
; Line 5313
	cmp	DWORD PTR z$[rsp], 4
	jb	SHORT $LN6@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 2
	mov	DWORD PTR z$[rsp], eax
$LN6@stbi__high:
; Line 5314
	cmp	DWORD PTR z$[rsp], 2
	jb	SHORT $LN7@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbi__high:
; Line 5315
	mov	eax, DWORD PTR n$[rsp]
$LN1@stbi__high:
; Line 5316
	add	rsp, 24
	ret	0
?stbi__high_bit@@YAHI@Z ENDP				; stbi__high_bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tv83 = 36
r$ = 40
s$ = 64
?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z PROC	; stbi__bmp_test_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5286
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	je	SHORT $LN2@stbi__bmp_
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5287
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN3@stbi__bmp_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5288
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5289
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5290
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5291
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5292
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR sz$[rsp], eax
; Line 5293
	cmp	DWORD PTR sz$[rsp], 12
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 40			; 00000028H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 56			; 00000038H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 108			; 0000006cH
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 124			; 0000007cH
	je	SHORT $LN5@stbi__bmp_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@stbi__bmp_
$LN5@stbi__bmp_:
	mov	DWORD PTR tv83[rsp], 1
$LN6@stbi__bmp_:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 5294
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__bmp_:
; Line 5295
	add	rsp, 56					; 00000038H
	ret	0
?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z ENDP	; stbi__bmp_test_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z PROC	; stbi__png_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5247
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5248
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ; stbi__parse_png_file
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5249
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5250
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5252
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__png_:
; Line 5253
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__png_:
; Line 5254
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__png_:
; Line 5255
	mov	eax, 1
$LN1@stbi__png_:
; Line 5256
	add	rsp, 40					; 00000028H
	ret	0
?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ENDP	; stbi__png_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
tv85 = 52
result$ = 56
p$ = 80
x$ = 88
y$ = 96
n$ = 104
req_comp$ = 112
ri$ = 120
?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__do_png
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5200
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5201
	mov	QWORD PTR result$[rsp], 0
; Line 5202
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN3@stbi__do_p
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN2@stbi__do_p
$LN3@stbi__do_p:
	lea	rcx, OFFSET FLAT:$SG100338
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__do_p
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN16@stbi__do_p
$LN15@stbi__do_p:
	mov	DWORD PTR tv69[rsp], 0
$LN16@stbi__do_p:
	movsxd	rax, DWORD PTR tv69[rsp]
	jmp	$LN1@stbi__do_p
$LN2@stbi__do_p:
; Line 5203
	mov	r8d, DWORD PTR req_comp$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ; stbi__parse_png_file
	test	eax, eax
	je	$LN4@stbi__do_p
; Line 5204
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 8
	jg	SHORT $LN5@stbi__do_p
; Line 5205
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
	jmp	SHORT $LN6@stbi__do_p
$LN5@stbi__do_p:
; Line 5206
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN7@stbi__do_p
; Line 5207
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
	jmp	SHORT $LN8@stbi__do_p
$LN7@stbi__do_p:
; Line 5209
	lea	rcx, OFFSET FLAT:$SG100344
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__do_p
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN18@stbi__do_p
$LN17@stbi__do_p:
	mov	DWORD PTR tv85[rsp], 0
$LN18@stbi__do_p:
	movsxd	rax, DWORD PTR tv85[rsp]
	jmp	$LN1@stbi__do_p
$LN8@stbi__do_p:
$LN6@stbi__do_p:
; Line 5210
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR result$[rsp], rax
; Line 5211
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5212
	cmp	DWORD PTR req_comp$[rsp], 0
	je	$LN9@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	$LN9@stbi__do_p
; Line 5213
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 8
	jne	SHORT $LN10@stbi__do_p
; Line 5214
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN11@stbi__do_p
$LN10@stbi__do_p:
; Line 5216
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format16@@YAPEAGPEAGHHII@Z ; stbi__convert_format16
	mov	QWORD PTR result$[rsp], rax
$LN11@stbi__do_p:
; Line 5217
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 5218
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN12@stbi__do_p
	mov	rax, QWORD PTR result$[rsp]
	jmp	$LN1@stbi__do_p
$LN12@stbi__do_p:
$LN9@stbi__do_p:
; Line 5220
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 5221
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 5222
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN13@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN13@stbi__do_p:
$LN4@stbi__do_p:
; Line 5224
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5225
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5226
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5228
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__do_p:
; Line 5229
	add	rsp, 72					; 00000048H
	ret	0
?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__do_png
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pal_img_n$ = 64
s$ = 72
has_trans$ = 80
i$ = 84
c$1 = 88
k$ = 96
idata_limit$ = 100
ioff$ = 104
color$ = 108
tv78 = 112
pal_len$ = 116
first$ = 120
tc$ = 124
interlace$ = 128
raw_len$2 = 132
is_iphone$ = 136
tv197 = 140
tv194 = 144
tv337 = 148
tv386 = 152
tv485 = 156
comp$3 = 160
filter$4 = 164
bpl$5 = 168
p$6 = 176
idata_limit_old$7 = 184
tc16$ = 188
palette$ = 208
__$ArrayPad$ = 1232
z$ = 1264
scan$ = 1272
req_comp$ = 1280
?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z PROC	; stbi__parse_png_file
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5024
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 1248				; 000004e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5025
	mov	BYTE PTR pal_img_n$[rsp], 0
; Line 5026
	mov	BYTE PTR has_trans$[rsp], 0
	lea	rax, QWORD PTR tc$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 3
	rep stosb
; Line 5028
	mov	DWORD PTR ioff$[rsp], 0
	mov	DWORD PTR idata_limit$[rsp], 0
	mov	DWORD PTR pal_len$[rsp], 0
; Line 5029
	mov	DWORD PTR first$[rsp], 1
	mov	DWORD PTR interlace$[rsp], 0
	mov	DWORD PTR color$[rsp], 0
	mov	DWORD PTR is_iphone$[rsp], 0
; Line 5030
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 5032
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5033
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5034
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5036
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ; stbi__check_png_header
	test	eax, eax
	jne	SHORT $LN21@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN21@stbi__pars:
; Line 5038
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN22@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
$LN2@stbi__pars:
; Line 5041
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z ; stbi__get_chunk_header
	mov	QWORD PTR c$1[rsp], rax
; Line 5042
	mov	eax, DWORD PTR c$1[rsp+4]
	mov	DWORD PTR tv78[rsp], eax
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	ja	SHORT $LN105@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	je	SHORT $LN24@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1130840649		; 43674249H
	je	SHORT $LN23@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229209940		; 49444154H
	je	$LN61@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229278788		; 49454e44H
	je	$LN70@stbi__pars
	jmp	$LN91@stbi__pars
$LN105@stbi__pars:
	cmp	DWORD PTR tv78[rsp], 1347179589		; 504c5445H
	je	$LN45@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1951551059		; 74524e53H
	je	$LN49@stbi__pars
	jmp	$LN91@stbi__pars
$LN23@stbi__pars:
; Line 5044
	mov	DWORD PTR is_iphone$[rsp], 1
; Line 5045
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5046
	jmp	$LN5@stbi__pars
$LN24@stbi__pars:
; Line 5049
	cmp	DWORD PTR first$[rsp], 0
	jne	SHORT $LN25@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100223
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN25@stbi__pars:
; Line 5050
	mov	DWORD PTR first$[rsp], 0
; Line 5051
	cmp	DWORD PTR c$1[rsp], 13
	je	SHORT $LN26@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100225
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN26@stbi__pars:
; Line 5052
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5053
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5054
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN27@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100227
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN27@stbi__pars:
; Line 5055
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN28@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100229
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN28@stbi__pars:
; Line 5056
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+32], eax
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 1
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 4
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 8
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	je	SHORT $LN29@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100231
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN29@stbi__pars:
; Line 5057
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR color$[rsp], eax
	cmp	DWORD PTR color$[rsp], 6
	jle	SHORT $LN30@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100233
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN30@stbi__pars:
; Line 5058
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN31@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN31@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100235
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN31@stbi__pars:
; Line 5059
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN32@stbi__pars
	mov	BYTE PTR pal_img_n$[rsp], 3
	jmp	SHORT $LN33@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN34@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100239
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN34@stbi__pars:
$LN33@stbi__pars:
; Line 5060
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR comp$3[rsp], eax
	cmp	DWORD PTR comp$3[rsp], 0
	je	SHORT $LN35@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100241
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN35@stbi__pars:
; Line 5061
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR filter$4[rsp], eax
	cmp	DWORD PTR filter$4[rsp], 0
	je	SHORT $LN36@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100243
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN36@stbi__pars:
; Line 5062
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR interlace$[rsp], eax
	cmp	DWORD PTR interlace$[rsp], 1
	jle	SHORT $LN37@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100245
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN37@stbi__pars:
; Line 5063
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN39@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN38@stbi__pars
$LN39@stbi__pars:
	lea	rcx, OFFSET FLAT:$SG100248
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN38@stbi__pars:
; Line 5064
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	jne	$LN40@stbi__pars
; Line 5065
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN95@stbi__pars
	mov	DWORD PTR tv194[rsp], 3
	jmp	SHORT $LN96@stbi__pars
$LN95@stbi__pars:
	mov	DWORD PTR tv194[rsp], 1
$LN96@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN97@stbi__pars
	mov	DWORD PTR tv197[rsp], 1
	jmp	SHORT $LN98@stbi__pars
$LN97@stbi__pars:
	mov	DWORD PTR tv197[rsp], 0
$LN98@stbi__pars:
	mov	eax, DWORD PTR tv197[rsp]
	mov	ecx, DWORD PTR tv194[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5066
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN42@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100252
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN42@stbi__pars:
; Line 5067
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN43@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN43@stbi__pars:
; Line 5068
	jmp	SHORT $LN41@stbi__pars
$LN40@stbi__pars:
; Line 5071
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 5072
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN44@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100255
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN44@stbi__pars:
$LN41@stbi__pars:
; Line 5075
	jmp	$LN5@stbi__pars
$LN45@stbi__pars:
; Line 5079
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN46@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100258
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN46@stbi__pars:
; Line 5080
	cmp	DWORD PTR c$1[rsp], 768			; 00000300H
	jbe	SHORT $LN47@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100260
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 5081
	xor	edx, edx
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, 3
	div	ecx
	mov	DWORD PTR pal_len$[rsp], eax
; Line 5082
	imul	eax, DWORD PTR pal_len$[rsp], 3
	cmp	eax, DWORD PTR c$1[rsp]
	je	SHORT $LN48@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100262
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 5083
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stbi__pars
$LN7@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stbi__pars:
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@stbi__pars
; Line 5084
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5085
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5086
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5087
	mov	eax, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	mov	eax, eax
	mov	BYTE PTR palette$[rsp+rax], 255		; 000000ffH
; Line 5088
	jmp	$LN7@stbi__pars
$LN8@stbi__pars:
; Line 5089
	jmp	$LN5@stbi__pars
$LN49@stbi__pars:
; Line 5093
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN50@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100265
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN50@stbi__pars:
; Line 5094
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN51@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100267
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 5095
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	$LN52@stbi__pars
; Line 5096
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN54@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 4
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN54@stbi__pars:
; Line 5097
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN55@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100272
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN55@stbi__pars:
; Line 5098
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR c$1[rsp], eax
	jbe	SHORT $LN56@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100274
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 5099
	mov	BYTE PTR pal_img_n$[rsp], 4
; Line 5100
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__pars
$LN10@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__pars:
	mov	eax, DWORD PTR c$1[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN11@stbi__pars
; Line 5101
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
	jmp	SHORT $LN10@stbi__pars
$LN11@stbi__pars:
; Line 5102
	jmp	$LN53@stbi__pars
$LN52@stbi__pars:
; Line 5103
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN57@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100276
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN57@stbi__pars:
; Line 5104
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, 1
	cmp	DWORD PTR c$1[rsp], eax
	je	SHORT $LN58@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100278
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN58@stbi__pars:
; Line 5105
	mov	BYTE PTR has_trans$[rsp], 1
; Line 5106
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN59@stbi__pars
; Line 5107
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN15@stbi__pars
$LN13@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	WORD PTR tc16$[rsp+rcx*2], ax
	jmp	SHORT $LN13@stbi__pars
$LN14@stbi__pars:
; Line 5108
	jmp	SHORT $LN60@stbi__pars
$LN59@stbi__pars:
; Line 5109
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__pars
$LN16@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN17@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	and	eax, 255				; 000000ffH
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rcx, DWORD PTR [rcx+32]
	lea	rdx, OFFSET FLAT:?stbi__depth_scale_table@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR tc$[rsp+rcx], al
	jmp	SHORT $LN16@stbi__pars
$LN17@stbi__pars:
$LN60@stbi__pars:
$LN53@stbi__pars:
; Line 5112
	jmp	$LN5@stbi__pars
$LN61@stbi__pars:
; Line 5116
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN62@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100283
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 5117
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN63@stbi__pars
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN63@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100285
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
; Line 5118
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN64@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN64@stbi__pars:
; Line 5119
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ioff$[rsp]
	jge	SHORT $LN65@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN65@stbi__pars:
; Line 5120
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	$LN66@stbi__pars
; Line 5121
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	DWORD PTR idata_limit_old$7[rsp], eax
; Line 5123
	cmp	DWORD PTR idata_limit$[rsp], 0
	jne	SHORT $LN67@stbi__pars
	cmp	DWORD PTR c$1[rsp], 4096		; 00001000H
	jbe	SHORT $LN99@stbi__pars
	mov	eax, DWORD PTR c$1[rsp]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN100@stbi__pars
$LN99@stbi__pars:
	mov	DWORD PTR tv337[rsp], 4096		; 00001000H
$LN100@stbi__pars:
	mov	eax, DWORD PTR tv337[rsp]
	mov	DWORD PTR idata_limit$[rsp], eax
$LN67@stbi__pars:
$LN19@stbi__pars:
; Line 5124
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	SHORT $LN20@stbi__pars
; Line 5125
	mov	eax, DWORD PTR idata_limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR idata_limit$[rsp], eax
	jmp	SHORT $LN19@stbi__pars
$LN20@stbi__pars:
; Line 5127
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR p$6[rsp], rax
	cmp	QWORD PTR p$6[rsp], 0
	jne	SHORT $LN68@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100291
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 5128
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN66@stbi__pars:
; Line 5130
	mov	eax, DWORD PTR ioff$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	r8d, DWORD PTR c$1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
	test	eax, eax
	jne	SHORT $LN69@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100293
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN69@stbi__pars:
; Line 5131
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ioff$[rsp], eax
; Line 5132
	jmp	$LN5@stbi__pars
$LN70@stbi__pars:
; Line 5137
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN71@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100296
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN71@stbi__pars:
; Line 5138
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN72@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN72@stbi__pars:
; Line 5139
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN73@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100299
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN73@stbi__pars:
; Line 5141
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+32]
	add	eax, 7
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR bpl$5[rsp], eax
; Line 5142
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR bpl$5[rsp]
	imul	ecx, DWORD PTR [rax+4]
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR raw_len$2[rsp], eax
; Line 5143
	cmp	DWORD PTR is_iphone$[rsp], 0
	jne	SHORT $LN101@stbi__pars
	mov	DWORD PTR tv386[rsp], 1
	jmp	SHORT $LN102@stbi__pars
$LN101@stbi__pars:
	mov	DWORD PTR tv386[rsp], 0
$LN102@stbi__pars:
	mov	eax, DWORD PTR tv386[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR raw_len$2[rsp]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	edx, DWORD PTR ioff$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbi_zlib_decode_malloc_guesssize_headerflag
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 5144
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN74@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN74@stbi__pars:
; Line 5145
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5146
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN78@stbi__pars
	cmp	DWORD PTR req_comp$[rsp], 3
	je	SHORT $LN78@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN77@stbi__pars
$LN78@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN75@stbi__pars
$LN77@stbi__pars:
; Line 5147
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
	jmp	SHORT $LN76@stbi__pars
$LN75@stbi__pars:
; Line 5149
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+12], ecx
$LN76@stbi__pars:
; Line 5150
	mov	eax, DWORD PTR interlace$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z ; stbi__create_png_image
	test	eax, eax
	jne	SHORT $LN79@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN79@stbi__pars:
; Line 5151
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN80@stbi__pars
; Line 5152
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN81@stbi__pars
; Line 5153
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc16$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z ; stbi__compute_transparency16
	test	eax, eax
	jne	SHORT $LN83@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN83@stbi__pars:
; Line 5154
	jmp	SHORT $LN82@stbi__pars
$LN81@stbi__pars:
; Line 5155
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z ; stbi__compute_transparency
	test	eax, eax
	jne	SHORT $LN84@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN84@stbi__pars:
$LN82@stbi__pars:
$LN80@stbi__pars:
; Line 5158
	cmp	DWORD PTR is_iphone$[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN103@stbi__pars
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv485[rsp], eax
	jmp	SHORT $LN104@stbi__pars
$LN103@stbi__pars:
	mov	eax, DWORD PTR ?stbi__de_iphone_flag_global@@3HA
	mov	DWORD PTR tv485[rsp], eax
$LN104@stbi__pars:
	cmp	DWORD PTR tv485[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 2
	jle	SHORT $LN85@stbi__pars
; Line 5159
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__de_iphone@@YAXPEAUstbi__png@@@Z	; stbi__de_iphone
$LN85@stbi__pars:
; Line 5160
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN86@stbi__pars
; Line 5162
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5163
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5164
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN88@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
$LN88@stbi__pars:
; Line 5165
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR pal_len$[rsp]
	lea	rdx, QWORD PTR palette$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z ; stbi__expand_png_palette
	test	eax, eax
	jne	SHORT $LN89@stbi__pars
; Line 5166
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN89@stbi__pars:
	jmp	SHORT $LN87@stbi__pars
$LN86@stbi__pars:
; Line 5167
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN90@stbi__pars
; Line 5169
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN90@stbi__pars:
$LN87@stbi__pars:
; Line 5171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5173
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 5174
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN91@stbi__pars:
; Line 5179
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN92@stbi__pars
	lea	rcx, OFFSET FLAT:$SG100319
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN92@stbi__pars:
; Line 5180
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 536870912				; 20000000H
	test	eax, eax
	jne	$LN93@stbi__pars
; Line 5184
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5185
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5186
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5187
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5189
	lea	rcx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN93@stbi__pars:
; Line 5191
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN5@stbi__pars:
; Line 5195
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 5196
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 5197
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1248				; 000004e0H
	pop	rdi
	ret	0
?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ENDP	; stbi__parse_png_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$1 = 32
half$2 = 33
p$ = 40
t$3 = 48
i$ = 52
t$4 = 56
t$5 = 57
pixel_count$ = 60
tv133 = 64
s$ = 72
z$ = 96
?stbi__de_iphone@@YAXPEAUstbi__png@@@Z PROC		; stbi__de_iphone
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4979
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4980
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4981
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4982
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4984
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 3
	jne	$LN11@stbi__de_i
; Line 4985
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__de_i
$LN2@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__de_i
; Line 4986
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$4[rsp], al
; Line 4987
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4988
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$4[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4989
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4990
	jmp	SHORT $LN2@stbi__de_i
$LN3@stbi__de_i:
; Line 4991
	jmp	$LN12@stbi__de_i
$LN11@stbi__de_i:
; Line 4992
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 4
	je	SHORT $LN18@stbi__de_i
	mov	r8d, 4992				; 00001380H
	lea	rdx, OFFSET FLAT:$SG100125
	lea	rcx, OFFSET FLAT:$SG100126
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stbi__de_i:
; Line 4993
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN19@stbi__de_i
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN20@stbi__de_i
$LN19@stbi__de_i:
	mov	eax, DWORD PTR ?stbi__unpremultiply_on_load_global@@3HA
	mov	DWORD PTR tv133[rsp], eax
$LN20@stbi__de_i:
	cmp	DWORD PTR tv133[rsp], 0
	je	$LN13@stbi__de_i
; Line 4995
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__de_i
$LN5@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__de_i
; Line 4996
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR a$1[rsp], al
; Line 4997
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$3[rsp], al
; Line 4998
	movzx	eax, BYTE PTR a$1[rsp]
	test	eax, eax
	je	$LN15@stbi__de_i
; Line 4999
	movzx	eax, BYTE PTR a$1[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR half$2[rsp], al
; Line 5000
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5001
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5002
	movzx	eax, BYTE PTR t$3[rsp]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5003
	jmp	SHORT $LN16@stbi__de_i
$LN15@stbi__de_i:
; Line 5004
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5005
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN16@stbi__de_i:
; Line 5007
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5008
	jmp	$LN5@stbi__de_i
$LN6@stbi__de_i:
; Line 5009
	jmp	SHORT $LN14@stbi__de_i
$LN13@stbi__de_i:
; Line 5011
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__de_i
$LN8@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN9@stbi__de_i
; Line 5012
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
; Line 5013
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5014
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5015
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5016
	jmp	SHORT $LN8@stbi__de_i
$LN9@stbi__de_i:
$LN14@stbi__de_i:
$LN12@stbi__de_i:
; Line 5019
	add	rsp, 88					; 00000058H
	ret	0
?stbi__de_iphone@@YAXPEAUstbi__png@@@Z ENDP		; stbi__de_iphone
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
?stbi__unpremultiply_on_load_thread@@YAXH@Z PROC	; stbi__unpremultiply_on_load_thread
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4959
	mov	DWORD PTR [rsp+8], ecx
; Line 4960
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4961
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4962
	ret	0
?stbi__unpremultiply_on_load_thread@@YAXH@Z ENDP	; stbi__unpremultiply_on_load_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
n$1 = 36
n$2 = 40
pixel_count$ = 44
p$ = 48
orig$ = 56
temp_out$ = 64
a$ = 96
palette$ = 104
len$ = 112
pal_img_n$ = 120
?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z PROC ; stbi__expand_png_palette
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4902
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4903
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4904
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR orig$[rsp], rax
; Line 4906
	xor	r8d, r8d
	mov	edx, DWORD PTR pal_img_n$[rsp]
	mov	ecx, DWORD PTR pixel_count$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR p$[rsp], rax
; Line 4907
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN8@stbi__expa
	lea	rcx, OFFSET FLAT:$SG100079
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__expa
$LN8@stbi__expa:
; Line 4910
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR temp_out$[rsp], rax
; Line 4912
	cmp	DWORD PTR pal_img_n$[rsp], 3
	jne	$LN9@stbi__expa
; Line 4913
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__expa
$LN2@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN3@stbi__expa
; Line 4914
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$2[rsp], eax
; Line 4915
	movsxd	rax, DWORD PTR n$2[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4916
	mov	eax, DWORD PTR n$2[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4917
	mov	eax, DWORD PTR n$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4918
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4919
	jmp	$LN2@stbi__expa
$LN3@stbi__expa:
; Line 4920
	jmp	$LN10@stbi__expa
$LN9@stbi__expa:
; Line 4921
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__expa
$LN5@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__expa
; Line 4922
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 4923
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4924
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4925
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4926
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4927
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4928
	jmp	$LN5@stbi__expa
$LN6@stbi__expa:
$LN10@stbi__expa:
; Line 4930
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 4931
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR temp_out$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4935
	mov	eax, 1
$LN1@stbi__expa:
; Line 4936
	add	rsp, 88					; 00000058H
	ret	0
?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z ENDP ; stbi__expand_png_palette
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z PROC ; stbi__compute_transparency16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4877
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4878
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4879
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4880
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4884
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4884				; 00001314H
	lea	rdx, OFFSET FLAT:$SG100052
	lea	rcx, OFFSET FLAT:$SG100053
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4886
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4887
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4888
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 65535		; 0000ffffH
$LN14@stbi__comp:
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, WORD PTR tv87[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 4889
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4890
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4891
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4893
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4894
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN10@stbi__comp:
; Line 4895
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
; Line 4896
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4898
	mov	eax, 1
; Line 4899
	add	rsp, 72					; 00000048H
	ret	0
?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z ENDP ; stbi__compute_transparency16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z PROC ; stbi__compute_transparency
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4852
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4853
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4854
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4855
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4859
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4859				; 000012fbH
	lea	rdx, OFFSET FLAT:$SG100029
	lea	rcx, OFFSET FLAT:$SG100030
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4861
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4863
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 255		; 000000ffH
$LN14@stbi__comp:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR tv87[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4864
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
; Line 4865
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4866
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4867
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4868
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4869
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN10@stbi__comp:
; Line 4870
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4871
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4873
	mov	eax, 1
; Line 4874
	add	rsp, 72					; 00000048H
	ret	0
?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z ENDP ; stbi__compute_transparency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 64
j$1 = 68
x$2 = 72
i$3 = 76
out_bytes$ = 80
y$4 = 84
tv65 = 88
img_len$5 = 92
final$ = 96
bytes$ = 104
out_y$6 = 108
out_x$7 = 112
tv280 = 120
yspc$8 = 128
xspc$9 = 160
yorig$10 = 192
xorig$11 = 224
__$ArrayPad$ = 256
a$ = 288
image_data$ = 296
image_data_len$ = 304
out_n$ = 312
depth$ = 320
color$ = 328
interlaced$ = 336
?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z PROC ; stbi__create_png_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4807
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4808
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN16@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN17@stbi__crea
$LN16@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN17@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4809
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR out_bytes$[rsp], eax
; Line 4812
	cmp	DWORD PTR interlaced$[rsp], 0
	jne	SHORT $LN11@stbi__crea
; Line 4813
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], edx
	mov	edx, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ; stbi__create_png_image_raw
	jmp	$LN1@stbi__crea
$LN11@stbi__crea:
; Line 4816
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	xor	r9d, r9d
	mov	r8d, DWORD PTR out_bytes$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR [rcx]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR final$[rsp], rax
; Line 4817
	cmp	QWORD PTR final$[rsp], 0
	jne	SHORT $LN12@stbi__crea
	lea	rcx, OFFSET FLAT:$SG100009
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN12@stbi__crea:
; Line 4818
	mov	DWORD PTR p$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR p$[rsp]
	inc	eax
	mov	DWORD PTR p$[rsp], eax
$LN4@stbi__crea:
	cmp	DWORD PTR p$[rsp], 7
	jge	$LN3@stbi__crea
; Line 4819
	mov	DWORD PTR xorig$11[rsp], 0
	mov	DWORD PTR xorig$11[rsp+4], 4
	mov	DWORD PTR xorig$11[rsp+8], 0
	mov	DWORD PTR xorig$11[rsp+12], 2
	mov	DWORD PTR xorig$11[rsp+16], 0
	mov	DWORD PTR xorig$11[rsp+20], 1
	mov	DWORD PTR xorig$11[rsp+24], 0
; Line 4820
	mov	DWORD PTR yorig$10[rsp], 0
	mov	DWORD PTR yorig$10[rsp+4], 0
	mov	DWORD PTR yorig$10[rsp+8], 4
	mov	DWORD PTR yorig$10[rsp+12], 0
	mov	DWORD PTR yorig$10[rsp+16], 2
	mov	DWORD PTR yorig$10[rsp+20], 0
	mov	DWORD PTR yorig$10[rsp+24], 1
; Line 4821
	mov	DWORD PTR xspc$9[rsp], 8
	mov	DWORD PTR xspc$9[rsp+4], 8
	mov	DWORD PTR xspc$9[rsp+8], 4
	mov	DWORD PTR xspc$9[rsp+12], 4
	mov	DWORD PTR xspc$9[rsp+16], 2
	mov	DWORD PTR xspc$9[rsp+20], 2
	mov	DWORD PTR xspc$9[rsp+24], 1
; Line 4822
	mov	DWORD PTR yspc$8[rsp], 8
	mov	DWORD PTR yspc$8[rsp+4], 8
	mov	DWORD PTR yspc$8[rsp+8], 8
	mov	DWORD PTR yspc$8[rsp+12], 4
	mov	DWORD PTR yspc$8[rsp+16], 4
	mov	DWORD PTR yspc$8[rsp+20], 2
	mov	DWORD PTR yspc$8[rsp+24], 2
; Line 4825
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xorig$11[rsp+rcx*4]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xspc$9[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR xspc$9[rsp+rcx*4]
	mov	DWORD PTR x$2[rsp], eax
; Line 4826
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yorig$10[rsp+rcx*4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yspc$8[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR yspc$8[rsp+rcx*4]
	mov	DWORD PTR y$4[rsp], eax
; Line 4827
	cmp	DWORD PTR x$2[rsp], 0
	je	$LN13@stbi__crea
	cmp	DWORD PTR y$4[rsp], 0
	je	$LN13@stbi__crea
; Line 4828
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR x$2[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	sar	eax, 3
	inc	eax
	imul	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR img_len$5[rsp], eax
; Line 4829
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR x$2[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ; stbi__create_png_image_raw
	test	eax, eax
	jne	SHORT $LN14@stbi__crea
; Line 4830
	mov	rcx, QWORD PTR final$[rsp]
	call	QWORD PTR __imp_free
; Line 4831
	xor	eax, eax
	jmp	$LN1@stbi__crea
$LN14@stbi__crea:
; Line 4833
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR y$4[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN6@stbi__crea
; Line 4834
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__crea
$LN8@stbi__crea:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__crea:
	mov	eax, DWORD PTR x$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__crea
; Line 4835
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR yspc$8[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR yorig$10[rsp+rcx*4]
	mov	DWORD PTR out_y$6[rsp], eax
; Line 4836
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR xspc$9[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR xorig$11[rsp+rcx*4]
	mov	DWORD PTR out_x$7[rsp], eax
; Line 4837
	movsxd	rax, DWORD PTR out_bytes$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR x$2[rsp]
	add	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR out_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR a$[rsp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8d, DWORD PTR out_y$6[rsp]
	imul	r8d, DWORD PTR [rdx]
	mov	edx, r8d
	imul	edx, DWORD PTR out_bytes$[rsp]
	mov	edx, edx
	mov	r8, QWORD PTR final$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	r8d, DWORD PTR out_x$7[rsp]
	imul	r8d, DWORD PTR out_bytes$[rsp]
	movsxd	r8, r8d
	add	rdx, r8
	mov	QWORD PTR tv280[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv280[rsp]
	mov	rcx, rax
	call	memcpy
; Line 4839
	jmp	$LN8@stbi__crea
$LN9@stbi__crea:
; Line 4840
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4841
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 4842
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	rcx, QWORD PTR image_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR image_data$[rsp], rax
; Line 4843
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	ecx, DWORD PTR image_data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR image_data_len$[rsp], eax
$LN13@stbi__crea:
; Line 4845
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4846
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR final$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4848
	mov	eax, 1
$LN1@stbi__crea:
; Line 4849
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z ENDP ; stbi__create_png_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
scale$1 = 36
cur$2 = 40
i$ = 48
filter_bytes$ = 52
cur$3 = 56
output_bytes$ = 64
q$4 = 68
img_n$ = 72
prior$5 = 80
in$6 = 88
j$ = 96
nk$7 = 100
filter$8 = 104
stride$ = 108
img_width_bytes$ = 112
bytes$ = 116
tv415 = 120
tv668 = 124
tv65 = 128
tv170 = 132
width$ = 136
tv276 = 140
cur$9 = 144
tv393 = 152
tv565 = 156
tv548 = 160
tv620 = 164
img_len$ = 168
tv149 = 172
tv218 = 176
tv362 = 180
tv345 = 184
s$ = 192
cur16$10 = 200
a$ = 224
raw$ = 232
raw_len$ = 240
out_n$ = 248
x$ = 256
y$ = 264
depth$ = 272
color$ = 280
?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z PROC ; stbi__create_png_image_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 4596
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN159@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN160@stbi__crea
$LN159@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN160@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4597
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4598
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR stride$[rsp], eax
; Line 4601
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR img_n$[rsp], eax
; Line 4603
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR output_bytes$[rsp], eax
; Line 4604
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR filter_bytes$[rsp], eax
; Line 4605
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR width$[rsp], eax
; Line 4607
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	r8d, 4607				; 000011ffH
	lea	rdx, OFFSET FLAT:$SG99902
	lea	rcx, OFFSET FLAT:$SG99903
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN161@stbi__crea:
; Line 4608
	xor	r9d, r9d
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4609
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN98@stbi__crea
	lea	rcx, OFFSET FLAT:$SG99905
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN98@stbi__crea:
; Line 4611
	mov	r9d, 7
	mov	r8d, DWORD PTR depth$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN99@stbi__crea
	lea	rcx, OFFSET FLAT:$SG99907
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN99@stbi__crea:
; Line 4612
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR img_width_bytes$[rsp], eax
; Line 4613
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 4618
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR raw_len$[rsp], eax
	jae	SHORT $LN100@stbi__crea
	lea	rcx, OFFSET FLAT:$SG99909
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN100@stbi__crea:
; Line 4620
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN3@stbi__crea
; Line 4621
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4623
	mov	rax, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv149[rsp], eax
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
	mov	eax, DWORD PTR tv149[rsp]
	mov	DWORD PTR filter$8[rsp], eax
; Line 4625
	cmp	DWORD PTR filter$8[rsp], 4
	jle	SHORT $LN101@stbi__crea
; Line 4626
	lea	rcx, OFFSET FLAT:$SG99911
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN101@stbi__crea:
; Line 4628
	cmp	DWORD PTR depth$[rsp], 8
	jge	SHORT $LN102@stbi__crea
; Line 4629
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR img_width_bytes$[rsp], eax
	jbe	SHORT $LN103@stbi__crea
	lea	rcx, OFFSET FLAT:$SG99914
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN103@stbi__crea:
; Line 4630
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	sub	eax, DWORD PTR img_width_bytes$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4631
	mov	DWORD PTR filter_bytes$[rsp], 1
; Line 4632
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	mov	DWORD PTR width$[rsp], eax
$LN102@stbi__crea:
; Line 4634
	mov	eax, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4637
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN104@stbi__crea
	movsxd	rax, DWORD PTR filter$8[rsp]
	lea	rcx, OFFSET FLAT:?first_row_filter@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR filter$8[rsp], eax
$LN104@stbi__crea:
; Line 4640
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__crea
; Line 4641
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv170[rsp], eax
	cmp	DWORD PTR tv170[rsp], 6
	ja	$LN8@stbi__crea
	movsxd	rax, DWORD PTR tv170[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN168@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN105@stbi__crea:
; Line 4642
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN106@stbi__crea:
; Line 4643
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN107@stbi__crea:
; Line 4644
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN108@stbi__crea:
; Line 4645
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN109@stbi__crea:
; Line 4646
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv218[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv218[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN110@stbi__crea:
; Line 4647
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN111@stbi__crea:
; Line 4648
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN8@stbi__crea:
; Line 4650
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4652
	cmp	DWORD PTR depth$[rsp], 8
	jne	SHORT $LN112@stbi__crea
; Line 4653
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN114@stbi__crea
; Line 4654
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN114@stbi__crea:
; Line 4655
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4656
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4657
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
	jmp	$LN113@stbi__crea
$LN112@stbi__crea:
; Line 4658
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN115@stbi__crea
; Line 4659
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN117@stbi__crea
; Line 4660
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4661
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN117@stbi__crea:
; Line 4663
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4664
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4665
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4666
	jmp	SHORT $LN116@stbi__crea
$LN115@stbi__crea:
; Line 4667
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4668
	mov	rax, QWORD PTR cur$3[rsp]
	inc	rax
	mov	QWORD PTR cur$3[rsp], rax
; Line 4669
	mov	rax, QWORD PTR prior$5[rsp]
	inc	rax
	mov	QWORD PTR prior$5[rsp], rax
$LN116@stbi__crea:
$LN113@stbi__crea:
; Line 4673
	cmp	DWORD PTR depth$[rsp], 8
	jl	SHORT $LN120@stbi__crea
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	jne	$LN118@stbi__crea
$LN120@stbi__crea:
; Line 4674
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	imul	eax, DWORD PTR filter_bytes$[rsp]
	mov	DWORD PTR nk$7[rsp], eax
; Line 4678
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv276[rsp], eax
	cmp	DWORD PTR tv276[rsp], 6
	ja	$LN10@stbi__crea
	movsxd	rax, DWORD PTR tv276[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN167@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN121@stbi__crea:
; Line 4680
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR raw$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	call	memcpy
	jmp	$LN10@stbi__crea
$LN122@stbi__crea:
; Line 4681
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN14@stbi__crea
$LN12@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN14@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN13@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbi__crea
$LN13@stbi__crea:
	jmp	$LN10@stbi__crea
$LN123@stbi__crea:
; Line 4682
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN17@stbi__crea
$LN15@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN17@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN16@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbi__crea
$LN16@stbi__crea:
	jmp	$LN10@stbi__crea
$LN124@stbi__crea:
; Line 4683
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN20@stbi__crea
$LN18@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN20@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN19@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR filter_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN18@stbi__crea
$LN19@stbi__crea:
	jmp	$LN10@stbi__crea
$LN125@stbi__crea:
; Line 4684
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN23@stbi__crea
$LN21@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN23@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN22@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv345[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR filter_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv362[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv362[rsp]
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv345[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN21@stbi__crea
$LN22@stbi__crea:
	jmp	$LN10@stbi__crea
$LN126@stbi__crea:
; Line 4685
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN26@stbi__crea
$LN24@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN26@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN25@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbi__crea
$LN25@stbi__crea:
	jmp	SHORT $LN10@stbi__crea
$LN127@stbi__crea:
; Line 4686
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN29@stbi__crea
$LN27@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN29@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN28@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv393[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv393[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN27@stbi__crea
$LN28@stbi__crea:
$LN10@stbi__crea:
; Line 4689
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4690
	jmp	$LN119@stbi__crea
$LN118@stbi__crea:
; Line 4691
	mov	eax, DWORD PTR img_n$[rsp]
	inc	eax
	cmp	eax, DWORD PTR out_n$[rsp]
	je	SHORT $LN162@stbi__crea
	mov	r8d, 4691				; 00001253H
	lea	rdx, OFFSET FLAT:$SG99939
	lea	rcx, OFFSET FLAT:$SG99940
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN162@stbi__crea:
; Line 4696
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv415[rsp], eax
	cmp	DWORD PTR tv415[rsp], 6
	ja	$LN30@stbi__crea
	movsxd	rax, DWORD PTR tv415[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN166@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN128@stbi__crea:
; Line 4697
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN34@stbi__crea
$LN32@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN34@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN33@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN37@stbi__crea
$LN35@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN37@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN36@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@stbi__crea
$LN36@stbi__crea:
	jmp	$LN32@stbi__crea
$LN33@stbi__crea:
	jmp	$LN30@stbi__crea
$LN129@stbi__crea:
; Line 4698
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN40@stbi__crea
$LN38@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN40@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN39@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN43@stbi__crea
$LN41@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN43@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN42@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN41@stbi__crea
$LN42@stbi__crea:
	jmp	$LN38@stbi__crea
$LN39@stbi__crea:
	jmp	$LN30@stbi__crea
$LN130@stbi__crea:
; Line 4699
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN46@stbi__crea
$LN44@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN46@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN45@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN49@stbi__crea
$LN47@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN49@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN48@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN47@stbi__crea
$LN48@stbi__crea:
	jmp	$LN44@stbi__crea
$LN45@stbi__crea:
	jmp	$LN30@stbi__crea
$LN131@stbi__crea:
; Line 4700
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN52@stbi__crea
$LN50@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN52@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN51@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN55@stbi__crea
$LN53@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN55@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN54@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR output_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN53@stbi__crea
$LN54@stbi__crea:
	jmp	$LN50@stbi__crea
$LN51@stbi__crea:
	jmp	$LN30@stbi__crea
$LN132@stbi__crea:
; Line 4701
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN58@stbi__crea
$LN56@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN58@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	$LN57@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN61@stbi__crea
$LN59@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN61@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN60@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv548[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv565[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv565[rsp]
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv548[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN59@stbi__crea
$LN60@stbi__crea:
	jmp	$LN56@stbi__crea
$LN57@stbi__crea:
	jmp	$LN30@stbi__crea
$LN133@stbi__crea:
; Line 4702
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN64@stbi__crea
$LN62@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN64@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN63@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN67@stbi__crea
$LN65@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN67@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN66@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN65@stbi__crea
$LN66@stbi__crea:
	jmp	$LN62@stbi__crea
$LN63@stbi__crea:
	jmp	$LN30@stbi__crea
$LN134@stbi__crea:
; Line 4703
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN70@stbi__crea
$LN68@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN70@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN69@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN73@stbi__crea
$LN71@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN73@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN72@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv620[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv620[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN71@stbi__crea
$LN72@stbi__crea:
	jmp	$LN68@stbi__crea
$LN69@stbi__crea:
$LN30@stbi__crea:
; Line 4709
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN135@stbi__crea
; Line 4710
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4711
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN76@stbi__crea
$LN74@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
$LN76@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN75@stbi__crea
; Line 4712
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4713
	jmp	SHORT $LN74@stbi__crea
$LN75@stbi__crea:
$LN135@stbi__crea:
$LN119@stbi__crea:
; Line 4716
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4721
	cmp	DWORD PTR depth$[rsp], 8
	jge	$LN136@stbi__crea
; Line 4722
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN79@stbi__crea
$LN77@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN79@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN78@stbi__crea
; Line 4723
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4724
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR out_n$[rsp]
	mov	ecx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR img_width_bytes$[rsp]
	sub	rax, rcx
	mov	QWORD PTR in$6[rsp], rax
; Line 4727
	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN163@stbi__crea
	movsxd	rax, DWORD PTR depth$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__depth_scale_table@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv668[rsp], eax
	jmp	SHORT $LN164@stbi__crea
$LN163@stbi__crea:
	mov	DWORD PTR tv668[rsp], 1
$LN164@stbi__crea:
	movzx	eax, BYTE PTR tv668[rsp]
	mov	BYTE PTR scale$1[rsp], al
; Line 4735
	cmp	DWORD PTR depth$[rsp], 4
	jne	$LN138@stbi__crea
; Line 4736
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN82@stbi__crea
$LN80@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 2
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN82@stbi__crea:
	cmp	DWORD PTR k$[rsp], 2
	jl	SHORT $LN81@stbi__crea
; Line 4737
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4738
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 15
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4739
	jmp	SHORT $LN80@stbi__crea
$LN81@stbi__crea:
; Line 4740
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN140@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN140@stbi__crea:
	jmp	$LN139@stbi__crea
$LN138@stbi__crea:
; Line 4741
	cmp	DWORD PTR depth$[rsp], 2
	jne	$LN141@stbi__crea
; Line 4742
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN85@stbi__crea
$LN83@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 4
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN85@stbi__crea:
	cmp	DWORD PTR k$[rsp], 4
	jl	$LN84@stbi__crea
; Line 4743
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4744
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4745
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4746
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4747
	jmp	$LN83@stbi__crea
$LN84@stbi__crea:
; Line 4748
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN143@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN143@stbi__crea:
; Line 4749
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN144@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN144@stbi__crea:
; Line 4750
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN145@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN145@stbi__crea:
	jmp	$LN142@stbi__crea
$LN141@stbi__crea:
; Line 4751
	cmp	DWORD PTR depth$[rsp], 1
	jne	$LN146@stbi__crea
; Line 4752
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN88@stbi__crea
$LN86@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 8
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN88@stbi__crea:
	cmp	DWORD PTR k$[rsp], 8
	jl	$LN87@stbi__crea
; Line 4753
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4754
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4755
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4756
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4757
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4758
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4759
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4760
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4761
	jmp	$LN86@stbi__crea
$LN87@stbi__crea:
; Line 4762
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN147@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN147@stbi__crea:
; Line 4763
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN148@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN148@stbi__crea:
; Line 4764
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN149@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN149@stbi__crea:
; Line 4765
	cmp	DWORD PTR k$[rsp], 3
	jle	SHORT $LN150@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN150@stbi__crea:
; Line 4766
	cmp	DWORD PTR k$[rsp], 4
	jle	SHORT $LN151@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN151@stbi__crea:
; Line 4767
	cmp	DWORD PTR k$[rsp], 5
	jle	SHORT $LN152@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN152@stbi__crea:
; Line 4768
	cmp	DWORD PTR k$[rsp], 6
	jle	SHORT $LN153@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN153@stbi__crea:
$LN146@stbi__crea:
$LN142@stbi__crea:
$LN139@stbi__crea:
; Line 4770
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	$LN154@stbi__crea
; Line 4773
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4774
	cmp	DWORD PTR img_n$[rsp], 1
	jne	SHORT $LN155@stbi__crea
; Line 4775
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN91@stbi__crea
$LN89@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN91@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	SHORT $LN90@stbi__crea
; Line 4776
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4777
	movsxd	rax, DWORD PTR q$4[rsp]
	mov	ecx, DWORD PTR q$4[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4778
	jmp	SHORT $LN89@stbi__crea
$LN90@stbi__crea:
; Line 4779
	jmp	$LN156@stbi__crea
$LN155@stbi__crea:
; Line 4780
	cmp	DWORD PTR img_n$[rsp], 3
	je	SHORT $LN165@stbi__crea
	mov	r8d, 4780				; 000012acH
	lea	rdx, OFFSET FLAT:$SG99970
	lea	rcx, OFFSET FLAT:$SG99971
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN165@stbi__crea:
; Line 4781
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN94@stbi__crea
$LN92@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN94@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	$LN93@stbi__crea
; Line 4782
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4783
	imul	eax, DWORD PTR q$4[rsp], 3
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4784
	imul	eax, DWORD PTR q$4[rsp], 3
	inc	eax
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4785
	imul	eax, DWORD PTR q$4[rsp], 3
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4786
	jmp	$LN92@stbi__crea
$LN93@stbi__crea:
$LN156@stbi__crea:
$LN154@stbi__crea:
; Line 4789
	jmp	$LN77@stbi__crea
$LN78@stbi__crea:
; Line 4790
	jmp	$LN137@stbi__crea
$LN136@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 16
	jne	$LN157@stbi__crea
; Line 4795
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$9[rsp], rax
; Line 4796
	mov	rax, QWORD PTR cur$9[rsp]
	mov	QWORD PTR cur16$10[rsp], rax
; Line 4798
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN97@stbi__crea
$LN95@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR cur16$10[rsp]
	add	rax, 2
	mov	QWORD PTR cur16$10[rsp], rax
	mov	rax, QWORD PTR cur$9[rsp]
	add	rax, 2
	mov	QWORD PTR cur$9[rsp], rax
$LN97@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN96@stbi__crea
; Line 4799
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cur$9[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR cur$9[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	or	eax, ecx
	mov	rcx, QWORD PTR cur16$10[rsp]
	mov	WORD PTR [rcx], ax
; Line 4800
	jmp	$LN95@stbi__crea
$LN96@stbi__crea:
$LN157@stbi__crea:
$LN137@stbi__crea:
; Line 4803
	mov	eax, 1
$LN1@stbi__crea:
; Line 4804
	add	rsp, 216				; 000000d8H
	ret	0
	npad	1
$LN168@stbi__crea:
	DD	$LN105@stbi__crea
	DD	$LN106@stbi__crea
	DD	$LN107@stbi__crea
	DD	$LN108@stbi__crea
	DD	$LN109@stbi__crea
	DD	$LN110@stbi__crea
	DD	$LN111@stbi__crea
$LN167@stbi__crea:
	DD	$LN121@stbi__crea
	DD	$LN122@stbi__crea
	DD	$LN123@stbi__crea
	DD	$LN124@stbi__crea
	DD	$LN125@stbi__crea
	DD	$LN126@stbi__crea
	DD	$LN127@stbi__crea
$LN166@stbi__crea:
	DD	$LN128@stbi__crea
	DD	$LN129@stbi__crea
	DD	$LN130@stbi__crea
	DD	$LN131@stbi__crea
	DD	$LN132@stbi__crea
	DD	$LN133@stbi__crea
	DD	$LN134@stbi__crea
?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ENDP ; stbi__create_png_image_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
?stbi__paeth@@YAHHHH@Z PROC				; stbi__paeth
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4581
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4582
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
; Line 4583
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
; Line 4584
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
; Line 4585
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 4586
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR a$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN2@stbi__paet:
; Line 4587
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbi__paet
	mov	eax, DWORD PTR b$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN3@stbi__paet:
; Line 4588
	mov	eax, DWORD PTR c$[rsp]
$LN1@stbi__paet:
; Line 4589
	add	rsp, 56					; 00000038H
	ret	0
?stbi__paeth@@YAHHHH@Z ENDP				; stbi__paeth
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?stbi__check_png_header@@YAHPEAUstbi__context@@@Z PROC	; stbi__check_png_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4544
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4547
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__chec
$LN2@stbi__chec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__chec:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@stbi__chec
; Line 4548
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__chec
	lea	rcx, OFFSET FLAT:$SG99712
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__chec
$LN5@stbi__chec:
	jmp	SHORT $LN2@stbi__chec
$LN3@stbi__chec:
; Line 4549
	mov	eax, 1
$LN1@stbi__chec:
; Line 4550
	add	rsp, 56					; 00000038H
	ret	0
?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ENDP	; stbi__check_png_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
s$ = 64
?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z PROC ; stbi__get_chunk_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4536
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4538
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR c$[rsp], eax
; Line 4539
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR c$[rsp+4], eax
; Line 4540
	mov	rax, QWORD PTR c$[rsp]
; Line 4541
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z ENDP ; stbi__get_chunk_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
obuf$ = 56
olen$ = 64
exp$ = 72
parse_header$ = 80
?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z PROC	; stbi__do_zlib
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4433
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4434
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4435
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4436
	movsxd	rax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4437
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR exp$[rsp]
	mov	DWORD PTR [rax+48], ecx
; Line 4439
	mov	edx, DWORD PTR parse_header$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z ; stbi__parse_zlib
; Line 4440
	add	rsp, 40					; 00000028H
	ret	0
?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ENDP	; stbi__do_zlib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
final$ = 36
a$ = 64
parse_header$ = 72
?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z PROC		; stbi__parse_zlib
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4405
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4407
	cmp	DWORD PTR parse_header$[rsp], 0
	je	SHORT $LN5@stbi__pars
; Line 4408
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_zlib_header
	test	eax, eax
	jne	SHORT $LN6@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN6@stbi__pars:
$LN5@stbi__pars:
; Line 4409
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 4410
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], 0
$LN4@stbi__pars:
; Line 4412
	mov	edx, 1
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR final$[rsp], eax
; Line 4413
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR type$[rsp], eax
; Line 4414
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN7@stbi__pars
; Line 4415
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_uncompressed_block
	test	eax, eax
	jne	SHORT $LN9@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
	jmp	$LN8@stbi__pars
$LN7@stbi__pars:
; Line 4416
	cmp	DWORD PTR type$[rsp], 3
	jne	SHORT $LN10@stbi__pars
; Line 4417
	xor	eax, eax
	jmp	$LN1@stbi__pars
; Line 4418
	jmp	SHORT $LN11@stbi__pars
$LN10@stbi__pars:
; Line 4419
	cmp	DWORD PTR type$[rsp], 1
	jne	SHORT $LN12@stbi__pars
; Line 4421
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, 288				; 00000120H
	lea	rdx, OFFSET FLAT:?stbi__zdefault_length@@3QBEB
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN14@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN14@stbi__pars:
; Line 4422
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?stbi__zdefault_distance@@3QBEB
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN15@stbi__pars:
; Line 4423
	jmp	SHORT $LN13@stbi__pars
$LN12@stbi__pars:
; Line 4424
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z ; stbi__compute_huffman_codes
	test	eax, eax
	jne	SHORT $LN16@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN16@stbi__pars:
$LN13@stbi__pars:
; Line 4426
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_huffman_block
	test	eax, eax
	jne	SHORT $LN17@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN17@stbi__pars:
$LN11@stbi__pars:
$LN8@stbi__pars:
; Line 4428
	cmp	DWORD PTR final$[rsp], 0
	je	$LN4@stbi__pars
; Line 4429
	mov	eax, 1
$LN1@stbi__pars:
; Line 4430
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z ENDP		; stbi__parse_zlib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmf$ = 32
flg$ = 36
cm$ = 40
a$ = 64
?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z PROC	; stbi__parse_zlib_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4362
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4363
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR cmf$[rsp], eax
; Line 4364
	mov	eax, DWORD PTR cmf$[rsp]
	and	eax, 15
	mov	DWORD PTR cm$[rsp], eax
; Line 4366
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR flg$[rsp], eax
; Line 4367
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN2@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99569
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN2@stbi__pars:
; Line 4368
	imul	eax, DWORD PTR cmf$[rsp], 256		; 00000100H
	add	eax, DWORD PTR flg$[rsp]
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN3@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99571
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN3@stbi__pars:
; Line 4369
	mov	eax, DWORD PTR flg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99573
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN4@stbi__pars:
; Line 4370
	cmp	DWORD PTR cm$[rsp], 8
	je	SHORT $LN5@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99575
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN5@stbi__pars:
; Line 4372
	mov	eax, 1
$LN1@stbi__pars:
; Line 4373
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z ENDP	; stbi__parse_zlib_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
len$ = 36
header$ = 40
nlen$ = 44
a$ = 64
?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z PROC ; stbi__parse_uncompressed_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4333
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4336
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN6@stbi__pars
; Line 4337
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
$LN6@stbi__pars:
; Line 4339
	mov	DWORD PTR k$[rsp], 0
$LN2@stbi__pars:
; Line 4340
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jle	SHORT $LN3@stbi__pars
; Line 4341
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4342
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4343
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4344
	jmp	SHORT $LN2@stbi__pars
$LN3@stbi__pars:
; Line 4345
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jge	SHORT $LN7@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99555
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN7@stbi__pars:
$LN4@stbi__pars:
; Line 4347
	cmp	DWORD PTR k$[rsp], 4
	jge	SHORT $LN5@stbi__pars
; Line 4348
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN4@stbi__pars
$LN5@stbi__pars:
; Line 4349
	mov	eax, 1
	imul	rax, rax, 1
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 4350
	mov	eax, 1
	imul	rax, rax, 3
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR nlen$[rsp], eax
; Line 4351
	mov	eax, DWORD PTR len$[rsp]
	xor	eax, 65535				; 0000ffffH
	cmp	DWORD PTR nlen$[rsp], eax
	je	SHORT $LN8@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99557
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN8@stbi__pars:
; Line 4352
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jbe	SHORT $LN9@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99559
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4353
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN10@stbi__pars
; Line 4354
	mov	r8d, DWORD PTR len$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN11@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN11@stbi__pars:
$LN10@stbi__pars:
; Line 4355
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memcpy
; Line 4356
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 4357
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4358
	mov	eax, 1
$LN1@stbi__pars:
; Line 4359
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z ENDP ; stbi__parse_uncompressed_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
fill$2 = 36
n$ = 40
i$ = 44
ntot$ = 48
hlit$ = 52
hdist$ = 56
hclen$ = 60
s$3 = 64
tv175 = 72
z_codelength$ = 80
codelength_sizes$ = 2112
lencodes$ = 2144
__$ArrayPad$ = 2608
a$ = 2640
?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z PROC ; stbi__compute_huffman_codes
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2632				; 00000a48H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4290
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 257				; 00000101H
	mov	DWORD PTR hlit$[rsp], eax
; Line 4291
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	inc	eax
	mov	DWORD PTR hdist$[rsp], eax
; Line 4292
	mov	edx, 4
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 4
	mov	DWORD PTR hclen$[rsp], eax
; Line 4293
	mov	eax, DWORD PTR hdist$[rsp]
	mov	ecx, DWORD PTR hlit$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ntot$[rsp], eax
; Line 4295
	mov	r8d, 19
	xor	edx, edx
	lea	rcx, QWORD PTR codelength_sizes$[rsp]
	call	memset
; Line 4296
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR hclen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__comp
; Line 4297
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR s$3[rsp], eax
; Line 4298
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR s$3[rsp]
	mov	BYTE PTR codelength_sizes$[rsp+rax], cl
; Line 4299
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4300
	mov	r8d, 19
	lea	rdx, QWORD PTR codelength_sizes$[rsp]
	lea	rcx, QWORD PTR z_codelength$[rsp]
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN7@stbi__comp
	xor	eax, eax
	jmp	$LN1@stbi__comp
$LN7@stbi__comp:
; Line 4302
	mov	DWORD PTR n$[rsp], 0
$LN5@stbi__comp:
; Line 4303
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN6@stbi__comp
; Line 4304
	lea	rdx, QWORD PTR z_codelength$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR c$1[rsp], eax
; Line 4305
	cmp	DWORD PTR c$1[rsp], 0
	jl	SHORT $LN9@stbi__comp
	cmp	DWORD PTR c$1[rsp], 19
	jl	SHORT $LN8@stbi__comp
$LN9@stbi__comp:
	lea	rcx, OFFSET FLAT:$SG99523
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN8@stbi__comp:
; Line 4306
	cmp	DWORD PTR c$1[rsp], 16
	jge	SHORT $LN10@stbi__comp
; Line 4307
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR lencodes$[rsp+rax], cl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
	jmp	$LN11@stbi__comp
$LN10@stbi__comp:
; Line 4309
	mov	BYTE PTR fill$2[rsp], 0
; Line 4310
	cmp	DWORD PTR c$1[rsp], 16
	jne	SHORT $LN12@stbi__comp
; Line 4311
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
; Line 4312
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbi__comp
	lea	rcx, OFFSET FLAT:$SG99529
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN14@stbi__comp:
; Line 4313
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	cdqe
	movzx	eax, BYTE PTR lencodes$[rsp+rax]
	mov	BYTE PTR fill$2[rsp], al
	jmp	SHORT $LN13@stbi__comp
$LN12@stbi__comp:
; Line 4314
	cmp	DWORD PTR c$1[rsp], 17
	jne	SHORT $LN15@stbi__comp
; Line 4315
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN16@stbi__comp
$LN15@stbi__comp:
; Line 4316
	cmp	DWORD PTR c$1[rsp], 18
	jne	SHORT $LN17@stbi__comp
; Line 4317
	mov	edx, 7
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 11
	mov	DWORD PTR c$1[rsp], eax
; Line 4318
	jmp	SHORT $LN18@stbi__comp
$LN17@stbi__comp:
; Line 4319
	lea	rcx, OFFSET FLAT:$SG99534
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN18@stbi__comp:
$LN16@stbi__comp:
$LN13@stbi__comp:
; Line 4321
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR ntot$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR c$1[rsp]
	jge	SHORT $LN19@stbi__comp
	lea	rcx, OFFSET FLAT:$SG99536
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN19@stbi__comp:
; Line 4322
	movsxd	rax, DWORD PTR c$1[rsp]
	movzx	ecx, BYTE PTR fill$2[rsp]
	movsxd	rdx, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp+rdx]
	mov	QWORD PTR tv175[rsp], rdx
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv175[rsp]
	mov	rcx, rax
	call	memset
; Line 4323
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__comp:
; Line 4325
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
; Line 4326
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN20@stbi__comp
	lea	rcx, OFFSET FLAT:$SG99538
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__comp
$LN20@stbi__comp:
; Line 4327
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, DWORD PTR hlit$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp]
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN21@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN21@stbi__comp:
; Line 4328
	movsxd	rax, DWORD PTR hlit$[rsp]
	lea	rax, QWORD PTR lencodes$[rsp+rax]
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, 2072				; 00000818H
	mov	r8d, DWORD PTR hdist$[rsp]
	mov	rdx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN22@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN22@stbi__comp:
; Line 4329
	mov	eax, 1
$LN1@stbi__comp:
; Line 4330
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2632				; 00000a48H
	ret	0
?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z ENDP ; stbi__compute_huffman_codes
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 32
tv179 = 33
z$2 = 36
len$3 = 40
dist$4 = 44
zout$ = 48
p$5 = 56
a$ = 80
?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z PROC	; stbi__parse_huffman_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4241
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4242
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN2@stbi__pars:
; Line 4244
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4245
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jge	SHORT $LN11@stbi__pars
; Line 4246
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN13@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99480
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN13@stbi__pars:
; Line 4247
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+40]
	cmp	QWORD PTR zout$[rsp], rax
	jb	SHORT $LN14@stbi__pars
; Line 4248
	mov	r8d, 1
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN15@stbi__pars:
; Line 4249
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN14@stbi__pars:
; Line 4251
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR z$2[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
; Line 4252
	jmp	$LN12@stbi__pars
$LN11@stbi__pars:
; Line 4255
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jne	SHORT $LN16@stbi__pars
; Line 4256
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4257
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN16@stbi__pars:
; Line 4259
	mov	eax, DWORD PTR z$2[rsp]
	sub	eax, 257				; 00000101H
	mov	DWORD PTR z$2[rsp], eax
; Line 4260
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_base@@3QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR len$3[rsp], eax
; Line 4261
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_extra@@3QBHB
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN17@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_extra@@3QBHB
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	ecx, DWORD PTR len$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
$LN17@stbi__pars:
; Line 4262
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4263
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN18@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99486
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN18@stbi__pars:
; Line 4264
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_base@@3QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR dist$4[rsp], eax
; Line 4265
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_extra@@3QBHB
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN19@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_extra@@3QBHB
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	ecx, DWORD PTR dist$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dist$4[rsp], eax
$LN19@stbi__pars:
; Line 4266
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR dist$4[rsp]
	cmp	rax, rcx
	jge	SHORT $LN20@stbi__pars
	lea	rcx, OFFSET FLAT:$SG99489
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN20@stbi__pars:
; Line 4267
	movsxd	rax, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN21@stbi__pars
; Line 4268
	mov	r8d, DWORD PTR len$3[rsp]
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN22@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
; Line 4269
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN21@stbi__pars:
; Line 4271
	movsxd	rax, DWORD PTR dist$4[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$5[rsp], rax
; Line 4272
	cmp	DWORD PTR dist$4[rsp], 1
	jne	SHORT $LN23@stbi__pars
; Line 4273
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR v$1[rsp], al
; Line 4274
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN25@stbi__pars
$LN7@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR v$1[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN7@stbi__pars
$LN25@stbi__pars:
; Line 4275
	jmp	SHORT $LN24@stbi__pars
$LN23@stbi__pars:
; Line 4276
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN26@stbi__pars
$LN10@stbi__pars:
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv179[rsp], al
	mov	rax, QWORD PTR p$5[rsp]
	inc	rax
	mov	QWORD PTR p$5[rsp], rax
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR tv179[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN10@stbi__pars
$LN26@stbi__pars:
$LN24@stbi__pars:
$LN12@stbi__pars:
; Line 4279
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 4280
	add	rsp, 72					; 00000048H
	ret	0
?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z ENDP	; stbi__parse_huffman_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
limit$ = 32
cur$ = 36
old_limit$ = 40
q$ = 48
z$ = 80
zout$ = 88
n$ = 96
?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z PROC		; stbi__zexpand
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4205
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4208
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4209
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG99446
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zexp
$LN4@stbi__zexp:
; Line 4210
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	DWORD PTR cur$[rsp], eax
; Line 4211
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+40]
	sub	rax, rcx
	mov	DWORD PTR old_limit$[rsp], eax
	mov	eax, DWORD PTR old_limit$[rsp]
	mov	DWORD PTR limit$[rsp], eax
; Line 4212
	mov	eax, -1					; ffffffffH
	sub	eax, DWORD PTR cur$[rsp]
	cmp	eax, DWORD PTR n$[rsp]
	jae	SHORT $LN5@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG99448
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zexp
$LN5@stbi__zexp:
$LN2@stbi__zexp:
; Line 4213
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR cur$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR limit$[rsp]
	jbe	SHORT $LN3@stbi__zexp
; Line 4214
	cmp	DWORD PTR limit$[rsp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG99450
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN6@stbi__zexp:
; Line 4215
	mov	eax, DWORD PTR limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR limit$[rsp], eax
; Line 4216
	jmp	SHORT $LN2@stbi__zexp
$LN3@stbi__zexp:
; Line 4217
	mov	eax, DWORD PTR limit$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR q$[rsp], rax
; Line 4219
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG99452
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN7@stbi__zexp:
; Line 4220
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4221
	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4222
	mov	eax, DWORD PTR limit$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4223
	mov	eax, 1
$LN1@stbi__zexp:
; Line 4224
	add	rsp, 72					; 00000048H
	ret	0
?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ENDP		; stbi__zexpand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
s$ = 36
tv132 = 40
a$ = 64
z$ = 72
?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z PROC ; stbi__zhuffman_decode
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4186
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4188
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 16
	jge	SHORT $LN2@stbi__zhuf
; Line 4189
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zhuf
; Line 4190
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4192
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z	; stbi__fill_bits
$LN2@stbi__zhuf:
; Line 4194
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 511				; 000001ffH
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR b$[rsp], eax
; Line 4195
	cmp	DWORD PTR b$[rsp], 0
	je	SHORT $LN4@stbi__zhuf
; Line 4196
	mov	eax, DWORD PTR b$[rsp]
	sar	eax, 9
	mov	DWORD PTR s$[rsp], eax
; Line 4197
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv132[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv132[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4198
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4199
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 511				; 000001ffH
	jmp	SHORT $LN1@stbi__zhuf
$LN4@stbi__zhuf:
; Line 4201
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode_slowpath
$LN1@stbi__zhuf:
; Line 4202
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ENDP ; stbi__zhuffman_decode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
b$ = 36
k$ = 40
tv158 = 48
a$ = 80
z$ = 88
?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z PROC ; stbi__zhuffman_decode_slowpath
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4171
	mov	edx, 16
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+20]
	call	?stbi__bit_reverse@@YAHHH@Z		; stbi__bit_reverse
	mov	DWORD PTR k$[rsp], eax
; Line 4172
	mov	DWORD PTR s$[rsp], 10
	jmp	SHORT $LN4@stbi__zhuf
$LN2@stbi__zhuf:
	mov	eax, DWORD PTR s$[rsp]
	inc	eax
	mov	DWORD PTR s$[rsp], eax
$LN4@stbi__zhuf:
; Line 4173
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1056]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN5@stbi__zhuf
; Line 4174
	jmp	SHORT $LN3@stbi__zhuf
$LN5@stbi__zhuf:
	jmp	SHORT $LN2@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4175
	cmp	DWORD PTR s$[rsp], 16
	jl	SHORT $LN6@stbi__zhuf
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN6@stbi__zhuf:
; Line 4177
	mov	eax, 16
	sub	eax, DWORD PTR s$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR k$[rsp]
	sar	eax, cl
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 4178
	cmp	DWORD PTR b$[rsp], 288			; 00000120H
	jl	SHORT $LN7@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN7@stbi__zhuf:
; Line 4179
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1156]
	cmp	eax, DWORD PTR s$[rsp]
	je	SHORT $LN8@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN8@stbi__zhuf:
; Line 4180
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv158[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv158[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4181
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4182
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+1444]
$LN1@stbi__zhuf:
; Line 4183
	add	rsp, 72					; 00000048H
	ret	0
?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ENDP ; stbi__zhuffman_decode_slowpath
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
k$ = 36
tv89 = 40
z$ = 64
n$ = 72
?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z PROC		; stbi__zreceive
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4157
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4159
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jge	SHORT $LN2@stbi__zrec
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z	; stbi__fill_bits
$LN2@stbi__zrec:
; Line 4160
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv83[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4161
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR tv89[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv89[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4162
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4163
	mov	eax, DWORD PTR k$[rsp]
; Line 4164
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z ENDP		; stbi__zreceive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = 32
tv76 = 36
tv78 = 40
tv84 = 44
tv82 = 48
z$ = 80
?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z PROC		; stbi__fill_bits
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4145
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN4@stbi__fill:
; Line 4147
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, 1
	mov	DWORD PTR tv131[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv131[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+20], eax
	jb	SHORT $LN5@stbi__fill
; Line 4148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 4149
	jmp	SHORT $LN1@stbi__fill
$LN5@stbi__fill:
; Line 4151
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR tv78[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv78[rsp]
	shl	eax, cl
	mov	DWORD PTR tv84[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR tv82[rsp], eax
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR tv82[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4152
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, 8
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4153
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+16], 24
	jle	$LN4@stbi__fill
$LN1@stbi__fill:
; Line 4154
	add	rsp, 72					; 00000048H
	ret	0
?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z ENDP		; stbi__fill_bits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
z$ = 64
?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z PROC		; stbi__zget8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4140
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4141
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zget
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@stbi__zget
$LN3@stbi__zget:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx], rax
$LN4@stbi__zget:
	movzx	eax, BYTE PTR tv73[rsp]
; Line 4142
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z ENDP		; stbi__zget8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
z$ = 32
?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z PROC			; stbi__zeof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4135
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4136
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax], rcx
	jb	SHORT $LN3@stbi__zeof
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__zeof
$LN3@stbi__zeof:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__zeof:
	mov	eax, DWORD PTR tv67[rsp]
; Line 4137
	add	rsp, 24
	ret	0
?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z ENDP			; stbi__zeof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$1 = 36
code$ = 40
j$2 = 44
fastv$3 = 48
k$ = 52
c$4 = 56
tv288 = 60
sizes$ = 64
next_code$ = 144
__$ArrayPad$ = 208
z$ = 240
sizelist$ = 248
num$ = 256
?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z PROC ; stbi__zbuild_huffman
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4068
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4069
	mov	DWORD PTR k$[rsp], 0
; Line 4073
	mov	r8d, 68					; 00000044H
	xor	edx, edx
	lea	rcx, QWORD PTR sizes$[rsp]
	call	memset
; Line 4074
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1024				; 00000400H
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 4075
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__zbui
$LN2@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__zbui
; Line 4076
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR sizelist$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR sizes$[rsp+rcx*4], eax
	jmp	SHORT $LN2@stbi__zbui
$LN3@stbi__zbui:
; Line 4077
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR sizes$[rsp+rax], 0
; Line 4078
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN7@stbi__zbui
$LN5@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@stbi__zbui
; Line 4079
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	DWORD PTR sizes$[rsp+rax*4], ecx
	jle	SHORT $LN16@stbi__zbui
; Line 4080
	lea	rcx, OFFSET FLAT:$SG99358
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zbui
$LN16@stbi__zbui:
	jmp	SHORT $LN5@stbi__zbui
$LN6@stbi__zbui:
; Line 4081
	mov	DWORD PTR code$[rsp], 0
; Line 4082
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN10@stbi__zbui
$LN8@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	$LN9@stbi__zbui
; Line 4083
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR code$[rsp]
	mov	DWORD PTR next_code$[rsp+rax*4], ecx
; Line 4084
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+1024], dx
; Line 4085
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR k$[rsp]
	mov	WORD PTR [rcx+rax*2+1124], dx
; Line 4086
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR code$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$[rsp], eax
; Line 4087
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR sizes$[rsp+rax*4], 0
	je	SHORT $LN17@stbi__zbui
; Line 4088
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN18@stbi__zbui
	lea	rcx, OFFSET FLAT:$SG99361
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zbui
$LN18@stbi__zbui:
$LN17@stbi__zbui:
; Line 4089
	mov	eax, 16
	sub	eax, DWORD PTR i$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1056], eax
; Line 4090
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 4091
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4092
	jmp	$LN8@stbi__zbui
$LN9@stbi__zbui:
; Line 4093
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+rax+1056], 65536		; 00010000H
; Line 4094
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__zbui
$LN11@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN12@stbi__zbui
; Line 4095
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR s$1[rsp], eax
; Line 4096
	cmp	DWORD PTR s$1[rsp], 0
	je	$LN19@stbi__zbui
; Line 4097
	movsxd	rax, DWORD PTR s$1[rsp]
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR c$4[rsp], eax
; Line 4098
	mov	eax, DWORD PTR s$1[rsp]
	shl	eax, 9
	or	eax, DWORD PTR i$[rsp]
	mov	WORD PTR fastv$3[rsp], ax
; Line 4099
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR s$1[rsp]
	mov	BYTE PTR [rcx+rax+1156], dl
; Line 4100
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR i$[rsp]
	mov	WORD PTR [rcx+rax*2+1444], dx
; Line 4101
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN20@stbi__zbui
; Line 4102
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	edx, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR next_code$[rsp+rax*4]
	call	?stbi__bit_reverse@@YAHHH@Z		; stbi__bit_reverse
	mov	DWORD PTR j$2[rsp], eax
$LN14@stbi__zbui:
; Line 4103
	cmp	DWORD PTR j$2[rsp], 512			; 00000200H
	jge	SHORT $LN15@stbi__zbui
; Line 4104
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR fastv$3[rsp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 4105
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv288[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv288[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR j$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rsp], eax
; Line 4106
	jmp	SHORT $LN14@stbi__zbui
$LN15@stbi__zbui:
$LN20@stbi__zbui:
; Line 4108
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	DWORD PTR next_code$[rsp+rcx*4], eax
$LN19@stbi__zbui:
; Line 4110
	jmp	$LN11@stbi__zbui
$LN12@stbi__zbui:
; Line 4111
	mov	eax, 1
$LN1@stbi__zbui:
; Line 4112
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ENDP ; stbi__zbuild_huffman
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
bits$ = 56
?stbi__bit_reverse@@YAHHH@Z PROC			; stbi__bit_reverse
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4060
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4061
	cmp	DWORD PTR bits$[rsp], 16
	jle	SHORT $LN3@stbi__bit_
	mov	r8d, 4061				; 00000fddH
	lea	rdx, OFFSET FLAT:$SG99322
	lea	rcx, OFFSET FLAT:$SG99323
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbi__bit_:
; Line 4064
	mov	ecx, DWORD PTR v$[rsp]
	call	?stbi__bitreverse16@@YAHH@Z		; stbi__bitreverse16
	mov	ecx, 16
	sub	ecx, DWORD PTR bits$[rsp]
	sar	eax, cl
; Line 4065
	add	rsp, 40					; 00000028H
	ret	0
?stbi__bit_reverse@@YAHHH@Z ENDP			; stbi__bit_reverse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
?stbi__bitreverse16@@YAHH@Z PROC			; stbi__bitreverse16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4051
	mov	DWORD PTR [rsp+8], ecx
; Line 4052
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 43690				; 0000aaaaH
	sar	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 21845				; 00005555H
	shl	ecx, 1
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4053
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 52428				; 0000ccccH
	sar	eax, 2
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 13107				; 00003333H
	shl	ecx, 2
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4054
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 61680				; 0000f0f0H
	sar	eax, 4
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 3855				; 00000f0fH
	shl	ecx, 4
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4055
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4056
	mov	eax, DWORD PTR n$[rsp]
; Line 4057
	ret	0
?stbi__bitreverse16@@YAHH@Z ENDP			; stbi__bitreverse16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
j$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z PROC	; stbi__jpeg_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4001
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4002
	mov	edx, 2
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN2@stbi__jpeg
; Line 4003
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 4004
	xor	eax, eax
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4006
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__jpeg:
; Line 4007
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__jpeg:
; Line 4008
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN7@stbi__jpeg
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN8@stbi__jpeg
$LN7@stbi__jpeg:
	mov	DWORD PTR tv80[rsp], 1
$LN8@stbi__jpeg:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__jpeg:
; Line 4009
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 4010
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z ENDP	; stbi__jpeg_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$2 = 56
k$3 = 64
m$4 = 68
m$5 = 69
m$6 = 70
n$ = 72
r$7 = 80
r$8 = 88
b$9 = 96
g$10 = 97
r$11 = 98
j$12 = 100
decode_n$ = 104
is_rgb$ = 108
tv92 = 112
tv160 = 116
tv234 = 120
tv255 = 124
y_bot$13 = 128
tv289 = 132
tv297 = 136
tv709 = 140
tv71 = 144
tv80 = 148
tv82 = 152
y$14 = 160
tv641 = 168
tv671 = 172
tv284 = 176
tv282 = 180
tv531 = 184
tv560 = 188
output$15 = 192
tv268 = 200
tv273 = 208
y$16 = 216
tv166 = 224
tv174 = 232
tv286 = 240
tv361 = 248
tv426 = 256
tv482 = 264
coutput$17 = 272
res_comp$18 = 304
__$ArrayPad$ = 496
z$ = 528
out_x$ = 536
out_y$ = 544
comp$ = 552
req_comp$ = 560
?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z PROC	; load_jpeg_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3812
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 520				; 00000208H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3814
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rax+8], 0
; Line 3817
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN42@load_jpeg_
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN41@load_jpeg_
$LN42@load_jpeg_:
	lea	rcx, OFFSET FLAT:$SG99205
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN83@load_jpeg_
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN84@load_jpeg_
$LN83@load_jpeg_:
	mov	DWORD PTR tv71[rsp], 0
$LN84@load_jpeg_:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	$LN1@load_jpeg_
$LN41@load_jpeg_:
; Line 3820
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z ; stbi__decode_jpeg_image
	test	eax, eax
	jne	SHORT $LN43@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN43@load_jpeg_:
; Line 3823
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN87@load_jpeg_
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN88@load_jpeg_
$LN87@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN85@load_jpeg_
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN86@load_jpeg_
$LN85@load_jpeg_:
	mov	DWORD PTR tv80[rsp], 1
$LN86@load_jpeg_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN88@load_jpeg_:
	mov	eax, DWORD PTR tv82[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 3825
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN91@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18512], 3
	je	SHORT $LN90@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	SHORT $LN89@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18504], 0
	jne	SHORT $LN91@load_jpeg_
$LN90@load_jpeg_:
	mov	DWORD PTR tv92[rsp], 1
	jmp	SHORT $LN92@load_jpeg_
$LN91@load_jpeg_:
$LN89@load_jpeg_:
	mov	DWORD PTR tv92[rsp], 0
$LN92@load_jpeg_:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR is_rgb$[rsp], eax
; Line 3827
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR n$[rsp], 3
	jge	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR is_rgb$[rsp], 0
	jne	SHORT $LN44@load_jpeg_
; Line 3828
	mov	DWORD PTR decode_n$[rsp], 1
	jmp	SHORT $LN45@load_jpeg_
$LN44@load_jpeg_:
; Line 3830
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR decode_n$[rsp], eax
$LN45@load_jpeg_:
; Line 3834
	cmp	DWORD PTR decode_n$[rsp], 0
	jg	SHORT $LN46@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN46@load_jpeg_:
; Line 3841
	mov	QWORD PTR coutput$17[rsp], 0
	mov	QWORD PTR coutput$17[rsp+8], 0
	mov	QWORD PTR coutput$17[rsp+16], 0
	mov	QWORD PTR coutput$17[rsp+24], 0
; Line 3845
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN4@load_jpeg_
$LN2@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN4@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN3@load_jpeg_
; Line 3846
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$7[rsp], rax
; Line 3850
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	add	eax, 3
	mov	eax, eax
	mov	ecx, eax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	movsxd	rcx, DWORD PTR k$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18152], rax
; Line 3851
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	jne	SHORT $LN47@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG99211
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN93@load_jpeg_
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN94@load_jpeg_
$LN93@load_jpeg_:
	mov	DWORD PTR tv160[rsp], 0
$LN94@load_jpeg_:
	movsxd	rax, DWORD PTR tv160[rsp]
	jmp	$LN1@load_jpeg_
$LN47@load_jpeg_:
; Line 3853
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv166[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18056]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv166[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 3854
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv174[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18060]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv174[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 3855
	mov	rax, QWORD PTR r$7[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 3856
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR r$7[rsp]
	div	DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 3857
	mov	rax, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 3858
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18128]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3860
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?resample_row_1@@YAPEAEPEAE00HH@Z ; resample_row_1
	mov	QWORD PTR [rax], rcx
	jmp	$LN49@load_jpeg_
$LN48@load_jpeg_:
; Line 3861
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_v_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN51@load_jpeg_
$LN50@load_jpeg_:
; Line 3862
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_h_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN53@load_jpeg_
$LN52@load_jpeg_:
; Line 3863
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+18560]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN55@load_jpeg_
$LN54@load_jpeg_:
; Line 3864
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z ; stbi__resample_row_generic
	mov	QWORD PTR [rax], rcx
$LN55@load_jpeg_:
$LN53@load_jpeg_:
$LN51@load_jpeg_:
$LN49@load_jpeg_:
; Line 3865
	jmp	$LN2@load_jpeg_
$LN3@load_jpeg_:
; Line 3868
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	r9d, 1
	mov	r8d, DWORD PTR [rax+4]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, DWORD PTR n$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR output$15[rsp], rax
; Line 3869
	cmp	QWORD PTR output$15[rsp], 0
	jne	SHORT $LN56@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG99221
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN95@load_jpeg_
	mov	DWORD PTR tv234[rsp], 0
	jmp	SHORT $LN96@load_jpeg_
$LN95@load_jpeg_:
	mov	DWORD PTR tv234[rsp], 0
$LN96@load_jpeg_:
	movsxd	rax, DWORD PTR tv234[rsp]
	jmp	$LN1@load_jpeg_
$LN56@load_jpeg_:
; Line 3872
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN7@load_jpeg_
$LN5@load_jpeg_:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN7@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$12[rsp], eax
	jae	$LN6@load_jpeg_
; Line 3873
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR n$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR j$12[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR output$15[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3874
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN10@load_jpeg_
$LN8@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN10@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN9@load_jpeg_
; Line 3875
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$8[rsp], rax
; Line 3876
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$8[rsp]
	cmp	DWORD PTR [rcx+36], eax
	jl	SHORT $LN97@load_jpeg_
	mov	DWORD PTR tv255[rsp], 1
	jmp	SHORT $LN98@load_jpeg_
$LN97@load_jpeg_:
	mov	DWORD PTR tv255[rsp], 0
$LN98@load_jpeg_:
	mov	eax, DWORD PTR tv255[rsp]
	mov	DWORD PTR y_bot$13[rsp], eax
; Line 3877
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv286[rsp], rax
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR tv284[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR tv282[rsp], eax
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN99@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv268[rsp], rax
	jmp	SHORT $LN100@load_jpeg_
$LN99@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv268[rsp], rax
$LN100@load_jpeg_:
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN101@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv273[rsp], rax
	jmp	SHORT $LN102@load_jpeg_
$LN101@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv273[rsp], rax
$LN102@load_jpeg_:
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	ecx, DWORD PTR tv284[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR tv282[rsp]
	mov	r8, QWORD PTR tv268[rsp]
	mov	rdx, QWORD PTR tv273[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	call	QWORD PTR tv286[rsp]
	movsxd	rcx, DWORD PTR k$3[rsp]
	mov	QWORD PTR coutput$17[rsp+rcx*8], rax
; Line 3881
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	DWORD PTR tv289[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv289[rsp]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR tv289[rsp], eax
	jl	$LN57@load_jpeg_
; Line 3882
	mov	rax, QWORD PTR r$8[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 3883
	mov	rax, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3884
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	DWORD PTR tv297[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv297[rsp]
	mov	DWORD PTR [rax+40], ecx
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	cmp	DWORD PTR tv297[rsp], eax
	jge	SHORT $LN58@load_jpeg_
; Line 3885
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18116]
	mov	rcx, QWORD PTR r$8[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN58@load_jpeg_:
$LN57@load_jpeg_:
; Line 3887
	jmp	$LN8@load_jpeg_
$LN9@load_jpeg_:
; Line 3888
	cmp	DWORD PTR n$[rsp], 3
	jl	$LN59@load_jpeg_
; Line 3889
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$14[rsp], rax
; Line 3890
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	$LN61@load_jpeg_
; Line 3891
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN63@load_jpeg_
; Line 3892
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@load_jpeg_
$LN11@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN12@load_jpeg_
; Line 3893
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3894
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3895
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3896
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3897
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3898
	jmp	$LN11@load_jpeg_
$LN12@load_jpeg_:
; Line 3899
	jmp	SHORT $LN64@load_jpeg_
$LN63@load_jpeg_:
; Line 3900
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv361[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv361[rsp]
$LN64@load_jpeg_:
; Line 3901
	jmp	$LN62@load_jpeg_
$LN61@load_jpeg_:
; Line 3902
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN65@load_jpeg_
; Line 3903
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN67@load_jpeg_
; Line 3904
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@load_jpeg_
$LN14@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN15@load_jpeg_
; Line 3905
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$4[rsp], al
; Line 3906
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3907
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3908
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3909
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3910
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3911
	jmp	$LN14@load_jpeg_
$LN15@load_jpeg_:
; Line 3912
	jmp	$LN68@load_jpeg_
$LN67@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN69@load_jpeg_
; Line 3913
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv426[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv426[rsp]
; Line 3914
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN19@load_jpeg_
$LN17@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN19@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN18@load_jpeg_
; Line 3915
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$5[rsp], al
; Line 3916
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3917
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3918
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3919
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3920
	jmp	$LN17@load_jpeg_
$LN18@load_jpeg_:
; Line 3921
	jmp	SHORT $LN70@load_jpeg_
$LN69@load_jpeg_:
; Line 3922
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv482[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv482[rsp]
$LN70@load_jpeg_:
$LN68@load_jpeg_:
; Line 3924
	jmp	$LN66@load_jpeg_
$LN65@load_jpeg_:
; Line 3925
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN22@load_jpeg_
$LN20@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN22@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN21@load_jpeg_
; Line 3926
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3927
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3928
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3929
	jmp	$LN20@load_jpeg_
$LN21@load_jpeg_:
$LN66@load_jpeg_:
$LN62@load_jpeg_:
; Line 3930
	jmp	$LN60@load_jpeg_
$LN59@load_jpeg_:
; Line 3931
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN71@load_jpeg_
; Line 3932
	cmp	DWORD PTR n$[rsp], 1
	jne	$LN73@load_jpeg_
; Line 3933
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN25@load_jpeg_
$LN23@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN25@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN24@load_jpeg_
; Line 3934
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv531[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv531[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	$LN23@load_jpeg_
$LN24@load_jpeg_:
	jmp	$LN74@load_jpeg_
$LN73@load_jpeg_:
; Line 3936
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN28@load_jpeg_
$LN26@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	rax, QWORD PTR out$2[rsp]
	add	rax, 2
	mov	QWORD PTR out$2[rsp], rax
$LN28@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN27@load_jpeg_
; Line 3937
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv560[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv560[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3938
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3939
	jmp	$LN26@load_jpeg_
$LN27@load_jpeg_:
$LN74@load_jpeg_:
; Line 3940
	jmp	$LN72@load_jpeg_
$LN71@load_jpeg_:
; Line 3941
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN75@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN75@load_jpeg_
; Line 3942
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN31@load_jpeg_
$LN29@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN31@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN30@load_jpeg_
; Line 3943
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$6[rsp], al
; Line 3944
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR r$11[rsp], al
; Line 3945
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR g$10[rsp], al
; Line 3946
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR b$9[rsp], al
; Line 3947
	movzx	eax, BYTE PTR b$9[rsp]
	movzx	ecx, BYTE PTR g$10[rsp]
	movzx	edx, BYTE PTR r$11[rsp]
	mov	DWORD PTR tv641[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv641[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3948
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3949
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3950
	jmp	$LN29@load_jpeg_
$LN30@load_jpeg_:
; Line 3951
	jmp	$LN76@load_jpeg_
$LN75@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN77@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN77@load_jpeg_
; Line 3952
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN34@load_jpeg_
$LN32@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN34@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN33@load_jpeg_
; Line 3953
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	r8d, 255				; 000000ffH
	sub	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR tv671[rsp], edx
	movzx	edx, BYTE PTR [rax+rcx]
	mov	eax, DWORD PTR tv671[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3954
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3955
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3956
	jmp	$LN32@load_jpeg_
$LN33@load_jpeg_:
; Line 3957
	jmp	$LN78@load_jpeg_
$LN77@load_jpeg_:
; Line 3958
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$16[rsp], rax
; Line 3959
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN79@load_jpeg_
; Line 3960
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN37@load_jpeg_
$LN35@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN37@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN36@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@load_jpeg_
$LN36@load_jpeg_:
	jmp	SHORT $LN80@load_jpeg_
$LN79@load_jpeg_:
; Line 3962
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN40@load_jpeg_
$LN38@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN40@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN39@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rdx, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	mov	rax, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rax], 255			; 000000ffH
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	SHORT $LN38@load_jpeg_
$LN39@load_jpeg_:
$LN80@load_jpeg_:
$LN78@load_jpeg_:
$LN76@load_jpeg_:
$LN72@load_jpeg_:
$LN60@load_jpeg_:
; Line 3965
	jmp	$LN5@load_jpeg_
$LN6@load_jpeg_:
; Line 3966
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
; Line 3967
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 3968
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 3969
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN81@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN103@load_jpeg_
	mov	DWORD PTR tv709[rsp], 3
	jmp	SHORT $LN104@load_jpeg_
$LN103@load_jpeg_:
	mov	DWORD PTR tv709[rsp], 1
$LN104@load_jpeg_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv709[rsp]
	mov	DWORD PTR [rax], ecx
$LN81@load_jpeg_:
; Line 3970
	mov	rax, QWORD PTR output$15[rsp]
$LN1@load_jpeg_:
; Line 3972
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 520				; 00000208H
	ret	0
?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z ENDP	; load_jpeg_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
x$ = 32
y$ = 40
?stbi__blinn_8x8@@YAEEE@Z PROC				; stbi__blinn_8x8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3806
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 3807
	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	imul	eax, ecx
	add	eax, 128				; 00000080H
	mov	DWORD PTR t$[rsp], eax
; Line 3808
	mov	eax, DWORD PTR t$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	shr	eax, 8
; Line 3809
	add	rsp, 24
	ret	0
?stbi__blinn_8x8@@YAEEE@Z ENDP				; stbi__blinn_8x8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__cleanup_jpeg
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3790
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3791
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
; Line 3792
	add	rsp, 40					; 00000028H
	ret	0
?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__cleanup_jpeg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__setup_jpeg
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3768
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3769
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__idct_block@@YAXPEAEHQEAF@Z ; stbi__idct_block
	mov	QWORD PTR [rax+18544], rcx
; Line 3770
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z ; stbi__YCbCr_to_RGB_row
	mov	QWORD PTR [rax+18552], rcx
; Line 3771
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_hv_2
	mov	QWORD PTR [rax+18560], rcx
; Line 3774
	call	?stbi__sse2_available@@YAHXZ		; stbi__sse2_available
	test	eax, eax
	je	SHORT $LN2@stbi__setu
; Line 3775
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__idct_simd@@YAXPEAEHQEAF@Z ; stbi__idct_simd
	mov	QWORD PTR [rax+18544], rcx
; Line 3776
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z ; stbi__YCbCr_to_RGB_simd
	mov	QWORD PTR [rax+18552], rcx
; Line 3777
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z ; stbi__resample_row_hv_2_simd
	mov	QWORD PTR [rax+18560], rcx
$LN2@stbi__setu:
; Line 3786
	add	rsp, 40					; 00000028H
	ret	0
?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__setup_jpeg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
r$1 = 4
g$2 = 8
b$3 = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
yws$7 = 32
signflip$8 = 48
cbw$9 = 64
crw$10 = 80
brb$11 = 96
gxb$12 = 112
t0$13 = 128
t1$14 = 144
$T15 = 160
$T16 = 176
$T17 = 192
$T18 = 208
$T19 = 224
$T20 = 240
$T21 = 256
$T22 = 272
$T23 = 288
$T24 = 304
cr_bytes$25 = 320
$T26 = 336
cb_bytes$27 = 352
$T28 = 368
y_bias$29 = 384
y_bytes$30 = 400
$T31 = 416
$T32 = 432
cr_biased$33 = 448
$T34 = 464
$T35 = 480
cb_biased$36 = 496
$T37 = 512
yw$38 = 528
$T39 = 544
cr_const0$40 = 560
$T41 = 576
cb_const0$42 = 592
$T43 = 608
cb_const1$44 = 624
$T45 = 640
cr_const1$46 = 656
$T47 = 672
cr0$48 = 688
$T49 = 704
cb0$50 = 720
$T51 = 736
cb1$52 = 752
$T53 = 768
gwt$54 = 784
cr1$55 = 800
$T56 = 816
rws$57 = 832
$T58 = 848
bws$59 = 864
$T60 = 880
gws$61 = 896
$T62 = 912
rw$63 = 928
bw$64 = 944
$T65 = 960
gw$66 = 976
xw$67 = 992
$T68 = 1008
$T69 = 1024
$T70 = 1040
$T71 = 1056
$T72 = 1072
o0$73 = 1088
o1$74 = 1104
out$ = 1136
y$ = 1144
pcb$ = 1152
pcr$ = 1160
count$ = 1168
step$ = 1176
?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z PROC	; stbi__YCbCr_to_RGB_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3633
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1128				; 00000468H
; Line 3634
	mov	DWORD PTR i$[rsp], 0
; Line 3640
	cmp	DWORD PTR step$[rsp], 4
	jne	$LN8@stbi__YCbC
; Line 3642
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR signflip$8[rsp], xmm0
; Line 3643
	movdqa	xmm0, XMMWORD PTR __xmm@166f166f166f166f166f166f166f166f
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR cr_const0$40[rsp], xmm0
; Line 3644
	movdqa	xmm0, XMMWORD PTR __xmm@f493f493f493f493f493f493f493f493
	movdqa	XMMWORD PTR $T17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[rsp]
	movdqa	XMMWORD PTR cr_const1$46[rsp], xmm0
; Line 3645
	movdqa	xmm0, XMMWORD PTR __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
	movdqa	XMMWORD PTR $T18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T18[rsp]
	movdqa	XMMWORD PTR cb_const0$42[rsp], xmm0
; Line 3646
	movdqa	xmm0, XMMWORD PTR __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR cb_const1$44[rsp], xmm0
; Line 3647
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR y_bias$29[rsp], xmm0
; Line 3648
	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR xw$67[rsp], xmm0
; Line 3650
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN3@stbi__YCbC
; Line 3652
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T22[rsp]
	movdqa	XMMWORD PTR y_bytes$30[rsp], xmm0
; Line 3653
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR cr_bytes$25[rsp], xmm0
; Line 3654
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T24[rsp]
	movdqa	XMMWORD PTR cb_bytes$27[rsp], xmm0
; Line 3655
	movdqa	xmm0, XMMWORD PTR cr_bytes$25[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR $T26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T26[rsp]
	movdqa	XMMWORD PTR cr_biased$33[rsp], xmm0
; Line 3656
	movdqa	xmm0, XMMWORD PTR cb_bytes$27[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR $T28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T28[rsp]
	movdqa	XMMWORD PTR cb_biased$36[rsp], xmm0
; Line 3659
	movdqa	xmm0, XMMWORD PTR y_bias$29[rsp]
	punpcklbw xmm0, XMMWORD PTR y_bytes$30[rsp]
	movdqa	XMMWORD PTR $T31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T31[rsp]
	movdqa	XMMWORD PTR yw$38[rsp], xmm0
; Line 3660
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T32[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T32[rsp]
	punpcklbw xmm0, XMMWORD PTR cr_biased$33[rsp]
	movdqa	XMMWORD PTR $T34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T34[rsp]
	movdqa	XMMWORD PTR crw$10[rsp], xmm0
; Line 3661
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T35[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T35[rsp]
	punpcklbw xmm0, XMMWORD PTR cb_biased$36[rsp]
	movdqa	XMMWORD PTR $T37[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T37[rsp]
	movdqa	XMMWORD PTR cbw$9[rsp], xmm0
; Line 3664
	movdqa	xmm0, XMMWORD PTR yw$38[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T39[rsp]
	movdqa	XMMWORD PTR yws$7[rsp], xmm0
; Line 3665
	movdqa	xmm0, XMMWORD PTR cr_const0$40[rsp]
	pmulhw	xmm0, XMMWORD PTR crw$10[rsp]
	movdqa	XMMWORD PTR $T41[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T41[rsp]
	movdqa	XMMWORD PTR cr0$48[rsp], xmm0
; Line 3666
	movdqa	xmm0, XMMWORD PTR cb_const0$42[rsp]
	pmulhw	xmm0, XMMWORD PTR cbw$9[rsp]
	movdqa	XMMWORD PTR $T43[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T43[rsp]
	movdqa	XMMWORD PTR cb0$50[rsp], xmm0
; Line 3667
	movdqa	xmm0, XMMWORD PTR cbw$9[rsp]
	pmulhw	xmm0, XMMWORD PTR cb_const1$44[rsp]
	movdqa	XMMWORD PTR $T45[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T45[rsp]
	movdqa	XMMWORD PTR cb1$52[rsp], xmm0
; Line 3668
	movdqa	xmm0, XMMWORD PTR crw$10[rsp]
	pmulhw	xmm0, XMMWORD PTR cr_const1$46[rsp]
	movdqa	XMMWORD PTR $T47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T47[rsp]
	movdqa	XMMWORD PTR cr1$55[rsp], xmm0
; Line 3669
	movdqa	xmm0, XMMWORD PTR cr0$48[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR $T49[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T49[rsp]
	movdqa	XMMWORD PTR rws$57[rsp], xmm0
; Line 3670
	movdqa	xmm0, XMMWORD PTR cb0$50[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR $T51[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T51[rsp]
	movdqa	XMMWORD PTR gwt$54[rsp], xmm0
; Line 3671
	movdqa	xmm0, XMMWORD PTR yws$7[rsp]
	paddw	xmm0, XMMWORD PTR cb1$52[rsp]
	movdqa	XMMWORD PTR $T53[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T53[rsp]
	movdqa	XMMWORD PTR bws$59[rsp], xmm0
; Line 3672
	movdqa	xmm0, XMMWORD PTR gwt$54[rsp]
	paddw	xmm0, XMMWORD PTR cr1$55[rsp]
	movdqa	XMMWORD PTR $T56[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T56[rsp]
	movdqa	XMMWORD PTR gws$61[rsp], xmm0
; Line 3675
	movdqa	xmm0, XMMWORD PTR rws$57[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR $T58[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T58[rsp]
	movdqa	XMMWORD PTR rw$63[rsp], xmm0
; Line 3676
	movdqa	xmm0, XMMWORD PTR bws$59[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR $T60[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T60[rsp]
	movdqa	XMMWORD PTR bw$64[rsp], xmm0
; Line 3677
	movdqa	xmm0, XMMWORD PTR gws$61[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR $T62[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T62[rsp]
	movdqa	XMMWORD PTR gw$66[rsp], xmm0
; Line 3680
	movdqa	xmm0, XMMWORD PTR rw$63[rsp]
	packuswb xmm0, XMMWORD PTR bw$64[rsp]
	movdqa	XMMWORD PTR $T65[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T65[rsp]
	movdqa	XMMWORD PTR brb$11[rsp], xmm0
; Line 3681
	movdqa	xmm0, XMMWORD PTR gw$66[rsp]
	packuswb xmm0, XMMWORD PTR xw$67[rsp]
	movdqa	XMMWORD PTR $T68[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T68[rsp]
	movdqa	XMMWORD PTR gxb$12[rsp], xmm0
; Line 3684
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpcklbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR $T69[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T69[rsp]
	movdqa	XMMWORD PTR t0$13[rsp], xmm0
; Line 3685
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpckhbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR $T70[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T70[rsp]
	movdqa	XMMWORD PTR t1$14[rsp], xmm0
; Line 3686
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpcklwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR $T71[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T71[rsp]
	movdqa	XMMWORD PTR o0$73[rsp], xmm0
; Line 3687
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpckhwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR $T72[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T72[rsp]
	movdqa	XMMWORD PTR o1$74[rsp], xmm0
; Line 3690
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR o0$73[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3691
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 16
	movdqa	xmm0, XMMWORD PTR o1$74[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3692
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR out$[rsp], rax
; Line 3693
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3743
	jmp	SHORT $LN7@stbi__YCbC
$LN5@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__YCbC
; Line 3744
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3746
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3747
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3748
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3749
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3750
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3751
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3752
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3753
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3754
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN9@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN10@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN11@stbi__YCbC
$LN10@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN11@stbi__YCbC:
$LN9@stbi__YCbC:
; Line 3755
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN12@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN13@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN14@stbi__YCbC
$LN13@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN14@stbi__YCbC:
$LN12@stbi__YCbC:
; Line 3756
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN15@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN16@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN17@stbi__YCbC
$LN16@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN17@stbi__YCbC:
$LN15@stbi__YCbC:
; Line 3757
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3758
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3759
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3760
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3761
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3762
	jmp	$LN5@stbi__YCbC
$LN6@stbi__YCbC:
; Line 3763
	add	rsp, 1128				; 00000468H
	ret	0
?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z ENDP	; stbi__YCbCr_to_RGB_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 0
g$2 = 4
b$3 = 8
i$ = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
out$ = 48
y$ = 56
pcb$ = 64
pcr$ = 72
count$ = 80
step$ = 88
?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z PROC		; stbi__YCbCr_to_RGB_row
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3607
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3609
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__YCbC
; Line 3610
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3612
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3613
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3614
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3615
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3616
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3617
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3618
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3619
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3620
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN5@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN6@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN7@stbi__YCbC
$LN6@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN7@stbi__YCbC:
$LN5@stbi__YCbC:
; Line 3621
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN8@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN9@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN10@stbi__YCbC
$LN9@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN10@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3622
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN11@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN12@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN13@stbi__YCbC
$LN12@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN13@stbi__YCbC:
$LN11@stbi__YCbC:
; Line 3623
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3624
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3625
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3626
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3627
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3628
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
; Line 3629
	add	rsp, 40					; 00000028H
	ret	0
?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z ENDP		; stbi__YCbCr_to_RGB_row
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
j$ = 4
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z PROC	; stbi__resample_row_generic
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3593
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3597
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3598
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR hs$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3599
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR hs$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbi__resa
$LN6@stbi__resa:
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3600
	mov	rax, QWORD PTR out$[rsp]
; Line 3601
	add	rsp, 24
	ret	0
?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z ENDP	; stbi__resample_row_generic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
t0$ = 8
tv78 = 12
curr$1 = 16
zero$2 = 32
nearw$3 = 48
curb$4 = 64
even$5 = 80
odd$6 = 96
$T7 = 112
$T8 = 128
$T9 = 144
farb$10 = 160
$T11 = 176
nearb$12 = 192
$T13 = 208
farw$14 = 224
$T15 = 240
$T16 = 256
nears$17 = 272
diff$18 = 288
$T19 = 304
$T20 = 320
$T21 = 336
prv0$22 = 352
$T23 = 368
nxt0$24 = 384
$T25 = 400
$T26 = 416
$T27 = 432
prev$28 = 448
$T29 = 464
next$30 = 480
$T31 = 496
curs$32 = 512
bias$33 = 528
$T34 = 544
prvd$35 = 560
$T36 = 576
nxtd$37 = 592
$T38 = 608
$T39 = 624
$T40 = 640
int0$41 = 656
$T42 = 672
int1$43 = 688
$T44 = 704
de0$45 = 720
de1$46 = 736
$T47 = 752
outv$48 = 768
out$ = 800
in_near$ = 808
in_far$ = 816
w$ = 824
hs$ = 832
?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z PROC	; stbi__resample_row_hv_2_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3477
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 792				; 00000318H
; Line 3479
	mov	DWORD PTR i$[rsp], 0
; Line 3481
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN8@stbi__resa
; Line 3482
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3483
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN8@stbi__resa:
; Line 3486
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3490
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	and	eax, -8
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__resa
; Line 3494
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T7[rsp]
	movdqa	XMMWORD PTR zero$2[rsp], xmm0
; Line 3495
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_far$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T8[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T8[rsp]
	movdqa	XMMWORD PTR farb$10[rsp], xmm0
; Line 3496
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR $T9[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T9[rsp]
	movdqa	XMMWORD PTR nearb$12[rsp], xmm0
; Line 3497
	movdqa	xmm0, XMMWORD PTR farb$10[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR $T11[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T11[rsp]
	movdqa	XMMWORD PTR farw$14[rsp], xmm0
; Line 3498
	movdqa	xmm0, XMMWORD PTR nearb$12[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR $T13[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[rsp]
	movdqa	XMMWORD PTR nearw$3[rsp], xmm0
; Line 3499
	movdqa	xmm0, XMMWORD PTR farw$14[rsp]
	psubw	xmm0, XMMWORD PTR nearw$3[rsp]
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR diff$18[rsp], xmm0
; Line 3500
	movdqa	xmm0, XMMWORD PTR nearw$3[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR nears$17[rsp], xmm0
; Line 3501
	movdqa	xmm0, XMMWORD PTR nears$17[rsp]
	paddw	xmm0, XMMWORD PTR diff$18[rsp]
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	movdqa	XMMWORD PTR curr$1[rsp], xmm0
; Line 3508
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	movdqa	XMMWORD PTR prv0$22[rsp], xmm0
; Line 3509
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psrldq	xmm0, 2
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	movdqa	XMMWORD PTR nxt0$24[rsp], xmm0
; Line 3510
	movdqa	xmm0, XMMWORD PTR prv0$22[rsp]
	pinsrw	xmm0, DWORD PTR t1$[rsp], 0
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR prev$28[rsp], xmm0
; Line 3511
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 8
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movdqa	xmm0, XMMWORD PTR nxt0$24[rsp]
	pinsrw	xmm0, eax, 7
	movdqa	XMMWORD PTR $T25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T25[rsp]
	movdqa	XMMWORD PTR next$30[rsp], xmm0
; Line 3517
	movdqa	xmm0, XMMWORD PTR __xmm@00080008000800080008000800080008
	movdqa	XMMWORD PTR $T26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T26[rsp]
	movdqa	XMMWORD PTR bias$33[rsp], xmm0
; Line 3518
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR $T27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T27[rsp]
	movdqa	XMMWORD PTR curs$32[rsp], xmm0
; Line 3519
	movdqa	xmm0, XMMWORD PTR prev$28[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR $T29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T29[rsp]
	movdqa	XMMWORD PTR prvd$35[rsp], xmm0
; Line 3520
	movdqa	xmm0, XMMWORD PTR next$30[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR $T31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T31[rsp]
	movdqa	XMMWORD PTR nxtd$37[rsp], xmm0
; Line 3521
	movdqa	xmm0, XMMWORD PTR curs$32[rsp]
	paddw	xmm0, XMMWORD PTR bias$33[rsp]
	movdqa	XMMWORD PTR $T34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T34[rsp]
	movdqa	XMMWORD PTR curb$4[rsp], xmm0
; Line 3522
	movdqa	xmm0, XMMWORD PTR prvd$35[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR $T36[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T36[rsp]
	movdqa	XMMWORD PTR even$5[rsp], xmm0
; Line 3523
	movdqa	xmm0, XMMWORD PTR nxtd$37[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR $T38[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T38[rsp]
	movdqa	XMMWORD PTR odd$6[rsp], xmm0
; Line 3526
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpcklwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR $T39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T39[rsp]
	movdqa	XMMWORD PTR int0$41[rsp], xmm0
; Line 3527
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpckhwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR $T40[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T40[rsp]
	movdqa	XMMWORD PTR int1$43[rsp], xmm0
; Line 3528
	movdqa	xmm0, XMMWORD PTR int0$41[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T42[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T42[rsp]
	movdqa	XMMWORD PTR de0$45[rsp], xmm0
; Line 3529
	movdqa	xmm0, XMMWORD PTR int1$43[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR $T44[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T44[rsp]
	movdqa	XMMWORD PTR de1$46[rsp], xmm0
; Line 3532
	movdqa	xmm0, XMMWORD PTR de0$45[rsp]
	packuswb xmm0, XMMWORD PTR de1$46[rsp]
	movdqa	XMMWORD PTR $T47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T47[rsp]
	movdqa	XMMWORD PTR outv$48[rsp], xmm0
; Line 3533
	mov	eax, DWORD PTR i$[rsp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movdqa	xmm0, XMMWORD PTR outv$48[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3571
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 7
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3572
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3574
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3575
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3576
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3578
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3579
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3580
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3581
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3582
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3583
	jmp	$LN5@stbi__resa
$LN6@stbi__resa:
; Line 3584
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3588
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3589
	add	rsp, 792				; 00000318H
	ret	0
?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z ENDP	; stbi__resample_row_hv_2_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
tv78 = 8
t0$ = 12
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_hv_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3452
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3455
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3456
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3457
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3460
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3461
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3462
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3463
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3464
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3465
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3466
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3467
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3468
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3472
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3473
	add	rsp, 24
	ret	0
?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_hv_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
n$1 = 4
input$ = 8
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_h_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3422
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3425
	mov	rax, QWORD PTR in_near$[rsp]
	mov	QWORD PTR input$[rsp], rax
; Line 3427
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3429
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3430
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3433
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3434
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3435
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3436
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	add	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 3437
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3438
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3439
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3440
	mov	eax, DWORD PTR w$[rsp]
	sub	eax, 2
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR w$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3441
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3446
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3447
	add	rsp, 24
	ret	0
?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_h_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_v_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3412
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3416
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3417
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3418
	mov	rax, QWORD PTR out$[rsp]
; Line 3419
	add	rsp, 24
	ret	0
?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_v_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 8
in_near$ = 16
in_far$ = 24
w$ = 32
hs$ = 40
?resample_row_1@@YAPEAEPEAE00HH@Z PROC			; resample_row_1
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3403
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 3408
	mov	rax, QWORD PTR in_near$[rsp]
; Line 3409
	ret	0
?resample_row_1@@YAPEAEPEAE00HH@Z ENDP			; resample_row_1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
x$1 = 36
Ld$2 = 40
NL$3 = 44
j$ = 64
?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z PROC	; stbi__decode_jpeg_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3356
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3358
	mov	DWORD PTR m$[rsp], 0
	jmp	SHORT $LN4@stbi__deco
$LN2@stbi__deco:
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
	cmp	DWORD PTR m$[rsp], 4
	jge	SHORT $LN3@stbi__deco
; Line 3359
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3360
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3361
	jmp	SHORT $LN2@stbi__deco
$LN3@stbi__deco:
; Line 3362
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18536], 0
; Line 3363
	xor	edx, edx
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN9@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN9@stbi__deco:
; Line 3364
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN5@stbi__deco:
; Line 3365
	cmp	DWORD PTR m$[rsp], 217			; 000000d9H
	je	$LN6@stbi__deco
; Line 3366
	cmp	DWORD PTR m$[rsp], 218			; 000000daH
	jne	$LN10@stbi__deco
; Line 3367
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z ; stbi__process_scan_header
	test	eax, eax
	jne	SHORT $LN12@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN12@stbi__deco:
; Line 3368
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z ; stbi__parse_entropy_coded_data
	test	eax, eax
	jne	SHORT $LN13@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN13@stbi__deco:
; Line 3369
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN14@stbi__deco
$LN7@stbi__deco:
; Line 3371
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
; Line 3372
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR x$1[rsp], eax
; Line 3373
	cmp	DWORD PTR x$1[rsp], 255			; 000000ffH
	jne	SHORT $LN15@stbi__deco
; Line 3374
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR j$[rsp]
	mov	BYTE PTR [rcx+18472], al
; Line 3375
	jmp	SHORT $LN8@stbi__deco
$LN15@stbi__deco:
; Line 3377
	jmp	SHORT $LN7@stbi__deco
$LN8@stbi__deco:
$LN14@stbi__deco:
; Line 3379
	jmp	SHORT $LN11@stbi__deco
$LN10@stbi__deco:
; Line 3380
	cmp	DWORD PTR m$[rsp], 220			; 000000dcH
	jne	SHORT $LN16@stbi__deco
; Line 3381
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Ld$2[rsp], eax
; Line 3382
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR NL$3[rsp], eax
; Line 3383
	cmp	DWORD PTR Ld$2[rsp], 4
	je	SHORT $LN18@stbi__deco
	lea	rcx, OFFSET FLAT:$SG98698
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN18@stbi__deco:
; Line 3384
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR NL$3[rsp], eax
	je	SHORT $LN19@stbi__deco
	lea	rcx, OFFSET FLAT:$SG98700
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN19@stbi__deco:
; Line 3385
	jmp	SHORT $LN17@stbi__deco
$LN16@stbi__deco:
; Line 3386
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_marker
	test	eax, eax
	jne	SHORT $LN20@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN20@stbi__deco:
$LN17@stbi__deco:
$LN11@stbi__deco:
; Line 3388
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3389
	jmp	$LN5@stbi__deco
$LN6@stbi__deco:
; Line 3390
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN21@stbi__deco
; Line 3391
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_finish
$LN21@stbi__deco:
; Line 3392
	mov	eax, 1
$LN1@stbi__deco:
; Line 3393
	add	rsp, 56					; 00000038H
	ret	0
?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z ENDP	; stbi__decode_jpeg_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
tv131 = 36
z$ = 64
scan$ = 72
?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__decode_jpeg_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3331
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3333
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 0
; Line 3334
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18508], -1
; Line 3335
	mov	rax, QWORD PTR z$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 3336
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3337
	cmp	DWORD PTR m$[rsp], 216			; 000000d8H
	je	SHORT $LN6@stbi__deco
	lea	rcx, OFFSET FLAT:$SG98668
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__deco
$LN6@stbi__deco:
; Line 3338
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN7@stbi__deco
	mov	eax, 1
	jmp	$LN1@stbi__deco
$LN7@stbi__deco:
; Line 3339
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN2@stbi__deco:
; Line 3340
	cmp	DWORD PTR m$[rsp], 192			; 000000c0H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 193			; 000000c1H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	je	SHORT $LN3@stbi__deco
; Line 3341
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_marker
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN8@stbi__deco:
; Line 3342
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
; Line 3343
	cmp	DWORD PTR m$[rsp], 255			; 000000ffH
	jne	SHORT $LN5@stbi__deco
; Line 3345
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__deco
	lea	rcx, OFFSET FLAT:$SG98672
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN9@stbi__deco:
; Line 3346
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3347
	jmp	SHORT $LN4@stbi__deco
$LN5@stbi__deco:
; Line 3348
	jmp	$LN2@stbi__deco
$LN3@stbi__deco:
; Line 3349
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	jne	SHORT $LN12@stbi__deco
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN13@stbi__deco
$LN12@stbi__deco:
	mov	DWORD PTR tv131[rsp], 0
$LN13@stbi__deco:
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv131[rsp]
	mov	DWORD PTR [rax+18480], ecx
; Line 3350
	mov	edx, DWORD PTR scan$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_frame_header
	test	eax, eax
	jne	SHORT $LN10@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN10@stbi__deco:
; Line 3351
	mov	eax, 1
$LN1@stbi__deco:
; Line 3352
	add	rsp, 56					; 00000038H
	ret	0
?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__decode_jpeg_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 40
h_max$ = 48
v_max$ = 52
c$ = 56
Lf$ = 60
q$ = 64
p$ = 68
tv285 = 72
tv294 = 80
z$ = 112
scan$ = 120
?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z PROC ; stbi__process_frame_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3230
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3231
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 3232
	mov	DWORD PTR h_max$[rsp], 1
	mov	DWORD PTR v_max$[rsp], 1
; Line 3233
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Lf$[rsp], eax
	cmp	DWORD PTR Lf$[rsp], 11
	jge	SHORT $LN17@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98620
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN17@stbi__proc:
; Line 3234
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR p$[rsp], eax
	cmp	DWORD PTR p$[rsp], 8
	je	SHORT $LN18@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98622
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN18@stbi__proc:
; Line 3235
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98624
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN19@stbi__proc:
; Line 3236
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN20@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98626
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN20@stbi__proc:
; Line 3237
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN21@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98628
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 3238
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN22@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98630
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN22@stbi__proc:
; Line 3239
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$[rsp], eax
; Line 3240
	cmp	DWORD PTR c$[rsp], 3
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 1
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 4
	je	SHORT $LN23@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98632
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN23@stbi__proc:
; Line 3241
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3242
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR c$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 3243
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
; Line 3244
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3245
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 3247
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax+8], 3
	add	eax, 8
	cmp	DWORD PTR Lf$[rsp], eax
	je	SHORT $LN24@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98634
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3249
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18512], 0
; Line 3250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__proc
; Line 3252
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18080], eax
; Line 3253
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN25@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rdx+rax+18080], ecx
	jne	SHORT $LN25@stbi__proc
; Line 3254
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18512]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18512], eax
$LN25@stbi__proc:
; Line 3255
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$[rsp], eax
; Line 3256
	mov	eax, DWORD PTR q$[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18084], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 0
	je	SHORT $LN27@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 4
	jle	SHORT $LN26@stbi__proc
$LN27@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG98638
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3257
	mov	eax, DWORD PTR q$[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18088], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 0
	je	SHORT $LN29@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 4
	jle	SHORT $LN28@stbi__proc
$LN29@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG98641
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3258
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18092], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18092], 3
	jle	SHORT $LN30@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98643
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3259
	jmp	$LN5@stbi__proc
$LN6@stbi__proc:
; Line 3261
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN31@stbi__proc
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN31@stbi__proc:
; Line 3263
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN32@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98646
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN32@stbi__proc:
; Line 3265
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__proc
$LN8@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__proc
; Line 3266
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR h_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], edx
	jle	SHORT $LN33@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	mov	DWORD PTR h_max$[rsp], eax
$LN33@stbi__proc:
; Line 3267
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR v_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], edx
	jle	SHORT $LN34@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	mov	DWORD PTR v_max$[rsp], eax
$LN34@stbi__proc:
; Line 3268
	jmp	$LN8@stbi__proc
$LN9@stbi__proc:
; Line 3272
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__proc
; Line 3273
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv285[rsp], rax
	mov	eax, DWORD PTR h_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv285[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN35@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98650
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3274
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv294[rsp], rax
	mov	eax, DWORD PTR v_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv294[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98652
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN36@stbi__proc:
; Line 3275
	jmp	$LN11@stbi__proc
$LN12@stbi__proc:
; Line 3278
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR h_max$[rsp]
	mov	DWORD PTR [rax+18056], ecx
; Line 3279
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR v_max$[rsp]
	mov	DWORD PTR [rax+18060], ecx
; Line 3280
	mov	eax, DWORD PTR h_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18072], eax
; Line 3281
	mov	eax, DWORD PTR v_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18076], eax
; Line 3283
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18072]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18072]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18064], eax
; Line 3284
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18076]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18076]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18068], eax
; Line 3286
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__proc
; Line 3288
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	mov	ecx, DWORD PTR h_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR h_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18108], eax
; Line 3289
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	mov	ecx, DWORD PTR v_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR v_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18112], eax
; Line 3297
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18064]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18116], eax
; Line 3298
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18068]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18120], eax
; Line 3299
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
; Line 3300
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3301
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3302
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r8d, 15
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18136], rax
; Line 3303
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	jne	SHORT $LN37@stbi__proc
; Line 3304
	lea	rcx, OFFSET FLAT:$SG98654
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
	jmp	$LN1@stbi__proc
$LN37@stbi__proc:
; Line 3306
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18136]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18128], rax
; Line 3307
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN38@stbi__proc
; Line 3309
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18116]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18168], eax
; Line 3310
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18120]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18172], eax
; Line 3311
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r9d, 15
	mov	r8d, 2
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18144], rax
; Line 3312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	jne	SHORT $LN39@stbi__proc
; Line 3313
	lea	rcx, OFFSET FLAT:$SG98657
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
	jmp	SHORT $LN1@stbi__proc
$LN39@stbi__proc:
; Line 3314
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18144]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18160], rax
$LN38@stbi__proc:
; Line 3316
	jmp	$LN14@stbi__proc
$LN15@stbi__proc:
; Line 3318
	mov	eax, 1
$LN1@stbi__proc:
; Line 3319
	add	rsp, 104				; 00000068H
	ret	0
?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z ENDP ; stbi__process_frame_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 64
ncomp$ = 72
why$ = 80
?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z PROC ; stbi__free_jpeg_components
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3208
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3210
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__free
$LN2@stbi__free:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__free:
	mov	eax, DWORD PTR ncomp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__free
; Line 3211
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	je	SHORT $LN5@stbi__free
; Line 3212
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18136]
	call	QWORD PTR __imp_free
; Line 3213
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3214
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
$LN5@stbi__free:
; Line 3216
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	je	SHORT $LN6@stbi__free
; Line 3217
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18144]
	call	QWORD PTR __imp_free
; Line 3218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3219
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
$LN6@stbi__free:
; Line 3221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	je	SHORT $LN7@stbi__free
; Line 3222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	call	QWORD PTR __imp_free
; Line 3223
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
$LN7@stbi__free:
; Line 3225
	jmp	$LN2@stbi__free
$LN3@stbi__free:
; Line 3226
	mov	eax, DWORD PTR why$[rsp]
; Line 3227
	add	rsp, 56					; 00000038H
	ret	0
?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ENDP ; stbi__free_jpeg_components
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
which$1 = 32
i$ = 36
q$2 = 40
aa$3 = 44
Ls$ = 48
id$4 = 52
z$ = 80
?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z PROC	; stbi__process_scan_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3169
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Ls$[rsp], eax
; Line 3172
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18516], eax
; Line 3173
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jl	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 4
	jg	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR [rcx+18516], eax
	jle	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG98554
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN8@stbi__proc:
; Line 3174
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	lea	eax, DWORD PTR [rax+rax+6]
	cmp	DWORD PTR Ls$[rsp], eax
	je	SHORT $LN10@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98556
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 3175
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__proc
; Line 3176
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR id$4[rsp], eax
; Line 3177
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$2[rsp], eax
; Line 3178
	mov	DWORD PTR which$1[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR which$1[rsp]
	inc	eax
	mov	DWORD PTR which$1[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jge	SHORT $LN6@stbi__proc
; Line 3179
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR id$4[rsp]
	cmp	DWORD PTR [rcx+rax+18080], edx
	jne	SHORT $LN11@stbi__proc
; Line 3180
	jmp	SHORT $LN6@stbi__proc
$LN11@stbi__proc:
	jmp	SHORT $LN5@stbi__proc
$LN6@stbi__proc:
; Line 3181
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jne	SHORT $LN12@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN12@stbi__proc:
; Line 3182
	mov	eax, DWORD PTR q$2[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18096], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18096], 3
	jle	SHORT $LN13@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98560
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN13@stbi__proc:
; Line 3183
	mov	eax, DWORD PTR q$2[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18100], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18100], 3
	jle	SHORT $LN14@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98562
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
; Line 3184
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR which$1[rsp]
	mov	DWORD PTR [rcx+rax*4+18520], edx
; Line 3185
	jmp	$LN2@stbi__proc
$LN3@stbi__proc:
; Line 3189
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18484], eax
; Line 3190
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18488], eax
; Line 3191
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR aa$3[rsp], eax
; Line 3192
	mov	eax, DWORD PTR aa$3[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18492], eax
; Line 3193
	mov	eax, DWORD PTR aa$3[rsp]
	and	eax, 15
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18496], eax
; Line 3194
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN15@stbi__proc
; Line 3195
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18488], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18488]
	cmp	DWORD PTR [rax+18484], ecx
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 13
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 13
	jle	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3196
	lea	rcx, OFFSET FLAT:$SG98567
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN17@stbi__proc:
; Line 3197
	jmp	SHORT $LN16@stbi__proc
$LN15@stbi__proc:
; Line 3198
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	je	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98569
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN19@stbi__proc:
; Line 3199
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	SHORT $LN21@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 0
	je	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG98572
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
; Line 3200
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18488], 63		; 0000003fH
$LN16@stbi__proc:
; Line 3204
	mov	eax, 1
$LN1@stbi__proc:
; Line 3205
	add	rsp, 72					; 00000048H
	ret	0
?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z ENDP	; stbi__process_scan_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
i$1 = 36
th$2 = 40
tv64 = 44
i$3 = 48
n$4 = 52
i$5 = 56
i$6 = 60
p$7 = 64
tc$8 = 68
tv88 = 72
q$9 = 76
t$10 = 80
tv149 = 84
sixteen$11 = 88
tv152 = 92
tv155 = 96
q$12 = 100
tv233 = 104
ok$13 = 108
ok$14 = 112
v$15 = 120
sizes$16 = 128
__$ArrayPad$ = 192
z$ = 224
m$ = 232
?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__process_marker
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3066
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3068
	mov	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 196		; 000000c4H
	je	$LN29@stbi__proc
	cmp	DWORD PTR tv64[rsp], 219		; 000000dbH
	je	SHORT $LN26@stbi__proc
	cmp	DWORD PTR tv64[rsp], 221		; 000000ddH
	je	SHORT $LN24@stbi__proc
	cmp	DWORD PTR tv64[rsp], 255		; 000000ffH
	je	SHORT $LN23@stbi__proc
	jmp	$LN2@stbi__proc
$LN23@stbi__proc:
; Line 3070
	lea	rcx, OFFSET FLAT:$SG98502
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3073
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 4
	je	SHORT $LN25@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98505
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
; Line 3074
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18536], eax
; Line 3075
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3078
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN4@stbi__proc:
; Line 3079
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN5@stbi__proc
; Line 3080
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$9[rsp], eax
; Line 3081
	mov	eax, DWORD PTR q$9[rsp]
	sar	eax, 4
	mov	DWORD PTR p$7[rsp], eax
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN51@stbi__proc
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN52@stbi__proc
$LN51@stbi__proc:
	mov	DWORD PTR tv88[rsp], 0
$LN52@stbi__proc:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR sixteen$11[rsp], eax
; Line 3082
	mov	eax, DWORD PTR q$9[rsp]
	and	eax, 15
	mov	DWORD PTR t$10[rsp], eax
; Line 3083
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN27@stbi__proc
	cmp	DWORD PTR p$7[rsp], 1
	je	SHORT $LN27@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98508
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN27@stbi__proc:
; Line 3084
	cmp	DWORD PTR t$10[rsp], 3
	jle	SHORT $LN28@stbi__proc
	lea	rcx, OFFSET FLAT:$SG98510
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3086
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN8@stbi__proc
$LN6@stbi__proc:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN8@stbi__proc:
	cmp	DWORD PTR i$3[rsp], 64			; 00000040H
	jge	SHORT $LN7@stbi__proc
; Line 3087
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN53@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN54@stbi__proc
$LN53@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv149[rsp], eax
$LN54@stbi__proc:
	movsxd	rax, DWORD PTR t$10[rsp]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR i$3[rsp]
	lea	rdx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	movzx	edx, WORD PTR tv149[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	jmp	SHORT $LN6@stbi__proc
$LN7@stbi__proc:
; Line 3088
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN55@stbi__proc
	mov	DWORD PTR tv152[rsp], 129		; 00000081H
	jmp	SHORT $LN56@stbi__proc
$LN55@stbi__proc:
	mov	DWORD PTR tv152[rsp], 65		; 00000041H
$LN56@stbi__proc:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3089
	jmp	$LN4@stbi__proc
$LN5@stbi__proc:
; Line 3090
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN57@stbi__proc
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN58@stbi__proc
$LN57@stbi__proc:
	mov	DWORD PTR tv155[rsp], 0
$LN58@stbi__proc:
	mov	eax, DWORD PTR tv155[rsp]
	jmp	$LN1@stbi__proc
$LN29@stbi__proc:
; Line 3093
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN9@stbi__proc:
; Line 3094
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN10@stbi__proc
; Line 3096
	mov	DWORD PTR n$4[rsp], 0
; Line 3097
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$12[rsp], eax
; Line 3098
	mov	eax, DWORD PTR q$12[rsp]
	sar	eax, 4
	mov	DWORD PTR tc$8[rsp], eax
; Line 3099
	mov	eax, DWORD PTR q$12[rsp]
	and	eax, 15
	mov	DWORD PTR th$2[rsp], eax
; Line 3100
	cmp	DWORD PTR tc$8[rsp], 1
	jg	SHORT $LN31@stbi__proc
	cmp	DWORD PTR th$2[rsp], 3
	jle	SHORT $LN30@stbi__proc
$LN31@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG98514
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3101
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbi__proc:
	cmp	DWORD PTR i$1[rsp], 16
	jge	SHORT $LN12@stbi__proc
; Line 3102
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	DWORD PTR sizes$16[rsp+rcx*4], eax
; Line 3103
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	eax, DWORD PTR sizes$16[rsp+rax*4]
	mov	ecx, DWORD PTR n$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$4[rsp], eax
; Line 3104
	jmp	SHORT $LN11@stbi__proc
$LN12@stbi__proc:
; Line 3105
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 17
	mov	DWORD PTR L$[rsp], eax
; Line 3106
	cmp	DWORD PTR tc$8[rsp], 0
	jne	SHORT $LN32@stbi__proc
; Line 3107
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ; stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN34@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN34@stbi__proc:
; Line 3108
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1032]
	mov	QWORD PTR v$15[rsp], rax
; Line 3109
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
; Line 3110
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ; stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN35@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3111
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+7752]
	mov	QWORD PTR v$15[rsp], rax
$LN33@stbi__proc:
; Line 3113
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@stbi__proc:
	mov	eax, DWORD PTR n$4[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN15@stbi__proc
; Line 3114
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR v$15[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN14@stbi__proc
$LN15@stbi__proc:
; Line 3115
	cmp	DWORD PTR tc$8[rsp], 0
	je	SHORT $LN36@stbi__proc
; Line 3116
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	movsxd	rcx, DWORD PTR th$2[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	mov	rdx, rax
	call	?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z ; stbi__build_fast_ac
$LN36@stbi__proc:
; Line 3117
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3118
	jmp	$LN9@stbi__proc
$LN10@stbi__proc:
; Line 3119
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN59@stbi__proc
	mov	DWORD PTR tv233[rsp], 1
	jmp	SHORT $LN60@stbi__proc
$LN59@stbi__proc:
	mov	DWORD PTR tv233[rsp], 0
$LN60@stbi__proc:
	mov	eax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__proc
$LN2@stbi__proc:
; Line 3123
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jl	SHORT $LN39@stbi__proc
	cmp	DWORD PTR m$[rsp], 239			; 000000efH
	jle	SHORT $LN38@stbi__proc
$LN39@stbi__proc:
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	$LN37@stbi__proc
$LN38@stbi__proc:
; Line 3124
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR L$[rsp], eax
; Line 3125
	cmp	DWORD PTR L$[rsp], 2
	jge	SHORT $LN40@stbi__proc
; Line 3126
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	SHORT $LN41@stbi__proc
; Line 3127
	lea	rcx, OFFSET FLAT:$SG98526
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
	jmp	SHORT $LN42@stbi__proc
$LN41@stbi__proc:
; Line 3129
	lea	rcx, OFFSET FLAT:$SG98527
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN42@stbi__proc:
$LN40@stbi__proc:
; Line 3131
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
; Line 3133
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jne	$LN43@stbi__proc
	cmp	DWORD PTR L$[rsp], 5
	jl	SHORT $LN43@stbi__proc
; Line 3135
	mov	DWORD PTR ok$13[rsp], 1
; Line 3137
	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN19@stbi__proc
$LN17@stbi__proc:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN19@stbi__proc:
	cmp	DWORD PTR i$5[rsp], 5
	jge	SHORT $LN18@stbi__proc
; Line 3138
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$5[rsp]
	lea	rdx, OFFSET FLAT:?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN45@stbi__proc
; Line 3139
	mov	DWORD PTR ok$13[rsp], 0
$LN45@stbi__proc:
	jmp	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3140
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 5
	mov	DWORD PTR L$[rsp], eax
; Line 3141
	cmp	DWORD PTR ok$13[rsp], 0
	je	SHORT $LN46@stbi__proc
; Line 3142
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 1
$LN46@stbi__proc:
	jmp	$LN44@stbi__proc
$LN43@stbi__proc:
; Line 3143
	cmp	DWORD PTR m$[rsp], 238			; 000000eeH
	jne	$LN47@stbi__proc
	cmp	DWORD PTR L$[rsp], 12
	jl	$LN47@stbi__proc
; Line 3145
	mov	DWORD PTR ok$14[rsp], 1
; Line 3147
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN22@stbi__proc
$LN20@stbi__proc:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN22@stbi__proc:
	cmp	DWORD PTR i$6[rsp], 6
	jge	SHORT $LN21@stbi__proc
; Line 3148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$6[rsp]
	lea	rdx, OFFSET FLAT:?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN48@stbi__proc
; Line 3149
	mov	DWORD PTR ok$14[rsp], 0
$LN48@stbi__proc:
	jmp	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
; Line 3150
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
; Line 3151
	cmp	DWORD PTR ok$14[rsp], 0
	je	SHORT $LN49@stbi__proc
; Line 3152
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 3153
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 3154
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 3155
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18508], eax
; Line 3156
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
$LN49@stbi__proc:
$LN47@stbi__proc:
$LN44@stbi__proc:
; Line 3160
	mov	edx, DWORD PTR L$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 3161
	mov	eax, 1
	jmp	SHORT $LN1@stbi__proc
$LN37@stbi__proc:
; Line 3164
	lea	rcx, OFFSET FLAT:$SG98535
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
$LN1@stbi__proc:
; Line 3165
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__process_marker
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
j$2 = 36
i$3 = 40
h$4 = 44
w$5 = 48
data$6 = 56
tv174 = 64
z$ = 96
?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_finish
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3047
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3048
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN11@stbi__jpeg
; Line 3051
	mov	DWORD PTR n$1[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	mov	DWORD PTR n$1[rsp], eax
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR n$1[rsp], eax
	jge	$LN3@stbi__jpeg
; Line 3052
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$5[rsp], eax
; Line 3053
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$4[rsp], eax
; Line 3054
	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN7@stbi__jpeg:
	mov	eax, DWORD PTR h$4[rsp]
	cmp	DWORD PTR j$2[rsp], eax
	jge	$LN6@stbi__jpeg
; Line 3055
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__jpeg
$LN8@stbi__jpeg:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__jpeg:
	mov	eax, DWORD PTR w$5[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__jpeg
; Line 3056
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$2[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$3[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$6[rsp], rax
; Line 3057
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$6[rsp]
	call	?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z	; stbi__jpeg_dequantize
; Line 3058
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv174[rsp], rax
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$2[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$3[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	mov	r8, QWORD PTR data$6[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv174[rsp]
; Line 3059
	jmp	$LN8@stbi__jpeg
$LN9@stbi__jpeg:
; Line 3060
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 3061
	jmp	$LN2@stbi__jpeg
$LN3@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 3063
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_finish
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
data$ = 32
dequant$ = 40
?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z PROC		; stbi__jpeg_dequantize
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3040
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3042
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__jpeg:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@stbi__jpeg
; Line 3043
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	movsx	ecx, WORD PTR [rdx+rcx*2]
	imul	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 3044
	add	rsp, 24
	ret	0
?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z ENDP		; stbi__jpeg_dequantize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 64
n$2 = 68
n$3 = 72
n$4 = 76
j$5 = 80
i$6 = 84
k$7 = 88
i$8 = 92
x$9 = 96
j$10 = 100
y$11 = 104
j$12 = 108
i$13 = 112
k$14 = 116
i$15 = 120
x$16 = 124
j$17 = 128
y$18 = 132
ha$19 = 136
tv192 = 140
ha$20 = 144
tv315 = 148
ha$21 = 152
tv404 = 156
tv522 = 160
h$22 = 164
w$23 = 168
y2$24 = 172
x2$25 = 176
h$26 = 180
w$27 = 184
y2$28 = 188
x2$29 = 192
data$30 = 200
tv189 = 208
tv312 = 216
data$31 = 224
data$32 = 240
data$33 = 368
__$ArrayPad$ = 496
z$ = 528
?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z PROC ; stbi__parse_entropy_coded_data
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2916
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 520				; 00000208H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2917
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
; Line 2918
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	jne	$LN44@stbi__pars
; Line 2919
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN46@stbi__pars
; Line 2922
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$2[rsp], eax
; Line 2927
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$23[rsp], eax
; Line 2928
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$22[rsp], eax
; Line 2929
	mov	DWORD PTR j$5[rsp], 0
	jmp	SHORT $LN4@stbi__pars
$LN2@stbi__pars:
	mov	eax, DWORD PTR j$5[rsp]
	inc	eax
	mov	DWORD PTR j$5[rsp], eax
$LN4@stbi__pars:
	mov	eax, DWORD PTR h$22[rsp]
	cmp	DWORD PTR j$5[rsp], eax
	jge	$LN3@stbi__pars
; Line 2930
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@stbi__pars
$LN5@stbi__pars:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN7@stbi__pars:
	mov	eax, DWORD PTR w$23[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN6@stbi__pars
; Line 2931
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$19[rsp], eax
; Line 2932
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$19[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$19[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$2[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$32[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ; stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN48@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 2933
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv189[rsp], rax
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$2[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$2[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$5[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$6[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	lea	r8, QWORD PTR data$32[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv189[rsp]
; Line 2935
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv192[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv192[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv192[rsp], 0
	jg	SHORT $LN49@stbi__pars
; Line 2936
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN50@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN50@stbi__pars:
; Line 2939
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN52@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN51@stbi__pars
$LN52@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 2940
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN49@stbi__pars:
; Line 2942
	jmp	$LN5@stbi__pars
$LN6@stbi__pars:
; Line 2943
	jmp	$LN2@stbi__pars
$LN3@stbi__pars:
; Line 2944
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 2945
	jmp	$LN47@stbi__pars
$LN46@stbi__pars:
; Line 2948
	mov	DWORD PTR j$10[rsp], 0
	jmp	SHORT $LN10@stbi__pars
$LN8@stbi__pars:
	mov	eax, DWORD PTR j$10[rsp]
	inc	eax
	mov	DWORD PTR j$10[rsp], eax
$LN10@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$10[rsp], eax
	jge	$LN9@stbi__pars
; Line 2949
	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@stbi__pars
$LN11@stbi__pars:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN13@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$8[rsp], eax
	jge	$LN12@stbi__pars
; Line 2951
	mov	DWORD PTR k$7[rsp], 0
	jmp	SHORT $LN16@stbi__pars
$LN14@stbi__pars:
	mov	eax, DWORD PTR k$7[rsp]
	inc	eax
	mov	DWORD PTR k$7[rsp], eax
$LN16@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$7[rsp], eax
	jge	$LN15@stbi__pars
; Line 2952
	movsxd	rax, DWORD PTR k$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$1[rsp], eax
; Line 2955
	mov	DWORD PTR y$11[rsp], 0
	jmp	SHORT $LN19@stbi__pars
$LN17@stbi__pars:
	mov	eax, DWORD PTR y$11[rsp]
	inc	eax
	mov	DWORD PTR y$11[rsp], eax
$LN19@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$11[rsp], eax
	jge	$LN18@stbi__pars
; Line 2956
	mov	DWORD PTR x$9[rsp], 0
	jmp	SHORT $LN22@stbi__pars
$LN20@stbi__pars:
	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	mov	DWORD PTR x$9[rsp], eax
$LN22@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$9[rsp], eax
	jge	$LN21@stbi__pars
; Line 2957
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$8[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$9[rsp]
	shl	eax, 3
	mov	DWORD PTR x2$25[rsp], eax
; Line 2958
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$10[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$11[rsp]
	shl	eax, 3
	mov	DWORD PTR y2$24[rsp], eax
; Line 2959
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$20[rsp], eax
; Line 2960
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$20[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$20[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$1[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$33[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ; stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN53@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN53@stbi__pars:
; Line 2961
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv312[rsp], rax
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR y2$24[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	movsxd	rdx, DWORD PTR x2$25[rsp]
	add	rcx, rdx
	lea	r8, QWORD PTR data$33[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv312[rsp]
; Line 2962
	jmp	$LN20@stbi__pars
$LN21@stbi__pars:
; Line 2963
	jmp	$LN17@stbi__pars
$LN18@stbi__pars:
; Line 2964
	jmp	$LN14@stbi__pars
$LN15@stbi__pars:
; Line 2967
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv315[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv315[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv315[rsp], 0
	jg	SHORT $LN54@stbi__pars
; Line 2968
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN55@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN55@stbi__pars:
; Line 2969
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN57@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN56@stbi__pars
$LN57@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 2970
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN54@stbi__pars:
; Line 2972
	jmp	$LN11@stbi__pars
$LN12@stbi__pars:
; Line 2973
	jmp	$LN8@stbi__pars
$LN9@stbi__pars:
; Line 2974
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 2976
	jmp	$LN45@stbi__pars
$LN44@stbi__pars:
; Line 2977
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN58@stbi__pars
; Line 2979
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$4[rsp], eax
; Line 2984
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$27[rsp], eax
; Line 2985
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$26[rsp], eax
; Line 2986
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN25@stbi__pars
$LN23@stbi__pars:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN25@stbi__pars:
	mov	eax, DWORD PTR h$26[rsp]
	cmp	DWORD PTR j$12[rsp], eax
	jge	$LN24@stbi__pars
; Line 2987
	mov	DWORD PTR i$13[rsp], 0
	jmp	SHORT $LN28@stbi__pars
$LN26@stbi__pars:
	mov	eax, DWORD PTR i$13[rsp]
	inc	eax
	mov	DWORD PTR i$13[rsp], eax
$LN28@stbi__pars:
	mov	eax, DWORD PTR w$27[rsp]
	cmp	DWORD PTR i$13[rsp], eax
	jge	$LN27@stbi__pars
; Line 2988
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$4[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$12[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$30[rsp], rax
; Line 2989
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN60@stbi__pars
; Line 2990
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$4[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ; stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN62@stbi__pars
; Line 2991
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 2992
	jmp	$LN61@stbi__pars
$LN60@stbi__pars:
; Line 2993
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$21[rsp], eax
; Line 2994
	movsxd	rax, DWORD PTR ha$21[rsp]
	imul	rax, rax, 1024				; 00000400H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13960]
	movsxd	rcx, DWORD PTR ha$21[rsp]
	imul	rcx, rcx, 1680				; 00000690H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+6728]
	mov	r9, rax
	mov	r8, rcx
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z ; stbi__jpeg_decode_block_prog_ac
	test	eax, eax
	jne	SHORT $LN63@stbi__pars
; Line 2995
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
$LN61@stbi__pars:
; Line 2998
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv404[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv404[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv404[rsp], 0
	jg	SHORT $LN64@stbi__pars
; Line 2999
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN65@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN65@stbi__pars:
; Line 3000
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN67@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN66@stbi__pars
$LN67@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN66@stbi__pars:
; Line 3001
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN64@stbi__pars:
; Line 3003
	jmp	$LN26@stbi__pars
$LN27@stbi__pars:
; Line 3004
	jmp	$LN23@stbi__pars
$LN24@stbi__pars:
; Line 3005
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 3006
	jmp	$LN59@stbi__pars
$LN58@stbi__pars:
; Line 3008
	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN31@stbi__pars
$LN29@stbi__pars:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN31@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$17[rsp], eax
	jge	$LN30@stbi__pars
; Line 3009
	mov	DWORD PTR i$15[rsp], 0
	jmp	SHORT $LN34@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR i$15[rsp]
	inc	eax
	mov	DWORD PTR i$15[rsp], eax
$LN34@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$15[rsp], eax
	jge	$LN33@stbi__pars
; Line 3011
	mov	DWORD PTR k$14[rsp], 0
	jmp	SHORT $LN37@stbi__pars
$LN35@stbi__pars:
	mov	eax, DWORD PTR k$14[rsp]
	inc	eax
	mov	DWORD PTR k$14[rsp], eax
$LN37@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$14[rsp], eax
	jge	$LN36@stbi__pars
; Line 3012
	movsxd	rax, DWORD PTR k$14[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$3[rsp], eax
; Line 3015
	mov	DWORD PTR y$18[rsp], 0
	jmp	SHORT $LN40@stbi__pars
$LN38@stbi__pars:
	mov	eax, DWORD PTR y$18[rsp]
	inc	eax
	mov	DWORD PTR y$18[rsp], eax
$LN40@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$18[rsp], eax
	jge	$LN39@stbi__pars
; Line 3016
	mov	DWORD PTR x$16[rsp], 0
	jmp	SHORT $LN43@stbi__pars
$LN41@stbi__pars:
	mov	eax, DWORD PTR x$16[rsp]
	inc	eax
	mov	DWORD PTR x$16[rsp], eax
$LN43@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$16[rsp], eax
	jge	$LN42@stbi__pars
; Line 3017
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$15[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$16[rsp]
	mov	DWORD PTR x2$29[rsp], eax
; Line 3018
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$17[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$18[rsp]
	mov	DWORD PTR y2$28[rsp], eax
; Line 3019
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR y2$28[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR x2$29[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$31[rsp], rax
; Line 3020
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$3[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$31[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ; stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN68@stbi__pars
; Line 3021
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 3022
	jmp	$LN41@stbi__pars
$LN42@stbi__pars:
; Line 3023
	jmp	$LN38@stbi__pars
$LN39@stbi__pars:
; Line 3024
	jmp	$LN35@stbi__pars
$LN36@stbi__pars:
; Line 3027
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv522[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv522[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv522[rsp], 0
	jg	SHORT $LN69@stbi__pars
; Line 3028
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN70@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN70@stbi__pars:
; Line 3029
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN72@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN71@stbi__pars
$LN72@stbi__pars:
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pars
$LN71@stbi__pars:
; Line 3030
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN69@stbi__pars:
; Line 3032
	jmp	$LN32@stbi__pars
$LN33@stbi__pars:
; Line 3033
	jmp	$LN29@stbi__pars
$LN30@stbi__pars:
; Line 3034
	mov	eax, 1
$LN59@stbi__pars:
$LN45@stbi__pars:
$LN1@stbi__pars:
; Line 3037
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 520				; 00000208H
	ret	0
?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z ENDP ; stbi__parse_entropy_coded_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 0
j$ = 32
?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_reset
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2903
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2904
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18468], 0
; Line 2905
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18464], 0
; Line 2906
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 0
; Line 2907
	mov	eax, 96					; 00000060H
	imul	rax, rax, 3
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
; Line 2908
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 2909
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18536], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18536]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN4@stbi__jpeg
$LN3@stbi__jpeg:
	mov	DWORD PTR tv88[rsp], 2147483647		; 7fffffffH
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR tv88[rsp]
	mov	DWORD PTR [rax+18540], ecx
; Line 2910
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18500], 0
; Line 2913
	add	rsp, 24
	ret	0
?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
j$ = 64
?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z PROC		; stbi__get_marker
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2886
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2888
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@stbi__get_
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	mov	BYTE PTR x$[rsp], al
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
	movzx	eax, BYTE PTR x$[rsp]
	jmp	SHORT $LN1@stbi__get_
$LN4@stbi__get_:
; Line 2889
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR x$[rsp], al
; Line 2890
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@stbi__get_
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__get_
$LN5@stbi__get_:
$LN2@stbi__get_:
; Line 2891
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@stbi__get_
; Line 2892
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR x$[rsp], al
	jmp	SHORT $LN2@stbi__get_
$LN3@stbi__get_:
; Line 2893
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__get_:
; Line 2894
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ENDP		; stbi__get_marker
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp$ = 0
row1$ = 16
row3$ = 32
row5$ = 48
row7$ = 64
row0$ = 80
row2$ = 96
row4$ = 112
row6$ = 128
p0$1 = 144
p2$2 = 160
p1$3 = 176
p3$4 = 192
bias_0$ = 208
bias_1$ = 224
rot0_0$ = 240
rot0_1$ = 256
rot2_0$ = 272
rot2_1$ = 288
rot3_0$ = 304
rot3_1$ = 320
rot1_0$ = 336
rot1_1$ = 352
rot0_0lo$5 = 368
rot0_0hi$6 = 384
sum04$7 = 400
dif04$8 = 416
t0e_l$9 = 432
t3e_l$10 = 448
t0e_h$11 = 464
t3e_h$12 = 480
t1e_l$13 = 496
t2e_l$14 = 512
t1e_h$15 = 528
t2e_h$16 = 544
rot2_0lo$17 = 560
rot2_0hi$18 = 576
rot3_0lo$19 = 592
rot3_0hi$20 = 608
sum17$21 = 624
sum35$22 = 640
rot1_0lo$23 = 656
rot1_0hi$24 = 672
y5o_l$25 = 688
y5o_h$26 = 704
y4o_l$27 = 720
y4o_h$28 = 736
abiased_l$29 = 752
x7_l$30 = 768
abiased_h$31 = 784
x7_h$32 = 800
abiased_l$33 = 816
x6_l$34 = 832
abiased_h$35 = 848
x6_h$36 = 864
abiased_l$37 = 880
x5_l$38 = 896
abiased_h$39 = 912
x5_h$40 = 928
abiased_l$41 = 944
x4_l$42 = 960
abiased_h$43 = 976
x4_h$44 = 992
rot0_0lo$45 = 1008
rot0_0hi$46 = 1024
sum04$47 = 1040
dif04$48 = 1056
t0e_l$49 = 1072
t3e_l$50 = 1088
t0e_h$51 = 1104
t3e_h$52 = 1120
t1e_l$53 = 1136
t2e_l$54 = 1152
t1e_h$55 = 1168
t2e_h$56 = 1184
rot2_0lo$57 = 1200
rot2_0hi$58 = 1216
rot3_0lo$59 = 1232
rot3_0hi$60 = 1248
sum17$61 = 1264
sum35$62 = 1280
rot1_0lo$63 = 1296
rot1_0hi$64 = 1312
y5o_l$65 = 1328
y5o_h$66 = 1344
y4o_l$67 = 1360
y4o_h$68 = 1376
abiased_l$69 = 1392
x7_l$70 = 1408
abiased_h$71 = 1424
x7_h$72 = 1440
abiased_l$73 = 1456
x6_l$74 = 1472
abiased_h$75 = 1488
x6_h$76 = 1504
abiased_l$77 = 1520
x5_l$78 = 1536
abiased_h$79 = 1552
x5_h$80 = 1568
abiased_l$81 = 1584
x4_l$82 = 1600
abiased_h$83 = 1616
x4_h$84 = 1632
$T85 = 1648
$T86 = 1664
$T87 = 1680
$T88 = 1696
$T89 = 1712
$T90 = 1728
$T91 = 1744
$T92 = 1760
$T93 = 1776
$T94 = 1792
$T95 = 1808
$T96 = 1824
$T97 = 1840
$T98 = 1856
$T99 = 1872
$T100 = 1888
$T101 = 1904
$T102 = 1920
$T103 = 1936
$T104 = 1952
$T105 = 1968
$T106 = 1984
$T107 = 2000
$T108 = 2016
$T109 = 2032
$T110 = 2048
$T111 = 2064
$T112 = 2080
$T113 = 2096
$T114 = 2112
$T115 = 2128
$T116 = 2144
$T117 = 2160
$T118 = 2176
$T119 = 2192
$T120 = 2208
$T121 = 2224
$T122 = 2240
$T123 = 2256
$T124 = 2272
$T125 = 2288
$T126 = 2304
$T127 = 2320
$T128 = 2336
$T129 = 2352
$T130 = 2368
$T131 = 2384
$T132 = 2400
$T133 = 2416
$T134 = 2432
$T135 = 2448
$T136 = 2464
$T137 = 2480
$T138 = 2496
$T139 = 2512
$T140 = 2528
$T141 = 2544
$T142 = 2560
$T143 = 2576
$T144 = 2592
$T145 = 2608
$T146 = 2624
$T147 = 2640
$T148 = 2656
$T149 = 2672
$T150 = 2688
y0o_l$151 = 2704
$T152 = 2720
y0o_h$153 = 2736
$T154 = 2752
y1o_l$155 = 2768
$T156 = 2784
y1o_h$157 = 2800
$T158 = 2816
y2o_l$159 = 2832
$T160 = 2848
y2o_h$161 = 2864
$T162 = 2880
y3o_l$163 = 2896
$T164 = 2912
y3o_h$165 = 2928
$T166 = 2944
x0_l$167 = 2960
$T168 = 2976
x0_h$169 = 2992
$T170 = 3008
$T171 = 3024
$T172 = 3040
$T173 = 3056
$T174 = 3072
sum_h$175 = 3088
sum_l$176 = 3104
$T177 = 3120
$T178 = 3136
$T179 = 3152
dif_h$180 = 3168
dif_l$181 = 3184
$T182 = 3200
$T183 = 3216
$T184 = 3232
x1_l$185 = 3248
$T186 = 3264
x1_h$187 = 3280
$T188 = 3296
$T189 = 3312
$T190 = 3328
$T191 = 3344
$T192 = 3360
sum_h$193 = 3376
sum_l$194 = 3392
$T195 = 3408
$T196 = 3424
$T197 = 3440
dif_h$198 = 3456
dif_l$199 = 3472
$T200 = 3488
$T201 = 3504
$T202 = 3520
x2_l$203 = 3536
$T204 = 3552
x2_h$205 = 3568
$T206 = 3584
$T207 = 3600
$T208 = 3616
$T209 = 3632
$T210 = 3648
sum_h$211 = 3664
sum_l$212 = 3680
$T213 = 3696
$T214 = 3712
$T215 = 3728
dif_h$216 = 3744
dif_l$217 = 3760
$T218 = 3776
$T219 = 3792
$T220 = 3808
x3_l$221 = 3824
$T222 = 3840
x3_h$223 = 3856
$T224 = 3872
$T225 = 3888
$T226 = 3904
$T227 = 3920
$T228 = 3936
sum_h$229 = 3952
sum_l$230 = 3968
$T231 = 3984
$T232 = 4000
$T233 = 4016
dif_h$234 = 4032
dif_l$235 = 4048
$T236 = 4064
$T237 = 4080
$T238 = 4096
$T239 = 4112
$T240 = 4128
$T241 = 4144
$T242 = 4160
$T243 = 4176
$T244 = 4192
$T245 = 4208
$T246 = 4224
$T247 = 4240
$T248 = 4256
$T249 = 4272
$T250 = 4288
$T251 = 4304
$T252 = 4320
$T253 = 4336
$T254 = 4352
$T255 = 4368
$T256 = 4384
$T257 = 4400
$T258 = 4416
$T259 = 4432
$T260 = 4448
$T261 = 4464
$T262 = 4480
$T263 = 4496
$T264 = 4512
$T265 = 4528
$T266 = 4544
$T267 = 4560
$T268 = 4576
$T269 = 4592
$T270 = 4608
$T271 = 4624
$T272 = 4640
$T273 = 4656
$T274 = 4672
$T275 = 4688
$T276 = 4704
$T277 = 4720
$T278 = 4736
$T279 = 4752
$T280 = 4768
$T281 = 4784
$T282 = 4800
$T283 = 4816
$T284 = 4832
$T285 = 4848
$T286 = 4864
$T287 = 4880
$T288 = 4896
$T289 = 4912
$T290 = 4928
$T291 = 4944
$T292 = 4960
$T293 = 4976
$T294 = 4992
$T295 = 5008
$T296 = 5024
$T297 = 5040
$T298 = 5056
$T299 = 5072
$T300 = 5088
$T301 = 5104
$T302 = 5120
$T303 = 5136
$T304 = 5152
$T305 = 5168
$T306 = 5184
$T307 = 5200
$T308 = 5216
$T309 = 5232
$T310 = 5248
y0o_l$311 = 5264
$T312 = 5280
y0o_h$313 = 5296
$T314 = 5312
y1o_l$315 = 5328
$T316 = 5344
y1o_h$317 = 5360
$T318 = 5376
y2o_l$319 = 5392
$T320 = 5408
y2o_h$321 = 5424
$T322 = 5440
y3o_l$323 = 5456
$T324 = 5472
y3o_h$325 = 5488
$T326 = 5504
x0_l$327 = 5520
$T328 = 5536
x0_h$329 = 5552
$T330 = 5568
$T331 = 5584
$T332 = 5600
$T333 = 5616
$T334 = 5632
sum_h$335 = 5648
sum_l$336 = 5664
$T337 = 5680
$T338 = 5696
$T339 = 5712
dif_h$340 = 5728
dif_l$341 = 5744
$T342 = 5760
$T343 = 5776
$T344 = 5792
x1_l$345 = 5808
$T346 = 5824
x1_h$347 = 5840
$T348 = 5856
$T349 = 5872
$T350 = 5888
$T351 = 5904
$T352 = 5920
sum_h$353 = 5936
sum_l$354 = 5952
$T355 = 5968
$T356 = 5984
$T357 = 6000
dif_h$358 = 6016
dif_l$359 = 6032
$T360 = 6048
$T361 = 6064
$T362 = 6080
x2_l$363 = 6096
$T364 = 6112
x2_h$365 = 6128
$T366 = 6144
$T367 = 6160
$T368 = 6176
$T369 = 6192
$T370 = 6208
sum_h$371 = 6224
sum_l$372 = 6240
$T373 = 6256
$T374 = 6272
$T375 = 6288
dif_h$376 = 6304
dif_l$377 = 6320
$T378 = 6336
$T379 = 6352
$T380 = 6368
x3_l$381 = 6384
$T382 = 6400
x3_h$383 = 6416
$T384 = 6432
$T385 = 6448
$T386 = 6464
$T387 = 6480
$T388 = 6496
sum_h$389 = 6512
sum_l$390 = 6528
$T391 = 6544
$T392 = 6560
$T393 = 6576
dif_h$394 = 6592
dif_l$395 = 6608
$T396 = 6624
$T397 = 6640
$T398 = 6656
$T399 = 6672
$T400 = 6688
$T401 = 6704
$T402 = 6720
$T403 = 6736
$T404 = 6752
$T405 = 6768
$T406 = 6784
$T407 = 6800
$T408 = 6816
$T409 = 6832
$T410 = 6848
$T411 = 6864
$T412 = 6880
$T413 = 6896
$T414 = 6912
$T415 = 6928
$T416 = 6944
$T417 = 6960
$T418 = 6976
out$ = 7008
out_stride$ = 7016
data$ = 7024
?stbi__idct_simd@@YAXPEAEHQEAF@Z PROC			; stbi__idct_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2497
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 7000				; 00001b58H
	call	__chkstk
	sub	rsp, rax
; Line 2581
	movdqa	xmm0, XMMWORD PTR __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
	movdqa	XMMWORD PTR $T85[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T85[rsp]
	movdqa	XMMWORD PTR rot0_0$[rsp], xmm0
; Line 2582
	movdqa	xmm0, XMMWORD PTR __xmm@08a914e808a914e808a914e808a914e8
	movdqa	XMMWORD PTR $T86[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T86[rsp]
	movdqa	XMMWORD PTR rot0_1$[rsp], xmm0
; Line 2583
	movdqa	xmm0, XMMWORD PTR __xmm@12d0046b12d0046b12d0046b12d0046b
	movdqa	XMMWORD PTR $T87[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T87[rsp]
	movdqa	XMMWORD PTR rot1_0$[rsp], xmm0
; Line 2584
	movdqa	xmm0, XMMWORD PTR __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
	movdqa	XMMWORD PTR $T88[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T88[rsp]
	movdqa	XMMWORD PTR rot1_1$[rsp], xmm0
; Line 2585
	movdqa	xmm0, XMMWORD PTR __xmm@e09ee565e09ee565e09ee565e09ee565
	movdqa	XMMWORD PTR $T89[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T89[rsp]
	movdqa	XMMWORD PTR rot2_0$[rsp], xmm0
; Line 2586
	movdqa	xmm0, XMMWORD PTR __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
	movdqa	XMMWORD PTR $T90[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T90[rsp]
	movdqa	XMMWORD PTR rot2_1$[rsp], xmm0
; Line 2587
	movdqa	xmm0, XMMWORD PTR __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
	movdqa	XMMWORD PTR $T91[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T91[rsp]
	movdqa	XMMWORD PTR rot3_0$[rsp], xmm0
; Line 2588
	movdqa	xmm0, XMMWORD PTR __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
	movdqa	XMMWORD PTR $T92[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T92[rsp]
	movdqa	XMMWORD PTR rot3_1$[rsp], xmm0
; Line 2591
	movdqa	xmm0, XMMWORD PTR __xmm@00000200000002000000020000000200
	movdqa	XMMWORD PTR $T93[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T93[rsp]
	movdqa	XMMWORD PTR bias_0$[rsp], xmm0
; Line 2592
	movdqa	xmm0, XMMWORD PTR __xmm@01010000010100000101000001010000
	movdqa	XMMWORD PTR $T94[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T94[rsp]
	movdqa	XMMWORD PTR bias_1$[rsp], xmm0
; Line 2595
	mov	rax, QWORD PTR data$[rsp]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T95[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T95[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
; Line 2596
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 16
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T96[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T96[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2597
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 32					; 00000020H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T97[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T97[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2598
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 48					; 00000030H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T98[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T98[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2599
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 64					; 00000040H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T99[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T99[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2600
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 80					; 00000050H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T100[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T100[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2601
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 96					; 00000060H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T101[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T101[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2602
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 112				; 00000070H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR $T102[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T102[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2605
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T103[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T103[rsp]
	movdqa	XMMWORD PTR rot0_0lo$5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T104[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T104[rsp]
	movdqa	XMMWORD PTR rot0_0hi$6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T105[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T105[rsp]
	movdqa	XMMWORD PTR t2e_l$14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T106[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T106[rsp]
	movdqa	XMMWORD PTR t2e_h$16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T107[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T107[rsp]
	movdqa	XMMWORD PTR t3e_l$10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T108[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T108[rsp]
	movdqa	XMMWORD PTR t3e_h$12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T109[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T109[rsp]
	movdqa	XMMWORD PTR sum04$7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T110[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T110[rsp]
	movdqa	XMMWORD PTR dif04$8[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T111[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T111[rsp]
	punpcklwd xmm0, XMMWORD PTR sum04$7[rsp]
	movdqa	XMMWORD PTR $T112[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T112[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T113[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T113[rsp]
	movdqa	XMMWORD PTR t0e_l$9[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T114[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T114[rsp]
	punpckhwd xmm0, XMMWORD PTR sum04$7[rsp]
	movdqa	XMMWORD PTR $T115[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T115[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T116[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T116[rsp]
	movdqa	XMMWORD PTR t0e_h$11[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T117[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T117[rsp]
	punpcklwd xmm0, XMMWORD PTR dif04$8[rsp]
	movdqa	XMMWORD PTR $T118[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T118[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T119[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T119[rsp]
	movdqa	XMMWORD PTR t1e_l$13[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T120[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T120[rsp]
	punpckhwd xmm0, XMMWORD PTR dif04$8[rsp]
	movdqa	XMMWORD PTR $T121[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T121[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T122[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T122[rsp]
	movdqa	XMMWORD PTR t1e_h$15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR $T123[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T123[rsp]
	movdqa	XMMWORD PTR x0_l$167[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR $T124[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T124[rsp]
	movdqa	XMMWORD PTR x0_h$169[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR $T125[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T125[rsp]
	movdqa	XMMWORD PTR x3_l$221[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR $T126[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T126[rsp]
	movdqa	XMMWORD PTR x3_h$223[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR $T127[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T127[rsp]
	movdqa	XMMWORD PTR x1_l$185[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR $T128[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T128[rsp]
	movdqa	XMMWORD PTR x1_h$187[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR $T129[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T129[rsp]
	movdqa	XMMWORD PTR x2_l$203[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR $T130[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T130[rsp]
	movdqa	XMMWORD PTR x2_h$205[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T131[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T131[rsp]
	movdqa	XMMWORD PTR rot2_0lo$17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T132[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T132[rsp]
	movdqa	XMMWORD PTR rot2_0hi$18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T133[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T133[rsp]
	movdqa	XMMWORD PTR y0o_l$151[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T134[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T134[rsp]
	movdqa	XMMWORD PTR y0o_h$153[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T135[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T135[rsp]
	movdqa	XMMWORD PTR y2o_l$159[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T136[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T136[rsp]
	movdqa	XMMWORD PTR y2o_h$161[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T137[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T137[rsp]
	movdqa	XMMWORD PTR rot3_0lo$19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T138[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T138[rsp]
	movdqa	XMMWORD PTR rot3_0hi$20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T139[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T139[rsp]
	movdqa	XMMWORD PTR y1o_l$155[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T140[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T140[rsp]
	movdqa	XMMWORD PTR y1o_h$157[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T141[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T141[rsp]
	movdqa	XMMWORD PTR y3o_l$163[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T142[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T142[rsp]
	movdqa	XMMWORD PTR y3o_h$165[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T143[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T143[rsp]
	movdqa	XMMWORD PTR sum17$21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T144[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T144[rsp]
	movdqa	XMMWORD PTR sum35$22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR $T145[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T145[rsp]
	movdqa	XMMWORD PTR rot1_0lo$23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR $T146[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T146[rsp]
	movdqa	XMMWORD PTR rot1_0hi$24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T147[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T147[rsp]
	movdqa	XMMWORD PTR y4o_l$27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T148[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T148[rsp]
	movdqa	XMMWORD PTR y4o_h$28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T149[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T149[rsp]
	movdqa	XMMWORD PTR y5o_l$25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T150[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T150[rsp]
	movdqa	XMMWORD PTR y5o_h$26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$151[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR $T152[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T152[rsp]
	movdqa	XMMWORD PTR x4_l$42[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$153[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR $T154[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T154[rsp]
	movdqa	XMMWORD PTR x4_h$44[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$155[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR $T156[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T156[rsp]
	movdqa	XMMWORD PTR x5_l$38[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$157[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR $T158[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T158[rsp]
	movdqa	XMMWORD PTR x5_h$40[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$159[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR $T160[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T160[rsp]
	movdqa	XMMWORD PTR x6_l$34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$161[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR $T162[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T162[rsp]
	movdqa	XMMWORD PTR x6_h$36[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$163[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR $T164[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T164[rsp]
	movdqa	XMMWORD PTR x7_l$30[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$165[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR $T166[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T166[rsp]
	movdqa	XMMWORD PTR x7_h$32[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$167[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T168[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T168[rsp]
	movdqa	XMMWORD PTR abiased_l$29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$169[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T170[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T170[rsp]
	movdqa	XMMWORD PTR abiased_h$31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR $T171[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T171[rsp]
	movdqa	XMMWORD PTR sum_l$176[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR $T172[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T172[rsp]
	movdqa	XMMWORD PTR sum_h$175[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR $T173[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T173[rsp]
	movdqa	XMMWORD PTR dif_l$181[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR $T174[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T174[rsp]
	movdqa	XMMWORD PTR dif_h$180[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$175[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T178[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$176[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T177[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T177[rsp]
	packssdw xmm0, XMMWORD PTR $T178[rsp]
	movdqa	XMMWORD PTR $T179[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T179[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$180[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T183[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$181[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T182[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T182[rsp]
	packssdw xmm0, XMMWORD PTR $T183[rsp]
	movdqa	XMMWORD PTR $T184[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T184[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$185[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T186[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T186[rsp]
	movdqa	XMMWORD PTR abiased_l$33[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$187[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T188[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T188[rsp]
	movdqa	XMMWORD PTR abiased_h$35[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR $T189[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T189[rsp]
	movdqa	XMMWORD PTR sum_l$194[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR $T190[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T190[rsp]
	movdqa	XMMWORD PTR sum_h$193[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR $T191[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T191[rsp]
	movdqa	XMMWORD PTR dif_l$199[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR $T192[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T192[rsp]
	movdqa	XMMWORD PTR dif_h$198[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$193[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T196[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$194[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T195[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T195[rsp]
	packssdw xmm0, XMMWORD PTR $T196[rsp]
	movdqa	XMMWORD PTR $T197[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T197[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$198[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T201[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$199[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T200[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T200[rsp]
	packssdw xmm0, XMMWORD PTR $T201[rsp]
	movdqa	XMMWORD PTR $T202[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T202[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$203[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T204[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T204[rsp]
	movdqa	XMMWORD PTR abiased_l$37[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$205[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T206[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T206[rsp]
	movdqa	XMMWORD PTR abiased_h$39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR $T207[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T207[rsp]
	movdqa	XMMWORD PTR sum_l$212[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR $T208[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T208[rsp]
	movdqa	XMMWORD PTR sum_h$211[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR $T209[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T209[rsp]
	movdqa	XMMWORD PTR dif_l$217[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR $T210[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T210[rsp]
	movdqa	XMMWORD PTR dif_h$216[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$211[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T214[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$212[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T213[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T213[rsp]
	packssdw xmm0, XMMWORD PTR $T214[rsp]
	movdqa	XMMWORD PTR $T215[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T215[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$216[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T219[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$217[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T218[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T218[rsp]
	packssdw xmm0, XMMWORD PTR $T219[rsp]
	movdqa	XMMWORD PTR $T220[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T220[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$221[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T222[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T222[rsp]
	movdqa	XMMWORD PTR abiased_l$41[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$223[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR $T224[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T224[rsp]
	movdqa	XMMWORD PTR abiased_h$43[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR $T225[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T225[rsp]
	movdqa	XMMWORD PTR sum_l$230[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR $T226[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T226[rsp]
	movdqa	XMMWORD PTR sum_h$229[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR $T227[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T227[rsp]
	movdqa	XMMWORD PTR dif_l$235[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR $T228[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T228[rsp]
	movdqa	XMMWORD PTR dif_h$234[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$229[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T232[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$230[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T231[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T231[rsp]
	packssdw xmm0, XMMWORD PTR $T232[rsp]
	movdqa	XMMWORD PTR $T233[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T233[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$234[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T237[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$235[rsp]
	psrad	xmm0, 10
	movdqa	XMMWORD PTR $T236[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T236[rsp]
	packssdw xmm0, XMMWORD PTR $T237[rsp]
	movdqa	XMMWORD PTR $T238[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T238[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2609
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T239[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T239[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T240[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T240[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2610
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T241[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T241[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T242[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T242[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2611
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T243[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T243[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T244[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T244[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2612
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T245[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T245[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T246[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T246[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2615
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR $T247[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T247[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR $T248[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T248[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2616
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T249[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T249[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T250[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T250[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2617
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T251[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T251[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T252[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T252[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2618
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T253[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T253[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T254[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T254[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2621
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T255[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T255[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T256[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T256[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2622
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T257[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T257[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T258[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T258[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2623
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T259[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T259[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T260[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T260[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2624
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T261[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T261[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T262[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T262[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2628
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T263[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T263[rsp]
	movdqa	XMMWORD PTR rot0_0lo$45[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR $T264[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T264[rsp]
	movdqa	XMMWORD PTR rot0_0hi$46[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T265[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T265[rsp]
	movdqa	XMMWORD PTR t2e_l$54[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR $T266[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T266[rsp]
	movdqa	XMMWORD PTR t2e_h$56[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T267[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T267[rsp]
	movdqa	XMMWORD PTR t3e_l$50[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR $T268[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T268[rsp]
	movdqa	XMMWORD PTR t3e_h$52[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T269[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T269[rsp]
	movdqa	XMMWORD PTR sum04$47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR $T270[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T270[rsp]
	movdqa	XMMWORD PTR dif04$48[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T271[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T271[rsp]
	punpcklwd xmm0, XMMWORD PTR sum04$47[rsp]
	movdqa	XMMWORD PTR $T272[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T272[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T273[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T273[rsp]
	movdqa	XMMWORD PTR t0e_l$49[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T274[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T274[rsp]
	punpckhwd xmm0, XMMWORD PTR sum04$47[rsp]
	movdqa	XMMWORD PTR $T275[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T275[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T276[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T276[rsp]
	movdqa	XMMWORD PTR t0e_h$51[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T277[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T277[rsp]
	punpcklwd xmm0, XMMWORD PTR dif04$48[rsp]
	movdqa	XMMWORD PTR $T278[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T278[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T279[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T279[rsp]
	movdqa	XMMWORD PTR t1e_l$53[rsp], xmm0
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR $T280[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T280[rsp]
	punpckhwd xmm0, XMMWORD PTR dif04$48[rsp]
	movdqa	XMMWORD PTR $T281[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T281[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR $T282[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T282[rsp]
	movdqa	XMMWORD PTR t1e_h$55[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR $T283[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T283[rsp]
	movdqa	XMMWORD PTR x0_l$327[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR $T284[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T284[rsp]
	movdqa	XMMWORD PTR x0_h$329[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR $T285[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T285[rsp]
	movdqa	XMMWORD PTR x3_l$381[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR $T286[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T286[rsp]
	movdqa	XMMWORD PTR x3_h$383[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR $T287[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T287[rsp]
	movdqa	XMMWORD PTR x1_l$345[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR $T288[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T288[rsp]
	movdqa	XMMWORD PTR x1_h$347[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR $T289[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T289[rsp]
	movdqa	XMMWORD PTR x2_l$363[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR $T290[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T290[rsp]
	movdqa	XMMWORD PTR x2_h$365[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T291[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T291[rsp]
	movdqa	XMMWORD PTR rot2_0lo$57[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T292[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T292[rsp]
	movdqa	XMMWORD PTR rot2_0hi$58[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T293[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T293[rsp]
	movdqa	XMMWORD PTR y0o_l$311[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR $T294[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T294[rsp]
	movdqa	XMMWORD PTR y0o_h$313[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T295[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T295[rsp]
	movdqa	XMMWORD PTR y2o_l$319[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR $T296[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T296[rsp]
	movdqa	XMMWORD PTR y2o_h$321[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T297[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T297[rsp]
	movdqa	XMMWORD PTR rot3_0lo$59[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T298[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T298[rsp]
	movdqa	XMMWORD PTR rot3_0hi$60[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T299[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T299[rsp]
	movdqa	XMMWORD PTR y1o_l$315[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR $T300[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T300[rsp]
	movdqa	XMMWORD PTR y1o_h$317[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T301[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T301[rsp]
	movdqa	XMMWORD PTR y3o_l$323[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR $T302[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T302[rsp]
	movdqa	XMMWORD PTR y3o_h$325[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T303[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T303[rsp]
	movdqa	XMMWORD PTR sum17$61[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T304[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T304[rsp]
	movdqa	XMMWORD PTR sum35$62[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR $T305[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T305[rsp]
	movdqa	XMMWORD PTR rot1_0lo$63[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR $T306[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T306[rsp]
	movdqa	XMMWORD PTR rot1_0hi$64[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T307[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T307[rsp]
	movdqa	XMMWORD PTR y4o_l$67[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR $T308[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T308[rsp]
	movdqa	XMMWORD PTR y4o_h$68[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T309[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T309[rsp]
	movdqa	XMMWORD PTR y5o_l$65[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR $T310[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T310[rsp]
	movdqa	XMMWORD PTR y5o_h$66[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$311[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR $T312[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T312[rsp]
	movdqa	XMMWORD PTR x4_l$82[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$313[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR $T314[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T314[rsp]
	movdqa	XMMWORD PTR x4_h$84[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$315[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR $T316[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T316[rsp]
	movdqa	XMMWORD PTR x5_l$78[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$317[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR $T318[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T318[rsp]
	movdqa	XMMWORD PTR x5_h$80[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$319[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR $T320[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T320[rsp]
	movdqa	XMMWORD PTR x6_l$74[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$321[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR $T322[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T322[rsp]
	movdqa	XMMWORD PTR x6_h$76[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$323[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR $T324[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T324[rsp]
	movdqa	XMMWORD PTR x7_l$70[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$325[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR $T326[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T326[rsp]
	movdqa	XMMWORD PTR x7_h$72[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$327[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T328[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T328[rsp]
	movdqa	XMMWORD PTR abiased_l$69[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$329[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T330[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T330[rsp]
	movdqa	XMMWORD PTR abiased_h$71[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR $T331[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T331[rsp]
	movdqa	XMMWORD PTR sum_l$336[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR $T332[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T332[rsp]
	movdqa	XMMWORD PTR sum_h$335[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR $T333[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T333[rsp]
	movdqa	XMMWORD PTR dif_l$341[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR $T334[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T334[rsp]
	movdqa	XMMWORD PTR dif_h$340[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$335[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T338[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$336[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T337[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T337[rsp]
	packssdw xmm0, XMMWORD PTR $T338[rsp]
	movdqa	XMMWORD PTR $T339[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T339[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$340[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T343[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$341[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T342[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T342[rsp]
	packssdw xmm0, XMMWORD PTR $T343[rsp]
	movdqa	XMMWORD PTR $T344[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T344[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$345[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T346[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T346[rsp]
	movdqa	XMMWORD PTR abiased_l$73[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$347[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T348[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T348[rsp]
	movdqa	XMMWORD PTR abiased_h$75[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR $T349[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T349[rsp]
	movdqa	XMMWORD PTR sum_l$354[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR $T350[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T350[rsp]
	movdqa	XMMWORD PTR sum_h$353[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR $T351[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T351[rsp]
	movdqa	XMMWORD PTR dif_l$359[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR $T352[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T352[rsp]
	movdqa	XMMWORD PTR dif_h$358[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$353[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T356[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$354[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T355[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T355[rsp]
	packssdw xmm0, XMMWORD PTR $T356[rsp]
	movdqa	XMMWORD PTR $T357[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T357[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$358[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T361[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$359[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T360[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T360[rsp]
	packssdw xmm0, XMMWORD PTR $T361[rsp]
	movdqa	XMMWORD PTR $T362[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T362[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$363[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T364[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T364[rsp]
	movdqa	XMMWORD PTR abiased_l$77[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$365[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T366[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T366[rsp]
	movdqa	XMMWORD PTR abiased_h$79[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR $T367[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T367[rsp]
	movdqa	XMMWORD PTR sum_l$372[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR $T368[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T368[rsp]
	movdqa	XMMWORD PTR sum_h$371[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR $T369[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T369[rsp]
	movdqa	XMMWORD PTR dif_l$377[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR $T370[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T370[rsp]
	movdqa	XMMWORD PTR dif_h$376[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$371[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T374[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$372[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T373[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T373[rsp]
	packssdw xmm0, XMMWORD PTR $T374[rsp]
	movdqa	XMMWORD PTR $T375[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T375[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$376[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T379[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$377[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T378[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T378[rsp]
	packssdw xmm0, XMMWORD PTR $T379[rsp]
	movdqa	XMMWORD PTR $T380[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T380[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$381[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T382[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T382[rsp]
	movdqa	XMMWORD PTR abiased_l$81[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$383[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR $T384[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T384[rsp]
	movdqa	XMMWORD PTR abiased_h$83[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR $T385[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T385[rsp]
	movdqa	XMMWORD PTR sum_l$390[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR $T386[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T386[rsp]
	movdqa	XMMWORD PTR sum_h$389[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR $T387[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T387[rsp]
	movdqa	XMMWORD PTR dif_l$395[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR $T388[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T388[rsp]
	movdqa	XMMWORD PTR dif_h$394[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$389[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T392[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_l$390[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T391[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T391[rsp]
	packssdw xmm0, XMMWORD PTR $T392[rsp]
	movdqa	XMMWORD PTR $T393[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T393[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$394[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T397[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_l$395[rsp]
	psrad	xmm0, 17
	movdqa	XMMWORD PTR $T396[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T396[rsp]
	packssdw xmm0, XMMWORD PTR $T397[rsp]
	movdqa	XMMWORD PTR $T398[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T398[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2632
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	packuswb xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR $T399[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T399[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
; Line 2633
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	packuswb xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR $T400[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T400[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2634
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	packuswb xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR $T401[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T401[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2635
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	packuswb xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR $T402[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T402[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2638
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T403[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T403[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T404[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T404[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2639
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T405[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T405[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T406[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T406[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2642
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR $T407[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T407[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR $T408[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T408[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2643
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T409[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T409[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T410[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T410[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2646
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T411[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T411[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR $T412[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T412[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2647
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T413[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T413[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR $T414[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T414[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2650
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2651
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T415[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T415[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2652
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2653
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T416[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T416[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2654
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2655
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T417[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T417[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2656
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2657
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	movdqa	XMMWORD PTR $T418[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR $T418[rsp]
	movq	QWORD PTR [rax], xmm0
; Line 2669
	add	rsp, 7000				; 00001b58H
	ret	0
?stbi__idct_simd@@YAXPEAEHQEAF@Z ENDP			; stbi__idct_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
p3$1 = 40
t3$2 = 44
t2$3 = 48
t1$4 = 52
t0$5 = 56
p3$6 = 60
t3$7 = 64
t2$8 = 68
t1$9 = 72
t0$10 = 76
p2$11 = 80
p2$12 = 84
d$ = 88
dcterm$13 = 96
p1$14 = 100
i$ = 104
p1$15 = 108
p4$16 = 112
p4$17 = 116
o$ = 120
x0$18 = 128
x1$19 = 132
x2$20 = 136
x3$21 = 140
x0$22 = 144
x1$23 = 148
x2$24 = 152
x3$25 = 156
p5$26 = 160
p5$27 = 164
val$ = 176
__$ArrayPad$ = 432
out$ = 464
out_stride$ = 472
data$ = 480
?stbi__idct_block@@YAXPEAEHQEAF@Z PROC			; stbi__idct_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2434
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2435
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
; Line 2437
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR d$[rsp], rax
; Line 2440
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__idct
$LN2@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 2
	mov	QWORD PTR d$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 4
	mov	QWORD PTR v$[rsp], rax
$LN4@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN3@stbi__idct
; Line 2443
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
; Line 2448
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR dcterm$13[rsp], eax
; Line 2449
	mov	eax, 4
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 2450
	jmp	$LN9@stbi__idct
$LN8@stbi__idct:
; Line 2451
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$21[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p3$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$26[rsp], eax
	imul	eax, DWORD PTR t0$5[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$5[rsp], eax
	imul	eax, DWORD PTR t1$4[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$4[rsp], eax
	imul	eax, DWORD PTR t2$3[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR t3$2[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$2[rsp], eax
	imul	eax, DWORD PTR p1$14[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$1[rsp], eax
	imul	eax, DWORD PTR p4$16[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$5[rsp], eax
; Line 2454
	mov	eax, DWORD PTR x0$18[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR x1$19[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR x2$20[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, DWORD PTR x3$21[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x3$21[rsp], eax
; Line 2455
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2456
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 56				; 00000038H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2457
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2458
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2459
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2460
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2461
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2462
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN9@stbi__idct:
; Line 2464
	jmp	$LN2@stbi__idct
$LN3@stbi__idct:
; Line 2466
	mov	DWORD PTR i$[rsp], 0
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
	jmp	SHORT $LN7@stbi__idct
$LN5@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v$[rsp], rax
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
$LN7@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN6@stbi__idct
; Line 2468
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$22[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$25[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$23[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$24[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p3$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$27[rsp], eax
	imul	eax, DWORD PTR t0$10[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$10[rsp], eax
	imul	eax, DWORD PTR t1$9[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$9[rsp], eax
	imul	eax, DWORD PTR t2$8[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR t3$7[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$7[rsp], eax
	imul	eax, DWORD PTR p1$15[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$6[rsp], eax
	imul	eax, DWORD PTR p4$17[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$10[rsp], eax
; Line 2475
	mov	eax, DWORD PTR x0$22[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x0$22[rsp], eax
; Line 2476
	mov	eax, DWORD PTR x1$23[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x1$23[rsp], eax
; Line 2477
	mov	eax, DWORD PTR x2$24[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x2$24[rsp], eax
; Line 2478
	mov	eax, DWORD PTR x3$25[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x3$25[rsp], eax
; Line 2481
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2482
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2483
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2484
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2485
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2486
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2487
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2488
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2489
	jmp	$LN5@stbi__idct
$LN6@stbi__idct:
; Line 2490
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	ret	0
?stbi__idct_block@@YAXPEAEHQEAF@Z ENDP			; stbi__idct_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
?stbi__clamp@@YAEH@Z PROC				; stbi__clamp
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2383
	mov	DWORD PTR [rsp+8], ecx
; Line 2385
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jbe	SHORT $LN2@stbi__clam
; Line 2386
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN3@stbi__clam
	xor	al, al
	jmp	SHORT $LN1@stbi__clam
$LN3@stbi__clam:
; Line 2387
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jle	SHORT $LN4@stbi__clam
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__clam
$LN4@stbi__clam:
$LN2@stbi__clam:
; Line 2389
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__clam:
; Line 2390
	ret	0
?stbi__clamp@@YAEH@Z ENDP				; stbi__clamp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
bit$1 = 36
r$2 = 40
r$3 = 44
s$4 = 48
s$5 = 52
p$6 = 56
rs$7 = 64
zig$8 = 68
rs$9 = 72
p$10 = 80
shift$11 = 88
c$12 = 92
tv136 = 96
tv375 = 100
tv165 = 104
tv163 = 108
tv178 = 112
tv400 = 116
tv427 = 120
tv250 = 124
tv248 = 128
tv357 = 136
tv271 = 144
j$ = 176
data$ = 184
hac$ = 192
fac$ = 200
?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z PROC ; stbi__jpeg_decode_block_prog_ac
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2263
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 2265
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN13@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG97240
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN13@stbi__jpeg:
; Line 2267
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN14@stbi__jpeg
; Line 2268
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	DWORD PTR shift$11[rsp], eax
; Line 2270
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	SHORT $LN16@stbi__jpeg
; Line 2271
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2272
	mov	eax, 1
	jmp	$LN1@stbi__jpeg
$LN16@stbi__jpeg:
; Line 2275
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2279
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN17@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN17@stbi__jpeg:
; Line 2280
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$12[rsp], eax
; Line 2281
	movsxd	rax, DWORD PTR c$12[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$2[rsp], eax
; Line 2282
	cmp	DWORD PTR r$2[rsp], 0
	je	$LN18@stbi__jpeg
; Line 2283
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2284
	mov	eax, DWORD PTR r$2[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2285
	mov	eax, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv357[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv357[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2286
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$4[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2287
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv136[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv136[rsp]
	mov	DWORD PTR zig$8[rsp], eax
; Line 2288
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2289
	jmp	$LN19@stbi__jpeg
$LN18@stbi__jpeg:
; Line 2290
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$7[rsp], eax
; Line 2291
	cmp	DWORD PTR rs$7[rsp], 0
	jge	SHORT $LN20@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG97248
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN20@stbi__jpeg:
; Line 2292
	mov	eax, DWORD PTR rs$7[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2293
	mov	eax, DWORD PTR rs$7[rsp]
	sar	eax, 4
	mov	DWORD PTR r$2[rsp], eax
; Line 2294
	cmp	DWORD PTR s$4[rsp], 0
	jne	$LN21@stbi__jpeg
; Line 2295
	cmp	DWORD PTR r$2[rsp], 15
	jge	$LN23@stbi__jpeg
; Line 2296
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv375[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv375[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2297
	cmp	DWORD PTR r$2[rsp], 0
	je	SHORT $LN24@stbi__jpeg
; Line 2298
	mov	edx, DWORD PTR r$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ; stbi__jpeg_get_bits
	mov	DWORD PTR tv165[rsp], eax
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	mov	DWORD PTR tv163[rsp], eax
	mov	eax, DWORD PTR tv165[rsp]
	mov	ecx, DWORD PTR tv163[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN24@stbi__jpeg:
; Line 2299
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2300
	jmp	$LN3@stbi__jpeg
$LN23@stbi__jpeg:
; Line 2302
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2303
	jmp	SHORT $LN22@stbi__jpeg
$LN21@stbi__jpeg:
; Line 2304
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2305
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv178[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv178[rsp]
	mov	DWORD PTR zig$8[rsp], eax
; Line 2306
	mov	edx, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN22@stbi__jpeg:
$LN19@stbi__jpeg:
; Line 2309
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2310
	jmp	$LN15@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2313
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv400[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv400[rsp]
	shl	eax, cl
	mov	WORD PTR bit$1[rsp], ax
; Line 2315
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	$LN25@stbi__jpeg
; Line 2316
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2317
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN6@stbi__jpeg
; Line 2318
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$10[rsp], rax
; Line 2319
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN27@stbi__jpeg
; Line 2320
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN28@stbi__jpeg
; Line 2321
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN29@stbi__jpeg
; Line 2322
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN30@stbi__jpeg
; Line 2323
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN31@stbi__jpeg
$LN30@stbi__jpeg:
; Line 2325
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
$LN31@stbi__jpeg:
$LN29@stbi__jpeg:
$LN28@stbi__jpeg:
$LN27@stbi__jpeg:
; Line 2327
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2328
	jmp	$LN26@stbi__jpeg
$LN25@stbi__jpeg:
; Line 2329
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi__jpeg:
; Line 2332
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$9[rsp], eax
; Line 2333
	cmp	DWORD PTR rs$9[rsp], 0
	jge	SHORT $LN32@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG97261
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN32@stbi__jpeg:
; Line 2334
	mov	eax, DWORD PTR rs$9[rsp]
	and	eax, 15
	mov	DWORD PTR s$5[rsp], eax
; Line 2335
	mov	eax, DWORD PTR rs$9[rsp]
	sar	eax, 4
	mov	DWORD PTR r$3[rsp], eax
; Line 2336
	cmp	DWORD PTR s$5[rsp], 0
	jne	$LN33@stbi__jpeg
; Line 2337
	cmp	DWORD PTR r$3[rsp], 15
	jge	SHORT $LN35@stbi__jpeg
; Line 2338
	mov	eax, DWORD PTR r$3[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv427[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv427[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2339
	cmp	DWORD PTR r$3[rsp], 0
	je	SHORT $LN37@stbi__jpeg
; Line 2340
	mov	edx, DWORD PTR r$3[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ; stbi__jpeg_get_bits
	mov	DWORD PTR tv250[rsp], eax
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	mov	DWORD PTR tv248[rsp], eax
	mov	eax, DWORD PTR tv250[rsp]
	mov	ecx, DWORD PTR tv248[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN37@stbi__jpeg:
; Line 2341
	mov	DWORD PTR r$3[rsp], 64			; 00000040H
$LN35@stbi__jpeg:
; Line 2347
	jmp	SHORT $LN34@stbi__jpeg
$LN33@stbi__jpeg:
; Line 2348
	cmp	DWORD PTR s$5[rsp], 1
	je	SHORT $LN38@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG97268
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN38@stbi__jpeg:
; Line 2350
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN39@stbi__jpeg
; Line 2351
	movsx	eax, WORD PTR bit$1[rsp]
	mov	DWORD PTR s$5[rsp], eax
	jmp	SHORT $LN40@stbi__jpeg
$LN39@stbi__jpeg:
; Line 2353
	movsx	eax, WORD PTR bit$1[rsp]
	neg	eax
	mov	DWORD PTR s$5[rsp], eax
$LN40@stbi__jpeg:
$LN34@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 2357
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN12@stbi__jpeg
; Line 2358
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR tv271[rsp], rax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR tv271[rsp]
	mov	QWORD PTR p$6[rsp], rax
; Line 2359
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN41@stbi__jpeg
; Line 2360
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN43@stbi__jpeg
; Line 2361
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN44@stbi__jpeg
; Line 2362
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN45@stbi__jpeg
; Line 2363
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN46@stbi__jpeg
$LN45@stbi__jpeg:
; Line 2365
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
$LN46@stbi__jpeg:
$LN44@stbi__jpeg:
$LN43@stbi__jpeg:
; Line 2367
	jmp	SHORT $LN42@stbi__jpeg
$LN41@stbi__jpeg:
; Line 2368
	cmp	DWORD PTR r$3[rsp], 0
	jne	SHORT $LN47@stbi__jpeg
; Line 2369
	mov	rax, QWORD PTR p$6[rsp]
	movzx	ecx, WORD PTR s$5[rsp]
	mov	WORD PTR [rax], cx
; Line 2370
	jmp	SHORT $LN12@stbi__jpeg
$LN47@stbi__jpeg:
; Line 2372
	mov	eax, DWORD PTR r$3[rsp]
	dec	eax
	mov	DWORD PTR r$3[rsp], eax
$LN42@stbi__jpeg:
; Line 2374
	jmp	$LN11@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2375
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN10@stbi__jpeg
$LN26@stbi__jpeg:
$LN15@stbi__jpeg:
; Line 2378
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2379
	add	rsp, 168				; 000000a8H
	ret	0
?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z ENDP ; stbi__jpeg_decode_block_prog_ac
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
tv87 = 36
dc$ = 40
diff$ = 44
tv175 = 48
tv183 = 52
j$ = 80
data$ = 88
hdc$ = 96
b$ = 104
?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z PROC ; stbi__jpeg_decode_block_prog_dc
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2235
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2238
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18488], 0
	je	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG97197
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 2240
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN3@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN3@stbi__jpeg:
; Line 2242
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN4@stbi__jpeg
; Line 2244
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2245
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2246
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG97203
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2247
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN10@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN11@stbi__jpeg
$LN10@stbi__jpeg:
	mov	DWORD PTR tv87[rsp], 0
$LN11@stbi__jpeg:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2249
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2250
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2251
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv175[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv175[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2252
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
; Line 2254
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN8@stbi__jpeg
; Line 2255
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv183[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv183[rsp]
	shl	eax, cl
	cwde
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	movsx	ecx, WORD PTR [rdx+rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN8@stbi__jpeg:
$LN5@stbi__jpeg:
; Line 2257
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2258
	add	rsp, 72					; 00000048H
	ret	0
?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ENDP ; stbi__jpeg_decode_block_prog_dc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
r$1 = 36
s$2 = 40
zig$3 = 44
t$ = 48
rs$4 = 52
tv81 = 56
dc$ = 60
diff$ = 64
c$5 = 68
tv159 = 72
tv188 = 76
tv240 = 80
j$ = 112
data$ = 120
hdc$ = 128
hac$ = 136
fac$ = 144
b$ = 152
dequant$ = 160
?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z PROC ; stbi__jpeg_decode_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2183
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2187
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2188
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2189
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG97176
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2192
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2194
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN16@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN17@stbi__jpeg
$LN16@stbi__jpeg:
	mov	DWORD PTR tv81[rsp], 0
$LN17@stbi__jpeg:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2195
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2196
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2197
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2200
	mov	DWORD PTR k$[rsp], 1
$LN4@stbi__jpeg:
; Line 2204
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN8@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN8@stbi__jpeg:
; Line 2205
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$5[rsp], eax
; Line 2206
	movsxd	rax, DWORD PTR c$5[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$1[rsp], eax
; Line 2207
	cmp	DWORD PTR r$1[rsp], 0
	je	$LN9@stbi__jpeg
; Line 2208
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2209
	mov	eax, DWORD PTR r$1[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2210
	mov	eax, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv240[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv240[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2211
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$2[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2213
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv159[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv159[rsp]
	mov	DWORD PTR zig$3[rsp], eax
; Line 2214
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2215
	jmp	$LN10@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2216
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$4[rsp], eax
; Line 2217
	cmp	DWORD PTR rs$4[rsp], 0
	jge	SHORT $LN11@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG97181
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN11@stbi__jpeg:
; Line 2218
	mov	eax, DWORD PTR rs$4[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2219
	mov	eax, DWORD PTR rs$4[rsp]
	sar	eax, 4
	mov	DWORD PTR r$1[rsp], eax
; Line 2220
	cmp	DWORD PTR s$2[rsp], 0
	jne	SHORT $LN12@stbi__jpeg
; Line 2221
	cmp	DWORD PTR rs$4[rsp], 240		; 000000f0H
	je	SHORT $LN14@stbi__jpeg
	jmp	SHORT $LN3@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2222
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2223
	jmp	SHORT $LN13@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2224
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2226
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	mov	DWORD PTR zig$3[rsp], eax
; Line 2227
	mov	edx, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN13@stbi__jpeg:
$LN10@stbi__jpeg:
; Line 2230
	cmp	DWORD PTR k$[rsp], 64			; 00000040H
	jl	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2231
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2232
	add	rsp, 104				; 00000068H
	ret	0
?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ENDP ; stbi__jpeg_decode_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_get_bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2155
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2157
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 1
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2158
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	mov	DWORD PTR k$[rsp], eax
; Line 2159
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2160
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2161
	mov	eax, DWORD PTR k$[rsp]
	and	eax, -2147483648			; 80000000H
; Line 2162
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_get_bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
n$ = 72
?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__jpeg_get_bits
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2144
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2146
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2147
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2148
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2149
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2150
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2151
	mov	eax, DWORD PTR k$[rsp]
; Line 2152
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__jpeg_get_bits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
sgn$ = 36
j$ = 64
n$ = 72
?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__extend_receive
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2129
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2132
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__exte
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__exte:
; Line 2134
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 31
	mov	DWORD PTR sgn$[rsp], eax
; Line 2135
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2136
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2137
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2138
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2139
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jbias@@3QBHB
	mov	edx, DWORD PTR sgn$[rsp]
	dec	edx
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 2140
	add	rsp, 56					; 00000038H
	ret	0
?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__extend_receive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
c$ = 36
s$1 = 40
temp$ = 44
tv209 = 48
tv230 = 56
tv239 = 64
tv250 = 72
j$ = 96
h$ = 104
?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z PROC ; stbi__jpeg_huff_decode
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2075
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2079
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2083
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$[rsp], eax
; Line 2084
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 2085
	cmp	DWORD PTR k$[rsp], 255			; 000000ffH
	jge	$LN6@stbi__jpeg
; Line 2086
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2087
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR s$1[rsp], eax
	jle	SHORT $LN7@stbi__jpeg
; Line 2088
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN7@stbi__jpeg:
; Line 2089
	mov	eax, DWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv209[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv209[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2090
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2091
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2100
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 16
	mov	DWORD PTR temp$[rsp], eax
; Line 2101
	mov	DWORD PTR k$[rsp], 10
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2102
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1540]
	cmp	DWORD PTR temp$[rsp], eax
	jae	SHORT $LN8@stbi__jpeg
; Line 2103
	jmp	SHORT $LN3@stbi__jpeg
$LN8@stbi__jpeg:
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2104
	cmp	DWORD PTR k$[rsp], 17
	jne	SHORT $LN9@stbi__jpeg
; Line 2106
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, 16
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2107
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2110
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR k$[rsp], eax
	jle	SHORT $LN10@stbi__jpeg
; Line 2111
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN10@stbi__jpeg:
; Line 2114
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv230[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv230[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR k$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__bmask@@3QBIB
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	add	eax, DWORD PTR [rdx+rcx*4+1612]
	mov	DWORD PTR c$[rsp], eax
; Line 2115
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv239[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv239[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+1280]
	lea	rdx, OFFSET FLAT:?stbi__bmask@@3QBIB
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+512]
	cmp	eax, ecx
	je	SHORT $LN12@stbi__jpeg
	mov	r8d, 2115				; 00000843H
	lea	rdx, OFFSET FLAT:$SG97127
	lea	rcx, OFFSET FLAT:$SG97128
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbi__jpeg:
; Line 2118
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2119
	mov	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv250[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv250[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2120
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
$LN1@stbi__jpeg:
; Line 2121
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ENDP ; stbi__jpeg_huff_decode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
tv70 = 36
b$2 = 40
j$ = 64
?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z PROC	; stbi__grow_buffer_unsafe
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2053
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__grow:
; Line 2055
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18476], 0
	je	SHORT $LN10@stbi__grow
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN11@stbi__grow
$LN10@stbi__grow:
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv70[rsp], eax
$LN11@stbi__grow:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR b$2[rsp], eax
; Line 2056
	cmp	DWORD PTR b$2[rsp], 255			; 000000ffH
	jne	SHORT $LN7@stbi__grow
; Line 2057
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
$LN5@stbi__grow:
; Line 2058
	cmp	DWORD PTR c$1[rsp], 255			; 000000ffH
	jne	SHORT $LN6@stbi__grow
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN5@stbi__grow
$LN6@stbi__grow:
; Line 2059
	cmp	DWORD PTR c$1[rsp], 0
	je	SHORT $LN8@stbi__grow
; Line 2060
	mov	rax, QWORD PTR j$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rax+18472], cl
; Line 2061
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 1
; Line 2062
	jmp	SHORT $LN1@stbi__grow
$LN8@stbi__grow:
$LN7@stbi__grow:
; Line 2065
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, 24
	sub	ecx, DWORD PTR [rax+18468]
	mov	eax, ecx
	movzx	ecx, al
	mov	eax, DWORD PTR b$2[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18464]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2066
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	add	eax, 8
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2067
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jle	$LN4@stbi__grow
$LN1@stbi__grow:
; Line 2068
	add	rsp, 56					; 00000038H
	ret	0
?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ENDP	; stbi__grow_buffer_unsafe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fast$1 = 0
i$ = 4
k$2 = 8
magbits$3 = 12
len$4 = 16
rs$5 = 20
tv173 = 24
m$6 = 28
tv177 = 32
run$7 = 36
fast_ac$ = 64
h$ = 72
?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z PROC	; stbi__build_fast_ac
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2028
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2030
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 512			; 00000200H
	jge	$LN3@stbi__buil
; Line 2031
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR fast$1[rsp], al
; Line 2032
	movsxd	rax, DWORD PTR i$[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 2033
	movzx	eax, BYTE PTR fast$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	$LN5@stbi__buil
; Line 2034
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	mov	DWORD PTR rs$5[rsp], eax
; Line 2035
	mov	eax, DWORD PTR rs$5[rsp]
	sar	eax, 4
	and	eax, 15
	mov	DWORD PTR run$7[rsp], eax
; Line 2036
	mov	eax, DWORD PTR rs$5[rsp]
	and	eax, 15
	mov	DWORD PTR magbits$3[rsp], eax
; Line 2037
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR len$4[rsp], eax
; Line 2039
	cmp	DWORD PTR magbits$3[rsp], 0
	je	$LN6@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, DWORD PTR len$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 9
	jg	$LN6@stbi__buil
; Line 2041
	mov	eax, DWORD PTR len$4[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, cl
	and	eax, 511				; 000001ffH
	mov	ecx, 9
	sub	ecx, DWORD PTR magbits$3[rsp]
	sar	eax, cl
	mov	DWORD PTR k$2[rsp], eax
; Line 2042
	mov	eax, DWORD PTR magbits$3[rsp]
	dec	eax
	mov	ecx, 1
	mov	DWORD PTR tv173[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv173[rsp]
	shl	eax, cl
	mov	DWORD PTR m$6[rsp], eax
; Line 2043
	mov	eax, DWORD PTR m$6[rsp]
	cmp	DWORD PTR k$2[rsp], eax
	jge	SHORT $LN7@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, -1					; ffffffffH
	mov	DWORD PTR tv177[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv177[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR k$2[rsp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	DWORD PTR k$2[rsp], eax
$LN7@stbi__buil:
; Line 2045
	cmp	DWORD PTR k$2[rsp], -128		; ffffffffffffff80H
	jl	SHORT $LN8@stbi__buil
	cmp	DWORD PTR k$2[rsp], 127			; 0000007fH
	jg	SHORT $LN8@stbi__buil
; Line 2046
	imul	eax, DWORD PTR k$2[rsp], 256		; 00000100H
	imul	ecx, DWORD PTR run$7[rsp], 16
	add	eax, ecx
	mov	ecx, DWORD PTR magbits$3[rsp]
	mov	edx, DWORD PTR len$4[rsp]
	add	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN8@stbi__buil:
$LN6@stbi__buil:
$LN5@stbi__buil:
; Line 2049
	jmp	$LN2@stbi__buil
$LN3@stbi__buil:
; Line 2050
	add	rsp, 56					; 00000038H
	ret	0
?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z ENDP	; stbi__build_fast_ac
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
k$ = 36
i$ = 40
code$ = 44
tv140 = 48
s$1 = 52
tv235 = 56
m$2 = 60
c$3 = 64
h$ = 96
count$ = 104
?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z PROC	; stbi__build_huffman
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1984
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1985
	mov	DWORD PTR k$[rsp], 0
; Line 1988
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN3@stbi__buil
; Line 1989
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__buil
$LN5@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__buil:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__buil
; Line 1990
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rdx+rcx+1280], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN5@stbi__buil
$LN6@stbi__buil:
	jmp	SHORT $LN2@stbi__buil
$LN3@stbi__buil:
; Line 1991
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rcx+rax+1280], 0
; Line 1994
	mov	DWORD PTR code$[rsp], 0
; Line 1995
	mov	DWORD PTR k$[rsp], 0
; Line 1996
	mov	DWORD PTR j$[rsp], 1
	jmp	SHORT $LN10@stbi__buil
$LN8@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stbi__buil:
	cmp	DWORD PTR j$[rsp], 16
	jg	$LN9@stbi__buil
; Line 1998
	mov	eax, DWORD PTR code$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1612], eax
; Line 1999
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN19@stbi__buil
$LN11@stbi__buil:
; Line 2000
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN12@stbi__buil
; Line 2001
	movzx	eax, WORD PTR code$[rsp]
	mov	WORD PTR tv140[rsp], ax
	mov	eax, DWORD PTR code$[rsp]
	inc	eax
	mov	DWORD PTR code$[rsp], eax
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, WORD PTR tv140[rsp]
	mov	WORD PTR [rcx+rax*2+512], dx
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN11@stbi__buil
$LN12@stbi__buil:
; Line 2002
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR j$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jb	SHORT $LN20@stbi__buil
	lea	rcx, OFFSET FLAT:$SG97072
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__buil
$LN20@stbi__buil:
$LN19@stbi__buil:
; Line 2005
	mov	eax, 16
	sub	eax, DWORD PTR j$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1540], eax
; Line 2006
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 2007
	jmp	$LN8@stbi__buil
$LN9@stbi__buil:
; Line 2008
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+rax*4+1540], -1		; ffffffffH
; Line 2011
	mov	rax, QWORD PTR h$[rsp]
	mov	r8d, 512				; 00000200H
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	memset
; Line 2012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@stbi__buil
$LN13@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@stbi__buil:
	mov	eax, DWORD PTR k$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN14@stbi__buil
; Line 2013
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2014
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN21@stbi__buil
; Line 2015
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+512]
	mov	ecx, 9
	sub	ecx, DWORD PTR s$1[rsp]
	shl	eax, cl
	mov	DWORD PTR c$3[rsp], eax
; Line 2016
	mov	eax, 9
	sub	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv235[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv235[rsp]
	shl	eax, cl
	mov	DWORD PTR m$2[rsp], eax
; Line 2017
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi__buil
$LN16@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi__buil:
	mov	eax, DWORD PTR m$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN17@stbi__buil
; Line 2018
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR c$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, BYTE PTR i$[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 2019
	jmp	SHORT $LN16@stbi__buil
$LN17@stbi__buil:
$LN21@stbi__buil:
; Line 2021
	jmp	$LN13@stbi__buil
$LN14@stbi__buil:
; Line 2022
	mov	eax, 1
$LN1@stbi__buil:
; Line 2023
	add	rsp, 88					; 00000058H
	ret	0
?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ENDP	; stbi__build_huffman
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
dest$1 = 40
src$2 = 48
j$ = 56
tv130 = 60
tv82 = 64
tv357 = 68
good$ = 72
tv262 = 80
tv282 = 84
tv304 = 88
tv324 = 92
data$ = 112
img_n$ = 120
req_comp$ = 128
x$ = 136
y$ = 144
?stbi__convert_format16@@YAPEAGPEAGHHII@Z PROC		; stbi__convert_format16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1793
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1797
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1798
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1798				; 00000706H
	lea	rdx, OFFSET FLAT:$SG96848
	lea	rcx, OFFSET FLAT:$SG96849
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1800
	mov	eax, DWORD PTR req_comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	ecx, eax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR good$[rsp], rax
; Line 1801
	cmp	QWORD PTR good$[rsp], 0
	jne	SHORT $LN44@stbi__conv
; Line 1802
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1803
	lea	rcx, OFFSET FLAT:$SG96851
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	DWORD PTR tv82[rsp], 0
$LN62@stbi__conv:
	movsxd	rax, DWORD PTR tv82[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1806
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1807
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR src$2[rsp], rax
; Line 1808
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR dest$1[rsp], rax
; Line 1814
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv130[rsp], eax
	mov	eax, DWORD PTR tv130[rsp]
	sub	eax, 10
	mov	DWORD PTR tv130[rsp], eax
	cmp	DWORD PTR tv130[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv130[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1815
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1816
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1817
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1818
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1819
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1820
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1821
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1822
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv262[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv262[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1823
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv282[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv282[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1824
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv304[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv304[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1825
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv324[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv324[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1826
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	SHORT $LN5@stbi__conv
$LN57@stbi__conv:
; Line 1827
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1827				; 00000723H
	lea	rdx, OFFSET FLAT:$SG96865
	lea	rcx, OFFSET FLAT:$SG96866
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN63@stbi__conv:
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR good$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG96867
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	DWORD PTR tv357[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	DWORD PTR tv357[rsp], 0
$LN65@stbi__conv:
	movsxd	rax, DWORD PTR tv357[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1830
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1832
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1833
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1834
	add	rsp, 104				; 00000068H
	ret	0
	npad	2
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
?stbi__convert_format16@@YAPEAGPEAGHHII@Z ENDP		; stbi__convert_format16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
?stbi__compute_y_16@@YAGHHH@Z PROC			; stbi__compute_y_16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1784
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1785
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1786
	ret	0
?stbi__compute_y_16@@YAGHHH@Z ENDP			; stbi__compute_y_16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
dest$1 = 40
src$2 = 48
j$ = 56
tv95 = 60
tv81 = 64
tv354 = 68
good$ = 72
tv259 = 80
tv279 = 84
tv301 = 88
tv321 = 92
data$ = 112
img_n$ = 120
req_comp$ = 128
x$ = 136
y$ = 144
?stbi__convert_format@@YAPEAEPEAEHHII@Z PROC		; stbi__convert_format
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1736
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1740
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1741
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1741				; 000006cdH
	lea	rdx, OFFSET FLAT:$SG96756
	lea	rcx, OFFSET FLAT:$SG96757
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1743
	xor	r9d, r9d
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR good$[rsp], rax
; Line 1744
	cmp	QWORD PTR good$[rsp], 0
	jne	SHORT $LN44@stbi__conv
; Line 1745
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1746
	lea	rcx, OFFSET FLAT:$SG96759
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	DWORD PTR tv81[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	DWORD PTR tv81[rsp], 0
$LN62@stbi__conv:
	movsxd	rax, DWORD PTR tv81[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1749
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1750
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR src$2[rsp], rax
; Line 1751
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$1[rsp], rax
; Line 1757
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv95[rsp], eax
	mov	eax, DWORD PTR tv95[rsp]
	sub	eax, 10
	mov	DWORD PTR tv95[rsp], eax
	cmp	DWORD PTR tv95[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv95[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1758
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1759
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1760
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1761
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1762
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1763
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1764
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1765
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv259[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv259[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1766
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv279[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv279[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1767
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv301[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv301[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1768
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv321[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv321[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1769
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	SHORT $LN5@stbi__conv
$LN57@stbi__conv:
; Line 1770
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1770				; 000006eaH
	lea	rdx, OFFSET FLAT:$SG96773
	lea	rcx, OFFSET FLAT:$SG96774
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN63@stbi__conv:
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR good$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG96775
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	DWORD PTR tv354[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	DWORD PTR tv354[rsp], 0
$LN65@stbi__conv:
	movsxd	rax, DWORD PTR tv354[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1773
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1775
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1776
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1777
	add	rsp, 104				; 00000068H
	ret	0
	npad	2
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
?stbi__convert_format@@YAPEAEPEAEHHII@Z ENDP		; stbi__convert_format
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
?stbi__compute_y@@YAEHHH@Z PROC				; stbi__compute_y
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1727
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1728
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1729
	ret	0
?stbi__compute_y@@YAEHHH@Z ENDP				; stbi__compute_y
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
?stbi__get32le@@YAIPEAUstbi__context@@@Z PROC		; stbi__get32le
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1703
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1704
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR z$[rsp], eax
; Line 1705
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	shl	eax, 16
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 1706
	mov	eax, DWORD PTR z$[rsp]
; Line 1707
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get32le@@YAIPEAUstbi__context@@@Z ENDP		; stbi__get32le
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
?stbi__get16le@@YAHPEAUstbi__context@@@Z PROC		; stbi__get16le
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1695
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1696
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1697
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1698
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get16le@@YAHPEAUstbi__context@@@Z ENDP		; stbi__get16le
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv66 = 36
s$ = 64
?stbi__get32be@@YAIPEAUstbi__context@@@Z PROC		; stbi__get32be
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1685
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1686
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR z$[rsp], eax
; Line 1687
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 16
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	ecx, DWORD PTR tv66[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1688
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get32be@@YAIPEAUstbi__context@@@Z ENDP		; stbi__get32be
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv67 = 36
s$ = 64
?stbi__get16be@@YAHPEAUstbi__context@@@Z PROC		; stbi__get16be
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1675
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1676
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1677
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv67[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv67[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1678
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get16be@@YAHPEAUstbi__context@@@Z ENDP		; stbi__get16be
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv91 = 36
count$2 = 40
res$3 = 44
tv88 = 48
s$ = 80
buffer$ = 88
n$ = 96
?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z PROC		; stbi__getn
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1647
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1648
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN2@stbi__getn
; Line 1649
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1650
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	$LN3@stbi__getn
; Line 1653
	movsxd	rax, DWORD PTR blen$1[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1655
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv88[rsp], rax
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR blen$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv88[rsp]
	mov	DWORD PTR count$2[rsp], eax
; Line 1656
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR count$2[rsp], eax
	jne	SHORT $LN7@stbi__getn
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN8@stbi__getn
$LN7@stbi__getn:
	mov	DWORD PTR tv91[rsp], 0
$LN8@stbi__getn:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR res$3[rsp], eax
; Line 1657
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1658
	mov	eax, DWORD PTR res$3[rsp]
	jmp	SHORT $LN1@stbi__getn
$LN3@stbi__getn:
$LN2@stbi__getn:
; Line 1662
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	rax, QWORD PTR [rcx+200]
	ja	SHORT $LN4@stbi__getn
; Line 1663
	movsxd	rax, DWORD PTR n$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1664
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1665
	mov	eax, 1
	jmp	SHORT $LN1@stbi__getn
; Line 1666
	jmp	SHORT $LN5@stbi__getn
$LN4@stbi__getn:
; Line 1667
	xor	eax, eax
$LN5@stbi__getn:
$LN1@stbi__getn:
; Line 1668
	add	rsp, 72					; 00000048H
	ret	0
?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ENDP		; stbi__getn
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv85 = 40
s$ = 64
n$ = 72
?stbi__skip@@YAXPEAUstbi__context@@H@Z PROC		; stbi__skip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1625
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1626
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__skip
	jmp	$LN1@stbi__skip
$LN2@stbi__skip:
; Line 1627
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN3@stbi__skip
; Line 1628
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1629
	jmp	$LN1@stbi__skip
$LN3@stbi__skip:
; Line 1631
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN4@stbi__skip
; Line 1632
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1633
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	SHORT $LN5@stbi__skip
; Line 1634
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1635
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv85[rsp], rax
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv85[rsp]
; Line 1636
	jmp	SHORT $LN1@stbi__skip
$LN5@stbi__skip:
$LN4@stbi__skip:
; Line 1639
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
$LN1@stbi__skip:
; Line 1640
	add	rsp, 56					; 00000038H
	ret	0
?stbi__skip@@YAXPEAUstbi__context@@H@Z ENDP		; stbi__skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
tv73 = 40
s$ = 64
?stbi__at_eof@@YAHPEAUstbi__context@@@Z PROC		; stbi__at_eof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1609
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1610
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@stbi__at_e
; Line 1611
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv73[rsp]
	test	eax, eax
	jne	SHORT $LN3@stbi__at_e
	xor	eax, eax
	jmp	SHORT $LN1@stbi__at_e
$LN3@stbi__at_e:
; Line 1614
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__at_e
	mov	eax, 1
	jmp	SHORT $LN1@stbi__at_e
$LN4@stbi__at_e:
$LN2@stbi__at_e:
; Line 1617
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jb	SHORT $LN6@stbi__at_e
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN7@stbi__at_e
$LN6@stbi__at_e:
	mov	DWORD PTR tv80[rsp], 0
$LN7@stbi__at_e:
	mov	eax, DWORD PTR tv80[rsp]
$LN1@stbi__at_e:
; Line 1618
	add	rsp, 56					; 00000038H
	ret	0
?stbi__at_eof@@YAHPEAUstbi__context@@@Z ENDP		; stbi__at_eof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv81 = 33
s$ = 64
?stbi__get8@@YAEPEAUstbi__context@@@Z PROC		; stbi__get8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1595
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1596
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jae	SHORT $LN2@stbi__get8
; Line 1597
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv72[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv72[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN2@stbi__get8:
; Line 1598
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN3@stbi__get8
; Line 1599
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ; stbi__refill_buffer
; Line 1600
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv81[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv81[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN3@stbi__get8:
; Line 1602
	xor	al, al
$LN1@stbi__get8:
; Line 1603
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get8@@YAEPEAUstbi__context@@@Z ENDP		; stbi__get8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
tv129 = 52
hdr_data$1 = 56
data$ = 64
ri$2 = 72
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z PROC ; stbi__loadf_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1441
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1444
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
; Line 1446
	lea	rax, QWORD PTR ri$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__hdr_load
	mov	QWORD PTR hdr_data$1[rsp], rax
; Line 1447
	cmp	QWORD PTR hdr_data$1[rsp], 0
	je	SHORT $LN3@stbi__load
; Line 1448
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR hdr_data$1[rsp]
	call	?stbi__float_postprocess@@YAXPEAMPEAH11H@Z ; stbi__float_postprocess
$LN3@stbi__load:
; Line 1449
	mov	rax, QWORD PTR hdr_data$1[rsp]
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1452
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
	mov	QWORD PTR data$[rsp], rax
; Line 1453
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1454
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN7@stbi__load
$LN6@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv89[rsp], eax
$LN7@stbi__load:
	mov	r9d, DWORD PTR tv89[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z	; stbi__ldr_to_hdr
	jmp	SHORT $LN1@stbi__load
$LN4@stbi__load:
; Line 1455
	lea	rcx, OFFSET FLAT:$SG96540
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN9@stbi__load
$LN8@stbi__load:
	mov	DWORD PTR tv129[rsp], 0
$LN9@stbi__load:
	movsxd	rax, DWORD PTR tv129[rsp]
$LN1@stbi__load:
; Line 1456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__loadf_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stbi__fopen
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1337
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fopen_s
	test	eax, eax
	je	SHORT $LN2@stbi__fope
; Line 1338
	mov	QWORD PTR f$[rsp], 0
$LN2@stbi__fope:
; Line 1342
	mov	rax, QWORD PTR f$[rsp]
; Line 1343
	add	rsp, 56					; 00000038H
	ret	0
?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stbi__fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
tv81 = 36
channels$1 = 40
result$ = 64
x$ = 72
y$ = 80
comp$ = 88
req_comp$ = 96
?stbi__float_postprocess@@YAXPEAMPEAH11H@Z PROC		; stbi__float_postprocess
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1295
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1296
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi__floa
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN5@stbi__floa
$LN4@stbi__floa:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv77[rsp], eax
$LN5@stbi__floa:
	cmp	DWORD PTR tv77[rsp], 0
	je	SHORT $LN2@stbi__floa
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi__floa
; Line 1297
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__floa
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN7@stbi__floa
$LN6@stbi__floa:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv81[rsp], eax
$LN7@stbi__floa:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1298
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 2
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN2@stbi__floa:
; Line 1300
	add	rsp, 56					; 00000038H
	ret	0
?stbi__float_postprocess@@YAXPEAMPEAH11H@Z ENDP		; stbi__float_postprocess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z PROC ; stbi__load_and_postprocess_16bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1267
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1269
	mov	DWORD PTR [rsp+48], 16
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1271
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1272
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1275
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1275				; 000004fbH
	lea	rdx, OFFSET FLAT:$SG96402
	lea	rcx, OFFSET FLAT:$SG96403
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1277
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN3@stbi__load
; Line 1278
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z	; stbi__convert_8_to_16
	mov	QWORD PTR result$[rsp], rax
; Line 1279
	mov	DWORD PTR ri$[rsp], 16
$LN3@stbi__load:
; Line 1285
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1286
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1287
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 1
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN4@stbi__load:
; Line 1290
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1291
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__load_and_postprocess_16bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z PROC ; stbi__load_and_postprocess_8bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1241
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1243
	mov	DWORD PTR [rsp+48], 8
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1245
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1246
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1249
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1249				; 000004e1H
	lea	rdx, OFFSET FLAT:$SG96382
	lea	rcx, OFFSET FLAT:$SG96383
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1251
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN3@stbi__load
; Line 1252
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z	; stbi__convert_16_to_8
	mov	QWORD PTR result$[rsp], rax
; Line 1253
	mov	DWORD PTR ri$[rsp], 8
$LN3@stbi__load:
; Line 1258
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1259
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1260
	mov	r9d, DWORD PTR channels$1[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN4@stbi__load:
; Line 1263
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1264
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__load_and_postprocess_8bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slice$ = 32
slice_size$ = 36
bytes$ = 40
image$ = 64
w$ = 72
h$ = 80
z$ = 88
bytes_per_pixel$ = 96
?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z PROC		; stbi__vertical_flip_slices
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1228
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1230
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR bytes_per_pixel$[rsp]
	mov	DWORD PTR slice_size$[rsp], eax
; Line 1232
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1233
	mov	DWORD PTR slice$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR slice$[rsp]
	inc	eax
	mov	DWORD PTR slice$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR slice$[rsp], eax
	jge	SHORT $LN3@stbi__vert
; Line 1234
	mov	r9d, DWORD PTR bytes_per_pixel$[rsp]
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
; Line 1235
	movsxd	rax, DWORD PTR slice_size$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes$[rsp], rax
; Line 1236
	jmp	SHORT $LN2@stbi__vert
$LN3@stbi__vert:
; Line 1237
	add	rsp, 56					; 00000038H
	ret	0
?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z ENDP		; stbi__vertical_flip_slices
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 32
bytes_copy$1 = 40
bytes_left$2 = 48
row0$3 = 56
row1$4 = 64
bytes_per_row$ = 72
bytes$ = 80
tv80 = 88
temp$ = 96
__$ArrayPad$ = 2144
image$ = 2176
w$ = 2184
h$ = 2192
bytes_per_pixel$ = 2200
?stbi__vertical_flip@@YAXPEAXHHH@Z PROC			; stbi__vertical_flip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1203
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2168				; 00000878H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1205
	movsxd	rax, DWORD PTR w$[rsp]
	movsxd	rcx, DWORD PTR bytes_per_pixel$[rsp]
	imul	rax, rcx
	mov	QWORD PTR bytes_per_row$[rsp], rax
; Line 1207
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1209
	mov	DWORD PTR row$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR h$[rsp]
	sar	eax, 1
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN3@stbi__vert
; Line 1210
	movsxd	rax, DWORD PTR row$[rsp]
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1211
	mov	eax, DWORD PTR row$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	cdqe
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1213
	mov	rax, QWORD PTR bytes_per_row$[rsp]
	mov	QWORD PTR bytes_left$2[rsp], rax
$LN5@stbi__vert:
; Line 1214
	cmp	QWORD PTR bytes_left$2[rsp], 0
	je	$LN6@stbi__vert
; Line 1215
	cmp	QWORD PTR bytes_left$2[rsp], 2048	; 00000800H
	jae	SHORT $LN8@stbi__vert
	mov	rax, QWORD PTR bytes_left$2[rsp]
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN9@stbi__vert
$LN8@stbi__vert:
	mov	QWORD PTR tv80[rsp], 2048		; 00000800H
$LN9@stbi__vert:
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR bytes_copy$1[rsp], rax
; Line 1216
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row0$3[rsp]
	lea	rcx, QWORD PTR temp$[rsp]
	call	memcpy
; Line 1217
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row1$4[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	call	memcpy
; Line 1218
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	lea	rdx, QWORD PTR temp$[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	call	memcpy
; Line 1219
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1220
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1221
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR bytes_left$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes_left$2[rsp], rax
; Line 1222
	jmp	$LN5@stbi__vert
$LN6@stbi__vert:
; Line 1223
	jmp	$LN2@stbi__vert
$LN3@stbi__vert:
; Line 1224
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2168				; 00000878H
	ret	0
?stbi__vertical_flip@@YAXPEAXHHH@Z ENDP			; stbi__vertical_flip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv74 = 36
img_len$ = 40
enlarged$ = 48
orig$ = 80
w$ = 88
h$ = 96
channels$ = 104
?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z PROC		; stbi__convert_8_to_16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1187
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1189
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1192
	mov	eax, DWORD PTR img_len$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR enlarged$[rsp], rax
; Line 1193
	cmp	QWORD PTR enlarged$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG96330
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	DWORD PTR tv74[rsp], 0
$LN8@stbi__conv:
	movsxd	rax, DWORD PTR tv74[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1195
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1196
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR orig$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR enlarged$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1198
	mov	rcx, QWORD PTR orig$[rsp]
	call	QWORD PTR __imp_free
; Line 1199
	mov	rax, QWORD PTR enlarged$[rsp]
$LN1@stbi__conv:
; Line 1200
	add	rsp, 72					; 00000048H
	ret	0
?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z ENDP		; stbi__convert_8_to_16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv73 = 36
img_len$ = 40
reduced$ = 48
orig$ = 80
w$ = 88
h$ = 96
channels$ = 104
?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z PROC		; stbi__convert_16_to_8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1171
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1173
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1176
	movsxd	rax, DWORD PTR img_len$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR reduced$[rsp], rax
; Line 1177
	cmp	QWORD PTR reduced$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG96311
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	DWORD PTR tv73[rsp], 0
$LN8@stbi__conv:
	movsxd	rax, DWORD PTR tv73[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1179
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1180
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR reduced$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1182
	mov	rcx, QWORD PTR orig$[rsp]
	call	QWORD PTR __imp_free
; Line 1183
	mov	rax, QWORD PTR reduced$[rsp]
$LN1@stbi__conv:
; Line 1184
	add	rsp, 72					; 00000048H
	ret	0
?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z ENDP		; stbi__convert_16_to_8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv185 = 64
tv203 = 68
hdr$1 = 72
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
bpc$ = 144
?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z PROC ; stbi__load_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1118
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1119
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, QWORD PTR ri$[rsp]
	call	memset
; Line 1120
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
; Line 1121
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 1122
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 1127
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_test@@YAHPEAUstbi__context@@@Z ; stbi__png_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__png_load
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1130
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_test@@YAHPEAUstbi__context@@@Z ; stbi__bmp_test
	test	eax, eax
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__bmp_load
	jmp	$LN1@stbi__load
$LN3@stbi__load:
; Line 1133
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test@@YAHPEAUstbi__context@@@Z ; stbi__gif_test
	test	eax, eax
	je	SHORT $LN4@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__gif_load
	jmp	$LN1@stbi__load
$LN4@stbi__load:
; Line 1136
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_test@@YAHPEAUstbi__context@@@Z ; stbi__psd_test
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	eax, DWORD PTR bpc$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__psd_load
	jmp	$LN1@stbi__load
$LN5@stbi__load:
; Line 1141
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_test@@YAHPEAUstbi__context@@@Z ; stbi__pic_test
	test	eax, eax
	je	SHORT $LN6@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__pic_load
	jmp	$LN1@stbi__load
$LN6@stbi__load:
; Line 1148
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z ; stbi__jpeg_test
	test	eax, eax
	je	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__jpeg_load
	jmp	$LN1@stbi__load
$LN7@stbi__load:
; Line 1151
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_test@@YAHPEAUstbi__context@@@Z ; stbi__pnm_test
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__pnm_load
	jmp	$LN1@stbi__load
$LN8@stbi__load:
; Line 1155
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	je	SHORT $LN9@stbi__load
; Line 1156
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__hdr_load
	mov	QWORD PTR hdr$1[rsp], rax
; Line 1157
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN12@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv185[rsp], eax
$LN13@stbi__load:
	mov	r9d, DWORD PTR tv185[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR hdr$1[rsp]
	call	?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z	; stbi__hdr_to_ldr
	jmp	SHORT $LN1@stbi__load
$LN9@stbi__load:
; Line 1163
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_test@@YAHPEAUstbi__context@@@Z ; stbi__tga_test
	test	eax, eax
	je	SHORT $LN10@stbi__load
; Line 1164
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__tga_load
	jmp	SHORT $LN1@stbi__load
$LN10@stbi__load:
; Line 1167
	lea	rcx, OFFSET FLAT:$SG96293
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__load
	mov	DWORD PTR tv203[rsp], 0
	jmp	SHORT $LN15@stbi__load
$LN14@stbi__load:
	mov	DWORD PTR tv203[rsp], 0
$LN15@stbi__load:
	movsxd	rax, DWORD PTR tv203[rsp]
$LN1@stbi__load:
; Line 1168
	add	rsp, 88					; 00000058H
	ret	0
?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ENDP ; stbi__load_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
i$ = 36
z$1 = 40
z$2 = 44
tv75 = 48
n$ = 52
output$ = 56
tv94 = 64
data$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z PROC			; stbi__hdr_to_ldr
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1865
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1868
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN8@stbi__hdr_:
; Line 1869
	xor	r9d, r9d
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR output$[rsp], rax
; Line 1870
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG96926
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__hdr_
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN19@stbi__hdr_
$LN18@stbi__hdr_:
	mov	DWORD PTR tv75[rsp], 0
$LN19@stbi__hdr_:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	$LN1@stbi__hdr_
$LN9@stbi__hdr_:
; Line 1872
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@stbi__hdr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN11@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__hdr_:
; Line 1873
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__hdr_
; Line 1874
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__hdr_
$LN5@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__hdr_
; Line 1875
	cvtss2sd xmm0, DWORD PTR ?stbi__h2l_gamma_i@@3MA
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	mulss	xmm1, DWORD PTR ?stbi__h2l_scale_i@@3MA
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv94[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv94[rsp]
	call	pow
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$1[rsp], xmm0
; Line 1876
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$1[rsp]
	jbe	SHORT $LN12@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$1[rsp], xmm0
$LN12@stbi__hdr_:
; Line 1877
	movss	xmm0, DWORD PTR z$1[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN13@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$1[rsp], xmm0
$LN13@stbi__hdr_:
; Line 1878
	cvttss2si eax, DWORD PTR z$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1879
	jmp	$LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 1880
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__hdr_
; Line 1881
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$2[rsp], xmm0
; Line 1882
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$2[rsp]
	jbe	SHORT $LN15@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$2[rsp], xmm0
$LN15@stbi__hdr_:
; Line 1883
	movss	xmm0, DWORD PTR z$2[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN16@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$2[rsp], xmm0
$LN16@stbi__hdr_:
; Line 1884
	cvttss2si eax, DWORD PTR z$2[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN14@stbi__hdr_:
; Line 1886
	jmp	$LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 1887
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1888
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__hdr_:
; Line 1889
	add	rsp, 88					; 00000058H
	ret	0
?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z ENDP			; stbi__hdr_to_ldr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
k$ = 52
n$ = 56
tv76 = 60
output$ = 64
tv134 = 72
data$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z PROC			; stbi__ldr_to_hdr
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1839
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1842
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN11@stbi__ldr_
	xor	eax, eax
	jmp	$LN1@stbi__ldr_
$LN11@stbi__ldr_:
; Line 1843
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR output$[rsp], rax
; Line 1844
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN12@stbi__ldr_
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG96894
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__ldr_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN18@stbi__ldr_
$LN17@stbi__ldr_:
	mov	DWORD PTR tv76[rsp], 0
$LN18@stbi__ldr_:
	movsxd	rax, DWORD PTR tv76[rsp]
	jmp	$LN1@stbi__ldr_
$LN12@stbi__ldr_:
; Line 1846
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN13@stbi__ldr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN14@stbi__ldr_
$LN13@stbi__ldr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN14@stbi__ldr_:
; Line 1847
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__ldr_
$LN2@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__ldr_
; Line 1848
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__ldr_
$LN5@stbi__ldr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__ldr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN6@stbi__ldr_
; Line 1849
	cvtss2sd xmm0, DWORD PTR ?stbi__l2h_gamma@@3MA
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@437f0000
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv134[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv134[rsp]
	call	pow
	cvtss2sd xmm1, DWORD PTR ?stbi__l2h_scale@@3MA
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1850
	jmp	$LN5@stbi__ldr_
$LN6@stbi__ldr_:
; Line 1851
	jmp	$LN2@stbi__ldr_
$LN3@stbi__ldr_:
; Line 1852
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN15@stbi__ldr_
; Line 1853
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__ldr_
$LN8@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__ldr_
; Line 1854
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1855
	jmp	SHORT $LN8@stbi__ldr_
$LN9@stbi__ldr_:
$LN15@stbi__ldr_:
; Line 1857
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1858
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__ldr_:
; Line 1859
	add	rsp, 88					; 00000058H
	ret	0
?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z ENDP			; stbi__ldr_to_hdr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
?stbi__malloc_mad4@@YAPEAXHHHHH@Z PROC			; stbi__malloc_mad4
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1060
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1061
	mov	eax, DWORD PTR add$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1062
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1063
	add	rsp, 56					; 00000038H
	ret	0
?stbi__malloc_mad4@@YAPEAXHHHHH@Z ENDP			; stbi__malloc_mad4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
c$ = 64
add$ = 72
?stbi__malloc_mad3@@YAPEAXHHHH@Z PROC			; stbi__malloc_mad3
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1053
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1054
	mov	r9d, DWORD PTR add$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1055
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1056
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc_mad3@@YAPEAXHHHH@Z ENDP			; stbi__malloc_mad3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
add$ = 64
?stbi__malloc_mad2@@YAPEAXHHH@Z PROC			; stbi__malloc_mad2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1046
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1047
	mov	r8d, DWORD PTR add$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad2sizes_valid@@YAHHHH@Z	; stbi__mad2sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1048
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1049
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc_mad2@@YAPEAXHHH@Z ENDP			; stbi__malloc_mad2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = 32
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
?stbi__mad4sizes_valid@@YAHHHHHH@Z PROC			; stbi__mad4sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1037
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1038
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@stbi__mad4
$LN3@stbi__mad4:
	mov	DWORD PTR tv86[rsp], 0
$LN4@stbi__mad4:
	mov	eax, DWORD PTR tv86[rsp]
; Line 1040
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad4sizes_valid@@YAHHHHHH@Z ENDP			; stbi__mad4sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
a$ = 64
b$ = 72
c$ = 80
add$ = 88
?stbi__mad3sizes_valid@@YAHHHHH@Z PROC			; stbi__mad3sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1029
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1030
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN4@stbi__mad3
$LN3@stbi__mad3:
	mov	DWORD PTR tv79[rsp], 0
$LN4@stbi__mad3:
	mov	eax, DWORD PTR tv79[rsp]
; Line 1032
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad3sizes_valid@@YAHHHHH@Z ENDP			; stbi__mad3sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
a$ = 64
b$ = 72
add$ = 80
?stbi__mad2sizes_valid@@YAHHHH@Z PROC			; stbi__mad2sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1022
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1023
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@stbi__mad2
$LN3@stbi__mad2:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stbi__mad2:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1024
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad2sizes_valid@@YAHHHH@Z ENDP			; stbi__mad2sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
a$ = 32
b$ = 40
?stbi__mul2sizes_valid@@YAHHH@Z PROC			; stbi__mul2sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1012
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1013
	cmp	DWORD PTR a$[rsp], 0
	jl	SHORT $LN3@stbi__mul2
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__mul2
$LN3@stbi__mul2:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mul2
$LN2@stbi__mul2:
; Line 1014
	cmp	DWORD PTR b$[rsp], 0
	jne	SHORT $LN4@stbi__mul2
	mov	eax, 1
	jmp	SHORT $LN1@stbi__mul2
$LN4@stbi__mul2:
; Line 1016
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN6@stbi__mul2
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN7@stbi__mul2
$LN6@stbi__mul2:
	mov	DWORD PTR tv69[rsp], 0
$LN7@stbi__mul2:
	mov	eax, DWORD PTR tv69[rsp]
$LN1@stbi__mul2:
; Line 1017
	add	rsp, 24
	ret	0
?stbi__mul2sizes_valid@@YAHHH@Z ENDP			; stbi__mul2sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
a$ = 32
b$ = 40
?stbi__addsizes_valid@@YAHHH@Z PROC			; stbi__addsizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1000
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1001
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__adds
	xor	eax, eax
	jmp	SHORT $LN1@stbi__adds
$LN2@stbi__adds:
; Line 1006
	mov	eax, 2147483647				; 7fffffffH
	sub	eax, DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN4@stbi__adds
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@stbi__adds
$LN4@stbi__adds:
	mov	DWORD PTR tv67[rsp], 0
$LN5@stbi__adds:
	mov	eax, DWORD PTR tv67[rsp]
$LN1@stbi__adds:
; Line 1007
	add	rsp, 24
	ret	0
?stbi__addsizes_valid@@YAHHH@Z ENDP			; stbi__addsizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 48
?stbi__malloc@@YAPEAX_K@Z PROC				; stbi__malloc
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 983
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 984
	mov	rcx, QWORD PTR size$[rsp]
	call	QWORD PTR __imp_malloc
; Line 985
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc@@YAPEAX_K@Z ENDP				; stbi__malloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 8
?stbi__err@@YAHPEBD@Z PROC				; stbi__err
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 976
	mov	QWORD PTR [rsp+8], rcx
; Line 977
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR str$[rsp]
	mov	QWORD PTR [rax+rcx], rdx
; Line 978
	xor	eax, eax
; Line 979
	ret	0
?stbi__err@@YAHPEBD@Z ENDP				; stbi__err
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__pnm_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7534
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7535
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	cmp	eax, 16
	jne	SHORT $LN2@stbi__pnm_
; Line 7536
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7537
	xor	eax, eax
$LN1@stbi__pnm_:
; Line 7538
	add	rsp, 40					; 00000028H
	ret	0
?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pnm_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
t$ = 33
p$ = 34
dummy$ = 36
tv81 = 40
maxv$ = 44
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__pnm_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7495
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7499
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__pnm_:
; Line 7500
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__pnm_:
; Line 7501
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__pnm_:
; Line 7503
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7506
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7507
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7508
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN6@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN5@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7509
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7510
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN5@stbi__pnm_:
; Line 7513
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN12@stbi__pnm_
	mov	DWORD PTR tv81[rsp], 3
	jmp	SHORT $LN13@stbi__pnm_
$LN12@stbi__pnm_:
	mov	DWORD PTR tv81[rsp], 1
$LN13@stbi__pnm_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv81[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7515
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7516
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7518
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7519
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7521
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7522
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7524
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	DWORD PTR maxv$[rsp], eax
; Line 7525
	cmp	DWORD PTR maxv$[rsp], 65535		; 0000ffffH
	jle	SHORT $LN7@stbi__pnm_
; Line 7526
	lea	rcx, OFFSET FLAT:$SG102047
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN8@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7527
	cmp	DWORD PTR maxv$[rsp], 255		; 000000ffH
	jle	SHORT $LN9@stbi__pnm_
; Line 7528
	mov	eax, 16
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN10@stbi__pnm_
$LN9@stbi__pnm_:
; Line 7530
	mov	eax, 8
$LN10@stbi__pnm_:
$LN8@stbi__pnm_:
$LN1@stbi__pnm_:
; Line 7531
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__pnm_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 48
tv87 = 52
tv140 = 56
tv157 = 60
tv164 = 64
out$ = 72
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__pnm_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7429
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 7433
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, 4
	mov	rdx, QWORD PTR s$[rsp]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7434
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN2@stbi__pnm_
; Line 7435
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7437
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN3@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG101987
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN11@stbi__pnm_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN12@stbi__pnm_
$LN11@stbi__pnm_:
	mov	DWORD PTR tv80[rsp], 0
$LN12@stbi__pnm_:
	movsxd	rax, DWORD PTR tv80[rsp]
	jmp	$LN1@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7438
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN4@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG101989
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN13@stbi__pnm_
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__pnm_
$LN13@stbi__pnm_:
	mov	DWORD PTR tv87[rsp], 0
$LN14@stbi__pnm_:
	movsxd	rax, DWORD PTR tv87[rsp]
	jmp	$LN1@stbi__pnm_
$LN4@stbi__pnm_:
; Line 7440
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 7441
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 7442
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__pnm_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__pnm_:
; Line 7444
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
; Line 7445
	lea	rcx, OFFSET FLAT:$SG101992
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__pnm_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN16@stbi__pnm_
$LN15@stbi__pnm_:
	mov	DWORD PTR tv140[rsp], 0
$LN16@stbi__pnm_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7447
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR out$[rsp], rax
; Line 7448
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN7@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG101994
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__pnm_
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN18@stbi__pnm_
$LN17@stbi__pnm_:
	mov	DWORD PTR tv157[rsp], 0
$LN18@stbi__pnm_:
	movsxd	rax, DWORD PTR tv157[rsp]
	jmp	$LN1@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7449
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv164[rsp], eax
	mov	rcx, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rcx]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR tv164[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 7451
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN8@stbi__pnm_
; Line 7452
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 7453
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN9@stbi__pnm_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__pnm_
$LN9@stbi__pnm_:
$LN8@stbi__pnm_:
; Line 7455
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__pnm_:
; Line 7456
	add	rsp, 88					; 00000058H
	ret	0
?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__pnm_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
p$ = 33
s$ = 64
?stbi__pnm_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__pnm_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7417
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7419
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7420
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7421
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN2@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7422
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7423
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7425
	mov	eax, 1
$LN1@stbi__pnm_:
; Line 7426
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pnm_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__gif_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7000
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7001
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__gif_info_raw
; Line 7002
	add	rsp, 40					; 00000028H
	ret	0
?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__gif_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
layers$1 = 48
stride$2 = 52
out$3 = 56
u$4 = 64
out_size$5 = 72
delays_size$6 = 76
tv202 = 80
tmp$7 = 88
new_delays$8 = 96
two_back$9 = 104
g$10 = 112
__$ArrayPad$ = 35040
s$ = 35072
delays$ = 35080
x$ = 35088
y$ = 35096
z$ = 35104
comp$ = 35112
req_comp$ = 35120
?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z PROC ; stbi__load_gif_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6886
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 35064				; 000088f8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6887
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test@@YAHPEAUstbi__context@@@Z ; stbi__gif_test
	test	eax, eax
	je	$LN5@stbi__load
; Line 6888
	mov	DWORD PTR layers$1[rsp], 0
; Line 6889
	mov	QWORD PTR u$4[rsp], 0
; Line 6890
	mov	QWORD PTR out$3[rsp], 0
; Line 6891
	mov	QWORD PTR two_back$9[rsp], 0
; Line 6894
	mov	DWORD PTR out_size$5[rsp], 0
; Line 6895
	mov	DWORD PTR delays_size$6[rsp], 0
; Line 6900
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$10[rsp]
	call	memset
; Line 6901
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN7@stbi__load
; Line 6902
	mov	rax, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rax], 0
$LN7@stbi__load:
$LN4@stbi__load:
; Line 6906
	mov	rax, QWORD PTR two_back$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ; stbi__gif_load_next
	mov	QWORD PTR u$4[rsp], rax
; Line 6907
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$4[rsp], rax
	jne	SHORT $LN8@stbi__load
	mov	QWORD PTR u$4[rsp], 0
$LN8@stbi__load:
; Line 6909
	cmp	QWORD PTR u$4[rsp], 0
	je	$LN9@stbi__load
; Line 6910
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$10[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6911
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$10[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6912
	mov	eax, DWORD PTR layers$1[rsp]
	inc	eax
	mov	DWORD PTR layers$1[rsp], eax
; Line 6913
	mov	eax, DWORD PTR g$10[rsp]
	imul	eax, DWORD PTR g$10[rsp+4]
	shl	eax, 2
	mov	DWORD PTR stride$2[rsp], eax
; Line 6915
	cmp	QWORD PTR out$3[rsp], 0
	je	$LN10@stbi__load
; Line 6916
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rdx, rax
	mov	rcx, QWORD PTR out$3[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR tmp$7[rsp], rax
; Line 6917
	cmp	QWORD PTR tmp$7[rsp], 0
	jne	SHORT $LN12@stbi__load
; Line 6918
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
; Line 6920
	mov	rax, QWORD PTR tmp$7[rsp]
	mov	QWORD PTR out$3[rsp], rax
; Line 6921
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
$LN13@stbi__load:
; Line 6924
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN14@stbi__load
; Line 6925
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR new_delays$8[rsp], rax
; Line 6926
	cmp	QWORD PTR new_delays$8[rsp], 0
	jne	SHORT $LN15@stbi__load
; Line 6927
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN15@stbi__load:
; Line 6928
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR new_delays$8[rsp]
	mov	QWORD PTR [rax], rcx
; Line 6929
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN14@stbi__load:
; Line 6931
	jmp	$LN11@stbi__load
$LN10@stbi__load:
; Line 6932
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR out$3[rsp], rax
; Line 6933
	cmp	QWORD PTR out$3[rsp], 0
	jne	SHORT $LN16@stbi__load
; Line 6934
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN16@stbi__load:
; Line 6935
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
; Line 6936
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN17@stbi__load
; Line 6937
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6938
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN18@stbi__load
; Line 6939
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN18@stbi__load:
; Line 6940
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN17@stbi__load:
$LN11@stbi__load:
; Line 6943
	movsxd	rax, DWORD PTR stride$2[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	dec	ecx
	imul	ecx, DWORD PTR stride$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR u$4[rsp]
	call	memcpy
; Line 6944
	cmp	DWORD PTR layers$1[rsp], 2
	jl	SHORT $LN19@stbi__load
; Line 6945
	mov	eax, DWORD PTR stride$2[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR out$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR two_back$9[rsp], rax
$LN19@stbi__load:
; Line 6948
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN20@stbi__load
; Line 6949
	mov	eax, DWORD PTR layers$1[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR g$10[rsp+34920]
	mov	DWORD PTR [rcx+rax*4], edx
$LN20@stbi__load:
$LN9@stbi__load:
; Line 6952
	cmp	QWORD PTR u$4[rsp], 0
	jne	$LN4@stbi__load
; Line 6955
	mov	rcx, QWORD PTR g$10[rsp+8]
	call	QWORD PTR __imp_free
; Line 6956
	mov	rcx, QWORD PTR g$10[rsp+24]
	call	QWORD PTR __imp_free
; Line 6957
	mov	rcx, QWORD PTR g$10[rsp+16]
	call	QWORD PTR __imp_free
; Line 6960
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN21@stbi__load
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN21@stbi__load
; Line 6961
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR g$10[rsp]
	mov	ecx, DWORD PTR g$10[rsp+4]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$3[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$3[rsp], rax
$LN21@stbi__load:
; Line 6963
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6964
	mov	rax, QWORD PTR out$3[rsp]
	jmp	SHORT $LN1@stbi__load
; Line 6965
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
; Line 6966
	lea	rcx, OFFSET FLAT:$SG101649
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN23@stbi__load
	mov	DWORD PTR tv202[rsp], 0
	jmp	SHORT $LN24@stbi__load
$LN23@stbi__load:
	mov	DWORD PTR tv202[rsp], 0
$LN24@stbi__load:
	movsxd	rax, DWORD PTR tv202[rsp]
$LN6@stbi__load:
$LN1@stbi__load:
; Line 6968
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35064				; 000088f8H
	ret	0
?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z ENDP ; stbi__load_gif_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
u$ = 48
g$ = 64
__$ArrayPad$ = 34992
s$ = 35024
x$ = 35032
y$ = 35040
comp$ = 35048
req_comp$ = 35056
ri$ = 35064
?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__gif_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6971
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 35016				; 000088c8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6972
	mov	QWORD PTR u$[rsp], 0
; Line 6974
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$[rsp]
	call	memset
; Line 6977
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ; stbi__gif_load_next
	mov	QWORD PTR u$[rsp], rax
; Line 6978
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$[rsp], rax
	jne	SHORT $LN2@stbi__gif_
	mov	QWORD PTR u$[rsp], 0
$LN2@stbi__gif_:
; Line 6979
	cmp	QWORD PTR u$[rsp], 0
	je	SHORT $LN3@stbi__gif_
; Line 6980
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6981
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6985
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN5@stbi__gif_
; Line 6986
	mov	eax, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR g$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR u$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR u$[rsp], rax
$LN5@stbi__gif_:
	jmp	SHORT $LN4@stbi__gif_
$LN3@stbi__gif_:
; Line 6987
	cmp	QWORD PTR g$[rsp+8], 0
	je	SHORT $LN6@stbi__gif_
; Line 6989
	mov	rcx, QWORD PTR g$[rsp+8]
	call	QWORD PTR __imp_free
$LN6@stbi__gif_:
$LN4@stbi__gif_:
; Line 6993
	mov	rcx, QWORD PTR g$[rsp+24]
	call	QWORD PTR __imp_free
; Line 6994
	mov	rcx, QWORD PTR g$[rsp+16]
	call	QWORD PTR __imp_free
; Line 6996
	mov	rax, QWORD PTR u$[rsp]
; Line 6997
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35016				; 000088c8H
	ret	0
?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__gif_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__gif_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__gif_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6513
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6514
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z ; stbi__gif_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 6515
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6516
	mov	eax, DWORD PTR r$[rsp]
; Line 6517
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__gif_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_packets$ = 32
act_comp$ = 36
dummy$ = 40
tv154 = 44
packet$1 = 48
chained$ = 56
tv95 = 64
packets$ = 72
__$ArrayPad$ = 104
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__pic_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7346
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7347
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
; Line 7350
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN5@stbi__pic_:
; Line 7351
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN6@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN6@stbi__pic_:
; Line 7352
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN7@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN7@stbi__pic_:
; Line 7354
	lea	rdx, OFFSET FLAT:$SG101948
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN8@stbi__pic_
; Line 7355
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 7359
	mov	edx, 88					; 00000058H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7361
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7362
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7363
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__pic_
; Line 7364
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7365
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 7367
	mov	rax, QWORD PTR x$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@stbi__pic_
	mov	eax, 268435456				; 10000000H
	cdq
	mov	rcx, QWORD PTR x$[rsp]
	idiv	DWORD PTR [rcx]
	mov	rcx, QWORD PTR y$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN10@stbi__pic_
; Line 7368
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7369
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 7372
	mov	edx, 8
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN4@stbi__pic_:
; Line 7377
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN11@stbi__pic_
; Line 7378
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN11@stbi__pic_:
; Line 7380
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR tv95[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
	mov	rax, QWORD PTR tv95[rsp]
	mov	QWORD PTR packet$1[rsp], rax
; Line 7381
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 7382
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx], al
; Line 7383
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 7384
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 7385
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 7387
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN12@stbi__pic_
; Line 7388
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7389
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN12@stbi__pic_:
; Line 7391
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN13@stbi__pic_
; Line 7392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7393
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN13@stbi__pic_:
; Line 7395
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 7397
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN15@stbi__pic_
	mov	DWORD PTR tv154[rsp], 4
	jmp	SHORT $LN16@stbi__pic_
$LN15@stbi__pic_:
	mov	DWORD PTR tv154[rsp], 3
$LN16@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7399
	mov	eax, 1
$LN1@stbi__pic_:
; Line 7400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__pic_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 48
x$ = 52
result$ = 56
i$ = 64
tv76 = 68
tv82 = 72
tv90 = 76
tv133 = 80
tv147 = 84
internal_comp$ = 88
s$ = 112
px$ = 120
py$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__pic_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6423
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 6428
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR internal_comp$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN5@stbi__pic_:
; Line 6430
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 92			; 0000005cH
	jge	SHORT $LN3@stbi__pic_
; Line 6431
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6433
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR x$[rsp], eax
; Line 6434
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR y$[rsp], eax
; Line 6436
	cmp	DWORD PTR y$[rsp], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101296
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__pic_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN14@stbi__pic_:
	mov	DWORD PTR tv76[rsp], 0
$LN15@stbi__pic_:
	movsxd	rax, DWORD PTR tv76[rsp]
	jmp	$LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6437
	cmp	DWORD PTR x$[rsp], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101298
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN16@stbi__pic_
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN17@stbi__pic_
$LN16@stbi__pic_:
	mov	DWORD PTR tv82[rsp], 0
$LN17@stbi__pic_:
	movsxd	rax, DWORD PTR tv82[rsp]
	jmp	$LN1@stbi__pic_
$LN7@stbi__pic_:
; Line 6439
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN8@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101300
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__pic_
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN19@stbi__pic_
$LN18@stbi__pic_:
	mov	DWORD PTR tv90[rsp], 0
$LN19@stbi__pic_:
	movsxd	rax, DWORD PTR tv90[rsp]
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 6440
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN9@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101302
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN20@stbi__pic_
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN21@stbi__pic_
$LN20@stbi__pic_:
	mov	DWORD PTR tv133[rsp], 0
$LN21@stbi__pic_:
	movsxd	rax, DWORD PTR tv133[rsp]
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 6442
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 6443
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 6444
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 6447
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR result$[rsp], rax
; Line 6448
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN10@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG101304
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN22@stbi__pic_
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN23@stbi__pic_
$LN22@stbi__pic_:
	mov	DWORD PTR tv147[rsp], 0
$LN23@stbi__pic_:
	movsxd	rax, DWORD PTR tv147[rsp]
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 6449
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 6451
	mov	rax, QWORD PTR result$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z ; stbi__pic_load_core
	test	rax, rax
	jne	SHORT $LN11@stbi__pic_
; Line 6452
	mov	rcx, QWORD PTR result$[rsp]
	call	QWORD PTR __imp_free
; Line 6453
	mov	QWORD PTR result$[rsp], 0
$LN11@stbi__pic_:
; Line 6455
	mov	rax, QWORD PTR px$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6456
	mov	rax, QWORD PTR py$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6457
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN12@stbi__pic_
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR req_comp$[rsp], eax
$LN12@stbi__pic_:
; Line 6458
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
; Line 6460
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6461
	add	rsp, 104				; 00000068H
	ret	0
?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__pic_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__pic_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__pic_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6464
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6465
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z ; stbi__pic_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 6466
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6467
	mov	eax, DWORD PTR r$[rsp]
; Line 6468
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pic_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
dummy$ = 40
valid$ = 44
buffer$ = 48
__$ArrayPad$ = 1072
s$ = 1104
x$ = 1112
y$ = 1120
comp$ = 1128
?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__hdr_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7212
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1096				; 00000448H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7215
	mov	DWORD PTR valid$[rsp], 0
; Line 7218
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN7@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN7@stbi__hdr_:
; Line 7219
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN8@stbi__hdr_:
; Line 7220
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN9@stbi__hdr_:
; Line 7222
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	jne	SHORT $LN10@stbi__hdr_
; Line 7223
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7224
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN10@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7228
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7229
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7230
	lea	rdx, OFFSET FLAT:$SG101879
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN12@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN12@stbi__hdr_:
; Line 7231
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7233
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN13@stbi__hdr_
; Line 7234
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7235
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN13@stbi__hdr_:
; Line 7237
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7238
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG101882
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN14@stbi__hdr_
; Line 7239
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7240
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7242
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7243
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__hdr_:
; Line 7244
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7245
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG101884
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN15@stbi__hdr_
; Line 7246
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7247
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN15@stbi__hdr_:
; Line 7249
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7250
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7251
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
; Line 7252
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7253
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1096				; 00000448H
	ret	0
?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__hdr_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$ = 48
i$ = 52
width$ = 56
j$ = 60
value$ = 64
len$ = 68
z$ = 72
token$ = 80
height$ = 88
scanline$ = 96
k$ = 104
rgbe$1 = 108
hdr_data$ = 112
nleft$2 = 120
tv78 = 124
valid$ = 128
tv95 = 132
tv140 = 136
tv158 = 140
tv169 = 144
tv175 = 148
tv189 = 152
tv201 = 156
c1$ = 160
c2$ = 164
tv264 = 168
tv276 = 172
tv298 = 176
tv316 = 180
rgbe$3 = 184
headerToken$ = 192
buffer$ = 208
__$ArrayPad$ = 1232
s$ = 1264
x$ = 1272
y$ = 1280
comp$ = 1288
req_comp$ = 1296
ri$ = 1304
?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__hdr_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7081
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1256				; 000004e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7084
	mov	DWORD PTR valid$[rsp], 0
; Line 7095
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR headerToken$[rsp], rax
; Line 7096
	lea	rdx, OFFSET FLAT:$SG101815
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
	lea	rdx, OFFSET FLAT:$SG101816
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
; Line 7097
	lea	rcx, OFFSET FLAT:$SG101817
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN56@stbi__hdr_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN57@stbi__hdr_
$LN56@stbi__hdr_:
	mov	DWORD PTR tv78[rsp], 0
$LN57@stbi__hdr_:
	movsxd	rax, DWORD PTR tv78[rsp]
	jmp	$LN1@stbi__hdr_
$LN30@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7101
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7102
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN31@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN31@stbi__hdr_:
; Line 7103
	lea	rdx, OFFSET FLAT:$SG101820
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN32@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN32@stbi__hdr_:
; Line 7104
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7106
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN33@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG101822
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__hdr_
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN59@stbi__hdr_
$LN58@stbi__hdr_:
	mov	DWORD PTR tv95[rsp], 0
$LN59@stbi__hdr_:
	movsxd	rax, DWORD PTR tv95[rsp]
	jmp	$LN1@stbi__hdr_
$LN33@stbi__hdr_:
; Line 7110
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7111
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG101824
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN34@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG101825
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__hdr_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN61@stbi__hdr_
$LN60@stbi__hdr_:
	mov	DWORD PTR tv140[rsp], 0
$LN61@stbi__hdr_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__hdr_
$LN34@stbi__hdr_:
; Line 7112
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7113
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR height$[rsp], eax
$LN5@stbi__hdr_:
; Line 7114
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7115
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG101827
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN35@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG101828
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__hdr_
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN63@stbi__hdr_
$LN62@stbi__hdr_:
	mov	DWORD PTR tv158[rsp], 0
$LN63@stbi__hdr_:
	movsxd	rax, DWORD PTR tv158[rsp]
	jmp	$LN1@stbi__hdr_
$LN35@stbi__hdr_:
; Line 7116
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7117
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR width$[rsp], eax
; Line 7119
	cmp	DWORD PTR height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN36@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG101830
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__hdr_
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN65@stbi__hdr_
$LN64@stbi__hdr_:
	mov	DWORD PTR tv169[rsp], 0
$LN65@stbi__hdr_:
	movsxd	rax, DWORD PTR tv169[rsp]
	jmp	$LN1@stbi__hdr_
$LN36@stbi__hdr_:
; Line 7120
	cmp	DWORD PTR width$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG101832
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__hdr_
	mov	DWORD PTR tv175[rsp], 0
	jmp	SHORT $LN67@stbi__hdr_
$LN66@stbi__hdr_:
	mov	DWORD PTR tv175[rsp], 0
$LN67@stbi__hdr_:
	movsxd	rax, DWORD PTR tv175[rsp]
	jmp	$LN1@stbi__hdr_
$LN37@stbi__hdr_:
; Line 7122
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7123
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7125
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN38@stbi__hdr_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
$LN38@stbi__hdr_:
; Line 7126
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN39@stbi__hdr_
	mov	DWORD PTR req_comp$[rsp], 3
$LN39@stbi__hdr_:
; Line 7128
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN40@stbi__hdr_
; Line 7129
	lea	rcx, OFFSET FLAT:$SG101836
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__hdr_
	mov	DWORD PTR tv189[rsp], 0
	jmp	SHORT $LN69@stbi__hdr_
$LN68@stbi__hdr_:
	mov	DWORD PTR tv189[rsp], 0
$LN69@stbi__hdr_:
	movsxd	rax, DWORD PTR tv189[rsp]
	jmp	$LN1@stbi__hdr_
$LN40@stbi__hdr_:
; Line 7132
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR hdr_data$[rsp], rax
; Line 7133
	cmp	QWORD PTR hdr_data$[rsp], 0
	jne	SHORT $LN41@stbi__hdr_
; Line 7134
	lea	rcx, OFFSET FLAT:$SG101838
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__hdr_
	mov	DWORD PTR tv201[rsp], 0
	jmp	SHORT $LN71@stbi__hdr_
$LN70@stbi__hdr_:
	mov	DWORD PTR tv201[rsp], 0
$LN71@stbi__hdr_:
	movsxd	rax, DWORD PTR tv201[rsp]
	jmp	$LN1@stbi__hdr_
$LN41@stbi__hdr_:
; Line 7138
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN44@stbi__hdr_
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN42@stbi__hdr_
$LN44@stbi__hdr_:
; Line 7140
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi__hdr_
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi__hdr_
; Line 7141
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stbi__hdr_
$main_decode_loop$80:
; Line 7144
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 7145
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR hdr_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, rax
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
; Line 7146
	jmp	SHORT $LN10@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7147
	jmp	$LN7@stbi__hdr_
$LN8@stbi__hdr_:
; Line 7148
	jmp	$LN43@stbi__hdr_
$LN42@stbi__hdr_:
; Line 7150
	mov	QWORD PTR scanline$[rsp], 0
; Line 7152
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi__hdr_
$LN13@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 7153
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c1$[rsp], eax
; Line 7154
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c2$[rsp], eax
; Line 7155
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 7156
	cmp	DWORD PTR c1$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	cmp	DWORD PTR c2$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	mov	eax, DWORD PTR len$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN45@stbi__hdr_
$LN46@stbi__hdr_:
; Line 7160
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR c1$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7161
	mov	eax, 1
	imul	rax, rax, 1
	movzx	ecx, BYTE PTR c2$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7162
	mov	eax, 1
	imul	rax, rax, 2
	movzx	ecx, BYTE PTR len$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7163
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR rgbe$1[rsp+rcx], al
; Line 7164
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$1[rsp]
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
; Line 7165
	mov	DWORD PTR i$[rsp], 1
; Line 7166
	mov	DWORD PTR j$[rsp], 0
; Line 7167
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
; Line 7168
	jmp	$main_decode_loop$80
$LN45@stbi__hdr_:
; Line 7170
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 8
	mov	DWORD PTR len$[rsp], eax
; Line 7171
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR len$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 7172
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	je	SHORT $LN47@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG101845
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__hdr_
	mov	DWORD PTR tv264[rsp], 0
	jmp	SHORT $LN73@stbi__hdr_
$LN72@stbi__hdr_:
	mov	DWORD PTR tv264[rsp], 0
$LN73@stbi__hdr_:
	movsxd	rax, DWORD PTR tv264[rsp]
	jmp	$LN1@stbi__hdr_
$LN47@stbi__hdr_:
; Line 7173
	cmp	QWORD PTR scanline$[rsp], 0
	jne	SHORT $LN48@stbi__hdr_
; Line 7174
	xor	r8d, r8d
	mov	edx, 4
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR scanline$[rsp], rax
; Line 7175
	cmp	QWORD PTR scanline$[rsp], 0
	jne	SHORT $LN49@stbi__hdr_
; Line 7176
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
; Line 7177
	lea	rcx, OFFSET FLAT:$SG101848
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN74@stbi__hdr_
	mov	DWORD PTR tv276[rsp], 0
	jmp	SHORT $LN75@stbi__hdr_
$LN74@stbi__hdr_:
	mov	DWORD PTR tv276[rsp], 0
$LN75@stbi__hdr_:
	movsxd	rax, DWORD PTR tv276[rsp]
	jmp	$LN1@stbi__hdr_
$LN49@stbi__hdr_:
$LN48@stbi__hdr_:
; Line 7181
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__hdr_
$LN16@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__hdr_:
	cmp	DWORD PTR k$[rsp], 4
	jge	$LN17@stbi__hdr_
; Line 7183
	mov	DWORD PTR i$[rsp], 0
$LN19@stbi__hdr_:
; Line 7184
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$2[rsp], eax
	cmp	DWORD PTR nleft$2[rsp], 0
	jle	$LN20@stbi__hdr_
; Line 7185
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR count$[rsp], al
; Line 7186
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, 128				; 00000080H
	jle	$LN50@stbi__hdr_
; Line 7188
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR value$[rsp], al
; Line 7189
	movzx	eax, BYTE PTR count$[rsp]
	sub	eax, 128				; 00000080H
	mov	BYTE PTR count$[rsp], al
; Line 7190
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	SHORT $LN52@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG101852
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__hdr_
	mov	DWORD PTR tv298[rsp], 0
	jmp	SHORT $LN77@stbi__hdr_
$LN76@stbi__hdr_:
	mov	DWORD PTR tv298[rsp], 0
$LN77@stbi__hdr_:
	movsxd	rax, DWORD PTR tv298[rsp]
	jmp	$LN1@stbi__hdr_
$LN52@stbi__hdr_:
; Line 7191
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN23@stbi__hdr_
$LN21@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN23@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN22@stbi__hdr_
; Line 7192
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	movzx	edx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__hdr_
$LN22@stbi__hdr_:
; Line 7193
	jmp	$LN51@stbi__hdr_
$LN50@stbi__hdr_:
; Line 7195
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	SHORT $LN53@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG101854
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__hdr_
	mov	DWORD PTR tv316[rsp], 0
	jmp	SHORT $LN79@stbi__hdr_
$LN78@stbi__hdr_:
	mov	DWORD PTR tv316[rsp], 0
$LN79@stbi__hdr_:
	movsxd	rax, DWORD PTR tv316[rsp]
	jmp	$LN1@stbi__hdr_
$LN53@stbi__hdr_:
; Line 7196
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN26@stbi__hdr_
$LN24@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN26@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN25@stbi__hdr_
; Line 7197
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR k$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*4]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scanline$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__hdr_
$LN25@stbi__hdr_:
$LN51@stbi__hdr_:
; Line 7199
	jmp	$LN19@stbi__hdr_
$LN20@stbi__hdr_:
; Line 7200
	jmp	$LN16@stbi__hdr_
$LN17@stbi__hdr_:
; Line 7201
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN29@stbi__hdr_
$LN27@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN29@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN28@stbi__hdr_
; Line 7202
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR width$[rsp]
	add	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR hdr_data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rdx, rax
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
	jmp	SHORT $LN27@stbi__hdr_
$LN28@stbi__hdr_:
; Line 7203
	jmp	$LN13@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7204
	cmp	QWORD PTR scanline$[rsp], 0
	je	SHORT $LN54@stbi__hdr_
; Line 7205
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
$LN54@stbi__hdr_:
$LN43@stbi__hdr_:
; Line 7208
	mov	rax, QWORD PTR hdr_data$[rsp]
$LN1@stbi__hdr_:
; Line 7209
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1256				; 000004e8H
	ret	0
?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__hdr_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__hdr_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__hdr_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7020
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7021
	lea	rdx, OFFSET FLAT:$SG101686
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ; stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7022
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7023
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN2@stbi__hdr_
; Line 7024
	lea	rdx, OFFSET FLAT:$SG101688
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ; stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7025
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
$LN2@stbi__hdr_:
; Line 7027
	mov	eax, DWORD PTR r$[rsp]
; Line 7028
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__hdr_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
channelCount$ = 32
depth$ = 36
s$ = 64
?stbi__psd_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__psd_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7317
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7319
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN2@stbi__psd_
; Line 7320
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7321
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN2@stbi__psd_:
; Line 7323
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN3@stbi__psd_
; Line 7324
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7325
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN3@stbi__psd_:
; Line 7327
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7328
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7329
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN5@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 7330
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7331
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN4@stbi__psd_:
; Line 7333
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 7334
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 7335
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7336
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN6@stbi__psd_
; Line 7337
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7338
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7340
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7341
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__psd_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dummy$ = 32
channelCount$ = 36
depth$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__psd_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7282
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7284
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__psd_:
; Line 7285
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__psd_:
; Line 7286
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__psd_:
; Line 7287
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN5@stbi__psd_
; Line 7288
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7289
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN5@stbi__psd_:
; Line 7291
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN6@stbi__psd_
; Line 7292
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7293
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7295
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7296
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7297
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN8@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN7@stbi__psd_
$LN8@stbi__psd_:
; Line 7298
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7299
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN7@stbi__psd_:
; Line 7301
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7302
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7303
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7304
	cmp	DWORD PTR depth$[rsp], 8
	je	SHORT $LN9@stbi__psd_
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN9@stbi__psd_
; Line 7305
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7306
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN9@stbi__psd_:
; Line 7308
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 3
	je	SHORT $LN10@stbi__psd_
; Line 7309
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7310
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN10@stbi__psd_:
; Line 7312
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
; Line 7313
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7314
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__psd_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
channel$ = 52
h$ = 56
w$ = 60
out$ = 64
val$1 = 72
pixelCount$ = 76
channelCount$ = 80
bitdepth$ = 84
ra$2 = 88
ra$3 = 92
pixel$4 = 96
pixel$5 = 104
val$6 = 112
compression$ = 116
inv_a$7 = 120
inv_a$8 = 124
p$9 = 128
tv137 = 136
tv146 = 140
tv154 = 144
tv174 = 148
tv185 = 152
tv205 = 156
tv222 = 160
tv233 = 164
tv244 = 168
tv252 = 172
tv70 = 176
tv78 = 180
tv89 = 184
tv131 = 188
p$10 = 192
a$11 = 200
a$12 = 204
q$13 = 208
p$14 = 216
q$15 = 224
s$ = 256
x$ = 264
y$ = 272
comp$ = 280
req_comp$ = 288
ri$ = 296
bpc$ = 304
?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z PROC ; stbi__psd_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6049
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 6059
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN32@stbi__psd_
; Line 6060
	lea	rcx, OFFSET FLAT:$SG101061
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN69@stbi__psd_
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN70@stbi__psd_
$LN69@stbi__psd_:
	mov	DWORD PTR tv70[rsp], 0
$LN70@stbi__psd_:
	movsxd	rax, DWORD PTR tv70[rsp]
	jmp	$LN1@stbi__psd_
$LN32@stbi__psd_:
; Line 6063
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN33@stbi__psd_
; Line 6064
	lea	rcx, OFFSET FLAT:$SG101063
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN71@stbi__psd_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN72@stbi__psd_
$LN71@stbi__psd_:
	mov	DWORD PTR tv78[rsp], 0
$LN72@stbi__psd_:
	movsxd	rax, DWORD PTR tv78[rsp]
	jmp	$LN1@stbi__psd_
$LN33@stbi__psd_:
; Line 6067
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6070
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 6071
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN35@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN34@stbi__psd_
$LN35@stbi__psd_:
; Line 6072
	lea	rcx, OFFSET FLAT:$SG101066
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN73@stbi__psd_
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN74@stbi__psd_
$LN73@stbi__psd_:
	mov	DWORD PTR tv89[rsp], 0
$LN74@stbi__psd_:
	movsxd	rax, DWORD PTR tv89[rsp]
	jmp	$LN1@stbi__psd_
$LN34@stbi__psd_:
; Line 6075
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR h$[rsp], eax
; Line 6076
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR w$[rsp], eax
; Line 6078
	cmp	DWORD PTR h$[rsp], 16777216		; 01000000H
	jle	SHORT $LN36@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG101068
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN75@stbi__psd_
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN76@stbi__psd_
$LN75@stbi__psd_:
	mov	DWORD PTR tv131[rsp], 0
$LN76@stbi__psd_:
	movsxd	rax, DWORD PTR tv131[rsp]
	jmp	$LN1@stbi__psd_
$LN36@stbi__psd_:
; Line 6079
	cmp	DWORD PTR w$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG101070
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN77@stbi__psd_
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN78@stbi__psd_
$LN77@stbi__psd_:
	mov	DWORD PTR tv137[rsp], 0
$LN78@stbi__psd_:
	movsxd	rax, DWORD PTR tv137[rsp]
	jmp	$LN1@stbi__psd_
$LN37@stbi__psd_:
; Line 6082
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR bitdepth$[rsp], eax
; Line 6083
	cmp	DWORD PTR bitdepth$[rsp], 8
	je	SHORT $LN38@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	je	SHORT $LN38@stbi__psd_
; Line 6084
	lea	rcx, OFFSET FLAT:$SG101072
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN79@stbi__psd_
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN80@stbi__psd_
$LN79@stbi__psd_:
	mov	DWORD PTR tv146[rsp], 0
$LN80@stbi__psd_:
	movsxd	rax, DWORD PTR tv146[rsp]
	jmp	$LN1@stbi__psd_
$LN38@stbi__psd_:
; Line 6096
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 3
	je	SHORT $LN39@stbi__psd_
; Line 6097
	lea	rcx, OFFSET FLAT:$SG101074
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__psd_
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN82@stbi__psd_
$LN81@stbi__psd_:
	mov	DWORD PTR tv154[rsp], 0
$LN82@stbi__psd_:
	movsxd	rax, DWORD PTR tv154[rsp]
	jmp	$LN1@stbi__psd_
$LN39@stbi__psd_:
; Line 6100
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6103
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6106
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6112
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR compression$[rsp], eax
; Line 6113
	cmp	DWORD PTR compression$[rsp], 1
	jle	SHORT $LN40@stbi__psd_
; Line 6114
	lea	rcx, OFFSET FLAT:$SG101076
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN83@stbi__psd_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN84@stbi__psd_
$LN83@stbi__psd_:
	mov	DWORD PTR tv174[rsp], 0
$LN84@stbi__psd_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__psd_
$LN40@stbi__psd_:
; Line 6117
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 4
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN41@stbi__psd_
; Line 6118
	lea	rcx, OFFSET FLAT:$SG101078
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN85@stbi__psd_
	mov	DWORD PTR tv185[rsp], 0
	jmp	SHORT $LN86@stbi__psd_
$LN85@stbi__psd_:
	mov	DWORD PTR tv185[rsp], 0
$LN86@stbi__psd_:
	movsxd	rax, DWORD PTR tv185[rsp]
	jmp	$LN1@stbi__psd_
$LN41@stbi__psd_:
; Line 6122
	cmp	DWORD PTR compression$[rsp], 0
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
; Line 6123
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 8
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 6124
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
; Line 6125
	jmp	SHORT $LN43@stbi__psd_
$LN42@stbi__psd_:
; Line 6126
	mov	eax, DWORD PTR w$[rsp]
	shl	eax, 2
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR out$[rsp], rax
$LN43@stbi__psd_:
; Line 6128
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN44@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG101082
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN87@stbi__psd_
	mov	DWORD PTR tv205[rsp], 0
	jmp	SHORT $LN88@stbi__psd_
$LN87@stbi__psd_:
	mov	DWORD PTR tv205[rsp], 0
$LN88@stbi__psd_:
	movsxd	rax, DWORD PTR tv205[rsp]
	jmp	$LN1@stbi__psd_
$LN44@stbi__psd_:
; Line 6129
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR pixelCount$[rsp], eax
; Line 6135
	cmp	DWORD PTR compression$[rsp], 0
	je	$LN45@stbi__psd_
; Line 6146
	mov	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channelCount$[rsp]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6149
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN4@stbi__psd_
$LN2@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN4@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN3@stbi__psd_
; Line 6152
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$10[rsp], rax
; Line 6153
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	SHORT $LN47@stbi__psd_
; Line 6155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__psd_
$LN5@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$10[rsp]
	add	rax, 4
	mov	QWORD PTR p$10[rsp], rax
$LN7@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__psd_
; Line 6156
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN89@stbi__psd_
	mov	DWORD PTR tv222[rsp], 255		; 000000ffH
	jmp	SHORT $LN90@stbi__psd_
$LN89@stbi__psd_:
	mov	DWORD PTR tv222[rsp], 0
$LN90@stbi__psd_:
	mov	rax, QWORD PTR p$10[rsp]
	movzx	ecx, BYTE PTR tv222[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN5@stbi__psd_
$LN6@stbi__psd_:
; Line 6157
	jmp	SHORT $LN48@stbi__psd_
$LN47@stbi__psd_:
; Line 6159
	mov	r8d, DWORD PTR pixelCount$[rsp]
	mov	rdx, QWORD PTR p$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__psd_decode_rle
	test	eax, eax
	jne	SHORT $LN49@stbi__psd_
; Line 6160
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
; Line 6161
	lea	rcx, OFFSET FLAT:$SG101088
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN91@stbi__psd_
	mov	DWORD PTR tv233[rsp], 0
	jmp	SHORT $LN92@stbi__psd_
$LN91@stbi__psd_:
	mov	DWORD PTR tv233[rsp], 0
$LN92@stbi__psd_:
	movsxd	rax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__psd_
$LN49@stbi__psd_:
$LN48@stbi__psd_:
; Line 6164
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6166
	jmp	$LN46@stbi__psd_
$LN45@stbi__psd_:
; Line 6171
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN10@stbi__psd_
$LN8@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN10@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN9@stbi__psd_
; Line 6172
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	$LN50@stbi__psd_
; Line 6174
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	$LN52@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	$LN52@stbi__psd_
; Line 6175
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$13[rsp], rax
; Line 6176
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN93@stbi__psd_
	mov	DWORD PTR tv244[rsp], 65535		; 0000ffffH
	jmp	SHORT $LN94@stbi__psd_
$LN93@stbi__psd_:
	mov	DWORD PTR tv244[rsp], 0
$LN94@stbi__psd_:
	movzx	eax, WORD PTR tv244[rsp]
	mov	WORD PTR val$6[rsp], ax
; Line 6177
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__psd_
$LN11@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$13[rsp]
	add	rax, 8
	mov	QWORD PTR q$13[rsp], rax
$LN13@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__psd_
; Line 6178
	mov	rax, QWORD PTR q$13[rsp]
	movzx	ecx, WORD PTR val$6[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN11@stbi__psd_
$LN12@stbi__psd_:
; Line 6179
	jmp	$LN53@stbi__psd_
$LN52@stbi__psd_:
; Line 6180
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$14[rsp], rax
; Line 6181
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN95@stbi__psd_
	mov	DWORD PTR tv252[rsp], 255		; 000000ffH
	jmp	SHORT $LN96@stbi__psd_
$LN95@stbi__psd_:
	mov	DWORD PTR tv252[rsp], 0
$LN96@stbi__psd_:
	movzx	eax, BYTE PTR tv252[rsp]
	mov	BYTE PTR val$1[rsp], al
; Line 6182
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__psd_
$LN14@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$14[rsp]
	add	rax, 4
	mov	QWORD PTR p$14[rsp], rax
$LN16@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN15@stbi__psd_
; Line 6183
	mov	rax, QWORD PTR p$14[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN14@stbi__psd_
$LN15@stbi__psd_:
$LN53@stbi__psd_:
; Line 6185
	jmp	$LN51@stbi__psd_
$LN50@stbi__psd_:
; Line 6186
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN54@stbi__psd_
; Line 6187
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$15[rsp], rax
; Line 6188
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN19@stbi__psd_
$LN17@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$15[rsp]
	add	rax, 8
	mov	QWORD PTR q$15[rsp], rax
$LN19@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN18@stbi__psd_
; Line 6189
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR q$15[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN17@stbi__psd_
$LN18@stbi__psd_:
; Line 6190
	jmp	$LN55@stbi__psd_
$LN54@stbi__psd_:
; Line 6191
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$9[rsp], rax
; Line 6192
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN56@stbi__psd_
; Line 6193
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__psd_
$LN20@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN22@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN21@stbi__psd_
; Line 6194
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sar	eax, 8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN20@stbi__psd_
$LN21@stbi__psd_:
; Line 6195
	jmp	SHORT $LN57@stbi__psd_
$LN56@stbi__psd_:
; Line 6196
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__psd_
$LN23@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN25@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN24@stbi__psd_
; Line 6197
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN23@stbi__psd_
$LN24@stbi__psd_:
$LN57@stbi__psd_:
$LN55@stbi__psd_:
$LN51@stbi__psd_:
; Line 6201
	jmp	$LN8@stbi__psd_
$LN9@stbi__psd_:
$LN46@stbi__psd_:
; Line 6205
	cmp	DWORD PTR channelCount$[rsp], 4
	jl	$LN58@stbi__psd_
; Line 6206
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	$LN59@stbi__psd_
; Line 6207
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__psd_
$LN26@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN27@stbi__psd_
; Line 6208
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pixel$4[rsp], rax
; Line 6209
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN61@stbi__psd_
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 65535				; 0000ffffH
	je	$LN61@stbi__psd_
; Line 6210
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR a$11[rsp], xmm0
; Line 6211
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$11[rsp]
	movss	DWORD PTR ra$2[rsp], xmm0
; Line 6212
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$2[rsp]
	movss	xmm1, DWORD PTR __real@477fff00
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$7[rsp], xmm0
; Line 6213
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$2[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6214
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$2[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6215
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$2[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN61@stbi__psd_:
; Line 6217
	jmp	$LN26@stbi__psd_
$LN27@stbi__psd_:
; Line 6218
	jmp	$LN60@stbi__psd_
$LN59@stbi__psd_:
; Line 6219
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN31@stbi__psd_
$LN29@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN31@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN30@stbi__psd_
; Line 6220
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixel$5[rsp], rax
; Line 6221
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN62@stbi__psd_
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 255				; 000000ffH
	je	$LN62@stbi__psd_
; Line 6222
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR a$12[rsp], xmm0
; Line 6223
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$12[rsp]
	movss	DWORD PTR ra$3[rsp], xmm0
; Line 6224
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$3[rsp]
	movss	xmm1, DWORD PTR __real@437f0000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$8[rsp], xmm0
; Line 6225
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6226
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6227
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN62@stbi__psd_:
; Line 6229
	jmp	$LN29@stbi__psd_
$LN30@stbi__psd_:
$LN60@stbi__psd_:
$LN58@stbi__psd_:
; Line 6234
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN63@stbi__psd_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN63@stbi__psd_
; Line 6235
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN64@stbi__psd_
; Line 6236
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format16@@YAPEAGPEAGHHII@Z ; stbi__convert_format16
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN65@stbi__psd_
$LN64@stbi__psd_:
; Line 6238
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
$LN65@stbi__psd_:
; Line 6239
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN66@stbi__psd_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__psd_
$LN66@stbi__psd_:
$LN63@stbi__psd_:
; Line 6242
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN67@stbi__psd_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN67@stbi__psd_:
; Line 6243
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6244
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6246
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__psd_:
; Line 6247
	add	rsp, 248				; 000000f8H
	ret	0
?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ENDP ; stbi__psd_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
r$ = 36
s$ = 64
?stbi__psd_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__psd_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6004
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6005
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	jne	SHORT $LN3@stbi__psd_
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__psd_
$LN3@stbi__psd_:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__psd_:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 6006
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6007
	mov	eax, DWORD PTR r$[rsp]
; Line 6008
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__psd_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_image_type$ = 32
sz$ = 36
tga_colormap_bpp$ = 40
tga_bits_per_pixel$ = 44
tga_comp$ = 48
tga_colormap_type$ = 52
tv153 = 56
tga_w$ = 60
tga_h$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__tga_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5678
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5681
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5682
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_colormap_type$[rsp], eax
; Line 5683
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
; Line 5684
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5685
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN2@stbi__tga_:
; Line 5687
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5688
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jne	$LN3@stbi__tga_
; Line 5689
	cmp	DWORD PTR tga_image_type$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 9
	je	SHORT $LN5@stbi__tga_
; Line 5690
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5691
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN5@stbi__tga_:
; Line 5693
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5694
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5695
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
; Line 5696
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5697
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5699
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5700
	mov	eax, DWORD PTR sz$[rsp]
	mov	DWORD PTR tga_colormap_bpp$[rsp], eax
; Line 5701
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5702
	cmp	DWORD PTR tga_image_type$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN7@stbi__tga_
; Line 5703
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5704
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN7@stbi__tga_:
; Line 5706
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5707
	mov	DWORD PTR tga_colormap_bpp$[rsp], 0
$LN4@stbi__tga_:
; Line 5709
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_w$[rsp], eax
; Line 5710
	cmp	DWORD PTR tga_w$[rsp], 1
	jge	SHORT $LN8@stbi__tga_
; Line 5711
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5712
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN8@stbi__tga_:
; Line 5714
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_h$[rsp], eax
; Line 5715
	cmp	DWORD PTR tga_h$[rsp], 1
	jge	SHORT $LN9@stbi__tga_
; Line 5716
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5717
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN9@stbi__tga_:
; Line 5719
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5720
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5721
	cmp	DWORD PTR tga_colormap_bpp$[rsp], 0
	je	SHORT $LN10@stbi__tga_
; Line 5722
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	je	SHORT $LN12@stbi__tga_
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 16
	je	SHORT $LN12@stbi__tga_
; Line 5725
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5726
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5728
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, DWORD PTR tga_colormap_bpp$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
; Line 5729
	jmp	SHORT $LN11@stbi__tga_
$LN10@stbi__tga_:
; Line 5730
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN18@stbi__tga_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN18@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 1
$LN19@stbi__tga_:
	xor	r8d, r8d
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN11@stbi__tga_:
; Line 5732
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN13@stbi__tga_
; Line 5733
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5734
	xor	eax, eax
	jmp	SHORT $LN1@stbi__tga_
$LN13@stbi__tga_:
; Line 5736
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN14@stbi__tga_
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN14@stbi__tga_:
; Line 5737
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN15@stbi__tga_
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN15@stbi__tga_:
; Line 5738
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN16@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN16@stbi__tga_:
; Line 5739
	mov	eax, 1
$LN1@stbi__tga_:
; Line 5740
	add	rsp, 88					; 00000058H
	ret	0
?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__tga_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_comp$ = 48
j$ = 52
i$ = 56
tga_width$ = 60
tga_height$ = 64
temp$1 = 68
temp$2 = 69
tga_palette_len$ = 72
tga_data$ = 80
tga_rgb16$ = 88
pal_idx$3 = 92
read_next_pixel$ = 96
tga_image_type$ = 100
tga_indexed$ = 104
raw_data$ = 108
RLE_count$ = 112
tga_inverted$ = 116
index1$4 = 120
index2$5 = 124
tga_palette$ = 128
tga_is_RLE$ = 136
tga_palette_bits$ = 140
tga_pixel$6 = 144
tv162 = 152
tv174 = 156
tv185 = 160
tv197 = 164
tv212 = 168
tv225 = 172
tv250 = 176
RLE_cmd$7 = 180
RLE_repeating$ = 184
tga_bits_per_pixel$ = 188
tv272 = 192
tga_y_origin$ = 196
tga_x_origin$ = 200
tga_palette_start$ = 204
tv134 = 208
tv140 = 212
tv155 = 216
row$8 = 220
tga_offset$ = 224
pal_entry$9 = 232
tga_row$10 = 240
s$ = 272
x$ = 280
y$ = 288
comp$ = 296
req_comp$ = 304
ri$ = 312
?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__tga_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5794
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
; Line 5796
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_offset$[rsp], eax
; Line 5797
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_indexed$[rsp], eax
; Line 5798
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5799
	mov	DWORD PTR tga_is_RLE$[rsp], 0
; Line 5800
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5801
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_palette_len$[rsp], eax
; Line 5802
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_palette_bits$[rsp], eax
; Line 5803
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_x_origin$[rsp], eax
; Line 5804
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_y_origin$[rsp], eax
; Line 5805
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_width$[rsp], eax
; Line 5806
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_height$[rsp], eax
; Line 5807
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5808
	mov	DWORD PTR tga_rgb16$[rsp], 0
; Line 5809
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5813
	mov	QWORD PTR tga_palette$[rsp], 0
; Line 5815
	lea	rax, QWORD PTR raw_data$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
; Line 5816
	mov	DWORD PTR RLE_count$[rsp], 0
; Line 5817
	mov	DWORD PTR RLE_repeating$[rsp], 0
; Line 5818
	mov	DWORD PTR read_next_pixel$[rsp], 1
; Line 5823
	cmp	DWORD PTR tga_height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN29@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG100890
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__tga_
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN63@stbi__tga_
$LN62@stbi__tga_:
	mov	DWORD PTR tv134[rsp], 0
$LN63@stbi__tga_:
	movsxd	rax, DWORD PTR tv134[rsp]
	jmp	$LN1@stbi__tga_
$LN29@stbi__tga_:
; Line 5824
	cmp	DWORD PTR tga_width$[rsp], 16777216	; 01000000H
	jle	SHORT $LN30@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG100892
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__tga_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN65@stbi__tga_
$LN64@stbi__tga_:
	mov	DWORD PTR tv140[rsp], 0
$LN65@stbi__tga_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__tga_
$LN30@stbi__tga_:
; Line 5827
	cmp	DWORD PTR tga_image_type$[rsp], 8
	jl	SHORT $LN31@stbi__tga_
; Line 5829
	mov	eax, DWORD PTR tga_image_type$[rsp]
	sub	eax, 8
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5830
	mov	DWORD PTR tga_is_RLE$[rsp], 1
$LN31@stbi__tga_:
; Line 5832
	mov	eax, DWORD PTR tga_inverted$[rsp]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5835
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	SHORT $LN32@stbi__tga_
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	xor	edx, edx
	mov	ecx, DWORD PTR tga_palette_bits$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
	jmp	SHORT $LN33@stbi__tga_
$LN32@stbi__tga_:
; Line 5836
	cmp	DWORD PTR tga_image_type$[rsp], 3
	jne	SHORT $LN66@stbi__tga_
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN67@stbi__tga_
$LN66@stbi__tga_:
	mov	DWORD PTR tv155[rsp], 0
$LN67@stbi__tga_:
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	mov	edx, DWORD PTR tv155[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN33@stbi__tga_:
; Line 5838
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN34@stbi__tga_
; Line 5839
	lea	rcx, OFFSET FLAT:$SG100897
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__tga_
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN69@stbi__tga_
$LN68@stbi__tga_:
	mov	DWORD PTR tv162[rsp], 0
$LN69@stbi__tga_:
	movsxd	rax, DWORD PTR tv162[rsp]
	jmp	$LN1@stbi__tga_
$LN34@stbi__tga_:
; Line 5842
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5843
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5844
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN35@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN35@stbi__tga_:
; Line 5846
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN36@stbi__tga_
; Line 5847
	lea	rcx, OFFSET FLAT:$SG100900
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__tga_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN71@stbi__tga_
$LN70@stbi__tga_:
	mov	DWORD PTR tv174[rsp], 0
$LN71@stbi__tga_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__tga_
$LN36@stbi__tga_:
; Line 5849
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR tga_data$[rsp], rax
; Line 5850
	cmp	QWORD PTR tga_data$[rsp], 0
	jne	SHORT $LN37@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG100902
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__tga_
	mov	DWORD PTR tv185[rsp], 0
	jmp	SHORT $LN73@stbi__tga_
$LN72@stbi__tga_:
	mov	DWORD PTR tv185[rsp], 0
$LN73@stbi__tga_:
	movsxd	rax, DWORD PTR tv185[rsp]
	jmp	$LN1@stbi__tga_
$LN37@stbi__tga_:
; Line 5853
	mov	edx, DWORD PTR tga_offset$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5855
	cmp	DWORD PTR tga_indexed$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN38@stbi__tga_
; Line 5856
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__tga_
$LN2@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__tga_:
	mov	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__tga_
; Line 5857
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	SHORT $LN74@stbi__tga_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	mov	DWORD PTR tv197[rsp], eax
	jmp	SHORT $LN75@stbi__tga_
$LN74@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv197[rsp], eax
$LN75@stbi__tga_:
	mov	eax, DWORD PTR tv197[rsp]
	mov	DWORD PTR row$8[rsp], eax
; Line 5858
	mov	eax, DWORD PTR row$8[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR tga_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_row$10[rsp], rax
; Line 5859
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_row$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 5860
	jmp	$LN2@stbi__tga_
$LN3@stbi__tga_:
; Line 5861
	jmp	$LN39@stbi__tga_
$LN38@stbi__tga_:
; Line 5863
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN40@stbi__tga_
; Line 5865
	cmp	DWORD PTR tga_palette_len$[rsp], 0
	jne	SHORT $LN41@stbi__tga_
; Line 5866
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	QWORD PTR __imp_free
; Line 5867
	lea	rcx, OFFSET FLAT:$SG100907
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__tga_
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN77@stbi__tga_
$LN76@stbi__tga_:
	mov	DWORD PTR tv212[rsp], 0
$LN77@stbi__tga_:
	movsxd	rax, DWORD PTR tv212[rsp]
	jmp	$LN1@stbi__tga_
$LN41@stbi__tga_:
; Line 5871
	mov	edx, DWORD PTR tga_palette_start$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5873
	xor	r8d, r8d
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	ecx, DWORD PTR tga_palette_len$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR tga_palette$[rsp], rax
; Line 5874
	cmp	QWORD PTR tga_palette$[rsp], 0
	jne	SHORT $LN42@stbi__tga_
; Line 5875
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	QWORD PTR __imp_free
; Line 5876
	lea	rcx, OFFSET FLAT:$SG100909
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__tga_
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN79@stbi__tga_
$LN78@stbi__tga_:
	mov	DWORD PTR tv225[rsp], 0
$LN79@stbi__tga_:
	movsxd	rax, DWORD PTR tv225[rsp]
	jmp	$LN1@stbi__tga_
$LN42@stbi__tga_:
; Line 5878
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	$LN43@stbi__tga_
; Line 5879
	mov	rax, QWORD PTR tga_palette$[rsp]
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5880
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN80@stbi__tga_
	mov	r8d, 5880				; 000016f8H
	lea	rdx, OFFSET FLAT:$SG100912
	lea	rcx, OFFSET FLAT:$SG100913
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN80@stbi__tga_:
; Line 5881
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__tga_
$LN5@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__tga_
; Line 5882
	mov	rdx, QWORD PTR pal_entry$9[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ; stbi__tga_read_rgb16
; Line 5883
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR pal_entry$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5884
	jmp	SHORT $LN5@stbi__tga_
$LN6@stbi__tga_:
; Line 5885
	jmp	SHORT $LN44@stbi__tga_
$LN43@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_palette$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
	test	eax, eax
	jne	SHORT $LN45@stbi__tga_
; Line 5886
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	QWORD PTR __imp_free
; Line 5887
	mov	rcx, QWORD PTR tga_palette$[rsp]
	call	QWORD PTR __imp_free
; Line 5888
	lea	rcx, OFFSET FLAT:$SG100915
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__tga_
	mov	DWORD PTR tv250[rsp], 0
	jmp	SHORT $LN82@stbi__tga_
$LN81@stbi__tga_:
	mov	DWORD PTR tv250[rsp], 0
$LN82@stbi__tga_:
	movsxd	rax, DWORD PTR tv250[rsp]
	jmp	$LN1@stbi__tga_
$LN45@stbi__tga_:
$LN44@stbi__tga_:
$LN40@stbi__tga_:
; Line 5892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__tga_
$LN8@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__tga_
; Line 5895
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	je	SHORT $LN46@stbi__tga_
; Line 5897
	cmp	DWORD PTR RLE_count$[rsp], 0
	jne	SHORT $LN48@stbi__tga_
; Line 5900
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR RLE_cmd$7[rsp], eax
; Line 5901
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	and	eax, 127				; 0000007fH
	inc	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5902
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	sar	eax, 7
	mov	DWORD PTR RLE_repeating$[rsp], eax
; Line 5903
	mov	DWORD PTR read_next_pixel$[rsp], 1
	jmp	SHORT $LN49@stbi__tga_
$LN48@stbi__tga_:
; Line 5904
	cmp	DWORD PTR RLE_repeating$[rsp], 0
	jne	SHORT $LN50@stbi__tga_
; Line 5906
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN50@stbi__tga_:
$LN49@stbi__tga_:
; Line 5908
	jmp	SHORT $LN47@stbi__tga_
$LN46@stbi__tga_:
; Line 5910
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN47@stbi__tga_:
; Line 5913
	cmp	DWORD PTR read_next_pixel$[rsp], 0
	je	$LN51@stbi__tga_
; Line 5916
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN52@stbi__tga_
; Line 5919
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	jne	SHORT $LN83@stbi__tga_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv272[rsp], eax
	jmp	SHORT $LN84@stbi__tga_
$LN83@stbi__tga_:
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tv272[rsp], eax
$LN84@stbi__tga_:
	mov	eax, DWORD PTR tv272[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5920
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR pal_idx$3[rsp], eax
	jl	SHORT $LN54@stbi__tga_
; Line 5922
	mov	DWORD PTR pal_idx$3[rsp], 0
$LN54@stbi__tga_:
; Line 5924
	mov	eax, DWORD PTR pal_idx$3[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5925
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__tga_
$LN11@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN12@stbi__tga_
; Line 5926
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR pal_idx$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR tga_palette$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5927
	jmp	SHORT $LN11@stbi__tga_
$LN12@stbi__tga_:
; Line 5928
	jmp	SHORT $LN53@stbi__tga_
$LN52@stbi__tga_:
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	SHORT $LN55@stbi__tga_
; Line 5929
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN85@stbi__tga_
	mov	r8d, 5929				; 00001729H
	lea	rdx, OFFSET FLAT:$SG100927
	lea	rcx, OFFSET FLAT:$SG100928
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN85@stbi__tga_:
; Line 5930
	lea	rdx, QWORD PTR raw_data$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ; stbi__tga_read_rgb16
; Line 5931
	jmp	SHORT $LN56@stbi__tga_
$LN55@stbi__tga_:
; Line 5933
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN16@stbi__tga_
$LN14@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN16@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN15@stbi__tga_
; Line 5934
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5935
	jmp	SHORT $LN14@stbi__tga_
$LN15@stbi__tga_:
$LN56@stbi__tga_:
$LN53@stbi__tga_:
; Line 5938
	mov	DWORD PTR read_next_pixel$[rsp], 0
$LN51@stbi__tga_:
; Line 5942
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN17@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN18@stbi__tga_
; Line 5943
	movsxd	rax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR tga_comp$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR raw_data$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN17@stbi__tga_
$LN18@stbi__tga_:
; Line 5946
	mov	eax, DWORD PTR RLE_count$[rsp]
	dec	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5947
	jmp	$LN8@stbi__tga_
$LN9@stbi__tga_:
; Line 5949
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	$LN57@stbi__tga_
; Line 5951
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN22@stbi__tga_
$LN20@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN22@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	shl	eax, 1
	cmp	eax, DWORD PTR tga_height$[rsp]
	jge	$LN21@stbi__tga_
; Line 5953
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index1$4[rsp], eax
; Line 5954
	mov	eax, DWORD PTR tga_height$[rsp]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index2$5[rsp], eax
; Line 5955
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN25@stbi__tga_
$LN23@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__tga_:
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN24@stbi__tga_
; Line 5957
	movsxd	rax, DWORD PTR index1$4[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$2[rsp], al
; Line 5958
	movsxd	rax, DWORD PTR index2$5[rsp]
	movsxd	rcx, DWORD PTR index1$4[rsp]
	mov	rdx, QWORD PTR tga_data$[rsp]
	mov	rdi, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5959
	movsxd	rax, DWORD PTR index2$5[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	edx, BYTE PTR temp$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5960
	mov	eax, DWORD PTR index1$4[rsp]
	inc	eax
	mov	DWORD PTR index1$4[rsp], eax
; Line 5961
	mov	eax, DWORD PTR index2$5[rsp]
	inc	eax
	mov	DWORD PTR index2$5[rsp], eax
; Line 5962
	jmp	SHORT $LN23@stbi__tga_
$LN24@stbi__tga_:
; Line 5963
	jmp	$LN20@stbi__tga_
$LN21@stbi__tga_:
$LN57@stbi__tga_:
; Line 5966
	cmp	QWORD PTR tga_palette$[rsp], 0
	je	SHORT $LN58@stbi__tga_
; Line 5968
	mov	rcx, QWORD PTR tga_palette$[rsp]
	call	QWORD PTR __imp_free
$LN58@stbi__tga_:
$LN39@stbi__tga_:
; Line 5973
	cmp	DWORD PTR tga_comp$[rsp], 3
	jl	$LN59@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN59@stbi__tga_
; Line 5975
	mov	rax, QWORD PTR tga_data$[rsp]
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5976
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__tga_
$LN26@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN27@stbi__tga_
; Line 5978
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$1[rsp], al
; Line 5979
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tga_pixel$6[rsp]
	mov	rdi, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5980
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	edx, BYTE PTR temp$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5981
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5982
	jmp	$LN26@stbi__tga_
$LN27@stbi__tga_:
$LN59@stbi__tga_:
; Line 5986
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN60@stbi__tga_
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN60@stbi__tga_
; Line 5987
	mov	eax, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tga_width$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR tga_data$[rsp], rax
$LN60@stbi__tga_:
; Line 5991
	mov	DWORD PTR tga_y_origin$[rsp], 0
	mov	eax, DWORD PTR tga_y_origin$[rsp]
	mov	DWORD PTR tga_x_origin$[rsp], eax
	mov	eax, DWORD PTR tga_x_origin$[rsp]
	mov	DWORD PTR tga_palette_bits$[rsp], eax
	mov	eax, DWORD PTR tga_palette_bits$[rsp]
	mov	DWORD PTR tga_palette_len$[rsp], eax
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5995
	mov	rax, QWORD PTR tga_data$[rsp]
$LN1@stbi__tga_:
; Line 5996
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__tga_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tga_color_type$ = 36
res$ = 40
s$ = 64
?stbi__tga_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__tga_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5743
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5744
	mov	DWORD PTR res$[rsp], 0
; Line 5746
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5747
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_color_type$[rsp], eax
; Line 5748
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
	jmp	$LN3@stbi__tga_
	jmp	$errorEnd$21
$LN2@stbi__tga_:
; Line 5749
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5750
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN4@stbi__tga_
; Line 5751
	cmp	DWORD PTR sz$[rsp], 1
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 9
	je	SHORT $LN6@stbi__tga_
	jmp	$LN7@stbi__tga_
	jmp	$errorEnd$21
$LN6@stbi__tga_:
; Line 5752
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5753
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5754
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN8@stbi__tga_
	jmp	$LN9@stbi__tga_
	jmp	$errorEnd$21
$LN8@stbi__tga_:
; Line 5755
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5756
	jmp	SHORT $LN5@stbi__tga_
$LN4@stbi__tga_:
; Line 5757
	cmp	DWORD PTR sz$[rsp], 2
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 3
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 10
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 11
	je	SHORT $LN10@stbi__tga_
	jmp	$LN11@stbi__tga_
	jmp	$errorEnd$21
$LN10@stbi__tga_:
; Line 5758
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN5@stbi__tga_:
; Line 5760
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN12@stbi__tga_
	jmp	SHORT $LN13@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN12@stbi__tga_:
; Line 5761
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN14@stbi__tga_
	jmp	SHORT $LN15@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN14@stbi__tga_:
; Line 5762
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5763
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN16@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN16@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN16@stbi__tga_
	jmp	SHORT $LN17@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN16@stbi__tga_:
; Line 5764
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN18@stbi__tga_
	jmp	SHORT $LN19@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN18@stbi__tga_:
; Line 5766
	mov	DWORD PTR res$[rsp], 1
$LN3@stbi__tga_:
$LN7@stbi__tga_:
$LN9@stbi__tga_:
$LN11@stbi__tga_:
$LN13@stbi__tga_:
$LN15@stbi__tga_:
$LN17@stbi__tga_:
$LN19@stbi__tga_:
$errorEnd$21:
; Line 5769
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5770
	mov	eax, DWORD PTR res$[rsp]
; Line 5771
	add	rsp, 56					; 00000038H
	ret	0
?stbi__tga_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__tga_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
p$ = 40
info$ = 48
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__bmp_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7258
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7262
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 7263
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ; stbi__bmp_parse_header
	mov	QWORD PTR p$[rsp], rax
; Line 7264
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi__bmp_
; Line 7265
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7266
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 7268
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__bmp_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN3@stbi__bmp_:
; Line 7269
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__bmp_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__bmp_:
; Line 7270
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__bmp_
; Line 7271
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN6@stbi__bmp_
	cmp	DWORD PTR info$[rsp+24], -16777216	; ff000000H
	jne	SHORT $LN6@stbi__bmp_
; Line 7272
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 7274
	cmp	DWORD PTR info$[rsp+24], 0
	je	SHORT $LN9@stbi__bmp_
	mov	DWORD PTR tv77[rsp], 4
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
	mov	DWORD PTR tv77[rsp], 3
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 7276
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 7277
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__bmp_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
z$1 = 52
z$2 = 56
j$ = 60
out$ = 64
target$ = 72
a$3 = 76
v$4 = 80
ma$ = 84
t$5 = 88
psize$ = 92
width$ = 96
mr$ = 100
mg$ = 104
mb$ = 108
bit_offset$6 = 112
easy$7 = 116
all_a$ = 120
v$8 = 124
pad$ = 128
color$9 = 132
rcount$10 = 136
gcount$11 = 140
bcount$12 = 144
acount$13 = 148
tv80 = 152
tv87 = 156
tv174 = 160
tv181 = 164
tv196 = 168
tv209 = 172
tv218 = 176
tv253 = 180
tv272 = 184
v$14 = 188
v2$15 = 192
tv381 = 196
tv442 = 200
tv472 = 204
tv504 = 208
tv521 = 212
rshift$16 = 216
gshift$17 = 220
bshift$18 = 224
ashift$19 = 228
tv561 = 232
a$20 = 236
tv70 = 240
flip_vertically$ = 244
bpp$21 = 248
p1$22 = 256
p2$23 = 264
info$ = 272
pal$ = 320
__$ArrayPad$ = 1344
s$ = 1376
x$ = 1384
y$ = 1392
comp$ = 1400
req_comp$ = 1408
ri$ = 1416
?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__bmp_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5468
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1368				; 00000558H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5470
	mov	DWORD PTR mr$[rsp], 0
	mov	DWORD PTR mg$[rsp], 0
	mov	DWORD PTR mb$[rsp], 0
	mov	DWORD PTR ma$[rsp], 0
; Line 5472
	mov	DWORD PTR psize$[rsp], 0
; Line 5477
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 5478
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ; stbi__bmp_parse_header
	test	rax, rax
	jne	SHORT $LN35@stbi__bmp_
; Line 5479
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN35@stbi__bmp_:
; Line 5481
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN93@stbi__bmp_
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN94@stbi__bmp_
$LN93@stbi__bmp_:
	mov	DWORD PTR tv70[rsp], 0
$LN94@stbi__bmp_:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR flip_vertically$[rsp], eax
; Line 5482
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	abs
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5484
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN36@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100648
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN95@stbi__bmp_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN96@stbi__bmp_
$LN95@stbi__bmp_:
	mov	DWORD PTR tv80[rsp], 0
$LN96@stbi__bmp_:
	movsxd	rax, DWORD PTR tv80[rsp]
	jmp	$LN1@stbi__bmp_
$LN36@stbi__bmp_:
; Line 5485
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN37@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100650
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN97@stbi__bmp_
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN98@stbi__bmp_
$LN97@stbi__bmp_:
	mov	DWORD PTR tv87[rsp], 0
$LN98@stbi__bmp_:
	movsxd	rax, DWORD PTR tv87[rsp]
	jmp	$LN1@stbi__bmp_
$LN37@stbi__bmp_:
; Line 5487
	mov	eax, DWORD PTR info$[rsp+12]
	mov	DWORD PTR mr$[rsp], eax
; Line 5488
	mov	eax, DWORD PTR info$[rsp+16]
	mov	DWORD PTR mg$[rsp], eax
; Line 5489
	mov	eax, DWORD PTR info$[rsp+20]
	mov	DWORD PTR mb$[rsp], eax
; Line 5490
	mov	eax, DWORD PTR info$[rsp+24]
	mov	DWORD PTR ma$[rsp], eax
; Line 5491
	mov	eax, DWORD PTR info$[rsp+28]
	mov	DWORD PTR all_a$[rsp], eax
; Line 5493
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN38@stbi__bmp_
; Line 5494
	cmp	DWORD PTR info$[rsp], 24
	jge	SHORT $LN40@stbi__bmp_
; Line 5495
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 24
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR psize$[rsp], eax
$LN40@stbi__bmp_:
; Line 5496
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
; Line 5497
	cmp	DWORD PTR info$[rsp], 16
	jge	SHORT $LN41@stbi__bmp_
; Line 5498
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	sar	eax, 2
	mov	DWORD PTR psize$[rsp], eax
$LN41@stbi__bmp_:
$LN39@stbi__bmp_:
; Line 5500
	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN42@stbi__bmp_
; Line 5501
	movsxd	rax, DWORD PTR info$[rsp+4]
	mov	rcx, QWORD PTR s$[rsp]
	movsxd	rcx, DWORD PTR [rcx+184]
	mov	rdx, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [r8+208]
	mov	rdx, QWORD PTR [rdx+192]
	sub	rdx, r8
	add	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN43@stbi__bmp_
; Line 5502
	lea	rcx, OFFSET FLAT:$SG100657
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN99@stbi__bmp_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN100@stbi__bmp_
$LN99@stbi__bmp_:
	mov	DWORD PTR tv174[rsp], 0
$LN100@stbi__bmp_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__bmp_
$LN43@stbi__bmp_:
$LN42@stbi__bmp_:
; Line 5506
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN44@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN44@stbi__bmp_
; Line 5507
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 3
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
; Line 5509
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN101@stbi__bmp_
	mov	DWORD PTR tv181[rsp], 4
	jmp	SHORT $LN102@stbi__bmp_
$LN101@stbi__bmp_:
	mov	DWORD PTR tv181[rsp], 3
$LN102@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv181[rsp]
	mov	DWORD PTR [rax+8], ecx
$LN45@stbi__bmp_:
; Line 5510
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN46@stbi__bmp_
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN46@stbi__bmp_
; Line 5511
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR target$[rsp], eax
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
; Line 5513
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR target$[rsp], eax
$LN47@stbi__bmp_:
; Line 5516
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN48@stbi__bmp_
; Line 5517
	lea	rcx, OFFSET FLAT:$SG100663
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN103@stbi__bmp_
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN104@stbi__bmp_
$LN103@stbi__bmp_:
	mov	DWORD PTR tv196[rsp], 0
$LN104@stbi__bmp_:
	movsxd	rax, DWORD PTR tv196[rsp]
	jmp	$LN1@stbi__bmp_
$LN48@stbi__bmp_:
; Line 5519
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 5520
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN49@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG100665
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN105@stbi__bmp_
	mov	DWORD PTR tv209[rsp], 0
	jmp	SHORT $LN106@stbi__bmp_
$LN105@stbi__bmp_:
	mov	DWORD PTR tv209[rsp], 0
$LN106@stbi__bmp_:
	movsxd	rax, DWORD PTR tv209[rsp]
	jmp	$LN1@stbi__bmp_
$LN49@stbi__bmp_:
; Line 5521
	cmp	DWORD PTR info$[rsp], 16
	jge	$LN50@stbi__bmp_
; Line 5522
	mov	DWORD PTR z$1[rsp], 0
; Line 5523
	cmp	DWORD PTR psize$[rsp], 0
	je	SHORT $LN53@stbi__bmp_
	cmp	DWORD PTR psize$[rsp], 256		; 00000100H
	jle	SHORT $LN52@stbi__bmp_
$LN53@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG100670
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN107@stbi__bmp_
	mov	DWORD PTR tv218[rsp], 0
	jmp	SHORT $LN108@stbi__bmp_
$LN107@stbi__bmp_:
	mov	DWORD PTR tv218[rsp], 0
$LN108@stbi__bmp_:
	movsxd	rax, DWORD PTR tv218[rsp]
	jmp	$LN1@stbi__bmp_
$LN52@stbi__bmp_:
; Line 5524
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__bmp_:
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__bmp_
; Line 5525
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 5526
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 5527
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 5528
	cmp	DWORD PTR info$[rsp+8], 12
	je	SHORT $LN54@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
$LN54@stbi__bmp_:
; Line 5529
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 5530
	jmp	$LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5531
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN109@stbi__bmp_
	mov	DWORD PTR tv253[rsp], 3
	jmp	SHORT $LN110@stbi__bmp_
$LN109@stbi__bmp_:
	mov	DWORD PTR tv253[rsp], 4
$LN110@stbi__bmp_:
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	ecx, DWORD PTR psize$[rsp]
	imul	ecx, DWORD PTR tv253[rsp]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5532
	cmp	DWORD PTR info$[rsp], 1
	jne	SHORT $LN55@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN56@stbi__bmp_
$LN55@stbi__bmp_:
; Line 5533
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN57@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	shr	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN58@stbi__bmp_
$LN57@stbi__bmp_:
; Line 5534
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN59@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN60@stbi__bmp_
$LN59@stbi__bmp_:
; Line 5535
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG100678
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN111@stbi__bmp_
	mov	DWORD PTR tv272[rsp], 0
	jmp	SHORT $LN112@stbi__bmp_
$LN111@stbi__bmp_:
	mov	DWORD PTR tv272[rsp], 0
$LN112@stbi__bmp_:
	movsxd	rax, DWORD PTR tv272[rsp]
	jmp	$LN1@stbi__bmp_
$LN60@stbi__bmp_:
$LN58@stbi__bmp_:
$LN56@stbi__bmp_:
; Line 5536
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5537
	cmp	DWORD PTR info$[rsp], 1
	jne	$LN61@stbi__bmp_
; Line 5538
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__bmp_
$LN5@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbi__bmp_
; Line 5539
	mov	DWORD PTR bit_offset$6[rsp], 7
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
; Line 5540
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__bmp_
$LN8@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__bmp_
; Line 5541
	mov	eax, DWORD PTR bit_offset$6[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$14[rsp]
	sar	eax, cl
	and	eax, 1
	mov	DWORD PTR color$9[rsp], eax
; Line 5542
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5543
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5544
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5545
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN63@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN63@stbi__bmp_:
; Line 5546
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN64@stbi__bmp_
	jmp	SHORT $LN9@stbi__bmp_
$LN64@stbi__bmp_:
; Line 5547
	mov	eax, DWORD PTR bit_offset$6[rsp]
	dec	eax
	mov	DWORD PTR bit_offset$6[rsp], eax
	cmp	DWORD PTR bit_offset$6[rsp], 0
	jge	SHORT $LN65@stbi__bmp_
; Line 5548
	mov	DWORD PTR bit_offset$6[rsp], 7
; Line 5549
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
$LN65@stbi__bmp_:
; Line 5551
	jmp	$LN8@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5552
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5553
	jmp	$LN5@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5554
	jmp	$LN62@stbi__bmp_
$LN61@stbi__bmp_:
; Line 5555
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__bmp_
$LN11@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stbi__bmp_
; Line 5556
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__bmp_
$LN14@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__bmp_
; Line 5557
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$4[rsp], eax
	mov	DWORD PTR v2$15[rsp], 0
; Line 5558
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN66@stbi__bmp_
; Line 5559
	mov	eax, DWORD PTR v$4[rsp]
	and	eax, 15
	mov	DWORD PTR v2$15[rsp], eax
; Line 5560
	mov	eax, DWORD PTR v$4[rsp]
	sar	eax, 4
	mov	DWORD PTR v$4[rsp], eax
$LN66@stbi__bmp_:
; Line 5562
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5563
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5564
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5565
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN67@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN67@stbi__bmp_:
; Line 5566
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN68@stbi__bmp_
	jmp	$LN15@stbi__bmp_
$LN68@stbi__bmp_:
; Line 5567
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN113@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv381[rsp], eax
	jmp	SHORT $LN114@stbi__bmp_
$LN113@stbi__bmp_:
	mov	eax, DWORD PTR v2$15[rsp]
	mov	DWORD PTR tv381[rsp], eax
$LN114@stbi__bmp_:
	mov	eax, DWORD PTR tv381[rsp]
	mov	DWORD PTR v$4[rsp], eax
; Line 5568
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5569
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5570
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5571
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN69@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN69@stbi__bmp_:
; Line 5572
	jmp	$LN14@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5573
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5574
	jmp	$LN11@stbi__bmp_
$LN12@stbi__bmp_:
$LN62@stbi__bmp_:
; Line 5576
	jmp	$LN51@stbi__bmp_
$LN50@stbi__bmp_:
; Line 5577
	mov	DWORD PTR rshift$16[rsp], 0
	mov	DWORD PTR gshift$17[rsp], 0
	mov	DWORD PTR bshift$18[rsp], 0
	mov	DWORD PTR ashift$19[rsp], 0
	mov	DWORD PTR rcount$10[rsp], 0
	mov	DWORD PTR gcount$11[rsp], 0
	mov	DWORD PTR bcount$12[rsp], 0
	mov	DWORD PTR acount$13[rsp], 0
; Line 5578
	mov	DWORD PTR z$2[rsp], 0
; Line 5579
	mov	DWORD PTR easy$7[rsp], 0
; Line 5580
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5581
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN70@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax], 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN71@stbi__bmp_
$LN70@stbi__bmp_:
; Line 5582
	cmp	DWORD PTR info$[rsp], 16
	jne	SHORT $LN72@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN73@stbi__bmp_
$LN72@stbi__bmp_:
; Line 5583
	mov	DWORD PTR width$[rsp], 0
$LN73@stbi__bmp_:
$LN71@stbi__bmp_:
; Line 5584
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5585
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN74@stbi__bmp_
; Line 5586
	mov	DWORD PTR easy$7[rsp], 1
	jmp	SHORT $LN75@stbi__bmp_
$LN74@stbi__bmp_:
; Line 5587
	cmp	DWORD PTR info$[rsp], 32		; 00000020H
	jne	SHORT $LN76@stbi__bmp_
; Line 5588
	cmp	DWORD PTR mb$[rsp], 255			; 000000ffH
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 65280		; 0000ff00H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mr$[rsp], 16711680		; 00ff0000H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN77@stbi__bmp_
; Line 5589
	mov	DWORD PTR easy$7[rsp], 2
$LN77@stbi__bmp_:
$LN76@stbi__bmp_:
$LN75@stbi__bmp_:
; Line 5591
	cmp	DWORD PTR easy$7[rsp], 0
	jne	$LN78@stbi__bmp_
; Line 5592
	cmp	DWORD PTR mr$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mb$[rsp], 0
	jne	SHORT $LN79@stbi__bmp_
$LN80@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG100699
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN115@stbi__bmp_
	mov	DWORD PTR tv442[rsp], 0
	jmp	SHORT $LN116@stbi__bmp_
$LN115@stbi__bmp_:
	mov	DWORD PTR tv442[rsp], 0
$LN116@stbi__bmp_:
	movsxd	rax, DWORD PTR tv442[rsp]
	jmp	$LN1@stbi__bmp_
$LN79@stbi__bmp_:
; Line 5594
	mov	ecx, DWORD PTR mr$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR rshift$16[rsp], eax
	mov	ecx, DWORD PTR mr$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR rcount$10[rsp], eax
; Line 5595
	mov	ecx, DWORD PTR mg$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR gshift$17[rsp], eax
	mov	ecx, DWORD PTR mg$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR gcount$11[rsp], eax
; Line 5596
	mov	ecx, DWORD PTR mb$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR bshift$18[rsp], eax
	mov	ecx, DWORD PTR mb$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR bcount$12[rsp], eax
; Line 5597
	mov	ecx, DWORD PTR ma$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR ashift$19[rsp], eax
	mov	ecx, DWORD PTR ma$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR acount$13[rsp], eax
; Line 5598
	cmp	DWORD PTR rcount$10[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR gcount$11[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR bcount$12[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR acount$13[rsp], 8
	jle	SHORT $LN81@stbi__bmp_
$LN82@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG100702
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN117@stbi__bmp_
	mov	DWORD PTR tv472[rsp], 0
	jmp	SHORT $LN118@stbi__bmp_
$LN117@stbi__bmp_:
	mov	DWORD PTR tv472[rsp], 0
$LN118@stbi__bmp_:
	movsxd	rax, DWORD PTR tv472[rsp]
	jmp	$LN1@stbi__bmp_
$LN81@stbi__bmp_:
$LN78@stbi__bmp_:
; Line 5600
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__bmp_
$LN17@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN18@stbi__bmp_
; Line 5601
	cmp	DWORD PTR easy$7[rsp], 0
	je	$LN83@stbi__bmp_
; Line 5602
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__bmp_
$LN20@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN21@stbi__bmp_
; Line 5604
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5605
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5606
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5607
	mov	eax, DWORD PTR z$2[rsp]
	add	eax, 3
	mov	DWORD PTR z$2[rsp], eax
; Line 5608
	cmp	DWORD PTR easy$7[rsp], 2
	jne	SHORT $LN119@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv504[rsp], eax
	jmp	SHORT $LN120@stbi__bmp_
$LN119@stbi__bmp_:
	mov	DWORD PTR tv504[rsp], 255		; 000000ffH
$LN120@stbi__bmp_:
	movzx	eax, BYTE PTR tv504[rsp]
	mov	BYTE PTR a$3[rsp], al
; Line 5609
	movzx	eax, BYTE PTR a$3[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5610
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN85@stbi__bmp_
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR a$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN85@stbi__bmp_:
; Line 5611
	jmp	$LN20@stbi__bmp_
$LN21@stbi__bmp_:
; Line 5612
	jmp	$LN84@stbi__bmp_
$LN83@stbi__bmp_:
; Line 5613
	mov	eax, DWORD PTR info$[rsp]
	mov	DWORD PTR bpp$21[rsp], eax
; Line 5614
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__bmp_
$LN23@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN24@stbi__bmp_
; Line 5615
	cmp	DWORD PTR bpp$21[rsp], 16
	jne	SHORT $LN121@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tv521[rsp], eax
	jmp	SHORT $LN122@stbi__bmp_
$LN121@stbi__bmp_:
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR tv521[rsp], eax
$LN122@stbi__bmp_:
	mov	eax, DWORD PTR tv521[rsp]
	mov	DWORD PTR v$8[rsp], eax
; Line 5617
	mov	eax, DWORD PTR mr$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR rcount$10[rsp]
	mov	edx, DWORD PTR rshift$16[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5618
	mov	eax, DWORD PTR mg$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR gcount$11[rsp]
	mov	edx, DWORD PTR gshift$17[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5619
	mov	eax, DWORD PTR mb$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR bcount$12[rsp]
	mov	edx, DWORD PTR bshift$18[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5620
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN123@stbi__bmp_
	mov	eax, DWORD PTR ma$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR acount$13[rsp]
	mov	edx, DWORD PTR ashift$19[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	mov	DWORD PTR tv561[rsp], eax
	jmp	SHORT $LN124@stbi__bmp_
$LN123@stbi__bmp_:
	mov	DWORD PTR tv561[rsp], 255		; 000000ffH
$LN124@stbi__bmp_:
	mov	eax, DWORD PTR tv561[rsp]
	mov	DWORD PTR a$20[rsp], eax
; Line 5621
	mov	eax, DWORD PTR a$20[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5622
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN86@stbi__bmp_
	mov	eax, DWORD PTR a$20[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN86@stbi__bmp_:
; Line 5623
	jmp	$LN23@stbi__bmp_
$LN24@stbi__bmp_:
$LN84@stbi__bmp_:
; Line 5625
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5626
	jmp	$LN17@stbi__bmp_
$LN18@stbi__bmp_:
$LN51@stbi__bmp_:
; Line 5630
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN87@stbi__bmp_
	cmp	DWORD PTR all_a$[rsp], 0
	jne	SHORT $LN87@stbi__bmp_
; Line 5631
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN28@stbi__bmp_
$LN26@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__bmp_:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN27@stbi__bmp_
; Line 5632
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN26@stbi__bmp_
$LN27@stbi__bmp_:
$LN87@stbi__bmp_:
; Line 5634
	cmp	DWORD PTR flip_vertically$[rsp], 0
	je	$LN88@stbi__bmp_
; Line 5636
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN31@stbi__bmp_
$LN29@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN31@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sar	eax, 1
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN30@stbi__bmp_
; Line 5637
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p1$22[rsp], rax
; Line 5638
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx]
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p2$23[rsp], rax
; Line 5639
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi__bmp_
$LN32@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi__bmp_
; Line 5640
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p1$22[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p1$22[rsp]
	mov	r8, QWORD PTR p2$23[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p2$23[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5641
	jmp	SHORT $LN32@stbi__bmp_
$LN33@stbi__bmp_:
; Line 5642
	jmp	$LN29@stbi__bmp_
$LN30@stbi__bmp_:
$LN88@stbi__bmp_:
; Line 5645
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN89@stbi__bmp_
	mov	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN89@stbi__bmp_
; Line 5646
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR target$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 5647
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN90@stbi__bmp_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__bmp_
$LN90@stbi__bmp_:
$LN89@stbi__bmp_:
; Line 5650
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 5651
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 5652
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN91@stbi__bmp_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN91@stbi__bmp_:
; Line 5653
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__bmp_:
; Line 5654
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1368				; 00000558H
	ret	0
?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__bmp_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__bmp_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__bmp_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5298
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5299
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z ; stbi__bmp_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 5300
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5301
	mov	eax, DWORD PTR r$[rsp]
; Line 5302
	add	rsp, 56					; 00000038H
	ret	0
?stbi__bmp_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__bmp_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
?stbi__png_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__png_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5266
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5268
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5269
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ; stbi__png_info_raw
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5270
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5271
	cmp	DWORD PTR p$[rsp+32], 16
	je	SHORT $LN3@stbi__png_
; Line 5272
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN3@stbi__png_:
; Line 5275
	mov	eax, 1
$LN1@stbi__png_:
; Line 5276
	add	rsp, 88					; 00000058H
	ret	0
?stbi__png_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__png_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__png_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5259
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5261
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5262
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ; stbi__png_info_raw
; Line 5263
	add	rsp, 88					; 00000058H
	ret	0
?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__png_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__png_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5232
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5234
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5235
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__do_png
; Line 5236
	add	rsp, 104				; 00000068H
	ret	0
?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__png_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__png_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__png_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5239
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5241
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ; stbi__check_png_header
	mov	DWORD PTR r$[rsp], eax
; Line 5242
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5243
	mov	eax, DWORD PTR r$[rsp]
; Line 5244
	add	rsp, 56					; 00000038H
	ret	0
?stbi__png_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__png_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
j$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__jpeg_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4013
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4015
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 4016
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG99294
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4017
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4018
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z ; stbi__jpeg_info_raw
	mov	DWORD PTR result$[rsp], eax
; Line 4019
	mov	rcx, QWORD PTR j$[rsp]
	call	QWORD PTR __imp_free
; Line 4020
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 4021
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__jpeg_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
j$ = 56
result$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__jpeg_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3975
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3977
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3978
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG99263
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi__jpeg
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
	mov	DWORD PTR tv70[rsp], 0
$LN5@stbi__jpeg:
	movsxd	rax, DWORD PTR tv70[rsp]
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3980
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3981
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__setup_jpeg
; Line 3982
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z ; load_jpeg_image
	mov	QWORD PTR result$[rsp], rax
; Line 3983
	mov	rcx, QWORD PTR j$[rsp]
	call	QWORD PTR __imp_free
; Line 3984
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 3985
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__jpeg_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
j$ = 40
s$ = 64
?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__jpeg_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3988
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3990
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3991
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG99272
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3992
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3993
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__setup_jpeg
; Line 3994
	mov	edx, 1
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	mov	DWORD PTR r$[rsp], eax
; Line 3995
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 3996
	mov	rcx, QWORD PTR j$[rsp]
	call	QWORD PTR __imp_free
; Line 3997
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__jpeg:
; Line 3998
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__jpeg_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
?stbi__rewind@@YAXPEAUstbi__context@@@Z PROC		; stbi__rewind
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 884
	mov	QWORD PTR [rsp+8], rcx
; Line 888
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	QWORD PTR [rax+192], rcx
; Line 889
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rax+200], rcx
; Line 890
	ret	0
?stbi__rewind@@YAXPEAUstbi__context@@@Z ENDP		; stbi__rewind
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
f$ = 56
?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z PROC ; stbi__start_file
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 875
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 876
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__stdio_callbacks@@3Ustbi_io_callbacks@@A
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 877
	add	rsp, 40					; 00000028H
	ret	0
?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ENDP ; stbi__start_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
user$ = 64
?stbi__stdio_eof@@YAHPEAX@Z PROC			; stbi__stdio_eof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 863
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 864
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_feof
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_ferror
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@stbi__stdi
$LN3@stbi__stdi:
	mov	DWORD PTR tv70[rsp], 1
$LN4@stbi__stdi:
	mov	eax, DWORD PTR tv70[rsp]
; Line 865
	add	rsp, 56					; 00000038H
	ret	0
?stbi__stdio_eof@@YAHPEAX@Z ENDP			; stbi__stdio_eof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ch$ = 32
user$ = 64
n$ = 72
?stbi__stdio_skip@@YAXPEAXH@Z PROC			; stbi__stdio_skip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 853
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 855
	mov	r8d, 1
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_fseek
; Line 856
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_fgetc
	mov	DWORD PTR ch$[rsp], eax
; Line 857
	cmp	DWORD PTR ch$[rsp], -1
	je	SHORT $LN2@stbi__stdi
; Line 858
	mov	rdx, QWORD PTR user$[rsp]
	mov	ecx, DWORD PTR ch$[rsp]
	call	QWORD PTR __imp_ungetc
$LN2@stbi__stdi:
; Line 860
	add	rsp, 56					; 00000038H
	ret	0
?stbi__stdio_skip@@YAXPEAXH@Z ENDP			; stbi__stdio_skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
user$ = 48
data$ = 56
size$ = 64
?stbi__stdio_read@@YAHPEAXPEADH@Z PROC			; stbi__stdio_read
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 848
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 849
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR user$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_fread
; Line 850
	add	rsp, 40					; 00000028H
	ret	0
?stbi__stdio_read@@YAHPEAXPEADH@Z ENDP			; stbi__stdio_read
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
s$ = 80
c$ = 88
user$ = 96
?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z PROC ; stbi__start_callbacks
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 834
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 835
	mov	rax, QWORD PTR s$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR c$[rsp]
	mov	ecx, 24
	rep movsb
; Line 836
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 837
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+52], 128			; 00000080H
; Line 838
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 1
; Line 839
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 840
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv72[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 841
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ; stbi__refill_buffer
; Line 842
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+216], rcx
; Line 843
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ENDP ; stbi__start_callbacks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 32
buffer$ = 40
len$ = 48
?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z PROC	; stbi__start_mem
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 824
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 825
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 826
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 827
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 828
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 829
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv73[rsp], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+216], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+200], rcx
; Line 830
	add	rsp, 24
	ret	0
?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ENDP	; stbi__start_mem
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
tv74 = 40
s$ = 64
?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z PROC	; stbi__refill_buffer
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1578
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1579
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+52]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv74[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 1580
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	rax, QWORD PTR [rax+192]
	sub	rax, rcx
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+184]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+184], eax
; Line 1581
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__refi
; Line 1584
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 1585
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1586
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 57					; 00000039H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
; Line 1587
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	BYTE PTR [rax], 0
; Line 1588
	jmp	SHORT $LN3@stbi__refi
$LN2@stbi__refi:
; Line 1589
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1590
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	lea	rax, QWORD PTR [rcx+rax+56]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
$LN3@stbi__refi:
; Line 1592
	add	rsp, 56					; 00000038H
	ret	0
?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ENDP	; stbi__refill_buffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
info3$ = 36
?stbi__sse2_available@@YAHXZ PROC			; stbi__sse2_available
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 752
	sub	rsp, 56					; 00000038H
; Line 753
	call	?stbi__cpuid3@@YAHXZ			; stbi__cpuid3
	mov	DWORD PTR info3$[rsp], eax
; Line 754
	mov	eax, DWORD PTR info3$[rsp]
	sar	eax, 26
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@stbi__sse2
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__sse2
$LN3@stbi__sse2:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__sse2:
	mov	eax, DWORD PTR tv68[rsp]
; Line 755
	add	rsp, 56					; 00000038H
	ret	0
?stbi__sse2_available@@YAHXZ ENDP			; stbi__sse2_available
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 0
__$ArrayPad$ = 16
?stbi__cpuid3@@YAHXZ PROC				; stbi__cpuid3
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 730
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 732
	mov	eax, 1
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR info$[rsp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx
; Line 733
	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR info$[rsp+rax]
; Line 734
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?stbi__cpuid3@@YAHXZ ENDP				; stbi__cpuid3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_noheader_buffer PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4507
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4509
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4510
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4511
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4512
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4514
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4515
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_noheader_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
outlen$ = 4208
stbi_zlib_decode_noheader_malloc PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4491
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4493
	mov	ecx, 16384				; 00004000H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4494
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4495
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4496
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4497
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, 16384				; 00004000H
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4498
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4499
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4500
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4501
	mov	rcx, QWORD PTR a$[rsp+32]
	call	QWORD PTR __imp_free
; Line 4502
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4504
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_noheader_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_buffer PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4480
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4482
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4483
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4484
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4485
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4487
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
len$ = 56
outlen$ = 64
stbi_zlib_decode_malloc PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4459
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4460
	mov	r9, QWORD PTR outlen$[rsp]
	mov	r8d, 16384				; 00004000H
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	stbi_zlib_decode_malloc_guesssize
; Line 4461
	add	rsp, 40					; 00000028H
	ret	0
stbi_zlib_decode_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
initial_size$ = 4208
outlen$ = 4216
parse_header$ = 4224
stbi_zlib_decode_malloc_guesssize_headerflag PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4464
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4466
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4467
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4468
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4469
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4470
	mov	eax, DWORD PTR parse_header$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4471
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4472
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4473
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4474
	mov	rcx, QWORD PTR a$[rsp+32]
	call	QWORD PTR __imp_free
; Line 4475
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_malloc_guesssize_headerflag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
initial_size$ = 4208
outlen$ = 4216
stbi_zlib_decode_malloc_guesssize PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4443
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4445
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4446
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4447
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4448
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4449
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4450
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4451
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4452
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4453
	mov	rcx, QWORD PTR a$[rsp+32]
	call	QWORD PTR __imp_free
; Line 4454
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_malloc_guesssize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load_thread PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1107
	mov	DWORD PTR [rsp+8], ecx
; Line 1108
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 1109
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 1110
	ret	0
stbi_set_flip_vertically_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb_thread PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4965
	mov	DWORD PTR [rsp+8], ecx
; Line 4966
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4967
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4968
	ret	0
stbi_convert_iphone_png_to_rgb_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1097
	mov	DWORD PTR [rsp+8], ecx
; Line 1098
	mov	eax, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA, eax
; Line 1099
	ret	0
stbi_set_flip_vertically_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4947
	mov	DWORD PTR [rsp+8], ecx
; Line 4948
	mov	eax, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR ?stbi__de_iphone_flag_global@@3HA, eax
; Line 4949
	ret	0
stbi_convert_iphone_png_to_rgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi_set_unpremultiply_on_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4942
	mov	DWORD PTR [rsp+8], ecx
; Line 4943
	mov	eax, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR ?stbi__unpremultiply_on_load_global@@3HA, eax
; Line 4944
	ret	0
stbi_set_unpremultiply_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_16_bit_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7632
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7635
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7636
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 7637
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
	mov	DWORD PTR r$[rsp], eax
; Line 7638
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 7639
	mov	eax, DWORD PTR r$[rsp]
; Line 7640
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_16_bit_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_16_bit PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7622
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7623
	lea	rdx, OFFSET FLAT:$SG102101
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7625
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_is_16
	lea	rcx, OFFSET FLAT:$SG102103
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi_is_16
$LN2@stbi_is_16:
; Line 7626
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_16_bit_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7627
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 7628
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_is_16:
; Line 7629
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_16_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
stbi_info_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7611
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7614
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7615
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 7616
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
	mov	DWORD PTR r$[rsp], eax
; Line 7617
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 7618
	mov	eax, DWORD PTR r$[rsp]
; Line 7619
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_info_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi_info PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7601
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7602
	lea	rdx, OFFSET FLAT:$SG102084
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7604
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_info
	lea	rcx, OFFSET FLAT:$SG102086
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi_info
$LN2@stbi_info:
; Line 7605
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_info_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7606
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 7607
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_info:
; Line 7608
	add	rsp, 56					; 00000038H
	ret	0
stbi_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
stbi_is_16_bit_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7665
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7667
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 7668
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
; Line 7669
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_16_bit_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7658
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7660
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 7661
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
; Line 7662
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7651
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7653
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 7654
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
; Line 7655
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7646
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 7647
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
; Line 7648
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
retval_from_stbi_load$ = 48
stbi_image_free PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1082
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1083
	mov	rcx, QWORD PTR retval_from_stbi_load$[rsp]
	call	QWORD PTR __imp_free
; Line 1084
	add	rsp, 40					; 00000028H
	ret	0
stbi_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbi_failure_reason PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 971
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
; Line 972
	ret	0
stbi_failure_reason ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
res$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_hdr_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1523
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1525
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 1528
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1529
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	mov	DWORD PTR res$[rsp], eax
; Line 1530
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 1531
	mov	eax, DWORD PTR res$[rsp]
; Line 1536
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_hdr_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_hdr PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1512
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	lea	rdx, OFFSET FLAT:$SG96592
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1514
	mov	DWORD PTR result$[rsp], 0
; Line 1515
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN2@stbi_is_hd
; Line 1516
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_hdr_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 1517
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN2@stbi_is_hd:
; Line 1519
	mov	eax, DWORD PTR result$[rsp]
; Line 1520
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_hdr_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1498
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1501
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1502
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
; Line 1508
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
clbk$ = 288
user$ = 296
stbi_is_hdr_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1540
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1543
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1544
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
; Line 1550
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_ldr_to_hdr_scale PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1556
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR ?stbi__l2h_scale@@3MA, xmm0
	ret	0
stbi_ldr_to_hdr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_ldr_to_hdr_gamma PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1555
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR ?stbi__l2h_gamma@@3MA, xmm0
	ret	0
stbi_ldr_to_hdr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_hdr_to_ldr_scale PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1562
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR ?stbi__h2l_scale_i@@3MA, xmm0
	ret	0
stbi_hdr_to_ldr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_hdr_to_ldr_gamma PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1561
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR ?stbi__h2l_gamma_i@@3MA, xmm0
	ret	0
stbi_hdr_to_ldr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
req_comp$ = 336
stbi_loadf_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1484
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1486
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1487
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_loadf PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1474
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1476
	lea	rdx, OFFSET FLAT:$SG96571
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1477
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_loadf
	lea	rcx, OFFSET FLAT:$SG96573
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_loadf
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_loadf
$LN4@stbi_loadf:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_loadf:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_loadf
$LN2@stbi_loadf:
; Line 1478
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_loadf_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1479
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1480
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_loadf:
; Line 1481
	add	rsp, 88					; 00000058H
	ret	0
stbi_loadf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1466
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1468
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1469
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1470
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1459
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1461
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1462
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1463
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file_16 PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1370
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1373
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1374
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
	mov	QWORD PTR result$[rsp], rax
; Line 1375
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1377
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
$LN2@stbi_load_:
; Line 1379
	mov	rax, QWORD PTR result$[rsp]
; Line 1380
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load_16 PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1383
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1384
	lea	rdx, OFFSET FLAT:$SG96470
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1386
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load_
	lea	rcx, OFFSET FLAT:$SG96472
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load_
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_load_:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load_
$LN2@stbi_load_:
; Line 1387
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file_16
	mov	QWORD PTR result$[rsp], rax
; Line 1388
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1389
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load_:
; Line 1390
	add	rsp, 88					; 00000058H
	ret	0
stbi_load_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1403
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1405
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1406
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
; Line 1407
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1396
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1398
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1399
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
; Line 1400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 64
result$ = 72
s$ = 80
__$ArrayPad$ = 304
buffer$ = 336
len$ = 344
delays$ = 352
x$ = 360
y$ = 368
z$ = 376
comp$ = 384
req_comp$ = 392
stbi_load_gif_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1425
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1428
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1430
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR comp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR delays$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z ; stbi__load_gif_main
	mov	QWORD PTR result$[rsp], rax
; Line 1431
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi_load_
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv88[rsp], eax
$LN5@stbi_load_:
	cmp	DWORD PTR tv88[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1432
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z ; stbi__vertical_flip_slices
$LN2@stbi_load_:
; Line 1435
	mov	rax, QWORD PTR result$[rsp]
; Line 1436
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
stbi_load_gif_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1357
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1360
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1361
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
	mov	QWORD PTR result$[rsp], rax
; Line 1362
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1364
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
$LN2@stbi_load_:
; Line 1366
	mov	rax, QWORD PTR result$[rsp]
; Line 1367
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1347
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1348
	lea	rdx, OFFSET FLAT:$SG96433
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1350
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load
	lea	rcx, OFFSET FLAT:$SG96435
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load
$LN4@stbi_load:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_load:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load
$LN2@stbi_load:
; Line 1351
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1352
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1353
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load:
; Line 1354
	add	rsp, 88					; 00000058H
	ret	0
stbi_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1417
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1419
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1420
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
; Line 1421
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1410
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1412
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1413
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
; Line 1414
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
off$1 = 32
i$ = 36
font_collection$ = 64
name_utf8$ = 72
flags$ = 80
?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z PROC	; stbtt_FindMatchingFont_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4921
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4923
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
; Line 4924
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	DWORD PTR off$1[rsp], eax
; Line 4925
	cmp	DWORD PTR off$1[rsp], 0
	jge	SHORT $LN5@stbtt_Find
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 4926
	mov	r9d, DWORD PTR flags$[rsp]
	mov	r8, QWORD PTR name_utf8$[rsp]
	mov	edx, DWORD PTR off$1[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__matches@@YAHPEAEI0H@Z		; stbtt__matches
	test	eax, eax
	je	SHORT $LN6@stbtt_Find
; Line 4927
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN6@stbtt_Find:
; Line 4928
	jmp	SHORT $LN2@stbtt_Find
$LN1@stbtt_Find:
; Line 4929
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z ENDP	; stbtt_FindMatchingFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nm$ = 48
nlen$ = 52
hd$ = 56
fc$ = 80
offset$ = 88
name$ = 96
flags$ = 104
?stbtt__matches@@YAHPEAEI0H@Z PROC			; stbtt__matches
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4892
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4893
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	DWORD PTR nlen$[rsp], eax
; Line 4895
	mov	eax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	jne	SHORT $LN2@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN2@stbtt__mat:
; Line 4898
	cmp	DWORD PTR flags$[rsp], 0
	je	SHORT $LN3@stbtt__mat
; Line 4899
	lea	r8, OFFSET FLAT:$SG95663
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR hd$[rsp], eax
; Line 4900
	mov	eax, DWORD PTR hd$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+44]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	and	eax, 7
	mov	ecx, DWORD PTR flags$[rsp]
	and	ecx, 7
	cmp	eax, ecx
	je	SHORT $LN4@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN4@stbtt__mat:
$LN3@stbtt__mat:
; Line 4903
	lea	r8, OFFSET FLAT:$SG95665
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4904
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN5@stbtt__mat:
; Line 4906
	cmp	DWORD PTR flags$[rsp], 0
	je	$LN6@stbtt__mat
; Line 4908
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN8@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN8@stbtt__mat:
; Line 4909
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN9@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN9@stbtt__mat:
; Line 4910
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN10@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN10@stbtt__mat:
; Line 4911
	jmp	$LN7@stbtt__mat
$LN6@stbtt__mat:
; Line 4912
	mov	DWORD PTR [rsp+40], 17
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN11@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN11@stbtt__mat:
; Line 4913
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN12@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN12@stbtt__mat:
; Line 4914
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN13@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN13@stbtt__mat:
$LN7@stbtt__mat:
; Line 4917
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4918
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__matches@@YAHPEAEI0H@Z ENDP			; stbtt__matches
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
matchlen$2 = 36
i$ = 40
platform$3 = 44
slen$4 = 48
encoding$5 = 52
off$6 = 56
count$ = 60
stringOffset$ = 64
id$7 = 68
language$8 = 72
tv231 = 80
fc$ = 112
nm$ = 120
name$ = 128
nlen$ = 136
target_id$ = 144
next_id$ = 152
?stbtt__matchpair@@YAHPEAEI0HHH@Z PROC			; stbtt__matchpair
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4845
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4847
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4848
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4850
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__mat
$LN2@stbtt__mat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__mat:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__mat
; Line 4851
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4852
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR id$7[rsp], eax
; Line 4853
	mov	eax, DWORD PTR target_id$[rsp]
	cmp	DWORD PTR id$7[rsp], eax
	jne	$LN5@stbtt__mat
; Line 4855
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR platform$3[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR encoding$5[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR language$8[rsp], eax
; Line 4858
	cmp	DWORD PTR platform$3[rsp], 0
	je	SHORT $LN7@stbtt__mat
	cmp	DWORD PTR platform$3[rsp], 3
	jne	SHORT $LN8@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 1
	je	SHORT $LN7@stbtt__mat
$LN8@stbtt__mat:
	cmp	DWORD PTR platform$3[rsp], 3
	jne	$LN6@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 10
	jne	$LN6@stbtt__mat
$LN7@stbtt__mat:
; Line 4859
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4860
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4863
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR nlen$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ; stbtt__CompareUTF8toUTF16_bigendian_prefix
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4864
	cmp	DWORD PTR matchlen$2[rsp], 0
	jl	$LN9@stbtt__mat
; Line 4866
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR next_id$[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR platform$3[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+14]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR encoding$5[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR language$8[rsp]
	jne	$LN10@stbtt__mat
; Line 4867
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4868
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4869
	cmp	DWORD PTR slen$4[rsp], 0
	jne	SHORT $LN12@stbtt__mat
; Line 4870
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN14@stbtt__mat
; Line 4871
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN14@stbtt__mat:
	jmp	$LN13@stbtt__mat
$LN12@stbtt__mat:
; Line 4872
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jge	$LN15@stbtt__mat
	movsxd	rax, DWORD PTR matchlen$2[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN15@stbtt__mat
; Line 4873
	mov	eax, DWORD PTR matchlen$2[rsp]
	inc	eax
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4874
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	ecx, DWORD PTR matchlen$2[rsp]
	mov	edx, DWORD PTR nlen$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rdx, DWORD PTR matchlen$2[rsp]
	mov	r8, QWORD PTR name$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv231[rsp], rdx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv231[rsp]
	mov	rcx, rax
	call	?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ; stbtt_CompareUTF8toUTF16_bigendian_internal
	test	eax, eax
	je	SHORT $LN16@stbtt__mat
; Line 4875
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN16@stbtt__mat:
$LN15@stbtt__mat:
$LN13@stbtt__mat:
; Line 4877
	jmp	SHORT $LN11@stbtt__mat
$LN10@stbtt__mat:
; Line 4879
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN17@stbtt__mat
; Line 4880
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN17@stbtt__mat:
$LN11@stbtt__mat:
$LN9@stbtt__mat:
$LN6@stbtt__mat:
$LN5@stbtt__mat:
; Line 4887
	jmp	$LN2@stbtt__mat
$LN3@stbtt__mat:
; Line 4888
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4889
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__matchpair@@YAHPEAEI0HHH@Z ENDP			; stbtt__matchpair
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s1$ = 64
len1$ = 72
s2$ = 80
len2$ = 88
?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z PROC ; stbtt_CompareUTF8toUTF16_bigendian_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4817
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4818
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ; stbtt__CompareUTF8toUTF16_bigendian_prefix
	cmp	DWORD PTR len1$[rsp], eax
	jne	SHORT $LN3@stbtt_Comp
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stbtt_Comp
$LN3@stbtt_Comp:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stbtt_Comp:
	mov	eax, DWORD PTR tv70[rsp]
; Line 4819
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ENDP ; stbtt_CompareUTF8toUTF16_bigendian_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
ch$1 = 4
c$2 = 8
ch2$3 = 12
tv85 = 16
tv84 = 20
tv132 = 24
tv131 = 28
tv143 = 32
tv142 = 36
tv175 = 40
tv174 = 44
tv186 = 48
tv185 = 52
tv197 = 56
tv196 = 60
tv207 = 64
tv206 = 68
tv226 = 72
tv225 = 76
tv238 = 80
tv237 = 84
tv249 = 88
tv248 = 92
s1$ = 112
len1$ = 120
s2$ = 128
len2$ = 136
?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z PROC ; stbtt__CompareUTF8toUTF16_bigendian_prefix
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4778
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4779
	mov	DWORD PTR i$[rsp], 0
$LN2@stbtt__Com:
; Line 4782
	cmp	DWORD PTR len2$[rsp], 0
	je	$LN3@stbtt__Com
; Line 4783
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch$1[rsp], ax
; Line 4784
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@stbtt__Com
; Line 4785
	mov	eax, DWORD PTR len1$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN6@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN6@stbtt__Com:
; Line 4786
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv84[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	mov	DWORD PTR tv85[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv85[rsp]
	cmp	DWORD PTR tv84[rsp], eax
	je	SHORT $LN7@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN7@stbtt__Com:
	jmp	$LN5@stbtt__Com
$LN4@stbtt__Com:
; Line 4787
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 2048				; 00000800H
	jge	$LN8@stbtt__Com
; Line 4788
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN10@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN10@stbtt__Com:
; Line 4789
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv131[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	add	eax, 192				; 000000c0H
	mov	DWORD PTR tv132[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv132[rsp]
	cmp	DWORD PTR tv131[rsp], eax
	je	SHORT $LN11@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN11@stbtt__Com:
; Line 4790
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv142[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv143[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv143[rsp]
	cmp	DWORD PTR tv142[rsp], eax
	je	SHORT $LN12@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN12@stbtt__Com:
	jmp	$LN9@stbtt__Com
$LN8@stbtt__Com:
; Line 4791
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN13@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN13@stbtt__Com
; Line 4793
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch2$3[rsp], ax
; Line 4794
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN15@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN15@stbtt__Com:
; Line 4795
	movzx	eax, WORD PTR ch$1[rsp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10
	movzx	ecx, WORD PTR ch2$3[rsp]
	lea	eax, DWORD PTR [rax+rcx+9216]
	mov	DWORD PTR c$2[rsp], eax
; Line 4796
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv174[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 18
	add	eax, 240				; 000000f0H
	mov	DWORD PTR tv175[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv175[rsp]
	cmp	DWORD PTR tv174[rsp], eax
	je	SHORT $LN16@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN16@stbtt__Com:
; Line 4797
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv185[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 12
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv186[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv186[rsp]
	cmp	DWORD PTR tv185[rsp], eax
	je	SHORT $LN17@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN17@stbtt__Com:
; Line 4798
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv196[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv197[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv197[rsp]
	cmp	DWORD PTR tv196[rsp], eax
	je	SHORT $LN18@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN18@stbtt__Com:
; Line 4799
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv206[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv207[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv207[rsp]
	cmp	DWORD PTR tv206[rsp], eax
	je	SHORT $LN19@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN19@stbtt__Com:
; Line 4800
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4801
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
	jmp	$LN14@stbtt__Com
$LN13@stbtt__Com:
; Line 4802
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN20@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 57344				; 0000e000H
	jge	SHORT $LN20@stbtt__Com
; Line 4803
	mov	eax, -1
	jmp	$LN1@stbtt__Com
; Line 4804
	jmp	$LN21@stbtt__Com
$LN20@stbtt__Com:
; Line 4805
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN22@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN22@stbtt__Com:
; Line 4806
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv225[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 12
	add	eax, 224				; 000000e0H
	mov	DWORD PTR tv226[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv226[rsp]
	cmp	DWORD PTR tv225[rsp], eax
	je	SHORT $LN23@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN23@stbtt__Com:
; Line 4807
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv237[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv238[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv238[rsp]
	cmp	DWORD PTR tv237[rsp], eax
	je	SHORT $LN24@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN24@stbtt__Com:
; Line 4808
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv248[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv249[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv249[rsp]
	cmp	DWORD PTR tv248[rsp], eax
	je	SHORT $LN25@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN25@stbtt__Com:
$LN21@stbtt__Com:
$LN14@stbtt__Com:
$LN9@stbtt__Com:
$LN5@stbtt__Com:
; Line 4810
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4811
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
; Line 4812
	jmp	$LN2@stbtt__Com
$LN3@stbtt__Com:
; Line 4813
	mov	eax, DWORD PTR i$[rsp]
$LN1@stbtt__Com:
; Line 4814
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ENDP ; stbtt__CompareUTF8toUTF16_bigendian_prefix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 36
s$ = 40
u$1 = 44
v$2 = 48
m$3 = 52
u$4 = 56
d$ = 60
z$5 = 64
p3$ = 68
v$6 = 72
n$7 = 76
a$ = 96
b$ = 104
c$ = 112
r$ = 120
?stbtt__solve_cubic@@YAHMMMPEAM@Z PROC			; stbtt__solve_cubic
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4545
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 88					; 00000058H
; Line 4546
	movss	xmm0, DWORD PTR a$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR s$[rsp], xmm0
; Line 4547
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR a$[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR b$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR p$[rsp], xmm0
; Line 4548
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR __real@41100000
	mulss	xmm1, DWORD PTR b$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR a$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@41d80000
	addss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR q$[rsp], xmm0
; Line 4549
	movss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR p$[rsp]
	movss	DWORD PTR p3$[rsp], xmm0
; Line 4550
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR p3$[rsp]
	divss	xmm1, DWORD PTR __real@41d80000
	addss	xmm0, xmm1
	movss	DWORD PTR d$[rsp], xmm0
; Line 4551
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN2@stbtt__sol
; Line 4552
	cvtss2sd xmm0, DWORD PTR d$[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR z$5[rsp], xmm0
; Line 4553
	movss	xmm0, DWORD PTR q$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR z$5[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR u$1[rsp], xmm0
; Line 4554
	movss	xmm0, DWORD PTR q$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR z$5[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR v$2[rsp], xmm0
; Line 4555
	movss	xmm0, DWORD PTR u$1[rsp]
	call	?stbtt__cuberoot@@YAMM@Z		; stbtt__cuberoot
	movss	DWORD PTR u$1[rsp], xmm0
; Line 4556
	movss	xmm0, DWORD PTR v$2[rsp]
	call	?stbtt__cuberoot@@YAMM@Z		; stbtt__cuberoot
	movss	DWORD PTR v$2[rsp], xmm0
; Line 4557
	movss	xmm0, DWORD PTR s$[rsp]
	addss	xmm0, DWORD PTR u$1[rsp]
	addss	xmm0, DWORD PTR v$2[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4558
	mov	eax, 1
	jmp	$LN1@stbtt__sol
; Line 4559
	jmp	$LN3@stbtt__sol
$LN2@stbtt__sol:
; Line 4560
	movss	xmm0, DWORD PTR p$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40400000
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR u$4[rsp], xmm0
; Line 4561
	movss	xmm0, DWORD PTR __real@c1d80000
	divss	xmm0, DWORD PTR p3$[rsp]
	cvtss2sd xmm0, xmm0
	call	sqrt
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm1, DWORD PTR q$[rsp]
	mulsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4000000000000000
	call	acos
	cvtsd2ss xmm0, xmm0
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR v$6[rsp], xmm0
; Line 4562
	cvtss2sd xmm0, DWORD PTR v$6[rsp]
	call	cos
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR m$3[rsp], xmm0
; Line 4563
	cvtss2sd xmm0, DWORD PTR v$6[rsp]
	subsd	xmm0, QWORD PTR __real@3ff921fafc8b007a
	call	cos
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@3fddb3d7
	movss	DWORD PTR n$7[rsp], xmm0
; Line 4564
	movss	xmm0, DWORD PTR u$4[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR m$3[rsp]
	movss	xmm1, DWORD PTR s$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4565
	movss	xmm0, DWORD PTR m$3[rsp]
	addss	xmm0, DWORD PTR n$7[rsp]
	movss	xmm1, DWORD PTR u$4[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4566
	movss	xmm0, DWORD PTR m$3[rsp]
	subss	xmm0, DWORD PTR n$7[rsp]
	movss	xmm1, DWORD PTR u$4[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4571
	mov	eax, 3
$LN3@stbtt__sol:
$LN1@stbtt__sol:
; Line 4573
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__solve_cubic@@YAHMMMPEAM@Z ENDP			; stbtt__solve_cubic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
?stbtt__cuberoot@@YAMM@Z PROC				; stbtt__cuberoot
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4536
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 4537
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbtt__cub
; Line 4538
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	cvtsd2ss xmm0, xmm0
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	jmp	SHORT $LN1@stbtt__cub
	jmp	SHORT $LN3@stbtt__cub
$LN2@stbtt__cub:
; Line 4540
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	movsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	cvtsd2ss xmm0, xmm0
$LN3@stbtt__cub:
$LN1@stbtt__cub:
; Line 4541
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__cuberoot@@YAMM@Z ENDP				; stbtt__cuberoot
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
y1$1 = 52
y0$2 = 56
y2$3 = 60
x1$4 = 64
winding$ = 68
x0$5 = 72
y0$6 = 76
y1$7 = 80
x2$8 = 84
x0$9 = 88
x1$10 = 92
y_frac$ = 96
tv140 = 100
tv144 = 104
tv148 = 108
tv163 = 112
tv204 = 116
tv207 = 120
tv208 = 124
tv210 = 128
tv213 = 132
tv214 = 136
tv216 = 140
tv219 = 144
tv220 = 148
tv276 = 152
tv280 = 156
tv284 = 160
tv299 = 164
tv319 = 168
num_hits$11 = 172
tv364 = 176
q1$12 = 184
ay$13 = 192
by$14 = 196
ax$15 = 200
x_inter$16 = 204
x_inter$17 = 208
q2$18 = 216
q0$19 = 224
ray$ = 232
orig$ = 240
hits$20 = 248
__$ArrayPad$ = 264
x$ = 288
y$ = 296
nverts$ = 304
verts$ = 312
?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z PROC ; stbtt__compute_crossings_x
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4468
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4470
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ray$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR ray$[rsp+4], xmm0
; Line 4472
	mov	DWORD PTR winding$[rsp], 0
; Line 4475
	cvtss2sd xmm0, DWORD PTR y$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	call	fmod
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR y_frac$[rsp], xmm0
; Line 4476
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR y_frac$[rsp]
	jbe	SHORT $LN5@stbtt__com
; Line 4477
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR y$[rsp], xmm0
	jmp	SHORT $LN6@stbtt__com
$LN5@stbtt__com:
; Line 4478
	movss	xmm0, DWORD PTR y_frac$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7d70a4
	jbe	SHORT $LN7@stbtt__com
; Line 4479
	movss	xmm0, DWORD PTR y$[rsp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR y$[rsp], xmm0
$LN7@stbtt__com:
$LN6@stbtt__com:
; Line 4481
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4482
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4485
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__com
$LN2@stbtt__com:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__com:
	mov	eax, DWORD PTR nverts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__com
; Line 4486
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN8@stbtt__com
; Line 4487
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$9[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$6[rsp], eax
; Line 4488
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$10[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$7[rsp], eax
; Line 4489
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN23@stbtt__com
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv140[rsp], eax
	jmp	SHORT $LN24@stbtt__com
$LN23@stbtt__com:
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv140[rsp], eax
$LN24@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv140[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN25@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN26@stbtt__com
$LN25@stbtt__com:
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv144[rsp], eax
$LN26@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv144[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR x1$10[rsp]
	cmp	DWORD PTR x0$9[rsp], eax
	jge	SHORT $LN27@stbtt__com
	mov	eax, DWORD PTR x0$9[rsp]
	mov	DWORD PTR tv148[rsp], eax
	jmp	SHORT $LN28@stbtt__com
$LN27@stbtt__com:
	mov	eax, DWORD PTR x1$10[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN28@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv148[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
; Line 4490
	cvtsi2ss xmm0, DWORD PTR y0$6[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR y0$6[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	eax, DWORD PTR x0$9[rsp]
	mov	ecx, DWORD PTR x1$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x0$9[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR x_inter$17[rsp], xmm0
; Line 4491
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x_inter$17[rsp]
	jbe	SHORT $LN10@stbtt__com
; Line 4492
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN29@stbtt__com
	mov	DWORD PTR tv163[rsp], 1
	jmp	SHORT $LN30@stbtt__com
$LN29@stbtt__com:
	mov	DWORD PTR tv163[rsp], -1
$LN30@stbtt__com:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN10@stbtt__com:
$LN9@stbtt__com:
$LN8@stbtt__com:
; Line 4495
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN11@stbtt__com
; Line 4496
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4497
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	mov	DWORD PTR x1$4[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4498
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x2$8[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y2$3[rsp], eax
; Line 4499
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN31@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv204[rsp], eax
	jmp	SHORT $LN32@stbtt__com
$LN31@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv204[rsp], eax
$LN32@stbtt__com:
	mov	eax, DWORD PTR tv204[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN35@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN36@stbtt__com
$LN35@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN33@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv207[rsp], eax
	jmp	SHORT $LN34@stbtt__com
$LN33@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv207[rsp], eax
$LN34@stbtt__com:
	mov	eax, DWORD PTR tv207[rsp]
	mov	DWORD PTR tv208[rsp], eax
$LN36@stbtt__com:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR ax$15[rsp], eax
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN37@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv210[rsp], eax
	jmp	SHORT $LN38@stbtt__com
$LN37@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv210[rsp], eax
$LN38@stbtt__com:
	mov	eax, DWORD PTR tv210[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN41@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv214[rsp], eax
	jmp	SHORT $LN42@stbtt__com
$LN41@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN39@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv213[rsp], eax
	jmp	SHORT $LN40@stbtt__com
$LN39@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv213[rsp], eax
$LN40@stbtt__com:
	mov	eax, DWORD PTR tv213[rsp]
	mov	DWORD PTR tv214[rsp], eax
$LN42@stbtt__com:
	mov	eax, DWORD PTR tv214[rsp]
	mov	DWORD PTR ay$13[rsp], eax
; Line 4500
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN43@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv216[rsp], eax
	jmp	SHORT $LN44@stbtt__com
$LN43@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv216[rsp], eax
$LN44@stbtt__com:
	mov	eax, DWORD PTR tv216[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN47@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN45@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv219[rsp], eax
	jmp	SHORT $LN46@stbtt__com
$LN45@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv219[rsp], eax
$LN46@stbtt__com:
	mov	eax, DWORD PTR tv219[rsp]
	mov	DWORD PTR tv220[rsp], eax
	jmp	SHORT $LN48@stbtt__com
$LN47@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv220[rsp], eax
$LN48@stbtt__com:
	mov	eax, DWORD PTR tv220[rsp]
	mov	DWORD PTR by$14[rsp], eax
; Line 4501
	cvtsi2ss xmm0, DWORD PTR ay$13[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
	cvtsi2ss xmm0, DWORD PTR by$14[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN12@stbtt__com
	cvtsi2ss xmm0, DWORD PTR ax$15[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
; Line 4504
	cvtsi2ss xmm0, DWORD PTR x0$5[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4505
	cvtsi2ss xmm0, DWORD PTR y0$2[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4506
	cvtsi2ss xmm0, DWORD PTR x1$4[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4507
	cvtsi2ss xmm0, DWORD PTR y1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4508
	cvtsi2ss xmm0, DWORD PTR x2$8[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4509
	cvtsi2ss xmm0, DWORD PTR y2$3[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4510
	lea	rdx, QWORD PTR q1$12[rsp]
	lea	rcx, QWORD PTR q0$19[rsp]
	call	?equal@@YAHPEAM0@Z			; equal
	test	eax, eax
	jne	SHORT $LN15@stbtt__com
	lea	rdx, QWORD PTR q2$18[rsp]
	lea	rcx, QWORD PTR q1$12[rsp]
	call	?equal@@YAHPEAM0@Z			; equal
	test	eax, eax
	je	$LN13@stbtt__com
$LN15@stbtt__com:
; Line 4511
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
; Line 4512
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4513
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$4[rsp], eax
; Line 4514
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4515
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN49@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv276[rsp], eax
	jmp	SHORT $LN50@stbtt__com
$LN49@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv276[rsp], eax
$LN50@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv276[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN51@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv280[rsp], eax
	jmp	SHORT $LN52@stbtt__com
$LN51@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv280[rsp], eax
$LN52@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv280[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN53@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv284[rsp], eax
	jmp	SHORT $LN54@stbtt__com
$LN53@stbtt__com:
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv284[rsp], eax
$LN54@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv284[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
; Line 4516
	cvtsi2ss xmm0, DWORD PTR y0$2[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR y0$2[rsp]
	mov	ecx, DWORD PTR y1$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x0$5[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR x_inter$16[rsp], xmm0
; Line 4517
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x_inter$16[rsp]
	jbe	SHORT $LN17@stbtt__com
; Line 4518
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN55@stbtt__com
	mov	DWORD PTR tv299[rsp], 1
	jmp	SHORT $LN56@stbtt__com
$LN55@stbtt__com:
	mov	DWORD PTR tv299[rsp], -1
$LN56@stbtt__com:
	mov	eax, DWORD PTR tv299[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN17@stbtt__com:
$LN16@stbtt__com:
; Line 4520
	jmp	$LN14@stbtt__com
$LN13@stbtt__com:
; Line 4521
	lea	rax, QWORD PTR hits$20[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR q2$18[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR q1$12[rsp]
	lea	r8, QWORD PTR q0$19[rsp]
	lea	rdx, QWORD PTR ray$[rsp]
	lea	rcx, QWORD PTR orig$[rsp]
	call	?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z ; stbtt__ray_intersect_bezier
	mov	DWORD PTR num_hits$11[rsp], eax
; Line 4522
	cmp	DWORD PTR num_hits$11[rsp], 1
	jl	SHORT $LN18@stbtt__com
; Line 4523
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN19@stbtt__com
; Line 4524
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN57@stbtt__com
	mov	DWORD PTR tv319[rsp], -1
	jmp	SHORT $LN58@stbtt__com
$LN57@stbtt__com:
	mov	DWORD PTR tv319[rsp], 1
$LN58@stbtt__com:
	mov	eax, DWORD PTR tv319[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN19@stbtt__com:
$LN18@stbtt__com:
; Line 4525
	cmp	DWORD PTR num_hits$11[rsp], 2
	jl	SHORT $LN20@stbtt__com
; Line 4526
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN21@stbtt__com
; Line 4527
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN59@stbtt__com
	mov	DWORD PTR tv364[rsp], -1
	jmp	SHORT $LN60@stbtt__com
$LN59@stbtt__com:
	mov	DWORD PTR tv364[rsp], 1
$LN60@stbtt__com:
	mov	eax, DWORD PTR tv364[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN21@stbtt__com:
$LN20@stbtt__com:
$LN14@stbtt__com:
$LN12@stbtt__com:
$LN11@stbtt__com:
; Line 4531
	jmp	$LN2@stbtt__com
$LN3@stbtt__com:
; Line 4532
	mov	eax, DWORD PTR winding$[rsp]
; Line 4533
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z ENDP ; stbtt__compute_crossings_x
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 0
a$ = 32
b$ = 40
?equal@@YAHPEAM0@Z PROC					; equal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4463
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4464
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	ucomiss	xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	ucomiss	xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv74[rsp], 0
$LN4@equal:
	mov	eax, DWORD PTR tv74[rsp]
; Line 4465
	add	rsp, 24
	ret	0
?equal@@YAHPEAM0@Z ENDP					; equal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s0$ = 32
s1$ = 36
num_s$ = 40
b$ = 44
a$ = 48
rayn_x$1 = 52
rayn_y$2 = 56
q0perp$ = 60
d$3 = 64
q0d$4 = 68
q1perp$ = 72
discr$5 = 76
rcpna$6 = 80
c$ = 84
rcp_len2$7 = 88
q10d$8 = 92
q0rd$9 = 96
q20d$10 = 100
q2perp$ = 104
roperp$ = 108
q1d$11 = 112
q2d$12 = 116
rod$13 = 120
orig$ = 144
ray$ = 152
q0$ = 160
q1$ = 168
q2$ = 176
hits$ = 184
?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z PROC	; stbtt__ray_intersect_bezier
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4399
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4400
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q0perp$[rsp], xmm0
; Line 4401
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q1perp$[rsp], xmm0
; Line 4402
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q2perp$[rsp], xmm0
; Line 4403
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR roperp$[rsp], xmm0
; Line 4405
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR q1perp$[rsp]
	movss	xmm1, DWORD PTR q0perp$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR q2perp$[rsp]
	movss	DWORD PTR a$[rsp], xmm0
; Line 4406
	movss	xmm0, DWORD PTR q1perp$[rsp]
	subss	xmm0, DWORD PTR q0perp$[rsp]
	movss	DWORD PTR b$[rsp], xmm0
; Line 4407
	movss	xmm0, DWORD PTR q0perp$[rsp]
	subss	xmm0, DWORD PTR roperp$[rsp]
	movss	DWORD PTR c$[rsp], xmm0
; Line 4409
	xorps	xmm0, xmm0
	movss	DWORD PTR s0$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR s1$[rsp], xmm0
; Line 4410
	mov	DWORD PTR num_s$[rsp], 0
; Line 4412
	cvtss2sd xmm0, DWORD PTR a$[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN14@stbtt__ray
	je	$LN2@stbtt__ray
$LN14@stbtt__ray:
; Line 4413
	movss	xmm0, DWORD PTR b$[rsp]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR a$[rsp]
	mulss	xmm1, DWORD PTR c$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR discr$5[rsp], xmm0
; Line 4414
	cvtss2sd xmm0, DWORD PTR discr$5[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN4@stbtt__ray
; Line 4415
	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR rcpna$6[rsp], xmm0
; Line 4416
	cvtss2sd xmm0, DWORD PTR discr$5[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR d$3[rsp], xmm0
; Line 4417
	movss	xmm0, DWORD PTR b$[rsp]
	addss	xmm0, DWORD PTR d$3[rsp]
	mulss	xmm0, DWORD PTR rcpna$6[rsp]
	movss	DWORD PTR s0$[rsp], xmm0
; Line 4418
	movss	xmm0, DWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR d$3[rsp]
	mulss	xmm0, DWORD PTR rcpna$6[rsp]
	movss	DWORD PTR s1$[rsp], xmm0
; Line 4419
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN5@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN5@stbtt__ray
; Line 4420
	mov	DWORD PTR num_s$[rsp], 1
$LN5@stbtt__ray:
; Line 4421
	cvtss2sd xmm0, DWORD PTR d$3[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s1$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN6@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s1$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN6@stbtt__ray
; Line 4422
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN7@stbtt__ray
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR s0$[rsp], xmm0
$LN7@stbtt__ray:
; Line 4423
	mov	eax, DWORD PTR num_s$[rsp]
	inc	eax
	mov	DWORD PTR num_s$[rsp], eax
$LN6@stbtt__ray:
$LN4@stbtt__ray:
; Line 4426
	jmp	SHORT $LN3@stbtt__ray
$LN2@stbtt__ray:
; Line 4429
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR c$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR s0$[rsp], xmm0
; Line 4430
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN8@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN8@stbtt__ray
; Line 4431
	mov	DWORD PTR num_s$[rsp], 1
$LN8@stbtt__ray:
$LN3@stbtt__ray:
; Line 4434
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN9@stbtt__ray
; Line 4435
	xor	eax, eax
	jmp	$LN1@stbtt__ray
	jmp	$LN10@stbtt__ray
$LN9@stbtt__ray:
; Line 4437
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rcp_len2$7[rsp], xmm0
; Line 4438
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rcp_len2$7[rsp]
	movss	DWORD PTR rayn_x$1[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rcp_len2$7[rsp]
	movss	DWORD PTR rayn_y$2[rsp], xmm0
; Line 4440
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q0$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q0$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q0d$4[rsp], xmm0
; Line 4441
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q1d$11[rsp], xmm0
; Line 4442
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q2d$12[rsp], xmm0
; Line 4443
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR orig$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR orig$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR rod$13[rsp], xmm0
; Line 4445
	movss	xmm0, DWORD PTR q1d$11[rsp]
	subss	xmm0, DWORD PTR q0d$4[rsp]
	movss	DWORD PTR q10d$8[rsp], xmm0
; Line 4446
	movss	xmm0, DWORD PTR q2d$12[rsp]
	subss	xmm0, DWORD PTR q0d$4[rsp]
	movss	DWORD PTR q20d$10[rsp], xmm0
; Line 4447
	movss	xmm0, DWORD PTR q0d$4[rsp]
	subss	xmm0, DWORD PTR rod$13[rsp]
	movss	DWORD PTR q0rd$9[rsp], xmm0
; Line 4449
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR s0$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR q10d$8[rsp]
	movss	xmm1, DWORD PTR q0rd$9[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, DWORD PTR q20d$10[rsp]
	addss	xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4450
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR s0$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4452
	cmp	DWORD PTR num_s$[rsp], 1
	jle	$LN11@stbtt__ray
; Line 4453
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR s1$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR q10d$8[rsp]
	movss	xmm1, DWORD PTR q0rd$9[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, DWORD PTR q20d$10[rsp]
	addss	xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4454
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR s1$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4455
	mov	eax, 2
	jmp	SHORT $LN1@stbtt__ray
; Line 4456
	jmp	SHORT $LN12@stbtt__ray
$LN11@stbtt__ray:
; Line 4457
	mov	eax, 1
$LN12@stbtt__ray:
$LN10@stbtt__ray:
$LN1@stbtt__ray:
; Line 4460
	add	rsp, 136				; 00000088H
	ret	0
?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z ENDP	; stbtt__ray_intersect_bezier
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
oversample$ = 8
?stbtt__oversample_shift@@YAMH@Z PROC			; stbtt__oversample_shift
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4137
	mov	DWORD PTR [rsp+8], ecx
; Line 4138
	cmp	DWORD PTR oversample$[rsp], 0
	jne	SHORT $LN2@stbtt__ove
; Line 4139
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@stbtt__ove
$LN2@stbtt__ove:
; Line 4145
	mov	eax, DWORD PTR oversample$[rsp]
	dec	eax
	neg	eax
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR oversample$[rsp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	divss	xmm0, xmm1
$LN1@stbtt__ove:
; Line 4146
	ret	0
?stbtt__oversample_shift@@YAMH@Z ENDP			; stbtt__oversample_shift
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_h$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
?stbtt__v_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__v_prefilter
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4075
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4077
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_h$[rsp], eax
; Line 4079
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4080
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__v_p
$LN2@stbtt__v_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__v_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__v_p
; Line 4083
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4085
	mov	DWORD PTR total$2[rsp], 0
; Line 4088
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__v_p
	jmp	$LN29@stbtt__v_p
$LN25@stbtt__v_p:
; Line 4090
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__v_p
$LN7@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN8@stbtt__v_p
; Line 4091
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4092
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4093
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4094
	jmp	$LN7@stbtt__v_p
$LN8@stbtt__v_p:
; Line 4095
	jmp	$LN5@stbtt__v_p
$LN26@stbtt__v_p:
; Line 4097
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__v_p
$LN10@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN11@stbtt__v_p
; Line 4098
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4099
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4100
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4101
	jmp	$LN10@stbtt__v_p
$LN11@stbtt__v_p:
; Line 4102
	jmp	$LN5@stbtt__v_p
$LN27@stbtt__v_p:
; Line 4104
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__v_p
$LN13@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN14@stbtt__v_p
; Line 4105
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4106
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4107
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4108
	jmp	$LN13@stbtt__v_p
$LN14@stbtt__v_p:
; Line 4109
	jmp	$LN5@stbtt__v_p
$LN28@stbtt__v_p:
; Line 4111
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__v_p
$LN16@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN17@stbtt__v_p
; Line 4112
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4113
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4114
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4115
	jmp	$LN16@stbtt__v_p
$LN17@stbtt__v_p:
; Line 4116
	jmp	$LN5@stbtt__v_p
$LN29@stbtt__v_p:
; Line 4118
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__v_p
$LN19@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN20@stbtt__v_p
; Line 4119
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4120
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4121
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4122
	jmp	$LN19@stbtt__v_p
$LN20@stbtt__v_p:
$LN5@stbtt__v_p:
; Line 4126
	jmp	SHORT $LN24@stbtt__v_p
$LN22@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__v_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__v_p
; Line 4127
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__v_p
	mov	r8d, 4127				; 0000101fH
	lea	rdx, OFFSET FLAT:$SG95021
	lea	rcx, OFFSET FLAT:$SG95022
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt__v_p:
; Line 4128
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4129
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4130
	jmp	$LN22@stbtt__v_p
$LN23@stbtt__v_p:
; Line 4132
	mov	rax, QWORD PTR pixels$[rsp]
	inc	rax
	mov	QWORD PTR pixels$[rsp], rax
; Line 4133
	jmp	$LN2@stbtt__v_p
$LN3@stbtt__v_p:
; Line 4134
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__v_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__v_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_w$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
?stbtt__h_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__h_prefilter
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4013
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4015
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_w$[rsp], eax
; Line 4017
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4018
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__h_p
$LN2@stbtt__h_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__h_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__h_p
; Line 4021
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4023
	mov	DWORD PTR total$2[rsp], 0
; Line 4026
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__h_p
	jmp	$LN29@stbtt__h_p
$LN25@stbtt__h_p:
; Line 4028
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__h_p
$LN7@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN8@stbtt__h_p
; Line 4029
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4030
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4031
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4032
	jmp	$LN7@stbtt__h_p
$LN8@stbtt__h_p:
; Line 4033
	jmp	$LN5@stbtt__h_p
$LN26@stbtt__h_p:
; Line 4035
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__h_p
$LN10@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN11@stbtt__h_p
; Line 4036
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4037
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4038
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4039
	jmp	$LN10@stbtt__h_p
$LN11@stbtt__h_p:
; Line 4040
	jmp	$LN5@stbtt__h_p
$LN27@stbtt__h_p:
; Line 4042
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__h_p
$LN13@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN14@stbtt__h_p
; Line 4043
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4044
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4045
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4046
	jmp	$LN13@stbtt__h_p
$LN14@stbtt__h_p:
; Line 4047
	jmp	$LN5@stbtt__h_p
$LN28@stbtt__h_p:
; Line 4049
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__h_p
$LN16@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN17@stbtt__h_p
; Line 4050
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4051
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4052
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4053
	jmp	$LN16@stbtt__h_p
$LN17@stbtt__h_p:
; Line 4054
	jmp	$LN5@stbtt__h_p
$LN29@stbtt__h_p:
; Line 4056
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__h_p
$LN19@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN20@stbtt__h_p
; Line 4057
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4058
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4059
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4060
	jmp	$LN19@stbtt__h_p
$LN20@stbtt__h_p:
$LN5@stbtt__h_p:
; Line 4064
	jmp	SHORT $LN24@stbtt__h_p
$LN22@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__h_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__h_p
; Line 4065
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__h_p
	mov	r8d, 4065				; 00000fe1H
	lea	rdx, OFFSET FLAT:$SG94971
	lea	rcx, OFFSET FLAT:$SG94972
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt__h_p:
; Line 4066
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4067
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4068
	jmp	SHORT $LN22@stbtt__h_p
$LN23@stbtt__h_p:
; Line 4070
	movsxd	rax, DWORD PTR stride_in_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixels$[rsp], rax
; Line 4071
	jmp	$LN2@stbtt__h_p
$LN3@stbtt__h_p:
; Line 4072
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__h_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__h_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
con$ = 32
rects$ = 40
num_rects$ = 48
?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z PROC ; stbrp_pack_rects
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3929
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3931
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbrp_pack
$LN2@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbrp_pack
; Line 3932
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jle	SHORT $LN8@stbrp_pack
; Line 3933
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3934
	mov	rax, QWORD PTR con$[rsp]
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+12], ecx
$LN8@stbrp_pack:
; Line 3936
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN9@stbrp_pack
; Line 3937
	jmp	$LN3@stbrp_pack
$LN9@stbrp_pack:
; Line 3938
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+rax], edx
; Line 3939
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	DWORD PTR [rcx+rax+4], edx
; Line 3940
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 1
; Line 3941
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 3942
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+16]
	jle	SHORT $LN10@stbrp_pack
; Line 3943
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN10@stbrp_pack:
; Line 3944
	jmp	$LN2@stbrp_pack
$LN3@stbrp_pack:
; Line 3945
	jmp	SHORT $LN7@stbrp_pack
$LN5@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbrp_pack
; Line 3946
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 0
	jmp	SHORT $LN5@stbrp_pack
$LN6@stbrp_pack:
; Line 3947
	add	rsp, 24
	ret	0
?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z ENDP ; stbrp_pack_rects
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
con$ = 8
pw$ = 16
ph$ = 24
nodes$ = 32
num_nodes$ = 40
?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z PROC ; stbrp_init_target
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3918
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3919
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3920
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 3921
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3922
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 3923
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 3926
	ret	0
?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z ENDP ; stbrp_init_target
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
y$ = 68
x$ = 72
gh$1 = 76
scale$ = 80
gw$2 = 84
bottom_y$ = 88
g$3 = 92
x0$4 = 96
y0$5 = 100
x1$6 = 104
y1$7 = 108
advance$8 = 112
lsb$9 = 116
f$ = 128
data$ = 304
offset$ = 312
pixel_height$ = 320
pixels$ = 328
pw$ = 336
ph$ = 344
first_char$ = 352
num_chars$ = 360
chardata$ = 368
?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z PROC ; stbtt_BakeFontBitmap_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3818
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
; Line 3822
	mov	QWORD PTR f$[rsp], 0
; Line 3823
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_InitFont
	test	eax, eax
	jne	SHORT $LN5@stbtt_Bake
; Line 3824
	mov	eax, -1
	jmp	$LN1@stbtt_Bake
$LN5@stbtt_Bake:
; Line 3825
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
; Line 3826
	mov	DWORD PTR y$[rsp], 1
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
; Line 3827
	mov	DWORD PTR bottom_y$[rsp], 1
; Line 3829
	movss	xmm1, DWORD PTR pixel_height$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR scale$[rsp], xmm0
; Line 3831
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Bake
$LN2@stbtt_Bake:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Bake:
	mov	eax, DWORD PTR num_chars$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Bake
; Line 3833
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR first_char$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR g$3[rsp], eax
; Line 3834
	lea	r9, QWORD PTR lsb$9[rsp]
	lea	r8, QWORD PTR advance$8[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 3835
	lea	rax, QWORD PTR y1$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$5[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$4[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scale$[rsp]
	movss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 3836
	mov	eax, DWORD PTR x0$4[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gw$2[rsp], eax
; Line 3837
	mov	eax, DWORD PTR y0$5[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gh$1[rsp], eax
; Line 3838
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN6@stbtt_Bake
; Line 3839
	mov	eax, DWORD PTR bottom_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
	mov	DWORD PTR x$[rsp], 1
$LN6@stbtt_Bake:
; Line 3840
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN7@stbtt_Bake
; Line 3841
	mov	eax, DWORD PTR i$[rsp]
	neg	eax
	jmp	$LN1@stbtt_Bake
$LN7@stbtt_Bake:
; Line 3842
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN10@stbtt_Bake
	mov	r8d, 3842				; 00000f02H
	lea	rdx, OFFSET FLAT:$SG94782
	lea	rcx, OFFSET FLAT:$SG94783
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stbtt_Bake:
; Line 3843
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN11@stbtt_Bake
	mov	r8d, 3843				; 00000f03H
	lea	rdx, OFFSET FLAT:$SG94784
	lea	rcx, OFFSET FLAT:$SG94785
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@stbtt_Bake:
; Line 3844
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, DWORD PTR pw$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR g$3[rsp]
	mov	DWORD PTR [rsp+56], ecx
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR gh$1[rsp]
	mov	r8d, DWORD PTR gw$2[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_MakeGlyphBitmap
; Line 3845
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR x$[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 3846
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR y$[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 3847
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+4], ax
; Line 3848
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+6], ax
; Line 3849
	cvtsi2ss xmm0, DWORD PTR advance$8[rsp]
	movss	xmm1, DWORD PTR scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+16], xmm0
; Line 3850
	cvtsi2ss xmm0, DWORD PTR x0$4[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3851
	cvtsi2ss xmm0, DWORD PTR y0$5[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3852
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR x$[rsp], eax
; Line 3853
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR bottom_y$[rsp]
	jle	SHORT $LN8@stbtt_Bake
; Line 3854
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR bottom_y$[rsp], eax
$LN8@stbtt_Bake:
; Line 3855
	jmp	$LN2@stbtt_Bake
$LN3@stbtt_Bake:
; Line 3856
	mov	eax, DWORD PTR bottom_y$[rsp]
$LN1@stbtt_Bake:
; Line 3857
	add	rsp, 296				; 00000128H
	ret	0
?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z ENDP ; stbtt_BakeFontBitmap_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 96
num_points$ = 100
n$ = 104
x$1 = 108
y$2 = 112
pass$ = 116
tv133 = 120
points$ = 128
start$ = 136
objspace_flatness_squared$ = 140
tv155 = 144
tv173 = 148
vertices$ = 192
num_verts$ = 200
objspace_flatness$ = 208
contour_lengths$ = 216
num_contours$ = 224
userdata$ = 232
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z PROC ; stbtt_FlattenCurves
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3619
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	movaps	XMMWORD PTR [rsp+160], xmm6
; Line 3620
	mov	QWORD PTR points$[rsp], 0
; Line 3621
	mov	DWORD PTR num_points$[rsp], 0
; Line 3623
	movss	xmm0, DWORD PTR objspace_flatness$[rsp]
	mulss	xmm0, DWORD PTR objspace_flatness$[rsp]
	movss	DWORD PTR objspace_flatness_squared$[rsp], xmm0
; Line 3624
	mov	DWORD PTR n$[rsp], 0
	mov	DWORD PTR start$[rsp], 0
; Line 3627
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Flat
$LN2@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Flat
; Line 3628
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 1
	jne	SHORT $LN13@stbtt_Flat
; Line 3629
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN13@stbtt_Flat:
	jmp	SHORT $LN2@stbtt_Flat
$LN3@stbtt_Flat:
; Line 3631
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3632
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbtt_Flat
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN14@stbtt_Flat:
; Line 3634
	movsxd	rax, DWORD PTR n$[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3636
	mov	rax, QWORD PTR contour_lengths$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN15@stbtt_Flat
; Line 3637
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3638
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN15@stbtt_Flat:
; Line 3642
	mov	DWORD PTR pass$[rsp], 0
	jmp	SHORT $LN7@stbtt_Flat
$LN5@stbtt_Flat:
	mov	eax, DWORD PTR pass$[rsp]
	inc	eax
	mov	DWORD PTR pass$[rsp], eax
$LN7@stbtt_Flat:
	cmp	DWORD PTR pass$[rsp], 2
	jge	$LN6@stbtt_Flat
; Line 3643
	xorps	xmm0, xmm0
	movss	DWORD PTR x$1[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3644
	cmp	DWORD PTR pass$[rsp], 1
	jne	SHORT $LN16@stbtt_Flat
; Line 3645
	movsxd	rax, DWORD PTR num_points$[rsp]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR points$[rsp], rax
; Line 3646
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN17@stbtt_Flat
	jmp	$LN18@stbtt_Flat
	jmp	$error$25
$LN17@stbtt_Flat:
$LN16@stbtt_Flat:
; Line 3648
	mov	DWORD PTR num_points$[rsp], 0
; Line 3649
	mov	DWORD PTR n$[rsp], -1
; Line 3650
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Flat
$LN8@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt_Flat
; Line 3651
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR tv133[rsp], al
	cmp	BYTE PTR tv133[rsp], 1
	je	SHORT $LN19@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 2
	je	$LN21@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 3
	je	$LN22@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 4
	je	$LN23@stbtt_Flat
	jmp	$LN11@stbtt_Flat
$LN19@stbtt_Flat:
; Line 3654
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN20@stbtt_Flat
; Line 3655
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN20@stbtt_Flat:
; Line 3656
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3657
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 3659
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3660
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv155[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv155[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3661
	jmp	$LN11@stbtt_Flat
$LN21@stbtt_Flat:
; Line 3663
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3664
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv173[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv173[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3665
	jmp	$LN11@stbtt_Flat
$LN22@stbtt_Flat:
; Line 3667
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm3, eax
	mov	DWORD PTR [rsp+72], 0
	movss	xmm4, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm4
	movss	DWORD PTR [rsp+56], xmm0
	movss	DWORD PTR [rsp+48], xmm1
	movss	DWORD PTR [rsp+40], xmm2
	movss	DWORD PTR [rsp+32], xmm3
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3671
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3672
	jmp	$LN11@stbtt_Flat
$LN23@stbtt_Flat:
; Line 3674
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	cvtsi2ss xmm3, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm4, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm5, eax
	mov	DWORD PTR [rsp+88], 0
	movss	xmm6, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm6
	movss	DWORD PTR [rsp+72], xmm0
	movss	DWORD PTR [rsp+64], xmm1
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm3
	movss	DWORD PTR [rsp+40], xmm4
	movss	DWORD PTR [rsp+32], xmm5
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3679
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
$LN11@stbtt_Flat:
; Line 3682
	jmp	$LN8@stbtt_Flat
$LN9@stbtt_Flat:
; Line 3683
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 3684
	jmp	$LN5@stbtt_Flat
$LN6@stbtt_Flat:
; Line 3686
	mov	rax, QWORD PTR points$[rsp]
	jmp	SHORT $LN1@stbtt_Flat
$LN18@stbtt_Flat:
$error$25:
; Line 3688
	mov	rcx, QWORD PTR points$[rsp]
	call	QWORD PTR __imp_free
; Line 3689
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
; Line 3690
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rax], 0
; Line 3691
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3692
	xor	eax, eax
$LN1@stbtt_Flat:
; Line 3693
	movaps	xmm6, XMMWORD PTR [rsp+160]
	add	rsp, 184				; 000000b8H
	ret	0
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ENDP ; stbtt_FlattenCurves
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dx0$ = 96
dy0$ = 100
dx1$ = 104
dy1$ = 108
dx2$ = 112
dy2$ = 116
dx$ = 120
dy$ = 124
longlen$ = 128
shortlen$ = 132
x12$1 = 136
y12$2 = 140
ya$3 = 144
xa$4 = 148
y01$5 = 152
x01$6 = 156
y23$7 = 160
x23$8 = 164
yb$9 = 168
xb$10 = 172
my$11 = 176
mx$12 = 180
flatness_squared$ = 184
tv72 = 192
tv84 = 200
points$ = 224
num_points$ = 232
x0$ = 240
y0$ = 248
x1$ = 256
y1$ = 264
x2$ = 272
y2$ = 280
x3$ = 288
y3$ = 296
objspace_flatness_squared$ = 304
n$ = 312
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z PROC ; stbtt__tesselate_cubic
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3576
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 3578
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR dx0$[rsp], xmm0
; Line 3579
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR dy0$[rsp], xmm0
; Line 3580
	movss	xmm0, DWORD PTR x2$[rsp]
	subss	xmm0, DWORD PTR x1$[rsp]
	movss	DWORD PTR dx1$[rsp], xmm0
; Line 3581
	movss	xmm0, DWORD PTR y2$[rsp]
	subss	xmm0, DWORD PTR y1$[rsp]
	movss	DWORD PTR dy1$[rsp], xmm0
; Line 3582
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR dx2$[rsp], xmm0
; Line 3583
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR dy2$[rsp], xmm0
; Line 3584
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR dx$[rsp], xmm0
; Line 3585
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR dy$[rsp], xmm0
; Line 3586
	movss	xmm0, DWORD PTR dx0$[rsp]
	mulss	xmm0, DWORD PTR dx0$[rsp]
	movss	xmm1, DWORD PTR dy0$[rsp]
	mulss	xmm1, DWORD PTR dy0$[rsp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	movsd	QWORD PTR tv72[rsp], xmm0
	movss	xmm1, DWORD PTR dx1$[rsp]
	mulss	xmm1, DWORD PTR dx1$[rsp]
	movss	xmm2, DWORD PTR dy1$[rsp]
	mulss	xmm2, DWORD PTR dy1$[rsp]
	addss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movaps	xmm0, xmm1
	call	sqrt
	movsd	xmm1, QWORD PTR tv72[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv84[rsp], xmm0
	movss	xmm1, DWORD PTR dx2$[rsp]
	mulss	xmm1, DWORD PTR dx2$[rsp]
	movss	xmm2, DWORD PTR dy2$[rsp]
	mulss	xmm2, DWORD PTR dy2$[rsp]
	addss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movaps	xmm0, xmm1
	call	sqrt
	movsd	xmm1, QWORD PTR tv84[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR longlen$[rsp], xmm0
; Line 3587
	movss	xmm0, DWORD PTR dx$[rsp]
	mulss	xmm0, DWORD PTR dx$[rsp]
	movss	xmm1, DWORD PTR dy$[rsp]
	mulss	xmm1, DWORD PTR dy$[rsp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR shortlen$[rsp], xmm0
; Line 3588
	movss	xmm0, DWORD PTR longlen$[rsp]
	mulss	xmm0, DWORD PTR longlen$[rsp]
	movss	xmm1, DWORD PTR shortlen$[rsp]
	mulss	xmm1, DWORD PTR shortlen$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR flatness_squared$[rsp], xmm0
; Line 3590
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3591
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3593
	movss	xmm0, DWORD PTR flatness_squared$[rsp]
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3594
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR x1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x01$6[rsp], xmm0
; Line 3595
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y01$5[rsp], xmm0
; Line 3596
	movss	xmm0, DWORD PTR x1$[rsp]
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x12$1[rsp], xmm0
; Line 3597
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y12$2[rsp], xmm0
; Line 3598
	movss	xmm0, DWORD PTR x2$[rsp]
	addss	xmm0, DWORD PTR x3$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x23$8[rsp], xmm0
; Line 3599
	movss	xmm0, DWORD PTR y2$[rsp]
	addss	xmm0, DWORD PTR y3$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y23$7[rsp], xmm0
; Line 3601
	movss	xmm0, DWORD PTR x01$6[rsp]
	addss	xmm0, DWORD PTR x12$1[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xa$4[rsp], xmm0
; Line 3602
	movss	xmm0, DWORD PTR y01$5[rsp]
	addss	xmm0, DWORD PTR y12$2[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ya$3[rsp], xmm0
; Line 3603
	movss	xmm0, DWORD PTR x12$1[rsp]
	addss	xmm0, DWORD PTR x23$8[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xb$10[rsp], xmm0
; Line 3604
	movss	xmm0, DWORD PTR y12$2[rsp]
	addss	xmm0, DWORD PTR y23$7[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR yb$9[rsp], xmm0
; Line 3606
	movss	xmm0, DWORD PTR xa$4[rsp]
	addss	xmm0, DWORD PTR xb$10[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR mx$12[rsp], xmm0
; Line 3607
	movss	xmm0, DWORD PTR ya$3[rsp]
	addss	xmm0, DWORD PTR yb$9[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR my$11[rsp], xmm0
; Line 3609
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR my$11[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR mx$12[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR ya$3[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR xa$4[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR y01$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR x01$6[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3610
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR y3$[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR x3$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR y23$7[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR x23$8[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR yb$9[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR xb$10[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR my$11[rsp]
	movss	xmm2, DWORD PTR mx$12[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3611
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3612
	movss	xmm3, DWORD PTR y3$[rsp]
	movss	xmm2, DWORD PTR x3$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3613
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
$LN1@stbtt__tes:
; Line 3615
	add	rsp, 216				; 000000d8H
	ret	0
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ENDP ; stbtt__tesselate_cubic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
my$ = 80
mx$ = 84
dx$ = 88
dy$ = 92
points$ = 112
num_points$ = 120
x0$ = 128
y0$ = 136
x1$ = 144
y1$ = 152
x2$ = 160
y2$ = 168
objspace_flatness_squared$ = 176
n$ = 184
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z PROC ; stbtt__tesselate_curve
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3556
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3558
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR mx$[rsp], xmm0
; Line 3559
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR my$[rsp], xmm0
; Line 3561
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR mx$[rsp]
	movss	DWORD PTR dx$[rsp], xmm0
; Line 3562
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR my$[rsp]
	movss	DWORD PTR dy$[rsp], xmm0
; Line 3563
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3564
	mov	eax, 1
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3565
	movss	xmm0, DWORD PTR dx$[rsp]
	mulss	xmm0, DWORD PTR dx$[rsp]
	movss	xmm1, DWORD PTR dy$[rsp]
	mulss	xmm1, DWORD PTR dy$[rsp]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3566
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, DWORD PTR x1$[rsp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR my$[rsp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR mx$[rsp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3567
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, DWORD PTR x2$[rsp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR y2$[rsp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR my$[rsp]
	movss	xmm2, DWORD PTR mx$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3568
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3569
	movss	xmm3, DWORD PTR y2$[rsp]
	movss	xmm2, DWORD PTR x2$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3570
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
; Line 3572
	mov	eax, 1
$LN1@stbtt__tes:
; Line 3573
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ENDP ; stbtt__tesselate_curve
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
points$ = 8
n$ = 16
x$ = 24
y$ = 32
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z PROC	; stbtt__add_point
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3548
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3549
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN2@stbtt__add
	jmp	SHORT $LN1@stbtt__add
$LN2@stbtt__add:
; Line 3550
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR [rcx+rax*8], xmm0
; Line 3551
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
$LN1@stbtt__add:
; Line 3552
	ret	0
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ENDP	; stbtt__add_point
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
i$ = 68
k$ = 72
j$ = 76
p$1 = 80
e$ = 88
m$ = 96
a$2 = 100
b$3 = 104
vsubsample$ = 108
tv66 = 112
tv166 = 116
tv165 = 120
tv168 = 124
y_scale_inv$ = 128
tv129 = 132
result$ = 160
pts$ = 168
wcount$ = 176
windings$ = 184
scale_x$ = 192
scale_y$ = 200
shift_x$ = 208
shift_y$ = 216
off_x$ = 224
off_y$ = 232
invert$ = 240
userdata$ = 248
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z PROC ; stbtt__rasterize
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3491
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 3492
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN15@stbtt__ras
	movss	xmm0, DWORD PTR scale_y$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN16@stbtt__ras:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR y_scale_inv$[rsp], xmm0
; Line 3498
	mov	DWORD PTR vsubsample$[rsp], 1
; Line 3505
	mov	DWORD PTR n$[rsp], 0
; Line 3506
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__ras
$LN2@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__ras
; Line 3507
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3509
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR e$[rsp], rax
; Line 3510
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN11@stbtt__ras
	jmp	$LN1@stbtt__ras
$LN11@stbtt__ras:
; Line 3511
	mov	DWORD PTR n$[rsp], 0
; Line 3513
	mov	DWORD PTR m$[rsp], 0
; Line 3514
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbtt__ras
$LN5@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbtt__ras
; Line 3515
	movsxd	rax, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR pts$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$1[rsp], rax
; Line 3516
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR m$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$[rsp], eax
; Line 3517
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3518
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv129[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv129[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN10@stbtt__ras:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3519
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR b$3[rsp], eax
; Line 3521
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	ucomiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jp	SHORT $LN12@stbtt__ras
	jne	SHORT $LN12@stbtt__ras
; Line 3522
	jmp	SHORT $LN8@stbtt__ras
$LN12@stbtt__ras:
; Line 3524
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
; Line 3525
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN21@stbtt__ras
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	comiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jbe	SHORT $LN19@stbtt__ras
	mov	DWORD PTR tv166[rsp], 1
	jmp	SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
	mov	DWORD PTR tv166[rsp], 0
$LN20@stbtt__ras:
	mov	eax, DWORD PTR tv166[rsp]
	mov	DWORD PTR tv168[rsp], eax
	jmp	SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*8+4]
	comiss	xmm0, DWORD PTR [r8+rax*8+4]
	jbe	SHORT $LN17@stbtt__ras
	mov	DWORD PTR tv165[rsp], 1
	jmp	SHORT $LN18@stbtt__ras
$LN17@stbtt__ras:
	mov	DWORD PTR tv165[rsp], 0
$LN18@stbtt__ras:
	mov	eax, DWORD PTR tv165[rsp]
	mov	DWORD PTR tv168[rsp], eax
$LN22@stbtt__ras:
	cmp	DWORD PTR tv168[rsp], 0
	je	SHORT $LN13@stbtt__ras
; Line 3526
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 1
; Line 3527
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR b$3[rsp], eax
$LN13@stbtt__ras:
; Line 3529
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 3530
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rsp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 3531
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3532
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rsp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3533
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3534
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3535
	jmp	$LN5@stbtt__ras
$LN6@stbtt__ras:
; Line 3539
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	call	?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges
; Line 3542
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR off_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR vsubsample$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ; stbtt__rasterize_sorted_edges
; Line 3544
	mov	rcx, QWORD PTR e$[rsp]
	call	QWORD PTR __imp_free
$LN1@stbtt__ras:
; Line 3545
	add	rsp, 152				; 00000098H
	ret	0
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ENDP ; stbtt__rasterize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
n$ = 56
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z PROC	; stbtt__sort_edges
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3480
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3481
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3482
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_ins_sort
; Line 3483
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ENDP	; stbtt__sort_edges
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
j$2 = 36
m$3 = 40
tv74 = 44
tv85 = 48
tv128 = 52
c12$4 = 56
tv131 = 60
z$5 = 64
c01$6 = 68
c$7 = 72
tv235 = 80
tv252 = 88
tv279 = 96
t$8 = 104
__$ArrayPad$ = 128
p$ = 176
n$ = 184
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_quicksort
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3418
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN2@stbtt__sor:
; Line 3420
	cmp	DWORD PTR n$[rsp], 12
	jle	$LN3@stbtt__sor
; Line 3425
	mov	eax, DWORD PTR n$[rsp]
	sar	eax, 1
	mov	DWORD PTR m$3[rsp], eax
; Line 3426
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR m$3[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN20@stbtt__sor
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN21@stbtt__sor
$LN20@stbtt__sor:
	mov	DWORD PTR tv74[rsp], 0
$LN21@stbtt__sor:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR c01$6[rsp], eax
; Line 3427
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN22@stbtt__sor
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN23@stbtt__sor
$LN22@stbtt__sor:
	mov	DWORD PTR tv85[rsp], 0
$LN23@stbtt__sor:
	mov	eax, DWORD PTR tv85[rsp]
	mov	DWORD PTR c12$4[rsp], eax
; Line 3429
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c01$6[rsp], eax
	je	$LN13@stbtt__sor
; Line 3432
	mov	eax, 20
	imul	rax, rax, 0
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN24@stbtt__sor
	mov	DWORD PTR tv128[rsp], 1
	jmp	SHORT $LN25@stbtt__sor
$LN24@stbtt__sor:
	mov	DWORD PTR tv128[rsp], 0
$LN25@stbtt__sor:
	mov	eax, DWORD PTR tv128[rsp]
	mov	DWORD PTR c$7[rsp], eax
; Line 3435
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c$7[rsp], eax
	jne	SHORT $LN26@stbtt__sor
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN27@stbtt__sor
$LN26@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR tv131[rsp], eax
$LN27@stbtt__sor:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR z$5[rsp], eax
; Line 3436
	movsxd	rax, DWORD PTR z$5[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3437
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR z$5[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv235[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv235[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3438
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN13@stbtt__sor:
; Line 3442
	mov	eax, 20
	imul	rax, rax, 0
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3443
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv252[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv252[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3444
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3447
	mov	DWORD PTR i$1[rsp], 1
; Line 3448
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN4@stbtt__sor:
; Line 3452
	jmp	SHORT $LN9@stbtt__sor
$LN7@stbtt__sor:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__sor:
; Line 3453
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN14@stbtt__sor
	jmp	SHORT $LN8@stbtt__sor
$LN14@stbtt__sor:
; Line 3454
	jmp	SHORT $LN7@stbtt__sor
$LN8@stbtt__sor:
; Line 3455
	jmp	SHORT $LN12@stbtt__sor
$LN10@stbtt__sor:
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN12@stbtt__sor:
; Line 3456
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR j$2[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN15@stbtt__sor
	jmp	SHORT $LN11@stbtt__sor
$LN15@stbtt__sor:
; Line 3457
	jmp	SHORT $LN10@stbtt__sor
$LN11@stbtt__sor:
; Line 3459
	mov	eax, DWORD PTR j$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jl	SHORT $LN16@stbtt__sor
	jmp	$LN5@stbtt__sor
$LN16@stbtt__sor:
; Line 3460
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3461
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv279[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv279[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3462
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3464
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
; Line 3465
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
; Line 3466
	jmp	$LN4@stbtt__sor
$LN5@stbtt__sor:
; Line 3468
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR j$2[rsp], eax
	jge	SHORT $LN17@stbtt__sor
; Line 3469
	mov	edx, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3470
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 3471
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 3472
	jmp	SHORT $LN18@stbtt__sor
$LN17@stbtt__sor:
; Line 3473
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3474
	mov	eax, DWORD PTR j$2[rsp]
	mov	DWORD PTR n$[rsp], eax
$LN18@stbtt__sor:
; Line 3476
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_quicksort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 0
i$ = 4
tv78 = 8
c$1 = 12
b$2 = 16
a$3 = 24
tv142 = 32
t$4 = 40
__$ArrayPad$ = 64
p$ = 112
n$ = 120
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_ins_sort
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3400
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3402
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbtt__sor
$LN2@stbtt__sor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__sor
; Line 3403
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
	lea	rax, QWORD PTR t$4[rsp]
	mov	QWORD PTR a$3[rsp], rax
; Line 3404
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN5@stbtt__sor:
; Line 3405
	cmp	DWORD PTR j$[rsp], 0
	jle	$LN6@stbtt__sor
; Line 3406
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$2[rsp], rax
; Line 3407
	mov	rax, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR a$3[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN10@stbtt__sor
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN11@stbtt__sor
$LN10@stbtt__sor:
	mov	DWORD PTR tv78[rsp], 0
$LN11@stbtt__sor:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR c$1[rsp], eax
; Line 3408
	cmp	DWORD PTR c$1[rsp], 0
	jne	SHORT $LN7@stbtt__sor
	jmp	SHORT $LN6@stbtt__sor
$LN7@stbtt__sor:
; Line 3409
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv142[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv142[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3410
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3411
	jmp	$LN5@stbtt__sor
$LN6@stbtt__sor:
; Line 3412
	mov	eax, DWORD PTR j$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	je	SHORT $LN8@stbtt__sor
; Line 3413
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$4[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN8@stbtt__sor:
; Line 3414
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3415
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_ins_sort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scan_y_top$1 = 48
i$ = 52
j$ = 56
step$2 = 64
y$ = 72
sum$3 = 76
k$4 = 80
m$5 = 84
scanline$ = 88
z$6 = 96
active$ = 104
z$7 = 112
scan_y_bottom$8 = 120
scanline2$ = 128
z$9 = 136
hh$ = 144
scanline_data$ = 176
__$ArrayPad$ = 704
result$ = 736
e$ = 744
n$ = 752
vsubsample$ = 760
off_x$ = 768
off_y$ = 776
userdata$ = 784
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z PROC ; stbtt__rasterize_sorted_edges
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3298
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 728				; 000002d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3299
	mov	QWORD PTR hh$[rsp], 0
	mov	QWORD PTR hh$[rsp+8], 0
	mov	DWORD PTR hh$[rsp+16], 0
; Line 3300
	mov	QWORD PTR active$[rsp], 0
; Line 3301
	mov	DWORD PTR j$[rsp], 0
; Line 3306
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jle	SHORT $LN13@stbtt__ras
; Line 3307
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR scanline$[rsp], rax
	jmp	SHORT $LN14@stbtt__ras
$LN13@stbtt__ras:
; Line 3309
	lea	rax, QWORD PTR scanline_data$[rsp]
	mov	QWORD PTR scanline$[rsp], rax
$LN14@stbtt__ras:
; Line 3311
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR scanline$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR scanline2$[rsp], rax
; Line 3313
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 3314
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR off_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
$LN2@stbtt__ras:
; Line 3316
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__ras
; Line 3318
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR scan_y_top$1[rsp], xmm0
; Line 3319
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR scan_y_bottom$8[rsp], xmm0
; Line 3320
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
; Line 3322
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline$[rsp]
	call	memset
; Line 3323
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	cdqe
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline2$[rsp]
	call	memset
$LN4@stbtt__ras:
; Line 3327
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN5@stbtt__ras
; Line 3328
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$7[rsp], rax
; Line 3329
	mov	rax, QWORD PTR z$7[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jb	SHORT $LN15@stbtt__ras
; Line 3330
	mov	rax, QWORD PTR step$2[rsp]
	mov	rcx, QWORD PTR z$7[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 3331
	mov	rax, QWORD PTR z$7[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN25@stbtt__ras
	jne	SHORT $LN25@stbtt__ras
	mov	r8d, 3331				; 00000d03H
	lea	rdx, OFFSET FLAT:$SG94354
	lea	rcx, OFFSET FLAT:$SG94355
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@stbtt__ras:
; Line 3332
	mov	rax, QWORD PTR z$7[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+20], xmm0
; Line 3333
	mov	rdx, QWORD PTR z$7[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_free
; Line 3334
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
; Line 3335
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
$LN16@stbtt__ras:
; Line 3337
	jmp	$LN4@stbtt__ras
$LN5@stbtt__ras:
$LN6@stbtt__ras:
; Line 3340
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR scan_y_bottom$8[rsp]
	comiss	xmm0, DWORD PTR [rax+4]
	jb	$LN7@stbtt__ras
; Line 3341
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN27@stbtt__ras
	je	$LN17@stbtt__ras
$LN27@stbtt__ras:
; Line 3342
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scan_y_top$1[rsp]
	mov	r8d, DWORD PTR off_x$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ; stbtt__new_active
	mov	QWORD PTR z$6[rsp], rax
; Line 3343
	cmp	QWORD PTR z$6[rsp], 0
	je	SHORT $LN18@stbtt__ras
; Line 3344
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN19@stbtt__ras
	cmp	DWORD PTR off_y$[rsp], 0
	je	SHORT $LN19@stbtt__ras
; Line 3345
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN20@stbtt__ras
; Line 3347
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	movss	DWORD PTR [rax+28], xmm0
$LN20@stbtt__ras:
$LN19@stbtt__ras:
; Line 3350
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR scan_y_top$1[rsp]
	jae	SHORT $LN26@stbtt__ras
	mov	r8d, 3350				; 00000d16H
	lea	rdx, OFFSET FLAT:$SG94360
	lea	rcx, OFFSET FLAT:$SG94361
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN26@stbtt__ras:
; Line 3352
	mov	rax, QWORD PTR z$6[rsp]
	mov	rcx, QWORD PTR active$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3353
	mov	rax, QWORD PTR z$6[rsp]
	mov	QWORD PTR active$[rsp], rax
$LN18@stbtt__ras:
$LN17@stbtt__ras:
; Line 3356
	mov	rax, QWORD PTR e$[rsp]
	add	rax, 20
	mov	QWORD PTR e$[rsp], rax
; Line 3357
	jmp	$LN6@stbtt__ras
$LN7@stbtt__ras:
; Line 3360
	cmp	QWORD PTR active$[rsp], 0
	je	SHORT $LN21@stbtt__ras
; Line 3361
	mov	rax, QWORD PTR scanline2$[rsp]
	add	rax, 4
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	mov	r8d, DWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ; stbtt__fill_active_edges_new
$LN21@stbtt__ras:
; Line 3364
	xorps	xmm0, xmm0
	movss	DWORD PTR sum$3[rsp], xmm0
; Line 3365
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt__ras:
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3368
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline2$[rsp]
	movss	xmm0, DWORD PTR sum$3[rsp]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR sum$3[rsp], xmm0
; Line 3369
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR sum$3[rsp]
	movss	DWORD PTR k$4[rsp], xmm0
; Line 3370
	cvtss2sd xmm0, DWORD PTR k$4[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR k$4[rsp], xmm0
; Line 3371
	cvttss2si eax, DWORD PTR k$4[rsp]
	mov	DWORD PTR m$5[rsp], eax
; Line 3372
	cmp	DWORD PTR m$5[rsp], 255			; 000000ffH
	jle	SHORT $LN22@stbtt__ras
	mov	DWORD PTR m$5[rsp], 255			; 000000ffH
$LN22@stbtt__ras:
; Line 3373
	mov	rax, QWORD PTR result$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax+8]
	mov	eax, ecx
	add	eax, DWORD PTR i$[rsp]
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR m$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3374
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3377
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
$LN11@stbtt__ras:
; Line 3378
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@stbtt__ras
; Line 3379
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$9[rsp], rax
; Line 3380
	mov	rax, QWORD PTR z$9[rsp]
	mov	rcx, QWORD PTR z$9[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR z$9[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3381
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
; Line 3382
	jmp	SHORT $LN11@stbtt__ras
$LN12@stbtt__ras:
; Line 3384
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
; Line 3385
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3386
	jmp	$LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3388
	mov	rdx, QWORD PTR userdata$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_cleanup
; Line 3390
	lea	rax, QWORD PTR scanline_data$[rsp]
	cmp	QWORD PTR scanline$[rsp], rax
	je	SHORT $LN23@stbtt__ras
; Line 3391
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
$LN23@stbtt__ras:
; Line 3392
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 728				; 000002d8H
	ret	0
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ENDP ; stbtt__rasterize_sorted_edges
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$1 = 64
x$2 = 68
x1$3 = 72
x2$4 = 76
y_bottom$ = 80
x3$5 = 84
x_top$6 = 88
x0$7 = 92
x_bottom$8 = 96
x2$9 = 100
sy1$10 = 104
x$11 = 108
sy0$12 = 112
dx$13 = 116
y1$14 = 120
y2$15 = 124
dy$16 = 128
y3$17 = 132
y0$18 = 136
x1$19 = 140
area$20 = 144
t$21 = 148
x$22 = 152
y_final$23 = 156
y_crossing$24 = 160
sign$25 = 164
xb$26 = 168
height$27 = 172
step$28 = 176
tv198 = 180
tv200 = 184
tv254 = 188
tv256 = 192
tv304 = 196
tv306 = 200
tv314 = 204
tv316 = 208
scanline$ = 240
scanline_fill$ = 248
len$ = 256
e$ = 264
y_top$ = 272
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z PROC ; stbtt__fill_active_edges_new
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3083
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 3084
	movss	xmm0, DWORD PTR y_top$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y_bottom$[rsp], xmm0
$LN2@stbtt__fil:
; Line 3086
	cmp	QWORD PTR e$[rsp], 0
	je	$LN3@stbtt__fil
; Line 3090
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN39@stbtt__fil
	mov	r8d, 3090				; 00000c12H
	lea	rdx, OFFSET FLAT:$SG94258
	lea	rcx, OFFSET FLAT:$SG94259
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN39@stbtt__fil:
; Line 3092
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN10@stbtt__fil
	jne	$LN10@stbtt__fil
; Line 3093
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$7[rsp], xmm0
; Line 3094
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x0$7[rsp]
	jbe	$LN12@stbtt__fil
; Line 3095
	movss	xmm0, DWORD PTR x0$7[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN13@stbtt__fil
; Line 3096
	cvttss2si eax, DWORD PTR x0$7[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3097
	cvttss2si eax, DWORD PTR x0$7[rsp]
	inc	eax
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	sub	rcx, 4
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3098
	jmp	SHORT $LN14@stbtt__fil
$LN13@stbtt__fil:
; Line 3099
	mov	rax, QWORD PTR scanline_fill$[rsp]
	sub	rax, 4
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN14@stbtt__fil:
$LN12@stbtt__fil:
; Line 3102
	jmp	$LN11@stbtt__fil
$LN10@stbtt__fil:
; Line 3103
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$1[rsp], xmm0
; Line 3104
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR dx$13[rsp], xmm0
; Line 3105
	movss	xmm0, DWORD PTR x0$1[rsp]
	addss	xmm0, DWORD PTR dx$13[rsp]
	movss	DWORD PTR xb$26[rsp], xmm0
; Line 3108
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR dy$16[rsp], xmm0
; Line 3109
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	comiss	xmm0, DWORD PTR [rax+24]
	jb	SHORT $LN40@stbtt__fil
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN41@stbtt__fil
$LN40@stbtt__fil:
	mov	r8d, 3109				; 00000c25H
	lea	rdx, OFFSET FLAT:$SG94265
	lea	rcx, OFFSET FLAT:$SG94266
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN41@stbtt__fil:
; Line 3114
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jbe	SHORT $LN15@stbtt__fil
; Line 3115
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR dx$13[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3116
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR sy0$12[rsp], xmm0
; Line 3117
	jmp	SHORT $LN16@stbtt__fil
$LN15@stbtt__fil:
; Line 3118
	movss	xmm0, DWORD PTR x0$1[rsp]
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3119
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR sy0$12[rsp], xmm0
$LN16@stbtt__fil:
; Line 3121
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN17@stbtt__fil
; Line 3122
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR dx$13[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3123
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3124
	jmp	SHORT $LN18@stbtt__fil
$LN17@stbtt__fil:
; Line 3125
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3126
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR sy1$10[rsp], xmm0
$LN18@stbtt__fil:
; Line 3129
	movss	xmm0, DWORD PTR x_top$6[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	movss	xmm0, DWORD PTR x_bottom$8[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x_top$6[rsp]
	jbe	$LN19@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN19@stbtt__fil
; Line 3132
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	cvttss2si ecx, DWORD PTR x_bottom$8[rsp]
	cmp	eax, ecx
	jne	$LN21@stbtt__fil
; Line 3135
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x$11[rsp], eax
; Line 3136
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	mov	rax, QWORD PTR e$[rsp]
	mulss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR height$27[rsp], xmm0
; Line 3137
	cmp	DWORD PTR x$11[rsp], 0
	jl	SHORT $LN42@stbtt__fil
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$11[rsp], eax
	jl	SHORT $LN43@stbtt__fil
$LN42@stbtt__fil:
	mov	r8d, 3137				; 00000c41H
	lea	rdx, OFFSET FLAT:$SG94275
	lea	rcx, OFFSET FLAT:$SG94276
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN43@stbtt__fil:
; Line 3138
	cvtsi2ss xmm0, DWORD PTR x$11[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	cvtsi2ss xmm1, DWORD PTR x$11[rsp]
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x_bottom$8[rsp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR x_top$6[rsp]
	movss	xmm0, DWORD PTR height$27[rsp]
	call	?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
	movss	DWORD PTR tv200[rsp], xmm0
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv198[rsp], xmm0
	movss	xmm0, DWORD PTR tv198[rsp]
	addss	xmm0, DWORD PTR tv200[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3139
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR height$27[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3140
	jmp	$LN22@stbtt__fil
$LN21@stbtt__fil:
; Line 3144
	movss	xmm0, DWORD PTR x_top$6[rsp]
	comiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN23@stbtt__fil
; Line 3147
	movss	xmm0, DWORD PTR sy0$12[rsp]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR y_bottom$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy0$12[rsp], xmm0
; Line 3148
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR y_bottom$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3149
	movss	xmm0, DWORD PTR sy0$12[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR sy1$10[rsp]
	movss	DWORD PTR sy0$12[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3150
	movss	xmm0, DWORD PTR x_bottom$8[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR x_top$6[rsp]
	movss	DWORD PTR x_bottom$8[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3151
	movss	xmm0, DWORD PTR dx$13[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx$13[rsp], xmm0
; Line 3152
	movss	xmm0, DWORD PTR dy$16[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy$16[rsp], xmm0
; Line 3153
	movss	xmm0, DWORD PTR x0$1[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x0$1[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR xb$26[rsp], xmm0
$LN23@stbtt__fil:
; Line 3155
	movss	xmm0, DWORD PTR dy$16[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN44@stbtt__fil
	mov	r8d, 3155				; 00000c53H
	lea	rdx, OFFSET FLAT:$SG94278
	lea	rcx, OFFSET FLAT:$SG94279
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN44@stbtt__fil:
; Line 3156
	movss	xmm0, DWORD PTR dx$13[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN45@stbtt__fil
	mov	r8d, 3156				; 00000c54H
	lea	rdx, OFFSET FLAT:$SG94280
	lea	rcx, OFFSET FLAT:$SG94281
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN45@stbtt__fil:
; Line 3158
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x1$19[rsp], eax
; Line 3159
	cvttss2si eax, DWORD PTR x_bottom$8[rsp]
	mov	DWORD PTR x2$9[rsp], eax
; Line 3161
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$1[rsp]
	movss	xmm1, DWORD PTR dy$16[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_top$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_crossing$24[rsp], xmm0
; Line 3164
	cvtsi2ss xmm0, DWORD PTR x2$9[rsp]
	subss	xmm0, DWORD PTR x0$1[rsp]
	movss	xmm1, DWORD PTR dy$16[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_top$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_final$23[rsp], xmm0
; Line 3185
	movss	xmm0, DWORD PTR y_crossing$24[rsp]
	comiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN24@stbtt__fil
; Line 3186
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y_crossing$24[rsp], xmm0
$LN24@stbtt__fil:
; Line 3188
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR sign$25[rsp], xmm0
; Line 3191
	movss	xmm0, DWORD PTR y_crossing$24[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR area$20[rsp], xmm0
; Line 3194
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x_top$6[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR area$20[rsp]
	call	?stbtt__sized_triangle_area@@YAMMM@Z	; stbtt__sized_triangle_area
	movss	DWORD PTR tv256[rsp], xmm0
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv254[rsp], xmm0
	movss	xmm0, DWORD PTR tv254[rsp]
	addss	xmm0, DWORD PTR tv256[rsp]
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3197
	movss	xmm0, DWORD PTR y_final$23[rsp]
	comiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN25@stbtt__fil
; Line 3198
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y_final$23[rsp], xmm0
; Line 3199
	movss	xmm0, DWORD PTR y_final$23[rsp]
	subss	xmm0, DWORD PTR y_crossing$24[rsp]
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	ecx, DWORD PTR x2$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	movss	DWORD PTR dy$16[rsp], xmm0
$LN25@stbtt__fil:
; Line 3212
	movss	xmm0, DWORD PTR sign$25[rsp]
	mulss	xmm0, DWORD PTR dy$16[rsp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR step$28[rsp], xmm0
; Line 3216
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
	jmp	SHORT $LN6@stbtt__fil
$LN4@stbtt__fil:
	mov	eax, DWORD PTR x$22[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
$LN6@stbtt__fil:
	mov	eax, DWORD PTR x2$9[rsp]
	cmp	DWORD PTR x$22[rsp], eax
	jge	SHORT $LN5@stbtt__fil
; Line 3217
	movss	xmm0, DWORD PTR step$28[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR area$20[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3218
	movss	xmm0, DWORD PTR area$20[rsp]
	addss	xmm0, DWORD PTR step$28[rsp]
	movss	DWORD PTR area$20[rsp], xmm0
; Line 3219
	jmp	$LN4@stbtt__fil
$LN5@stbtt__fil:
; Line 3220
	cvtss2sd xmm0, DWORD PTR area$20[rsp]
	call	fabs
	movsd	xmm1, QWORD PTR __real@3ff028f5c0000000
	comisd	xmm1, xmm0
	jae	SHORT $LN46@stbtt__fil
	mov	r8d, 3220				; 00000c94H
	lea	rdx, OFFSET FLAT:$SG94284
	lea	rcx, OFFSET FLAT:$SG94285
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stbtt__fil:
; Line 3221
	movss	xmm0, DWORD PTR y_final$23[rsp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR sy1$10[rsp]
	comiss	xmm1, xmm0
	ja	SHORT $LN47@stbtt__fil
	mov	r8d, 3221				; 00000c95H
	lea	rdx, OFFSET FLAT:$SG94286
	lea	rcx, OFFSET FLAT:$SG94287
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN47@stbtt__fil:
; Line 3225
	cvtsi2ss xmm0, DWORD PTR x2$9[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	cvtsi2ss xmm1, DWORD PTR x2$9[rsp]
	addss	xmm1, DWORD PTR __real@3f800000
	cvtsi2ss xmm2, DWORD PTR x2$9[rsp]
	movss	DWORD PTR tv304[rsp], xmm2
	movss	xmm3, DWORD PTR sy1$10[rsp]
	subss	xmm3, DWORD PTR y_final$23[rsp]
	movss	DWORD PTR tv306[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x_bottom$8[rsp]
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv304[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv306[rsp]
	call	?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR area$20[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv316[rsp], xmm0
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv314[rsp], xmm0
	movss	xmm0, DWORD PTR tv314[rsp]
	addss	xmm0, DWORD PTR tv316[rsp]
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3228
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN22@stbtt__fil:
; Line 3230
	jmp	$LN20@stbtt__fil
$LN19@stbtt__fil:
; Line 3239
	mov	DWORD PTR x$2[rsp], 0
	jmp	SHORT $LN9@stbtt__fil
$LN7@stbtt__fil:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN9@stbtt__fil:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$2[rsp], eax
	jge	$LN8@stbtt__fil
; Line 3254
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y0$18[rsp], xmm0
; Line 3255
	cvtsi2ss xmm0, DWORD PTR x$2[rsp]
	movss	DWORD PTR x1$3[rsp], xmm0
; Line 3256
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x2$4[rsp], xmm0
; Line 3257
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x3$5[rsp], xmm0
; Line 3258
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y3$17[rsp], xmm0
; Line 3263
	cvtsi2ss xmm0, DWORD PTR x$2[rsp]
	subss	xmm0, DWORD PTR x0$1[rsp]
	divss	xmm0, DWORD PTR dx$13[rsp]
	addss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y1$14[rsp], xmm0
; Line 3264
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$1[rsp]
	divss	xmm0, DWORD PTR dx$13[rsp]
	addss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y2$15[rsp], xmm0
; Line 3266
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN26@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN26@stbtt__fil
; Line 3267
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3268
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3269
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN27@stbtt__fil
$LN26@stbtt__fil:
; Line 3270
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN28@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN28@stbtt__fil
; Line 3271
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3272
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3273
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN29@stbtt__fil
$LN28@stbtt__fil:
; Line 3274
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN30@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN30@stbtt__fil
; Line 3275
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3276
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN31@stbtt__fil
$LN30@stbtt__fil:
; Line 3277
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN32@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN32@stbtt__fil
; Line 3278
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3279
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN33@stbtt__fil
$LN32@stbtt__fil:
; Line 3280
	movss	xmm0, DWORD PTR x2$4[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN34@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN34@stbtt__fil
; Line 3281
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3282
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN35@stbtt__fil
$LN34@stbtt__fil:
; Line 3283
	movss	xmm0, DWORD PTR x2$4[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN36@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN36@stbtt__fil
; Line 3284
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3285
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3286
	jmp	SHORT $LN37@stbtt__fil
$LN36@stbtt__fil:
; Line 3287
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN37@stbtt__fil:
$LN35@stbtt__fil:
$LN33@stbtt__fil:
$LN31@stbtt__fil:
$LN29@stbtt__fil:
$LN27@stbtt__fil:
; Line 3289
	jmp	$LN7@stbtt__fil
$LN8@stbtt__fil:
$LN20@stbtt__fil:
$LN11@stbtt__fil:
; Line 3292
	mov	rax, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR e$[rsp], rax
; Line 3293
	jmp	$LN2@stbtt__fil
$LN3@stbtt__fil:
; Line 3294
	add	rsp, 232				; 000000e8H
	ret	0
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ENDP ; stbtt__fill_active_edges_new
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 8
width$ = 16
?stbtt__sized_triangle_area@@YAMMM@Z PROC		; stbtt__sized_triangle_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3078
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 3079
	movss	xmm0, DWORD PTR height$[rsp]
	mulss	xmm0, DWORD PTR width$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
; Line 3080
	ret	0
?stbtt__sized_triangle_area@@YAMMM@Z ENDP		; stbtt__sized_triangle_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
tx0$ = 56
tx1$ = 64
bx0$ = 72
bx1$ = 80
?stbtt__position_trapezoid_area@@YAMMMMMM@Z PROC	; stbtt__position_trapezoid_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3073
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3074
	movss	xmm0, DWORD PTR bx1$[rsp]
	subss	xmm0, DWORD PTR bx0$[rsp]
	movss	xmm1, DWORD PTR tx1$[rsp]
	subss	xmm1, DWORD PTR tx0$[rsp]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR height$[rsp]
	call	?stbtt__sized_trapezoid_area@@YAMMMM@Z	; stbtt__sized_trapezoid_area
; Line 3075
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__position_trapezoid_area@@YAMMMMMM@Z ENDP	; stbtt__position_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
top_width$ = 56
bottom_width$ = 64
?stbtt__sized_trapezoid_area@@YAMMMM@Z PROC		; stbtt__sized_trapezoid_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3066
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3067
	movss	xmm0, DWORD PTR top_width$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@stbtt__siz
	mov	r8d, 3067				; 00000bfbH
	lea	rdx, OFFSET FLAT:$SG94175
	lea	rcx, OFFSET FLAT:$SG94176
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbtt__siz:
; Line 3068
	movss	xmm0, DWORD PTR bottom_width$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN4@stbtt__siz
	mov	r8d, 3068				; 00000bfcH
	lea	rdx, OFFSET FLAT:$SG94177
	lea	rcx, OFFSET FLAT:$SG94178
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__siz:
; Line 3069
	movss	xmm0, DWORD PTR top_width$[rsp]
	addss	xmm0, DWORD PTR bottom_width$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR height$[rsp]
; Line 3070
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__sized_trapezoid_area@@YAMMMM@Z ENDP		; stbtt__sized_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scanline$ = 48
x$ = 56
e$ = 64
x0$ = 72
y0$ = 80
x1$ = 88
y1$ = 96
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z PROC ; stbtt__handle_clipped_edge
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3029
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3030
	movss	xmm0, DWORD PTR y0$[rsp]
	ucomiss	xmm0, DWORD PTR y1$[rsp]
	jp	SHORT $LN2@stbtt__han
	jne	SHORT $LN2@stbtt__han
	jmp	$LN1@stbtt__han
$LN2@stbtt__han:
; Line 3031
	movss	xmm0, DWORD PTR y1$[rsp]
	comiss	xmm0, DWORD PTR y0$[rsp]
	ja	SHORT $LN20@stbtt__han
	mov	r8d, 3031				; 00000bd7H
	lea	rdx, OFFSET FLAT:$SG94134
	lea	rcx, OFFSET FLAT:$SG94135
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@stbtt__han:
; Line 3032
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR [rcx+24]
	jae	SHORT $LN21@stbtt__han
	mov	r8d, 3032				; 00000bd8H
	lea	rdx, OFFSET FLAT:$SG94136
	lea	rcx, OFFSET FLAT:$SG94137
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@stbtt__han:
; Line 3033
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN3@stbtt__han
	jmp	$LN1@stbtt__han
$LN3@stbtt__han:
; Line 3034
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y1$[rsp]
	jbe	SHORT $LN4@stbtt__han
	jmp	$LN1@stbtt__han
$LN4@stbtt__han:
; Line 3035
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y0$[rsp]
	jbe	SHORT $LN5@stbtt__han
; Line 3036
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+24]
	subss	xmm1, DWORD PTR y0$[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	subss	xmm1, DWORD PTR y0$[rsp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x0$[rsp], xmm0
; Line 3037
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR y0$[rsp], xmm0
$LN5@stbtt__han:
; Line 3039
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y1$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN6@stbtt__han
; Line 3040
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+28]
	subss	xmm1, DWORD PTR y1$[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	subss	xmm1, DWORD PTR y0$[rsp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x1$[rsp], xmm0
; Line 3041
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR y1$[rsp], xmm0
$LN6@stbtt__han:
; Line 3044
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN7@stbtt__han
	jne	SHORT $LN7@stbtt__han
; Line 3045
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN22@stbtt__han
	mov	r8d, 3045				; 00000be5H
	lea	rdx, OFFSET FLAT:$SG94144
	lea	rcx, OFFSET FLAT:$SG94145
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN22@stbtt__han:
	jmp	$LN8@stbtt__han
$LN7@stbtt__han:
; Line 3046
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN9@stbtt__han
	jne	SHORT $LN9@stbtt__han
; Line 3047
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jae	SHORT $LN23@stbtt__han
	mov	r8d, 3047				; 00000be7H
	lea	rdx, OFFSET FLAT:$SG94148
	lea	rcx, OFFSET FLAT:$SG94149
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@stbtt__han:
	jmp	$LN10@stbtt__han
$LN9@stbtt__han:
; Line 3048
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN11@stbtt__han
; Line 3049
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN24@stbtt__han
	mov	r8d, 3049				; 00000be9H
	lea	rdx, OFFSET FLAT:$SG94152
	lea	rcx, OFFSET FLAT:$SG94153
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN24@stbtt__han:
	jmp	$LN12@stbtt__han
$LN11@stbtt__han:
; Line 3050
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN13@stbtt__han
; Line 3051
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jae	SHORT $LN25@stbtt__han
	mov	r8d, 3051				; 00000bebH
	lea	rdx, OFFSET FLAT:$SG94156
	lea	rcx, OFFSET FLAT:$SG94157
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@stbtt__han:
	jmp	SHORT $LN14@stbtt__han
$LN13@stbtt__han:
; Line 3053
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN26@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN27@stbtt__han
$LN26@stbtt__han:
	mov	r8d, 3053				; 00000bedH
	lea	rdx, OFFSET FLAT:$SG94158
	lea	rcx, OFFSET FLAT:$SG94159
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@stbtt__han:
$LN14@stbtt__han:
$LN12@stbtt__han:
$LN10@stbtt__han:
$LN8@stbtt__han:
; Line 3055
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN15@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x1$[rsp]
	jb	SHORT $LN15@stbtt__han
; Line 3056
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN16@stbtt__han
$LN15@stbtt__han:
; Line 3057
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
; Line 3058
	jmp	$LN18@stbtt__han
$LN17@stbtt__han:
; Line 3060
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN28@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN29@stbtt__han
$LN28@stbtt__han:
	mov	r8d, 3060				; 00000bf4H
	lea	rdx, OFFSET FLAT:$SG94164
	lea	rcx, OFFSET FLAT:$SG94165
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@stbtt__han:
; Line 3061
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtsi2ss xmm2, DWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR x1$[rsp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	addss	xmm1, xmm2
	divss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN18@stbtt__han:
$LN16@stbtt__han:
$LN1@stbtt__han:
; Line 3063
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ENDP ; stbtt__handle_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dxdy$ = 32
tv86 = 36
tv132 = 40
z$ = 48
hh$ = 80
e$ = 88
off_x$ = 96
start_point$ = 104
userdata$ = 112
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z PROC ; stbtt__new_active
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2858
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2859
	mov	r8, QWORD PTR userdata$[rsp]
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ; stbtt__hheap_alloc
	mov	QWORD PTR z$[rsp], rax
; Line 2860
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	subss	xmm1, DWORD PTR [rcx+4]
	divss	xmm0, xmm1
	movss	DWORD PTR dxdy$[rsp], xmm0
; Line 2861
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN4@stbtt__new
	mov	r8d, 2861				; 00000b2dH
	lea	rdx, OFFSET FLAT:$SG94105
	lea	rcx, OFFSET FLAT:$SG94106
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__new:
; Line 2863
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbtt__new
	mov	rax, QWORD PTR z$[rsp]
	jmp	$LN1@stbtt__new
$LN2@stbtt__new:
; Line 2864
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR dxdy$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 2865
	movss	xmm0, DWORD PTR dxdy$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@stbtt__new
	je	SHORT $LN5@stbtt__new
$LN9@stbtt__new:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dxdy$[rsp]
	movss	DWORD PTR tv86[rsp], xmm0
	jmp	SHORT $LN6@stbtt__new
$LN5@stbtt__new:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv86[rsp], xmm0
$LN6@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR tv86[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2866
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR start_point$[rsp]
	subss	xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR dxdy$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2867
	cvtsi2ss xmm0, DWORD PTR off_x$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2868
	mov	rax, QWORD PTR e$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN7@stbtt__new
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv132[rsp], xmm0
	jmp	SHORT $LN8@stbtt__new
$LN7@stbtt__new:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv132[rsp], xmm0
$LN8@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR tv132[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 2869
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+24], xmm0
; Line 2870
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+28], xmm0
; Line 2871
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2872
	mov	rax, QWORD PTR z$[rsp]
$LN1@stbtt__new:
; Line 2873
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ENDP ; stbtt__new_active
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
n$1 = 40
hh$ = 64
userdata$ = 72
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_cleanup
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2798
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2799
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rsp], rax
$LN2@stbtt__hhe:
; Line 2800
	cmp	QWORD PTR c$[rsp], 0
	je	SHORT $LN3@stbtt__hhe
; Line 2801
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR n$1[rsp], rax
; Line 2802
	mov	rcx, QWORD PTR c$[rsp]
	call	QWORD PTR __imp_free
; Line 2803
	mov	rax, QWORD PTR n$1[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 2804
	jmp	SHORT $LN2@stbtt__hhe
$LN3@stbtt__hhe:
; Line 2805
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hh$ = 8
p$ = 16
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_free
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2792
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 2793
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 2794
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 2795
	ret	0
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv73 = 36
count$1 = 40
c$2 = 48
p$3 = 56
hh$ = 80
size$ = 88
userdata$ = 96
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z PROC ; stbtt__hheap_alloc
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2771
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2772
	mov	rax, QWORD PTR hh$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@stbtt__hhe
; Line 2773
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR p$3[rsp], rax
; Line 2774
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rcx
; Line 2775
	mov	rax, QWORD PTR p$3[rsp]
	jmp	$LN1@stbtt__hhe
; Line 2776
	jmp	$LN3@stbtt__hhe
$LN2@stbtt__hhe:
; Line 2777
	mov	rax, QWORD PTR hh$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	$LN4@stbtt__hhe
; Line 2778
	cmp	QWORD PTR size$[rsp], 32		; 00000020H
	jae	SHORT $LN9@stbtt__hhe
	mov	DWORD PTR tv73[rsp], 2000		; 000007d0H
	jmp	SHORT $LN10@stbtt__hhe
$LN9@stbtt__hhe:
	cmp	QWORD PTR size$[rsp], 128		; 00000080H
	jae	SHORT $LN7@stbtt__hhe
	mov	DWORD PTR tv72[rsp], 800		; 00000320H
	jmp	SHORT $LN8@stbtt__hhe
$LN7@stbtt__hhe:
	mov	DWORD PTR tv72[rsp], 100		; 00000064H
$LN8@stbtt__hhe:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN10@stbtt__hhe:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR count$1[rsp], eax
; Line 2779
	movsxd	rax, DWORD PTR count$1[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	add	rax, 8
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR c$2[rsp], rax
; Line 2780
	cmp	QWORD PTR c$2[rsp], 0
	jne	SHORT $LN5@stbtt__hhe
; Line 2781
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__hhe
$LN5@stbtt__hhe:
; Line 2782
	mov	rax, QWORD PTR c$2[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2783
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR c$2[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2784
	mov	rax, QWORD PTR hh$[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	mov	DWORD PTR [rax+16], ecx
$LN4@stbtt__hhe:
; Line 2786
	mov	rax, QWORD PTR hh$[rsp]
	mov	eax, DWORD PTR [rax+16]
	dec	eax
	mov	rcx, QWORD PTR hh$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 2787
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR hh$[rsp]
	movsxd	rcx, DWORD PTR [rcx+16]
	mov	rdx, QWORD PTR size$[rsp]
	imul	rdx, rcx
	mov	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+8]
$LN3@stbtt__hhe:
$LN1@stbtt__hhe:
; Line 2789
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ENDP ; stbtt__hheap_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
table$1 = 32
class2Count$2 = 40
i$ = 44
sti$ = 48
lookupOffset$3 = 52
lookupType$4 = 56
subTableCount$5 = 60
subtableOffset$6 = 64
coverageOffset$7 = 68
posFormat$8 = 72
valueFormat1$9 = 76
valueFormat2$10 = 80
pairPosOffset$11 = 84
pairSetCount$12 = 88
pairValueCount$13 = 92
secondGlyph$14 = 96
xAdvance$15 = 100
valueFormat1$16 = 104
classDef1Offset$17 = 108
classDef2Offset$18 = 112
class1Count$19 = 116
xAdvance$20 = 120
valueFormat2$21 = 124
lookupListOffset$ = 128
coverageIndex$22 = 132
r$23 = 136
m$24 = 140
l$25 = 144
glyph1class$26 = 148
glyph2class$27 = 152
lookupCount$ = 156
straw$28 = 160
needle$29 = 164
tv159 = 168
data$ = 176
lookupTable$30 = 184
valueRecordPairSizeInBytes$31 = 192
lookupList$ = 200
pairValueTable$32 = 208
pairValue$33 = 216
subTableOffsets$34 = 224
pairValueArray$35 = 232
class1Records$36 = 240
class2Records$37 = 248
info$ = 272
glyph1$ = 280
glyph2$ = 288
?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z PROC ; stbtt__GetGlyphGPOSInfoAdvance
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2497
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
; Line 2504
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN12@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
; Line 2506
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2508
	mov	rcx, QWORD PTR data$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN13@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN13@stbtt__Get:
; Line 2509
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	test	eax, eax
	je	SHORT $LN14@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN14@stbtt__Get:
; Line 2511
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupListOffset$[rsp], ax
; Line 2512
	movzx	eax, WORD PTR lookupListOffset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupList$[rsp], rax
; Line 2513
	mov	rcx, QWORD PTR lookupList$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupCount$[rsp], ax
; Line 2515
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__Get:
	movzx	eax, WORD PTR lookupCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__Get
; Line 2516
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR lookupList$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupOffset$3[rsp], ax
; Line 2517
	movzx	eax, WORD PTR lookupOffset$3[rsp]
	mov	rcx, QWORD PTR lookupList$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupTable$30[rsp], rax
; Line 2519
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupType$4[rsp], ax
; Line 2520
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR subTableCount$5[rsp], ax
; Line 2521
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 6
	mov	QWORD PTR subTableOffsets$34[rsp], rax
; Line 2522
	movzx	eax, WORD PTR lookupType$4[rsp]
	cmp	eax, 2
	je	SHORT $LN15@stbtt__Get
; Line 2523
	jmp	$LN2@stbtt__Get
$LN15@stbtt__Get:
; Line 2525
	mov	DWORD PTR sti$[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR sti$[rsp]
	inc	eax
	mov	DWORD PTR sti$[rsp], eax
$LN7@stbtt__Get:
	movzx	eax, WORD PTR subTableCount$5[rsp]
	cmp	DWORD PTR sti$[rsp], eax
	jge	$LN6@stbtt__Get
; Line 2526
	mov	eax, DWORD PTR sti$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR subTableOffsets$34[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR subtableOffset$6[rsp], ax
; Line 2527
	movzx	eax, WORD PTR subtableOffset$6[rsp]
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR table$1[rsp], rax
; Line 2528
	mov	rcx, QWORD PTR table$1[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR posFormat$8[rsp], ax
; Line 2529
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR coverageOffset$7[rsp], ax
; Line 2530
	movzx	eax, WORD PTR coverageOffset$7[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	?stbtt__GetCoverageIndex@@YAHPEAEH@Z	; stbtt__GetCoverageIndex
	mov	DWORD PTR coverageIndex$22[rsp], eax
; Line 2531
	cmp	DWORD PTR coverageIndex$22[rsp], -1
	jne	SHORT $LN16@stbtt__Get
	jmp	$LN5@stbtt__Get
$LN16@stbtt__Get:
; Line 2533
	movzx	eax, WORD PTR posFormat$8[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 1
	je	SHORT $LN17@stbtt__Get
	cmp	DWORD PTR tv159[rsp], 2
	je	$LN25@stbtt__Get
	jmp	$LN32@stbtt__Get
$LN17@stbtt__Get:
; Line 2537
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat1$9[rsp], ax
; Line 2538
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat2$10[rsp], ax
; Line 2539
	movzx	eax, WORD PTR valueFormat1$9[rsp]
	cmp	eax, 4
	jne	$LN18@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$10[rsp]
	test	eax, eax
	jne	$LN18@stbtt__Get
; Line 2540
	mov	DWORD PTR valueRecordPairSizeInBytes$31[rsp], 2
; Line 2541
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairSetCount$12[rsp], ax
; Line 2542
	mov	eax, DWORD PTR coverageIndex$22[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR table$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairPosOffset$11[rsp], ax
; Line 2543
	movzx	eax, WORD PTR pairPosOffset$11[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValueTable$32[rsp], rax
; Line 2544
	mov	rcx, QWORD PTR pairValueTable$32[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairValueCount$13[rsp], ax
; Line 2545
	mov	rax, QWORD PTR pairValueTable$32[rsp]
	add	rax, 2
	mov	QWORD PTR pairValueArray$35[rsp], rax
; Line 2547
	movzx	eax, WORD PTR pairSetCount$12[rsp]
	cmp	DWORD PTR coverageIndex$22[rsp], eax
	jl	SHORT $LN20@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN20@stbtt__Get:
; Line 2549
	mov	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$29[rsp], eax
; Line 2550
	movzx	eax, WORD PTR pairValueCount$13[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
; Line 2551
	mov	DWORD PTR l$25[rsp], 0
$LN10@stbtt__Get:
; Line 2554
	mov	eax, DWORD PTR r$23[rsp]
	cmp	DWORD PTR l$25[rsp], eax
	jg	$LN11@stbtt__Get
; Line 2557
	mov	eax, DWORD PTR r$23[rsp]
	mov	ecx, DWORD PTR l$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$24[rsp], eax
; Line 2558
	mov	eax, DWORD PTR valueRecordPairSizeInBytes$31[rsp]
	add	eax, 2
	imul	eax, DWORD PTR m$24[rsp]
	cdqe
	mov	rcx, QWORD PTR pairValueArray$35[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValue$33[rsp], rax
; Line 2559
	mov	rcx, QWORD PTR pairValue$33[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR secondGlyph$14[rsp], ax
; Line 2560
	movzx	eax, WORD PTR secondGlyph$14[rsp]
	mov	DWORD PTR straw$28[rsp], eax
; Line 2561
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jge	SHORT $LN21@stbtt__Get
; Line 2562
	mov	eax, DWORD PTR m$24[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
	jmp	SHORT $LN22@stbtt__Get
$LN21@stbtt__Get:
; Line 2563
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jle	SHORT $LN23@stbtt__Get
; Line 2564
	mov	eax, DWORD PTR m$24[rsp]
	inc	eax
	mov	DWORD PTR l$25[rsp], eax
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 2566
	mov	rax, QWORD PTR pairValue$33[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR xAdvance$15[rsp], ax
; Line 2567
	movsx	eax, WORD PTR xAdvance$15[rsp]
	jmp	$LN1@stbtt__Get
$LN24@stbtt__Get:
$LN22@stbtt__Get:
; Line 2569
	jmp	$LN10@stbtt__Get
$LN11@stbtt__Get:
; Line 2570
	jmp	SHORT $LN19@stbtt__Get
$LN18@stbtt__Get:
; Line 2571
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 2572
	jmp	$LN8@stbtt__Get
$LN25@stbtt__Get:
; Line 2576
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat1$16[rsp], ax
; Line 2577
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat2$21[rsp], ax
; Line 2578
	movzx	eax, WORD PTR valueFormat1$16[rsp]
	cmp	eax, 4
	jne	$LN26@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$21[rsp]
	test	eax, eax
	jne	$LN26@stbtt__Get
; Line 2579
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDef1Offset$17[rsp], ax
; Line 2580
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDef2Offset$18[rsp], ax
; Line 2581
	movzx	eax, WORD PTR classDef1Offset$17[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	?stbtt__GetGlyphClass@@YAHPEAEH@Z	; stbtt__GetGlyphClass
	mov	DWORD PTR glyph1class$26[rsp], eax
; Line 2582
	movzx	eax, WORD PTR classDef2Offset$18[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph2$[rsp]
	mov	rcx, rax
	call	?stbtt__GetGlyphClass@@YAHPEAEH@Z	; stbtt__GetGlyphClass
	mov	DWORD PTR glyph2class$27[rsp], eax
; Line 2584
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 12
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR class1Count$19[rsp], ax
; Line 2585
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 14
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR class2Count$2[rsp], ax
; Line 2589
	cmp	DWORD PTR glyph1class$26[rsp], 0
	jl	SHORT $LN29@stbtt__Get
	movzx	eax, WORD PTR class1Count$19[rsp]
	cmp	DWORD PTR glyph1class$26[rsp], eax
	jl	SHORT $LN28@stbtt__Get
$LN29@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN28@stbtt__Get:
; Line 2590
	cmp	DWORD PTR glyph2class$27[rsp], 0
	jl	SHORT $LN31@stbtt__Get
	movzx	eax, WORD PTR class2Count$2[rsp]
	cmp	DWORD PTR glyph2class$27[rsp], eax
	jl	SHORT $LN30@stbtt__Get
$LN31@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN30@stbtt__Get:
; Line 2592
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 16
	mov	QWORD PTR class1Records$36[rsp], rax
; Line 2593
	movzx	eax, WORD PTR class2Count$2[rsp]
	mov	ecx, DWORD PTR glyph1class$26[rsp]
	imul	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class1Records$36[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR class2Records$37[rsp], rax
; Line 2594
	mov	eax, DWORD PTR glyph2class$27[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class2Records$37[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR xAdvance$20[rsp], ax
; Line 2595
	movsx	eax, WORD PTR xAdvance$20[rsp]
	jmp	SHORT $LN1@stbtt__Get
; Line 2596
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 2597
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN27@stbtt__Get:
; Line 2598
	jmp	SHORT $LN8@stbtt__Get
$LN32@stbtt__Get:
; Line 2602
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN8@stbtt__Get:
; Line 2604
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 2605
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2607
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2608
	add	rsp, 264				; 00000108H
	ret	0
?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ENDP ; stbtt__GetGlyphGPOSInfoAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
startGlyphID$1 = 32
classDefFormat$ = 36
glyphCount$2 = 40
classRangeCount$3 = 44
r$4 = 48
m$5 = 52
l$6 = 56
tv67 = 60
needle$7 = 64
strawStart$8 = 68
strawEnd$9 = 72
classRangeRecord$10 = 80
classDef1ValueArray$11 = 88
classRangeRecords$12 = 96
classDefTable$ = 128
glyph$ = 136
?stbtt__GetGlyphClass@@YAHPEAEH@Z PROC			; stbtt__GetGlyphClass
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2448
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2449
	mov	rcx, QWORD PTR classDefTable$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDefFormat$[rsp], ax
; Line 2450
	movzx	eax, WORD PTR classDefFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN6@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN8@stbtt__Get
	jmp	$LN13@stbtt__Get
$LN6@stbtt__Get:
; Line 2453
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR startGlyphID$1[rsp], ax
; Line 2454
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2455
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 6
	mov	QWORD PTR classDef1ValueArray$11[rsp], rax
; Line 2457
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	cmp	DWORD PTR glyph$[rsp], eax
	jl	SHORT $LN7@stbtt__Get
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	movzx	ecx, WORD PTR glyphCount$2[rsp]
	add	eax, ecx
	cmp	DWORD PTR glyph$[rsp], eax
	jge	SHORT $LN7@stbtt__Get
; Line 2458
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	mov	ecx, DWORD PTR glyph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR classDef1ValueArray$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt__Get
$LN7@stbtt__Get:
; Line 2459
	jmp	$LN2@stbtt__Get
$LN8@stbtt__Get:
; Line 2463
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classRangeCount$3[rsp], ax
; Line 2464
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	QWORD PTR classRangeRecords$12[rsp], rax
; Line 2467
	mov	DWORD PTR l$6[rsp], 0
	movzx	eax, WORD PTR classRangeCount$3[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
; Line 2468
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$7[rsp], eax
$LN4@stbtt__Get:
; Line 2469
	mov	eax, DWORD PTR r$4[rsp]
	cmp	DWORD PTR l$6[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2471
	mov	eax, DWORD PTR r$4[rsp]
	mov	ecx, DWORD PTR l$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$5[rsp], eax
; Line 2472
	imul	eax, DWORD PTR m$5[rsp], 6
	cdqe
	mov	rcx, QWORD PTR classRangeRecords$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR classRangeRecord$10[rsp], rax
; Line 2473
	mov	rcx, QWORD PTR classRangeRecord$10[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$8[rsp], eax
; Line 2474
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$9[rsp], eax
; Line 2475
	mov	eax, DWORD PTR strawStart$8[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2476
	mov	eax, DWORD PTR m$5[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2477
	mov	eax, DWORD PTR strawEnd$9[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2478
	mov	eax, DWORD PTR m$5[rsp]
	inc	eax
	mov	DWORD PTR l$6[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2480
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	SHORT $LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2481
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2482
	jmp	SHORT $LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2486
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2490
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2491
	add	rsp, 120				; 00000078H
	ret	0
?stbtt__GetGlyphClass@@YAHPEAEH@Z ENDP			; stbtt__GetGlyphClass
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$1 = 32
coverageFormat$ = 36
glyphCount$2 = 40
glyphID$3 = 44
rangeCount$4 = 48
startCoverageIndex$5 = 52
r$6 = 56
l$7 = 60
r$8 = 64
m$9 = 68
l$10 = 72
tv67 = 76
straw$11 = 80
needle$12 = 84
needle$13 = 88
strawStart$14 = 92
strawEnd$15 = 96
rangeRecord$16 = 104
glyphArray$17 = 112
rangeArray$18 = 120
coverageTable$ = 144
glyph$ = 152
?stbtt__GetCoverageIndex@@YAHPEAEH@Z PROC		; stbtt__GetCoverageIndex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2390
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2391
	mov	rcx, QWORD PTR coverageTable$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR coverageFormat$[rsp], ax
; Line 2392
	movzx	eax, WORD PTR coverageFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN8@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN13@stbtt__Get
	jmp	$LN18@stbtt__Get
$LN8@stbtt__Get:
; Line 2394
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2397
	mov	DWORD PTR l$7[rsp], 0
	movzx	eax, WORD PTR glyphCount$2[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
; Line 2398
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$12[rsp], eax
$LN4@stbtt__Get:
; Line 2399
	mov	eax, DWORD PTR r$6[rsp]
	cmp	DWORD PTR l$7[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2400
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR glyphArray$17[rsp], rax
; Line 2402
	mov	eax, DWORD PTR r$6[rsp]
	mov	ecx, DWORD PTR l$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$1[rsp], eax
; Line 2403
	mov	eax, DWORD PTR m$1[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR glyphArray$17[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphID$3[rsp], ax
; Line 2404
	movzx	eax, WORD PTR glyphID$3[rsp]
	mov	DWORD PTR straw$11[rsp], eax
; Line 2405
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2406
	mov	eax, DWORD PTR m$1[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2407
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2408
	mov	eax, DWORD PTR m$1[rsp]
	inc	eax
	mov	DWORD PTR l$7[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2410
	mov	eax, DWORD PTR m$1[rsp]
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2412
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2413
	jmp	$LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2417
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR rangeCount$4[rsp], ax
; Line 2418
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR rangeArray$18[rsp], rax
; Line 2421
	mov	DWORD PTR l$10[rsp], 0
	movzx	eax, WORD PTR rangeCount$4[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
; Line 2422
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$13[rsp], eax
$LN6@stbtt__Get:
; Line 2423
	mov	eax, DWORD PTR r$8[rsp]
	cmp	DWORD PTR l$10[rsp], eax
	jg	$LN7@stbtt__Get
; Line 2425
	mov	eax, DWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR l$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$9[rsp], eax
; Line 2426
	imul	eax, DWORD PTR m$9[rsp], 6
	cdqe
	mov	rcx, QWORD PTR rangeArray$18[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR rangeRecord$16[rsp], rax
; Line 2427
	mov	rcx, QWORD PTR rangeRecord$16[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$14[rsp], eax
; Line 2428
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$15[rsp], eax
; Line 2429
	mov	eax, DWORD PTR strawStart$14[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jge	SHORT $LN14@stbtt__Get
; Line 2430
	mov	eax, DWORD PTR m$9[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
	jmp	SHORT $LN15@stbtt__Get
$LN14@stbtt__Get:
; Line 2431
	mov	eax, DWORD PTR strawEnd$15[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jle	SHORT $LN16@stbtt__Get
; Line 2432
	mov	eax, DWORD PTR m$9[rsp]
	inc	eax
	mov	DWORD PTR l$10[rsp], eax
	jmp	SHORT $LN17@stbtt__Get
$LN16@stbtt__Get:
; Line 2434
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR startCoverageIndex$5[rsp], ax
; Line 2435
	movzx	eax, WORD PTR startCoverageIndex$5[rsp]
	add	eax, DWORD PTR glyph$[rsp]
	sub	eax, DWORD PTR strawStart$14[rsp]
	jmp	SHORT $LN1@stbtt__Get
$LN17@stbtt__Get:
$LN15@stbtt__Get:
; Line 2437
	jmp	$LN6@stbtt__Get
$LN7@stbtt__Get:
; Line 2438
	jmp	SHORT $LN2@stbtt__Get
$LN18@stbtt__Get:
; Line 2441
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2444
	mov	eax, -1
$LN1@stbtt__Get:
; Line 2445
	add	rsp, 136				; 00000088H
	ret	0
?stbtt__GetCoverageIndex@@YAHPEAEH@Z ENDP		; stbtt__GetCoverageIndex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
r$ = 36
l$ = 40
straw$ = 44
needle$ = 48
data$ = 56
info$ = 80
glyph1$ = 88
glyph2$ = 96
?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z PROC ; stbtt__GetGlyphKernInfoAdvance
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2360
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2361
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2366
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN4@stbtt__Get
; Line 2367
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN4@stbtt__Get:
; Line 2368
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN5@stbtt__Get
; Line 2369
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN5@stbtt__Get:
; Line 2370
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN6@stbtt__Get
; Line 2371
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN6@stbtt__Get:
; Line 2373
	mov	DWORD PTR l$[rsp], 0
; Line 2374
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	dec	eax
	mov	DWORD PTR r$[rsp], eax
; Line 2375
	mov	eax, DWORD PTR glyph1$[rsp]
	shl	eax, 16
	or	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$[rsp], eax
$LN2@stbtt__Get:
; Line 2376
	mov	eax, DWORD PTR r$[rsp]
	cmp	DWORD PTR l$[rsp], eax
	jg	SHORT $LN3@stbtt__Get
; Line 2377
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR l$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$[rsp], eax
; Line 2378
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR straw$[rsp], eax
; Line 2379
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jae	SHORT $LN7@stbtt__Get
; Line 2380
	mov	eax, DWORD PTR m$[rsp]
	dec	eax
	mov	DWORD PTR r$[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
; Line 2381
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jbe	SHORT $LN9@stbtt__Get
; Line 2382
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2384
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	jmp	SHORT $LN1@stbtt__Get
$LN10@stbtt__Get:
$LN8@stbtt__Get:
; Line 2385
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2386
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2387
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ENDP ; stbtt__GetGlyphKernInfoAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output_ctx$ = 32
count_ctx$ = 88
info$ = 160
glyph_index$ = 168
pvertices$ = 176
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeT2
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2270
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 2272
	mov	DWORD PTR count_ctx$[rsp], 1
	mov	DWORD PTR count_ctx$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+20], xmm0
	mov	DWORD PTR count_ctx$[rsp+24], 0
	mov	DWORD PTR count_ctx$[rsp+28], 0
	mov	DWORD PTR count_ctx$[rsp+32], 0
	mov	DWORD PTR count_ctx$[rsp+36], 0
	mov	QWORD PTR count_ctx$[rsp+40], 0
	mov	DWORD PTR count_ctx$[rsp+48], 0
; Line 2273
	mov	DWORD PTR output_ctx$[rsp], 0
	mov	DWORD PTR output_ctx$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+20], xmm0
	mov	DWORD PTR output_ctx$[rsp+24], 0
	mov	DWORD PTR output_ctx$[rsp+28], 0
	mov	DWORD PTR output_ctx$[rsp+32], 0
	mov	DWORD PTR output_ctx$[rsp+36], 0
	mov	QWORD PTR output_ctx$[rsp+40], 0
	mov	DWORD PTR output_ctx$[rsp+48], 0
; Line 2274
	lea	r8, QWORD PTR count_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN2@stbtt__Get
; Line 2275
	movsxd	rax, DWORD PTR count_ctx$[rsp+48]
	imul	rax, rax, 14
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2276
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR output_ctx$[rsp+40], rax
; Line 2277
	lea	r8, QWORD PTR output_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN3@stbtt__Get
; Line 2278
	mov	eax, DWORD PTR count_ctx$[rsp+48]
	cmp	DWORD PTR output_ctx$[rsp+48], eax
	je	SHORT $LN5@stbtt__Get
	mov	r8d, 2278				; 000008e6H
	lea	rdx, OFFSET FLAT:$SG93615
	lea	rcx, OFFSET FLAT:$SG93616
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbtt__Get:
; Line 2279
	mov	eax, DWORD PTR output_ctx$[rsp+48]
	jmp	SHORT $LN1@stbtt__Get
$LN3@stbtt__Get:
$LN2@stbtt__Get:
; Line 2282
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2283
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2284
	add	rsp, 152				; 00000098H
	ret	0
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeT2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
sp$ = 68
dy2$1 = 72
subr_stack_height$ = 76
dx3$2 = 80
dx2$3 = 84
dx1$4 = 88
dx6$5 = 92
dx5$6 = 96
dx4$7 = 100
dy1$8 = 104
dy5$9 = 108
b0$ = 112
f$ = 116
maskbits$ = 120
in_header$ = 124
dy6$10 = 128
tv76 = 132
tv470 = 136
dy3$11 = 140
dy4$12 = 144
clear_stack$ = 148
b$ = 152
tv225 = 168
has_subrs$ = 172
dy$13 = 176
dx$14 = 180
tv188 = 184
v$ = 188
tv456 = 192
b1$15 = 196
tv244 = 200
tv453 = 208
tv640 = 216
subrs$ = 224
$T16 = 240
$T17 = 256
$T18 = 272
$T19 = 288
$T20 = 304
$T21 = 320
$T22 = 336
$T23 = 352
s$ = 368
subr_stack$ = 560
__$ArrayPad$ = 720
info$ = 768
glyph_index$ = 776
c$ = 784
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z PROC ; stbtt__run_charstring
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2011
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 744				; 000002e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2012
	mov	DWORD PTR in_header$[rsp], 1
	mov	DWORD PTR maskbits$[rsp], 0
	mov	DWORD PTR subr_stack_height$[rsp], 0
	mov	DWORD PTR sp$[rsp], 0
; Line 2013
	mov	DWORD PTR has_subrs$[rsp], 0
; Line 2015
	lea	rax, QWORD PTR subrs$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+112]
	mov	ecx, 16
	rep movsb
; Line 2021
	lea	rax, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+80]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR glyph_index$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN2@stbtt__run:
; Line 2022
	mov	eax, DWORD PTR b$[rsp+12]
	cmp	DWORD PTR b$[rsp+8], eax
	jge	$LN3@stbtt__run
; Line 2023
	mov	DWORD PTR i$[rsp], 0
; Line 2024
	mov	DWORD PTR clear_stack$[rsp], 1
; Line 2025
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 2026
	mov	eax, DWORD PTR b0$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	dec	eax
	mov	DWORD PTR tv76[rsp], eax
	cmp	DWORD PTR tv76[rsp], 30
	ja	$LN94@stbtt__run
	movsxd	rax, DWORD PTR tv76[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN107@stbtt__run[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN29@stbtt__run:
$LN30@stbtt__run:
; Line 2030
	cmp	DWORD PTR in_header$[rsp], 0
	je	SHORT $LN31@stbtt__run
; Line 2031
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
$LN31@stbtt__run:
; Line 2032
	mov	DWORD PTR in_header$[rsp], 0
; Line 2033
	mov	eax, DWORD PTR maskbits$[rsp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, eax
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2034
	jmp	$LN4@stbtt__run
$LN32@stbtt__run:
$LN33@stbtt__run:
$LN34@stbtt__run:
$LN35@stbtt__run:
; Line 2040
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
; Line 2041
	jmp	$LN4@stbtt__run
$LN36@stbtt__run:
; Line 2044
	mov	DWORD PTR in_header$[rsp], 0
; Line 2045
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN37@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN37@stbtt__run:
; Line 2046
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	movsxd	rcx, ecx
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2047
	jmp	$LN4@stbtt__run
$LN38@stbtt__run:
; Line 2049
	mov	DWORD PTR in_header$[rsp], 0
; Line 2050
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN39@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN39@stbtt__run:
; Line 2051
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2052
	jmp	$LN4@stbtt__run
$LN40@stbtt__run:
; Line 2054
	mov	DWORD PTR in_header$[rsp], 0
; Line 2055
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN41@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN41@stbtt__run:
; Line 2056
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2057
	jmp	$LN4@stbtt__run
$LN42@stbtt__run:
; Line 2060
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN43@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN43@stbtt__run:
; Line 2061
	jmp	SHORT $LN8@stbtt__run
$LN6@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN8@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jge	SHORT $LN7@stbtt__run
; Line 2062
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN6@stbtt__run
$LN7@stbtt__run:
; Line 2063
	jmp	$LN4@stbtt__run
$LN44@stbtt__run:
; Line 2069
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN45@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN45@stbtt__run:
; Line 2070
	jmp	SHORT $LN46@stbtt__run
	jmp	SHORT $vlineto$108
$LN47@stbtt__run:
; Line 2072
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN48@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN48@stbtt__run:
$LN9@stbtt__run:
; Line 2074
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN49@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN49@stbtt__run:
; Line 2075
	movsxd	rax, DWORD PTR i$[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2076
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN46@stbtt__run:
$vlineto$108:
; Line 2078
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN50@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN50@stbtt__run:
; Line 2079
	movsxd	rax, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2080
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 2081
	jmp	SHORT $LN9@stbtt__run
$LN10@stbtt__run:
; Line 2082
	jmp	$LN4@stbtt__run
$LN51@stbtt__run:
; Line 2085
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN52@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN52@stbtt__run:
; Line 2086
	jmp	$LN53@stbtt__run
	jmp	$hvcurveto$109
$LN54@stbtt__run:
; Line 2088
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN55@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN55@stbtt__run:
$LN12@stbtt__run:
; Line 2090
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN56@stbtt__run
	jmp	$LN13@stbtt__run
$LN56@stbtt__run:
; Line 2091
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN101@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv188[rsp], xmm0
	jmp	SHORT $LN102@stbtt__run
$LN101@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv188[rsp], xmm0
$LN102@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR tv188[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR s$[rsp+rdi*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2092
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN53@stbtt__run:
$hvcurveto$109:
; Line 2094
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN57@stbtt__run
	jmp	$LN13@stbtt__run
$LN57@stbtt__run:
; Line 2095
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv244[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN103@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv225[rsp], xmm0
	jmp	SHORT $LN104@stbtt__run
$LN103@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv225[rsp], xmm0
$LN104@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR tv244[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR tv225[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rcx*4]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rdx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2096
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
; Line 2097
	jmp	$LN12@stbtt__run
$LN13@stbtt__run:
; Line 2098
	jmp	$LN4@stbtt__run
$LN58@stbtt__run:
; Line 2101
	cmp	DWORD PTR sp$[rsp], 6
	jge	SHORT $LN59@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN59@stbtt__run:
; Line 2102
	jmp	SHORT $LN17@stbtt__run
$LN15@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN17@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN16@stbtt__run
; Line 2103
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN15@stbtt__run
$LN16@stbtt__run:
; Line 2104
	jmp	$LN4@stbtt__run
$LN60@stbtt__run:
; Line 2107
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN61@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN61@stbtt__run:
; Line 2108
	jmp	SHORT $LN20@stbtt__run
$LN18@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN20@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	cmp	eax, ecx
	jge	$LN19@stbtt__run
; Line 2109
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN18@stbtt__run
$LN19@stbtt__run:
; Line 2110
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN62@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN62@stbtt__run:
; Line 2111
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2112
	jmp	$LN4@stbtt__run
$LN63@stbtt__run:
; Line 2115
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN64@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN64@stbtt__run:
; Line 2116
	jmp	SHORT $LN23@stbtt__run
$LN21@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN23@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 6
	cmp	eax, ecx
	jge	SHORT $LN22@stbtt__run
; Line 2117
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN21@stbtt__run
$LN22@stbtt__run:
; Line 2118
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN65@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN65@stbtt__run:
; Line 2119
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2120
	jmp	$LN4@stbtt__run
$LN66@stbtt__run:
$LN67@stbtt__run:
; Line 2124
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN68@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN68@stbtt__run:
; Line 2125
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rsp], xmm0
; Line 2126
	mov	eax, DWORD PTR sp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN69@stbtt__run
	movsxd	rax, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR f$[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN69@stbtt__run:
; Line 2127
	jmp	SHORT $LN26@stbtt__run
$LN24@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN26@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN25@stbtt__run
; Line 2128
	cmp	DWORD PTR b0$[rsp], 27
	jne	SHORT $LN70@stbtt__run
; Line 2129
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR s$[rsp+rdi*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	SHORT $LN71@stbtt__run
$LN70@stbtt__run:
; Line 2131
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR s$[rsp+rdi*4]
	movss	xmm1, DWORD PTR f$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
$LN71@stbtt__run:
; Line 2132
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rsp], xmm0
; Line 2133
	jmp	$LN24@stbtt__run
$LN25@stbtt__run:
; Line 2134
	jmp	$LN4@stbtt__run
$LN72@stbtt__run:
; Line 2137
	cmp	DWORD PTR has_subrs$[rsp], 0
	jne	SHORT $LN73@stbtt__run
; Line 2138
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+156], 0
	je	SHORT $LN74@stbtt__run
; Line 2139
	mov	r8d, DWORD PTR glyph_index$[rsp]
	mov	rdx, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ; stbtt__cid_get_glyph_subrs
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR subrs$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN74@stbtt__run:
; Line 2140
	mov	DWORD PTR has_subrs$[rsp], 1
$LN73@stbtt__run:
$LN75@stbtt__run:
; Line 2144
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN76@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN76@stbtt__run:
; Line 2145
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	mov	DWORD PTR sp$[rsp], eax
	movsxd	rax, DWORD PTR sp$[rsp]
	cvttss2si eax, DWORD PTR s$[rsp+rax*4]
	mov	DWORD PTR v$[rsp], eax
; Line 2146
	cmp	DWORD PTR subr_stack_height$[rsp], 10
	jl	SHORT $LN77@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN77@stbtt__run:
; Line 2147
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR subr_stack$[rsp+rax]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	inc	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
; Line 2148
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR tv456[rsp], eax
	cmp	DWORD PTR b0$[rsp], 10
	jne	SHORT $LN105@stbtt__run
	lea	rax, QWORD PTR subrs$[rsp]
	mov	QWORD PTR tv453[rsp], rax
	jmp	SHORT $LN106@stbtt__run
$LN105@stbtt__run:
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv453[rsp], rax
$LN106@stbtt__run:
	lea	rax, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv453[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR tv456[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__get_subr
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 2149
	cmp	DWORD PTR b$[rsp+12], 0
	jne	SHORT $LN78@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN78@stbtt__run:
; Line 2150
	mov	DWORD PTR b$[rsp+8], 0
; Line 2151
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2152
	jmp	$LN4@stbtt__run
$LN79@stbtt__run:
; Line 2155
	cmp	DWORD PTR subr_stack_height$[rsp], 0
	jg	SHORT $LN80@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN80@stbtt__run:
; Line 2156
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	dec	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR subr_stack$[rsp+rax]
	mov	ecx, 16
	rep movsb
; Line 2157
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2158
	jmp	$LN4@stbtt__run
$LN81@stbtt__run:
; Line 2161
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 2162
	mov	eax, 1
	jmp	$LN1@stbtt__run
$LN82@stbtt__run:
; Line 2167
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b1$15[rsp], eax
; Line 2168
	mov	eax, DWORD PTR b1$15[rsp]
	mov	DWORD PTR tv470[rsp], eax
	cmp	DWORD PTR tv470[rsp], 34		; 00000022H
	je	SHORT $LN83@stbtt__run
	cmp	DWORD PTR tv470[rsp], 35		; 00000023H
	je	$LN85@stbtt__run
	cmp	DWORD PTR tv470[rsp], 36		; 00000024H
	je	$LN87@stbtt__run
	cmp	DWORD PTR tv470[rsp], 37		; 00000025H
	je	$LN89@stbtt__run
	jmp	$LN93@stbtt__run
$LN83@stbtt__run:
; Line 2172
	cmp	DWORD PTR sp$[rsp], 7
	jge	SHORT $LN84@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN84@stbtt__run:
; Line 2173
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2174
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2175
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2176
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2177
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2178
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2179
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2180
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2181
	movss	xmm0, DWORD PTR dy2$1[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm1, xmm1
	movss	DWORD PTR [rsp+48], xmm1
	movss	xmm1, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm1
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2182
	jmp	$LN27@stbtt__run
$LN85@stbtt__run:
; Line 2185
	cmp	DWORD PTR sp$[rsp], 13
	jge	SHORT $LN86@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN86@stbtt__run:
; Line 2186
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2187
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2188
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2189
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2190
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2191
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy3$11[rsp], xmm0
; Line 2192
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2193
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy4$12[rsp], xmm0
; Line 2194
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2195
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2196
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2197
	mov	eax, 4
	imul	rax, rax, 11
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy6$10[rsp], xmm0
; Line 2199
	movss	xmm0, DWORD PTR dy3$11[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2200
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	movss	xmm2, DWORD PTR dy4$12[rsp]
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2201
	jmp	$LN27@stbtt__run
$LN87@stbtt__run:
; Line 2204
	cmp	DWORD PTR sp$[rsp], 9
	jge	SHORT $LN88@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN88@stbtt__run:
; Line 2205
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2206
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2207
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2208
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2209
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2210
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2211
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2212
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2213
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2214
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2215
	movss	xmm0, DWORD PTR dy1$8[rsp]
	addss	xmm0, DWORD PTR dy2$1[rsp]
	addss	xmm0, DWORD PTR dy5$9[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2216
	jmp	$LN27@stbtt__run
$LN89@stbtt__run:
; Line 2219
	cmp	DWORD PTR sp$[rsp], 11
	jge	SHORT $LN90@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN90@stbtt__run:
; Line 2220
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2221
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2222
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2223
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2224
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2225
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy3$11[rsp], xmm0
; Line 2226
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2227
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy4$12[rsp], xmm0
; Line 2228
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2229
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2230
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy6$10[rsp], xmm0
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2231
	movss	xmm0, DWORD PTR dx1$4[rsp]
	addss	xmm0, DWORD PTR dx2$3[rsp]
	addss	xmm0, DWORD PTR dx3$2[rsp]
	addss	xmm0, DWORD PTR dx4$7[rsp]
	addss	xmm0, DWORD PTR dx5$6[rsp]
	movss	DWORD PTR dx$14[rsp], xmm0
; Line 2232
	movss	xmm0, DWORD PTR dy1$8[rsp]
	addss	xmm0, DWORD PTR dy2$1[rsp]
	addss	xmm0, DWORD PTR dy3$11[rsp]
	addss	xmm0, DWORD PTR dy4$12[rsp]
	addss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR dy$13[rsp], xmm0
; Line 2233
	cvtss2sd xmm0, DWORD PTR dx$14[rsp]
	call	fabs
	movsd	QWORD PTR tv640[rsp], xmm0
	cvtss2sd xmm1, DWORD PTR dy$13[rsp]
	movaps	xmm0, xmm1
	call	fabs
	movsd	xmm1, QWORD PTR tv640[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN91@stbtt__run
; Line 2234
	movss	xmm0, DWORD PTR dy$13[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy6$10[rsp], xmm0
	jmp	SHORT $LN92@stbtt__run
$LN91@stbtt__run:
; Line 2236
	movss	xmm0, DWORD PTR dx$14[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx6$5[rsp], xmm0
$LN92@stbtt__run:
; Line 2237
	movss	xmm0, DWORD PTR dy3$11[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2238
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	movss	xmm2, DWORD PTR dy4$12[rsp]
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2239
	jmp	SHORT $LN27@stbtt__run
$LN93@stbtt__run:
; Line 2242
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN27@stbtt__run:
; Line 2244
	jmp	$LN4@stbtt__run
$LN94@stbtt__run:
; Line 2247
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rsp], 28
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jge	SHORT $LN95@stbtt__run
; Line 2248
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN95@stbtt__run:
; Line 2251
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	jne	SHORT $LN96@stbtt__run
; Line 2252
	mov	edx, 4
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47800000
	movss	DWORD PTR f$[rsp], xmm0
; Line 2253
	jmp	SHORT $LN97@stbtt__run
$LN96@stbtt__run:
; Line 2254
	mov	edx, -1
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2255
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR f$[rsp], xmm0
$LN97@stbtt__run:
; Line 2257
	cmp	DWORD PTR sp$[rsp], 48			; 00000030H
	jl	SHORT $LN98@stbtt__run
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__run
$LN98@stbtt__run:
; Line 2258
	movsxd	rax, DWORD PTR sp$[rsp]
	movss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR s$[rsp+rax*4], xmm0
	mov	eax, DWORD PTR sp$[rsp]
	inc	eax
	mov	DWORD PTR sp$[rsp], eax
; Line 2259
	mov	DWORD PTR clear_stack$[rsp], 0
$LN4@stbtt__run:
; Line 2262
	cmp	DWORD PTR clear_stack$[rsp], 0
	je	SHORT $LN99@stbtt__run
	mov	DWORD PTR sp$[rsp], 0
$LN99@stbtt__run:
; Line 2263
	jmp	$LN2@stbtt__run
$LN3@stbtt__run:
; Line 2264
	xor	eax, eax
$LN1@stbtt__run:
; Line 2267
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 744				; 000002e8H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN107@stbtt__run:
	DD	$LN32@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN33@stbtt__run
	DD	$LN38@stbtt__run
	DD	$LN42@stbtt__run
	DD	$LN47@stbtt__run
	DD	$LN44@stbtt__run
	DD	$LN58@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN72@stbtt__run
	DD	$LN79@stbtt__run
	DD	$LN82@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN81@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN34@stbtt__run
	DD	$LN29@stbtt__run
	DD	$LN30@stbtt__run
	DD	$LN36@stbtt__run
	DD	$LN40@stbtt__run
	DD	$LN35@stbtt__run
	DD	$LN60@stbtt__run
	DD	$LN63@stbtt__run
	DD	$LN66@stbtt__run
	DD	$LN67@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN75@stbtt__run
	DD	$LN54@stbtt__run
	DD	$LN51@stbtt__run
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ENDP ; stbtt__run_charstring
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fdselector$ = 32
i$ = 36
fmt$ = 40
end$ = 44
start$ = 48
fdselect$ = 56
nranges$ = 72
v$ = 76
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
__$ReturnAddress$ = 256
info$ = 264
glyph_index$ = 272
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z PROC ; stbtt__cid_get_glyph_subrs
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1983
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 1984
	lea	rax, QWORD PTR fdselect$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+144]
	mov	ecx, 16
	rep movsb
; Line 1985
	mov	DWORD PTR fdselector$[rsp], -1
; Line 1987
	xor	edx, edx
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1988
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fmt$[rsp], eax
; Line 1989
	cmp	DWORD PTR fmt$[rsp], 0
	jne	SHORT $LN5@stbtt__cid
; Line 1991
	mov	edx, DWORD PTR glyph_index$[rsp]
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1992
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fdselector$[rsp], eax
	jmp	$LN6@stbtt__cid
$LN5@stbtt__cid:
; Line 1993
	cmp	DWORD PTR fmt$[rsp], 3
	jne	$LN7@stbtt__cid
; Line 1994
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR nranges$[rsp], eax
; Line 1995
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1996
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__cid
$LN2@stbtt__cid:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__cid:
	mov	eax, DWORD PTR nranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__cid
; Line 1997
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1998
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1999
	mov	eax, DWORD PTR start$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN8@stbtt__cid
	mov	eax, DWORD PTR end$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	SHORT $LN8@stbtt__cid
; Line 2000
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR fdselector$[rsp], eax
; Line 2001
	jmp	SHORT $LN3@stbtt__cid
$LN8@stbtt__cid:
; Line 2003
	mov	eax, DWORD PTR end$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 2004
	jmp	SHORT $LN2@stbtt__cid
$LN3@stbtt__cid:
$LN7@stbtt__cid:
$LN6@stbtt__cid:
; Line 2006
	cmp	DWORD PTR fdselector$[rsp], -1
	jne	SHORT $LN9@stbtt__cid
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN9@stbtt__cid:
; Line 2007
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+128]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR fdselector$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 2008
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ENDP ; stbtt__cid_get_glyph_subrs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bias$ = 32
count$ = 36
$T1 = 40
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
__$ReturnAddress$ = 160
idx$ = 168
n$ = 176
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z PROC		; stbtt__get_subr
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1969
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1970
	mov	rcx, QWORD PTR idx$[rsp]
	call	?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ; stbtt__cff_index_count
	mov	DWORD PTR count$[rsp], eax
; Line 1971
	mov	DWORD PTR bias$[rsp], 107		; 0000006bH
; Line 1972
	cmp	DWORD PTR count$[rsp], 33900		; 0000846cH
	jl	SHORT $LN2@stbtt__get
; Line 1973
	mov	DWORD PTR bias$[rsp], 32768		; 00008000H
	jmp	SHORT $LN3@stbtt__get
$LN2@stbtt__get:
; Line 1974
	cmp	DWORD PTR count$[rsp], 1240		; 000004d8H
	jl	SHORT $LN4@stbtt__get
; Line 1975
	mov	DWORD PTR bias$[rsp], 1131		; 0000046bH
$LN4@stbtt__get:
$LN3@stbtt__get:
; Line 1976
	mov	eax, DWORD PTR bias$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1977
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN6@stbtt__get
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN5@stbtt__get
$LN6@stbtt__get:
; Line 1978
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN5@stbtt__get:
; Line 1979
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR idx$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1980
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ENDP		; stbtt__get_subr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cy2$ = 64
cx2$ = 68
cy1$ = 72
cx1$ = 76
ctx$ = 96
dx1$ = 104
dy1$ = 112
dx2$ = 120
dy2$ = 128
dx3$ = 136
dy3$ = 144
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z PROC ; stbtt__csctx_rccurve_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1958
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1959
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx1$[rsp]
	movss	DWORD PTR cx1$[rsp], xmm0
; Line 1960
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy1$[rsp]
	movss	DWORD PTR cy1$[rsp], xmm0
; Line 1961
	movss	xmm0, DWORD PTR cx1$[rsp]
	addss	xmm0, DWORD PTR dx2$[rsp]
	movss	DWORD PTR cx2$[rsp], xmm0
; Line 1962
	movss	xmm0, DWORD PTR cy1$[rsp]
	addss	xmm0, DWORD PTR dy2$[rsp]
	movss	DWORD PTR cy2$[rsp], xmm0
; Line 1963
	movss	xmm0, DWORD PTR cx2$[rsp]
	addss	xmm0, DWORD PTR dx3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1964
	movss	xmm0, DWORD PTR cy2$[rsp]
	addss	xmm0, DWORD PTR dy3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1965
	cvttss2si eax, DWORD PTR cy2$[rsp]
	cvttss2si ecx, DWORD PTR cx2$[rsp]
	cvttss2si edx, DWORD PTR cy1$[rsp]
	cvttss2si r8d, DWORD PTR cx1$[rsp]
	mov	r9, QWORD PTR ctx$[rsp]
	cvttss2si r9d, DWORD PTR [r9+20]
	mov	r10, QWORD PTR ctx$[rsp]
	cvttss2si r10d, DWORD PTR [r10+16]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, r10d
	mov	dl, 4
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1966
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ENDP ; stbtt__csctx_rccurve_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
dx$ = 88
dy$ = 96
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rline_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1951
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1952
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1953
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1954
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1955
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rline_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 64
tv72 = 68
ctx$ = 96
dx$ = 104
dy$ = 112
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rmove_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1943
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1944
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 1945
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 1946
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR [rax+20], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 1947
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1948
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rmove_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z PROC	; stbtt__csctx_close_shape
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1937
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1938
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+16]
	jp	SHORT $LN3@stbtt__csc
	jne	SHORT $LN3@stbtt__csc
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+20]
	jp	SHORT $LN5@stbtt__csc
	je	SHORT $LN2@stbtt__csc
$LN5@stbtt__csc:
$LN3@stbtt__csc:
; Line 1939
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
$LN2@stbtt__csc:
; Line 1940
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ENDP	; stbtt__csctx_close_shape
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 64
type$ = 72
x$ = 80
y$ = 88
cx$ = 96
cy$ = 104
cx1$ = 112
cy1$ = 120
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z PROC	; stbtt__csctx_v
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1921
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1922
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN2@stbtt__csc
; Line 1923
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1924
	movzx	eax, BYTE PTR type$[rsp]
	cmp	eax, 4
	jne	SHORT $LN4@stbtt__csc
; Line 1925
	mov	r8d, DWORD PTR cy$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1926
	mov	r8d, DWORD PTR cy1$[rsp]
	mov	edx, DWORD PTR cx1$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
$LN4@stbtt__csc:
; Line 1928
	jmp	SHORT $LN3@stbtt__csc
$LN2@stbtt__csc:
; Line 1929
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	ecx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	movzx	edx, BYTE PTR type$[rsp]
	mov	rcx, rax
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1930
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cx1$[rsp]
	mov	WORD PTR [rcx+rax+8], dx
; Line 1931
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cy1$[rsp]
	mov	WORD PTR [rcx+rax+10], dx
$LN3@stbtt__csc:
; Line 1933
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+48]
	inc	eax
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1934
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ENDP	; stbtt__csctx_v
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 8
x$ = 16
y$ = 24
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z PROC	; stbtt__track_vertex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1912
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1913
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR x$[rsp], eax
	jg	SHORT $LN3@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@stbtt__tra
$LN3@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+28], ecx
$LN2@stbtt__tra:
; Line 1914
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR y$[rsp], eax
	jg	SHORT $LN5@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN4@stbtt__tra
$LN5@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN4@stbtt__tra:
; Line 1915
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR x$[rsp], eax
	jl	SHORT $LN7@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@stbtt__tra
$LN7@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+24], ecx
$LN6@stbtt__tra:
; Line 1916
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR y$[rsp], eax
	jl	SHORT $LN9@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@stbtt__tra
$LN9@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+32], ecx
$LN8@stbtt__tra:
; Line 1917
	mov	rax, QWORD PTR c$[rsp]
	mov	DWORD PTR [rax+4], 1
; Line 1918
	ret	0
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ENDP	; stbtt__track_vertex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flags$1 = 80
i$2 = 84
num_vertices$ = 88
flagcount$3 = 92
comp$4 = 96
vertices$ = 104
numberOfContours$ = 112
flags$5 = 116
off$6 = 120
y$7 = 124
x$8 = 128
x$9 = 132
y$10 = 136
points$11 = 144
tv157 = 152
tv163 = 153
cy$12 = 156
cx$13 = 160
sy$14 = 164
was_off$15 = 168
n$16 = 172
sx$17 = 176
g$ = 180
comp_num_verts$18 = 184
dx$19 = 188
dy$20 = 192
scy$21 = 196
scx$22 = 200
start_off$23 = 204
i$24 = 208
v$25 = 216
j$26 = 224
gidx$27 = 228
tv225 = 232
tv183 = 234
comp_verts$28 = 240
m$29 = 248
tv190 = 252
tv232 = 256
tv321 = 260
next_move$30 = 264
tv495 = 268
m$31 = 272
n$32 = 276
more$33 = 280
data$ = 288
tmp$34 = 296
ins$35 = 304
endPtsOfContours$ = 312
tv374 = 320
tv401 = 328
tv413 = 336
tv424 = 344
mtx$36 = 352
__$ArrayPad$ = 376
info$ = 400
glyph_index$ = 408
pvertices$ = 416
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeTT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1675
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1678
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1679
	mov	QWORD PTR vertices$[rsp], 0
; Line 1680
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1681
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1683
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 1685
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN19@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 1687
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1689
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jle	$LN20@stbtt__Get
; Line 1690
	mov	BYTE PTR flags$1[rsp], 0
; Line 1691
	mov	DWORD PTR j$26[rsp], 0
	mov	DWORD PTR was_off$15[rsp], 0
	mov	DWORD PTR start_off$23[rsp], 0
; Line 1694
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR endPtsOfContours$[rsp], rax
; Line 1695
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR ins$35[rsp], eax
; Line 1696
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	movsxd	rcx, DWORD PTR ins$35[rsp]
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	QWORD PTR points$11[rsp], rax
; Line 1698
	movsx	eax, WORD PTR numberOfContours$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	lea	rax, QWORD PTR [rcx+rax-2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR n$16[rsp], eax
; Line 1700
	movsx	eax, WORD PTR numberOfContours$[rsp]
	mov	ecx, DWORD PTR n$16[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR m$29[rsp], eax
; Line 1701
	movsxd	rax, DWORD PTR m$29[rsp]
	imul	rax, rax, 14
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR vertices$[rsp], rax
; Line 1702
	cmp	QWORD PTR vertices$[rsp], 0
	jne	SHORT $LN22@stbtt__Get
; Line 1703
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN22@stbtt__Get:
; Line 1705
	mov	DWORD PTR next_move$30[rsp], 0
; Line 1706
	mov	BYTE PTR flagcount$3[rsp], 0
; Line 1712
	mov	eax, DWORD PTR n$16[rsp]
	mov	ecx, DWORD PTR m$29[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR off$6[rsp], eax
; Line 1716
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN3@stbtt__Get
; Line 1717
	movzx	eax, BYTE PTR flagcount$3[rsp]
	test	eax, eax
	jne	SHORT $LN23@stbtt__Get
; Line 1718
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv157[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, BYTE PTR tv157[rsp]
	mov	BYTE PTR flags$1[rsp], al
; Line 1719
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN25@stbtt__Get
; Line 1720
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv163[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, BYTE PTR tv163[rsp]
	mov	BYTE PTR flagcount$3[rsp], al
$LN25@stbtt__Get:
; Line 1721
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 1722
	movzx	eax, BYTE PTR flagcount$3[rsp]
	dec	al
	mov	BYTE PTR flagcount$3[rsp], al
$LN24@stbtt__Get:
; Line 1723
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, BYTE PTR flags$1[rsp]
	mov	BYTE PTR [rcx+rax+12], dl
; Line 1724
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 1727
	mov	DWORD PTR x$8[rsp], 0
; Line 1728
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN6@stbtt__Get
; Line 1729
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1730
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN26@stbtt__Get
; Line 1731
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv183[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, WORD PTR tv183[rsp]
	mov	WORD PTR dx$19[rsp], ax
; Line 1732
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN62@stbtt__Get
	movsx	eax, WORD PTR dx$19[rsp]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN63@stbtt__Get
$LN62@stbtt__Get:
	movsx	eax, WORD PTR dx$19[rsp]
	neg	eax
	mov	DWORD PTR tv190[rsp], eax
$LN63@stbtt__Get:
	mov	eax, DWORD PTR tv190[rsp]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1733
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 1734
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN28@stbtt__Get
; Line 1735
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1736
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN28@stbtt__Get:
$LN27@stbtt__Get:
; Line 1739
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR x$8[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 1740
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 1743
	mov	DWORD PTR y$7[rsp], 0
; Line 1744
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN9@stbtt__Get
; Line 1745
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1746
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN29@stbtt__Get
; Line 1747
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv225[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, WORD PTR tv225[rsp]
	mov	WORD PTR dy$20[rsp], ax
; Line 1748
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN64@stbtt__Get
	movsx	eax, WORD PTR dy$20[rsp]
	mov	DWORD PTR tv232[rsp], eax
	jmp	SHORT $LN65@stbtt__Get
$LN64@stbtt__Get:
	movsx	eax, WORD PTR dy$20[rsp]
	neg	eax
	mov	DWORD PTR tv232[rsp], eax
$LN65@stbtt__Get:
	mov	eax, DWORD PTR tv232[rsp]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1749
	jmp	SHORT $LN30@stbtt__Get
$LN29@stbtt__Get:
; Line 1750
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN31@stbtt__Get
; Line 1751
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1752
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN31@stbtt__Get:
$LN30@stbtt__Get:
; Line 1755
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR y$7[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 1756
	jmp	$LN8@stbtt__Get
$LN9@stbtt__Get:
; Line 1759
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1760
	mov	DWORD PTR scy$21[rsp], 0
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR scx$22[rsp], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR cy$12[rsp], eax
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR cx$13[rsp], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR sy$14[rsp], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1761
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN13@stbtt__Get
$LN11@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN13@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN12@stbtt__Get
; Line 1762
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1763
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x$8[rsp], eax
; Line 1764
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y$7[rsp], eax
; Line 1766
	mov	eax, DWORD PTR i$2[rsp]
	cmp	DWORD PTR next_move$30[rsp], eax
	jne	$LN32@stbtt__Get
; Line 1767
	cmp	DWORD PTR i$2[rsp], 0
	je	SHORT $LN34@stbtt__Get
; Line 1768
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
$LN34@stbtt__Get:
; Line 1771
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN66@stbtt__Get
	mov	DWORD PTR tv321[rsp], 1
	jmp	SHORT $LN67@stbtt__Get
$LN66@stbtt__Get:
	mov	DWORD PTR tv321[rsp], 0
$LN67@stbtt__Get:
	mov	eax, DWORD PTR tv321[rsp]
	mov	DWORD PTR start_off$23[rsp], eax
; Line 1772
	cmp	DWORD PTR start_off$23[rsp], 0
	je	$LN35@stbtt__Get
; Line 1775
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR scx$22[rsp], eax
; Line 1776
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR scy$21[rsp], eax
; Line 1777
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN37@stbtt__Get
; Line 1779
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sx$17[rsp], eax
; Line 1780
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sy$14[rsp], eax
; Line 1781
	jmp	SHORT $LN38@stbtt__Get
$LN37@stbtt__Get:
; Line 1783
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1784
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR sy$14[rsp], eax
; Line 1785
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN38@stbtt__Get:
; Line 1787
	jmp	SHORT $LN36@stbtt__Get
$LN35@stbtt__Get:
; Line 1788
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1789
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR sy$14[rsp], eax
$LN36@stbtt__Get:
; Line 1791
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv374[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$14[rsp]
	mov	r8d, DWORD PTR sx$17[rsp]
	mov	dl, 1
	mov	rcx, QWORD PTR tv374[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1792
	mov	DWORD PTR was_off$15[rsp], 0
; Line 1793
	mov	eax, DWORD PTR j$26[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR next_move$30[rsp], eax
; Line 1794
	mov	eax, DWORD PTR j$26[rsp]
	inc	eax
	mov	DWORD PTR j$26[rsp], eax
; Line 1795
	jmp	$LN33@stbtt__Get
$LN32@stbtt__Get:
; Line 1796
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN39@stbtt__Get
; Line 1797
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN41@stbtt__Get
; Line 1798
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv401[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR y$7[rsp]
	mov	ecx, DWORD PTR cy$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR x$8[rsp]
	mov	edx, DWORD PTR cx$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv401[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN41@stbtt__Get:
; Line 1799
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR cx$13[rsp], eax
; Line 1800
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR cy$12[rsp], eax
; Line 1801
	mov	DWORD PTR was_off$15[rsp], 1
; Line 1802
	jmp	$LN40@stbtt__Get
$LN39@stbtt__Get:
; Line 1803
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN42@stbtt__Get
; Line 1804
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv413[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv413[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN43@stbtt__Get
$LN42@stbtt__Get:
; Line 1806
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv424[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv424[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN43@stbtt__Get:
; Line 1807
	mov	DWORD PTR was_off$15[rsp], 0
$LN40@stbtt__Get:
$LN33@stbtt__Get:
; Line 1810
	jmp	$LN11@stbtt__Get
$LN12@stbtt__Get:
; Line 1811
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
	jmp	$LN21@stbtt__Get
$LN20@stbtt__Get:
; Line 1812
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jge	$LN44@stbtt__Get
; Line 1814
	mov	DWORD PTR more$33[rsp], 1
; Line 1815
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR comp$4[rsp], rax
; Line 1816
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1817
	mov	QWORD PTR vertices$[rsp], 0
$LN14@stbtt__Get:
; Line 1818
	cmp	DWORD PTR more$33[rsp], 0
	je	$LN15@stbtt__Get
; Line 1820
	mov	DWORD PTR comp_num_verts$18[rsp], 0
; Line 1821
	mov	QWORD PTR comp_verts$28[rsp], 0
	mov	QWORD PTR tmp$34[rsp], 0
; Line 1822
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$36[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$36[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+20], xmm0
; Line 1824
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR flags$5[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1825
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR gidx$27[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1827
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN46@stbtt__Get
; Line 1828
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN48@stbtt__Get
; Line 1829
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1830
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1831
	jmp	SHORT $LN49@stbtt__Get
$LN48@stbtt__Get:
; Line 1832
	mov	rax, QWORD PTR comp$4[rsp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
; Line 1833
	mov	rax, QWORD PTR comp$4[rsp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
$LN49@stbtt__Get:
; Line 1835
	jmp	SHORT $LN47@stbtt__Get
$LN46@stbtt__Get:
; Line 1838
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN68@stbtt__Get
	mov	r8d, 1838				; 0000072eH
	lea	rdx, OFFSET FLAT:$SG93312
	lea	rcx, OFFSET FLAT:$SG93313
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN68@stbtt__Get:
$LN47@stbtt__Get:
; Line 1840
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 8
	test	eax, eax
	je	$LN50@stbtt__Get
; Line 1841
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	movss	DWORD PTR tv495[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR tv495[rsp]
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR tv495[rsp]
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1842
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	jmp	$LN51@stbtt__Get
$LN50@stbtt__Get:
; Line 1843
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	$LN52@stbtt__Get
; Line 1844
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1845
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
; Line 1846
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
	jmp	$LN53@stbtt__Get
$LN52@stbtt__Get:
; Line 1847
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN54@stbtt__Get
; Line 1848
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1849
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1850
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 2
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1851
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
$LN54@stbtt__Get:
$LN53@stbtt__Get:
$LN51@stbtt__Get:
; Line 1855
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm0, DWORD PTR mtx$36[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, DWORD PTR mtx$36[rsp+rcx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR m$31[rsp], xmm0
; Line 1856
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm0, DWORD PTR mtx$36[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, DWORD PTR mtx$36[rsp+rcx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR n$32[rsp], xmm0
; Line 1859
	movzx	eax, WORD PTR gidx$27[rsp]
	lea	r8, QWORD PTR comp_verts$28[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR comp_num_verts$18[rsp], eax
; Line 1860
	cmp	DWORD PTR comp_num_verts$18[rsp], 0
	jle	$LN55@stbtt__Get
; Line 1862
	mov	DWORD PTR i$24[rsp], 0
	jmp	SHORT $LN18@stbtt__Get
$LN16@stbtt__Get:
	mov	eax, DWORD PTR i$24[rsp]
	inc	eax
	mov	DWORD PTR i$24[rsp], eax
$LN18@stbtt__Get:
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	cmp	DWORD PTR i$24[rsp], eax
	jge	$LN17@stbtt__Get
; Line 1863
	movsxd	rax, DWORD PTR i$24[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$25[rsp], rax
; Line 1865
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR y$10[rsp], ax
; Line 1866
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR m$31[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx], ax
; Line 1867
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR n$32[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 1868
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	WORD PTR y$10[rsp], ax
; Line 1869
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR m$31[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 1870
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$36[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$36[rsp+rax]
	movss	xmm1, DWORD PTR n$32[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 1871
	jmp	$LN16@stbtt__Get
$LN17@stbtt__Get:
; Line 1873
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tmp$34[rsp], rax
; Line 1874
	cmp	QWORD PTR tmp$34[rsp], 0
	jne	SHORT $LN56@stbtt__Get
; Line 1875
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN57@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
$LN57@stbtt__Get:
; Line 1876
	cmp	QWORD PTR comp_verts$28[rsp], 0
	je	SHORT $LN58@stbtt__Get
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	call	QWORD PTR __imp_free
$LN58@stbtt__Get:
; Line 1877
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN56@stbtt__Get:
; Line 1879
	cmp	DWORD PTR num_vertices$[rsp], 0
	jle	SHORT $LN59@stbtt__Get
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN59@stbtt__Get
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	r8, rax
	mov	rdx, QWORD PTR vertices$[rsp]
	mov	rcx, QWORD PTR tmp$34[rsp]
	call	memcpy
$LN59@stbtt__Get:
; Line 1880
	movsxd	rax, DWORD PTR comp_num_verts$18[rsp]
	imul	rax, rax, 14
	movsxd	rcx, DWORD PTR num_vertices$[rsp]
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR tmp$34[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR comp_verts$28[rsp]
	call	memcpy
; Line 1881
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN60@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
$LN60@stbtt__Get:
; Line 1882
	mov	rax, QWORD PTR tmp$34[rsp]
	mov	QWORD PTR vertices$[rsp], rax
; Line 1883
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	call	QWORD PTR __imp_free
; Line 1884
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_vertices$[rsp], eax
$LN55@stbtt__Get:
; Line 1887
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 32					; 00000020H
	mov	DWORD PTR more$33[rsp], eax
; Line 1888
	jmp	$LN14@stbtt__Get
$LN15@stbtt__Get:
$LN44@stbtt__Get:
$LN21@stbtt__Get:
; Line 1893
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1894
	mov	eax, DWORD PTR num_vertices$[rsp]
$LN1@stbtt__Get:
; Line 1895
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	ret	0
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeTT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
tv90 = 56
tv134 = 64
tv145 = 72
vertices$ = 96
num_vertices$ = 104
was_off$ = 112
start_off$ = 120
sx$ = 128
sy$ = 136
scx$ = 144
scy$ = 152
cx$ = 160
cy$ = 168
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z PROC ; stbtt__close_shape
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1660
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1661
	cmp	DWORD PTR start_off$[rsp], 0
	je	$LN2@stbtt__clo
; Line 1662
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN4@stbtt__clo
; Line 1663
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv79[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR scy$[rsp]
	mov	ecx, DWORD PTR cy$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR scx$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv79[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN4@stbtt__clo:
; Line 1664
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv90[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR scy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR scx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv90[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1665
	jmp	$LN3@stbtt__clo
$LN2@stbtt__clo:
; Line 1666
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN5@stbtt__clo
; Line 1667
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv134[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv134[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN6@stbtt__clo
$LN5@stbtt__clo:
; Line 1669
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv145[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv145[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN6@stbtt__clo:
$LN3@stbtt__clo:
; Line 1671
	mov	eax, DWORD PTR num_vertices$[rsp]
; Line 1672
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ENDP ; stbtt__close_shape
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
tv70 = 36
tv73 = 40
tv76 = 44
tv79 = 48
tv81 = 52
c$ = 56
info$ = 128
glyph_index$ = 136
x0$ = 144
y0$ = 152
x1$ = 160
y1$ = 168
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z PROC ; stbtt__GetGlyphInfoT2
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2287
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2288
	mov	DWORD PTR c$[rsp], 1
	mov	DWORD PTR c$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+20], xmm0
	mov	DWORD PTR c$[rsp+24], 0
	mov	DWORD PTR c$[rsp+28], 0
	mov	DWORD PTR c$[rsp+32], 0
	mov	DWORD PTR c$[rsp+36], 0
	mov	QWORD PTR c$[rsp+40], 0
	mov	DWORD PTR c$[rsp+48], 0
; Line 2289
	lea	r8, QWORD PTR c$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	mov	DWORD PTR r$[rsp], eax
; Line 2290
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN2@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN7@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+24]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
	mov	DWORD PTR tv70[rsp], 0
$LN8@stbtt__Get:
	mov	rax, QWORD PTR x0$[rsp]
	mov	ecx, DWORD PTR tv70[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@stbtt__Get:
; Line 2291
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN3@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN9@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+32]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
	mov	DWORD PTR tv73[rsp], 0
$LN10@stbtt__Get:
	mov	rax, QWORD PTR y0$[rsp]
	mov	ecx, DWORD PTR tv73[rsp]
	mov	DWORD PTR [rax], ecx
$LN3@stbtt__Get:
; Line 2292
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN4@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN11@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+28]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
	mov	DWORD PTR tv76[rsp], 0
$LN12@stbtt__Get:
	mov	rax, QWORD PTR x1$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax], ecx
$LN4@stbtt__Get:
; Line 2293
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN5@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN13@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+36]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN14@stbtt__Get
$LN13@stbtt__Get:
	mov	DWORD PTR tv79[rsp], 0
$LN14@stbtt__Get:
	mov	rax, QWORD PTR y1$[rsp]
	mov	ecx, DWORD PTR tv79[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt__Get:
; Line 2294
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN15@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+48]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN16@stbtt__Get
$LN15@stbtt__Get:
	mov	DWORD PTR tv81[rsp], 0
$LN16@stbtt__Get:
	mov	eax, DWORD PTR tv81[rsp]
; Line 2295
	add	rsp, 120				; 00000078H
	ret	0
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ENDP ; stbtt__GetGlyphInfoT2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g1$ = 32
g2$ = 36
tv160 = 40
info$ = 64
glyph_index$ = 72
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z PROC	; stbtt__GetGlyfOffset
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1604
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1607
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN7@stbtt__Get
	mov	r8d, 1607				; 00000647H
	lea	rdx, OFFSET FLAT:$SG93124
	lea	rcx, OFFSET FLAT:$SG93125
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbtt__Get:
; Line 1609
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN2@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 1610
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jl	SHORT $LN3@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN3@stbtt__Get:
; Line 1612
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 0
	jne	$LN4@stbtt__Get
; Line 1613
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g1$[rsp], eax
; Line 1614
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g2$[rsp], eax
; Line 1615
	jmp	SHORT $LN5@stbtt__Get
$LN4@stbtt__Get:
; Line 1616
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g1$[rsp], eax
; Line 1617
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g2$[rsp], eax
$LN5@stbtt__Get:
; Line 1620
	mov	eax, DWORD PTR g2$[rsp]
	cmp	DWORD PTR g1$[rsp], eax
	jne	SHORT $LN8@stbtt__Get
	mov	DWORD PTR tv160[rsp], -1
	jmp	SHORT $LN9@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR g1$[rsp]
	mov	DWORD PTR tv160[rsp], eax
$LN9@stbtt__Get:
	mov	eax, DWORD PTR tv160[rsp]
$LN1@stbtt__Get:
; Line 1621
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ENDP	; stbtt__GetGlyfOffset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 8
type$ = 16
x$ = 24
y$ = 32
cx$ = 40
cy$ = 48
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z PROC	; stbtt_setvertex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
; Line 1596
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR type$[rsp]
	mov	BYTE PTR [rax+12], cl
; Line 1597
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	mov	WORD PTR [rax], cx
; Line 1598
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	mov	WORD PTR [rax+2], cx
; Line 1599
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cx$[rsp]
	mov	WORD PTR [rax+4], cx
; Line 1600
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cy$[rsp]
	mov	WORD PTR [rax+6], cx
; Line 1601
	ret	0
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ENDP	; stbtt_setvertex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmap$ = 32
fdselectoff$1 = 36
i$ = 40
encoding_record$2 = 44
fdarrayoff$3 = 48
charstrings$4 = 52
b$5 = 56
cff$6 = 72
cstype$7 = 76
t$ = 80
tv321 = 84
tv328 = 88
numTables$ = 92
topdict$8 = 96
$T9 = 112
$T10 = 128
$T11 = 144
$T12 = 160
$T13 = 176
topdictidx$14 = 192
$T15 = 208
$T16 = 224
$T17 = 240
$T18 = 256
$T19 = 272
$T20 = 288
$T21 = 304
$T22 = 320
$T23 = 336
$T24 = 352
$T25 = 368
$T26 = 384
$T27 = 400
$T28 = 416
$T29 = 432
$T30 = 448
$T31 = 464
$T32 = 480
$T33 = 496
$T34 = 512
$T35 = 528
$T36 = 544
$T37 = 560
$T38 = 576
info$ = 624
data$ = 632
fontstart$ = 640
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z PROC ; stbtt_InitFont_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1384
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 600				; 00000258H
; Line 1388
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 1389
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR fontstart$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 1390
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T24[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1392
	lea	r8, OFFSET FLAT:$SG93000
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cmap$[rsp], eax
; Line 1393
	lea	r8, OFFSET FLAT:$SG93001
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 1394
	lea	r8, OFFSET FLAT:$SG93002
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 1395
	lea	r8, OFFSET FLAT:$SG93003
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 1396
	lea	r8, OFFSET FLAT:$SG93004
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 1397
	lea	r8, OFFSET FLAT:$SG93005
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 1398
	lea	r8, OFFSET FLAT:$SG93006
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 1399
	lea	r8, OFFSET FLAT:$SG93007
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1401
	cmp	DWORD PTR cmap$[rsp], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+40], 0
	jne	SHORT $LN9@stbtt_Init
$LN10@stbtt_Init:
; Line 1402
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN9@stbtt_Init:
; Line 1403
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN11@stbtt_Init
; Line 1405
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN13@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN13@stbtt_Init:
; Line 1406
	jmp	$LN12@stbtt_Init
$LN11@stbtt_Init:
; Line 1409
	mov	DWORD PTR cstype$7[rsp], 2
	mov	DWORD PTR charstrings$4[rsp], 0
	mov	DWORD PTR fdarrayoff$3[rsp], 0
	mov	DWORD PTR fdselectoff$1[rsp], 0
; Line 1412
	lea	r8, OFFSET FLAT:$SG93013
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cff$6[rsp], eax
; Line 1413
	cmp	DWORD PTR cff$6[rsp], 0
	jne	SHORT $LN14@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN14@stbtt_Init:
; Line 1415
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T25[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1416
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1419
	mov	eax, DWORD PTR cff$6[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 536870912				; 20000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1420
	lea	rax, QWORD PTR b$5[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
; Line 1423
	mov	edx, 2
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1424
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	edx, eax
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1428
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1429
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdictidx$14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1430
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR topdictidx$14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	xor	r8d, r8d
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdict$8[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1431
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1432
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	lea	rdi, QWORD PTR [rax+96]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1434
	lea	r9, QWORD PTR charstrings$4[rsp]
	mov	r8d, 1
	mov	edx, 17
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1435
	lea	r9, QWORD PTR cstype$7[rsp]
	mov	r8d, 1
	mov	edx, 262				; 00000106H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1436
	lea	r9, QWORD PTR fdarrayoff$3[rsp]
	mov	r8d, 1
	mov	edx, 292				; 00000124H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1437
	lea	r9, QWORD PTR fdselectoff$1[rsp]
	mov	r8d, 1
	mov	edx, 293				; 00000125H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1438
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR topdict$8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	lea	rdi, QWORD PTR [rax+112]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1441
	cmp	DWORD PTR cstype$7[rsp], 2
	je	SHORT $LN15@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN15@stbtt_Init:
; Line 1442
	cmp	DWORD PTR charstrings$4[rsp], 0
	jne	SHORT $LN16@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN16@stbtt_Init:
; Line 1444
	cmp	DWORD PTR fdarrayoff$3[rsp], 0
	je	$LN17@stbtt_Init
; Line 1446
	cmp	DWORD PTR fdselectoff$1[rsp], 0
	jne	SHORT $LN18@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN18@stbtt_Init:
; Line 1447
	mov	edx, DWORD PTR fdarrayoff$3[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1448
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1449
	mov	eax, DWORD PTR fdselectoff$1[rsp]
	mov	ecx, DWORD PTR b$5[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR fdselectoff$1[rsp]
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN17@stbtt_Init:
; Line 1452
	mov	edx, DWORD PTR charstrings$4[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1453
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	lea	rdi, QWORD PTR [rax+80]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN12@stbtt_Init:
; Line 1456
	lea	r8, OFFSET FLAT:$SG93019
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1457
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN19@stbtt_Init
; Line 1458
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
	jmp	SHORT $LN20@stbtt_Init
$LN19@stbtt_Init:
; Line 1460
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 65535		; 0000ffffH
$LN20@stbtt_Init:
; Line 1462
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], -1
; Line 1467
	mov	eax, DWORD PTR cmap$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numTables$[rsp], eax
; Line 1468
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 1469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Init
$LN2@stbtt_Init:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Init:
	mov	eax, DWORD PTR numTables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Init
; Line 1470
	mov	eax, DWORD PTR cmap$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8+4]
	mov	DWORD PTR encoding_record$2[rsp], eax
; Line 1472
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv321[rsp], eax
	cmp	DWORD PTR tv321[rsp], 0
	je	SHORT $LN24@stbtt_Init
	cmp	DWORD PTR tv321[rsp], 3
	je	SHORT $LN21@stbtt_Init
	jmp	$LN5@stbtt_Init
$LN21@stbtt_Init:
; Line 1474
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv328[rsp], eax
	cmp	DWORD PTR tv328[rsp], 1
	je	SHORT $LN22@stbtt_Init
	cmp	DWORD PTR tv328[rsp], 10
	je	SHORT $LN23@stbtt_Init
	jmp	SHORT $LN7@stbtt_Init
$LN22@stbtt_Init:
$LN23@stbtt_Init:
; Line 1478
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN7@stbtt_Init:
; Line 1481
	jmp	SHORT $LN5@stbtt_Init
$LN24@stbtt_Init:
; Line 1485
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN5@stbtt_Init:
; Line 1488
	jmp	$LN2@stbtt_Init
$LN3@stbtt_Init:
; Line 1489
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jne	SHORT $LN25@stbtt_Init
; Line 1490
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Init
$LN25@stbtt_Init:
; Line 1492
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+50]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+60], eax
; Line 1493
	mov	eax, 1
$LN1@stbtt_Init:
; Line 1494
	add	rsp, 600				; 00000258H
	pop	rdi
	pop	rsi
	ret	0
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ENDP ; stbtt_InitFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
offset$1 = 36
info$ = 64
?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z PROC		; stbtt__get_svg
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1369
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1371
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jge	SHORT $LN2@stbtt__get
; Line 1372
	lea	r8, OFFSET FLAT:$SG92956
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1373
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN3@stbtt__get
; Line 1374
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR offset$1[rsp], eax
; Line 1375
	mov	eax, DWORD PTR offset$1[rsp]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+52], eax
; Line 1376
	jmp	SHORT $LN4@stbtt__get
$LN3@stbtt__get:
; Line 1377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], 0
$LN4@stbtt__get:
$LN2@stbtt__get:
; Line 1380
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+52]
; Line 1381
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z ENDP		; stbtt__get_svg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
subrsoff$ = 32
private_loc$ = 40
$T1 = 48
$T2 = 64
pdict$ = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
__$ReturnAddress$ = 224
cff$ = 232
fontdict$ = 240
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z PROC		; stbtt__get_subrs
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1355
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 1356
	mov	DWORD PTR subrsoff$[rsp], 0
	mov	DWORD PTR private_loc$[rsp], 0
	mov	DWORD PTR private_loc$[rsp+4], 0
; Line 1358
	lea	r9, QWORD PTR private_loc$[rsp]
	mov	r8d, 2
	mov	edx, 18
	mov	rcx, QWORD PTR fontdict$[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1359
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	je	SHORT $LN3@stbtt__get
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	jne	SHORT $LN2@stbtt__get
$LN3@stbtt__get:
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@stbtt__get
$LN2@stbtt__get:
; Line 1360
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	r9d, DWORD PTR private_loc$[rsp+rax]
	mov	r8d, DWORD PTR private_loc$[rsp+rcx]
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR pdict$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1361
	lea	r9, QWORD PTR subrsoff$[rsp]
	mov	r8d, 1
	mov	edx, 19
	lea	rcx, QWORD PTR pdict$[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1362
	cmp	DWORD PTR subrsoff$[rsp], 0
	jne	SHORT $LN4@stbtt__get
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN4@stbtt__get:
; Line 1363
	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR private_loc$[rsp+rax]
	add	eax, DWORD PTR subrsoff$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR cff$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1364
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1365
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ENDP		; stbtt__get_subrs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font_collection$ = 48
?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z PROC	; stbtt_GetNumberOfFonts_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1339
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1341
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetN
; Line 1342
	mov	eax, 1
	jmp	$LN1@stbtt_GetN
$LN2@stbtt_GetN:
; Line 1345
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG92930
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG92931
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG92932
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG92933
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
; Line 1347
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetN
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetN
$LN5@stbtt_GetN:
; Line 1348
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	jmp	SHORT $LN1@stbtt_GetN
$LN4@stbtt_GetN:
$LN3@stbtt_GetN:
; Line 1351
	xor	eax, eax
$LN1@stbtt_GetN:
; Line 1352
	add	rsp, 40					; 00000028H
	ret	0
?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z ENDP	; stbtt_GetNumberOfFonts_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
n$1 = 36
font_collection$ = 64
index$ = 72
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z PROC	; stbtt_GetFontOffsetForIndex_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1320
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1322
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetF
; Line 1323
	cmp	DWORD PTR index$[rsp], 0
	jne	SHORT $LN8@stbtt_GetF
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN9@stbtt_GetF
$LN8@stbtt_GetF:
	mov	DWORD PTR tv68[rsp], -1
$LN9@stbtt_GetF:
	mov	eax, DWORD PTR tv68[rsp]
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 1326
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG92918
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG92919
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG92920
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG92921
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetF
; Line 1328
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetF
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetF
$LN5@stbtt_GetF:
; Line 1329
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	mov	DWORD PTR n$1[rsp], eax
; Line 1330
	mov	eax, DWORD PTR n$1[rsp]
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN6@stbtt_GetF
; Line 1331
	mov	eax, -1
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 1332
	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR font_collection$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetF
$LN4@stbtt_GetF:
$LN3@stbtt_GetF:
; Line 1335
	mov	eax, -1
$LN1@stbtt_GetF:
; Line 1336
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ENDP	; stbtt_GetFontOffsetForIndex_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
i$ = 36
num_tables$ = 40
tabledir$ = 44
data$ = 64
fontstart$ = 72
tag$ = 80
?stbtt__find_table@@YAIPEAEIPEBD@Z PROC			; stbtt__find_table
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1307
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1308
	mov	eax, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR num_tables$[rsp], eax
; Line 1309
	mov	eax, DWORD PTR fontstart$[rsp]
	add	eax, 12
	mov	DWORD PTR tabledir$[rsp], eax
; Line 1311
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__fin
$LN2@stbtt__fin:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__fin:
	mov	eax, DWORD PTR num_tables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__fin
; Line 1312
	imul	eax, DWORD PTR i$[rsp], 16
	mov	ecx, DWORD PTR tabledir$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR loc$1[rsp], eax
; Line 1313
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
; Line 1314
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt__fin
$LN5@stbtt__fin:
; Line 1315
	jmp	$LN2@stbtt__fin
$LN3@stbtt__fin:
; Line 1316
	xor	eax, eax
$LN1@stbtt__fin:
; Line 1317
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__find_table@@YAIPEAEIPEBD@Z ENDP			; stbtt__find_table
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 8
?stbtt__isfont@@YAHPEAE@Z PROC				; stbtt__isfont
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1295
	mov	QWORD PTR [rsp+8], rcx
; Line 1297
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN2@stbtt__isf:
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG92883
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG92884
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG92885
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG92886
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN3@stbtt__isf:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG92888
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG92889
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG92890
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG92891
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN4@stbtt__isf:
; Line 1300
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 1
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN5@stbtt__isf:
; Line 1301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG92894
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG92895
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG92896
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG92897
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__isf
$LN6@stbtt__isf:
; Line 1302
	xor	eax, eax
$LN1@stbtt__isf:
; Line 1303
	ret	0
?stbtt__isfont@@YAHPEAE@Z ENDP				; stbtt__isfont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttLONG@@YAHPEAE@Z PROC					; ttLONG
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1289
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttLONG@@YAHPEAE@Z ENDP					; ttLONG
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttULONG@@YAIPEAE@Z PROC				; ttULONG
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1288
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttULONG@@YAIPEAE@Z ENDP				; ttULONG
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttSHORT@@YAFPEAE@Z PROC				; ttSHORT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1287
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttSHORT@@YAFPEAE@Z ENDP				; ttSHORT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttUSHORT@@YAGPEAE@Z PROC				; ttUSHORT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1286
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttUSHORT@@YAGPEAE@Z ENDP				; ttUSHORT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
end$ = 44
$T1 = 48
$T2 = 64
__$ReturnAddress$ = 112
b$ = 120
i$ = 128
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z PROC	; stbtt__cff_index_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1261
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1263
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1264
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1265
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1266
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@stbtt__cff
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@stbtt__cff
$LN3@stbtt__cff:
	mov	r8d, 1266				; 000004f2H
	lea	rdx, OFFSET FLAT:$SG92862
	lea	rcx, OFFSET FLAT:$SG92863
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__cff:
; Line 1267
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN5@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN6@stbtt__cff
$LN5@stbtt__cff:
	mov	r8d, 1267				; 000004f3H
	lea	rdx, OFFSET FLAT:$SG92864
	lea	rcx, OFFSET FLAT:$SG92865
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbtt__cff:
; Line 1268
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR offsize$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1269
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1270
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1271
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR end$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR count$[rsp]
	inc	ecx
	imul	ecx, DWORD PTR offsize$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx+2]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1272
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ENDP	; stbtt__cff_index_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z PROC	; stbtt__cff_index_count
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1255
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1256
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1257
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
; Line 1258
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_index_count
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
operands$ = 40
$T1 = 56
b$ = 112
key$ = 120
outcount$ = 128
out$ = 136
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z PROC	; stbtt__dict_get_ints
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1247
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1249
	mov	r8d, DWORD PTR key$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ; stbtt__dict_get
	lea	rcx, QWORD PTR operands$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__dic
$LN2@stbtt__dic:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__dic:
	mov	eax, DWORD PTR outcount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__dic
	mov	eax, DWORD PTR operands$[rsp+12]
	cmp	DWORD PTR operands$[rsp+8], eax
	jge	SHORT $LN3@stbtt__dic
; Line 1251
	lea	rcx, QWORD PTR operands$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1252
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ENDP	; stbtt__dict_get_ints
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
op$1 = 32
start$2 = 36
end$3 = 40
$T4 = 48
$T5 = 64
$T6 = 80
$T7 = 96
__$ReturnAddress$ = 144
b$ = 152
key$ = 160
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z PROC	; stbtt__dict_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1232
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 1233
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
$LN2@stbtt__dic:
; Line 1234
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN3@stbtt__dic
; Line 1235
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$2[rsp], eax
$LN4@stbtt__dic:
; Line 1236
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	cmp	eax, 28
	jl	SHORT $LN5@stbtt__dic
; Line 1237
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ; stbtt__cff_skip_operand
	jmp	SHORT $LN4@stbtt__dic
$LN5@stbtt__dic:
; Line 1238
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR end$3[rsp], eax
; Line 1239
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR op$1[rsp], eax
; Line 1240
	cmp	DWORD PTR op$1[rsp], 12
	jne	SHORT $LN6@stbtt__dic
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	bts	eax, 8
	mov	DWORD PTR op$1[rsp], eax
$LN6@stbtt__dic:
; Line 1241
	mov	eax, DWORD PTR key$[rsp]
	cmp	DWORD PTR op$1[rsp], eax
	jne	SHORT $LN7@stbtt__dic
	mov	eax, DWORD PTR start$2[rsp]
	mov	ecx, DWORD PTR end$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$2[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__dic
$LN7@stbtt__dic:
; Line 1242
	jmp	$LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1243
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__dic:
; Line 1244
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ENDP	; stbtt__dict_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
v$ = 36
b$ = 64
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z PROC	; stbtt__cff_skip_operand
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1216
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1217
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1218
	cmp	DWORD PTR b0$[rsp], 28
	jge	SHORT $LN9@stbtt__cff
	mov	r8d, 1218				; 000004c2H
	lea	rdx, OFFSET FLAT:$SG92813
	lea	rcx, OFFSET FLAT:$SG92814
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stbtt__cff:
; Line 1219
	cmp	DWORD PTR b0$[rsp], 30
	jne	SHORT $LN4@stbtt__cff
; Line 1220
	mov	edx, 1
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1221
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN3@stbtt__cff
; Line 1222
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1223
	mov	eax, DWORD PTR v$[rsp]
	and	eax, 15
	cmp	eax, 15
	je	SHORT $LN7@stbtt__cff
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 4
	cmp	eax, 15
	jne	SHORT $LN6@stbtt__cff
$LN7@stbtt__cff:
; Line 1224
	jmp	SHORT $LN3@stbtt__cff
$LN6@stbtt__cff:
; Line 1225
	jmp	SHORT $LN2@stbtt__cff
$LN3@stbtt__cff:
; Line 1226
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1227
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
$LN5@stbtt__cff:
; Line 1229
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_skip_operand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
tv73 = 36
tv83 = 40
b$ = 64
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z PROC		; stbtt__cff_int
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1205
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1206
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1207
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jl	SHORT $LN2@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 246			; 000000f6H
	jg	SHORT $LN2@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 139				; 0000008bH
	jmp	$LN1@stbtt__cff
	jmp	$LN3@stbtt__cff
$LN2@stbtt__cff:
; Line 1208
	cmp	DWORD PTR b0$[rsp], 247			; 000000f7H
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 250			; 000000faH
	jg	SHORT $LN4@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 247				; 000000f7H
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv73[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv73[rsp]
	lea	eax, DWORD PTR [rcx+rax+108]
	jmp	$LN1@stbtt__cff
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1209
	cmp	DWORD PTR b0$[rsp], 251			; 000000fbH
	jl	SHORT $LN6@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 254			; 000000feH
	jg	SHORT $LN6@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 251				; 000000fbH
	neg	eax
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv83[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv83[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 108				; 0000006cH
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN7@stbtt__cff
$LN6@stbtt__cff:
; Line 1210
	cmp	DWORD PTR b0$[rsp], 28
	jne	SHORT $LN8@stbtt__cff
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN9@stbtt__cff
$LN8@stbtt__cff:
; Line 1211
	cmp	DWORD PTR b0$[rsp], 29
	jne	SHORT $LN10@stbtt__cff
	mov	edx, 4
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
$LN10@stbtt__cff:
$LN9@stbtt__cff:
$LN7@stbtt__cff:
$LN5@stbtt__cff:
$LN3@stbtt__cff:
; Line 1212
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbtt__cff
	mov	r8d, 1212				; 000004bcH
	lea	rdx, OFFSET FLAT:$SG92802
	lea	rcx, OFFSET FLAT:$SG92803
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbtt__cff:
; Line 1213
	xor	eax, eax
$LN1@stbtt__cff:
; Line 1214
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ENDP		; stbtt__cff_int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
$T1 = 48
$T2 = 64
__$ReturnAddress$ = 112
b$ = 120
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z PROC	; stbtt__cff_get_index
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1191
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1193
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$[rsp], eax
; Line 1194
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1195
	cmp	DWORD PTR count$[rsp], 0
	je	SHORT $LN2@stbtt__cff
; Line 1196
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1197
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
	mov	r8d, 1197				; 000004adH
	lea	rdx, OFFSET FLAT:$SG92785
	lea	rcx, OFFSET FLAT:$SG92786
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbtt__cff:
; Line 1198
	mov	eax, DWORD PTR offsize$[rsp]
	imul	eax, DWORD PTR count$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1199
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1201
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1202
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ENDP	; stbtt__cff_get_index
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
o$ = 112
s$ = 120
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z PROC	; stbtt__buf_range
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1182
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1183
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1184
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR s$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR o$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	cmp	DWORD PTR s$[rsp], eax
	jle	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1185
	movsxd	rax, DWORD PTR o$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR r$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR s$[rsp]
	mov	DWORD PTR r$[rsp+12], eax
; Line 1187
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__buf:
; Line 1188
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ENDP	; stbtt__buf_range
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
__$ReturnAddress$ = 80
p$ = 88
size$ = 96
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z PROC		; stbtt__new_buf
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1169
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 1171
	cmp	QWORD PTR size$[rsp], 1073741824	; 40000000H
	jb	SHORT $LN3@stbtt__new
	mov	r8d, 1171				; 00000493H
	lea	rdx, OFFSET FLAT:$SG92764
	lea	rcx, OFFSET FLAT:$SG92765
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbtt__new:
; Line 1172
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR r$[rsp], rax
; Line 1173
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR r$[rsp+12], eax
; Line 1174
	mov	DWORD PTR r$[rsp+8], 0
; Line 1175
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1176
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ENDP		; stbtt__new_buf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
v$ = 36
tv72 = 40
b$ = 64
n$ = 72
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1159
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1160
	mov	DWORD PTR v$[rsp], 0
; Line 1162
	cmp	DWORD PTR n$[rsp], 1
	jl	SHORT $LN6@stbtt__buf
	cmp	DWORD PTR n$[rsp], 4
	jle	SHORT $LN7@stbtt__buf
$LN6@stbtt__buf:
	mov	r8d, 1162				; 0000048aH
	lea	rdx, OFFSET FLAT:$SG92753
	lea	rcx, OFFSET FLAT:$SG92754
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbtt__buf:
; Line 1163
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__buf
$LN2@stbtt__buf:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__buf:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__buf
; Line 1164
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv72[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv72[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
; Line 1165
	mov	eax, DWORD PTR v$[rsp]
; Line 1166
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
o$ = 56
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_skip
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1154
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1155
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR o$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1156
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
b$ = 64
o$ = 72
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_seek
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1148
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1149
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jge	SHORT $LN4@stbtt__buf
$LN3@stbtt__buf:
	mov	r8d, 1149				; 0000047dH
	lea	rdx, OFFSET FLAT:$SG92736
	lea	rcx, OFFSET FLAT:$SG92737
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__buf:
; Line 1150
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN5@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN5@stbtt__buf
	mov	eax, DWORD PTR o$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN6@stbtt__buf
$LN5@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv76[rsp], eax
$LN6@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 1151
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_seek
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 8
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_peek8
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1141
	mov	QWORD PTR [rsp+8], rcx
; Line 1142
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1143
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1144
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@stbtt__buf:
; Line 1145
	ret	0
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_peek8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 0
b$ = 32
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_get8
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1134
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1135
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1136
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1137
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv75[rsp], al
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rcx+8], eax
	movzx	eax, BYTE PTR tv75[rsp]
$LN1@stbtt__buf:
; Line 1138
	add	rsp, 24
	ret	0
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_get8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
nm$ = 36
i$ = 40
offset$ = 44
count$ = 48
stringOffset$ = 52
fc$ = 56
tv155 = 64
font$ = 96
length$ = 104
platformID$ = 112
encodingID$ = 120
languageID$ = 128
nameID$ = 136
stbtt_GetFontNameString PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4824
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4826
	mov	rax, QWORD PTR font$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR fc$[rsp], rax
; Line 4827
	mov	rax, QWORD PTR font$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR offset$[rsp], eax
; Line 4828
	lea	r8, OFFSET FLAT:$SG95610
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4829
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt_GetF
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN5@stbtt_GetF:
; Line 4831
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4832
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4833
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetF
$LN2@stbtt_GetF:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_GetF:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_GetF
; Line 4834
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4836
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR platformID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR encodingID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR languageID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR nameID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
; Line 4837
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR length$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4838
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv155[rsp], rax
	mov	ecx, DWORD PTR loc$1[rsp]
	mov	rdx, QWORD PTR fc$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+10]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR tv155[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 4840
	jmp	$LN2@stbtt_GetF
$LN3@stbtt_GetF:
; Line 4841
	xor	eax, eax
$LN1@stbtt_GetF:
; Line 4842
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetFontNameString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s1$ = 48
len1$ = 56
s2$ = 64
len2$ = 72
stbtt_CompareUTF8toUTF16_bigendian PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4964
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4965
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ; stbtt_CompareUTF8toUTF16_bigendian_internal
; Line 4966
	add	rsp, 40					; 00000028H
	ret	0
stbtt_CompareUTF8toUTF16_bigendian ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fontdata$ = 48
name$ = 56
flags$ = 64
stbtt_FindMatchingFont PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4959
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4960
	mov	r8d, DWORD PTR flags$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z ; stbtt_FindMatchingFont_internal
; Line 4961
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FindMatchingFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale$ = 104
codepoint$ = 112
padding$ = 120
onedge_value$ = 128
pixel_dist_scale$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4762
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4763
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	movss	xmm0, DWORD PTR pixel_dist_scale$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	ecx, BYTE PTR onedge_value$[rsp]
	mov	BYTE PTR [rsp+32], cl
	mov	r9d, DWORD PTR padding$[rsp]
	mov	r8d, eax
	movss	xmm1, DWORD PTR scale$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSDF
; Line 4764
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 80
min_dist$2 = 84
t$3 = 88
x0$4 = 92
y0$5 = 96
it$6 = 100
sx$7 = 104
sy$8 = 108
x1$9 = 112
y1$10 = 116
scale_y$ = 120
verts$11 = 128
dist2$12 = 136
scale_x$ = 140
num$13 = 144
ax$14 = 148
ay$15 = 152
x2$16 = 156
y2$17 = 160
px$18 = 164
py$19 = 168
ix0$ = 172
iy0$ = 176
b$20 = 180
j$21 = 184
iy1$ = 188
ix1$ = 192
num_verts$22 = 196
val$23 = 200
y$24 = 204
x$25 = 208
bx$26 = 212
by$27 = 216
a$28 = 220
bx$29 = 224
by$30 = 228
mx$31 = 232
my$32 = 236
a_inv$33 = 240
precompute$34 = 248
dx$35 = 256
dy$36 = 260
w$ = 264
x0$37 = 268
y1$38 = 272
y0$39 = 276
dist$40 = 280
tv193 = 284
dist2$41 = 288
x1$42 = 292
y1$43 = 296
t$44 = 300
dist$45 = 304
tv440 = 308
tv443 = 312
tv444 = 316
tv446 = 320
tv481 = 324
tv482 = 328
tv484 = 332
tv487 = 336
tv488 = 340
tv490 = 344
tv493 = 348
tv494 = 352
c$46 = 356
discriminant$47 = 360
root$48 = 364
h$ = 368
x1$49 = 372
x0$50 = 376
x2$51 = 380
y1$52 = 384
y0$53 = 388
y2$54 = 392
len2$55 = 396
y_gspace$56 = 400
x_gspace$57 = 404
px$58 = 408
py$59 = 412
box_x0$60 = 416
box_x1$61 = 420
box_y0$62 = 424
box_y1$63 = 428
d$64 = 432
c$65 = 436
b$66 = 440
winding$67 = 444
tv141 = 448
x1$68 = 452
data$ = 456
res$69 = 464
__$ArrayPad$ = 480
info$ = 512
scale$ = 520
glyph$ = 528
padding$ = 536
onedge_value$ = 544
pixel_dist_scale$ = 552
width$ = 560
height$ = 568
xoff$ = 576
yoff$ = 584
stbtt_GetGlyphSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4577
$LN83:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 504				; 000001f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4578
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale_x$[rsp], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale_y$[rsp], xmm0
; Line 4583
	movss	xmm0, DWORD PTR scale$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@stbtt_GetG
	jne	SHORT $LN14@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN14@stbtt_GetG:
; Line 4585
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale$[rsp]
	movss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4588
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR ix0$[rsp], eax
	je	SHORT $LN16@stbtt_GetG
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR iy0$[rsp], eax
	jne	SHORT $LN15@stbtt_GetG
$LN16@stbtt_GetG:
; Line 4589
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN15@stbtt_GetG:
; Line 4591
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix0$[rsp], eax
; Line 4592
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy0$[rsp], eax
; Line 4593
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix1$[rsp], eax
; Line 4594
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy1$[rsp], eax
; Line 4596
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR w$[rsp], eax
; Line 4597
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR h$[rsp], eax
; Line 4599
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN17@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN17@stbtt_GetG:
; Line 4600
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN18@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN18@stbtt_GetG:
; Line 4601
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN19@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN19@stbtt_GetG:
; Line 4602
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN20@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN20@stbtt_GetG:
; Line 4605
	movss	xmm0, DWORD PTR scale_y$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR scale_y$[rsp], xmm0
; Line 4611
	lea	r8, QWORD PTR verts$11[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$22[rsp], eax
; Line 4612
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR data$[rsp], rax
; Line 4613
	movsxd	rax, DWORD PTR num_verts$22[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR precompute$34[rsp], rax
; Line 4615
	mov	DWORD PTR i$1[rsp], 0
	mov	eax, DWORD PTR num_verts$22[rsp]
	dec	eax
	mov	DWORD PTR j$21[rsp], eax
	jmp	SHORT $LN4@stbtt_GetG
$LN2@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	mov	DWORD PTR j$21[rsp], eax
$LN4@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@stbtt_GetG
; Line 4616
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN21@stbtt_GetG
; Line 4617
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$37[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$39[rsp], xmm0
; Line 4618
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$49[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$38[rsp], xmm0
; Line 4619
	movss	xmm0, DWORD PTR x1$49[rsp]
	subss	xmm0, DWORD PTR x0$37[rsp]
	movss	xmm1, DWORD PTR x1$49[rsp]
	subss	xmm1, DWORD PTR x0$37[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$38[rsp]
	subss	xmm1, DWORD PTR y0$39[rsp]
	movss	xmm2, DWORD PTR y1$38[rsp]
	subss	xmm2, DWORD PTR y0$39[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR dist$40[rsp], xmm0
; Line 4620
	movss	xmm0, DWORD PTR dist$40[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@stbtt_GetG
	jne	SHORT $LN53@stbtt_GetG
	xorps	xmm0, xmm0
	movss	DWORD PTR tv193[rsp], xmm0
	jmp	SHORT $LN54@stbtt_GetG
$LN53@stbtt_GetG:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dist$40[rsp]
	movss	DWORD PTR tv193[rsp], xmm0
$LN54@stbtt_GetG:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR tv193[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN22@stbtt_GetG
$LN21@stbtt_GetG:
; Line 4621
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN23@stbtt_GetG
; Line 4622
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x2$51[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y2$54[rsp], xmm0
; Line 4623
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$68[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$52[rsp], xmm0
; Line 4624
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$50[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$53[rsp], xmm0
; Line 4625
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$68[rsp]
	movss	xmm1, DWORD PTR x0$50[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$51[rsp]
	movss	DWORD PTR bx$26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$52[rsp]
	movss	xmm1, DWORD PTR y0$53[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$54[rsp]
	movss	DWORD PTR by$27[rsp], xmm0
; Line 4626
	movss	xmm0, DWORD PTR bx$26[rsp]
	mulss	xmm0, DWORD PTR bx$26[rsp]
	movss	xmm1, DWORD PTR by$27[rsp]
	mulss	xmm1, DWORD PTR by$27[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR len2$55[rsp], xmm0
; Line 4627
	movss	xmm0, DWORD PTR len2$55[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN82@stbtt_GetG
	je	SHORT $LN25@stbtt_GetG
$LN82@stbtt_GetG:
; Line 4628
	movss	xmm0, DWORD PTR bx$26[rsp]
	mulss	xmm0, DWORD PTR bx$26[rsp]
	movss	xmm1, DWORD PTR by$27[rsp]
	mulss	xmm1, DWORD PTR by$27[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN26@stbtt_GetG
$LN25@stbtt_GetG:
; Line 4630
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN26@stbtt_GetG:
; Line 4631
	jmp	SHORT $LN24@stbtt_GetG
$LN23@stbtt_GetG:
; Line 4632
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN24@stbtt_GetG:
$LN22@stbtt_GetG:
; Line 4633
	jmp	$LN2@stbtt_GetG
$LN3@stbtt_GetG:
; Line 4635
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR y$24[rsp], eax
	jmp	SHORT $LN7@stbtt_GetG
$LN5@stbtt_GetG:
	mov	eax, DWORD PTR y$24[rsp]
	inc	eax
	mov	DWORD PTR y$24[rsp], eax
$LN7@stbtt_GetG:
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR y$24[rsp], eax
	jge	$LN6@stbtt_GetG
; Line 4636
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR x$25[rsp], eax
	jmp	SHORT $LN10@stbtt_GetG
$LN8@stbtt_GetG:
	mov	eax, DWORD PTR x$25[rsp]
	inc	eax
	mov	DWORD PTR x$25[rsp], eax
$LN10@stbtt_GetG:
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR x$25[rsp], eax
	jge	$LN9@stbtt_GetG
; Line 4638
	movss	xmm0, DWORD PTR __real@497423f0
	movss	DWORD PTR min_dist$2[rsp], xmm0
; Line 4639
	cvtsi2ss xmm0, DWORD PTR x$25[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR sx$7[rsp], xmm0
; Line 4640
	cvtsi2ss xmm0, DWORD PTR y$24[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR sy$8[rsp], xmm0
; Line 4641
	movss	xmm0, DWORD PTR sx$7[rsp]
	divss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x_gspace$57[rsp], xmm0
; Line 4642
	movss	xmm0, DWORD PTR sy$8[rsp]
	divss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y_gspace$56[rsp], xmm0
; Line 4644
	mov	r9, QWORD PTR verts$11[rsp]
	mov	r8d, DWORD PTR num_verts$22[rsp]
	movss	xmm1, DWORD PTR y_gspace$56[rsp]
	movss	xmm0, DWORD PTR x_gspace$57[rsp]
	call	?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z ; stbtt__compute_crossings_x
	mov	DWORD PTR winding$67[rsp], eax
; Line 4646
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbtt_GetG
$LN11@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN12@stbtt_GetG
; Line 4647
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$4[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$5[rsp], xmm0
; Line 4649
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN27@stbtt_GetG
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN81@stbtt_GetG
	je	$LN27@stbtt_GetG
$LN81@stbtt_GetG:
; Line 4650
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$42[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$43[rsp], xmm0
; Line 4652
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR y0$5[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$41[rsp], xmm0
; Line 4653
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$41[rsp]
	jbe	SHORT $LN29@stbtt_GetG
; Line 4654
	cvtss2sd xmm0, DWORD PTR dist2$41[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN29@stbtt_GetG:
; Line 4659
	movss	xmm0, DWORD PTR x1$42[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$43[rsp]
	subss	xmm1, DWORD PTR y0$5[rsp]
	movss	xmm2, DWORD PTR x0$4[rsp]
	subss	xmm2, DWORD PTR sx$7[rsp]
	mulss	xmm1, xmm2
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	fabs
	cvtsd2ss xmm0, xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR dist$45[rsp], xmm0
; Line 4660
	cmp	DWORD PTR i$1[rsp], 0
	jne	SHORT $LN55@stbtt_GetG
	mov	r8d, 4660				; 00001234H
	lea	rdx, OFFSET FLAT:$SG95508
	lea	rcx, OFFSET FLAT:$SG95509
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN55@stbtt_GetG:
; Line 4661
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist$45[rsp]
	jbe	$LN30@stbtt_GetG
; Line 4665
	movss	xmm0, DWORD PTR x1$42[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR dx$35[rsp], xmm0
	movss	xmm0, DWORD PTR y1$43[rsp]
	subss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR dy$36[rsp], xmm0
; Line 4666
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	DWORD PTR px$58[rsp], xmm0
	movss	xmm0, DWORD PTR y0$5[rsp]
	subss	xmm0, DWORD PTR sy$8[rsp]
	movss	DWORD PTR py$59[rsp], xmm0
; Line 4669
	movss	xmm0, DWORD PTR px$58[rsp]
	mulss	xmm0, DWORD PTR dx$35[rsp]
	movss	xmm1, DWORD PTR py$59[rsp]
	mulss	xmm1, DWORD PTR dy$36[rsp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR dx$35[rsp]
	mulss	xmm1, DWORD PTR dx$35[rsp]
	movss	xmm2, DWORD PTR dy$36[rsp]
	mulss	xmm2, DWORD PTR dy$36[rsp]
	addss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR t$44[rsp], xmm0
; Line 4670
	movss	xmm0, DWORD PTR t$44[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN31@stbtt_GetG
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR t$44[rsp]
	jb	SHORT $LN31@stbtt_GetG
; Line 4671
	movss	xmm0, DWORD PTR dist$45[rsp]
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN31@stbtt_GetG:
$LN30@stbtt_GetG:
; Line 4672
	jmp	$LN28@stbtt_GetG
$LN27@stbtt_GetG:
; Line 4673
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN32@stbtt_GetG
; Line 4674
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x2$16[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y2$17[rsp], xmm0
; Line 4675
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$9[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$10[rsp], xmm0
; Line 4676
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN56@stbtt_GetG
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv440[rsp], xmm0
	jmp	SHORT $LN57@stbtt_GetG
$LN56@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv440[rsp], xmm0
$LN57@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	comiss	xmm0, DWORD PTR tv440[rsp]
	jbe	SHORT $LN60@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN58@stbtt_GetG
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv443[rsp], xmm0
	jmp	SHORT $LN59@stbtt_GetG
$LN58@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv443[rsp], xmm0
$LN59@stbtt_GetG:
	movss	xmm0, DWORD PTR tv443[rsp]
	movss	DWORD PTR tv444[rsp], xmm0
	jmp	SHORT $LN61@stbtt_GetG
$LN60@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR tv444[rsp], xmm0
$LN61@stbtt_GetG:
	movss	xmm0, DWORD PTR tv444[rsp]
	movss	DWORD PTR box_x0$60[rsp], xmm0
; Line 4677
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN62@stbtt_GetG
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv446[rsp], xmm0
	jmp	SHORT $LN63@stbtt_GetG
$LN62@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv446[rsp], xmm0
$LN63@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	comiss	xmm0, DWORD PTR tv446[rsp]
	jbe	SHORT $LN66@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN64@stbtt_GetG
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv481[rsp], xmm0
	jmp	SHORT $LN65@stbtt_GetG
$LN64@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv481[rsp], xmm0
$LN65@stbtt_GetG:
	movss	xmm0, DWORD PTR tv481[rsp]
	movss	DWORD PTR tv482[rsp], xmm0
	jmp	SHORT $LN67@stbtt_GetG
$LN66@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR tv482[rsp], xmm0
$LN67@stbtt_GetG:
	movss	xmm0, DWORD PTR tv482[rsp]
	movss	DWORD PTR box_y0$62[rsp], xmm0
; Line 4678
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN68@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv484[rsp], xmm0
	jmp	SHORT $LN69@stbtt_GetG
$LN68@stbtt_GetG:
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv484[rsp], xmm0
$LN69@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	comiss	xmm0, DWORD PTR tv484[rsp]
	jbe	SHORT $LN72@stbtt_GetG
	movss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR tv488[rsp], xmm0
	jmp	SHORT $LN73@stbtt_GetG
$LN72@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN70@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv487[rsp], xmm0
	jmp	SHORT $LN71@stbtt_GetG
$LN70@stbtt_GetG:
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv487[rsp], xmm0
$LN71@stbtt_GetG:
	movss	xmm0, DWORD PTR tv487[rsp]
	movss	DWORD PTR tv488[rsp], xmm0
$LN73@stbtt_GetG:
	movss	xmm0, DWORD PTR tv488[rsp]
	movss	DWORD PTR box_x1$61[rsp], xmm0
; Line 4679
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN74@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv490[rsp], xmm0
	jmp	SHORT $LN75@stbtt_GetG
$LN74@stbtt_GetG:
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv490[rsp], xmm0
$LN75@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	comiss	xmm0, DWORD PTR tv490[rsp]
	jbe	SHORT $LN78@stbtt_GetG
	movss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR tv494[rsp], xmm0
	jmp	SHORT $LN79@stbtt_GetG
$LN78@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN76@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv493[rsp], xmm0
	jmp	SHORT $LN77@stbtt_GetG
$LN76@stbtt_GetG:
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv493[rsp], xmm0
$LN77@stbtt_GetG:
	movss	xmm0, DWORD PTR tv493[rsp]
	movss	DWORD PTR tv494[rsp], xmm0
$LN79@stbtt_GetG:
	movss	xmm0, DWORD PTR tv494[rsp]
	movss	DWORD PTR box_y1$63[rsp], xmm0
; Line 4681
	movss	xmm0, DWORD PTR box_x0$60[rsp]
	subss	xmm0, DWORD PTR min_dist$2[rsp]
	movss	xmm1, DWORD PTR sx$7[rsp]
	comiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_x1$61[rsp]
	addss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR sx$7[rsp]
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_y0$62[rsp]
	subss	xmm0, DWORD PTR min_dist$2[rsp]
	movss	xmm1, DWORD PTR sy$8[rsp]
	comiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_y1$63[rsp]
	addss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR sy$8[rsp]
	jbe	$LN33@stbtt_GetG
; Line 4682
	mov	DWORD PTR num$13[rsp], 0
; Line 4683
	movss	xmm0, DWORD PTR x1$9[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR ax$14[rsp], xmm0
	movss	xmm0, DWORD PTR y1$10[rsp]
	subss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR ay$15[rsp], xmm0
; Line 4684
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$9[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR bx$29[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$10[rsp]
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR by$30[rsp], xmm0
; Line 4685
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	DWORD PTR mx$31[rsp], xmm0
	movss	xmm0, DWORD PTR y0$5[rsp]
	subss	xmm0, DWORD PTR sy$8[rsp]
	movss	DWORD PTR my$32[rsp], xmm0
; Line 4686
	xorps	xmm0, xmm0
	movss	DWORD PTR res$69[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR res$69[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR res$69[rsp+8], xmm0
; Line 4688
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR a_inv$33[rsp], xmm0
; Line 4689
	cvtss2sd xmm0, DWORD PTR a_inv$33[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	$LN34@stbtt_GetG
	jne	$LN34@stbtt_GetG
; Line 4690
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR bx$29[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR by$30[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR a$28[rsp], xmm0
; Line 4691
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR mx$31[rsp]
	mulss	xmm1, DWORD PTR bx$29[rsp]
	movss	xmm2, DWORD PTR my$32[rsp]
	mulss	xmm2, DWORD PTR by$30[rsp]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR b$20[rsp], xmm0
; Line 4692
	movss	xmm0, DWORD PTR mx$31[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR my$32[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR c$46[rsp], xmm0
; Line 4693
	cvtss2sd xmm0, DWORD PTR a$28[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN36@stbtt_GetG
	jne	SHORT $LN36@stbtt_GetG
; Line 4694
	cvtss2sd xmm0, DWORD PTR b$20[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN80@stbtt_GetG
	je	SHORT $LN38@stbtt_GetG
$LN80@stbtt_GetG:
; Line 4695
	movss	xmm0, DWORD PTR c$46[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR b$20[rsp]
	movsxd	rax, DWORD PTR num$13[rsp]
	movss	DWORD PTR res$69[rsp+rax*4], xmm0
	mov	eax, DWORD PTR num$13[rsp]
	inc	eax
	mov	DWORD PTR num$13[rsp], eax
$LN38@stbtt_GetG:
; Line 4697
	jmp	$LN37@stbtt_GetG
$LN36@stbtt_GetG:
; Line 4698
	movss	xmm0, DWORD PTR b$20[rsp]
	mulss	xmm0, DWORD PTR b$20[rsp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR a$28[rsp]
	mulss	xmm1, DWORD PTR c$46[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR discriminant$47[rsp], xmm0
; Line 4699
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR discriminant$47[rsp]
	jbe	SHORT $LN39@stbtt_GetG
; Line 4700
	mov	DWORD PTR num$13[rsp], 0
	jmp	$LN40@stbtt_GetG
$LN39@stbtt_GetG:
; Line 4702
	cvtss2sd xmm0, DWORD PTR discriminant$47[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR root$48[rsp], xmm0
; Line 4703
	movss	xmm0, DWORD PTR b$20[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR root$48[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR a$28[rsp]
	divss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR res$69[rsp+rax], xmm0
; Line 4704
	movss	xmm0, DWORD PTR b$20[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR root$48[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR a$28[rsp]
	divss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR res$69[rsp+rax], xmm0
; Line 4705
	mov	DWORD PTR num$13[rsp], 2
$LN40@stbtt_GetG:
$LN37@stbtt_GetG:
; Line 4708
	jmp	$LN35@stbtt_GetG
$LN34@stbtt_GetG:
; Line 4709
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR bx$29[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR by$30[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR b$66[rsp], xmm0
; Line 4710
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR mx$31[rsp]
	mulss	xmm1, DWORD PTR bx$29[rsp]
	movss	xmm2, DWORD PTR my$32[rsp]
	mulss	xmm2, DWORD PTR by$30[rsp]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR c$65[rsp], xmm0
; Line 4711
	movss	xmm0, DWORD PTR mx$31[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR my$32[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR d$64[rsp], xmm0
; Line 4712
	lea	r9, QWORD PTR res$69[rsp]
	movss	xmm2, DWORD PTR d$64[rsp]
	movss	xmm1, DWORD PTR c$65[rsp]
	movss	xmm0, DWORD PTR b$66[rsp]
	call	?stbtt__solve_cubic@@YAHMMMPEAM@Z	; stbtt__solve_cubic
	mov	DWORD PTR num$13[rsp], eax
$LN35@stbtt_GetG:
; Line 4714
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR y0$5[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4715
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN41@stbtt_GetG
; Line 4716
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN41@stbtt_GetG:
; Line 4718
	cmp	DWORD PTR num$13[rsp], 1
	jl	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN42@stbtt_GetG
; Line 4719
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4720
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4721
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4722
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4723
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN43@stbtt_GetG
; Line 4724
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN43@stbtt_GetG:
$LN42@stbtt_GetG:
; Line 4726
	cmp	DWORD PTR num$13[rsp], 2
	jl	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN44@stbtt_GetG
; Line 4727
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4728
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4729
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4730
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4731
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN45@stbtt_GetG
; Line 4732
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN45@stbtt_GetG:
$LN44@stbtt_GetG:
; Line 4734
	cmp	DWORD PTR num$13[rsp], 3
	jl	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN46@stbtt_GetG
; Line 4735
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR res$69[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4736
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4737
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4738
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4739
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN47@stbtt_GetG
; Line 4740
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN47@stbtt_GetG:
$LN46@stbtt_GetG:
$LN33@stbtt_GetG:
$LN32@stbtt_GetG:
$LN28@stbtt_GetG:
; Line 4744
	jmp	$LN11@stbtt_GetG
$LN12@stbtt_GetG:
; Line 4745
	cmp	DWORD PTR winding$67[rsp], 0
	jne	SHORT $LN48@stbtt_GetG
; Line 4746
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN48@stbtt_GetG:
; Line 4747
	movzx	eax, BYTE PTR onedge_value$[rsp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR pixel_dist_scale$[rsp]
	mulss	xmm1, DWORD PTR min_dist$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR val$23[rsp], xmm0
; Line 4748
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR val$23[rsp]
	jbe	SHORT $LN49@stbtt_GetG
; Line 4749
	xorps	xmm0, xmm0
	movss	DWORD PTR val$23[rsp], xmm0
	jmp	SHORT $LN50@stbtt_GetG
$LN49@stbtt_GetG:
; Line 4750
	movss	xmm0, DWORD PTR val$23[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN51@stbtt_GetG
; Line 4751
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR val$23[rsp], xmm0
$LN51@stbtt_GetG:
$LN50@stbtt_GetG:
; Line 4752
	cvttss2si eax, DWORD PTR val$23[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	edx, DWORD PTR y$24[rsp]
	sub	edx, ecx
	mov	ecx, edx
	imul	ecx, DWORD PTR w$[rsp]
	mov	edx, DWORD PTR ix0$[rsp]
	mov	r8d, DWORD PTR x$25[rsp]
	sub	r8d, edx
	mov	edx, r8d
	add	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4753
	jmp	$LN8@stbtt_GetG
$LN9@stbtt_GetG:
; Line 4754
	jmp	$LN5@stbtt_GetG
$LN6@stbtt_GetG:
; Line 4755
	mov	rcx, QWORD PTR precompute$34[rsp]
	call	QWORD PTR __imp_free
; Line 4756
	mov	rcx, QWORD PTR verts$11[rsp]
	call	QWORD PTR __imp_free
; Line 4758
	mov	rax, QWORD PTR data$[rsp]
$LN1@stbtt_GetG:
; Line 4759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	ret	0
stbtt_GetGlyphSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitmap$ = 48
userdata$ = 56
stbtt_FreeSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4767
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4768
	mov	rcx, QWORD PTR bitmap$[rsp]
	call	QWORD PTR __imp_free
; Line 4769
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 96
winding_count$ = 100
scale$ = 104
winding_lengths$ = 112
windings$ = 120
result$ = 144
flatness_in_pixels$ = 152
vertices$ = 160
num_verts$ = 168
scale_x$ = 176
scale_y$ = 184
shift_x$ = 192
shift_y$ = 200
x_off$ = 208
y_off$ = 216
invert$ = 224
userdata$ = 232
stbtt_Rasterize PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3696
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 3697
	movss	xmm0, DWORD PTR scale_x$[rsp]
	comiss	xmm0, DWORD PTR scale_y$[rsp]
	jbe	SHORT $LN4@stbtt_Rast
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN5@stbtt_Rast
$LN4@stbtt_Rast:
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN5@stbtt_Rast:
	movss	xmm0, DWORD PTR tv65[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
; Line 3698
	mov	DWORD PTR winding_count$[rsp], 0
; Line 3699
	mov	QWORD PTR winding_lengths$[rsp], 0
; Line 3700
	movss	xmm0, DWORD PTR flatness_in_pixels$[rsp]
	divss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR winding_count$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR winding_lengths$[rsp]
	movaps	xmm2, xmm0
	mov	edx, DWORD PTR num_verts$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ; stbtt_FlattenCurves
	mov	QWORD PTR windings$[rsp], rax
; Line 3701
	cmp	QWORD PTR windings$[rsp], 0
	je	$LN2@stbtt_Rast
; Line 3702
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR invert$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR y_off$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR x_off$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR winding_count$[rsp]
	mov	r8, QWORD PTR winding_lengths$[rsp]
	mov	rdx, QWORD PTR windings$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ; stbtt__rasterize
; Line 3703
	mov	rcx, QWORD PTR winding_lengths$[rsp]
	call	QWORD PTR __imp_free
; Line 3704
	mov	rcx, QWORD PTR windings$[rsp]
	call	QWORD PTR __imp_free
$LN2@stbtt_Rast:
; Line 3706
	add	rsp, 136				; 00000088H
	ret	0
stbtt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$ = 48
y0$ = 52
y1$ = 56
x1$ = 60
font$ = 80
glyph$ = 88
scale_x$ = 96
scale_y$ = 104
shift_x$ = 112
shift_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBoxSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2722
$LN13:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2723
	mov	DWORD PTR x0$[rsp], 0
	mov	DWORD PTR y0$[rsp], 0
; Line 2724
	lea	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR y0$[rsp]
	lea	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	jne	SHORT $LN2@stbtt_GetG
; Line 2726
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbtt_GetG:
; Line 2727
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], 0
$LN5@stbtt_GetG:
; Line 2728
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rax], 0
$LN6@stbtt_GetG:
; Line 2729
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rax], 0
$LN7@stbtt_GetG:
; Line 2730
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2732
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x0$[rsp]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
; Line 2733
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN9@stbtt_GetG
	mov	eax, DWORD PTR y1$[rsp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN9@stbtt_GetG:
; Line 2734
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN10@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x1$[rsp]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_ceil
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN10@stbtt_GetG:
; Line 2735
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN11@stbtt_GetG
	mov	eax, DWORD PTR y0$[rsp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_ceil
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN11@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2737
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
glyph$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2740
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2741
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2742
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
prefilter_x$ = 168
prefilter_y$ = 176
sub_x$ = 184
sub_y$ = 192
glyph$ = 200
stbtt_MakeGlyphBitmapSubpixelPrefilter PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4185
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4186
	mov	eax, DWORD PTR prefilter_y$[rsp]
	dec	eax
	mov	ecx, DWORD PTR out_h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	dec	ecx
	mov	edx, DWORD PTR out_w$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], edx
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	edx, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4197
	cmp	DWORD PTR prefilter_x$[rsp], 1
	jle	SHORT $LN2@stbtt_Make
; Line 4198
	mov	eax, DWORD PTR prefilter_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN2@stbtt_Make:
; Line 4200
	cmp	DWORD PTR prefilter_y$[rsp], 1
	jle	SHORT $LN3@stbtt_Make
; Line 4201
	mov	eax, DWORD PTR prefilter_y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN3@stbtt_Make:
; Line 4203
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	mov	rax, QWORD PTR sub_x$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4204
	mov	ecx, DWORD PTR prefilter_y$[rsp]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	mov	rax, QWORD PTR sub_y$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4205
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
num_verts$ = 104
vertices$ = 112
gbm$ = 120
info$ = 160
output$ = 168
out_w$ = 176
out_h$ = 184
out_stride$ = 192
scale_x$ = 200
scale_y$ = 208
shift_x$ = 216
shift_y$ = 224
glyph$ = 232
stbtt_MakeGlyphBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3759
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 3762
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3765
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3766
	mov	rax, QWORD PTR output$[rsp]
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3767
	mov	eax, DWORD PTR out_w$[rsp]
	mov	DWORD PTR gbm$[rsp], eax
; Line 3768
	mov	eax, DWORD PTR out_h$[rsp]
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3769
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3771
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN2@stbtt_Make
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN2@stbtt_Make
; Line 3772
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN2@stbtt_Make:
; Line 3774
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
; Line 3775
	add	rsp, 152				; 00000098H
	ret	0
stbtt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
glyph$ = 152
stbtt_MakeGlyphBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3778
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3779
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3780
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
ix1$ = 104
iy1$ = 108
num_verts$ = 112
vertices$ = 120
gbm$ = 128
info$ = 176
scale_x$ = 184
scale_y$ = 192
shift_x$ = 200
shift_y$ = 208
glyph$ = 216
width$ = 224
height$ = 232
xoff$ = 240
yoff$ = 248
stbtt_GetGlyphBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3714
$LN12:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 3718
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3720
	movss	xmm0, DWORD PTR scale_x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@stbtt_GetG
	jne	SHORT $LN2@stbtt_GetG
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR scale_x$[rsp], xmm0
$LN2@stbtt_GetG:
; Line 3721
	movss	xmm0, DWORD PTR scale_y$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN3@stbtt_GetG
	jne	SHORT $LN3@stbtt_GetG
; Line 3722
	movss	xmm0, DWORD PTR scale_x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@stbtt_GetG
	jne	SHORT $LN4@stbtt_GetG
; Line 3723
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
; Line 3724
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 3726
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR scale_y$[rsp], xmm0
$LN3@stbtt_GetG:
; Line 3729
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3732
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp], eax
; Line 3733
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3734
	mov	QWORD PTR gbm$[rsp+16], 0
; Line 3736
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt_GetG:
; Line 3737
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp+4]
	mov	DWORD PTR [rax], ecx
$LN6@stbtt_GetG:
; Line 3738
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbtt_GetG:
; Line 3739
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN8@stbtt_GetG:
; Line 3741
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN9@stbtt_GetG
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN9@stbtt_GetG
; Line 3742
	mov	eax, DWORD PTR gbm$[rsp]
	imul	eax, DWORD PTR gbm$[rsp+4]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3743
	cmp	QWORD PTR gbm$[rsp+16], 0
	je	$LN10@stbtt_GetG
; Line 3744
	mov	eax, DWORD PTR gbm$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3746
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN10@stbtt_GetG:
$LN9@stbtt_GetG:
; Line 3749
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
; Line 3750
	mov	rax, QWORD PTR gbm$[rsp+16]
$LN1@stbtt_GetG:
; Line 3751
	add	rsp, 168				; 000000a8H
	ret	0
stbtt_GetGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
glyph$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetGlyphBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3754
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3755
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3756
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
shift_x$ = 128
shift_y$ = 136
ix0$ = 144
iy0$ = 152
ix1$ = 160
iy1$ = 168
stbtt_GetCodepointBitmapBoxSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2745
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2746
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2747
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetCodepointBitmapBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2750
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2751
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetCodepointBitmapBoxSubpixel
; Line 2752
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 128
output$ = 136
out_w$ = 144
out_h$ = 152
out_stride$ = 160
scale_x$ = 168
scale_y$ = 176
shift_x$ = 184
shift_y$ = 192
oversample_x$ = 200
oversample_y$ = 208
sub_x$ = 216
sub_y$ = 224
codepoint$ = 232
stbtt_MakeCodepointBitmapSubpixelPrefilter PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 3789
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+104], eax
	mov	rax, QWORD PTR sub_y$[rsp]
	mov	QWORD PTR [rsp+96], rax
	mov	rax, QWORD PTR sub_x$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR oversample_y$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR oversample_x$[rsp]
	mov	DWORD PTR [rsp+72], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixelPrefilter
; Line 3790
	add	rsp, 120				; 00000078H
	ret	0
stbtt_MakeCodepointBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
codepoint$ = 168
stbtt_MakeCodepointBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3793
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3794
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+72], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3795
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
codepoint$ = 152
stbtt_MakeCodepointBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3803
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3804
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+72], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeCodepointBitmapSubpixel
; Line 3805
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
shift_x$ = 120
shift_y$ = 128
codepoint$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3783
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3784
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR shift_x$[rsp]
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3785
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
codepoint$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetCodepointBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3798
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3799
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+40], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetCodepointBitmapSubpixel
; Line 3800
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitmap$ = 48
userdata$ = 56
stbtt_FreeBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3709
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3710
	mov	rcx, QWORD PTR bitmap$[rsp]
	call	QWORD PTR __imp_free
; Line 3711
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
svg_doc$ = 32
data$ = 40
tv73 = 48
info$ = 80
gl$ = 88
svg$ = 96
stbtt_GetGlyphSVG PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2695
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2696
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2699
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2700
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2702
	mov	edx, DWORD PTR gl$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindSVGDoc
	mov	QWORD PTR svg_doc$[rsp], rax
; Line 2703
	cmp	QWORD PTR svg_doc$[rsp], 0
	je	SHORT $LN3@stbtt_GetG
; Line 2704
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+52]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR svg_doc$[rsp]
	add	rcx, 4
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	eax, eax
	mov	rcx, QWORD PTR tv73[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR svg$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2705
	mov	rax, QWORD PTR svg_doc$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetG
; Line 2706
	jmp	SHORT $LN4@stbtt_GetG
$LN3@stbtt_GetG:
; Line 2707
	xor	eax, eax
$LN4@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2709
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
svg$ = 64
stbtt_GetCodepointSVG PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2712
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2713
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR svg$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSVG
; Line 2714
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
numEntries$ = 36
svg_doc$1 = 40
svg_doc_list$ = 48
data$ = 56
svg_docs$ = 64
info$ = 96
gl$ = 104
stbtt_FindSVGDoc PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2678
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2680
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2681
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z ; stbtt__get_svg
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc_list$[rsp], rax
; Line 2683
	mov	rcx, QWORD PTR svg_doc_list$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numEntries$[rsp], eax
; Line 2684
	mov	rax, QWORD PTR svg_doc_list$[rsp]
	add	rax, 2
	mov	QWORD PTR svg_docs$[rsp], rax
; Line 2686
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
	mov	eax, DWORD PTR numEntries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Find
; Line 2687
	imul	eax, DWORD PTR i$[rsp], 12
	cdqe
	mov	rcx, QWORD PTR svg_docs$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc$1[rsp], rax
; Line 2688
	mov	rcx, QWORD PTR svg_doc$1[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jl	SHORT $LN5@stbtt_Find
	mov	rax, QWORD PTR svg_doc$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jg	SHORT $LN5@stbtt_Find
; Line 2689
	mov	rax, QWORD PTR svg_doc$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 2690
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 2691
	xor	eax, eax
$LN1@stbtt_Find:
; Line 2692
	add	rsp, 88					; 00000058H
	ret	0
stbtt_FindSVGDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
v$ = 56
stbtt_FreeShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2673
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2674
	mov	rcx, QWORD PTR v$[rsp]
	call	QWORD PTR __imp_free
; Line 2675
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
glyph_index$ = 56
pvertices$ = 64
stbtt_GetGlyphShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2298
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2299
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2300
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeTT
	jmp	SHORT $LN1@stbtt_GetG
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2302
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeT2
$LN3@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2303
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
vertices$ = 64
stbtt_GetCodepointShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1590
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1591
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR vertices$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
; Line 1592
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numberOfContours$ = 48
tv75 = 52
g$ = 56
tv87 = 60
info$ = 80
glyph_index$ = 88
stbtt_IsGlyphEmpty PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1647
$LN9:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1650
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_IsGl
; Line 1651
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
	test	eax, eax
	jne	SHORT $LN5@stbtt_IsGl
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@stbtt_IsGl
$LN5@stbtt_IsGl:
	mov	DWORD PTR tv75[rsp], 0
$LN6@stbtt_IsGl:
	mov	eax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbtt_IsGl
$LN2@stbtt_IsGl:
; Line 1652
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1653
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN3@stbtt_IsGl
	mov	eax, 1
	jmp	SHORT $LN1@stbtt_IsGl
$LN3@stbtt_IsGl:
; Line 1654
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1655
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jne	SHORT $LN7@stbtt_IsGl
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN8@stbtt_IsGl
$LN7@stbtt_IsGl:
	mov	DWORD PTR tv87[rsp], 0
$LN8@stbtt_IsGl:
	mov	eax, DWORD PTR tv87[rsp]
$LN1@stbtt_IsGl:
; Line 1656
	add	rsp, 72					; 00000048H
	ret	0
stbtt_IsGlyphEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
length$ = 36
data$ = 40
info$ = 64
table$ = 72
table_length$ = 80
stbtt_GetKerningTable PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2333
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2334
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2338
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN5@stbtt_GetK
; Line 2339
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN5@stbtt_GetK:
; Line 2340
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN6@stbtt_GetK
; Line 2341
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN6@stbtt_GetK:
; Line 2342
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN7@stbtt_GetK
; Line 2343
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN7@stbtt_GetK:
; Line 2345
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR length$[rsp], eax
; Line 2346
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR table_length$[rsp], eax
	jge	SHORT $LN8@stbtt_GetK
; Line 2347
	mov	eax, DWORD PTR table_length$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN8@stbtt_GetK:
; Line 2349
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetK
$LN2@stbtt_GetK:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbtt_GetK:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN3@stbtt_GetK
; Line 2351
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2352
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+4], eax
; Line 2353
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 2354
	jmp	$LN2@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2356
	mov	eax, DWORD PTR length$[rsp]
$LN1@stbtt_GetK:
; Line 2357
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 32
info$ = 64
stbtt_GetKerningTableLength PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2318
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2319
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2322
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetK
; Line 2323
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN2@stbtt_GetK:
; Line 2324
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN3@stbtt_GetK
; Line 2325
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2326
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN4@stbtt_GetK
; Line 2327
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN4@stbtt_GetK:
; Line 2329
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
$LN1@stbtt_GetK:
; Line 2330
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTableLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$1 = 48
info$ = 80
glyph_index$ = 88
x0$ = 96
y0$ = 104
x1$ = 112
y1$ = 120
stbtt_GetGlyphBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1626
$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1627
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_GetG
; Line 1628
	mov	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
; Line 1629
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 1630
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$1[rsp], eax
; Line 1631
	cmp	DWORD PTR g$1[rsp], 0
	jge	SHORT $LN4@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 1633
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 1634
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 1635
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
; Line 1636
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 1638
	mov	eax, 1
$LN1@stbtt_GetG:
; Line 1639
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
xAdvance$ = 32
info$ = 64
g1$ = 72
g2$ = 80
stbtt_GetGlyphKernAdvance PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2611
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2612
	mov	DWORD PTR xAdvance$[rsp], 0
; Line 2614
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN2@stbtt_GetG
; Line 2615
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ; stbtt__GetGlyphGPOSInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2616
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	je	SHORT $LN4@stbtt_GetG
; Line 2617
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ; stbtt__GetGlyphKernInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
$LN4@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2619
	mov	eax, DWORD PTR xAdvance$[rsp]
; Line 2620
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numOfLongHorMetrics$ = 32
info$ = 64
glyph_index$ = 72
advanceWidth$ = 80
leftSideBearing$ = 88
stbtt_GetGlyphHMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2306
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2307
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+34]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR numOfLongHorMetrics$[rsp], ax
; Line 2308
	movzx	eax, WORD PTR numOfLongHorMetrics$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	$LN2@stbtt_GetG
; Line 2309
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetG:
; Line 2310
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 2311
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2312
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	lea	ecx, DWORD PTR [rcx*4-4]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 2313
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2315
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 64
codepoint$ = 72
x0$ = 80
y0$ = 88
x1$ = 96
y1$ = 104
stbtt_GetCodepointBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1642
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1643
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBox
; Line 1644
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 32
tv79 = 36
info$ = 64
ch1$ = 72
ch2$ = 80
stbtt_GetCodepointKernAdvance PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2623
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2624
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetC
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN2@stbtt_GetC
; Line 2625
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetC
$LN2@stbtt_GetC:
; Line 2626
	mov	edx, DWORD PTR ch2$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv81[rsp], eax
	mov	edx, DWORD PTR ch1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv79[rsp], eax
	mov	r8d, DWORD PTR tv81[rsp]
	mov	edx, DWORD PTR tv79[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphKernAdvance
$LN1@stbtt_GetC:
; Line 2627
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
codepoint$ = 56
advanceWidth$ = 64
leftSideBearing$ = 72
stbtt_GetCodepointHMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2630
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2631
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r9, QWORD PTR leftSideBearing$[rsp]
	mov	r8, QWORD PTR advanceWidth$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 2632
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
x0$ = 56
y0$ = 64
x1$ = 72
y1$ = 80
stbtt_GetFontBoundingBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2653
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2654
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+36]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2655
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+38]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2656
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2657
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+42]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2658
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontBoundingBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tab$ = 32
info$ = 64
typoAscent$ = 72
typoDescent$ = 80
typoLineGap$ = 88
stbtt_GetFontVMetricsOS2 PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2642
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2643
	lea	r8, OFFSET FLAT:$SG93880
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR tab$[rsp], eax
; Line 2644
	cmp	DWORD PTR tab$[rsp], 0
	jne	SHORT $LN2@stbtt_GetF
; Line 2645
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 2646
	cmp	QWORD PTR typoAscent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+68]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoAscent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2647
	cmp	QWORD PTR typoDescent$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+70]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoDescent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2648
	cmp	QWORD PTR typoLineGap$[rsp], 0
	je	SHORT $LN5@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+72]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoLineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetF:
; Line 2649
	mov	eax, 1
$LN1@stbtt_GetF:
; Line 2650
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetFontVMetricsOS2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
ascent$ = 56
descent$ = 64
lineGap$ = 72
stbtt_GetFontVMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2635
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2636
	cmp	QWORD PTR ascent$[rsp], 0
	je	SHORT $LN2@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR ascent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@stbtt_GetF:
; Line 2637
	cmp	QWORD PTR descent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR descent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2638
	cmp	QWORD PTR lineGap$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR lineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2639
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
unitsPerEm$ = 32
info$ = 64
pixels$ = 72
stbtt_ScaleForMappingEmToPixels PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2667
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2668
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR unitsPerEm$[rsp], eax
; Line 2669
	cvtsi2ss xmm0, DWORD PTR unitsPerEm$[rsp]
	movss	xmm1, DWORD PTR pixels$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2670
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
fheight$ = 36
info$ = 64
height$ = 72
stbtt_ScaleForPixelHeight PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2661
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2662
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	DWORD PTR tv71[rsp], eax
	mov	rcx, QWORD PTR info$[rsp]
	movsxd	rcx, DWORD PTR [rcx+36]
	mov	rdx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+6]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR tv71[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fheight$[rsp], eax
; Line 2663
	cvtsi2ss xmm0, DWORD PTR fheight$[rsp]
	movss	xmm1, DWORD PTR height$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2664
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index_map$ = 32
format$ = 36
item$1 = 40
search$2 = 44
data$ = 48
searchRange$3 = 56
segcount$4 = 60
entrySelector$5 = 64
rangeShift$6 = 68
offset$7 = 72
start$8 = 76
mid$9 = 80
low$10 = 84
end$11 = 88
last$12 = 92
first$13 = 96
endCount$14 = 100
high$15 = 104
start_char$16 = 108
start_glyph$17 = 112
bytes$18 = 116
count$19 = 120
ngroups$20 = 124
end_char$21 = 128
info$ = 160
unicode_codepoint$ = 168
stbtt_FindGlyphIndex PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1497
$LN33:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 1498
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1499
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR index_map$[rsp], eax
; Line 1501
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR format$[rsp], ax
; Line 1502
	movzx	eax, WORD PTR format$[rsp]
	test	eax, eax
	jne	SHORT $LN6@stbtt_Find
; Line 1503
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR bytes$18[rsp], eax
; Line 1504
	mov	eax, DWORD PTR bytes$18[rsp]
	sub	eax, 6
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jge	SHORT $LN8@stbtt_Find
; Line 1505
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR unicode_codepoint$[rsp]
	movzx	eax, BYTE PTR [rax+rcx+6]
	jmp	$LN1@stbtt_Find
$LN8@stbtt_Find:
; Line 1506
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN7@stbtt_Find
$LN6@stbtt_Find:
; Line 1507
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 6
	jne	$LN9@stbtt_Find
; Line 1508
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR first$13[rsp], eax
; Line 1509
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$19[rsp], eax
; Line 1510
	mov	eax, DWORD PTR first$13[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jb	SHORT $LN11@stbtt_Find
	mov	eax, DWORD PTR count$19[rsp]
	mov	ecx, DWORD PTR first$13[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN11@stbtt_Find
; Line 1511
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR first$13[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	mov	ecx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN11@stbtt_Find:
; Line 1512
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN10@stbtt_Find
$LN9@stbtt_Find:
; Line 1513
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 2
	jne	SHORT $LN12@stbtt_Find
; Line 1514
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN31@stbtt_Find
	mov	r8d, 1514				; 000005eaH
	lea	rdx, OFFSET FLAT:$SG93079
	lea	rcx, OFFSET FLAT:$SG93080
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt_Find:
; Line 1515
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN13@stbtt_Find
$LN12@stbtt_Find:
; Line 1516
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 4
	jne	$LN14@stbtt_Find
; Line 1517
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR segcount$4[rsp], ax
; Line 1518
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1519
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1520
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR rangeShift$6[rsp], ax
; Line 1523
	mov	eax, DWORD PTR index_map$[rsp]
	add	eax, 14
	mov	DWORD PTR endCount$14[rsp], eax
; Line 1524
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	DWORD PTR search$2[rsp], eax
; Line 1526
	cmp	DWORD PTR unicode_codepoint$[rsp], 65535 ; 0000ffffH
	jle	SHORT $LN16@stbtt_Find
; Line 1527
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN16@stbtt_Find:
; Line 1531
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR rangeShift$6[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN17@stbtt_Find
; Line 1532
	movzx	eax, WORD PTR rangeShift$6[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN17@stbtt_Find:
; Line 1535
	mov	eax, DWORD PTR search$2[rsp]
	sub	eax, 2
	mov	DWORD PTR search$2[rsp], eax
$LN2@stbtt_Find:
; Line 1536
	movzx	eax, WORD PTR entrySelector$5[rsp]
	test	eax, eax
	je	SHORT $LN3@stbtt_Find
; Line 1538
	movzx	eax, WORD PTR searchRange$3[rsp]
	shr	ax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1539
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR searchRange$3[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR end$11[rsp], ax
; Line 1540
	movzx	eax, WORD PTR end$11[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN18@stbtt_Find
; Line 1541
	movzx	eax, WORD PTR searchRange$3[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN18@stbtt_Find:
; Line 1542
	movzx	eax, WORD PTR entrySelector$5[rsp]
	dec	ax
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1543
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 1544
	mov	eax, DWORD PTR search$2[rsp]
	add	eax, 2
	mov	DWORD PTR search$2[rsp], eax
; Line 1548
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	WORD PTR item$1[rsp], ax
; Line 1550
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR start$8[rsp], ax
; Line 1551
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR last$12[rsp], ax
; Line 1552
	movzx	eax, WORD PTR start$8[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN20@stbtt_Find
	movzx	eax, WORD PTR last$12[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN19@stbtt_Find
$LN20@stbtt_Find:
; Line 1553
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN19@stbtt_Find:
; Line 1555
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR offset$7[rsp], ax
; Line 1556
	movzx	eax, WORD PTR offset$7[rsp]
	test	eax, eax
	jne	SHORT $LN21@stbtt_Find
; Line 1557
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR unicode_codepoint$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN21@stbtt_Find:
; Line 1559
	movzx	eax, WORD PTR offset$7[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR start$8[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR index_map$[rsp]
	add	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
	jmp	$LN15@stbtt_Find
$LN14@stbtt_Find:
; Line 1561
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	je	SHORT $LN23@stbtt_Find
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 13
	jne	$LN22@stbtt_Find
$LN23@stbtt_Find:
; Line 1562
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR ngroups$20[rsp], eax
; Line 1564
	mov	DWORD PTR low$10[rsp], 0
	mov	eax, DWORD PTR ngroups$20[rsp]
	mov	DWORD PTR high$15[rsp], eax
$LN4@stbtt_Find:
; Line 1566
	mov	eax, DWORD PTR high$15[rsp]
	cmp	DWORD PTR low$10[rsp], eax
	jge	$LN5@stbtt_Find
; Line 1567
	mov	eax, DWORD PTR low$10[rsp]
	mov	ecx, DWORD PTR high$15[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR low$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR mid$9[rsp], eax
; Line 1568
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+16]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_char$16[rsp], eax
; Line 1569
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+20]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR end_char$21[rsp], eax
; Line 1570
	mov	eax, DWORD PTR start_char$16[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN24@stbtt_Find
; Line 1571
	mov	eax, DWORD PTR mid$9[rsp]
	mov	DWORD PTR high$15[rsp], eax
	jmp	SHORT $LN25@stbtt_Find
$LN24@stbtt_Find:
; Line 1572
	mov	eax, DWORD PTR end_char$21[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jbe	SHORT $LN26@stbtt_Find
; Line 1573
	mov	eax, DWORD PTR mid$9[rsp]
	inc	eax
	mov	DWORD PTR low$10[rsp], eax
	jmp	SHORT $LN27@stbtt_Find
$LN26@stbtt_Find:
; Line 1575
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_glyph$17[rsp], eax
; Line 1576
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	jne	SHORT $LN28@stbtt_Find
; Line 1577
	mov	eax, DWORD PTR unicode_codepoint$[rsp]
	mov	ecx, DWORD PTR start_glyph$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR start_char$16[rsp]
	jmp	SHORT $LN1@stbtt_Find
	jmp	SHORT $LN29@stbtt_Find
$LN28@stbtt_Find:
; Line 1579
	mov	eax, DWORD PTR start_glyph$17[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN29@stbtt_Find:
$LN27@stbtt_Find:
$LN25@stbtt_Find:
; Line 1581
	jmp	$LN4@stbtt_Find
$LN5@stbtt_Find:
; Line 1582
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Find
$LN22@stbtt_Find:
$LN15@stbtt_Find:
$LN13@stbtt_Find:
$LN10@stbtt_Find:
$LN7@stbtt_Find:
; Line 1585
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN32@stbtt_Find
	mov	r8d, 1585				; 00000631H
	lea	rdx, OFFSET FLAT:$SG93097
	lea	rcx, OFFSET FLAT:$SG93098
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN32@stbtt_Find:
; Line 1586
	xor	eax, eax
$LN1@stbtt_Find:
; Line 1587
	add	rsp, 152				; 00000098H
	ret	0
stbtt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
data$ = 56
offset$ = 64
stbtt_InitFont PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4954
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4955
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ; stbtt_InitFont_internal
; Line 4956
	add	rsp, 40					; 00000028H
	ret	0
stbtt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
index$ = 56
stbtt_GetFontOffsetForIndex PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4944
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4945
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ; stbtt_GetFontOffsetForIndex_internal
; Line 4946
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontOffsetForIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
stbtt_GetNumberOfFonts PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4949
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4950
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z ; stbtt_GetNumberOfFonts_internal
; Line 4951
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetNumberOfFonts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 80
i$ = 88
j$ = 92
scale$2 = 96
pad$3 = 100
glyph$4 = 104
bc$5 = 112
fh$6 = 120
missing_glyph$ = 124
k$ = 128
return_value$ = 132
tv80 = 136
tv176 = 140
x0$7 = 144
recip_h$8 = 148
sub_x$9 = 152
y0$10 = 156
recip_v$11 = 160
sub_y$12 = 164
codepoint$13 = 168
advance$14 = 172
old_h_over$ = 176
old_v_over$ = 180
lsb$15 = 184
y1$16 = 188
x1$17 = 192
spc$ = 240
info$ = 248
ranges$ = 256
num_ranges$ = 264
rects$ = 272
stbtt_PackFontRangesRenderIntoRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4209
$LN22:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 4210
	mov	DWORD PTR missing_glyph$[rsp], -1
	mov	DWORD PTR return_value$[rsp], 1
; Line 4213
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR old_h_over$[rsp], eax
; Line 4214
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR old_v_over$[rsp], eax
; Line 4216
	mov	DWORD PTR k$[rsp], 0
; Line 4217
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$6[rsp], xmm0
; Line 4219
	movss	xmm0, DWORD PTR fh$6[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN18@stbtt_Pack
	movss	xmm1, DWORD PTR fh$6[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv80[rsp], xmm0
	jmp	SHORT $LN19@stbtt_Pack
$LN18@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$6[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv80[rsp], xmm0
$LN19@stbtt_Pack:
	movss	xmm0, DWORD PTR tv80[rsp]
	movss	DWORD PTR scale$2[rsp], xmm0
; Line 4221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+32]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 4222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+33]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 4223
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_h$8[rsp], xmm0
; Line 4224
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_v$11[rsp], xmm0
; Line 4225
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	movss	DWORD PTR sub_x$9[rsp], xmm0
; Line 4226
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	movss	DWORD PTR sub_y$12[rsp], xmm0
; Line 4227
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4228
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$1[rsp], rax
; Line 4229
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	$LN8@stbtt_Pack
; Line 4230
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	add	rcx, QWORD PTR [rdx+rax+24]
	mov	rax, rcx
	mov	QWORD PTR bc$5[rsp], rax
; Line 4232
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN20@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN21@stbtt_Pack
$LN20@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv176[rsp], eax
$LN21@stbtt_Pack:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR codepoint$13[rsp], eax
; Line 4233
	mov	edx, DWORD PTR codepoint$13[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$4[rsp], eax
; Line 4234
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR pad$3[rsp], eax
; Line 4237
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4238
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 4239
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 4240
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4241
	lea	r9, QWORD PTR lsb$15[rsp]
	lea	r8, QWORD PTR advance$14[rsp]
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 4242
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$2[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$16[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$17[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$7[rsp]
	mov	QWORD PTR [rsp+32], rax
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 4246
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$2[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	inc	eax
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	edx, DWORD PTR [rdx+36]
	mov	ecx, DWORD PTR [rcx+12]
	sub	ecx, edx
	inc	ecx
	mov	rdx, QWORD PTR r$1[rsp]
	movsxd	rdx, DWORD PTR [rdx]
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$1[rsp]
	mov	r9, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	r8d, DWORD PTR glyph$4[rsp]
	mov	DWORD PTR [rsp+72], r8d
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+64], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm0
	movss	DWORD PTR [rsp+40], xmm1
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+24]
	mov	DWORD PTR [rsp+32], r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4256
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+36], 1
	jbe	SHORT $LN10@stbtt_Pack
; Line 4257
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN10@stbtt_Pack:
; Line 4261
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+40], 1
	jbe	SHORT $LN11@stbtt_Pack
; Line 4262
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN11@stbtt_Pack:
; Line 4266
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
; Line 4267
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+2], cx
; Line 4268
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 4269
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 4270
	cvtsi2ss xmm0, DWORD PTR advance$14[rsp]
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4271
	cvtsi2ss xmm0, DWORD PTR x0$7[rsp]
	mulss	xmm0, DWORD PTR recip_h$8[rsp]
	addss	xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4272
	cvtsi2ss xmm0, DWORD PTR y0$10[rsp]
	mulss	xmm0, DWORD PTR recip_v$11[rsp]
	addss	xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4273
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR x0$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_h$8[rsp]
	addss	xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4274
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR y0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_v$11[rsp]
	addss	xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4276
	cmp	DWORD PTR glyph$4[rsp], 0
	jne	SHORT $LN12@stbtt_Pack
; Line 4277
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR missing_glyph$[rsp], eax
$LN12@stbtt_Pack:
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4278
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN13@stbtt_Pack
; Line 4279
	mov	DWORD PTR return_value$[rsp], 0
	jmp	$LN14@stbtt_Pack
$LN13@stbtt_Pack:
; Line 4280
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	jne	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN15@stbtt_Pack
	cmp	DWORD PTR missing_glyph$[rsp], 0
	jl	SHORT $LN15@stbtt_Pack
; Line 4281
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR missing_glyph$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 40				; 00000028H
	movsxd	r8, DWORD PTR j$[rsp]
	imul	r8, r8, 28
	mov	r9, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR [r9+rdx+24]
	lea	rdi, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [rax+rcx]
	mov	ecx, 28
	rep movsb
; Line 4282
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
; Line 4283
	mov	DWORD PTR return_value$[rsp], 0
$LN16@stbtt_Pack:
$LN14@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4286
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4287
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4288
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4291
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_h_over$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 4292
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_v_over$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 4294
	mov	eax, DWORD PTR return_value$[rsp]
; Line 4295
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
rects$ = 56
num_rects$ = 64
stbtt_PackFontRangesPackRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4298
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4299
	mov	r8d, DWORD PTR num_rects$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z ; stbrp_pack_rects
; Line 4300
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackFontRangesPackRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 80
k$ = 84
j$ = 88
fh$1 = 92
glyph$2 = 96
tv78 = 100
tv144 = 104
scale$3 = 108
missing_glyph_added$ = 112
codepoint$4 = 116
x0$5 = 120
x1$6 = 124
y0$7 = 128
y1$8 = 132
spc$ = 160
info$ = 168
ranges$ = 176
num_ranges$ = 184
rects$ = 192
stbtt_PackFontRangesGatherRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4150
$LN17:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 4152
	mov	DWORD PTR missing_glyph_added$[rsp], 0
; Line 4154
	mov	DWORD PTR k$[rsp], 0
; Line 4155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4156
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$1[rsp], xmm0
; Line 4157
	movss	xmm0, DWORD PTR fh$1[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@stbtt_Pack
	movss	xmm1, DWORD PTR fh$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN14@stbtt_Pack
$LN13@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$1[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv78[rsp], xmm0
$LN14@stbtt_Pack:
	movss	xmm0, DWORD PTR tv78[rsp]
	movss	DWORD PTR scale$3[rsp], xmm0
; Line 4158
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+36]
	mov	BYTE PTR [rcx+rax+32], dl
; Line 4159
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+rax+33], dl
; Line 4160
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4162
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN15@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv144[rsp], eax
$LN16@stbtt_Pack:
	mov	eax, DWORD PTR tv144[rsp]
	mov	DWORD PTR codepoint$4[rsp], eax
; Line 4163
	mov	edx, DWORD PTR codepoint$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$2[rsp], eax
; Line 4164
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN8@stbtt_Pack
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN10@stbtt_Pack
	cmp	DWORD PTR missing_glyph_added$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
$LN10@stbtt_Pack:
; Line 4165
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+12], 0
; Line 4166
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4167
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$3[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$3[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$8[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR y0$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x0$5[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+40], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+32], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$2[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4172
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+12], eax
; Line 4173
	mov	eax, DWORD PTR y0$7[rsp]
	mov	ecx, DWORD PTR y1$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+16], eax
; Line 4174
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4175
	mov	DWORD PTR missing_glyph_added$[rsp], 1
$LN11@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4177
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4178
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4179
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4181
	mov	eax, DWORD PTR k$[rsp]
; Line 4182
	add	rsp, 152				; 00000098H
	ret	0
stbtt_PackFontRangesGatherRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
y$2 = 36
ipw$ = 40
iph$ = 44
b$ = 48
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
align_to_integer$ = 136
stbtt_GetPackedQuad PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4364
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4365
	cvtsi2ss xmm0, DWORD PTR pw$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rsp], xmm0
; Line 4366
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 4368
	cmp	DWORD PTR align_to_integer$[rsp], 0
	je	$LN2@stbtt_GetP
; Line 4369
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_floor
	cvttsd2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
; Line 4370
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_floor
	cvttsd2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 4371
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR x$1[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4372
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR y$2[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4373
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR x$1[rsp]
	addss	xmm0, DWORD PTR [rax+20]
	mov	rax, QWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4374
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR y$2[rsp]
	addss	xmm0, DWORD PTR [rax+24]
	mov	rax, QWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR [rax+12]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4375
	jmp	SHORT $LN3@stbtt_GetP
$LN2@stbtt_GetP:
; Line 4376
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4377
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4378
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+20]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4379
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+24]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
$LN3@stbtt_GetP:
; Line 4382
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4383
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4384
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4385
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+28], xmm0
; Line 4387
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4388
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 8
skip$ = 16
stbtt_PackSetSkipMissingCodepoints PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4006
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 4007
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR skip$[rsp]
	mov	DWORD PTR [rax+32], ecx
; Line 4008
	ret	0
stbtt_PackSetSkipMissingCodepoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
h_oversample$ = 56
v_oversample$ = 64
stbtt_PackSetOversampling PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3996
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3997
	cmp	DWORD PTR h_oversample$[rsp], 8
	jbe	SHORT $LN5@stbtt_Pack
	mov	r8d, 3997				; 00000f9dH
	lea	rdx, OFFSET FLAT:$SG94913
	lea	rcx, OFFSET FLAT:$SG94914
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbtt_Pack:
; Line 3998
	cmp	DWORD PTR v_oversample$[rsp], 8
	jbe	SHORT $LN6@stbtt_Pack
	mov	r8d, 3998				; 00000f9eH
	lea	rdx, OFFSET FLAT:$SG94915
	lea	rcx, OFFSET FLAT:$SG94916
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbtt_Pack:
; Line 3999
	cmp	DWORD PTR h_oversample$[rsp], 8
	ja	SHORT $LN2@stbtt_Pack
; Line 4000
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR h_oversample$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN2@stbtt_Pack:
; Line 4001
	cmp	DWORD PTR v_oversample$[rsp], 8
	ja	SHORT $LN3@stbtt_Pack
; Line 4002
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR v_oversample$[rsp]
	mov	DWORD PTR [rax+40], ecx
$LN3@stbtt_Pack:
; Line 4003
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackSetOversampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
j$ = 52
n$ = 56
return_value$ = 60
rects$ = 64
info$ = 80
spc$ = 256
fontdata$ = 264
font_index$ = 272
ranges$ = 280
num_ranges$ = 288
stbtt_PackFontRanges PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4303
$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 4305
	mov	DWORD PTR return_value$[rsp], 1
; Line 4310
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4311
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+6], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+4], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+2], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx], dx
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4317
	mov	DWORD PTR n$[rsp], 0
; Line 4318
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbtt_Pack
; Line 4319
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN8@stbtt_Pack
$LN9@stbtt_Pack:
; Line 4321
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR rects$[rsp], rax
; Line 4322
	cmp	QWORD PTR rects$[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4323
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN11@stbtt_Pack:
; Line 4325
	mov	rax, QWORD PTR spc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR info$[rsp], rax
; Line 4326
	mov	edx, DWORD PTR font_index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4328
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesGatherRects
	mov	DWORD PTR n$[rsp], eax
; Line 4330
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesPackRects
; Line 4332
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesRenderIntoRects
	mov	DWORD PTR return_value$[rsp], eax
; Line 4334
	mov	rcx, QWORD PTR rects$[rsp]
	call	QWORD PTR __imp_free
; Line 4335
	mov	eax, DWORD PTR return_value$[rsp]
$LN1@stbtt_Pack:
; Line 4336
	add	rsp, 248				; 000000f8H
	ret	0
stbtt_PackFontRanges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
range$ = 48
spc$ = 112
fontdata$ = 120
font_index$ = 128
font_size$ = 136
first_unicode_codepoint_in_range$ = 144
num_chars_in_range$ = 152
chardata_for_range$ = 160
stbtt_PackFontRange PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4340
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4342
	mov	eax, DWORD PTR first_unicode_codepoint_in_range$[rsp]
	mov	DWORD PTR range$[rsp+4], eax
; Line 4343
	mov	QWORD PTR range$[rsp+8], 0
; Line 4344
	mov	eax, DWORD PTR num_chars_in_range$[rsp]
	mov	DWORD PTR range$[rsp+16], eax
; Line 4345
	mov	rax, QWORD PTR chardata_for_range$[rsp]
	mov	QWORD PTR range$[rsp+24], rax
; Line 4346
	movss	xmm0, DWORD PTR font_size$[rsp]
	movss	DWORD PTR range$[rsp], xmm0
; Line 4347
	mov	DWORD PTR [rsp+32], 1
	lea	r9, QWORD PTR range$[rsp]
	mov	r8d, DWORD PTR font_index$[rsp]
	mov	rdx, QWORD PTR fontdata$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRanges
; Line 4348
	add	rsp, 104				; 00000068H
	ret	0
stbtt_PackFontRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
stbtt_PackEnd PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3990
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3991
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	call	QWORD PTR __imp_free
; Line 3992
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
; Line 3993
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 48
num_nodes$ = 52
nodes$ = 56
context$ = 64
spc$ = 96
pixels$ = 104
pw$ = 112
ph$ = 120
stride_in_bytes$ = 128
padding$ = 136
alloc_context$ = 144
stbtt_PackBegin PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3958
$LN10:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3959
	mov	ecx, 20
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR context$[rsp], rax
; Line 3960
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_nodes$[rsp], eax
; Line 3961
	movsxd	rax, DWORD PTR num_nodes$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR nodes$[rsp], rax
; Line 3963
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN3@stbtt_Pack
	cmp	QWORD PTR nodes$[rsp], 0
	jne	SHORT $LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 3964
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN4@stbtt_Pack
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR __imp_free
$LN4@stbtt_Pack:
; Line 3965
	cmp	QWORD PTR nodes$[rsp], 0
	je	SHORT $LN5@stbtt_Pack
	mov	rcx, QWORD PTR nodes$[rsp]
	call	QWORD PTR __imp_free
$LN5@stbtt_Pack:
; Line 3966
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN2@stbtt_Pack:
; Line 3969
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3970
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 3971
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 3972
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 3973
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 3974
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR nodes$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 3975
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR padding$[rsp]
	mov	DWORD PTR [rax+28], ecx
; Line 3976
	cmp	DWORD PTR stride_in_bytes$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
	mov	eax, DWORD PTR stride_in_bytes$[rsp]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR tv91[rsp], eax
$LN9@stbtt_Pack:
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR tv91[rsp]
	mov	DWORD PTR [rax+24], ecx
; Line 3977
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+36], 1
; Line 3978
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+40], 1
; Line 3979
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 3981
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR padding$[rsp]
	mov	edx, DWORD PTR pw$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR num_nodes$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, QWORD PTR nodes$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR context$[rsp]
	call	?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z ; stbrp_init_target
; Line 3983
	cmp	QWORD PTR pixels$[rsp], 0
	je	SHORT $LN6@stbtt_Pack
; Line 3984
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
$LN6@stbtt_Pack:
; Line 3986
	mov	eax, 1
$LN1@stbtt_Pack:
; Line 3987
	add	rsp, 88					; 00000058H
	ret	0
stbtt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 32
tv78 = 36
i_ascent$ = 40
i_descent$ = 44
i_lineGap$ = 48
info$ = 64
fontdata$ = 240
index$ = 248
size$ = 256
ascent$ = 264
descent$ = 272
lineGap$ = 280
stbtt_GetScaledFontVMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4351
$LN5:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 4355
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4356
	movss	xmm0, DWORD PTR size$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@stbtt_GetS
	movss	xmm1, DWORD PTR size$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetS
$LN3@stbtt_GetS:
	movss	xmm0, DWORD PTR size$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv78[rsp], xmm0
$LN4@stbtt_GetS:
	movss	xmm0, DWORD PTR tv78[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
; Line 4357
	lea	r9, QWORD PTR i_lineGap$[rsp]
	lea	r8, QWORD PTR i_descent$[rsp]
	lea	rdx, QWORD PTR i_ascent$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetFontVMetrics
; Line 4358
	cvtsi2ss xmm0, DWORD PTR i_ascent$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR ascent$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4359
	cvtsi2ss xmm0, DWORD PTR i_descent$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR descent$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4360
	cvtsi2ss xmm0, DWORD PTR i_lineGap$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR lineGap$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4361
	add	rsp, 232				; 000000e8H
	ret	0
stbtt_GetScaledFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d3d_bias$ = 32
tv65 = 36
round_x$ = 40
round_y$ = 44
ipw$ = 48
iph$ = 52
b$ = 56
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
opengl_fillrule$ = 136
stbtt_GetBakedQuad PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3860
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3861
	cmp	DWORD PTR opengl_fillrule$[rsp], 0
	je	SHORT $LN3@stbtt_GetB
	xorps	xmm0, xmm0
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetB
$LN3@stbtt_GetB:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@stbtt_GetB:
	movss	xmm0, DWORD PTR tv65[rsp]
	movss	DWORD PTR d3d_bias$[rsp], xmm0
; Line 3862
	cvtsi2ss xmm0, DWORD PTR pw$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rsp], xmm0
; Line 3863
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 3864
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_floor
	cvttsd2si eax, xmm0
	mov	DWORD PTR round_x$[rsp], eax
; Line 3865
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	QWORD PTR __imp_floor
	cvttsd2si eax, xmm0
	mov	DWORD PTR round_y$[rsp], eax
; Line 3867
	cvtsi2ss xmm0, DWORD PTR round_x$[rsp]
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 3868
	cvtsi2ss xmm0, DWORD PTR round_y$[rsp]
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 3869
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	ecx, DWORD PTR round_x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 3870
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	ecx, DWORD PTR round_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 3872
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3873
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 3874
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 3875
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+28], xmm0
; Line 3877
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 3878
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetBakedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 96
offset$ = 104
pixel_height$ = 112
pixels$ = 120
pw$ = 128
ph$ = 136
first_char$ = 144
num_chars$ = 152
chardata$ = 160
stbtt_BakeFontBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4939
$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4940
	mov	rax, QWORD PTR chardata$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR num_chars$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR first_char$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR pixels$[rsp]
	movss	xmm2, DWORD PTR pixel_height$[rsp]
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z ; stbtt_BakeFontBitmap_internal
; Line 4941
	add	rsp, 88					; 00000058H
	ret	0
stbtt_BakeFontBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
i$ = 40
tv141 = 44
tv172 = 48
tv188 = 52
tv195 = 56
tv207 = 60
tv214 = 64
tv244 = 68
n$1 = 72
s$2 = 80
tv237 = 88
t$3 = 96
e$4 = 104
$T5 = 120
filename$ = 176
line$ = 184
type$ = 192
?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z PROC ; stb__constant_get_entry
; File W:\cpp\void\vendor\stb\stb.h
; Line 12992
$LN32:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 12995
	cmp	QWORD PTR ?stb__constant_file_hash@@3PEAUstb__st_stb_sdict@@EA, 0
	jne	SHORT $LN5@stb__const
; Line 12996
	mov	ecx, 1
	call	stb_sdict_new
	mov	QWORD PTR ?stb__constant_file_hash@@3PEAUstb__st_stb_sdict@@EA, rax
$LN5@stb__const:
; Line 12997
	mov	rdx, QWORD PTR filename$[rsp]
	mov	rcx, QWORD PTR ?stb__constant_file_hash@@3PEAUstb__st_stb_sdict@@EA
	call	stb_sdict_get
	mov	QWORD PTR f$[rsp], rax
; Line 12998
	cmp	QWORD PTR f$[rsp], 0
	jne	$LN6@stb__const
; Line 12999
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb__get_sourcefile_path@@YAPEADPEAD@Z	; stb__get_sourcefile_path
	mov	QWORD PTR s$2[rsp], rax
; Line 13000
	cmp	QWORD PTR s$2[rsp], 0
	je	SHORT $LN9@stb__const
	mov	rcx, QWORD PTR s$2[rsp]
	call	stb_fexists
	test	eax, eax
	jne	SHORT $LN8@stb__const
$LN9@stb__const:
	xor	eax, eax
	jmp	$LN1@stb__const
$LN8@stb__const:
; Line 13001
	mov	ecx, 48					; 00000030H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR f$[rsp], rax
; Line 13002
	mov	rcx, QWORD PTR s$2[rsp]
	call	stb_ftimestamp
	mov	rcx, QWORD PTR f$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 13003
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR s$2[rsp]
	call	stb_stringfile
	mov	rcx, QWORD PTR f$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 13004
	mov	rcx, QWORD PTR s$2[rsp]
	call	QWORD PTR __imp__strdup
	mov	rcx, QWORD PTR f$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 13005
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR [rax], 0
; Line 13006
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR [rax+40], 0
; Line 13007
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR f$[rsp]
	mov	r8d, DWORD PTR [rcx+32]
	mov	edx, 2
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 13008
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN15@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv141[rsp], eax
	jmp	SHORT $LN16@stb__const
$LN15@stb__const:
	mov	DWORD PTR tv141[rsp], 0
$LN16@stb__const:
	movsxd	rax, DWORD PTR tv141[rsp]
	shl	rax, 1
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	memset
; Line 13009
	jmp	$LN7@stb__const
$LN6@stb__const:
; Line 13010
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_ftimestamp
	mov	QWORD PTR t$3[rsp], rax
; Line 13011
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR t$3[rsp]
	cmp	QWORD PTR [rax+16], rcx
	je	$LN10@stb__const
; Line 13012
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR t$3[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 13013
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 13014
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_stringfile
	mov	rcx, QWORD PTR f$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 13015
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR f$[rsp]
	mov	r8d, DWORD PTR [rcx+32]
	mov	edx, 2
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 13016
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__const
$LN2@stb__const:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__const:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN17@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv172[rsp], eax
	jmp	SHORT $LN18@stb__const
$LN17@stb__const:
	mov	DWORD PTR tv172[rsp], 0
$LN18@stb__const:
	mov	eax, DWORD PTR tv172[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__const
; Line 13017
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z ; stb__constant_parse
	jmp	SHORT $LN2@stb__const
$LN3@stb__const:
$LN10@stb__const:
$LN7@stb__const:
; Line 13021
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR line$[rsp], eax
	jl	SHORT $LN11@stb__const
	xor	eax, eax
	jmp	$LN1@stb__const
$LN11@stb__const:
; Line 13023
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN19@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv188[rsp], eax
	jmp	SHORT $LN20@stb__const
$LN19@stb__const:
	mov	DWORD PTR tv188[rsp], 0
$LN20@stb__const:
	movsxd	rax, DWORD PTR line$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	eax, WORD PTR [rcx+rax*2]
	cmp	eax, DWORD PTR tv188[rsp]
	jl	$LN12@stb__const
; Line 13025
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN21@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv195[rsp], eax
	jmp	SHORT $LN22@stb__const
$LN21@stb__const:
	mov	DWORD PTR tv195[rsp], 0
$LN22@stb__const:
	mov	eax, DWORD PTR tv195[rsp]
	mov	DWORD PTR n$1[rsp], eax
; Line 13027
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR e$4[rsp], eax
; Line 13028
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR line$[rsp], eax
	jge	SHORT $LN13@stb__const
; Line 13029
	movsxd	rax, DWORD PTR line$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR n$1[rsp]
	mov	WORD PTR [rcx+rax*2], dx
$LN13@stb__const:
; Line 13030
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR e$4[rsp+4], eax
; Line 13031
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR e$4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN23@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv207[rsp], eax
	jmp	SHORT $LN24@stb__const
$LN23@stb__const:
	mov	DWORD PTR tv207[rsp], 0
$LN24@stb__const:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN25@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv214[rsp], eax
	jmp	SHORT $LN26@stb__const
$LN25@stb__const:
	mov	DWORD PTR tv214[rsp], 0
$LN26@stb__const:
	mov	eax, DWORD PTR tv207[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv214[rsp]
	jle	SHORT $LN28@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 16
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv237[rsp], 0
	jmp	SHORT $LN29@stb__const
$LN28@stb__const:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN27@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN27@stb__const
	mov	r8d, 13031				; 000032e7H
	lea	rdx, OFFSET FLAT:$SG92043
	lea	rcx, OFFSET FLAT:$SG92044
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@stb__const:
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv237[rsp], 0
$LN29@stb__const:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN30@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv244[rsp], eax
	jmp	SHORT $LN31@stb__const
$LN30@stb__const:
	mov	DWORD PTR tv244[rsp], 0
$LN31@stb__const:
	movsxd	rax, DWORD PTR tv244[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rdi, QWORD PTR [rcx+rax-16]
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
; Line 13032
	mov	edx, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z ; stb__constant_parse
$LN12@stb__const:
; Line 13034
	movsxd	rax, DWORD PTR line$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	add	rax, QWORD PTR [rcx]
$LN1@stb__const:
; Line 13035
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z ENDP ; stb__constant_get_entry
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
neg$1 = 40
tv69 = 44
tv71 = 48
n$ = 52
tv89 = 56
tv191 = 60
tv215 = 64
tv230 = 68
tv241 = 72
tv158 = 80
f$ = 112
i$ = 120
?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z PROC	; stb__constant_parse
; File W:\cpp\void\vendor\stb\stb.h
; Line 12941
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 12944
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN39@stb__const
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN37@stb__const
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN38@stb__const
$LN37@stb__const:
	mov	DWORD PTR tv69[rsp], 0
$LN38@stb__const:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN40@stb__const
$LN39@stb__const:
	mov	DWORD PTR tv71[rsp], 0
$LN40@stb__const:
	cmp	DWORD PTR tv71[rsp], 0
	jne	SHORT $LN10@stb__const
	jmp	$LN1@stb__const
$LN10@stb__const:
; Line 12945
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR n$[rsp], eax
; Line 12946
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN11@stb__const
	jmp	$LN1@stb__const
$LN11@stb__const:
; Line 12947
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR s$[rsp], rax
; Line 12948
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+rax+4]
	mov	DWORD PTR tv89[rsp], eax
	cmp	DWORD PTR tv89[rsp], 0
	je	$LN21@stb__const
	cmp	DWORD PTR tv89[rsp], 2
	je	SHORT $LN12@stb__const
	jmp	$LN2@stb__const
$LN12@stb__const:
$LN4@stb__const:
; Line 12950
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN5@stb__const
; Line 12951
	mov	r8d, 6
	lea	rdx, OFFSET FLAT:$SG91973
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN13@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 6
	mov	QWORD PTR s$[rsp], rax
	jmp	$LN14@stb__const
	jmp	$matched_float$43
$LN13@stb__const:
; Line 12952
	mov	r8d, 6
	lea	rdx, OFFSET FLAT:$SG91976
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN15@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 6
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@stb__const
	jmp	SHORT $matched_float$43
$LN15@stb__const:
; Line 12953
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91979
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN17@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 3
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@stb__const
	jmp	SHORT $matched_float$43
$LN17@stb__const:
; Line 12954
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91982
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN19@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 3
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN20@stb__const
	jmp	SHORT $matched_float$43
$LN19@stb__const:
; Line 12955
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 12956
	jmp	$LN4@stb__const
$LN5@stb__const:
; Line 12957
	jmp	$LN2@stb__const
$LN14@stb__const:
$LN16@stb__const:
$LN18@stb__const:
$LN20@stb__const:
$matched_float$43:
; Line 12959
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strtod
	movsd	QWORD PTR tv158[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsd	xmm0, QWORD PTR tv158[rsp]
	movsd	QWORD PTR [rcx+rax+8], xmm0
; Line 12960
	jmp	$LN2@stb__const
$LN21@stb__const:
$LN6@stb__const:
; Line 12962
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN7@stb__const
; Line 12963
	mov	r8d, 6
	lea	rdx, OFFSET FLAT:$SG91986
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN22@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 6
	mov	QWORD PTR s$[rsp], rax
	jmp	$LN23@stb__const
	jmp	$matched_int$44
$LN22@stb__const:
; Line 12964
	mov	r8d, 7
	lea	rdx, OFFSET FLAT:$SG91989
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN24@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 7
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN25@stb__const
	jmp	SHORT $matched_int$44
$LN24@stb__const:
; Line 12965
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91992
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN26@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 3
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN27@stb__const
	jmp	SHORT $matched_int$44
$LN26@stb__const:
; Line 12966
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG91995
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN28@stb__const
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 3
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN29@stb__const
	jmp	SHORT $matched_int$44
$LN28@stb__const:
; Line 12967
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 12968
	jmp	$LN6@stb__const
$LN7@stb__const:
; Line 12969
	jmp	$LN2@stb__const
$LN23@stb__const:
$LN25@stb__const:
$LN27@stb__const:
$LN29@stb__const:
$matched_int$44:
; Line 12971
	mov	DWORD PTR neg$1[rsp], 0
; Line 12972
	mov	rcx, QWORD PTR s$[rsp]
	call	stb_skipwhite
	mov	QWORD PTR s$[rsp], rax
$LN8@stb__const:
; Line 12973
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN9@stb__const
	cmp	DWORD PTR neg$1[rsp], 0
	jne	SHORT $LN41@stb__const
	mov	DWORD PTR tv191[rsp], 1
	jmp	SHORT $LN42@stb__const
$LN41@stb__const:
	mov	DWORD PTR tv191[rsp], 0
$LN42@stb__const:
	mov	eax, DWORD PTR tv191[rsp]
	mov	DWORD PTR neg$1[rsp], eax
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	rcx, rax
	call	stb_skipwhite
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN8@stb__const
$LN9@stb__const:
; Line 12974
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN30@stb__const
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	cmp	eax, 120				; 00000078H
	jne	SHORT $LN30@stb__const
; Line 12975
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR tv215[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR tv215[rsp]
	mov	DWORD PTR [rcx+rax+8], edx
	jmp	SHORT $LN31@stb__const
$LN30@stb__const:
; Line 12976
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN32@stb__const
; Line 12977
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR tv230[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR tv230[rsp]
	mov	DWORD PTR [rcx+rax+8], edx
	jmp	SHORT $LN33@stb__const
$LN32@stb__const:
; Line 12979
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR tv241[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR tv241[rsp]
	mov	DWORD PTR [rcx+rax+8], edx
$LN33@stb__const:
$LN31@stb__const:
; Line 12980
	cmp	DWORD PTR neg$1[rsp], 0
	je	SHORT $LN34@stb__const
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+rax+8]
	neg	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR f$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx+8], eax
$LN34@stb__const:
$LN2@stb__const:
$LN1@stb__const:
; Line 12987
	add	rsp, 104				; 00000068H
	ret	0
?stb__constant_parse@@YAXPEAUstb__FileEntry@@H@Z ENDP	; stb__constant_parse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
file$ = 64
line$ = 72
x$ = 80
stb__string_constant PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 13052
$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 13053
	mov	r8d, 4
	mov	edx, DWORD PTR line$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z ; stb__constant_get_entry
	mov	QWORD PTR e$[rsp], rax
; Line 13054
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN2@stb__strin
	mov	rax, QWORD PTR x$[rsp]
	jmp	SHORT $LN1@stb__strin
$LN2@stb__strin:
; Line 13055
	mov	rax, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR [rax+8]
$LN1@stb__strin:
; Line 13056
	add	rsp, 56					; 00000038H
	ret	0
stb__string_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
file$ = 64
line$ = 72
x$ = 80
stb__int_constant PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 13045
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 13046
	xor	r8d, r8d
	mov	edx, DWORD PTR line$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z ; stb__constant_get_entry
	mov	QWORD PTR e$[rsp], rax
; Line 13047
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN2@stb__int_c
	mov	eax, DWORD PTR x$[rsp]
	jmp	SHORT $LN1@stb__int_c
$LN2@stb__int_c:
; Line 13048
	mov	rax, QWORD PTR e$[rsp]
	mov	eax, DWORD PTR [rax+8]
$LN1@stb__int_c:
; Line 13049
	add	rsp, 56					; 00000038H
	ret	0
stb__int_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
file$ = 64
line$ = 72
x$ = 80
stb__double_constant PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 13038
$LN4:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 13039
	mov	r8d, 2
	mov	edx, DWORD PTR line$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	?stb__constant_get_entry@@YAPEAUstb__Entry@@PEADHH@Z ; stb__constant_get_entry
	mov	QWORD PTR e$[rsp], rax
; Line 13040
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN2@stb__doubl
	movsd	xmm0, QWORD PTR x$[rsp]
	jmp	SHORT $LN1@stb__doubl
$LN2@stb__doubl:
; Line 13041
	mov	rax, QWORD PTR e$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
$LN1@stb__doubl:
; Line 13042
	add	rsp, 56					; 00000038H
	ret	0
stb__double_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 64
?stb__get_sourcefile_path@@YAPEADPEAD@Z PROC		; stb__get_sourcefile_path
; File W:\cpp\void\vendor\stb\stb.h
; Line 12876
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 12878
	cmp	QWORD PTR ?stb__source_path@@3PEADEA, 0	; stb__source_path
	je	SHORT $LN2@stb__get_s
; Line 12879
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR ?stb__source_path@@3PEADEA ; stb__source_path
	lea	r8, OFFSET FLAT:$SG91880
	mov	edx, 512				; 00000200H
	lea	rcx, OFFSET FLAT:?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
	call	sprintf_s
; Line 12880
	lea	rcx, OFFSET FLAT:?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
	call	stb_fexists
	test	eax, eax
	je	SHORT $LN3@stb__get_s
	lea	rax, OFFSET FLAT:?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
	jmp	SHORT $LN1@stb__get_s
$LN3@stb__get_s:
$LN2@stb__get_s:
; Line 12883
	mov	rcx, QWORD PTR file$[rsp]
	call	stb_fexists
	test	eax, eax
	je	SHORT $LN4@stb__get_s
	mov	rax, QWORD PTR file$[rsp]
	jmp	SHORT $LN1@stb__get_s
$LN4@stb__get_s:
; Line 12885
	mov	r9, QWORD PTR file$[rsp]
	lea	r8, OFFSET FLAT:$SG91883
	mov	edx, 512				; 00000200H
	lea	rcx, OFFSET FLAT:?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
	call	sprintf_s
; Line 12886
	lea	rcx, OFFSET FLAT:?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
	call	stb_fexists
	test	eax, eax
	jne	SHORT $LN5@stb__get_s
	lea	rax, OFFSET FLAT:?filebuf@?1??stb__get_sourcefile_path@@YAPEADPEAD@Z@4PADA
	jmp	SHORT $LN1@stb__get_s
$LN5@stb__get_s:
; Line 12888
	mov	rax, QWORD PTR file$[rsp]
$LN1@stb__get_s:
; Line 12889
	add	rsp, 56					; 00000038H
	ret	0
?stb__get_sourcefile_path@@YAPEADPEAD@Z ENDP		; stb__get_sourcefile_path
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
path$ = 8
stb_source_path PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 12871
	mov	QWORD PTR [rsp+8], rcx
; Line 12872
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR ?stb__source_path@@3PEADEA, rax ; stb__source_path
; Line 12873
	ret	0
stb_source_path ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
tv71 = 36
a$ = 64
?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z PROC		; stb__renorm_decoder
; File W:\cpp\void\vendor\stb\stb.h
; Line 11353
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11354
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_getc
	mov	DWORD PTR c$[rsp], eax
; Line 11355
	cmp	DWORD PTR c$[rsp], 0
	jl	SHORT $LN3@stb__renor
	mov	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN4@stb__renor
$LN3@stb__renor:
	mov	DWORD PTR tv71[rsp], 0
$LN4@stb__renor:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, 8
	add	eax, DWORD PTR tv71[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 11356
	add	rsp, 56					; 00000038H
	ret	0
?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z ENDP		; stb__renorm_decoder
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z PROC		; stb__renorm_encoder
; File W:\cpp\void\vendor\stb\stb.h
; Line 11346
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11347
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 24
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z ; stb__arith_putbyte
; Line 11348
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 11349
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+4]
	shl	eax, 8
	or	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 11350
	add	rsp, 40					; 00000028H
	ret	0
?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z ENDP		; stb__renorm_encoder
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
a$ = 64
?stb__arith_flush@@YAXPEAUstb_arith@@@Z PROC		; stb__arith_flush
; File W:\cpp\void\vendor\stb\stb.h
; Line 11336
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11337
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+20], 0
	jl	SHORT $LN5@stb__arith
; Line 11339
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
; Line 11340
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stb__arith
$LN2@stb__arith:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stb__arith:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stb__arith
; Line 11341
	mov	edx, 255				; 000000ffH
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
	jmp	SHORT $LN2@stb__arith
$LN3@stb__arith:
$LN5@stb__arith:
; Line 11343
	add	rsp, 56					; 00000038H
	ret	0
?stb__arith_flush@@YAXPEAUstb_arith@@@Z ENDP		; stb__arith_flush
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
a$ = 64
byte$ = 72
?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z PROC		; stb__arith_putbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11309
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11310
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	$LN5@stb__arith
; Line 11311
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+20], -1
	jne	SHORT $LN7@stb__arith
; Line 11312
	cmp	DWORD PTR byte$[rsp], 255		; 000000ffH
	jne	SHORT $LN9@stb__arith
; Line 11313
	mov	edx, DWORD PTR byte$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
	jmp	SHORT $LN10@stb__arith
$LN9@stb__arith:
; Line 11315
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR byte$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 11316
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], 0
$LN10@stb__arith:
; Line 11317
	jmp	SHORT $LN8@stb__arith
$LN7@stb__arith:
; Line 11318
	cmp	DWORD PTR byte$[rsp], 255		; 000000ffH
	jne	SHORT $LN11@stb__arith
; Line 11319
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 11320
	jmp	SHORT $LN12@stb__arith
$LN11@stb__arith:
; Line 11322
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
; Line 11323
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stb__arith
$LN2@stb__arith:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stb__arith:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stb__arith
; Line 11324
	mov	edx, 255				; 000000ffH
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
	jmp	SHORT $LN2@stb__arith
$LN3@stb__arith:
$LN12@stb__arith:
$LN8@stb__arith:
; Line 11325
	jmp	SHORT $LN6@stb__arith
$LN5@stb__arith:
; Line 11326
	cmp	DWORD PTR byte$[rsp], 255		; 000000ffH
	jne	SHORT $LN13@stb__arith
; Line 11327
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 11328
	jmp	SHORT $LN14@stb__arith
$LN13@stb__arith:
; Line 11330
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
; Line 11331
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR byte$[rsp]
	mov	DWORD PTR [rax+16], ecx
$LN14@stb__arith:
$LN6@stb__arith:
; Line 11333
	add	rsp, 56					; 00000038H
	ret	0
?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z ENDP		; stb__arith_putbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
a$ = 64
?stb__arith_carry@@YAXPEAUstb_arith@@@Z PROC		; stb__arith_carry
; File W:\cpp\void\vendor\stb\stb.h
; Line 11300
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11302
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+20], -1
	jne	SHORT $LN6@stb__arith
	mov	r8d, 11302				; 00002c26H
	lea	rdx, OFFSET FLAT:$SG91658
	lea	rcx, OFFSET FLAT:$SG91659
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stb__arith:
; Line 11303
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
; Line 11304
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__arith
$LN2@stb__arith:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__arith:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__arith
; Line 11305
	xor	edx, edx
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_putc
	jmp	SHORT $LN2@stb__arith
$LN3@stb__arith:
; Line 11306
	add	rsp, 56					; 00000038H
	ret	0
?stb__arith_carry@@YAXPEAUstb_arith@@@Z ENDP		; stb__arith_carry
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
freqsize$ = 32
tv77 = 40
a$ = 64
totalfreq2$ = 72
freq$ = 80
cumfreq$ = 88
stb_arith_decode_advance_log2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11408
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11409
	mov	eax, DWORD PTR totalfreq2$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv77[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv77[rsp]
	mov	eax, DWORD PTR [rax+12]
	shr	eax, cl
	mov	DWORD PTR freqsize$[rsp], eax
; Line 11410
	mov	eax, DWORD PTR freqsize$[rsp]
	imul	eax, DWORD PTR cumfreq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 11411
	mov	eax, DWORD PTR freqsize$[rsp]
	imul	eax, DWORD PTR freq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN2@stb_arith_:
; Line 11412
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+12], 16777216		; 01000000H
	jae	SHORT $LN3@stb_arith_
; Line 11413
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z ; stb__renorm_decoder
	jmp	SHORT $LN2@stb_arith_
$LN3@stb_arith_:
; Line 11414
	add	rsp, 56					; 00000038H
	ret	0
stb_arith_decode_advance_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 0
tv72 = 4
freqsize$ = 8
tv87 = 12
tv90 = 16
tv82 = 24
a$ = 48
totalfreq2$ = 56
stb_arith_decode_value_log2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11401
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11402
	mov	eax, DWORD PTR totalfreq2$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv82[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv82[rsp]
	mov	eax, DWORD PTR [rax+12]
	shr	eax, cl
	mov	DWORD PTR freqsize$[rsp], eax
; Line 11403
	xor	edx, edx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	div	DWORD PTR freqsize$[rsp]
	mov	DWORD PTR z$[rsp], eax
; Line 11404
	mov	eax, DWORD PTR totalfreq2$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv87[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv87[rsp]
	shl	eax, cl
	cmp	DWORD PTR z$[rsp], eax
	jb	SHORT $LN3@stb_arith_
	mov	eax, DWORD PTR totalfreq2$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv90[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv90[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN4@stb_arith_
$LN3@stb_arith_:
	mov	eax, DWORD PTR z$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN4@stb_arith_:
	mov	eax, DWORD PTR tv72[rsp]
; Line 11405
	add	rsp, 40					; 00000028H
	ret	0
stb_arith_decode_value_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
freqsize$ = 32
a$ = 64
totalfreq$ = 72
freq$ = 80
cumfreq$ = 88
stb_arith_decode_advance PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11392
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11393
	xor	edx, edx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	div	DWORD PTR totalfreq$[rsp]
	mov	DWORD PTR freqsize$[rsp], eax
; Line 11394
	mov	eax, DWORD PTR freqsize$[rsp]
	imul	eax, DWORD PTR cumfreq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 11395
	mov	eax, DWORD PTR freqsize$[rsp]
	imul	eax, DWORD PTR freq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN2@stb_arith_:
; Line 11396
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+12], 16777216		; 01000000H
	jae	SHORT $LN3@stb_arith_
; Line 11397
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__renorm_decoder@@YAXPEAUstb_arith@@@Z ; stb__renorm_decoder
	jmp	SHORT $LN2@stb_arith_
$LN3@stb_arith_:
; Line 11398
	add	rsp, 56					; 00000038H
	ret	0
stb_arith_decode_advance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 0
tv70 = 4
freqsize$ = 8
a$ = 32
totalfreq$ = 40
stb_arith_decode_value PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11385
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 11386
	xor	edx, edx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	div	DWORD PTR totalfreq$[rsp]
	mov	DWORD PTR freqsize$[rsp], eax
; Line 11387
	xor	edx, edx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	div	DWORD PTR freqsize$[rsp]
	mov	DWORD PTR z$[rsp], eax
; Line 11388
	mov	eax, DWORD PTR totalfreq$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jb	SHORT $LN3@stb_arith_
	mov	eax, DWORD PTR totalfreq$[rsp]
	dec	eax
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN4@stb_arith_
$LN3@stb_arith_:
	mov	eax, DWORD PTR z$[rsp]
	mov	DWORD PTR tv70[rsp], eax
$LN4@stb_arith_:
	mov	eax, DWORD PTR tv70[rsp]
; Line 11389
	add	rsp, 24
	ret	0
stb_arith_decode_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
range$ = 32
old$ = 36
a$ = 64
totalfreq2$ = 72
freq$ = 80
cumfreq$ = 88
stb_arith_encode_log2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11372
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11373
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	DWORD PTR range$[rsp], eax
; Line 11374
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR old$[rsp], eax
; Line 11375
	mov	eax, DWORD PTR totalfreq2$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR range$[rsp]
	shr	eax, cl
	mov	DWORD PTR range$[rsp], eax
; Line 11376
	mov	eax, DWORD PTR range$[rsp]
	imul	eax, DWORD PTR cumfreq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 11377
	mov	eax, DWORD PTR range$[rsp]
	imul	eax, DWORD PTR freq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 11378
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR old$[rsp]
	cmp	DWORD PTR [rax], ecx
	jae	SHORT $LN4@stb_arith_
; Line 11379
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_carry@@YAXPEAUstb_arith@@@Z	; stb__arith_carry
$LN4@stb_arith_:
$LN2@stb_arith_:
; Line 11380
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	cmp	eax, 16777216				; 01000000H
	jae	SHORT $LN3@stb_arith_
; Line 11381
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z ; stb__renorm_encoder
	jmp	SHORT $LN2@stb_arith_
$LN3@stb_arith_:
; Line 11382
	add	rsp, 56					; 00000038H
	ret	0
stb_arith_encode_log2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
range$ = 32
old$ = 36
a$ = 64
totalfreq$ = 72
freq$ = 80
cumfreq$ = 88
stb_arith_encode PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11359
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11360
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	DWORD PTR range$[rsp], eax
; Line 11361
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR old$[rsp], eax
; Line 11362
	xor	edx, edx
	mov	eax, DWORD PTR range$[rsp]
	div	DWORD PTR totalfreq$[rsp]
	mov	DWORD PTR range$[rsp], eax
; Line 11363
	mov	eax, DWORD PTR range$[rsp]
	imul	eax, DWORD PTR cumfreq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 11364
	mov	eax, DWORD PTR range$[rsp]
	imul	eax, DWORD PTR freq$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 11365
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR old$[rsp]
	cmp	DWORD PTR [rax], ecx
	jae	SHORT $LN4@stb_arith_
; Line 11366
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_carry@@YAXPEAUstb_arith@@@Z	; stb__arith_carry
$LN4@stb_arith_:
$LN2@stb_arith_:
; Line 11367
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	cmp	eax, 16777216				; 01000000H
	jae	SHORT $LN3@stb_arith_
; Line 11368
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__renorm_encoder@@YAXPEAUstb_arith@@@Z ; stb__renorm_encoder
	jmp	SHORT $LN2@stb_arith_
$LN3@stb_arith_:
; Line 11369
	add	rsp, 56					; 00000038H
	ret	0
stb_arith_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
stb_arith_decode_close PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11428
	mov	QWORD PTR [rsp+8], rcx
; Line 11429
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
; Line 11430
	ret	0
stb_arith_decode_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
stb_arith_encode_close PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11417
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11419
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 24
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z ; stb__arith_putbyte
; Line 11420
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 16
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z ; stb__arith_putbyte
; Line 11421
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 8
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z ; stb__arith_putbyte
; Line 11422
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_putbyte@@YAXPEAUstb_arith@@H@Z ; stb__arith_putbyte
; Line 11423
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__arith_flush@@YAXPEAUstb_arith@@@Z	; stb__arith_flush
; Line 11424
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
; Line 11425
	add	rsp, 40					; 00000028H
	ret	0
stb_arith_encode_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
out$ = 16
stb_arith_init_encode PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11292
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 11293
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax], 0
; Line 11294
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+4], -1			; ffffffffH
; Line 11295
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], -1
; Line 11296
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 11297
	ret	0
stb_arith_init_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
m$ = 48
update_on_close$ = 192
?stb_open_outbuffer@@YAPEAUstbfile@@PEAPEAE@Z PROC	; stb_open_outbuffer
; File W:\cpp\void\vendor\stb\stb.h
; Line 11229
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 11230
	lea	rax, OFFSET FLAT:?stb__nogetbyte@@YAHPEAUstbfile@@@Z ; stb__nogetbyte
	mov	QWORD PTR m$[rsp], rax
	lea	rax, OFFSET FLAT:?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z ; stb__nogetdata
	mov	QWORD PTR m$[rsp+8], rax
; Line 11231
	lea	rax, OFFSET FLAT:?stb__aputbyte@@YAHPEAUstbfile@@H@Z ; stb__aputbyte
	mov	QWORD PTR m$[rsp+16], rax
	lea	rax, OFFSET FLAT:?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z ; stb__aputdata
	mov	QWORD PTR m$[rsp+24], rax
; Line 11232
	lea	rax, OFFSET FLAT:?stb__asize@@YAIPEAUstbfile@@@Z ; stb__asize
	mov	QWORD PTR m$[rsp+32], rax
	lea	rax, OFFSET FLAT:?stb__asize@@YAIPEAUstbfile@@@Z ; stb__asize
	mov	QWORD PTR m$[rsp+40], rax
	lea	rax, OFFSET FLAT:?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z ; stb__abackpatch
	mov	QWORD PTR m$[rsp+48], rax
	lea	rax, OFFSET FLAT:?stb__aclose@@YAXPEAUstbfile@@@Z ; stb__aclose
	mov	QWORD PTR m$[rsp+56], rax
	lea	rax, QWORD PTR m$[rsp+64]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb
; Line 11233
	mov	ecx, 104				; 00000068H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR z$[rsp], rax
; Line 11234
	cmp	QWORD PTR z$[rsp], 0
	je	SHORT $LN2@stb_open_o
; Line 11235
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR update_on_close$[rsp]
	mov	QWORD PTR [rax+96], rcx
; Line 11236
	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR z$[rsp]
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
$LN2@stb_open_o:
; Line 11238
	mov	rax, QWORD PTR z$[rsp]
; Line 11239
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?stb_open_outbuffer@@YAPEAUstbfile@@PEAPEAE@Z ENDP	; stb_open_outbuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 8
?stb__aclose@@YAXPEAUstbfile@@@Z PROC			; stb__aclose
; File W:\cpp\void\vendor\stb\stb.h
; Line 11224
	mov	QWORD PTR [rsp+8], rcx
; Line 11225
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax], rcx
; Line 11226
	ret	0
?stb__aclose@@YAXPEAUstbfile@@@Z ENDP			; stb__aclose
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
where$ = 56
data$ = 64
len$ = 72
?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z PROC		; stb__abackpatch
; File W:\cpp\void\vendor\stb\stb.h
; Line 11220
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11221
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR where$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	add	rcx, QWORD PTR [rdx+72]
	mov	r8d, eax
	mov	rdx, QWORD PTR data$[rsp]
	call	memcpy
; Line 11222
	add	rsp, 40					; 00000028H
	ret	0
?stb__abackpatch@@YAXPEAUstbfile@@IPEAXI@Z ENDP		; stb__abackpatch
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
f$ = 32
?stb__asize@@YAIPEAUstbfile@@@Z PROC			; stb__asize
; File W:\cpp\void\vendor\stb\stb.h
; Line 11218
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN3@stb__asize
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@stb__asize
$LN3@stb__asize:
	mov	DWORD PTR tv69[rsp], 0
$LN4@stb__asize:
	mov	eax, DWORD PTR tv69[rsp]
	add	rsp, 24
	ret	0
?stb__asize@@YAIPEAUstbfile@@@Z ENDP			; stb__asize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv80 = 36
tv142 = 40
tv135 = 44
tv151 = 48
tv149 = 56
f$ = 80
data$ = 88
len$ = 96
?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z PROC		; stb__aputdata
; File W:\cpp\void\vendor\stb\stb.h
; Line 11214
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 11215
	mov	eax, DWORD PTR len$[rsp]
	mov	QWORD PTR tv151[rsp], rax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR tv149[rsp], rax
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN3@stb__aputd
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN4@stb__aputd
$LN3@stb__aputd:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stb__aputd:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN5@stb__aputd
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv80[rsp], eax
	jmp	SHORT $LN6@stb__aputd
$LN5@stb__aputd:
	mov	DWORD PTR tv80[rsp], 0
$LN6@stb__aputd:
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR tv73[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR tv80[rsp]
	jle	SHORT $LN8@stb__aputd
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 72					; 00000048H
	mov	r8d, DWORD PTR len$[rsp]
	mov	edx, 1
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN9@stb__aputd
$LN8@stb__aputd:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN7@stb__aputd
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN7@stb__aputd
	mov	r8d, 11215				; 00002bcfH
	lea	rdx, OFFSET FLAT:$SG91532
	lea	rcx, OFFSET FLAT:$SG91533
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__aputd:
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv135[rsp], 0
$LN9@stb__aputd:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN10@stb__aputd
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv142[rsp], eax
	jmp	SHORT $LN11@stb__aputd
$LN10@stb__aputd:
	mov	DWORD PTR tv142[rsp], 0
$LN11@stb__aputd:
	movsxd	rax, DWORD PTR tv142[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR len$[rsp]
	sub	rax, rcx
	mov	r8, QWORD PTR tv151[rsp]
	mov	rdx, QWORD PTR tv149[rsp]
	mov	rcx, rax
	call	memcpy
; Line 11216
	mov	eax, DWORD PTR len$[rsp]
; Line 11217
	add	rsp, 72					; 00000048H
	ret	0
?stb__aputdata@@YAIPEAUstbfile@@PEAXI@Z ENDP		; stb__aputdata
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv143 = 32
tv69 = 36
tv76 = 40
tv138 = 44
tv131 = 48
f$ = 80
ch$ = 88
?stb__aputbyte@@YAHPEAUstbfile@@H@Z PROC		; stb__aputbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11209
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 11210
	movzx	eax, BYTE PTR ch$[rsp]
	mov	BYTE PTR tv143[rsp], al
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN3@stb__aputb
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@stb__aputb
$LN3@stb__aputb:
	mov	DWORD PTR tv69[rsp], 0
$LN4@stb__aputb:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN5@stb__aputb
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN6@stb__aputb
$LN5@stb__aputb:
	mov	DWORD PTR tv76[rsp], 0
$LN6@stb__aputb:
	mov	eax, DWORD PTR tv69[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv76[rsp]
	jle	SHORT $LN8@stb__aputb
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 72					; 00000048H
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN9@stb__aputb
$LN8@stb__aputb:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN7@stb__aputb
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN7@stb__aputb
	mov	r8d, 11210				; 00002bcaH
	lea	rdx, OFFSET FLAT:$SG91513
	lea	rcx, OFFSET FLAT:$SG91514
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__aputb:
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv131[rsp], 0
$LN9@stb__aputb:
	mov	rax, QWORD PTR f$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN10@stb__aputb
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN11@stb__aputb
$LN10@stb__aputb:
	mov	DWORD PTR tv138[rsp], 0
$LN11@stb__aputb:
	movsxd	rax, DWORD PTR tv138[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	movzx	edx, BYTE PTR tv143[rsp]
	mov	BYTE PTR [rcx+rax-1], dl
; Line 11211
	mov	eax, 1
; Line 11212
	add	rsp, 72					; 00000048H
	ret	0
?stb__aputbyte@@YAHPEAUstbfile@@H@Z ENDP		; stb__aputbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
s$ = 40
tv70 = 48
f$ = 56
filename$ = 80
mode$ = 88
?stb_open@@YAPEAUstbfile@@PEAD0@Z PROC			; stb_open
; File W:\cpp\void\vendor\stb\stb.h
; Line 11196
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 11197
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 107				; 0000006bH
	jne	SHORT $LN5@stb_open
	mov	rax, QWORD PTR mode$[rsp]
	inc	rax
	mov	QWORD PTR tv70[rsp], rax
	jmp	SHORT $LN6@stb_open
$LN5@stb_open:
	mov	rax, QWORD PTR mode$[rsp]
	mov	QWORD PTR tv70[rsp], rax
$LN6@stb_open:
	mov	rdx, QWORD PTR tv70[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 11199
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stb_open
	xor	eax, eax
	jmp	SHORT $LN1@stb_open
$LN2@stb_open:
; Line 11200
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z ; stb_openf
	mov	QWORD PTR s$[rsp], rax
; Line 11201
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN3@stb_open
; Line 11202
	mov	rax, QWORD PTR s$[rsp]
	lea	rcx, OFFSET FLAT:?stb__fclose2@@YAXPEAUstbfile@@@Z ; stb__fclose2
	mov	QWORD PTR [rax+56], rcx
; Line 11203
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 107				; 0000006bH
	jne	SHORT $LN7@stb_open
	mov	DWORD PTR tv83[rsp], 2
	jmp	SHORT $LN8@stb_open
$LN7@stb_open:
	mov	DWORD PTR tv83[rsp], 1
$LN8@stb_open:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv83[rsp]
	mov	DWORD PTR [rax+96], ecx
$LN3@stb_open:
; Line 11205
	mov	rax, QWORD PTR s$[rsp]
$LN1@stb_open:
; Line 11206
	add	rsp, 72					; 00000048H
	ret	0
?stb_open@@YAPEAUstbfile@@PEAD0@Z ENDP			; stb_open
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
?stb__fclose2@@YAXPEAUstbfile@@@Z PROC			; stb__fclose2
; File W:\cpp\void\vendor\stb\stb.h
; Line 11191
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11192
	mov	rax, QWORD PTR f$[rsp]
	mov	edx, DWORD PTR [rax+96]
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	stb_fclose
; Line 11193
	add	rsp, 40					; 00000028H
	ret	0
?stb__fclose2@@YAXPEAUstbfile@@@Z ENDP			; stb__fclose2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
buffer$ = 64
len$ = 72
?stb_open_inbuffer_free@@YAPEAUstbfile@@PEAXI@Z PROC	; stb_open_inbuffer_free
; File W:\cpp\void\vendor\stb\stb.h
; Line 11162
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11163
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z ; stb_open_inbuffer
	mov	QWORD PTR z$[rsp], rax
; Line 11164
	cmp	QWORD PTR z$[rsp], 0
	je	SHORT $LN2@stb_open_i
; Line 11165
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+96], 1
$LN2@stb_open_i:
; Line 11166
	mov	rax, QWORD PTR z$[rsp]
; Line 11167
	add	rsp, 56					; 00000038H
	ret	0
?stb_open_inbuffer_free@@YAPEAUstbfile@@PEAXI@Z ENDP	; stb_open_inbuffer_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
m$ = 48
buffer$ = 192
len$ = 200
?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z PROC		; stb_open_inbuffer
; File W:\cpp\void\vendor\stb\stb.h
; Line 11147
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 11148
	lea	rax, OFFSET FLAT:?stb__bgetbyte@@YAHPEAUstbfile@@@Z ; stb__bgetbyte
	mov	QWORD PTR m$[rsp], rax
	lea	rax, OFFSET FLAT:?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z ; stb__bgetdata
	mov	QWORD PTR m$[rsp+8], rax
; Line 11149
	lea	rax, OFFSET FLAT:?stb__noputbyte@@YAHPEAUstbfile@@H@Z ; stb__noputbyte
	mov	QWORD PTR m$[rsp+16], rax
	lea	rax, OFFSET FLAT:?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z ; stb__noputdata
	mov	QWORD PTR m$[rsp+24], rax
; Line 11150
	lea	rax, OFFSET FLAT:?stb__bsize@@YAIPEAUstbfile@@@Z ; stb__bsize
	mov	QWORD PTR m$[rsp+32], rax
	lea	rax, OFFSET FLAT:?stb__btell@@YAIPEAUstbfile@@@Z ; stb__btell
	mov	QWORD PTR m$[rsp+40], rax
	lea	rax, OFFSET FLAT:?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z ; stb__nobackpatch
	mov	QWORD PTR m$[rsp+48], rax
	lea	rax, OFFSET FLAT:?stb__bclose@@YAXPEAUstbfile@@@Z ; stb__bclose
	mov	QWORD PTR m$[rsp+56], rax
	lea	rax, QWORD PTR m$[rsp+64]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb
; Line 11151
	mov	ecx, 104				; 00000068H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR z$[rsp], rax
; Line 11152
	cmp	QWORD PTR z$[rsp], 0
	je	SHORT $LN2@stb_open_i
; Line 11153
	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR z$[rsp]
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
; Line 11154
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 11155
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax+80], rcx
; Line 11156
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+88], rax
$LN2@stb_open_i:
; Line 11158
	mov	rax, QWORD PTR z$[rsp]
; Line 11159
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?stb_open_inbuffer@@YAPEAUstbfile@@PEAXI@Z ENDP		; stb_open_inbuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stb__bclose@@YAXPEAUstbfile@@@Z PROC			; stb__bclose
; File W:\cpp\void\vendor\stb\stb.h
; Line 11141
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11142
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+96], 0
	je	SHORT $LN2@stb__bclos
; Line 11143
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	QWORD PTR __imp_free
$LN2@stb__bclos:
; Line 11144
	add	rsp, 40					; 00000028H
	ret	0
?stb__bclose@@YAXPEAUstbfile@@@Z ENDP			; stb__bclose
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
?stb__btell@@YAIPEAUstbfile@@@Z PROC			; stb__btell
; File W:\cpp\void\vendor\stb\stb.h
; Line 11138
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rax, QWORD PTR [rax+80]
	sub	rax, rcx
	ret	0
?stb__btell@@YAIPEAUstbfile@@@Z ENDP			; stb__btell
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
?stb__bsize@@YAIPEAUstbfile@@@Z PROC			; stb__bsize
; File W:\cpp\void\vendor\stb\stb.h
; Line 11137
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rax, QWORD PTR [rax+88]
	sub	rax, rcx
	ret	0
?stb__bsize@@YAIPEAUstbfile@@@Z ENDP			; stb__bsize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
buffer$ = 56
len$ = 64
?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z PROC		; stb__bgetdata
; File W:\cpp\void\vendor\stb\stb.h
; Line 11130
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11131
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	rax, QWORD PTR [rcx+88]
	jbe	SHORT $LN2@stb__bgetd
; Line 11132
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	rax, QWORD PTR [rax+88]
	sub	rax, rcx
	mov	DWORD PTR len$[rsp], eax
$LN2@stb__bgetd:
; Line 11133
	mov	eax, DWORD PTR len$[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+80]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 11134
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+80], rax
; Line 11135
	mov	eax, DWORD PTR len$[rsp]
; Line 11136
	add	rsp, 40					; 00000028H
	ret	0
?stb__bgetdata@@YAIPEAUstbfile@@PEAXI@Z ENDP		; stb__bgetdata
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 32
?stb__bgetbyte@@YAHPEAUstbfile@@@Z PROC			; stb__bgetbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11122
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 11123
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	cmp	QWORD PTR [rax+80], rcx
	jae	SHORT $LN2@stb__bgetb
; Line 11124
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+80]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+80]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+80], rax
	mov	eax, DWORD PTR tv73[rsp]
	jmp	SHORT $LN1@stb__bgetb
	jmp	SHORT $LN3@stb__bgetb
$LN2@stb__bgetb:
; Line 11126
	mov	eax, -1
$LN3@stb__bgetb:
$LN1@stb__bgetb:
; Line 11127
	add	rsp, 24
	ret	0
?stb__bgetbyte@@YAHPEAUstbfile@@@Z ENDP			; stb__bgetbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
where$ = 56
buffer$ = 64
len$ = 72
?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z PROC	; stb__nobackpatch
; File W:\cpp\void\vendor\stb\stb.h
; Line 11119
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN3@stb__nobac
	mov	r8d, 11119				; 00002b6fH
	lea	rdx, OFFSET FLAT:$SG91449
	lea	rcx, OFFSET FLAT:$SG91450
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb__nobac:
	add	rsp, 40					; 00000028H
	ret	0
?stb__nobackpatch@@YAXPEAUstbfile@@IPEAXI@Z ENDP	; stb__nobackpatch
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
buffer$ = 56
len$ = 64
?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z PROC		; stb__noputdata
; File W:\cpp\void\vendor\stb\stb.h
; Line 11118
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN3@stb__noput
	mov	r8d, 11118				; 00002b6eH
	lea	rdx, OFFSET FLAT:$SG91439
	lea	rcx, OFFSET FLAT:$SG91440
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb__noput:
	xor	eax, eax
	add	rsp, 40					; 00000028H
	ret	0
?stb__noputdata@@YAIPEAUstbfile@@PEAXI@Z ENDP		; stb__noputdata
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
ch$ = 56
?stb__noputbyte@@YAHPEAUstbfile@@H@Z PROC		; stb__noputbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11117
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN3@stb__noput
	mov	r8d, 11117				; 00002b6dH
	lea	rdx, OFFSET FLAT:$SG91430
	lea	rcx, OFFSET FLAT:$SG91431
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb__noput:
	xor	eax, eax
	add	rsp, 40					; 00000028H
	ret	0
?stb__noputbyte@@YAHPEAUstbfile@@H@Z ENDP		; stb__noputbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
buffer$ = 56
len$ = 64
?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z PROC		; stb__nogetdata
; File W:\cpp\void\vendor\stb\stb.h
; Line 11116
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN3@stb__noget
	mov	r8d, 11116				; 00002b6cH
	lea	rdx, OFFSET FLAT:$SG91422
	lea	rcx, OFFSET FLAT:$SG91423
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb__noget:
	xor	eax, eax
	add	rsp, 40					; 00000028H
	ret	0
?stb__nogetdata@@YAIPEAUstbfile@@PEAXI@Z ENDP		; stb__nogetdata
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
?stb__nogetbyte@@YAHPEAUstbfile@@@Z PROC		; stb__nogetbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11115
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN3@stb__noget
	mov	r8d, 11115				; 00002b6bH
	lea	rdx, OFFSET FLAT:$SG91413
	lea	rcx, OFFSET FLAT:$SG91414
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb__noget:
	mov	eax, -1
	add	rsp, 40					; 00000028H
	ret	0
?stb__nogetbyte@@YAHPEAUstbfile@@@Z ENDP		; stb__nogetbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
m$ = 48
f$ = 192
?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z PROC		; stb_openf
; File W:\cpp\void\vendor\stb\stb.h
; Line 11102
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 11103
	lea	rax, OFFSET FLAT:?stb__fgetbyte@@YAHPEAUstbfile@@@Z ; stb__fgetbyte
	mov	QWORD PTR m$[rsp], rax
	lea	rax, OFFSET FLAT:?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z ; stb__fgetdata
	mov	QWORD PTR m$[rsp+8], rax
; Line 11104
	lea	rax, OFFSET FLAT:?stb__fputbyte@@YAHPEAUstbfile@@H@Z ; stb__fputbyte
	mov	QWORD PTR m$[rsp+16], rax
	lea	rax, OFFSET FLAT:?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z ; stb__fputdata
	mov	QWORD PTR m$[rsp+24], rax
; Line 11105
	lea	rax, OFFSET FLAT:?stb__fsize@@YAIPEAUstbfile@@@Z ; stb__fsize
	mov	QWORD PTR m$[rsp+32], rax
	lea	rax, OFFSET FLAT:?stb__ftell@@YAIPEAUstbfile@@@Z ; stb__ftell
	mov	QWORD PTR m$[rsp+40], rax
	lea	rax, OFFSET FLAT:?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z ; stb__fbackpatch
	mov	QWORD PTR m$[rsp+48], rax
	lea	rax, OFFSET FLAT:?stb__fclose@@YAXPEAUstbfile@@@Z ; stb__fclose
	mov	QWORD PTR m$[rsp+56], rax
; Line 11106
	mov	QWORD PTR m$[rsp+64], 0
	mov	QWORD PTR m$[rsp+72], 0
	mov	QWORD PTR m$[rsp+80], 0
	lea	rax, QWORD PTR m$[rsp+88]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
; Line 11107
	mov	ecx, 104				; 00000068H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR z$[rsp], rax
; Line 11108
	cmp	QWORD PTR z$[rsp], 0
	je	SHORT $LN2@stb_openf
; Line 11109
	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR z$[rsp]
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
; Line 11110
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN2@stb_openf:
; Line 11112
	mov	rax, QWORD PTR z$[rsp]
; Line 11113
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?stb_openf@@YAPEAUstbfile@@PEAU_iobuf@@@Z ENDP		; stb_openf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
?stb__fclose@@YAXPEAUstbfile@@@Z PROC			; stb__fclose
; File W:\cpp\void\vendor\stb\stb.h
; Line 11099
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR __imp_fclose
	add	rsp, 40					; 00000028H
	ret	0
?stb__fclose@@YAXPEAUstbfile@@@Z ENDP			; stb__fclose
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
where$ = 56
buffer$ = 64
len$ = 72
?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z PROC		; stb__fbackpatch
; File W:\cpp\void\vendor\stb\stb.h
; Line 11094
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11095
	xor	r8d, r8d
	mov	edx, DWORD PTR where$[rsp]
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR __imp_fseek
; Line 11096
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	r9, QWORD PTR [rcx+64]
	mov	r8d, eax
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 11097
	mov	r8d, 2
	xor	edx, edx
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR __imp_fseek
; Line 11098
	add	rsp, 40					; 00000028H
	ret	0
?stb__fbackpatch@@YAXPEAUstbfile@@IPEAXI@Z ENDP		; stb__fbackpatch
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
?stb__ftell@@YAIPEAUstbfile@@@Z PROC			; stb__ftell
; File W:\cpp\void\vendor\stb\stb.h
; Line 11092
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR __imp_ftell
	add	rsp, 40					; 00000028H
	ret	0
?stb__ftell@@YAIPEAUstbfile@@@Z ENDP			; stb__ftell
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
?stb__fsize@@YAIPEAUstbfile@@@Z PROC			; stb__fsize
; File W:\cpp\void\vendor\stb\stb.h
; Line 11091
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	stb_filelen
	add	rsp, 40					; 00000028H
	ret	0
?stb__fsize@@YAIPEAUstbfile@@@Z ENDP			; stb__fsize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
buffer$ = 56
len$ = 64
?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z PROC		; stb__fputdata
; File W:\cpp\void\vendor\stb\stb.h
; Line 11090
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	r9, QWORD PTR [rcx+64]
	mov	r8d, eax
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fwrite
	add	rsp, 40					; 00000028H
	ret	0
?stb__fputdata@@YAIPEAUstbfile@@PEAXI@Z ENDP		; stb__fputdata
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
buffer$ = 56
len$ = 64
?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z PROC		; stb__fgetdata
; File W:\cpp\void\vendor\stb\stb.h
; Line 11089
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	mov	r9, QWORD PTR [rcx+64]
	mov	r8d, eax
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fread
	add	rsp, 40					; 00000028H
	ret	0
?stb__fgetdata@@YAIPEAUstbfile@@PEAXI@Z ENDP		; stb__fgetdata
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
f$ = 64
ch$ = 72
?stb__fputbyte@@YAHPEAUstbfile@@H@Z PROC		; stb__fputbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11088
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR f$[rsp]
	mov	rdx, QWORD PTR [rax+64]
	mov	ecx, DWORD PTR ch$[rsp]
	call	QWORD PTR __imp_fputc
	test	eax, eax
	jne	SHORT $LN3@stb__fputb
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@stb__fputb
$LN3@stb__fputb:
	mov	DWORD PTR tv69[rsp], 0
$LN4@stb__fputb:
	mov	eax, DWORD PTR tv69[rsp]
	add	rsp, 56					; 00000038H
	ret	0
?stb__fputbyte@@YAHPEAUstbfile@@H@Z ENDP		; stb__fputbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
?stb__fgetbyte@@YAHPEAUstbfile@@@Z PROC			; stb__fgetbyte
; File W:\cpp\void\vendor\stb\stb.h
; Line 11087
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR __imp_fgetc
	add	rsp, 40					; 00000028H
	ret	0
?stb__fgetbyte@@YAHPEAUstbfile@@@Z ENDP			; stb__fgetbyte
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
f$ = 64
?stb_close@@YAXPEAUstbfile@@@Z PROC			; stb_close
; File W:\cpp\void\vendor\stb\stb.h
; Line 11075
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11076
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv67[rsp], rax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv67[rsp]
; Line 11077
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_free
; Line 11078
	add	rsp, 56					; 00000038H
	ret	0
?stb_close@@YAXPEAUstbfile@@@Z ENDP			; stb_close
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
f$ = 64
tell$ = 72
buffer$ = 80
len$ = 88
stb_backpatch PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11082
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11083
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv70[rsp], rax
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	edx, DWORD PTR tell$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 11084
	add	rsp, 56					; 00000038H
	ret	0
stb_backpatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
f$ = 64
stb_size PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11080
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv68[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
f$ = 64
stb_tell PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11079
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv68[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_tell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
f$ = 64
buffer$ = 72
len$ = 80
stb_putdata PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11071
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11072
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv70[rsp], rax
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 11073
	add	rsp, 56					; 00000038H
	ret	0
stb_putdata ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
f$ = 64
buffer$ = 72
len$ = 80
stb_getdata PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11067
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11068
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv70[rsp], rax
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 11069
	add	rsp, 56					; 00000038H
	ret	0
stb_getdata ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
f$ = 64
ch$ = 72
stb_putc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11064
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv69[rsp], rax
	mov	edx, DWORD PTR ch$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv69[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_putc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
f$ = 64
stb_getc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11063
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR f$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR tv68[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_getc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?stb_compress_streaming_end@@YAHXZ PROC			; stb_compress_streaming_end
; File W:\cpp\void\vendor\stb\stb.h
; Line 10914
	sub	rsp, 72					; 00000048H
; Line 10916
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	mov	r8, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	r8, rdx
	mov	rdx, r8
	mov	r8d, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+48
	mov	DWORD PTR [rsp+48], r8d
	mov	r8, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	mov	QWORD PTR [rsp+40], r8
	lea	r8, OFFSET FLAT:?xtb@@3U<unnamed-type-xtb>@@A+28
	mov	QWORD PTR [rsp+32], r8
	mov	r9d, eax
	mov	r8, rcx
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	call	?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z ; stb_compress_chunk
; Line 10920
	movsxd	rax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28
	movsxd	rcx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28
	sub	rcx, rdx
	mov	rdx, rax
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
; Line 10922
	mov	ecx, 1530				; 000005faH
	call	?stb_out2@@YAXI@Z			; stb_out2
; Line 10923
	mov	ecx, DWORD PTR ?stb__running_adler@@3IA
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10925
	movsxd	rax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+32
	mov	edx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+36
	mov	rcx, rax
	call	?stb_out_backpatch@@YAX_KI@Z		; stb_out_backpatch
; Line 10927
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	call	QWORD PTR __imp_free
; Line 10928
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	call	QWORD PTR __imp_free
; Line 10929
	mov	eax, 1
; Line 10930
	add	rsp, 72					; 00000048H
	ret	0
?stb_compress_streaming_end@@YAHXZ ENDP			; stb_compress_streaming_end
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
?stb_compress_streaming_start@@YAHXZ PROC		; stb_compress_streaming_start
; File W:\cpp\void\vendor\stb\stb.h
; Line 10874
	sub	rsp, 56					; 00000038H
; Line 10876
	imul	eax, DWORD PTR ?stb__window@@3HA, 3
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+8, eax
; Line 10877
	movsxd	rax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+8
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A, rax
; Line 10878
	cmp	QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A, 0
	jne	SHORT $LN5@stb_compre
	xor	eax, eax
	jmp	$LN1@stb_compre
$LN5@stb_compre:
; Line 10880
	mov	eax, DWORD PTR ?stb__hashsize@@3IA
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40, rax
; Line 10881
	cmp	QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40, 0
	jne	SHORT $LN6@stb_compre
; Line 10882
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	call	QWORD PTR __imp_free
; Line 10883
	xor	eax, eax
	jmp	$LN1@stb_compre
$LN6@stb_compre:
; Line 10886
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_compre
$LN2@stb_compre:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_compre:
	mov	eax, DWORD PTR ?stb__hashsize@@3IA
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stb_compre
; Line 10887
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stb_compre
$LN3@stb_compre:
; Line 10889
	mov	eax, DWORD PTR ?stb__hashsize@@3IA
	dec	eax
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+48, eax
; Line 10891
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12, 0
; Line 10892
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16, 0
; Line 10893
	mov	eax, DWORD PTR ?stb__window@@3HA
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+20, eax
; Line 10894
	mov	eax, DWORD PTR ?stb__window@@3HA
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+24, eax
; Line 10895
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28, 0
; Line 10896
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+36, 0
; Line 10899
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN8@stb_compre
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rax], 87			; 00000057H
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN9@stb_compre
$LN8@stb_compre:
	mov	cl, 87					; 00000057H
	call	?stb__write@@YAXE@Z			; stb__write
$LN9@stb_compre:
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN10@stb_compre
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rax], 188			; 000000bcH
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN11@stb_compre
$LN10@stb_compre:
	mov	cl, 188					; 000000bcH
	call	?stb__write@@YAXE@Z			; stb__write
$LN11@stb_compre:
	xor	ecx, ecx
	call	?stb_out2@@YAXI@Z			; stb_out2
; Line 10901
	xor	ecx, ecx
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10903
	call	?stb_out_backpatch_id@@YA_KXZ		; stb_out_backpatch_id
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+32, eax
; Line 10904
	xor	ecx, ecx
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10906
	mov	ecx, DWORD PTR ?stb__window@@3HA
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10908
	mov	DWORD PTR ?stb__running_adler@@3IA, 1
; Line 10910
	mov	eax, 1
$LN1@stb_compre:
; Line 10911
	add	rsp, 56					; 00000038H
	ret	0
?stb_compress_streaming_start@@YAHXZ ENDP		; stb_compress_streaming_start
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 32
where$1 = 36
id$ = 64
value$ = 72
?stb_out_backpatch@@YAX_KI@Z PROC			; stb_out_backpatch
; File W:\cpp\void\vendor\stb\stb.h
; Line 10837
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 10838
	mov	eax, DWORD PTR value$[rsp]
	shr	eax, 24
	mov	BYTE PTR data$[rsp], al
	mov	eax, DWORD PTR value$[rsp]
	shr	eax, 16
	mov	BYTE PTR data$[rsp+1], al
	mov	eax, DWORD PTR value$[rsp]
	shr	eax, 8
	mov	BYTE PTR data$[rsp+2], al
	movzx	eax, BYTE PTR value$[rsp]
	mov	BYTE PTR data$[rsp+3], al
; Line 10839
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN2@stb_out_ba
; Line 10840
	mov	r8d, 4
	lea	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR id$[rsp]
	call	memcpy
; Line 10841
	jmp	SHORT $LN3@stb_out_ba
$LN2@stb_out_ba:
; Line 10842
	mov	rcx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR where$1[rsp], eax
; Line 10843
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rsp]
	mov	rcx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	call	QWORD PTR __imp_fseek
; Line 10844
	mov	r9, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 10845
	xor	r8d, r8d
	mov	edx, DWORD PTR where$1[rsp]
	mov	rcx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	call	QWORD PTR __imp_fseek
$LN3@stb_out_ba:
; Line 10847
	add	rsp, 56					; 00000038H
	ret	0
?stb_out_backpatch@@YAX_KI@Z ENDP			; stb_out_backpatch
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?stb_out_backpatch_id@@YA_KXZ PROC			; stb_out_backpatch_id
; File W:\cpp\void\vendor\stb\stb.h
; Line 10829
	sub	rsp, 40					; 00000028H
; Line 10830
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN2@stb_out_ba
; Line 10831
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	jmp	SHORT $LN1@stb_out_ba
	jmp	SHORT $LN3@stb_out_ba
$LN2@stb_out_ba:
; Line 10833
	mov	rcx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	call	QWORD PTR __imp_ftell
	cdqe
$LN3@stb_out_ba:
$LN1@stb_out_ba:
; Line 10834
	add	rsp, 40					; 00000028H
	ret	0
?stb_out_backpatch_id@@YA_KXZ ENDP			; stb_out_backpatch_id
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
literals$ = 68
len$ = 72
chash$ = 80
input$ = 112
length$ = 120
?stb_compress_inner@@YAHPEAEI@Z PROC			; stb_compress_inner
; File W:\cpp\void\vendor\stb\stb.h
; Line 10743
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 10744
	mov	DWORD PTR literals$[rsp], 0
; Line 10748
	mov	eax, DWORD PTR ?stb__hashsize@@3IA
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR chash$[rsp], rax
; Line 10749
	cmp	QWORD PTR chash$[rsp], 0
	jne	SHORT $LN5@stb_compre
	xor	eax, eax
	jmp	$LN1@stb_compre
$LN5@stb_compre:
; Line 10750
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_compre
$LN2@stb_compre:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_compre:
	mov	eax, DWORD PTR ?stb__hashsize@@3IA
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stb_compre
; Line 10751
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stb_compre
$LN3@stb_compre:
; Line 10754
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN7@stb_compre
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rax], 87			; 00000057H
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN8@stb_compre
$LN7@stb_compre:
	mov	cl, 87					; 00000057H
	call	?stb__write@@YAXE@Z			; stb__write
$LN8@stb_compre:
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN9@stb_compre
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rax], 188			; 000000bcH
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN10@stb_compre
$LN9@stb_compre:
	mov	cl, 188					; 000000bcH
	call	?stb__write@@YAXE@Z			; stb__write
$LN10@stb_compre:
; Line 10755
	xor	ecx, ecx
	call	?stb_out2@@YAXI@Z			; stb_out2
; Line 10757
	xor	ecx, ecx
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10758
	mov	ecx, DWORD PTR length$[rsp]
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10759
	mov	ecx, DWORD PTR ?stb__window@@3HA
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10761
	mov	DWORD PTR ?stb__running_adler@@3IA, 1
; Line 10763
	mov	eax, DWORD PTR ?stb__hashsize@@3IA
	dec	eax
	mov	ecx, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR input$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR chash$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR literals$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR length$[rsp]
	mov	r8, rcx
	mov	rdx, QWORD PTR input$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	call	?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z ; stb_compress_chunk
	mov	DWORD PTR len$[rsp], eax
; Line 10764
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	je	SHORT $LN11@stb_compre
	mov	r8d, 10764				; 00002a0cH
	lea	rdx, OFFSET FLAT:$SG91123
	lea	rcx, OFFSET FLAT:$SG91124
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@stb_compre:
; Line 10766
	movsxd	rax, DWORD PTR literals$[rsp]
	mov	ecx, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR input$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR literals$[rsp]
	sub	rcx, rdx
	mov	rdx, rax
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
; Line 10768
	mov	rcx, QWORD PTR chash$[rsp]
	call	QWORD PTR __imp_free
; Line 10770
	mov	ecx, 1530				; 000005faH
	call	?stb_out2@@YAXI@Z			; stb_out2
; Line 10772
	mov	ecx, DWORD PTR ?stb__running_adler@@3IA
	call	?stb_out4@@YAXI@Z			; stb_out4
; Line 10774
	mov	eax, 1
$LN1@stb_compre:
; Line 10775
	add	rsp, 104				; 00000068H
	ret	0
?stb_compress_inner@@YAHPEAEI@Z ENDP			; stb_compress_inner
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
best$1 = 32
q$ = 40
h$2 = 48
dist$3 = 52
m$4 = 56
t$5 = 64
lit_start$ = 72
match_max$ = 80
window$ = 84
tv130 = 88
tv132 = 92
tv185 = 96
tv187 = 100
tv240 = 104
tv242 = 108
tv283 = 112
tv285 = 116
h4$6 = 120
h3$7 = 124
h2$8 = 128
h1$9 = 132
history$ = 160
start$ = 168
end$ = 176
length$ = 184
pending_literals$ = 192
chash$ = 200
mask$ = 208
?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z PROC	; stb_compress_chunk
; File W:\cpp\void\vendor\stb\stb.h
; Line 10645
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 10646
	mov	eax, DWORD PTR ?stb__window@@3HA
	mov	DWORD PTR window$[rsp], eax
; Line 10648
	mov	rax, QWORD PTR pending_literals$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR start$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lit_start$[rsp], rax
; Line 10649
	mov	rax, QWORD PTR start$[rsp]
	mov	QWORD PTR q$[rsp], rax
$LN2@stb_compre:
; Line 10656
	movsxd	rax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR start$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR q$[rsp], rax
	jae	$LN3@stb_compre
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 12
	cmp	rax, QWORD PTR end$[rsp]
	jae	$LN3@stb_compre
; Line 10660
	mov	DWORD PTR best$1[rsp], 2
	mov	DWORD PTR dist$3[rsp], 0
; Line 10662
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 65536				; 00010000H
	cmp	rax, QWORD PTR end$[rsp]
	jbe	SHORT $LN4@stb_compre
; Line 10663
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR end$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR match_max$[rsp], eax
	jmp	SHORT $LN5@stb_compre
$LN4@stb_compre:
; Line 10665
	mov	DWORD PTR match_max$[rsp], 65536	; 00010000H
$LN5@stb_compre:
; Line 10679
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 14
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 7
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR h$2[rsp], eax
	mov	eax, DWORD PTR h$2[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR h$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, DWORD PTR mask$[rsp]
	mov	DWORD PTR h1$9[rsp], eax
; Line 10680
	mov	eax, DWORD PTR h1$9[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$5[rsp], rax
	cmp	QWORD PTR t$5[rsp], 0
	je	$LN6@stb_compre
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN46@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	DWORD PTR dist$3[rsp], eax
	je	SHORT $LN44@stb_compre
	mov	DWORD PTR tv130[rsp], 1
	jmp	SHORT $LN45@stb_compre
$LN44@stb_compre:
	mov	DWORD PTR tv130[rsp], 0
$LN45@stb_compre:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN47@stb_compre
$LN46@stb_compre:
	mov	DWORD PTR tv132[rsp], 1
$LN47@stb_compre:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN7@stb_compre
	mov	r8d, DWORD PTR match_max$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR t$5[rsp]
	call	?stb_matchlen@@YAIPEAE0I@Z		; stb_matchlen
	mov	DWORD PTR m$4[rsp], eax
	mov	eax, DWORD PTR best$1[rsp]
	cmp	DWORD PTR m$4[rsp], eax
	jle	SHORT $LN8@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	eax, DWORD PTR window$[rsp]
	jg	SHORT $LN9@stb_compre
	cmp	DWORD PTR m$4[rsp], 9
	jg	SHORT $LN10@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	edx, eax
	mov	ecx, DWORD PTR m$4[rsp]
	call	?stb_not_crap@@YAHHH@Z			; stb_not_crap
	test	eax, eax
	je	SHORT $LN9@stb_compre
$LN10@stb_compre:
	mov	eax, DWORD PTR m$4[rsp]
	mov	DWORD PTR best$1[rsp], eax
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dist$3[rsp], eax
$LN9@stb_compre:
$LN8@stb_compre:
$LN7@stb_compre:
$LN6@stb_compre:
; Line 10681
	mov	eax, DWORD PTR h$2[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR h$2[rsp]
	shr	ecx, 18
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 7
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR h$2[rsp], eax
	mov	eax, DWORD PTR h$2[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR h$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, DWORD PTR mask$[rsp]
	mov	DWORD PTR h2$8[rsp], eax
; Line 10682
	mov	eax, DWORD PTR h$2[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR h$2[rsp]
	shr	ecx, 18
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 7
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR h$2[rsp], eax
	mov	eax, DWORD PTR h2$8[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$5[rsp], rax
	cmp	QWORD PTR t$5[rsp], 0
	je	$LN11@stb_compre
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN50@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	DWORD PTR dist$3[rsp], eax
	je	SHORT $LN48@stb_compre
	mov	DWORD PTR tv185[rsp], 1
	jmp	SHORT $LN49@stb_compre
$LN48@stb_compre:
	mov	DWORD PTR tv185[rsp], 0
$LN49@stb_compre:
	mov	eax, DWORD PTR tv185[rsp]
	mov	DWORD PTR tv187[rsp], eax
	jmp	SHORT $LN51@stb_compre
$LN50@stb_compre:
	mov	DWORD PTR tv187[rsp], 1
$LN51@stb_compre:
	cmp	DWORD PTR tv187[rsp], 0
	je	SHORT $LN12@stb_compre
	mov	r8d, DWORD PTR match_max$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR t$5[rsp]
	call	?stb_matchlen@@YAIPEAE0I@Z		; stb_matchlen
	mov	DWORD PTR m$4[rsp], eax
	mov	eax, DWORD PTR best$1[rsp]
	cmp	DWORD PTR m$4[rsp], eax
	jle	SHORT $LN13@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	eax, DWORD PTR window$[rsp]
	jg	SHORT $LN14@stb_compre
	cmp	DWORD PTR m$4[rsp], 9
	jg	SHORT $LN15@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	edx, eax
	mov	ecx, DWORD PTR m$4[rsp]
	call	?stb_not_crap@@YAHHH@Z			; stb_not_crap
	test	eax, eax
	je	SHORT $LN14@stb_compre
$LN15@stb_compre:
	mov	eax, DWORD PTR m$4[rsp]
	mov	DWORD PTR best$1[rsp], eax
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dist$3[rsp], eax
$LN14@stb_compre:
$LN13@stb_compre:
$LN12@stb_compre:
$LN11@stb_compre:
; Line 10683
	mov	eax, DWORD PTR h$2[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR h$2[rsp]
	shr	ecx, 18
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 7
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR h$2[rsp], eax
	mov	eax, DWORD PTR h$2[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR h$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, DWORD PTR mask$[rsp]
	mov	DWORD PTR h3$7[rsp], eax
; Line 10684
	mov	eax, DWORD PTR h$2[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR h$2[rsp]
	shr	ecx, 18
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 7
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR h$2[rsp], eax
	mov	eax, DWORD PTR h3$7[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$5[rsp], rax
	cmp	QWORD PTR t$5[rsp], 0
	je	$LN16@stb_compre
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN54@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	DWORD PTR dist$3[rsp], eax
	je	SHORT $LN52@stb_compre
	mov	DWORD PTR tv240[rsp], 1
	jmp	SHORT $LN53@stb_compre
$LN52@stb_compre:
	mov	DWORD PTR tv240[rsp], 0
$LN53@stb_compre:
	mov	eax, DWORD PTR tv240[rsp]
	mov	DWORD PTR tv242[rsp], eax
	jmp	SHORT $LN55@stb_compre
$LN54@stb_compre:
	mov	DWORD PTR tv242[rsp], 1
$LN55@stb_compre:
	cmp	DWORD PTR tv242[rsp], 0
	je	SHORT $LN17@stb_compre
	mov	r8d, DWORD PTR match_max$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR t$5[rsp]
	call	?stb_matchlen@@YAIPEAE0I@Z		; stb_matchlen
	mov	DWORD PTR m$4[rsp], eax
	mov	eax, DWORD PTR best$1[rsp]
	cmp	DWORD PTR m$4[rsp], eax
	jle	SHORT $LN18@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	eax, DWORD PTR window$[rsp]
	jg	SHORT $LN19@stb_compre
	cmp	DWORD PTR m$4[rsp], 9
	jg	SHORT $LN20@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	edx, eax
	mov	ecx, DWORD PTR m$4[rsp]
	call	?stb_not_crap@@YAHHH@Z			; stb_not_crap
	test	eax, eax
	je	SHORT $LN19@stb_compre
$LN20@stb_compre:
	mov	eax, DWORD PTR m$4[rsp]
	mov	DWORD PTR best$1[rsp], eax
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dist$3[rsp], eax
$LN19@stb_compre:
$LN18@stb_compre:
$LN17@stb_compre:
$LN16@stb_compre:
; Line 10685
	mov	eax, DWORD PTR h$2[rsp]
	shl	eax, 14
	mov	ecx, DWORD PTR h$2[rsp]
	shr	ecx, 18
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 7
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR h$2[rsp], eax
	mov	eax, DWORD PTR h$2[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR h$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, DWORD PTR mask$[rsp]
	mov	DWORD PTR h4$6[rsp], eax
; Line 10686
	mov	eax, DWORD PTR h4$6[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$5[rsp], rax
	cmp	QWORD PTR t$5[rsp], 0
	je	$LN21@stb_compre
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN58@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	DWORD PTR dist$3[rsp], eax
	je	SHORT $LN56@stb_compre
	mov	DWORD PTR tv283[rsp], 1
	jmp	SHORT $LN57@stb_compre
$LN56@stb_compre:
	mov	DWORD PTR tv283[rsp], 0
$LN57@stb_compre:
	mov	eax, DWORD PTR tv283[rsp]
	mov	DWORD PTR tv285[rsp], eax
	jmp	SHORT $LN59@stb_compre
$LN58@stb_compre:
	mov	DWORD PTR tv285[rsp], 1
$LN59@stb_compre:
	cmp	DWORD PTR tv285[rsp], 0
	je	SHORT $LN22@stb_compre
	mov	r8d, DWORD PTR match_max$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR t$5[rsp]
	call	?stb_matchlen@@YAIPEAE0I@Z		; stb_matchlen
	mov	DWORD PTR m$4[rsp], eax
	mov	eax, DWORD PTR best$1[rsp]
	cmp	DWORD PTR m$4[rsp], eax
	jle	SHORT $LN23@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	eax, DWORD PTR window$[rsp]
	jg	SHORT $LN24@stb_compre
	cmp	DWORD PTR m$4[rsp], 9
	jg	SHORT $LN25@stb_compre
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	edx, eax
	mov	ecx, DWORD PTR m$4[rsp]
	call	?stb_not_crap@@YAHHH@Z			; stb_not_crap
	test	eax, eax
	je	SHORT $LN24@stb_compre
$LN25@stb_compre:
	mov	eax, DWORD PTR m$4[rsp]
	mov	DWORD PTR best$1[rsp], eax
	mov	rax, QWORD PTR t$5[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dist$3[rsp], eax
$LN24@stb_compre:
$LN23@stb_compre:
$LN22@stb_compre:
$LN21@stb_compre:
; Line 10690
	mov	eax, DWORD PTR h4$6[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR h3$7[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR h2$8[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR h1$9[rsp]
	mov	rcx, QWORD PTR chash$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 10692
	cmp	DWORD PTR best$1[rsp], 2
	jle	SHORT $LN26@stb_compre
; Line 10693
	cmp	DWORD PTR dist$3[rsp], 0
	jg	SHORT $LN60@stb_compre
	mov	r8d, 10693				; 000029c5H
	lea	rdx, OFFSET FLAT:$SG91083
	lea	rcx, OFFSET FLAT:$SG91084
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@stb_compre:
$LN26@stb_compre:
; Line 10696
	cmp	DWORD PTR best$1[rsp], 3
	jge	SHORT $LN27@stb_compre
; Line 10697
	mov	rax, QWORD PTR q$[rsp]
	inc	rax
	mov	QWORD PTR q$[rsp], rax
	jmp	$LN28@stb_compre
$LN27@stb_compre:
; Line 10698
	cmp	DWORD PTR best$1[rsp], 2
	jle	$LN29@stb_compre
	cmp	DWORD PTR best$1[rsp], 128		; 00000080H
	jg	$LN29@stb_compre
	cmp	DWORD PTR dist$3[rsp], 256		; 00000100H
	jg	$LN29@stb_compre
; Line 10699
	mov	rax, QWORD PTR lit_start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR lit_start$[rsp]
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
	movsxd	rax, DWORD PTR best$1[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR lit_start$[rsp], rax
; Line 10700
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN61@stb_compre
	mov	eax, DWORD PTR best$1[rsp]
	add	eax, 127				; 0000007fH
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN62@stb_compre
$LN61@stb_compre:
	mov	eax, DWORD PTR best$1[rsp]
	add	eax, 127				; 0000007fH
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN62@stb_compre:
; Line 10701
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN63@stb_compre
	mov	eax, DWORD PTR dist$3[rsp]
	dec	eax
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN64@stb_compre
$LN63@stb_compre:
	mov	eax, DWORD PTR dist$3[rsp]
	dec	eax
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN64@stb_compre:
; Line 10702
	jmp	$LN30@stb_compre
$LN29@stb_compre:
	cmp	DWORD PTR best$1[rsp], 5
	jle	$LN31@stb_compre
	cmp	DWORD PTR best$1[rsp], 256		; 00000100H
	jg	$LN31@stb_compre
	cmp	DWORD PTR dist$3[rsp], 16384		; 00004000H
	jg	$LN31@stb_compre
; Line 10703
	mov	rax, QWORD PTR lit_start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR lit_start$[rsp]
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
	movsxd	rax, DWORD PTR best$1[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR lit_start$[rsp], rax
; Line 10704
	mov	eax, DWORD PTR dist$3[rsp]
	add	eax, 16383				; 00003fffH
	mov	ecx, eax
	call	?stb_out2@@YAXI@Z			; stb_out2
; Line 10705
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN65@stb_compre
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN66@stb_compre
$LN65@stb_compre:
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN66@stb_compre:
; Line 10706
	jmp	$LN32@stb_compre
$LN31@stb_compre:
	cmp	DWORD PTR best$1[rsp], 7
	jle	$LN33@stb_compre
	cmp	DWORD PTR best$1[rsp], 256		; 00000100H
	jg	$LN33@stb_compre
	cmp	DWORD PTR dist$3[rsp], 524288		; 00080000H
	jg	$LN33@stb_compre
; Line 10707
	mov	rax, QWORD PTR lit_start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR lit_start$[rsp]
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
	movsxd	rax, DWORD PTR best$1[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR lit_start$[rsp], rax
; Line 10708
	mov	eax, DWORD PTR dist$3[rsp]
	add	eax, 1572863				; 0017ffffH
	mov	ecx, eax
	call	?stb_out3@@YAXI@Z			; stb_out3
; Line 10709
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN67@stb_compre
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN68@stb_compre
$LN67@stb_compre:
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN68@stb_compre:
; Line 10710
	jmp	$LN34@stb_compre
$LN33@stb_compre:
	cmp	DWORD PTR best$1[rsp], 8
	jle	SHORT $LN35@stb_compre
	cmp	DWORD PTR best$1[rsp], 65536		; 00010000H
	jg	SHORT $LN35@stb_compre
	cmp	DWORD PTR dist$3[rsp], 524288		; 00080000H
	jg	SHORT $LN35@stb_compre
; Line 10711
	mov	rax, QWORD PTR lit_start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR lit_start$[rsp]
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
	movsxd	rax, DWORD PTR best$1[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR lit_start$[rsp], rax
; Line 10712
	mov	eax, DWORD PTR dist$3[rsp]
	add	eax, 1048575				; 000fffffH
	mov	ecx, eax
	call	?stb_out3@@YAXI@Z			; stb_out3
; Line 10713
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	mov	ecx, eax
	call	?stb_out2@@YAXI@Z			; stb_out2
	jmp	$LN36@stb_compre
$LN35@stb_compre:
; Line 10714
	cmp	DWORD PTR best$1[rsp], 9
	jle	$LN37@stb_compre
	cmp	DWORD PTR dist$3[rsp], 16777216		; 01000000H
	jg	$LN37@stb_compre
; Line 10715
	cmp	DWORD PTR best$1[rsp], 65536		; 00010000H
	jle	SHORT $LN39@stb_compre
	mov	DWORD PTR best$1[rsp], 65536		; 00010000H
$LN39@stb_compre:
; Line 10716
	mov	rax, QWORD PTR lit_start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR lit_start$[rsp]
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
	movsxd	rax, DWORD PTR best$1[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR lit_start$[rsp], rax
; Line 10717
	cmp	DWORD PTR best$1[rsp], 256		; 00000100H
	jg	SHORT $LN40@stb_compre
; Line 10718
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN69@stb_compre
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rax], 6
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN70@stb_compre
$LN69@stb_compre:
	mov	cl, 6
	call	?stb__write@@YAXE@Z			; stb__write
$LN70@stb_compre:
; Line 10719
	mov	eax, DWORD PTR dist$3[rsp]
	dec	eax
	mov	ecx, eax
	call	?stb_out3@@YAXI@Z			; stb_out3
; Line 10720
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN71@stb_compre
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN72@stb_compre
$LN71@stb_compre:
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN72@stb_compre:
; Line 10721
	jmp	SHORT $LN41@stb_compre
$LN40@stb_compre:
; Line 10722
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN73@stb_compre
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rax], 4
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN74@stb_compre
$LN73@stb_compre:
	mov	cl, 4
	call	?stb__write@@YAXE@Z			; stb__write
$LN74@stb_compre:
; Line 10723
	mov	eax, DWORD PTR dist$3[rsp]
	dec	eax
	mov	ecx, eax
	call	?stb_out3@@YAXI@Z			; stb_out3
; Line 10724
	mov	eax, DWORD PTR best$1[rsp]
	dec	eax
	mov	ecx, eax
	call	?stb_out2@@YAXI@Z			; stb_out2
$LN41@stb_compre:
; Line 10726
	jmp	SHORT $LN38@stb_compre
$LN37@stb_compre:
; Line 10727
	mov	rax, QWORD PTR q$[rsp]
	inc	rax
	mov	QWORD PTR q$[rsp], rax
$LN38@stb_compre:
$LN36@stb_compre:
$LN34@stb_compre:
$LN32@stb_compre:
$LN30@stb_compre:
$LN28@stb_compre:
; Line 10729
	jmp	$LN2@stb_compre
$LN3@stb_compre:
; Line 10732
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR length$[rsp]
	cmp	rax, rcx
	jge	SHORT $LN42@stb_compre
; Line 10733
	movsxd	rax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR start$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
$LN42@stb_compre:
; Line 10736
	mov	rax, QWORD PTR lit_start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR pending_literals$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 10738
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8d, eax
	mov	rdx, QWORD PTR start$[rsp]
	mov	ecx, DWORD PTR ?stb__running_adler@@3IA
	call	stb_adler32
	mov	DWORD PTR ?stb__running_adler@@3IA, eax
; Line 10739
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	sub	rcx, rax
	mov	rax, rcx
; Line 10740
	add	rsp, 152				; 00000098H
	ret	0
?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z ENDP	; stb_compress_chunk
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 0
best$ = 32
dist$ = 40
?stb_not_crap@@YAHHH@Z PROC				; stb_not_crap
; File W:\cpp\void\vendor\stb\stb.h
; Line 10616
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 10617
	cmp	DWORD PTR best$[rsp], 2
	jle	SHORT $LN3@stb_not_cr
	cmp	DWORD PTR dist$[rsp], 256		; 00000100H
	jle	SHORT $LN5@stb_not_cr
$LN3@stb_not_cr:
	cmp	DWORD PTR best$[rsp], 5
	jle	SHORT $LN4@stb_not_cr
	cmp	DWORD PTR dist$[rsp], 16384		; 00004000H
	jle	SHORT $LN5@stb_not_cr
$LN4@stb_not_cr:
	cmp	DWORD PTR best$[rsp], 7
	jle	SHORT $LN6@stb_not_cr
	cmp	DWORD PTR dist$[rsp], 524288		; 00080000H
	jle	SHORT $LN5@stb_not_cr
$LN6@stb_not_cr:
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN7@stb_not_cr
$LN5@stb_not_cr:
	mov	DWORD PTR tv70[rsp], 1
$LN7@stb_not_cr:
	mov	eax, DWORD PTR tv70[rsp]
; Line 10620
	add	rsp, 24
	ret	0
?stb_not_crap@@YAHHH@Z ENDP				; stb_not_crap
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
in$ = 48
numlit$ = 56
?outliterals@@YAXPEAE_J@Z PROC				; outliterals
; File W:\cpp\void\vendor\stb\stb.h
; Line 10588
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@outliteral:
; Line 10589
	cmp	QWORD PTR numlit$[rsp], 65536		; 00010000H
	jle	SHORT $LN3@outliteral
; Line 10590
	mov	edx, 65536				; 00010000H
	mov	rcx, QWORD PTR in$[rsp]
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
; Line 10591
	mov	rax, QWORD PTR in$[rsp]
	add	rax, 65536				; 00010000H
	mov	QWORD PTR in$[rsp], rax
; Line 10592
	mov	rax, QWORD PTR numlit$[rsp]
	sub	rax, 65536				; 00010000H
	mov	QWORD PTR numlit$[rsp], rax
; Line 10593
	jmp	SHORT $LN2@outliteral
$LN3@outliteral:
; Line 10595
	cmp	QWORD PTR numlit$[rsp], 0
	jne	SHORT $LN4@outliteral
	jmp	SHORT $LN5@outliteral
$LN4@outliteral:
; Line 10596
	cmp	QWORD PTR numlit$[rsp], 32		; 00000020H
	jg	SHORT $LN6@outliteral
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN13@outliteral
	mov	eax, DWORD PTR numlit$[rsp]
	add	eax, 31
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN14@outliteral
$LN13@outliteral:
	mov	eax, DWORD PTR numlit$[rsp]
	add	eax, 31
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN14@outliteral:
	jmp	SHORT $LN7@outliteral
$LN6@outliteral:
; Line 10597
	cmp	QWORD PTR numlit$[rsp], 2048		; 00000800H
	jg	SHORT $LN8@outliteral
	mov	eax, DWORD PTR numlit$[rsp]
	add	eax, 2047				; 000007ffH
	mov	ecx, eax
	call	?stb_out2@@YAXI@Z			; stb_out2
	jmp	SHORT $LN9@outliteral
$LN8@outliteral:
; Line 10598
	mov	eax, DWORD PTR numlit$[rsp]
	add	eax, 458751				; 0006ffffH
	mov	ecx, eax
	call	?stb_out3@@YAXI@Z			; stb_out3
$LN9@outliteral:
$LN7@outliteral:
$LN5@outliteral:
; Line 10600
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN10@outliteral
; Line 10601
	mov	r8, QWORD PTR numlit$[rsp]
	mov	rdx, QWORD PTR in$[rsp]
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	call	memcpy
; Line 10602
	mov	rax, QWORD PTR numlit$[rsp]
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
; Line 10603
	jmp	SHORT $LN11@outliteral
$LN10@outliteral:
; Line 10604
	mov	r9, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	mov	r8, QWORD PTR numlit$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR in$[rsp]
	call	QWORD PTR __imp_fwrite
$LN11@outliteral:
; Line 10605
	add	rsp, 40					; 00000028H
	ret	0
?outliterals@@YAXPEAE_J@Z ENDP				; outliterals
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
?stb_out4@@YAXI@Z PROC					; stb_out4
; File W:\cpp\void\vendor\stb\stb.h
; Line 10584
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN3@stb_out4
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 24
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN4@stb_out4
$LN3@stb_out4:
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 24
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN4@stb_out4:
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN5@stb_out4
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 16
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN6@stb_out4
$LN5@stb_out4:
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 16
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN6@stb_out4:
; Line 10585
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN7@stb_out4
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 8
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN8@stb_out4
$LN7@stb_out4:
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 8
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN8@stb_out4:
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN9@stb_out4
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	movzx	ecx, BYTE PTR v$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN10@stb_out4
$LN9@stb_out4:
	movzx	ecx, BYTE PTR v$[rsp]
	call	?stb__write@@YAXE@Z			; stb__write
$LN10@stb_out4:
	add	rsp, 40					; 00000028H
	ret	0
?stb_out4@@YAXI@Z ENDP					; stb_out4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
?stb_out3@@YAXI@Z PROC					; stb_out3
; File W:\cpp\void\vendor\stb\stb.h
; Line 10583
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN3@stb_out3
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 16
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN4@stb_out3
$LN3@stb_out3:
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 16
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN4@stb_out3:
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN5@stb_out3
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 8
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN6@stb_out3
$LN5@stb_out3:
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 8
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN6@stb_out3:
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN7@stb_out3
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	movzx	ecx, BYTE PTR v$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN8@stb_out3
$LN7@stb_out3:
	movzx	ecx, BYTE PTR v$[rsp]
	call	?stb__write@@YAXE@Z			; stb__write
$LN8@stb_out3:
	add	rsp, 40					; 00000028H
	ret	0
?stb_out3@@YAXI@Z ENDP					; stb_out3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
?stb_out2@@YAXI@Z PROC					; stb_out2
; File W:\cpp\void\vendor\stb\stb.h
; Line 10578
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 10579
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN3@stb_out2
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 8
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN4@stb_out2
$LN3@stb_out2:
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, 8
	movzx	ecx, al
	call	?stb__write@@YAXE@Z			; stb__write
$LN4@stb_out2:
; Line 10580
	cmp	QWORD PTR ?stb__out@@3PEAEEA, 0
	je	SHORT $LN5@stb_out2
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	movzx	ecx, BYTE PTR v$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR ?stb__out@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
	jmp	SHORT $LN6@stb_out2
$LN5@stb_out2:
	movzx	ecx, BYTE PTR v$[rsp]
	call	?stb__write@@YAXE@Z			; stb__write
$LN6@stb_out2:
; Line 10581
	add	rsp, 40					; 00000028H
	ret	0
?stb_out2@@YAXI@Z ENDP					; stb_out2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
?stb__write@@YAXE@Z PROC				; stb__write
; File W:\cpp\void\vendor\stb\stb.h
; Line 10570
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 40					; 00000028H
; Line 10571
	movzx	eax, BYTE PTR v$[rsp]
	mov	rdx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
; Line 10572
	mov	eax, DWORD PTR ?stb__outbytes@@3IA
	inc	eax
	mov	DWORD PTR ?stb__outbytes@@3IA, eax
; Line 10573
	add	rsp, 40					; 00000028H
	ret	0
?stb__write@@YAXE@Z ENDP				; stb__write
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
m1$ = 32
m2$ = 40
maxlen$ = 48
?stb_matchlen@@YAIPEAE0I@Z PROC				; stb_matchlen
; File W:\cpp\void\vendor\stb\stb.h
; Line 10556
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 10558
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_matchl
$LN2@stb_matchl:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_matchl:
	mov	eax, DWORD PTR maxlen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stb_matchl
; Line 10559
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR m1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR m2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stb_matchl
	mov	eax, DWORD PTR i$[rsp]
	jmp	SHORT $LN1@stb_matchl
$LN5@stb_matchl:
	jmp	SHORT $LN2@stb_matchl
$LN3@stb_matchl:
; Line 10560
	mov	eax, DWORD PTR i$[rsp]
$LN1@stb_matchl:
; Line 10561
	add	rsp, 24
	ret	0
?stb_matchlen@@YAIPEAE0I@Z ENDP				; stb_matchlen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
?stb_decompress_token@@YAPEAEPEAE@Z PROC		; stb_decompress_token
; File W:\cpp\void\vendor\stb\stb.h
; Line 10414
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10415
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jl	$LN2@stb_decomp
; Line 10416
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN4@stb_decomp
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 127				; 0000007fH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	dec	rcx
	mov	edx, eax
	call	?stb__match@@YAXPEAEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 2
	mov	QWORD PTR i$[rsp], rax
	jmp	$LN5@stb_decomp
$LN4@stb_decomp:
; Line 10417
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 64					; 00000040H
	jl	SHORT $LN6@stb_decomp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	inc	eax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	lea	ecx, DWORD PTR [rcx+rdx-16383]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEAEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 3
	mov	QWORD PTR i$[rsp], rax
	jmp	SHORT $LN7@stb_decomp
$LN6@stb_decomp:
; Line 10418
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 31
	mov	rcx, QWORD PTR i$[rsp]
	inc	rcx
	mov	edx, eax
	call	?stb__lit@@YAXPEAEI@Z			; stb__lit
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 30
	cdqe
	mov	rcx, QWORD PTR i$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR i$[rsp], rax
$LN7@stb_decomp:
$LN5@stb_decomp:
; Line 10419
	jmp	$LN3@stb_decomp
$LN2@stb_decomp:
; Line 10420
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 24
	jl	$LN8@stb_decomp
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	inc	eax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 2
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx-1572863]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEAEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 4
	mov	QWORD PTR i$[rsp], rax
	jmp	$LN9@stb_decomp
$LN8@stb_decomp:
; Line 10421
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 16
	jl	$LN10@stb_decomp
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 2
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx-1048575]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEAEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 5
	mov	QWORD PTR i$[rsp], rax
	jmp	$LN11@stb_decomp
$LN10@stb_decomp:
; Line 10422
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	jl	$LN12@stb_decomp
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-2047]
	mov	rcx, QWORD PTR i$[rsp]
	add	rcx, 2
	mov	edx, eax
	call	?stb__lit@@YAXPEAEI@Z			; stb__lit
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-2045]
	cdqe
	mov	rcx, QWORD PTR i$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR i$[rsp], rax
	jmp	$LN13@stb_decomp
$LN12@stb_decomp:
; Line 10423
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 7
	jne	SHORT $LN14@stb_decomp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	rcx, QWORD PTR i$[rsp]
	add	rcx, 3
	mov	edx, eax
	call	?stb__lit@@YAXPEAEI@Z			; stb__lit
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+4]
	cdqe
	mov	rcx, QWORD PTR i$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR i$[rsp], rax
	jmp	$LN15@stb_decomp
$LN14@stb_decomp:
; Line 10424
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 6
	jne	$LN16@stb_decomp
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	inc	eax
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 3
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEAEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 5
	mov	QWORD PTR i$[rsp], rax
	jmp	$LN17@stb_decomp
$LN16@stb_decomp:
; Line 10425
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 4
	jne	$LN18@stb_decomp
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 3
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEAEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 6
	mov	QWORD PTR i$[rsp], rax
$LN18@stb_decomp:
$LN17@stb_decomp:
$LN15@stb_decomp:
$LN13@stb_decomp:
$LN11@stb_decomp:
$LN9@stb_decomp:
$LN3@stb_decomp:
; Line 10427
	mov	rax, QWORD PTR i$[rsp]
; Line 10428
	add	rsp, 40					; 00000028H
	ret	0
?stb_decompress_token@@YAPEAEPEAE@Z ENDP		; stb_decompress_token
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
length$ = 56
?stb__lit@@YAXPEAEI@Z PROC				; stb__lit
; File W:\cpp\void\vendor\stb\stb.h
; Line 10401
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10402
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier@@3PEAEEA
	jbe	SHORT $LN5@stb__lit
	mov	r8d, 10402				; 000028a2H
	lea	rdx, OFFSET FLAT:$SG90825
	lea	rcx, OFFSET FLAT:$SG90826
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stb__lit:
; Line 10403
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier@@3PEAEEA
	jbe	SHORT $LN2@stb__lit
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__lit
$LN2@stb__lit:
; Line 10404
	mov	rax, QWORD PTR ?stb__barrier2@@3PEAEEA
	cmp	QWORD PTR data$[rsp], rax
	jae	SHORT $LN3@stb__lit
	mov	rax, QWORD PTR ?stb__barrier@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__lit
$LN3@stb__lit:
; Line 10405
	mov	eax, DWORD PTR length$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	call	memcpy
; Line 10406
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
$LN1@stb__lit:
; Line 10407
	add	rsp, 40					; 00000028H
	ret	0
?stb__lit@@YAXPEAEI@Z ENDP				; stb__lit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv84 = 32
tv80 = 36
data$ = 64
length$ = 72
?stb__match@@YAXPEAEI@Z PROC				; stb__match
; File W:\cpp\void\vendor\stb\stb.h
; Line 10392
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 10394
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier@@3PEAEEA
	jbe	SHORT $LN7@stb__match
	mov	r8d, 10394				; 0000289aH
	lea	rdx, OFFSET FLAT:$SG90815
	lea	rcx, OFFSET FLAT:$SG90816
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__match:
; Line 10395
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier@@3PEAEEA
	jbe	SHORT $LN4@stb__match
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__match
$LN4@stb__match:
; Line 10396
	mov	rax, QWORD PTR ?stb__barrier4@@3PEAEEA
	cmp	QWORD PTR data$[rsp], rax
	jae	SHORT $LN5@stb__match
	mov	rax, QWORD PTR ?stb__barrier@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__match
$LN5@stb__match:
$LN2@stb__match:
; Line 10397
	mov	eax, DWORD PTR length$[rsp]
	mov	DWORD PTR tv80[rsp], eax
	mov	eax, DWORD PTR length$[rsp]
	dec	eax
	mov	DWORD PTR length$[rsp], eax
	cmp	DWORD PTR tv80[rsp], 0
	je	SHORT $LN3@stb__match
	mov	rax, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv84[rsp], al
	mov	rax, QWORD PTR data$[rsp]
	inc	rax
	mov	QWORD PTR data$[rsp], rax
	mov	rax, QWORD PTR ?stb__dout@@3PEAEEA
	movzx	ecx, BYTE PTR tv84[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR ?stb__dout@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN2@stb__match
$LN3@stb__match:
$LN1@stb__match:
; Line 10398
	add	rsp, 56					; 00000038H
	ret	0
?stb__match@@YAXPEAEI@Z ENDP				; stb__match
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flush$1 = 64
i$ = 68
amt$2 = 72
amount$3 = 76
n$4 = 80
data$ = 112
data_len$ = 120
stb_write PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10933
$LN19:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 10939
	mov	eax, DWORD PTR data_len$[rsp]
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+36
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+36, eax
$LN2@stb_write:
; Line 10941
	cmp	DWORD PTR data_len$[rsp], 0
	je	$LN3@stb_write
; Line 10943
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+8
	cmp	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12, eax
	jge	$LN7@stb_write
; Line 10944
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+8
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR amt$2[rsp], eax
; Line 10945
	mov	eax, DWORD PTR amt$2[rsp]
	cmp	DWORD PTR data_len$[rsp], eax
	jge	SHORT $LN8@stb_write
	mov	eax, DWORD PTR data_len$[rsp]
	mov	DWORD PTR amt$2[rsp], eax
$LN8@stb_write:
; Line 10946
	movsxd	rax, DWORD PTR amt$2[rsp]
	movsxd	rcx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR data$[rsp]
	call	memcpy
; Line 10947
	mov	eax, DWORD PTR amt$2[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR data_len$[rsp], eax
; Line 10948
	movsxd	rax, DWORD PTR amt$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR data$[rsp], rax
; Line 10949
	mov	eax, DWORD PTR amt$2[rsp]
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12, eax
$LN7@stb_write:
; Line 10951
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+8
	cmp	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12, eax
	jge	SHORT $LN9@stb_write
; Line 10952
	jmp	$LN1@stb_write
$LN9@stb_write:
; Line 10958
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+24
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	jge	$LN10@stb_write
; Line 10959
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+24
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	mov	DWORD PTR amount$3[rsp], eax
; Line 10961
	cmp	DWORD PTR amount$3[rsp], 0
	jg	SHORT $LN15@stb_write
	mov	r8d, 10961				; 00002ad1H
	lea	rdx, OFFSET FLAT:$SG91238
	lea	rcx, OFFSET FLAT:$SG91239
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb_write:
; Line 10962
	movsxd	rax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+48
	mov	DWORD PTR [rsp+48], edx
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, OFFSET FLAT:?xtb@@3U<unnamed-type-xtb>@@A+28
	mov	QWORD PTR [rsp+32], rdx
	mov	r9d, DWORD PTR amount$3[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	call	?stb_compress_chunk@@YAHPEAE00HPEAHPEAPEAEI@Z ; stb_compress_chunk
	mov	DWORD PTR n$4[rsp], eax
; Line 10964
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16, eax
$LN10@stb_write:
; Line 10967
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+24
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	jge	SHORT $LN16@stb_write
	mov	r8d, 10967				; 00002ad7H
	lea	rdx, OFFSET FLAT:$SG91240
	lea	rcx, OFFSET FLAT:$SG91241
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_write:
; Line 10973
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+20
	mov	DWORD PTR flush$1[rsp], eax
; Line 10974
	mov	eax, DWORD PTR flush$1[rsp]
	cmp	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16, eax
	jge	SHORT $LN17@stb_write
	mov	r8d, 10974				; 00002adeH
	lea	rdx, OFFSET FLAT:$SG91242
	lea	rcx, OFFSET FLAT:$SG91243
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@stb_write:
; Line 10975
	mov	eax, DWORD PTR flush$1[rsp]
	cmp	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12, eax
	jge	SHORT $LN18@stb_write
	mov	r8d, 10975				; 00002adfH
	lea	rdx, OFFSET FLAT:$SG91244
	lea	rcx, OFFSET FLAT:$SG91245
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stb_write:
; Line 10979
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR flush$1[rsp]
	jge	SHORT $LN11@stb_write
; Line 10980
	movsxd	rax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28
	movsxd	rcx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28
	sub	rcx, rdx
	mov	rdx, rax
	call	?outliterals@@YAXPEAE_J@Z		; outliterals
; Line 10981
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+28, 0
$LN11@stb_write:
; Line 10985
	mov	eax, DWORD PTR flush$1[rsp]
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	sub	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR flush$1[rsp]
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	call	memmove
; Line 10986
	mov	eax, DWORD PTR flush$1[rsp]
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+16, eax
; Line 10987
	mov	eax, DWORD PTR flush$1[rsp]
	mov	ecx, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+12, eax
; Line 10989
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_write
$LN4@stb_write:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_write:
	mov	eax, DWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+48
	cmp	DWORD PTR i$[rsp], eax
	ja	SHORT $LN5@stb_write
; Line 10990
	mov	eax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR flush$1[rsp]
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	cmp	QWORD PTR [rdx+rax*8], rcx
	jae	SHORT $LN12@stb_write
; Line 10991
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN13@stb_write
$LN12@stb_write:
; Line 10993
	movsxd	rax, DWORD PTR flush$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	mov	rcx, QWORD PTR [rdx+rcx*8]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR ?xtb@@3U<unnamed-type-xtb>@@A+40
	mov	QWORD PTR [rdx+rcx*8], rax
$LN13@stb_write:
	jmp	SHORT $LN4@stb_write
$LN5@stb_write:
; Line 10996
	jmp	$LN2@stb_write
$LN3@stb_write:
$LN1@stb_write:
; Line 10997
	add	rsp, 104				; 00000068H
	ret	0
stb_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
close$ = 48
stb_compress_stream_end PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11014
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 11015
	call	?stb_compress_streaming_end@@YAHXZ	; stb_compress_streaming_end
; Line 11016
	cmp	DWORD PTR close$[rsp], 0
	je	SHORT $LN2@stb_compre
	cmp	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, 0
	je	SHORT $LN2@stb_compre
; Line 11017
	mov	rcx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	call	QWORD PTR __imp_fclose
$LN2@stb_compre:
; Line 11019
	add	rsp, 40					; 00000028H
	ret	0
stb_compress_stream_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
stb_compress_stream_start PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 11000
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11001
	mov	QWORD PTR ?stb__out@@3PEAEEA, 0
; Line 11002
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, rax
; Line 11004
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stb_compre
; Line 11005
	xor	eax, eax
	jmp	SHORT $LN1@stb_compre
$LN2@stb_compre:
; Line 11007
	call	?stb_compress_streaming_start@@YAHXZ	; stb_compress_streaming_start
	test	eax, eax
	jne	SHORT $LN3@stb_compre
; Line 11008
	xor	eax, eax
	jmp	SHORT $LN1@stb_compre
$LN3@stb_compre:
; Line 11010
	mov	eax, 1
$LN1@stb_compre:
; Line 11011
	add	rsp, 40					; 00000028H
	ret	0
stb_compress_stream_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
p$ = 40
f$ = 48
q$ = 56
filename$ = 80
len$ = 88
stb_decompress_fromfile PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10465
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 10469
	lea	rdx, OFFSET FLAT:$SG90890
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$[rsp], rax
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN2@stb_decomp:
; Line 10470
	mov	r8d, 2
	xor	edx, edx
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 10471
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR n$[rsp], eax
; Line 10472
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 10473
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN3@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN3@stb_decomp:
; Line 10474
	mov	eax, DWORD PTR n$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, eax
	mov	edx, 1
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_fread
; Line 10475
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 10476
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN4@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN4@stb_decomp:
; Line 10477
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 87					; 00000057H
	jne	SHORT $LN6@stb_decomp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 188				; 000000bcH
	jne	SHORT $LN6@stb_decomp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN6@stb_decomp
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN5@stb_decomp
$LN6@stb_decomp:
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	SHORT $LN1@stb_decomp
$LN5@stb_decomp:
; Line 10478
	mov	rcx, QWORD PTR p$[rsp]
	call	stb_decompress_length
	inc	eax
	mov	eax, eax
	mov	ecx, eax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR q$[rsp], rax
; Line 10479
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stb_decomp
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	SHORT $LN1@stb_decomp
$LN7@stb_decomp:
; Line 10480
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	stb_decompress
	mov	rcx, QWORD PTR len$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 10481
	mov	rax, QWORD PTR len$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@stb_decomp
	mov	rax, QWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR q$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN8@stb_decomp:
; Line 10482
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_free
; Line 10483
	mov	rax, QWORD PTR q$[rsp]
$LN1@stb_decomp:
; Line 10484
	add	rsp, 72					; 00000048H
	ret	0
stb_decompress_fromfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
input$ = 56
length$ = 64
stb_compress_intofile PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10808
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10813
	mov	QWORD PTR ?stb__out@@3PEAEEA, 0
; Line 10814
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, rax
; Line 10815
	cmp	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, 0
	jne	SHORT $LN2@stb_compre
	xor	eax, eax
	jmp	SHORT $LN1@stb_compre
$LN2@stb_compre:
; Line 10817
	mov	DWORD PTR ?stb__outbytes@@3IA, 0
; Line 10819
	mov	edx, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	call	?stb_compress_inner@@YAHPEAEI@Z		; stb_compress_inner
	test	eax, eax
	jne	SHORT $LN3@stb_compre
; Line 10820
	xor	eax, eax
	jmp	SHORT $LN1@stb_compre
$LN3@stb_compre:
; Line 10822
	mov	eax, DWORD PTR ?stb__outbytes@@3IA
$LN1@stb_compre:
; Line 10823
	add	rsp, 40					; 00000028H
	ret	0
stb_compress_intofile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filename$ = 48
input$ = 56
length$ = 64
stb_compress_tofile PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10788
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10793
	mov	QWORD PTR ?stb__out@@3PEAEEA, 0
; Line 10794
	lea	rdx, OFFSET FLAT:$SG91137
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, rax
; Line 10795
	cmp	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, 0
	jne	SHORT $LN2@stb_compre
	xor	eax, eax
	jmp	SHORT $LN1@stb_compre
$LN2@stb_compre:
; Line 10797
	mov	DWORD PTR ?stb__outbytes@@3IA, 0
; Line 10799
	mov	edx, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	call	?stb_compress_inner@@YAHPEAEI@Z		; stb_compress_inner
	test	eax, eax
	jne	SHORT $LN3@stb_compre
; Line 10800
	xor	eax, eax
	jmp	SHORT $LN1@stb_compre
$LN3@stb_compre:
; Line 10802
	mov	rcx, QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA
	call	QWORD PTR __imp_fclose
; Line 10804
	mov	eax, DWORD PTR ?stb__outbytes@@3IA
$LN1@stb_compre:
; Line 10805
	add	rsp, 40					; 00000028H
	ret	0
stb_compress_tofile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 0
y$ = 32
stb_compress_hashsize PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10624
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 10625
	mov	DWORD PTR z$[rsp], 1024			; 00000400H
$LN2@stb_compre:
; Line 10626
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jae	SHORT $LN3@stb_compre
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 1
	mov	DWORD PTR z$[rsp], eax
	jmp	SHORT $LN2@stb_compre
$LN3@stb_compre:
; Line 10627
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 2
	mov	DWORD PTR ?stb__hashsize@@3IA, eax
; Line 10628
	add	rsp, 24
	ret	0
stb_compress_hashsize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 8
stb_compress_window PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10609
	mov	DWORD PTR [rsp+8], ecx
; Line 10610
	cmp	DWORD PTR z$[rsp], 16777216		; 01000000H
	jl	SHORT $LN2@stb_compre
	mov	DWORD PTR z$[rsp], 16777216		; 01000000H
$LN2@stb_compre:
; Line 10611
	cmp	DWORD PTR z$[rsp], 256			; 00000100H
	jge	SHORT $LN3@stb_compre
	mov	DWORD PTR z$[rsp], 256			; 00000100H
$LN3@stb_compre:
; Line 10612
	mov	eax, DWORD PTR z$[rsp]
	mov	DWORD PTR ?stb__window@@3HA, eax
; Line 10613
	ret	0
stb_compress_window ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
input$ = 56
length$ = 64
stb_compress PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10778
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10779
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR ?stb__out@@3PEAEEA, rax
; Line 10780
	mov	QWORD PTR ?stb__outfile@@3PEAU_iobuf@@EA, 0
; Line 10782
	mov	edx, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	call	?stb_compress_inner@@YAHPEAEI@Z		; stb_compress_inner
; Line 10784
	mov	rax, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR ?stb__out@@3PEAEEA
	sub	rcx, rax
	mov	rax, rcx
; Line 10785
	add	rsp, 40					; 00000028H
	ret	0
stb_compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
olen$ = 32
old_i$1 = 40
output$ = 64
i$ = 72
length$ = 80
stb_decompress PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10431
$LN16:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 10433
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 3
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	add	ecx, edx
	add	eax, ecx
	cmp	eax, 1471938560				; 57bc0000H
	je	SHORT $LN4@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN4@stb_decomp:
; Line 10434
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 6
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 7
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	add	ecx, edx
	add	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN5@stb_decomp:
; Line 10435
	mov	rcx, QWORD PTR i$[rsp]
	call	stb_decompress_length
	mov	DWORD PTR olen$[rsp], eax
; Line 10436
	mov	rax, QWORD PTR i$[rsp]
	mov	QWORD PTR ?stb__barrier2@@3PEAEEA, rax
; Line 10437
	mov	eax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR i$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__barrier3@@3PEAEEA, rax
; Line 10438
	mov	eax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__barrier@@3PEAEEA, rax
; Line 10439
	mov	rax, QWORD PTR output$[rsp]
	mov	QWORD PTR ?stb__barrier4@@3PEAEEA, rax
; Line 10440
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 16
	mov	QWORD PTR i$[rsp], rax
; Line 10442
	mov	rax, QWORD PTR output$[rsp]
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
$LN2@stb_decomp:
; Line 10443
	xor	eax, eax
	cmp	eax, 1
	je	$LN3@stb_decomp
; Line 10444
	mov	rax, QWORD PTR i$[rsp]
	mov	QWORD PTR old_i$1[rsp], rax
; Line 10445
	mov	rcx, QWORD PTR i$[rsp]
	call	?stb_decompress_token@@YAPEAEPEAE@Z	; stb_decompress_token
	mov	QWORD PTR i$[rsp], rax
; Line 10446
	mov	rax, QWORD PTR old_i$1[rsp]
	cmp	QWORD PTR i$[rsp], rax
	jne	$LN6@stb_decomp
; Line 10447
	mov	rax, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 5
	jne	$LN7@stb_decomp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 250				; 000000faH
	jne	$LN7@stb_decomp
; Line 10448
	mov	eax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	je	SHORT $LN13@stb_decomp
	mov	r8d, 10448				; 000028d0H
	lea	rdx, OFFSET FLAT:$SG90870
	lea	rcx, OFFSET FLAT:$SG90871
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@stb_decomp:
; Line 10449
	mov	eax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	je	SHORT $LN9@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN9@stb_decomp:
; Line 10450
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	ecx, 1
	call	stb_adler32
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR i$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 24
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR i$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 16
	mov	r8d, 1
	imul	r8, r8, 4
	mov	r9, QWORD PTR i$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	shl	r8d, 8
	mov	r9d, 1
	imul	r9, r9, 5
	mov	r10, QWORD PTR i$[rsp]
	movzx	r9d, BYTE PTR [r10+r9]
	add	r8d, r9d
	add	edx, r8d
	add	ecx, edx
	cmp	eax, ecx
	je	SHORT $LN10@stb_decomp
; Line 10451
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN10@stb_decomp:
; Line 10452
	mov	eax, DWORD PTR olen$[rsp]
	jmp	SHORT $LN1@stb_decomp
; Line 10453
	jmp	SHORT $LN8@stb_decomp
$LN7@stb_decomp:
; Line 10454
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN14@stb_decomp
	mov	r8d, 10454				; 000028d6H
	lea	rdx, OFFSET FLAT:$SG90874
	lea	rcx, OFFSET FLAT:$SG90875
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@stb_decomp:
; Line 10455
	xor	eax, eax
	jmp	SHORT $LN1@stb_decomp
$LN8@stb_decomp:
$LN6@stb_decomp:
; Line 10458
	mov	eax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jbe	SHORT $LN15@stb_decomp
	mov	r8d, 10458				; 000028daH
	lea	rdx, OFFSET FLAT:$SG90876
	lea	rcx, OFFSET FLAT:$SG90877
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb_decomp:
; Line 10459
	mov	eax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jbe	SHORT $LN11@stb_decomp
; Line 10460
	xor	eax, eax
	jmp	SHORT $LN1@stb_decomp
$LN11@stb_decomp:
; Line 10461
	jmp	$LN2@stb_decomp
$LN3@stb_decomp:
$LN1@stb_decomp:
; Line 10462
	add	rsp, 56					; 00000038H
	ret	0
stb_decompress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input$ = 8
stb_decompress_length PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10377
	mov	QWORD PTR [rsp+8], rcx
; Line 10378
	mov	eax, 1
	imul	rax, rax, 8
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
; Line 10379
	ret	0
stb_decompress_length ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
node$ = 32
j$1 = 36
i$2 = 40
prevnode$ = 44
match_result$ = 48
newstates$3 = 56
states$4 = 64
str$ = 72
n$5 = 80
tv165 = 88
tv285 = 90
match_length$ = 92
list$6 = 96
tv73 = 104
tv174 = 108
tv187 = 112
tv249 = 116
tv254 = 120
tv276 = 124
tv290 = 128
tv305 = 132
tv445 = 136
trans$ = 144
tv596 = 152
tv272 = 156
y$7 = 160
z$8 = 164
z$9 = 168
flags$10 = 176
tv490 = 184
m$ = 208
str_c$ = 216
len$ = 224
?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z PROC	; stb__matcher_dfa
; File W:\cpp\void\vendor\stb\stb.h
; Line 9877
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 9878
	mov	rax, QWORD PTR str_c$[rsp]
	mov	QWORD PTR str$[rsp], rax
; Line 9881
	mov	DWORD PTR match_length$[rsp], 0
; Line 9882
	xor	eax, eax
	mov	WORD PTR match_result$[rsp], ax
; Line 9884
	mov	rax, QWORD PTR m$[rsp]
	movsx	eax, WORD PTR [rax+2]
	cmp	eax, -1
	jne	$LN20@stb__match
; Line 9887
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN55@stb__match
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN56@stb__match
$LN55@stb__match:
	mov	DWORD PTR tv73[rsp], 0
$LN56@stb__match:
	mov	eax, DWORD PTR tv73[rsp]
	add	eax, 31
	sar	eax, 5
	mov	rcx, QWORD PTR m$[rsp]
	mov	DWORD PTR [rcx+64], eax
; Line 9888
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__optimize@@YAXPEAUstb_matcher@@@Z	; stb__optimize
; Line 9890
	mov	rax, QWORD PTR m$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r8d, eax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR list$6[rsp], rax
; Line 9891
	mov	rdx, QWORD PTR list$6[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z ; stb__eps_closure
	mov	QWORD PTR list$6[rsp], rax
; Line 9892
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN21@stb__match
; Line 9893
	mov	rdx, QWORD PTR list$6[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z ; stb__get_dfa_node
	mov	rcx, QWORD PTR m$[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 9894
	mov	rdx, QWORD PTR list$6[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z	; stb__clear
; Line 9899
	mov	rax, QWORD PTR m$[rsp]
	movsx	eax, WORD PTR [rax+2]
	cmp	eax, -4
	jg	SHORT $LN23@stb__match
; Line 9900
	mov	rax, QWORD PTR m$[rsp]
	movsx	eax, WORD PTR [rax+2]
	add	eax, 4
	neg	eax
	mov	rcx, QWORD PTR m$[rsp]
	mov	WORD PTR [rcx+2], ax
$LN23@stb__match:
; Line 9901
	jmp	SHORT $LN22@stb__match
$LN21@stb__match:
; Line 9902
	mov	rdx, QWORD PTR list$6[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z ; stb__clear_goalcheck
	test	eax, eax
	je	SHORT $LN24@stb__match
; Line 9903
	mov	eax, -2
	mov	rcx, QWORD PTR m$[rsp]
	mov	WORD PTR [rcx+2], ax
	jmp	SHORT $LN25@stb__match
$LN24@stb__match:
; Line 9905
	mov	rdx, QWORD PTR list$6[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z ; stb__get_dfa_node
	mov	rcx, QWORD PTR m$[rsp]
	mov	WORD PTR [rcx+2], ax
$LN25@stb__match:
$LN22@stb__match:
; Line 9907
	lea	rcx, QWORD PTR list$6[rsp]
	call	stb_arr_free_
$LN20@stb__match:
; Line 9910
	mov	eax, -1
	mov	WORD PTR prevnode$[rsp], ax
; Line 9911
	mov	rax, QWORD PTR m$[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR node$[rsp], ax
; Line 9912
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR trans$[rsp], rax
; Line 9914
	mov	rax, QWORD PTR m$[rsp]
	movsx	eax, WORD PTR [rax+2]
	cmp	eax, -2
	jne	SHORT $LN26@stb__match
; Line 9915
	mov	eax, 1
	jmp	$LN1@stb__match
$LN26@stb__match:
$LN2@stb__match:
; Line 9918
	movsx	eax, WORD PTR node$[rsp]
	test	eax, eax
	jge	SHORT $LN57@stb__match
	mov	r8d, 9918				; 000026beH
	lea	rdx, OFFSET FLAT:$SG90707
	lea	rcx, OFFSET FLAT:$SG90708
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN57@stb__match:
$LN7@stb__match:
; Line 9923
	movzx	eax, WORD PTR node$[rsp]
	mov	WORD PTR prevnode$[rsp], ax
; Line 9924
	movsx	rax, WORD PTR node$[rsp]
	imul	rax, rax, 512				; 00000200H
	mov	rcx, QWORD PTR trans$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	WORD PTR tv165[rsp], ax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	movzx	eax, WORD PTR tv165[rsp]
	mov	WORD PTR node$[rsp], ax
; Line 9925
	movsx	eax, WORD PTR node$[rsp]
	test	eax, eax
	jge	SHORT $LN7@stb__match
; Line 9927
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN58@stb__match
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv174[rsp], eax
	jmp	SHORT $LN59@stb__match
$LN58@stb__match:
	mov	DWORD PTR tv174[rsp], 0
$LN59@stb__match:
	movsx	eax, WORD PTR node$[rsp]
	mov	ecx, -4
	sub	ecx, DWORD PTR tv174[rsp]
	cmp	eax, ecx
	jge	SHORT $LN60@stb__match
	mov	r8d, 9927				; 000026c7H
	lea	rdx, OFFSET FLAT:$SG90709
	lea	rcx, OFFSET FLAT:$SG90710
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@stb__match:
; Line 9928
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN61@stb__match
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv187[rsp], eax
	jmp	SHORT $LN62@stb__match
$LN61@stb__match:
	mov	DWORD PTR tv187[rsp], 0
$LN62@stb__match:
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, DWORD PTR tv187[rsp]
	jl	SHORT $LN63@stb__match
	mov	r8d, 9928				; 000026c8H
	lea	rdx, OFFSET FLAT:$SG90711
	lea	rcx, OFFSET FLAT:$SG90712
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN63@stb__match:
; Line 9932
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, -4
	jg	SHORT $LN27@stb__match
; Line 9933
	mov	rax, QWORD PTR str_c$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR match_length$[rsp], eax
; Line 9934
	movsx	eax, WORD PTR node$[rsp]
	add	eax, 4
	neg	eax
	mov	WORD PTR node$[rsp], ax
; Line 9935
	movzx	eax, WORD PTR node$[rsp]
	mov	WORD PTR match_result$[rsp], ax
; Line 9936
	jmp	$LN2@stb__match
$LN27@stb__match:
; Line 9944
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, -1
	jne	$LN28@stb__match
; Line 9949
	mov	QWORD PTR states$4[rsp], 0
; Line 9950
	mov	QWORD PTR newstates$3[rsp], 0
; Line 9952
	movsx	eax, WORD PTR prevnode$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	imul	eax, DWORD PTR [rcx+64]
	cdqe
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR flags$10[rsp], rax
; Line 9953
	movsx	eax, WORD PTR prevnode$[rsp]
	cmp	eax, -1
	jne	SHORT $LN64@stb__match
	mov	r8d, 9953				; 000026e1H
	lea	rdx, OFFSET FLAT:$SG90715
	lea	rcx, OFFSET FLAT:$SG90716
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN64@stb__match:
; Line 9954
	cmp	QWORD PTR states$4[rsp], 0
	je	SHORT $LN65@stb__match
	mov	rax, QWORD PTR states$4[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN65@stb__match
	mov	r8d, 9954				; 000026e2H
	lea	rdx, OFFSET FLAT:$SG90717
	lea	rcx, OFFSET FLAT:$SG90718
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN65@stb__match:
	mov	r8d, 4
	mov	edx, 2
	lea	rcx, QWORD PTR states$4[rsp]
	call	stb__arr_setsize_
; Line 9955
	cmp	QWORD PTR newstates$3[rsp], 0
	je	SHORT $LN66@stb__match
	mov	rax, QWORD PTR newstates$3[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN66@stb__match
	mov	r8d, 9955				; 000026e3H
	lea	rdx, OFFSET FLAT:$SG90719
	lea	rcx, OFFSET FLAT:$SG90720
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN66@stb__match:
	mov	r8d, 4
	mov	edx, 2
	lea	rcx, QWORD PTR newstates$3[rsp]
	call	stb__arr_setsize_
; Line 9956
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN10@stb__match
$LN8@stb__match:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN10@stb__match:
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN9@stb__match
; Line 9957
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN13@stb__match
$LN11@stb__match:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN13@stb__match:
	cmp	DWORD PTR i$2[rsp], 32			; 00000020H
	jge	$LN12@stb__match
; Line 9958
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv596[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv596[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR flags$10[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	$LN29@stb__match
; Line 9959
	imul	eax, DWORD PTR j$1[rsp], 32		; 00000020H
	add	eax, DWORD PTR i$2[rsp]
	mov	WORD PTR tv285[rsp], ax
	cmp	QWORD PTR states$4[rsp], 0
	je	SHORT $LN67@stb__match
	mov	rax, QWORD PTR states$4[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv249[rsp], eax
	jmp	SHORT $LN68@stb__match
$LN67@stb__match:
	mov	DWORD PTR tv249[rsp], 0
$LN68@stb__match:
	cmp	QWORD PTR states$4[rsp], 0
	je	SHORT $LN69@stb__match
	mov	rax, QWORD PTR states$4[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv254[rsp], eax
	jmp	SHORT $LN70@stb__match
$LN69@stb__match:
	mov	DWORD PTR tv254[rsp], 0
$LN70@stb__match:
	mov	eax, DWORD PTR tv249[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv254[rsp]
	jle	SHORT $LN72@stb__match
	mov	r8d, 1
	mov	edx, 2
	lea	rcx, QWORD PTR states$4[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv272[rsp], 0
	jmp	SHORT $LN73@stb__match
$LN72@stb__match:
	cmp	QWORD PTR states$4[rsp], 0
	je	SHORT $LN71@stb__match
	mov	rax, QWORD PTR states$4[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN71@stb__match
	mov	r8d, 9959				; 000026e7H
	lea	rdx, OFFSET FLAT:$SG90722
	lea	rcx, OFFSET FLAT:$SG90723
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN71@stb__match:
	mov	rax, QWORD PTR states$4[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR states$4[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv272[rsp], 0
$LN73@stb__match:
	cmp	QWORD PTR states$4[rsp], 0
	je	SHORT $LN74@stb__match
	mov	rax, QWORD PTR states$4[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv276[rsp], eax
	jmp	SHORT $LN75@stb__match
$LN74@stb__match:
	mov	DWORD PTR tv276[rsp], 0
$LN75@stb__match:
	movsxd	rax, DWORD PTR tv276[rsp]
	mov	rcx, QWORD PTR states$4[rsp]
	movzx	edx, WORD PTR tv285[rsp]
	mov	WORD PTR [rcx+rax*2-2], dx
$LN29@stb__match:
; Line 9960
	jmp	$LN11@stb__match
$LN12@stb__match:
; Line 9961
	mov	rax, QWORD PTR flags$10[rsp]
	add	rax, 4
	mov	QWORD PTR flags$10[rsp], rax
; Line 9962
	jmp	$LN8@stb__match
$LN9@stb__match:
; Line 9966
	cmp	QWORD PTR states$4[rsp], 0
	je	SHORT $LN76@stb__match
	mov	rax, QWORD PTR states$4[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv290[rsp], eax
	jmp	SHORT $LN77@stb__match
$LN76@stb__match:
	mov	DWORD PTR tv290[rsp], 0
$LN77@stb__match:
	mov	eax, DWORD PTR tv290[rsp]
	mov	DWORD PTR y$7[rsp], eax
; Line 9967
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN16@stb__match
$LN14@stb__match:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN16@stb__match:
	mov	eax, DWORD PTR y$7[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN15@stb__match
; Line 9968
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR states$4[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR n$5[rsp], rax
; Line 9969
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN78@stb__match
	mov	rax, QWORD PTR n$5[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv305[rsp], eax
	jmp	SHORT $LN79@stb__match
$LN78@stb__match:
	mov	DWORD PTR tv305[rsp], 0
$LN79@stb__match:
	mov	eax, DWORD PTR tv305[rsp]
	mov	DWORD PTR z$8[rsp], eax
; Line 9970
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN19@stb__match
$LN17@stb__match:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN19@stb__match:
	mov	eax, DWORD PTR z$8[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN18@stb__match
; Line 9971
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	test	eax, eax
	jl	$LN30@stb__match
; Line 9972
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, -1
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN33@stb__match
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN32@stb__match
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	cmp	eax, 10
	jne	SHORT $LN32@stb__match
$LN33@stb__match:
; Line 9973
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR newstates$3[rsp], rax
$LN32@stb__match:
	jmp	$LN31@stb__match
$LN30@stb__match:
; Line 9974
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	cmp	eax, -1
	jne	SHORT $LN34@stb__match
; Line 9975
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	je	SHORT $LN36@stb__match
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN36@stb__match
; Line 9976
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR newstates$3[rsp], rax
$LN36@stb__match:
	jmp	$LN35@stb__match
$LN34@stb__match:
; Line 9977
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	cmp	eax, -1
	jge	$LN37@stb__match
; Line 9978
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	neg	eax
	sub	eax, 2
	mov	DWORD PTR z$9[rsp], eax
; Line 9979
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR tv490[rsp], rcx
	mov	edx, DWORD PTR z$9[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv490[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN38@stb__match
; Line 9980
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR newstates$3[rsp], rax
$LN38@stb__match:
$LN37@stb__match:
$LN35@stb__match:
$LN31@stb__match:
; Line 9982
	jmp	$LN17@stb__match
$LN18@stb__match:
; Line 9983
	jmp	$LN14@stb__match
$LN15@stb__match:
; Line 9985
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN40@stb__match
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN39@stb__match
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN39@stb__match
$LN40@stb__match:
; Line 9986
	mov	rax, QWORD PTR m$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r8d, eax
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR newstates$3[rsp], rax
$LN39@stb__match:
; Line 9988
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z ; stb__eps_closure
	mov	QWORD PTR newstates$3[rsp], rax
; Line 9990
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z ; stb__clear_goalcheck
	test	eax, eax
	je	SHORT $LN41@stb__match
; Line 9991
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN43@stb__match
; Line 9992
	mov	rax, QWORD PTR str_c$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR match_length$[rsp], eax
; Line 9993
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z ; stb__get_dfa_node
	mov	WORD PTR node$[rsp], ax
; Line 9994
	movzx	eax, WORD PTR node$[rsp]
	mov	WORD PTR match_result$[rsp], ax
; Line 9995
	movsx	eax, WORD PTR node$[rsp]
	neg	eax
	sub	eax, 4
	mov	WORD PTR node$[rsp], ax
; Line 9996
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR trans$[rsp], rax
; Line 9997
	jmp	SHORT $LN44@stb__match
$LN43@stb__match:
; Line 9998
	mov	eax, -2
	mov	WORD PTR node$[rsp], ax
$LN44@stb__match:
	jmp	SHORT $LN42@stb__match
$LN41@stb__match:
; Line 9999
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN47@stb__match
	cmp	QWORD PTR newstates$3[rsp], 0
	je	SHORT $LN80@stb__match
	mov	rax, QWORD PTR newstates$3[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv445[rsp], eax
	jmp	SHORT $LN81@stb__match
$LN80@stb__match:
	mov	DWORD PTR tv445[rsp], 0
$LN81@stb__match:
	cmp	DWORD PTR tv445[rsp], 0
	jne	SHORT $LN45@stb__match
$LN47@stb__match:
; Line 10000
	mov	eax, -3
	mov	WORD PTR node$[rsp], ax
; Line 10001
	jmp	SHORT $LN46@stb__match
$LN45@stb__match:
; Line 10002
	mov	rdx, QWORD PTR newstates$3[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z ; stb__get_dfa_node
	mov	WORD PTR node$[rsp], ax
; Line 10003
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR trans$[rsp], rax
$LN46@stb__match:
$LN42@stb__match:
; Line 10005
	movsx	rax, WORD PTR prevnode$[rsp]
	imul	rax, rax, 512				; 00000200H
	mov	rcx, QWORD PTR trans$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, -1
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movzx	edx, WORD PTR node$[rsp]
	mov	WORD PTR [rax+rcx*2], dx
; Line 10006
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, -4
	jg	SHORT $LN48@stb__match
; Line 10007
	movsx	eax, WORD PTR node$[rsp]
	add	eax, 4
	neg	eax
	mov	WORD PTR node$[rsp], ax
$LN48@stb__match:
; Line 10008
	lea	rcx, QWORD PTR newstates$3[rsp]
	call	stb_arr_free_
; Line 10009
	lea	rcx, QWORD PTR states$4[rsp]
	call	stb_arr_free_
$LN28@stb__match:
; Line 10012
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, -2
	jne	SHORT $LN49@stb__match
; Line 10013
	mov	eax, 1
	jmp	$LN1@stb__match
$LN49@stb__match:
; Line 10015
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, -3
	jne	SHORT $LN50@stb__match
; Line 10016
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN51@stb__match
; Line 10017
	movsx	eax, WORD PTR match_result$[rsp]
	test	eax, eax
	je	SHORT $LN52@stb__match
; Line 10018
	cmp	QWORD PTR len$[rsp], 0
	je	SHORT $LN53@stb__match
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR match_length$[rsp]
	mov	DWORD PTR [rax], ecx
$LN53@stb__match:
; Line 10019
	movsx	rax, WORD PTR match_result$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	movsx	eax, WORD PTR [rcx+rax*2]
	jmp	SHORT $LN1@stb__match
$LN52@stb__match:
$LN51@stb__match:
; Line 10022
	xor	eax, eax
	jmp	SHORT $LN1@stb__match
$LN50@stb__match:
; Line 10025
	movsx	eax, WORD PTR node$[rsp]
	cmp	eax, -1
	jne	SHORT $LN82@stb__match
	mov	r8d, 10025				; 00002729H
	lea	rdx, OFFSET FLAT:$SG90748
	lea	rcx, OFFSET FLAT:$SG90749
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN82@stb__match:
; Line 10026
	jmp	$LN2@stb__match
$LN1@stb__match:
; Line 10027
	add	rsp, 200				; 000000c8H
	ret	0
?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z ENDP	; stb__matcher_dfa
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
node$ = 36
j$ = 40
n$ = 44
tv346 = 48
x$1 = 52
result$2 = 56
state$ = 64
tv79 = 72
tv134 = 76
tv156 = 80
tv167 = 84
tv175 = 88
tv207 = 92
tv226 = 96
tv233 = 100
tv276 = 104
tv303 = 108
tv310 = 112
tv340 = 116
tv401 = 120
tv200 = 124
tv256 = 128
tv263 = 132
tv333 = 136
newstate$ = 144
data$ = 152
__$ArrayPad$ = 184
m$ = 208
list$ = 216
?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z PROC	; stb__get_dfa_node
; File W:\cpp\void\vendor\stb\stb.h
; Line 9825
$LN52:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9830
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	shl	eax, 2
	mov	r8d, eax
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR data$[rsp]
	call	stb__temp
	mov	QWORD PTR state$[rsp], rax
; Line 9831
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR state$[rsp]
	call	memset
; Line 9833
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN16@stb__get_d
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN17@stb__get_d
$LN16@stb__get_d:
	mov	DWORD PTR tv79[rsp], 0
$LN17@stb__get_d:
	mov	eax, DWORD PTR tv79[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 9834
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__get_d
$LN2@stb__get_d:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__get_d:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__get_d
; Line 9835
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR x$1[rsp], eax
; Line 9836
	mov	eax, DWORD PTR x$1[rsp]
	and	eax, 31
	mov	ecx, 1
	mov	DWORD PTR tv401[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv401[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR x$1[rsp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR state$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$1[rsp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR state$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 9837
	jmp	SHORT $LN2@stb__get_d
$LN3@stb__get_d:
; Line 9840
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN18@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv134[rsp], eax
	jmp	SHORT $LN19@stb__get_d
$LN18@stb__get_d:
	mov	DWORD PTR tv134[rsp], 0
$LN19@stb__get_d:
	mov	eax, DWORD PTR tv134[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 9841
	mov	DWORD PTR j$[rsp], 0
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 9842
	jmp	SHORT $LN7@stb__get_d
$LN5@stb__get_d:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
$LN7@stb__get_d:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stb__get_d
; Line 9844
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	shl	eax, 2
	cdqe
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR m$[rsp]
	mov	rdx, QWORD PTR [rdx+48]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR state$[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN11@stb__get_d
; Line 9845
	movzx	eax, WORD PTR i$[rsp]
	mov	WORD PTR node$[rsp], ax
; Line 9846
	jmp	$LN12@stb__get_d
	jmp	$done$53
$LN11@stb__get_d:
; Line 9848
	jmp	SHORT $LN5@stb__get_d
$LN6@stb__get_d:
; Line 9850
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN20@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv156[rsp], eax
	jmp	SHORT $LN21@stb__get_d
$LN20@stb__get_d:
	mov	DWORD PTR tv156[rsp], 0
$LN21@stb__get_d:
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR tv156[rsp], eax
	je	SHORT $LN22@stb__get_d
	mov	r8d, 9850				; 0000267aH
	lea	rdx, OFFSET FLAT:$SG90609
	lea	rcx, OFFSET FLAT:$SG90610
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN22@stb__get_d:
; Line 9851
	movzx	eax, WORD PTR i$[rsp]
	mov	WORD PTR node$[rsp], ax
; Line 9853
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN23@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv167[rsp], eax
	jmp	SHORT $LN24@stb__get_d
$LN23@stb__get_d:
	mov	DWORD PTR tv167[rsp], 0
$LN24@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN25@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv175[rsp], eax
	jmp	SHORT $LN26@stb__get_d
$LN25@stb__get_d:
	mov	DWORD PTR tv175[rsp], 0
$LN26@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	mov	ecx, DWORD PTR tv167[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR tv175[rsp]
	jle	SHORT $LN28@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, QWORD PTR m$[rsp]
	mov	r8d, DWORD PTR [rcx+64]
	mov	edx, 4
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv200[rsp], 0
	jmp	SHORT $LN29@stb__get_d
$LN28@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN27@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN27@stb__get_d
	mov	r8d, 9853				; 0000267dH
	lea	rdx, OFFSET FLAT:$SG90611
	lea	rcx, OFFSET FLAT:$SG90612
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	rcx, QWORD PTR m$[rsp]
	add	eax, DWORD PTR [rcx+64]
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv200[rsp], 0
$LN29@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN30@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv207[rsp], eax
	jmp	SHORT $LN31@stb__get_d
$LN30@stb__get_d:
	mov	DWORD PTR tv207[rsp], 0
$LN31@stb__get_d:
	movsxd	rax, DWORD PTR tv207[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR m$[rsp]
	movsxd	rcx, DWORD PTR [rcx+64]
	shl	rcx, 2
	sub	rax, rcx
	mov	QWORD PTR newstate$[rsp], rax
; Line 9854
	mov	rax, QWORD PTR m$[rsp]
	mov	eax, DWORD PTR [rax+64]
	shl	eax, 2
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR state$[rsp]
	mov	rcx, QWORD PTR newstate$[rsp]
	call	memcpy
; Line 9857
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN32@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv226[rsp], eax
	jmp	SHORT $LN33@stb__get_d
$LN32@stb__get_d:
	mov	DWORD PTR tv226[rsp], 0
$LN33@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN34@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv233[rsp], eax
	jmp	SHORT $LN35@stb__get_d
$LN34@stb__get_d:
	mov	DWORD PTR tv233[rsp], 0
$LN35@stb__get_d:
	mov	eax, DWORD PTR tv226[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv233[rsp]
	jle	SHORT $LN37@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	add	rax, 40					; 00000028H
	mov	r8d, 1
	mov	edx, 512				; 00000200H
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN38@stb__get_d
$LN37@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN36@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN36@stb__get_d
	mov	r8d, 9857				; 00002681H
	lea	rdx, OFFSET FLAT:$SG90613
	lea	rcx, OFFSET FLAT:$SG90614
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN36@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv256[rsp], 0
$LN38@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN39@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv263[rsp], eax
	jmp	SHORT $LN40@stb__get_d
$LN39@stb__get_d:
	mov	DWORD PTR tv263[rsp], 0
$LN40@stb__get_d:
; Line 9858
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 512				; 00000200H
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 512				; 00000200H
	mov	edx, -1
	mov	rcx, rax
	call	memset
; Line 9860
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	$LN13@stb__get_d
; Line 9861
	mov	DWORD PTR result$2[rsp], -1
; Line 9862
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN41@stb__get_d
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv276[rsp], eax
	jmp	SHORT $LN42@stb__get_d
$LN41@stb__get_d:
	mov	DWORD PTR tv276[rsp], 0
$LN42@stb__get_d:
	mov	eax, DWORD PTR tv276[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 9863
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stb__get_d
$LN8@stb__get_d:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stb__get_d:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stb__get_d
; Line 9864
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsx	eax, WORD PTR [rcx+rax]
	cmp	eax, DWORD PTR result$2[rsp]
	jle	SHORT $LN14@stb__get_d
; Line 9865
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR result$2[rsp], eax
$LN14@stb__get_d:
; Line 9866
	jmp	SHORT $LN8@stb__get_d
$LN9@stb__get_d:
; Line 9868
	movzx	eax, WORD PTR result$2[rsp]
	mov	WORD PTR tv346[rsp], ax
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN43@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv303[rsp], eax
	jmp	SHORT $LN44@stb__get_d
$LN43@stb__get_d:
	mov	DWORD PTR tv303[rsp], 0
$LN44@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN45@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv310[rsp], eax
	jmp	SHORT $LN46@stb__get_d
$LN45@stb__get_d:
	mov	DWORD PTR tv310[rsp], 0
$LN46@stb__get_d:
	mov	eax, DWORD PTR tv303[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv310[rsp]
	jle	SHORT $LN48@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	add	rax, 56					; 00000038H
	mov	r8d, 1
	mov	edx, 2
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv333[rsp], 0
	jmp	SHORT $LN49@stb__get_d
$LN48@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN47@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+56]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN47@stb__get_d
	mov	r8d, 9868				; 0000268cH
	lea	rdx, OFFSET FLAT:$SG90617
	lea	rcx, OFFSET FLAT:$SG90618
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN47@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv333[rsp], 0
$LN49@stb__get_d:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN50@stb__get_d
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv340[rsp], eax
	jmp	SHORT $LN51@stb__get_d
$LN50@stb__get_d:
	mov	DWORD PTR tv340[rsp], 0
$LN51@stb__get_d:
	movsxd	rax, DWORD PTR tv340[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	movzx	edx, WORD PTR tv346[rsp]
	mov	WORD PTR [rcx+rax*2-2], dx
$LN13@stb__get_d:
$LN12@stb__get_d:
$done$53:
; Line 9872
	mov	rdx, QWORD PTR state$[rsp]
	lea	rcx, QWORD PTR data$[rsp]
	call	stb_tempfree
; Line 9873
	movzx	eax, WORD PTR node$[rsp]
; Line 9874
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
?stb__get_dfa_node@@YAFPEAUstb_matcher@@PEAG@Z ENDP	; stb__get_dfa_node
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
j$1 = 36
tv67 = 40
tv82 = 44
tv128 = 48
n$ = 52
k$2 = 56
e$3 = 64
m$ = 96
list$ = 104
?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z PROC	; stb__eps_closure
; File W:\cpp\void\vendor\stb\stb.h
; Line 9734
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 9735
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN10@stb__eps_c
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN11@stb__eps_c
$LN10@stb__eps_c:
	mov	DWORD PTR tv67[rsp], 0
$LN11@stb__eps_c:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 9737
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__eps_c
$LN2@stb__eps_c:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__eps_c:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__eps_c
; Line 9738
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR e$3[rsp], rax
; Line 9739
	cmp	QWORD PTR e$3[rsp], 0
	je	$LN8@stb__eps_c
; Line 9740
	cmp	QWORD PTR e$3[rsp], 0
	je	SHORT $LN12@stb__eps_c
	mov	rax, QWORD PTR e$3[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN13@stb__eps_c
$LN12@stb__eps_c:
	mov	DWORD PTR tv82[rsp], 0
$LN13@stb__eps_c:
	mov	eax, DWORD PTR tv82[rsp]
	mov	DWORD PTR k$2[rsp], eax
; Line 9741
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN7@stb__eps_c
$LN5@stb__eps_c:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN7@stb__eps_c:
	mov	eax, DWORD PTR k$2[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	SHORT $LN6@stb__eps_c
; Line 9742
	movsxd	rax, DWORD PTR j$1[rsp]
	mov	rcx, QWORD PTR e$3[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	r8d, eax
	mov	rdx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN5@stb__eps_c
$LN6@stb__eps_c:
; Line 9743
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN14@stb__eps_c
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv128[rsp], eax
	jmp	SHORT $LN15@stb__eps_c
$LN14@stb__eps_c:
	mov	DWORD PTR tv128[rsp], 0
$LN15@stb__eps_c:
	mov	eax, DWORD PTR tv128[rsp]
	mov	DWORD PTR n$[rsp], eax
$LN8@stb__eps_c:
; Line 9745
	jmp	$LN2@stb__eps_c
$LN3@stb__eps_c:
; Line 9747
	mov	rax, QWORD PTR list$[rsp]
; Line 9748
	add	rsp, 88					; 00000058H
	ret	0
?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z ENDP	; stb__eps_closure
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv139 = 32
tv74 = 36
tv79 = 40
tv133 = 44
tv129 = 48
m$ = 80
list$ = 88
n$ = 96
?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z PROC ; stb__add_if_inactive
; File W:\cpp\void\vendor\stb\stb.h
; Line 9725
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9726
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax+2]
	test	eax, eax
	jne	$LN2@stb__add_i
; Line 9727
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR tv139[rsp], ax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN4@stb__add_i
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv74[rsp], eax
	jmp	SHORT $LN5@stb__add_i
$LN4@stb__add_i:
	mov	DWORD PTR tv74[rsp], 0
$LN5@stb__add_i:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN6@stb__add_i
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN7@stb__add_i
$LN6@stb__add_i:
	mov	DWORD PTR tv79[rsp], 0
$LN7@stb__add_i:
	mov	eax, DWORD PTR tv74[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv79[rsp]
	jle	SHORT $LN9@stb__add_i
	mov	r8d, 1
	mov	edx, 2
	lea	rcx, QWORD PTR list$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN10@stb__add_i
$LN9@stb__add_i:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN8@stb__add_i
	mov	rax, QWORD PTR list$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN8@stb__add_i
	mov	r8d, 9727				; 000025ffH
	lea	rdx, OFFSET FLAT:$SG90458
	lea	rcx, OFFSET FLAT:$SG90459
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stb__add_i:
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR list$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv129[rsp], 0
$LN10@stb__add_i:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN11@stb__add_i
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN12@stb__add_i
$LN11@stb__add_i:
	mov	DWORD PTR tv133[rsp], 0
$LN12@stb__add_i:
	movsxd	rax, DWORD PTR tv133[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	edx, WORD PTR tv139[rsp]
	mov	WORD PTR [rcx+rax*2-2], dx
; Line 9728
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax+2], 1
$LN2@stb__add_i:
; Line 9730
	mov	rax, QWORD PTR list$[rsp]
; Line 9731
	add	rsp, 72					; 00000048H
	ret	0
?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ENDP ; stb__add_if_inactive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t$ = 4
tv68 = 8
m$ = 32
list$ = 40
?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z PROC	; stb__clear_goalcheck
; File W:\cpp\void\vendor\stb\stb.h
; Line 9715
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 9716
	mov	DWORD PTR t$[rsp], 0
; Line 9717
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__clear
$LN2@stb__clear:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__clear:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN6@stb__clear
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN7@stb__clear
$LN6@stb__clear:
	mov	DWORD PTR tv68[rsp], 0
$LN7@stb__clear:
	mov	eax, DWORD PTR tv68[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__clear
; Line 9718
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t$[rsp], eax
; Line 9719
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax+2], 0
; Line 9720
	jmp	SHORT $LN2@stb__clear
$LN3@stb__clear:
; Line 9721
	mov	eax, DWORD PTR t$[rsp]
; Line 9722
	add	rsp, 24
	ret	0
?stb__clear_goalcheck@@YAHPEAUstb_matcher@@PEAG@Z ENDP	; stb__clear_goalcheck
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
tv68 = 4
m$ = 32
list$ = 40
?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z PROC		; stb__clear
; File W:\cpp\void\vendor\stb\stb.h
; Line 9708
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 9710
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__clear
$LN2@stb__clear:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__clear:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN6@stb__clear
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN7@stb__clear
$LN6@stb__clear:
	mov	DWORD PTR tv68[rsp], 0
$LN7@stb__clear:
	mov	eax, DWORD PTR tv68[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__clear
; Line 9711
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax+2], 0
	jmp	SHORT $LN2@stb__clear
$LN3@stb__clear:
; Line 9712
	add	rsp, 24
	ret	0
?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z ENDP		; stb__clear
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
matcher$ = 48
?stb__lex_reset@@YAXPEAUstb_matcher@@@Z PROC		; stb__lex_reset
; File W:\cpp\void\vendor\stb\stb.h
; Line 9635
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 9637
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 40					; 00000028H
	xor	r8d, r8d
	mov	edx, 512				; 00000200H
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 9638
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 48					; 00000030H
	xor	r8d, r8d
	mov	edx, 4
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 9639
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 56					; 00000038H
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 9640
	mov	eax, -1
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 9641
	add	rsp, 40					; 00000028H
	ret	0
?stb__lex_reset@@YAXPEAUstb_matcher@@@Z ENDP		; stb__lex_reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
matcher$ = 32
?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ PROC		; stb__alloc_matcher
; File W:\cpp\void\vendor\stb\stb.h
; Line 9615
	sub	rsp, 56					; 00000038H
; Line 9616
	mov	edx, 72					; 00000048H
	xor	ecx, ecx
	call	stb_malloc
	mov	QWORD PTR matcher$[rsp], rax
; Line 9618
	xor	eax, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	WORD PTR [rcx], ax
; Line 9619
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 24
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rcx, rax
	call	stb_arr_malloc
; Line 9620
	mov	rax, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 9621
	mov	rax, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rax+20], 0
; Line 9622
	mov	rax, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 9624
	mov	eax, -1
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 9625
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 40					; 00000028H
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rcx, rax
	call	stb_arr_malloc
; Line 9626
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 48					; 00000030H
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rcx, rax
	call	stb_arr_malloc
; Line 9627
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 56					; 00000038H
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rcx, rax
	call	stb_arr_malloc
; Line 9629
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
; Line 9631
	mov	rax, QWORD PTR matcher$[rsp]
; Line 9632
	add	rsp, 56					; 00000038H
	ret	0
?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ ENDP		; stb__alloc_matcher
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv132 = 32
tv155 = 34
j$ = 36
i$ = 40
tv70 = 44
tv82 = 48
tv139 = 52
p$1 = 56
m$ = 80
?stb__optimize@@YAXPEAUstb_matcher@@@Z PROC		; stb__optimize
; File W:\cpp\void\vendor\stb\stb.h
; Line 9595
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9599
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__optim
$LN2@stb__optim:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__optim:
	mov	rax, QWORD PTR m$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN12@stb__optim
	mov	rax, QWORD PTR m$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN13@stb__optim
$LN12@stb__optim:
	mov	DWORD PTR tv70[rsp], 0
$LN13@stb__optim:
	mov	eax, DWORD PTR tv70[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__optim
; Line 9600
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR p$1[rsp], rax
; Line 9601
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stb__optim
$LN5@stb__optim:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stb__optim:
	mov	rax, QWORD PTR p$1[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN14@stb__optim
	mov	rax, QWORD PTR p$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN15@stb__optim
$LN14@stb__optim:
	mov	DWORD PTR tv82[rsp], 0
$LN15@stb__optim:
	mov	eax, DWORD PTR tv82[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stb__optim
; Line 9602
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	edx, eax
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__opt@@YAHPEAUstb_matcher@@H@Z	; stb__opt
	mov	WORD PTR tv132[rsp], ax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	edx, WORD PTR tv132[rsp]
	mov	WORD PTR [rcx+rax*4+2], dx
	jmp	SHORT $LN5@stb__optim
$LN6@stb__optim:
; Line 9603
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stb__optim
$LN8@stb__optim:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stb__optim:
	mov	rax, QWORD PTR p$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN16@stb__optim
	mov	rax, QWORD PTR p$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv139[rsp], eax
	jmp	SHORT $LN17@stb__optim
$LN16@stb__optim:
	mov	DWORD PTR tv139[rsp], 0
$LN17@stb__optim:
	mov	eax, DWORD PTR tv139[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN9@stb__optim
; Line 9604
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	edx, eax
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__opt@@YAHPEAUstb_matcher@@H@Z	; stb__opt
	mov	WORD PTR tv155[rsp], ax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, WORD PTR tv155[rsp]
	mov	WORD PTR [rcx+rax*2], dx
	jmp	SHORT $LN8@stb__optim
$LN9@stb__optim:
; Line 9605
	jmp	$LN2@stb__optim
$LN3@stb__optim:
; Line 9606
	mov	rax, QWORD PTR m$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__opt@@YAHPEAUstb_matcher@@H@Z	; stb__opt
	mov	rcx, QWORD PTR m$[rsp]
	mov	WORD PTR [rcx], ax
; Line 9607
	add	rsp, 72					; 00000048H
	ret	0
?stb__optimize@@YAXPEAUstb_matcher@@@Z ENDP		; stb__optimize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
tv83 = 4
p$1 = 8
m$ = 32
n$ = 40
?stb__opt@@YAHPEAUstb_matcher@@H@Z PROC			; stb__opt
; File W:\cpp\void\vendor\stb\stb.h
; Line 9584
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
$LN2@stb__opt:
; Line 9586
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR p$1[rsp], rax
; Line 9587
	mov	rax, QWORD PTR p$1[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN5@stb__opt
	mov	eax, DWORD PTR n$[rsp]
	jmp	$LN1@stb__opt
$LN5@stb__opt:
; Line 9588
	mov	rax, QWORD PTR p$1[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN9@stb__opt
	mov	rax, QWORD PTR p$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN10@stb__opt
$LN9@stb__opt:
	mov	DWORD PTR tv76[rsp], 0
$LN10@stb__opt:
	cmp	DWORD PTR tv76[rsp], 0
	je	SHORT $LN6@stb__opt
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stb__opt
$LN6@stb__opt:
; Line 9589
	mov	rax, QWORD PTR p$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN11@stb__opt
	mov	rax, QWORD PTR p$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN12@stb__opt
$LN11@stb__opt:
	mov	DWORD PTR tv83[rsp], 0
$LN12@stb__opt:
	cmp	DWORD PTR tv83[rsp], 1
	je	SHORT $LN7@stb__opt
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stb__opt
$LN7@stb__opt:
; Line 9590
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR n$[rsp], eax
; Line 9591
	jmp	$LN2@stb__opt
$LN1@stb__opt:
; Line 9592
	add	rsp, 24
	ret	0
?stb__opt@@YAHPEAUstb_matcher@@H@Z ENDP			; stb__opt
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
last_end$ = 32
n$ = 36
tv74 = 40
tv77 = 44
matcher$ = 64
start$ = 72
str$ = 80
end$ = 88
?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z PROC ; stb__wild_parse
; File W:\cpp\void\vendor\stb\stb.h
; Line 9534
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9538
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	WORD PTR last_end$[rsp], ax
; Line 9539
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR start$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
$LN2@stb__wild_:
; Line 9541
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb__wild_
; Line 9542
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv74[rsp], al
	cmp	BYTE PTR tv74[rsp], 42			; 0000002aH
	je	$LN10@stb__wild_
	cmp	BYTE PTR tv74[rsp], 63			; 0000003fH
	je	$LN9@stb__wild_
; Line 9545
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9546
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_toupper
	mov	DWORD PTR tv77[rsp], eax
	mov	rcx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	call	QWORD PTR __imp_tolower
	mov	ecx, DWORD PTR tv77[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@stb__wild_
; Line 9547
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	r9d, eax
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, ecx
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9548
	jmp	SHORT $LN8@stb__wild_
$LN7@stb__wild_:
; Line 9549
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	r9d, eax
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, ecx
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9550
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_toupper
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	r9d, eax
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, ecx
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
$LN8@stb__wild_:
; Line 9552
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9553
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 9554
	jmp	$LN4@stb__wild_
$LN9@stb__wild_:
; Line 9557
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9558
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r9d, -1
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9559
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9560
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 9561
	jmp	SHORT $LN4@stb__wild_
$LN10@stb__wild_:
; Line 9564
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9565
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r9d, -1
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9566
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9567
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9568
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9569
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
$LN4@stb__wild_:
; Line 9572
	jmp	$LN2@stb__wild_
$LN3@stb__wild_:
; Line 9575
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9576
	movzx	eax, WORD PTR last_end$[rsp]
	xor	r9d, r9d
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9577
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9579
	mov	rax, QWORD PTR end$[rsp]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	WORD PTR [rax], cx
; Line 9580
	mov	rax, QWORD PTR str$[rsp]
; Line 9581
	add	rsp, 56					; 00000038H
	ret	0
?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ENDP ; stb__wild_parse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
last_end$ = 32
n$ = 36
last_start$ = 40
z$1 = 44
i$2 = 48
i$3 = 52
i$4 = 56
tv67 = 60
i$5 = 64
b$6 = 68
a$7 = 72
invert$8 = 76
tv195 = 80
tv369 = 84
f$9 = 88
tv387 = 92
k$10 = 96
flags$11 = 112
__$ArrayPad$ = 368
matcher$ = 400
start$ = 408
regex$ = 416
end$ = 424
?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z PROC ; stb__reg_parse
; File W:\cpp\void\vendor\stb\stb.h
; Line 9343
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9345
	mov	DWORD PTR last_start$[rsp], -1
; Line 9346
	movzx	eax, WORD PTR start$[rsp]
	mov	WORD PTR last_end$[rsp], ax
$LN2@stb__reg_p:
; Line 9348
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb__reg_p
; Line 9349
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv67[rsp], eax
	mov	eax, DWORD PTR tv67[rsp]
	sub	eax, 36					; 00000024H
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 88			; 00000058H
	ja	$LN37@stb__reg_p
	movsxd	rax, DWORD PTR tv67[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN57@stb__reg_p[rcx+rax]
	mov	eax, DWORD PTR $LN58@stb__reg_p[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN23@stb__reg_p:
; Line 9351
	movzx	eax, WORD PTR last_end$[rsp]
	mov	DWORD PTR last_start$[rsp], eax
; Line 9352
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	movzx	ecx, WORD PTR last_end$[rsp]
	lea	r9, QWORD PTR last_end$[rsp]
	mov	r8, rax
	mov	edx, ecx
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ; stb__reg_parse_alt
	mov	QWORD PTR regex$[rsp], rax
; Line 9353
	cmp	QWORD PTR regex$[rsp], 0
	je	SHORT $LN25@stb__reg_p
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 41					; 00000029H
	je	SHORT $LN24@stb__reg_p
$LN25@stb__reg_p:
; Line 9354
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN24@stb__reg_p:
; Line 9355
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9356
	jmp	$LN4@stb__reg_p
$LN26@stb__reg_p:
$LN27@stb__reg_p:
; Line 9360
	mov	rax, QWORD PTR end$[rsp]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	WORD PTR [rax], cx
; Line 9361
	mov	rax, QWORD PTR regex$[rsp]
	jmp	$LN1@stb__reg_p
$LN28@stb__reg_p:
; Line 9364
	cmp	DWORD PTR last_start$[rsp], 0
	jge	SHORT $LN29@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN29@stb__reg_p:
; Line 9365
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR last_start$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9366
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9367
	jmp	$LN4@stb__reg_p
$LN30@stb__reg_p:
; Line 9370
	cmp	DWORD PTR last_start$[rsp], 0
	jge	SHORT $LN31@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN31@stb__reg_p:
; Line 9371
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, eax
	mov	edx, DWORD PTR last_start$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
$LN32@stb__reg_p:
; Line 9376
	cmp	DWORD PTR last_start$[rsp], 0
	jge	SHORT $LN33@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN33@stb__reg_p:
; Line 9377
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, DWORD PTR last_start$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9379
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9380
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9381
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9382
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9383
	jmp	$LN4@stb__reg_p
$LN34@stb__reg_p:
; Line 9388
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN35@stb__reg_p:
; Line 9391
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9392
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN36@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN36@stb__reg_p:
$LN37@stb__reg_p:
; Line 9396
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9397
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	r9d, eax
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, ecx
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9398
	movzx	eax, WORD PTR last_end$[rsp]
	mov	DWORD PTR last_start$[rsp], eax
; Line 9399
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9400
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9401
	jmp	$LN4@stb__reg_p
$LN38@stb__reg_p:
; Line 9404
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9405
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r9d, 10
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9406
	movzx	eax, WORD PTR last_end$[rsp]
	mov	DWORD PTR last_start$[rsp], eax
; Line 9407
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9408
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9409
	jmp	$LN4@stb__reg_p
$LN39@stb__reg_p:
; Line 9412
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9413
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r9d, -1
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9414
	movzx	eax, WORD PTR last_end$[rsp]
	mov	DWORD PTR last_start$[rsp], eax
; Line 9415
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9416
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9417
	jmp	$LN4@stb__reg_p
$LN40@stb__reg_p:
; Line 9421
	mov	DWORD PTR invert$8[rsp], 0
; Line 9422
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9423
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN41@stb__reg_p
; Line 9424
	mov	edx, 1024				; 00000400H
	mov	rcx, QWORD PTR matcher$[rsp]
	call	stb_malloc
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 9425
	mov	r8d, 1024				; 00000400H
	xor	edx, edx
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
$LN41@stb__reg_p:
; Line 9428
	mov	r8d, 256				; 00000100H
	xor	edx, edx
	lea	rcx, QWORD PTR flags$11[rsp]
	call	memset
; Line 9431
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 94					; 0000005eH
	jne	SHORT $LN42@stb__reg_p
; Line 9432
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
	mov	DWORD PTR invert$8[rsp], 1
$LN42@stb__reg_p:
; Line 9435
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN43@stb__reg_p
; Line 9436
	mov	eax, 1
	imul	rax, rax, 93				; 0000005dH
	mov	BYTE PTR flags$11[rsp+rax], 1
; Line 9437
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
$LN43@stb__reg_p:
$LN6@stb__reg_p:
; Line 9439
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 93					; 0000005dH
	je	$LN7@stb__reg_p
; Line 9441
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN44@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN44@stb__reg_p:
; Line 9442
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv195[rsp], eax
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
	mov	eax, DWORD PTR tv195[rsp]
	mov	DWORD PTR a$7[rsp], eax
; Line 9443
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 45					; 0000002dH
	jne	$LN45@stb__reg_p
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN45@stb__reg_p
; Line 9444
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR b$6[rsp], eax
; Line 9445
	mov	rax, QWORD PTR regex$[rsp]
	add	rax, 2
	mov	QWORD PTR regex$[rsp], rax
; Line 9446
	cmp	DWORD PTR b$6[rsp], 0
	jne	SHORT $LN47@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN47@stb__reg_p:
; Line 9447
	mov	eax, DWORD PTR b$6[rsp]
	cmp	DWORD PTR a$7[rsp], eax
	jbe	SHORT $LN48@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN48@stb__reg_p:
; Line 9448
	mov	eax, DWORD PTR a$7[rsp]
	mov	DWORD PTR i$5[rsp], eax
	jmp	SHORT $LN10@stb__reg_p
$LN8@stb__reg_p:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN10@stb__reg_p:
	mov	eax, DWORD PTR b$6[rsp]
	cmp	DWORD PTR i$5[rsp], eax
	ja	SHORT $LN9@stb__reg_p
; Line 9449
	mov	eax, DWORD PTR i$5[rsp]
	mov	BYTE PTR flags$11[rsp+rax], 1
	jmp	SHORT $LN8@stb__reg_p
$LN9@stb__reg_p:
; Line 9450
	jmp	SHORT $LN46@stb__reg_p
$LN45@stb__reg_p:
; Line 9451
	mov	eax, DWORD PTR a$7[rsp]
	mov	BYTE PTR flags$11[rsp+rax], 1
$LN46@stb__reg_p:
; Line 9452
	jmp	$LN6@stb__reg_p
$LN7@stb__reg_p:
; Line 9453
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
; Line 9454
	cmp	DWORD PTR invert$8[rsp], 0
	je	SHORT $LN49@stb__reg_p
; Line 9456
	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN13@stb__reg_p
$LN11@stb__reg_p:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN13@stb__reg_p:
	cmp	DWORD PTR i$4[rsp], 256			; 00000100H
	jge	SHORT $LN12@stb__reg_p
; Line 9457
	movsxd	rax, DWORD PTR i$4[rsp]
	movzx	eax, BYTE PTR flags$11[rsp+rax]
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$4[rsp]
	mov	BYTE PTR flags$11[rsp+rcx], al
	jmp	SHORT $LN11@stb__reg_p
$LN12@stb__reg_p:
$LN49@stb__reg_p:
; Line 9461
	mov	DWORD PTR z$1[rsp], 0
	jmp	SHORT $LN16@stb__reg_p
$LN14@stb__reg_p:
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN16@stb__reg_p:
	mov	rax, QWORD PTR matcher$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR z$1[rsp], eax
	jge	$LN15@stb__reg_p
; Line 9462
	mov	DWORD PTR k$10[rsp], 0
	mov	eax, DWORD PTR z$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv369[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv369[rsp]
	shl	eax, cl
	mov	DWORD PTR k$10[rsp+4], eax
; Line 9463
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN19@stb__reg_p
$LN17@stb__reg_p:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN19@stb__reg_p:
	cmp	DWORD PTR i$2[rsp], 256			; 00000100H
	jge	SHORT $LN18@stb__reg_p
; Line 9464
	movsxd	rax, DWORD PTR i$2[rsp]
	movzx	eax, BYTE PTR flags$11[rsp+rax]
	mov	eax, DWORD PTR k$10[rsp+rax*4]
	mov	DWORD PTR f$9[rsp], eax
; Line 9465
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	edx, DWORD PTR k$10[rsp+rdx]
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	cmp	eax, DWORD PTR f$9[rsp]
	je	SHORT $LN50@stb__reg_p
; Line 9466
	jmp	SHORT $LN18@stb__reg_p
$LN50@stb__reg_p:
; Line 9467
	jmp	SHORT $LN17@stb__reg_p
$LN18@stb__reg_p:
; Line 9468
	cmp	DWORD PTR i$2[rsp], 256			; 00000100H
	jne	SHORT $LN51@stb__reg_p
	jmp	SHORT $LN15@stb__reg_p
$LN51@stb__reg_p:
; Line 9469
	jmp	$LN14@stb__reg_p
$LN15@stb__reg_p:
; Line 9471
	mov	rax, QWORD PTR matcher$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR z$1[rsp], eax
	jne	$LN52@stb__reg_p
; Line 9473
	mov	rax, QWORD PTR matcher$[rsp]
	mov	eax, DWORD PTR [rax+16]
	inc	eax
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 9474
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	DWORD PTR [rax+16], 32			; 00000020H
	jle	SHORT $LN53@stb__reg_p
; Line 9475
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN56@stb__reg_p
	mov	r8d, 9475				; 00002503H
	lea	rdx, OFFSET FLAT:$SG90299
	lea	rcx, OFFSET FLAT:$SG90300
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN56@stb__reg_p:
; Line 9476
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN53@stb__reg_p:
; Line 9478
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN22@stb__reg_p
$LN20@stb__reg_p:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN22@stb__reg_p:
	cmp	DWORD PTR i$3[rsp], 256			; 00000100H
	jge	SHORT $LN21@stb__reg_p
; Line 9479
	movsxd	rax, DWORD PTR i$3[rsp]
	movzx	eax, BYTE PTR flags$11[rsp+rax]
	test	eax, eax
	je	SHORT $LN54@stb__reg_p
; Line 9480
	mov	eax, DWORD PTR z$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv387[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv387[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$3[rsp]
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	or	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$3[rsp]
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN54@stb__reg_p:
	jmp	SHORT $LN20@stb__reg_p
$LN21@stb__reg_p:
$LN52@stb__reg_p:
; Line 9483
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR n$[rsp], eax
; Line 9484
	mov	eax, -2
	sub	eax, DWORD PTR z$1[rsp]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	r9d, eax
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, ecx
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ; stb__add_edge
; Line 9485
	movzx	eax, WORD PTR last_end$[rsp]
	mov	DWORD PTR last_start$[rsp], eax
; Line 9486
	movzx	eax, WORD PTR n$[rsp]
	mov	WORD PTR last_end$[rsp], ax
$LN4@stb__reg_p:
; Line 9490
	jmp	$LN2@stb__reg_p
$LN3@stb__reg_p:
; Line 9491
	mov	rax, QWORD PTR end$[rsp]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	WORD PTR [rax], cx
; Line 9492
	mov	rax, QWORD PTR regex$[rsp]
$LN1@stb__reg_p:
; Line 9493
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	ret	0
	npad	2
$LN58@stb__reg_p:
	DD	$LN38@stb__reg_p
	DD	$LN23@stb__reg_p
	DD	$LN27@stb__reg_p
	DD	$LN30@stb__reg_p
	DD	$LN32@stb__reg_p
	DD	$LN39@stb__reg_p
	DD	$LN28@stb__reg_p
	DD	$LN40@stb__reg_p
	DD	$LN35@stb__reg_p
	DD	$LN34@stb__reg_p
	DD	$LN26@stb__reg_p
	DD	$LN37@stb__reg_p
$LN57@stb__reg_p:
	DB	0
	DB	11
	DB	11
	DB	11
	DB	1
	DB	2
	DB	3
	DB	4
	DB	11
	DB	11
	DB	5
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	6
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	7
	DB	8
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	9
	DB	10
?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ENDP ; stb__reg_parse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
last_end$ = 32
main_end$ = 36
head$ = 40
tail$ = 44
matcher$ = 64
start$ = 72
regex$ = 80
end$ = 88
?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z PROC ; stb__reg_parse_alt
; File W:\cpp\void\vendor\stb\stb.h
; Line 9496
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9497
	movzx	eax, WORD PTR start$[rsp]
	mov	WORD PTR last_end$[rsp], ax
; Line 9502
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR head$[rsp], eax
; Line 9503
	mov	r8d, DWORD PTR head$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9505
	lea	r9, QWORD PTR last_end$[rsp]
	mov	r8, QWORD PTR regex$[rsp]
	mov	edx, DWORD PTR head$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ; stb__reg_parse
	mov	QWORD PTR regex$[rsp], rax
; Line 9506
	cmp	QWORD PTR regex$[rsp], 0
	jne	SHORT $LN4@stb__reg_p
	xor	eax, eax
	jmp	$LN1@stb__reg_p
$LN4@stb__reg_p:
; Line 9507
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@stb__reg_p
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 41					; 00000029H
	jne	SHORT $LN5@stb__reg_p
$LN6@stb__reg_p:
; Line 9508
	mov	rax, QWORD PTR end$[rsp]
	movzx	ecx, WORD PTR last_end$[rsp]
	mov	WORD PTR [rax], cx
; Line 9509
	mov	rax, QWORD PTR regex$[rsp]
	jmp	$LN1@stb__reg_p
$LN5@stb__reg_p:
; Line 9512
	movzx	eax, WORD PTR last_end$[rsp]
	mov	WORD PTR main_end$[rsp], ax
; Line 9513
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR tail$[rsp], eax
; Line 9515
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, DWORD PTR tail$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
$LN2@stb__reg_p:
; Line 9519
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb__reg_p
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 41					; 00000029H
	je	$LN3@stb__reg_p
; Line 9520
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 124				; 0000007cH
	je	SHORT $LN9@stb__reg_p
	mov	r8d, 9520				; 00002530H
	lea	rdx, OFFSET FLAT:$SG90319
	lea	rcx, OFFSET FLAT:$SG90320
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stb__reg_p:
; Line 9521
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_node@@YAHPEAUstb_matcher@@@Z	; stb__add_node
	mov	DWORD PTR head$[rsp], eax
; Line 9522
	mov	r8d, DWORD PTR head$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9523
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	lea	r9, QWORD PTR last_end$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR head$[rsp]
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__reg_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ; stb__reg_parse
	mov	QWORD PTR regex$[rsp], rax
; Line 9524
	cmp	QWORD PTR regex$[rsp], 0
	jne	SHORT $LN7@stb__reg_p
; Line 9525
	xor	eax, eax
	jmp	SHORT $LN1@stb__reg_p
$LN7@stb__reg_p:
; Line 9526
	movzx	eax, WORD PTR last_end$[rsp]
	mov	r8d, DWORD PTR tail$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ; stb__add_epsilon
; Line 9527
	jmp	$LN2@stb__reg_p
$LN3@stb__reg_p:
; Line 9529
	mov	rax, QWORD PTR end$[rsp]
	movzx	ecx, WORD PTR tail$[rsp]
	mov	WORD PTR [rax], cx
; Line 9530
	mov	rax, QWORD PTR regex$[rsp]
$LN1@stb__reg_p:
; Line 9531
	add	rsp, 56					; 00000038H
	ret	0
?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ENDP ; stb__reg_parse_alt
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv90 = 36
tv137 = 40
tv199 = 44
tv180 = 48
$T1 = 52
matcher$ = 80
from$ = 88
to$ = 96
type$ = 104
?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z PROC		; stb__add_edge
; File W:\cpp\void\vendor\stb\stb.h
; Line 9334
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9335
	movzx	eax, WORD PTR type$[rsp]
	mov	WORD PTR z$[rsp], ax
	movzx	eax, WORD PTR to$[rsp]
	mov	WORD PTR z$[rsp+2], ax
; Line 9336
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN2@stb__add_e
; Line 9337
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rcx, rax
	call	stb_arr_malloc
$LN2@stb__add_e:
; Line 9338
	mov	eax, DWORD PTR z$[rsp]
	mov	DWORD PTR $T1[rsp], eax
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN4@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv90[rsp], eax
	jmp	SHORT $LN5@stb__add_e
$LN4@stb__add_e:
	mov	DWORD PTR tv90[rsp], 0
$LN5@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN6@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv137[rsp], eax
	jmp	SHORT $LN7@stb__add_e
$LN6@stb__add_e:
	mov	DWORD PTR tv137[rsp], 0
$LN7@stb__add_e:
	mov	eax, DWORD PTR tv90[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv137[rsp]
	jle	SHORT $LN9@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r8d, 1
	mov	edx, 4
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv180[rsp], 0
	jmp	$LN10@stb__add_e
$LN9@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN8@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+8]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN8@stb__add_e
	mov	r8d, 9338				; 0000247aH
	lea	rdx, OFFSET FLAT:$SG90216
	lea	rcx, OFFSET FLAT:$SG90217
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	movsxd	rcx, DWORD PTR from$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx+8]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv180[rsp], 0
$LN10@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+8], 0
	je	SHORT $LN11@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv199[rsp], eax
	jmp	SHORT $LN12@stb__add_e
$LN11@stb__add_e:
	mov	DWORD PTR tv199[rsp], 0
$LN12@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsxd	rdx, DWORD PTR tv199[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	ecx, DWORD PTR $T1[rsp]
	mov	DWORD PTR [rax+rdx*4-4], ecx
; Line 9339
	add	rsp, 72					; 00000048H
	ret	0
?stb__add_edge@@YAXPEAUstb_matcher@@HHH@Z ENDP		; stb__add_edge
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv210 = 32
tv95 = 36
tv142 = 40
tv204 = 44
tv185 = 48
matcher$ = 80
from$ = 88
to$ = 96
?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z PROC	; stb__add_epsilon
; File W:\cpp\void\vendor\stb\stb.h
; Line 9326
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9327
	mov	eax, DWORD PTR to$[rsp]
	cmp	DWORD PTR from$[rsp], eax
	jne	SHORT $LN4@stb__add_e
	mov	r8d, 9327				; 0000246fH
	lea	rdx, OFFSET FLAT:$SG90192
	lea	rcx, OFFSET FLAT:$SG90193
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stb__add_e:
; Line 9328
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN2@stb__add_e
; Line 9329
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rcx, rax
	call	stb_arr_malloc
$LN2@stb__add_e:
; Line 9330
	movzx	eax, WORD PTR to$[rsp]
	mov	WORD PTR tv210[rsp], ax
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+16], 0
	je	SHORT $LN5@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv95[rsp], eax
	jmp	SHORT $LN6@stb__add_e
$LN5@stb__add_e:
	mov	DWORD PTR tv95[rsp], 0
$LN6@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+16], 0
	je	SHORT $LN7@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv142[rsp], eax
	jmp	SHORT $LN8@stb__add_e
$LN7@stb__add_e:
	mov	DWORD PTR tv142[rsp], 0
$LN8@stb__add_e:
	mov	eax, DWORD PTR tv95[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv142[rsp]
	jle	SHORT $LN10@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	r8d, 1
	mov	edx, 2
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv185[rsp], 0
	jmp	$LN11@stb__add_e
$LN10@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+16], 0
	je	SHORT $LN9@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+16]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN9@stb__add_e
	mov	r8d, 9330				; 00002472H
	lea	rdx, OFFSET FLAT:$SG90195
	lea	rcx, OFFSET FLAT:$SG90196
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	movsxd	rcx, DWORD PTR from$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR matcher$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, QWORD PTR [rdx+rcx+16]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv185[rsp], 0
$LN11@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+rax+16], 0
	je	SHORT $LN12@stb__add_e
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv204[rsp], eax
	jmp	SHORT $LN13@stb__add_e
$LN12@stb__add_e:
	mov	DWORD PTR tv204[rsp], 0
$LN13@stb__add_e:
	movsxd	rax, DWORD PTR from$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsxd	rdx, DWORD PTR tv204[rsp]
	mov	rax, QWORD PTR [rcx+rax+16]
	movzx	ecx, WORD PTR tv210[rsp]
	mov	WORD PTR [rax+rdx*2-2], cx
; Line 9331
	add	rsp, 72					; 00000048H
	ret	0
?stb__add_epsilon@@YAXPEAUstb_matcher@@HH@Z ENDP	; stb__add_epsilon
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
tv76 = 36
tv138 = 40
tv149 = 44
tv131 = 48
z$ = 56
$T1 = 80
matcher$ = 144
?stb__add_node@@YAHPEAUstb_matcher@@@Z PROC		; stb__add_node
; File W:\cpp\void\vendor\stb\stb.h
; Line 9315
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 9317
	mov	BYTE PTR z$[rsp+2], 0
; Line 9318
	mov	QWORD PTR z$[rsp+16], 0
; Line 9319
	xor	eax, eax
	mov	WORD PTR z$[rsp], ax
; Line 9320
	mov	QWORD PTR z$[rsp+8], 0
; Line 9321
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR z$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN3@stb__add_n
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@stb__add_n
$LN3@stb__add_n:
	mov	DWORD PTR tv69[rsp], 0
$LN4@stb__add_n:
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN5@stb__add_n
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN6@stb__add_n
$LN5@stb__add_n:
	mov	DWORD PTR tv76[rsp], 0
$LN6@stb__add_n:
	mov	eax, DWORD PTR tv69[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv76[rsp]
	jle	SHORT $LN8@stb__add_n
	mov	rax, QWORD PTR matcher$[rsp]
	add	rax, 24
	mov	r8d, 1
	mov	edx, 24
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN9@stb__add_n
$LN8@stb__add_n:
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN7@stb__add_n
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rax, QWORD PTR [rax+24]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN7@stb__add_n
	mov	r8d, 9321				; 00002469H
	lea	rdx, OFFSET FLAT:$SG90174
	lea	rcx, OFFSET FLAT:$SG90175
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__add_n:
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv131[rsp], 0
$LN9@stb__add_n:
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN10@stb__add_n
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN11@stb__add_n
$LN10@stb__add_n:
	mov	DWORD PTR tv138[rsp], 0
$LN11@stb__add_n:
	movsxd	rax, DWORD PTR tv138[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rcx+rax-24]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
; Line 9322
	mov	rax, QWORD PTR matcher$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN12@stb__add_n
	mov	rax, QWORD PTR matcher$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN13@stb__add_n
$LN12@stb__add_n:
	mov	DWORD PTR tv149[rsp], 0
$LN13@stb__add_n:
	mov	eax, DWORD PTR tv149[rsp]
	dec	eax
; Line 9323
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?stb__add_node@@YAHPEAUstb_matcher@@@Z ENDP		; stb__add_node
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$1 = 32
s$ = 40
last$ = 48
buffer$ = 64
__$ArrayPad$ = 320
expr$ = 352
candidate$ = 360
search$ = 368
insensitive$ = 376
?stb__wildmatch_raw@@YAHPEAD0HH@Z PROC			; stb__wildmatch_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 9223
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 344				; 00000158H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 9226
	mov	edx, 59					; 0000003bH
	mov	rcx, QWORD PTR expr$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	mov	QWORD PTR s$[rsp], rax
; Line 9227
	mov	rax, QWORD PTR expr$[rsp]
	mov	QWORD PTR last$[rsp], rax
$LN2@stb__wildm:
; Line 9228
	cmp	QWORD PTR s$[rsp], 0
	je	$LN3@stb__wildm
; Line 9231
	mov	rax, QWORD PTR last$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 256				; 00000100H
	jge	SHORT $LN4@stb__wildm
; Line 9232
	mov	rax, QWORD PTR last$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	mov	r8d, eax
	mov	rdx, QWORD PTR last$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb_strncpy
; Line 9233
	mov	r9d, DWORD PTR insensitive$[rsp]
	mov	r8d, DWORD PTR search$[rsp]
	mov	rdx, QWORD PTR candidate$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?stb__wildmatch_raw2@@YAHPEAD0HH@Z	; stb__wildmatch_raw2
	mov	DWORD PTR z$1[rsp], eax
; Line 9234
	jmp	SHORT $LN5@stb__wildm
$LN4@stb__wildm:
; Line 9235
	mov	rax, QWORD PTR s$[rsp]
	mov	BYTE PTR [rax], 0
; Line 9236
	mov	r9d, DWORD PTR insensitive$[rsp]
	mov	r8d, DWORD PTR search$[rsp]
	mov	rdx, QWORD PTR candidate$[rsp]
	mov	rcx, QWORD PTR last$[rsp]
	call	?stb__wildmatch_raw2@@YAHPEAD0HH@Z	; stb__wildmatch_raw2
	mov	DWORD PTR z$1[rsp], eax
; Line 9237
	mov	rax, QWORD PTR s$[rsp]
	mov	BYTE PTR [rax], 59			; 0000003bH
$LN5@stb__wildm:
; Line 9239
	cmp	DWORD PTR z$1[rsp], 0
	jl	SHORT $LN6@stb__wildm
	mov	eax, DWORD PTR z$1[rsp]
	jmp	SHORT $LN1@stb__wildm
$LN6@stb__wildm:
; Line 9240
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR last$[rsp], rax
; Line 9241
	mov	edx, 59					; 0000003bH
	mov	rcx, QWORD PTR last$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	mov	QWORD PTR s$[rsp], rax
; Line 9242
	jmp	$LN2@stb__wildm
$LN3@stb__wildm:
; Line 9243
	mov	r9d, DWORD PTR insensitive$[rsp]
	mov	r8d, DWORD PTR search$[rsp]
	mov	rdx, QWORD PTR candidate$[rsp]
	mov	rcx, QWORD PTR last$[rsp]
	call	?stb__wildmatch_raw2@@YAHPEAD0HH@Z	; stb__wildmatch_raw2
$LN1@stb__wildm:
; Line 9244
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 344				; 00000158H
	ret	0
?stb__wildmatch_raw@@YAHPEAD0HH@Z ENDP			; stb__wildmatch_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$1 = 32
start$ = 36
z$2 = 40
where$ = 44
n$3 = 48
tv73 = 52
tv147 = 56
tv189 = 60
tv218 = 64
tv79 = 68
expr$ = 96
candidate$ = 104
search$ = 112
insensitive$ = 120
?stb__wildmatch_raw2@@YAHPEAD0HH@Z PROC			; stb__wildmatch_raw2
; File W:\cpp\void\vendor\stb\stb.h
; Line 9135
$LN49:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 9136
	mov	DWORD PTR where$[rsp], 0
; Line 9137
	mov	DWORD PTR start$[rsp], -1
; Line 9139
	cmp	DWORD PTR search$[rsp], 0
	jne	$LN15@stb__wildm
; Line 9141
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN17@stb__wildm
; Line 9142
	mov	DWORD PTR start$[rsp], 0
$LN17@stb__wildm:
$LN2@stb__wildm:
; Line 9143
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	je	$LN3@stb__wildm
; Line 9144
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN18@stb__wildm
; Line 9145
	mov	rax, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN38@stb__wildm
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN39@stb__wildm
$LN38@stb__wildm:
	mov	DWORD PTR tv73[rsp], -1
$LN39@stb__wildm:
	mov	eax, DWORD PTR tv73[rsp]
	jmp	$LN1@stb__wildm
$LN18@stb__wildm:
; Line 9146
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN19@stb__wildm
; Line 9147
	mov	rax, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN21@stb__wildm
	mov	eax, -1
	jmp	$LN1@stb__wildm
$LN21@stb__wildm:
; Line 9148
	jmp	SHORT $LN20@stb__wildm
$LN19@stb__wildm:
; Line 9149
	cmp	DWORD PTR insensitive$[rsp], 0
	je	SHORT $LN22@stb__wildm
; Line 9150
	mov	rax, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	DWORD PTR tv79[rsp], eax
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	call	QWORD PTR __imp_tolower
	mov	ecx, DWORD PTR tv79[rsp]
	cmp	ecx, eax
	je	SHORT $LN24@stb__wildm
; Line 9151
	mov	eax, -1
	jmp	$LN1@stb__wildm
$LN24@stb__wildm:
; Line 9152
	jmp	SHORT $LN23@stb__wildm
$LN22@stb__wildm:
; Line 9153
	mov	rax, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN25@stb__wildm
; Line 9154
	mov	eax, -1
	jmp	$LN1@stb__wildm
$LN25@stb__wildm:
$LN23@stb__wildm:
$LN20@stb__wildm:
; Line 9156
	mov	rax, QWORD PTR candidate$[rsp]
	inc	rax
	mov	QWORD PTR candidate$[rsp], rax
	mov	rax, QWORD PTR expr$[rsp]
	inc	rax
	mov	QWORD PTR expr$[rsp], rax
	mov	eax, DWORD PTR where$[rsp]
	inc	eax
	mov	DWORD PTR where$[rsp], eax
; Line 9157
	jmp	$LN2@stb__wildm
$LN3@stb__wildm:
; Line 9158
	jmp	SHORT $LN16@stb__wildm
$LN15@stb__wildm:
; Line 9160
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN26@stb__wildm
; Line 9161
	xor	eax, eax
	jmp	$LN1@stb__wildm
$LN26@stb__wildm:
$LN16@stb__wildm:
; Line 9164
	cmp	DWORD PTR search$[rsp], 0
	jne	SHORT $LN40@stb__wildm
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN40@stb__wildm
	mov	r8d, 9164				; 000023ccH
	lea	rdx, OFFSET FLAT:$SG90049
	lea	rcx, OFFSET FLAT:$SG90050
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN40@stb__wildm:
; Line 9165
	cmp	DWORD PTR search$[rsp], 0
	jne	SHORT $LN27@stb__wildm
; Line 9166
	mov	rax, QWORD PTR expr$[rsp]
	inc	rax
	mov	QWORD PTR expr$[rsp], rax
$LN27@stb__wildm:
$LN4@stb__wildm:
; Line 9170
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN5@stb__wildm
; Line 9171
	mov	DWORD PTR o$1[rsp], 0
$LN6@stb__wildm:
; Line 9173
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN7@stb__wildm
	mov	rax, QWORD PTR expr$[rsp]
	inc	rax
	mov	QWORD PTR expr$[rsp], rax
	jmp	SHORT $LN6@stb__wildm
$LN7@stb__wildm:
; Line 9178
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN28@stb__wildm
	cmp	DWORD PTR start$[rsp], 0
	jl	SHORT $LN41@stb__wildm
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR tv147[rsp], eax
	jmp	SHORT $LN42@stb__wildm
$LN41@stb__wildm:
	mov	DWORD PTR tv147[rsp], 0
$LN42@stb__wildm:
	mov	eax, DWORD PTR tv147[rsp]
	jmp	$LN1@stb__wildm
$LN28@stb__wildm:
; Line 9181
	mov	DWORD PTR o$1[rsp], 0
$LN8@stb__wildm:
; Line 9182
	movsxd	rax, DWORD PTR o$1[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN9@stb__wildm
; Line 9183
	movsxd	rax, DWORD PTR o$1[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN29@stb__wildm
; Line 9184
	jmp	SHORT $LN9@stb__wildm
$LN29@stb__wildm:
; Line 9185
	mov	eax, DWORD PTR o$1[rsp]
	inc	eax
	mov	DWORD PTR o$1[rsp], eax
; Line 9186
	jmp	SHORT $LN8@stb__wildm
$LN9@stb__wildm:
; Line 9188
	movsxd	rax, DWORD PTR o$1[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	$LN30@stb__wildm
	cmp	DWORD PTR search$[rsp], 0
	jne	$LN30@stb__wildm
; Line 9190
	mov	DWORD PTR z$2[rsp], 0
	jmp	SHORT $LN12@stb__wildm
$LN10@stb__wildm:
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN12@stb__wildm:
	mov	eax, DWORD PTR o$1[rsp]
	cmp	DWORD PTR z$2[rsp], eax
	jge	SHORT $LN11@stb__wildm
; Line 9191
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN32@stb__wildm
; Line 9192
	mov	eax, -1
	jmp	$LN1@stb__wildm
$LN32@stb__wildm:
	jmp	SHORT $LN10@stb__wildm
$LN11@stb__wildm:
$LN13@stb__wildm:
; Line 9193
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN14@stb__wildm
; Line 9194
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
	jmp	SHORT $LN13@stb__wildm
$LN14@stb__wildm:
; Line 9196
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR o$1[rsp]
	sub	rax, rcx
	mov	r9d, DWORD PTR insensitive$[rsp]
	mov	r8d, DWORD PTR o$1[rsp]
	mov	rdx, QWORD PTR expr$[rsp]
	mov	rcx, rax
	call	?stb__match_qstring@@YAHPEAD0HH@Z	; stb__match_qstring
	test	eax, eax
	je	SHORT $LN33@stb__wildm
; Line 9197
	cmp	DWORD PTR start$[rsp], 0
	jl	SHORT $LN43@stb__wildm
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR tv189[rsp], eax
	jmp	SHORT $LN44@stb__wildm
$LN43@stb__wildm:
	mov	DWORD PTR tv189[rsp], 0
$LN44@stb__wildm:
	mov	eax, DWORD PTR tv189[rsp]
	jmp	$LN1@stb__wildm
$LN33@stb__wildm:
; Line 9198
	mov	eax, -1
	jmp	$LN1@stb__wildm
; Line 9199
	jmp	SHORT $LN31@stb__wildm
$LN30@stb__wildm:
; Line 9201
	mov	r9d, DWORD PTR insensitive$[rsp]
	mov	r8d, DWORD PTR o$1[rsp]
	mov	rdx, QWORD PTR expr$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	call	?stb__find_qstring@@YAHPEAD0HH@Z	; stb__find_qstring
	mov	DWORD PTR n$3[rsp], eax
; Line 9202
	cmp	DWORD PTR n$3[rsp], 0
	jge	SHORT $LN34@stb__wildm
; Line 9203
	mov	eax, -1
	jmp	$LN1@stb__wildm
$LN34@stb__wildm:
; Line 9204
	cmp	DWORD PTR start$[rsp], 0
	jge	SHORT $LN35@stb__wildm
; Line 9205
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR where$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR start$[rsp], eax
$LN35@stb__wildm:
; Line 9206
	movsxd	rax, DWORD PTR o$1[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR expr$[rsp], rax
; Line 9207
	mov	eax, DWORD PTR o$1[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR candidate$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR candidate$[rsp], rax
$LN31@stb__wildm:
; Line 9210
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN36@stb__wildm
; Line 9211
	cmp	DWORD PTR search$[rsp], 0
	jne	SHORT $LN45@stb__wildm
	mov	r8d, 9211				; 000023fbH
	lea	rdx, OFFSET FLAT:$SG90061
	lea	rcx, OFFSET FLAT:$SG90062
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN45@stb__wildm:
; Line 9212
	mov	eax, DWORD PTR start$[rsp]
	jmp	SHORT $LN1@stb__wildm
$LN36@stb__wildm:
; Line 9215
	mov	rax, QWORD PTR expr$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN46@stb__wildm
	mov	r8d, 9215				; 000023ffH
	lea	rdx, OFFSET FLAT:$SG90063
	lea	rcx, OFFSET FLAT:$SG90064
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stb__wildm:
; Line 9216
	mov	rax, QWORD PTR expr$[rsp]
	inc	rax
	mov	QWORD PTR expr$[rsp], rax
; Line 9217
	jmp	$LN4@stb__wildm
$LN5@stb__wildm:
; Line 9219
	cmp	DWORD PTR start$[rsp], 0
	jl	SHORT $LN47@stb__wildm
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR tv218[rsp], eax
	jmp	SHORT $LN48@stb__wildm
$LN47@stb__wildm:
	mov	DWORD PTR tv218[rsp], 0
$LN48@stb__wildm:
	mov	eax, DWORD PTR tv218[rsp]
$LN1@stb__wildm:
; Line 9220
	add	rsp, 88					; 00000058H
	ret	0
?stb__wildmatch_raw2@@YAHPEAD0HH@Z ENDP			; stb__wildmatch_raw2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
tv74 = 33
offset$ = 36
tv130 = 40
candidate$ = 64
qstring$ = 72
qlen$ = 80
insensitive$ = 88
?stb__find_qstring@@YAHPEAD0HH@Z PROC			; stb__find_qstring
; File W:\cpp\void\vendor\stb\stb.h
; Line 9108
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9111
	mov	DWORD PTR offset$[rsp], 0
$LN2@stb__find_:
; Line 9112
	mov	rax, QWORD PTR qstring$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN3@stb__find_
; Line 9113
	mov	rax, QWORD PTR qstring$[rsp]
	inc	rax
	mov	QWORD PTR qstring$[rsp], rax
; Line 9114
	mov	eax, DWORD PTR qlen$[rsp]
	dec	eax
	mov	DWORD PTR qlen$[rsp], eax
; Line 9115
	mov	rax, QWORD PTR candidate$[rsp]
	inc	rax
	mov	QWORD PTR candidate$[rsp], rax
; Line 9116
	cmp	DWORD PTR qlen$[rsp], 0
	jne	SHORT $LN6@stb__find_
	xor	eax, eax
	jmp	$LN1@stb__find_
$LN6@stb__find_:
; Line 9117
	mov	rax, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN7@stb__find_
	mov	eax, -1
	jmp	$LN1@stb__find_
$LN7@stb__find_:
; Line 9118
	jmp	SHORT $LN2@stb__find_
$LN3@stb__find_:
; Line 9120
	mov	rax, QWORD PTR qstring$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv74[rsp], al
	mov	rax, QWORD PTR qstring$[rsp]
	inc	rax
	mov	QWORD PTR qstring$[rsp], rax
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR c$[rsp], al
; Line 9121
	mov	eax, DWORD PTR qlen$[rsp]
	dec	eax
	mov	DWORD PTR qlen$[rsp], eax
; Line 9122
	cmp	DWORD PTR insensitive$[rsp], 0
	je	SHORT $LN8@stb__find_
	movsx	eax, BYTE PTR c$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	BYTE PTR c$[rsp], al
$LN8@stb__find_:
$LN4@stb__find_:
; Line 9124
	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN5@stb__find_
; Line 9125
	cmp	DWORD PTR insensitive$[rsp], 0
	je	SHORT $LN12@stb__find_
	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	DWORD PTR tv130[rsp], eax
	jmp	SHORT $LN13@stb__find_
$LN12@stb__find_:
	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv130[rsp], eax
$LN13@stb__find_:
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, DWORD PTR tv130[rsp]
	jne	SHORT $LN9@stb__find_
; Line 9126
	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	r9d, DWORD PTR insensitive$[rsp]
	mov	r8d, DWORD PTR qlen$[rsp]
	mov	rdx, QWORD PTR qstring$[rsp]
	mov	rcx, rax
	call	?stb__match_qstring@@YAHPEAD0HH@Z	; stb__match_qstring
	test	eax, eax
	je	SHORT $LN10@stb__find_
; Line 9127
	mov	eax, DWORD PTR offset$[rsp]
	jmp	SHORT $LN1@stb__find_
$LN10@stb__find_:
$LN9@stb__find_:
; Line 9128
	mov	eax, DWORD PTR offset$[rsp]
	inc	eax
	mov	DWORD PTR offset$[rsp], eax
; Line 9129
	jmp	$LN4@stb__find_
$LN5@stb__find_:
; Line 9131
	mov	eax, -1
$LN1@stb__find_:
; Line 9132
	add	rsp, 56					; 00000038H
	ret	0
?stb__find_qstring@@YAHPEAD0HH@Z ENDP			; stb__find_qstring
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv77 = 36
candidate$ = 64
qstring$ = 72
qlen$ = 80
insensitive$ = 88
?stb__match_qstring@@YAHPEAD0HH@Z PROC			; stb__match_qstring
; File W:\cpp\void\vendor\stb\stb.h
; Line 9087
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9089
	cmp	DWORD PTR insensitive$[rsp], 0
	je	$LN8@stb__match
; Line 9090
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__match
$LN2@stb__match:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__match:
	mov	eax, DWORD PTR qlen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__match
; Line 9091
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR qstring$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN10@stb__match
; Line 9092
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN12@stb__match
	xor	eax, eax
	jmp	$LN1@stb__match
$LN12@stb__match:
; Line 9093
	jmp	SHORT $LN11@stb__match
$LN10@stb__match:
; Line 9094
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR qstring$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	DWORD PTR tv77[rsp], eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR candidate$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	call	QWORD PTR __imp_tolower
	mov	ecx, DWORD PTR tv77[rsp]
	cmp	ecx, eax
	je	SHORT $LN13@stb__match
; Line 9095
	xor	eax, eax
	jmp	SHORT $LN1@stb__match
$LN13@stb__match:
$LN11@stb__match:
	jmp	SHORT $LN2@stb__match
$LN3@stb__match:
; Line 9096
	jmp	SHORT $LN9@stb__match
$LN8@stb__match:
; Line 9097
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb__match
$LN5@stb__match:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb__match:
	mov	eax, DWORD PTR qlen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stb__match
; Line 9098
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR qstring$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN14@stb__match
; Line 9099
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR candidate$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN16@stb__match
	xor	eax, eax
	jmp	SHORT $LN1@stb__match
$LN16@stb__match:
; Line 9100
	jmp	SHORT $LN15@stb__match
$LN14@stb__match:
; Line 9101
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR qstring$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR candidate$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN17@stb__match
; Line 9102
	xor	eax, eax
	jmp	SHORT $LN1@stb__match
$LN17@stb__match:
$LN15@stb__match:
	jmp	SHORT $LN5@stb__match
$LN6@stb__match:
$LN9@stb__match:
; Line 9104
	mov	eax, 1
$LN1@stb__match:
; Line 9105
	add	rsp, 56					; 00000038H
	ret	0
?stb__match_qstring@@YAHPEAD0HH@Z ENDP			; stb__match_qstring
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 48
str$ = 56
len$ = 64
stb_lex	PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10036
$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10037
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN3@stb_lex
	mov	r8d, 10037				; 00002735H
	lea	rdx, OFFSET FLAT:$SG90765
	lea	rcx, OFFSET FLAT:$SG90766
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb_lex:
; Line 10038
	mov	r8, QWORD PTR len$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z ; stb__matcher_dfa
; Line 10039
	add	rsp, 40					; 00000028H
	ret	0
stb_lex	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
end$ = 32
z$ = 40
matcher$ = 64
regex$ = 72
result$ = 80
stb_lex_item_wild PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9692
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9696
	mov	rax, QWORD PTR matcher$[rsp]
	movzx	eax, WORD PTR [rax]
	lea	r9, QWORD PTR end$[rsp]
	mov	r8, QWORD PTR regex$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__wild_parse@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ; stb__wild_parse
	mov	QWORD PTR z$[rsp], rax
; Line 9698
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stb_lex_it
; Line 9699
	xor	eax, eax
	jmp	SHORT $LN1@stb_lex_it
$LN2@stb_lex_it:
; Line 9701
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__lex_reset@@YAXPEAUstb_matcher@@@Z	; stb__lex_reset
; Line 9703
	movzx	eax, WORD PTR end$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	edx, WORD PTR result$[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 9704
	mov	eax, 1
$LN1@stb_lex_it:
; Line 9705
	add	rsp, 56					; 00000038H
	ret	0
stb_lex_item_wild ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
end$ = 32
z$ = 40
matcher$ = 64
regex$ = 72
result$ = 80
stb_lex_item PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9676
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9680
	mov	rax, QWORD PTR matcher$[rsp]
	movzx	eax, WORD PTR [rax]
	lea	r9, QWORD PTR end$[rsp]
	mov	r8, QWORD PTR regex$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ; stb__reg_parse_alt
	mov	QWORD PTR z$[rsp], rax
; Line 9682
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stb_lex_it
; Line 9683
	xor	eax, eax
	jmp	SHORT $LN1@stb_lex_it
$LN2@stb_lex_it:
; Line 9685
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__lex_reset@@YAXPEAUstb_matcher@@@Z	; stb__lex_reset
; Line 9687
	movzx	eax, WORD PTR end$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	edx, WORD PTR result$[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 9688
	mov	eax, 1
$LN1@stb_lex_it:
; Line 9689
	add	rsp, 56					; 00000038H
	ret	0
stb_lex_item ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
matcher$ = 32
stb_lex_matcher PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9666
$LN3:
	sub	rsp, 56					; 00000038H
; Line 9667
	call	?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ ; stb__alloc_matcher
	mov	QWORD PTR matcher$[rsp], rax
; Line 9669
	mov	rax, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rax+20], 1
; Line 9670
	mov	rax, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rax+32], 1
; Line 9672
	mov	rax, QWORD PTR matcher$[rsp]
; Line 9673
	add	rsp, 56					; 00000038H
	ret	0
stb_lex_matcher ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
stb_matcher_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9610
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 9611
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_free
; Line 9612
	add	rsp, 40					; 00000028H
	ret	0
stb_matcher_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 48
str$ = 56
stb_matcher_find PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 10030
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10031
	mov	rax, QWORD PTR m$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN3@stb_matche
	mov	r8d, 10031				; 0000272fH
	lea	rdx, OFFSET FLAT:$SG90756
	lea	rcx, OFFSET FLAT:$SG90757
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb_matche:
; Line 10032
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__matcher_dfa@@YAHPEAUstb_matcher@@PEADPEAH@Z ; stb__matcher_dfa
; Line 10033
	add	rsp, 40					; 00000028H
	ret	0
stb_matcher_find ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
j$ = 36
previous$ = 40
current$ = 48
y$ = 56
n$1 = 64
z$ = 72
tv134 = 76
tv139 = 80
tv154 = 84
tv245 = 88
tv270 = 92
tv298 = 96
result$ = 100
tv316 = 104
n$2 = 112
z$3 = 120
tv324 = 128
temp$ = 136
m$ = 160
str$ = 168
stb_matcher_match PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9751
$LN49:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 9752
	mov	DWORD PTR result$[rsp], 0
; Line 9754
	mov	QWORD PTR previous$[rsp], 0
; Line 9755
	mov	QWORD PTR current$[rsp], 0
; Line 9758
	cmp	QWORD PTR previous$[rsp], 0
	je	SHORT $LN33@stb_matche
	mov	rax, QWORD PTR previous$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN33@stb_matche
	mov	r8d, 9758				; 0000261eH
	lea	rdx, OFFSET FLAT:$SG90537
	lea	rcx, OFFSET FLAT:$SG90538
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN33@stb_matche:
	mov	r8d, 4
	mov	edx, 2
	lea	rcx, QWORD PTR previous$[rsp]
	call	stb__arr_setsize_
; Line 9759
	cmp	QWORD PTR current$[rsp], 0
	je	SHORT $LN34@stb_matche
	mov	rax, QWORD PTR current$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN34@stb_matche
	mov	r8d, 9759				; 0000261fH
	lea	rdx, OFFSET FLAT:$SG90539
	lea	rcx, OFFSET FLAT:$SG90540
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN34@stb_matche:
	mov	r8d, 4
	mov	edx, 2
	lea	rcx, QWORD PTR current$[rsp]
	call	stb__arr_setsize_
; Line 9761
	mov	rax, QWORD PTR m$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r8d, eax
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR previous$[rsp], rax
; Line 9762
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z ; stb__eps_closure
	mov	QWORD PTR previous$[rsp], rax
; Line 9763
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z	; stb__clear
$LN2@stb_matche:
; Line 9765
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb_matche
	cmp	QWORD PTR previous$[rsp], 0
	je	SHORT $LN35@stb_matche
	mov	rax, QWORD PTR previous$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv134[rsp], eax
	jmp	SHORT $LN36@stb_matche
$LN35@stb_matche:
	mov	DWORD PTR tv134[rsp], 0
$LN36@stb_matche:
	cmp	DWORD PTR tv134[rsp], 0
	je	$LN3@stb_matche
; Line 9766
	cmp	QWORD PTR previous$[rsp], 0
	je	SHORT $LN37@stb_matche
	mov	rax, QWORD PTR previous$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv139[rsp], eax
	jmp	SHORT $LN38@stb_matche
$LN37@stb_matche:
	mov	DWORD PTR tv139[rsp], 0
$LN38@stb_matche:
	mov	eax, DWORD PTR tv139[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 9767
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_matche
$LN4@stb_matche:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_matche:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@stb_matche
; Line 9768
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR previous$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR n$1[rsp], rax
; Line 9769
	mov	rax, QWORD PTR n$1[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN39@stb_matche
	mov	rax, QWORD PTR n$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv154[rsp], eax
	jmp	SHORT $LN40@stb_matche
$LN39@stb_matche:
	mov	DWORD PTR tv154[rsp], 0
$LN40@stb_matche:
	mov	eax, DWORD PTR tv154[rsp]
	mov	DWORD PTR z$[rsp], eax
; Line 9770
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stb_matche
$LN7@stb_matche:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stb_matche:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stb_matche
; Line 9771
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	test	eax, eax
	jl	SHORT $LN22@stb_matche
; Line 9772
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jne	SHORT $LN24@stb_matche
; Line 9773
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR current$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR current$[rsp], rax
$LN24@stb_matche:
	jmp	$LN23@stb_matche
$LN22@stb_matche:
; Line 9774
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	cmp	eax, -1
	jne	SHORT $LN25@stb_matche
; Line 9775
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN27@stb_matche
; Line 9776
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR current$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR current$[rsp], rax
$LN27@stb_matche:
	jmp	$LN26@stb_matche
$LN25@stb_matche:
; Line 9777
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	cmp	eax, -1
	jge	$LN28@stb_matche
; Line 9778
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	neg	eax
	sub	eax, 2
	mov	DWORD PTR z$3[rsp], eax
; Line 9779
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR tv324[rsp], rcx
	mov	edx, DWORD PTR z$3[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv324[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN29@stb_matche
; Line 9780
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR current$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR current$[rsp], rax
$LN29@stb_matche:
$LN28@stb_matche:
$LN26@stb_matche:
$LN23@stb_matche:
; Line 9782
	jmp	$LN7@stb_matche
$LN8@stb_matche:
; Line 9783
	jmp	$LN4@stb_matche
$LN5@stb_matche:
; Line 9784
	xor	r8d, r8d
	mov	edx, 2
	lea	rcx, QWORD PTR previous$[rsp]
	call	stb__arr_setlen_
; Line 9786
	mov	rax, QWORD PTR previous$[rsp]
	mov	QWORD PTR temp$[rsp], rax
; Line 9787
	mov	rax, QWORD PTR current$[rsp]
	mov	QWORD PTR previous$[rsp], rax
; Line 9788
	mov	rax, QWORD PTR temp$[rsp]
	mov	QWORD PTR current$[rsp], rax
; Line 9790
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z ; stb__eps_closure
	mov	QWORD PTR previous$[rsp], rax
; Line 9791
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z	; stb__clear
; Line 9793
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 9794
	jmp	$LN2@stb_matche
$LN3@stb_matche:
; Line 9797
	cmp	QWORD PTR previous$[rsp], 0
	je	SHORT $LN41@stb_matche
	mov	rax, QWORD PTR previous$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv245[rsp], eax
	jmp	SHORT $LN42@stb_matche
$LN41@stb_matche:
	mov	DWORD PTR tv245[rsp], 0
$LN42@stb_matche:
	mov	eax, DWORD PTR tv245[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 9798
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stb_matche
$LN10@stb_matche:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stb_matche:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stb_matche
; Line 9799
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR previous$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax+2], 1
	jmp	SHORT $LN10@stb_matche
$LN11@stb_matche:
; Line 9801
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@stb_matche
$LN13@stb_matche:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@stb_matche:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN14@stb_matche
; Line 9802
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR previous$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR n$2[rsp], rax
; Line 9803
	mov	rax, QWORD PTR n$2[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN43@stb_matche
	mov	rax, QWORD PTR n$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv270[rsp], eax
	jmp	SHORT $LN44@stb_matche
$LN43@stb_matche:
	mov	DWORD PTR tv270[rsp], 0
$LN44@stb_matche:
	mov	eax, DWORD PTR tv270[rsp]
	mov	DWORD PTR z$[rsp], eax
; Line 9804
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stb_matche
$LN16@stb_matche:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stb_matche:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN17@stb_matche
; Line 9805
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, WORD PTR [rcx+rax*4]
	cmp	eax, 10
	jne	SHORT $LN30@stb_matche
; Line 9806
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	eax, WORD PTR [rcx+rax*4+2]
	mov	r8d, eax
	mov	rdx, QWORD PTR current$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__add_if_inactive@@YAPEAGPEAUstb_matcher@@PEAGH@Z ; stb__add_if_inactive
	mov	QWORD PTR current$[rsp], rax
$LN30@stb_matche:
; Line 9807
	jmp	SHORT $LN16@stb_matche
$LN17@stb_matche:
; Line 9808
	jmp	$LN13@stb_matche
$LN14@stb_matche:
; Line 9810
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__eps_closure@@YAPEAGPEAUstb_matcher@@PEAG@Z ; stb__eps_closure
	mov	QWORD PTR previous$[rsp], rax
; Line 9811
	mov	rdx, QWORD PTR previous$[rsp]
	mov	rcx, QWORD PTR m$[rsp]
	call	?stb__clear@@YAXPEAUstb_matcher@@PEAG@Z	; stb__clear
; Line 9813
	cmp	QWORD PTR previous$[rsp], 0
	je	SHORT $LN45@stb_matche
	mov	rax, QWORD PTR previous$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv298[rsp], eax
	jmp	SHORT $LN46@stb_matche
$LN45@stb_matche:
	mov	DWORD PTR tv298[rsp], 0
$LN46@stb_matche:
	mov	eax, DWORD PTR tv298[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 9814
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN21@stb_matche
$LN19@stb_matche:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@stb_matche:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN20@stb_matche
; Line 9815
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR previous$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stb_matche
; Line 9816
	mov	DWORD PTR result$[rsp], 1
$LN31@stb_matche:
	jmp	SHORT $LN19@stb_matche
$LN20@stb_matche:
; Line 9818
	lea	rcx, QWORD PTR previous$[rsp]
	call	stb_arr_free_
; Line 9819
	lea	rcx, QWORD PTR current$[rsp]
	call	stb_arr_free_
; Line 9821
	cmp	DWORD PTR result$[rsp], 0
	je	SHORT $LN47@stb_matche
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN47@stb_matche
	mov	DWORD PTR tv316[rsp], 1
	jmp	SHORT $LN48@stb_matche
$LN47@stb_matche:
	mov	DWORD PTR tv316[rsp], 0
$LN48@stb_matche:
	mov	eax, DWORD PTR tv316[rsp]
; Line 9822
	add	rsp, 152				; 00000098H
	ret	0
stb_matcher_match ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
end$ = 32
matcher$ = 40
z$ = 48
regex$ = 80
stb_regex_matcher PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9644
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 9647
	call	?stb__alloc_matcher@@YAPEAUstb_matcher@@XZ ; stb__alloc_matcher
	mov	QWORD PTR matcher$[rsp], rax
; Line 9648
	mov	rax, QWORD PTR regex$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 94					; 0000005eH
	jne	SHORT $LN2@stb_regex_
; Line 9649
	mov	rax, QWORD PTR matcher$[rsp]
	mov	DWORD PTR [rax+20], 1
; Line 9650
	mov	rax, QWORD PTR regex$[rsp]
	inc	rax
	mov	QWORD PTR regex$[rsp], rax
$LN2@stb_regex_:
; Line 9653
	mov	rax, QWORD PTR matcher$[rsp]
	movzx	eax, WORD PTR [rax]
	lea	r9, QWORD PTR end$[rsp]
	mov	r8, QWORD PTR regex$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR matcher$[rsp]
	call	?stb__reg_parse_alt@@YAPEADPEAUstb_matcher@@HPEADPEAG@Z ; stb__reg_parse_alt
	mov	QWORD PTR z$[rsp], rax
; Line 9655
	cmp	QWORD PTR z$[rsp], 0
	je	SHORT $LN4@stb_regex_
	mov	rax, QWORD PTR z$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_regex_
$LN4@stb_regex_:
; Line 9656
	mov	rcx, QWORD PTR matcher$[rsp]
	call	stb_free
; Line 9657
	xor	eax, eax
	jmp	SHORT $LN1@stb_regex_
$LN3@stb_regex_:
; Line 9660
	movzx	eax, WORD PTR end$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR matcher$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	edx, -1
	mov	WORD PTR [rcx+rax], dx
; Line 9662
	mov	rax, QWORD PTR matcher$[rsp]
$LN1@stb_regex_:
; Line 9663
	add	rsp, 72					; 00000048H
	ret	0
stb_regex_matcher ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
expr$ = 48
candidate$ = 56
stb_wildfindi PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9262
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 9263
	mov	r9d, 1
	mov	r8d, 1
	mov	rdx, QWORD PTR candidate$[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	call	?stb__wildmatch_raw@@YAHPEAD0HH@Z	; stb__wildmatch_raw
; Line 9264
	add	rsp, 40					; 00000028H
	ret	0
stb_wildfindi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
expr$ = 48
candidate$ = 56
stb_wildfind PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9257
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 9258
	xor	r9d, r9d
	mov	r8d, 1
	mov	rdx, QWORD PTR candidate$[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	call	?stb__wildmatch_raw@@YAHPEAD0HH@Z	; stb__wildmatch_raw
; Line 9259
	add	rsp, 40					; 00000028H
	ret	0
stb_wildfind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
expr$ = 64
candidate$ = 72
stb_wildmatch PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9247
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9248
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR candidate$[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	call	?stb__wildmatch_raw@@YAHPEAD0HH@Z	; stb__wildmatch_raw
	test	eax, eax
	jl	SHORT $LN3@stb_wildma
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb_wildma
$LN3@stb_wildma:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb_wildma:
	mov	eax, DWORD PTR tv70[rsp]
; Line 9249
	add	rsp, 56					; 00000038H
	ret	0
stb_wildmatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
z$ = 40
count$ = 64
str$ = 72
stb_wordwrapalloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9048
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 9049
	mov	r9, QWORD PTR str$[rsp]
	mov	r8d, DWORD PTR count$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stb_wordwrap
	mov	DWORD PTR n$[rsp], eax
; Line 9050
	mov	QWORD PTR z$[rsp], 0
; Line 9051
	mov	eax, DWORD PTR n$[rsp]
	shl	eax, 1
	mov	r8d, eax
	mov	edx, 4
	lea	rcx, QWORD PTR z$[rsp]
	call	stb__arr_setlen_
; Line 9052
	mov	r9, QWORD PTR str$[rsp]
	mov	r8d, DWORD PTR count$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stb_wordwrap
; Line 9053
	mov	rax, QWORD PTR z$[rsp]
; Line 9054
	add	rsp, 56					; 00000038H
	ret	0
stb_wordwrapalloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
start$ = 36
i$ = 40
s$1 = 44
w$2 = 48
nonwhite$ = 52
tv200 = 56
pairs$ = 80
pair_max$ = 88
count$ = 96
str$ = 104
stb_wordwrap PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8953
$LN47:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8954
	mov	DWORD PTR n$[rsp], 0
	mov	DWORD PTR i$[rsp], 0
	mov	DWORD PTR start$[rsp], 0
	mov	DWORD PTR nonwhite$[rsp], 0
; Line 8955
	cmp	QWORD PTR pairs$[rsp], 0
	jne	SHORT $LN13@stb_wordwr
	mov	DWORD PTR pair_max$[rsp], 2147483632	; 7ffffff0H
	jmp	SHORT $LN14@stb_wordwr
$LN13@stb_wordwr:
; Line 8956
	mov	eax, DWORD PTR pair_max$[rsp]
	shl	eax, 1
	mov	DWORD PTR pair_max$[rsp], eax
$LN14@stb_wordwr:
$LN2@stb_wordwr:
; Line 8959
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR s$1[rsp], eax
$LN5@stb_wordwr:
; Line 8962
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	je	$LN6@stb_wordwr
; Line 8963
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	je	SHORT $LN16@stb_wordwr
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	jne	$LN15@stb_wordwr
$LN16@stb_wordwr:
; Line 8964
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cmp	eax, 23
	jne	SHORT $LN17@stb_wordwr
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@stb_wordwr:
; Line 8965
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN18@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN18@stb_wordwr:
; Line 8966
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN19@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pairs$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN19@stb_wordwr:
; Line 8967
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 8968
	mov	DWORD PTR nonwhite$[rsp], 0
; Line 8969
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR start$[rsp], eax
; Line 8970
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR s$1[rsp], eax
$LN15@stb_wordwr:
; Line 8972
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 8973
	jmp	$LN5@stb_wordwr
$LN6@stb_wordwr:
; Line 8974
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR i$[rsp], eax
	jl	$LN20@stb_wordwr
; Line 8976
	cmp	DWORD PTR nonwhite$[rsp], 0
	je	SHORT $LN21@stb_wordwr
; Line 8977
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN23@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN23@stb_wordwr:
; Line 8978
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN24@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pairs$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN24@stb_wordwr:
; Line 8979
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 8980
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR s$1[rsp], eax
	mov	eax, DWORD PTR s$1[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 8981
	mov	DWORD PTR nonwhite$[rsp], 0
; Line 8982
	jmp	SHORT $LN22@stb_wordwr
$LN21@stb_wordwr:
$LN7@stb_wordwr:
; Line 8984
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN8@stb_wordwr
; Line 8985
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN25@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN25@stb_wordwr:
; Line 8986
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN26@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
$LN26@stb_wordwr:
; Line 8987
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 8988
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR start$[rsp], eax
; Line 8989
	jmp	SHORT $LN7@stb_wordwr
$LN8@stb_wordwr:
; Line 8990
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR s$1[rsp], eax
$LN22@stb_wordwr:
$LN20@stb_wordwr:
; Line 8994
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN27@stb_wordwr
	jmp	$LN3@stb_wordwr
$LN27@stb_wordwr:
; Line 8996
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR w$2[rsp], eax
$LN9@stb_wordwr:
; Line 8997
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN10@stb_wordwr
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	jne	SHORT $LN10@stb_wordwr
; Line 8998
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 8999
	jmp	SHORT $LN9@stb_wordwr
$LN10@stb_wordwr:
; Line 9001
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR i$[rsp], eax
	jle	$LN28@stb_wordwr
; Line 9003
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR count$[rsp]
	jg	SHORT $LN29@stb_wordwr
; Line 9004
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN31@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN31@stb_wordwr:
; Line 9005
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN32@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pairs$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN32@stb_wordwr:
; Line 9006
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 9007
	mov	eax, DWORD PTR w$2[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 9008
	jmp	$LN30@stb_wordwr
$LN29@stb_wordwr:
; Line 9012
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR w$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv200[rsp], eax
	mov	ecx, DWORD PTR w$2[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	eax, ecx
	cdq
	idiv	DWORD PTR count$[rsp]
	mov	eax, edx
	mov	ecx, DWORD PTR tv200[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR count$[rsp]
	jle	SHORT $LN35@stb_wordwr
	cmp	DWORD PTR nonwhite$[rsp], 0
	jne	SHORT $LN33@stb_wordwr
$LN35@stb_wordwr:
; Line 9014
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN36@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN36@stb_wordwr:
; Line 9015
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN37@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
$LN37@stb_wordwr:
; Line 9016
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 9017
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR start$[rsp], eax
; Line 9018
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR w$2[rsp], eax
; Line 9019
	jmp	SHORT $LN34@stb_wordwr
$LN33@stb_wordwr:
; Line 9021
	mov	eax, DWORD PTR start$[rsp]
	cmp	DWORD PTR s$1[rsp], eax
	je	SHORT $LN38@stb_wordwr
; Line 9022
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN39@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN39@stb_wordwr:
; Line 9023
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN40@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pairs$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN40@stb_wordwr:
; Line 9024
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 9025
	mov	eax, DWORD PTR w$2[rsp]
	mov	DWORD PTR start$[rsp], eax
$LN38@stb_wordwr:
$LN34@stb_wordwr:
$LN11@stb_wordwr:
; Line 9029
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR i$[rsp]
	jg	SHORT $LN12@stb_wordwr
; Line 9030
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN41@stb_wordwr
	mov	eax, -1
	jmp	$LN1@stb_wordwr
$LN41@stb_wordwr:
; Line 9031
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN42@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
$LN42@stb_wordwr:
; Line 9032
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
; Line 9033
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR start$[rsp], eax
; Line 9034
	jmp	SHORT $LN11@stb_wordwr
$LN12@stb_wordwr:
$LN30@stb_wordwr:
$LN28@stb_wordwr:
; Line 9037
	mov	DWORD PTR nonwhite$[rsp], 1
; Line 9038
	jmp	$LN2@stb_wordwr
$LN3@stb_wordwr:
; Line 9039
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR start$[rsp], eax
	jge	SHORT $LN43@stb_wordwr
; Line 9040
	mov	eax, DWORD PTR pair_max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN44@stb_wordwr
	mov	eax, -1
	jmp	SHORT $LN1@stb_wordwr
$LN44@stb_wordwr:
; Line 9041
	cmp	QWORD PTR pairs$[rsp], 0
	je	SHORT $LN45@stb_wordwr
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR pairs$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pairs$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN45@stb_wordwr:
; Line 9042
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
$LN43@stb_wordwr:
; Line 9044
	mov	eax, DWORD PTR n$[rsp]
	sar	eax, 1
$LN1@stb_wordwr:
; Line 9045
	add	rsp, 72					; 00000048H
	ret	0
stb_wordwrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
d$1 = 4
changed$ = 8
p0$ = 32
p1$ = 40
len$ = 48
stb_bitset_unioneq_changed PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8910
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 8911
	mov	DWORD PTR changed$[rsp], 0
; Line 8912
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
; Line 8913
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p0$[rsp]
	mov	r8, QWORD PTR p1$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*4]
	mov	eax, DWORD PTR [rdx+rax*4]
	or	eax, ecx
	mov	DWORD PTR d$1[rsp], eax
; Line 8914
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR d$1[rsp], eax
	je	SHORT $LN5@stb_bitset
; Line 8915
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	mov	edx, DWORD PTR d$1[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
; Line 8916
	mov	DWORD PTR changed$[rsp], 1
$LN5@stb_bitset:
; Line 8918
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8919
	mov	eax, DWORD PTR changed$[rsp]
; Line 8920
	add	rsp, 24
	ret	0
stb_bitset_unioneq_changed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
bigger$ = 32
smaller$ = 40
len$ = 48
stb_bitset_subset PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8894
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 8896
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
; Line 8897
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR bigger$[rsp]
	mov	r8, QWORD PTR smaller$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*4]
	mov	eax, DWORD PTR [rdx+rax*4]
	and	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR smaller$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx*4]
	je	SHORT $LN5@stb_bitset
	xor	eax, eax
	jmp	SHORT $LN1@stb_bitset
$LN5@stb_bitset:
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8898
	mov	eax, 1
$LN1@stb_bitset:
; Line 8899
	add	rsp, 24
	ret	0
stb_bitset_subset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
p0$ = 32
p1$ = 40
len$ = 48
stb_bitset_disjoint_0 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8886
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 8888
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
; Line 8889
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p0$[rsp]
	mov	r8, QWORD PTR p1$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*4]
	mov	eax, DWORD PTR [rdx+rax*4]
	or	eax, ecx
	cmp	eax, -1					; ffffffffH
	je	SHORT $LN5@stb_bitset
	xor	eax, eax
	jmp	SHORT $LN1@stb_bitset
$LN5@stb_bitset:
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8890
	mov	eax, 1
$LN1@stb_bitset:
; Line 8891
	add	rsp, 24
	ret	0
stb_bitset_disjoint_0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
p0$ = 32
p1$ = 40
len$ = 48
stb_bitset_disjoint PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8878
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 8880
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
; Line 8881
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p0$[rsp]
	mov	r8, QWORD PTR p1$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*4]
	mov	eax, DWORD PTR [rdx+rax*4]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stb_bitset
	xor	eax, eax
	jmp	SHORT $LN1@stb_bitset
$LN5@stb_bitset:
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8882
	mov	eax, 1
$LN1@stb_bitset:
; Line 8883
	add	rsp, 24
	ret	0
stb_bitset_disjoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
p0$ = 32
p1$ = 40
len$ = 48
stb_bitset_eq PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8870
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 8872
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
; Line 8873
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p0$[rsp]
	mov	r8, QWORD PTR p1$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*4]
	cmp	DWORD PTR [rdx+rax*4], ecx
	je	SHORT $LN5@stb_bitset
	xor	eax, eax
	jmp	SHORT $LN1@stb_bitset
$LN5@stb_bitset:
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8874
	mov	eax, 1
$LN1@stb_bitset:
; Line 8875
	add	rsp, 24
	ret	0
stb_bitset_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv77 = 36
tv82 = 40
tv136 = 44
tv132 = 48
tv142 = 52
list$ = 56
out$ = 80
start$ = 88
end$ = 96
stb_bitset_getlist PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8932
$LN16:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8933
	mov	QWORD PTR list$[rsp], 0
; Line 8935
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR end$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_bitset
; Line 8936
	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 31
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	and	eax, ecx
	test	eax, eax
	je	$LN5@stb_bitset
; Line 8937
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv142[rsp], eax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN7@stb_bitset
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN8@stb_bitset
$LN7@stb_bitset:
	mov	DWORD PTR tv77[rsp], 0
$LN8@stb_bitset:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN9@stb_bitset
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN10@stb_bitset
$LN9@stb_bitset:
	mov	DWORD PTR tv82[rsp], 0
$LN10@stb_bitset:
	mov	eax, DWORD PTR tv77[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv82[rsp]
	jle	SHORT $LN12@stb_bitset
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR list$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN13@stb_bitset
$LN12@stb_bitset:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN11@stb_bitset
	mov	rax, QWORD PTR list$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN11@stb_bitset
	mov	r8d, 8937				; 000022e9H
	lea	rdx, OFFSET FLAT:$SG89854
	lea	rcx, OFFSET FLAT:$SG89855
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@stb_bitset:
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR list$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv132[rsp], 0
$LN13@stb_bitset:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN14@stb_bitset
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv136[rsp], eax
	jmp	SHORT $LN15@stb_bitset
$LN14@stb_bitset:
	mov	DWORD PTR tv136[rsp], 0
$LN15@stb_bitset:
	movsxd	rax, DWORD PTR tv136[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	edx, DWORD PTR tv142[rsp]
	mov	DWORD PTR [rcx+rax*4-4], edx
$LN5@stb_bitset:
	jmp	$LN2@stb_bitset
$LN3@stb_bitset:
; Line 8938
	mov	rax, QWORD PTR list$[rsp]
; Line 8939
	add	rsp, 72					; 00000048H
	ret	0
stb_bitset_getlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
d$ = 40
p0$ = 64
p1$ = 72
len$ = 80
stb_bitset_union PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8902
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8904
	movsxd	rax, DWORD PTR len$[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR d$[rsp], rax
; Line 8905
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p0$[rsp]
	mov	r8, QWORD PTR p1$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*4]
	mov	eax, DWORD PTR [rdx+rax*4]
	or	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR d$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8906
	mov	rax, QWORD PTR d$[rsp]
; Line 8907
	add	rsp, 56					; 00000038H
	ret	0
stb_bitset_union ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
d$ = 40
value$ = 64
len$ = 72
stb_bitset_new PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8923
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 8925
	movsxd	rax, DWORD PTR len$[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR d$[rsp], rax
; Line 8926
	cmp	DWORD PTR value$[rsp], 0
	je	SHORT $LN5@stb_bitset
	mov	DWORD PTR value$[rsp], -1
$LN5@stb_bitset:
; Line 8927
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_bitset
$LN2@stb_bitset:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_bitset:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_bitset
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	mov	edx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
	jmp	SHORT $LN2@stb_bitset
$LN3@stb_bitset:
; Line 8928
	mov	rax, QWORD PTR d$[rsp]
; Line 8929
	add	rsp, 56					; 00000038H
	ret	0
stb_bitset_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 40
tv68 = 48
a$ = 80
b$ = 88
?stb__dupe_compare@@YAHPEBX0@Z PROC			; stb__dupe_compare
; File W:\cpp\void\vendor\stb\stb.h
; Line 8628
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8629
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 8630
	mov	rax, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR q$[rsp], rax
; Line 8632
	mov	rax, QWORD PTR ?stb__compare@@3P6AHPEAX0@ZEA
	mov	QWORD PTR tv68[rsp], rax
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR tv68[rsp]
; Line 8633
	add	rsp, 72					; 00000048H
	ret	0
?stb__dupe_compare@@YAHPEBX0@Z ENDP			; stb__dupe_compare
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 32
sd$ = 64
num$ = 72
stb_dupe_set_count PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8573
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8574
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stb_dupe_s
	mov	r8d, 8574				; 0000217eH
	lea	rdx, OFFSET FLAT:$SG89571
	lea	rcx, OFFSET FLAT:$SG89572
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb_dupe_s:
; Line 8575
	movsxd	rax, DWORD PTR num$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN4@stb_dupe_s
	movsxd	rax, DWORD PTR num$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN5@stb_dupe_s
$LN4@stb_dupe_s:
	mov	DWORD PTR tv81[rsp], 0
$LN5@stb_dupe_s:
	mov	eax, DWORD PTR tv81[rsp]
; Line 8576
	add	rsp, 56					; 00000038H
	ret	0
stb_dupe_set_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sd$ = 48
num$ = 56
stb_dupe_set PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8567
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 8568
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stb_dupe_s
	mov	r8d, 8568				; 00002178H
	lea	rdx, OFFSET FLAT:$SG89562
	lea	rcx, OFFSET FLAT:$SG89563
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb_dupe_s:
; Line 8569
	movsxd	rax, DWORD PTR num$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rcx+rax*8]
; Line 8570
	add	rsp, 40					; 00000028H
	ret	0
stb_dupe_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
sd$ = 64
stb_dupe_numsets PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8561
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8562
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stb_dupe_n
	mov	r8d, 8562				; 00002172H
	lea	rdx, OFFSET FLAT:$SG89554
	lea	rcx, OFFSET FLAT:$SG89555
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb_dupe_n:
; Line 8563
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN4@stb_dupe_n
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN5@stb_dupe_n
$LN4@stb_dupe_n:
	mov	DWORD PTR tv75[rsp], 0
$LN5@stb_dupe_n:
	mov	eax, DWORD PTR tv75[rsp]
; Line 8564
	add	rsp, 56					; 00000038H
	ret	0
stb_dupe_numsets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
k$ = 36
output$1 = 40
n$2 = 48
i$ = 52
list$3 = 56
d$4 = 64
tv164 = 72
tv171 = 76
tv201 = 80
tv262 = 84
tv269 = 88
tv299 = 92
tv337 = 96
tv342 = 100
tv364 = 104
tv377 = 108
tv382 = 112
tv404 = 116
tv426 = 120
tv433 = 124
tv463 = 128
tv81 = 132
tv84 = 136
tv157 = 140
tv360 = 144
tv400 = 148
tv456 = 152
thresh$5 = 156
tv194 = 160
tv292 = 164
mylist$6 = 168
tv211 = 176
tv240 = 184
tv305 = 192
tv331 = 200
tv373 = 208
tv413 = 216
tv469 = 224
sd$ = 256
stb_dupe_finish PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8636
$LN87:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 8638
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN35@stb_dupe_f
	mov	r8d, 8638				; 000021beH
	lea	rdx, OFFSET FLAT:$SG89706
	lea	rcx, OFFSET FLAT:$SG89707
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN35@stb_dupe_f:
; Line 8639
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_dupe_f
$LN2@stb_dupe_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_dupe_f
; Line 8640
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR list$3[rsp], rax
; Line 8641
	cmp	QWORD PTR list$3[rsp], 0
	je	$LN23@stb_dupe_f
; Line 8642
	cmp	QWORD PTR list$3[rsp], 0
	je	SHORT $LN36@stb_dupe_f
	mov	rax, QWORD PTR list$3[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN37@stb_dupe_f
$LN36@stb_dupe_f:
	mov	DWORD PTR tv81[rsp], 0
$LN37@stb_dupe_f:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR n$2[rsp], eax
; Line 8644
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN38@stb_dupe_f
	mov	DWORD PTR tv84[rsp], 200		; 000000c8H
	jmp	SHORT $LN39@stb_dupe_f
$LN38@stb_dupe_f:
	mov	DWORD PTR tv84[rsp], 20
$LN39@stb_dupe_f:
	mov	eax, DWORD PTR tv84[rsp]
	mov	DWORD PTR thresh$5[rsp], eax
; Line 8648
	mov	eax, DWORD PTR thresh$5[rsp]
	cmp	DWORD PTR n$2[rsp], eax
	jle	$LN24@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sar	eax, 3
	cmp	DWORD PTR n$2[rsp], eax
	jge	$LN24@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	lea	eax, DWORD PTR [rcx+rax*2]
	cmp	eax, 32					; 00000020H
	jge	$LN24@stb_dupe_f
; Line 8652
	mov	rax, QWORD PTR sd$[rsp]
	mov	r9, QWORD PTR [rax+40]
	mov	r8d, DWORD PTR n$2[rsp]
	mov	rax, QWORD PTR sd$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	mov	rax, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	stb_dupe_create
	mov	QWORD PTR d$4[rsp], rax
; Line 8653
	mov	rax, QWORD PTR sd$[rsp]
	mov	ecx, DWORD PTR [rax+20]
	call	stb_randLCG_explicit
	mov	rcx, QWORD PTR d$4[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 8654
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stb_dupe_f
$LN5@stb_dupe_f:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stb_dupe_f:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stb_dupe_f
; Line 8655
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR list$3[rsp]
	mov	rdx, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR d$4[rsp]
	call	stb_dupe_add
	jmp	SHORT $LN5@stb_dupe_f
$LN6@stb_dupe_f:
; Line 8656
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, rax
	call	stb_arr_free_
; Line 8657
	mov	rcx, QWORD PTR d$4[rsp]
	call	stb_dupe_finish
; Line 8658
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stb_dupe_f
$LN8@stb_dupe_f:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stb_dupe_f:
	mov	rax, QWORD PTR d$4[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN40@stb_dupe_f
	mov	rax, QWORD PTR d$4[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv157[rsp], eax
	jmp	SHORT $LN41@stb_dupe_f
$LN40@stb_dupe_f:
	mov	DWORD PTR tv157[rsp], 0
$LN41@stb_dupe_f:
	mov	eax, DWORD PTR tv157[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN9@stb_dupe_f
; Line 8659
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR d$4[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv211[rsp], rax
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN42@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv164[rsp], eax
	jmp	SHORT $LN43@stb_dupe_f
$LN42@stb_dupe_f:
	mov	DWORD PTR tv164[rsp], 0
$LN43@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN44@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv171[rsp], eax
	jmp	SHORT $LN45@stb_dupe_f
$LN44@stb_dupe_f:
	mov	DWORD PTR tv171[rsp], 0
$LN45@stb_dupe_f:
	mov	eax, DWORD PTR tv164[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv171[rsp]
	jle	SHORT $LN47@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	add	rax, 48					; 00000030H
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN48@stb_dupe_f
$LN47@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN46@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN46@stb_dupe_f
	mov	r8d, 8659				; 000021d3H
	lea	rdx, OFFSET FLAT:$SG89711
	lea	rcx, OFFSET FLAT:$SG89712
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv194[rsp], 0
$LN48@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN49@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv201[rsp], eax
	jmp	SHORT $LN50@stb_dupe_f
$LN49@stb_dupe_f:
	mov	DWORD PTR tv201[rsp], 0
$LN50@stb_dupe_f:
	movsxd	rax, DWORD PTR tv201[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR tv211[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
; Line 8660
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR d$4[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rcx+rax*8], 0
; Line 8661
	jmp	$LN8@stb_dupe_f
$LN9@stb_dupe_f:
; Line 8662
	mov	rcx, QWORD PTR d$4[rsp]
	call	stb_dupe_free
	jmp	$LN25@stb_dupe_f
$LN24@stb_dupe_f:
; Line 8664
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	$LN26@stb_dupe_f
; Line 8667
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR ?stb__compare@@3P6AHPEAX0@ZEA, rax
; Line 8668
	movsxd	rax, DWORD PTR n$2[rsp]
	lea	r9, OFFSET FLAT:?stb__dupe_compare@@YAHPEBX0@Z ; stb__dupe_compare
	mov	r8d, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR list$3[rsp]
	call	QWORD PTR __imp_qsort
; Line 8671
	mov	DWORD PTR j$[rsp], 0
$LN11@stb_dupe_f:
	mov	eax, DWORD PTR n$2[rsp]
	dec	eax
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stb_dupe_f
; Line 8673
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN16@stb_dupe_f
$LN14@stb_dupe_f:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN16@stb_dupe_f:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN15@stb_dupe_f
; Line 8675
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv240[rsp], rax
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR list$3[rsp]
	mov	rdx, QWORD PTR [rdx+rax*8]
	mov	rax, QWORD PTR list$3[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	QWORD PTR tv240[rsp]
	test	eax, eax
	je	SHORT $LN28@stb_dupe_f
; Line 8676
	jmp	SHORT $LN15@stb_dupe_f
$LN28@stb_dupe_f:
	jmp	SHORT $LN14@stb_dupe_f
$LN15@stb_dupe_f:
; Line 8678
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 1
	jle	$LN29@stb_dupe_f
; Line 8679
	mov	QWORD PTR mylist$6[rsp], 0
; Line 8680
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR mylist$6[rsp]
	call	stb__arr_setlen_
; Line 8681
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cdqe
	shl	rax, 3
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR list$3[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR mylist$6[rsp]
	call	memcpy
; Line 8682
	mov	rax, QWORD PTR mylist$6[rsp]
	mov	QWORD PTR tv305[rsp], rax
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN51@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv262[rsp], eax
	jmp	SHORT $LN52@stb_dupe_f
$LN51@stb_dupe_f:
	mov	DWORD PTR tv262[rsp], 0
$LN52@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN53@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv269[rsp], eax
	jmp	SHORT $LN54@stb_dupe_f
$LN53@stb_dupe_f:
	mov	DWORD PTR tv269[rsp], 0
$LN54@stb_dupe_f:
	mov	eax, DWORD PTR tv262[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv269[rsp]
	jle	SHORT $LN56@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	add	rax, 48					; 00000030H
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv292[rsp], 0
	jmp	SHORT $LN57@stb_dupe_f
$LN56@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN55@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN55@stb_dupe_f
	mov	r8d, 8682				; 000021eaH
	lea	rdx, OFFSET FLAT:$SG89717
	lea	rcx, OFFSET FLAT:$SG89718
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN55@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv292[rsp], 0
$LN57@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN58@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv299[rsp], eax
	jmp	SHORT $LN59@stb_dupe_f
$LN58@stb_dupe_f:
	mov	DWORD PTR tv299[rsp], 0
$LN59@stb_dupe_f:
	movsxd	rax, DWORD PTR tv299[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR tv305[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
$LN29@stb_dupe_f:
; Line 8684
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR j$[rsp], eax
; Line 8685
	jmp	$LN11@stb_dupe_f
$LN12@stb_dupe_f:
; Line 8686
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, rax
	call	stb_arr_free_
; Line 8687
	jmp	$LN27@stb_dupe_f
$LN26@stb_dupe_f:
; Line 8690
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stb_dupe_f
$LN17@stb_dupe_f:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stb_dupe_f:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN18@stb_dupe_f
; Line 8691
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR list$3[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN30@stb_dupe_f
; Line 8692
	mov	QWORD PTR output$1[rsp], 0
; Line 8693
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN22@stb_dupe_f
$LN20@stb_dupe_f:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN22@stb_dupe_f:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN21@stb_dupe_f
; Line 8694
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv331[rsp], rax
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR list$3[rsp]
	mov	rdx, QWORD PTR [rdx+rax*8]
	mov	rax, QWORD PTR list$3[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	QWORD PTR tv331[rsp]
	test	eax, eax
	je	$LN31@stb_dupe_f
; Line 8695
	cmp	QWORD PTR output$1[rsp], 0
	jne	$LN32@stb_dupe_f
; Line 8696
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR list$3[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv373[rsp], rax
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN60@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN61@stb_dupe_f
$LN60@stb_dupe_f:
	mov	DWORD PTR tv337[rsp], 0
$LN61@stb_dupe_f:
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN62@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv342[rsp], eax
	jmp	SHORT $LN63@stb_dupe_f
$LN62@stb_dupe_f:
	mov	DWORD PTR tv342[rsp], 0
$LN63@stb_dupe_f:
	mov	eax, DWORD PTR tv337[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv342[rsp]
	jle	SHORT $LN65@stb_dupe_f
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR output$1[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv360[rsp], 0
	jmp	SHORT $LN66@stb_dupe_f
$LN65@stb_dupe_f:
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN64@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN64@stb_dupe_f
	mov	r8d, 8696				; 000021f8H
	lea	rdx, OFFSET FLAT:$SG89722
	lea	rcx, OFFSET FLAT:$SG89723
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN64@stb_dupe_f:
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR output$1[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv360[rsp], 0
$LN66@stb_dupe_f:
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN67@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv364[rsp], eax
	jmp	SHORT $LN68@stb_dupe_f
$LN67@stb_dupe_f:
	mov	DWORD PTR tv364[rsp], 0
$LN68@stb_dupe_f:
	movsxd	rax, DWORD PTR tv364[rsp]
	mov	rcx, QWORD PTR output$1[rsp]
	mov	rdx, QWORD PTR tv373[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
$LN32@stb_dupe_f:
; Line 8697
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR list$3[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv413[rsp], rax
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN69@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv377[rsp], eax
	jmp	SHORT $LN70@stb_dupe_f
$LN69@stb_dupe_f:
	mov	DWORD PTR tv377[rsp], 0
$LN70@stb_dupe_f:
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN71@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv382[rsp], eax
	jmp	SHORT $LN72@stb_dupe_f
$LN71@stb_dupe_f:
	mov	DWORD PTR tv382[rsp], 0
$LN72@stb_dupe_f:
	mov	eax, DWORD PTR tv377[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv382[rsp]
	jle	SHORT $LN74@stb_dupe_f
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR output$1[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv400[rsp], 0
	jmp	SHORT $LN75@stb_dupe_f
$LN74@stb_dupe_f:
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN73@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN73@stb_dupe_f
	mov	r8d, 8697				; 000021f9H
	lea	rdx, OFFSET FLAT:$SG89724
	lea	rcx, OFFSET FLAT:$SG89725
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN73@stb_dupe_f:
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR output$1[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv400[rsp], 0
$LN75@stb_dupe_f:
	cmp	QWORD PTR output$1[rsp], 0
	je	SHORT $LN76@stb_dupe_f
	mov	rax, QWORD PTR output$1[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv404[rsp], eax
	jmp	SHORT $LN77@stb_dupe_f
$LN76@stb_dupe_f:
	mov	DWORD PTR tv404[rsp], 0
$LN77@stb_dupe_f:
	movsxd	rax, DWORD PTR tv404[rsp]
	mov	rcx, QWORD PTR output$1[rsp]
	mov	rdx, QWORD PTR tv413[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
; Line 8698
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR list$3[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN31@stb_dupe_f:
; Line 8700
	jmp	$LN20@stb_dupe_f
$LN21@stb_dupe_f:
; Line 8701
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR list$3[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
; Line 8702
	cmp	QWORD PTR output$1[rsp], 0
	je	$LN33@stb_dupe_f
; Line 8703
	mov	rax, QWORD PTR output$1[rsp]
	mov	QWORD PTR tv469[rsp], rax
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN78@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv426[rsp], eax
	jmp	SHORT $LN79@stb_dupe_f
$LN78@stb_dupe_f:
	mov	DWORD PTR tv426[rsp], 0
$LN79@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN80@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv433[rsp], eax
	jmp	SHORT $LN81@stb_dupe_f
$LN80@stb_dupe_f:
	mov	DWORD PTR tv433[rsp], 0
$LN81@stb_dupe_f:
	mov	eax, DWORD PTR tv426[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv433[rsp]
	jle	SHORT $LN83@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	add	rax, 48					; 00000030H
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv456[rsp], 0
	jmp	SHORT $LN84@stb_dupe_f
$LN83@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN82@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN82@stb_dupe_f
	mov	r8d, 8703				; 000021ffH
	lea	rdx, OFFSET FLAT:$SG89727
	lea	rcx, OFFSET FLAT:$SG89728
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN82@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv456[rsp], 0
$LN84@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN85@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv463[rsp], eax
	jmp	SHORT $LN86@stb_dupe_f
$LN85@stb_dupe_f:
	mov	DWORD PTR tv463[rsp], 0
$LN86@stb_dupe_f:
	movsxd	rax, DWORD PTR tv463[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR tv469[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
$LN33@stb_dupe_f:
$LN30@stb_dupe_f:
; Line 8705
	jmp	$LN17@stb_dupe_f
$LN18@stb_dupe_f:
; Line 8706
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, rax
	call	stb_arr_free_
$LN27@stb_dupe_f:
$LN25@stb_dupe_f:
$LN23@stb_dupe_f:
; Line 8709
	jmp	$LN2@stb_dupe_f
$LN3@stb_dupe_f:
; Line 8710
	mov	rax, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
; Line 8711
	mov	rax, QWORD PTR sd$[rsp]
	mov	QWORD PTR [rax], 0
; Line 8712
	add	rsp, 248				; 000000f8H
	ret	0
stb_dupe_finish ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv85 = 36
tv130 = 40
tv184 = 44
hash$ = 48
tv168 = 52
tv70 = 56
tv190 = 64
sd$ = 96
item$ = 104
stb_dupe_add PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8608
$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 8609
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv70[rsp], rax
	mov	rax, QWORD PTR sd$[rsp]
	mov	edx, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR item$[rsp]
	call	QWORD PTR tv70[rsp]
	mov	DWORD PTR hash$[rsp], eax
; Line 8610
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	ecx, DWORD PTR hash$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 8611
	mov	rax, QWORD PTR item$[rsp]
	mov	QWORD PTR tv190[rsp], rax
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN3@stb_dupe_a
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv85[rsp], eax
	jmp	SHORT $LN4@stb_dupe_a
$LN3@stb_dupe_a:
	mov	DWORD PTR tv85[rsp], 0
$LN4@stb_dupe_a:
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN5@stb_dupe_a
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv130[rsp], eax
	jmp	SHORT $LN6@stb_dupe_a
$LN5@stb_dupe_a:
	mov	DWORD PTR tv130[rsp], 0
$LN6@stb_dupe_a:
	mov	eax, DWORD PTR tv85[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv130[rsp]
	jle	SHORT $LN8@stb_dupe_a
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv168[rsp], 0
	jmp	SHORT $LN9@stb_dupe_a
$LN8@stb_dupe_a:
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN7@stb_dupe_a
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN7@stb_dupe_a
	mov	r8d, 8611				; 000021a3H
	lea	rdx, OFFSET FLAT:$SG89603
	lea	rcx, OFFSET FLAT:$SG89604
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb_dupe_a:
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	movsxd	rcx, DWORD PTR z$[rsp]
	mov	rdx, QWORD PTR sd$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv168[rsp], 0
$LN9@stb_dupe_a:
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN10@stb_dupe_a
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv184[rsp], eax
	jmp	SHORT $LN11@stb_dupe_a
$LN10@stb_dupe_a:
	mov	DWORD PTR tv184[rsp], 0
$LN11@stb_dupe_a:
	movsxd	rax, DWORD PTR z$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR tv184[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR tv190[rsp]
	mov	QWORD PTR [rax+rdx*8-8], rcx
; Line 8612
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+16]
	inc	eax
	mov	rcx, QWORD PTR sd$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 8613
	add	rsp, 88					; 00000058H
	ret	0
stb_dupe_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsize$ = 32
i$ = 36
tv139 = 40
sd$ = 48
hash$ = 80
eq$ = 88
size$ = 96
ineq$ = 104
stb_dupe_create PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8580
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8582
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR sd$[rsp], rax
; Line 8584
	mov	rax, QWORD PTR sd$[rsp]
	mov	DWORD PTR [rax+12], 4
; Line 8585
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, 1
	mov	DWORD PTR tv139[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv139[rsp]
	shl	eax, cl
	mov	DWORD PTR hsize$[rsp], eax
$LN2@stb_dupe_c:
; Line 8586
	mov	eax, DWORD PTR hsize$[rsp]
	imul	eax, DWORD PTR hsize$[rsp]
	cmp	eax, DWORD PTR size$[rsp]
	jge	SHORT $LN3@stb_dupe_c
; Line 8587
	mov	rax, QWORD PTR sd$[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR sd$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 8588
	mov	eax, DWORD PTR hsize$[rsp]
	shl	eax, 1
	mov	DWORD PTR hsize$[rsp], eax
; Line 8589
	jmp	SHORT $LN2@stb_dupe_c
$LN3@stb_dupe_c:
; Line 8591
	mov	rax, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR hash$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 8592
	mov	rax, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR eq$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 8593
	mov	rax, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR ineq$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 8594
	mov	rax, QWORD PTR sd$[rsp]
	mov	DWORD PTR [rax+20], 0
; Line 8596
	mov	rax, QWORD PTR sd$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 8597
	mov	rax, QWORD PTR sd$[rsp]
	mov	ecx, DWORD PTR hsize$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 8598
	movsxd	rax, DWORD PTR hsize$[rsp]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR sd$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 8599
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_dupe_c
$LN4@stb_dupe_c:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_dupe_c:
	mov	eax, DWORD PTR hsize$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN5@stb_dupe_c
; Line 8600
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN4@stb_dupe_c
$LN5@stb_dupe_c:
; Line 8602
	mov	rax, QWORD PTR sd$[rsp]
	mov	QWORD PTR [rax+48], 0
; Line 8604
	mov	rax, QWORD PTR sd$[rsp]
; Line 8605
	add	rsp, 72					; 00000048H
	ret	0
stb_dupe_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv70 = 36
sd$ = 64
stb_dupe_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8616
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8618
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_dupe_f
$LN2@stb_dupe_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_dupe_f:
	mov	rax, QWORD PTR sd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN7@stb_dupe_f
	mov	rax, QWORD PTR sd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN8@stb_dupe_f
$LN7@stb_dupe_f:
	mov	DWORD PTR tv70[rsp], 0
$LN8@stb_dupe_f:
	mov	eax, DWORD PTR tv70[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_dupe_f
; Line 8619
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN5@stb_dupe_f
; Line 8620
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sd$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, rax
	call	stb_arr_free_
$LN5@stb_dupe_f:
	jmp	SHORT $LN2@stb_dupe_f
$LN3@stb_dupe_f:
; Line 8621
	mov	rax, QWORD PTR sd$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	stb_arr_free_
; Line 8622
	mov	rcx, QWORD PTR sd$[rsp]
	call	QWORD PTR __imp_free
; Line 8623
	add	rsp, 56					; 00000038H
	ret	0
stb_dupe_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
seed$ = 8
stb_randLCG_explicit PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8372
	mov	DWORD PTR [rsp+8], ecx
; Line 8373
	imul	eax, DWORD PTR seed$[rsp], 2147001325	; 7ff8a3edH
	add	eax, 715136305				; 2aa01d31H
; Line 8374
	ret	0
stb_randLCG_explicit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
i$ = 40
p$ = 64
n$ = 72
sz$ = 80
stb_reverse PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8416
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8417
	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	mov	QWORD PTR j$[rsp], rax
; Line 8418
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_revers
$LN2@stb_revers:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
	mov	rax, QWORD PTR j$[rsp]
	dec	rax
	mov	QWORD PTR j$[rsp], rax
$LN4@stb_revers:
	mov	rax, QWORD PTR j$[rsp]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN3@stb_revers
; Line 8419
	mov	rax, QWORD PTR j$[rsp]
	imul	rax, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$[rsp]
	imul	rcx, QWORD PTR sz$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, QWORD PTR sz$[rsp]
	mov	rdx, rax
	call	stb_swap
; Line 8420
	jmp	SHORT $LN2@stb_revers
$LN3@stb_revers:
; Line 8421
	add	rsp, 56					; 00000038H
	ret	0
stb_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
j$1 = 36
old_seed$ = 40
a$ = 48
p$ = 80
n$ = 88
sz$ = 96
seed$ = 104
stb_shuffle PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8398
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 8402
	cmp	DWORD PTR seed$[rsp], 0
	je	SHORT $LN5@stb_shuffl
; Line 8403
	mov	ecx, DWORD PTR seed$[rsp]
	call	stb_srandLCG
	mov	DWORD PTR old_seed$[rsp], eax
$LN5@stb_shuffl:
; Line 8404
	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	imul	rax, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp], rax
; Line 8406
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN4@stb_shuffl
$LN2@stb_shuffl:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_shuffl:
	cmp	DWORD PTR i$[rsp], 1
	jle	SHORT $LN3@stb_shuffl
; Line 8407
	call	stb_randLCG
	xor	edx, edx
	div	DWORD PTR i$[rsp]
	mov	eax, edx
	mov	DWORD PTR j$1[rsp], eax
; Line 8408
	movsxd	rax, DWORD PTR j$1[rsp]
	imul	rax, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR sz$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	stb_swap
; Line 8409
	mov	rax, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp], rax
; Line 8410
	jmp	SHORT $LN2@stb_shuffl
$LN3@stb_shuffl:
; Line 8411
	cmp	DWORD PTR seed$[rsp], 0
	je	SHORT $LN6@stb_shuffl
; Line 8412
	mov	ecx, DWORD PTR old_seed$[rsp]
	call	stb_srandLCG
$LN6@stb_shuffl:
; Line 8413
	add	rsp, 72					; 00000048H
	ret	0
stb_shuffle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stb_frand PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8483
$LN3:
	sub	rsp, 40					; 00000028H
; Line 8484
	call	stb_rand
	mov	eax, eax
	cvtsi2sd xmm0, rax
	divsd	xmm0, QWORD PTR __real@41f0000000000000
; Line 8485
	add	rsp, 40					; 00000028H
	ret	0
stb_frand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
r$ = 36
s$ = 40
idx$ = 44
b$ = 48
stb_rand PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8447
$LN11:
	sub	rsp, 72					; 00000048H
; Line 8448
	lea	rax, OFFSET FLAT:?stb__mt_buffer@@3PAIA	; stb__mt_buffer
	mov	QWORD PTR b$[rsp], rax
; Line 8449
	mov	eax, DWORD PTR ?stb__mt_index@@3HA	; stb__mt_index
	mov	DWORD PTR idx$[rsp], eax
; Line 8453
	movsxd	rax, DWORD PTR idx$[rsp]
	cmp	rax, 2496				; 000009c0H
	jb	$LN8@stb_rand
; Line 8454
	movsxd	rax, DWORD PTR idx$[rsp]
	cmp	rax, 2496				; 000009c0H
	jbe	SHORT $LN9@stb_rand
; Line 8455
	xor	ecx, ecx
	call	stb_srand
$LN9@stb_rand:
; Line 8456
	mov	DWORD PTR idx$[rsp], 0
; Line 8457
	mov	DWORD PTR i$[rsp], 0
; Line 8458
	jmp	SHORT $LN4@stb_rand
$LN2@stb_rand:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_rand:
	cmp	DWORD PTR i$[rsp], 227			; 000000e3H
	jge	SHORT $LN3@stb_rand
; Line 8459
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	btr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR s$[rsp], eax
; Line 8460
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 397				; 0000018dH
	cdqe
	mov	ecx, DWORD PTR s$[rsp]
	shr	ecx, 1
	mov	rdx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	xor	eax, ecx
	mov	ecx, DWORD PTR s$[rsp]
	and	ecx, 1
	imul	ecx, ecx, -1727483681			; 9908b0dfH
	xor	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 8461
	jmp	SHORT $LN2@stb_rand
$LN3@stb_rand:
; Line 8462
	jmp	SHORT $LN7@stb_rand
$LN5@stb_rand:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb_rand:
	cmp	DWORD PTR i$[rsp], 623			; 0000026fH
	jge	SHORT $LN6@stb_rand
; Line 8463
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, -2147483648			; 80000000H
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	btr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR s$[rsp], eax
; Line 8464
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 227				; 000000e3H
	cdqe
	mov	ecx, DWORD PTR s$[rsp]
	shr	ecx, 1
	mov	rdx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]
	xor	eax, ecx
	mov	ecx, DWORD PTR s$[rsp]
	and	ecx, 1
	imul	ecx, ecx, -1727483681			; 9908b0dfH
	xor	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 8465
	jmp	SHORT $LN5@stb_rand
$LN6@stb_rand:
; Line 8467
	mov	eax, 4
	imul	rax, rax, 623				; 0000026fH
	mov	rcx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, -2147483648			; 80000000H
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rdx+rcx]
	btr	ecx, 31
	or	eax, ecx
	mov	DWORD PTR s$[rsp], eax
; Line 8468
	mov	eax, 4
	imul	rax, rax, 396				; 0000018cH
	mov	ecx, DWORD PTR s$[rsp]
	shr	ecx, 1
	mov	rdx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rdx+rax]
	xor	eax, ecx
	mov	ecx, DWORD PTR s$[rsp]
	and	ecx, 1
	imul	ecx, ecx, -1727483681			; 9908b0dfH
	xor	eax, ecx
	mov	ecx, 4
	imul	rcx, rcx, 623				; 0000026fH
	mov	rdx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN8@stb_rand:
; Line 8470
	movsxd	rax, DWORD PTR idx$[rsp]
	add	rax, 4
	mov	DWORD PTR ?stb__mt_index@@3HA, eax	; stb__mt_index
; Line 8472
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR r$[rsp], eax
; Line 8474
	mov	eax, DWORD PTR r$[rsp]
	shr	eax, 11
	mov	ecx, DWORD PTR r$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 8475
	mov	eax, DWORD PTR r$[rsp]
	shl	eax, 7
	and	eax, -1658038656			; 9d2c5680H
	mov	ecx, DWORD PTR r$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 8476
	mov	eax, DWORD PTR r$[rsp]
	shl	eax, 15
	and	eax, -272236544				; efc60000H
	mov	ecx, DWORD PTR r$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 8477
	mov	eax, DWORD PTR r$[rsp]
	shr	eax, 18
	mov	ecx, DWORD PTR r$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 8479
	mov	eax, DWORD PTR r$[rsp]
; Line 8480
	add	rsp, 72					; 00000048H
	ret	0
stb_rand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
seed$ = 32
stb_srand PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8430
$LN6:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 8432
	mov	eax, 4
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?stb__mt_buffer@@3PAIA	; stb__mt_buffer
	mov	edx, DWORD PTR seed$[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 8433
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stb_srand
$LN2@stb_srand:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_srand:
	cmp	DWORD PTR i$[rsp], 624			; 00000270H
	jge	SHORT $LN3@stb_srand
; Line 8434
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	lea	rcx, OFFSET FLAT:?stb__mt_buffer@@3PAIA	; stb__mt_buffer
	mov	edx, DWORD PTR i$[rsp]
	dec	edx
	movsxd	rdx, edx
	lea	r8, OFFSET FLAT:?stb__mt_buffer@@3PAIA	; stb__mt_buffer
	mov	edx, DWORD PTR [r8+rdx*4]
	shr	edx, 30
	mov	eax, DWORD PTR [rcx+rax*4]
	xor	eax, edx
	imul	eax, eax, 1812433253			; 6c078965H
	add	eax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?stb__mt_buffer@@3PAIA	; stb__mt_buffer
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stb_srand
$LN3@stb_srand:
; Line 8435
	mov	DWORD PTR ?stb__mt_index@@3HA, 2496	; stb__mt_index, 000009c0H
; Line 8436
	add	rsp, 24
	ret	0
stb_srand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stb_frandLCG PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8393
$LN3:
	sub	rsp, 40					; 00000028H
; Line 8394
	call	stb_randLCG
	mov	eax, eax
	cvtsi2sd xmm0, rax
	divsd	xmm0, QWORD PTR __real@41f0000000000000
; Line 8395
	add	rsp, 40					; 00000028H
	ret	0
stb_frandLCG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stb_randLCG PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8387
	imul	eax, DWORD PTR ?stb__rand_seed@@3IA, 2147001325 ; 7ff8a3edH
	add	eax, 715136305				; 2aa01d31H
	mov	DWORD PTR ?stb__rand_seed@@3IA, eax
; Line 8389
	mov	eax, DWORD PTR ?stb__rand_seed@@3IA
	shr	eax, 16
	mov	ecx, DWORD PTR ?stb__rand_seed@@3IA
	shl	ecx, 16
	add	eax, ecx
	xor	eax, 826366246				; 31415926H
; Line 8390
	ret	0
stb_randLCG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
previous$ = 0
seed$ = 32
stb_srandLCG PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8379
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 8380
	mov	eax, DWORD PTR ?stb__rand_seed@@3IA
	mov	DWORD PTR previous$[rsp], eax
; Line 8381
	mov	eax, DWORD PTR seed$[rsp]
	mov	DWORD PTR ?stb__rand_seed@@3IA, eax
; Line 8382
	mov	eax, DWORD PTR previous$[rsp]
; Line 8383
	add	rsp, 24
	ret	0
stb_srandLCG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 40
size$ = 64
old_size$ = 72
old_data$ = 80
?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z PROC	; stb_ps_makehash
; File W:\cpp\void\vendor\stb\stb.h
; Line 7835
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 7837
	mov	eax, DWORD PTR size$[rsp]
	dec	eax
	cdqe
	lea	rax, QWORD PTR [rax*8+40]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
; Line 7838
	movsxd	rax, DWORD PTR size$[rsp]
	mov	rcx, rax
	call	stb_is_pow2
	test	eax, eax
	jne	SHORT $LN7@stb_ps_mak
	mov	r8d, 7838				; 00001e9eH
	lea	rdx, OFFSET FLAT:$SG88882
	lea	rcx, OFFSET FLAT:$SG88883
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb_ps_mak:
; Line 7839
	mov	rax, QWORD PTR h$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7840
	mov	eax, DWORD PTR size$[rsp]
	dec	eax
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 7841
	cvtsi2ss xmm0, DWORD PTR size$[rsp]
	movss	xmm1, DWORD PTR __real@3e99999a
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 7842
	cvtsi2ss xmm0, DWORD PTR size$[rsp]
	movss	xmm1, DWORD PTR __real@3f4ccccd
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 7843
	cvtsi2ss xmm0, DWORD PTR size$[rsp]
	movss	xmm1, DWORD PTR __real@3f666666
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 7844
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 7845
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 7846
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 7847
	movsxd	rax, DWORD PTR size$[rsp]
	shl	rax, 3
	mov	rcx, QWORD PTR h$[rsp]
	add	rcx, 32					; 00000020H
	mov	r8, rax
	xor	edx, edx
	call	memset
; Line 7848
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ps_mak
$LN2@stb_ps_mak:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ps_mak:
	mov	eax, DWORD PTR old_size$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_ps_mak
; Line 7849
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR old_data$[rsp]
	cmp	DWORD PTR [rcx+rax*8], 1
	jbe	SHORT $LN5@stb_ps_mak
; Line 7850
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	add	rcx, 3
	mov	rdx, QWORD PTR old_data$[rsp]
	mov	rdx, QWORD PTR [rdx+rax*8]
	call	stb_ps_add
$LN5@stb_ps_mak:
	jmp	SHORT $LN2@stb_ps_mak
$LN3@stb_ps_mak:
; Line 7851
	mov	rax, QWORD PTR h$[rsp]
; Line 7852
	add	rsp, 56					; 00000038H
	ret	0
?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z ENDP	; stb_ps_makehash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
v$ = 64
?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z PROC ; stb_bucket_create3
; File W:\cpp\void\vendor\stb\stb.h
; Line 7798
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7799
	mov	ecx, 32					; 00000020H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR b$[rsp], rax
; Line 7800
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx+rcx], rax
; Line 7801
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx+rcx], rax
; Line 7802
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx+rcx], rax
; Line 7803
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rcx+rax], 0
; Line 7804
	mov	rax, QWORD PTR b$[rsp]
; Line 7805
	add	rsp, 56					; 00000038H
	ret	0
?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z ENDP ; stb_bucket_create3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
v0$ = 64
v1$ = 72
?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z PROC	; stb_bucket_create2
; File W:\cpp\void\vendor\stb\stb.h
; Line 7788
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7789
	mov	ecx, 32					; 00000020H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR b$[rsp], rax
; Line 7790
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR v0$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 7791
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR v1$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 7792
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rcx+rax], 0
; Line 7793
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rcx+rax], 0
; Line 7794
	mov	rax, QWORD PTR b$[rsp]
; Line 7795
	add	rsp, 56					; 00000038H
	ret	0
?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z ENDP	; stb_bucket_create2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z PROC		; stb_bucket_free
; File W:\cpp\void\vendor\stb\stb.h
; Line 7783
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7784
	mov	rcx, QWORD PTR b$[rsp]
	call	QWORD PTR __imp_free
; Line 7785
	add	rsp, 40					; 00000028H
	ret	0
?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z ENDP		; stb_bucket_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
a$1 = 8
h$2 = 16
b$3 = 24
ps$ = 48
count$ = 56
stb_ps_fastlist PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8286
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 8289
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN4@stb_ps_fas
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN6@stb_ps_fas
	cmp	DWORD PTR tv65[rsp], 2
	je	SHORT $LN7@stb_ps_fas
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN8@stb_ps_fas
	jmp	$LN2@stb_ps_fas
$LN4@stb_ps_fas:
; Line 8291
	cmp	QWORD PTR ps$[rsp], 0
	jne	SHORT $LN5@stb_ps_fas
	mov	rax, QWORD PTR count$[rsp]
	mov	DWORD PTR [rax], 0
	xor	eax, eax
	jmp	$LN1@stb_ps_fas
$LN5@stb_ps_fas:
; Line 8292
	mov	rax, QWORD PTR ps$[rsp]
	mov	QWORD PTR ?storage@?1??stb_ps_fastlist@@9@4PEAXEA, rax
; Line 8293
	mov	rax, QWORD PTR count$[rsp]
	mov	DWORD PTR [rax], 1
; Line 8294
	lea	rax, OFFSET FLAT:?storage@?1??stb_ps_fastlist@@9@4PEAXEA
	jmp	SHORT $LN1@stb_ps_fas
$LN6@stb_ps_fas:
; Line 8296
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$3[rsp], rax
; Line 8297
	mov	rax, QWORD PTR count$[rsp]
	mov	DWORD PTR [rax], 4
; Line 8298
	mov	rax, QWORD PTR b$3[rsp]
	jmp	SHORT $LN1@stb_ps_fas
$LN7@stb_ps_fas:
; Line 8301
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$1[rsp], rax
; Line 8302
	mov	rax, QWORD PTR count$[rsp]
	mov	rcx, QWORD PTR a$1[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 8303
	mov	rax, QWORD PTR a$1[rsp]
	add	rax, 8
	jmp	SHORT $LN1@stb_ps_fas
$LN8@stb_ps_fas:
; Line 8306
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$2[rsp], rax
; Line 8307
	mov	rax, QWORD PTR count$[rsp]
	mov	rcx, QWORD PTR h$2[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 8308
	mov	rax, QWORD PTR h$2[rsp]
	add	rax, 32					; 00000020H
	jmp	SHORT $LN1@stb_ps_fas
$LN2@stb_ps_fas:
; Line 8311
	xor	eax, eax
$LN1@stb_ps_fas:
; Line 8312
	add	rsp, 40					; 00000028H
	ret	0
stb_ps_fastlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv65 = 36
h$1 = 40
b$2 = 48
a$3 = 56
tv71 = 64
tv88 = 72
tv134 = 80
tv153 = 88
ps$ = 112
data$ = 120
func$ = 128
stb_ps_enum PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8230
$LN24:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 8232
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN13@stb_ps_enu
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN15@stb_ps_enu
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN18@stb_ps_enu
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN20@stb_ps_enu
	jmp	$LN2@stb_ps_enu
$LN13@stb_ps_enu:
; Line 8234
	cmp	QWORD PTR ps$[rsp], 0
	jne	SHORT $LN14@stb_ps_enu
	mov	eax, 1
	jmp	$LN1@stb_ps_enu
$LN14@stb_ps_enu:
; Line 8235
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv71[rsp], rax
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR ps$[rsp]
	call	QWORD PTR tv71[rsp]
	jmp	$LN1@stb_ps_enu
$LN15@stb_ps_enu:
; Line 8237
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$2[rsp], rax
; Line 8238
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_ps_enu
$LN4@stb_ps_enu:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_ps_enu:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN5@stb_ps_enu
; Line 8239
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR b$2[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN16@stb_ps_enu
; Line 8240
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv88[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR tv88[rsp]
	test	eax, eax
	jne	SHORT $LN17@stb_ps_enu
; Line 8241
	xor	eax, eax
	jmp	$LN1@stb_ps_enu
$LN17@stb_ps_enu:
$LN16@stb_ps_enu:
	jmp	SHORT $LN4@stb_ps_enu
$LN5@stb_ps_enu:
; Line 8242
	mov	eax, 1
	jmp	$LN1@stb_ps_enu
$LN18@stb_ps_enu:
; Line 8245
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$3[rsp], rax
; Line 8246
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stb_ps_enu
$LN7@stb_ps_enu:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stb_ps_enu:
	mov	rax, QWORD PTR a$3[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN8@stb_ps_enu
; Line 8247
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv134[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR a$3[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8+8]
	call	QWORD PTR tv134[rsp]
	test	eax, eax
	jne	SHORT $LN19@stb_ps_enu
; Line 8248
	xor	eax, eax
	jmp	$LN1@stb_ps_enu
$LN19@stb_ps_enu:
	jmp	SHORT $LN7@stb_ps_enu
$LN8@stb_ps_enu:
; Line 8249
	mov	eax, 1
	jmp	SHORT $LN1@stb_ps_enu
$LN20@stb_ps_enu:
; Line 8252
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$1[rsp], rax
; Line 8253
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stb_ps_enu
$LN10@stb_ps_enu:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stb_ps_enu:
	mov	rax, QWORD PTR h$1[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stb_ps_enu
; Line 8254
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$1[rsp]
	cmp	DWORD PTR [rcx+rax*8+32], 1
	jbe	SHORT $LN21@stb_ps_enu
; Line 8255
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv153[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8+32]
	call	QWORD PTR tv153[rsp]
	test	eax, eax
	jne	SHORT $LN22@stb_ps_enu
; Line 8256
	xor	eax, eax
	jmp	SHORT $LN1@stb_ps_enu
$LN22@stb_ps_enu:
$LN21@stb_ps_enu:
	jmp	SHORT $LN10@stb_ps_enu
$LN11@stb_ps_enu:
; Line 8257
	mov	eax, 1
	jmp	SHORT $LN1@stb_ps_enu
$LN2@stb_ps_enu:
; Line 8260
	mov	eax, 1
$LN1@stb_ps_enu:
; Line 8261
	add	rsp, 104				; 00000068H
	ret	0
stb_ps_enum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
i$ = 36
tv65 = 40
tv91 = 44
a$1 = 48
h$2 = 56
b$3 = 64
ps$ = 96
list$ = 104
size$ = 112
stb_ps_writelist PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8194
$LN23:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 8195
	mov	DWORD PTR n$[rsp], 0
; Line 8196
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN10@stb_ps_wri
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN13@stb_ps_wri
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN15@stb_ps_wri
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN16@stb_ps_wri
	jmp	$LN2@stb_ps_wri
$LN10@stb_ps_wri:
; Line 8198
	cmp	QWORD PTR ps$[rsp], 0
	je	SHORT $LN12@stb_ps_wri
	cmp	DWORD PTR size$[rsp], 0
	jg	SHORT $LN11@stb_ps_wri
$LN12@stb_ps_wri:
	xor	eax, eax
	jmp	$LN1@stb_ps_wri
$LN11@stb_ps_wri:
; Line 8199
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR ps$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 8200
	mov	eax, 1
	jmp	$LN1@stb_ps_wri
$LN13@stb_ps_wri:
; Line 8202
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$3[rsp], rax
; Line 8203
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_ps_wri
$LN4@stb_ps_wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_ps_wri:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN5@stb_ps_wri
; Line 8204
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR b$3[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN14@stb_ps_wri
	mov	eax, DWORD PTR size$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN14@stb_ps_wri
; Line 8205
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR b$3[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN14@stb_ps_wri:
	jmp	SHORT $LN4@stb_ps_wri
$LN5@stb_ps_wri:
; Line 8206
	mov	eax, DWORD PTR n$[rsp]
	jmp	$LN1@stb_ps_wri
$LN15@stb_ps_wri:
; Line 8209
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$1[rsp], rax
; Line 8210
	mov	rax, QWORD PTR a$1[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR size$[rsp], eax
	jge	SHORT $LN21@stb_ps_wri
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN22@stb_ps_wri
$LN21@stb_ps_wri:
	mov	rax, QWORD PTR a$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv91[rsp], eax
$LN22@stb_ps_wri:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 8211
	movsxd	rax, DWORD PTR n$[rsp]
	shl	rax, 3
	mov	rcx, QWORD PTR a$1[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR list$[rsp]
	call	memcpy
; Line 8212
	mov	eax, DWORD PTR n$[rsp]
	jmp	$LN1@stb_ps_wri
$LN16@stb_ps_wri:
; Line 8215
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$2[rsp], rax
; Line 8216
	cmp	DWORD PTR size$[rsp], 0
	jg	SHORT $LN17@stb_ps_wri
	xor	eax, eax
	jmp	SHORT $LN1@stb_ps_wri
$LN17@stb_ps_wri:
; Line 8217
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stb_ps_wri
$LN7@stb_ps_wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stb_ps_wri:
	mov	rax, QWORD PTR h$2[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN8@stb_ps_wri
; Line 8218
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$2[rsp]
	cmp	DWORD PTR [rcx+rax*8+32], 1
	jbe	SHORT $LN18@stb_ps_wri
; Line 8219
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR h$2[rsp]
	mov	rax, QWORD PTR [r8+rax*8+32]
	mov	QWORD PTR [rdx+rcx*8], rax
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 8220
	mov	eax, DWORD PTR size$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jne	SHORT $LN19@stb_ps_wri
	jmp	SHORT $LN8@stb_ps_wri
$LN19@stb_ps_wri:
$LN18@stb_ps_wri:
; Line 8222
	jmp	SHORT $LN7@stb_ps_wri
$LN8@stb_ps_wri:
; Line 8223
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stb_ps_wri
$LN2@stb_ps_wri:
; Line 8226
	xor	eax, eax
$LN1@stb_ps_wri:
; Line 8227
	add	rsp, 88					; 00000058H
	ret	0
stb_ps_writelist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
n$ = 36
tv65 = 40
p$ = 48
a$1 = 56
h$2 = 64
b$3 = 72
ps$ = 96
count$ = 104
stb_ps_getlist PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8155
$LN18:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 8156
	mov	DWORD PTR n$[rsp], 0
; Line 8157
	mov	QWORD PTR p$[rsp], 0
; Line 8158
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN10@stb_ps_get
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN12@stb_ps_get
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN14@stb_ps_get
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN15@stb_ps_get
	jmp	$LN2@stb_ps_get
$LN10@stb_ps_get:
; Line 8160
	cmp	QWORD PTR ps$[rsp], 0
	jne	SHORT $LN11@stb_ps_get
	mov	rax, QWORD PTR count$[rsp]
	mov	DWORD PTR [rax], 0
	xor	eax, eax
	jmp	$LN1@stb_ps_get
$LN11@stb_ps_get:
; Line 8161
	mov	ecx, 8
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
; Line 8162
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR ps$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 8163
	mov	rax, QWORD PTR count$[rsp]
	mov	DWORD PTR [rax], 1
; Line 8164
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb_ps_get
$LN12@stb_ps_get:
; Line 8166
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$3[rsp], rax
; Line 8167
	mov	ecx, 32					; 00000020H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
; Line 8168
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_ps_get
$LN4@stb_ps_get:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_ps_get:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN5@stb_ps_get
; Line 8169
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR b$3[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN13@stb_ps_get
; Line 8170
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR b$3[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN13@stb_ps_get:
	jmp	SHORT $LN4@stb_ps_get
$LN5@stb_ps_get:
; Line 8171
	jmp	$LN2@stb_ps_get
$LN14@stb_ps_get:
; Line 8174
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$1[rsp], rax
; Line 8175
	mov	rax, QWORD PTR a$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
; Line 8176
	mov	rax, QWORD PTR a$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, QWORD PTR a$1[rsp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR p$[rsp]
	call	memcpy
; Line 8177
	mov	rax, QWORD PTR count$[rsp]
	mov	rcx, QWORD PTR a$1[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 8178
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb_ps_get
$LN15@stb_ps_get:
; Line 8181
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$2[rsp], rax
; Line 8182
	mov	rax, QWORD PTR h$2[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
; Line 8183
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stb_ps_get
$LN7@stb_ps_get:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stb_ps_get:
	mov	rax, QWORD PTR h$2[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN8@stb_ps_get
; Line 8184
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$2[rsp]
	cmp	DWORD PTR [rcx+rax*8+32], 1
	jbe	SHORT $LN16@stb_ps_get
; Line 8185
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR h$2[rsp]
	mov	rax, QWORD PTR [r8+rax*8+32]
	mov	QWORD PTR [rdx+rcx*8], rax
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN16@stb_ps_get:
	jmp	SHORT $LN7@stb_ps_get
$LN8@stb_ps_get:
$LN2@stb_ps_get:
; Line 8189
	mov	rax, QWORD PTR count$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 8190
	mov	rax, QWORD PTR p$[rsp]
$LN1@stb_ps_get:
; Line 8191
	add	rsp, 88					; 00000058H
	ret	0
stb_ps_getlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 32
p0$ = 64
p1$ = 72
stb_ps_eq PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8326
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8327
	mov	rcx, QWORD PTR p0$[rsp]
	call	stb_ps_count
	mov	DWORD PTR tv64[rsp], eax
	mov	rcx, QWORD PTR p1$[rsp]
	call	stb_ps_count
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN2@stb_ps_eq
; Line 8328
	xor	eax, eax
	jmp	SHORT $LN1@stb_ps_eq
$LN2@stb_ps_eq:
; Line 8329
	mov	rdx, QWORD PTR p1$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	call	stb_ps_subset
$LN1@stb_ps_eq:
; Line 8330
	add	rsp, 56					; 00000038H
	ret	0
stb_ps_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
listlen$ = 36
list$ = 40
bigger$ = 64
smaller$ = 72
stb_ps_subset PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8315
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8317
	lea	rdx, QWORD PTR listlen$[rsp]
	mov	rcx, QWORD PTR smaller$[rsp]
	call	stb_ps_fastlist
	mov	QWORD PTR list$[rsp], rax
; Line 8318
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ps_sub
$LN2@stb_ps_sub:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ps_sub:
	mov	eax, DWORD PTR listlen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_ps_sub
; Line 8319
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 1
	jbe	SHORT $LN5@stb_ps_sub
; Line 8320
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR bigger$[rsp]
	call	stb_ps_find
	test	eax, eax
	jne	SHORT $LN6@stb_ps_sub
; Line 8321
	xor	eax, eax
	jmp	SHORT $LN1@stb_ps_sub
$LN6@stb_ps_sub:
$LN5@stb_ps_sub:
	jmp	SHORT $LN2@stb_ps_sub
$LN3@stb_ps_sub:
; Line 8322
	mov	eax, 1
$LN1@stb_ps_sub:
; Line 8323
	add	rsp, 56					; 00000038H
	ret	0
stb_ps_subset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv65 = 36
a$1 = 40
n$2 = 48
h$3 = 56
n$4 = 64
n$5 = 72
ps$ = 112
stb_ps_copy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7865
$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 7868
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN7@stb_ps_cop
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN8@stb_ps_cop
	cmp	DWORD PTR tv65[rsp], 2
	je	SHORT $LN9@stb_ps_cop
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN10@stb_ps_cop
	jmp	$LN2@stb_ps_cop
$LN7@stb_ps_cop:
; Line 7869
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_cop
$LN8@stb_ps_cop:
; Line 7871
	mov	ecx, 32					; 00000020H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR n$4[rsp], rax
; Line 7872
	mov	rax, QWORD PTR ps$[rsp]
	mov	rdi, QWORD PTR n$4[rsp]
	lea	rsi, QWORD PTR [rax-1]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 7873
	mov	rax, QWORD PTR n$4[rsp]
	inc	rax
	jmp	$LN1@stb_ps_cop
$LN9@stb_ps_cop:
; Line 7876
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$1[rsp], rax
; Line 7877
	movsxd	rax, DWORD PTR ?stb_ps_array_max@@3HA
	lea	rax, QWORD PTR [rax*8+16]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR n$2[rsp], rax
; Line 7878
	mov	rax, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR a$1[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 7879
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_ps_cop
$LN4@stb_ps_cop:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_ps_cop:
	mov	rax, QWORD PTR a$1[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN5@stb_ps_cop
; Line 7880
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR n$2[rsp]
	mov	rdi, QWORD PTR a$1[rsp]
	mov	rax, QWORD PTR [rdi+rax*8+8]
	mov	QWORD PTR [rdx+rcx*8+8], rax
	jmp	SHORT $LN4@stb_ps_cop
$LN5@stb_ps_cop:
; Line 7881
	mov	rax, QWORD PTR n$2[rsp]
	add	rax, 2
	jmp	SHORT $LN1@stb_ps_cop
$LN10@stb_ps_cop:
; Line 7884
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$3[rsp], rax
; Line 7885
	mov	rax, QWORD PTR h$3[rsp]
	add	rax, 32					; 00000020H
	mov	r8, rax
	mov	rax, QWORD PTR h$3[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR h$3[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z ; stb_ps_makehash
	mov	QWORD PTR n$5[rsp], rax
; Line 7886
	mov	rax, QWORD PTR n$5[rsp]
	add	rax, 3
	jmp	SHORT $LN1@stb_ps_cop
$LN2@stb_ps_cop:
; Line 7889
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stb_ps_cop
	mov	r8d, 7889				; 00001ed1H
	lea	rdx, OFFSET FLAT:$SG88938
	lea	rcx, OFFSET FLAT:$SG88939
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stb_ps_cop:
; Line 7890
	xor	eax, eax
$LN1@stb_ps_cop:
; Line 7891
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
stb_ps_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
tv67 = 4
tv78 = 8
tv73 = 12
tv84 = 16
tv90 = 20
b$1 = 24
a$2 = 32
h$3 = 40
ps$ = 64
stb_ps_count PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8264
$LN19:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 8265
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	SHORT $LN4@stb_ps_cou
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN5@stb_ps_cou
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN6@stb_ps_cou
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN7@stb_ps_cou
	jmp	$LN2@stb_ps_cou
$LN4@stb_ps_cou:
; Line 8267
	cmp	QWORD PTR ps$[rsp], 0
	je	SHORT $LN9@stb_ps_cou
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN10@stb_ps_cou
$LN9@stb_ps_cou:
	mov	DWORD PTR tv67[rsp], 0
$LN10@stb_ps_cou:
	mov	eax, DWORD PTR tv67[rsp]
	jmp	$LN1@stb_ps_cou
$LN5@stb_ps_cou:
; Line 8269
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$1[rsp], rax
; Line 8270
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$1[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN11@stb_ps_cou
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN12@stb_ps_cou
$LN11@stb_ps_cou:
	mov	DWORD PTR tv73[rsp], 0
$LN12@stb_ps_cou:
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$1[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN13@stb_ps_cou
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN14@stb_ps_cou
$LN13@stb_ps_cou:
	mov	DWORD PTR tv78[rsp], 0
$LN14@stb_ps_cou:
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$1[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN15@stb_ps_cou
	mov	DWORD PTR tv84[rsp], 1
	jmp	SHORT $LN16@stb_ps_cou
$LN15@stb_ps_cou:
	mov	DWORD PTR tv84[rsp], 0
$LN16@stb_ps_cou:
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$1[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN17@stb_ps_cou
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN18@stb_ps_cou
$LN17@stb_ps_cou:
	mov	DWORD PTR tv90[rsp], 0
$LN18@stb_ps_cou:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR tv73[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR tv84[rsp]
	add	eax, DWORD PTR tv90[rsp]
	jmp	SHORT $LN1@stb_ps_cou
$LN6@stb_ps_cou:
; Line 8274
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$2[rsp], rax
; Line 8275
	mov	rax, QWORD PTR a$2[rsp]
	mov	eax, DWORD PTR [rax]
	jmp	SHORT $LN1@stb_ps_cou
$LN7@stb_ps_cou:
; Line 8278
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$3[rsp], rax
; Line 8279
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax+8]
	jmp	SHORT $LN1@stb_ps_cou
$LN2@stb_ps_cou:
; Line 8282
	xor	eax, eax
$LN1@stb_ps_cou:
; Line 8283
	add	rsp, 56					; 00000038H
	ret	0
stb_ps_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
ps$ = 64
stb_ps_delete PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7855
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7856
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN5@stb_ps_del
	cmp	DWORD PTR tv65[rsp], 2
	je	SHORT $LN6@stb_ps_del
	cmp	DWORD PTR tv65[rsp], 3
	je	SHORT $LN7@stb_ps_del
	jmp	SHORT $LN2@stb_ps_del
; Line 7857
	jmp	SHORT $LN2@stb_ps_del
$LN5@stb_ps_del:
; Line 7858
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	rcx, rax
	call	?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z ; stb_bucket_free
	jmp	SHORT $LN2@stb_ps_del
$LN6@stb_ps_del:
; Line 7859
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_free
	jmp	SHORT $LN2@stb_ps_del
$LN7@stb_ps_del:
; Line 7860
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_free
$LN2@stb_ps_del:
; Line 7862
	add	rsp, 56					; 00000038H
	ret	0
stb_ps_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
last$1 = 32
count$2 = 36
n$3 = 40
h$4 = 48
tv70 = 56
slast$5 = 60
b$6 = 64
a$7 = 72
t$8 = 80
leftover$9 = 88
ps$ = 112
value$ = 120
stb_ps_remove_any PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8102
$LN20:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 8103
	cmp	QWORD PTR ps$[rsp], 0
	jne	SHORT $LN19@stb_ps_rem
	mov	r8d, 8103				; 00001fa7H
	lea	rdx, OFFSET FLAT:$SG89204
	lea	rcx, OFFSET FLAT:$SG89205
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@stb_ps_rem:
; Line 8104
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 0
	je	SHORT $LN6@stb_ps_rem
	cmp	DWORD PTR tv70[rsp], 1
	je	SHORT $LN7@stb_ps_rem
	cmp	DWORD PTR tv70[rsp], 2
	je	$LN13@stb_ps_rem
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN15@stb_ps_rem
	jmp	$LN2@stb_ps_rem
$LN6@stb_ps_rem:
; Line 8106
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR ps$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 8107
	xor	eax, eax
	jmp	$LN1@stb_ps_rem
$LN7@stb_ps_rem:
; Line 8109
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$6[rsp], rax
; Line 8110
	mov	DWORD PTR count$2[rsp], 0
	mov	DWORD PTR slast$5[rsp], 0
	mov	DWORD PTR last$1[rsp], 0
; Line 8112
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$6[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN8@stb_ps_rem
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
	mov	DWORD PTR last$1[rsp], 0
$LN8@stb_ps_rem:
; Line 8113
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$6[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN9@stb_ps_rem
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
	mov	eax, DWORD PTR last$1[rsp]
	mov	DWORD PTR slast$5[rsp], eax
	mov	DWORD PTR last$1[rsp], 1
$LN9@stb_ps_rem:
; Line 8114
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$6[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN10@stb_ps_rem
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
	mov	eax, DWORD PTR last$1[rsp]
	mov	DWORD PTR slast$5[rsp], eax
	mov	DWORD PTR last$1[rsp], 2
$LN10@stb_ps_rem:
; Line 8115
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$6[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN11@stb_ps_rem
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
	mov	eax, DWORD PTR last$1[rsp]
	mov	DWORD PTR slast$5[rsp], eax
	mov	DWORD PTR last$1[rsp], 3
$LN11@stb_ps_rem:
; Line 8116
	movsxd	rax, DWORD PTR last$1[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR b$6[rsp]
	mov	rax, QWORD PTR [rdx+rax*8]
	mov	QWORD PTR [rcx], rax
; Line 8117
	movsxd	rax, DWORD PTR last$1[rsp]
	mov	rcx, QWORD PTR b$6[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
; Line 8118
	cmp	DWORD PTR count$2[rsp], 2
	jne	SHORT $LN12@stb_ps_rem
; Line 8119
	movsxd	rax, DWORD PTR slast$5[rsp]
	mov	rcx, QWORD PTR b$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR leftover$9[rsp], rax
; Line 8120
	mov	rcx, QWORD PTR b$6[rsp]
	call	?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z ; stb_bucket_free
; Line 8121
	mov	rax, QWORD PTR leftover$9[rsp]
	jmp	$LN1@stb_ps_rem
$LN12@stb_ps_rem:
; Line 8123
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_rem
$LN13@stb_ps_rem:
; Line 8126
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$7[rsp], rax
; Line 8127
	mov	rax, QWORD PTR a$7[rsp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR a$7[rsp]
	mov	rax, QWORD PTR [rdx+rax*8+8]
	mov	QWORD PTR [rcx], rax
; Line 8128
	mov	rax, QWORD PTR a$7[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN14@stb_ps_rem
; Line 8129
	mov	rax, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR ps$[rsp]
	call	stb_ps_remove
	jmp	$LN1@stb_ps_rem
$LN14@stb_ps_rem:
; Line 8130
	mov	rax, QWORD PTR a$7[rsp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR a$7[rsp]
	mov	DWORD PTR [rcx], eax
; Line 8131
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_rem
$LN15@stb_ps_rem:
; Line 8134
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$4[rsp], rax
; Line 8135
	mov	rax, QWORD PTR h$4[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR t$8[rsp], rax
; Line 8136
	mov	rax, QWORD PTR h$4[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR n$3[rsp], eax
$LN4@stb_ps_rem:
; Line 8137
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR t$8[rsp]
	cmp	DWORD PTR [rcx+rax*8], 1
	ja	SHORT $LN5@stb_ps_rem
; Line 8138
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	rcx, QWORD PTR h$4[rsp]
	and	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR n$3[rsp], eax
	jmp	SHORT $LN4@stb_ps_rem
$LN5@stb_ps_rem:
; Line 8139
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR t$8[rsp]
	mov	rax, QWORD PTR [rdx+rax*8]
	mov	QWORD PTR [rcx], rax
; Line 8140
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	rcx, QWORD PTR h$4[rsp]
	and	eax, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR h$4[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 8142
	mov	rax, QWORD PTR h$4[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	cmp	eax, DWORD PTR ?stb_ps_array_max@@3HA
	jl	SHORT $LN17@stb_ps_rem
	mov	rax, QWORD PTR h$4[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR h$4[rsp]
	cmp	eax, DWORD PTR [rcx+20]
	jne	SHORT $LN16@stb_ps_rem
$LN17@stb_ps_rem:
; Line 8143
	mov	rax, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR ps$[rsp]
	call	stb_ps_remove
	jmp	SHORT $LN1@stb_ps_rem
$LN16@stb_ps_rem:
; Line 8144
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR t$8[rsp]
	mov	QWORD PTR [rcx+rax*8], 1
; Line 8145
	mov	rax, QWORD PTR h$4[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR h$4[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 8146
	mov	rax, QWORD PTR h$4[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR h$4[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 8147
	mov	rax, QWORD PTR ps$[rsp]
	jmp	SHORT $LN1@stb_ps_rem
$LN2@stb_ps_rem:
; Line 8150
	mov	rax, QWORD PTR ps$[rsp]
$LN1@stb_ps_rem:
; Line 8151
	add	rsp, 104				; 00000068H
	ret	0
stb_ps_remove_any ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$1 = 32
b$2 = 40
h$3 = 48
i$4 = 56
n$5 = 60
i$6 = 64
j$7 = 68
tv80 = 72
hash$8 = 76
a$9 = 80
t$10 = 88
tv95 = 96
tv140 = 100
tv153 = 104
tv166 = 108
tv206 = 112
n$11 = 116
s$12 = 120
tv417 = 124
a$13 = 128
tv82 = 136
b$14 = 144
h2$15 = 152
ps$ = 176
value$ = 184
stb_ps_remove PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 8017
$LN52:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 8019
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR ps$[rsp]
	call	stb_ps_find
	test	eax, eax
	jne	SHORT $LN38@stb_ps_rem
	mov	r8d, 8019				; 00001f53H
	lea	rdx, OFFSET FLAT:$SG89139
	lea	rcx, OFFSET FLAT:$SG89140
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN38@stb_ps_rem:
; Line 8021
	mov	eax, DWORD PTR value$[rsp]
	and	eax, 3
	test	eax, eax
	je	SHORT $LN39@stb_ps_rem
	mov	r8d, 8021				; 00001f55H
	lea	rdx, OFFSET FLAT:$SG89141
	lea	rcx, OFFSET FLAT:$SG89142
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN39@stb_ps_rem:
; Line 8022
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN13@stb_ps_rem
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_rem
$LN13@stb_ps_rem:
; Line 8023
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv80[rsp], eax
	cmp	DWORD PTR tv80[rsp], 0
	je	SHORT $LN14@stb_ps_rem
	cmp	DWORD PTR tv80[rsp], 1
	je	SHORT $LN15@stb_ps_rem
	cmp	DWORD PTR tv80[rsp], 2
	je	$LN28@stb_ps_rem
	cmp	DWORD PTR tv80[rsp], 3
	je	$LN31@stb_ps_rem
	jmp	$LN2@stb_ps_rem
$LN14@stb_ps_rem:
; Line 8025
	mov	rax, QWORD PTR value$[rsp]
	cmp	QWORD PTR ps$[rsp], rax
	jne	SHORT $LN40@stb_ps_rem
	mov	QWORD PTR tv82[rsp], 0
	jmp	SHORT $LN41@stb_ps_rem
$LN40@stb_ps_rem:
	mov	rax, QWORD PTR ps$[rsp]
	mov	QWORD PTR tv82[rsp], rax
$LN41@stb_ps_rem:
	mov	rax, QWORD PTR tv82[rsp]
	jmp	$LN1@stb_ps_rem
$LN15@stb_ps_rem:
; Line 8027
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$2[rsp], rax
; Line 8028
	mov	DWORD PTR count$1[rsp], 0
; Line 8030
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN16@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$2[rsp]
	mov	QWORD PTR [rcx+rax], 0
	jmp	SHORT $LN17@stb_ps_rem
$LN16@stb_ps_rem:
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$2[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN42@stb_ps_rem
	mov	DWORD PTR tv95[rsp], 1
	jmp	SHORT $LN43@stb_ps_rem
$LN42@stb_ps_rem:
	mov	DWORD PTR tv95[rsp], 0
$LN43@stb_ps_rem:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$1[rsp], eax
$LN17@stb_ps_rem:
; Line 8031
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN18@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$2[rsp]
	mov	QWORD PTR [rcx+rax], 0
	jmp	SHORT $LN19@stb_ps_rem
$LN18@stb_ps_rem:
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$2[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN44@stb_ps_rem
	mov	DWORD PTR tv140[rsp], 1
	jmp	SHORT $LN45@stb_ps_rem
$LN44@stb_ps_rem:
	mov	DWORD PTR tv140[rsp], 0
$LN45@stb_ps_rem:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$1[rsp], eax
$LN19@stb_ps_rem:
; Line 8032
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN20@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$2[rsp]
	mov	QWORD PTR [rcx+rax], 0
	jmp	SHORT $LN21@stb_ps_rem
$LN20@stb_ps_rem:
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$2[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN46@stb_ps_rem
	mov	DWORD PTR tv153[rsp], 1
	jmp	SHORT $LN47@stb_ps_rem
$LN46@stb_ps_rem:
	mov	DWORD PTR tv153[rsp], 0
$LN47@stb_ps_rem:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$1[rsp], eax
$LN21@stb_ps_rem:
; Line 8033
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN22@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$2[rsp]
	mov	QWORD PTR [rcx+rax], 0
	jmp	SHORT $LN23@stb_ps_rem
$LN22@stb_ps_rem:
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$2[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN48@stb_ps_rem
	mov	DWORD PTR tv166[rsp], 1
	jmp	SHORT $LN49@stb_ps_rem
$LN48@stb_ps_rem:
	mov	DWORD PTR tv166[rsp], 0
$LN49@stb_ps_rem:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$1[rsp], eax
$LN23@stb_ps_rem:
; Line 8034
	cmp	DWORD PTR count$1[rsp], 1
	jne	$LN24@stb_ps_rem
; Line 8035
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR value$[rsp], rax
; Line 8036
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN25@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR value$[rsp], rax
$LN25@stb_ps_rem:
; Line 8037
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN26@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR value$[rsp], rax
$LN26@stb_ps_rem:
; Line 8038
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN27@stb_ps_rem
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR value$[rsp], rax
$LN27@stb_ps_rem:
; Line 8039
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN50@stb_ps_rem
	mov	r8d, 8039				; 00001f67H
	lea	rdx, OFFSET FLAT:$SG89158
	lea	rcx, OFFSET FLAT:$SG89159
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN50@stb_ps_rem:
; Line 8040
	mov	rcx, QWORD PTR b$2[rsp]
	call	?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z ; stb_bucket_free
; Line 8041
	mov	rax, QWORD PTR value$[rsp]
	jmp	$LN1@stb_ps_rem
$LN24@stb_ps_rem:
; Line 8043
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_rem
$LN28@stb_ps_rem:
; Line 8046
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$9[rsp], rax
; Line 8048
	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN6@stb_ps_rem
$LN4@stb_ps_rem:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN6@stb_ps_rem:
	mov	rax, QWORD PTR a$9[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$4[rsp], eax
	jge	$LN5@stb_ps_rem
; Line 8049
	movsxd	rax, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$9[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax*8+8], rdx
	jne	$LN29@stb_ps_rem
; Line 8050
	mov	rax, QWORD PTR a$9[rsp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	DWORD PTR tv206[rsp], eax
	mov	rax, QWORD PTR a$9[rsp]
	mov	ecx, DWORD PTR tv206[rsp]
	mov	DWORD PTR [rax], ecx
	movsxd	rax, DWORD PTR i$4[rsp]
	movsxd	rcx, DWORD PTR tv206[rsp]
	mov	rdx, QWORD PTR a$9[rsp]
	mov	r8, QWORD PTR a$9[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8+8]
	mov	QWORD PTR [rdx+rax*8+8], rcx
; Line 8051
	mov	rax, QWORD PTR a$9[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN30@stb_ps_rem
; Line 8052
	mov	rax, QWORD PTR a$9[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?stb_bucket_create3@@YAPEAUstb_ps_bucket@@PEAPEAX@Z ; stb_bucket_create3
	mov	QWORD PTR b$14[rsp], rax
; Line 8053
	mov	rcx, QWORD PTR a$9[rsp]
	call	QWORD PTR __imp_free
; Line 8054
	mov	rax, QWORD PTR b$14[rsp]
	inc	rax
	jmp	$LN1@stb_ps_rem
$LN30@stb_ps_rem:
; Line 8056
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_rem
$LN29@stb_ps_rem:
; Line 8058
	jmp	$LN4@stb_ps_rem
$LN5@stb_ps_rem:
; Line 8059
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_rem
$LN31@stb_ps_rem:
; Line 8062
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$3[rsp], rax
; Line 8063
	mov	rcx, QWORD PTR value$[rsp]
	call	stb_hashptr
	mov	DWORD PTR hash$8[rsp], eax
; Line 8064
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR hash$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$5[rsp], eax
; Line 8065
	mov	rax, QWORD PTR h$3[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR t$10[rsp], rax
; Line 8066
	mov	eax, DWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR t$10[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax*8], rdx
	je	SHORT $LN32@stb_ps_rem
; Line 8067
	mov	eax, DWORD PTR hash$8[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR hash$8[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$12[rsp], eax
$LN9@stb_ps_rem:
; Line 8069
	mov	eax, DWORD PTR s$12[rsp]
	mov	ecx, DWORD PTR n$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR h$3[rsp]
	and	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR n$5[rsp], eax
; Line 8070
	mov	eax, DWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR t$10[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax*8], rdx
	jne	SHORT $LN9@stb_ps_rem
$LN32@stb_ps_rem:
; Line 8072
	mov	eax, DWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR t$10[rsp]
	mov	QWORD PTR [rcx+rax*8], 1
; Line 8073
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR h$3[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 8074
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR h$3[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 8076
	mov	rax, QWORD PTR h$3[rsp]
	mov	ecx, DWORD PTR ?stb_ps_array_max@@3HA
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN33@stb_ps_rem
; Line 8077
	movsxd	rax, DWORD PTR ?stb_ps_array_max@@3HA
	mov	rcx, rax
	call	stb_log2_floor
	mov	ecx, 1
	mov	DWORD PTR tv417[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv417[rsp]
	shl	eax, cl
	mov	DWORD PTR n$11[rsp], eax
; Line 8078
	mov	rax, QWORD PTR h$3[rsp]
	mov	ecx, DWORD PTR n$11[rsp]
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN34@stb_ps_rem
; Line 8079
	mov	eax, DWORD PTR n$11[rsp]
	dec	eax
	cdqe
	lea	rax, QWORD PTR [rax*8+16]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR a$13[rsp], rax
; Line 8080
	mov	DWORD PTR j$7[rsp], 0
; Line 8081
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN12@stb_ps_rem
$LN10@stb_ps_rem:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN12@stb_ps_rem:
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$6[rsp], eax
	jge	SHORT $LN11@stb_ps_rem
; Line 8082
	movsxd	rax, DWORD PTR i$6[rsp]
	mov	rcx, QWORD PTR t$10[rsp]
	cmp	DWORD PTR [rcx+rax*8], 1
	jbe	SHORT $LN35@stb_ps_rem
; Line 8083
	movsxd	rax, DWORD PTR i$6[rsp]
	movsxd	rcx, DWORD PTR j$7[rsp]
	mov	rdx, QWORD PTR a$13[rsp]
	mov	r8, QWORD PTR t$10[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8+8], rax
	mov	eax, DWORD PTR j$7[rsp]
	inc	eax
	mov	DWORD PTR j$7[rsp], eax
$LN35@stb_ps_rem:
	jmp	SHORT $LN10@stb_ps_rem
$LN11@stb_ps_rem:
; Line 8084
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR j$7[rsp], eax
	je	SHORT $LN51@stb_ps_rem
	mov	r8d, 8084				; 00001f94H
	lea	rdx, OFFSET FLAT:$SG89168
	lea	rcx, OFFSET FLAT:$SG89169
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN51@stb_ps_rem:
; Line 8085
	mov	rax, QWORD PTR a$13[rsp]
	mov	ecx, DWORD PTR j$7[rsp]
	mov	DWORD PTR [rax], ecx
; Line 8086
	mov	rcx, QWORD PTR h$3[rsp]
	call	QWORD PTR __imp_free
; Line 8087
	mov	rax, QWORD PTR a$13[rsp]
	add	rax, 2
	jmp	SHORT $LN1@stb_ps_rem
$LN34@stb_ps_rem:
$LN33@stb_ps_rem:
; Line 8090
	mov	rax, QWORD PTR h$3[rsp]
	mov	rcx, QWORD PTR h$3[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN36@stb_ps_rem
; Line 8091
	mov	rax, QWORD PTR h$3[rsp]
	mov	eax, DWORD PTR [rax]
	sar	eax, 1
	mov	r8, QWORD PTR t$10[rsp]
	mov	rcx, QWORD PTR h$3[rsp]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, eax
	call	?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z ; stb_ps_makehash
	mov	QWORD PTR h2$15[rsp], rax
; Line 8092
	mov	rcx, QWORD PTR h$3[rsp]
	call	QWORD PTR __imp_free
; Line 8093
	mov	rax, QWORD PTR h2$15[rsp]
	add	rax, 3
	jmp	SHORT $LN1@stb_ps_rem
$LN36@stb_ps_rem:
; Line 8095
	mov	rax, QWORD PTR ps$[rsp]
	jmp	SHORT $LN1@stb_ps_rem
$LN2@stb_ps_rem:
; Line 8098
	mov	rax, QWORD PTR ps$[rsp]
$LN1@stb_ps_rem:
; Line 8099
	add	rsp, 168				; 000000a8H
	ret	0
stb_ps_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$1 = 32
a$2 = 40
n$3 = 48
b$4 = 56
tv90 = 64
hash$5 = 68
newsize$6 = 72
t$7 = 80
a$8 = 88
tv352 = 96
tv189 = 100
tv187 = 104
s$9 = 108
h$10 = 112
h2$11 = 120
h2$12 = 128
ps$ = 160
value$ = 168
stb_ps_add PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7932
$LN29:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 7934
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR ps$[rsp]
	call	stb_ps_find
	test	eax, eax
	je	SHORT $LN25@stb_ps_add
	mov	r8d, 7934				; 00001efeH
	lea	rdx, OFFSET FLAT:$SG89053
	lea	rcx, OFFSET FLAT:$SG89054
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@stb_ps_add:
; Line 7936
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN7@stb_ps_add
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_add
$LN7@stb_ps_add:
; Line 7937
	mov	eax, DWORD PTR value$[rsp]
	and	eax, 3
	test	eax, eax
	je	SHORT $LN26@stb_ps_add
	mov	r8d, 7937				; 00001f01H
	lea	rdx, OFFSET FLAT:$SG89056
	lea	rcx, OFFSET FLAT:$SG89057
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN26@stb_ps_add:
; Line 7938
	cmp	QWORD PTR value$[rsp], 1
	ja	SHORT $LN27@stb_ps_add
	mov	r8d, 7938				; 00001f02H
	lea	rdx, OFFSET FLAT:$SG89058
	lea	rcx, OFFSET FLAT:$SG89059
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@stb_ps_add:
; Line 7939
	cmp	QWORD PTR value$[rsp], 1
	jne	SHORT $LN28@stb_ps_add
	mov	r8d, 7939				; 00001f03H
	lea	rdx, OFFSET FLAT:$SG89060
	lea	rcx, OFFSET FLAT:$SG89061
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN28@stb_ps_add:
; Line 7941
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR tv90[rsp], eax
	cmp	DWORD PTR tv90[rsp], 0
	je	SHORT $LN8@stb_ps_add
	cmp	DWORD PTR tv90[rsp], 1
	je	SHORT $LN10@stb_ps_add
	cmp	DWORD PTR tv90[rsp], 2
	je	$LN15@stb_ps_add
	cmp	DWORD PTR tv90[rsp], 3
	je	$LN19@stb_ps_add
	jmp	$LN2@stb_ps_add
$LN8@stb_ps_add:
; Line 7943
	cmp	QWORD PTR ps$[rsp], 0
	jne	SHORT $LN9@stb_ps_add
	mov	rax, QWORD PTR value$[rsp]
	jmp	$LN1@stb_ps_add
$LN9@stb_ps_add:
; Line 7944
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR ps$[rsp]
	call	?stb_bucket_create2@@YAPEAUstb_ps_bucket@@PEAX0@Z ; stb_bucket_create2
	inc	rax
	jmp	$LN1@stb_ps_add
$LN10@stb_ps_add:
; Line 7947
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$4[rsp], rax
; Line 7950
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$4[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN11@stb_ps_add
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$4[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_add
$LN11@stb_ps_add:
; Line 7951
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$4[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN12@stb_ps_add
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$4[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_add
$LN12@stb_ps_add:
; Line 7952
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$4[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN13@stb_ps_add
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$4[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_add
$LN13@stb_ps_add:
; Line 7953
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$4[rsp]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN14@stb_ps_add
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$4[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	rax, QWORD PTR ps$[rsp]
	jmp	$LN1@stb_ps_add
$LN14@stb_ps_add:
; Line 7954
	mov	ecx, 72					; 00000048H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR a$8[rsp], rax
; Line 7955
	mov	rax, QWORD PTR a$8[rsp]
	add	rax, 8
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR b$4[rsp]
	mov	rcx, rax
	call	memcpy
; Line 7956
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR a$8[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
; Line 7957
	mov	rax, QWORD PTR a$8[rsp]
	mov	DWORD PTR [rax], 5
; Line 7958
	mov	rcx, QWORD PTR b$4[rsp]
	call	?stb_bucket_free@@YAXPEAUstb_ps_bucket@@@Z ; stb_bucket_free
; Line 7959
	mov	rax, QWORD PTR a$8[rsp]
	add	rax, 2
	jmp	$LN1@stb_ps_add
$LN15@stb_ps_add:
; Line 7963
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$2[rsp], rax
; Line 7964
	mov	rax, QWORD PTR a$2[rsp]
	mov	ecx, DWORD PTR ?stb_ps_array_max@@3HA
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN16@stb_ps_add
; Line 7966
	mov	rax, QWORD PTR a$2[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv189[rsp], eax
	mov	rax, QWORD PTR a$2[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, rax
	call	stb_log2_ceil
	mov	ecx, 2
	mov	DWORD PTR tv352[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv352[rsp]
	shl	eax, cl
	mov	DWORD PTR tv187[rsp], eax
	mov	rax, QWORD PTR a$2[rsp]
	add	rax, 8
	mov	r8, rax
	mov	edx, DWORD PTR tv189[rsp]
	mov	ecx, DWORD PTR tv187[rsp]
	call	?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z ; stb_ps_makehash
	mov	QWORD PTR h$10[rsp], rax
; Line 7967
	mov	rcx, QWORD PTR a$2[rsp]
	call	QWORD PTR __imp_free
; Line 7968
	mov	rax, QWORD PTR h$10[rsp]
	add	rax, 3
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, rax
	call	stb_ps_add
	jmp	$LN1@stb_ps_add
$LN16@stb_ps_add:
; Line 7972
	mov	rax, QWORD PTR a$2[rsp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR a$2[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN17@stb_ps_add
; Line 7973
	mov	rax, QWORD PTR a$2[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR newsize$6[rsp], eax
; Line 7977
	mov	rax, QWORD PTR a$2[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR newsize$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ?stb_ps_array_max@@3HA
	jle	SHORT $LN18@stb_ps_add
; Line 7978
	mov	eax, DWORD PTR ?stb_ps_array_max@@3HA
	mov	DWORD PTR newsize$6[rsp], eax
$LN18@stb_ps_add:
; Line 7979
	mov	eax, DWORD PTR newsize$6[rsp]
	dec	eax
	cdqe
	lea	rax, QWORD PTR [rax*8+16]
	mov	rdx, rax
	mov	rcx, QWORD PTR a$2[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR a$2[rsp], rax
$LN17@stb_ps_add:
; Line 7981
	mov	rax, QWORD PTR a$2[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR a$2[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax*8+8], rdx
	mov	rax, QWORD PTR a$2[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR a$2[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7982
	mov	rax, QWORD PTR a$2[rsp]
	add	rax, 2
	jmp	$LN1@stb_ps_add
$LN19@stb_ps_add:
; Line 7985
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$1[rsp], rax
; Line 7986
	mov	rcx, QWORD PTR value$[rsp]
	call	stb_hashptr
	mov	DWORD PTR hash$5[rsp], eax
; Line 7987
	mov	rax, QWORD PTR h$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR hash$5[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 7988
	mov	rax, QWORD PTR h$1[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR t$7[rsp], rax
; Line 7990
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR t$7[rsp]
	cmp	DWORD PTR [rcx+rax*8], 1
	jbe	SHORT $LN20@stb_ps_add
; Line 7991
	mov	eax, DWORD PTR hash$5[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR hash$5[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$9[rsp], eax
$LN6@stb_ps_add:
; Line 7993
	mov	eax, DWORD PTR s$9[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR h$1[rsp]
	and	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR n$3[rsp], eax
; Line 7994
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR t$7[rsp]
	cmp	DWORD PTR [rcx+rax*8], 1
	ja	SHORT $LN6@stb_ps_add
$LN20@stb_ps_add:
; Line 7996
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR t$7[rsp]
	cmp	QWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN21@stb_ps_add
; Line 7997
	mov	rax, QWORD PTR h$1[rsp]
	mov	eax, DWORD PTR [rax+12]
	dec	eax
	mov	rcx, QWORD PTR h$1[rsp]
	mov	DWORD PTR [rcx+12], eax
$LN21@stb_ps_add:
; Line 7998
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR t$7[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 7999
	mov	rax, QWORD PTR h$1[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR h$1[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 8000
	mov	rax, QWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR h$1[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN22@stb_ps_add
; Line 8001
	mov	rax, QWORD PTR h$1[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	r8, QWORD PTR t$7[rsp]
	mov	rcx, QWORD PTR h$1[rsp]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, eax
	call	?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z ; stb_ps_makehash
	mov	QWORD PTR h2$11[rsp], rax
; Line 8002
	mov	rcx, QWORD PTR h$1[rsp]
	call	QWORD PTR __imp_free
; Line 8003
	mov	rax, QWORD PTR h2$11[rsp]
	add	rax, 3
	jmp	SHORT $LN1@stb_ps_add
$LN22@stb_ps_add:
; Line 8005
	mov	rax, QWORD PTR h$1[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR h$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR h$1[rsp]
	cmp	eax, DWORD PTR [rcx+24]
	jne	SHORT $LN23@stb_ps_add
; Line 8006
	mov	r8, QWORD PTR t$7[rsp]
	mov	rax, QWORD PTR h$1[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR h$1[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?stb_ps_makehash@@YAPEAUstb_ps_hash@@HHPEAPEAX@Z ; stb_ps_makehash
	mov	QWORD PTR h2$12[rsp], rax
; Line 8007
	mov	rcx, QWORD PTR h$1[rsp]
	call	QWORD PTR __imp_free
; Line 8008
	mov	rax, QWORD PTR h2$12[rsp]
	add	rax, 3
	jmp	SHORT $LN1@stb_ps_add
$LN23@stb_ps_add:
; Line 8010
	mov	rax, QWORD PTR ps$[rsp]
	jmp	SHORT $LN1@stb_ps_add
$LN2@stb_ps_add:
; Line 8013
	xor	eax, eax
$LN1@stb_ps_add:
; Line 8014
	add	rsp, 152				; 00000098H
	ret	0
stb_ps_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
i$ = 36
hash$2 = 40
code$ = 44
tv78 = 48
b$3 = 56
t$4 = 64
s$5 = 72
h$6 = 80
a$7 = 88
ps$ = 112
value$ = 120
stb_ps_find PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7894
$LN23:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 7895
	mov	eax, DWORD PTR ps$[rsp]
	and	eax, 3
	mov	DWORD PTR code$[rsp], eax
; Line 7896
	mov	eax, DWORD PTR value$[rsp]
	and	eax, 3
	test	eax, eax
	je	SHORT $LN19@stb_ps_fin
	mov	r8d, 7896				; 00001ed8H
	lea	rdx, OFFSET FLAT:$SG88976
	lea	rcx, OFFSET FLAT:$SG88977
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@stb_ps_fin:
; Line 7897
	cmp	QWORD PTR value$[rsp], 1
	ja	SHORT $LN20@stb_ps_fin
	mov	r8d, 7897				; 00001ed9H
	lea	rdx, OFFSET FLAT:$SG88978
	lea	rcx, OFFSET FLAT:$SG88979
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@stb_ps_fin:
; Line 7899
	cmp	DWORD PTR code$[rsp], 0
	jne	SHORT $LN8@stb_ps_fin
; Line 7900
	mov	rax, QWORD PTR ps$[rsp]
	cmp	QWORD PTR value$[rsp], rax
	jne	SHORT $LN21@stb_ps_fin
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN22@stb_ps_fin
$LN21@stb_ps_fin:
	mov	DWORD PTR tv78[rsp], 0
$LN22@stb_ps_fin:
	mov	eax, DWORD PTR tv78[rsp]
	jmp	$LN1@stb_ps_fin
$LN8@stb_ps_fin:
; Line 7901
	cmp	DWORD PTR code$[rsp], 1
	jne	$LN9@stb_ps_fin
; Line 7902
	mov	rax, QWORD PTR ps$[rsp]
	dec	rax
	mov	QWORD PTR b$3[rsp], rax
; Line 7905
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR b$3[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	je	SHORT $LN11@stb_ps_fin
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR b$3[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	je	SHORT $LN11@stb_ps_fin
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR b$3[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	je	SHORT $LN11@stb_ps_fin
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR b$3[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN10@stb_ps_fin
$LN11@stb_ps_fin:
; Line 7906
	mov	eax, 1
	jmp	$LN1@stb_ps_fin
$LN10@stb_ps_fin:
; Line 7907
	xor	eax, eax
	jmp	$LN1@stb_ps_fin
$LN9@stb_ps_fin:
; Line 7909
	cmp	DWORD PTR code$[rsp], 2
	jne	SHORT $LN12@stb_ps_fin
; Line 7910
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 2
	mov	QWORD PTR a$7[rsp], rax
; Line 7911
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ps_fin
$LN2@stb_ps_fin:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ps_fin:
	mov	rax, QWORD PTR a$7[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_ps_fin
; Line 7912
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$7[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax*8+8], rdx
	jne	SHORT $LN14@stb_ps_fin
; Line 7913
	mov	eax, 1
	jmp	$LN1@stb_ps_fin
$LN14@stb_ps_fin:
	jmp	SHORT $LN2@stb_ps_fin
$LN3@stb_ps_fin:
; Line 7914
	xor	eax, eax
	jmp	$LN1@stb_ps_fin
; Line 7915
	jmp	$LN13@stb_ps_fin
$LN12@stb_ps_fin:
; Line 7916
	mov	rax, QWORD PTR ps$[rsp]
	sub	rax, 3
	mov	QWORD PTR h$6[rsp], rax
; Line 7917
	mov	rcx, QWORD PTR value$[rsp]
	call	stb_hashptr
	mov	DWORD PTR hash$2[rsp], eax
; Line 7918
	mov	rax, QWORD PTR h$6[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR hash$2[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$1[rsp], eax
; Line 7919
	mov	rax, QWORD PTR h$6[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR t$4[rsp], rax
; Line 7920
	mov	eax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR t$4[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax*8], rdx
	jne	SHORT $LN15@stb_ps_fin
	mov	eax, 1
	jmp	SHORT $LN1@stb_ps_fin
$LN15@stb_ps_fin:
; Line 7921
	mov	eax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR t$4[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	jne	SHORT $LN16@stb_ps_fin
	xor	eax, eax
	jmp	SHORT $LN1@stb_ps_fin
$LN16@stb_ps_fin:
; Line 7922
	mov	eax, DWORD PTR hash$2[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR hash$2[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$5[rsp], eax
$LN7@stb_ps_fin:
; Line 7924
	mov	eax, DWORD PTR s$5[rsp]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR h$6[rsp]
	and	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR n$1[rsp], eax
; Line 7925
	mov	eax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR t$4[rsp]
	mov	rdx, QWORD PTR value$[rsp]
	cmp	QWORD PTR [rcx+rax*8], rdx
	jne	SHORT $LN17@stb_ps_fin
	mov	eax, 1
	jmp	SHORT $LN1@stb_ps_fin
$LN17@stb_ps_fin:
; Line 7926
	mov	eax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR t$4[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	jne	SHORT $LN7@stb_ps_fin
; Line 7927
	xor	eax, eax
$LN13@stb_ps_fin:
$LN1@stb_ps_fin:
; Line 7929
	add	rsp, 104				; 00000068H
	ret	0
stb_ps_find ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 24
file$ = 32
line$ = 40
?stb__remove_alloc@@YAXHPEADH@Z PROC			; stb__remove_alloc
; File W:\cpp\void\vendor\stb\stb.h
; Line 7569
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
; Line 7570
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR ?stb__history_pos@@3HA	; stb__history_pos
	imul	rcx, rcx, 32				; 00000020H
	lea	rdx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	r8, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	lea	rdi, QWORD PTR [rdx+rcx]
	lea	rsi, QWORD PTR [r8+rax]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 7571
	movsxd	rax, DWORD PTR ?stb__history_pos@@3HA	; stb__history_pos
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rdx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
; Line 7572
	movsxd	rax, DWORD PTR ?stb__history_pos@@3HA	; stb__history_pos
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	edx, DWORD PTR line$[rsp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 7573
	mov	eax, DWORD PTR ?stb__history_pos@@3HA	; stb__history_pos
	inc	eax
	mov	DWORD PTR ?stb__history_pos@@3HA, eax	; stb__history_pos
	cmp	DWORD PTR ?stb__history_pos@@3HA, 50	; stb__history_pos, 00000032H
	jne	SHORT $LN2@stb__remov
; Line 7574
	mov	DWORD PTR ?stb__history_pos@@3HA, 0	; stb__history_pos
$LN2@stb__remov:
; Line 7575
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	QWORD PTR [rcx+rax], 1
; Line 7576
	mov	eax, DWORD PTR ?stb__alloc_count@@3HA	; stb__alloc_count
	dec	eax
	mov	DWORD PTR ?stb__alloc_count@@3HA, eax	; stb__alloc_count
; Line 7577
	pop	rdi
	pop	rsi
	ret	0
?stb__remove_alloc@@YAXHPEADH@Z ENDP			; stb__remove_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
old_num$ = 36
old$ = 40
tv139 = 48
?stb__grow_alloc@@YAXXZ PROC				; stb__grow_alloc
; File W:\cpp\void\vendor\stb\stb.h
; Line 7518
	sub	rsp, 72					; 00000048H
; Line 7519
	mov	eax, DWORD PTR ?stb__alloc_size@@3HA
	mov	DWORD PTR old_num$[rsp], eax
; Line 7520
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	QWORD PTR old$[rsp], rax
; Line 7521
	cmp	DWORD PTR ?stb__alloc_size@@3HA, 0
	jne	SHORT $LN8@stb__grow_
; Line 7522
	mov	DWORD PTR ?stb__alloc_size@@3HA, 64	; 00000040H
	jmp	SHORT $LN9@stb__grow_
$LN8@stb__grow_:
; Line 7524
	mov	eax, DWORD PTR ?stb__alloc_size@@3HA
	shl	eax, 1
	mov	DWORD PTR ?stb__alloc_size@@3HA, eax
$LN9@stb__grow_:
; Line 7526
	movsxd	rax, DWORD PTR ?stb__alloc_size@@3HA
	imul	rax, rax, 32				; 00000020H
	mov	edx, eax
	xor	ecx, ecx
	call	?stb__realloc_raw@@YAPEAXPEAXH@Z	; stb__realloc_raw
	mov	QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA, rax ; stb__allocations
; Line 7527
	cmp	QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA, 0 ; stb__allocations
	jne	SHORT $LN10@stb__grow_
; Line 7528
	mov	edx, 7528				; 00001d68H
	lea	rcx, OFFSET FLAT:$SG88623
	call	stb__record_fileline
	lea	rcx, OFFSET FLAT:$SG88624
	call	stb_fatal
$LN10@stb__grow_:
; Line 7529
	movsxd	rax, DWORD PTR ?stb__alloc_size@@3HA
	imul	rax, rax, 32				; 00000020H
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	call	memset
; Line 7530
	imul	eax, DWORD PTR ?stb__alloc_size@@3HA, 3
	sar	eax, 2
	mov	DWORD PTR ?stb__alloc_limit@@3HA, eax
; Line 7531
	mov	eax, DWORD PTR ?stb__alloc_size@@3HA
	dec	eax
	mov	DWORD PTR ?stb__alloc_mask@@3HA, eax
; Line 7533
	mov	DWORD PTR ?stb__alloc_count@@3HA, 0	; stb__alloc_count
; Line 7535
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__grow_
$LN2@stb__grow_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__grow_:
	mov	eax, DWORD PTR old_num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__grow_
; Line 7536
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR old$[rsp]
	cmp	QWORD PTR [rcx+rax], 1
	jbe	$LN11@stb__grow_
; Line 7537
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 32				; 00000020H
	movsxd	r8, DWORD PTR i$[rsp]
	imul	r8, r8, 32				; 00000020H
	mov	QWORD PTR tv139[rsp], r8
	mov	r9, QWORD PTR old$[rsp]
	mov	r9d, DWORD PTR [r9+rax+16]
	mov	rax, QWORD PTR old$[rsp]
	mov	r8, QWORD PTR [rax+rcx+8]
	mov	rax, QWORD PTR old$[rsp]
	mov	rdx, QWORD PTR [rax+rdx+24]
	mov	rax, QWORD PTR old$[rsp]
	mov	rcx, QWORD PTR tv139[rsp]
	mov	rcx, QWORD PTR [rax+rcx]
	call	?stb__add_alloc@@YAXPEAX_KPEADH@Z	; stb__add_alloc
; Line 7538
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR old$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	?stb__hashfind@@YAHPEAX@Z		; stb__hashfind
	test	eax, eax
	jge	SHORT $LN14@stb__grow_
	mov	r8d, 7538				; 00001d72H
	lea	rdx, OFFSET FLAT:$SG88626
	lea	rcx, OFFSET FLAT:$SG88627
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@stb__grow_:
$LN11@stb__grow_:
; Line 7539
	jmp	$LN2@stb__grow_
$LN3@stb__grow_:
; Line 7540
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb__grow_
$LN5@stb__grow_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb__grow_:
	mov	eax, DWORD PTR old_num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stb__grow_
; Line 7541
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR old$[rsp]
	cmp	QWORD PTR [rcx+rax], 1
	jbe	SHORT $LN12@stb__grow_
; Line 7542
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR old$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	?stb__hashfind@@YAHPEAX@Z		; stb__hashfind
	test	eax, eax
	jge	SHORT $LN15@stb__grow_
	mov	r8d, 7542				; 00001d76H
	lea	rdx, OFFSET FLAT:$SG88629
	lea	rcx, OFFSET FLAT:$SG88630
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb__grow_:
$LN12@stb__grow_:
	jmp	SHORT $LN5@stb__grow_
$LN6@stb__grow_:
; Line 7543
	xor	edx, edx
	mov	rcx, QWORD PTR old$[rsp]
	call	?stb__realloc_raw@@YAPEAXPEAXH@Z	; stb__realloc_raw
; Line 7544
	add	rsp, 72					; 00000048H
	ret	0
?stb__grow_alloc@@YAXXZ ENDP				; stb__grow_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$1 = 40
p$ = 64
sz$ = 72
file$ = 80
line$ = 88
?stb__add_alloc@@YAXPEAX_KPEADH@Z PROC			; stb__add_alloc
; File W:\cpp\void\vendor\stb\stb.h
; Line 7547
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7550
	mov	eax, DWORD PTR ?stb__alloc_limit@@3HA
	cmp	DWORD PTR ?stb__alloc_count@@3HA, eax	; stb__alloc_count
	jl	SHORT $LN5@stb__add_a
; Line 7551
	call	?stb__grow_alloc@@YAXXZ			; stb__grow_alloc
$LN5@stb__add_a:
; Line 7552
	mov	rcx, QWORD PTR p$[rsp]
	call	stb_hashptr
	mov	DWORD PTR h$[rsp], eax
; Line 7553
	mov	eax, DWORD PTR ?stb__alloc_mask@@3HA
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 7554
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 1
	jbe	SHORT $LN6@stb__add_a
; Line 7555
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$1[rsp], eax
$LN4@stb__add_a:
; Line 7557
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, DWORD PTR ?stb__alloc_mask@@3HA
	mov	DWORD PTR n$[rsp], eax
; Line 7558
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 1
	ja	SHORT $LN4@stb__add_a
$LN6@stb__add_a:
; Line 7560
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN8@stb__add_a
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 1
	je	SHORT $LN8@stb__add_a
	mov	r8d, 7560				; 00001d88H
	lea	rdx, OFFSET FLAT:$SG88650
	lea	rcx, OFFSET FLAT:$SG88651
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stb__add_a:
; Line 7561
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 7562
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR sz$[rsp]
	mov	QWORD PTR [rcx+rax+24], rdx
; Line 7563
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	edx, DWORD PTR line$[rsp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 7564
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
; Line 7565
	mov	eax, DWORD PTR ?stb__alloc_count@@3HA	; stb__alloc_count
	inc	eax
	mov	DWORD PTR ?stb__alloc_count@@3HA, eax	; stb__alloc_count
; Line 7566
	add	rsp, 56					; 00000038H
	ret	0
?stb__add_alloc@@YAXPEAX_KPEADH@Z ENDP			; stb__add_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
i$ = 4
p$ = 32
?stb__historyfind@@YAHPEAX@Z PROC			; stb__historyfind
; File W:\cpp\void\vendor\stb\stb.h
; Line 7505
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 7506
	mov	eax, DWORD PTR ?stb__history_pos@@3HA	; stb__history_pos
	mov	DWORD PTR n$[rsp], eax
; Line 7508
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__histo
$LN2@stb__histo:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__histo:
	cmp	DWORD PTR i$[rsp], 50			; 00000032H
	jge	SHORT $LN3@stb__histo
; Line 7509
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN5@stb__histo
	mov	DWORD PTR n$[rsp], 49			; 00000031H
$LN5@stb__histo:
; Line 7510
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rdx, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN6@stb__histo
; Line 7511
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stb__histo
$LN6@stb__histo:
; Line 7512
	jmp	SHORT $LN2@stb__histo
$LN3@stb__histo:
; Line 7513
	mov	eax, -1
$LN1@stb__histo:
; Line 7514
	add	rsp, 24
	ret	0
?stb__historyfind@@YAHPEAX@Z ENDP			; stb__historyfind
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
p$ = 64
?stb__hashfind@@YAHPEAX@Z PROC				; stb__hashfind
; File W:\cpp\void\vendor\stb\stb.h
; Line 7482
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7483
	mov	rcx, QWORD PTR p$[rsp]
	call	stb_hashptr
	mov	DWORD PTR h$[rsp], eax
; Line 7484
	mov	eax, DWORD PTR ?stb__alloc_mask@@3HA
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 7485
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN5@stb__hashf
; Line 7486
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stb__hashf
$LN5@stb__hashf:
; Line 7487
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb__hashf:
; Line 7489
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN6@stb__hashf
; Line 7490
	mov	eax, -1
	jmp	SHORT $LN1@stb__hashf
$LN6@stb__hashf:
; Line 7491
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, DWORD PTR ?stb__alloc_mask@@3HA
	mov	DWORD PTR n$[rsp], eax
; Line 7492
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN7@stb__hashf
; Line 7493
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stb__hashf
$LN7@stb__hashf:
; Line 7494
	jmp	SHORT $LN2@stb__hashf
$LN1@stb__hashf:
; Line 7495
	add	rsp, 56					; 00000038H
	ret	0
?stb__hashfind@@YAHPEAX@Z ENDP				; stb__hashfind
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 48
?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z PROC	; stb__dirtree_free_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 7315
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7316
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	stb_free
; Line 7317
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, rax
	call	stb_arr_free_
; Line 7318
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	stb_arr_free_
; Line 7319
	add	rsp, 40					; 00000028H
	ret	0
?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z ENDP	; stb__dirtree_free_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
rescan$ = 56
changes_detected$ = 64
remap$ = 72
tv72 = 80
tv83 = 84
tv94 = 88
n$1 = 92
tv174 = 96
tv179 = 100
tv201 = 104
tv237 = 108
tv253 = 112
dir$2 = 116
tv292 = 120
z$3 = 124
tv197 = 128
tv207 = 132
tv324 = 136
tv320 = 144
tv225 = 152
tv277 = 160
tv306 = 168
info$4 = 176
__$ArrayPad$ = 224
db$ = 256
active$ = 264
?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z PROC	; stb__dirtree_update_db
; File W:\cpp\void\vendor\stb\stb.h
; Line 7235
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 240				; 000000f0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7236
	mov	DWORD PTR changes_detected$[rsp], 0
; Line 7239
	mov	QWORD PTR rescan$[rsp], 0
; Line 7240
	mov	rax, QWORD PTR db$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN23@stb__dirtr
	mov	rax, QWORD PTR db$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN24@stb__dirtr
$LN23@stb__dirtr:
	mov	DWORD PTR tv72[rsp], 0
$LN24@stb__dirtr:
	movsxd	rax, DWORD PTR tv72[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR remap$[rsp], rax
; Line 7241
	mov	rax, QWORD PTR db$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN25@stb__dirtr
	mov	rax, QWORD PTR db$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN26@stb__dirtr
$LN25@stb__dirtr:
	mov	DWORD PTR tv83[rsp], 0
$LN26@stb__dirtr:
	movsxd	rax, DWORD PTR tv83[rsp]
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR remap$[rsp]
	call	memset
; Line 7242
	mov	QWORD PTR rescan$[rsp], 0
; Line 7244
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__dirtr
$LN2@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__dirtr:
	mov	rax, QWORD PTR db$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN27@stb__dirtr
	mov	rax, QWORD PTR db$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv94[rsp], eax
	jmp	SHORT $LN28@stb__dirtr
$LN27@stb__dirtr:
	mov	DWORD PTR tv94[rsp], 0
$LN28@stb__dirtr:
	mov	eax, DWORD PTR tv94[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__dirtr
; Line 7246
	cmp	DWORD PTR ?stb__dircount_mask@@3HA, 0
	je	SHORT $LN11@stb__dirtr
; Line 7247
	mov	eax, DWORD PTR ?stb__dircount@@3HA
	inc	eax
	mov	DWORD PTR ?stb__dircount@@3HA, eax
; Line 7248
	mov	eax, DWORD PTR ?stb__dircount_mask@@3HA
	mov	ecx, DWORD PTR ?stb__dircount@@3HA
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN12@stb__dirtr
; Line 7249
	lea	rcx, OFFSET FLAT:$SG88449
	call	printf
$LN12@stb__dirtr:
$LN11@stb__dirtr:
; Line 7252
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, QWORD PTR info$4[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__stat64i32
	test	eax, eax
	jne	$LN13@stb__dirtr
; Line 7253
	movzx	eax, WORD PTR info$4[rsp+6]
	and	eax, 16384				; 00004000H
	test	eax, eax
	je	$LN15@stb__dirtr
; Line 7255
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR info$4[rsp+32]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR n$1[rsp], eax
; Line 7256
	cmp	DWORD PTR n$1[rsp], 1
	jle	$LN17@stb__dirtr
	cmp	DWORD PTR n$1[rsp], 3600		; 00000e10H
	je	$LN17@stb__dirtr
; Line 7260
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN19@stb__dirtr
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 24
	mov	r8, QWORD PTR db$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	QWORD PTR tv324[rsp], r8
	mov	r9d, DWORD PTR info$4[rsp+32]
	mov	r8d, DWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv324[rsp]
	mov	rdx, QWORD PTR [rax+rdx]
	lea	rcx, OFFSET FLAT:$SG88457
	call	printf
$LN19@stb__dirtr:
; Line 7261
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv207[rsp], eax
	cmp	QWORD PTR rescan$[rsp], 0
	je	SHORT $LN29@stb__dirtr
	mov	rax, QWORD PTR rescan$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv174[rsp], eax
	jmp	SHORT $LN30@stb__dirtr
$LN29@stb__dirtr:
	mov	DWORD PTR tv174[rsp], 0
$LN30@stb__dirtr:
	cmp	QWORD PTR rescan$[rsp], 0
	je	SHORT $LN31@stb__dirtr
	mov	rax, QWORD PTR rescan$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv179[rsp], eax
	jmp	SHORT $LN32@stb__dirtr
$LN31@stb__dirtr:
	mov	DWORD PTR tv179[rsp], 0
$LN32@stb__dirtr:
	mov	eax, DWORD PTR tv174[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv179[rsp]
	jle	SHORT $LN34@stb__dirtr
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR rescan$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv197[rsp], 0
	jmp	SHORT $LN35@stb__dirtr
$LN34@stb__dirtr:
	cmp	QWORD PTR rescan$[rsp], 0
	je	SHORT $LN33@stb__dirtr
	mov	rax, QWORD PTR rescan$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN33@stb__dirtr
	mov	r8d, 7261				; 00001c5dH
	lea	rdx, OFFSET FLAT:$SG88458
	lea	rcx, OFFSET FLAT:$SG88459
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN33@stb__dirtr:
	mov	rax, QWORD PTR rescan$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR rescan$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv197[rsp], 0
$LN35@stb__dirtr:
	cmp	QWORD PTR rescan$[rsp], 0
	je	SHORT $LN36@stb__dirtr
	mov	rax, QWORD PTR rescan$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv201[rsp], eax
	jmp	SHORT $LN37@stb__dirtr
$LN36@stb__dirtr:
	mov	DWORD PTR tv201[rsp], 0
$LN37@stb__dirtr:
	movsxd	rax, DWORD PTR tv201[rsp]
	mov	rcx, QWORD PTR rescan$[rsp]
	mov	edx, DWORD PTR tv207[rsp]
	mov	DWORD PTR [rcx+rax*4-4], edx
; Line 7263
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR info$4[rsp+32]
	mov	QWORD PTR [rcx+rax+8], rdx
; Line 7265
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR remap$[rsp]
	mov	DWORD PTR [rcx+rax*4], -1
; Line 7266
	mov	DWORD PTR changes_detected$[rsp], 1
; Line 7267
	jmp	$LN18@stb__dirtr
$LN17@stb__dirtr:
; Line 7269
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 24
	mov	QWORD PTR tv225[rsp], rdx
	mov	r8, QWORD PTR db$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	QWORD PTR tv320[rsp], r8
	mov	r8, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR tv320[rsp]
	mov	rax, QWORD PTR tv225[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z ; stb__dirtree_add_dir
; Line 7270
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN38@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv237[rsp], eax
	jmp	SHORT $LN39@stb__dirtr
$LN38@stb__dirtr:
	mov	DWORD PTR tv237[rsp], 0
$LN39@stb__dirtr:
	mov	eax, DWORD PTR tv237[rsp]
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR remap$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN18@stb__dirtr:
; Line 7272
	jmp	SHORT $LN16@stb__dirtr
$LN15@stb__dirtr:
; Line 7275
	jmp	SHORT $LN20@stb__dirtr
	jmp	SHORT $delete_entry$44
$LN16@stb__dirtr:
; Line 7277
	jmp	SHORT $LN14@stb__dirtr
$LN13@stb__dirtr:
$LN20@stb__dirtr:
$delete_entry$44:
; Line 7281
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+rax], 0
; Line 7282
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR remap$[rsp]
	mov	DWORD PTR [rcx+rax*4], -1
; Line 7283
	mov	DWORD PTR changes_detected$[rsp], 1
$LN14@stb__dirtr:
; Line 7285
	jmp	$LN2@stb__dirtr
$LN3@stb__dirtr:
; Line 7294
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb__dirtr
$LN5@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb__dirtr:
	mov	rax, QWORD PTR db$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN40@stb__dirtr
	mov	rax, QWORD PTR db$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv253[rsp], eax
	jmp	SHORT $LN41@stb__dirtr
$LN40@stb__dirtr:
	mov	DWORD PTR tv253[rsp], 0
$LN41@stb__dirtr:
	mov	eax, DWORD PTR tv253[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stb__dirtr
; Line 7295
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rcx+rax+8]
	mov	DWORD PTR dir$2[rsp], eax
; Line 7296
	movsxd	rax, DWORD PTR dir$2[rsp]
	mov	rcx, QWORD PTR remap$[rsp]
	cmp	DWORD PTR [rcx+rax*4], 0
	jl	SHORT $LN21@stb__dirtr
; Line 7297
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 40				; 00000028H
	mov	r8, QWORD PTR db$[rsp]
	mov	r8, QWORD PTR [r8+8]
	movsxd	r9, DWORD PTR dir$2[rsp]
	mov	QWORD PTR tv277[rsp], r9
	movsxd	r10, DWORD PTR i$[rsp]
	imul	r10, r10, 40				; 00000028H
	mov	r11, QWORD PTR db$[rsp]
	mov	r11, QWORD PTR [r11+8]
	mov	rbx, QWORD PTR active$[rsp]
	mov	QWORD PTR [rsp+32], rbx
	mov	r9, QWORD PTR [rcx+rax+24]
	mov	r8, QWORD PTR [r8+rdx+16]
	mov	rax, QWORD PTR remap$[rsp]
	mov	rcx, QWORD PTR tv277[rsp]
	mov	edx, DWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR [r11+r10]
	call	?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z ; stb__dirtree_add_file
$LN21@stb__dirtr:
; Line 7299
	jmp	$LN5@stb__dirtr
$LN6@stb__dirtr:
; Line 7302
	mov	rcx, QWORD PTR remap$[rsp]
	call	QWORD PTR __imp_free
; Line 7305
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stb__dirtr
$LN8@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stb__dirtr:
	cmp	QWORD PTR rescan$[rsp], 0
	je	SHORT $LN42@stb__dirtr
	mov	rax, QWORD PTR rescan$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv292[rsp], eax
	jmp	SHORT $LN43@stb__dirtr
$LN42@stb__dirtr:
	mov	DWORD PTR tv292[rsp], 0
$LN43@stb__dirtr:
	mov	eax, DWORD PTR tv292[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stb__dirtr
; Line 7306
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR rescan$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR z$3[rsp], eax
; Line 7307
	movsxd	rax, DWORD PTR z$3[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR z$3[rsp]
	imul	rdx, rdx, 24
	mov	QWORD PTR tv306[rsp], rdx
	mov	rbx, QWORD PTR db$[rsp]
	mov	rbx, QWORD PTR [rbx]
	mov	r8, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv306[rsp]
	mov	rcx, QWORD PTR [rbx+rax]
	call	?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z ; stb__dirtree_scandir
; Line 7308
	jmp	$LN8@stb__dirtr
$LN9@stb__dirtr:
; Line 7309
	lea	rcx, QWORD PTR rescan$[rsp]
	call	stb_arr_free_
; Line 7311
	mov	eax, DWORD PTR changes_detected$[rsp]
; Line 7312
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 240				; 000000f0H
	pop	rbx
	ret	0
?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z ENDP	; stb__dirtree_update_db
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 48
hFile$ = 52
new_path$1 = 56
tv77 = 64
tv130 = 68
tv138 = 72
tv161 = 76
has_slash$ = 80
pad$2 = 88
temp$3 = 96
temp$4 = 104
c_file$ = 112
dummy_path$5 = 672
full_path$ = 800
__$ArrayPad$ = 2848
path$ = 2880
last_time$ = 2888
active$ = 2896
?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z PROC ; stb__dirtree_scandir
; File W:\cpp\void\vendor\stb\stb.h
; Line 7137
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2872				; 00000b38H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7148
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN10@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88371
	call	printf
$LN10@stb__dirtr:
; Line 7150
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN32@stb__dirtr
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	rcx, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rcx+rax-1]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN32@stb__dirtr
	mov	DWORD PTR tv77[rsp], 1
	jmp	SHORT $LN33@stb__dirtr
$LN32@stb__dirtr:
	mov	DWORD PTR tv77[rsp], 0
$LN33@stb__dirtr:
	mov	eax, DWORD PTR tv77[rsp]
	mov	DWORD PTR has_slash$[rsp], eax
; Line 7161
	cmp	DWORD PTR has_slash$[rsp], 0
	je	SHORT $LN11@stb__dirtr
; Line 7162
	mov	rcx, QWORD PTR path$[rsp]
	call	stb__from_utf8
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG88374
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR full_path$[rsp]
	call	swprintf
	jmp	SHORT $LN12@stb__dirtr
$LN11@stb__dirtr:
; Line 7164
	mov	rcx, QWORD PTR path$[rsp]
	call	stb__from_utf8
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG88375
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR full_path$[rsp]
	call	swprintf
$LN12@stb__dirtr:
; Line 7169
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN13@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN34@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv130[rsp], eax
	jmp	SHORT $LN35@stb__dirtr
$LN34@stb__dirtr:
	mov	DWORD PTR tv130[rsp], 0
$LN35@stb__dirtr:
	mov	edx, DWORD PTR tv130[rsp]
	lea	rcx, OFFSET FLAT:$SG88377
	call	printf
$LN13@stb__dirtr:
; Line 7170
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN4@stb__dirtr
$LN2@stb__dirtr:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN4@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN36@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN37@stb__dirtr
$LN36@stb__dirtr:
	mov	DWORD PTR tv138[rsp], 0
$LN37@stb__dirtr:
	mov	eax, DWORD PTR tv138[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN3@stb__dirtr
; Line 7171
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN14@stb__dirtr
; Line 7172
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN15@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88380
	call	printf
$LN15@stb__dirtr:
; Line 7173
	jmp	$LN1@stb__dirtr
$LN14@stb__dirtr:
; Line 7174
	jmp	$LN2@stb__dirtr
$LN3@stb__dirtr:
; Line 7175
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN16@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88382
	call	printf
$LN16@stb__dirtr:
; Line 7178
	mov	r8, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR last_time$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	call	?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z ; stb__dirtree_add_dir
; Line 7179
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN38@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv161[rsp], eax
	jmp	SHORT $LN39@stb__dirtr
$LN38@stb__dirtr:
	mov	DWORD PTR tv161[rsp], 0
$LN39@stb__dirtr:
	mov	eax, DWORD PTR tv161[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
; Line 7181
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN17@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88384
	call	printf
$LN17@stb__dirtr:
; Line 7182
	lea	rdx, QWORD PTR c_file$[rsp]
	lea	rcx, QWORD PTR full_path$[rsp]
	call	QWORD PTR __imp__wfindfirst64
	mov	DWORD PTR hFile$[rsp], eax
	cmp	DWORD PTR hFile$[rsp], -1
	je	$LN18@stb__dirtr
$LN7@stb__dirtr:
; Line 7184
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN19@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88387
	call	printf
$LN19@stb__dirtr:
; Line 7185
	mov	eax, DWORD PTR c_file$[rsp]
	and	eax, 16
	test	eax, eax
	je	$LN20@stb__dirtr
; Line 7187
	mov	eax, 2
	imul	rax, rax, 0
	movzx	eax, WORD PTR c_file$[rsp+rax+40]
	cmp	eax, 46					; 0000002eH
	je	$LN22@stb__dirtr
; Line 7188
	lea	rax, QWORD PTR full_path$[rsp]
	mov	QWORD PTR new_path$1[rsp], rax
; Line 7189
	lea	rcx, QWORD PTR c_file$[rsp+40]
	call	stb__to_utf8
	mov	QWORD PTR temp$3[rsp], rax
; Line 7191
	cmp	DWORD PTR has_slash$[rsp], 0
	je	SHORT $LN23@stb__dirtr
; Line 7192
	mov	rax, QWORD PTR temp$3[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG88393
	mov	edx, 2048				; 00000800H
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	sprintf_s
	jmp	SHORT $LN24@stb__dirtr
$LN23@stb__dirtr:
; Line 7194
	mov	rax, QWORD PTR temp$3[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR path$[rsp]
	lea	r8, OFFSET FLAT:$SG88394
	mov	edx, 2048				; 00000800H
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	sprintf_s
$LN24@stb__dirtr:
; Line 7196
	cmp	DWORD PTR ?stb__dircount_mask@@3HA, 0
	je	$LN25@stb__dirtr
; Line 7197
	mov	eax, DWORD PTR ?stb__dircount@@3HA
	inc	eax
	mov	DWORD PTR ?stb__dircount@@3HA, eax
; Line 7198
	mov	eax, DWORD PTR ?stb__dircount_mask@@3HA
	mov	ecx, DWORD PTR ?stb__dircount@@3HA
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	$LN26@stb__dirtr
; Line 7200
	mov	r8d, 127				; 0000007fH
	mov	rdx, QWORD PTR new_path$1[rsp]
	lea	rcx, QWORD PTR dummy_path$5[rsp]
	call	stb_strncpy
; Line 7201
	lea	rcx, QWORD PTR dummy_path$5[rsp]
	call	strlen
	cmp	rax, 96					; 00000060H
	jbe	SHORT $LN27@stb__dirtr
; Line 7202
	lea	rax, QWORD PTR dummy_path$5[rsp+47]
	lea	r8, OFFSET FLAT:$SG88398
	mov	edx, 128				; 00000080H
	mov	rcx, rax
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 7203
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	strlen
	mov	rcx, QWORD PTR new_path$1[rsp]
	lea	rax, QWORD PTR [rcx+rax-46]
	lea	rcx, QWORD PTR dummy_path$5[rsp+50]
	mov	r8, rax
	mov	edx, 128				; 00000080H
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
$LN27@stb__dirtr:
; Line 7205
	lea	rcx, QWORD PTR dummy_path$5[rsp]
	call	strlen
	lea	rax, QWORD PTR dummy_path$5[rsp+rax]
	mov	QWORD PTR pad$2[rsp], rax
$LN8@stb__dirtr:
; Line 7206
	lea	rax, QWORD PTR dummy_path$5[rsp+98]
	cmp	QWORD PTR pad$2[rsp], rax
	jae	SHORT $LN9@stb__dirtr
; Line 7207
	mov	rax, QWORD PTR pad$2[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR pad$2[rsp]
	inc	rax
	mov	QWORD PTR pad$2[rsp], rax
	jmp	SHORT $LN8@stb__dirtr
$LN9@stb__dirtr:
; Line 7208
	mov	rax, QWORD PTR pad$2[rsp]
	mov	BYTE PTR [rax], 0
; Line 7209
	lea	rdx, QWORD PTR dummy_path$5[rsp]
	lea	rcx, OFFSET FLAT:$SG88399
	call	printf
$LN26@stb__dirtr:
$LN25@stb__dirtr:
; Line 7219
	mov	r8, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR c_file$[rsp+24]
	mov	rcx, QWORD PTR new_path$1[rsp]
	call	?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z ; stb__dirtree_scandir
$LN22@stb__dirtr:
; Line 7221
	jmp	SHORT $LN21@stb__dirtr
$LN20@stb__dirtr:
; Line 7222
	lea	rcx, QWORD PTR c_file$[rsp+40]
	call	stb__to_utf8
	mov	QWORD PTR temp$4[rsp], rax
; Line 7223
	mov	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR c_file$[rsp+24]
	mov	r8, QWORD PTR c_file$[rsp+32]
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR temp$4[rsp]
	call	?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z ; stb__dirtree_add_file
$LN21@stb__dirtr:
; Line 7225
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN28@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88401
	call	printf
$LN28@stb__dirtr:
; Line 7226
	movsxd	rax, DWORD PTR hFile$[rsp]
	lea	rdx, QWORD PTR c_file$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp__wfindnext64
	test	eax, eax
	je	$LN7@stb__dirtr
; Line 7227
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN29@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88403
	call	printf
$LN29@stb__dirtr:
; Line 7228
	movsxd	rax, DWORD PTR hFile$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp__findclose
$LN18@stb__dirtr:
; Line 7230
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN30@stb__dirtr
	lea	rcx, OFFSET FLAT:$SG88405
	call	printf
$LN30@stb__dirtr:
$LN1@stb__dirtr:
; Line 7231
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2872				; 00000b38H
	ret	0
?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z ENDP ; stb__dirtree_scandir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
f$ = 40
n$ = 48
tv143 = 52
tv185 = 56
tv198 = 60
tv203 = 64
tv164 = 72
tv212 = 80
tv232 = 88
sig$ = 96
__$ArrayPad$ = 2144
filename$ = 2176
data$ = 2184
dir$ = 2192
?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z PROC	; stb__dirtree_load_db
; File W:\cpp\void\vendor\stb\stb.h
; Line 7093
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2168				; 00000878H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7096
	lea	rdx, OFFSET FLAT:$SG88319
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7098
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN8@stb__dirtr
	jmp	$LN1@stb__dirtr
$LN8@stb__dirtr:
; Line 7100
	mov	edx, 1
	xor	ecx, ecx
	call	stb_malloc
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 7102
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 12
	lea	rcx, QWORD PTR sig$[rsp]
	call	QWORD PTR __imp_fread
; Line 7103
	mov	r8d, 12
	lea	rdx, QWORD PTR sig$[rsp]
	lea	rcx, OFFSET FLAT:?stb__signature@@3PADA
	call	memcmp
	test	eax, eax
	je	SHORT $LN9@stb__dirtr
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
	jmp	$LN1@stb__dirtr
$LN9@stb__dirtr:
; Line 7104
	mov	rcx, QWORD PTR dir$[rsp]
	call	strlen
	inc	rax
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	rdx, rax
	lea	rcx, QWORD PTR sig$[rsp]
	call	QWORD PTR __imp_fread
	test	rax, rax
	jne	SHORT $LN10@stb__dirtr
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
	jmp	$LN1@stb__dirtr
$LN10@stb__dirtr:
; Line 7105
	mov	rdx, QWORD PTR dir$[rsp]
	lea	rcx, QWORD PTR sig$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	je	SHORT $LN11@stb__dirtr
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
	jmp	$LN1@stb__dirtr
$LN11@stb__dirtr:
; Line 7108
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR n$[rsp]
	call	QWORD PTR __imp_fread
; Line 7109
	mov	rax, QWORD PTR data$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, 24
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 7110
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__dirtr
$LN2@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__dirtr:
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN18@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv143[rsp], eax
	jmp	SHORT $LN19@stb__dirtr
$LN18@stb__dirtr:
	mov	DWORD PTR tv143[rsp], 0
$LN19@stb__dirtr:
	mov	eax, DWORD PTR tv143[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__dirtr
; Line 7111
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_fread
; Line 7112
	mov	rax, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z ; stb_fget_string
	mov	QWORD PTR tv164[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR tv164[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 7113
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN12@stb__dirtr
	jmp	$LN13@stb__dirtr
	jmp	$bail$24
$LN12@stb__dirtr:
; Line 7114
	jmp	$LN2@stb__dirtr
$LN3@stb__dirtr:
; Line 7115
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR n$[rsp]
	call	QWORD PTR __imp_fread
; Line 7116
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, 40					; 00000028H
	mov	rcx, rax
	call	stb__arr_setlen_
; Line 7117
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb__dirtr
$LN5@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb__dirtr:
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN20@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN21@stb__dirtr
$LN20@stb__dirtr:
	mov	DWORD PTR tv185[rsp], 0
$LN21@stb__dirtr:
	mov	eax, DWORD PTR tv185[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stb__dirtr
; Line 7118
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN22@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv198[rsp], eax
	jmp	SHORT $LN23@stb__dirtr
$LN22@stb__dirtr:
	mov	DWORD PTR tv198[rsp], 0
$LN23@stb__dirtr:
	mov	r8d, DWORD PTR tv198[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fget_ranged
	mov	DWORD PTR tv203[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR tv203[rsp]
	mov	DWORD PTR [rcx+rax+8], edx
; Line 7119
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fget_varlen64
	mov	QWORD PTR tv212[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR tv212[rsp]
	mov	QWORD PTR [rcx+rax+16], rdx
; Line 7120
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+24]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_fread
; Line 7121
	mov	rax, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z ; stb_fget_string
	mov	QWORD PTR tv232[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR tv232[rsp]
	mov	QWORD PTR [rcx+rax], rdx
; Line 7122
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN14@stb__dirtr
	jmp	SHORT $LN15@stb__dirtr
	jmp	SHORT $bail$24
$LN14@stb__dirtr:
; Line 7123
	jmp	$LN5@stb__dirtr
$LN6@stb__dirtr:
; Line 7125
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@stb__dirtr
$LN13@stb__dirtr:
$LN15@stb__dirtr:
$bail$24:
; Line 7127
	mov	rax, QWORD PTR data$[rsp]
	mov	rcx, rax
	call	stb_arr_free_
; Line 7128
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	stb_arr_free_
$LN16@stb__dirtr:
; Line 7130
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN1@stb__dirtr:
; Line 7131
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2168				; 00000878H
	ret	0
?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z ENDP	; stb__dirtree_load_db
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
f$ = 40
num_dirs_final$ = 48
num_files_final$ = 52
remap$ = 56
tv89 = 64
tv132 = 68
tv169 = 72
tv197 = 76
tv225 = 80
tv158 = 84
tv65 = 88
info$ = 96
filename$ = 128
data$ = 136
root$ = 144
?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z PROC	; stb__dirtree_save_db
; File W:\cpp\void\vendor\stb\stb.h
; Line 7044
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 7045
	mov	DWORD PTR num_dirs_final$[rsp], 0
; Line 7046
	cmp	QWORD PTR root$[rsp], 0
	je	SHORT $LN22@stb__dirtr
	mov	rax, QWORD PTR root$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN23@stb__dirtr
$LN22@stb__dirtr:
	lea	rax, OFFSET FLAT:$SG88287
	mov	QWORD PTR tv65[rsp], rax
$LN23@stb__dirtr:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR info$[rsp], rax
; Line 7048
	lea	rdx, OFFSET FLAT:$SG88288
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7049
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN14@stb__dirtr
	jmp	$LN1@stb__dirtr
$LN14@stb__dirtr:
; Line 7051
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 12
	lea	rcx, OFFSET FLAT:?stb__signature@@3PADA
	call	QWORD PTR __imp_fwrite
; Line 7052
	mov	rcx, QWORD PTR info$[rsp]
	call	strlen
	inc	rax
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR info$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 7056
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN24@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN25@stb__dirtr
$LN24@stb__dirtr:
	mov	DWORD PTR tv89[rsp], 0
$LN25@stb__dirtr:
	movsxd	rax, DWORD PTR tv89[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR remap$[rsp], rax
; Line 7057
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__dirtr
$LN2@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__dirtr:
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN26@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN27@stb__dirtr
$LN26@stb__dirtr:
	mov	DWORD PTR tv132[rsp], 0
$LN27@stb__dirtr:
	mov	eax, DWORD PTR tv132[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__dirtr
; Line 7058
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN17@stb__dirtr
	cmp	QWORD PTR root$[rsp], 0
	je	SHORT $LN15@stb__dirtr
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN15@stb__dirtr
$LN17@stb__dirtr:
; Line 7059
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR remap$[rsp]
	mov	DWORD PTR [rcx+rax*4], -1
; Line 7060
	jmp	SHORT $LN16@stb__dirtr
$LN15@stb__dirtr:
; Line 7061
	mov	eax, DWORD PTR num_dirs_final$[rsp]
	mov	DWORD PTR tv158[rsp], eax
	mov	eax, DWORD PTR num_dirs_final$[rsp]
	inc	eax
	mov	DWORD PTR num_dirs_final$[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR remap$[rsp]
	mov	edx, DWORD PTR tv158[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
$LN16@stb__dirtr:
; Line 7063
	jmp	$LN2@stb__dirtr
$LN3@stb__dirtr:
; Line 7065
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR num_dirs_final$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 7066
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb__dirtr
$LN5@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb__dirtr:
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN28@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv169[rsp], eax
	jmp	SHORT $LN29@stb__dirtr
$LN28@stb__dirtr:
	mov	DWORD PTR tv169[rsp], 0
$LN29@stb__dirtr:
	mov	eax, DWORD PTR tv169[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stb__dirtr
; Line 7067
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR remap$[rsp]
	cmp	DWORD PTR [rcx+rax*4], 0
	jl	SHORT $LN18@stb__dirtr
; Line 7068
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_fwrite
; Line 7069
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z	; stb_fput_string
$LN18@stb__dirtr:
; Line 7071
	jmp	$LN5@stb__dirtr
$LN6@stb__dirtr:
; Line 7073
	mov	DWORD PTR num_files_final$[rsp], 0
; Line 7074
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stb__dirtr
$LN8@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stb__dirtr:
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN30@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv197[rsp], eax
	jmp	SHORT $LN31@stb__dirtr
$LN30@stb__dirtr:
	mov	DWORD PTR tv197[rsp], 0
$LN31@stb__dirtr:
	mov	eax, DWORD PTR tv197[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stb__dirtr
; Line 7075
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rax, DWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR remap$[rsp]
	cmp	DWORD PTR [rcx+rax*4], 0
	jl	SHORT $LN19@stb__dirtr
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN19@stb__dirtr
; Line 7076
	mov	eax, DWORD PTR num_files_final$[rsp]
	inc	eax
	mov	DWORD PTR num_files_final$[rsp], eax
$LN19@stb__dirtr:
	jmp	$LN8@stb__dirtr
$LN9@stb__dirtr:
; Line 7078
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR num_files_final$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 7079
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stb__dirtr
$LN11@stb__dirtr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stb__dirtr:
	mov	rax, QWORD PTR data$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN32@stb__dirtr
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv225[rsp], eax
	jmp	SHORT $LN33@stb__dirtr
$LN32@stb__dirtr:
	mov	DWORD PTR tv225[rsp], 0
$LN33@stb__dirtr:
	mov	eax, DWORD PTR tv225[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN12@stb__dirtr
; Line 7080
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rax, DWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR remap$[rsp]
	cmp	DWORD PTR [rcx+rax*4], 0
	jl	$LN20@stb__dirtr
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN20@stb__dirtr
; Line 7081
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rax, DWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR num_dirs_final$[rsp]
	xor	r8d, r8d
	mov	rcx, QWORD PTR remap$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fput_ranged
; Line 7082
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fput_varlen64
; Line 7083
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+24]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_fwrite
; Line 7084
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z	; stb_fput_string
$LN20@stb__dirtr:
; Line 7086
	jmp	$LN11@stb__dirtr
$LN12@stb__dirtr:
; Line 7088
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN1@stb__dirtr:
; Line 7089
	add	rsp, 120				; 00000078H
	ret	0
?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z ENDP	; stb__dirtree_save_db
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv84 = 32
tv91 = 36
tv153 = 40
tv146 = 44
f$ = 48
$T1 = 88
name$ = 160
dir$ = 168
size$ = 176
last$ = 184
active$ = 192
?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z PROC ; stb__dirtree_add_file
; File W:\cpp\void\vendor\stb\stb.h
; Line 7030
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 7032
	mov	eax, DWORD PTR dir$[rsp]
	mov	DWORD PTR f$[rsp+8], eax
; Line 7033
	mov	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR f$[rsp+16], rax
; Line 7034
	mov	rax, QWORD PTR last$[rsp]
	mov	QWORD PTR f$[rsp+24], rax
; Line 7035
	mov	rax, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR name$[rsp]
	call	?stb_strdup@@YAPEADPEADPEAX@Z		; stb_strdup
	mov	QWORD PTR f$[rsp], rax
; Line 7036
	movsxd	rax, DWORD PTR dir$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+rax+16]
	inc	eax
	movsxd	rcx, DWORD PTR dir$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx+16], eax
; Line 7037
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 40					; 00000028H
	rep movsb
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN4@stb__dirtr
$LN3@stb__dirtr:
	mov	DWORD PTR tv84[rsp], 0
$LN4@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN5@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN6@stb__dirtr
$LN5@stb__dirtr:
	mov	DWORD PTR tv91[rsp], 0
$LN6@stb__dirtr:
	mov	eax, DWORD PTR tv84[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv91[rsp]
	jle	SHORT $LN8@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	add	rax, 8
	mov	r8d, 1
	mov	edx, 40					; 00000028H
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN9@stb__dirtr
$LN8@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN7@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN7@stb__dirtr
	mov	r8d, 7037				; 00001b7dH
	lea	rdx, OFFSET FLAT:$SG88254
	lea	rcx, OFFSET FLAT:$SG88255
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv146[rsp], 0
$LN9@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN10@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv153[rsp], eax
	jmp	SHORT $LN11@stb__dirtr
$LN10@stb__dirtr:
	mov	DWORD PTR tv153[rsp], 0
$LN11@stb__dirtr:
	movsxd	rax, DWORD PTR tv153[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rcx+rax-40]
	mov	rsi, rdx
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 7038
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z ENDP ; stb__dirtree_add_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
tv80 = 36
tv142 = 40
tv135 = 44
d$ = 48
$T1 = 72
path$ = 128
last$ = 136
active$ = 144
?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z PROC ; stb__dirtree_add_dir
; File W:\cpp\void\vendor\stb\stb.h
; Line 7021
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 7023
	mov	rax, QWORD PTR last$[rsp]
	mov	QWORD PTR d$[rsp+8], rax
; Line 7024
	mov	DWORD PTR d$[rsp+16], 0
; Line 7025
	mov	rax, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR path$[rsp]
	call	?stb_strdup@@YAPEADPEADPEAX@Z		; stb_strdup
	mov	QWORD PTR d$[rsp], rax
; Line 7026
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR d$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN4@stb__dirtr
$LN3@stb__dirtr:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv80[rsp], eax
	jmp	SHORT $LN6@stb__dirtr
$LN5@stb__dirtr:
	mov	DWORD PTR tv80[rsp], 0
$LN6@stb__dirtr:
	mov	eax, DWORD PTR tv73[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv80[rsp]
	jle	SHORT $LN8@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	r8d, 1
	mov	edx, 24
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN9@stb__dirtr
$LN8@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN7@stb__dirtr
	mov	r8d, 7026				; 00001b72H
	lea	rdx, OFFSET FLAT:$SG88236
	lea	rcx, OFFSET FLAT:$SG88237
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv135[rsp], 0
$LN9@stb__dirtr:
	mov	rax, QWORD PTR active$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@stb__dirtr
	mov	rax, QWORD PTR active$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv142[rsp], eax
	jmp	SHORT $LN11@stb__dirtr
$LN10@stb__dirtr:
	mov	DWORD PTR tv142[rsp], 0
$LN11@stb__dirtr:
	movsxd	rax, DWORD PTR tv142[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rcx+rax-24]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
; Line 7027
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z ENDP ; stb__dirtree_add_dir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
target$ = 48
filename$ = 56
dir$ = 64
?stb_dirtree_db_write@@YAXPEAUstb_dirtree@@PEAD1@Z PROC	; stb_dirtree_db_write
; File W:\cpp\void\vendor\stb\stb.h
; Line 7441
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7442
	xor	r8d, r8d
	mov	rdx, QWORD PTR target$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z ; stb__dirtree_save_db
; Line 7443
	add	rsp, 40					; 00000028H
	ret	0
?stb_dirtree_db_write@@YAXPEAUstb_dirtree@@PEAD1@Z ENDP	; stb_dirtree_db_write
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
target$ = 64
filename$ = 72
dir$ = 80
?stb_dirtree_db_read@@YAXPEAUstb_dirtree@@PEAD1@Z PROC	; stb_dirtree_db_read
; File W:\cpp\void\vendor\stb\stb.h
; Line 7431
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7432
	mov	rcx, QWORD PTR dir$[rsp]
	call	QWORD PTR __imp__strdup
	mov	rcx, rax
	call	?stb_strip_final_slash@@YAPEADPEAD@Z	; stb_strip_final_slash
	mov	QWORD PTR s$[rsp], rax
; Line 7433
	mov	rax, QWORD PTR target$[rsp]
	mov	QWORD PTR [rax], 0
; Line 7434
	mov	rax, QWORD PTR target$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 7435
	mov	rax, QWORD PTR target$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 7436
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR target$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z ; stb__dirtree_load_db
; Line 7437
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_free
; Line 7438
	add	rsp, 56					; 00000038H
	ret	0
?stb_dirtree_db_read@@YAXPEAUstb_dirtree@@PEAD1@Z ENDP	; stb_dirtree_db_read
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
active$ = 64
name$ = 72
dir$ = 80
size$ = 88
last$ = 96
?stb_dirtree_db_add_file@@YAXPEAUstb_dirtree@@PEADH_J2@Z PROC ; stb_dirtree_db_add_file
; File W:\cpp\void\vendor\stb\stb.h
; Line 7426
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7427
	mov	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR last$[rsp]
	mov	r8, QWORD PTR size$[rsp]
	mov	edx, DWORD PTR dir$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	?stb__dirtree_add_file@@YAXPEADH_J1PEAUstb_dirtree@@@Z ; stb__dirtree_add_file
; Line 7428
	add	rsp, 56					; 00000038H
	ret	0
?stb_dirtree_db_add_file@@YAXPEAUstb_dirtree@@PEADH_J2@Z ENDP ; stb_dirtree_db_add_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
active$ = 48
path$ = 56
last$ = 64
?stb_dirtree_db_add_dir@@YAXPEAUstb_dirtree@@PEAD_J@Z PROC ; stb_dirtree_db_add_dir
; File W:\cpp\void\vendor\stb\stb.h
; Line 7421
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7422
	mov	r8, QWORD PTR active$[rsp]
	mov	rdx, QWORD PTR last$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	call	?stb__dirtree_add_dir@@YAXPEAD_JPEAUstb_dirtree@@@Z ; stb__dirtree_add_dir
; Line 7423
	add	rsp, 40					; 00000028H
	ret	0
?stb_dirtree_db_add_dir@@YAXPEAUstb_dirtree@@PEAD_J@Z ENDP ; stb_dirtree_db_add_dir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 32
tv133 = 36
stripped_dir$ = 40
cache_mismatch$ = 48
prev_dir_count$ = 52
active$ = 56
output$ = 80
db$ = 88
dir$ = 144
cache_file$ = 152
?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z PROC ; stb_dirtree_get_with_file
; File W:\cpp\void\vendor\stb\stb.h
; Line 7322
$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 7323
	mov	ecx, 24
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR output$[rsp], rax
; Line 7330
	mov	QWORD PTR db$[rsp+16], 0
; Line 7331
	mov	QWORD PTR db$[rsp+8], 0
; Line 7332
	mov	QWORD PTR db$[rsp], 0
; Line 7334
	mov	rcx, QWORD PTR dir$[rsp]
	call	QWORD PTR __imp__strdup
	mov	rcx, rax
	call	?stb_strip_final_slash@@YAPEADPEAD@Z	; stb_strip_final_slash
	mov	QWORD PTR stripped_dir$[rsp], rax
; Line 7336
	cmp	QWORD PTR cache_file$[rsp], 0
	je	SHORT $LN2@stb_dirtre
; Line 7337
	mov	r8, QWORD PTR stripped_dir$[rsp]
	lea	rdx, QWORD PTR db$[rsp]
	mov	rcx, QWORD PTR cache_file$[rsp]
	call	?stb__dirtree_load_db@@YAXPEADPEAUstb_dirtree@@0@Z ; stb__dirtree_load_db
	jmp	SHORT $LN3@stb_dirtre
$LN2@stb_dirtre:
; Line 7338
	cmp	DWORD PTR ?stb__showfile@@3HA, 0
	je	SHORT $LN4@stb_dirtre
; Line 7339
	lea	rcx, OFFSET FLAT:$SG88483
	call	printf
$LN4@stb_dirtre:
$LN3@stb_dirtre:
; Line 7341
	mov	QWORD PTR active$[rsp+8], 0
; Line 7342
	mov	QWORD PTR active$[rsp], 0
; Line 7343
	mov	edx, 1
	xor	ecx, ecx
	call	stb_malloc
	mov	QWORD PTR active$[rsp+16], rax
; Line 7347
	lea	rdx, QWORD PTR active$[rsp]
	lea	rcx, QWORD PTR db$[rsp]
	call	?stb__dirtree_update_db@@YAHPEAUstb_dirtree@@0@Z ; stb__dirtree_update_db
	mov	DWORD PTR cache_mismatch$[rsp], eax
; Line 7350
	cmp	QWORD PTR active$[rsp], 0
	je	SHORT $LN9@stb_dirtre
	mov	rax, QWORD PTR active$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN10@stb_dirtre
$LN9@stb_dirtre:
	mov	DWORD PTR tv91[rsp], 0
$LN10@stb_dirtre:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR prev_dir_count$[rsp], eax
; Line 7352
	lea	r8, QWORD PTR active$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR stripped_dir$[rsp]
	call	?stb__dirtree_scandir@@YAXPEAD_JPEAUstb_dirtree@@@Z ; stb__dirtree_scandir
; Line 7354
	cmp	DWORD PTR ?stb__dircount_mask@@3HA, 0
	je	SHORT $LN5@stb_dirtre
; Line 7355
	lea	rcx, OFFSET FLAT:$SG88485
	call	printf
$LN5@stb_dirtre:
; Line 7361
	cmp	DWORD PTR cache_mismatch$[rsp], 0
	jne	SHORT $LN7@stb_dirtre
	cmp	QWORD PTR active$[rsp], 0
	je	SHORT $LN11@stb_dirtre
	mov	rax, QWORD PTR active$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN12@stb_dirtre
$LN11@stb_dirtre:
	mov	DWORD PTR tv133[rsp], 0
$LN12@stb_dirtre:
	mov	eax, DWORD PTR prev_dir_count$[rsp]
	inc	eax
	cmp	DWORD PTR tv133[rsp], eax
	jle	SHORT $LN6@stb_dirtre
$LN7@stb_dirtre:
; Line 7362
	mov	r8, QWORD PTR stripped_dir$[rsp]
	lea	rdx, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR cache_file$[rsp]
	call	?stb__dirtree_save_db@@YAXPEADPEAUstb_dirtree@@0@Z ; stb__dirtree_save_db
$LN6@stb_dirtre:
; Line 7364
	mov	rcx, QWORD PTR stripped_dir$[rsp]
	call	QWORD PTR __imp_free
; Line 7366
	lea	rcx, QWORD PTR db$[rsp]
	call	?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z ; stb__dirtree_free_raw
; Line 7368
	lea	rax, QWORD PTR active$[rsp]
	mov	rdi, QWORD PTR output$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 7369
	mov	rax, QWORD PTR output$[rsp]
; Line 7370
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z ENDP ; stb_dirtree_get_with_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
i$ = 40
z$1 = 44
hex$2 = 48
sha$ = 56
dir_lower$ = 80
cache_file$ = 1104
__$ArrayPad$ = 2128
dir$ = 2160
cache_dir$ = 2168
?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z PROC	; stb_dirtree_get_dir
; File W:\cpp\void\vendor\stb\stb.h
; Line 7373
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2152				; 00000868H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7378
	cmp	QWORD PTR cache_dir$[rsp], 0
	jne	SHORT $LN5@stb_dirtre
; Line 7379
	xor	edx, edx
	mov	rcx, QWORD PTR dir$[rsp]
	call	?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z ; stb_dirtree_get_with_file
	jmp	$LN1@stb_dirtre
$LN5@stb_dirtre:
; Line 7380
	mov	r8, QWORD PTR dir$[rsp]
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR dir_lower$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 7381
	lea	rcx, QWORD PTR dir_lower$[rsp]
	call	stb_tolower
; Line 7382
	lea	rcx, QWORD PTR dir_lower$[rsp]
	call	strlen
	mov	r8d, eax
	lea	rdx, QWORD PTR dir_lower$[rsp]
	lea	rcx, QWORD PTR sha$[rsp]
	call	stb_sha1
; Line 7383
	mov	r8, QWORD PTR cache_dir$[rsp]
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR cache_file$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 7384
	lea	rcx, QWORD PTR cache_file$[rsp]
	call	strlen
	lea	rax, QWORD PTR cache_file$[rsp+rax]
	mov	QWORD PTR s$[rsp], rax
; Line 7385
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN6@stb_dirtre
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN6@stb_dirtre
	mov	rax, QWORD PTR s$[rsp]
	mov	BYTE PTR [rax], 47			; 0000002fH
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN6@stb_dirtre:
; Line 7386
	lea	r8, OFFSET FLAT:$SG88507
	mov	edx, 1024				; 00000400H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 7387
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rsp], rax
; Line 7388
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_dirtre
$LN2@stb_dirtre:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_dirtre:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@stb_dirtre
; Line 7389
	lea	rax, OFFSET FLAT:$SG88508
	mov	QWORD PTR hex$2[rsp], rax
; Line 7390
	movsxd	rax, DWORD PTR i$[rsp]
	movzx	eax, BYTE PTR sha$[rsp+rax]
	mov	DWORD PTR z$1[rsp], eax
; Line 7391
	mov	eax, DWORD PTR z$1[rsp]
	shr	eax, 4
	mov	eax, eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR hex$2[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 7392
	mov	eax, DWORD PTR z$1[rsp]
	and	eax, 15
	mov	eax, eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR hex$2[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 7393
	jmp	SHORT $LN2@stb_dirtre
$LN3@stb_dirtre:
; Line 7394
	lea	r8, OFFSET FLAT:$SG88509
	mov	edx, 1024				; 00000400H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 7395
	lea	rdx, QWORD PTR cache_file$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	call	?stb_dirtree_get_with_file@@YAPEAUstb_dirtree@@PEAD0@Z ; stb_dirtree_get_with_file
$LN1@stb_dirtre:
; Line 7396
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2152				; 00000868H
	ret	0
?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z ENDP	; stb_dirtree_get_dir
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reg$1 = 32
cache_dir$ = 48
__$ArrayPad$ = 304
dir$ = 336
?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z PROC	; stb_dirtree_get
; File W:\cpp\void\vendor\stb\stb.h
; Line 7399
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7401
	lea	r8, OFFSET FLAT:$SG88515
	mov	edx, 256				; 00000100H
	lea	rcx, QWORD PTR cache_dir$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 7404
	lea	rdx, OFFSET FLAT:$SG88516
	lea	rcx, OFFSET FLAT:$SG88517
	call	stb_reg_open
	mov	QWORD PTR reg$1[rsp], rax
; Line 7405
	cmp	QWORD PTR reg$1[rsp], 0
	je	SHORT $LN2@stb_dirtre
; Line 7406
	mov	r9d, 256				; 00000100H
	lea	r8, QWORD PTR cache_dir$[rsp]
	lea	rdx, OFFSET FLAT:$SG88519
	mov	rcx, QWORD PTR reg$1[rsp]
	call	stb_reg_read
; Line 7407
	mov	rcx, QWORD PTR reg$1[rsp]
	call	stb_reg_close
$LN2@stb_dirtre:
; Line 7411
	lea	rdx, QWORD PTR cache_dir$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	call	?stb_dirtree_get_dir@@YAPEAUstb_dirtree@@PEAD0@Z ; stb_dirtree_get_dir
; Line 7412
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
?stb_dirtree_get@@YAPEAUstb_dirtree@@PEAD@Z ENDP	; stb_dirtree_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 48
?stb_dirtree_free@@YAXPEAUstb_dirtree@@@Z PROC		; stb_dirtree_free
; File W:\cpp\void\vendor\stb\stb.h
; Line 7415
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7416
	mov	rcx, QWORD PTR d$[rsp]
	call	?stb__dirtree_free_raw@@YAXPEAUstb_dirtree@@@Z ; stb__dirtree_free_raw
; Line 7417
	mov	rcx, QWORD PTR d$[rsp]
	call	QWORD PTR __imp_free
; Line 7418
	add	rsp, 40					; 00000028H
	ret	0
?stb_dirtree_free@@YAXPEAUstb_dirtree@@@Z ENDP		; stb_dirtree_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
stb_cfg_set_directory PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6821
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6822
	mov	r8, QWORD PTR dir$[rsp]
	mov	edx, 512				; 00000200H
	lea	rcx, OFFSET FLAT:?stb__cfg_dir@@3PADA
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 6823
	add	rsp, 40					; 00000028H
	ret	0
stb_cfg_set_directory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv70 = 36
tv145 = 40
tv151 = 48
tv149 = 56
z$ = 80
key$ = 88
stb_cfg_delete PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6936
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6938
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_cfg_de
$LN2@stb_cfg_de:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_cfg_de:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stb_cfg_de
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN8@stb_cfg_de
$LN7@stb_cfg_de:
	mov	DWORD PTR tv70[rsp], 0
$LN8@stb_cfg_de:
	mov	eax, DWORD PTR tv70[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_cfg_de
; Line 6939
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	$LN5@stb_cfg_de
; Line 6940
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	dec	eax
	cdqe
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR z$[rsp]
	add	rcx, QWORD PTR [rdx]
	mov	r8d, 24
	mov	rdx, rax
	call	stb_swap
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN9@stb_cfg_de
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN9@stb_cfg_de
	mov	r8d, 6940				; 00001b1cH
	lea	rdx, OFFSET FLAT:$SG88131
	lea	rcx, OFFSET FLAT:$SG88132
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stb_cfg_de:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv151[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	dec	eax
	mov	DWORD PTR tv145[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR tv145[rsp]
	mov	DWORD PTR [rax-16], ecx
	movsxd	rax, DWORD PTR tv145[rsp]
	imul	rax, rax, 24
	mov	QWORD PTR tv149[rsp], rax
; Line 6941
	mov	eax, 1
	jmp	SHORT $LN1@stb_cfg_de
$LN5@stb_cfg_de:
; Line 6942
	jmp	$LN2@stb_cfg_de
$LN3@stb_cfg_de:
; Line 6943
	xor	eax, eax
$LN1@stb_cfg_de:
; Line 6944
	add	rsp, 72					; 00000048H
	ret	0
stb_cfg_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 48
key$ = 56
value$ = 64
stb_cfg_write_string PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6954
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6955
	mov	rcx, QWORD PTR value$[rsp]
	call	strlen
	inc	eax
	mov	r9d, eax
	mov	r8, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stb_cfg_write
; Line 6956
	add	rsp, 40					; 00000028H
	ret	0
stb_cfg_write_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 48
key$ = 56
value$ = 64
len$ = 72
stb_cfg_read_string PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6947
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6948
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stb_cfg_read
	test	eax, eax
	jne	SHORT $LN2@stb_cfg_re
	xor	eax, eax
	jmp	SHORT $LN1@stb_cfg_re
$LN2@stb_cfg_re:
; Line 6949
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 6950
	mov	eax, 1
$LN1@stb_cfg_re:
; Line 6951
	add	rsp, 40					; 00000028H
	ret	0
stb_cfg_read_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv70 = 36
tv86 = 40
tv128 = 44
tv135 = 48
tv165 = 52
tv158 = 56
tv181 = 64
tv187 = 72
p$1 = 80
$T2 = 104
z$ = 160
key$ = 168
value$ = 176
len$ = 184
stb_cfg_write PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6918
$LN21:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 6920
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_cfg_wr
$LN2@stb_cfg_wr:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_cfg_wr:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN9@stb_cfg_wr
$LN8@stb_cfg_wr:
	mov	DWORD PTR tv70[rsp], 0
$LN9@stb_cfg_wr:
	mov	eax, DWORD PTR tv70[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_cfg_wr
; Line 6921
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN5@stb_cfg_wr
; Line 6922
	jmp	SHORT $LN3@stb_cfg_wr
$LN5@stb_cfg_wr:
	jmp	SHORT $LN2@stb_cfg_wr
$LN3@stb_cfg_wr:
; Line 6923
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv86[rsp], eax
	jmp	SHORT $LN11@stb_cfg_wr
$LN10@stb_cfg_wr:
	mov	DWORD PTR tv86[rsp], 0
$LN11@stb_cfg_wr:
	mov	eax, DWORD PTR tv86[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jne	$LN6@stb_cfg_wr
; Line 6925
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	call	?stb_strdup@@YAPEADPEADPEAX@Z		; stb_strdup
	mov	QWORD PTR p$1[rsp], rax
; Line 6926
	mov	QWORD PTR p$1[rsp+8], 0
; Line 6927
	mov	DWORD PTR p$1[rsp+16], 0
; Line 6928
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR p$1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv128[rsp], eax
	jmp	SHORT $LN13@stb_cfg_wr
$LN12@stb_cfg_wr:
	mov	DWORD PTR tv128[rsp], 0
$LN13@stb_cfg_wr:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN14@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN15@stb_cfg_wr
$LN14@stb_cfg_wr:
	mov	DWORD PTR tv135[rsp], 0
$LN15@stb_cfg_wr:
	mov	eax, DWORD PTR tv128[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv135[rsp]
	jle	SHORT $LN17@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1
	mov	edx, 24
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN18@stb_cfg_wr
$LN17@stb_cfg_wr:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN16@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN16@stb_cfg_wr
	mov	r8d, 6928				; 00001b10H
	lea	rdx, OFFSET FLAT:$SG88114
	lea	rcx, OFFSET FLAT:$SG88115
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_cfg_wr:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv158[rsp], 0
$LN18@stb_cfg_wr:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN19@stb_cfg_wr
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv165[rsp], eax
	jmp	SHORT $LN20@stb_cfg_wr
$LN19@stb_cfg_wr:
	mov	DWORD PTR tv165[rsp], 0
$LN20@stb_cfg_wr:
	movsxd	rax, DWORD PTR tv165[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR [rcx+rax-24]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
$LN6@stb_cfg_wr:
; Line 6930
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR z$[rsp]
	call	stb_malloc
	mov	QWORD PTR tv181[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR tv181[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
; Line 6931
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 6932
	movsxd	rax, DWORD PTR len$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv187[rsp], rdx
	mov	r8, rax
	mov	rdx, QWORD PTR value$[rsp]
	mov	rax, QWORD PTR tv187[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	memcpy
; Line 6933
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stb_cfg_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
n$1 = 36
tv70 = 40
tv92 = 44
z$ = 64
key$ = 72
value$ = 80
len$ = 88
stb_cfg_read PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6903
$LN12:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6905
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_cfg_re
$LN2@stb_cfg_re:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_cfg_re:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@stb_cfg_re
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN9@stb_cfg_re
$LN8@stb_cfg_re:
	mov	DWORD PTR tv70[rsp], 0
$LN9@stb_cfg_re:
	mov	eax, DWORD PTR tv70[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_cfg_re
; Line 6906
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	$LN5@stb_cfg_re
; Line 6907
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR len$[rsp], eax
	jge	SHORT $LN10@stb_cfg_re
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv92[rsp], eax
	jmp	SHORT $LN11@stb_cfg_re
$LN10@stb_cfg_re:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR tv92[rsp], eax
$LN11@stb_cfg_re:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR n$1[rsp], eax
; Line 6908
	movsxd	rax, DWORD PTR n$1[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx+8]
	mov	rcx, QWORD PTR value$[rsp]
	call	memcpy
; Line 6909
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR n$1[rsp], eax
	jge	SHORT $LN6@stb_cfg_re
; Line 6910
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN6@stb_cfg_re:
; Line 6911
	mov	eax, 1
	jmp	SHORT $LN1@stb_cfg_re
$LN5@stb_cfg_re:
; Line 6913
	jmp	$LN2@stb_cfg_re
$LN3@stb_cfg_re:
; Line 6914
	xor	eax, eax
$LN1@stb_cfg_re:
; Line 6915
	add	rsp, 56					; 00000038H
	ret	0
stb_cfg_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
i$2 = 36
tv77 = 40
tv172 = 48
tv169 = 56
z$ = 80
stb_cfg_close PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6884
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6885
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN5@stb_cfg_cl
; Line 6888
	mov	rax, QWORD PTR z$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	r8d, 1
	mov	edx, 12
	mov	rcx, QWORD PTR ?stb__cfg_sig@@3PEBDEB
	call	QWORD PTR __imp_fwrite
; Line 6889
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stb_cfg_cl
$LN2@stb_cfg_cl:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stb_cfg_cl:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stb_cfg_cl
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN8@stb_cfg_cl
$LN7@stb_cfg_cl:
	mov	DWORD PTR tv77[rsp], 0
$LN8@stb_cfg_cl:
	mov	eax, DWORD PTR tv77[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN3@stb_cfg_cl
; Line 6890
	movsxd	rax, DWORD PTR i$2[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strlen
	cwde
	inc	eax
	mov	WORD PTR n$1[rsp], ax
; Line 6891
	mov	rax, QWORD PTR z$[rsp]
	mov	r9, QWORD PTR [rax+16]
	mov	r8d, 1
	mov	edx, 2
	lea	rcx, QWORD PTR n$1[rsp]
	call	QWORD PTR __imp_fwrite
; Line 6892
	movsx	rax, WORD PTR n$1[rsp]
	movsxd	rcx, DWORD PTR i$2[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv172[rsp], rdx
	mov	r8, QWORD PTR z$[rsp]
	mov	r9, QWORD PTR [r8+16]
	mov	r8d, 1
	mov	rdx, rax
	mov	rax, QWORD PTR tv172[rsp]
	mov	rcx, QWORD PTR [rax+rcx]
	call	QWORD PTR __imp_fwrite
; Line 6893
	movsxd	rax, DWORD PTR i$2[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR z$[rsp]
	mov	r9, QWORD PTR [rcx+16]
	mov	r8d, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_fwrite
; Line 6894
	movsxd	rax, DWORD PTR i$2[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rax, DWORD PTR [rcx+rax+16]
	movsxd	rcx, DWORD PTR i$2[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv169[rsp], rdx
	mov	r8, QWORD PTR z$[rsp]
	mov	r9, QWORD PTR [r8+16]
	mov	r8d, 1
	mov	rdx, rax
	mov	rax, QWORD PTR tv169[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	QWORD PTR __imp_fwrite
; Line 6895
	jmp	$LN2@stb_cfg_cl
$LN3@stb_cfg_cl:
; Line 6896
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_fclose
$LN5@stb_cfg_cl:
; Line 6898
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, rax
	call	stb_arr_free_
; Line 6899
	mov	rcx, QWORD PTR z$[rsp]
	call	stb_free
; Line 6900
	add	rsp, 72					; 00000048H
	ret	0
stb_cfg_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 48
s$1 = 56
tv159 = 64
tv166 = 68
tv196 = 72
n$2 = 76
tv189 = 80
reg$3 = 88
len$ = 96
s$4 = 104
a$5 = 112
$T6 = 136
file$ = 160
__$ArrayPad$ = 672
config$ = 720
mode$ = 728
stb_cfg_open PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6826
$LN22:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 696				; 000002b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6830
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 114				; 00000072H
	je	SHORT $LN4@stb_cfg_op
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 119				; 00000077H
	je	SHORT $LN4@stb_cfg_op
	xor	eax, eax
	jmp	$LN1@stb_cfg_op
$LN4@stb_cfg_op:
; Line 6832
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?stb__cfg_dir@@3PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stb_cfg_op
; Line 6834
	lea	r8, OFFSET FLAT:$SG88049
	mov	edx, 512				; 00000200H
	lea	rcx, OFFSET FLAT:?stb__cfg_dir@@3PADA
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 6841
	lea	rdx, OFFSET FLAT:$SG88050
	lea	rcx, OFFSET FLAT:$SG88051
	call	stb_reg_open
	mov	QWORD PTR reg$3[rsp], rax
; Line 6842
	cmp	QWORD PTR reg$3[rsp], 0
	je	SHORT $LN6@stb_cfg_op
; Line 6843
	mov	r9d, 512				; 00000200H
	lea	r8, OFFSET FLAT:?stb__cfg_dir@@3PADA
	lea	rdx, OFFSET FLAT:$SG88053
	mov	rcx, QWORD PTR reg$3[rsp]
	call	stb_reg_read_string
; Line 6844
	mov	rcx, QWORD PTR reg$3[rsp]
	call	stb_reg_close
$LN6@stb_cfg_op:
$LN5@stb_cfg_op:
; Line 6850
	mov	rax, QWORD PTR config$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:?stb__cfg_dir@@3PADA
	lea	r8, OFFSET FLAT:$SG88054
	mov	edx, 512				; 00000200H
	lea	rcx, QWORD PTR file$[rsp]
	call	sprintf_s
; Line 6852
	mov	edx, 24
	xor	ecx, ecx
	call	stb_malloc
	mov	QWORD PTR z$[rsp], rax
; Line 6853
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax], 0
; Line 6855
	lea	rdx, QWORD PTR len$[rsp]
	lea	rcx, QWORD PTR file$[rsp]
	call	stb_file
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 6856
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	$LN7@stb_cfg_op
; Line 6857
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR s$4[rsp], rax
; Line 6858
	mov	r8d, 12
	mov	rdx, QWORD PTR ?stb__cfg_sig@@3PEBDEB
	mov	rcx, QWORD PTR s$4[rsp]
	call	memcmp
	test	eax, eax
	jne	$LN8@stb_cfg_op
; Line 6859
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 12
	mov	QWORD PTR s$1[rsp], rax
$LN2@stb_cfg_op:
; Line 6860
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR len$[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	jae	$LN3@stb_cfg_op
; Line 6862
	mov	rax, QWORD PTR s$1[rsp]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR n$2[rsp], eax
; Line 6863
	mov	rax, QWORD PTR s$1[rsp]
	add	rax, 2
	mov	QWORD PTR a$5[rsp], rax
; Line 6864
	movsxd	rax, DWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR s$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	QWORD PTR s$1[rsp], rax
; Line 6865
	mov	rax, QWORD PTR s$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR a$5[rsp+16], eax
; Line 6866
	mov	rax, QWORD PTR s$1[rsp]
	add	rax, 4
	mov	QWORD PTR s$1[rsp], rax
; Line 6867
	mov	rax, QWORD PTR s$1[rsp]
	mov	QWORD PTR a$5[rsp+8], rax
; Line 6868
	movsxd	rax, DWORD PTR a$5[rsp+16]
	mov	rcx, QWORD PTR s$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$1[rsp], rax
; Line 6869
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR a$5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@stb_cfg_op
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv159[rsp], eax
	jmp	SHORT $LN13@stb_cfg_op
$LN12@stb_cfg_op:
	mov	DWORD PTR tv159[rsp], 0
$LN13@stb_cfg_op:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN14@stb_cfg_op
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv166[rsp], eax
	jmp	SHORT $LN15@stb_cfg_op
$LN14@stb_cfg_op:
	mov	DWORD PTR tv166[rsp], 0
$LN15@stb_cfg_op:
	mov	eax, DWORD PTR tv159[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv166[rsp]
	jle	SHORT $LN17@stb_cfg_op
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1
	mov	edx, 24
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv189[rsp], 0
	jmp	SHORT $LN18@stb_cfg_op
$LN17@stb_cfg_op:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN16@stb_cfg_op
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN16@stb_cfg_op
	mov	r8d, 6869				; 00001ad5H
	lea	rdx, OFFSET FLAT:$SG88057
	lea	rcx, OFFSET FLAT:$SG88058
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_cfg_op:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv189[rsp], 0
$LN18@stb_cfg_op:
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN19@stb_cfg_op
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv196[rsp], eax
	jmp	SHORT $LN20@stb_cfg_op
$LN19@stb_cfg_op:
	mov	DWORD PTR tv196[rsp], 0
$LN20@stb_cfg_op:
	movsxd	rax, DWORD PTR tv196[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR [rcx+rax-24]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
; Line 6870
	jmp	$LN2@stb_cfg_op
$LN3@stb_cfg_op:
; Line 6871
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR len$[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	je	SHORT $LN21@stb_cfg_op
	mov	r8d, 6871				; 00001ad7H
	lea	rdx, OFFSET FLAT:$SG88059
	lea	rcx, OFFSET FLAT:$SG88060
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@stb_cfg_op:
$LN8@stb_cfg_op:
$LN7@stb_cfg_op:
; Line 6875
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 119				; 00000077H
	jne	SHORT $LN9@stb_cfg_op
; Line 6876
	lea	rdx, OFFSET FLAT:$SG88063
	lea	rcx, QWORD PTR file$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+16], rax
	jmp	SHORT $LN10@stb_cfg_op
$LN9@stb_cfg_op:
; Line 6878
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
$LN10@stb_cfg_op:
; Line 6880
	mov	rax, QWORD PTR z$[rsp]
$LN1@stb_cfg_op:
; Line 6881
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 696				; 000002b8H
	pop	rdi
	pop	rsi
	ret	0
stb_cfg_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
zreg$ = 64
str$ = 72
data$ = 80
stb_reg_write_string PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6775
$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6776
	cmp	QWORD PTR zreg$[rsp], 0
	je	SHORT $LN2@stb_reg_wr
; Line 6777
	mov	rcx, QWORD PTR data$[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR zreg$[rsp]
	call	QWORD PTR __imp_RegSetValueExA
$LN2@stb_reg_wr:
; Line 6778
	add	rsp, 56					; 00000038H
	ret	0
stb_reg_write_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
zreg$ = 64
str$ = 72
data$ = 80
len$ = 88
stb_reg_write PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6762
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6763
	cmp	QWORD PTR zreg$[rsp], 0
	je	SHORT $LN2@stb_reg_wr
; Line 6764
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR zreg$[rsp]
	call	QWORD PTR __imp_RegSetValueExA
$LN2@stb_reg_wr:
; Line 6765
	add	rsp, 56					; 00000038H
	ret	0
stb_reg_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
zreg$ = 48
str$ = 56
data$ = 64
len$ = 72
stb_reg_read_string PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6768
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6769
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR zreg$[rsp]
	call	stb_reg_read
	test	eax, eax
	jne	SHORT $LN2@stb_reg_re
	xor	eax, eax
	jmp	SHORT $LN1@stb_reg_re
$LN2@stb_reg_re:
; Line 6770
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 6771
	mov	eax, 1
$LN1@stb_reg_re:
; Line 6772
	add	rsp, 40					; 00000028H
	ret	0
stb_reg_read_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
alen$ = 52
zreg$ = 80
str$ = 88
data$ = 96
len$ = 104
stb_reg_read PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6749
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6751
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR alen$[rsp], eax
; Line 6752
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR type$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR zreg$[rsp]
	call	QWORD PTR __imp_RegQueryValueExA
	test	eax, eax
	jne	SHORT $LN2@stb_reg_re
; Line 6753
	cmp	DWORD PTR type$[rsp], 3
	je	SHORT $LN4@stb_reg_re
	cmp	DWORD PTR type$[rsp], 1
	je	SHORT $LN4@stb_reg_re
	cmp	DWORD PTR type$[rsp], 4
	jne	SHORT $LN3@stb_reg_re
$LN4@stb_reg_re:
; Line 6754
	mov	eax, DWORD PTR alen$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jae	SHORT $LN5@stb_reg_re
; Line 6755
	mov	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN5@stb_reg_re:
; Line 6756
	mov	eax, 1
	jmp	SHORT $LN1@stb_reg_re
$LN3@stb_reg_re:
$LN2@stb_reg_re:
; Line 6758
	xor	eax, eax
$LN1@stb_reg_re:
; Line 6759
	add	rsp, 72					; 00000048H
	ret	0
stb_reg_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reg$ = 48
stb_reg_close PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6740
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6741
	mov	rcx, QWORD PTR reg$[rsp]
	call	QWORD PTR __imp_RegCloseKey
; Line 6742
	add	rsp, 40					; 00000028H
	ret	0
stb_reg_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 80
base$ = 88
zreg$ = 96
tv141 = 104
mode$ = 128
where$ = 136
stb_reg_open PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6718
$LN15:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 6722
	mov	rax, QWORD PTR mode$[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG87899
	mov	rcx, rax
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	je	SHORT $LN4@stb_reg_op
	mov	rax, QWORD PTR mode$[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG87900
	mov	rcx, rax
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN2@stb_reg_op
$LN4@stb_reg_op:
; Line 6723
	mov	eax, -2147483647			; ffffffff80000001H
	mov	QWORD PTR base$[rsp], rax
	jmp	SHORT $LN3@stb_reg_op
$LN2@stb_reg_op:
; Line 6724
	mov	rax, QWORD PTR mode$[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG87904
	mov	rcx, rax
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	je	SHORT $LN7@stb_reg_op
	mov	rax, QWORD PTR mode$[rsp]
	inc	rax
	lea	rdx, OFFSET FLAT:$SG87905
	mov	rcx, rax
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN5@stb_reg_op
$LN7@stb_reg_op:
; Line 6725
	mov	eax, -2147483646			; ffffffff80000002H
	mov	QWORD PTR base$[rsp], rax
	jmp	SHORT $LN6@stb_reg_op
$LN5@stb_reg_op:
; Line 6727
	xor	eax, eax
	jmp	$LN1@stb_reg_op
$LN6@stb_reg_op:
$LN3@stb_reg_op:
; Line 6729
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN8@stb_reg_op
; Line 6730
	lea	rax, QWORD PTR zreg$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 131097				; 00020019H
	xor	r8d, r8d
	mov	rdx, QWORD PTR where$[rsp]
	mov	rcx, QWORD PTR base$[rsp]
	call	QWORD PTR __imp_RegOpenKeyExA
	mov	DWORD PTR res$[rsp], eax
	jmp	SHORT $LN9@stb_reg_op
$LN8@stb_reg_op:
; Line 6731
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 119				; 00000077H
	jne	SHORT $LN10@stb_reg_op
; Line 6732
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR zreg$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 983103		; 000f003fH
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR where$[rsp]
	mov	rcx, QWORD PTR base$[rsp]
	call	QWORD PTR __imp_RegCreateKeyExA
	mov	DWORD PTR res$[rsp], eax
	jmp	SHORT $LN11@stb_reg_op
$LN10@stb_reg_op:
; Line 6734
	xor	eax, eax
	jmp	SHORT $LN1@stb_reg_op
$LN11@stb_reg_op:
$LN9@stb_reg_op:
; Line 6736
	cmp	DWORD PTR res$[rsp], 0
	je	SHORT $LN13@stb_reg_op
	mov	QWORD PTR tv141[rsp], 0
	jmp	SHORT $LN14@stb_reg_op
$LN13@stb_reg_op:
	mov	rax, QWORD PTR zreg$[rsp]
	mov	QWORD PTR tv141[rsp], rax
$LN14@stb_reg_op:
	mov	rax, QWORD PTR tv141[rsp]
$LN1@stb_reg_op:
; Line 6737
	add	rsp, 120				; 00000078H
	ret	0
stb_reg_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
b$ = 4
a$ = 8
c$ = 12
d$ = 16
e$ = 20
t$1 = 24
temp$2 = 28
temp$3 = 32
temp$4 = 36
temp$5 = 40
w$ = 48
__$ArrayPad$ = 368
chunk$ = 400
h$ = 408
?stb__sha1@@YAXPEAEQEAI@Z PROC				; stb__sha1
; File W:\cpp\void\vendor\stb\stb.h
; Line 6465
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6470
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__sha1
$LN2@stb__sha1:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__sha1:
	cmp	DWORD PTR i$[rsp], 16
	jge	$LN3@stb__sha1
; Line 6471
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR chunk$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	shl	eax, 24
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR chunk$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 1
	imul	rdx, rdx, 1
	movzx	ecx, BYTE PTR [rcx+rdx]
	imul	ecx, ecx, 65536				; 00010000H
	add	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR chunk$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 1
	imul	rdx, rdx, 2
	movzx	ecx, BYTE PTR [rcx+rdx]
	imul	ecx, ecx, 256				; 00000100H
	add	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR chunk$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 1
	imul	rdx, rdx, 3
	movzx	ecx, BYTE PTR [rcx+rdx]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	DWORD PTR w$[rsp+rcx*4], eax
	jmp	$LN2@stb__sha1
$LN3@stb__sha1:
; Line 6472
	mov	DWORD PTR i$[rsp], 16
	jmp	SHORT $LN7@stb__sha1
$LN5@stb__sha1:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb__sha1:
	cmp	DWORD PTR i$[rsp], 80			; 00000050H
	jge	SHORT $LN6@stb__sha1
; Line 6474
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 8
	movsxd	rcx, ecx
	mov	ecx, DWORD PTR w$[rsp+rcx*4]
	mov	eax, DWORD PTR w$[rsp+rax*4]
	xor	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 14
	movsxd	rcx, ecx
	xor	eax, DWORD PTR w$[rsp+rcx*4]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 16
	movsxd	rcx, ecx
	xor	eax, DWORD PTR w$[rsp+rcx*4]
	mov	DWORD PTR t$1[rsp], eax
; Line 6475
	mov	eax, DWORD PTR t$1[rsp]
	mov	ecx, DWORD PTR t$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t$1[rsp]
	shr	ecx, 31
	or	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	DWORD PTR w$[rsp+rcx*4], eax
; Line 6476
	jmp	SHORT $LN5@stb__sha1
$LN6@stb__sha1:
; Line 6478
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR a$[rsp], eax
; Line 6479
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR b$[rsp], eax
; Line 6480
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR c$[rsp], eax
; Line 6481
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR d$[rsp], eax
; Line 6482
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR e$[rsp], eax
; Line 6494
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stb__sha1
$LN8@stb__sha1:
; Line 6495
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stb__sha1:
	cmp	DWORD PTR i$[rsp], 20
	jge	$LN9@stb__sha1
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 27
	add	eax, ecx
	mov	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR d$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR w$[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx+1518500249]
	mov	DWORD PTR temp$2[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	add	eax, ecx
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR temp$2[rsp]
	mov	DWORD PTR a$[rsp], eax
	jmp	$LN8@stb__sha1
$LN9@stb__sha1:
; Line 6496
	jmp	SHORT $LN13@stb__sha1
$LN11@stb__sha1:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stb__sha1:
	cmp	DWORD PTR i$[rsp], 40			; 00000028H
	jge	SHORT $LN12@stb__sha1
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 27
	add	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR w$[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx+1859775393]
	mov	DWORD PTR temp$3[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	add	eax, ecx
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR temp$3[rsp]
	mov	DWORD PTR a$[rsp], eax
	jmp	$LN11@stb__sha1
$LN12@stb__sha1:
; Line 6497
	jmp	SHORT $LN16@stb__sha1
$LN14@stb__sha1:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@stb__sha1:
	cmp	DWORD PTR i$[rsp], 60			; 0000003cH
	jge	$LN15@stb__sha1
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 27
	add	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	and	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR c$[rsp]
	mov	r8d, DWORD PTR b$[rsp]
	xor	r8d, edx
	mov	edx, r8d
	mov	r8d, DWORD PTR d$[rsp]
	and	r8d, edx
	mov	edx, r8d
	add	ecx, edx
	mov	edx, DWORD PTR e$[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR w$[rsp+rcx*4]
	mov	edx, -1894007588			; ffffffff8f1bbcdcH
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR temp$4[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	add	eax, ecx
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR temp$4[rsp]
	mov	DWORD PTR a$[rsp], eax
	jmp	$LN14@stb__sha1
$LN15@stb__sha1:
; Line 6498
	jmp	SHORT $LN19@stb__sha1
$LN17@stb__sha1:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stb__sha1:
	cmp	DWORD PTR i$[rsp], 80			; 00000050H
	jge	SHORT $LN18@stb__sha1
	mov	eax, DWORD PTR a$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 27
	add	eax, ecx
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	xor	edx, ecx
	mov	ecx, edx
	xor	ecx, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR e$[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR w$[rsp+rcx*4]
	mov	edx, -899497514				; ffffffffca62c1d6H
	lea	rax, QWORD PTR [rax+rdx]
	lea	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR temp$5[rsp], eax
	mov	eax, DWORD PTR d$[rsp]
	mov	DWORD PTR e$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR d$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	shl	eax, 30
	mov	ecx, DWORD PTR b$[rsp]
	shr	ecx, 2
	add	eax, ecx
	mov	DWORD PTR c$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR b$[rsp], eax
	mov	eax, DWORD PTR temp$5[rsp]
	mov	DWORD PTR a$[rsp], eax
	jmp	$LN17@stb__sha1
$LN18@stb__sha1:
; Line 6502
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR a$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 6503
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR b$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 6504
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR c$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 6505
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR d$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 6506
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	add	eax, DWORD PTR e$[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 6507
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	ret	0
?stb__sha1@@YAXPEAEQEAI@Z ENDP				; stb__sha1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_bits$ = 32
o$ = 36
acc$ = 40
i$ = 44
tv84 = 48
v$1 = 52
encoding$ = 64
__$ArrayPad$ = 144
display$ = 192
sha$ = 200
stb_sha1_readable PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6645
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6646
	lea	rax, QWORD PTR encoding$[rsp]
	lea	rcx, OFFSET FLAT:$SG87857
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 65					; 00000041H
	rep movsb
; Line 6648
	mov	DWORD PTR num_bits$[rsp], 0
	mov	DWORD PTR acc$[rsp], 0
; Line 6649
	mov	DWORD PTR i$[rsp], 0
	mov	DWORD PTR o$[rsp], 0
$LN2@stb_sha1_r:
; Line 6650
	cmp	DWORD PTR o$[rsp], 26
	jge	$LN3@stb_sha1_r
; Line 6653
	cmp	DWORD PTR num_bits$[rsp], 6
	jge	SHORT $LN4@stb_sha1_r
; Line 6654
	cmp	DWORD PTR i$[rsp], 20
	jne	SHORT $LN6@stb_sha1_r
	mov	r8d, 6654				; 000019feH
	lea	rdx, OFFSET FLAT:$SG87859
	lea	rcx, OFFSET FLAT:$SG87860
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stb_sha1_r:
; Line 6655
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sha$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv84[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR num_bits$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv84[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR acc$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR acc$[rsp], eax
; Line 6656
	mov	eax, DWORD PTR num_bits$[rsp]
	add	eax, 8
	mov	DWORD PTR num_bits$[rsp], eax
$LN4@stb_sha1_r:
; Line 6658
	mov	eax, DWORD PTR acc$[rsp]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR v$1[rsp], eax
; Line 6659
	movsxd	rax, DWORD PTR v$1[rsp]
	movsxd	rcx, DWORD PTR o$[rsp]
	mov	rdx, QWORD PTR display$[rsp]
	movzx	eax, BYTE PTR encoding$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR o$[rsp]
	inc	eax
	mov	DWORD PTR o$[rsp], eax
; Line 6660
	mov	eax, DWORD PTR acc$[rsp]
	sar	eax, 6
	mov	DWORD PTR acc$[rsp], eax
; Line 6661
	mov	eax, DWORD PTR num_bits$[rsp]
	sub	eax, 6
	mov	DWORD PTR num_bits$[rsp], eax
; Line 6662
	jmp	$LN2@stb_sha1_r
$LN3@stb_sha1_r:
; Line 6663
	cmp	DWORD PTR num_bits$[rsp], 4
	je	SHORT $LN7@stb_sha1_r
	mov	r8d, 6663				; 00001a07H
	lea	rdx, OFFSET FLAT:$SG87861
	lea	rcx, OFFSET FLAT:$SG87862
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb_sha1_r:
; Line 6664
	movsxd	rax, DWORD PTR acc$[rsp]
	movsxd	rcx, DWORD PTR o$[rsp]
	mov	rdx, QWORD PTR display$[rsp]
	movzx	eax, BYTE PTR encoding$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR o$[rsp]
	inc	eax
	mov	DWORD PTR o$[rsp], eax
; Line 6665
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
stb_sha1_readable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
block$1 = 36
length$ = 40
n$2 = 48
f$ = 56
tv74 = 64
tv72 = 72
h$ = 80
buffer$ = 112
__$ArrayPad$ = 240
output$ = 272
file$ = 280
stb_sha1_file PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6577
$LN17:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6579
	mov	QWORD PTR length$[rsp], 0
; Line 6582
	lea	rcx, OFFSET FLAT:$SG87830
	call	stb__from_utf8_alt
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR file$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv72[rsp], rax
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 6585
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN8@stb_sha1_f
	xor	eax, eax
	jmp	$LN1@stb_sha1_f
$LN8@stb_sha1_f:
; Line 6587
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR h$[rsp+rax], 1732584193	; 67452301H
; Line 6588
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR h$[rsp+rax], -271733879	; efcdab89H
; Line 6589
	mov	eax, 4
	imul	rax, rax, 2
	mov	DWORD PTR h$[rsp+rax], -1732584194	; 98badcfeH
; Line 6590
	mov	eax, 4
	imul	rax, rax, 3
	mov	DWORD PTR h$[rsp+rax], 271733878	; 10325476H
; Line 6591
	mov	eax, 4
	imul	rax, rax, 4
	mov	DWORD PTR h$[rsp+rax], -1009589776	; c3d2e1f0H
$LN2@stb_sha1_f:
; Line 6594
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 64					; 00000040H
	mov	edx, 1
	lea	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fread
	mov	QWORD PTR n$2[rsp], rax
; Line 6595
	cmp	QWORD PTR n$2[rsp], 64			; 00000040H
	jne	SHORT $LN9@stb_sha1_f
; Line 6596
	lea	rdx, QWORD PTR h$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?stb__sha1@@YAXPEAEQEAI@Z		; stb__sha1
; Line 6597
	mov	rax, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR length$[rsp], rax
; Line 6598
	jmp	$LN10@stb_sha1_f
$LN9@stb_sha1_f:
; Line 6599
	mov	DWORD PTR block$1[rsp], 64		; 00000040H
; Line 6601
	mov	rax, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR length$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR length$[rsp], rax
; Line 6603
	mov	rax, QWORD PTR n$2[rsp]
	mov	BYTE PTR buffer$[rsp+rax], 128		; 00000080H
	mov	rax, QWORD PTR n$2[rsp]
	inc	rax
	mov	QWORD PTR n$2[rsp], rax
; Line 6606
	mov	rax, QWORD PTR n$2[rsp]
	add	rax, 8
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN11@stb_sha1_f
; Line 6607
	mov	DWORD PTR block$1[rsp], 128		; 00000080H
$LN11@stb_sha1_f:
; Line 6610
	mov	eax, DWORD PTR block$1[rsp]
	sub	eax, 8
	cdqe
	sub	rax, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR n$2[rsp]
	lea	rcx, QWORD PTR buffer$[rsp+rcx]
	mov	r8, rax
	xor	edx, edx
	call	memset
; Line 6612
	mov	eax, DWORD PTR block$1[rsp]
	sub	eax, 8
	mov	DWORD PTR i$[rsp], eax
; Line 6613
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 53					; 00000035H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6614
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 45					; 0000002dH
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6615
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 37					; 00000025H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6616
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 29
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6617
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 21
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6618
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 13
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6619
	mov	rax, QWORD PTR length$[rsp]
	shr	rax, 5
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6620
	mov	rax, QWORD PTR length$[rsp]
	shl	rax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	BYTE PTR buffer$[rsp+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 6621
	mov	eax, DWORD PTR block$1[rsp]
	cmp	DWORD PTR i$[rsp], eax
	je	SHORT $LN15@stb_sha1_f
	mov	r8d, 6621				; 000019ddH
	lea	rdx, OFFSET FLAT:$SG87835
	lea	rcx, OFFSET FLAT:$SG87836
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb_sha1_f:
; Line 6622
	lea	rdx, QWORD PTR h$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	?stb__sha1@@YAXPEAEQEAI@Z		; stb__sha1
; Line 6623
	cmp	DWORD PTR block$1[rsp], 128		; 00000080H
	jne	SHORT $LN12@stb_sha1_f
; Line 6624
	lea	rax, QWORD PTR buffer$[rsp+64]
	lea	rdx, QWORD PTR h$[rsp]
	mov	rcx, rax
	call	?stb__sha1@@YAXPEAEQEAI@Z		; stb__sha1
	jmp	SHORT $LN13@stb_sha1_f
$LN12@stb_sha1_f:
; Line 6626
	cmp	DWORD PTR block$1[rsp], 64		; 00000040H
	je	SHORT $LN16@stb_sha1_f
	mov	r8d, 6626				; 000019e2H
	lea	rdx, OFFSET FLAT:$SG87839
	lea	rcx, OFFSET FLAT:$SG87840
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_sha1_f:
$LN13@stb_sha1_f:
; Line 6627
	jmp	SHORT $LN3@stb_sha1_f
$LN10@stb_sha1_f:
; Line 6629
	jmp	$LN2@stb_sha1_f
$LN3@stb_sha1_f:
; Line 6630
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 6632
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb_sha1_f
$LN5@stb_sha1_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb_sha1_f:
	cmp	DWORD PTR i$[rsp], 5
	jge	$LN6@stb_sha1_f
; Line 6633
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR h$[rsp+rax*4]
	shr	eax, 24
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6634
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR h$[rsp+rax*4]
	shr	eax, 16
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6635
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR h$[rsp+rax*4]
	shr	eax, 8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6636
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	movzx	eax, BYTE PTR h$[rsp+rax*4]
	mov	BYTE PTR [rdx+rcx], al
; Line 6637
	jmp	$LN5@stb_sha1_f
$LN6@stb_sha1_f:
; Line 6639
	mov	eax, 1
$LN1@stb_sha1_f:
; Line 6640
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	ret	0
stb_sha1_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
end_start$ = 36
i$ = 40
final_len$ = 44
$T1 = 48
tv146 = 56
h$ = 64
final_block$ = 96
__$ArrayPad$ = 224
output$ = 256
buffer$ = 264
len$ = 272
stb_sha1 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6510
$LN24:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6517
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR h$[rsp+rax], 1732584193	; 67452301H
; Line 6518
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR h$[rsp+rax], -271733879	; efcdab89H
; Line 6519
	mov	eax, 4
	imul	rax, rax, 2
	mov	DWORD PTR h$[rsp+rax], -1732584194	; 98badcfeH
; Line 6520
	mov	eax, 4
	imul	rax, rax, 3
	mov	DWORD PTR h$[rsp+rax], 271733878	; 10325476H
; Line 6521
	mov	eax, 4
	imul	rax, rax, 4
	mov	DWORD PTR h$[rsp+rax], -1009589776	; c3d2e1f0H
; Line 6529
	mov	eax, DWORD PTR len$[rsp]
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR end_start$[rsp], eax
; Line 6532
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 9
	and	eax, -64				; ffffffc0H
	cmp	eax, DWORD PTR end_start$[rsp]
	jne	SHORT $LN13@stb_sha1
; Line 6534
	mov	eax, DWORD PTR end_start$[rsp]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR end_start$[rsp], eax
$LN13@stb_sha1:
; Line 6537
	mov	eax, DWORD PTR end_start$[rsp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR final_len$[rsp], eax
; Line 6540
	mov	eax, DWORD PTR end_start$[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR len$[rsp]
	add	ecx, 9
	cmp	eax, ecx
	jae	SHORT $LN18@stb_sha1
	mov	r8d, 6540				; 0000198cH
	lea	rdx, OFFSET FLAT:$SG87790
	lea	rcx, OFFSET FLAT:$SG87791
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stb_sha1:
; Line 6541
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR end_start$[rsp], eax
	jb	SHORT $LN19@stb_sha1
	cmp	DWORD PTR len$[rsp], 55			; 00000037H
	jb	SHORT $LN19@stb_sha1
	mov	r8d, 6541				; 0000198dH
	lea	rdx, OFFSET FLAT:$SG87792
	lea	rcx, OFFSET FLAT:$SG87793
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@stb_sha1:
; Line 6543
	mov	DWORD PTR j$[rsp], 0
; Line 6544
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR end_start$[rsp], eax
	jbe	SHORT $LN14@stb_sha1
; Line 6545
	mov	eax, DWORD PTR end_start$[rsp]
	neg	eax
	mov	DWORD PTR j$[rsp], eax
$LN14@stb_sha1:
; Line 6547
	jmp	SHORT $LN4@stb_sha1
$LN2@stb_sha1:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stb_sha1:
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR end_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR len$[rsp]
	jae	SHORT $LN3@stb_sha1
; Line 6548
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR end_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	mov	ecx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR final_block$[rsp+rcx], al
	jmp	SHORT $LN2@stb_sha1
$LN3@stb_sha1:
; Line 6549
	mov	eax, DWORD PTR j$[rsp]
	mov	BYTE PTR final_block$[rsp+rax], 128	; 00000080H
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN5@stb_sha1:
; Line 6550
	cmp	DWORD PTR j$[rsp], 123			; 0000007bH
	jae	SHORT $LN6@stb_sha1
; Line 6551
	mov	eax, DWORD PTR j$[rsp]
	mov	QWORD PTR tv146[rsp], rax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
	mov	rax, QWORD PTR tv146[rsp]
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 128			; 00000080H
	jae	SHORT $LN20@stb_sha1
	jmp	SHORT $LN21@stb_sha1
$LN20@stb_sha1:
	call	__report_rangecheckfailure
$LN21@stb_sha1:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR final_block$[rsp+rax], 0
	jmp	SHORT $LN5@stb_sha1
$LN6@stb_sha1:
; Line 6553
	mov	eax, DWORD PTR len$[rsp]
	shr	eax, 29
	mov	ecx, DWORD PTR j$[rsp]
	mov	BYTE PTR final_block$[rsp+rcx], al
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 6554
	mov	eax, DWORD PTR len$[rsp]
	shr	eax, 21
	mov	ecx, DWORD PTR j$[rsp]
	mov	BYTE PTR final_block$[rsp+rcx], al
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 6555
	mov	eax, DWORD PTR len$[rsp]
	shr	eax, 13
	mov	ecx, DWORD PTR j$[rsp]
	mov	BYTE PTR final_block$[rsp+rcx], al
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 6556
	mov	eax, DWORD PTR len$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR j$[rsp]
	mov	BYTE PTR final_block$[rsp+rcx], al
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 6557
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR j$[rsp]
	mov	BYTE PTR final_block$[rsp+rcx], al
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 6558
	cmp	DWORD PTR j$[rsp], 128			; 00000080H
	jne	SHORT $LN22@stb_sha1
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR end_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR final_len$[rsp]
	je	SHORT $LN23@stb_sha1
$LN22@stb_sha1:
	mov	r8d, 6558				; 0000199eH
	lea	rdx, OFFSET FLAT:$SG87795
	lea	rcx, OFFSET FLAT:$SG87796
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@stb_sha1:
; Line 6560
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stb_sha1
$LN7@stb_sha1:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR j$[rsp], eax
$LN9@stb_sha1:
	mov	eax, DWORD PTR final_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	SHORT $LN8@stb_sha1
; Line 6561
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR end_start$[rsp]
	add	ecx, 64					; 00000040H
	cmp	eax, ecx
	jb	SHORT $LN15@stb_sha1
; Line 6562
	mov	eax, DWORD PTR end_start$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	lea	rax, QWORD PTR final_block$[rsp+rax]
	lea	rdx, QWORD PTR h$[rsp]
	mov	rcx, rax
	call	?stb__sha1@@YAXPEAEQEAI@Z		; stb__sha1
	jmp	SHORT $LN16@stb_sha1
$LN15@stb_sha1:
; Line 6564
	mov	eax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	rdx, QWORD PTR h$[rsp]
	mov	rcx, rax
	call	?stb__sha1@@YAXPEAEQEAI@Z		; stb__sha1
$LN16@stb_sha1:
; Line 6565
	jmp	SHORT $LN7@stb_sha1
$LN8@stb_sha1:
; Line 6567
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stb_sha1
$LN10@stb_sha1:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stb_sha1:
	cmp	DWORD PTR i$[rsp], 5
	jge	$LN11@stb_sha1
; Line 6568
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR h$[rsp+rax*4]
	shr	eax, 24
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6569
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR h$[rsp+rax*4]
	shr	eax, 16
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6570
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR h$[rsp+rax*4]
	shr	eax, 8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6571
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	movzx	eax, BYTE PTR h$[rsp+rax*4]
	mov	BYTE PTR [rdx+rcx], al
; Line 6572
	jmp	$LN10@stb_sha1
$LN11@stb_sha1:
$LN17@stb_sha1:
; Line 6573
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	ret	0
stb_sha1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
len$ = 56
stb_crc32 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6429
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6430
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	xor	ecx, ecx
	call	stb_crc32_block
; Line 6431
	add	rsp, 40					; 00000028H
	ret	0
stb_crc32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
s$ = 4
j$ = 8
tv75 = 12
crc$ = 32
buffer$ = 40
len$ = 48
stb_crc32_block PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6412
$LN15:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 6415
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
	mov	DWORD PTR crc$[rsp], eax
; Line 6417
	mov	eax, 4
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:?crc_table@?1??stb_crc32_block@@9@4PAIA
	cmp	DWORD PTR [rcx+rax], 0
	jne	SHORT $LN11@stb_crc32_
; Line 6418
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_crc32_
$LN2@stb_crc32_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_crc32_:
	cmp	DWORD PTR i$[rsp], 256			; 00000100H
	jae	SHORT $LN3@stb_crc32_
; Line 6419
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR s$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stb_crc32_
$LN5@stb_crc32_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stb_crc32_:
	cmp	DWORD PTR j$[rsp], 8
	jae	SHORT $LN6@stb_crc32_
; Line 6420
	mov	eax, DWORD PTR s$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN13@stb_crc32_
	mov	DWORD PTR tv75[rsp], -306674912		; edb88320H
	jmp	SHORT $LN14@stb_crc32_
$LN13@stb_crc32_:
	mov	DWORD PTR tv75[rsp], 0
$LN14@stb_crc32_:
	mov	eax, DWORD PTR s$[rsp]
	shr	eax, 1
	xor	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR s$[rsp], eax
	jmp	SHORT $LN5@stb_crc32_
$LN6@stb_crc32_:
; Line 6421
	mov	eax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?crc_table@?1??stb_crc32_block@@9@4PAIA
	mov	edx, DWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
; Line 6422
	jmp	SHORT $LN2@stb_crc32_
$LN3@stb_crc32_:
$LN11@stb_crc32_:
; Line 6423
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stb_crc32_
$LN8@stb_crc32_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stb_crc32_:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN9@stb_crc32_
; Line 6424
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR crc$[rsp]
	and	edx, 255				; 000000ffH
	xor	ecx, edx
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?crc_table@?1??stb_crc32_block@@9@4PAIA
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	DWORD PTR crc$[rsp], eax
	jmp	SHORT $LN8@stb_crc32_
$LN9@stb_crc32_:
; Line 6425
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
; Line 6426
	add	rsp, 24
	ret	0
stb_crc32_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s1$ = 0
s2$ = 4
i$ = 8
blocklen$ = 12
tv149 = 16
ADLER_MOD$ = 20
adler32$ = 48
buffer$ = 56
buflen$ = 64
stb_adler32 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6434
$LN11:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 6435
	mov	DWORD PTR ADLER_MOD$[rsp], 65521	; 0000fff1H
; Line 6436
	mov	eax, DWORD PTR adler32$[rsp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR adler32$[rsp]
	shr	eax, 16
	mov	DWORD PTR s2$[rsp], eax
; Line 6439
	xor	edx, edx
	mov	eax, DWORD PTR buflen$[rsp]
	mov	ecx, 5552				; 000015b0H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$[rsp], eax
$LN2@stb_adler3:
; Line 6440
	cmp	DWORD PTR buflen$[rsp], 0
	je	$LN3@stb_adler3
; Line 6441
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN6@stb_adler3
$LN4@stb_adler3:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN6@stb_adler3:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cmp	eax, DWORD PTR blocklen$[rsp]
	jae	$LN5@stb_adler3
; Line 6442
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6443
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6444
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6445
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6446
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6447
	mov	eax, 1
	imul	rax, rax, 5
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6448
	mov	eax, 1
	imul	rax, rax, 6
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6449
	mov	eax, 1
	imul	rax, rax, 7
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
; Line 6451
	mov	rax, QWORD PTR buffer$[rsp]
	add	rax, 8
	mov	QWORD PTR buffer$[rsp], rax
; Line 6452
	jmp	$LN4@stb_adler3
$LN5@stb_adler3:
; Line 6454
	jmp	SHORT $LN9@stb_adler3
$LN7@stb_adler3:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stb_adler3:
	mov	eax, DWORD PTR blocklen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@stb_adler3
; Line 6455
	mov	rax, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv149[rsp], eax
	mov	rax, QWORD PTR buffer$[rsp]
	inc	rax
	mov	QWORD PTR buffer$[rsp], rax
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rsp], eax
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rsp], eax
	jmp	SHORT $LN7@stb_adler3
$LN8@stb_adler3:
; Line 6457
	xor	edx, edx
	mov	eax, DWORD PTR s1$[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$[rsp], eax
; Line 6458
	mov	eax, DWORD PTR blocklen$[rsp]
	mov	ecx, DWORD PTR buflen$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buflen$[rsp], eax
; Line 6459
	mov	DWORD PTR blocklen$[rsp], 5552		; 000015b0H
; Line 6460
	jmp	$LN2@stb_adler3
$LN3@stb_adler3:
; Line 6461
	mov	eax, DWORD PTR s2$[rsp]
	shl	eax, 16
	add	eax, DWORD PTR s1$[rsp]
; Line 6462
	add	rsp, 40					; 00000028H
	ret	0
stb_adler32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
dirlen$ = 56
file$ = 64
stb_dir_is_prefix PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6309
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6310
	cmp	DWORD PTR dirlen$[rsp], 0
	jne	SHORT $LN2@stb_dir_is
	mov	eax, 1
	jmp	SHORT $LN1@stb_dir_is
$LN2@stb_dir_is:
; Line 6311
	movsxd	rax, DWORD PTR dirlen$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	call	QWORD PTR __imp__strnicmp
	test	eax, eax
	je	SHORT $LN3@stb_dir_is
	xor	eax, eax
	jmp	SHORT $LN1@stb_dir_is
$LN3@stb_dir_is:
; Line 6312
	movsxd	rax, DWORD PTR dirlen$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN5@stb_dir_is
	movsxd	rax, DWORD PTR dirlen$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN4@stb_dir_is
$LN5@stb_dir_is:
	mov	eax, 1
	jmp	SHORT $LN1@stb_dir_is
$LN4@stb_dir_is:
; Line 6313
	xor	eax, eax
$LN1@stb_dir_is:
; Line 6314
	add	rsp, 40					; 00000028H
	ret	0
stb_dir_is_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filelist$ = 48
count$ = 56
stb_dirtree2_from_files PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6382
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6383
	mov	r8d, DWORD PTR count$[rsp]
	mov	rdx, QWORD PTR filelist$[rsp]
	lea	rcx, OFFSET FLAT:$SG87660
	call	stb_dirtree2_from_files_relative
; Line 6384
	add	rsp, 40					; 00000028H
	ret	0
stb_dirtree2_from_files ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
descendents$ = 40
d$ = 48
elen$ = 56
files$ = 64
tv81 = 72
tv86 = 76
tv140 = 80
dlen$ = 84
tv170 = 88
tv185 = 92
tv190 = 96
tv212 = 100
tv228 = 104
tv247 = 108
tv284 = 112
tv301 = 116
tv337 = 120
tv354 = 124
tv361 = 128
tv391 = 132
tv404 = 136
s$ = 144
tv208 = 152
tv384 = 156
tv136 = 160
$T1 = 168
t$2 = 176
t$3 = 184
tv149 = 192
tv221 = 200
tv233 = 208
tv291 = 216
tv293 = 224
tv289 = 232
s$4 = 240
tv397 = 248
tv253 = 256
tv251 = 264
buffer2$5 = 272
buffer1$ = 1296
__$ArrayPad$ = 2320
src$ = 2352
filelist$ = 2360
count$ = 2368
stb_dirtree2_from_files_relative PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6317
$LN68:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2344				; 00000928H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6320
	mov	rcx, QWORD PTR src$[rsp]
	call	strlen
	mov	DWORD PTR dlen$[rsp], eax
; Line 6322
	mov	QWORD PTR descendents$[rsp], 0
; Line 6323
	mov	QWORD PTR files$[rsp], 0
; Line 6325
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN11@stb_dirtre
	xor	eax, eax
	jmp	$LN1@stb_dirtre
$LN11@stb_dirtre:
; Line 6327
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_dirtre
$LN2@stb_dirtre:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_dirtre:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_dirtre
; Line 6328
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filelist$[rsp]
	mov	r8, QWORD PTR [rcx+rax*8]
	mov	edx, DWORD PTR dlen$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	stb_dir_is_prefix
	test	eax, eax
	je	$LN12@stb_dirtre
; Line 6329
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filelist$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv149[rsp], rax
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN24@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN25@stb_dirtre
$LN24@stb_dirtre:
	mov	DWORD PTR tv81[rsp], 0
$LN25@stb_dirtre:
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN26@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv86[rsp], eax
	jmp	SHORT $LN27@stb_dirtre
$LN26@stb_dirtre:
	mov	DWORD PTR tv86[rsp], 0
$LN27@stb_dirtre:
	mov	eax, DWORD PTR tv81[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv86[rsp]
	jle	SHORT $LN29@stb_dirtre
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR descendents$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN30@stb_dirtre
$LN29@stb_dirtre:
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN28@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN28@stb_dirtre
	mov	r8d, 6329				; 000018b9H
	lea	rdx, OFFSET FLAT:$SG87633
	lea	rcx, OFFSET FLAT:$SG87634
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN28@stb_dirtre:
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR descendents$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv136[rsp], 0
$LN30@stb_dirtre:
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN31@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv140[rsp], eax
	jmp	SHORT $LN32@stb_dirtre
$LN31@stb_dirtre:
	mov	DWORD PTR tv140[rsp], 0
$LN32@stb_dirtre:
	movsxd	rax, DWORD PTR tv140[rsp]
	mov	rcx, QWORD PTR descendents$[rsp]
	mov	rdx, QWORD PTR tv149[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
$LN12@stb_dirtre:
; Line 6331
	jmp	$LN2@stb_dirtre
$LN3@stb_dirtre:
; Line 6332
	cmp	QWORD PTR descendents$[rsp], 0
	jne	SHORT $LN13@stb_dirtre
; Line 6333
	xor	eax, eax
	jmp	$LN1@stb_dirtre
$LN13@stb_dirtre:
; Line 6334
	mov	eax, DWORD PTR dlen$[rsp]
	mov	DWORD PTR elen$[rsp], eax
; Line 6336
	cmp	DWORD PTR elen$[rsp], 0
	jne	SHORT $LN14@stb_dirtre
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR descendents$[rsp]
	mov	rax, QWORD PTR [rdx+rax]
	movsx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN16@stb_dirtre
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR descendents$[rsp]
	mov	rax, QWORD PTR [rdx+rax]
	movsx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN14@stb_dirtre
$LN16@stb_dirtre:
; Line 6337
	mov	eax, DWORD PTR elen$[rsp]
	inc	eax
	mov	DWORD PTR elen$[rsp], eax
	jmp	SHORT $LN15@stb_dirtre
$LN14@stb_dirtre:
; Line 6338
	cmp	DWORD PTR elen$[rsp], 0
	je	SHORT $LN17@stb_dirtre
; Line 6339
	mov	eax, DWORD PTR elen$[rsp]
	inc	eax
	mov	DWORD PTR elen$[rsp], eax
$LN17@stb_dirtre:
$LN15@stb_dirtre:
; Line 6341
	mov	DWORD PTR i$[rsp], 0
$LN5@stb_dirtre:
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN33@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv170[rsp], eax
	jmp	SHORT $LN34@stb_dirtre
$LN33@stb_dirtre:
	mov	DWORD PTR tv170[rsp], 0
$LN34@stb_dirtre:
	mov	eax, DWORD PTR tv170[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stb_dirtre
; Line 6342
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR elen$[rsp]
	mov	rdx, QWORD PTR descendents$[rsp]
	add	rcx, QWORD PTR [rdx+rax*8]
	mov	rax, rcx
	mov	r8b, 92					; 0000005cH
	mov	dl, 47					; 0000002fH
	mov	rcx, rax
	call	stb_strchr2
	test	rax, rax
	jne	$LN18@stb_dirtre
; Line 6343
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR descendents$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv221[rsp], rax
	cmp	QWORD PTR files$[rsp], 0
	je	SHORT $LN35@stb_dirtre
	mov	rax, QWORD PTR files$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN36@stb_dirtre
$LN35@stb_dirtre:
	mov	DWORD PTR tv185[rsp], 0
$LN36@stb_dirtre:
	cmp	QWORD PTR files$[rsp], 0
	je	SHORT $LN37@stb_dirtre
	mov	rax, QWORD PTR files$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN38@stb_dirtre
$LN37@stb_dirtre:
	mov	DWORD PTR tv190[rsp], 0
$LN38@stb_dirtre:
	mov	eax, DWORD PTR tv185[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv190[rsp]
	jle	SHORT $LN40@stb_dirtre
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR files$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv208[rsp], 0
	jmp	SHORT $LN41@stb_dirtre
$LN40@stb_dirtre:
	cmp	QWORD PTR files$[rsp], 0
	je	SHORT $LN39@stb_dirtre
	mov	rax, QWORD PTR files$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN39@stb_dirtre
	mov	r8d, 6343				; 000018c7H
	lea	rdx, OFFSET FLAT:$SG87642
	lea	rcx, OFFSET FLAT:$SG87643
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN39@stb_dirtre:
	mov	rax, QWORD PTR files$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR files$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv208[rsp], 0
$LN41@stb_dirtre:
	cmp	QWORD PTR files$[rsp], 0
	je	SHORT $LN42@stb_dirtre
	mov	rax, QWORD PTR files$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv212[rsp], eax
	jmp	SHORT $LN43@stb_dirtre
$LN42@stb_dirtre:
	mov	DWORD PTR tv212[rsp], 0
$LN43@stb_dirtre:
	movsxd	rax, DWORD PTR tv212[rsp]
	mov	rcx, QWORD PTR files$[rsp]
	mov	rdx, QWORD PTR tv221[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
; Line 6344
	mov	rax, QWORD PTR descendents$[rsp]
	mov	QWORD PTR tv233[rsp], rax
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN44@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv228[rsp], eax
	jmp	SHORT $LN45@stb_dirtre
$LN44@stb_dirtre:
	mov	DWORD PTR tv228[rsp], 0
$LN45@stb_dirtre:
	mov	eax, DWORD PTR tv228[rsp]
	dec	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR descendents$[rsp]
	mov	r8, QWORD PTR tv233[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 6345
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN46@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN46@stb_dirtre
	mov	r8d, 6345				; 000018c9H
	lea	rdx, OFFSET FLAT:$SG87644
	lea	rcx, OFFSET FLAT:$SG87645
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stb_dirtre:
	mov	rax, QWORD PTR descendents$[rsp]
	mov	QWORD PTR tv253[rsp], rax
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	dec	eax
	mov	DWORD PTR tv247[rsp], eax
	mov	rax, QWORD PTR descendents$[rsp]
	mov	ecx, DWORD PTR tv247[rsp]
	mov	DWORD PTR [rax-16], ecx
	movsxd	rax, DWORD PTR tv247[rsp]
	shl	rax, 3
	mov	QWORD PTR tv251[rsp], rax
; Line 6346
	jmp	SHORT $LN19@stb_dirtre
$LN18@stb_dirtre:
; Line 6347
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stb_dirtre:
; Line 6348
	jmp	$LN5@stb_dirtre
$LN6@stb_dirtre:
; Line 6350
	mov	ecx, 40					; 00000028H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR d$[rsp], rax
; Line 6351
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR files$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 6352
	mov	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rax], 0
; Line 6353
	mov	rcx, QWORD PTR src$[rsp]
	call	QWORD PTR __imp__strdup
	mov	rcx, QWORD PTR d$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 6354
	mov	r8b, 92					; 0000005cH
	mov	dl, 47					; 0000002fH
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	stb_strrchr2
	mov	QWORD PTR s$[rsp], rax
; Line 6355
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN20@stb_dirtre
; Line 6356
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN21@stb_dirtre
$LN20@stb_dirtre:
; Line 6358
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR s$[rsp], rax
$LN21@stb_dirtre:
; Line 6359
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 6361
	xor	ecx, ecx
	call	stb_qsort_stricmp
	mov	QWORD PTR tv291[rsp], rax
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN47@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv284[rsp], eax
	jmp	SHORT $LN48@stb_dirtre
$LN47@stb_dirtre:
	mov	DWORD PTR tv284[rsp], 0
$LN48@stb_dirtre:
	movsxd	rax, DWORD PTR tv284[rsp]
	mov	QWORD PTR tv293[rsp], rax
	mov	rax, QWORD PTR descendents$[rsp]
	mov	QWORD PTR tv289[rsp], rax
	mov	r9, QWORD PTR tv291[rsp]
	mov	r8d, 8
	mov	rdx, QWORD PTR tv293[rsp]
	mov	rcx, QWORD PTR tv289[rsp]
	call	QWORD PTR __imp_qsort
; Line 6362
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 1024		; 00000400H
	jae	SHORT $LN49@stb_dirtre
	jmp	SHORT $LN50@stb_dirtre
$LN49@stb_dirtre:
	call	__report_rangecheckfailure
$LN50@stb_dirtre:
	mov	rax, QWORD PTR $T1[rsp]
	mov	BYTE PTR buffer1$[rsp+rax], 0
; Line 6363
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stb_dirtre
$LN8@stb_dirtre:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stb_dirtre:
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN51@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv301[rsp], eax
	jmp	SHORT $LN52@stb_dirtre
$LN51@stb_dirtre:
	mov	DWORD PTR tv301[rsp], 0
$LN52@stb_dirtre:
	mov	eax, DWORD PTR tv301[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stb_dirtre
; Line 6365
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR elen$[rsp]
	mov	rdx, QWORD PTR descendents$[rsp]
	add	rcx, QWORD PTR [rdx+rax*8]
	mov	rax, rcx
	mov	QWORD PTR s$4[rsp], rax
; Line 6366
	mov	r8b, 92					; 0000005cH
	mov	dl, 47					; 0000002fH
	mov	rcx, QWORD PTR s$4[rsp]
	call	stb_strchr2
	mov	QWORD PTR t$2[rsp], rax
; Line 6367
	cmp	QWORD PTR t$2[rsp], 0
	jne	SHORT $LN53@stb_dirtre
	mov	r8d, 6367				; 000018dfH
	lea	rdx, OFFSET FLAT:$SG87648
	lea	rcx, OFFSET FLAT:$SG87649
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN53@stb_dirtre:
; Line 6368
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR descendents$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR t$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR descendents$[rsp]
	mov	rdx, QWORD PTR [rax+rcx*8]
	lea	rcx, QWORD PTR buffer2$5[rsp]
	call	stb_strncpy
; Line 6369
	lea	rdx, QWORD PTR buffer2$5[rsp]
	lea	rcx, QWORD PTR buffer1$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	je	$LN22@stb_dirtre
; Line 6370
	cmp	QWORD PTR descendents$[rsp], 0
	je	SHORT $LN54@stb_dirtre
	mov	rax, QWORD PTR descendents$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN55@stb_dirtre
$LN54@stb_dirtre:
	mov	DWORD PTR tv337[rsp], 0
$LN55@stb_dirtre:
	mov	r8d, DWORD PTR tv337[rsp]
	mov	rdx, QWORD PTR descendents$[rsp]
	lea	rcx, QWORD PTR buffer2$5[rsp]
	call	stb_dirtree2_from_files_relative
	mov	QWORD PTR t$3[rsp], rax
; Line 6371
	cmp	QWORD PTR t$3[rsp], 0
	jne	SHORT $LN56@stb_dirtre
	mov	r8d, 6371				; 000018e3H
	lea	rdx, OFFSET FLAT:$SG87651
	lea	rcx, OFFSET FLAT:$SG87652
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN56@stb_dirtre:
; Line 6372
	lea	r8, QWORD PTR buffer2$5[rsp]
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR buffer1$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 6373
	mov	rax, QWORD PTR t$3[rsp]
	mov	QWORD PTR tv397[rsp], rax
	mov	rax, QWORD PTR d$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN57@stb_dirtre
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv354[rsp], eax
	jmp	SHORT $LN58@stb_dirtre
$LN57@stb_dirtre:
	mov	DWORD PTR tv354[rsp], 0
$LN58@stb_dirtre:
	mov	rax, QWORD PTR d$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN59@stb_dirtre
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv361[rsp], eax
	jmp	SHORT $LN60@stb_dirtre
$LN59@stb_dirtre:
	mov	DWORD PTR tv361[rsp], 0
$LN60@stb_dirtre:
	mov	eax, DWORD PTR tv354[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv361[rsp]
	jle	SHORT $LN62@stb_dirtre
	mov	rax, QWORD PTR d$[rsp]
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	stb__arr_addlen_
	mov	DWORD PTR tv384[rsp], 0
	jmp	SHORT $LN63@stb_dirtre
$LN62@stb_dirtre:
	mov	rax, QWORD PTR d$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN61@stb_dirtre
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN61@stb_dirtre
	mov	r8d, 6373				; 000018e5H
	lea	rdx, OFFSET FLAT:$SG87653
	lea	rcx, OFFSET FLAT:$SG87654
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN61@stb_dirtre:
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv384[rsp], 0
$LN63@stb_dirtre:
	mov	rax, QWORD PTR d$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN64@stb_dirtre
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv391[rsp], eax
	jmp	SHORT $LN65@stb_dirtre
$LN64@stb_dirtre:
	mov	DWORD PTR tv391[rsp], 0
$LN65@stb_dirtre:
	movsxd	rax, DWORD PTR tv391[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR tv397[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
$LN22@stb_dirtre:
; Line 6375
	jmp	$LN8@stb_dirtre
$LN9@stb_dirtre:
; Line 6376
	mov	rax, QWORD PTR d$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN66@stb_dirtre
	mov	rax, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv404[rsp], eax
	jmp	SHORT $LN67@stb_dirtre
$LN66@stb_dirtre:
	mov	DWORD PTR tv404[rsp], 0
$LN67@stb_dirtre:
	mov	rax, QWORD PTR d$[rsp]
	mov	ecx, DWORD PTR tv404[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 6377
	mov	rax, QWORD PTR d$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0
; Line 6378
	mov	rax, QWORD PTR d$[rsp]
$LN1@stb_dirtre:
$LN23@stb_dirtre:
; Line 6379
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2344				; 00000928H
	ret	0
stb_dirtree2_from_files_relative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
tv67 = 40
tv76 = 44
tv84 = 48
tv89 = 52
tv143 = 56
tv158 = 60
tv164 = 64
tv172 = 68
files$ = 72
dirs$ = 80
tv139 = 88
tv154 = 96
sofar$ = 128
dir$ = 136
filespec$ = 144
?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z PROC		; stb_readdir_rec
; File W:\cpp\void\vendor\stb\stb.h
; Line 6232
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 6237
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN12@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN13@stb_readdi
$LN12@stb_readdi:
	mov	DWORD PTR tv67[rsp], 0
$LN13@stb_readdi:
	mov	eax, DWORD PTR ?stb__rec_max@@3HA	; stb__rec_max
	cmp	DWORD PTR tv67[rsp], eax
	jl	SHORT $LN8@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	jmp	$LN1@stb_readdi
$LN8@stb_readdi:
; Line 6239
	mov	rdx, QWORD PTR filespec$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	call	stb_readdir_files_mask
	mov	QWORD PTR files$[rsp], rax
; Line 6240
	mov	rax, QWORD PTR files$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@stb_readdi
$LN2@stb_readdi:
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
$LN4@stb_readdi:
	cmp	QWORD PTR files$[rsp], 0
	je	SHORT $LN14@stb_readdi
	mov	rax, QWORD PTR files$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN15@stb_readdi
$LN14@stb_readdi:
	mov	DWORD PTR tv76[rsp], 0
$LN15@stb_readdi:
	movsxd	rax, DWORD PTR tv76[rsp]
	mov	rcx, QWORD PTR files$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR p$[rsp], rax
	jae	$LN3@stb_readdi
; Line 6241
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp__strdup
	mov	QWORD PTR tv154[rsp], rax
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN16@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN17@stb_readdi
$LN16@stb_readdi:
	mov	DWORD PTR tv84[rsp], 0
$LN17@stb_readdi:
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN18@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN19@stb_readdi
$LN18@stb_readdi:
	mov	DWORD PTR tv89[rsp], 0
$LN19@stb_readdi:
	mov	eax, DWORD PTR tv84[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv89[rsp]
	jle	SHORT $LN21@stb_readdi
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR sofar$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN22@stb_readdi
$LN21@stb_readdi:
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN20@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN20@stb_readdi
	mov	r8d, 6241				; 00001861H
	lea	rdx, OFFSET FLAT:$SG87501
	lea	rcx, OFFSET FLAT:$SG87502
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@stb_readdi:
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR sofar$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv139[rsp], 0
$LN22@stb_readdi:
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN23@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv143[rsp], eax
	jmp	SHORT $LN24@stb_readdi
$LN23@stb_readdi:
	mov	DWORD PTR tv143[rsp], 0
$LN24@stb_readdi:
	movsxd	rax, DWORD PTR tv143[rsp]
	mov	rcx, QWORD PTR sofar$[rsp]
	mov	rdx, QWORD PTR tv154[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
; Line 6242
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN25@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv158[rsp], eax
	jmp	SHORT $LN26@stb_readdi
$LN25@stb_readdi:
	mov	DWORD PTR tv158[rsp], 0
$LN26@stb_readdi:
	mov	eax, DWORD PTR ?stb__rec_max@@3HA	; stb__rec_max
	cmp	DWORD PTR tv158[rsp], eax
	jl	SHORT $LN9@stb_readdi
	jmp	SHORT $LN3@stb_readdi
$LN9@stb_readdi:
; Line 6243
	jmp	$LN2@stb_readdi
$LN3@stb_readdi:
; Line 6244
	mov	rcx, QWORD PTR files$[rsp]
	call	stb_readdir_free
; Line 6245
	cmp	QWORD PTR sofar$[rsp], 0
	je	SHORT $LN27@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv164[rsp], eax
	jmp	SHORT $LN28@stb_readdi
$LN27@stb_readdi:
	mov	DWORD PTR tv164[rsp], 0
$LN28@stb_readdi:
	mov	eax, DWORD PTR ?stb__rec_max@@3HA	; stb__rec_max
	cmp	DWORD PTR tv164[rsp], eax
	jl	SHORT $LN10@stb_readdi
	mov	rax, QWORD PTR sofar$[rsp]
	jmp	$LN1@stb_readdi
$LN10@stb_readdi:
; Line 6247
	mov	rcx, QWORD PTR dir$[rsp]
	call	stb_readdir_subdirs
	mov	QWORD PTR dirs$[rsp], rax
; Line 6248
	mov	rax, QWORD PTR dirs$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN7@stb_readdi
$LN5@stb_readdi:
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
$LN7@stb_readdi:
	cmp	QWORD PTR dirs$[rsp], 0
	je	SHORT $LN29@stb_readdi
	mov	rax, QWORD PTR dirs$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv172[rsp], eax
	jmp	SHORT $LN30@stb_readdi
$LN29@stb_readdi:
	mov	DWORD PTR tv172[rsp], 0
$LN30@stb_readdi:
	movsxd	rax, DWORD PTR tv172[rsp]
	mov	rcx, QWORD PTR dirs$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR p$[rsp], rax
	jae	SHORT $LN6@stb_readdi
; Line 6249
	mov	r8, QWORD PTR filespec$[rsp]
	mov	rax, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR sofar$[rsp]
	call	?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z ; stb_readdir_rec
	mov	QWORD PTR sofar$[rsp], rax
	jmp	SHORT $LN5@stb_readdi
$LN6@stb_readdi:
; Line 6250
	mov	rcx, QWORD PTR dirs$[rsp]
	call	stb_readdir_free
; Line 6251
	mov	rax, QWORD PTR sofar$[rsp]
$LN1@stb_readdi:
; Line 6252
	add	rsp, 120				; 00000078H
	ret	0
?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z ENDP		; stb_readdir_rec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
results$ = 48
n$ = 56
tv145 = 64
is_subdir$1 = 68
tv175 = 72
tv180 = 76
tv202 = 80
name$2 = 88
nonempty$3 = 96
tv198 = 100
z$ = 104
$T4 = 112
p$5 = 120
ws$ = 128
tv213 = 136
none$ = 144
data$ = 160
buffer$ = 720
buffer$6 = 4816
with_slash$ = 8912
__$ArrayPad$ = 13008
dir$ = 13040
return_subdirs$ = 13048
mask$ = 13056
?readdir_raw@@YAPEAPEADPEADH0@Z PROC			; readdir_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 6130
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 13032				; 000032e8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6131
	mov	QWORD PTR results$[rsp], 0
; Line 6139
	mov	QWORD PTR none$[rsp], -1
; Line 6150
	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR dir$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb_strscpy
	mov	QWORD PTR n$[rsp], rax
; Line 6151
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN6@readdir_ra
	cmp	QWORD PTR n$[rsp], 4096			; 00001000H
	jb	SHORT $LN5@readdir_ra
$LN6@readdir_ra:
; Line 6152
	xor	eax, eax
	jmp	$LN1@readdir_ra
$LN5@readdir_ra:
; Line 6153
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb_fixpath
; Line 6155
	cmp	QWORD PTR n$[rsp], 0
	jbe	SHORT $LN7@readdir_ra
	mov	rax, QWORD PTR n$[rsp]
	movsx	eax, BYTE PTR buffer$[rsp+rax-1]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN7@readdir_ra
; Line 6156
	mov	rax, QWORD PTR n$[rsp]
	mov	BYTE PTR buffer$[rsp+rax], 47		; 0000002fH
	mov	rax, QWORD PTR n$[rsp]
	inc	rax
	mov	QWORD PTR n$[rsp], rax
$LN7@readdir_ra:
; Line 6158
	mov	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR $T4[rsp], rax
	cmp	QWORD PTR $T4[rsp], 4096		; 00001000H
	jae	SHORT $LN21@readdir_ra
	jmp	SHORT $LN22@readdir_ra
$LN21@readdir_ra:
	call	__report_rangecheckfailure
$LN22@readdir_ra:
	mov	rax, QWORD PTR $T4[rsp]
	mov	BYTE PTR buffer$[rsp+rax], 0
; Line 6159
	mov	r8d, 4096				; 00001000H
	lea	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR with_slash$[rsp]
	call	stb_strscpy
	test	rax, rax
	jne	SHORT $LN8@readdir_ra
; Line 6160
	xor	eax, eax
	jmp	$LN1@readdir_ra
$LN8@readdir_ra:
; Line 6163
	mov	eax, 4096				; 00001000H
	sub	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR n$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp+rcx]
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG87441
	call	stb_strscpy
	test	rax, rax
	jne	SHORT $LN9@readdir_ra
; Line 6164
	xor	eax, eax
	jmp	$LN1@readdir_ra
$LN9@readdir_ra:
; Line 6165
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR ws$[rsp], rax
; Line 6166
	lea	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR ws$[rsp]
	call	QWORD PTR __imp__wfindfirst64i32
	mov	QWORD PTR z$[rsp], rax
; Line 6171
	cmp	QWORD PTR z$[rsp], -1
	je	$LN10@readdir_ra
; Line 6172
	mov	DWORD PTR nonempty$3[rsp], 1
; Line 6178
	cmp	DWORD PTR nonempty$3[rsp], 0
	je	$LN11@readdir_ra
$LN4@readdir_ra:
; Line 6183
	lea	rcx, QWORD PTR data$[rsp+36]
	call	stb__to_utf8
	mov	QWORD PTR name$2[rsp], rax
; Line 6184
	cmp	QWORD PTR name$2[rsp], 0
	jne	SHORT $LN12@readdir_ra
; Line 6185
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	lea	rcx, OFFSET FLAT:$SG87445
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR data$[rsp+36]
	lea	r8, OFFSET FLAT:$SG87446
	lea	rdx, OFFSET FLAT:$SG87447
	mov	rcx, rax
	call	fprintf
; Line 6186
	jmp	$LN2@readdir_ra
$LN12@readdir_ra:
; Line 6188
	mov	eax, DWORD PTR data$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN23@readdir_ra
	mov	DWORD PTR tv145[rsp], 1
	jmp	SHORT $LN24@readdir_ra
$LN23@readdir_ra:
	mov	DWORD PTR tv145[rsp], 0
$LN24@readdir_ra:
	mov	eax, DWORD PTR tv145[rsp]
	mov	DWORD PTR is_subdir$1[rsp], eax
; Line 6197
	mov	eax, DWORD PTR return_subdirs$[rsp]
	cmp	DWORD PTR is_subdir$1[rsp], eax
	jne	$LN13@readdir_ra
; Line 6198
	cmp	DWORD PTR is_subdir$1[rsp], 0
	je	SHORT $LN15@readdir_ra
	mov	rcx, QWORD PTR name$2[rsp]
	call	?isdotdirname@@YAHPEAD@Z		; isdotdirname
	test	eax, eax
	jne	$LN14@readdir_ra
$LN15@readdir_ra:
; Line 6199
	cmp	QWORD PTR mask$[rsp], 0
	je	SHORT $LN17@readdir_ra
	mov	rdx, QWORD PTR name$2[rsp]
	mov	rcx, QWORD PTR mask$[rsp]
	call	stb_wildmatchi
	test	eax, eax
	je	$LN16@readdir_ra
$LN17@readdir_ra:
; Line 6200
	lea	rax, QWORD PTR buffer$6[rsp]
	mov	QWORD PTR p$5[rsp], rax
; Line 6201
	mov	rax, QWORD PTR name$2[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR with_slash$[rsp]
	lea	r8, OFFSET FLAT:$SG87454
	mov	edx, 4096				; 00001000H
	lea	rcx, QWORD PTR buffer$6[rsp]
	call	stb_snprintf
	test	eax, eax
	jge	SHORT $LN18@readdir_ra
; Line 6202
	jmp	$LN3@readdir_ra
$LN18@readdir_ra:
; Line 6203
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR buffer$6[rsp+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN19@readdir_ra
	mov	eax, 1
	imul	rax, rax, 1
	movsx	eax, BYTE PTR buffer$6[rsp+rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN19@readdir_ra
; Line 6204
	lea	rax, QWORD PTR buffer$6[rsp+2]
	mov	QWORD PTR p$5[rsp], rax
$LN19@readdir_ra:
; Line 6205
	mov	rcx, QWORD PTR p$5[rsp]
	call	QWORD PTR __imp__strdup
	mov	QWORD PTR tv213[rsp], rax
	cmp	QWORD PTR results$[rsp], 0
	je	SHORT $LN25@readdir_ra
	mov	rax, QWORD PTR results$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv175[rsp], eax
	jmp	SHORT $LN26@readdir_ra
$LN25@readdir_ra:
	mov	DWORD PTR tv175[rsp], 0
$LN26@readdir_ra:
	cmp	QWORD PTR results$[rsp], 0
	je	SHORT $LN27@readdir_ra
	mov	rax, QWORD PTR results$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv180[rsp], eax
	jmp	SHORT $LN28@readdir_ra
$LN27@readdir_ra:
	mov	DWORD PTR tv180[rsp], 0
$LN28@readdir_ra:
	mov	eax, DWORD PTR tv175[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv180[rsp]
	jle	SHORT $LN30@readdir_ra
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR results$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv198[rsp], 0
	jmp	SHORT $LN31@readdir_ra
$LN30@readdir_ra:
	cmp	QWORD PTR results$[rsp], 0
	je	SHORT $LN29@readdir_ra
	mov	rax, QWORD PTR results$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN29@readdir_ra
	mov	r8d, 6205				; 0000183dH
	lea	rdx, OFFSET FLAT:$SG87456
	lea	rcx, OFFSET FLAT:$SG87457
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@readdir_ra:
	mov	rax, QWORD PTR results$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR results$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv198[rsp], 0
$LN31@readdir_ra:
	cmp	QWORD PTR results$[rsp], 0
	je	SHORT $LN32@readdir_ra
	mov	rax, QWORD PTR results$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv202[rsp], eax
	jmp	SHORT $LN33@readdir_ra
$LN32@readdir_ra:
	mov	DWORD PTR tv202[rsp], 0
$LN33@readdir_ra:
	movsxd	rax, DWORD PTR tv202[rsp]
	mov	rcx, QWORD PTR results$[rsp]
	mov	rdx, QWORD PTR tv213[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
$LN16@readdir_ra:
$LN14@readdir_ra:
$LN13@readdir_ra:
$LN2@readdir_ra:
; Line 6211
	lea	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR __imp__wfindnext64i32
	test	eax, eax
	je	$LN4@readdir_ra
$LN3@readdir_ra:
$LN11@readdir_ra:
; Line 6217
	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR __imp__findclose
$LN10@readdir_ra:
; Line 6222
	mov	rax, QWORD PTR results$[rsp]
$LN1@readdir_ra:
$LN20@readdir_ra:
; Line 6223
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 13032				; 000032e8H
	ret	0
?readdir_raw@@YAPEAPEADPEADH0@Z ENDP			; readdir_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
expr$ = 64
candidate$ = 72
stb_wildmatchi PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 9252
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 9253
	mov	r9d, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR candidate$[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	call	?stb__wildmatch_raw@@YAHPEAD0HH@Z	; stb__wildmatch_raw
	test	eax, eax
	jl	SHORT $LN3@stb_wildma
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb_wildma
$LN3@stb_wildma:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb_wildma:
	mov	eax, DWORD PTR tv70[rsp]
; Line 9254
	add	rsp, 56					; 00000038H
	ret	0
stb_wildmatchi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 0
tv80 = 4
tv82 = 8
name$ = 32
?isdotdirname@@YAHPEAD@Z PROC				; isdotdirname
; File W:\cpp\void\vendor\stb\stb.h
; Line 6122
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 6123
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN2@isdotdirna
; Line 6124
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN8@isdotdirna
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN6@isdotdirna
	mov	DWORD PTR tv81[rsp], 1
	jmp	SHORT $LN7@isdotdirna
$LN6@isdotdirna:
	mov	DWORD PTR tv81[rsp], 0
$LN7@isdotdirna:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN9@isdotdirna
$LN8@isdotdirna:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN4@isdotdirna
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN5@isdotdirna
$LN4@isdotdirna:
	mov	DWORD PTR tv80[rsp], 0
$LN5@isdotdirna:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN9@isdotdirna:
	mov	eax, DWORD PTR tv82[rsp]
	jmp	SHORT $LN1@isdotdirna
$LN2@isdotdirna:
; Line 6125
	xor	eax, eax
$LN1@isdotdirna:
; Line 6126
	add	rsp, 24
	ret	0
?isdotdirname@@YAHPEAD@Z ENDP				; isdotdirname
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv70 = 36
tv83 = 40
list$ = 48
dir$ = 80
stb_delete_directory_recursive PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6260
$LN14:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6261
	mov	rcx, QWORD PTR dir$[rsp]
	call	stb_readdir_subdirs
	mov	QWORD PTR list$[rsp], rax
; Line 6263
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_delete
$LN2@stb_delete:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_delete:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN10@stb_delete
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN11@stb_delete
$LN10@stb_delete:
	mov	DWORD PTR tv70[rsp], 0
$LN11@stb_delete:
	mov	eax, DWORD PTR tv70[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_delete
; Line 6264
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	stb_delete_directory_recursive
	jmp	SHORT $LN2@stb_delete
$LN3@stb_delete:
; Line 6265
	lea	rcx, QWORD PTR list$[rsp]
	call	stb_arr_free_
; Line 6266
	mov	rcx, QWORD PTR dir$[rsp]
	call	stb_readdir_files
	mov	QWORD PTR list$[rsp], rax
; Line 6267
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stb_delete
$LN5@stb_delete:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stb_delete:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN12@stb_delete
	mov	rax, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN13@stb_delete
$LN12@stb_delete:
	mov	DWORD PTR tv83[rsp], 0
$LN13@stb_delete:
	mov	eax, DWORD PTR tv83[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stb_delete
; Line 6268
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp_remove
	test	eax, eax
	jne	SHORT $LN8@stb_delete
; Line 6272
	movsxd	rax, DWORD PTR i$[rsp]
	mov	edx, 128				; 00000080H
	mov	rcx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp__chmod
; Line 6273
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp_remove
$LN8@stb_delete:
; Line 6275
	jmp	SHORT $LN5@stb_delete
$LN6@stb_delete:
; Line 6276
	lea	rcx, QWORD PTR list$[rsp]
	call	stb_arr_free_
; Line 6277
	mov	rcx, QWORD PTR dir$[rsp]
	call	QWORD PTR __imp__rmdir
; Line 6278
	add	rsp, 72					; 00000048H
	ret	0
stb_delete_directory_recursive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
filespec$ = 56
stb_readdir_recursive PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6255
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6256
	mov	r8, QWORD PTR filespec$[rsp]
	mov	rdx, QWORD PTR dir$[rsp]
	xor	ecx, ecx
	call	?stb_readdir_rec@@YAPEAPEADPEAPEADPEAD1@Z ; stb_readdir_rec
; Line 6257
	add	rsp, 40					; 00000028H
	ret	0
stb_readdir_recursive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv68 = 36
f2$ = 40
files$ = 64
stb_readdir_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6113
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6114
	mov	rax, QWORD PTR files$[rsp]
	mov	QWORD PTR f2$[rsp], rax
; Line 6116
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_readdi
$LN2@stb_readdi:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_readdi:
	cmp	QWORD PTR f2$[rsp], 0
	je	SHORT $LN6@stb_readdi
	mov	rax, QWORD PTR f2$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN7@stb_readdi
$LN6@stb_readdi:
	mov	DWORD PTR tv68[rsp], 0
$LN7@stb_readdi:
	mov	eax, DWORD PTR tv68[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_readdi
; Line 6117
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR f2$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN2@stb_readdi
$LN3@stb_readdi:
; Line 6118
	lea	rcx, QWORD PTR f2$[rsp]
	call	stb_arr_free_
; Line 6119
	add	rsp, 56					; 00000038H
	ret	0
stb_readdir_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
wild$ = 56
stb_readdir_subdirs_mask PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6228
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8, QWORD PTR wild$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR dir$[rsp]
	call	?readdir_raw@@YAPEAPEADPEADH0@Z		; readdir_raw
	add	rsp, 40					; 00000028H
	ret	0
stb_readdir_subdirs_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
stb_readdir_subdirs PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6226
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR dir$[rsp]
	call	?readdir_raw@@YAPEAPEADPEADH0@Z		; readdir_raw
	add	rsp, 40					; 00000028H
	ret	0
stb_readdir_subdirs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
wild$ = 56
stb_readdir_files_mask PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6227
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8, QWORD PTR wild$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR dir$[rsp]
	call	?readdir_raw@@YAPEAPEADPEADH0@Z		; readdir_raw
	add	rsp, 40					; 00000028H
	ret	0
stb_readdir_files_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dir$ = 48
stb_readdir_files PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6225
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR dir$[rsp]
	call	?readdir_raw@@YAPEAPEADPEADH0@Z		; readdir_raw
	add	rsp, 40					; 00000028H
	ret	0
stb_readdir_files ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv68 = 36
o2$ = 40
opts$ = 64
stb_getopt_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6020
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6022
	mov	rax, QWORD PTR opts$[rsp]
	mov	QWORD PTR o2$[rsp], rax
; Line 6023
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_getopt
$LN2@stb_getopt:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_getopt:
	cmp	QWORD PTR o2$[rsp], 0
	je	SHORT $LN6@stb_getopt
	mov	rax, QWORD PTR o2$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN7@stb_getopt
$LN6@stb_getopt:
	mov	DWORD PTR tv68[rsp], 0
$LN7@stb_getopt:
	mov	eax, DWORD PTR tv68[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_getopt
; Line 6024
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR o2$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN2@stb_getopt
$LN3@stb_getopt:
; Line 6025
	lea	rcx, QWORD PTR o2$[rsp]
	call	stb_arr_free_
; Line 6026
	add	rsp, 56					; 00000038H
	ret	0
stb_getopt_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
GetArgumentCount$ = 48
GetArgument$ = 56
stb_getopt PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6029
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 6030
	lea	r8, OFFSET FLAT:$SG87301
	mov	rdx, QWORD PTR GetArgument$[rsp]
	mov	rcx, QWORD PTR GetArgumentCount$[rsp]
	call	stb_getopt_param
; Line 6031
	add	rsp, 40					; 00000028H
	ret	0
stb_getopt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
opts$ = 40
k$1 = 48
z$2 = 52
j$ = 56
s$3 = 64
tv141 = 72
tv146 = 76
tv168 = 80
tv252 = 84
tv257 = 88
tv279 = 92
tv289 = 96
tv294 = 100
tv316 = 104
t$4 = 112
q$5 = 120
tv164 = 128
tv275 = 132
tv312 = 136
len$6 = 144
tv130 = 152
tv182 = 160
tv285 = 168
GetArgumentCount$ = 192
GetArgument$ = 200
param$ = 208
stb_getopt_param PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 6034
$LN51:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 6035
	mov	QWORD PTR opts$[rsp], 0
; Line 6036
	mov	DWORD PTR j$[rsp], 1
; Line 6037
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stb_getopt
$LN2@stb_getopt:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_getopt:
	mov	rax, QWORD PTR GetArgumentCount$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_getopt
; Line 6038
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [rdx+rax*8]
	movsx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 45					; 0000002dH
	je	SHORT $LN10@stb_getopt
; Line 6039
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR GetArgument$[rsp]
	mov	r8, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 6040
	jmp	$LN11@stb_getopt
$LN10@stb_getopt:
; Line 6041
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [rdx+rax*8]
	movsx	eax, BYTE PTR [rax+rcx]
	test	eax, eax
	jne	SHORT $LN12@stb_getopt
; Line 6042
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN5@stb_getopt:
; Line 6043
	mov	rax, QWORD PTR GetArgumentCount$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stb_getopt
; Line 6044
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv130[rsp], rax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR GetArgument$[rsp]
	mov	rdx, QWORD PTR tv130[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
	jmp	SHORT $LN5@stb_getopt
$LN6@stb_getopt:
; Line 6045
	jmp	$LN3@stb_getopt
	jmp	$LN13@stb_getopt
$LN12@stb_getopt:
; Line 6046
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [rdx+rax*8]
	movsx	eax, BYTE PTR [rax+rcx]
	cmp	eax, 45					; 0000002dH
	jne	$LN14@stb_getopt
; Line 6048
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR GetArgument$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp__strdup
	mov	QWORD PTR tv182[rsp], rax
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN24@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv141[rsp], eax
	jmp	SHORT $LN25@stb_getopt
$LN24@stb_getopt:
	mov	DWORD PTR tv141[rsp], 0
$LN25@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN26@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv146[rsp], eax
	jmp	SHORT $LN27@stb_getopt
$LN26@stb_getopt:
	mov	DWORD PTR tv146[rsp], 0
$LN27@stb_getopt:
	mov	eax, DWORD PTR tv141[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv146[rsp]
	jle	SHORT $LN29@stb_getopt
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR opts$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN30@stb_getopt
$LN29@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN28@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN28@stb_getopt
	mov	r8d, 6048				; 000017a0H
	lea	rdx, OFFSET FLAT:$SG87357
	lea	rcx, OFFSET FLAT:$SG87358
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN28@stb_getopt:
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR opts$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv164[rsp], 0
$LN30@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN31@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv168[rsp], eax
	jmp	SHORT $LN32@stb_getopt
$LN31@stb_getopt:
	mov	DWORD PTR tv168[rsp], 0
$LN32@stb_getopt:
	movsxd	rax, DWORD PTR tv168[rsp]
	mov	rcx, QWORD PTR opts$[rsp]
	mov	rdx, QWORD PTR tv182[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
; Line 6049
	jmp	$LN15@stb_getopt
$LN14@stb_getopt:
; Line 6051
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR q$5[rsp], rax
; Line 6052
	mov	DWORD PTR k$1[rsp], 1
	jmp	SHORT $LN9@stb_getopt
$LN7@stb_getopt:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN9@stb_getopt:
	movsxd	rax, DWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR q$5[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN8@stb_getopt
; Line 6054
	movsxd	rax, DWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR q$5[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	edx, eax
	mov	rcx, QWORD PTR param$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	test	rax, rax
	je	$LN16@stb_getopt
; Line 6055
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR q$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR t$4[rsp], rax
	movsxd	rax, DWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR q$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR z$2[rsp], al
; Line 6056
	mov	QWORD PTR len$6[rsp], 0
; Line 6057
	mov	rax, QWORD PTR t$4[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN18@stb_getopt
; Line 6058
	mov	rax, QWORD PTR GetArgumentCount$[rsp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jne	SHORT $LN20@stb_getopt
; Line 6059
	mov	rax, QWORD PTR GetArgumentCount$[rsp]
	mov	DWORD PTR [rax], 0
; Line 6060
	mov	rcx, QWORD PTR opts$[rsp]
	call	stb_getopt_free
; Line 6061
	xor	eax, eax
	jmp	$LN1@stb_getopt
$LN20@stb_getopt:
; Line 6063
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR GetArgument$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$4[rsp], rax
; Line 6064
	jmp	SHORT $LN19@stb_getopt
$LN18@stb_getopt:
; Line 6065
	mov	rcx, QWORD PTR t$4[rsp]
	call	strlen
	mov	ecx, DWORD PTR k$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$1[rsp], eax
$LN19@stb_getopt:
; Line 6066
	mov	rcx, QWORD PTR t$4[rsp]
	call	strlen
	mov	QWORD PTR len$6[rsp], rax
; Line 6067
	mov	rax, QWORD PTR len$6[rsp]
	add	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR s$3[rsp], rax
; Line 6068
	cmp	QWORD PTR s$3[rsp], 0
	jne	SHORT $LN21@stb_getopt
	xor	eax, eax
	jmp	$LN1@stb_getopt
$LN21@stb_getopt:
; Line 6069
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$3[rsp]
	movzx	edx, BYTE PTR z$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 6070
	mov	rax, QWORD PTR len$6[rsp]
	add	rax, 2
	mov	rcx, QWORD PTR s$3[rsp]
	inc	rcx
	mov	r8, QWORD PTR t$4[rsp]
	mov	rdx, rax
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 6071
	jmp	SHORT $LN17@stb_getopt
$LN16@stb_getopt:
; Line 6073
	mov	ecx, 2
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR s$3[rsp], rax
; Line 6074
	cmp	QWORD PTR s$3[rsp], 0
	jne	SHORT $LN22@stb_getopt
	xor	eax, eax
	jmp	$LN1@stb_getopt
$LN22@stb_getopt:
; Line 6075
	movsxd	rax, DWORD PTR k$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR s$3[rsp]
	mov	r8, QWORD PTR q$5[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6076
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$3[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN17@stb_getopt:
; Line 6078
	mov	rax, QWORD PTR s$3[rsp]
	mov	QWORD PTR tv285[rsp], rax
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN33@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv252[rsp], eax
	jmp	SHORT $LN34@stb_getopt
$LN33@stb_getopt:
	mov	DWORD PTR tv252[rsp], 0
$LN34@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN35@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv257[rsp], eax
	jmp	SHORT $LN36@stb_getopt
$LN35@stb_getopt:
	mov	DWORD PTR tv257[rsp], 0
$LN36@stb_getopt:
	mov	eax, DWORD PTR tv252[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv257[rsp]
	jle	SHORT $LN38@stb_getopt
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR opts$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv275[rsp], 0
	jmp	SHORT $LN39@stb_getopt
$LN38@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN37@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN37@stb_getopt
	mov	r8d, 6078				; 000017beH
	lea	rdx, OFFSET FLAT:$SG87366
	lea	rcx, OFFSET FLAT:$SG87367
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN37@stb_getopt:
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR opts$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv275[rsp], 0
$LN39@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN40@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv279[rsp], eax
	jmp	SHORT $LN41@stb_getopt
$LN40@stb_getopt:
	mov	DWORD PTR tv279[rsp], 0
$LN41@stb_getopt:
	movsxd	rax, DWORD PTR tv279[rsp]
	mov	rcx, QWORD PTR opts$[rsp]
	mov	rdx, QWORD PTR tv285[rsp]
	mov	QWORD PTR [rcx+rax*8-8], rdx
; Line 6079
	jmp	$LN7@stb_getopt
$LN8@stb_getopt:
$LN15@stb_getopt:
$LN13@stb_getopt:
$LN11@stb_getopt:
; Line 6082
	jmp	$LN2@stb_getopt
$LN3@stb_getopt:
; Line 6083
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN42@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv289[rsp], eax
	jmp	SHORT $LN43@stb_getopt
$LN42@stb_getopt:
	mov	DWORD PTR tv289[rsp], 0
$LN43@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN44@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv294[rsp], eax
	jmp	SHORT $LN45@stb_getopt
$LN44@stb_getopt:
	mov	DWORD PTR tv294[rsp], 0
$LN45@stb_getopt:
	mov	eax, DWORD PTR tv289[rsp]
	inc	eax
	cmp	eax, DWORD PTR tv294[rsp]
	jle	SHORT $LN47@stb_getopt
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR opts$[rsp]
	call	stb__arr_addlen_
	mov	DWORD PTR tv312[rsp], 0
	jmp	SHORT $LN48@stb_getopt
$LN47@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN46@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN46@stb_getopt
	mov	r8d, 6083				; 000017c3H
	lea	rdx, OFFSET FLAT:$SG87368
	lea	rcx, OFFSET FLAT:$SG87369
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stb_getopt:
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	inc	eax
	mov	rcx, QWORD PTR opts$[rsp]
	mov	DWORD PTR [rcx-16], eax
	mov	DWORD PTR tv312[rsp], 0
$LN48@stb_getopt:
	cmp	QWORD PTR opts$[rsp], 0
	je	SHORT $LN49@stb_getopt
	mov	rax, QWORD PTR opts$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv316[rsp], eax
	jmp	SHORT $LN50@stb_getopt
$LN49@stb_getopt:
	mov	DWORD PTR tv316[rsp], 0
$LN50@stb_getopt:
	movsxd	rax, DWORD PTR tv316[rsp]
	mov	rcx, QWORD PTR opts$[rsp]
	mov	QWORD PTR [rcx+rax*8-8], 0
; Line 6084
	mov	rax, QWORD PTR GetArgumentCount$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6085
	mov	rax, QWORD PTR opts$[rsp]
$LN1@stb_getopt:
; Line 6086
	add	rsp, 184				; 000000b8H
	ret	0
stb_getopt_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$1 = 32
t$ = 64
?stb_strip_final_slash_regardless@@YAPEADPEAD@Z PROC	; stb_strip_final_slash_regardless
; File W:\cpp\void\vendor\stb\stb.h
; Line 5995
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5996
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN2@stb_strip_
; Line 5997
	mov	rcx, QWORD PTR t$[rsp]
	call	strlen
	mov	rcx, QWORD PTR t$[rsp]
	lea	rax, QWORD PTR [rcx+rax-1]
	mov	QWORD PTR z$1[rsp], rax
; Line 5999
	mov	rax, QWORD PTR z$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN4@stb_strip_
	mov	rax, QWORD PTR z$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN3@stb_strip_
$LN4@stb_strip_:
; Line 6000
	mov	rax, QWORD PTR z$1[rsp]
	mov	BYTE PTR [rax], 0
$LN3@stb_strip_:
; Line 6001
	mov	rax, QWORD PTR z$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN5@stb_strip_
; Line 6002
	mov	rax, QWORD PTR z$1[rsp]
	mov	BYTE PTR [rax], 47			; 0000002fH
$LN5@stb_strip_:
$LN2@stb_strip_:
; Line 6004
	mov	rax, QWORD PTR t$[rsp]
; Line 6005
	add	rsp, 56					; 00000038H
	ret	0
?stb_strip_final_slash_regardless@@YAPEADPEAD@Z ENDP	; stb_strip_final_slash_regardless
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$1 = 32
t$ = 64
?stb_strip_final_slash@@YAPEADPEAD@Z PROC		; stb_strip_final_slash
; File W:\cpp\void\vendor\stb\stb.h
; Line 5981
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5982
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN2@stb_strip_
; Line 5983
	mov	rcx, QWORD PTR t$[rsp]
	call	strlen
	mov	rcx, QWORD PTR t$[rsp]
	lea	rax, QWORD PTR [rcx+rax-1]
	mov	QWORD PTR z$1[rsp], rax
; Line 5985
	mov	rax, QWORD PTR z$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN4@stb_strip_
	mov	rax, QWORD PTR z$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN3@stb_strip_
$LN4@stb_strip_:
; Line 5986
	mov	rax, QWORD PTR t$[rsp]
	add	rax, 2
	cmp	QWORD PTR z$1[rsp], rax
	jne	SHORT $LN6@stb_strip_
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN5@stb_strip_
$LN6@stb_strip_:
; Line 5987
	mov	rax, QWORD PTR z$1[rsp]
	mov	BYTE PTR [rax], 0
$LN5@stb_strip_:
$LN3@stb_strip_:
; Line 5988
	mov	rax, QWORD PTR z$1[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN7@stb_strip_
; Line 5989
	mov	rax, QWORD PTR z$1[rsp]
	mov	BYTE PTR [rax], 47			; 0000002fH
$LN7@stb_strip_:
$LN2@stb_strip_:
; Line 5991
	mov	rax, QWORD PTR t$[rsp]
; Line 5992
	add	rsp, 56					; 00000038H
	ret	0
?stb_strip_final_slash@@YAPEADPEAD@Z ENDP		; stb_strip_final_slash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
p$ = 40
str$ = 64
pool$ = 72
?stb_strdup@@YAPEADPEADPEAX@Z PROC			; stb_strdup
; File W:\cpp\void\vendor\stb\stb.h
; Line 5971
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5972
	mov	rcx, QWORD PTR str$[rsp]
	call	strlen
	mov	QWORD PTR len$[rsp], rax
; Line 5973
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	rdx, rax
	mov	rcx, QWORD PTR pool$[rsp]
	call	?stb_malloc_string@@YAPEADPEAX_K@Z	; stb_malloc_string
	mov	QWORD PTR p$[rsp], rax
; Line 5974
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	r8, QWORD PTR str$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 5975
	mov	rax, QWORD PTR p$[rsp]
; Line 5976
	add	rsp, 56					; 00000038H
	ret	0
?stb_strdup@@YAPEADPEADPEAX@Z ENDP			; stb_strdup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
s$ = 40
tv80 = 48
f$ = 80
p$ = 88
?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z PROC		; stb_fget_string
; File W:\cpp\void\vendor\stb\stb.h
; Line 5960
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5962
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fget_varlenu
	mov	DWORD PTR len$[rsp], eax
; Line 5963
	cmp	DWORD PTR len$[rsp], 4096		; 00001000H
	jle	SHORT $LN2@stb_fget_s
	xor	eax, eax
	jmp	SHORT $LN1@stb_fget_s
$LN2@stb_fget_s:
; Line 5964
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN4@stb_fget_s
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	cdqe
	mov	rdx, rax
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb_malloc_string@@YAPEADPEAX_K@Z	; stb_malloc_string
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN5@stb_fget_s
$LN4@stb_fget_s:
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tv80[rsp], rax
$LN5@stb_fget_s:
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR s$[rsp], rax
; Line 5965
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_fread
; Line 5966
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 5967
	mov	rax, QWORD PTR s$[rsp]
$LN1@stb_fget_s:
; Line 5968
	add	rsp, 72					; 00000048H
	ret	0
?stb_fget_string@@YAPEADPEAU_iobuf@@PEAX@Z ENDP		; stb_fget_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
f$ = 64
s$ = 72
?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z PROC		; stb_fput_string
; File W:\cpp\void\vendor\stb\stb.h
; Line 5952
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5953
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	QWORD PTR len$[rsp], rax
; Line 5954
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fput_varlenu
; Line 5955
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, QWORD PTR len$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 5956
	add	rsp, 56					; 00000038H
	ret	0
?stb_fput_string@@YAXPEAU_iobuf@@PEAD@Z ENDP		; stb_fput_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
p$ = 40
f$ = 48
temp_name$ = 80
src_name$ = 88
mode$ = 96
?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z PROC	; stb__open_temp_file
; File W:\cpp\void\vendor\stb\stb.h
; Line 5576
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5583
	mov	rcx, QWORD PTR src_name$[rsp]
	call	strlen
	dec	rax
	mov	QWORD PTR p$[rsp], rax
$LN2@stb__open_:
; Line 5585
	cmp	QWORD PTR p$[rsp], 0
	jbe	SHORT $LN3@stb__open_
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR src_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN3@stb__open_
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR src_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@stb__open_
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR src_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN3@stb__open_
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR src_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 126				; 0000007eH
	je	SHORT $LN3@stb__open_
; Line 5586
	mov	rax, QWORD PTR p$[rsp]
	dec	rax
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN2@stb__open_
$LN3@stb__open_:
; Line 5587
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
; Line 5589
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR src_name$[rsp]
	mov	rcx, QWORD PTR temp_name$[rsp]
	call	memcpy
; Line 5594
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN6@stb__open_
$LN4@stb__open_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN6@stb__open_:
	cmp	DWORD PTR j$[rsp], 32			; 00000020H
	jge	SHORT $LN5@stb__open_
; Line 5595
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR temp_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	lea	r8, OFFSET FLAT:$SG86997
	mov	edx, 65536				; 00010000H
	mov	rcx, rax
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 5596
	mov	rcx, QWORD PTR temp_name$[rsp]
	call	strlen
	inc	rax
	mov	rdx, rax
	mov	rcx, QWORD PTR temp_name$[rsp]
	call	QWORD PTR __imp__mktemp_s
	test	eax, eax
	je	SHORT $LN7@stb__open_
; Line 5597
	xor	eax, eax
	jmp	SHORT $LN1@stb__open_
$LN7@stb__open_:
; Line 5599
	mov	rdx, QWORD PTR mode$[rsp]
	mov	rcx, QWORD PTR temp_name$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 5600
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN8@stb__open_
; Line 5601
	jmp	SHORT $LN5@stb__open_
$LN8@stb__open_:
; Line 5602
	jmp	SHORT $LN4@stb__open_
$LN5@stb__open_:
; Line 5620
	mov	rax, QWORD PTR f$[rsp]
$LN1@stb__open_:
; Line 5621
	add	rsp, 72					; 00000048H
	ret	0
?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z ENDP	; stb__open_temp_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n1$ = 32
n2$ = 36
res$ = 40
tv79 = 44
tv87 = 48
buf2$ = 64
buf1$ = 1088
__$ArrayPad$ = 2112
f$ = 2144
g$ = 2152
?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z PROC			; stb_fcmp_core
; File W:\cpp\void\vendor\stb\stb.h
; Line 5505
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2136				; 00000858H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5507
	mov	DWORD PTR res$[rsp], 0
$LN2@stb_fcmp_c:
; Line 5509
	xor	eax, eax
	cmp	eax, 1
	je	$LN3@stb_fcmp_c
; Line 5510
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1024				; 00000400H
	mov	edx, 1
	lea	rcx, QWORD PTR buf1$[rsp]
	call	QWORD PTR __imp_fread
	mov	DWORD PTR n1$[rsp], eax
; Line 5511
	mov	r9, QWORD PTR g$[rsp]
	mov	r8d, 1024				; 00000400H
	mov	edx, 1
	lea	rcx, QWORD PTR buf2$[rsp]
	call	QWORD PTR __imp_fread
	mov	DWORD PTR n2$[rsp], eax
; Line 5512
	mov	eax, DWORD PTR n2$[rsp]
	cmp	DWORD PTR n1$[rsp], eax
	jge	SHORT $LN8@stb_fcmp_c
	mov	eax, DWORD PTR n1$[rsp]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN9@stb_fcmp_c
$LN8@stb_fcmp_c:
	mov	eax, DWORD PTR n2$[rsp]
	mov	DWORD PTR tv79[rsp], eax
$LN9@stb_fcmp_c:
	movsxd	rax, DWORD PTR tv79[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR buf2$[rsp]
	lea	rcx, QWORD PTR buf1$[rsp]
	call	memcmp
	mov	DWORD PTR res$[rsp], eax
; Line 5513
	cmp	DWORD PTR res$[rsp], 0
	je	SHORT $LN4@stb_fcmp_c
; Line 5514
	jmp	SHORT $LN3@stb_fcmp_c
$LN4@stb_fcmp_c:
; Line 5515
	mov	eax, DWORD PTR n2$[rsp]
	cmp	DWORD PTR n1$[rsp], eax
	je	SHORT $LN5@stb_fcmp_c
; Line 5516
	mov	eax, DWORD PTR n2$[rsp]
	cmp	DWORD PTR n1$[rsp], eax
	jge	SHORT $LN10@stb_fcmp_c
	mov	DWORD PTR tv87[rsp], -1
	jmp	SHORT $LN11@stb_fcmp_c
$LN10@stb_fcmp_c:
	mov	DWORD PTR tv87[rsp], 1
$LN11@stb_fcmp_c:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR res$[rsp], eax
; Line 5517
	jmp	SHORT $LN3@stb_fcmp_c
$LN5@stb_fcmp_c:
; Line 5519
	cmp	DWORD PTR n1$[rsp], 0
	jne	SHORT $LN6@stb_fcmp_c
; Line 5520
	jmp	SHORT $LN3@stb_fcmp_c
$LN6@stb_fcmp_c:
; Line 5521
	jmp	$LN2@stb_fcmp_c
$LN3@stb_fcmp_c:
; Line 5523
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5524
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5525
	mov	eax, DWORD PTR res$[rsp]
; Line 5526
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2136				; 00000858H
	ret	0
?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z ENDP			; stb_fcmp_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 8
n$ = 16
stb_size_ranged PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5944
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 5945
	cmp	DWORD PTR n$[rsp], 16777216		; 01000000H
	jbe	SHORT $LN2@stb_size_r
	mov	eax, 4
	jmp	SHORT $LN1@stb_size_r
$LN2@stb_size_r:
; Line 5946
	cmp	DWORD PTR n$[rsp], 65536		; 00010000H
	jbe	SHORT $LN3@stb_size_r
	mov	eax, 3
	jmp	SHORT $LN1@stb_size_r
$LN3@stb_size_r:
; Line 5947
	cmp	DWORD PTR n$[rsp], 256			; 00000100H
	jbe	SHORT $LN4@stb_size_r
	mov	eax, 2
	jmp	SHORT $LN1@stb_size_r
$LN4@stb_size_r:
; Line 5948
	mov	eax, 1
$LN1@stb_size_r:
; Line 5949
	ret	0
stb_size_ranged ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 8
stb_size_varlenu PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5804
	mov	DWORD PTR [rsp+8], ecx
; Line 5805
	cmp	DWORD PTR v$[rsp], 128			; 00000080H
	jae	SHORT $LN2@stb_size_v
	mov	eax, 1
	jmp	SHORT $LN1@stb_size_v
$LN2@stb_size_v:
; Line 5806
	cmp	DWORD PTR v$[rsp], 16384		; 00004000H
	jae	SHORT $LN3@stb_size_v
	mov	eax, 2
	jmp	SHORT $LN1@stb_size_v
$LN3@stb_size_v:
; Line 5807
	cmp	DWORD PTR v$[rsp], 2097152		; 00200000H
	jae	SHORT $LN4@stb_size_v
	mov	eax, 3
	jmp	SHORT $LN1@stb_size_v
$LN4@stb_size_v:
; Line 5808
	cmp	DWORD PTR v$[rsp], 268435456		; 10000000H
	jae	SHORT $LN5@stb_size_v
	mov	eax, 4
	jmp	SHORT $LN1@stb_size_v
$LN5@stb_size_v:
; Line 5809
	mov	eax, 5
$LN1@stb_size_v:
; Line 5810
	ret	0
stb_size_varlenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
v$ = 64
stb_size_varlen PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5802
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	cmp	DWORD PTR v$[rsp], 0
	jge	SHORT $LN3@stb_size_v
	mov	eax, DWORD PTR v$[rsp]
	not	eax
	lea	eax, DWORD PTR [rax+rax+1]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN4@stb_size_v
$LN3@stb_size_v:
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, 1
	mov	DWORD PTR tv70[rsp], eax
$LN4@stb_size_v:
	mov	ecx, DWORD PTR tv70[rsp]
	call	stb_size_varlenu
	add	rsp, 56					; 00000038H
	ret	0
stb_size_varlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
f$ = 64
b$ = 72
n$ = 80
stb_fget_ranged PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5934
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5935
	mov	DWORD PTR v$[rsp], 0
; Line 5936
	cmp	DWORD PTR n$[rsp], 16777216		; 01000000H
	jbe	SHORT $LN2@stb_fget_r
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 24
	mov	ecx, DWORD PTR v$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
$LN2@stb_fget_r:
; Line 5937
	cmp	DWORD PTR n$[rsp], 65536		; 00010000H
	jbe	SHORT $LN3@stb_fget_r
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 16
	mov	ecx, DWORD PTR v$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
$LN3@stb_fget_r:
; Line 5938
	cmp	DWORD PTR n$[rsp], 256			; 00000100H
	jbe	SHORT $LN4@stb_fget_r
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR v$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
$LN4@stb_fget_r:
; Line 5939
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	mov	ecx, DWORD PTR v$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
; Line 5940
	mov	eax, DWORD PTR v$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 5941
	add	rsp, 56					; 00000038H
	ret	0
stb_fget_ranged ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
v$ = 56
b$ = 64
n$ = 72
stb_fput_ranged PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5923
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5924
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR v$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
; Line 5925
	cmp	DWORD PTR n$[rsp], -2147483648		; 80000000H
	ja	SHORT $LN2@stb_fput_r
; Line 5926
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR v$[rsp], eax
	jb	SHORT $LN7@stb_fput_r
	mov	r8d, 5926				; 00001726H
	lea	rdx, OFFSET FLAT:$SG87214
	lea	rcx, OFFSET FLAT:$SG87215
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb_fput_r:
$LN2@stb_fput_r:
; Line 5927
	cmp	DWORD PTR n$[rsp], 16777216		; 01000000H
	jbe	SHORT $LN3@stb_fput_r
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 24
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
$LN3@stb_fput_r:
; Line 5928
	cmp	DWORD PTR n$[rsp], 65536		; 00010000H
	jbe	SHORT $LN4@stb_fput_r
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 16
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
$LN4@stb_fput_r:
; Line 5929
	cmp	DWORD PTR n$[rsp], 256			; 00000100H
	jbe	SHORT $LN5@stb_fput_r
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 8
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
$LN5@stb_fput_r:
; Line 5930
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, DWORD PTR v$[rsp]
	call	QWORD PTR __imp_fputc
; Line 5931
	add	rsp, 40					; 00000028H
	ret	0
stb_fput_ranged ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 32
z$ = 36
f$ = 64
stb_fget_varlenu PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5832
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5835
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	mov	BYTE PTR d$[rsp], al
; Line 5837
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 128				; 00000080H
	jl	$LN2@stb_fget_v
; Line 5838
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 192				; 000000c0H
	jl	$LN4@stb_fget_v
; Line 5839
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 224				; 000000e0H
	jl	SHORT $LN6@stb_fget_v
; Line 5840
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 240				; 000000f0H
	jne	SHORT $LN8@stb_fget_v
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 24
	mov	DWORD PTR z$[rsp], eax
	jmp	SHORT $LN9@stb_fget_v
$LN8@stb_fget_v:
; Line 5841
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 224				; 000000e0H
	shl	eax, 24
	mov	DWORD PTR z$[rsp], eax
$LN9@stb_fget_v:
; Line 5842
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 16
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 5843
	jmp	SHORT $LN7@stb_fget_v
$LN6@stb_fget_v:
; Line 5845
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 192				; 000000c0H
	shl	eax, 16
	mov	DWORD PTR z$[rsp], eax
$LN7@stb_fget_v:
; Line 5846
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 5847
	jmp	SHORT $LN5@stb_fget_v
$LN4@stb_fget_v:
; Line 5848
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 128				; 00000080H
	shl	eax, 8
	mov	DWORD PTR z$[rsp], eax
$LN5@stb_fget_v:
; Line 5849
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 5850
	jmp	SHORT $LN3@stb_fget_v
$LN2@stb_fget_v:
; Line 5851
	movzx	eax, BYTE PTR d$[rsp]
	mov	DWORD PTR z$[rsp], eax
$LN3@stb_fget_v:
; Line 5852
	mov	eax, DWORD PTR z$[rsp]
; Line 5853
	add	rsp, 56					; 00000038H
	ret	0
stb_fget_varlenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv71 = 36
f$ = 64
stb_fget_varlen PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5826
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5827
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fget_varlenu
	mov	DWORD PTR z$[rsp], eax
; Line 5828
	mov	eax, DWORD PTR z$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@stb_fget_v
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 1
	not	eax
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN4@stb_fget_v
$LN3@stb_fget_v:
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 1
	mov	DWORD PTR tv71[rsp], eax
$LN4@stb_fget_v:
	mov	eax, DWORD PTR tv71[rsp]
; Line 5829
	add	rsp, 56					; 00000038H
	ret	0
stb_fget_varlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
tv80 = 36
tv89 = 40
tv76 = 48
tv85 = 56
tv94 = 64
f$ = 96
z$ = 104
stb_fput_varlenu PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5815
$LN13:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5816
	cmp	DWORD PTR z$[rsp], 268435456		; 10000000H
	jb	SHORT $LN2@stb_fput_v
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, 240				; 000000f0H
	call	QWORD PTR __imp_fputc
$LN2@stb_fput_v:
; Line 5817
	cmp	DWORD PTR z$[rsp], 2097152		; 00200000H
	jb	SHORT $LN3@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv76[rsp], rax
	cmp	DWORD PTR z$[rsp], 268435456		; 10000000H
	jae	SHORT $LN7@stb_fput_v
	mov	DWORD PTR tv71[rsp], 224		; 000000e0H
	jmp	SHORT $LN8@stb_fput_v
$LN7@stb_fput_v:
	mov	DWORD PTR tv71[rsp], 0
$LN8@stb_fput_v:
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 24
	mov	ecx, DWORD PTR tv71[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv76[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
$LN3@stb_fput_v:
; Line 5818
	cmp	DWORD PTR z$[rsp], 16384		; 00004000H
	jb	SHORT $LN4@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv85[rsp], rax
	cmp	DWORD PTR z$[rsp], 2097152		; 00200000H
	jae	SHORT $LN9@stb_fput_v
	mov	DWORD PTR tv80[rsp], 192		; 000000c0H
	jmp	SHORT $LN10@stb_fput_v
$LN9@stb_fput_v:
	mov	DWORD PTR tv80[rsp], 0
$LN10@stb_fput_v:
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR tv80[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv85[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
$LN4@stb_fput_v:
; Line 5819
	cmp	DWORD PTR z$[rsp], 128			; 00000080H
	jb	SHORT $LN5@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv94[rsp], rax
	cmp	DWORD PTR z$[rsp], 16384		; 00004000H
	jae	SHORT $LN11@stb_fput_v
	mov	DWORD PTR tv89[rsp], 128		; 00000080H
	jmp	SHORT $LN12@stb_fput_v
$LN11@stb_fput_v:
	mov	DWORD PTR tv89[rsp], 0
$LN12@stb_fput_v:
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR tv89[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv94[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
$LN5@stb_fput_v:
; Line 5820
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, DWORD PTR z$[rsp]
	call	QWORD PTR __imp_fputc
; Line 5821
	add	rsp, 88					; 00000058H
	ret	0
stb_fput_varlenu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
f$ = 64
v$ = 72
stb_fput_varlen PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5812
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	DWORD PTR v$[rsp], 0
	jge	SHORT $LN3@stb_fput_v
	mov	eax, DWORD PTR v$[rsp]
	not	eax
	lea	eax, DWORD PTR [rax+rax+1]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@stb_fput_v
$LN3@stb_fput_v:
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, 1
	mov	DWORD PTR tv69[rsp], eax
$LN4@stb_fput_v:
	mov	edx, DWORD PTR tv69[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fput_varlenu
	add	rsp, 56					; 00000038H
	ret	0
stb_fput_varlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
x$ = 56
stb_fwrite32 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5263
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5264
	mov	r9, QWORD PTR f$[rsp]
	mov	r8d, 1
	mov	edx, 4
	lea	rcx, QWORD PTR x$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 5265
	add	rsp, 40					; 00000028H
	ret	0
stb_fwrite32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf_size$ = 32
buffer$ = 40
f$ = 48
g$ = 56
n$1 = 64
tv78 = 72
tv76 = 80
tv90 = 88
tv88 = 96
raw_buffer$ = 112
__$ArrayPad$ = 1136
src$ = 1168
dest$ = 1176
stb_copyfile PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5749
$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1160				; 00000488H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5752
	mov	DWORD PTR buf_size$[rsp], 65536		; 00010000H
; Line 5757
	mov	rdx, QWORD PTR dest$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	stb_feq
	test	eax, eax
	je	SHORT $LN4@stb_copyfi
	mov	eax, 1
	jmp	$LN1@stb_copyfi
$LN4@stb_copyfi:
; Line 5760
	lea	rcx, OFFSET FLAT:$SG87076
	call	stb__from_utf8_alt
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR src$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv76[rsp], rax
	mov	rdx, QWORD PTR tv78[rsp]
	mov	rcx, QWORD PTR tv76[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 5761
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN5@stb_copyfi
	xor	eax, eax
	jmp	$LN1@stb_copyfi
$LN5@stb_copyfi:
; Line 5764
	lea	rcx, OFFSET FLAT:$SG87078
	call	stb__from_utf8_alt
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, QWORD PTR dest$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv88[rsp], rax
	mov	rdx, QWORD PTR tv90[rsp]
	mov	rcx, QWORD PTR tv88[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR g$[rsp], rax
; Line 5765
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN6@stb_copyfi
; Line 5766
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5767
	xor	eax, eax
	jmp	$LN1@stb_copyfi
$LN6@stb_copyfi:
; Line 5770
	movsxd	rax, DWORD PTR buf_size$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR buffer$[rsp], rax
; Line 5771
	cmp	QWORD PTR buffer$[rsp], 0
	jne	SHORT $LN7@stb_copyfi
; Line 5772
	lea	rax, QWORD PTR raw_buffer$[rsp]
	mov	QWORD PTR buffer$[rsp], rax
; Line 5773
	mov	DWORD PTR buf_size$[rsp], 1024		; 00000400H
$LN7@stb_copyfi:
$LN2@stb_copyfi:
; Line 5776
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_feof
	test	eax, eax
	jne	SHORT $LN3@stb_copyfi
; Line 5777
	movsxd	rax, DWORD PTR buf_size$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fread
	mov	QWORD PTR n$1[rsp], rax
; Line 5778
	cmp	QWORD PTR n$1[rsp], 0
	je	SHORT $LN8@stb_copyfi
; Line 5779
	mov	r9, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR n$1[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fwrite
$LN8@stb_copyfi:
; Line 5780
	jmp	SHORT $LN2@stb_copyfi
$LN3@stb_copyfi:
; Line 5782
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5783
	lea	rax, QWORD PTR raw_buffer$[rsp]
	cmp	QWORD PTR buffer$[rsp], rax
	je	SHORT $LN9@stb_copyfi
; Line 5784
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_free
$LN9@stb_copyfi:
; Line 5786
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5787
	mov	eax, 1
$LN1@stb_copyfi:
; Line 5788
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1160				; 00000488H
	ret	0
stb_copyfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 32
ok$ = 40
dummy$1 = 48
tv136 = 56
tv134 = 64
tv155 = 72
tv153 = 80
tv169 = 88
tv167 = 96
tv183 = 104
tv181 = 112
tv197 = 120
tv195 = 128
preserved_old_file$2 = 144
__$ArrayPad$ = 4240
f$ = 4272
keep$ = 4280
stb_fclose PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5657
$LN20:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4264				; 000010a8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5660
	mov	DWORD PTR ok$[rsp], 0
; Line 5661
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stb_fclose
	xor	eax, eax
	jmp	$LN1@stb_fclose
$LN2@stb_fclose:
; Line 5663
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ferror
	test	eax, eax
	je	SHORT $LN3@stb_fclose
; Line 5664
	mov	DWORD PTR keep$[rsp], 0
$LN3@stb_fclose:
; Line 5666
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5668
	cmp	QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA, 0
	je	SHORT $LN4@stb_fclose
	lea	r8, QWORD PTR d$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA
	call	stb_ptrmap_remove
	test	eax, eax
	je	SHORT $LN4@stb_fclose
; Line 5669
	mov	rax, QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA
	cmp	DWORD PTR [rax+12], 0
	jne	SHORT $LN6@stb_fclose
; Line 5670
	mov	rcx, QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA
	call	stb_ptrmap_destroy
; Line 5671
	mov	QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA, 0
$LN6@stb_fclose:
; Line 5673
	jmp	SHORT $LN5@stb_fclose
$LN4@stb_fclose:
; Line 5674
	mov	eax, 1
	jmp	$LN1@stb_fclose
$LN5@stb_fclose:
; Line 5676
	cmp	DWORD PTR keep$[rsp], 2
	jne	SHORT $LN7@stb_fclose
; Line 5678
	mov	rax, QWORD PTR d$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_feq
	test	eax, eax
	je	SHORT $LN8@stb_fclose
; Line 5679
	mov	DWORD PTR keep$[rsp], 0
; Line 5680
	mov	DWORD PTR ok$[rsp], 1
$LN8@stb_fclose:
$LN7@stb_fclose:
; Line 5684
	cmp	DWORD PTR keep$[rsp], 0
	jne	SHORT $LN9@stb_fclose
; Line 5685
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_remove
; Line 5686
	jmp	$LN10@stb_fclose
$LN9@stb_fclose:
; Line 5687
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_fexists
	test	eax, eax
	jne	SHORT $LN11@stb_fclose
; Line 5689
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb__from_utf8_alt
	mov	QWORD PTR tv136[rsp], rax
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stb__from_utf8
	mov	QWORD PTR tv134[rsp], rax
	mov	rdx, QWORD PTR tv136[rsp]
	mov	rcx, QWORD PTR tv134[rsp]
	call	QWORD PTR __imp__wrename
; Line 5690
	jmp	$LN12@stb_fclose
$LN11@stb_fclose:
; Line 5695
	lea	r8, OFFSET FLAT:$SG87051
	mov	rax, QWORD PTR d$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, QWORD PTR preserved_old_file$2[rsp]
	call	?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z ; stb__open_temp_file
	mov	QWORD PTR dummy$1[rsp], rax
; Line 5696
	cmp	QWORD PTR dummy$1[rsp], 0
	je	$LN13@stb_fclose
; Line 5698
	mov	rcx, QWORD PTR dummy$1[rsp]
	call	QWORD PTR __imp_fclose
; Line 5701
	lea	rcx, QWORD PTR preserved_old_file$2[rsp]
	call	QWORD PTR __imp_remove
; Line 5704
	lea	rcx, QWORD PTR preserved_old_file$2[rsp]
	call	stb__from_utf8_alt
	mov	QWORD PTR tv155[rsp], rax
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb__from_utf8
	mov	QWORD PTR tv153[rsp], rax
	mov	rdx, QWORD PTR tv155[rsp]
	mov	rcx, QWORD PTR tv153[rsp]
	call	QWORD PTR __imp__wrename
	test	eax, eax
	je	SHORT $LN15@stb_fclose
; Line 5709
	jmp	$LN16@stb_fclose
$LN15@stb_fclose:
; Line 5714
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb__from_utf8_alt
	mov	QWORD PTR tv169[rsp], rax
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stb__from_utf8
	mov	QWORD PTR tv167[rsp], rax
	mov	rdx, QWORD PTR tv169[rsp]
	mov	rcx, QWORD PTR tv167[rsp]
	call	QWORD PTR __imp__wrename
	test	eax, eax
	jne	SHORT $LN17@stb_fclose
; Line 5718
	mov	DWORD PTR ok$[rsp], 1
; Line 5721
	lea	rcx, QWORD PTR preserved_old_file$2[rsp]
	call	QWORD PTR __imp_remove
; Line 5722
	jmp	SHORT $LN18@stb_fclose
$LN17@stb_fclose:
; Line 5728
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb__from_utf8_alt
	mov	QWORD PTR tv183[rsp], rax
	lea	rcx, QWORD PTR preserved_old_file$2[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv181[rsp], rax
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rcx, QWORD PTR tv181[rsp]
	call	QWORD PTR __imp__wrename
$LN18@stb_fclose:
$LN16@stb_fclose:
; Line 5732
	jmp	SHORT $LN14@stb_fclose
$LN13@stb_fclose:
; Line 5735
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_remove
; Line 5736
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb__from_utf8_alt
	mov	QWORD PTR tv197[rsp], rax
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stb__from_utf8
	mov	QWORD PTR tv195[rsp], rax
	mov	rdx, QWORD PTR tv197[rsp]
	mov	rcx, QWORD PTR tv195[rsp]
	call	QWORD PTR __imp__wrename
$LN14@stb_fclose:
$LN12@stb_fclose:
$LN10@stb_fclose:
; Line 5741
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
; Line 5742
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
; Line 5743
	mov	rcx, QWORD PTR d$[rsp]
	call	QWORD PTR __imp_free
; Line 5745
	mov	eax, DWORD PTR ok$[rsp]
$LN1@stb_fclose:
; Line 5746
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4264				; 000010a8H
	ret	0
stb_fclose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$1 = 32
f$ = 40
$T2 = 48
tv82 = 56
tv80 = 64
name_full$ = 80
temp_full$ = 4176
__$ArrayPad$ = 8288
filename$ = 8320
mode$ = 8328
stb_fopen PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5625
$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 8312				; 00002078H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5631
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR mode$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 119				; 00000077H
	je	SHORT $LN2@stb_fopen
	mov	edx, 43					; 0000002bH
	mov	rcx, QWORD PTR mode$[rsp]
	call	strchr
	test	rax, rax
	jne	SHORT $LN2@stb_fopen
; Line 5632
	mov	rcx, QWORD PTR mode$[rsp]
	call	stb__from_utf8_alt
	mov	QWORD PTR tv82[rsp], rax
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv80[rsp], rax
	mov	rdx, QWORD PTR tv82[rsp]
	mov	rcx, QWORD PTR tv80[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	jmp	$LN1@stb_fopen
$LN2@stb_fopen:
; Line 5637
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 4096		; 00001000H
	jae	SHORT $LN8@stb_fopen
	jmp	SHORT $LN9@stb_fopen
$LN8@stb_fopen:
	call	__report_rangecheckfailure
$LN9@stb_fopen:
	mov	rax, QWORD PTR $T2[rsp]
	mov	BYTE PTR name_full$[rsp+rax], 0
; Line 5638
	mov	r8, QWORD PTR filename$[rsp]
	mov	edx, 4096				; 00001000H
	lea	rcx, QWORD PTR name_full$[rsp]
	call	stb_fullpath
	test	eax, eax
	jne	SHORT $LN3@stb_fopen
; Line 5639
	xor	eax, eax
	jmp	$LN1@stb_fopen
$LN3@stb_fopen:
; Line 5641
	mov	r8, QWORD PTR mode$[rsp]
	lea	rdx, QWORD PTR name_full$[rsp]
	lea	rcx, QWORD PTR temp_full$[rsp]
	call	?stb__open_temp_file@@YAPEAU_iobuf@@PEAD0PEBD@Z ; stb__open_temp_file
	mov	QWORD PTR f$[rsp], rax
; Line 5642
	cmp	QWORD PTR f$[rsp], 0
	je	$LN4@stb_fopen
; Line 5643
	mov	ecx, 24
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR d$1[rsp], rax
; Line 5644
	cmp	QWORD PTR d$1[rsp], 0
	jne	SHORT $LN5@stb_fopen
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@stb_fopen
	mov	r8d, 5644				; 0000160cH
	lea	rdx, OFFSET FLAT:$SG87018
	lea	rcx, OFFSET FLAT:$SG87019
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stb_fopen:
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
	xor	eax, eax
	jmp	SHORT $LN1@stb_fopen
$LN5@stb_fopen:
; Line 5645
	cmp	QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA, 0
	jne	SHORT $LN6@stb_fopen
	call	stb_ptrmap_create
	mov	QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA, rax
$LN6@stb_fopen:
; Line 5646
	lea	rcx, QWORD PTR temp_full$[rsp]
	call	QWORD PTR __imp__strdup
	mov	rcx, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rcx], rax
; Line 5647
	lea	rcx, QWORD PTR name_full$[rsp]
	call	QWORD PTR __imp__strdup
	mov	rcx, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 5648
	mov	rax, QWORD PTR d$1[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 5649
	mov	r8, QWORD PTR d$1[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	mov	rcx, QWORD PTR ?stb__files@@3PEAUstb__st_stb_ptrmap@@EA
	call	stb_ptrmap_add
; Line 5650
	mov	rax, QWORD PTR f$[rsp]
	jmp	SHORT $LN1@stb_fopen
$LN4@stb_fopen:
; Line 5653
	xor	eax, eax
$LN1@stb_fopen:
$LN7@stb_fopen:
; Line 5654
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 8312				; 00002078H
	ret	0
stb_fopen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
abs$ = 64
abs_size$ = 72
rel$ = 80
stb_fullpath PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5480
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5482
	movsxd	rax, DWORD PTR abs_size$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR rel$[rsp]
	mov	rcx, QWORD PTR abs$[rsp]
	call	QWORD PTR __imp__fullpath
	test	rax, rax
	je	SHORT $LN3@stb_fullpa
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@stb_fullpa
$LN3@stb_fullpa:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stb_fullpa:
	mov	eax, DWORD PTR tv73[rsp]
; Line 5502
	add	rsp, 56					; 00000038H
	ret	0
stb_fullpath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 32
__$ArrayPad$ = 80
filename$ = 112
stb_ftimestamp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5283
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5288
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb__from_utf8
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp__wstat64i32
	test	eax, eax
	jne	SHORT $LN2@stb_ftimes
; Line 5290
	mov	rax, QWORD PTR buf$[rsp+32]
	jmp	SHORT $LN1@stb_ftimes
; Line 5291
	jmp	SHORT $LN3@stb_ftimes
$LN2@stb_ftimes:
; Line 5292
	xor	eax, eax
$LN3@stb_ftimes:
$LN1@stb_ftimes:
; Line 5294
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
stb_ftimestamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$ = 32
f$ = 40
tv93 = 48
tv137 = 52
tv74 = 56
tv72 = 64
tv85 = 72
tv83 = 80
tv94 = 88
s1$ = 112
s2$ = 120
stb_feq	PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5546
$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5547
	lea	rcx, OFFSET FLAT:$SG86961
	call	stb__from_utf8_alt
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR s1$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv72[rsp], rax
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 5548
	lea	rcx, OFFSET FLAT:$SG86962
	call	stb__from_utf8_alt
	mov	QWORD PTR tv85[rsp], rax
	mov	rcx, QWORD PTR s2$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv83[rsp], rax
	mov	rdx, QWORD PTR tv85[rsp]
	mov	rcx, QWORD PTR tv83[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR g$[rsp], rax
; Line 5550
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stb_feq
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stb_feq
$LN3@stb_feq:
; Line 5551
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN4@stb_feq
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN4@stb_feq:
; Line 5552
	cmp	QWORD PTR g$[rsp], 0
	je	SHORT $LN5@stb_feq
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_fclose
$LN5@stb_feq:
; Line 5553
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR f$[rsp], rax
	jne	SHORT $LN8@stb_feq
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN9@stb_feq
$LN8@stb_feq:
	mov	DWORD PTR tv93[rsp], 0
$LN9@stb_feq:
	mov	eax, DWORD PTR tv93[rsp]
	jmp	SHORT $LN1@stb_feq
$LN2@stb_feq:
; Line 5557
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_filelen
	mov	QWORD PTR tv94[rsp], rax
	mov	rcx, QWORD PTR g$[rsp]
	call	stb_filelen
	mov	rcx, QWORD PTR tv94[rsp]
	cmp	rcx, rax
	je	SHORT $LN6@stb_feq
; Line 5558
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5559
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5560
	xor	eax, eax
	jmp	SHORT $LN1@stb_feq
$LN6@stb_feq:
; Line 5563
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z	; stb_fcmp_core
	test	eax, eax
	jne	SHORT $LN10@stb_feq
	mov	DWORD PTR tv137[rsp], 1
	jmp	SHORT $LN11@stb_feq
$LN10@stb_feq:
	mov	DWORD PTR tv137[rsp], 0
$LN11@stb_feq:
	mov	eax, DWORD PTR tv137[rsp]
$LN1@stb_feq:
; Line 5564
	add	rsp, 104				; 00000068H
	ret	0
stb_feq	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv93 = 32
f$ = 40
g$ = 48
tv74 = 56
tv72 = 64
tv85 = 72
tv83 = 80
s1$ = 112
s2$ = 120
stb_fcmp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5529
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5530
	lea	rcx, OFFSET FLAT:$SG86945
	call	stb__from_utf8_alt
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR s1$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv72[rsp], rax
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 5531
	lea	rcx, OFFSET FLAT:$SG86946
	call	stb__from_utf8_alt
	mov	QWORD PTR tv85[rsp], rax
	mov	rcx, QWORD PTR s2$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv83[rsp], rax
	mov	rdx, QWORD PTR tv85[rsp]
	mov	rcx, QWORD PTR tv83[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR g$[rsp], rax
; Line 5533
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stb_fcmp
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stb_fcmp
$LN3@stb_fcmp:
; Line 5534
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN4@stb_fcmp
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN4@stb_fcmp:
; Line 5535
	cmp	QWORD PTR g$[rsp], 0
	je	SHORT $LN5@stb_fcmp
; Line 5536
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5537
	mov	eax, 1
	jmp	SHORT $LN1@stb_fcmp
$LN5@stb_fcmp:
; Line 5539
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN7@stb_fcmp
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN8@stb_fcmp
$LN7@stb_fcmp:
	mov	DWORD PTR tv93[rsp], 0
$LN8@stb_fcmp:
	mov	eax, DWORD PTR tv93[rsp]
	jmp	SHORT $LN1@stb_fcmp
$LN2@stb_fcmp:
; Line 5542
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	?stb_fcmp_core@@YAHPEAU_iobuf@@0@Z	; stb_fcmp_core
$LN1@stb_fcmp:
; Line 5543
	add	rsp, 104				; 00000068H
	ret	0
stb_fcmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
buf$ = 40
__$ArrayPad$ = 88
filename$ = 112
stb_fexists PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5274
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5276
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb__from_utf8
	lea	rdx, QWORD PTR buf$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp__wstat64i32
	test	eax, eax
	jne	SHORT $LN3@stb_fexist
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb_fexist
$LN3@stb_fexist:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb_fexist:
	mov	eax, DWORD PTR tv70[rsp]
; Line 5280
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
stb_fexists ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$1 = 32
a$2 = 40
p$3 = 48
n$4 = 56
$T5 = 64
$T6 = 72
quick_buffer$ = 80
__$ArrayPad$ = 880
f$ = 912
stb_fgets_malloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5443
$LN17:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 904				; 00000388H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5446
	mov	eax, 1
	imul	rax, rax, 798				; 0000031eH
	mov	QWORD PTR $T5[rsp], rax
	cmp	QWORD PTR $T5[rsp], 800			; 00000320H
	jae	SHORT $LN13@stb_fgets_
	jmp	SHORT $LN14@stb_fgets_
$LN13@stb_fgets_:
	call	__report_rangecheckfailure
$LN14@stb_fgets_:
	mov	rax, QWORD PTR $T5[rsp]
	mov	BYTE PTR quick_buffer$[rsp+rax], 0
; Line 5447
	mov	r8, QWORD PTR f$[rsp]
	mov	edx, 800				; 00000320H
	lea	rcx, QWORD PTR quick_buffer$[rsp]
	call	QWORD PTR __imp_fgets
	test	rax, rax
	jne	SHORT $LN4@stb_fgets_
; Line 5448
	xor	eax, eax
	jmp	$LN1@stb_fgets_
$LN4@stb_fgets_:
; Line 5450
	mov	eax, 1
	imul	rax, rax, 798				; 0000031eH
	movsx	eax, BYTE PTR quick_buffer$[rsp+rax]
	test	eax, eax
	jne	SHORT $LN5@stb_fgets_
; Line 5451
	lea	rcx, QWORD PTR quick_buffer$[rsp]
	call	strlen
	mov	QWORD PTR n$4[rsp], rax
; Line 5452
	cmp	QWORD PTR n$4[rsp], 0
	jbe	SHORT $LN7@stb_fgets_
	mov	rax, QWORD PTR n$4[rsp]
	movsx	eax, BYTE PTR quick_buffer$[rsp+rax-1]
	cmp	eax, 10
	jne	SHORT $LN7@stb_fgets_
; Line 5453
	mov	rax, QWORD PTR n$4[rsp]
	dec	rax
	mov	QWORD PTR $T6[rsp], rax
	cmp	QWORD PTR $T6[rsp], 800			; 00000320H
	jae	SHORT $LN15@stb_fgets_
	jmp	SHORT $LN16@stb_fgets_
$LN15@stb_fgets_:
	call	__report_rangecheckfailure
$LN16@stb_fgets_:
	mov	rax, QWORD PTR $T6[rsp]
	mov	BYTE PTR quick_buffer$[rsp+rax], 0
$LN7@stb_fgets_:
; Line 5454
	lea	rcx, QWORD PTR quick_buffer$[rsp]
	call	QWORD PTR __imp__strdup
	jmp	$LN1@stb_fgets_
; Line 5455
	jmp	$LN6@stb_fgets_
$LN5@stb_fgets_:
; Line 5457
	lea	rcx, QWORD PTR quick_buffer$[rsp]
	call	QWORD PTR __imp__strdup
	mov	QWORD PTR a$2[rsp], rax
; Line 5458
	mov	QWORD PTR len$1[rsp], 799		; 0000031fH
$LN2@stb_fgets_:
; Line 5460
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_feof
	test	eax, eax
	jne	$LN3@stb_fgets_
; Line 5461
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR a$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax-1]
	cmp	eax, 10
	jne	SHORT $LN8@stb_fgets_
	jmp	$LN3@stb_fgets_
$LN8@stb_fgets_:
; Line 5462
	mov	rax, QWORD PTR len$1[rsp]
	add	rax, rax
	mov	rdx, rax
	mov	rcx, QWORD PTR a$2[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR a$2[rsp], rax
; Line 5463
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR a$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$3[rsp], rax
; Line 5464
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax-2], 0
; Line 5465
	mov	r8, QWORD PTR f$[rsp]
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	call	QWORD PTR __imp_fgets
	test	rax, rax
	jne	SHORT $LN9@stb_fgets_
; Line 5466
	jmp	SHORT $LN3@stb_fgets_
$LN9@stb_fgets_:
; Line 5467
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax-2]
	test	eax, eax
	jne	SHORT $LN10@stb_fgets_
; Line 5468
	mov	rcx, QWORD PTR p$3[rsp]
	call	strlen
	mov	rcx, QWORD PTR len$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR len$1[rsp], rax
; Line 5469
	jmp	SHORT $LN3@stb_fgets_
$LN10@stb_fgets_:
; Line 5471
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR len$1[rsp]
	lea	rax, QWORD PTR [rax+rcx-1]
	mov	QWORD PTR len$1[rsp], rax
; Line 5472
	jmp	$LN2@stb_fgets_
$LN3@stb_fgets_:
; Line 5473
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR a$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax-1]
	cmp	eax, 10
	jne	SHORT $LN11@stb_fgets_
; Line 5474
	mov	rax, QWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR a$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax-1], 0
$LN11@stb_fgets_:
; Line 5475
	mov	rax, QWORD PTR a$2[rsp]
$LN6@stb_fgets_:
$LN1@stb_fgets_:
$LN12@stb_fgets_:
; Line 5477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 904				; 00000388H
	ret	0
stb_fgets_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
p$ = 40
buffer$ = 64
buflen$ = 72
f$ = 80
stb_fgets PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5429
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5431
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 5432
	mov	r8, QWORD PTR f$[rsp]
	mov	edx, DWORD PTR buflen$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fgets
	mov	QWORD PTR p$[rsp], rax
; Line 5433
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stb_fgets
; Line 5434
	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	dec	rax
	mov	DWORD PTR n$1[rsp], eax
; Line 5435
	cmp	DWORD PTR n$1[rsp], 0
	jl	SHORT $LN3@stb_fgets
; Line 5436
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN4@stb_fgets
; Line 5437
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN4@stb_fgets:
$LN3@stb_fgets:
$LN2@stb_fgets:
; Line 5439
	mov	rax, QWORD PTR p$[rsp]
; Line 5440
	add	rsp, 56					; 00000038H
	ret	0
stb_fgets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$ = 32
i$ = 36
n$ = 40
s$ = 48
p$1 = 56
name$ = 80
len$ = 88
comment$ = 96
stb_stringfile_trimmed PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5414
$LN9:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5415
	mov	DWORD PTR o$[rsp], 0
; Line 5416
	lea	rdx, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	stb_stringfile
	mov	QWORD PTR s$[rsp], rax
; Line 5417
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN5@stb_string
	xor	eax, eax
	jmp	$LN1@stb_string
$LN5@stb_string:
; Line 5418
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_string
$LN2@stb_string:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_string:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_string
; Line 5419
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	stb_skipwhite
	mov	QWORD PTR p$1[rsp], rax
; Line 5420
	mov	rax, QWORD PTR p$1[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@stb_string
	mov	rax, QWORD PTR p$1[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR comment$[rsp]
	cmp	eax, ecx
	je	SHORT $LN6@stb_string
; Line 5421
	movsxd	rax, DWORD PTR o$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR o$[rsp]
	inc	eax
	mov	DWORD PTR o$[rsp], eax
$LN6@stb_string:
; Line 5422
	jmp	SHORT $LN2@stb_string
$LN3@stb_string:
; Line 5423
	movsxd	rax, DWORD PTR o$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
; Line 5424
	cmp	QWORD PTR len$[rsp], 0
	je	SHORT $LN7@stb_string
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR o$[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stb_string:
; Line 5425
	mov	rax, QWORD PTR s$[rsp]
$LN1@stb_string:
; Line 5426
	add	rsp, 72					; 00000048H
	ret	0
stb_stringfile_trimmed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
count$ = 40
list$ = 48
i$ = 56
len$ = 64
buffer$ = 72
tv143 = 80
f$ = 88
crlf$1 = 96
tv74 = 104
tv72 = 112
filename$ = 144
plen$ = 152
stb_stringfile PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5368
$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 5369
	lea	rcx, OFFSET FLAT:$SG86853
	call	stb__from_utf8_alt
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv72[rsp], rax
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 5370
	mov	QWORD PTR list$[rsp], 0
; Line 5373
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN7@stb_string
	xor	eax, eax
	jmp	$LN1@stb_string
$LN7@stb_string:
; Line 5374
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_filelen
	mov	QWORD PTR len$[rsp], rax
; Line 5375
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR buffer$[rsp], rax
; Line 5376
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, QWORD PTR len$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fread
	mov	QWORD PTR len$[rsp], rax
; Line 5377
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 5378
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5381
	mov	QWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_string
$LN2@stb_string:
	mov	rax, QWORD PTR i$[rsp]
	inc	rax
	mov	QWORD PTR i$[rsp], rax
$LN4@stb_string:
	cmp	QWORD PTR i$[rsp], 2
	jae	$LN3@stb_string
; Line 5382
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR s$[rsp], rax
; Line 5383
	cmp	QWORD PTR i$[rsp], 1
	jne	SHORT $LN8@stb_string
; Line 5384
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
$LN8@stb_string:
; Line 5385
	mov	QWORD PTR count$[rsp], 1
$LN5@stb_string:
; Line 5386
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN6@stb_string
; Line 5387
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN10@stb_string
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	jne	$LN9@stb_string
$LN10@stb_string:
; Line 5389
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR s$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cmp	eax, 23
	jne	SHORT $LN19@stb_string
	mov	DWORD PTR tv143[rsp], 1
	jmp	SHORT $LN20@stb_string
$LN19@stb_string:
	mov	DWORD PTR tv143[rsp], 0
$LN20@stb_string:
	mov	eax, DWORD PTR tv143[rsp]
	mov	DWORD PTR crlf$1[rsp], eax
; Line 5390
	cmp	QWORD PTR i$[rsp], 1
	jne	SHORT $LN11@stb_string
	mov	rax, QWORD PTR s$[rsp]
	mov	BYTE PTR [rax], 0
$LN11@stb_string:
; Line 5391
	cmp	DWORD PTR crlf$1[rsp], 0
	je	SHORT $LN12@stb_string
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN12@stb_string:
; Line 5392
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN13@stb_string
; Line 5393
	cmp	QWORD PTR i$[rsp], 1
	jne	SHORT $LN14@stb_string
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR count$[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
$LN14@stb_string:
; Line 5394
	mov	rax, QWORD PTR count$[rsp]
	inc	rax
	mov	QWORD PTR count$[rsp], rax
$LN13@stb_string:
$LN9@stb_string:
; Line 5397
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 5398
	jmp	$LN5@stb_string
$LN6@stb_string:
; Line 5399
	cmp	QWORD PTR i$[rsp], 0
	jne	$LN15@stb_string
; Line 5400
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+9]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR list$[rsp], rax
; Line 5401
	cmp	QWORD PTR list$[rsp], 0
	jne	SHORT $LN16@stb_string
	xor	eax, eax
	jmp	SHORT $LN1@stb_string
$LN16@stb_string:
; Line 5402
	mov	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	mov	QWORD PTR [rax+rcx*8], 0
; Line 5404
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR count$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx*8+8]
	mov	r8, rax
	mov	rdx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 5405
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_free
; Line 5406
	mov	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR buffer$[rsp], rax
; Line 5407
	cmp	QWORD PTR plen$[rsp], 0
	je	SHORT $LN17@stb_string
	mov	rax, QWORD PTR plen$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rax], ecx
$LN17@stb_string:
$LN15@stb_string:
; Line 5409
	jmp	$LN2@stb_string
$LN3@stb_string:
; Line 5410
	mov	rax, QWORD PTR list$[rsp]
$LN1@stb_string:
; Line 5411
	add	rsp, 136				; 00000088H
	ret	0
stb_stringfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filename$ = 48
data$ = 56
stb_filewritestr PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5348
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5349
	mov	rcx, QWORD PTR data$[rsp]
	call	strlen
	mov	r8, rax
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb_filewrite
; Line 5350
	add	rsp, 40					; 00000028H
	ret	0
stb_filewritestr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv87 = 32
remaining$1 = 40
len2$2 = 48
f$ = 56
data_ptr$3 = 64
tv70 = 72
len3$4 = 80
filename$ = 112
data$ = 120
length$ = 128
stb_filewrite PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5327
$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5328
	lea	rdx, OFFSET FLAT:$SG86809
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 5329
	cmp	QWORD PTR f$[rsp], 0
	je	$LN4@stb_filewr
; Line 5330
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR data_ptr$3[rsp], rax
; Line 5331
	mov	rax, QWORD PTR length$[rsp]
	mov	QWORD PTR remaining$1[rsp], rax
$LN2@stb_filewr:
; Line 5332
	cmp	QWORD PTR remaining$1[rsp], 0
	jbe	$LN3@stb_filewr
; Line 5333
	cmp	QWORD PTR remaining$1[rsp], 65536	; 00010000H
	jbe	SHORT $LN7@stb_filewr
	mov	QWORD PTR tv70[rsp], 65536		; 00010000H
	jmp	SHORT $LN8@stb_filewr
$LN7@stb_filewr:
	mov	rax, QWORD PTR remaining$1[rsp]
	mov	QWORD PTR tv70[rsp], rax
$LN8@stb_filewr:
	mov	rax, QWORD PTR tv70[rsp]
	mov	QWORD PTR len2$2[rsp], rax
; Line 5334
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, QWORD PTR len2$2[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR data_ptr$3[rsp]
	call	QWORD PTR __imp_fwrite
	mov	QWORD PTR len3$4[rsp], rax
; Line 5335
	mov	rax, QWORD PTR len3$4[rsp]
	cmp	QWORD PTR len2$2[rsp], rax
	je	SHORT $LN5@stb_filewr
; Line 5336
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	r8, QWORD PTR filename$[rsp]
	lea	rdx, OFFSET FLAT:$SG86812
	mov	rcx, rax
	call	fprintf
; Line 5337
	jmp	SHORT $LN3@stb_filewr
$LN5@stb_filewr:
; Line 5339
	mov	rax, QWORD PTR len2$2[rsp]
	mov	rcx, QWORD PTR remaining$1[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR remaining$1[rsp], rax
; Line 5340
	mov	rax, QWORD PTR len2$2[rsp]
	mov	rcx, QWORD PTR data_ptr$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR data_ptr$3[rsp], rax
; Line 5341
	jmp	$LN2@stb_filewr
$LN3@stb_filewr:
; Line 5342
	mov	edx, 2
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_fclose
$LN4@stb_filewr:
; Line 5344
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN9@stb_filewr
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN10@stb_filewr
$LN9@stb_filewr:
	mov	DWORD PTR tv87[rsp], 0
$LN10@stb_filewr:
	mov	eax, DWORD PTR tv87[rsp]
; Line 5345
	add	rsp, 104				; 00000068H
	ret	0
stb_filewrite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
len$ = 36
f$ = 64
stb_filelen PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5297
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5299
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 5300
	mov	r8d, 2
	xor	edx, edx
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 5301
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR len$[rsp], eax
; Line 5302
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 5303
	movsxd	rax, DWORD PTR len$[rsp]
; Line 5304
	add	rsp, 56					; 00000038H
	ret	0
stb_filelen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
buffer$ = 40
maxlen$ = 48
len$ = 56
tv74 = 64
tv72 = 72
filename$ = 96
length$ = 104
stb_file_max PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5353
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5354
	lea	rcx, OFFSET FLAT:$SG86828
	call	stb__from_utf8_alt
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv72[rsp], rax
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 5357
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stb_file_m
	xor	eax, eax
	jmp	SHORT $LN1@stb_file_m
$LN2@stb_file_m:
; Line 5358
	mov	rax, QWORD PTR length$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR maxlen$[rsp], rax
; Line 5359
	mov	rax, QWORD PTR maxlen$[rsp]
	inc	rax
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR buffer$[rsp], rax
; Line 5360
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, QWORD PTR maxlen$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fread
	mov	QWORD PTR len$[rsp], rax
; Line 5361
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 5362
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5363
	mov	rax, QWORD PTR length$[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 5364
	mov	rax, QWORD PTR buffer$[rsp]
$LN1@stb_file_m:
; Line 5365
	add	rsp, 88					; 00000058H
	ret	0
stb_file_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
buffer$ = 40
f$ = 48
tv74 = 56
tv72 = 64
len2$ = 72
filename$ = 96
length$ = 104
stb_file PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5307
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5308
	lea	rcx, OFFSET FLAT:$SG86791
	call	stb__from_utf8_alt
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR filename$[rsp]
	call	stb__from_utf8
	mov	QWORD PTR tv72[rsp], rax
	mov	rdx, QWORD PTR tv74[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	call	?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z	; stb_p_wfopen
	mov	QWORD PTR f$[rsp], rax
; Line 5311
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stb_file
	xor	eax, eax
	jmp	$LN1@stb_file
$LN2@stb_file:
; Line 5312
	mov	rcx, QWORD PTR f$[rsp]
	call	stb_filelen
	mov	QWORD PTR len$[rsp], rax
; Line 5313
	mov	rax, QWORD PTR len$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR buffer$[rsp], rax
; Line 5314
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, QWORD PTR len$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_fread
	mov	QWORD PTR len2$[rsp], rax
; Line 5315
	mov	rax, QWORD PTR len$[rsp]
	cmp	QWORD PTR len2$[rsp], rax
	jne	SHORT $LN3@stb_file
; Line 5316
	cmp	QWORD PTR length$[rsp], 0
	je	SHORT $LN5@stb_file
	mov	rax, QWORD PTR length$[rsp]
	mov	rcx, QWORD PTR len$[rsp]
	mov	QWORD PTR [rax], rcx
$LN5@stb_file:
; Line 5317
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 0
; Line 5318
	jmp	SHORT $LN4@stb_file
$LN3@stb_file:
; Line 5319
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_free
; Line 5320
	mov	QWORD PTR buffer$[rsp], 0
$LN4@stb_file:
; Line 5322
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 5323
	mov	rax, QWORD PTR buffer$[rsp]
$LN1@stb_file:
; Line 5324
	add	rsp, 88					; 00000058H
	ret	0
stb_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 8
stb_size_varlen64 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5892
	mov	QWORD PTR [rsp+8], rcx
; Line 5893
	cmp	QWORD PTR v$[rsp], 128			; 00000080H
	jae	SHORT $LN2@stb_size_v
	mov	eax, 1
	jmp	$LN1@stb_size_v
$LN2@stb_size_v:
; Line 5894
	cmp	QWORD PTR v$[rsp], 16384		; 00004000H
	jae	SHORT $LN3@stb_size_v
	mov	eax, 2
	jmp	$LN1@stb_size_v
$LN3@stb_size_v:
; Line 5895
	cmp	QWORD PTR v$[rsp], 2097152		; 00200000H
	jae	SHORT $LN4@stb_size_v
	mov	eax, 3
	jmp	SHORT $LN1@stb_size_v
$LN4@stb_size_v:
; Line 5896
	cmp	QWORD PTR v$[rsp], 268435456		; 10000000H
	jae	SHORT $LN5@stb_size_v
	mov	eax, 4
	jmp	SHORT $LN1@stb_size_v
$LN5@stb_size_v:
; Line 5897
	mov	rax, 34359738368			; 0000000800000000H
	cmp	QWORD PTR v$[rsp], rax
	jae	SHORT $LN6@stb_size_v
	mov	eax, 5
	jmp	SHORT $LN1@stb_size_v
$LN6@stb_size_v:
; Line 5898
	mov	rax, 4398046511104			; 0000040000000000H
	cmp	QWORD PTR v$[rsp], rax
	jae	SHORT $LN7@stb_size_v
	mov	eax, 6
	jmp	SHORT $LN1@stb_size_v
$LN7@stb_size_v:
; Line 5899
	mov	rax, 562949953421312			; 0002000000000000H
	cmp	QWORD PTR v$[rsp], rax
	jae	SHORT $LN8@stb_size_v
	mov	eax, 7
	jmp	SHORT $LN1@stb_size_v
$LN8@stb_size_v:
; Line 5900
	mov	rax, 72057594037927936			; 0100000000000000H
	cmp	QWORD PTR v$[rsp], rax
	jae	SHORT $LN9@stb_size_v
	mov	eax, 8
	jmp	SHORT $LN1@stb_size_v
$LN9@stb_size_v:
; Line 5901
	mov	eax, 9
$LN1@stb_size_v:
; Line 5902
	ret	0
stb_size_varlen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 32
z$ = 40
tv198 = 48
f$ = 80
stb_fget_varlen64 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5856
$LN21:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5859
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	mov	BYTE PTR d$[rsp], al
; Line 5861
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 128				; 00000080H
	jl	$LN2@stb_fget_v
; Line 5862
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 192				; 000000c0H
	jl	$LN4@stb_fget_v
; Line 5863
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 224				; 000000e0H
	jl	$LN6@stb_fget_v
; Line 5864
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 240				; 000000f0H
	jl	$LN8@stb_fget_v
; Line 5865
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 248				; 000000f8H
	jl	$LN10@stb_fget_v
; Line 5866
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 252				; 000000fcH
	jl	$LN12@stb_fget_v
; Line 5867
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 254				; 000000feH
	jl	SHORT $LN14@stb_fget_v
; Line 5868
	movzx	eax, BYTE PTR d$[rsp]
	cmp	eax, 255				; 000000ffH
	jl	SHORT $LN16@stb_fget_v
; Line 5869
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	rax, 56					; 00000038H
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN17@stb_fget_v
$LN16@stb_fget_v:
; Line 5871
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 254				; 000000feH
	cdqe
	shl	rax, 56					; 00000038H
	mov	QWORD PTR z$[rsp], rax
$LN17@stb_fget_v:
; Line 5872
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	rax, 48					; 00000030H
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN15@stb_fget_v
$LN14@stb_fget_v:
; Line 5873
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 252				; 000000fcH
	cdqe
	shl	rax, 48					; 00000030H
	mov	QWORD PTR z$[rsp], rax
$LN15@stb_fget_v:
; Line 5874
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	rax, 40					; 00000028H
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN13@stb_fget_v
$LN12@stb_fget_v:
; Line 5875
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 248				; 000000f8H
	cdqe
	shl	rax, 40					; 00000028H
	mov	QWORD PTR z$[rsp], rax
$LN13@stb_fget_v:
; Line 5876
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	rax, 32					; 00000020H
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN11@stb_fget_v
$LN10@stb_fget_v:
; Line 5877
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 240				; 000000f0H
	cdqe
	shl	rax, 32					; 00000020H
	mov	QWORD PTR z$[rsp], rax
$LN11@stb_fget_v:
; Line 5878
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 24
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN9@stb_fget_v
$LN8@stb_fget_v:
; Line 5879
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 224				; 000000e0H
	shl	eax, 24
	mov	eax, eax
	mov	QWORD PTR z$[rsp], rax
$LN9@stb_fget_v:
; Line 5880
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 16
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN7@stb_fget_v
$LN6@stb_fget_v:
; Line 5881
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 192				; 000000c0H
	shl	eax, 16
	mov	eax, eax
	mov	QWORD PTR z$[rsp], rax
$LN7@stb_fget_v:
; Line 5882
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	shl	eax, 8
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
	jmp	SHORT $LN5@stb_fget_v
$LN4@stb_fget_v:
; Line 5883
	movzx	eax, BYTE PTR d$[rsp]
	sub	eax, 128				; 00000080H
	shl	eax, 8
	mov	eax, eax
	mov	QWORD PTR z$[rsp], rax
$LN5@stb_fget_v:
; Line 5884
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fgetc
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
; Line 5885
	jmp	SHORT $LN3@stb_fget_v
$LN2@stb_fget_v:
; Line 5886
	movzx	eax, BYTE PTR d$[rsp]
	mov	QWORD PTR z$[rsp], rax
$LN3@stb_fget_v:
; Line 5888
	mov	rax, QWORD PTR z$[rsp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN19@stb_fget_v
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 1
	not	rax
	mov	QWORD PTR tv198[rsp], rax
	jmp	SHORT $LN20@stb_fget_v
$LN19@stb_fget_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 1
	mov	QWORD PTR tv198[rsp], rax
$LN20@stb_fget_v:
	mov	rax, QWORD PTR tv198[rsp]
; Line 5889
	add	rsp, 72					; 00000048H
	ret	0
stb_fget_varlen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
first$ = 32
z$ = 40
tv77 = 48
tv88 = 52
tv131 = 56
tv142 = 60
tv153 = 64
tv164 = 68
tv175 = 72
tv69 = 80
tv84 = 88
tv95 = 96
tv138 = 104
tv149 = 112
tv160 = 120
tv171 = 128
tv182 = 136
f$ = 160
v$ = 168
stb_fput_varlen64 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 5905
$LN27:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 5906
	cmp	QWORD PTR v$[rsp], 0
	jae	SHORT $LN11@stb_fput_v
	mov	rax, QWORD PTR v$[rsp]
	not	rax
	lea	rax, QWORD PTR [rax+rax+1]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN12@stb_fput_v
$LN11@stb_fput_v:
	mov	rax, QWORD PTR v$[rsp]
	shl	rax, 1
	mov	QWORD PTR tv69[rsp], rax
$LN12@stb_fput_v:
	mov	rax, QWORD PTR tv69[rsp]
	mov	QWORD PTR z$[rsp], rax
; Line 5907
	mov	DWORD PTR first$[rsp], 1
; Line 5908
	mov	rax, 72057594037927936			; 0100000000000000H
	cmp	QWORD PTR z$[rsp], rax
	jb	SHORT $LN2@stb_fput_v
; Line 5909
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, 255				; 000000ffH
	call	QWORD PTR __imp_fputc
; Line 5910
	mov	DWORD PTR first$[rsp], 0
$LN2@stb_fput_v:
; Line 5912
	mov	rax, 562949953421312			; 0002000000000000H
	cmp	QWORD PTR z$[rsp], rax
	jb	SHORT $LN3@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv84[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN13@stb_fput_v
	mov	DWORD PTR tv77[rsp], 254		; 000000feH
	jmp	SHORT $LN14@stb_fput_v
$LN13@stb_fput_v:
	mov	DWORD PTR tv77[rsp], 0
$LN14@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 56					; 00000038H
	movsx	eax, al
	mov	ecx, DWORD PTR tv77[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv84[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN3@stb_fput_v:
; Line 5913
	mov	rax, 4398046511104			; 0000040000000000H
	cmp	QWORD PTR z$[rsp], rax
	jb	SHORT $LN4@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv95[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN15@stb_fput_v
	mov	DWORD PTR tv88[rsp], 252		; 000000fcH
	jmp	SHORT $LN16@stb_fput_v
$LN15@stb_fput_v:
	mov	DWORD PTR tv88[rsp], 0
$LN16@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 48					; 00000030H
	movsx	eax, al
	mov	ecx, DWORD PTR tv88[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv95[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN4@stb_fput_v:
; Line 5914
	mov	rax, 34359738368			; 0000000800000000H
	cmp	QWORD PTR z$[rsp], rax
	jb	SHORT $LN5@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv138[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN17@stb_fput_v
	mov	DWORD PTR tv131[rsp], 248		; 000000f8H
	jmp	SHORT $LN18@stb_fput_v
$LN17@stb_fput_v:
	mov	DWORD PTR tv131[rsp], 0
$LN18@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 40					; 00000028H
	movsx	eax, al
	mov	ecx, DWORD PTR tv131[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv138[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN5@stb_fput_v:
; Line 5915
	cmp	QWORD PTR z$[rsp], 268435456		; 10000000H
	jb	SHORT $LN6@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv149[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN19@stb_fput_v
	mov	DWORD PTR tv142[rsp], 240		; 000000f0H
	jmp	SHORT $LN20@stb_fput_v
$LN19@stb_fput_v:
	mov	DWORD PTR tv142[rsp], 0
$LN20@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 32					; 00000020H
	movsx	eax, al
	mov	ecx, DWORD PTR tv142[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv149[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN6@stb_fput_v:
; Line 5916
	cmp	QWORD PTR z$[rsp], 2097152		; 00200000H
	jb	SHORT $LN7@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv160[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN21@stb_fput_v
	mov	DWORD PTR tv153[rsp], 224		; 000000e0H
	jmp	SHORT $LN22@stb_fput_v
$LN21@stb_fput_v:
	mov	DWORD PTR tv153[rsp], 0
$LN22@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 24
	movsx	eax, al
	mov	ecx, DWORD PTR tv153[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv160[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN7@stb_fput_v:
; Line 5917
	cmp	QWORD PTR z$[rsp], 16384		; 00004000H
	jb	SHORT $LN8@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv171[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN23@stb_fput_v
	mov	DWORD PTR tv164[rsp], 192		; 000000c0H
	jmp	SHORT $LN24@stb_fput_v
$LN23@stb_fput_v:
	mov	DWORD PTR tv164[rsp], 0
$LN24@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 16
	movsx	eax, al
	mov	ecx, DWORD PTR tv164[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv171[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN8@stb_fput_v:
; Line 5918
	cmp	QWORD PTR z$[rsp], 128			; 00000080H
	jb	SHORT $LN9@stb_fput_v
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR tv182[rsp], rax
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN25@stb_fput_v
	mov	DWORD PTR tv175[rsp], 128		; 00000080H
	jmp	SHORT $LN26@stb_fput_v
$LN25@stb_fput_v:
	mov	DWORD PTR tv175[rsp], 0
$LN26@stb_fput_v:
	mov	rax, QWORD PTR z$[rsp]
	shr	rax, 8
	movsx	eax, al
	mov	ecx, DWORD PTR tv175[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rdx, QWORD PTR tv182[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
	mov	DWORD PTR first$[rsp], 0
$LN9@stb_fput_v:
; Line 5919
	movsx	eax, BYTE PTR z$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_fputc
; Line 5920
	add	rsp, 152				; 00000098H
	ret	0
stb_fput_varlen64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 40
tv196 = 48
tv181 = 56
tv179 = 64
tv201 = 72
tv199 = 80
tv203 = 88
a$ = 112
?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z PROC ; stb_sdictinternal_copy
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4385
	mov	ecx, 64					; 00000040H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	jne	SHORT $LN5@stb_sdicti
	xor	eax, eax
	jmp	$LN1@stb_sdicti
$LN5@stb_sdicti:
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR h$[rsp]
	call	stb_sdict_init
	test	eax, eax
	jne	SHORT $LN6@stb_sdicti
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stb_sdicti
$LN6@stb_sdicti:
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+44], 1
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax+56], rcx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+45]
	mov	BYTE PTR [rax+45], cl
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+46]
	mov	BYTE PTR [rax+46], cl
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	imul	rax, rax, 16
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memcpy
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_sdicti
$LN2@stb_sdicti:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_sdicti:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_sdicti
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN7@stb_sdicti
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	je	$LN7@stb_sdicti
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR tv201[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strlen
	inc	rax
	mov	QWORD PTR tv199[rsp], rax
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN9@stb_sdicti
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strlen
	inc	rax
	mov	QWORD PTR tv181[rsp], rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv179[rsp], rax
	mov	rdx, QWORD PTR tv181[rsp]
	mov	rcx, QWORD PTR tv179[rsp]
	call	?stb_malloc_string@@YAPEADPEAX_K@Z	; stb_malloc_string
	mov	QWORD PTR tv196[rsp], rax
	jmp	SHORT $LN10@stb_sdicti
$LN9@stb_sdicti:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tv196[rsp], rax
$LN10@stb_sdicti:
	mov	r8, QWORD PTR tv201[rsp]
	mov	rdx, QWORD PTR tv199[rsp]
	mov	rcx, QWORD PTR tv196[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
	mov	QWORD PTR tv203[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR tv203[rsp]
	mov	QWORD PTR [rcx+rax], rdx
$LN7@stb_sdicti:
	jmp	$LN2@stb_sdicti
$LN3@stb_sdicti:
	mov	rax, QWORD PTR h$[rsp]
$LN1@stb_sdicti:
	add	rsp, 104				; 00000068H
	ret	0
?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z ENDP ; stb_sdictinternal_copy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
b$ = 36
h$ = 40
tv72 = 44
tv79 = 48
tv84 = 52
tv91 = 56
tv152 = 60
tv190 = 64
s$1 = 68
tv228 = 72
tv233 = 80
tv218 = 88
tv216 = 96
tv231 = 104
a$ = 128
k$ = 136
v$ = 144
allow_new$ = 152
allow_old$ = 160
copy$ = 168
?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z PROC ; stb__stb_sdict_addset
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 4385
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_sdict_hash@@YAIPEAD@Z		; stb__stb_sdict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	DWORD PTR b$[rsp], -1
	cmp	QWORD PTR k$[rsp], 0
	jne	$LN5@stb__stb_s
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	test	eax, eax
	je	SHORT $LN27@stb__stb_s
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN28@stb__stb_s
$LN27@stb__stb_s:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN28@stb__stb_s:
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN6@stb__stb_s
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+45], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN29@stb__stb_s
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN30@stb__stb_s
$LN29@stb__stb_s:
	mov	DWORD PTR tv79[rsp], 0
$LN30@stb__stb_s:
	mov	eax, DWORD PTR tv79[rsp]
	jmp	$LN1@stb__stb_s
	jmp	SHORT $LN7@stb__stb_s
$LN6@stb__stb_s:
	xor	eax, eax
	jmp	$LN1@stb__stb_s
$LN7@stb__stb_s:
$LN5@stb__stb_s:
	cmp	QWORD PTR k$[rsp], 1
	jne	$LN8@stb__stb_s
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	test	eax, eax
	je	SHORT $LN31@stb__stb_s
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN32@stb__stb_s
$LN31@stb__stb_s:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv84[rsp], eax
$LN32@stb__stb_s:
	cmp	DWORD PTR tv84[rsp], 0
	je	SHORT $LN9@stb__stb_s
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax+56], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+46], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN33@stb__stb_s
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN34@stb__stb_s
$LN33@stb__stb_s:
	mov	DWORD PTR tv91[rsp], 0
$LN34@stb__stb_s:
	mov	eax, DWORD PTR tv91[rsp]
	jmp	$LN1@stb__stb_s
	jmp	SHORT $LN10@stb__stb_s
$LN9@stb__stb_s:
	xor	eax, eax
	jmp	$LN1@stb__stb_s
$LN10@stb__stb_s:
$LN8@stb__stb_s:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN11@stb__stb_s
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	jne	SHORT $LN12@stb__stb_s
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN13@stb__stb_s
$LN12@stb__stb_s:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN14@stb__stb_s
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN15@stb__stb_s
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN15@stb__stb_s:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN35@stb__stb_s
	mov	DWORD PTR tv152[rsp], 1
	jmp	SHORT $LN36@stb__stb_s
$LN35@stb__stb_s:
	mov	DWORD PTR tv152[rsp], 0
$LN36@stb__stb_s:
	mov	eax, DWORD PTR tv152[rsp]
	jmp	$LN1@stb__stb_s
$LN14@stb__stb_s:
$LN13@stb__stb_s:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$1[rsp], eax
$LN2@stb__stb_s:
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN16@stb__stb_s
	jmp	$LN3@stb__stb_s
$LN16@stb__stb_s:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	jne	SHORT $LN17@stb__stb_s
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN19@stb__stb_s
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
$LN19@stb__stb_s:
	jmp	SHORT $LN18@stb__stb_s
$LN17@stb__stb_s:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN20@stb__stb_s
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN21@stb__stb_s
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN21@stb__stb_s:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN37@stb__stb_s
	mov	DWORD PTR tv190[rsp], 1
	jmp	SHORT $LN38@stb__stb_s
$LN37@stb__stb_s:
	mov	DWORD PTR tv190[rsp], 0
$LN38@stb__stb_s:
	mov	eax, DWORD PTR tv190[rsp]
	jmp	$LN1@stb__stb_s
$LN20@stb__stb_s:
$LN18@stb__stb_s:
	jmp	$LN2@stb__stb_s
$LN3@stb__stb_s:
$LN11@stb__stb_s:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN22@stb__stb_s
	xor	eax, eax
	jmp	$LN1@stb__stb_s
$LN22@stb__stb_s:
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN23@stb__stb_s
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN24@stb__stb_s
$LN23@stb__stb_s:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+28]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+28], eax
$LN24@stb__stb_s:
	cmp	DWORD PTR copy$[rsp], 0
	je	$LN41@stb__stb_s
	mov	rcx, QWORD PTR k$[rsp]
	call	strlen
	inc	rax
	mov	QWORD PTR tv231[rsp], rax
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN39@stb__stb_s
	mov	rcx, QWORD PTR k$[rsp]
	call	strlen
	inc	rax
	mov	QWORD PTR tv218[rsp], rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv216[rsp], rax
	mov	rdx, QWORD PTR tv218[rsp]
	mov	rcx, QWORD PTR tv216[rsp]
	call	?stb_malloc_string@@YAPEADPEAX_K@Z	; stb_malloc_string
	mov	QWORD PTR tv228[rsp], rax
	jmp	SHORT $LN40@stb__stb_s
$LN39@stb__stb_s:
	mov	rcx, QWORD PTR k$[rsp]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tv228[rsp], rax
$LN40@stb__stb_s:
	mov	r8, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR tv231[rsp]
	mov	rcx, QWORD PTR tv228[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
	mov	QWORD PTR tv233[rsp], rax
	jmp	SHORT $LN42@stb__stb_s
$LN41@stb__stb_s:
	mov	rax, QWORD PTR k$[rsp]
	mov	QWORD PTR tv233[rsp], rax
$LN42@stb__stb_s:
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR tv233[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	cmp	DWORD PTR [rax+20], ecx
	jle	SHORT $LN25@stb__stb_s
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z ; stb__stb_sdict_rehash
$LN25@stb__stb_s:
	mov	eax, 1
$LN1@stb__stb_s:
	add	rsp, 120				; 00000078H
	ret	0
?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z ENDP ; stb__stb_sdict_addset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
kout$ = 80
?stb_sdict_getkey@@YAHPEAUstb__st_stb_sdict@@PEADPEAPEAD@Z PROC ; stb_sdict_getkey
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN14:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_sdict_hash@@YAIPEAD@Z		; stb__stb_sdict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	QWORD PTR k$[rsp], 0
	je	SHORT $LN6@stb_sdict_
	cmp	QWORD PTR k$[rsp], 1
	jne	SHORT $LN5@stb_sdict_
$LN6@stb_sdict_:
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN5@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN7@stb_sdict_
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN7@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	je	SHORT $LN8@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN9@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	$LN1@stb_sdict_
$LN9@stb_sdict_:
$LN8@stb_sdict_:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_sdict_:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN10@stb_sdict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_sdict_
$LN10@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	jne	SHORT $LN11@stb_sdict_
	jmp	SHORT $LN2@stb_sdict_
$LN11@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN12@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	SHORT $LN1@stb_sdict_
$LN12@stb_sdict_:
	jmp	$LN2@stb_sdict_
$LN1@stb_sdict_:
	add	rsp, 56					; 00000038H
	ret	0
?stb_sdict_getkey@@YAHPEAUstb__st_stb_sdict@@PEADPEAPEAD@Z ENDP ; stb_sdict_getkey
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv139 = 56
b$ = 64
a$ = 144
count$ = 152
?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z PROC ; stb__stb_sdict_rehash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4385
	mov	edx, DWORD PTR count$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	stb_sdict_init
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__stb_s
$LN2@stb__stb_s:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__stb_s:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__stb_s
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN5@stb__stb_s
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	je	SHORT $LN5@stb__stb_s
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	QWORD PTR tv139[rsp], r8
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv139[rsp]
	mov	rdx, QWORD PTR [rax+rdx]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z ; stb__stb_sdict_addset
$LN5@stb__stb_s:
	jmp	$LN2@stb__stb_s
$LN3@stb__stb_s:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+16]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+24]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+32]
	mov	DWORD PTR [rax+32], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+36]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+40]
	mov	DWORD PTR [rax+40], ecx
	add	rsp, 136				; 00000088H
	ret	0
?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z ENDP ; stb__stb_sdict_rehash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 48
?stb__stb_sdict_hash@@YAIPEAD@Z PROC			; stb__stb_sdict_hash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4385
	mov	rcx, QWORD PTR k$[rsp]
	call	stb_hash
	add	rsp, 40					; 00000028H
	ret	0
?stb__stb_sdict_hash@@YAIPEAD@Z ENDP			; stb__stb_sdict_hash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
n$ = 16
stb_sdict_internal_value PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4404
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 4405
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rcx+rax+8]
; Line 4406
	ret	0
stb_sdict_internal_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
n$ = 16
stb_sdict_internal_key PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4400
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 4401
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rcx+rax]
; Line 4402
	ret	0
stb_sdict_internal_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
stb_sdict_internal_limit PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4396
	mov	QWORD PTR [rsp+8], rcx
; Line 4397
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
; Line 4398
	ret	0
stb_sdict_internal_limit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
stb_sdict_count PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4391
	mov	QWORD PTR [rsp+8], rcx
; Line 4392
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
; Line 4393
	ret	0
stb_sdict_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
d$ = 64
str$ = 72
p$ = 80
stb_sdict_change PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4440
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4441
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	call	stb_sdict_get
	mov	QWORD PTR q$[rsp], rax
; Line 4442
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	call	stb_sdict_set
; Line 4443
	mov	rax, QWORD PTR q$[rsp]
; Line 4444
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_change ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 48
stb_sdict_delete PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4433
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4434
	mov	rax, QWORD PTR d$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@stb_sdict_
; Line 4435
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stb_free
$LN2@stb_sdict_:
; Line 4436
	mov	rcx, QWORD PTR d$[rsp]
	call	stb_sdict_destroy
; Line 4437
	add	rsp, 40					; 00000028H
	ret	0
stb_sdict_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 32
tv70 = 40
use_arena$ = 64
stb_sdict_new PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4409
$LN6:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4410
	call	stb_sdict_create
	mov	QWORD PTR d$[rsp], rax
; Line 4411
	cmp	QWORD PTR d$[rsp], 0
	jne	SHORT $LN2@stb_sdict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_sdict_
$LN2@stb_sdict_:
; Line 4412
	cmp	DWORD PTR use_arena$[rsp], 0
	je	SHORT $LN4@stb_sdict_
	mov	ecx, 1
	call	stb_malloc_global
	mov	QWORD PTR tv70[rsp], rax
	jmp	SHORT $LN5@stb_sdict_
$LN4@stb_sdict_:
	mov	QWORD PTR tv70[rsp], 0
$LN5@stb_sdict_:
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR tv70[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4413
	mov	rax, QWORD PTR d$[rsp]
$LN1@stb_sdict_:
; Line 4414
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
stb_sdict_remove PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN23:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_sdict_hash@@YAIPEAD@Z		; stb__stb_sdict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	QWORD PTR k$[rsp], 0
	jne	SHORT $LN5@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	test	eax, eax
	je	SHORT $LN6@stb_sdict_
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN7@stb_sdict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax], rcx
$LN7@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+45], 0
	mov	eax, 1
	jmp	$LN1@stb_sdict_
$LN6@stb_sdict_:
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN5@stb_sdict_:
	cmp	QWORD PTR k$[rsp], 1
	jne	SHORT $LN8@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	test	eax, eax
	je	SHORT $LN9@stb_sdict_
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN10@stb_sdict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax], rcx
$LN10@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+46], 0
	mov	eax, 1
	jmp	$LN1@stb_sdict_
$LN9@stb_sdict_:
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN8@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN11@stb_sdict_
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN11@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	je	SHORT $LN13@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	je	$LN12@stb_sdict_
$LN13@stb_sdict_:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_sdict_:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN14@stb_sdict_
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN14@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	jne	SHORT $LN15@stb_sdict_
	jmp	SHORT $LN2@stb_sdict_
$LN15@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN16@stb_sdict_
	jmp	SHORT $LN3@stb_sdict_
$LN16@stb_sdict_:
	jmp	SHORT $LN2@stb_sdict_
$LN3@stb_sdict_:
$LN12@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN17@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_free
$LN17@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+rax], 1
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+28]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+28], eax
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN18@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rdx], rax
$LN18@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	cmp	DWORD PTR [rax+20], ecx
	jge	SHORT $LN19@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	sar	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z ; stb__stb_sdict_rehash
	jmp	SHORT $LN20@stb_sdict_
$LN19@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	cmp	DWORD PTR [rax+28], ecx
	jle	SHORT $LN21@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_sdict_rehash@@YAXPEAUstb__st_stb_sdict@@H@Z ; stb__stb_sdict_rehash
$LN21@stb_sdict_:
$LN20@stb_sdict_:
	mov	eax, 1
$LN1@stb_sdict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_sdict_update PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z ; stb__stb_sdict_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_sdict_add PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z ; stb__stb_sdict_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_sdict_set PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_sdict_addset@@YAHPEAUstb__st_stb_sdict@@PEADPEAXHHH@Z ; stb__stb_sdict_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
a$ = 64
k$ = 72
stb_sdict_get PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	lea	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stb_sdict_get_flag
	test	eax, eax
	je	SHORT $LN2@stb_sdict_
	mov	rax, QWORD PTR v$[rsp]
	jmp	SHORT $LN1@stb_sdict_
	jmp	SHORT $LN3@stb_sdict_
$LN2@stb_sdict_:
	xor	eax, eax
$LN3@stb_sdict_:
$LN1@stb_sdict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
stb_sdict_get_flag PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_sdict_hash@@YAIPEAD@Z		; stb__stb_sdict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	QWORD PTR k$[rsp], 0
	jne	SHORT $LN5@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	test	eax, eax
	je	SHORT $LN6@stb_sdict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax], rcx
$LN6@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	jmp	$LN1@stb_sdict_
$LN5@stb_sdict_:
	cmp	QWORD PTR k$[rsp], 1
	jne	SHORT $LN7@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	test	eax, eax
	je	SHORT $LN8@stb_sdict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax], rcx
$LN8@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	jmp	$LN1@stb_sdict_
$LN7@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN9@stb_sdict_
	xor	eax, eax
	jmp	$LN1@stb_sdict_
$LN9@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	je	SHORT $LN10@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN11@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	$LN1@stb_sdict_
$LN11@stb_sdict_:
$LN10@stb_sdict_:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_sdict_:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN12@stb_sdict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_sdict_
$LN12@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	jne	SHORT $LN13@stb_sdict_
	jmp	SHORT $LN2@stb_sdict_
$LN13@stb_sdict_:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN14@stb_sdict_
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	SHORT $LN1@stb_sdict_
$LN14@stb_sdict_:
	jmp	$LN2@stb_sdict_
$LN1@stb_sdict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_get_flag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
a$ = 64
stb_sdict_destroy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_sdict_
$LN2@stb_sdict_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_sdict_
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN5@stb_sdict_
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rcx+rax], 1
	je	SHORT $LN5@stb_sdict_
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN6@stb_sdict_
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_free
$LN6@stb_sdict_:
$LN5@stb_sdict_:
	jmp	SHORT $LN2@stb_sdict_
$LN3@stb_sdict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	test	eax, eax
	je	SHORT $LN7@stb_sdict_
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_free
$LN7@stb_sdict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
new_arena$ = 32
n$ = 40
tv68 = 48
old_arena$ = 56
old$ = 80
stb_sdict_copy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4417
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4419
	mov	rax, QWORD PTR old$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR old_arena$[rsp], rax
; Line 4420
	cmp	QWORD PTR old_arena$[rsp], 0
	je	SHORT $LN6@stb_sdict_
	mov	ecx, 1
	call	stb_malloc_global
	mov	QWORD PTR tv68[rsp], rax
	jmp	SHORT $LN7@stb_sdict_
$LN6@stb_sdict_:
	mov	QWORD PTR tv68[rsp], 0
$LN7@stb_sdict_:
	mov	rax, QWORD PTR tv68[rsp]
	mov	QWORD PTR new_arena$[rsp], rax
; Line 4421
	mov	rax, QWORD PTR old$[rsp]
	mov	rcx, QWORD PTR new_arena$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4422
	mov	rcx, QWORD PTR old$[rsp]
	call	?stb_sdictinternal_copy@@YAPEAUstb__st_stb_sdict@@PEAU1@@Z ; stb_sdictinternal_copy
	mov	QWORD PTR n$[rsp], rax
; Line 4423
	mov	rax, QWORD PTR old$[rsp]
	mov	rcx, QWORD PTR old_arena$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4424
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN2@stb_sdict_
; Line 4425
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR new_arena$[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN3@stb_sdict_
$LN2@stb_sdict_:
; Line 4426
	cmp	QWORD PTR new_arena$[rsp], 0
	je	SHORT $LN4@stb_sdict_
; Line 4427
	mov	rcx, QWORD PTR new_arena$[rsp]
	call	stb_free
$LN4@stb_sdict_:
$LN3@stb_sdict_:
; Line 4428
	mov	rax, QWORD PTR n$[rsp]
; Line 4429
	add	rsp, 72					; 00000048H
	ret	0
stb_sdict_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 32
stb_sdict_create PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN6:
	sub	rsp, 56					; 00000038H
; Line 4385
	mov	ecx, 64					; 00000040H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	je	SHORT $LN2@stb_sdict_
	mov	edx, 16
	mov	rcx, QWORD PTR h$[rsp]
	call	stb_sdict_init
	test	eax, eax
	je	SHORT $LN3@stb_sdict_
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+44], 1
	jmp	SHORT $LN4@stb_sdict_
$LN3@stb_sdict_:
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	mov	QWORD PTR h$[rsp], 0
$LN4@stb_sdict_:
$LN2@stb_sdict_:
	mov	rax, QWORD PTR h$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 8
stb_sdict_memory_usage PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
	mov	QWORD PTR [rsp+8], rcx
; Line 4385
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	imul	rax, rax, 16
	add	rax, 64					; 00000040H
	ret	0
stb_sdict_memory_usage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 64
count$ = 72
stb_sdict_init PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4388
$LN10:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4385
	cmp	DWORD PTR count$[rsp], 4
	jge	SHORT $LN5@stb_sdict_
	mov	DWORD PTR count$[rsp], 4
$LN5@stb_sdict_:
	mov	rax, QWORD PTR h$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+16], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+28], 0
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3f59999a
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+36], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+46], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+45], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+44], 0
	cmp	DWORD PTR count$[rsp], 64		; 00000040H
	jg	SHORT $LN6@stb_sdict_
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+40], 0
	jmp	SHORT $LN7@stb_sdict_
$LN6@stb_sdict_:
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fd82d82e38e38e4
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+40], eax
$LN7@stb_sdict_:
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3e199998
	divss	xmm0, DWORD PTR __real@40000000
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+32], eax
	movsxd	rax, DWORD PTR count$[rsp]
	imul	rax, rax, 16
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR h$[rsp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR h$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN8@stb_sdict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_sdict_
$LN8@stb_sdict_:
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_sdict_
$LN2@stb_sdict_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_sdict_:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_sdict_
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+rax], 0
	jmp	SHORT $LN2@stb_sdict_
$LN3@stb_sdict_:
	mov	eax, 1
$LN1@stb_sdict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_sdict_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 40
a$ = 80
?stb__spmatrix_copy@@YAPEAUstb__st_stb_spmatrix@@PEAU1@@Z PROC ; stb__spmatrix_copy
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 4307
	mov	ecx, 72					; 00000048H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	jne	SHORT $LN5@stb__spmat
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN5@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR h$[rsp]
	call	?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z ; stb__spmatrix_init
	test	eax, eax
	jne	SHORT $LN6@stb__spmat
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN6@stb__spmat:
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+52], 1
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax+56], rcx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax+64], rcx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+53]
	mov	BYTE PTR [rax+53], cl
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+54]
	mov	BYTE PTR [rax+54], cl
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+32]
	imul	rax, rax, 24
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcpy
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__spmat
$LN2@stb__spmat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN8@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	SHORT $LN7@stb__spmat
$LN8@stb__spmat:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN9@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	SHORT $LN7@stb__spmat
$LN9@stb__spmat:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 24
	mov	r8, QWORD PTR h$[rsp]
	mov	r8, QWORD PTR [r8+16]
	lea	rdi, QWORD PTR [r8+rdx]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
$LN7@stb__spmat:
	jmp	$LN2@stb__spmat
$LN3@stb__spmat:
	mov	rax, QWORD PTR h$[rsp]
$LN1@stb__spmat:
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_copy@@YAPEAUstb__st_stb_spmatrix@@PEAU1@@Z ENDP ; stb__spmatrix_copy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
$T1 = 48
a$ = 96
k$ = 104
v$ = 112
?stb__spmatrix_remove@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z PROC ; stb__spmatrix_remove
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN21:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z ; stb__stb__spmatrix_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN5@stb__spmat
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN5@stb__spmat
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+53]
	test	eax, eax
	je	SHORT $LN6@stb__spmat
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN7@stb__spmat
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax], rcx
$LN7@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+53], 0
	mov	eax, 1
	jmp	$LN1@stb__spmat
$LN6@stb__spmat:
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN5@stb__spmat:
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN8@stb__spmat
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN8@stb__spmat
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+54]
	test	eax, eax
	je	SHORT $LN9@stb__spmat
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN10@stb__spmat
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax], rcx
$LN10@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+54], 0
	mov	eax, 1
	jmp	$LN1@stb__spmat
$LN9@stb__spmat:
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN8@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN11@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN11@stb__spmat
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN11@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN13@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	$LN12@stb__spmat
$LN13@stb__spmat:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb__spmat:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+24]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN14@stb__spmat
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN14@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN15@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN15@stb__spmat
	jmp	SHORT $LN3@stb__spmat
$LN15@stb__spmat:
	jmp	$LN2@stb__spmat
$LN3@stb__spmat:
$LN12@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rdx, OFFSET FLAT:?stb__ptrpair_del@@3Ustb__ptrpair@@A
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+28]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+28], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+36], eax
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN16@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR [rdx], rax
$LN16@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	cmp	DWORD PTR [rax+28], ecx
	jge	SHORT $LN17@stb__spmat
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+32]
	sar	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z ; stb__stb__spmatrix_rehash
	jmp	SHORT $LN18@stb__spmat
$LN17@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	cmp	DWORD PTR [rax+36], ecx
	jle	SHORT $LN19@stb__spmat
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z ; stb__stb__spmatrix_rehash
$LN19@stb__spmat:
$LN18@stb__spmat:
	mov	eax, 1
$LN1@stb__spmat:
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_remove@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z ENDP ; stb__spmatrix_remove
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
a$ = 96
k$ = 104
v$ = 112
?stb__spmatrix_update@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z PROC ; stb__spmatrix_update
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z ; stb__stb__spmatrix_addset
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_update@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ENDP ; stb__spmatrix_update
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
a$ = 96
k$ = 104
v$ = 112
?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z PROC ; stb__spmatrix_add
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z ; stb__stb__spmatrix_addset
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ENDP ; stb__spmatrix_add
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
a$ = 96
k$ = 104
v$ = 112
?stb__spmatrix_set@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z PROC ; stb__spmatrix_set
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z ; stb__stb__spmatrix_addset
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_set@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ENDP ; stb__spmatrix_set
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
b$ = 36
h$ = 40
tv75 = 44
tv82 = 48
tv90 = 52
tv129 = 56
tv181 = 60
tv242 = 64
s$1 = 68
tv254 = 72
$T2 = 80
$T3 = 96
a$ = 144
k$ = 152
v$ = 160
allow_new$ = 168
allow_old$ = 176
copy$ = 184
?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z PROC ; stb__stb__spmatrix_addset
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 4307
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T3[rsp]
	call	?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z ; stb__stb__spmatrix_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	DWORD PTR b$[rsp], -1
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	$LN5@stb__stb__
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	$LN5@stb__stb__
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+53]
	test	eax, eax
	je	SHORT $LN28@stb__stb__
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN29@stb__stb__
$LN28@stb__stb__:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN29@stb__stb__:
	cmp	DWORD PTR tv75[rsp], 0
	je	SHORT $LN6@stb__stb__
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+53]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax+56], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+53], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN30@stb__stb__
	mov	DWORD PTR tv82[rsp], 1
	jmp	SHORT $LN31@stb__stb__
$LN30@stb__stb__:
	mov	DWORD PTR tv82[rsp], 0
$LN31@stb__stb__:
	mov	eax, DWORD PTR tv82[rsp]
	jmp	$LN1@stb__stb__
	jmp	SHORT $LN7@stb__stb__
$LN6@stb__stb__:
	xor	eax, eax
	jmp	$LN1@stb__stb__
$LN7@stb__stb__:
$LN5@stb__stb__:
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	$LN8@stb__stb__
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	$LN8@stb__stb__
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+54]
	test	eax, eax
	je	SHORT $LN32@stb__stb__
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv90[rsp], eax
	jmp	SHORT $LN33@stb__stb__
$LN32@stb__stb__:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv90[rsp], eax
$LN33@stb__stb__:
	cmp	DWORD PTR tv90[rsp], 0
	je	SHORT $LN9@stb__stb__
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+54]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax+64], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+54], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN34@stb__stb__
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN35@stb__stb__
$LN34@stb__stb__:
	mov	DWORD PTR tv129[rsp], 0
$LN35@stb__stb__:
	mov	eax, DWORD PTR tv129[rsp]
	jmp	$LN1@stb__stb__
	jmp	SHORT $LN10@stb__stb__
$LN9@stb__stb__:
	xor	eax, eax
	jmp	$LN1@stb__stb__
$LN10@stb__stb__:
$LN8@stb__stb__:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN12@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	$LN11@stb__stb__
$LN12@stb__stb__:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN13@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN13@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	$LN14@stb__stb__
$LN13@stb__stb__:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN15@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN15@stb__stb__
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN16@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+16], rdx
$LN16@stb__stb__:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN36@stb__stb__
	mov	DWORD PTR tv181[rsp], 1
	jmp	SHORT $LN37@stb__stb__
$LN36@stb__stb__:
	mov	DWORD PTR tv181[rsp], 0
$LN37@stb__stb__:
	mov	eax, DWORD PTR tv181[rsp]
	jmp	$LN1@stb__stb__
$LN15@stb__stb__:
$LN14@stb__stb__:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$1[rsp], eax
$LN2@stb__stb__:
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+24]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN17@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN17@stb__stb__
	jmp	$LN3@stb__stb__
$LN17@stb__stb__:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN18@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN18@stb__stb__
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN20@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
$LN20@stb__stb__:
	jmp	$LN19@stb__stb__
$LN18@stb__stb__:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN21@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN21@stb__stb__
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN22@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+16], rdx
$LN22@stb__stb__:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN38@stb__stb__
	mov	DWORD PTR tv242[rsp], 1
	jmp	SHORT $LN39@stb__stb__
$LN38@stb__stb__:
	mov	DWORD PTR tv242[rsp], 0
$LN39@stb__stb__:
	mov	eax, DWORD PTR tv242[rsp]
	jmp	$LN1@stb__stb__
$LN21@stb__stb__:
$LN19@stb__stb__:
	jmp	$LN2@stb__stb__
$LN3@stb__stb__:
$LN11@stb__stb__:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN23@stb__stb__
	xor	eax, eax
	jmp	$LN1@stb__stb__
$LN23@stb__stb__:
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN24@stb__stb__
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN25@stb__stb__
$LN24@stb__stb__:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+36]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN25@stb__stb__:
	cmp	DWORD PTR copy$[rsp], 0
	je	SHORT $LN40@stb__stb__
	mov	rax, QWORD PTR k$[rsp]
	mov	QWORD PTR tv254[rsp], rax
	jmp	SHORT $LN41@stb__stb__
$LN40@stb__stb__:
	mov	rax, QWORD PTR k$[rsp]
	mov	QWORD PTR tv254[rsp], rax
$LN41@stb__stb__:
	mov	rax, QWORD PTR tv254[rsp]
	mov	QWORD PTR $T2[rsp], rax
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR $T2[rsp]
	mov	ecx, 16
	rep movsb
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+16], rdx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+28]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+28], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+44]
	cmp	DWORD PTR [rax+28], ecx
	jle	SHORT $LN26@stb__stb__
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+32]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z ; stb__stb__spmatrix_rehash
$LN26@stb__stb__:
	mov	eax, 1
$LN1@stb__stb__:
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z ENDP ; stb__stb__spmatrix_addset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
$T1 = 48
a$ = 96
k$ = 104
kout$ = 112
?stb__spmatrix_getkey@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAU2@@Z PROC ; stb__spmatrix_getkey
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z ; stb__stb__spmatrix_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN7@stb__spmat
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	je	SHORT $LN6@stb__spmat
$LN7@stb__spmat:
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN5@stb__spmat
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN5@stb__spmat
$LN6@stb__spmat:
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN5@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN8@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN8@stb__spmat
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN8@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN9@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN9@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdi, QWORD PTR kout$[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
	mov	eax, 1
	jmp	$LN1@stb__spmat
$LN9@stb__spmat:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb__spmat:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+24]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN10@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN10@stb__spmat
	xor	eax, eax
	jmp	SHORT $LN1@stb__spmat
$LN10@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN11@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN11@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdi, QWORD PTR kout$[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
	mov	eax, 1
	jmp	SHORT $LN1@stb__spmat
$LN11@stb__spmat:
	jmp	$LN2@stb__spmat
$LN1@stb__spmat:
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_getkey@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAU2@@Z ENDP ; stb__spmatrix_getkey
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
$T1 = 48
a$ = 96
k$ = 104
?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z PROC ; stb__spmatrix_get
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR v$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z ; stb__spmatrix_get_flag
	test	eax, eax
	je	SHORT $LN2@stb__spmat
	mov	rax, QWORD PTR v$[rsp]
	jmp	SHORT $LN1@stb__spmat
	jmp	SHORT $LN3@stb__spmat
$LN2@stb__spmat:
	xor	eax, eax
$LN3@stb__spmat:
$LN1@stb__spmat:
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z ENDP ; stb__spmatrix_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
$T1 = 48
a$ = 96
k$ = 104
v$ = 112
?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z PROC ; stb__spmatrix_get_flag
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN14:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 4307
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR k$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z ; stb__stb__spmatrix_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN5@stb__spmat
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN5@stb__spmat
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+53]
	test	eax, eax
	je	SHORT $LN6@stb__spmat
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rax], rcx
$LN6@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+53]
	jmp	$LN1@stb__spmat
$LN5@stb__spmat:
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN7@stb__spmat
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rax+8], rcx
	jne	SHORT $LN7@stb__spmat
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+54]
	test	eax, eax
	je	SHORT $LN8@stb__spmat
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax], rcx
$LN8@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+54]
	jmp	$LN1@stb__spmat
$LN7@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN9@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN9@stb__spmat
	xor	eax, eax
	jmp	$LN1@stb__spmat
$LN9@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN10@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN10@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	$LN1@stb__spmat
$LN10@stb__spmat:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb__spmat:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+24]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN11@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN11@stb__spmat
	xor	eax, eax
	jmp	SHORT $LN1@stb__spmat
$LN11@stb__spmat:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN12@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN12@stb__spmat
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	SHORT $LN1@stb__spmat
$LN12@stb__spmat:
	jmp	$LN2@stb__spmat
$LN1@stb__spmat:
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_get_flag@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAPEAX@Z ENDP ; stb__spmatrix_get_flag
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv156 = 56
$T1 = 64
b$ = 80
a$ = 192
count$ = 200
?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z PROC ; stb__stb__spmatrix_rehash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 4307
	mov	edx, DWORD PTR count$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z ; stb__spmatrix_init
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__stb__
$LN2@stb__stb__:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__stb__:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__stb__
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN6@stb__stb__
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	$LN5@stb__stb__
$LN6@stb__stb__:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN7@stb__stb__
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	SHORT $LN5@stb__stb__
$LN7@stb__stb__:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR tv156[rsp], rcx
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 24
	mov	r8, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [r8+16]
	lea	r9, QWORD PTR $T1[rsp]
	mov	rdi, r9
	lea	rsi, QWORD PTR [r8+rdx]
	mov	ecx, 16
	rep movsb
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	rcx, QWORD PTR tv156[rsp]
	mov	r8, QWORD PTR [rcx+rax+16]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb__stb__spmatrix_addset@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAXHHH@Z ; stb__stb__spmatrix_addset
$LN5@stb__stb__:
	jmp	$LN2@stb__stb__
$LN3@stb__stb__:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp+16]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+24]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+32]
	mov	DWORD PTR [rax+32], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+36]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+40]
	mov	DWORD PTR [rax+40], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+44]
	mov	DWORD PTR [rax+44], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+48]
	mov	DWORD PTR [rax+48], ecx
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?stb__stb__spmatrix_rehash@@YAXPEAUstb__st_stb_spmatrix@@H@Z ENDP ; stb__stb__spmatrix_rehash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
a$ = 64
?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z PROC ; stb__spmatrix_destroy
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN10:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__spmat
$LN2@stb__spmat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN6@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_empty@@3Ustb__ptrpair@@A+8
	cmp	QWORD PTR [rcx+rax+8], rdx
	je	SHORT $LN5@stb__spmat
$LN6@stb__spmat:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN7@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR ?stb__ptrpair_del@@3Ustb__ptrpair@@A+8
$LN7@stb__spmat:
$LN5@stb__spmat:
	jmp	$LN2@stb__spmat
$LN3@stb__spmat:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+52]
	test	eax, eax
	je	SHORT $LN8@stb__spmat
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_free
$LN8@stb__spmat:
	add	rsp, 56					; 00000038H
	ret	0
?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z ENDP ; stb__spmatrix_destroy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 32
?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ PROC ; stb__spmatrix_create
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN6:
	sub	rsp, 56					; 00000038H
; Line 4307
	mov	ecx, 72					; 00000048H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	je	SHORT $LN2@stb__spmat
	mov	edx, 16
	mov	rcx, QWORD PTR h$[rsp]
	call	?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z ; stb__spmatrix_init
	test	eax, eax
	je	SHORT $LN3@stb__spmat
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+52], 1
	jmp	SHORT $LN4@stb__spmat
$LN3@stb__spmat:
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	mov	QWORD PTR h$[rsp], 0
$LN4@stb__spmat:
$LN2@stb__spmat:
	mov	rax, QWORD PTR h$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ ENDP ; stb__spmatrix_create
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 8
?stb__spmatrix_memory_usage@@YAHPEAUstb__st_stb_spmatrix@@@Z PROC ; stb__spmatrix_memory_usage
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
	mov	QWORD PTR [rsp+8], rcx
; Line 4307
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+32]
	imul	rax, rax, 24
	add	rax, 72					; 00000048H
	ret	0
?stb__spmatrix_memory_usage@@YAHPEAUstb__st_stb_spmatrix@@@Z ENDP ; stb__spmatrix_memory_usage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 80
count$ = 88
?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z PROC ; stb__spmatrix_init
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
$LN10:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 4307
	cmp	DWORD PTR count$[rsp], 4
	jge	SHORT $LN5@stb__spmat
	mov	DWORD PTR count$[rsp], 4
$LN5@stb__spmat:
	mov	rax, QWORD PTR h$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rax+32], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+28], 0
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+24], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+36], 0
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3feb333333333333
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+44], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+54], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+53], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+52], 0
	cmp	DWORD PTR count$[rsp], 64		; 00000040H
	jg	SHORT $LN6@stb__spmat
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+48], 0
	jmp	SHORT $LN7@stb__spmat
$LN6@stb__spmat:
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fd82d82d82d82d8
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+48], eax
$LN7@stb__spmat:
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fc3333333333334
	divsd	xmm0, QWORD PTR __real@4000000000000000
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+40], eax
	movsxd	rax, DWORD PTR count$[rsp]
	imul	rax, rax, 24
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR h$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR h$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN8@stb__spmat
	xor	eax, eax
	jmp	SHORT $LN1@stb__spmat
$LN8@stb__spmat:
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__spmat
$LN2@stb__spmat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__spmat:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb__spmat
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rdx, OFFSET FLAT:?stb__ptrpair_empty@@3Ustb__ptrpair@@A
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
	jmp	SHORT $LN2@stb__spmat
$LN3@stb__spmat:
	mov	eax, 1
$LN1@stb__spmat:
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stb__spmatrix_init@@YAHPEAUstb__st_stb_spmatrix@@H@Z ENDP ; stb__spmatrix_init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 32
tv71 = 36
tv76 = 40
k$ = 64
?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z PROC	; stb__stb__spmatrix_hash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4311
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4307
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stb_hashptr
	mov	DWORD PTR tv64[rsp], eax
	mov	rcx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	stb_hashptr
	shr	eax, 6
	mov	ecx, DWORD PTR tv64[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv71[rsp], eax
	mov	rcx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	stb_hashptr
	shr	eax, 19
	mov	ecx, DWORD PTR tv71[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv76[rsp], eax
	mov	rcx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	stb_hashptr
	mov	ecx, DWORD PTR tv76[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	rsp, 56					; 00000038H
	ret	0
?stb__stb__spmatrix_hash@@YAIUstb__ptrpair@@@Z ENDP	; stb__stb__spmatrix_hash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 32
t$ = 40
$T1 = 64
$T2 = 80
z$ = 128
a$ = 136
b$ = 144
create$ = 152
stb_sparse_ptr_matrix_get PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4328
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 4329
	mov	rax, QWORD PTR a$[rsp]
	mov	QWORD PTR t$[rsp], rax
	mov	rax, QWORD PTR b$[rsp]
	mov	QWORD PTR t$[rsp+8], rax
; Line 4330
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR t$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stb__spmatrix_get@@YAPEAXPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@@Z ; stb__spmatrix_get
	mov	QWORD PTR data$[rsp], rax
; Line 4331
	cmp	QWORD PTR data$[rsp], 0
	jne	$LN2@stb_sparse
	cmp	DWORD PTR create$[rsp], 0
	je	SHORT $LN2@stb_sparse
; Line 4332
	mov	rax, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rdx, rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_malloc_raw
	mov	QWORD PTR data$[rsp], rax
; Line 4333
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN3@stb_sparse
	xor	eax, eax
	jmp	SHORT $LN1@stb_sparse
$LN3@stb_sparse:
; Line 4334
	mov	rax, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 4335
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR t$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	lea	rdx, QWORD PTR $T2[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stb__spmatrix_add@@YAHPEAUstb__st_stb_spmatrix@@Ustb__ptrpair@@PEAX@Z ; stb__spmatrix_add
$LN2@stb_sparse:
; Line 4337
	mov	rax, QWORD PTR data$[rsp]
$LN1@stb_sparse:
; Line 4338
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
stb_sparse_ptr_matrix_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 48
stb_sparse_ptr_matrix_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4322
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4323
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@stb_sparse
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_free
$LN2@stb_sparse:
; Line 4324
	mov	rcx, QWORD PTR z$[rsp]
	call	?stb__spmatrix_destroy@@YAXPEAUstb__st_stb_spmatrix@@@Z ; stb__spmatrix_destroy
; Line 4325
	add	rsp, 40					; 00000028H
	ret	0
stb_sparse_ptr_matrix_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
val_size$ = 64
stb_sparse_ptr_matrix_new PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4314
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4315
	call	?stb__spmatrix_create@@YAPEAUstb__st_stb_spmatrix@@XZ ; stb__spmatrix_create
	mov	QWORD PTR m$[rsp], rax
; Line 4316
	cmp	QWORD PTR m$[rsp], 0
	je	SHORT $LN2@stb_sparse
	mov	rax, QWORD PTR m$[rsp]
	mov	ecx, DWORD PTR val_size$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@stb_sparse:
; Line 4317
	cmp	QWORD PTR m$[rsp], 0
	je	SHORT $LN3@stb_sparse
	mov	ecx, 1
	call	stb_malloc_global
	mov	rcx, QWORD PTR m$[rsp]
	mov	QWORD PTR [rcx+8], rax
$LN3@stb_sparse:
; Line 4318
	mov	rax, QWORD PTR m$[rsp]
; Line 4319
	add	rsp, 56					; 00000038H
	ret	0
stb_sparse_ptr_matrix_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 40
a$ = 64
?stb_uidict_copy@@YAPEAUstb__st_stb_uidict@@PEAU1@@Z PROC ; stb_uidict_copy
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	ecx, 48					; 00000030H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	jne	SHORT $LN5@stb_uidict
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN5@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR h$[rsp]
	call	?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z ; stb_uidict_init
	test	eax, eax
	jne	SHORT $LN6@stb_uidict
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN6@stb_uidict:
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+36], 1
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax+40], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax+44], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+37]
	mov	BYTE PTR [rax+37], cl
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+38]
	mov	BYTE PTR [rax+38], cl
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+16]
	shl	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memcpy
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_uidict
$LN2@stb_uidict:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_uidict
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	je	SHORT $LN7@stb_uidict
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -2		; fffffffeH
	je	SHORT $LN7@stb_uidict
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR h$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [r8+rdx*8], eax
$LN7@stb_uidict:
	jmp	SHORT $LN2@stb_uidict
$LN3@stb_uidict:
	mov	rax, QWORD PTR h$[rsp]
$LN1@stb_uidict:
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_copy@@YAPEAUstb__st_stb_uidict@@PEAU1@@Z ENDP ; stb_uidict_copy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
?stb_uidict_remove@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z PROC ; stb_uidict_remove
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN20:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_uidict_hash@@YAIH@Z		; stb__stb_uidict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR k$[rsp], -1			; ffffffffH
	jne	SHORT $LN5@stb_uidict
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	test	eax, eax
	je	SHORT $LN6@stb_uidict
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN7@stb_uidict
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax], ecx
$LN7@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+37], 0
	mov	eax, 1
	jmp	$LN1@stb_uidict
$LN6@stb_uidict:
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN5@stb_uidict:
	cmp	DWORD PTR k$[rsp], -2			; fffffffeH
	jne	SHORT $LN8@stb_uidict
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	test	eax, eax
	je	SHORT $LN9@stb_uidict
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN10@stb_uidict
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax], ecx
$LN10@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+38], 0
	mov	eax, 1
	jmp	$LN1@stb_uidict
$LN9@stb_uidict:
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN8@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN11@stb_uidict
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN11@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	je	SHORT $LN12@stb_uidict
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_uidict:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN13@stb_uidict
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN13@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN14@stb_uidict
	jmp	SHORT $LN3@stb_uidict
$LN14@stb_uidict:
	jmp	SHORT $LN2@stb_uidict
$LN3@stb_uidict:
$LN12@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx+rax*8], -2
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN15@stb_uidict
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR [rdx], eax
$LN15@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	cmp	DWORD PTR [rax+12], ecx
	jge	SHORT $LN16@stb_uidict
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sar	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z ; stb__stb_uidict_rehash
	jmp	SHORT $LN17@stb_uidict
$LN16@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	cmp	DWORD PTR [rax+20], ecx
	jle	SHORT $LN18@stb_uidict
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z ; stb__stb_uidict_rehash
$LN18@stb_uidict:
$LN17@stb_uidict:
	mov	eax, 1
$LN1@stb_uidict:
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_remove@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z ENDP ; stb_uidict_remove
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
?stb_uidict_update@@YAHPEAUstb__st_stb_uidict@@HI@Z PROC ; stb_uidict_update
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR v$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z ; stb__stb_uidict_addset
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_update@@YAHPEAUstb__st_stb_uidict@@HI@Z ENDP ; stb_uidict_update
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
?stb_uidict_add@@YAHPEAUstb__st_stb_uidict@@HI@Z PROC	; stb_uidict_add
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, DWORD PTR v$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z ; stb__stb_uidict_addset
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_add@@YAHPEAUstb__st_stb_uidict@@HI@Z ENDP	; stb_uidict_add
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
?stb_uidict_set@@YAHPEAUstb__st_stb_uidict@@HI@Z PROC	; stb_uidict_set
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR v$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z ; stb__stb_uidict_addset
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_set@@YAHPEAUstb__st_stb_uidict@@HI@Z ENDP	; stb_uidict_set
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
b$ = 36
h$ = 40
tv72 = 44
tv79 = 48
tv84 = 52
tv91 = 56
tv149 = 60
tv184 = 64
tv196 = 68
s$1 = 72
a$ = 96
k$ = 104
v$ = 112
allow_new$ = 120
allow_old$ = 128
copy$ = 136
?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z PROC ; stb__stb_uidict_addset
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4264
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_uidict_hash@@YAIH@Z		; stb__stb_uidict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	DWORD PTR b$[rsp], -1
	cmp	DWORD PTR k$[rsp], -1			; ffffffffH
	jne	SHORT $LN5@stb__stb_u
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	test	eax, eax
	je	SHORT $LN27@stb__stb_u
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN28@stb__stb_u
$LN27@stb__stb_u:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN28@stb__stb_u:
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN6@stb__stb_u
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rax+40], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+37], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN29@stb__stb_u
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN30@stb__stb_u
$LN29@stb__stb_u:
	mov	DWORD PTR tv79[rsp], 0
$LN30@stb__stb_u:
	mov	eax, DWORD PTR tv79[rsp]
	jmp	$LN1@stb__stb_u
	jmp	SHORT $LN7@stb__stb_u
$LN6@stb__stb_u:
	xor	eax, eax
	jmp	$LN1@stb__stb_u
$LN7@stb__stb_u:
$LN5@stb__stb_u:
	cmp	DWORD PTR k$[rsp], -2			; fffffffeH
	jne	SHORT $LN8@stb__stb_u
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	test	eax, eax
	je	SHORT $LN31@stb__stb_u
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN32@stb__stb_u
$LN31@stb__stb_u:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv84[rsp], eax
$LN32@stb__stb_u:
	cmp	DWORD PTR tv84[rsp], 0
	je	SHORT $LN9@stb__stb_u
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rax+44], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+38], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN33@stb__stb_u
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN34@stb__stb_u
$LN33@stb__stb_u:
	mov	DWORD PTR tv91[rsp], 0
$LN34@stb__stb_u:
	mov	eax, DWORD PTR tv91[rsp]
	jmp	$LN1@stb__stb_u
	jmp	SHORT $LN10@stb__stb_u
$LN9@stb__stb_u:
	xor	eax, eax
	jmp	$LN1@stb__stb_u
$LN10@stb__stb_u:
$LN8@stb__stb_u:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	je	$LN11@stb__stb_u
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -2		; fffffffeH
	jne	SHORT $LN12@stb__stb_u
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN13@stb__stb_u
$LN12@stb__stb_u:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN14@stb__stb_u
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN15@stb__stb_u
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rcx+rax*8+4], edx
$LN15@stb__stb_u:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN35@stb__stb_u
	mov	DWORD PTR tv149[rsp], 1
	jmp	SHORT $LN36@stb__stb_u
$LN35@stb__stb_u:
	mov	DWORD PTR tv149[rsp], 0
$LN36@stb__stb_u:
	mov	eax, DWORD PTR tv149[rsp]
	jmp	$LN1@stb__stb_u
$LN14@stb__stb_u:
$LN13@stb__stb_u:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$1[rsp], eax
$LN2@stb__stb_u:
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN16@stb__stb_u
	jmp	SHORT $LN3@stb__stb_u
$LN16@stb__stb_u:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -2		; fffffffeH
	jne	SHORT $LN17@stb__stb_u
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN19@stb__stb_u
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
$LN19@stb__stb_u:
	jmp	SHORT $LN18@stb__stb_u
$LN17@stb__stb_u:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN20@stb__stb_u
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN21@stb__stb_u
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rcx+rax*8+4], edx
$LN21@stb__stb_u:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN37@stb__stb_u
	mov	DWORD PTR tv184[rsp], 1
	jmp	SHORT $LN38@stb__stb_u
$LN37@stb__stb_u:
	mov	DWORD PTR tv184[rsp], 0
$LN38@stb__stb_u:
	mov	eax, DWORD PTR tv184[rsp]
	jmp	$LN1@stb__stb_u
$LN20@stb__stb_u:
$LN18@stb__stb_u:
	jmp	$LN2@stb__stb_u
$LN3@stb__stb_u:
$LN11@stb__stb_u:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN22@stb__stb_u
	xor	eax, eax
	jmp	$LN1@stb__stb_u
$LN22@stb__stb_u:
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN23@stb__stb_u
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN24@stb__stb_u
$LN23@stb__stb_u:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
$LN24@stb__stb_u:
	cmp	DWORD PTR copy$[rsp], 0
	je	SHORT $LN39@stb__stb_u
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv196[rsp], eax
	jmp	SHORT $LN40@stb__stb_u
$LN39@stb__stb_u:
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv196[rsp], eax
$LN40@stb__stb_u:
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR tv196[rsp]
	mov	DWORD PTR [rcx+rax*8], edx
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rcx+rax*8+4], edx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+28]
	cmp	DWORD PTR [rax+12], ecx
	jle	SHORT $LN25@stb__stb_u
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z ; stb__stb_uidict_rehash
$LN25@stb__stb_u:
	mov	eax, 1
$LN1@stb__stb_u:
	add	rsp, 88					; 00000058H
	ret	0
?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z ENDP ; stb__stb_uidict_addset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
kout$ = 80
?stb_uidict_getkey@@YAHPEAUstb__st_stb_uidict@@HPEAH@Z PROC ; stb_uidict_getkey
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_uidict_hash@@YAIH@Z		; stb__stb_uidict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR k$[rsp], -1			; ffffffffH
	je	SHORT $LN6@stb_uidict
	cmp	DWORD PTR k$[rsp], -2			; fffffffeH
	jne	SHORT $LN5@stb_uidict
$LN6@stb_uidict:
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN5@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN7@stb_uidict
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN7@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN8@stb_uidict
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	$LN1@stb_uidict
$LN8@stb_uidict:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_uidict:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN9@stb_uidict
	xor	eax, eax
	jmp	SHORT $LN1@stb_uidict
$LN9@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN10@stb_uidict
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	SHORT $LN1@stb_uidict
$LN10@stb_uidict:
	jmp	SHORT $LN2@stb_uidict
$LN1@stb_uidict:
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_getkey@@YAHPEAUstb__st_stb_uidict@@HPEAH@Z ENDP ; stb_uidict_getkey
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
?stb_uidict_get_flag@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z PROC ; stb_uidict_get_flag
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN14:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_uidict_hash@@YAIH@Z		; stb__stb_uidict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR k$[rsp], -1			; ffffffffH
	jne	SHORT $LN5@stb_uidict
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	test	eax, eax
	je	SHORT $LN6@stb_uidict
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax], ecx
$LN6@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	jmp	$LN1@stb_uidict
$LN5@stb_uidict:
	cmp	DWORD PTR k$[rsp], -2			; fffffffeH
	jne	SHORT $LN7@stb_uidict
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	test	eax, eax
	je	SHORT $LN8@stb_uidict
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax], ecx
$LN8@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	jmp	$LN1@stb_uidict
$LN7@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN9@stb_uidict
	xor	eax, eax
	jmp	$LN1@stb_uidict
$LN9@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN10@stb_uidict
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	$LN1@stb_uidict
$LN10@stb_uidict:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_uidict:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	jne	SHORT $LN11@stb_uidict
	xor	eax, eax
	jmp	SHORT $LN1@stb_uidict
$LN11@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN12@stb_uidict
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	SHORT $LN1@stb_uidict
$LN12@stb_uidict:
	jmp	SHORT $LN2@stb_uidict
$LN1@stb_uidict:
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_get_flag@@YAHPEAUstb__st_stb_uidict@@HPEAI@Z ENDP ; stb_uidict_get_flag
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv139 = 56
b$ = 64
a$ = 128
count$ = 136
?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z PROC ; stb__stb_uidict_rehash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 4264
	mov	edx, DWORD PTR count$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z ; stb_uidict_init
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__stb_u
$LN2@stb__stb_u:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__stb_u:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__stb_u
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	je	SHORT $LN5@stb__stb_u
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -2		; fffffffeH
	je	SHORT $LN5@stb__stb_u
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	QWORD PTR tv139[rsp], r8
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR [rcx+rax*8+4]
	mov	rax, QWORD PTR tv139[rsp]
	mov	edx, DWORD PTR [rax+rdx*8]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb__stb_uidict_addset@@YAHPEAUstb__st_stb_uidict@@HIHHH@Z ; stb__stb_uidict_addset
$LN5@stb__stb_u:
	jmp	$LN2@stb__stb_u
$LN3@stb__stb_u:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+12]
	mov	DWORD PTR [rax+12], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+16]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+24]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+32]
	mov	DWORD PTR [rax+32], ecx
	add	rsp, 120				; 00000078H
	ret	0
?stb__stb_uidict_rehash@@YAXPEAUstb__st_stb_uidict@@H@Z ENDP ; stb__stb_uidict_rehash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
a$ = 64
?stb_uidict_destroy@@YAXPEAUstb__st_stb_uidict@@@Z PROC	; stb_uidict_destroy
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_uidict
$LN2@stb_uidict:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_uidict
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	DWORD PTR [rcx+rax*8], -1		; ffffffffH
	je	SHORT $LN5@stb_uidict
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
$LN5@stb_uidict:
	jmp	SHORT $LN2@stb_uidict
$LN3@stb_uidict:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+36]
	test	eax, eax
	je	SHORT $LN6@stb_uidict
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_free
$LN6@stb_uidict:
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_destroy@@YAXPEAUstb__st_stb_uidict@@@Z ENDP	; stb_uidict_destroy
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 32
?stb_uidict_create@@YAPEAUstb__st_stb_uidict@@XZ PROC	; stb_uidict_create
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN6:
	sub	rsp, 56					; 00000038H
; Line 4264
	mov	ecx, 48					; 00000030H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	je	SHORT $LN2@stb_uidict
	mov	edx, 16
	mov	rcx, QWORD PTR h$[rsp]
	call	?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z ; stb_uidict_init
	test	eax, eax
	je	SHORT $LN3@stb_uidict
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+36], 1
	jmp	SHORT $LN4@stb_uidict
$LN3@stb_uidict:
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	mov	QWORD PTR h$[rsp], 0
$LN4@stb_uidict:
$LN2@stb_uidict:
	mov	rax, QWORD PTR h$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_create@@YAPEAUstb__st_stb_uidict@@XZ ENDP	; stb_uidict_create
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 8
?stb_uidict_memory_usage@@YAHPEAUstb__st_stb_uidict@@@Z PROC ; stb_uidict_memory_usage
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
	mov	QWORD PTR [rsp+8], rcx
; Line 4264
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+16]
	lea	rax, QWORD PTR [rax*8+48]
	ret	0
?stb_uidict_memory_usage@@YAHPEAUstb__st_stb_uidict@@@Z ENDP ; stb_uidict_memory_usage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 64
count$ = 72
?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z PROC	; stb_uidict_init
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
$LN10:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4264
	cmp	DWORD PTR count$[rsp], 4
	jge	SHORT $LN5@stb_uidict
	mov	DWORD PTR count$[rsp], 4
$LN5@stb_uidict:
	mov	rax, QWORD PTR h$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+12], 0
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+20], 0
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3f59999a
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+28], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+38], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+37], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+36], 0
	cmp	DWORD PTR count$[rsp], 64		; 00000040H
	jg	SHORT $LN6@stb_uidict
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+32], 0
	jmp	SHORT $LN7@stb_uidict
$LN6@stb_uidict:
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fd82d82e38e38e4
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+32], eax
$LN7@stb_uidict:
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3e199998
	divss	xmm0, DWORD PTR __real@40000000
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+24], eax
	movsxd	rax, DWORD PTR count$[rsp]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR h$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR h$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN8@stb_uidict
	xor	eax, eax
	jmp	SHORT $LN1@stb_uidict
$LN8@stb_uidict:
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_uidict
$LN2@stb_uidict:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_uidict:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_uidict
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx+rax*8], -1
	jmp	SHORT $LN2@stb_uidict
$LN3@stb_uidict:
	mov	eax, 1
$LN1@stb_uidict:
	add	rsp, 56					; 00000038H
	ret	0
?stb_uidict_init@@YAHPEAUstb__st_stb_uidict@@H@Z ENDP	; stb_uidict_init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 48
?stb__stb_uidict_hash@@YAIH@Z PROC			; stb__stb_uidict_hash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4267
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4264
	mov	ecx, DWORD PTR k$[rsp]
	call	stb_rehash_improved
	add	rsp, 40					; 00000028H
	ret	0
?stb__stb_uidict_hash@@YAIH@Z ENDP			; stb__stb_uidict_hash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
b$ = 36
h$ = 40
tv72 = 44
tv79 = 48
tv84 = 52
tv91 = 56
tv149 = 60
tv184 = 64
tv196 = 68
s$1 = 72
a$ = 96
k$ = 104
v$ = 112
allow_new$ = 120
allow_old$ = 128
copy$ = 136
?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z PROC ; stb__stb_idict_addset
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4237
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_idict_hash@@YAIH@Z		; stb__stb_idict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	DWORD PTR b$[rsp], -1
	cmp	DWORD PTR k$[rsp], 1
	jne	SHORT $LN5@stb__stb_i
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	test	eax, eax
	je	SHORT $LN27@stb__stb_i
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN28@stb__stb_i
$LN27@stb__stb_i:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN28@stb__stb_i:
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN6@stb__stb_i
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rax+48], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+45], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN29@stb__stb_i
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN30@stb__stb_i
$LN29@stb__stb_i:
	mov	DWORD PTR tv79[rsp], 0
$LN30@stb__stb_i:
	mov	eax, DWORD PTR tv79[rsp]
	jmp	$LN1@stb__stb_i
	jmp	SHORT $LN7@stb__stb_i
$LN6@stb__stb_i:
	xor	eax, eax
	jmp	$LN1@stb__stb_i
$LN7@stb__stb_i:
$LN5@stb__stb_i:
	cmp	DWORD PTR k$[rsp], 3
	jne	SHORT $LN8@stb__stb_i
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	test	eax, eax
	je	SHORT $LN31@stb__stb_i
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN32@stb__stb_i
$LN31@stb__stb_i:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv84[rsp], eax
$LN32@stb__stb_i:
	cmp	DWORD PTR tv84[rsp], 0
	je	SHORT $LN9@stb__stb_i
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rax+52], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+46], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN33@stb__stb_i
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN34@stb__stb_i
$LN33@stb__stb_i:
	mov	DWORD PTR tv91[rsp], 0
$LN34@stb__stb_i:
	mov	eax, DWORD PTR tv91[rsp]
	jmp	$LN1@stb__stb_i
	jmp	SHORT $LN10@stb__stb_i
$LN9@stb__stb_i:
	xor	eax, eax
	jmp	$LN1@stb__stb_i
$LN10@stb__stb_i:
$LN8@stb__stb_i:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	je	$LN11@stb__stb_i
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 3
	jne	SHORT $LN12@stb__stb_i
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN13@stb__stb_i
$LN12@stb__stb_i:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN14@stb__stb_i
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN15@stb__stb_i
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rcx+rax*8+4], edx
$LN15@stb__stb_i:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN35@stb__stb_i
	mov	DWORD PTR tv149[rsp], 1
	jmp	SHORT $LN36@stb__stb_i
$LN35@stb__stb_i:
	mov	DWORD PTR tv149[rsp], 0
$LN36@stb__stb_i:
	mov	eax, DWORD PTR tv149[rsp]
	jmp	$LN1@stb__stb_i
$LN14@stb__stb_i:
$LN13@stb__stb_i:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$1[rsp], eax
$LN2@stb__stb_i:
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN16@stb__stb_i
	jmp	$LN3@stb__stb_i
$LN16@stb__stb_i:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 3
	jne	SHORT $LN17@stb__stb_i
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN19@stb__stb_i
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
$LN19@stb__stb_i:
	jmp	SHORT $LN18@stb__stb_i
$LN17@stb__stb_i:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN20@stb__stb_i
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN21@stb__stb_i
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rcx+rax*8+4], edx
$LN21@stb__stb_i:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN37@stb__stb_i
	mov	DWORD PTR tv184[rsp], 1
	jmp	SHORT $LN38@stb__stb_i
$LN37@stb__stb_i:
	mov	DWORD PTR tv184[rsp], 0
$LN38@stb__stb_i:
	mov	eax, DWORD PTR tv184[rsp]
	jmp	$LN1@stb__stb_i
$LN20@stb__stb_i:
$LN18@stb__stb_i:
	jmp	$LN2@stb__stb_i
$LN3@stb__stb_i:
$LN11@stb__stb_i:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN22@stb__stb_i
	xor	eax, eax
	jmp	$LN1@stb__stb_i
$LN22@stb__stb_i:
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN23@stb__stb_i
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN24@stb__stb_i
$LN23@stb__stb_i:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+28]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+28], eax
$LN24@stb__stb_i:
	cmp	DWORD PTR copy$[rsp], 0
	je	SHORT $LN39@stb__stb_i
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv196[rsp], eax
	jmp	SHORT $LN40@stb__stb_i
$LN39@stb__stb_i:
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv196[rsp], eax
$LN40@stb__stb_i:
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR tv196[rsp]
	mov	DWORD PTR [rcx+rax*8], edx
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR v$[rsp]
	mov	DWORD PTR [rcx+rax*8+4], edx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	cmp	DWORD PTR [rax+20], ecx
	jle	SHORT $LN25@stb__stb_i
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z ; stb__stb_idict_rehash
$LN25@stb__stb_i:
	mov	eax, 1
$LN1@stb__stb_i:
	add	rsp, 88					; 00000058H
	ret	0
?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z ENDP ; stb__stb_idict_addset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
kout$ = 80
?stb_idict_getkey@@YAHPEAUstb__st_stb_idict@@HPEAH@Z PROC ; stb_idict_getkey
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_idict_hash@@YAIH@Z		; stb__stb_idict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR k$[rsp], 1
	je	SHORT $LN6@stb_idict_
	cmp	DWORD PTR k$[rsp], 3
	jne	SHORT $LN5@stb_idict_
$LN6@stb_idict_:
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN5@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN7@stb_idict_
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN7@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN8@stb_idict_
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	$LN1@stb_idict_
$LN8@stb_idict_:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_idict_:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN9@stb_idict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_idict_
$LN9@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN10@stb_idict_
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	SHORT $LN1@stb_idict_
$LN10@stb_idict_:
	jmp	SHORT $LN2@stb_idict_
$LN1@stb_idict_:
	add	rsp, 56					; 00000038H
	ret	0
?stb_idict_getkey@@YAHPEAUstb__st_stb_idict@@HPEAH@Z ENDP ; stb_idict_getkey
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv139 = 56
b$ = 64
a$ = 144
count$ = 152
?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z PROC ; stb__stb_idict_rehash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4237
	mov	edx, DWORD PTR count$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	stb_idict_init
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__stb_i
$LN2@stb__stb_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__stb_i:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__stb_i
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	je	SHORT $LN5@stb__stb_i
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 3
	je	SHORT $LN5@stb__stb_i
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	QWORD PTR tv139[rsp], r8
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR [rcx+rax*8+4]
	mov	rax, QWORD PTR tv139[rsp]
	mov	edx, DWORD PTR [rax+rdx*8]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z ; stb__stb_idict_addset
$LN5@stb__stb_i:
	jmp	$LN2@stb__stb_i
$LN3@stb__stb_i:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+16]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+24]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+32]
	mov	DWORD PTR [rax+32], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+36]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+40]
	mov	DWORD PTR [rax+40], ecx
	add	rsp, 136				; 00000088H
	ret	0
?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z ENDP ; stb__stb_idict_rehash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 48
?stb__stb_idict_hash@@YAIH@Z PROC			; stb__stb_idict_hash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4237
	mov	ecx, DWORD PTR k$[rsp]
	call	stb_rehash_improved
	add	rsp, 40					; 00000028H
	ret	0
?stb__stb_idict_hash@@YAIH@Z ENDP			; stb__stb_idict_hash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
b$ = 36
h$ = 40
tv72 = 44
tv79 = 48
tv84 = 52
tv91 = 56
tv149 = 60
tv184 = 64
s$1 = 68
tv196 = 72
a$ = 96
k$ = 104
v$ = 112
allow_new$ = 120
allow_old$ = 128
copy$ = 136
?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z PROC ; stb__stb_ptrmap_addset
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4210
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_ptrmap_hash@@YAIPEAX@Z	; stb__stb_ptrmap_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	DWORD PTR b$[rsp], -1
	cmp	QWORD PTR k$[rsp], 2
	jne	SHORT $LN5@stb__stb_p
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	test	eax, eax
	je	SHORT $LN27@stb__stb_p
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN28@stb__stb_p
$LN27@stb__stb_p:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN28@stb__stb_p:
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN6@stb__stb_p
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax+40], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+37], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN29@stb__stb_p
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN30@stb__stb_p
$LN29@stb__stb_p:
	mov	DWORD PTR tv79[rsp], 0
$LN30@stb__stb_p:
	mov	eax, DWORD PTR tv79[rsp]
	jmp	$LN1@stb__stb_p
	jmp	SHORT $LN7@stb__stb_p
$LN6@stb__stb_p:
	xor	eax, eax
	jmp	$LN1@stb__stb_p
$LN7@stb__stb_p:
$LN5@stb__stb_p:
	cmp	QWORD PTR k$[rsp], 6
	jne	SHORT $LN8@stb__stb_p
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	test	eax, eax
	je	SHORT $LN31@stb__stb_p
	mov	eax, DWORD PTR allow_old$[rsp]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN32@stb__stb_p
$LN31@stb__stb_p:
	mov	eax, DWORD PTR allow_new$[rsp]
	mov	DWORD PTR tv84[rsp], eax
$LN32@stb__stb_p:
	cmp	DWORD PTR tv84[rsp], 0
	je	SHORT $LN9@stb__stb_p
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	mov	DWORD PTR n$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+38], 1
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN33@stb__stb_p
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN34@stb__stb_p
$LN33@stb__stb_p:
	mov	DWORD PTR tv91[rsp], 0
$LN34@stb__stb_p:
	mov	eax, DWORD PTR tv91[rsp]
	jmp	$LN1@stb__stb_p
	jmp	SHORT $LN10@stb__stb_p
$LN9@stb__stb_p:
	xor	eax, eax
	jmp	$LN1@stb__stb_p
$LN10@stb__stb_p:
$LN8@stb__stb_p:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	je	$LN11@stb__stb_p
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 6
	jne	SHORT $LN12@stb__stb_p
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN13@stb__stb_p
$LN12@stb__stb_p:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@stb__stb_p
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN15@stb__stb_p
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN15@stb__stb_p:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN35@stb__stb_p
	mov	DWORD PTR tv149[rsp], 1
	jmp	SHORT $LN36@stb__stb_p
$LN35@stb__stb_p:
	mov	DWORD PTR tv149[rsp], 0
$LN36@stb__stb_p:
	mov	eax, DWORD PTR tv149[rsp]
	jmp	$LN1@stb__stb_p
$LN14@stb__stb_p:
$LN13@stb__stb_p:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$1[rsp], eax
$LN2@stb__stb_p:
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN16@stb__stb_p
	jmp	$LN3@stb__stb_p
$LN16@stb__stb_p:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 6
	jne	SHORT $LN17@stb__stb_p
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN19@stb__stb_p
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
$LN19@stb__stb_p:
	jmp	SHORT $LN18@stb__stb_p
$LN17@stb__stb_p:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN20@stb__stb_p
	cmp	DWORD PTR allow_old$[rsp], 0
	je	SHORT $LN21@stb__stb_p
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN21@stb__stb_p:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN37@stb__stb_p
	mov	DWORD PTR tv184[rsp], 1
	jmp	SHORT $LN38@stb__stb_p
$LN37@stb__stb_p:
	mov	DWORD PTR tv184[rsp], 0
$LN38@stb__stb_p:
	mov	eax, DWORD PTR tv184[rsp]
	jmp	$LN1@stb__stb_p
$LN20@stb__stb_p:
$LN18@stb__stb_p:
	jmp	$LN2@stb__stb_p
$LN3@stb__stb_p:
$LN11@stb__stb_p:
	cmp	DWORD PTR allow_new$[rsp], 0
	jne	SHORT $LN22@stb__stb_p
	xor	eax, eax
	jmp	$LN1@stb__stb_p
$LN22@stb__stb_p:
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN23@stb__stb_p
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR b$[rsp], eax
	jmp	SHORT $LN24@stb__stb_p
$LN23@stb__stb_p:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
$LN24@stb__stb_p:
	cmp	DWORD PTR copy$[rsp], 0
	je	SHORT $LN39@stb__stb_p
	mov	rax, QWORD PTR k$[rsp]
	mov	QWORD PTR tv196[rsp], rax
	jmp	SHORT $LN40@stb__stb_p
$LN39@stb__stb_p:
	mov	rax, QWORD PTR k$[rsp]
	mov	QWORD PTR tv196[rsp], rax
$LN40@stb__stb_p:
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR tv196[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+28]
	cmp	DWORD PTR [rax+12], ecx
	jle	SHORT $LN25@stb__stb_p
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z ; stb__stb_ptrmap_rehash
$LN25@stb__stb_p:
	mov	eax, 1
$LN1@stb__stb_p:
	add	rsp, 88					; 00000058H
	ret	0
?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z ENDP ; stb__stb_ptrmap_addset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
kout$ = 80
?stb_ptrmap_getkey@@YAHPEAUstb__st_stb_ptrmap@@PEAXPEAPEAX@Z PROC ; stb_ptrmap_getkey
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_ptrmap_hash@@YAIPEAX@Z	; stb__stb_ptrmap_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	QWORD PTR k$[rsp], 2
	je	SHORT $LN6@stb_ptrmap
	cmp	QWORD PTR k$[rsp], 6
	jne	SHORT $LN5@stb_ptrmap
$LN6@stb_ptrmap:
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN5@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN7@stb_ptrmap
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN7@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN8@stb_ptrmap
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	$LN1@stb_ptrmap
$LN8@stb_ptrmap:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN9@stb_ptrmap
	xor	eax, eax
	jmp	SHORT $LN1@stb_ptrmap
$LN9@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN10@stb_ptrmap
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR kout$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	SHORT $LN1@stb_ptrmap
$LN10@stb_ptrmap:
	jmp	SHORT $LN2@stb_ptrmap
$LN1@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
?stb_ptrmap_getkey@@YAHPEAUstb__st_stb_ptrmap@@PEAXPEAPEAX@Z ENDP ; stb_ptrmap_getkey
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv139 = 56
b$ = 64
a$ = 144
count$ = 152
?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z PROC ; stb__stb_ptrmap_rehash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4210
	mov	edx, DWORD PTR count$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	stb_ptrmap_init
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb__stb_p
$LN2@stb__stb_p:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb__stb_p:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb__stb_p
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	je	SHORT $LN5@stb__stb_p
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 6
	je	SHORT $LN5@stb__stb_p
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	QWORD PTR tv139[rsp], r8
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv139[rsp]
	mov	rdx, QWORD PTR [rax+rdx]
	lea	rcx, QWORD PTR b$[rsp]
	call	?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z ; stb__stb_ptrmap_addset
$LN5@stb__stb_p:
	jmp	$LN2@stb__stb_p
$LN3@stb__stb_p:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+8]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+12]
	mov	DWORD PTR [rax+12], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+16]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+24]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR b$[rsp+32]
	mov	DWORD PTR [rax+32], ecx
	add	rsp, 136				; 00000088H
	ret	0
?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z ENDP ; stb__stb_ptrmap_rehash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 48
?stb__stb_ptrmap_hash@@YAIPEAX@Z PROC			; stb__stb_ptrmap_hash
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4210
	mov	rcx, QWORD PTR k$[rsp]
	call	stb_hashptr
	add	rsp, 40					; 00000028H
	ret	0
?stb__stb_ptrmap_hash@@YAIPEAX@Z ENDP			; stb__stb_ptrmap_hash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
e$ = 32
stb_uidict_reset PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4270
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4272
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN4@stb_uidict
$LN2@stb_uidict:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN4@stb_uidict:
	mov	rax, QWORD PTR e$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN3@stb_uidict
; Line 4273
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	DWORD PTR [rcx+rax*8], -1
	jmp	SHORT $LN2@stb_uidict
$LN3@stb_uidict:
; Line 4274
	mov	rax, QWORD PTR e$[rsp]
	mov	BYTE PTR [rax+38], 0
	mov	rax, QWORD PTR e$[rsp]
	mov	BYTE PTR [rax+37], 0
; Line 4275
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 4276
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax+20], 0
; Line 4277
	add	rsp, 24
	ret	0
stb_uidict_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
e$ = 32
stb_idict_remove_all PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4255
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4257
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN4@stb_idict_
$LN2@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN4@stb_idict_:
	mov	rax, QWORD PTR e$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN3@stb_idict_
; Line 4258
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx+rax*8], 1
	jmp	SHORT $LN2@stb_idict_
$LN3@stb_idict_:
; Line 4259
	mov	rax, QWORD PTR e$[rsp]
	mov	BYTE PTR [rax+46], 0
	mov	rax, QWORD PTR e$[rsp]
	mov	BYTE PTR [rax+45], 0
; Line 4260
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax+20], 0
; Line 4261
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 4262
	add	rsp, 24
	ret	0
stb_idict_remove_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 32
e$ = 40
size$ = 64
stb_idict_new_size PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4243
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4244
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR e$[rsp], rax
; Line 4245
	cmp	QWORD PTR e$[rsp], 0
	je	SHORT $LN2@stb_idict_
; Line 4246
	movsxd	rax, DWORD PTR size$[rsp]
	mov	rcx, rax
	call	stb_is_pow2
	test	eax, eax
	jne	SHORT $LN3@stb_idict_
; Line 4247
	movsxd	rax, DWORD PTR size$[rsp]
	mov	rcx, rax
	call	stb_log2_ceil
	mov	ecx, 1
	mov	DWORD PTR tv88[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv88[rsp]
	shl	eax, cl
	mov	DWORD PTR size$[rsp], eax
$LN3@stb_idict_:
; Line 4248
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	call	stb_idict_init
; Line 4249
	mov	rax, QWORD PTR e$[rsp]
	mov	BYTE PTR [rax+44], 1
$LN2@stb_idict_:
; Line 4251
	mov	rax, QWORD PTR e$[rsp]
; Line 4252
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_new_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stb_ptrmap_new PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4216
$LN3:
	sub	rsp, 40					; 00000028H
; Line 4217
	call	stb_ptrmap_create
; Line 4218
	add	rsp, 40					; 00000028H
	ret	0
stb_ptrmap_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv94 = 40
e$ = 64
free_func$ = 72
stb_ptrmap_delete PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4221
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4223
	cmp	QWORD PTR free_func$[rsp], 0
	je	$LN5@stb_ptrmap
; Line 4224
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ptrmap
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ptrmap:
	mov	rax, QWORD PTR e$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_ptrmap
; Line 4225
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	je	SHORT $LN6@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 6
	je	SHORT $LN6@stb_ptrmap
; Line 4226
	mov	rax, QWORD PTR __imp_free
	cmp	QWORD PTR free_func$[rsp], rax
	jne	SHORT $LN7@stb_ptrmap
; Line 4227
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN8@stb_ptrmap
$LN7@stb_ptrmap:
; Line 4229
	mov	rax, QWORD PTR free_func$[rsp]
	mov	QWORD PTR tv94[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR tv94[rsp]
$LN8@stb_ptrmap:
$LN6@stb_ptrmap:
; Line 4230
	jmp	$LN2@stb_ptrmap
$LN3@stb_ptrmap:
$LN5@stb_ptrmap:
; Line 4231
	mov	rcx, QWORD PTR e$[rsp]
	call	stb_ptrmap_destroy
; Line 4232
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
stb_idict_remove PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN20:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_idict_hash@@YAIH@Z		; stb__stb_idict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR k$[rsp], 1
	jne	SHORT $LN5@stb_idict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	test	eax, eax
	je	SHORT $LN6@stb_idict_
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN7@stb_idict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax], ecx
$LN7@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+45], 0
	mov	eax, 1
	jmp	$LN1@stb_idict_
$LN6@stb_idict_:
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN5@stb_idict_:
	cmp	DWORD PTR k$[rsp], 3
	jne	SHORT $LN8@stb_idict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	test	eax, eax
	je	SHORT $LN9@stb_idict_
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN10@stb_idict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax], ecx
$LN10@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+46], 0
	mov	eax, 1
	jmp	$LN1@stb_idict_
$LN9@stb_idict_:
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN8@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN11@stb_idict_
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN11@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	je	SHORT $LN12@stb_idict_
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_idict_:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN13@stb_idict_
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN13@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN14@stb_idict_
	jmp	SHORT $LN3@stb_idict_
$LN14@stb_idict_:
	jmp	SHORT $LN2@stb_idict_
$LN3@stb_idict_:
$LN12@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx+rax*8], 3
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+28]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+28], eax
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN15@stb_idict_
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR [rdx], eax
$LN15@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	cmp	DWORD PTR [rax+20], ecx
	jge	SHORT $LN16@stb_idict_
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	sar	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z ; stb__stb_idict_rehash
	jmp	SHORT $LN17@stb_idict_
$LN16@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	cmp	DWORD PTR [rax+28], ecx
	jle	SHORT $LN18@stb_idict_
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_idict_rehash@@YAXPEAUstb__st_stb_idict@@H@Z ; stb__stb_idict_rehash
$LN18@stb_idict_:
$LN17@stb_idict_:
	mov	eax, 1
$LN1@stb_idict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_idict_update PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR v$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z ; stb__stb_idict_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_idict_add PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, DWORD PTR v$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z ; stb__stb_idict_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_idict_set PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR v$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_idict_addset@@YAHPEAUstb__st_stb_idict@@HHHHH@Z ; stb__stb_idict_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
stb_idict_get_flag PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN14:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	ecx, DWORD PTR k$[rsp]
	call	?stb__stb_idict_hash@@YAIH@Z		; stb__stb_idict_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	DWORD PTR k$[rsp], 1
	jne	SHORT $LN5@stb_idict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	test	eax, eax
	je	SHORT $LN6@stb_idict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax], ecx
$LN6@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+45]
	jmp	$LN1@stb_idict_
$LN5@stb_idict_:
	cmp	DWORD PTR k$[rsp], 3
	jne	SHORT $LN7@stb_idict_
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	test	eax, eax
	je	SHORT $LN8@stb_idict_
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax], ecx
$LN8@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	jmp	$LN1@stb_idict_
$LN7@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN9@stb_idict_
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN9@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN10@stb_idict_
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	$LN1@stb_idict_
$LN10@stb_idict_:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_idict_:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	jne	SHORT $LN11@stb_idict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_idict_
$LN11@stb_idict_:
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR k$[rsp]
	cmp	DWORD PTR [rcx+rax*8], edx
	jne	SHORT $LN12@stb_idict_
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR [rdx], eax
	mov	eax, 1
	jmp	SHORT $LN1@stb_idict_
$LN12@stb_idict_:
	jmp	SHORT $LN2@stb_idict_
$LN1@stb_idict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_get_flag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
a$ = 64
stb_idict_destroy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_idict_
$LN2@stb_idict_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_idict_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	je	SHORT $LN5@stb_idict_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
$LN5@stb_idict_:
	jmp	SHORT $LN2@stb_idict_
$LN3@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	test	eax, eax
	je	SHORT $LN6@stb_idict_
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_free
$LN6@stb_idict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 40
a$ = 64
stb_idict_copy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	jne	SHORT $LN5@stb_idict_
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN5@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR h$[rsp]
	call	stb_idict_init
	test	eax, eax
	jne	SHORT $LN6@stb_idict_
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stb_idict_
$LN6@stb_idict_:
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+28]
	mov	DWORD PTR [rax+28], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+44], 1
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax+48], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax+52], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+45]
	mov	BYTE PTR [rax+45], cl
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+46]
	mov	BYTE PTR [rax+46], cl
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	shl	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memcpy
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_idict_
$LN2@stb_idict_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_idict_:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_idict_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 1
	je	SHORT $LN7@stb_idict_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	DWORD PTR [rcx+rax*8], 3
	je	SHORT $LN7@stb_idict_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsxd	rdx, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR h$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR [r8+rdx*8], eax
$LN7@stb_idict_:
	jmp	SHORT $LN2@stb_idict_
$LN3@stb_idict_:
	mov	rax, QWORD PTR h$[rsp]
$LN1@stb_idict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 32
stb_idict_create PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN6:
	sub	rsp, 56					; 00000038H
; Line 4237
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	je	SHORT $LN2@stb_idict_
	mov	edx, 16
	mov	rcx, QWORD PTR h$[rsp]
	call	stb_idict_init
	test	eax, eax
	je	SHORT $LN3@stb_idict_
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+44], 1
	jmp	SHORT $LN4@stb_idict_
$LN3@stb_idict_:
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	mov	QWORD PTR h$[rsp], 0
$LN4@stb_idict_:
$LN2@stb_idict_:
	mov	rax, QWORD PTR h$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 8
stb_idict_memory_usage PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
	mov	QWORD PTR [rsp+8], rcx
; Line 4237
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	lea	rax, QWORD PTR [rax*8+56]
	ret	0
stb_idict_memory_usage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 64
count$ = 72
stb_idict_init PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4240
$LN10:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4237
	cmp	DWORD PTR count$[rsp], 4
	jge	SHORT $LN5@stb_idict_
	mov	DWORD PTR count$[rsp], 4
$LN5@stb_idict_:
	mov	rax, QWORD PTR h$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+16], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+28], 0
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3f733333
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+36], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+46], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+45], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+44], 0
	cmp	DWORD PTR count$[rsp], 64		; 00000040H
	jg	SHORT $LN6@stb_idict_
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+40], 0
	jmp	SHORT $LN7@stb_idict_
$LN6@stb_idict_:
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fdb05b055555555
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+40], eax
$LN7@stb_idict_:
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3d4cccd0
	divss	xmm0, DWORD PTR __real@40000000
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+32], eax
	movsxd	rax, DWORD PTR count$[rsp]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR h$[rsp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR h$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN8@stb_idict_
	xor	eax, eax
	jmp	SHORT $LN1@stb_idict_
$LN8@stb_idict_:
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_idict_
$LN2@stb_idict_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_idict_:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_idict_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx+rax*8], 1
	jmp	SHORT $LN2@stb_idict_
$LN3@stb_idict_:
	mov	eax, 1
$LN1@stb_idict_:
	add	rsp, 56					; 00000038H
	ret	0
stb_idict_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
stb_ptrmap_remove PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN20:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_ptrmap_hash@@YAIPEAX@Z	; stb__stb_ptrmap_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	QWORD PTR k$[rsp], 2
	jne	SHORT $LN5@stb_ptrmap
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	test	eax, eax
	je	SHORT $LN6@stb_ptrmap
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN7@stb_ptrmap
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax], rcx
$LN7@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+37], 0
	mov	eax, 1
	jmp	$LN1@stb_ptrmap
$LN6@stb_ptrmap:
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN5@stb_ptrmap:
	cmp	QWORD PTR k$[rsp], 6
	jne	SHORT $LN8@stb_ptrmap
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	test	eax, eax
	je	SHORT $LN9@stb_ptrmap
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN10@stb_ptrmap
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax], rcx
$LN10@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	BYTE PTR [rax+38], 0
	mov	eax, 1
	jmp	$LN1@stb_ptrmap
$LN9@stb_ptrmap:
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN8@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN11@stb_ptrmap
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN11@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	je	SHORT $LN12@stb_ptrmap
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN13@stb_ptrmap
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN13@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@stb_ptrmap
	jmp	SHORT $LN3@stb_ptrmap
$LN14@stb_ptrmap:
	jmp	SHORT $LN2@stb_ptrmap
$LN3@stb_ptrmap:
$LN12@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+rax], 6
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	dec	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
	cmp	QWORD PTR v$[rsp], 0
	je	SHORT $LN15@stb_ptrmap
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rdx], rax
$LN15@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	cmp	DWORD PTR [rax+12], ecx
	jge	SHORT $LN16@stb_ptrmap
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sar	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z ; stb__stb_ptrmap_rehash
	jmp	SHORT $LN17@stb_ptrmap
$LN16@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	cmp	DWORD PTR [rax+20], ecx
	jle	SHORT $LN18@stb_ptrmap
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_ptrmap_rehash@@YAXPEAUstb__st_stb_ptrmap@@H@Z ; stb__stb_ptrmap_rehash
$LN18@stb_ptrmap:
$LN17@stb_ptrmap:
	mov	eax, 1
$LN1@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_ptrmap_update PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z ; stb__stb_ptrmap_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_ptrmap_add PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z ; stb__stb_ptrmap_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
k$ = 72
v$ = 80
stb_ptrmap_set PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb__stb_ptrmap_addset@@YAHPEAUstb__st_stb_ptrmap@@PEAX1HHH@Z ; stb__stb_ptrmap_addset
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
a$ = 64
k$ = 72
stb_ptrmap_get PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	lea	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stb_ptrmap_get_flag
	test	eax, eax
	je	SHORT $LN2@stb_ptrmap
	mov	rax, QWORD PTR v$[rsp]
	jmp	SHORT $LN1@stb_ptrmap
	jmp	SHORT $LN3@stb_ptrmap
$LN2@stb_ptrmap:
	xor	eax, eax
$LN3@stb_ptrmap:
$LN1@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
h$ = 36
s$ = 40
a$ = 64
k$ = 72
v$ = 80
stb_ptrmap_get_flag PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN14:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	rcx, QWORD PTR k$[rsp]
	call	?stb__stb_ptrmap_hash@@YAIPEAX@Z	; stb__stb_ptrmap_hash
	mov	DWORD PTR h$[rsp], eax
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR h$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	cmp	QWORD PTR k$[rsp], 2
	jne	SHORT $LN5@stb_ptrmap
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	test	eax, eax
	je	SHORT $LN6@stb_ptrmap
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax], rcx
$LN6@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+37]
	jmp	$LN1@stb_ptrmap
$LN5@stb_ptrmap:
	cmp	QWORD PTR k$[rsp], 6
	jne	SHORT $LN7@stb_ptrmap
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	test	eax, eax
	je	SHORT $LN8@stb_ptrmap
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax], rcx
$LN8@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+38]
	jmp	$LN1@stb_ptrmap
$LN7@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN9@stb_ptrmap
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN9@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN10@stb_ptrmap
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	$LN1@stb_ptrmap
$LN10@stb_ptrmap:
	mov	eax, DWORD PTR h$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR h$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR h$[rsp]
	shr	ecx, 19
	add	eax, ecx
	or	eax, 1
	mov	DWORD PTR s$[rsp], eax
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR s$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	and	eax, DWORD PTR [rcx+8]
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	jne	SHORT $LN11@stb_ptrmap
	xor	eax, eax
	jmp	SHORT $LN1@stb_ptrmap
$LN11@stb_ptrmap:
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR k$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN12@stb_ptrmap
	mov	eax, DWORD PTR n$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR [rdx], rax
	mov	eax, 1
	jmp	SHORT $LN1@stb_ptrmap
$LN12@stb_ptrmap:
	jmp	SHORT $LN2@stb_ptrmap
$LN1@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_get_flag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
a$ = 64
stb_ptrmap_destroy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ptrmap
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	je	SHORT $LN5@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
$LN5@stb_ptrmap:
	jmp	SHORT $LN2@stb_ptrmap
$LN3@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax+36]
	test	eax, eax
	je	SHORT $LN6@stb_ptrmap
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_free
$LN6@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_destroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 40
a$ = 64
stb_ptrmap_copy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	jne	SHORT $LN5@stb_ptrmap
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN5@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR h$[rsp]
	call	stb_ptrmap_init
	test	eax, eax
	jne	SHORT $LN6@stb_ptrmap
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stb_ptrmap
$LN6@stb_ptrmap:
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	mov	DWORD PTR [rax+20], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+36], 1
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+40], rcx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+37]
	mov	BYTE PTR [rax+37], cl
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	ecx, BYTE PTR [rcx+38]
	mov	BYTE PTR [rax+38], cl
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+16]
	imul	rax, rax, 16
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memcpy
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ptrmap
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ptrmap:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 2
	je	SHORT $LN7@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rcx+rax], 6
	je	SHORT $LN7@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 16
	mov	r8, QWORD PTR h$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR [r8+rdx], rax
$LN7@stb_ptrmap:
	jmp	SHORT $LN2@stb_ptrmap
$LN3@stb_ptrmap:
	mov	rax, QWORD PTR h$[rsp]
$LN1@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 32
stb_ptrmap_create PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN6:
	sub	rsp, 56					; 00000038H
; Line 4210
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR h$[rsp], rax
	cmp	QWORD PTR h$[rsp], 0
	je	SHORT $LN2@stb_ptrmap
	mov	edx, 16
	mov	rcx, QWORD PTR h$[rsp]
	call	stb_ptrmap_init
	test	eax, eax
	je	SHORT $LN3@stb_ptrmap
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+36], 1
	jmp	SHORT $LN4@stb_ptrmap
$LN3@stb_ptrmap:
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_free
	mov	QWORD PTR h$[rsp], 0
$LN4@stb_ptrmap:
$LN2@stb_ptrmap:
	mov	rax, QWORD PTR h$[rsp]
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 8
stb_ptrmap_memory_usage PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
	mov	QWORD PTR [rsp+8], rcx
; Line 4210
	mov	rax, QWORD PTR h$[rsp]
	movsxd	rax, DWORD PTR [rax+16]
	imul	rax, rax, 16
	add	rax, 56					; 00000038H
	ret	0
stb_ptrmap_memory_usage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
h$ = 64
count$ = 72
stb_ptrmap_init PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 4213
$LN10:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4210
	cmp	DWORD PTR count$[rsp], 4
	jge	SHORT $LN5@stb_ptrmap
	mov	DWORD PTR count$[rsp], 4
$LN5@stb_ptrmap:
	mov	rax, QWORD PTR h$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+12], 0
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+20], 0
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3f59999a
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+28], eax
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+38], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+37], 0
	mov	rax, QWORD PTR h$[rsp]
	mov	BYTE PTR [rax+36], 0
	cmp	DWORD PTR count$[rsp], 64		; 00000040H
	jg	SHORT $LN6@stb_ptrmap
	mov	rax, QWORD PTR h$[rsp]
	mov	DWORD PTR [rax+32], 0
	jmp	SHORT $LN7@stb_ptrmap
$LN6@stb_ptrmap:
	cvtsi2sd xmm0, DWORD PTR count$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fd82d82e38e38e4
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+32], eax
$LN7@stb_ptrmap:
	cvtsi2ss xmm0, DWORD PTR count$[rsp]
	mulss	xmm0, DWORD PTR __real@3e199998
	divss	xmm0, DWORD PTR __real@40000000
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+24], eax
	movsxd	rax, DWORD PTR count$[rsp]
	imul	rax, rax, 16
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR h$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR h$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN8@stb_ptrmap
	xor	eax, eax
	jmp	SHORT $LN1@stb_ptrmap
$LN8@stb_ptrmap:
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_ptrmap
$LN2@stb_ptrmap:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_ptrmap:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_ptrmap
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR h$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+rax], 2
	jmp	SHORT $LN2@stb_ptrmap
$LN3@stb_ptrmap:
	mov	eax, 1
$LN1@stb_ptrmap:
	add	rsp, 56					; 00000038H
	ret	0
stb_ptrmap_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 8
stb_hash_number PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3555
	mov	DWORD PTR [rsp+8], ecx
; Line 3556
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3557
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3558
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3559
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3560
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3561
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3562
	mov	eax, DWORD PTR hash$[rsp]
; Line 3563
	ret	0
stb_hash_number ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash2$ = 0
hash1$ = 4
str$ = 32
hash2_ptr$ = 40
stb_hash2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3493
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3494
	mov	DWORD PTR hash1$[rsp], 826366252	; 3141592cH
; Line 3495
	mov	DWORD PTR hash2$[rsp], 2012234989	; 77f044edH
$LN2@stb_hash2:
; Line 3496
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_hash2
; Line 3497
	mov	eax, DWORD PTR hash1$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR hash1$[rsp]
	shr	ecx, 25
	add	eax, ecx
	mov	rcx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	add	eax, ecx
	mov	DWORD PTR hash1$[rsp], eax
; Line 3498
	mov	eax, DWORD PTR hash2$[rsp]
	shl	eax, 11
	mov	ecx, DWORD PTR hash2$[rsp]
	shr	ecx, 21
	add	eax, ecx
	mov	rcx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	add	eax, ecx
	mov	DWORD PTR hash2$[rsp], eax
; Line 3499
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 3500
	jmp	SHORT $LN2@stb_hash2
$LN3@stb_hash2:
; Line 3501
	mov	eax, DWORD PTR hash1$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR hash2$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR hash2_ptr$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 3502
	mov	eax, DWORD PTR hash2$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR hash1$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 3503
	add	rsp, 24
	ret	0
stb_hash2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
tv94 = 4
val$1 = 8
q$ = 16
p$ = 48
len$ = 56
stb_hash_fast PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3509
$LN14:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3510
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR q$[rsp], rax
; Line 3511
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR hash$[rsp], eax
; Line 3513
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN8@stb_hash_f
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stb_hash_f
$LN8@stb_hash_f:
	xor	eax, eax
	jmp	$LN1@stb_hash_f
$LN7@stb_hash_f:
; Line 3516
	jmp	SHORT $LN4@stb_hash_f
$LN2@stb_hash_f:
	mov	eax, DWORD PTR len$[rsp]
	sub	eax, 4
	mov	DWORD PTR len$[rsp], eax
$LN4@stb_hash_f:
	cmp	DWORD PTR len$[rsp], 3
	jle	$LN3@stb_hash_f
; Line 3518
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3519
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+2]
	shl	ecx, 8
	or	eax, ecx
	shl	eax, 11
	mov	DWORD PTR val$1[rsp], eax
; Line 3520
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 16
	xor	eax, DWORD PTR hash$[rsp]
	xor	eax, DWORD PTR val$1[rsp]
	mov	DWORD PTR hash$[rsp], eax
; Line 3521
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 4
	mov	QWORD PTR q$[rsp], rax
; Line 3522
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 11
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3523
	jmp	$LN2@stb_hash_f
$LN3@stb_hash_f:
; Line 3526
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv94[rsp], eax
	cmp	DWORD PTR tv94[rsp], 1
	je	$LN11@stb_hash_f
	cmp	DWORD PTR tv94[rsp], 2
	je	$LN10@stb_hash_f
	cmp	DWORD PTR tv94[rsp], 3
	je	SHORT $LN9@stb_hash_f
	jmp	$LN5@stb_hash_f
$LN9@stb_hash_f:
; Line 3527
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3528
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3529
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 18
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3530
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 11
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3531
	jmp	$LN5@stb_hash_f
$LN10@stb_hash_f:
; Line 3532
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3533
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 11
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3534
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3535
	jmp	SHORT $LN5@stb_hash_f
$LN11@stb_hash_f:
; Line 3536
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3537
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3538
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
$LN5@stb_hash_f:
; Line 3544
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3545
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3546
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3547
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3548
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3549
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 3551
	mov	eax, DWORD PTR hash$[rsp]
$LN1@stb_hash_f:
; Line 3552
	add	rsp, 40					; 00000028H
	ret	0
stb_hash_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
stb_rehash_improved PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3488
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 3489
	mov	eax, DWORD PTR v$[rsp]
	mov	ecx, eax
	call	stb_hashptr
; Line 3490
	add	rsp, 40					; 00000028H
	ret	0
stb_rehash_improved ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
tv66 = 4
tv76 = 8
str$ = 32
len$ = 40
stb_hashlen PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3463
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3464
	mov	DWORD PTR hash$[rsp], 0
$LN2@stb_hashle:
; Line 3465
	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	jle	SHORT $LN3@stb_hashle
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_hashle
; Line 3466
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR hash$[rsp]
	shr	ecx, 25
	add	eax, ecx
	mov	rcx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	add	eax, ecx
	mov	DWORD PTR tv76[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR hash$[rsp], eax
	jmp	SHORT $LN2@stb_hashle
$LN3@stb_hashle:
; Line 3467
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 3468
	add	rsp, 24
	ret	0
stb_hashlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 0
p$ = 32
stb_hashptr PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3471
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3472
	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR x$[rsp], eax
; Line 3475
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$[rsp]
	shr	ecx, 19
	add	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3476
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3479
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3480
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3481
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3482
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 15
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3483
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 3484
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR x$[rsp]
	shr	ecx, 19
	add	eax, ecx
; Line 3485
	add	rsp, 24
	ret	0
stb_hashptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
tv73 = 4
str$ = 32
stb_hash PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3455
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3456
	mov	DWORD PTR hash$[rsp], 0
$LN2@stb_hash:
; Line 3457
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_hash
; Line 3458
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 7
	mov	ecx, DWORD PTR hash$[rsp]
	shr	ecx, 25
	add	eax, ecx
	mov	rcx, QWORD PTR str$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	add	eax, ecx
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR hash$[rsp], eax
	jmp	SHORT $LN2@stb_hash
$LN3@stb_hash:
; Line 3459
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 3460
	add	rsp, 24
	ret	0
stb_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv85 = 32
tv155 = 36
a$ = 40
p$ = 48
p$1 = 56
pp$ = 80
size$ = 88
limit$ = 96
len$ = 104
?stb__arrsize_@@YAXPEAPEAXHHH@Z PROC			; stb__arrsize_
; File W:\cpp\void\vendor\stb\stb.h
; Line 3328
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3329
	mov	rax, QWORD PTR pp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 3331
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN12@stb__arrsi
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN12@stb__arrsi
	mov	r8d, 3331				; 00000d03H
	lea	rdx, OFFSET FLAT:$SG85010
	lea	rcx, OFFSET FLAT:$SG85011
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stb__arrsi:
; Line 3332
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb__arrsi
; Line 3333
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN4@stb__arrsi
	cmp	DWORD PTR size$[rsp], 0
	jne	SHORT $LN4@stb__arrsi
	jmp	$LN1@stb__arrsi
$LN4@stb__arrsi:
; Line 3334
	mov	eax, DWORD PTR size$[rsp]
	imul	eax, DWORD PTR limit$[rsp]
	cdqe
	add	rax, 16
	mov	ecx, eax
	call	?stb__arr_malloc@@YAPEAXH@Z		; stb__arr_malloc
	mov	QWORD PTR a$[rsp], rax
; Line 3335
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR limit$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 3336
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3337
	cmp	QWORD PTR ?stb__arr_context@@3PEAXEA, 0
	je	SHORT $LN13@stb__arrsi
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN14@stb__arrsi
$LN13@stb__arrsi:
	mov	DWORD PTR tv85[rsp], 0
$LN14@stb__arrsi:
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR tv85[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3338
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+12], 1371200123		; 51bada7bH
; Line 3339
	jmp	$LN3@stb__arrsi
$LN2@stb__arrsi:
; Line 3340
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 16
	mov	QWORD PTR a$[rsp], rax
; Line 3341
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3342
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR limit$[rsp]
	cmp	DWORD PTR [rax+4], ecx
	jge	$LN5@stb__arrsi
; Line 3344
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+4], 4
	jl	SHORT $LN6@stb__arrsi
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+4]
	shl	eax, 1
	cmp	DWORD PTR limit$[rsp], eax
	jge	SHORT $LN6@stb__arrsi
; Line 3345
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+4]
	shl	eax, 1
	mov	DWORD PTR limit$[rsp], eax
$LN6@stb__arrsi:
; Line 3346
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN7@stb__arrsi
; Line 3347
	mov	eax, DWORD PTR limit$[rsp]
	imul	eax, DWORD PTR size$[rsp]
	cdqe
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	stb_realloc
	mov	QWORD PTR p$1[rsp], rax
	jmp	SHORT $LN8@stb__arrsi
$LN7@stb__arrsi:
; Line 3352
	mov	eax, DWORD PTR limit$[rsp]
	imul	eax, DWORD PTR size$[rsp]
	cdqe
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR p$1[rsp], rax
$LN8@stb__arrsi:
; Line 3354
	cmp	QWORD PTR p$1[rsp], 0
	je	SHORT $LN9@stb__arrsi
; Line 3355
	mov	rax, QWORD PTR p$1[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 3356
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR limit$[rsp]
	mov	DWORD PTR [rax+4], ecx
$LN9@stb__arrsi:
$LN5@stb__arrsi:
$LN3@stb__arrsi:
; Line 3362
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN15@stb__arrsi
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv155[rsp], eax
	jmp	SHORT $LN16@stb__arrsi
$LN15@stb__arrsi:
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv155[rsp], eax
$LN16@stb__arrsi:
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR tv155[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3363
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR pp$[rsp]
	mov	QWORD PTR [rcx], rax
$LN1@stb__arrsi:
; Line 3364
	add	rsp, 72					; 00000048H
	ret	0
?stb__arrsize_@@YAXPEAPEAXHHH@Z ENDP			; stb__arrsize_
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 48
?stb__arr_malloc@@YAPEAXH@Z PROC			; stb__arr_malloc
; File W:\cpp\void\vendor\stb\stb.h
; Line 3296
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 3297
	cmp	QWORD PTR ?stb__arr_context@@3PEAXEA, 0
	je	SHORT $LN2@stb__arr_m
; Line 3298
	movsxd	rax, DWORD PTR size$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR ?stb__arr_context@@3PEAXEA
	call	stb_malloc
	jmp	SHORT $LN1@stb__arr_m
$LN2@stb__arr_m:
; Line 3299
	movsxd	rax, DWORD PTR size$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
$LN1@stb__arr_m:
; Line 3300
	add	rsp, 40					; 00000028H
	ret	0
?stb__arr_malloc@@YAPEAXH@Z ENDP			; stb__arr_malloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
z$1 = 36
p$ = 40
tv88 = 48
pp$ = 80
size$ = 88
i$ = 96
n$ = 104
stb__arr_insertn_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3390
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3391
	mov	rax, QWORD PTR pp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 3392
	cmp	DWORD PTR n$[rsp], 0
	je	$LN2@stb__arr_i
; Line 3395
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN3@stb__arr_i
; Line 3396
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR pp$[rsp]
	call	stb__arr_addlen_
; Line 3397
	jmp	$LN1@stb__arr_i
$LN3@stb__arr_i:
; Line 3400
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN5@stb__arr_i
	mov	rax, QWORD PTR p$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN6@stb__arr_i
$LN5@stb__arr_i:
	mov	DWORD PTR tv72[rsp], 0
$LN6@stb__arr_i:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR z$1[rsp], eax
; Line 3401
	mov	r8d, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	stb__arr_addlen_
; Line 3402
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR z$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR size$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR size$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, DWORD PTR n$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	add	r8d, edx
	mov	edx, r8d
	imul	edx, DWORD PTR size$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR p$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv88[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv88[rsp]
	mov	rcx, rax
	call	memmove
$LN2@stb__arr_i:
; Line 3404
	mov	rax, QWORD PTR pp$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax], rcx
$LN1@stb__arr_i:
; Line 3405
	add	rsp, 72					; 00000048H
	ret	0
stb__arr_insertn_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
p$ = 40
tv82 = 48
pp$ = 80
size$ = 88
i$ = 96
n$ = 104
stb__arr_deleten_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3408
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3409
	mov	rax, QWORD PTR pp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 3410
	cmp	DWORD PTR n$[rsp], 0
	je	$LN2@stb__arr_d
; Line 3411
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN4@stb__arr_d
	mov	rax, QWORD PTR p$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN5@stb__arr_d
$LN4@stb__arr_d:
	mov	DWORD PTR tv69[rsp], 0
$LN5@stb__arr_d:
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR tv69[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR size$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, DWORD PTR size$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, DWORD PTR i$[rsp]
	imul	edx, DWORD PTR size$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR p$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv82[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv82[rsp]
	mov	rcx, rax
	call	memmove
; Line 3412
	mov	rax, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax-16]
	sub	eax, ecx
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx-16], eax
$LN2@stb__arr_d:
; Line 3414
	mov	rax, QWORD PTR pp$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3415
	add	rsp, 72					; 00000048H
	ret	0
stb__arr_deleten_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
p$ = 64
size$ = 72
addlen$ = 80
stb__arr_addlen_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3385
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3386
	mov	rax, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stb__arr_a
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN4@stb__arr_a
$LN3@stb__arr_a:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stb__arr_a:
	mov	eax, DWORD PTR addlen$[rsp]
	mov	ecx, DWORD PTR tv67[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	stb__arr_setlen_
; Line 3387
	add	rsp, 56					; 00000038H
	ret	0
stb__arr_addlen_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
p$ = 40
pp$ = 64
size$ = 72
newlen$ = 80
stb__arr_setlen_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3374
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3375
	mov	rax, QWORD PTR pp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 3376
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN6@stb__arr_s
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN6@stb__arr_s
	mov	r8d, 3376				; 00000d30H
	lea	rdx, OFFSET FLAT:$SG85045
	lea	rcx, OFFSET FLAT:$SG85046
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stb__arr_s:
; Line 3377
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN7@stb__arr_s
	mov	rax, QWORD PTR p$[rsp]
	mov	eax, DWORD PTR [rax-12]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN8@stb__arr_s
$LN7@stb__arr_s:
	mov	DWORD PTR tv75[rsp], 0
$LN8@stb__arr_s:
	mov	eax, DWORD PTR newlen$[rsp]
	cmp	DWORD PTR tv75[rsp], eax
	jl	SHORT $LN4@stb__arr_s
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb__arr_s
$LN4@stb__arr_s:
; Line 3378
	mov	r9d, DWORD PTR newlen$[rsp]
	mov	r8d, DWORD PTR newlen$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR pp$[rsp]
	call	?stb__arrsize_@@YAXPEAPEAXHHH@Z		; stb__arrsize_
; Line 3379
	jmp	SHORT $LN3@stb__arr_s
$LN2@stb__arr_s:
; Line 3380
	mov	rax, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR newlen$[rsp]
	mov	DWORD PTR [rax-16], ecx
$LN3@stb__arr_s:
; Line 3382
	add	rsp, 56					; 00000038H
	ret	0
stb__arr_setlen_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
p$ = 40
pp$ = 64
size$ = 72
limit$ = 80
stb__arr_setsize_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3367
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3368
	mov	rax, QWORD PTR pp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 3369
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN3@stb__arr_s
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN3@stb__arr_s
	mov	r8d, 3369				; 00000d29H
	lea	rdx, OFFSET FLAT:$SG85032
	lea	rcx, OFFSET FLAT:$SG85033
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stb__arr_s:
; Line 3370
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN4@stb__arr_s
	mov	rax, QWORD PTR p$[rsp]
	mov	eax, DWORD PTR [rax-16]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN5@stb__arr_s
$LN4@stb__arr_s:
	mov	DWORD PTR tv75[rsp], 0
$LN5@stb__arr_s:
	mov	r9d, DWORD PTR tv75[rsp]
	mov	r8d, DWORD PTR limit$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR pp$[rsp]
	call	?stb__arrsize_@@YAXPEAPEAXHHH@Z		; stb__arrsize_
; Line 3371
	add	rsp, 56					; 00000038H
	ret	0
stb__arr_setsize_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv92 = 32
q$ = 40
p$ = 64
elem_size$ = 72
stb__arr_copy_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3303
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3305
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb__arr_c
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb__arr_c
$LN2@stb__arr_c:
; Line 3306
	mov	rax, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR elem_size$[rsp]
	imul	ecx, DWORD PTR [rax-12]
	mov	eax, ecx
	cdqe
	add	rax, 16
	mov	ecx, eax
	call	?stb__arr_malloc@@YAPEAXH@Z		; stb__arr_malloc
	mov	QWORD PTR q$[rsp], rax
; Line 3307
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN4@stb__arr_c
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN4@stb__arr_c
	mov	r8d, 3307				; 00000cebH
	lea	rdx, OFFSET FLAT:$SG84979
	lea	rcx, OFFSET FLAT:$SG84980
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stb__arr_c:
; Line 3308
	mov	rax, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR elem_size$[rsp]
	imul	ecx, DWORD PTR [rax-16]
	mov	eax, ecx
	cdqe
	add	rax, 16
	mov	rcx, QWORD PTR p$[rsp]
	sub	rcx, 16
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR q$[rsp]
	call	memcpy
; Line 3309
	cmp	QWORD PTR ?stb__arr_context@@3PEAXEA, 0
	je	SHORT $LN5@stb__arr_c
	mov	DWORD PTR tv92[rsp], 1
	jmp	SHORT $LN6@stb__arr_c
$LN5@stb__arr_c:
	mov	DWORD PTR tv92[rsp], 0
$LN6@stb__arr_c:
	mov	rax, QWORD PTR q$[rsp]
	mov	ecx, DWORD PTR tv92[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3310
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 16
$LN1@stb__arr_c:
; Line 3311
	add	rsp, 56					; 00000038H
	ret	0
stb__arr_copy_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
q$1 = 40
pp$ = 64
stb_arr_free_ PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3314
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3315
	mov	rax, QWORD PTR pp$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
; Line 3316
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN6@stb_arr_fr
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax-4], 1371200123		; 51bada7bH
	je	SHORT $LN6@stb_arr_fr
	mov	r8d, 3316				; 00000cf4H
	lea	rdx, OFFSET FLAT:$SG84990
	lea	rcx, OFFSET FLAT:$SG84991
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stb_arr_fr:
; Line 3317
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stb_arr_fr
; Line 3318
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 16
	mov	QWORD PTR q$1[rsp], rax
; Line 3319
	mov	rax, QWORD PTR q$1[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN3@stb_arr_fr
; Line 3320
	mov	rcx, QWORD PTR q$1[rsp]
	call	stb_free
	jmp	SHORT $LN4@stb_arr_fr
$LN3@stb_arr_fr:
; Line 3322
	mov	rcx, QWORD PTR q$1[rsp]
	call	QWORD PTR __imp_free
$LN4@stb_arr_fr:
$LN2@stb_arr_fr:
; Line 3324
	mov	rax, QWORD PTR pp$[rsp]
	mov	QWORD PTR [rax], 0
; Line 3325
	add	rsp, 56					; 00000038H
	ret	0
stb_arr_free_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 0
p$ = 32
stb_arr_malloc_parent PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3280
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3281
	mov	rax, QWORD PTR ?stb__arr_context@@3PEAXEA
	mov	QWORD PTR q$[rsp], rax
; Line 3282
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR ?stb__arr_context@@3PEAXEA, rax
; Line 3283
	mov	rax, QWORD PTR q$[rsp]
; Line 3284
	add	rsp, 24
	ret	0
stb_arr_malloc_parent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
target$ = 64
context$ = 72
stb_arr_malloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3287
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3288
	mov	edx, 16
	mov	rcx, QWORD PTR context$[rsp]
	call	stb_malloc
	mov	QWORD PTR q$[rsp], rax
; Line 3289
	mov	rax, QWORD PTR q$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR q$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3290
	mov	rax, QWORD PTR q$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 3291
	mov	rax, QWORD PTR q$[rsp]
	mov	DWORD PTR [rax+12], 1371200123		; 51bada7bH
; Line 3292
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR target$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3293
	add	rsp, 56					; 00000038H
	ret	0
stb_arr_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
ptr$ = 56
newsize$ = 64
?stb_realloc_c@@YAPEAXPEAX0_K@Z PROC			; stb_realloc_c
; File W:\cpp\void\vendor\stb\stb.h
; Line 3050
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3051
	cmp	QWORD PTR ptr$[rsp], 0
	jne	SHORT $LN2@stb_reallo
	mov	rdx, QWORD PTR newsize$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	stb_malloc
	jmp	SHORT $LN1@stb_reallo
$LN2@stb_reallo:
; Line 3052
	cmp	QWORD PTR newsize$[rsp], 0
	jne	SHORT $LN3@stb_reallo
	mov	rcx, QWORD PTR ptr$[rsp]
	call	stb_free
	xor	eax, eax
	jmp	SHORT $LN1@stb_reallo
$LN3@stb_reallo:
; Line 3054
	mov	rdx, QWORD PTR newsize$[rsp]
	mov	rcx, QWORD PTR ptr$[rsp]
	call	stb_realloc
$LN1@stb_reallo:
; Line 3055
	add	rsp, 40					; 00000028H
	ret	0
?stb_realloc_c@@YAPEAXPEAX0_K@Z ENDP			; stb_realloc_c
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
size$ = 56
?stb_malloc_string@@YAPEADPEAX_K@Z PROC			; stb_malloc_string
; File W:\cpp\void\vendor\stb\stb.h
; Line 3003
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3004
	mov	r9d, 1
	mov	r8d, 4
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ; malloc_base
; Line 3005
	add	rsp, 40					; 00000028H
	ret	0
?stb_malloc_string@@YAPEADPEAX_K@Z ENDP			; stb_malloc_string
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
align_proposed$1 = 32
tv87 = 36
tv180 = 40
p$ = 48
s$2 = 56
src$ = 64
s$3 = 72
s$4 = 80
context$ = 112
size$ = 120
t$ = 128
align$ = 136
?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z PROC	; malloc_base
; File W:\cpp\void\vendor\stb\stb.h
; Line 2897
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2900
	mov	rcx, QWORD PTR context$[rsp]
	call	?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z ; stb__get_context
	mov	QWORD PTR src$[rsp], rax
; Line 2902
	cmp	DWORD PTR align$[rsp], 0
	jg	$LN4@malloc_bas
; Line 2905
	mov	ecx, DWORD PTR size$[rsp]
	call	stb_lowbit8
	mov	ecx, 1
	mov	DWORD PTR tv180[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv180[rsp]
	shl	eax, cl
	mov	DWORD PTR align_proposed$1[rsp], eax
; Line 2907
	cmp	DWORD PTR align_proposed$1[rsp], 0
	jge	SHORT $LN5@malloc_bas
; Line 2908
	mov	DWORD PTR align_proposed$1[rsp], 4
$LN5@malloc_bas:
; Line 2910
	cmp	DWORD PTR align_proposed$1[rsp], 0
	jne	SHORT $LN6@malloc_bas
; Line 2911
	cmp	QWORD PTR size$[rsp], 0
	jne	SHORT $LN7@malloc_bas
; Line 2912
	mov	DWORD PTR align_proposed$1[rsp], 1
	jmp	SHORT $LN8@malloc_bas
$LN7@malloc_bas:
; Line 2914
	mov	DWORD PTR align_proposed$1[rsp], 256	; 00000100H
$LN8@malloc_bas:
$LN6@malloc_bas:
; Line 2920
	cmp	DWORD PTR align$[rsp], 0
	jge	SHORT $LN9@malloc_bas
; Line 2921
	mov	eax, DWORD PTR align$[rsp]
	neg	eax
	cmp	DWORD PTR align_proposed$1[rsp], eax
	jle	SHORT $LN10@malloc_bas
; Line 2922
	mov	eax, DWORD PTR align$[rsp]
	neg	eax
	mov	DWORD PTR align_proposed$1[rsp], eax
$LN10@malloc_bas:
$LN9@malloc_bas:
; Line 2925
	mov	eax, DWORD PTR align_proposed$1[rsp]
	mov	DWORD PTR align$[rsp], eax
$LN4@malloc_bas:
; Line 2928
	movsxd	rax, DWORD PTR align$[rsp]
	mov	rcx, rax
	call	stb_is_pow2
	test	eax, eax
	jne	SHORT $LN23@malloc_bas
	mov	r8d, 2928				; 00000b70H
	lea	rdx, OFFSET FLAT:$SG84814
	lea	rcx, OFFSET FLAT:$SG84815
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@malloc_bas:
; Line 2931
	cmp	DWORD PTR t$[rsp], 0
	jne	SHORT $LN11@malloc_bas
	cmp	DWORD PTR align$[rsp], 8
	jle	SHORT $LN11@malloc_bas
; Line 2932
	mov	DWORD PTR t$[rsp], 2
$LN11@malloc_bas:
; Line 2934
	mov	eax, DWORD PTR t$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 0
	je	$LN14@malloc_bas
	cmp	DWORD PTR tv87[rsp], 1
	je	$LN18@malloc_bas
	cmp	DWORD PTR tv87[rsp], 2
	je	SHORT $LN12@malloc_bas
	cmp	DWORD PTR tv87[rsp], 4
	je	$LN16@malloc_bas
	jmp	$LN21@malloc_bas
$LN12@malloc_bas:
; Line 2936
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR s$2[rsp], rax
; Line 2937
	cmp	QWORD PTR s$2[rsp], 0
	jne	SHORT $LN13@malloc_bas
	xor	eax, eax
	jmp	$LN1@malloc_bas
$LN13@malloc_bas:
; Line 2938
	mov	rax, QWORD PTR s$2[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR p$[rsp], rax
; Line 2939
	mov	rax, QWORD PTR s$2[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 2940
	mov	rdx, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z ; stb__insert_alloc
; Line 2942
	mov	rax, QWORD PTR s$2[rsp]
	mov	QWORD PTR [rax+24], 2
; Line 2943
	jmp	$LN2@malloc_bas
$LN14@malloc_bas:
; Line 2947
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 16
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR s$3[rsp], rax
; Line 2948
	cmp	QWORD PTR s$3[rsp], 0
	jne	SHORT $LN15@malloc_bas
	xor	eax, eax
	jmp	$LN1@malloc_bas
$LN15@malloc_bas:
; Line 2949
	mov	rax, QWORD PTR s$3[rsp]
	add	rax, 16
	mov	QWORD PTR p$[rsp], rax
; Line 2950
	mov	rdx, QWORD PTR s$3[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z ; stb__insert_nochild
; Line 2951
	jmp	$LN2@malloc_bas
$LN16@malloc_bas:
; Line 2955
	xor	r9d, r9d
	mov	r8d, DWORD PTR align$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z ; stb__alloc_chunk
	mov	QWORD PTR p$[rsp], rax
; Line 2956
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN17@malloc_bas
	xor	eax, eax
	jmp	$LN1@malloc_bas
$LN17@malloc_bas:
; Line 2957
	jmp	$LN2@malloc_bas
$LN18@malloc_bas:
; Line 2962
	movsxd	rax, DWORD PTR align$[rsp]
	cmp	rax, 8
	jae	SHORT $LN19@malloc_bas
	mov	DWORD PTR align$[rsp], 8
$LN19@malloc_bas:
; Line 2963
	mov	r9d, 8
	mov	r8d, DWORD PTR align$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z ; stb__alloc_chunk
	mov	QWORD PTR s$4[rsp], rax
; Line 2964
	cmp	QWORD PTR s$4[rsp], 0
	jne	SHORT $LN20@malloc_bas
	xor	eax, eax
	jmp	SHORT $LN1@malloc_bas
$LN20@malloc_bas:
; Line 2965
	mov	rax, QWORD PTR src$[rsp]
	inc	rax
	mov	rcx, QWORD PTR s$4[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2966
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
; Line 2967
	jmp	SHORT $LN2@malloc_bas
$LN21@malloc_bas:
; Line 2970
	mov	QWORD PTR p$[rsp], 0
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN24@malloc_bas
	mov	r8d, 2970				; 00000b9aH
	lea	rdx, OFFSET FLAT:$SG84827
	lea	rcx, OFFSET FLAT:$SG84828
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN24@malloc_bas:
$LN2@malloc_bas:
; Line 2973
	mov	eax, DWORD PTR ?stb_alloc_count_alloc@@3HA ; stb_alloc_count_alloc
	inc	eax
	mov	DWORD PTR ?stb_alloc_count_alloc@@3HA, eax ; stb_alloc_count_alloc
; Line 2974
	mov	rax, QWORD PTR p$[rsp]
$LN1@malloc_bas:
; Line 2975
	add	rsp, 104				; 00000068H
	ret	0
?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ENDP	; malloc_base
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
src$ = 64
s$ = 72
?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z PROC ; stb__insert_nochild
; File W:\cpp\void\vendor\stb\stb.h
; Line 2888
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2889
	mov	rax, QWORD PTR src$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 2890
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 2891
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR src$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 2892
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@stb__inser
; Line 2893
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR tv75[rsp], rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv75[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@stb__inser:
; Line 2894
	add	rsp, 56					; 00000038H
	ret	0
?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z ENDP ; stb__insert_nochild
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
src$ = 64
s$ = 72
?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z PROC		; stb__insert_alloc
; File W:\cpp\void\vendor\stb\stb.h
; Line 2879
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2880
	mov	rax, QWORD PTR src$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2881
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+16], rcx
; Line 2882
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, QWORD PTR src$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 2883
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@stb__inser
; Line 2884
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	QWORD PTR tv75[rsp], rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv75[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@stb__inser:
; Line 2885
	add	rsp, 56					; 00000038H
	ret	0
?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z ENDP		; stb__insert_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
u$1 = 32
s$2 = 40
context$ = 64
?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z PROC	; stb__get_context
; File W:\cpp\void\vendor\stb\stb.h
; Line 2863
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2864
	cmp	QWORD PTR context$[rsp], 0
	jne	SHORT $LN2@stb__get_c
; Line 2865
	lea	rax, OFFSET FLAT:?stb__alloc_global@@3Ustb__alloc@@A
	jmp	SHORT $LN1@stb__get_c
; Line 2866
	jmp	SHORT $LN3@stb__get_c
$LN2@stb__get_c:
; Line 2867
	mov	rcx, QWORD PTR context$[rsp]
	call	?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ; stb__identify
	mov	DWORD PTR u$1[rsp], eax
; Line 2869
	cmp	DWORD PTR u$1[rsp], 1
	jne	SHORT $LN4@stb__get_c
; Line 2870
	mov	rax, QWORD PTR context$[rsp]
	sub	rax, 8
	mov	QWORD PTR s$2[rsp], rax
; Line 2871
	mov	rax, QWORD PTR s$2[rsp]
	mov	rax, QWORD PTR [rax]
	dec	rax
	jmp	SHORT $LN1@stb__get_c
; Line 2872
	jmp	SHORT $LN5@stb__get_c
$LN4@stb__get_c:
; Line 2873
	mov	rax, QWORD PTR context$[rsp]
	sub	rax, 32					; 00000020H
$LN5@stb__get_c:
$LN3@stb__get_c:
$LN1@stb__get_c:
; Line 2876
	add	rsp, 56					; 00000038H
	ret	0
?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z ENDP	; stb__get_context
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
chunk_size$1 = 32
c$ = 40
p$ = 48
n$2 = 56
src$ = 80
size$ = 88
align$ = 96
pre_align$ = 104
?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z PROC	; stb__alloc_chunk
; File W:\cpp\void\vendor\stb\stb.h
; Line 2799
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2801
	mov	rax, QWORD PTR src$[rsp]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, 2
	mov	QWORD PTR c$[rsp], rax
; Line 2803
	cmp	QWORD PTR c$[rsp], 0
	je	$LN4@stb__alloc
	mov	eax, DWORD PTR ?stb_alloc_chunk_size@@3HA ; stb_alloc_chunk_size
	cmp	DWORD PTR size$[rsp], eax
	jg	$LN4@stb__alloc
; Line 2805
	mov	r9d, DWORD PTR pre_align$[rsp]
	mov	r8d, DWORD PTR align$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z ; stb__try_chunk
	mov	QWORD PTR p$[rsp], rax
; Line 2806
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN5@stb__alloc
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb__alloc
$LN5@stb__alloc:
; Line 2809
	mov	rax, QWORD PTR c$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@stb__alloc
; Line 2810
	mov	r9d, DWORD PTR pre_align$[rsp]
	mov	r8d, DWORD PTR align$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rax, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z ; stb__try_chunk
	mov	QWORD PTR p$[rsp], rax
; Line 2811
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN7@stb__alloc
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb__alloc
$LN7@stb__alloc:
; Line 2817
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z ; stb__sort_chunks
; Line 2818
	mov	rax, QWORD PTR src$[rsp]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, 2
	mov	QWORD PTR c$[rsp], rax
$LN6@stb__alloc:
$LN4@stb__alloc:
; Line 2826
	mov	eax, DWORD PTR ?stb_alloc_chunk_size@@3HA ; stb_alloc_chunk_size
	mov	DWORD PTR chunk_size$1[rsp], eax
; Line 2828
	mov	eax, DWORD PTR chunk_size$1[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jle	SHORT $LN8@stb__alloc
; Line 2829
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR chunk_size$1[rsp], eax
$LN8@stb__alloc:
; Line 2831
	movsxd	rax, DWORD PTR pre_align$[rsp]
	add	rax, 16
	cmp	rax, 16
	jbe	SHORT $LN13@stb__alloc
	mov	r8d, 2831				; 00000b0fH
	lea	rdx, OFFSET FLAT:$SG84746
	lea	rcx, OFFSET FLAT:$SG84747
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@stb__alloc:
$LN2@stb__alloc:
; Line 2836
	xor	eax, eax
	cmp	eax, 1
	je	$LN3@stb__alloc
; Line 2837
	mov	eax, DWORD PTR chunk_size$1[rsp]
	add	eax, 16
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR n$2[rsp], rax
; Line 2838
	cmp	QWORD PTR n$2[rsp], 0
	jne	SHORT $LN9@stb__alloc
	xor	eax, eax
	jmp	$LN1@stb__alloc
$LN9@stb__alloc:
; Line 2840
	movsxd	rax, DWORD PTR chunk_size$1[rsp]
	sub	rax, 16
	mov	rcx, QWORD PTR n$2[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 2842
	mov	r9d, DWORD PTR pre_align$[rsp]
	mov	r8d, DWORD PTR align$[rsp]
	mov	edx, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR n$2[rsp]
	call	?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z ; stb__try_chunk
	mov	QWORD PTR p$[rsp], rax
; Line 2843
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN10@stb__alloc
; Line 2844
	mov	rax, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2845
	mov	rax, QWORD PTR n$2[rsp]
	add	rax, 2
	mov	rcx, QWORD PTR src$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 2849
	mov	rax, QWORD PTR n$2[rsp]
	mov	DWORD PTR [rax+12], 1
; Line 2850
	mov	eax, DWORD PTR chunk_size$1[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jne	SHORT $LN11@stb__alloc
; Line 2851
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z ; stb__sort_chunks
$LN11@stb__alloc:
; Line 2853
	mov	rax, QWORD PTR p$[rsp]
	jmp	SHORT $LN1@stb__alloc
$LN10@stb__alloc:
; Line 2856
	mov	rcx, QWORD PTR n$2[rsp]
	call	QWORD PTR __imp_free
; Line 2857
	mov	eax, DWORD PTR chunk_size$1[rsp]
	mov	ecx, DWORD PTR align$[rsp]
	lea	eax, DWORD PTR [rax+rcx+16]
	mov	DWORD PTR chunk_size$1[rsp], eax
; Line 2858
	jmp	$LN2@stb__alloc
$LN3@stb__alloc:
$LN1@stb__alloc:
; Line 2860
	add	rsp, 72					; 00000048H
	ret	0
?stb__alloc_chunk@@YAPEAXPEAUstb__alloc@@HHH@Z ENDP	; stb__alloc_chunk
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
d$ = 8
src$ = 32
?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z PROC		; stb__sort_chunks
; File W:\cpp\void\vendor\stb\stb.h
; Line 2785
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2787
	mov	rax, QWORD PTR src$[rsp]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, 2
	mov	QWORD PTR c$[rsp], rax
; Line 2788
	cmp	QWORD PTR c$[rsp], 0
	jne	SHORT $LN2@stb__sort_
	jmp	SHORT $LN1@stb__sort_
$LN2@stb__sort_:
; Line 2789
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR d$[rsp], rax
; Line 2790
	cmp	QWORD PTR d$[rsp], 0
	jne	SHORT $LN3@stb__sort_
	jmp	SHORT $LN1@stb__sort_
$LN3@stb__sort_:
; Line 2791
	mov	rax, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+8], ecx
	jle	SHORT $LN4@stb__sort_
	jmp	SHORT $LN1@stb__sort_
$LN4@stb__sort_:
; Line 2793
	mov	rax, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2794
	mov	rax, QWORD PTR d$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2795
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 2
	mov	rcx, QWORD PTR src$[rsp]
	mov	QWORD PTR [rcx+24], rax
$LN1@stb__sort_:
; Line 2796
	add	rsp, 24
	ret	0
?stb__sort_chunks@@YAXPEAUstb__alloc@@@Z ENDP		; stb__sort_chunks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
start_offset$ = 32
memblock$ = 40
q$ = 48
iq$ = 56
c$ = 80
size$ = 88
align$ = 96
pre_align$ = 104
?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z PROC	; stb__try_chunk
; File W:\cpp\void\vendor\stb\stb.h
; Line 2750
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2751
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	mov	QWORD PTR memblock$[rsp], rax
; Line 2759
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	DWORD PTR start_offset$[rsp], eax
; Line 2762
	movsxd	rax, DWORD PTR start_offset$[rsp]
	mov	rcx, QWORD PTR memblock$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
; Line 2763
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR iq$[rsp], rax
; Line 2770
	mov	eax, DWORD PTR align$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR iq$[rsp]
	and	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR start_offset$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR start_offset$[rsp], eax
; Line 2771
	movsxd	rax, DWORD PTR start_offset$[rsp]
	mov	rcx, QWORD PTR memblock$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR align$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	and	rax, rcx
	test	rax, rax
	je	SHORT $LN4@stb__try_c
	mov	r8d, 2771				; 00000ad3H
	lea	rdx, OFFSET FLAT:$SG84700
	lea	rcx, OFFSET FLAT:$SG84701
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stb__try_c:
; Line 2774
	mov	eax, DWORD PTR pre_align$[rsp]
	mov	ecx, DWORD PTR start_offset$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR start_offset$[rsp], eax
; Line 2776
	cmp	DWORD PTR start_offset$[rsp], 0
	jl	SHORT $LN2@stb__try_c
; Line 2777
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR start_offset$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 2778
	movsxd	rax, DWORD PTR start_offset$[rsp]
	mov	rcx, QWORD PTR memblock$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stb__try_c
$LN2@stb__try_c:
; Line 2781
	xor	eax, eax
$LN1@stb__try_c:
; Line 2782
	add	rsp, 72					; 00000048H
	ret	0
?stb__try_chunk@@YAPEAXPEAUstb__chunk@@HHH@Z ENDP	; stb__try_chunk
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$1 = 32
s$2 = 40
p$ = 64
?stb__prevn@@YAPEAPEAPEAXPEAX@Z PROC			; stb__prevn
; File W:\cpp\void\vendor\stb\stb.h
; Line 2639
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2640
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ; stb__identify
	cmp	eax, 2
	jne	SHORT $LN2@stb__prevn
; Line 2641
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR s$1[rsp], rax
; Line 2642
	mov	rax, QWORD PTR s$1[rsp]
	jmp	SHORT $LN1@stb__prevn
; Line 2643
	jmp	SHORT $LN3@stb__prevn
$LN2@stb__prevn:
; Line 2644
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 16
	mov	QWORD PTR s$2[rsp], rax
; Line 2645
	mov	rax, QWORD PTR s$2[rsp]
	add	rax, 8
$LN3@stb__prevn:
$LN1@stb__prevn:
; Line 2647
	add	rsp, 56					; 00000038H
	ret	0
?stb__prevn@@YAPEAPEAPEAXPEAX@Z ENDP			; stb__prevn
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 0
p$ = 32
?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z PROC	; stb__identify
; File W:\cpp\void\vendor\stb\stb.h
; Line 2633
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2634
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR q$[rsp], rax
; Line 2635
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	and	rax, 3
; Line 2636
	add	rsp, 24
	ret	0
?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ENDP	; stb__identify
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
s$1 = 40
n$2 = 48
p$ = 80
parent$ = 88
stb_malloc_validate PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2711
$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2712
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN4@stb_malloc
	jmp	$LN1@stb_malloc
$LN4@stb_malloc:
; Line 2714
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ; stb__identify
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN6@stb_malloc
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN5@stb_malloc
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN9@stb_malloc
	jmp	$LN13@stb_malloc
$LN5@stb_malloc:
; Line 2716
	jmp	$LN1@stb_malloc
$LN6@stb_malloc:
; Line 2718
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 16
	mov	QWORD PTR n$2[rsp], rax
; Line 2719
	mov	rax, QWORD PTR n$2[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN7@stb_malloc
; Line 2720
	mov	rax, QWORD PTR n$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN15@stb_malloc
	mov	r8d, 2720				; 00000aa0H
	lea	rdx, OFFSET FLAT:$SG84665
	lea	rcx, OFFSET FLAT:$SG84666
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb_malloc:
$LN7@stb_malloc:
; Line 2721
	mov	rax, QWORD PTR n$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@stb_malloc
; Line 2722
	mov	rax, QWORD PTR n$2[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR n$2[rsp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN16@stb_malloc
	mov	r8d, 2722				; 00000aa2H
	lea	rdx, OFFSET FLAT:$SG84668
	lea	rcx, OFFSET FLAT:$SG84669
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_malloc:
; Line 2723
	mov	rdx, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR n$2[rsp]
	call	stb_malloc_validate
$LN8@stb_malloc:
; Line 2725
	jmp	$LN1@stb_malloc
$LN9@stb_malloc:
; Line 2728
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR s$1[rsp], rax
; Line 2730
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@stb_malloc
; Line 2731
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN17@stb_malloc
	mov	r8d, 2731				; 00000aabH
	lea	rdx, OFFSET FLAT:$SG84672
	lea	rcx, OFFSET FLAT:$SG84673
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@stb_malloc:
$LN10@stb_malloc:
; Line 2733
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN11@stb_malloc
; Line 2734
	mov	rax, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR s$1[rsp]
	add	rcx, 8
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN18@stb_malloc
	mov	r8d, 2734				; 00000aaeH
	lea	rdx, OFFSET FLAT:$SG84675
	lea	rcx, OFFSET FLAT:$SG84676
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stb_malloc:
; Line 2735
	mov	rdx, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stb_malloc_validate
$LN11@stb_malloc:
; Line 2738
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN12@stb_malloc
; Line 2739
	mov	rax, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR s$1[rsp]
	add	rcx, 16
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN19@stb_malloc
	mov	r8d, 2739				; 00000ab3H
	lea	rdx, OFFSET FLAT:$SG84678
	lea	rcx, OFFSET FLAT:$SG84679
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@stb_malloc:
; Line 2740
	mov	rdx, QWORD PTR parent$[rsp]
	mov	rax, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	stb_malloc_validate
$LN12@stb_malloc:
; Line 2742
	jmp	SHORT $LN1@stb_malloc
$LN13@stb_malloc:
; Line 2745
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN20@stb_malloc
	mov	r8d, 2745				; 00000ab9H
	lea	rdx, OFFSET FLAT:$SG84681
	lea	rcx, OFFSET FLAT:$SG84682
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@stb_malloc:
$LN1@stb_malloc:
; Line 2747
	add	rsp, 72					; 00000048H
	ret	0
stb_malloc_validate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
s$1 = 40
s$2 = 48
src$ = 56
tv86 = 64
tv132 = 72
new_context$ = 96
ptr$ = 104
stb_reassign PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3058
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3059
	mov	rcx, QWORD PTR new_context$[rsp]
	call	?stb__get_context@@YAPEAUstb__alloc@@PEAX@Z ; stb__get_context
	mov	QWORD PTR src$[rsp], rax
; Line 3061
	mov	rcx, QWORD PTR ptr$[rsp]
	call	?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ; stb__identify
	mov	DWORD PTR t$[rsp], eax
; Line 3062
	cmp	DWORD PTR t$[rsp], 2
	je	SHORT $LN7@stb_reassi
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN7@stb_reassi
	mov	r8d, 3062				; 00000bf6H
	lea	rdx, OFFSET FLAT:$SG84896
	lea	rcx, OFFSET FLAT:$SG84897
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb_reassi:
; Line 3064
	cmp	DWORD PTR t$[rsp], 2
	jne	SHORT $LN2@stb_reassi
; Line 3065
	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR s$1[rsp], rax
; Line 3068
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax], rcx
; Line 3069
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN4@stb_reassi
; Line 3070
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv86[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv86[rsp]
	mov	QWORD PTR [rax], rcx
$LN4@stb_reassi:
; Line 3072
	mov	rdx, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__insert_alloc@@YAXPEAUstb__alloc@@0@Z ; stb__insert_alloc
; Line 3073
	jmp	SHORT $LN3@stb_reassi
$LN2@stb_reassi:
; Line 3074
	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 16
	mov	QWORD PTR s$2[rsp], rax
; Line 3077
	mov	rax, QWORD PTR s$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 3078
	mov	rax, QWORD PTR s$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stb_reassi
; Line 3079
	mov	rax, QWORD PTR s$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv132[rsp], rax
	mov	rax, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv132[rsp]
	mov	QWORD PTR [rax], rcx
$LN5@stb_reassi:
; Line 3081
	mov	rdx, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb__insert_nochild@@YAXPEAUstb__alloc@@PEAUstb__nochildren@@@Z ; stb__insert_nochild
$LN3@stb_reassi:
; Line 3083
	add	rsp, 88					; 00000058H
	ret	0
stb_reassign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
s$1 = 40
s$2 = 48
tv128 = 56
tv134 = 64
tv152 = 72
ptr$ = 96
newsize$ = 104
stb_realloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 3008
$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3011
	cmp	QWORD PTR ptr$[rsp], 0
	jne	SHORT $LN2@stb_reallo
	mov	rdx, QWORD PTR newsize$[rsp]
	xor	ecx, ecx
	call	stb_malloc
	jmp	$LN1@stb_reallo
$LN2@stb_reallo:
; Line 3012
	cmp	QWORD PTR newsize$[rsp], 0
	jne	SHORT $LN3@stb_reallo
	mov	rcx, QWORD PTR ptr$[rsp]
	call	stb_free
	xor	eax, eax
	jmp	$LN1@stb_reallo
$LN3@stb_reallo:
; Line 3014
	mov	rcx, QWORD PTR ptr$[rsp]
	call	?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ; stb__identify
	mov	DWORD PTR t$[rsp], eax
; Line 3015
	cmp	DWORD PTR t$[rsp], 2
	je	SHORT $LN12@stb_reallo
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN12@stb_reallo
	mov	r8d, 3015				; 00000bc7H
	lea	rdx, OFFSET FLAT:$SG84868
	lea	rcx, OFFSET FLAT:$SG84869
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stb_reallo:
; Line 3017
	cmp	DWORD PTR t$[rsp], 2
	jne	$LN4@stb_reallo
; Line 3018
	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR s$1[rsp], rax
; Line 3020
	mov	rax, QWORD PTR newsize$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR s$1[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR s$1[rsp], rax
; Line 3021
	cmp	QWORD PTR s$1[rsp], 0
	jne	SHORT $LN6@stb_reallo
	xor	eax, eax
	jmp	$LN1@stb_reallo
$LN6@stb_reallo:
; Line 3023
	mov	rax, QWORD PTR s$1[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR ptr$[rsp], rax
; Line 3026
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR ptr$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3027
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN7@stb_reallo
; Line 3028
	mov	rax, QWORD PTR s$1[rsp]
	add	rax, 16
	mov	QWORD PTR tv128[rsp], rax
	mov	rcx, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv128[rsp]
	mov	QWORD PTR [rax], rcx
$LN7@stb_reallo:
; Line 3030
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN8@stb_reallo
; Line 3031
	mov	rax, QWORD PTR s$1[rsp]
	add	rax, 8
	mov	QWORD PTR tv134[rsp], rax
	mov	rcx, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv134[rsp]
	mov	QWORD PTR [rax], rcx
$LN8@stb_reallo:
; Line 3033
	mov	rax, QWORD PTR ptr$[rsp]
	jmp	$LN1@stb_reallo
; Line 3034
	jmp	SHORT $LN5@stb_reallo
$LN4@stb_reallo:
; Line 3035
	mov	rax, QWORD PTR ptr$[rsp]
	sub	rax, 16
	mov	QWORD PTR s$2[rsp], rax
; Line 3037
	mov	rax, QWORD PTR newsize$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR ptr$[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR s$2[rsp], rax
; Line 3038
	cmp	QWORD PTR s$2[rsp], 0
	jne	SHORT $LN9@stb_reallo
	xor	eax, eax
	jmp	SHORT $LN1@stb_reallo
$LN9@stb_reallo:
; Line 3041
	mov	rax, QWORD PTR s$2[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx], rax
; Line 3042
	mov	rax, QWORD PTR s$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@stb_reallo
; Line 3043
	mov	rax, QWORD PTR s$2[rsp]
	mov	QWORD PTR tv152[rsp], rax
	mov	rcx, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv152[rsp]
	mov	QWORD PTR [rax], rcx
$LN10@stb_reallo:
; Line 3045
	mov	rax, QWORD PTR s$2[rsp]
	add	rax, 16
$LN5@stb_reallo:
$LN1@stb_reallo:
; Line 3047
	add	rsp, 88					; 00000058H
	ret	0
stb_realloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
size$ = 56
stb_malloc_raw PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2998
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2999
	mov	r9d, DWORD PTR ?stb_alloc_alignment@@3HA ; stb_alloc_alignment
	mov	r8d, 4
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ; malloc_base
; Line 3000
	add	rsp, 40					; 00000028H
	ret	0
stb_malloc_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
size$ = 56
stb_malloc_leaf PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2993
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2994
	mov	r9d, DWORD PTR ?stb_alloc_alignment@@3HA ; stb_alloc_alignment
	xor	r8d, r8d
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ; malloc_base
; Line 2995
	add	rsp, 40					; 00000028H
	ret	0
stb_malloc_leaf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
size$ = 56
stb_malloc_nofree PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2988
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2989
	mov	r9d, DWORD PTR ?stb_alloc_alignment@@3HA ; stb_alloc_alignment
	mov	r8d, 1
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ; malloc_base
; Line 2990
	add	rsp, 40					; 00000028H
	ret	0
stb_malloc_nofree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
size$ = 56
stb_malloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2983
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2984
	mov	r9d, DWORD PTR ?stb_alloc_alignment@@3HA ; stb_alloc_alignment
	mov	r8d, 2
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ; malloc_base
; Line 2985
	add	rsp, 40					; 00000028H
	ret	0
stb_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 48
stb_malloc_global PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2978
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2979
	mov	r9d, DWORD PTR ?stb_alloc_alignment@@3HA ; stb_alloc_alignment
	mov	r8d, 2
	mov	rdx, QWORD PTR size$[rsp]
	xor	ecx, ecx
	call	?malloc_base@@YAPEAXPEAX_KW4stb__alloc_type@@H@Z ; malloc_base
; Line 2980
	add	rsp, 40					; 00000028H
	ret	0
stb_malloc_global ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
s$1 = 40
s$2 = 48
c$3 = 56
q$4 = 64
tv80 = 72
tv93 = 80
n$5 = 88
p$ = 112
stb_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2650
$LN17:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2651
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN8@stb_free
	jmp	$LN1@stb_free
$LN8@stb_free:
; Line 2654
	mov	eax, DWORD PTR ?stb_alloc_count_free@@3HA ; stb_alloc_count_free
	inc	eax
	mov	DWORD PTR ?stb_alloc_count_free@@3HA, eax ; stb_alloc_count_free
; Line 2656
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__identify@@YA?AW4stb__alloc_type@@PEAX@Z ; stb__identify
	mov	DWORD PTR tv68[rsp], eax
	cmp	DWORD PTR tv68[rsp], 0
	je	SHORT $LN10@stb_free
	cmp	DWORD PTR tv68[rsp], 1
	je	SHORT $LN9@stb_free
	cmp	DWORD PTR tv68[rsp], 2
	je	SHORT $LN12@stb_free
	jmp	$LN14@stb_free
$LN9@stb_free:
; Line 2662
	jmp	$LN1@stb_free
$LN10@stb_free:
; Line 2664
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 16
	mov	QWORD PTR s$2[rsp], rax
; Line 2666
	mov	rax, QWORD PTR s$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2667
	mov	rax, QWORD PTR s$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN11@stb_free
; Line 2668
	mov	rax, QWORD PTR s$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv80[rsp], rax
	mov	rax, QWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv80[rsp]
	mov	QWORD PTR [rax], rcx
$LN11@stb_free:
; Line 2669
	mov	rcx, QWORD PTR s$2[rsp]
	call	QWORD PTR __imp_free
; Line 2670
	jmp	$LN1@stb_free
$LN12@stb_free:
; Line 2673
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR s$1[rsp], rax
; Line 2678
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax], rcx
; Line 2679
	mov	rax, QWORD PTR s$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN13@stb_free
; Line 2680
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?stb__prevn@@YAPEAPEAPEAXPEAX@Z		; stb__prevn
	mov	rcx, QWORD PTR tv93[rsp]
	mov	QWORD PTR [rax], rcx
$LN13@stb_free:
; Line 2683
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, 2
	mov	QWORD PTR c$3[rsp], rax
$LN4@stb_free:
; Line 2684
	cmp	QWORD PTR c$3[rsp], 0
	je	SHORT $LN5@stb_free
; Line 2685
	mov	rax, QWORD PTR c$3[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR n$5[rsp], rax
; Line 2686
	mov	rax, QWORD PTR c$3[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR ?stb_alloc_count_free@@3HA ; stb_alloc_count_free
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ?stb_alloc_count_free@@3HA, eax ; stb_alloc_count_free
; Line 2687
	mov	rcx, QWORD PTR c$3[rsp]
	call	QWORD PTR __imp_free
; Line 2688
	mov	rax, QWORD PTR n$5[rsp]
	mov	QWORD PTR c$3[rsp], rax
; Line 2689
	jmp	SHORT $LN4@stb_free
$LN5@stb_free:
; Line 2692
	mov	rax, QWORD PTR s$1[rsp]
	mov	QWORD PTR [rax+24], 2
; Line 2693
	mov	rax, QWORD PTR s$1[rsp]
	mov	QWORD PTR [rax], 0
; Line 2694
	mov	rax, QWORD PTR s$1[rsp]
	mov	QWORD PTR [rax+16], 0
$LN6@stb_free:
; Line 2697
	mov	rax, QWORD PTR s$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR q$4[rsp], rax
	cmp	QWORD PTR q$4[rsp], 0
	je	SHORT $LN7@stb_free
; Line 2698
	mov	rcx, QWORD PTR q$4[rsp]
	call	stb_free
; Line 2699
	jmp	SHORT $LN6@stb_free
$LN7@stb_free:
; Line 2702
	mov	rcx, QWORD PTR s$1[rsp]
	call	QWORD PTR __imp_free
; Line 2703
	jmp	SHORT $LN1@stb_free
$LN14@stb_free:
; Line 2706
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@stb_free
	mov	r8d, 2706				; 00000a92H
	lea	rdx, OFFSET FLAT:$SG84637
	lea	rcx, OFFSET FLAT:$SG84638
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_free:
$LN1@stb_free:
; Line 2708
	add	rsp, 104				; 00000068H
	ret	0
stb_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
s$ = 40
t$ = 48
y$ = 56
f1$ = 64
len$ = 72
tv86 = 80
tv89 = 88
n$ = 96
f2$ = 104
buffer$ = 128
path$ = 136
flag$ = 144
?stb__splitpath_raw@@YAPEADPEAD0H@Z PROC		; stb__splitpath_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 2421
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2422
	mov	QWORD PTR len$[rsp], 0
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	cdqe
	mov	QWORD PTR n$[rsp], rax
; Line 2423
	mov	r8b, 92					; 0000005cH
	mov	dl, 47					; 0000002fH
	mov	rcx, QWORD PTR path$[rsp]
	call	stb_strrchr2
	mov	QWORD PTR s$[rsp], rax
; Line 2424
	mov	edx, 46					; 0000002eH
	mov	rcx, QWORD PTR path$[rsp]
	call	?strrchr@@YAPEADQEADH@Z			; strrchr
	mov	QWORD PTR t$[rsp], rax
; Line 2425
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN2@stb__split
	cmp	QWORD PTR t$[rsp], 0
	je	SHORT $LN2@stb__split
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR t$[rsp], rax
	jae	SHORT $LN2@stb__split
	mov	QWORD PTR t$[rsp], 0
$LN2@stb__split:
; Line 2426
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN3@stb__split
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN3@stb__split:
; Line 2428
	cmp	DWORD PTR flag$[rsp], 8
	jne	SHORT $LN4@stb__split
; Line 2429
	mov	eax, DWORD PTR flag$[rsp]
	or	eax, 4
	mov	DWORD PTR flag$[rsp], eax
$LN4@stb__split:
; Line 2431
	mov	eax, DWORD PTR flag$[rsp]
	and	eax, 7
	test	eax, eax
	jne	SHORT $LN5@stb__split
	xor	eax, eax
	jmp	$LN1@stb__split
$LN5@stb__split:
; Line 2433
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN21@stb__split
	mov	QWORD PTR tv86[rsp], 0
	jmp	SHORT $LN22@stb__split
$LN21@stb__split:
	mov	rax, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv86[rsp], rax
$LN22@stb__split:
	mov	rax, QWORD PTR tv86[rsp]
	mov	QWORD PTR f1$[rsp], rax
; Line 2434
	cmp	QWORD PTR t$[rsp], 0
	jne	SHORT $LN23@stb__split
	mov	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR tv89[rsp], rax
	jmp	SHORT $LN24@stb__split
$LN23@stb__split:
	mov	rax, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv89[rsp], rax
$LN24@stb__split:
	mov	rax, QWORD PTR tv89[rsp]
	mov	QWORD PTR f2$[rsp], rax
; Line 2436
	mov	eax, DWORD PTR flag$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@stb__split
; Line 2437
	mov	QWORD PTR x$[rsp], 0
	cmp	QWORD PTR f1$[rsp], 0
	jne	SHORT $LN8@stb__split
	cmp	DWORD PTR flag$[rsp], 1
	jne	SHORT $LN8@stb__split
	mov	QWORD PTR len$[rsp], 2
$LN8@stb__split:
	jmp	SHORT $LN7@stb__split
$LN6@stb__split:
; Line 2438
	mov	eax, DWORD PTR flag$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN9@stb__split
; Line 2439
	mov	rax, QWORD PTR f1$[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 2440
	jmp	SHORT $LN10@stb__split
$LN9@stb__split:
; Line 2441
	mov	rax, QWORD PTR f2$[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 2442
	mov	eax, DWORD PTR flag$[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN11@stb__split
; Line 2443
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR path$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN12@stb__split
; Line 2444
	mov	rax, QWORD PTR x$[rsp]
	inc	rax
	mov	QWORD PTR x$[rsp], rax
$LN12@stb__split:
$LN11@stb__split:
$LN10@stb__split:
$LN7@stb__split:
; Line 2447
	mov	eax, DWORD PTR flag$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN13@stb__split
; Line 2448
	mov	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR y$[rsp], rax
	jmp	SHORT $LN14@stb__split
$LN13@stb__split:
; Line 2449
	mov	eax, DWORD PTR flag$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN15@stb__split
; Line 2450
	mov	rax, QWORD PTR f2$[rsp]
	mov	QWORD PTR y$[rsp], rax
	jmp	SHORT $LN16@stb__split
$LN15@stb__split:
; Line 2452
	mov	rax, QWORD PTR f1$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN16@stb__split:
$LN14@stb__split:
; Line 2454
	cmp	QWORD PTR buffer$[rsp], 0
	jne	SHORT $LN17@stb__split
; Line 2455
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR len$[rsp]
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR buffer$[rsp], rax
; Line 2456
	cmp	QWORD PTR buffer$[rsp], 0
	jne	SHORT $LN18@stb__split
	xor	eax, eax
	jmp	SHORT $LN1@stb__split
$LN18@stb__split:
$LN17@stb__split:
; Line 2459
	cmp	QWORD PTR len$[rsp], 0
	je	SHORT $LN19@stb__split
	lea	r8, OFFSET FLAT:$SG84465
	mov	edx, 3
	mov	rcx, QWORD PTR buffer$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
	mov	rax, QWORD PTR buffer$[rsp]
	jmp	SHORT $LN1@stb__split
$LN19@stb__split:
; Line 2460
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR x$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR buffer$[rsp]
	call	stb_strncpy
; Line 2461
	mov	rax, QWORD PTR buffer$[rsp]
$LN1@stb__split:
; Line 2462
	add	rsp, 120				; 00000078H
	ret	0
?stb__splitpath_raw@@YAPEADPEAD0H@Z ENDP		; stb__splitpath_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z1$1 = 32
z2$2 = 40
tv85 = 48
buffer$ = 80
data$ = 88
curlen$ = 96
newlen$ = 104
?stb__add_section@@YAXPEAD0_J1@Z PROC			; stb__add_section
; File W:\cpp\void\vendor\stb\stb.h
; Line 2371
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2372
	mov	rax, QWORD PTR curlen$[rsp]
	cmp	QWORD PTR newlen$[rsp], rax
	jge	$LN2@stb__add_s
; Line 2373
	mov	rax, QWORD PTR newlen$[rsp]
	sar	rax, 1
	mov	QWORD PTR z1$1[rsp], rax
	mov	rax, QWORD PTR z1$1[rsp]
	mov	rcx, QWORD PTR newlen$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z2$2[rsp], rax
; Line 2374
	mov	rax, QWORD PTR z1$1[rsp]
	dec	rax
	mov	r8, rax
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 2375
	mov	rax, QWORD PTR z1$1[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax-1], 46			; 0000002eH
; Line 2376
	mov	rax, QWORD PTR z1$1[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax], 46			; 0000002eH
; Line 2377
	mov	rax, QWORD PTR z2$2[rsp]
	dec	rax
	mov	rcx, QWORD PTR curlen$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	sub	rcx, QWORD PTR z2$2[rsp]
	inc	rcx
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	r8, QWORD PTR z1$1[rsp]
	lea	rdx, QWORD PTR [rdx+r8+1]
	mov	QWORD PTR tv85[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv85[rsp]
	mov	rcx, rax
	call	memcpy
; Line 2378
	jmp	SHORT $LN3@stb__add_s
$LN2@stb__add_s:
; Line 2379
	mov	r8, QWORD PTR curlen$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
$LN3@stb__add_s:
; Line 2380
	add	rsp, 72					; 00000048H
	ret	0
?stb__add_section@@YAXPEAD0_J1@Z ENDP			; stb__add_section
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
nested$ = 40
out$ = 48
num$ = 56
tv264 = 60
tv275 = 61
tv292 = 62
tv323 = 63
result$ = 64
tv186 = 72
tv316 = 76
last_nonwhite$1 = 80
src$ = 88
$T2 = 96
$T3 = 104
$T4 = 112
tv336 = 120
src_$ = 144
delimit$ = 152
count$ = 160
stripwhite$ = 168
allow_empty$ = 176
start$ = 184
end$ = 192
?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z PROC		; stb_tokens_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 2117
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2118
	mov	DWORD PTR nested$[rsp], 0
; Line 2119
	mov	rax, QWORD PTR src_$[rsp]
	mov	QWORD PTR src$[rsp], rax
; Line 2124
	mov	DWORD PTR num$[rsp], 0
; Line 2127
	mov	rax, QWORD PTR delimit$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN2@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN2@stb_tokens
$LN3@stb_tokens:
; Line 2128
	cmp	QWORD PTR start$[rsp], 0
	je	$LN42@stb_tokens
; Line 2129
	mov	rax, QWORD PTR start$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN4@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN5@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN4@stb_tokens
$LN5@stb_tokens:
; Line 2130
	mov	rax, QWORD PTR end$[rsp]
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN43@stb_tokens
$LN6@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN7@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN6@stb_tokens
$LN7@stb_tokens:
$LN43@stb_tokens:
; Line 2131
	mov	rax, QWORD PTR end$[rsp]
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN44@stb_tokens
$LN8@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN9@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?etable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN8@stb_tokens
$LN9@stb_tokens:
$LN44@stb_tokens:
$LN42@stb_tokens:
; Line 2133
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
; Line 2136
	mov	rax, QWORD PTR src$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN10@stb_tokens:
; Line 2137
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN11@stb_tokens
; Line 2140
	cmp	DWORD PTR allow_empty$[rsp], 0
	jne	SHORT $LN45@stb_tokens
; Line 2141
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 256			; 00000100H
	jae	SHORT $LN97@stb_tokens
	jmp	SHORT $LN98@stb_tokens
$LN97@stb_tokens:
	call	__report_rangecheckfailure
$LN98@stb_tokens:
	lea	rax, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	rcx, QWORD PTR $T2[rsp]
	mov	BYTE PTR [rax+rcx], 0
$LN12@stb_tokens:
; Line 2142
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN13@stb_tokens
; Line 2143
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN12@stb_tokens
$LN13@stb_tokens:
; Line 2144
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN46@stb_tokens
	jmp	$LN11@stb_tokens
$LN46@stb_tokens:
$LN45@stb_tokens:
; Line 2146
	mov	eax, DWORD PTR num$[rsp]
	inc	eax
	mov	DWORD PTR num$[rsp], eax
; Line 2148
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
; Line 2149
	cmp	DWORD PTR stripwhite$[rsp], 2
	jne	$LN47@stb_tokens
$LN14@stb_tokens:
; Line 2150
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	$LN15@stb_tokens
; Line 2151
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	je	SHORT $LN49@stb_tokens
; Line 2152
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	$LN50@stb_tokens
$LN49@stb_tokens:
; Line 2154
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 2155
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN51@stb_tokens
; Line 2156
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN52@stb_tokens
$LN51@stb_tokens:
$LN16@stb_tokens:
; Line 2159
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN17@stb_tokens
; Line 2160
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN53@stb_tokens
; Line 2161
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN55@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN56@stb_tokens
$LN55@stb_tokens:
; Line 2162
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN17@stb_tokens
$LN56@stb_tokens:
; Line 2163
	jmp	SHORT $LN54@stb_tokens
$LN53@stb_tokens:
; Line 2164
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN54@stb_tokens:
; Line 2165
	jmp	SHORT $LN16@stb_tokens
$LN17@stb_tokens:
$LN52@stb_tokens:
$LN50@stb_tokens:
; Line 2168
	jmp	$LN14@stb_tokens
$LN15@stb_tokens:
; Line 2169
	jmp	$LN48@stb_tokens
$LN47@stb_tokens:
$LN18@stb_tokens:
; Line 2170
	cmp	DWORD PTR nested$[rsp], 0
	jne	SHORT $LN57@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	$LN19@stb_tokens
$LN57@stb_tokens:
; Line 2171
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN58@stb_tokens
; Line 2172
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN59@stb_tokens
	jmp	SHORT $LN19@stb_tokens
$LN59@stb_tokens:
; Line 2173
	cmp	QWORD PTR end$[rsp], 0
	je	SHORT $LN99@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?etable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv186[rsp], eax
	jmp	SHORT $LN100@stb_tokens
$LN99@stb_tokens:
	mov	eax, DWORD PTR nested$[rsp]
	mov	DWORD PTR tv186[rsp], eax
$LN100@stb_tokens:
	cmp	DWORD PTR tv186[rsp], 0
	je	SHORT $LN60@stb_tokens
; Line 2174
	mov	eax, DWORD PTR nested$[rsp]
	dec	eax
	mov	DWORD PTR nested$[rsp], eax
	jmp	SHORT $LN61@stb_tokens
$LN60@stb_tokens:
; Line 2176
	mov	eax, DWORD PTR nested$[rsp]
	inc	eax
	mov	DWORD PTR nested$[rsp], eax
$LN61@stb_tokens:
$LN58@stb_tokens:
; Line 2178
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 2179
	jmp	$LN18@stb_tokens
$LN19@stb_tokens:
$LN48@stb_tokens:
; Line 2180
	cmp	DWORD PTR allow_empty$[rsp], 0
	je	SHORT $LN62@stb_tokens
; Line 2181
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN63@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN63@stb_tokens:
$LN62@stb_tokens:
; Line 2183
	jmp	$LN10@stb_tokens
$LN11@stb_tokens:
; Line 2187
	mov	eax, DWORD PTR num$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR src$[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	sub	rdx, rcx
	mov	rcx, rdx
	lea	rax, QWORD PTR [rcx+rax*8+1]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR result$[rsp], rax
; Line 2188
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN64@stb_tokens
	mov	rax, QWORD PTR result$[rsp]
	jmp	$LN1@stb_tokens
$LN64@stb_tokens:
; Line 2189
	mov	eax, DWORD PTR num$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR out$[rsp], rax
; Line 2191
	mov	rax, QWORD PTR src$[rsp]
	mov	QWORD PTR s$[rsp], rax
; Line 2192
	mov	DWORD PTR num$[rsp], 0
; Line 2193
	mov	DWORD PTR nested$[rsp], 0
$LN20@stb_tokens:
; Line 2194
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN21@stb_tokens
; Line 2198
	cmp	DWORD PTR allow_empty$[rsp], 0
	jne	$LN65@stb_tokens
; Line 2199
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T3[rsp], rax
	cmp	QWORD PTR $T3[rsp], 256			; 00000100H
	jae	SHORT $LN101@stb_tokens
	jmp	SHORT $LN102@stb_tokens
$LN101@stb_tokens:
	call	__report_rangecheckfailure
$LN102@stb_tokens:
	lea	rax, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	rcx, QWORD PTR $T3[rsp]
	mov	BYTE PTR [rax+rcx], 0
; Line 2200
	cmp	DWORD PTR stripwhite$[rsp], 0
	je	SHORT $LN67@stb_tokens
$LN22@stb_tokens:
; Line 2201
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN69@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	je	SHORT $LN23@stb_tokens
$LN69@stb_tokens:
; Line 2202
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN22@stb_tokens
$LN23@stb_tokens:
	jmp	SHORT $LN68@stb_tokens
$LN67@stb_tokens:
$LN24@stb_tokens:
; Line 2204
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN25@stb_tokens
; Line 2205
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN24@stb_tokens
$LN25@stb_tokens:
$LN68@stb_tokens:
	jmp	SHORT $LN66@stb_tokens
$LN65@stb_tokens:
; Line 2206
	cmp	DWORD PTR stripwhite$[rsp], 0
	je	SHORT $LN70@stb_tokens
$LN26@stb_tokens:
; Line 2207
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	je	SHORT $LN27@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@stb_tokens
$LN27@stb_tokens:
$LN70@stb_tokens:
$LN66@stb_tokens:
; Line 2209
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN71@stb_tokens
	jmp	$LN21@stb_tokens
$LN71@stb_tokens:
; Line 2211
	movsxd	rax, DWORD PTR num$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 2212
	mov	eax, DWORD PTR num$[rsp]
	inc	eax
	mov	DWORD PTR num$[rsp], eax
; Line 2214
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
; Line 2215
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR last_nonwhite$1[rsp], rax
; Line 2216
	cmp	DWORD PTR stripwhite$[rsp], 2
	jne	$LN72@stb_tokens
$LN28@stb_tokens:
; Line 2217
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	$LN29@stb_tokens
; Line 2218
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	je	SHORT $LN74@stb_tokens
; Line 2219
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	jne	SHORT $LN76@stb_tokens
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR last_nonwhite$1[rsp], rax
$LN76@stb_tokens:
; Line 2220
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv264[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	movzx	ecx, BYTE PTR tv264[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 2221
	jmp	$LN75@stb_tokens
$LN74@stb_tokens:
; Line 2222
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 2223
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN77@stb_tokens
; Line 2224
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	jne	SHORT $LN79@stb_tokens
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR last_nonwhite$1[rsp], rax
$LN79@stb_tokens:
; Line 2225
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv275[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	movzx	ecx, BYTE PTR tv275[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 2226
	jmp	$LN78@stb_tokens
$LN77@stb_tokens:
$LN30@stb_tokens:
; Line 2228
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN31@stb_tokens
; Line 2229
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN80@stb_tokens
; Line 2230
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN82@stb_tokens
	mov	rax, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN83@stb_tokens
$LN82@stb_tokens:
; Line 2231
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN31@stb_tokens
$LN83@stb_tokens:
; Line 2232
	jmp	SHORT $LN81@stb_tokens
$LN80@stb_tokens:
; Line 2233
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv292[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	movzx	ecx, BYTE PTR tv292[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
$LN81@stb_tokens:
; Line 2234
	jmp	$LN30@stb_tokens
$LN31@stb_tokens:
; Line 2235
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR last_nonwhite$1[rsp], rax
$LN78@stb_tokens:
$LN75@stb_tokens:
; Line 2238
	jmp	$LN28@stb_tokens
$LN29@stb_tokens:
; Line 2239
	jmp	$LN73@stb_tokens
$LN72@stb_tokens:
$LN32@stb_tokens:
; Line 2240
	cmp	DWORD PTR nested$[rsp], 0
	jne	SHORT $LN84@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	$LN33@stb_tokens
$LN84@stb_tokens:
; Line 2241
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	jne	SHORT $LN85@stb_tokens
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR last_nonwhite$1[rsp], rax
$LN85@stb_tokens:
; Line 2242
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN86@stb_tokens
; Line 2243
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN87@stb_tokens
	jmp	$LN33@stb_tokens
$LN87@stb_tokens:
; Line 2244
	cmp	QWORD PTR end$[rsp], 0
	je	SHORT $LN103@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?etable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv316[rsp], eax
	jmp	SHORT $LN104@stb_tokens
$LN103@stb_tokens:
	mov	eax, DWORD PTR nested$[rsp]
	mov	DWORD PTR tv316[rsp], eax
$LN104@stb_tokens:
	cmp	DWORD PTR tv316[rsp], 0
	je	SHORT $LN88@stb_tokens
; Line 2245
	mov	eax, DWORD PTR nested$[rsp]
	dec	eax
	mov	DWORD PTR nested$[rsp], eax
	jmp	SHORT $LN89@stb_tokens
$LN88@stb_tokens:
; Line 2247
	mov	eax, DWORD PTR nested$[rsp]
	inc	eax
	mov	DWORD PTR nested$[rsp], eax
$LN89@stb_tokens:
$LN86@stb_tokens:
; Line 2249
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv323[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	movzx	ecx, BYTE PTR tv323[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 2250
	jmp	$LN32@stb_tokens
$LN33@stb_tokens:
$LN73@stb_tokens:
; Line 2253
	cmp	DWORD PTR stripwhite$[rsp], 0
	je	SHORT $LN90@stb_tokens
; Line 2254
	mov	rax, QWORD PTR last_nonwhite$1[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
$LN90@stb_tokens:
; Line 2255
	mov	rax, QWORD PTR out$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 2257
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN91@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN91@stb_tokens:
; Line 2258
	jmp	$LN20@stb_tokens
$LN21@stb_tokens:
; Line 2259
	mov	rax, QWORD PTR delimit$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN34@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN35@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	QWORD PTR tv336[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	rax, QWORD PTR tv336[rsp]
	mov	QWORD PTR $T4[rsp], rax
	cmp	QWORD PTR $T4[rsp], 256			; 00000100H
	jae	SHORT $LN105@stb_tokens
	jmp	SHORT $LN106@stb_tokens
$LN105@stb_tokens:
	call	__report_rangecheckfailure
$LN106@stb_tokens:
	lea	rax, OFFSET FLAT:?stb_tokentable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	rcx, QWORD PTR $T4[rsp]
	mov	BYTE PTR [rax+rcx], 0
	jmp	SHORT $LN34@stb_tokens
$LN35@stb_tokens:
; Line 2260
	cmp	QWORD PTR start$[rsp], 0
	je	$LN92@stb_tokens
; Line 2261
	mov	rax, QWORD PTR start$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN36@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN37@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN36@stb_tokens
$LN37@stb_tokens:
; Line 2262
	mov	rax, QWORD PTR end$[rsp]
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN93@stb_tokens
$LN38@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN39@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?stable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN38@stb_tokens
$LN39@stb_tokens:
$LN93@stb_tokens:
; Line 2263
	mov	rax, QWORD PTR end$[rsp]
	mov	QWORD PTR s$[rsp], rax
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN94@stb_tokens
$LN40@stb_tokens:
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN41@stb_tokens
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?etable@?1??stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z@4PADA
	mov	BYTE PTR [rcx+rax], 1
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN40@stb_tokens
$LN41@stb_tokens:
$LN94@stb_tokens:
$LN92@stb_tokens:
; Line 2265
	cmp	QWORD PTR count$[rsp], 0
	je	SHORT $LN95@stb_tokens
	mov	rax, QWORD PTR count$[rsp]
	mov	ecx, DWORD PTR num$[rsp]
	mov	DWORD PTR [rax], ecx
$LN95@stb_tokens:
; Line 2266
	movsxd	rax, DWORD PTR num$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
; Line 2267
	mov	rax, QWORD PTR result$[rsp]
$LN1@stb_tokens:
$LN96@stb_tokens:
; Line 2268
	add	rsp, 136				; 00000088H
	ret	0
?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ENDP		; stb_tokens_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
tv86 = 33
tv91 = 40
output$ = 64
src$ = 72
delimit$ = 80
keep$ = 88
invert$ = 96
?stb_strtok_raw@@YAPEADPEAD00HH@Z PROC			; stb_strtok_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 2083
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2084
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN6@stb_strtok
$LN2@stb_strtok:
; Line 2085
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_strtok
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR delimit$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	test	rax, rax
	je	SHORT $LN3@stb_strtok
; Line 2086
	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv75[rsp], al
	mov	rax, QWORD PTR src$[rsp]
	inc	rax
	mov	QWORD PTR src$[rsp], rax
	mov	rax, QWORD PTR output$[rsp]
	movzx	ecx, BYTE PTR tv75[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR output$[rsp]
	inc	rax
	mov	QWORD PTR output$[rsp], rax
; Line 2087
	jmp	SHORT $LN2@stb_strtok
$LN3@stb_strtok:
; Line 2088
	jmp	SHORT $LN7@stb_strtok
$LN6@stb_strtok:
$LN4@stb_strtok:
; Line 2089
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN5@stb_strtok
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR delimit$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	test	rax, rax
	jne	SHORT $LN5@stb_strtok
; Line 2090
	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv86[rsp], al
	mov	rax, QWORD PTR src$[rsp]
	inc	rax
	mov	QWORD PTR src$[rsp], rax
	mov	rax, QWORD PTR output$[rsp]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR output$[rsp]
	inc	rax
	mov	QWORD PTR output$[rsp], rax
; Line 2091
	jmp	SHORT $LN4@stb_strtok
$LN5@stb_strtok:
$LN7@stb_strtok:
; Line 2093
	mov	rax, QWORD PTR output$[rsp]
	mov	BYTE PTR [rax], 0
; Line 2094
	cmp	DWORD PTR keep$[rsp], 0
	je	SHORT $LN8@stb_strtok
; Line 2095
	mov	rax, QWORD PTR src$[rsp]
	jmp	SHORT $LN1@stb_strtok
	jmp	SHORT $LN9@stb_strtok
$LN8@stb_strtok:
; Line 2097
	mov	rax, QWORD PTR src$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN11@stb_strtok
	mov	rax, QWORD PTR src$[rsp]
	inc	rax
	mov	QWORD PTR tv91[rsp], rax
	jmp	SHORT $LN12@stb_strtok
$LN11@stb_strtok:
	mov	rax, QWORD PTR src$[rsp]
	mov	QWORD PTR tv91[rsp], rax
$LN12@stb_strtok:
	mov	rax, QWORD PTR tv91[rsp]
$LN9@stb_strtok:
$LN1@stb_strtok:
; Line 2098
	add	rsp, 56					; 00000038H
	ret	0
?stb_strtok_raw@@YAPEADPEAD00HH@Z ENDP			; stb_strtok_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 80
delimit$ = 88
count$ = 96
stb_tokens_quoted PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2296
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2297
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 2
	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR delimit$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ; stb_tokens_raw
; Line 2298
	add	rsp, 72					; 00000048H
	ret	0
stb_tokens_quoted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 80
delimit$ = 88
count$ = 96
stb_tokens_stripwhite PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2291
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2292
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR delimit$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ; stb_tokens_raw
; Line 2293
	add	rsp, 72					; 00000048H
	ret	0
stb_tokens_stripwhite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 80
delimit$ = 88
count$ = 96
stb_tokens_allowempty PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2286
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2287
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR delimit$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ; stb_tokens_raw
; Line 2288
	add	rsp, 72					; 00000048H
	ret	0
stb_tokens_allowempty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 80
delimit$ = 88
count$ = 96
nest_in$ = 104
nest_out$ = 112
stb_tokens_nested_empty PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2281
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2282
	mov	rax, QWORD PTR nest_out$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR nest_in$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR delimit$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ; stb_tokens_raw
; Line 2283
	add	rsp, 72					; 00000048H
	ret	0
stb_tokens_nested_empty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 80
delimit$ = 88
count$ = 96
nest_in$ = 104
nest_out$ = 112
stb_tokens_nested PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2276
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2277
	mov	rax, QWORD PTR nest_out$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR nest_in$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR delimit$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ; stb_tokens_raw
; Line 2278
	add	rsp, 72					; 00000048H
	ret	0
stb_tokens_nested ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 80
delimit$ = 88
count$ = 96
stb_tokens PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2271
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2272
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR delimit$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?stb_tokens_raw@@YAPEAPEADPEAD0PEAHHH00@Z ; stb_tokens_raw
; Line 2273
	add	rsp, 72					; 00000048H
	ret	0
stb_tokens ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
d$ = 64
s$ = 72
n$ = 80
stb_strscpy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1923
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1924
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	QWORD PTR len$[rsp], rax
; Line 1925
	mov	rax, QWORD PTR n$[rsp]
	cmp	QWORD PTR len$[rsp], rax
	jb	SHORT $LN2@stb_strscp
; Line 1926
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN3@stb_strscp
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN3@stb_strscp:
; Line 1927
	xor	eax, eax
	jmp	SHORT $LN1@stb_strscp
$LN2@stb_strscp:
; Line 1929
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 1930
	mov	rax, QWORD PTR len$[rsp]
$LN1@stb_strscp:
; Line 1931
	add	rsp, 56					; 00000038H
	ret	0
stb_strscpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
n$ = 32
stb_plural PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1934
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1935
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN3@stb_plural
	lea	rax, OFFSET FLAT:$SG84023
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@stb_plural
$LN3@stb_plural:
	lea	rax, OFFSET FLAT:$SG84024
	mov	QWORD PTR tv65[rsp], rax
$LN4@stb_plural:
	mov	rax, QWORD PTR tv65[rsp]
; Line 1936
	add	rsp, 24
	ret	0
stb_plural ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
tv72 = 4
tv71 = 8
s$ = 32
t$ = 40
stb_prefix_count PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1947
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1948
	mov	DWORD PTR c$[rsp], 0
$LN2@stb_prefix:
; Line 1949
	mov	rax, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_prefix
; Line 1950
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv71[rsp], eax
	mov	rax, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	mov	rax, QWORD PTR t$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	eax, DWORD PTR tv72[rsp]
	cmp	DWORD PTR tv71[rsp], eax
	je	SHORT $LN4@stb_prefix
; Line 1951
	jmp	SHORT $LN3@stb_prefix
$LN4@stb_prefix:
; Line 1952
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
; Line 1953
	jmp	SHORT $LN2@stb_prefix
$LN3@stb_prefix:
; Line 1954
	mov	eax, DWORD PTR c$[rsp]
; Line 1955
	add	rsp, 24
	ret	0
stb_prefix_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
n$ = 40
s$ = 64
t$ = 72
stb_stristr PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2070
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2071
	mov	rcx, QWORD PTR t$[rsp]
	call	strlen
	mov	QWORD PTR n$[rsp], rax
; Line 2073
	cmp	QWORD PTR n$[rsp], 0
	jne	SHORT $LN4@stb_strist
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stb_strist
$LN4@stb_strist:
$LN2@stb_strist:
; Line 2074
	mov	rax, QWORD PTR t$[rsp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stb_strichr
	mov	QWORD PTR z$[rsp], rax
	cmp	QWORD PTR z$[rsp], 0
	je	SHORT $LN3@stb_strist
; Line 2075
	mov	r8, QWORD PTR n$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	QWORD PTR __imp__strnicmp
	test	eax, eax
	jne	SHORT $LN5@stb_strist
; Line 2076
	mov	rax, QWORD PTR z$[rsp]
	jmp	SHORT $LN1@stb_strist
$LN5@stb_strist:
; Line 2077
	mov	rax, QWORD PTR z$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 2078
	jmp	SHORT $LN2@stb_strist
$LN3@stb_strist:
; Line 2079
	xor	eax, eax
$LN1@stb_strist:
; Line 2080
	add	rsp, 56					; 00000038H
	ret	0
stb_stristr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv90 = 32
tv88 = 33
tv64 = 36
s$ = 64
t$ = 72
stb_strichr PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2063
$LN4:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2064
	movsx	eax, BYTE PTR t$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	DWORD PTR tv64[rsp], eax
	movsx	ecx, BYTE PTR t$[rsp]
	call	QWORD PTR __imp_toupper
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	jne	SHORT $LN2@stb_strich
; Line 2065
	movsx	eax, BYTE PTR t$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?strchr@@YAPEADQEADH@Z			; strchr
	jmp	SHORT $LN1@stb_strich
$LN2@stb_strich:
; Line 2066
	movsx	eax, BYTE PTR t$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_toupper
	mov	BYTE PTR tv90[rsp], al
	movsx	eax, BYTE PTR t$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	BYTE PTR tv88[rsp], al
	movzx	r8d, BYTE PTR tv90[rsp]
	movzx	edx, BYTE PTR tv88[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stb_strchr2
$LN1@stb_strich:
; Line 2067
	add	rsp, 56					; 00000038H
	ret	0
stb_strichr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 0
tv71 = 4
s$ = 32
t$ = 40
stb_prefix PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1939
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
$LN2@stb_prefix:
; Line 1940
	mov	rax, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_prefix
; Line 1941
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv71[rsp], eax
	mov	rax, QWORD PTR t$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	mov	rax, QWORD PTR t$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	mov	eax, DWORD PTR tv72[rsp]
	cmp	DWORD PTR tv71[rsp], eax
	je	SHORT $LN4@stb_prefix
; Line 1942
	xor	eax, eax
	jmp	SHORT $LN1@stb_prefix
$LN4@stb_prefix:
	jmp	SHORT $LN2@stb_prefix
$LN3@stb_prefix:
; Line 1943
	mov	eax, 1
$LN1@stb_prefix:
; Line 1944
	add	rsp, 24
	ret	0
stb_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
n$ = 40
m$ = 48
s$ = 80
t$ = 88
stb_suffixi PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1968
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1969
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	QWORD PTR n$[rsp], rax
; Line 1970
	mov	rcx, QWORD PTR t$[rsp]
	call	strlen
	mov	QWORD PTR m$[rsp], rax
; Line 1971
	mov	rax, QWORD PTR n$[rsp]
	cmp	QWORD PTR m$[rsp], rax
	ja	SHORT $LN2@stb_suffix
; Line 1972
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR m$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN5@stb_suffix
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@stb_suffix
$LN5@stb_suffix:
	mov	DWORD PTR tv75[rsp], 0
$LN6@stb_suffix:
	mov	eax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stb_suffix
	jmp	SHORT $LN3@stb_suffix
$LN2@stb_suffix:
; Line 1974
	xor	eax, eax
$LN3@stb_suffix:
$LN1@stb_suffix:
; Line 1975
	add	rsp, 72					; 00000048H
	ret	0
stb_suffixi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
n$ = 40
m$ = 48
s$ = 80
t$ = 88
stb_suffix PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1958
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1959
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	QWORD PTR n$[rsp], rax
; Line 1960
	mov	rcx, QWORD PTR t$[rsp]
	call	strlen
	mov	QWORD PTR m$[rsp], rax
; Line 1961
	mov	rax, QWORD PTR n$[rsp]
	cmp	QWORD PTR m$[rsp], rax
	ja	SHORT $LN2@stb_suffix
; Line 1962
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR m$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	SHORT $LN5@stb_suffix
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@stb_suffix
$LN5@stb_suffix:
	mov	DWORD PTR tv75[rsp], 0
$LN6@stb_suffix:
	mov	eax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stb_suffix
	jmp	SHORT $LN3@stb_suffix
$LN2@stb_suffix:
; Line 1964
	xor	eax, eax
$LN3@stb_suffix:
$LN1@stb_suffix:
; Line 1965
	add	rsp, 72					; 00000048H
	ret	0
stb_suffix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r1$ = 32
r2$ = 40
n1$ = 48
n2$ = 56
s$ = 64
n$ = 72
$T1 = 80
path$ = 112
len$ = 120
stb_shorten_path_readable PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2383
$LN18:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2385
	mov	rcx, QWORD PTR path$[rsp]
	call	strlen
	mov	QWORD PTR n$[rsp], rax
; Line 2387
	movsxd	rax, DWORD PTR len$[rsp]
	cmp	QWORD PTR n$[rsp], rax
	jg	SHORT $LN2@stb_shorte
	mov	rax, QWORD PTR path$[rsp]
	jmp	$LN1@stb_shorte
$LN2@stb_shorte:
; Line 2388
	cmp	DWORD PTR len$[rsp], 1024		; 00000400H
	jle	SHORT $LN3@stb_shorte
	mov	rax, QWORD PTR path$[rsp]
	jmp	$LN1@stb_shorte
$LN3@stb_shorte:
; Line 2389
	mov	r8b, 92					; 0000005cH
	mov	dl, 47					; 0000002fH
	mov	rcx, QWORD PTR path$[rsp]
	call	stb_strrchr2
	mov	QWORD PTR s$[rsp], rax
; Line 2390
	cmp	QWORD PTR s$[rsp], 0
	je	SHORT $LN4@stb_shorte
; Line 2391
	mov	rax, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	mov	QWORD PTR n1$[rsp], rax
; Line 2392
	mov	rax, QWORD PTR n1$[rsp]
	mov	rcx, QWORD PTR n$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n2$[rsp], rax
; Line 2393
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 2394
	jmp	SHORT $LN5@stb_shorte
$LN4@stb_shorte:
; Line 2395
	mov	QWORD PTR n1$[rsp], 0
; Line 2396
	mov	rax, QWORD PTR n$[rsp]
	mov	QWORD PTR n2$[rsp], rax
; Line 2397
	mov	rax, QWORD PTR path$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN5@stb_shorte:
; Line 2400
	mov	eax, DWORD PTR len$[rsp]
	sar	eax, 1
	cdqe
	cmp	QWORD PTR n1$[rsp], rax
	jge	SHORT $LN6@stb_shorte
; Line 2401
	mov	rax, QWORD PTR n1$[rsp]
	mov	QWORD PTR r1$[rsp], rax
; Line 2402
	movsxd	rax, DWORD PTR len$[rsp]
	sub	rax, QWORD PTR r1$[rsp]
	mov	QWORD PTR r2$[rsp], rax
	jmp	$LN7@stb_shorte
$LN6@stb_shorte:
; Line 2403
	mov	eax, DWORD PTR len$[rsp]
	sar	eax, 1
	cdqe
	cmp	QWORD PTR n2$[rsp], rax
	jge	SHORT $LN8@stb_shorte
; Line 2404
	mov	rax, QWORD PTR n2$[rsp]
	mov	QWORD PTR r2$[rsp], rax
; Line 2405
	movsxd	rax, DWORD PTR len$[rsp]
	sub	rax, QWORD PTR r2$[rsp]
	mov	QWORD PTR r1$[rsp], rax
; Line 2406
	jmp	$LN9@stb_shorte
$LN8@stb_shorte:
; Line 2407
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR n1$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	cdq
	idiv	QWORD PTR n$[rsp]
	mov	QWORD PTR r1$[rsp], rax
; Line 2408
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR n2$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	cdq
	idiv	QWORD PTR n$[rsp]
	mov	QWORD PTR r2$[rsp], rax
; Line 2409
	mov	eax, DWORD PTR len$[rsp]
	sar	eax, 2
	cdqe
	cmp	QWORD PTR r1$[rsp], rax
	jge	SHORT $LN10@stb_shorte
	mov	eax, DWORD PTR len$[rsp]
	sar	eax, 2
	cdqe
	mov	QWORD PTR r1$[rsp], rax
	movsxd	rax, DWORD PTR len$[rsp]
	sub	rax, QWORD PTR r1$[rsp]
	mov	QWORD PTR r2$[rsp], rax
$LN10@stb_shorte:
; Line 2410
	mov	eax, DWORD PTR len$[rsp]
	sar	eax, 2
	cdqe
	cmp	QWORD PTR r2$[rsp], rax
	jge	SHORT $LN11@stb_shorte
	mov	eax, DWORD PTR len$[rsp]
	sar	eax, 2
	cdqe
	mov	QWORD PTR r2$[rsp], rax
	movsxd	rax, DWORD PTR len$[rsp]
	sub	rax, QWORD PTR r2$[rsp]
	mov	QWORD PTR r1$[rsp], rax
$LN11@stb_shorte:
$LN9@stb_shorte:
$LN7@stb_shorte:
; Line 2412
	mov	rax, QWORD PTR n1$[rsp]
	cmp	QWORD PTR r1$[rsp], rax
	jg	SHORT $LN14@stb_shorte
	mov	rax, QWORD PTR n2$[rsp]
	cmp	QWORD PTR r2$[rsp], rax
	jle	SHORT $LN15@stb_shorte
$LN14@stb_shorte:
	mov	r8d, 2412				; 0000096cH
	lea	rdx, OFFSET FLAT:$SG84427
	lea	rcx, OFFSET FLAT:$SG84428
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb_shorte:
; Line 2413
	cmp	QWORD PTR n1$[rsp], 0
	je	SHORT $LN12@stb_shorte
; Line 2414
	mov	r9, QWORD PTR r1$[rsp]
	mov	r8, QWORD PTR n1$[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	lea	rcx, OFFSET FLAT:?buffer@?1??stb_shorten_path_readable@@9@4PADA
	call	?stb__add_section@@YAXPEAD0_J1@Z	; stb__add_section
$LN12@stb_shorte:
; Line 2415
	lea	rax, OFFSET FLAT:?buffer@?1??stb_shorten_path_readable@@9@4PADA
	add	rax, QWORD PTR r1$[rsp]
	mov	r9, QWORD PTR r2$[rsp]
	mov	r8, QWORD PTR n2$[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, rax
	call	?stb__add_section@@YAXPEAD0_J1@Z	; stb__add_section
; Line 2416
	movsxd	rax, DWORD PTR len$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 1024		; 00000400H
	jae	SHORT $LN16@stb_shorte
	jmp	SHORT $LN17@stb_shorte
$LN16@stb_shorte:
	call	__report_rangecheckfailure
$LN17@stb_shorte:
	lea	rax, OFFSET FLAT:?buffer@?1??stb_shorten_path_readable@@9@4PADA
	mov	rcx, QWORD PTR $T1[rsp]
	mov	BYTE PTR [rax+rcx], 0
; Line 2417
	lea	rax, OFFSET FLAT:?buffer@?1??stb_shorten_path_readable@@9@4PADA
$LN1@stb_shorte:
$LN13@stb_shorte:
; Line 2418
	add	rsp, 104				; 00000068H
	ret	0
stb_shorten_path_readable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
path$ = 8
stb_fixpath PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2364
	mov	QWORD PTR [rsp+8], rcx
; Line 2365
	jmp	SHORT $LN4@stb_fixpat
$LN2@stb_fixpat:
	mov	rax, QWORD PTR path$[rsp]
	inc	rax
	mov	QWORD PTR path$[rsp], rax
$LN4@stb_fixpat:
	mov	rax, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_fixpat
; Line 2366
	mov	rax, QWORD PTR path$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN5@stb_fixpat
; Line 2367
	mov	rax, QWORD PTR path$[rsp]
	mov	BYTE PTR [rax], 47			; 0000002fH
$LN5@stb_fixpat:
	jmp	SHORT $LN2@stb_fixpat
$LN3@stb_fixpat:
; Line 2368
	ret	0
stb_fixpath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 48
buffer$ = 64
__$ArrayPad$ = 4160
output$ = 4192
src$ = 4200
ext$ = 4208
stb_replaceext PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2486
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2488
	mov	r8d, 3
	mov	rdx, QWORD PTR src$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb_splitpath
; Line 2489
	cmp	QWORD PTR ext$[rsp], 0
	je	SHORT $LN2@stb_replac
; Line 2490
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ext$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN5@stb_replac
	mov	rax, QWORD PTR ext$[rsp]
	inc	rax
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN6@stb_replac
$LN5@stb_replac:
	mov	rax, QWORD PTR ext$[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN6@stb_replac:
	mov	rax, QWORD PTR tv74[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR buffer$[rsp]
	lea	r8, OFFSET FLAT:$SG84492
	mov	edx, 9999				; 0000270fH
	mov	rcx, QWORD PTR output$[rsp]
	call	sprintf_s
	jmp	SHORT $LN3@stb_replac
$LN2@stb_replac:
; Line 2492
	lea	r8, QWORD PTR buffer$[rsp]
	mov	edx, 4096				; 00001000H
	mov	rcx, QWORD PTR output$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
$LN3@stb_replac:
; Line 2493
	mov	rax, QWORD PTR output$[rsp]
; Line 2494
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stb_replaceext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
__$ArrayPad$ = 4144
output$ = 4176
src$ = 4184
dir$ = 4192
stb_replacedir PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2475
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2477
	mov	r8d, 6
	mov	rdx, QWORD PTR src$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb_splitpath
; Line 2478
	cmp	QWORD PTR dir$[rsp], 0
	je	SHORT $LN2@stb_replac
; Line 2479
	lea	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR dir$[rsp]
	lea	r8, OFFSET FLAT:$SG84483
	mov	edx, 9999				; 0000270fH
	mov	rcx, QWORD PTR output$[rsp]
	call	sprintf_s
	jmp	SHORT $LN3@stb_replac
$LN2@stb_replac:
; Line 2481
	lea	r8, QWORD PTR buffer$[rsp]
	mov	edx, 4096				; 00001000H
	mov	rcx, QWORD PTR output$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
$LN3@stb_replac:
; Line 2482
	mov	rax, QWORD PTR output$[rsp]
; Line 2483
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stb_replacedir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
src$ = 48
flag$ = 56
stb_splitpathdup PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2470
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2471
	mov	r8d, DWORD PTR flag$[rsp]
	mov	rdx, QWORD PTR src$[rsp]
	xor	ecx, ecx
	call	?stb__splitpath_raw@@YAPEADPEAD0H@Z	; stb__splitpath_raw
; Line 2472
	add	rsp, 40					; 00000028H
	ret	0
stb_splitpathdup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output$ = 48
src$ = 56
flag$ = 64
stb_splitpath PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2465
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2466
	mov	r8d, DWORD PTR flag$[rsp]
	mov	rdx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stb__splitpath_raw@@YAPEADPEAD0H@Z	; stb__splitpath_raw
; Line 2467
	add	rsp, 40					; 00000028H
	ret	0
stb_splitpath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
delta$ = 32
p$ = 40
q$ = 48
s$ = 56
len_replace$ = 64
len_find$ = 72
src$ = 96
find$ = 104
replace$ = 112
stb_replaceinplace PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2335
$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2336
	mov	rcx, QWORD PTR find$[rsp]
	call	strlen
	mov	QWORD PTR len_find$[rsp], rax
; Line 2337
	mov	rcx, QWORD PTR replace$[rsp]
	call	strlen
	mov	QWORD PTR len_replace$[rsp], rax
; Line 2342
	mov	rax, QWORD PTR len_find$[rsp]
	mov	rcx, QWORD PTR len_replace$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR delta$[rsp], eax
; Line 2343
	cmp	DWORD PTR delta$[rsp], 0
	jle	SHORT $LN8@stb_replac
	mov	r8d, 2343				; 00000927H
	lea	rdx, OFFSET FLAT:$SG84380
	lea	rcx, OFFSET FLAT:$SG84381
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stb_replac:
; Line 2344
	cmp	DWORD PTR delta$[rsp], 0
	jle	SHORT $LN4@stb_replac
	jmp	$LN1@stb_replac
$LN4@stb_replac:
; Line 2346
	mov	rdx, QWORD PTR find$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?strstr@@YAPEADQEADQEBD@Z		; strstr
	mov	QWORD PTR p$[rsp], rax
; Line 2347
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN5@stb_replac
	jmp	$LN1@stb_replac
$LN5@stb_replac:
; Line 2349
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR q$[rsp], rax
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN2@stb_replac:
; Line 2350
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb_replac
; Line 2351
	mov	r8, QWORD PTR len_replace$[rsp]
	mov	rdx, QWORD PTR replace$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	memcpy
; Line 2352
	mov	rax, QWORD PTR len_find$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 2353
	mov	rax, QWORD PTR len_replace$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
; Line 2354
	mov	rdx, QWORD PTR find$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?strstr@@YAPEADQEADQEBD@Z		; strstr
	mov	QWORD PTR s$[rsp], rax
; Line 2355
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN6@stb_replac
	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rsp], rax
$LN6@stb_replac:
; Line 2356
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	memmove
; Line 2357
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
; Line 2358
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 2359
	jmp	$LN2@stb_replac
$LN3@stb_replac:
; Line 2360
	mov	rax, QWORD PTR q$[rsp]
	mov	BYTE PTR [rax], 0
$LN1@stb_replac:
; Line 2361
	add	rsp, 88					; 00000058H
	ret	0
stb_replaceinplace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$ = 32
s$ = 40
q$ = 48
p$ = 56
len_replace$ = 64
len_find$ = 72
t$1 = 80
tv132 = 88
src$ = 112
find$ = 120
replace$ = 128
stb_dupreplace PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2301
$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2302
	mov	rcx, QWORD PTR find$[rsp]
	call	strlen
	mov	QWORD PTR len_find$[rsp], rax
; Line 2303
	mov	rcx, QWORD PTR replace$[rsp]
	call	strlen
	mov	QWORD PTR len_replace$[rsp], rax
; Line 2304
	mov	DWORD PTR count$[rsp], 0
; Line 2308
	mov	rdx, QWORD PTR find$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	call	?strstr@@YAPEADQEADQEBD@Z		; strstr
	mov	QWORD PTR s$[rsp], rax
; Line 2309
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN8@stb_duprep
	mov	rcx, QWORD PTR src$[rsp]
	call	QWORD PTR __imp__strdup
	jmp	$LN1@stb_duprep
$LN8@stb_duprep:
$LN4@stb_duprep:
; Line 2311
	mov	eax, DWORD PTR count$[rsp]
	inc	eax
	mov	DWORD PTR count$[rsp], eax
; Line 2312
	mov	rax, QWORD PTR len_find$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR find$[rsp]
	mov	rcx, rax
	call	?strstr@@YAPEADQEADQEBD@Z		; strstr
	mov	QWORD PTR s$[rsp], rax
; Line 2313
	cmp	QWORD PTR s$[rsp], 0
	jne	SHORT $LN4@stb_duprep
; Line 2315
	mov	rcx, QWORD PTR src$[rsp]
	call	strlen
	movsxd	rcx, DWORD PTR count$[rsp]
	mov	rdx, QWORD PTR len_find$[rsp]
	mov	r8, QWORD PTR len_replace$[rsp]
	sub	r8, rdx
	mov	rdx, r8
	imul	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
; Line 2316
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN9@stb_duprep
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb_duprep
$LN9@stb_duprep:
; Line 2317
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR q$[rsp], rax
; Line 2318
	mov	rax, QWORD PTR src$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN5@stb_duprep:
; Line 2320
	mov	rdx, QWORD PTR find$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?strstr@@YAPEADQEADQEBD@Z		; strstr
	mov	QWORD PTR t$1[rsp], rax
; Line 2321
	cmp	QWORD PTR t$1[rsp], 0
	jne	$LN10@stb_duprep
; Line 2322
	mov	rcx, QWORD PTR src$[rsp]
	call	strlen
	movsxd	rcx, DWORD PTR count$[rsp]
	mov	rdx, QWORD PTR len_find$[rsp]
	mov	r8, QWORD PTR len_replace$[rsp]
	sub	r8, rdx
	mov	rdx, r8
	imul	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+1]
	mov	r8, QWORD PTR s$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR q$[rsp]
	call	?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z	; stb_p_strcpy_s
; Line 2323
	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	QWORD PTR tv132[rsp], rax
	mov	rcx, QWORD PTR src$[rsp]
	call	strlen
	movsxd	rcx, DWORD PTR count$[rsp]
	mov	rdx, QWORD PTR len_find$[rsp]
	mov	r8, QWORD PTR len_replace$[rsp]
	sub	r8, rdx
	mov	rdx, r8
	imul	rcx, rdx
	add	rax, rcx
	mov	rcx, QWORD PTR tv132[rsp]
	cmp	rcx, rax
	je	SHORT $LN12@stb_duprep
	mov	r8d, 2323				; 00000913H
	lea	rdx, OFFSET FLAT:$SG84362
	lea	rcx, OFFSET FLAT:$SG84363
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stb_duprep:
; Line 2324
	mov	rax, QWORD PTR p$[rsp]
	jmp	$LN1@stb_duprep
$LN10@stb_duprep:
; Line 2326
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	memcpy
; Line 2327
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
; Line 2328
	mov	r8, QWORD PTR len_replace$[rsp]
	mov	rdx, QWORD PTR replace$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	memcpy
; Line 2329
	mov	rax, QWORD PTR len_replace$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q$[rsp], rax
; Line 2330
	mov	rax, QWORD PTR len_find$[rsp]
	mov	rcx, QWORD PTR t$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rsp], rax
; Line 2331
	jmp	$LN5@stb_duprep
$LN1@stb_duprep:
; Line 2332
	add	rsp, 104				; 00000068H
	ret	0
stb_dupreplace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output$ = 64
src$ = 72
delimit$ = 80
stb_strtok_invert PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2111
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2112
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8, QWORD PTR delimit$[rsp]
	mov	rdx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stb_strtok_raw@@YAPEADPEAD00HH@Z	; stb_strtok_raw
; Line 2113
	add	rsp, 56					; 00000038H
	ret	0
stb_strtok_invert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output$ = 64
src$ = 72
delimit$ = 80
stb_strtok_keep PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2106
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2107
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8, QWORD PTR delimit$[rsp]
	mov	rdx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stb_strtok_raw@@YAPEADPEAD00HH@Z	; stb_strtok_raw
; Line 2108
	add	rsp, 56					; 00000038H
	ret	0
stb_strtok_keep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output$ = 64
src$ = 72
delimit$ = 80
stb_strtok PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2101
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2102
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR delimit$[rsp]
	mov	rdx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stb_strtok_raw@@YAPEADPEAD00HH@Z	; stb_strtok_raw
; Line 2103
	add	rsp, 56					; 00000038H
	ret	0
stb_strtok ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
s$ = 32
x$ = 40
y$ = 48
stb_strrchr2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2054
$LN8:
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2055
	mov	QWORD PTR r$[rsp], 0
; Line 2056
	jmp	SHORT $LN4@stb_strrch
$LN2@stb_strrch:
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN4@stb_strrch:
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_strrch
; Line 2057
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR x$[rsp]
	cmp	eax, ecx
	je	SHORT $LN6@stb_strrch
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR y$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN5@stb_strrch
$LN6@stb_strrch:
; Line 2058
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR r$[rsp], rax
$LN5@stb_strrch:
	jmp	SHORT $LN2@stb_strrch
$LN3@stb_strrch:
; Line 2059
	mov	rax, QWORD PTR r$[rsp]
; Line 2060
	add	rsp, 24
	ret	0
stb_strrchr2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
x$ = 16
y$ = 24
stb_strchr2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2046
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
; Line 2047
	jmp	SHORT $LN4@stb_strchr
$LN2@stb_strchr:
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN4@stb_strchr:
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_strchr
; Line 2048
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR x$[rsp]
	cmp	eax, ecx
	je	SHORT $LN6@stb_strchr
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR y$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN5@stb_strchr
$LN6@stb_strchr:
; Line 2049
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stb_strchr
$LN5@stb_strchr:
	jmp	SHORT $LN2@stb_strchr
$LN3@stb_strchr:
; Line 2050
	xor	eax, eax
$LN1@stb_strchr:
; Line 2051
	ret	0
stb_strchr2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stb_tolower PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2038
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stb_tolowe:
; Line 2039
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_tolowe
; Line 2040
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	rcx, QWORD PTR s$[rsp]
	mov	BYTE PTR [rcx], al
; Line 2041
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 2042
	jmp	SHORT $LN2@stb_tolowe
$LN3@stb_tolowe:
; Line 2043
	add	rsp, 40					; 00000028H
	ret	0
stb_tolower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 40
s$ = 64
stb_duplower PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2028
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2029
	mov	rcx, QWORD PTR s$[rsp]
	call	QWORD PTR __imp__strdup
	mov	QWORD PTR p$[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR q$[rsp], rax
$LN2@stb_duplow:
; Line 2030
	mov	rax, QWORD PTR q$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@stb_duplow
; Line 2031
	mov	rax, QWORD PTR q$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	mov	rcx, QWORD PTR q$[rsp]
	mov	BYTE PTR [rcx], al
; Line 2032
	mov	rax, QWORD PTR q$[rsp]
	inc	rax
	mov	QWORD PTR q$[rsp], rax
; Line 2033
	jmp	SHORT $LN2@stb_duplow
$LN3@stb_duplow:
; Line 2034
	mov	rax, QWORD PTR p$[rsp]
; Line 2035
	add	rsp, 56					; 00000038H
	ret	0
stb_duplower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
a$ = 40
t$ = 64
n$ = 72
stb_substr PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2017
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2019
	mov	rcx, QWORD PTR t$[rsp]
	call	strlen
	mov	DWORD PTR z$[rsp], eax
; Line 2020
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN2@stb_substr
	mov	eax, DWORD PTR z$[rsp]
	mov	DWORD PTR n$[rsp], eax
$LN2@stb_substr:
; Line 2021
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR a$[rsp], rax
; Line 2022
	movsxd	rax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	r9, rax
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR a$[rsp]
	call	?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z	; stb_p_strncpy_s
; Line 2023
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 2024
	mov	rax, QWORD PTR a$[rsp]
; Line 2025
	add	rsp, 56					; 00000038H
	ret	0
stb_substr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
t$ = 56
n$ = 64
stb_strncpy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 2010
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2011
	movsxd	rax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	r9, rax
	mov	r8, QWORD PTR t$[rsp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z	; stb_p_strncpy_s
; Line 2012
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 2013
	mov	rax, QWORD PTR s$[rsp]
; Line 2014
	add	rsp, 40					; 00000028H
	ret	0
stb_strncpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stb_skipnewline PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1989
	mov	QWORD PTR [rsp+8], rcx
; Line 1990
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	je	SHORT $LN3@stb_skipne
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN2@stb_skipne
$LN3@stb_skipne:
; Line 1991
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR s$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cmp	eax, 23
	jne	SHORT $LN4@stb_skipne
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN4@stb_skipne:
; Line 1992
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
$LN2@stb_skipne:
; Line 1994
	mov	rax, QWORD PTR s$[rsp]
; Line 1995
	ret	0
stb_skipnewline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
n$ = 36
s$ = 64
stb_trimwhite PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1998
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2000
	mov	rcx, QWORD PTR s$[rsp]
	call	stb_skipwhite
	mov	QWORD PTR s$[rsp], rax
; Line 2001
	mov	rcx, QWORD PTR s$[rsp]
	call	strlen
	mov	DWORD PTR n$[rsp], eax
; Line 2002
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN4@stb_trimwh
$LN2@stb_trimwh:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_trimwh:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@stb_trimwh
; Line 2003
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	jne	SHORT $LN5@stb_trimwh
; Line 2004
	jmp	SHORT $LN3@stb_trimwh
$LN5@stb_trimwh:
	jmp	SHORT $LN2@stb_trimwh
$LN3@stb_trimwh:
; Line 2005
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 2006
	mov	rax, QWORD PTR s$[rsp]
; Line 2007
	add	rsp, 56					; 00000038H
	ret	0
stb_trimwhite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stb_skipwhite PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1983
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stb_skipwh:
; Line 1984
	mov	rax, QWORD PTR s$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	je	SHORT $LN3@stb_skipwh
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN2@stb_skipwh
$LN3@stb_skipwh:
; Line 1985
	mov	rax, QWORD PTR s$[rsp]
; Line 1986
	add	rsp, 40					; 00000028H
	ret	0
stb_skipwhite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
s$ = 64
result$ = 72
?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z PROC	; stb_probe_guess
; File W:\cpp\void\vendor\stb\stb.h
; Line 1767
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1768
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	$LN6@stb_probe_
	cmp	DWORD PTR tv65[rsp], 1
	je	SHORT $LN4@stb_probe_
	cmp	DWORD PTR tv65[rsp], 2
	je	$LN8@stb_probe_
	cmp	DWORD PTR tv65[rsp], 3
	je	$LN9@stb_probe_
	jmp	$LN2@stb_probe_
$LN4@stb_probe_:
; Line 1770
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN5@stb_probe_
; Line 1771
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 1772
	xor	eax, eax
	jmp	$LN1@stb_probe_
$LN5@stb_probe_:
; Line 1774
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jl	SHORT $LN11@stb_probe_
	mov	r8d, 1774				; 000006eeH
	lea	rdx, OFFSET FLAT:$SG83843
	lea	rcx, OFFSET FLAT:$SG83844
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@stb_probe_:
; Line 1776
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	inc	eax
	shr	eax, 1
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 1777
	jmp	$LN2@stb_probe_
$LN6@stb_probe_:
; Line 1780
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN7@stb_probe_
; Line 1781
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 1782
	xor	eax, eax
	jmp	SHORT $LN1@stb_probe_
$LN7@stb_probe_:
; Line 1784
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jl	SHORT $LN12@stb_probe_
	mov	r8d, 1784				; 000006f8H
	lea	rdx, OFFSET FLAT:$SG83847
	lea	rcx, OFFSET FLAT:$SG83848
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stb_probe_:
; Line 1786
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	shr	eax, 1
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 1787
	jmp	SHORT $LN2@stb_probe_
$LN8@stb_probe_:
$LN9@stb_probe_:
; Line 1790
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+8], ecx
$LN2@stb_probe_:
; Line 1793
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
; Line 1794
	mov	eax, 1
$LN1@stb_probe_:
; Line 1795
	add	rsp, 56					; 00000038H
	ret	0
?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z ENDP	; stb_probe_guess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
s$ = 64
compare$ = 72
result$ = 80
stb_probe PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1798
$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1799
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 0
	je	$LN10@stb_probe
	cmp	DWORD PTR tv65[rsp], 1
	je	$LN13@stb_probe
	cmp	DWORD PTR tv65[rsp], 2
	je	SHORT $LN4@stb_probe
	cmp	DWORD PTR tv65[rsp], 3
	je	SHORT $LN5@stb_probe
	jmp	$LN2@stb_probe
$LN4@stb_probe:
$LN5@stb_probe:
; Line 1802
	cmp	DWORD PTR compare$[rsp], 0
	jg	SHORT $LN6@stb_probe
; Line 1804
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 2
	jne	SHORT $LN8@stb_probe
; Line 1805
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+12], 0
	jmp	SHORT $LN9@stb_probe
$LN8@stb_probe:
; Line 1807
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+12], 1
$LN9@stb_probe:
; Line 1808
	jmp	SHORT $LN7@stb_probe
$LN6@stb_probe:
; Line 1810
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1811
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 1812
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN7@stb_probe:
; Line 1814
	jmp	SHORT $LN2@stb_probe
$LN10@stb_probe:
; Line 1820
	cmp	DWORD PTR compare$[rsp], 0
	jg	SHORT $LN11@stb_probe
; Line 1821
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx
	jmp	SHORT $LN12@stb_probe
$LN11@stb_probe:
; Line 1823
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
$LN12@stb_probe:
; Line 1824
	jmp	SHORT $LN2@stb_probe
$LN13@stb_probe:
; Line 1830
	cmp	DWORD PTR compare$[rsp], 0
	jge	SHORT $LN14@stb_probe
; Line 1831
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
	jmp	SHORT $LN15@stb_probe
$LN14@stb_probe:
; Line 1833
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN15@stb_probe:
$LN2@stb_probe:
; Line 1837
	mov	rdx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z ; stb_probe_guess
; Line 1838
	add	rsp, 56					; 00000038H
	ret	0
stb_probe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
r$ = 36
s$ = 64
minv$ = 72
find_smallest$ = 80
stb_search_open PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1852
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1854
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+16], 4
; Line 1855
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR minv$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1856
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR minv$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 1857
	cmp	DWORD PTR find_smallest$[rsp], 0
	je	SHORT $LN3@stb_search
	mov	DWORD PTR tv71[rsp], 2
	jmp	SHORT $LN4@stb_search
$LN3@stb_search:
	mov	DWORD PTR tv71[rsp], 3
$LN4@stb_search:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv71[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 1858
	lea	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z ; stb_probe_guess
; Line 1859
	mov	eax, DWORD PTR r$[rsp]
; Line 1860
	add	rsp, 56					; 00000038H
	ret	0
stb_search_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
r$ = 36
s$ = 64
minv$ = 72
maxv$ = 80
find_smallest$ = 88
stb_search_binary PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1841
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1843
	mov	eax, DWORD PTR minv$[rsp]
	cmp	DWORD PTR maxv$[rsp], eax
	jge	SHORT $LN2@stb_search
	mov	eax, DWORD PTR minv$[rsp]
	dec	eax
	jmp	SHORT $LN1@stb_search
$LN2@stb_search:
; Line 1844
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR minv$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1845
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR maxv$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 1846
	cmp	DWORD PTR find_smallest$[rsp], 0
	je	SHORT $LN4@stb_search
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN5@stb_search
$LN4@stb_search:
	mov	DWORD PTR tv70[rsp], 1
$LN5@stb_search:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv70[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 1847
	lea	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stb_probe_guess@@YAHPEAUstb_search@@PEAH@Z ; stb_probe_guess
; Line 1848
	mov	eax, DWORD PTR r$[rsp]
$LN1@stb_search:
; Line 1849
	add	rsp, 56					; 00000038H
	ret	0
stb_search_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
size$ = 16
?stb_memcmp@@YAP6AHPEBX0@ZHH@Z PROC			; stb_memcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1735
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1736
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__memcmpoffset@@3HA, eax
; Line 1737
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR ?stb__memcmpsize@@3HA, eax
; Line 1738
	lea	rax, OFFSET FLAT:?stb__memcmp@@YAHPEBX0@Z ; stb__memcmp
; Line 1739
	ret	0
?stb_memcmp@@YAP6AHPEBX0@ZHH@Z ENDP			; stb_memcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
?stb_ucharcmp@@YAP6AHPEBX0@ZH@Z PROC			; stb_ucharcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1705
	mov	DWORD PTR [rsp+8], ecx
; Line 1706
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__ucharcmpoffset@@3HA, eax
; Line 1707
	lea	rax, OFFSET FLAT:?stb__ucharcmp@@YAHPEBX0@Z ; stb__ucharcmp
; Line 1708
	ret	0
?stb_ucharcmp@@YAP6AHPEBX0@ZH@Z ENDP			; stb_ucharcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
a$ = 64
b$ = 72
?stb__memcmp@@YAHPEBX0@Z PROC				; stb__memcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1688
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1689
	movsxd	rax, DWORD PTR ?stb__memcmpsize@@3HA
	movsxd	rcx, DWORD PTR ?stb__memcmpoffset@@3HA
	mov	rdx, QWORD PTR b$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR ?stb__memcmpoffset@@3HA
	mov	r8, QWORD PTR a$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv71[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv71[rsp]
	mov	rcx, rax
	call	memcmp
; Line 1690
	add	rsp, 56					; 00000038H
	ret	0
?stb__memcmp@@YAHPEBX0@Z ENDP				; stb__memcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 40
a$ = 64
b$ = 72
?stb__qsort_stricmp@@YAHPEBX0@Z PROC			; stb__qsort_stricmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1681
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1682
	movsxd	rax, DWORD PTR ?stb__strcmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR p$[rsp], rax
; Line 1683
	movsxd	rax, DWORD PTR ?stb__strcmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR q$[rsp], rax
; Line 1684
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp__stricmp
; Line 1685
	add	rsp, 56					; 00000038H
	ret	0
?stb__qsort_stricmp@@YAHPEBX0@Z ENDP			; stb__qsort_stricmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 40
a$ = 64
b$ = 72
?stb__qsort_strcmp@@YAHPEBX0@Z PROC			; stb__qsort_strcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1674
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1675
	movsxd	rax, DWORD PTR ?stb__strcmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR p$[rsp], rax
; Line 1676
	movsxd	rax, DWORD PTR ?stb__strcmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR q$[rsp], rax
; Line 1677
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	strcmp
; Line 1678
	add	rsp, 56					; 00000038H
	ret	0
?stb__qsort_strcmp@@YAHPEBX0@Z ENDP			; stb__qsort_strcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 0
tv71 = 4
p$ = 8
q$ = 16
a$ = 48
b$ = 56
?stb__doublecmp@@YAHPEBX0@Z PROC			; stb__doublecmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1667
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1668
	movsxd	rax, DWORD PTR ?stb__doublecmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	movsd	xmm0, QWORD PTR [rcx+rax]
	movsd	QWORD PTR p$[rsp], xmm0
; Line 1669
	movsxd	rax, DWORD PTR ?stb__doublecmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm0, QWORD PTR [rcx+rax]
	movsd	QWORD PTR q$[rsp], xmm0
; Line 1670
	movsd	xmm0, QWORD PTR q$[rsp]
	comisd	xmm0, QWORD PTR p$[rsp]
	jbe	SHORT $LN5@stb__doubl
	mov	DWORD PTR tv71[rsp], -1
	jmp	SHORT $LN6@stb__doubl
$LN5@stb__doubl:
	movsd	xmm0, QWORD PTR p$[rsp]
	comisd	xmm0, QWORD PTR q$[rsp]
	jbe	SHORT $LN3@stb__doubl
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb__doubl
$LN3@stb__doubl:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb__doubl:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR tv71[rsp], eax
$LN6@stb__doubl:
	mov	eax, DWORD PTR tv71[rsp]
; Line 1671
	add	rsp, 40					; 00000028H
	ret	0
?stb__doublecmp@@YAHPEBX0@Z ENDP			; stb__doublecmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 0
q$ = 4
tv70 = 8
tv71 = 12
a$ = 32
b$ = 40
?stb__floatcmp@@YAHPEBX0@Z PROC				; stb__floatcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1660
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1661
	movsxd	rax, DWORD PTR ?stb__floatcmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR p$[rsp], xmm0
; Line 1662
	movsxd	rax, DWORD PTR ?stb__floatcmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR q$[rsp], xmm0
; Line 1663
	movss	xmm0, DWORD PTR q$[rsp]
	comiss	xmm0, DWORD PTR p$[rsp]
	jbe	SHORT $LN5@stb__float
	mov	DWORD PTR tv71[rsp], -1
	jmp	SHORT $LN6@stb__float
$LN5@stb__float:
	movss	xmm0, DWORD PTR p$[rsp]
	comiss	xmm0, DWORD PTR q$[rsp]
	jbe	SHORT $LN3@stb__float
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb__float
$LN3@stb__float:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb__float:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR tv71[rsp], eax
$LN6@stb__float:
	mov	eax, DWORD PTR tv71[rsp]
; Line 1664
	add	rsp, 24
	ret	0
?stb__floatcmp@@YAHPEBX0@Z ENDP				; stb__floatcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 0
p$ = 4
tv72 = 8
tv73 = 12
a$ = 32
b$ = 40
?stb__ucharcmp@@YAHPEBX0@Z PROC				; stb__ucharcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1653
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1654
	movsxd	rax, DWORD PTR ?stb__ucharcmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR p$[rsp], eax
; Line 1655
	movsxd	rax, DWORD PTR ?stb__ucharcmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR q$[rsp], eax
; Line 1656
	mov	eax, DWORD PTR q$[rsp]
	cmp	DWORD PTR p$[rsp], eax
	jge	SHORT $LN5@stb__uchar
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN6@stb__uchar
$LN5@stb__uchar:
	mov	eax, DWORD PTR q$[rsp]
	cmp	DWORD PTR p$[rsp], eax
	jle	SHORT $LN3@stb__uchar
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN4@stb__uchar
$LN3@stb__uchar:
	mov	DWORD PTR tv72[rsp], 0
$LN4@stb__uchar:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN6@stb__uchar:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1657
	add	rsp, 24
	ret	0
?stb__ucharcmp@@YAHPEBX0@Z ENDP				; stb__ucharcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 0
q$ = 4
tv70 = 8
tv71 = 12
a$ = 32
b$ = 40
?stb__intcmprev@@YAHPEBX0@Z PROC			; stb__intcmprev
; File W:\cpp\void\vendor\stb\stb.h
; Line 1646
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1647
	movsxd	rax, DWORD PTR ?stb__intcmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p$[rsp], eax
; Line 1648
	movsxd	rax, DWORD PTR ?stb__intcmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR q$[rsp], eax
; Line 1649
	mov	eax, DWORD PTR p$[rsp]
	cmp	DWORD PTR q$[rsp], eax
	jge	SHORT $LN5@stb__intcm
	mov	DWORD PTR tv71[rsp], -1
	jmp	SHORT $LN6@stb__intcm
$LN5@stb__intcm:
	mov	eax, DWORD PTR p$[rsp]
	cmp	DWORD PTR q$[rsp], eax
	jle	SHORT $LN3@stb__intcm
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb__intcm
$LN3@stb__intcm:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb__intcm:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR tv71[rsp], eax
$LN6@stb__intcm:
	mov	eax, DWORD PTR tv71[rsp]
; Line 1650
	add	rsp, 24
	ret	0
?stb__intcmprev@@YAHPEBX0@Z ENDP			; stb__intcmprev
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 0
p$ = 4
tv70 = 8
tv71 = 12
a$ = 32
b$ = 40
?stb__intcmp@@YAHPEBX0@Z PROC				; stb__intcmp
; File W:\cpp\void\vendor\stb\stb.h
; Line 1639
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1640
	movsxd	rax, DWORD PTR ?stb__intcmpoffset@@3HA
	mov	rcx, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p$[rsp], eax
; Line 1641
	movsxd	rax, DWORD PTR ?stb__intcmpoffset@@3HA
	mov	rcx, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR q$[rsp], eax
; Line 1642
	mov	eax, DWORD PTR q$[rsp]
	cmp	DWORD PTR p$[rsp], eax
	jge	SHORT $LN5@stb__intcm
	mov	DWORD PTR tv71[rsp], -1
	jmp	SHORT $LN6@stb__intcm
$LN5@stb__intcm:
	mov	eax, DWORD PTR q$[rsp]
	cmp	DWORD PTR p$[rsp], eax
	jle	SHORT $LN3@stb__intcm
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stb__intcm
$LN3@stb__intcm:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stb__intcm:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR tv71[rsp], eax
$LN6@stb__intcm:
	mov	eax, DWORD PTR tv71[rsp]
; Line 1643
	add	rsp, 24
	ret	0
?stb__intcmp@@YAHPEBX0@Z ENDP				; stb__intcmp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
stb_doublecmp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1729
	mov	DWORD PTR [rsp+8], ecx
; Line 1730
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__doublecmpoffset@@3HA, eax
; Line 1731
	lea	rax, OFFSET FLAT:?stb__doublecmp@@YAHPEBX0@Z ; stb__doublecmp
; Line 1732
	ret	0
stb_doublecmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
stb_floatcmp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1723
	mov	DWORD PTR [rsp+8], ecx
; Line 1724
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__floatcmpoffset@@3HA, eax
; Line 1725
	lea	rax, OFFSET FLAT:?stb__floatcmp@@YAHPEBX0@Z ; stb__floatcmp
; Line 1726
	ret	0
stb_floatcmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
stb_qsort_stricmp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1717
	mov	DWORD PTR [rsp+8], ecx
; Line 1718
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__strcmpoffset@@3HA, eax
; Line 1719
	lea	rax, OFFSET FLAT:?stb__qsort_stricmp@@YAHPEBX0@Z ; stb__qsort_stricmp
; Line 1720
	ret	0
stb_qsort_stricmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
stb_qsort_strcmp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1711
	mov	DWORD PTR [rsp+8], ecx
; Line 1712
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__strcmpoffset@@3HA, eax
; Line 1713
	lea	rax, OFFSET FLAT:?stb__qsort_strcmp@@YAHPEBX0@Z ; stb__qsort_strcmp
; Line 1714
	ret	0
stb_qsort_strcmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
stb_intcmprev PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1699
	mov	DWORD PTR [rsp+8], ecx
; Line 1700
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__intcmpoffset@@3HA, eax
; Line 1701
	lea	rax, OFFSET FLAT:?stb__intcmprev@@YAHPEBX0@Z ; stb__intcmprev
; Line 1702
	ret	0
stb_intcmprev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offset$ = 8
stb_intcmp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1693
	mov	DWORD PTR [rsp+8], ecx
; Line 1694
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR ?stb__intcmpoffset@@3HA, eax
; Line 1695
	lea	rax, OFFSET FLAT:?stb__intcmp@@YAHPEBX0@Z ; stb__intcmp
; Line 1696
	ret	0
stb_intcmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 48
stb_highbit8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1594
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1595
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 255				; 000000ffH
	mov	eax, eax
	mov	ecx, eax
	call	stb_log2_ceil
; Line 1596
	add	rsp, 40					; 00000028H
	ret	0
stb_highbit8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 0
n$ = 32
stb_lowbit8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1599
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1601
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 15
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?lowbit4@?1??stb_lowbit8@@9@4PACA
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 1602
	cmp	DWORD PTR k$[rsp], 0
	jl	SHORT $LN2@stb_lowbit
	mov	eax, DWORD PTR k$[rsp]
	jmp	SHORT $LN1@stb_lowbit
$LN2@stb_lowbit:
; Line 1603
	mov	eax, DWORD PTR n$[rsp]
	shr	eax, 4
	and	eax, 15
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?lowbit4@?1??stb_lowbit8@@9@4PACA
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 1604
	cmp	DWORD PTR k$[rsp], 0
	jl	SHORT $LN3@stb_lowbit
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 4
	jmp	SHORT $LN1@stb_lowbit
$LN3@stb_lowbit:
; Line 1605
	mov	eax, DWORD PTR k$[rsp]
$LN1@stb_lowbit:
; Line 1606
	add	rsp, 24
	ret	0
stb_lowbit8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
tv67 = 4
n$ = 32
stb_log2_floor PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1544
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1548
	mov	rax, QWORD PTR n$[rsp]
	bsr	rax, rax
	mov	DWORD PTR i$[rsp], eax
; Line 1552
	cmp	DWORD PTR i$[rsp], 0
	je	SHORT $LN3@stb_log2_f
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN4@stb_log2_f
$LN3@stb_log2_f:
	mov	DWORD PTR tv67[rsp], -1			; ffffffffH
$LN4@stb_log2_f:
	mov	eax, DWORD PTR tv67[rsp]
; Line 1561
	add	rsp, 24
	ret	0
stb_log2_floor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 48
stb_log2_ceil PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1588
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1589
	mov	rcx, QWORD PTR n$[rsp]
	call	stb_is_pow2
	test	eax, eax
	je	SHORT $LN2@stb_log2_c
	mov	rcx, QWORD PTR n$[rsp]
	call	stb_log2_floor
	jmp	SHORT $LN1@stb_log2_c
	jmp	SHORT $LN3@stb_log2_c
$LN2@stb_log2_c:
; Line 1590
	mov	rcx, QWORD PTR n$[rsp]
	call	stb_log2_floor
	inc	eax
$LN3@stb_log2_c:
$LN1@stb_log2_c:
; Line 1591
	add	rsp, 40					; 00000028H
	ret	0
stb_log2_ceil ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
n$ = 32
stb_is_pow2 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1534
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1535
	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	mov	rcx, QWORD PTR n$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN3@stb_is_pow
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stb_is_pow
$LN3@stb_is_pow:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stb_is_pow:
	mov	eax, DWORD PTR tv67[rsp]
; Line 1536
	add	rsp, 24
	ret	0
stb_is_pow2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
stb_bitreverse PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1525
	mov	DWORD PTR [rsp+8], ecx
; Line 1526
	mov	eax, DWORD PTR n$[rsp]
	and	eax, -1431655766			; aaaaaaaaH
	shr	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 1431655765				; 55555555H
	shl	ecx, 1
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1527
	mov	eax, DWORD PTR n$[rsp]
	and	eax, -858993460				; ccccccccH
	shr	eax, 2
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 858993459				; 33333333H
	shl	ecx, 2
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1528
	mov	eax, DWORD PTR n$[rsp]
	and	eax, -252645136				; f0f0f0f0H
	shr	eax, 4
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 252645135				; 0f0f0f0fH
	shl	ecx, 4
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1529
	mov	eax, DWORD PTR n$[rsp]
	and	eax, -16711936				; ff00ff00H
	shr	eax, 8
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 16711935				; 00ff00ffH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1530
	mov	eax, DWORD PTR n$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR n$[rsp]
	shl	ecx, 16
	or	eax, ecx
; Line 1531
	ret	0
stb_bitreverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
stb_bitreverse8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1518
	mov	BYTE PTR [rsp+8], cl
; Line 1519
	movzx	eax, BYTE PTR n$[rsp]
	and	eax, 170				; 000000aaH
	sar	eax, 1
	movzx	ecx, BYTE PTR n$[rsp]
	and	ecx, 85					; 00000055H
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	BYTE PTR n$[rsp], al
; Line 1520
	movzx	eax, BYTE PTR n$[rsp]
	and	eax, 204				; 000000ccH
	sar	eax, 2
	movzx	ecx, BYTE PTR n$[rsp]
	and	ecx, 51					; 00000033H
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	BYTE PTR n$[rsp], al
; Line 1521
	movzx	eax, BYTE PTR n$[rsp]
	sar	eax, 4
	movzx	ecx, BYTE PTR n$[rsp]
	shl	ecx, 4
	add	eax, ecx
	movzx	eax, al
; Line 1522
	ret	0
stb_bitreverse8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
stb_bitcount PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1508
	mov	DWORD PTR [rsp+8], ecx
; Line 1509
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 1510
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 1511
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR a$[rsp], eax
; Line 1512
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 1513
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 1514
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
; Line 1515
	ret	0
stb_bitcount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
target_pos$ = 8
curpos$ = 16
maxvel$ = 24
maxacc$ = 32
dt$ = 40
curvel$ = 48
?stb_quadratic_controller@@YAMMMMMMPEAM@Z PROC		; stb_quadratic_controller
; File W:\cpp\void\vendor\stb\stb.h
; Line 1434
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 1435
	xorps	xmm0, xmm0
; Line 1436
	ret	0
?stb_quadratic_controller@@YAMMMMMMPEAM@Z ENDP		; stb_quadratic_controller
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
x_min$ = 16
x_max$ = 24
out_min$ = 32
out_max$ = 40
stb_linear_remap PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1476
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
; Line 1477
	movsd	xmm0, QWORD PTR x$[rsp]
	subsd	xmm0, QWORD PTR x_min$[rsp]
	movsd	xmm1, QWORD PTR x_max$[rsp]
	subsd	xmm1, QWORD PTR x_min$[rsp]
	cvtsd2ss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	divsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR out_max$[rsp]
	subsd	xmm1, QWORD PTR out_min$[rsp]
	cvtsd2ss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR out_min$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 1478
	ret	0
stb_linear_remap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
it$ = 0
t$ = 32
p0$ = 40
p1$ = 48
p2$ = 56
p3$ = 64
stb_cubic_bezier_1d PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1362
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 1363
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rsp]
	movss	DWORD PTR it$[rsp], xmm0
; Line 1364
	movss	xmm0, DWORD PTR it$[rsp]
	mulss	xmm0, DWORD PTR it$[rsp]
	mulss	xmm0, DWORD PTR it$[rsp]
	mulss	xmm0, DWORD PTR p0$[rsp]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR it$[rsp]
	mulss	xmm1, DWORD PTR it$[rsp]
	mulss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR p1$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR it$[rsp]
	mulss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR p2$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR p3$[rsp]
	addss	xmm0, xmm1
; Line 1365
	add	rsp, 24
	ret	0
stb_cubic_bezier_1d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 8
stb_smoothstep PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1357
	movss	DWORD PTR [rsp+8], xmm0
; Line 1358
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR t$[rsp]
	movss	xmm1, DWORD PTR __real@40400000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm1, DWORD PTR t$[rsp]
	mulss	xmm0, xmm1
; Line 1359
	ret	0
stb_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 0
tv133 = 4
n$ = 32
stb_power_of_two_nearest_prime PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1460
$LN8:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1463
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stb_power_
; Line 1465
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stb_power_
$LN2@stb_power_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stb_power_:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN3@stb_power_
; Line 1466
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv133[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv133[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$1[rsp]
	lea	rdx, OFFSET FLAT:?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx*2-1]
	movsxd	rcx, DWORD PTR i$1[rsp]
	lea	rdx, OFFSET FLAT:?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stb_power_
$LN3@stb_power_:
; Line 1467
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
	mov	BYTE PTR [rcx+rax], 2
; Line 1468
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
	mov	BYTE PTR [rcx+rax], 1
$LN5@stb_power_:
; Line 1470
	cmp	DWORD PTR n$[rsp], 32			; 00000020H
	jl	SHORT $LN6@stb_power_
	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@stb_power_
$LN6@stb_power_:
; Line 1471
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?tab@?1??stb_power_of_two_nearest_prime@@9@4PACA
	movsx	eax, BYTE PTR [rcx+rax]
$LN1@stb_power_:
; Line 1472
	add	rsp, 24
	ret	0
stb_power_of_two_nearest_prime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
tv71 = 4
j$ = 8
tv76 = 12
tv80 = 16
m$ = 48
stb_is_prime PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1446
$LN16:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1448
	cmp	DWORD PTR m$[rsp], 2
	jae	SHORT $LN5@stb_is_pri
	xor	eax, eax
	jmp	$LN1@stb_is_pri
$LN5@stb_is_pri:
; Line 1449
	cmp	DWORD PTR m$[rsp], 2
	jne	SHORT $LN6@stb_is_pri
	mov	eax, 1
	jmp	$LN1@stb_is_pri
$LN6@stb_is_pri:
; Line 1450
	mov	eax, DWORD PTR m$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN7@stb_is_pri
	xor	eax, eax
	jmp	$LN1@stb_is_pri
$LN7@stb_is_pri:
; Line 1451
	xor	edx, edx
	mov	eax, DWORD PTR m$[rsp]
	mov	ecx, 3
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN8@stb_is_pri
	cmp	DWORD PTR m$[rsp], 3
	jne	SHORT $LN12@stb_is_pri
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN13@stb_is_pri
$LN12@stb_is_pri:
	mov	DWORD PTR tv71[rsp], 0
$LN13@stb_is_pri:
	mov	eax, DWORD PTR tv71[rsp]
	jmp	$LN1@stb_is_pri
$LN8@stb_is_pri:
; Line 1452
	mov	DWORD PTR i$[rsp], 5
	jmp	SHORT $LN4@stb_is_pri
$LN2@stb_is_pri:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_is_pri:
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
	mov	eax, DWORD PTR m$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	ja	SHORT $LN14@stb_is_pri
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jbe	SHORT $LN14@stb_is_pri
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN15@stb_is_pri
$LN14@stb_is_pri:
	mov	DWORD PTR tv76[rsp], 0
$LN15@stb_is_pri:
	cmp	DWORD PTR tv76[rsp], 0
	je	SHORT $LN3@stb_is_pri
; Line 1453
	xor	edx, edx
	mov	eax, DWORD PTR m$[rsp]
	div	DWORD PTR i$[rsp]
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN9@stb_is_pri
	xor	eax, eax
	jmp	SHORT $LN1@stb_is_pri
$LN9@stb_is_pri:
; Line 1454
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR tv80[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR m$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN10@stb_is_pri
	xor	eax, eax
	jmp	SHORT $LN1@stb_is_pri
$LN10@stb_is_pri:
; Line 1455
	jmp	SHORT $LN2@stb_is_pri
$LN3@stb_is_pri:
; Line 1456
	mov	eax, 1
$LN1@stb_is_pri:
; Line 1457
	add	rsp, 40					; 00000028H
	ret	0
stb_is_prime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
y$ = 56
delta$ = 64
max_ulps$ = 72
stb_float_eq PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1439
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 1440
	movss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR y$[rsp]
	cvtss2sd xmm0, xmm0
	call	fabs
	cvtss2sd xmm1, DWORD PTR delta$[rsp]
	comisd	xmm1, xmm0
	jb	SHORT $LN2@stb_float_
	mov	eax, 1
	jmp	SHORT $LN1@stb_float_
$LN2@stb_float_:
; Line 1441
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	cmp	eax, DWORD PTR max_ulps$[rsp]
	jg	SHORT $LN3@stb_float_
	mov	eax, 1
	jmp	SHORT $LN1@stb_float_
$LN3@stb_float_:
; Line 1442
	xor	eax, eax
$LN1@stb_float_:
; Line 1443
	add	rsp, 40					; 00000028H
	ret	0
stb_float_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cp$ = 0
p$ = 4
sign$ = 8
curpos$ = 32
target_pos$ = 40
acc$ = 48
deacc$ = 56
dt$ = 64
stb_linear_controller PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1406
$LN10:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1407
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR sign$[rsp], xmm0
	mov	rax, QWORD PTR curpos$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR cp$[rsp], xmm0
; Line 1408
	movss	xmm0, DWORD PTR cp$[rsp]
	ucomiss	xmm0, DWORD PTR target_pos$[rsp]
	jp	SHORT $LN2@stb_linear
	jne	SHORT $LN2@stb_linear
	jmp	$LN1@stb_linear
$LN2@stb_linear:
; Line 1409
	movss	xmm0, DWORD PTR cp$[rsp]
	comiss	xmm0, DWORD PTR target_pos$[rsp]
	jbe	SHORT $LN3@stb_linear
; Line 1410
	movss	xmm0, DWORD PTR target_pos$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR target_pos$[rsp], xmm0
; Line 1411
	movss	xmm0, DWORD PTR cp$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR cp$[rsp], xmm0
; Line 1412
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR sign$[rsp], xmm0
$LN3@stb_linear:
; Line 1415
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR cp$[rsp]
	jbe	SHORT $LN4@stb_linear
; Line 1416
	movss	xmm0, DWORD PTR deacc$[rsp]
	mulss	xmm0, DWORD PTR dt$[rsp]
	movss	xmm1, DWORD PTR cp$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR p$[rsp], xmm0
; Line 1417
	movss	xmm0, DWORD PTR p$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@stb_linear
; Line 1418
	xorps	xmm0, xmm0
	movss	DWORD PTR p$[rsp], xmm0
; Line 1419
	movss	xmm0, DWORD PTR cp$[rsp]
	divss	xmm0, DWORD PTR deacc$[rsp]
	movss	xmm1, DWORD PTR dt$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dt$[rsp], xmm0
; Line 1420
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR dt$[rsp]
	jbe	SHORT $LN7@stb_linear
	xorps	xmm0, xmm0
	movss	DWORD PTR dt$[rsp], xmm0
$LN7@stb_linear:
; Line 1421
	jmp	SHORT $LN6@stb_linear
$LN5@stb_linear:
; Line 1422
	xorps	xmm0, xmm0
	movss	DWORD PTR dt$[rsp], xmm0
$LN6@stb_linear:
; Line 1424
	movss	xmm0, DWORD PTR p$[rsp]
	movss	DWORD PTR cp$[rsp], xmm0
$LN4@stb_linear:
; Line 1427
	movss	xmm0, DWORD PTR acc$[rsp]
	mulss	xmm0, DWORD PTR dt$[rsp]
	movss	xmm1, DWORD PTR cp$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR p$[rsp], xmm0
; Line 1428
	movss	xmm0, DWORD PTR p$[rsp]
	comiss	xmm0, DWORD PTR target_pos$[rsp]
	jbe	SHORT $LN8@stb_linear
	movss	xmm0, DWORD PTR target_pos$[rsp]
	movss	DWORD PTR p$[rsp], xmm0
$LN8@stb_linear:
; Line 1429
	movss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR sign$[rsp]
	mov	rax, QWORD PTR curpos$[rsp]
	movss	DWORD PTR [rax], xmm0
$LN1@stb_linear:
; Line 1431
	add	rsp, 24
	ret	0
stb_linear_controller ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
face_number$ = 48
vertex_number$ = 56
axis$ = 64
stb_box_face_vertex_axis_side PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1389
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1399
	cmp	DWORD PTR face_number$[rsp], 0
	jl	SHORT $LN3@stb_box_fa
	cmp	DWORD PTR face_number$[rsp], 6
	jl	SHORT $LN4@stb_box_fa
$LN3@stb_box_fa:
	mov	r8d, 1399				; 00000577H
	lea	rdx, OFFSET FLAT:$SG83518
	lea	rcx, OFFSET FLAT:$SG83519
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stb_box_fa:
; Line 1400
	cmp	DWORD PTR vertex_number$[rsp], 0
	jl	SHORT $LN5@stb_box_fa
	cmp	DWORD PTR vertex_number$[rsp], 4
	jl	SHORT $LN6@stb_box_fa
$LN5@stb_box_fa:
	mov	r8d, 1400				; 00000578H
	lea	rdx, OFFSET FLAT:$SG83520
	lea	rcx, OFFSET FLAT:$SG83521
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stb_box_fa:
; Line 1401
	cmp	DWORD PTR axis$[rsp], 0
	jl	SHORT $LN7@stb_box_fa
	cmp	DWORD PTR axis$[rsp], 3
	jl	SHORT $LN8@stb_box_fa
$LN7@stb_box_fa:
	mov	r8d, 1401				; 00000579H
	lea	rdx, OFFSET FLAT:$SG83522
	lea	rcx, OFFSET FLAT:$SG83523
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stb_box_fa:
; Line 1402
	movsxd	rax, DWORD PTR face_number$[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rcx, OFFSET FLAT:?box_vertices@?1??stb_box_face_vertex_axis_side@@9@4PAY132HA
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR vertex_number$[rsp]
	imul	rcx, rcx, 12
	add	rax, rcx
	movsxd	rcx, DWORD PTR axis$[rsp]
	mov	eax, DWORD PTR [rax+rcx*4]
; Line 1403
	add	rsp, 40					; 00000028H
	ret	0
stb_box_face_vertex_axis_side ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
p$ = 36
i$ = 40
tv73 = 44
u$1 = 48
v$2 = 56
normal$ = 80
num_vert$ = 88
vert$ = 96
normalize$ = 104
stb_newell_normal PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1368
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1371
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR normal$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR normal$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR normal$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 1372
	mov	eax, DWORD PTR num_vert$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stb_newell
$LN2@stb_newell:
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv73[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_newell:
	mov	eax, DWORD PTR num_vert$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stb_newell
; Line 1373
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR vert$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR u$1[rsp], rax
; Line 1374
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR vert$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$2[rsp], rax
; Line 1375
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$1[rsp]
	mov	r8, QWORD PTR v$2[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	subss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR u$1[rsp]
	mov	r8, QWORD PTR v$2[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	addss	xmm1, DWORD PTR [r8+rcx]
	mulss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR normal$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR normal$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 1376
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR u$1[rsp]
	mov	r8, QWORD PTR v$2[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	subss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$1[rsp]
	mov	r8, QWORD PTR v$2[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	addss	xmm1, DWORD PTR [r8+rcx]
	mulss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR normal$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR normal$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 1377
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR u$1[rsp]
	mov	r8, QWORD PTR v$2[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	subss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR u$1[rsp]
	mov	r8, QWORD PTR v$2[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	addss	xmm1, DWORD PTR [r8+rcx]
	mulss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR normal$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR normal$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 1378
	jmp	$LN2@stb_newell
$LN3@stb_newell:
; Line 1379
	cmp	DWORD PTR normalize$[rsp], 0
	je	$LN5@stb_newell
; Line 1380
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR normal$[rsp]
	mov	r8, QWORD PTR normal$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR normal$[rsp]
	mov	r8, QWORD PTR normal$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR normal$[rsp]
	mov	r8, QWORD PTR normal$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	addss	xmm0, xmm1
	movss	DWORD PTR p$[rsp], xmm0
; Line 1381
	cvtss2sd xmm0, DWORD PTR p$[rsp]
	call	sqrt
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR p$[rsp], xmm0
; Line 1382
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR normal$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR p$[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR normal$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 1383
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR normal$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR p$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR normal$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 1384
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR normal$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR p$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR normal$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
$LN5@stb_newell:
; Line 1386
	add	rsp, 72					; 00000048H
	ret	0
stb_newell_normal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
p$ = 56
stb_tempfree PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1323
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1324
	mov	rax, QWORD PTR b$[rsp]
	cmp	QWORD PTR p$[rsp], rax
	je	SHORT $LN2@stb_tempfr
; Line 1325
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_free
$LN2@stb_tempfr:
; Line 1326
	add	rsp, 40					; 00000028H
	ret	0
stb_tempfree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
b_sz$ = 56
want_sz$ = 64
stb__temp PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1315
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1316
	mov	eax, DWORD PTR want_sz$[rsp]
	cmp	DWORD PTR b_sz$[rsp], eax
	jl	SHORT $LN2@stb__temp
; Line 1317
	mov	rax, QWORD PTR b$[rsp]
	jmp	SHORT $LN1@stb__temp
	jmp	SHORT $LN3@stb__temp
$LN2@stb__temp:
; Line 1319
	movsxd	rax, DWORD PTR want_sz$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
$LN3@stb__temp:
$LN1@stb__temp:
; Line 1320
	add	rsp, 40					; 00000028H
	ret	0
stb__temp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 8
n$ = 16
stb__record_fileline PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1144
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1145
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR ?stb__file@@3PEADEA, rax
; Line 1146
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR ?stb__line@@3HA, eax
; Line 1147
	xor	eax, eax
; Line 1148
	ret	0
stb__record_fileline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
p$ = 40
q$ = 48
count$ = 80
blocksize$ = 88
stb_array_block_alloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1276
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 1278
	movsxd	rax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	imul	ecx, DWORD PTR blocksize$[rsp]
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR p$[rsp], rax
; Line 1280
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN5@stb_array_
	xor	eax, eax
	jmp	SHORT $LN1@stb_array_
$LN5@stb_array_:
; Line 1281
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR q$[rsp], rax
; Line 1282
	movsxd	rax, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$[rsp], rax
; Line 1283
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_array_
$LN2@stb_array_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_array_:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_array_
; Line 1284
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR blocksize$[rsp]
	cdqe
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax
	jmp	SHORT $LN2@stb_array_
$LN3@stb_array_:
; Line 1285
	mov	rax, QWORD PTR q$[rsp]
$LN1@stb_array_:
; Line 1286
	add	rsp, 72					; 00000048H
	ret	0
stb_array_block_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
p$ = 40
q$ = 64
len$ = 72
stb_pointer_array_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1268
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1269
	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 1271
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_pointe
$LN2@stb_pointe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_pointe:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stb_pointe
; Line 1272
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	QWORD PTR __imp_free
	jmp	SHORT $LN2@stb_pointe
$LN3@stb_pointe:
; Line 1273
	add	rsp, 56					; 00000038H
	ret	0
stb_pointer_array_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 64
sz$ = 72
stb_copy PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1261
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1262
	mov	rcx, QWORD PTR sz$[rsp]
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR q$[rsp], rax
; Line 1263
	mov	r8, QWORD PTR sz$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	memcpy
; Line 1264
	mov	rax, QWORD PTR q$[rsp]
; Line 1265
	add	rsp, 56					; 00000038H
	ret	0
stb_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
temp$1 = 32
temp$2 = 40
buffer$ = 48
__$ArrayPad$ = 304
p$ = 336
q$ = 344
sz$ = 352
stb_swap PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1233
$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1235
	mov	rax, QWORD PTR q$[rsp]
	cmp	QWORD PTR p$[rsp], rax
	jne	SHORT $LN4@stb_swap
	jmp	$LN1@stb_swap
$LN4@stb_swap:
; Line 1236
	cmp	QWORD PTR sz$[rsp], 4
	jne	SHORT $LN5@stb_swap
; Line 1237
	mov	rax, QWORD PTR p$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR temp$1[rsp], eax
; Line 1238
	mov	rax, QWORD PTR q$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1239
	mov	rax, QWORD PTR q$[rsp]
	mov	ecx, DWORD PTR temp$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1240
	jmp	$LN1@stb_swap
	jmp	SHORT $LN6@stb_swap
$LN5@stb_swap:
; Line 1241
	cmp	QWORD PTR sz$[rsp], 8
	jne	SHORT $LN7@stb_swap
; Line 1242
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR temp$2[rsp], rax
; Line 1243
	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1244
	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR temp$2[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1245
	jmp	$LN1@stb_swap
$LN7@stb_swap:
$LN6@stb_swap:
$LN2@stb_swap:
; Line 1248
	cmp	QWORD PTR sz$[rsp], 256			; 00000100H
	jbe	SHORT $LN3@stb_swap
; Line 1249
	mov	r8d, 256				; 00000100H
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	stb_swap
; Line 1250
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR p$[rsp], rax
; Line 1251
	mov	rax, QWORD PTR q$[rsp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR q$[rsp], rax
; Line 1252
	mov	rax, QWORD PTR sz$[rsp]
	sub	rax, 256				; 00000100H
	mov	QWORD PTR sz$[rsp], rax
; Line 1253
	jmp	SHORT $LN2@stb_swap
$LN3@stb_swap:
; Line 1255
	mov	r8, QWORD PTR sz$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1256
	mov	r8, QWORD PTR sz$[rsp]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	memcpy
; Line 1257
	mov	r8, QWORD PTR sz$[rsp]
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	memcpy
$LN1@stb_swap:
; Line 1258
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
stb_swap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stb_log_name PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1193
	mov	QWORD PTR [rsp+8], rcx
; Line 1194
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR ?stb__log_filename@@3PEBDEB, rax ; stb__log_filename
; Line 1195
	ret	0
stb_log_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
active$ = 8
stb_log_fileline PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1182
	mov	DWORD PTR [rsp+8], ecx
; Line 1183
	mov	eax, DWORD PTR active$[rsp]
	mov	DWORD PTR ?stb__log_fileline@@3HA, eax
; Line 1184
	ret	0
stb_log_fileline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
active$ = 8
stb_log	PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1177
	mov	DWORD PTR [rsp+8], ecx
; Line 1178
	mov	eax, DWORD PTR active$[rsp]
	mov	DWORD PTR ?stb__log_active@@3HA, eax
; Line 1179
	ret	0
stb_log	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
a$1 = 40
filename$ = 64
s$ = 72
stb_append_to_file PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1215
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1216
	lea	rdx, OFFSET FLAT:$SG83338
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1217
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN2@stb_append
; Line 1219
	lea	rax, QWORD PTR s$[rsp+8]
	mov	QWORD PTR a$1[rsp], rax
; Line 1220
	mov	r8, QWORD PTR a$1[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	vfprintf
; Line 1221
	mov	QWORD PTR a$1[rsp], 0
; Line 1222
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, OFFSET FLAT:$SG83340
	call	QWORD PTR __imp_fputs
; Line 1223
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN2@stb_append:
; Line 1225
	add	rsp, 56					; 00000038H
	ret	0
stb_append_to_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$1 = 32
a$2 = 40
s$ = 64
stb_	PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1198
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1199
	cmp	DWORD PTR ?stb__log_active@@3HA, 0
	je	$LN2@stb_
; Line 1200
	lea	rdx, OFFSET FLAT:$SG83322
	mov	rcx, QWORD PTR ?stb__log_filename@@3PEBDEB ; stb__log_filename
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$1[rsp], rax
; Line 1201
	cmp	QWORD PTR f$1[rsp], 0
	je	SHORT $LN3@stb_
; Line 1203
	cmp	DWORD PTR ?stb__log_fileline@@3HA, 0
	je	SHORT $LN4@stb_
	cmp	QWORD PTR ?stb__file@@3PEADEA, 0
	je	SHORT $LN4@stb_
; Line 1204
	mov	r9d, DWORD PTR ?stb__line@@3HA
	mov	r8, QWORD PTR ?stb__file@@3PEADEA
	lea	rdx, OFFSET FLAT:$SG83325
	mov	rcx, QWORD PTR f$1[rsp]
	call	fprintf
$LN4@stb_:
; Line 1205
	lea	rax, QWORD PTR s$[rsp+8]
	mov	QWORD PTR a$2[rsp], rax
; Line 1206
	mov	r8, QWORD PTR a$2[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR f$1[rsp]
	call	vfprintf
; Line 1207
	mov	QWORD PTR a$2[rsp], 0
; Line 1208
	mov	rdx, QWORD PTR f$1[rsp]
	lea	rcx, OFFSET FLAT:$SG83326
	call	QWORD PTR __imp_fputs
; Line 1209
	mov	rcx, QWORD PTR f$1[rsp]
	call	QWORD PTR __imp_fclose
$LN3@stb_:
$LN2@stb_:
; Line 1212
	add	rsp, 56					; 00000038H
	ret	0
stb_	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
a$ = 40
tv75 = 48
tv73 = 56
tv93 = 64
tv91 = 72
s$ = 96
stb_fatal PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1151
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 88					; 00000058H
; Line 1153
	cmp	QWORD PTR ?stb__file@@3PEADEA, 0
	je	SHORT $LN2@stb_fatal
; Line 1154
	mov	eax, DWORD PTR ?stb__line@@3HA
	mov	DWORD PTR tv77[rsp], eax
	mov	rax, QWORD PTR ?stb__file@@3PEADEA
	mov	QWORD PTR tv75[rsp], rax
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	QWORD PTR tv73[rsp], rax
	mov	r9d, DWORD PTR tv77[rsp]
	mov	r8, QWORD PTR tv75[rsp]
	lea	rdx, OFFSET FLAT:$SG83269
	mov	rcx, QWORD PTR tv73[rsp]
	call	fprintf
$LN2@stb_fatal:
; Line 1155
	lea	rax, QWORD PTR s$[rsp+8]
	mov	QWORD PTR a$[rsp], rax
; Line 1156
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG83270
	call	QWORD PTR __imp_fputs
; Line 1157
	mov	rax, QWORD PTR a$[rsp]
	mov	QWORD PTR tv93[rsp], rax
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	QWORD PTR tv91[rsp], rax
	mov	r8, QWORD PTR tv93[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv91[rsp]
	call	vfprintf
; Line 1158
	mov	QWORD PTR a$[rsp], 0
; Line 1159
	mov	ecx, 2
	call	QWORD PTR __imp___acrt_iob_func
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG83271
	call	QWORD PTR __imp_fputs
; Line 1165
	int	3
; Line 1171
	mov	ecx, 1
	call	QWORD PTR __imp_exit
$LN3@stb_fatal:
; Line 1172
	add	rsp, 88					; 00000058H
	ret	0
stb_fatal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 48
stb__to_utf8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1109
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1111
	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR str$[rsp]
	lea	rcx, OFFSET FLAT:?buffer@?1??stb__to_utf8@@9@4PADA
	call	stb_to_utf8
; Line 1112
	add	rsp, 40					; 00000028H
	ret	0
stb__to_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 48
stb__from_utf8_alt PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1103
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1105
	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR str$[rsp]
	lea	rcx, OFFSET FLAT:?buffer@?1??stb__from_utf8_alt@@9@4PAGA
	call	stb_from_utf8
; Line 1106
	add	rsp, 40					; 00000028H
	ret	0
stb__from_utf8_alt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 48
stb__from_utf8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1097
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1099
	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR str$[rsp]
	lea	rcx, OFFSET FLAT:?buffer@?1??stb__from_utf8@@9@4PAGA
	call	stb_from_utf8
; Line 1100
	add	rsp, 40					; 00000028H
	ret	0
stb__from_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 0
i$ = 4
c$1 = 8
buffer$ = 32
str$ = 40
n$ = 48
stb_to_utf8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1061
$LN17:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1062
	mov	DWORD PTR i$[rsp], 0
; Line 1063
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN2@stb_to_utf:
; Line 1064
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	$LN3@stb_to_utf
; Line 1065
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@stb_to_utf
; Line 1066
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR n$[rsp]
	jle	SHORT $LN6@stb_to_utf
	xor	eax, eax
	jmp	$LN1@stb_to_utf
$LN6@stb_to_utf:
; Line 1067
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv77[rsp], al
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 2
	mov	QWORD PTR str$[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR tv77[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN5@stb_to_utf
$LN4@stb_to_utf:
; Line 1068
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 2048				; 00000800H
	jge	SHORT $LN7@stb_to_utf
; Line 1069
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR n$[rsp]
	jle	SHORT $LN9@stb_to_utf
	xor	eax, eax
	jmp	$LN1@stb_to_utf
$LN9@stb_to_utf:
; Line 1070
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	sar	eax, 6
	add	eax, 192				; 000000c0H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1071
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1072
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 2
	mov	QWORD PTR str$[rsp], rax
	jmp	$LN8@stb_to_utf
$LN7@stb_to_utf:
; Line 1073
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 55296				; 0000d800H
	jl	$LN10@stb_to_utf
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN10@stb_to_utf
; Line 1075
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cmp	eax, DWORD PTR n$[rsp]
	jle	SHORT $LN12@stb_to_utf
	xor	eax, eax
	jmp	$LN1@stb_to_utf
$LN12@stb_to_utf:
; Line 1076
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+9216]
	mov	DWORD PTR c$1[rsp], eax
; Line 1077
	mov	eax, DWORD PTR c$1[rsp]
	shr	eax, 18
	add	eax, 240				; 000000f0H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1078
	mov	eax, DWORD PTR c$1[rsp]
	shr	eax, 12
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1079
	mov	eax, DWORD PTR c$1[rsp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1080
	mov	eax, DWORD PTR c$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1081
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 4
	mov	QWORD PTR str$[rsp], rax
	jmp	$LN11@stb_to_utf
$LN10@stb_to_utf:
; Line 1082
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN13@stb_to_utf
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 57344				; 0000e000H
	jge	SHORT $LN13@stb_to_utf
; Line 1083
	xor	eax, eax
	jmp	$LN1@stb_to_utf
; Line 1084
	jmp	$LN14@stb_to_utf
$LN13@stb_to_utf:
; Line 1085
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR n$[rsp]
	jle	SHORT $LN15@stb_to_utf
	xor	eax, eax
	jmp	$LN1@stb_to_utf
$LN15@stb_to_utf:
; Line 1086
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	sar	eax, 12
	add	eax, 224				; 000000e0H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1087
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1088
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, WORD PTR [rax]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1089
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 2
	mov	QWORD PTR str$[rsp], rax
$LN14@stb_to_utf:
$LN11@stb_to_utf:
$LN8@stb_to_utf:
$LN5@stb_to_utf:
; Line 1091
	jmp	$LN2@stb_to_utf
$LN3@stb_to_utf:
; Line 1092
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 1093
	mov	rax, QWORD PTR buffer$[rsp]
$LN1@stb_to_utf:
; Line 1094
	add	rsp, 24
	ret	0
stb_to_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 0
c$ = 8
i$ = 12
tv78 = 16
tv135 = 18
tv184 = 20
tv88 = 24
tv159 = 28
tv168 = 32
tv210 = 36
tv219 = 40
tv229 = 44
tv239 = 48
buffer$ = 80
ostr$ = 88
n$ = 96
stb_from_utf8 PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 1011
$LN31:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1012
	mov	rax, QWORD PTR ostr$[rsp]
	mov	QWORD PTR str$[rsp], rax
; Line 1014
	mov	DWORD PTR i$[rsp], 0
; Line 1015
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN2@stb_from_u:
; Line 1016
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb_from_u
; Line 1017
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@stb_from_u
; Line 1018
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN4@stb_from_u:
; Line 1019
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN5@stb_from_u
; Line 1020
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv78[rsp], ax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, WORD PTR tv78[rsp]
	mov	WORD PTR [rcx+rax*2], dx
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN6@stb_from_u
$LN5@stb_from_u:
; Line 1021
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 224				; 000000e0H
	cmp	eax, 192				; 000000c0H
	jne	$LN7@stb_from_u
; Line 1022
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 194				; 000000c2H
	jge	SHORT $LN9@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN9@stb_from_u:
; Line 1023
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 31
	mov	DWORD PTR tv88[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv88[rsp]
	shl	eax, 6
	mov	DWORD PTR c$[rsp], eax
; Line 1024
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN10@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN10@stb_from_u:
; Line 1025
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	WORD PTR tv135[rsp], ax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, WORD PTR tv135[rsp]
	mov	WORD PTR [rcx+rax*2], dx
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN8@stb_from_u
$LN7@stb_from_u:
; Line 1026
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 240				; 000000f0H
	cmp	eax, 224				; 000000e0H
	jne	$LN11@stb_from_u
; Line 1027
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 224				; 000000e0H
	jne	SHORT $LN13@stb_from_u
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 160				; 000000a0H
	jl	SHORT $LN14@stb_from_u
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 191				; 000000bfH
	jle	SHORT $LN13@stb_from_u
$LN14@stb_from_u:
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN13@stb_from_u:
; Line 1028
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 237				; 000000edH
	jne	SHORT $LN15@stb_from_u
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 159				; 0000009fH
	jle	SHORT $LN15@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN15@stb_from_u:
; Line 1029
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 15
	mov	DWORD PTR tv159[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv159[rsp]
	shl	eax, 12
	mov	DWORD PTR c$[rsp], eax
; Line 1030
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN16@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN16@stb_from_u:
; Line 1031
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR tv168[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv168[rsp]
	shl	eax, 6
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 1032
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN17@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN17@stb_from_u:
; Line 1033
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	WORD PTR tv184[rsp], ax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, WORD PTR tv184[rsp]
	mov	WORD PTR [rcx+rax*2], dx
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN12@stb_from_u
$LN11@stb_from_u:
; Line 1034
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 248				; 000000f8H
	cmp	eax, 240				; 000000f0H
	jne	$LN18@stb_from_u
; Line 1035
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 244				; 000000f4H
	jle	SHORT $LN20@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN20@stb_from_u:
; Line 1036
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 240				; 000000f0H
	jne	SHORT $LN21@stb_from_u
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 144				; 00000090H
	jl	SHORT $LN22@stb_from_u
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 191				; 000000bfH
	jle	SHORT $LN21@stb_from_u
$LN22@stb_from_u:
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN21@stb_from_u:
; Line 1037
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 244				; 000000f4H
	jne	SHORT $LN23@stb_from_u
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jle	SHORT $LN23@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN23@stb_from_u:
; Line 1038
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 7
	mov	DWORD PTR tv210[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv210[rsp]
	shl	eax, 18
	mov	DWORD PTR c$[rsp], eax
; Line 1039
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN24@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN24@stb_from_u:
; Line 1040
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR tv219[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv219[rsp]
	shl	eax, 12
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 1041
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN25@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN25@stb_from_u:
; Line 1042
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR tv229[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv229[rsp]
	shl	eax, 6
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 1043
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	je	SHORT $LN26@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN26@stb_from_u:
; Line 1044
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 63					; 0000003fH
	mov	DWORD PTR tv239[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	mov	eax, DWORD PTR tv239[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR c$[rsp], eax
; Line 1046
	mov	eax, DWORD PTR c$[rsp]
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	jne	SHORT $LN27@stb_from_u
	xor	eax, eax
	jmp	$LN1@stb_from_u
$LN27@stb_from_u:
; Line 1047
	cmp	DWORD PTR c$[rsp], 65536		; 00010000H
	jb	SHORT $LN28@stb_from_u
; Line 1048
	mov	eax, DWORD PTR c$[rsp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR c$[rsp], eax
; Line 1049
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR n$[rsp]
	jle	SHORT $LN29@stb_from_u
	xor	eax, eax
	jmp	SHORT $LN1@stb_from_u
$LN29@stb_from_u:
; Line 1050
	mov	eax, DWORD PTR c$[rsp]
	shr	eax, 10
	and	eax, 1023				; 000003ffH
	or	eax, 55296				; 0000d800H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1051
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 1023				; 000003ffH
	or	eax, 56320				; 0000dc00H
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stb_from_u:
; Line 1053
	jmp	SHORT $LN19@stb_from_u
$LN18@stb_from_u:
; Line 1054
	xor	eax, eax
	jmp	SHORT $LN1@stb_from_u
$LN19@stb_from_u:
$LN12@stb_from_u:
$LN8@stb_from_u:
$LN6@stb_from_u:
; Line 1055
	jmp	$LN2@stb_from_u
$LN3@stb_from_u:
; Line 1056
	movsxd	rax, DWORD PTR i$[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 1057
	mov	rax, QWORD PTR buffer$[rsp]
$LN1@stb_from_u:
; Line 1058
	add	rsp, 72					; 00000048H
	ret	0
stb_from_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pad$ = 32
lpad$1 = 36
t$ = 40
handle$ = 48
s$ = 80
?stb__print@@YAXPEAD@Z PROC				; stb__print
; File W:\cpp\void\vendor\stb\stb.h
; Line 870
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 871
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR handle$[rsp], rax
; Line 872
	mov	DWORD PTR pad$[rsp], 0
; Line 874
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR t$[rsp], rax
$LN33@stb__print:
$LN2@stb__print:
; Line 875
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stb__print
$LN4@stb__print:
; Line 877
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN5@stb__print
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 123				; 0000007bH
	je	$LN5@stb__print
; Line 878
	cmp	DWORD PTR pad$[rsp], 0
	je	$LN10@stb__print
; Line 879
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN13@stb__print
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN11@stb__print
$LN13@stb__print:
; Line 880
	mov	DWORD PTR pad$[rsp], 0
	jmp	$LN12@stb__print
$LN11@stb__print:
; Line 881
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN14@stb__print
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN14@stb__print
; Line 882
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR handle$[rsp]
	call	?stb__print_one@@YAXPEAXPEAD_J@Z	; stb__print_one
; Line 883
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR t$[rsp], rax
$LN6@stb__print:
; Line 884
	cmp	DWORD PTR pad$[rsp], 0
	je	SHORT $LN7@stb__print
; Line 885
	mov	r8d, 1
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR handle$[rsp]
	call	?stb__print_one@@YAXPEAXPEAD_J@Z	; stb__print_one
; Line 886
	mov	eax, DWORD PTR pad$[rsp]
	dec	eax
	mov	DWORD PTR pad$[rsp], eax
; Line 887
	jmp	SHORT $LN6@stb__print
$LN7@stb__print:
$LN14@stb__print:
$LN12@stb__print:
$LN10@stb__print:
; Line 890
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 891
	jmp	$LN4@stb__print
$LN5@stb__print:
; Line 892
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN15@stb__print
	jmp	$LN3@stb__print
$LN15@stb__print:
; Line 893
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR handle$[rsp]
	call	?stb__print_one@@YAXPEAXPEAD_J@Z	; stb__print_one
; Line 894
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 123				; 0000007bH
	jne	SHORT $LN16@stb__print
; Line 895
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
; Line 896
	jmp	$LN2@stb__print
$LN16@stb__print:
; Line 899
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 35					; 00000023H
	jne	$LN17@stb__print
; Line 900
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 3
	mov	QWORD PTR t$[rsp], rax
; Line 901
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isxdigit
	test	eax, eax
	je	SHORT $LN19@stb__print
; Line 902
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isdigit
	test	eax, eax
	je	SHORT $LN21@stb__print
; Line 903
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	sub	eax, 48					; 00000030H
	movzx	edx, ax
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
	jmp	SHORT $LN22@stb__print
$LN21@stb__print:
; Line 905
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_tolower
	sub	eax, 87					; 00000057H
	movzx	edx, ax
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
$LN22@stb__print:
	jmp	SHORT $LN20@stb__print
$LN19@stb__print:
; Line 907
	mov	dx, 15
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 908
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR t$[rsp], rax
$LN20@stb__print:
; Line 909
	jmp	$LN18@stb__print
$LN17@stb__print:
; Line 910
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN23@stb__print
; Line 911
	mov	dx, 12
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 912
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR t$[rsp], rax
	jmp	$LN24@stb__print
$LN23@stb__print:
; Line 913
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN25@stb__print
; Line 914
	mov	dx, 9
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 915
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR t$[rsp], rax
	jmp	SHORT $LN26@stb__print
$LN25@stb__print:
; Line 916
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 36					; 00000024H
	jne	SHORT $LN27@stb__print
; Line 917
	mov	dx, 10
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 918
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR t$[rsp], rax
; Line 919
	jmp	SHORT $LN28@stb__print
$LN27@stb__print:
; Line 920
	mov	dx, 8
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 921
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
$LN28@stb__print:
$LN26@stb__print:
$LN24@stb__print:
$LN18@stb__print:
; Line 924
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR lpad$1[rsp], eax
; Line 925
	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR s$[rsp], rax
$LN8@stb__print:
; Line 926
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN9@stb__print
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 125				; 0000007dH
	je	SHORT $LN9@stb__print
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN8@stb__print
$LN9@stb__print:
; Line 927
	mov	rax, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN29@stb__print
	jmp	$LN3@stb__print
$LN29@stb__print:
; Line 928
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR handle$[rsp]
	call	?stb__print_one@@YAXPEAXPEAD_J@Z	; stb__print_one
; Line 929
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 125				; 0000007dH
	jne	SHORT $LN30@stb__print
; Line 930
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 2
	mov	QWORD PTR t$[rsp], rax
; Line 931
	jmp	SHORT $LN31@stb__print
$LN30@stb__print:
; Line 932
	mov	eax, DWORD PTR pad$[rsp]
	mov	ecx, DWORD PTR lpad$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR pad$[rsp], eax
; Line 933
	mov	rax, QWORD PTR s$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
$LN31@stb__print:
; Line 935
	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR s$[rsp], rax
; Line 936
	mov	dx, 7
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 937
	jmp	$LN33@stb__print
$LN3@stb__print:
; Line 938
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR handle$[rsp]
	call	?stb__print_one@@YAXPEAXPEAD_J@Z	; stb__print_one
; Line 939
	mov	dx, 7
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 940
	add	rsp, 72					; 00000048H
	ret	0
?stb__print@@YAXPEAD@Z ENDP				; stb__print
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
handle$ = 64
s$ = 72
len$ = 80
?stb__print_one@@YAXPEAXPEAD_J@Z PROC			; stb__print_one
; File W:\cpp\void\vendor\stb\stb.h
; Line 861
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 862
	cmp	QWORD PTR len$[rsp], 0
	je	SHORT $LN2@stb__print
; Line 863
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR handle$[rsp]
	call	QWORD PTR __imp_WriteConsoleA
$LN2@stb__print:
; Line 867
	add	rsp, 56					; 00000038H
	ret	0
?stb__print_one@@YAXPEAXPEAD_J@Z ENDP			; stb__print_one
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 48
tv76 = 52
s$ = 80
n$ = 88
fmt$ = 96
v$ = 104
stb_vsnprintf PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 806
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 810
	mov	rax, QWORD PTR v$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, -1
	mov	rdx, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	_vsnprintf_s
	mov	DWORD PTR res$[rsp], eax
; Line 817
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN2@stb_vsnpri
	mov	rax, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax-1], 0
$LN2@stb_vsnpri:
; Line 819
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR res$[rsp], eax
	jge	SHORT $LN4@stb_vsnpri
	cmp	DWORD PTR res$[rsp], 0
	jl	SHORT $LN4@stb_vsnpri
	mov	eax, DWORD PTR res$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN5@stb_vsnpri
$LN4@stb_vsnpri:
	mov	DWORD PTR tv76[rsp], -1
$LN5@stb_vsnpri:
	mov	eax, DWORD PTR tv76[rsp]
; Line 820
	add	rsp, 72					; 00000048H
	ret	0
stb_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
v$ = 40
s$ = 64
n$ = 72
fmt$ = 80
stb_snprintf PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 823
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 826
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 827
	mov	r9, QWORD PTR v$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	rdx, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stb_vsnprintf
	mov	DWORD PTR res$[rsp], eax
; Line 828
	mov	QWORD PTR v$[rsp], 0
; Line 829
	mov	eax, DWORD PTR res$[rsp]
; Line 830
	add	rsp, 56					; 00000038H
	ret	0
stb_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
fmt$ = 64
stb_mprintf PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 843
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 846
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 847
	mov	r9, QWORD PTR v$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 1024				; 00000400H
	lea	rcx, OFFSET FLAT:?buffer@?1??stb_mprintf@@9@4PADA
	call	stb_vsnprintf
; Line 848
	mov	QWORD PTR v$[rsp], 0
; Line 849
	lea	rcx, OFFSET FLAT:?buffer@?1??stb_mprintf@@9@4PADA
	call	QWORD PTR __imp__strdup
; Line 850
	add	rsp, 56					; 00000038H
	ret	0
stb_mprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
fmt$ = 64
stb_sprintf PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 833
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 836
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 837
	mov	r9, QWORD PTR v$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 1024				; 00000400H
	lea	rcx, OFFSET FLAT:?buffer@?1??stb_sprintf@@9@4PADA
	call	stb_vsnprintf
; Line 838
	mov	QWORD PTR v$[rsp], 0
; Line 839
	lea	rax, OFFSET FLAT:?buffer@?1??stb_sprintf@@9@4PADA
; Line 840
	add	rsp, 56					; 00000038H
	ret	0
stb_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tbuf$ = 32
res$ = 40
v$ = 48
buffer$ = 64
__$ArrayPad$ = 1088
fmt$ = 1120
stbprint PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 943
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 1112				; 00000458H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 946
	lea	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR tbuf$[rsp], rax
; Line 949
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 950
	mov	r9, QWORD PTR v$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR buffer$[rsp]
	call	stb_vsnprintf
	mov	DWORD PTR res$[rsp], eax
; Line 951
	mov	QWORD PTR v$[rsp], 0
; Line 953
	cmp	DWORD PTR res$[rsp], 0
	jge	SHORT $LN2@stbprint
; Line 954
	mov	ecx, 16384				; 00004000H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tbuf$[rsp], rax
; Line 955
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 956
	mov	r9, QWORD PTR v$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 16384				; 00004000H
	mov	rcx, QWORD PTR tbuf$[rsp]
	call	stb_vsnprintf
	mov	DWORD PTR res$[rsp], eax
; Line 957
	mov	QWORD PTR v$[rsp], 0
; Line 958
	mov	eax, 1
	imul	rax, rax, 16383				; 00003fffH
	mov	rcx, QWORD PTR tbuf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN2@stbprint:
; Line 961
	mov	rcx, QWORD PTR tbuf$[rsp]
	call	?stb__print@@YAXPEAD@Z			; stb__print
; Line 963
	lea	rax, QWORD PTR buffer$[rsp]
	cmp	QWORD PTR tbuf$[rsp], rax
	je	SHORT $LN3@stbprint
; Line 964
	mov	rcx, QWORD PTR tbuf$[rsp]
	call	QWORD PTR __imp_free
$LN3@stbprint:
; Line 965
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	ret	0
stbprint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
sz$ = 56
?stb__realloc_raw@@YAPEAXPEAXH@Z PROC			; stb__realloc_raw
; File W:\cpp\void\vendor\stb\stb.h
; Line 507
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 508
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb__reall
	movsxd	rax, DWORD PTR sz$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	jmp	SHORT $LN1@stb__reall
$LN2@stb__reall:
; Line 509
	cmp	DWORD PTR sz$[rsp], 0
	jne	SHORT $LN3@stb__reall
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	SHORT $LN1@stb__reall
$LN3@stb__reall:
; Line 510
	movsxd	rax, DWORD PTR sz$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_realloc
$LN1@stb__reall:
; Line 511
	add	rsp, 40					; 00000028H
	ret	0
?stb__realloc_raw@@YAPEAXPEAXH@Z ENDP			; stb__realloc_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 48
tv138 = 52
tv136 = 56
tv134 = 64
p$ = 96
stb_wrapper_check PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7610
$LN10:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 7613
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN5@stb_wrappe
	jmp	$LN1@stb_wrappe
$LN5@stb_wrappe:
; Line 7615
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__hashfind@@YAHPEAX@Z		; stb__hashfind
	mov	DWORD PTR n$[rsp], eax
; Line 7617
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN6@stb_wrappe
	jmp	$LN1@stb_wrappe
$LN6@stb_wrappe:
; Line 7619
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN4@stb_wrappe
$LN2@stb_wrappe:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN4@stb_wrappe:
	mov	eax, DWORD PTR ?stb__alloc_size@@3HA
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN3@stb_wrappe
; Line 7620
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN7@stb_wrappe
; Line 7621
	mov	edx, 7621				; 00001dc5H
	lea	rcx, OFFSET FLAT:$SG88695
	call	stb__record_fileline
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, OFFSET FLAT:$SG88696
	call	stb_fatal
$LN7@stb_wrappe:
	jmp	SHORT $LN2@stb_wrappe
$LN3@stb_wrappe:
; Line 7624
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__historyfind@@YAHPEAX@Z		; stb__historyfind
	mov	DWORD PTR n$[rsp], eax
; Line 7625
	cmp	DWORD PTR n$[rsp], 0
	jl	$LN8@stb_wrappe
; Line 7626
	mov	edx, 7626				; 00001dcaH
	lea	rcx, OFFSET FLAT:$SG88698
	call	stb__record_fileline
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR tv138[rsp], eax
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR tv136[rsp], rax
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rax, QWORD PTR [rcx+rax+24]
	mov	QWORD PTR tv134[rsp], rax
	mov	eax, DWORD PTR tv138[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv136[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR tv134[rsp]
	lea	rcx, OFFSET FLAT:$SG88699
	call	stb_fatal
$LN8@stb_wrappe:
; Line 7629
	mov	edx, 7629				; 00001dcdH
	lea	rcx, OFFSET FLAT:$SG88700
	call	stb__record_fileline
	lea	rcx, OFFSET FLAT:$SG88701
	call	stb_fatal
$LN1@stb_wrappe:
; Line 7630
	add	rsp, 88					; 00000058H
	ret	0
stb_wrapper_check ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
p$ = 64
stb_wrapper_allocsize PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7498
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7499
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__hashfind@@YAHPEAX@Z		; stb__hashfind
	mov	DWORD PTR n$[rsp], eax
; Line 7500
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN2@stb_wrappe
	xor	eax, eax
	jmp	SHORT $LN1@stb_wrappe
$LN2@stb_wrappe:
; Line 7501
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rax, QWORD PTR [rcx+rax+24]
$LN1@stb_wrappe:
; Line 7502
	add	rsp, 56					; 00000038H
	ret	0
stb_wrapper_allocsize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
f$ = 56
filename$ = 80
stb_wrapper_dump PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7673
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 7675
	lea	rdx, OFFSET FLAT:$SG88749
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z	; stb_p_fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7676
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN5@stb_wrappe
	jmp	$LN1@stb_wrappe
$LN5@stb_wrappe:
; Line 7677
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_wrappe
$LN2@stb_wrappe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_wrappe:
	mov	eax, DWORD PTR ?stb__alloc_size@@3HA
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_wrappe
; Line 7678
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 1
	jbe	SHORT $LN6@stb_wrappe
; Line 7679
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 32				; 00000020H
	movsxd	r8, DWORD PTR i$[rsp]
	imul	r8, r8, 32				; 00000020H
	mov	r9, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rax, QWORD PTR [r9+rax+8]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	eax, DWORD PTR [rax+rcx+16]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	r9d, DWORD PTR [rax+rdx+24]
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	r8, QWORD PTR [rax+r8]
	lea	rdx, OFFSET FLAT:$SG88752
	mov	rcx, QWORD PTR f$[rsp]
	call	fprintf
$LN6@stb_wrappe:
	jmp	$LN2@stb_wrappe
$LN3@stb_wrappe:
$LN1@stb_wrappe:
; Line 7682
	add	rsp, 72					; 00000048H
	ret	0
stb_wrapper_dump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 40
tv92 = 48
func$ = 80
stb_wrapper_listall PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7664
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 7666
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stb_wrappe
$LN2@stb_wrappe:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stb_wrappe:
	mov	eax, DWORD PTR ?stb__alloc_size@@3HA
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stb_wrappe
; Line 7667
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	cmp	QWORD PTR [rcx+rax], 1
	jbe	SHORT $LN5@stb_wrappe
; Line 7668
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv92[rsp], rax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 32				; 00000020H
	movsxd	r8, DWORD PTR i$[rsp]
	imul	r8, r8, 32				; 00000020H
	mov	QWORD PTR tv87[rsp], r8
	mov	r9, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	r9d, DWORD PTR [r9+rax+16]
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	r8, QWORD PTR [rax+rcx+8]
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR [rax+rdx+24]
	mov	rax, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rcx, QWORD PTR tv87[rsp]
	mov	rcx, QWORD PTR [rax+rcx]
	call	QWORD PTR tv92[rsp]
$LN5@stb_wrappe:
	jmp	$LN2@stb_wrappe
$LN3@stb_wrappe:
; Line 7670
	add	rsp, 72					; 00000048H
	ret	0
stb_wrapper_listall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
tv139 = 68
tv137 = 72
tv135 = 80
p$ = 112
q$ = 120
sz$ = 128
file$ = 136
line$ = 144
stb_wrapper_realloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7633
$LN12:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 7635
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb_wrappe
	mov	r9d, DWORD PTR line$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	stb_wrapper_malloc
	jmp	$LN1@stb_wrappe
$LN2@stb_wrappe:
; Line 7636
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN3@stb_wrappe
	jmp	$LN1@stb_wrappe
$LN3@stb_wrappe:
; Line 7638
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__hashfind@@YAHPEAX@Z		; stb__hashfind
	mov	DWORD PTR n$[rsp], eax
; Line 7639
	cmp	DWORD PTR n$[rsp], -1
	jne	$LN4@stb_wrappe
; Line 7642
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__historyfind@@YAHPEAX@Z		; stb__historyfind
	mov	DWORD PTR n$[rsp], eax
; Line 7643
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN11@stb_wrappe
	mov	r8d, 7643				; 00001ddbH
	lea	rdx, OFFSET FLAT:$SG88716
	lea	rcx, OFFSET FLAT:$SG88717
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@stb_wrappe:
; Line 7644
	cmp	DWORD PTR n$[rsp], 0
	jl	$LN6@stb_wrappe
; Line 7645
	mov	edx, 7645				; 00001dddH
	lea	rcx, OFFSET FLAT:$SG88720
	call	stb__record_fileline
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR tv139[rsp], eax
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR tv137[rsp], rax
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rax, QWORD PTR [rcx+rax+24]
	mov	QWORD PTR tv135[rsp], rax
	mov	eax, DWORD PTR tv139[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv137[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR file$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR tv135[rsp]
	lea	rcx, OFFSET FLAT:$SG88721
	call	stb_fatal
	jmp	SHORT $LN7@stb_wrappe
$LN6@stb_wrappe:
; Line 7650
	mov	edx, 7650				; 00001de2H
	lea	rcx, OFFSET FLAT:$SG88722
	call	stb__record_fileline
	mov	r9d, DWORD PTR line$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, OFFSET FLAT:$SG88723
	call	stb_fatal
$LN7@stb_wrappe:
; Line 7651
	jmp	$LN5@stb_wrappe
$LN4@stb_wrappe:
; Line 7652
	mov	rax, QWORD PTR p$[rsp]
	cmp	QWORD PTR q$[rsp], rax
	jne	SHORT $LN8@stb_wrappe
; Line 7653
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR sz$[rsp]
	mov	QWORD PTR [rcx+rax+24], rdx
; Line 7654
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	rdx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
; Line 7655
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR ?stb__allocations@@3PEAUstb_malloc_record@@EA ; stb__allocations
	mov	edx, DWORD PTR line$[rsp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 7656
	jmp	SHORT $LN9@stb_wrappe
$LN8@stb_wrappe:
; Line 7657
	mov	r8d, DWORD PTR line$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	call	?stb__remove_alloc@@YAXHPEADH@Z		; stb__remove_alloc
; Line 7658
	mov	r9d, DWORD PTR line$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	call	?stb__add_alloc@@YAXPEAX_KPEADH@Z	; stb__add_alloc
$LN9@stb_wrappe:
$LN5@stb_wrappe:
$LN1@stb_wrappe:
; Line 7661
	add	rsp, 104				; 00000068H
	ret	0
stb_wrapper_realloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
tv137 = 68
tv135 = 72
tv133 = 80
p$ = 112
file$ = 120
line$ = 128
stb_wrapper_free PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7586
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 7589
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb_wrappe
	jmp	$LN1@stb_wrappe
$LN2@stb_wrappe:
; Line 7591
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__hashfind@@YAHPEAX@Z		; stb__hashfind
	mov	DWORD PTR n$[rsp], eax
; Line 7593
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN3@stb_wrappe
; Line 7594
	mov	r8d, DWORD PTR line$[rsp]
	mov	rdx, QWORD PTR file$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	call	?stb__remove_alloc@@YAXHPEADH@Z		; stb__remove_alloc
	jmp	$LN4@stb_wrappe
$LN3@stb_wrappe:
; Line 7597
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__historyfind@@YAHPEAX@Z		; stb__historyfind
	mov	DWORD PTR n$[rsp], eax
; Line 7598
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN8@stb_wrappe
	mov	r8d, 7598				; 00001daeH
	lea	rdx, OFFSET FLAT:$SG88677
	lea	rcx, OFFSET FLAT:$SG88678
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stb_wrappe:
; Line 7599
	cmp	DWORD PTR n$[rsp], 0
	jl	$LN5@stb_wrappe
; Line 7600
	mov	edx, 7600				; 00001db0H
	lea	rcx, OFFSET FLAT:$SG88681
	call	stb__record_fileline
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR tv137[rsp], eax
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR tv135[rsp], rax
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?stb__alloc_history@@3PAUstb_malloc_record@@A ; stb__alloc_history
	mov	rax, QWORD PTR [rcx+rax+24]
	mov	QWORD PTR tv133[rsp], rax
	mov	eax, DWORD PTR tv137[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv135[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR file$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR tv133[rsp]
	lea	rcx, OFFSET FLAT:$SG88682
	call	stb_fatal
	jmp	SHORT $LN6@stb_wrappe
$LN5@stb_wrappe:
; Line 7605
	mov	edx, 7605				; 00001db5H
	lea	rcx, OFFSET FLAT:$SG88683
	call	stb__record_fileline
	mov	r9d, DWORD PTR line$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, OFFSET FLAT:$SG88684
	call	stb_fatal
$LN6@stb_wrappe:
$LN4@stb_wrappe:
$LN1@stb_wrappe:
; Line 7607
	add	rsp, 104				; 00000068H
	ret	0
stb_wrapper_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
sz$ = 56
file$ = 64
line$ = 72
stb_wrapper_malloc PROC
; File W:\cpp\void\vendor\stb\stb.h
; Line 7580
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7581
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stb_wrappe
	jmp	SHORT $LN1@stb_wrappe
$LN2@stb_wrappe:
; Line 7582
	mov	r9d, DWORD PTR line$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	rdx, QWORD PTR sz$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stb__add_alloc@@YAXPEAX_KPEADH@Z	; stb__add_alloc
$LN1@stb_wrappe:
; Line 7583
	add	rsp, 40					; 00000028H
	ret	0
stb_wrapper_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
size$ = 56
b$ = 64
count$ = 72
?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z PROC		; stb_p_strncpy_s
; File W:\cpp\void\vendor\stb\stb.h
; Line 453
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 454
	mov	r9, QWORD PTR count$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_strncpy_s
; Line 455
	mov	rax, QWORD PTR a$[rsp]
; Line 456
	add	rsp, 40					; 00000028H
	ret	0
?stb_p_strncpy_s@@YAPEADPEAD_KPEBD1@Z ENDP		; stb_p_strncpy_s
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
size$ = 56
b$ = 64
?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z PROC		; stb_p_strcpy_s
; File W:\cpp\void\vendor\stb\stb.h
; Line 448
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 449
	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	QWORD PTR __imp_strcpy_s
; Line 450
	mov	rax, QWORD PTR a$[rsp]
; Line 451
	add	rsp, 40					; 00000028H
	ret	0
?stb_p_strcpy_s@@YAPEADPEAD_KPEBD@Z ENDP		; stb_p_strcpy_s
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z PROC		; stb_p_wfopen
; File W:\cpp\void\vendor\stb\stb.h
; Line 440
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 442
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp__wfopen_s
	test	eax, eax
	jne	SHORT $LN2@stb_p_wfop
; Line 443
	mov	rax, QWORD PTR f$[rsp]
	jmp	SHORT $LN1@stb_p_wfop
	jmp	SHORT $LN3@stb_p_wfop
$LN2@stb_p_wfop:
; Line 445
	xor	eax, eax
$LN3@stb_p_wfop:
$LN1@stb_p_wfop:
; Line 446
	add	rsp, 56					; 00000038H
	ret	0
?stb_p_wfopen@@YAPEAU_iobuf@@PEB_W0@Z ENDP		; stb_p_wfopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stb_p_fopen
; File W:\cpp\void\vendor\stb\stb.h
; Line 432
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 434
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fopen_s
	test	eax, eax
	jne	SHORT $LN2@stb_p_fope
; Line 435
	mov	rax, QWORD PTR f$[rsp]
	jmp	SHORT $LN1@stb_p_fope
	jmp	SHORT $LN3@stb_p_fope
$LN2@stb_p_fope:
; Line 437
	xor	eax, eax
$LN3@stb_p_fope:
$LN1@stb_p_fope:
; Line 438
	add	rsp, 56					; 00000038H
	ret	0
?stb_p_fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stb_p_fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
F$ = 32
?PIXEL_FORMAT_SIZE@@YAHH@Z PROC				; PIXEL_FORMAT_SIZE
; File W:\cpp\void\detroit\brazen.h
; Line 46
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN4@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 3
	je	SHORT $LN5@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 4
	je	SHORT $LN6@PIXEL_FORM
	jmp	SHORT $LN7@PIXEL_FORM
$LN4@PIXEL_FORM:
; Line 47
	mov	eax, 1
	jmp	SHORT $LN1@PIXEL_FORM
$LN5@PIXEL_FORM:
; Line 48
	mov	eax, 3
	jmp	SHORT $LN1@PIXEL_FORM
$LN6@PIXEL_FORM:
; Line 49
	mov	eax, 4
	jmp	SHORT $LN1@PIXEL_FORM
$LN7@PIXEL_FORM:
; Line 50
	mov	eax, -1
$LN1@PIXEL_FORM:
; Line 52
	add	rsp, 24
	ret	0
?PIXEL_FORMAT_SIZE@@YAHH@Z ENDP				; PIXEL_FORMAT_SIZE
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Int$ = 0
V$ = 32
?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z PROC			; ZenToInt
; File W:\cpp\void\detroit\brazen.h
; Line 29
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cvttss2si eax, DWORD PTR V$[rsp]
	mov	DWORD PTR Int$[rsp], eax
	cvttss2si eax, DWORD PTR V$[rsp+4]
	mov	DWORD PTR Int$[rsp+4], eax
; Line 30
	mov	rax, QWORD PTR Int$[rsp]
; Line 31
	add	rsp, 24
	ret	0
?ZenToInt@@YA?AUi32x2@@Uf32x2@@@Z ENDP			; ZenToInt
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Float$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
V$ = 72
?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z PROC		; ZenToFloat
; File W:\cpp\void\detroit\brazen.h
; Line 23
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR V$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	movss	DWORD PTR Float$[rsp], xmm0
	mov	rax, QWORD PTR V$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR Float$[rsp+4], xmm0
	mov	rax, QWORD PTR V$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR Float$[rsp+8], xmm0
	mov	rax, QWORD PTR V$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR Float$[rsp+12], xmm0
; Line 24
	lea	rax, QWORD PTR Float$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 25
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?ZenToFloat@@YA?ATf32x4@@Ti32x4@@@Z ENDP		; ZenToFloat
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
R$ = 0
__$ArrayPad$ = 64
__$ReturnAddress$ = 112
?MatrixI@@YA?AUf32_4x4@@XZ PROC				; MatrixI
; File W:\cpp\void\detroit\brazen-math.h
; Line 887
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 888
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR R$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+12], xmm0
; Line 889
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+16], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR R$[rsp+20], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+24], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+28], xmm0
; Line 890
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+32], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+36], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR R$[rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+44], xmm0
; Line 891
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+52], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR R$[rsp+56], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR R$[rsp+60], xmm0
; Line 893
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 894
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?MatrixI@@YA?AUf32_4x4@@XZ ENDP				; MatrixI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??G@YA?AUf32x2@@U0@0@Z PROC				; operator-
; File W:\cpp\void\detroit\brazen-math.h
; Line 688
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 689
	movss	xmm0, DWORD PTR lhs$[rsp]
	subss	xmm0, DWORD PTR rhs$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 690
	movss	xmm0, DWORD PTR lhs$[rsp+4]
	subss	xmm0, DWORD PTR rhs$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 691
	mov	rax, QWORD PTR r$[rsp]
; Line 692
	add	rsp, 24
	ret	0
??G@YA?AUf32x2@@U0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??G@YA?AUi32x2@@U0@0@Z PROC				; operator-
; File W:\cpp\void\detroit\brazen-math.h
; Line 680
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 681
	mov	eax, DWORD PTR rhs$[rsp]
	mov	ecx, DWORD PTR lhs$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 682
	mov	eax, DWORD PTR rhs$[rsp+4]
	mov	ecx, DWORD PTR lhs$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp+4], eax
; Line 683
	mov	rax, QWORD PTR r$[rsp]
; Line 684
	add	rsp, 24
	ret	0
??G@YA?AUi32x2@@U0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??H@YA?AUi32x2@@U0@0@Z PROC				; operator+
; File W:\cpp\void\detroit\brazen-math.h
; Line 672
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 673
	mov	eax, DWORD PTR rhs$[rsp]
	mov	ecx, DWORD PTR lhs$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 674
	mov	eax, DWORD PTR rhs$[rsp+4]
	mov	ecx, DWORD PTR lhs$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$[rsp+4], eax
; Line 675
	mov	rax, QWORD PTR r$[rsp]
; Line 676
	add	rsp, 24
	ret	0
??H@YA?AUi32x2@@U0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??K@YA?AUf32x2@@MUi32x2@@@Z PROC			; operator/
; File W:\cpp\void\detroit\brazen-math.h
; Line 644
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 645
	cvtsi2ss xmm0, DWORD PTR rhs$[rsp]
	movss	xmm1, DWORD PTR lhs$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR r$[rsp], xmm0
; Line 646
	cvtsi2ss xmm0, DWORD PTR rhs$[rsp+4]
	movss	xmm1, DWORD PTR lhs$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 647
	mov	rax, QWORD PTR r$[rsp]
; Line 648
	add	rsp, 24
	ret	0
??K@YA?AUf32x2@@MUi32x2@@@Z ENDP			; operator/
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??K@YA?AUi32x2@@U0@H@Z PROC				; operator/
; File W:\cpp\void\detroit\brazen-math.h
; Line 586
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 588
	mov	eax, DWORD PTR lhs$[rsp]
	cdq
	idiv	DWORD PTR rhs$[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 589
	mov	eax, DWORD PTR lhs$[rsp+4]
	cdq
	idiv	DWORD PTR rhs$[rsp]
	mov	DWORD PTR r$[rsp+4], eax
; Line 590
	mov	rax, QWORD PTR r$[rsp]
; Line 591
	add	rsp, 24
	ret	0
??K@YA?AUi32x2@@U0@H@Z ENDP				; operator/
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
rhs$ = 32
lhs$ = 40
??D@YA?AUf32x2@@Ui32x2@@U0@@Z PROC			; operator*
; File W:\cpp\void\detroit\brazen-math.h
; Line 380
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 381
	cvtsi2ss xmm0, DWORD PTR rhs$[rsp]
	mulss	xmm0, DWORD PTR lhs$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 382
	cvtsi2ss xmm0, DWORD PTR rhs$[rsp+4]
	mulss	xmm0, DWORD PTR lhs$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 383
	mov	rax, QWORD PTR r$[rsp]
; Line 384
	add	rsp, 24
	ret	0
??D@YA?AUf32x2@@Ui32x2@@U0@@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??D@YA?AUf32x2@@U0@Ui32x2@@@Z PROC			; operator*
; File W:\cpp\void\detroit\brazen-math.h
; Line 372
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 373
	cvtsi2ss xmm0, DWORD PTR rhs$[rsp]
	movss	xmm1, DWORD PTR lhs$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR r$[rsp], xmm0
; Line 374
	cvtsi2ss xmm0, DWORD PTR rhs$[rsp+4]
	movss	xmm1, DWORD PTR lhs$[rsp+4]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 375
	mov	rax, QWORD PTR r$[rsp]
; Line 376
	add	rsp, 24
	ret	0
??D@YA?AUf32x2@@U0@Ui32x2@@@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
lhs$ = 32
rhs$ = 40
??D@YA?AUf32x2@@U0@0@Z PROC				; operator*
; File W:\cpp\void\detroit\brazen-math.h
; Line 364
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 365
	movss	xmm0, DWORD PTR lhs$[rsp]
	mulss	xmm0, DWORD PTR rhs$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 366
	movss	xmm0, DWORD PTR lhs$[rsp+4]
	mulss	xmm0, DWORD PTR rhs$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 367
	mov	rax, QWORD PTR r$[rsp]
; Line 368
	add	rsp, 24
	ret	0
??D@YA?AUf32x2@@U0@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
tv67 = 4
val$ = 32
min$ = 40
max$ = 48
?zen_clampi@@YAHHHH@Z PROC				; zen_clampi
; File W:\cpp\void\detroit\brazen-math.h
; Line 288
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 289
	mov	eax, DWORD PTR min$[rsp]
	cmp	DWORD PTR val$[rsp], eax
	jge	SHORT $LN5@zen_clampi
	mov	eax, DWORD PTR min$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN6@zen_clampi
$LN5@zen_clampi:
	mov	eax, DWORD PTR max$[rsp]
	cmp	DWORD PTR val$[rsp], eax
	jle	SHORT $LN3@zen_clampi
	mov	eax, DWORD PTR max$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN4@zen_clampi
$LN3@zen_clampi:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN4@zen_clampi:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tv67[rsp], eax
$LN6@zen_clampi:
	mov	eax, DWORD PTR tv67[rsp]
; Line 290
	add	rsp, 24
	ret	0
?zen_clampi@@YAHHHH@Z ENDP				; zen_clampi
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
tv67 = 4
val$ = 32
min$ = 40
max$ = 48
?zen_clamp@@YAMMMM@Z PROC				; zen_clamp
; File W:\cpp\void\detroit\brazen-math.h
; Line 282
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 283
	movss	xmm0, DWORD PTR min$[rsp]
	comiss	xmm0, DWORD PTR val$[rsp]
	jbe	SHORT $LN5@zen_clamp
	movss	xmm0, DWORD PTR min$[rsp]
	movss	DWORD PTR tv67[rsp], xmm0
	jmp	SHORT $LN6@zen_clamp
$LN5@zen_clamp:
	movss	xmm0, DWORD PTR val$[rsp]
	comiss	xmm0, DWORD PTR max$[rsp]
	jbe	SHORT $LN3@zen_clamp
	movss	xmm0, DWORD PTR max$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@zen_clamp
$LN3@zen_clamp:
	movss	xmm0, DWORD PTR val$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@zen_clamp:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR tv67[rsp], xmm0
$LN6@zen_clamp:
	movss	xmm0, DWORD PTR tv67[rsp]
; Line 284
	add	rsp, 24
	ret	0
?zen_clamp@@YAMMMM@Z ENDP				; zen_clamp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 48
val_min$ = 56
val_max$ = 64
min$ = 72
max$ = 80
?zen_lmap@@YAMMMMMM@Z PROC				; zen_lmap
; File W:\cpp\void\detroit\brazen-math.h
; Line 270
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 271
	movss	xmm2, DWORD PTR val_max$[rsp]
	movss	xmm1, DWORD PTR val_min$[rsp]
	movss	xmm0, DWORD PTR val$[rsp]
	call	?zen_unlerp@@YAMMMM@Z			; zen_unlerp
	movss	xmm2, DWORD PTR max$[rsp]
	movss	xmm1, DWORD PTR min$[rsp]
	call	?zen_lerp@@YAMMMM@Z			; zen_lerp
; Line 272
	add	rsp, 40					; 00000028H
	ret	0
?zen_lmap@@YAMMMMMM@Z ENDP				; zen_lmap
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 8
min$ = 16
max$ = 24
?zen_unlerp@@YAMMMM@Z PROC				; zen_unlerp
; File W:\cpp\void\detroit\brazen-math.h
; Line 264
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 265
	movss	xmm0, DWORD PTR val$[rsp]
	subss	xmm0, DWORD PTR min$[rsp]
	movss	xmm1, DWORD PTR max$[rsp]
	subss	xmm1, DWORD PTR min$[rsp]
	divss	xmm0, xmm1
; Line 266
	ret	0
?zen_unlerp@@YAMMMM@Z ENDP				; zen_unlerp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 8
min$ = 16
max$ = 24
?zen_lerp@@YAMMMM@Z PROC				; zen_lerp
; File W:\cpp\void\detroit\brazen-math.h
; Line 258
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 259
	movss	xmm0, DWORD PTR max$[rsp]
	subss	xmm0, DWORD PTR min$[rsp]
	mulss	xmm0, DWORD PTR val$[rsp]
	movss	xmm1, DWORD PTR min$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 260
	ret	0
?zen_lerp@@YAMMMM@Z ENDP				; zen_lerp
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__ESTANDARD_BASIS@@YAXXZ
text$di	SEGMENT
??__ESTANDARD_BASIS@@YAXXZ PROC				; `dynamic initializer for 'STANDARD_BASIS'', COMDAT
; File W:\cpp\void\detroit\brazen-math.h
; Line 243
	push	rsi
	push	rdi
; Line 240
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3QBTf32x3@@B
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_X@@3Tf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 241
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3QBTf32x3@@B+12
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Y@@3Tf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 242
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3QBTf32x3@@B+24
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Z@@3Tf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	pop	rdi
	pop	rsi
	ret	0
??__ESTANDARD_BASIS@@YAXXZ ENDP				; `dynamic initializer for 'STANDARD_BASIS''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
x$ = 32
y$ = 40
?f32x2_make@@YA?AUf32x2@@MM@Z PROC			; f32x2_make
; File W:\cpp\void\detroit\brazen-math.h
; Line 200
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR $T1[rsp+4], xmm0
	mov	rax, QWORD PTR $T1[rsp]
; Line 201
	add	rsp, 24
	ret	0
?f32x2_make@@YA?AUf32x2@@MM@Z ENDP			; f32x2_make
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
Kind$ = 32
?TraceMessageKindToString@@YAPEB_WH@Z PROC		; TraceMessageKindToString
; File W:\cpp\void\dr\trace.c
; Line 6
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR Kind$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 7
	ja	SHORT $LN2@TraceMessa
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN13@TraceMessa[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@TraceMessa:
; Line 7
	lea	rax, OFFSET FLAT:$SG80124
	jmp	SHORT $LN1@TraceMessa
$LN5@TraceMessa:
; Line 8
	lea	rax, OFFSET FLAT:$SG80126
	jmp	SHORT $LN1@TraceMessa
$LN6@TraceMessa:
; Line 9
	lea	rax, OFFSET FLAT:$SG80128
	jmp	SHORT $LN1@TraceMessa
$LN7@TraceMessa:
; Line 10
	lea	rax, OFFSET FLAT:$SG80130
	jmp	SHORT $LN1@TraceMessa
$LN8@TraceMessa:
; Line 11
	lea	rax, OFFSET FLAT:$SG80132
	jmp	SHORT $LN1@TraceMessa
$LN9@TraceMessa:
; Line 12
	lea	rax, OFFSET FLAT:$SG80134
	jmp	SHORT $LN1@TraceMessa
$LN10@TraceMessa:
; Line 13
	lea	rax, OFFSET FLAT:$SG80136
	jmp	SHORT $LN1@TraceMessa
$LN11@TraceMessa:
; Line 14
	lea	rax, OFFSET FLAT:$SG80138
	jmp	SHORT $LN1@TraceMessa
$LN2@TraceMessa:
; Line 16
	lea	rax, OFFSET FLAT:$SG80139
$LN1@TraceMessa:
; Line 17
	add	rsp, 24
	ret	0
$LN13@TraceMessa:
	DD	$LN4@TraceMessa
	DD	$LN5@TraceMessa
	DD	$LN6@TraceMessa
	DD	$LN10@TraceMessa
	DD	$LN7@TraceMessa
	DD	$LN11@TraceMessa
	DD	$LN8@TraceMessa
	DD	$LN9@TraceMessa
?TraceMessageKindToString@@YAPEB_WH@Z ENDP		; TraceMessageKindToString
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 0
Result$ = 4
Name$ = 32
?FileNameIsSymLink@@YAHPEBD@Z PROC			; FileNameIsSymLink
; File W:\cpp\void\dr\plat-win32.c
; Line 732
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN5@FileNameIs
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN4@FileNameIs
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN3@FileNameIs
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Name$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@FileNameIs
$LN4@FileNameIs:
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN6@FileNameIs
$LN5@FileNameIs:
$LN3@FileNameIs:
	mov	DWORD PTR tv80[rsp], 0
$LN6@FileNameIs:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR Result$[rsp], eax
; Line 733
	mov	eax, DWORD PTR Result$[rsp]
; Line 734
	add	rsp, 24
	ret	0
?FileNameIsSymLink@@YAHPEBD@Z ENDP			; FileNameIsSymLink
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Str$ = 48
?CStrW@@YAPEB_WPEBD@Z PROC				; CStrW
; File W:\cpp\void\dr\plat-win32.c
; Line 491
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rdx, QWORD PTR Str$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 492
	add	rsp, 40					; 00000028H
	ret	0
?CStrW@@YAPEB_WPEBD@Z ENDP				; CStrW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?PlatformDeinitialize@@YAXXZ PROC			; PlatformDeinitialize
; File W:\cpp\void\dr\plat-win32.c
; Line 401
	sub	rsp, 40					; 00000028H
; Line 402
	cmp	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 0
	je	SHORT $LN2@PlatformDe
; Line 403
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	call	QWORD PTR __imp_timeEndPeriod
$LN2@PlatformDe:
; Line 405
	add	rsp, 40					; 00000028H
	ret	0
?PlatformDeinitialize@@YAXXZ ENDP			; PlatformDeinitialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
User32$1 = 32
XXX$2 = 40
YYY$3 = 48
tv92 = 56
?PlatformInitialize@@YAXXZ PROC				; PlatformInitialize
; File W:\cpp\void\dr\plat-win32.c
; Line 359
	sub	rsp, 72					; 00000048H
; Line 360
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+128
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PlatformIn
; Line 361
	call	QWORD PTR __imp_AllocConsole
$LN2@PlatformIn:
; Line 363
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+96, rax
; Line 364
	mov	ecx, -10				; fffffff6H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+64, rax
; Line 365
	mov	ecx, -12				; fffffff4H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+120, rax
; Line 367
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 1
; Line 369
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	call	QWORD PTR __imp_timeBeginPeriod
	test	eax, eax
	je	SHORT $LN3@PlatformIn
; Line 370
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 0
$LN3@PlatformIn:
; Line 373
	call	?GetPerformanceFrequency@@YA_KXZ	; GetPerformanceFrequency
	mov	QWORD PTR ?SYSTEM@@3U_SYSTEM@@A+64, rax
; Line 375
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+128
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@PlatformIn
; Line 381
	lea	rcx, OFFSET FLAT:$SG78812
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR User32$1[rsp], rax
; Line 383
	lea	rdx, OFFSET FLAT:$SG78813
	mov	rcx, QWORD PTR User32$1[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR XXX$2[rsp], rax
; Line 385
	lea	rdx, OFFSET FLAT:$SG78814
	mov	rcx, QWORD PTR User32$1[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR YYY$3[rsp], rax
; Line 388
	cmp	QWORD PTR XXX$2[rsp], 0
	je	SHORT $LN5@PlatformIn
; Line 389
	mov	rax, QWORD PTR XXX$2[rsp]
	mov	QWORD PTR tv92[rsp], rax
	mov	rcx, -3
	call	QWORD PTR tv92[rsp]
; Line 390
	jmp	SHORT $LN6@PlatformIn
$LN5@PlatformIn:
; Line 391
	cmp	QWORD PTR YYY$3[rsp], 0
	je	SHORT $LN7@PlatformIn
; Line 392
	call	QWORD PTR YYY$3[rsp]
$LN7@PlatformIn:
$LN6@PlatformIn:
; Line 395
	mov	rcx, QWORD PTR User32$1[rsp]
	call	QWORD PTR __imp_FreeLibrary
$LN4@PlatformIn:
; Line 397
	add	rsp, 72					; 00000048H
	ret	0
?PlatformInitialize@@YAXXZ ENDP				; PlatformInitialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
Read$ = 40
Spaces$ = 48
Write$ = 56
ArgString$ = 64
ArgBuffer$ = 72
$T1 = 80
$T2 = 104
Inst$ = 160
PrevInst$ = 168
Cmd$ = 176
CmdShow$ = 184
WinMain	PROC
; File W:\cpp\void\dr\plat-win32.c
; Line 420
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 421
	mov	edx, 256				; 00000100H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR ArgBuffer$[rsp], rax
; Line 422
	mov	edx, 1024				; 00000400H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR ArgString$[rsp], rax
; Line 424
	mov	DWORD PTR Spaces$[rsp], 0
; Line 425
	mov	rax, QWORD PTR Cmd$[rsp]
	mov	QWORD PTR Read$[rsp], rax
; Line 426
	mov	rax, QWORD PTR ArgBuffer$[rsp]
	mov	QWORD PTR Write$[rsp], rax
$LN2@WinMain:
; Line 428
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@WinMain
; Line 430
	movsxd	rax, DWORD PTR Spaces$[rsp]
	mov	rcx, QWORD PTR ArgString$[rsp]
	mov	rdx, QWORD PTR Write$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR Spaces$[rsp]
	inc	eax
	mov	DWORD PTR Spaces$[rsp], eax
$LN4@WinMain:
; Line 432
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN5@WinMain
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN5@WinMain
; Line 433
	mov	rax, QWORD PTR Read$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv83[rsp], al
	mov	rax, QWORD PTR Read$[rsp]
	inc	rax
	mov	QWORD PTR Read$[rsp], rax
	mov	rax, QWORD PTR Write$[rsp]
	movzx	ecx, BYTE PTR tv83[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR Write$[rsp]
	inc	rax
	mov	QWORD PTR Write$[rsp], rax
	jmp	SHORT $LN4@WinMain
$LN5@WinMain:
; Line 435
	mov	rax, QWORD PTR Write$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR Write$[rsp]
	inc	rax
	mov	QWORD PTR Write$[rsp], rax
$LN6@WinMain:
; Line 437
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN7@WinMain
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN7@WinMain
; Line 438
	mov	rax, QWORD PTR Read$[rsp]
	inc	rax
	mov	QWORD PTR Read$[rsp], rax
	jmp	SHORT $LN6@WinMain
$LN7@WinMain:
; Line 439
	jmp	$LN2@WinMain
$LN3@WinMain:
; Line 442
	mov	eax, DWORD PTR Spaces$[rsp]
	mov	DWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A, eax
; Line 443
	mov	rax, QWORD PTR ArgString$[rsp]
	mov	QWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A+8, rax
; Line 444
	mov	rax, QWORD PTR PrevInst$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rax, QWORD PTR $T1[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, OFFSET FLAT:?ARGUMENTS@@3U_ARGUMENTS@@A+16
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 446
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+128
	or	eax, 4
	mov	DWORD PTR ?PROCESS@@3U_PROCESS@@A+128, eax
; Line 447
	mov	rax, QWORD PTR Inst$[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rax, QWORD PTR $T2[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, OFFSET FLAT:?PROCESS@@3U_PROCESS@@A+8
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 449
	call	?PlatformInitialize@@YAXXZ		; PlatformInitialize
; Line 450
	call	?MAIN@@YAXXZ				; MAIN
; Line 451
	call	?PlatformDeinitialize@@YAXXZ		; PlatformDeinitialize
; Line 453
	mov	rcx, QWORD PTR ArgBuffer$[rsp]
	call	?HeapFree@@YAXPEAX@Z			; HeapFree
; Line 454
	mov	rcx, QWORD PTR ArgString$[rsp]
	call	?HeapFree@@YAXPEAX@Z			; HeapFree
; Line 455
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+20
; Line 456
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
X$ = 32
?RuneIsEOL@@YAHH@Z PROC					; RuneIsEOL
; File W:\cpp\void\dr\text.c
; Line 49
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	cmp	DWORD PTR X$[rsp], 13
	je	SHORT $LN3@RuneIsEOL
	cmp	DWORD PTR X$[rsp], 10
	je	SHORT $LN3@RuneIsEOL
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN4@RuneIsEOL
$LN3@RuneIsEOL:
	mov	DWORD PTR tv66[rsp], 1
$LN4@RuneIsEOL:
	mov	eax, DWORD PTR tv66[rsp]
; Line 50
	add	rsp, 24
	ret	0
?RuneIsEOL@@YAHH@Z ENDP					; RuneIsEOL
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
R$ = 56
Format$ = 80
?FormatW@@YAPEA_WPEB_WZZ PROC				; FormatW
; File W:\cpp\void\dr\text.c
; Line 35
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 36
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 37
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR R$[rsp], rax
; Line 38
	mov	QWORD PTR Args$[rsp], 0
; Line 39
	mov	rax, QWORD PTR R$[rsp]
; Line 40
	add	rsp, 72					; 00000048H
	ret	0
?FormatW@@YAPEA_WPEB_WZZ ENDP				; FormatW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
R$ = 56
Format$ = 80
?FormatA@@YAPEADPEBDZZ PROC				; FormatA
; File W:\cpp\void\dr\text.c
; Line 24
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 25
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 26
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	strlen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z	; FormatExtendedA
	mov	QWORD PTR R$[rsp], rax
; Line 27
	mov	QWORD PTR Args$[rsp], 0
; Line 28
	mov	rax, QWORD PTR R$[rsp]
; Line 29
	add	rsp, 72					; 00000048H
	ret	0
?FormatA@@YAPEADPEBDZZ ENDP				; FormatA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
R$ = 40
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z PROC		; FormatExtendedW
; File W:\cpp\void\dr\text.c
; Line 15
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 257				; 00000101H
	cdqe
	shl	rax, 1
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR R$[rsp], rax
; Line 16
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 256				; 00000100H
	cdqe
	mov	r9, QWORD PTR Args$[rsp]
	mov	r8, QWORD PTR FormatStr$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR R$[rsp]
	call	_vsnwprintf
	mov	DWORD PTR L$[rsp], eax
; Line 17
	cmp	QWORD PTR Len$[rsp], 0
	je	SHORT $LN2@FormatExte
	mov	rax, QWORD PTR Len$[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@FormatExte:
; Line 18
	mov	rax, QWORD PTR R$[rsp]
; Line 19
	add	rsp, 56					; 00000038H
	ret	0
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ENDP		; FormatExtendedW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
R$ = 40
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z PROC		; FormatExtendedA
; File W:\cpp\void\dr\text.c
; Line 7
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 257				; 00000101H
	cdqe
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR R$[rsp], rax
; Line 8
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 256				; 00000100H
	cdqe
	mov	r9, QWORD PTR Args$[rsp]
	mov	r8, QWORD PTR FormatStr$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR R$[rsp]
	call	vsprintf_s
	mov	DWORD PTR L$[rsp], eax
; Line 9
	cmp	QWORD PTR Len$[rsp], 0
	je	SHORT $LN2@FormatExte
	mov	rax, QWORD PTR Len$[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@FormatExte:
; Line 10
	mov	rax, QWORD PTR R$[rsp]
; Line 11
	add	rsp, 56					; 00000038H
	ret	0
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z ENDP		; FormatExtendedA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
Args$1 = 40
tv79 = 48
tv86 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Location$ = 192
Expression$ = 200
IsTrue$ = 208
Message$ = 216
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ PROC	; AssertExtendedW
; File W:\cpp\void\dr\break.c
; Line 8
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 9
	cmp	DWORD PTR IsTrue$[rsp], 0
	jne	$LN2@AssertExte
; Line 12
	lea	rax, QWORD PTR Message$[rsp+8]
	mov	QWORD PTR Args$1[rsp], rax
; Line 14
	mov	rax, QWORD PTR Args$1[rsp]
	mov	QWORD PTR tv79[rsp], rax
	mov	rcx, QWORD PTR Message$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv77[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv79[rsp]
	mov	rdx, QWORD PTR Message$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR tv86[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv86[rsp]
	lea	r8, OFFSET FLAT:$SG80190
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 16
	mov	QWORD PTR Args$1[rsp], 0
; Line 18
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR Expression$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ; DebugBreakExtended
	jmp	SHORT $LN1@AssertExte
$LN2@AssertExte:
; Line 21
	xor	eax, eax
$LN1@AssertExte:
; Line 22
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ENDP	; AssertExtendedW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 64
ErrorBed$ = 72
ErrorLen$ = 80
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 232
Class$ = 288
ErrorCode$ = 296
?GetErrorStringA@@YAPEBDHH@Z PROC			; GetErrorStringA
; File W:\cpp\void\dr\plat-win32.c
; Line 138
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	cmp	DWORD PTR ErrorCode$[rsp], -1
	jne	SHORT $LN5@GetErrorSt
; Line 139
	mov	ecx, DWORD PTR Class$[rsp]
	call	?GetErrorCode@@YAHH@Z			; GetErrorCode
	mov	DWORD PTR ErrorCode$[rsp], eax
; Line 140
	jmp	SHORT $LN6@GetErrorSt
$LN5@GetErrorSt:
; Line 141
	cmp	DWORD PTR Class$[rsp], 0
	je	SHORT $LN7@GetErrorSt
; Line 142
	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 142				; 0000008eH
	lea	r8, OFFSET FLAT:$SG78660
	lea	rdx, OFFSET FLAT:$SG78661
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78659
	mov	edx, 4
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN7@GetErrorSt:
$LN6@GetErrorSt:
; Line 145
	mov	edx, 257				; 00000101H
	xor	ecx, ecx
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR ErrorBed$[rsp], rax
; Line 146
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 256			; 00000100H
	mov	rax, QWORD PTR ErrorBed$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1024				; 00000400H
	mov	r8d, DWORD PTR ErrorCode$[rsp]
	xor	edx, edx
	mov	ecx, 4096				; 00001000H
	call	QWORD PTR __imp_FormatMessageA
	mov	DWORD PTR ErrorLen$[rsp], eax
; Line 149
	mov	eax, DWORD PTR ErrorLen$[rsp]
	dec	eax
	mov	DWORD PTR I$1[rsp], eax
	jmp	SHORT $LN4@GetErrorSt
$LN2@GetErrorSt:
	mov	eax, DWORD PTR I$1[rsp]
	dec	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@GetErrorSt:
	cmp	DWORD PTR I$1[rsp], 0
	jl	SHORT $LN3@GetErrorSt
; Line 150
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR ErrorBed$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	?RuneIsEOL@@YAHH@Z			; RuneIsEOL
	test	eax, eax
	je	SHORT $LN8@GetErrorSt
; Line 151
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR ErrorBed$[rsp]
	mov	BYTE PTR [rcx+rax], 46			; 0000002eH
; Line 152
	jmp	SHORT $LN9@GetErrorSt
$LN8@GetErrorSt:
; Line 153
	jmp	SHORT $LN3@GetErrorSt
$LN9@GetErrorSt:
; Line 155
	jmp	SHORT $LN2@GetErrorSt
$LN3@GetErrorSt:
; Line 156
	cmp	DWORD PTR ErrorLen$[rsp], 0
	je	SHORT $LN11@GetErrorSt
	cmp	QWORD PTR ErrorBed$[rsp], 0
	jne	$LN10@GetErrorSt
$LN11@GetErrorSt:
; Line 157
	mov	DWORD PTR [rsp+32], 8
	mov	r9d, 157				; 0000009dH
	lea	r8, OFFSET FLAT:$SG78667
	lea	rdx, OFFSET FLAT:$SG78668
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78666
	mov	edx, 4
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 158
	lea	rax, OFFSET FLAT:$SG78669
	mov	QWORD PTR ErrorBed$[rsp], rax
$LN10@GetErrorSt:
; Line 160
	mov	rax, QWORD PTR ErrorBed$[rsp]
; Line 161
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?GetErrorStringA@@YAPEBDHH@Z ENDP			; GetErrorStringA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ErrorCode$ = 48
$T1 = 56
$T2 = 80
$T3 = 112
Class$ = 176
?GetErrorCode@@YAHH@Z PROC				; GetErrorCode
; File W:\cpp\void\dr\plat-win32.c
; Line 124
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	DWORD PTR ErrorCode$[rsp], -1
; Line 125
	cmp	DWORD PTR Class$[rsp], 2
	jne	SHORT $LN2@GetErrorCo
; Line 126
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR ErrorCode$[rsp], eax
; Line 127
	jmp	SHORT $LN3@GetErrorCo
$LN2@GetErrorCo:
; Line 128
	cmp	DWORD PTR Class$[rsp], 1
	jne	SHORT $LN4@GetErrorCo
; Line 129
	call	QWORD PTR __imp_WSAGetLastError
	mov	DWORD PTR ErrorCode$[rsp], eax
; Line 130
	jmp	SHORT $LN5@GetErrorCo
$LN4@GetErrorCo:
; Line 131
	mov	DWORD PTR [rsp+32], 6
	mov	r9d, 131				; 00000083H
	lea	r8, OFFSET FLAT:$SG78635
	lea	rdx, OFFSET FLAT:$SG78636
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78634
	mov	edx, 4
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@GetErrorCo:
$LN3@GetErrorCo:
; Line 133
	mov	eax, DWORD PTR ErrorCode$[rsp]
; Line 134
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?GetErrorCode@@YAHH@Z ENDP				; GetErrorCode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileSize$1 = 64
FileRead$2 = 68
FileData$ = 72
FileHandle$ = 80
FileSizeHI$3 = 88
tv80 = 96
tv154 = 104
tv172 = 112
$T4 = 120
$T5 = 144
$T6 = 176
$T7 = 208
$T8 = 232
$T9 = 256
$T10 = 288
$T11 = 312
$T12 = 336
$T13 = 368
$T14 = 392
$T15 = 416
BytesRead$ = 480
Name$ = 488
?LoadFileData@@YAPEAXPEAIPEBD@Z PROC			; LoadFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 506
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 456				; 000001c8H
	mov	DWORD PTR [rsp+32], 14
	mov	r9d, 506				; 000001faH
	lea	r8, OFFSET FLAT:$SG78871
	lea	rdx, OFFSET FLAT:$SG78872
	lea	rcx, QWORD PTR $T13[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR Name$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv80[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv80[rsp]
	lea	r8, OFFSET FLAT:$SG78870
	mov	edx, 2
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 508
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, -2147483648			; 80000000H
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR FileHandle$[rsp], rax
; Line 511
	mov	QWORD PTR FileData$[rsp], 0
; Line 513
	cmp	QWORD PTR FileHandle$[rsp], -1
	je	$LN2@LoadFileDa
; Line 514
	mov	DWORD PTR FileSize$1[rsp], 0
	mov	DWORD PTR FileSizeHI$3[rsp], 0
	mov	DWORD PTR FileRead$2[rsp], 0
; Line 515
	lea	rdx, QWORD PTR FileSizeHI$3[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_GetFileSize
	mov	DWORD PTR FileSize$1[rsp], eax
; Line 519
	mov	eax, DWORD PTR FileSize$1[rsp]
	mov	r9d, 4
	mov	r8d, 12288				; 00003000H
	mov	edx, eax
	xor	ecx, ecx
	call	QWORD PTR __imp_VirtualAlloc
	mov	QWORD PTR FileData$[rsp], rax
; Line 521
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR FileRead$2[rsp]
	mov	r8d, DWORD PTR FileSize$1[rsp]
	mov	rdx, QWORD PTR FileData$[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	$LN4@LoadFileDa
; Line 522
	mov	rcx, QWORD PTR FileData$[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 523
	mov	QWORD PTR FileData$[rsp], 0
; Line 525
	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 525				; 0000020dH
	lea	r8, OFFSET FLAT:$SG78877
	lea	rdx, OFFSET FLAT:$SG78878
	lea	rcx, QWORD PTR $T14[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv154[rsp], rax
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv154[rsp]
	lea	r8, OFFSET FLAT:$SG78876
	mov	edx, 6
	lea	rcx, QWORD PTR $T9[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@LoadFileDa:
; Line 528
	cmp	QWORD PTR BytesRead$[rsp], 0
	je	SHORT $LN5@LoadFileDa
; Line 529
	mov	rax, QWORD PTR BytesRead$[rsp]
	mov	ecx, DWORD PTR FileRead$2[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@LoadFileDa:
; Line 531
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 532
	jmp	$LN3@LoadFileDa
$LN2@LoadFileDa:
; Line 534
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, 534				; 00000216H
	lea	r8, OFFSET FLAT:$SG78881
	lea	rdx, OFFSET FLAT:$SG78882
	lea	rcx, QWORD PTR $T15[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv172[rsp], rax
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv172[rsp]
	lea	r8, OFFSET FLAT:$SG78880
	mov	edx, 6
	lea	rcx, QWORD PTR $T12[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@LoadFileDa:
; Line 536
	mov	rax, QWORD PTR FileData$[rsp]
; Line 537
	add	rsp, 456				; 000001c8H
	pop	rdi
	pop	rsi
	ret	0
?LoadFileData@@YAPEAXPEAIPEBD@Z ENDP			; LoadFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
BytesWritten$ = 64
FileHandle$ = 72
tv95 = 80
tv144 = 88
$T1 = 96
$T2 = 120
$T3 = 144
$T4 = 176
$T5 = 200
$T6 = 224
$T7 = 256
$T8 = 280
BytesToWrite$ = 336
FileData$ = 344
Name$ = 352
?WriteFileData@@YAIIPEAXPEBD@Z PROC			; WriteFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 542
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 543
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 2
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, 1073741824				; 40000000H
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR FileHandle$[rsp], rax
; Line 546
	mov	DWORD PTR BytesWritten$[rsp], 0
; Line 548
	cmp	QWORD PTR FileHandle$[rsp], -1
	je	$LN2@WriteFileD
; Line 550
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR BytesWritten$[rsp]
	mov	r8d, DWORD PTR BytesToWrite$[rsp]
	mov	rdx, QWORD PTR FileData$[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	jne	$LN4@WriteFileD
; Line 551
	mov	DWORD PTR [rsp+32], 17
	mov	r9d, 551				; 00000227H
	lea	r8, OFFSET FLAT:$SG78898
	lea	rdx, OFFSET FLAT:$SG78899
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv95[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv95[rsp]
	lea	r8, OFFSET FLAT:$SG78897
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@WriteFileD:
; Line 554
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 555
	jmp	$LN3@WriteFileD
$LN2@WriteFileD:
; Line 557
	mov	DWORD PTR [rsp+32], 18
	mov	r9d, 557				; 0000022dH
	lea	r8, OFFSET FLAT:$SG78901
	lea	rdx, OFFSET FLAT:$SG78902
	lea	rcx, QWORD PTR $T8[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv144[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv144[rsp]
	lea	r8, OFFSET FLAT:$SG78900
	mov	edx, 6
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@WriteFileD:
; Line 559
	mov	eax, DWORD PTR BytesWritten$[rsp]
; Line 560
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?WriteFileData@@YAIIPEAXPEBD@Z ENDP			; WriteFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileData$ = 48
?UnloadFileData@@YAXPEAX@Z PROC				; UnloadFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 501
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 32768				; 00008000H
	xor	edx, edx
	mov	rcx, QWORD PTR FileData$[rsp]
	call	QWORD PTR __imp_VirtualFree
; Line 502
	add	rsp, 40					; 00000028H
	ret	0
?UnloadFileData@@YAXPEAX@Z ENDP				; UnloadFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ButtonPressed$ = 48
Result$ = 52
ErrorMessage$ = 56
tv94 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
Location$ = 272
Expression$ = 280
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z PROC	; DebugBreakExtended
; File W:\cpp\void\dr\plat-win32.c
; Line 90
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR Result$[rsp], 1
; Line 92
	mov	rax, QWORD PTR Expression$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Location$[rsp]
	mov	r8d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG78612
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR ErrorMessage$[rsp], rax
; Line 95
	mov	r9d, 16
	lea	r8, OFFSET FLAT:$SG78613
	mov	rdx, QWORD PTR ErrorMessage$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_MessageBoxA
; Line 97
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78614
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 98
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78615
	mov	edx, 1
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 99
	mov	rdx, QWORD PTR ErrorMessage$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv94[rsp], rax
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv94[rsp]
	lea	r8, OFFSET FLAT:$SG78616
	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 100
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG78617
	mov	edx, 1
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 102
	mov	r9d, 18
	lea	r8, OFFSET FLAT:$SG78618
	lea	rdx, OFFSET FLAT:$SG78619
	xor	ecx, ecx
	call	QWORD PTR __imp_MessageBoxA
	mov	DWORD PTR ButtonPressed$[rsp], eax
; Line 106
	cmp	DWORD PTR ButtonPressed$[rsp], 3
	jne	SHORT $LN2@DebugBreak
; Line 107
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
; Line 108
	jmp	SHORT $LN3@DebugBreak
$LN2@DebugBreak:
; Line 109
	cmp	DWORD PTR ButtonPressed$[rsp], 4
	jne	SHORT $LN4@DebugBreak
; Line 113
	call	QWORD PTR __imp_DebugBreak
; Line 114
	jmp	SHORT $LN5@DebugBreak
$LN4@DebugBreak:
; Line 115
	cmp	DWORD PTR ButtonPressed$[rsp], 5
	jne	SHORT $LN6@DebugBreak
; Line 116
	mov	DWORD PTR Result$[rsp], 0
$LN6@DebugBreak:
$LN5@DebugBreak:
$LN3@DebugBreak:
; Line 119
	mov	eax, DWORD PTR Result$[rsp]
$LN7@DebugBreak:
; Line 120
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ENDP	; DebugBreakExtended
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 48
Wrote$ = 52
tv75 = 56
Text$ = 80
?OutputW@@YAXPEB_W@Z PROC				; OutputW
; File W:\cpp\void\dr\plat-win32.c
; Line 44
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR Text$[rsp]
	call	QWORD PTR __imp_OutputDebugStringW
; Line 47
	mov	rcx, QWORD PTR Text$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv77[rsp], eax
	mov	rax, QWORD PTR ?PROCESS@@3U_PROCESS@@A+96
	mov	QWORD PTR tv75[rsp], rax
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR Wrote$[rsp]
	mov	r8d, DWORD PTR tv77[rsp]
	mov	rdx, QWORD PTR Text$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	call	QWORD PTR __imp_WriteConsoleW
	test	eax, eax
	jne	SHORT $LN2@OutputW
; Line 49
	lea	rcx, OFFSET FLAT:$SG78579
	call	printf
$LN2@OutputW:
; Line 51
	add	rsp, 72					; 00000048H
	ret	0
?OutputW@@YAXPEB_W@Z ENDP				; OutputW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
StringLen$ = 48
C$ = 52
StringBed$ = 56
Len$ = 80
Str$ = 88
?Widen@@YAPEA_WHPEBD@Z PROC				; Widen
; File W:\cpp\void\dr\plat-win32.c
; Line 66
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 67
	cmp	QWORD PTR Str$[rsp], 0
	jne	SHORT $LN2@Widen
; Line 68
	xor	eax, eax
	jmp	$LN1@Widen
$LN2@Widen:
; Line 71
	mov	DWORD PTR StringLen$[rsp], 0
; Line 72
	mov	QWORD PTR StringBed$[rsp], 0
; Line 75
	cmp	DWORD PTR Len$[rsp], -1
	jne	SHORT $LN3@Widen
	mov	rcx, QWORD PTR Str$[rsp]
	call	strlen
	mov	DWORD PTR Len$[rsp], eax
$LN3@Widen:
; Line 77
	mov	DWORD PTR C$[rsp], 0
; Line 79
	mov	DWORD PTR C$[rsp], 65001		; 0000fde9H
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	jne	SHORT $LN5@Widen
	mov	DWORD PTR C$[rsp], 0
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	jne	SHORT $LN5@Widen
	mov	DWORD PTR C$[rsp], 2
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	je	SHORT $LN4@Widen
$LN5@Widen:
; Line 82
	mov	eax, DWORD PTR StringLen$[rsp]
	inc	eax
	cdqe
	shl	rax, 1
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR StringBed$[rsp], rax
; Line 83
	mov	eax, DWORD PTR StringLen$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR StringBed$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
$LN4@Widen:
; Line 85
	mov	rax, QWORD PTR StringBed$[rsp]
$LN1@Widen:
; Line 86
	add	rsp, 72					; 00000048H
	ret	0
?Widen@@YAPEA_WHPEBD@Z ENDP				; Widen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
?GetPerformanceCounter@@YA_KXZ PROC			; GetPerformanceCounter
; File W:\cpp\void\dr\plat-win32.c
; Line 31
	sub	rsp, 56					; 00000038H
; Line 32
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 33
	mov	rax, QWORD PTR Result$[rsp]
; Line 34
	add	rsp, 56					; 00000038H
	ret	0
?GetPerformanceCounter@@YA_KXZ ENDP			; GetPerformanceCounter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
?GetPerformanceFrequency@@YA_KXZ PROC			; GetPerformanceFrequency
; File W:\cpp\void\dr\plat-win32.c
; Line 24
	sub	rsp, 56					; 00000038H
; Line 25
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 26
	mov	rax, QWORD PTR Result$[rsp]
; Line 27
	add	rsp, 56					; 00000038H
	ret	0
?GetPerformanceFrequency@@YA_KXZ ENDP			; GetPerformanceFrequency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?GetThreadID@@YAHXZ PROC				; GetThreadID
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	sub	rsp, 40					; 00000028H
	call	QWORD PTR __imp_GetCurrentThreadId
; Line 39
	add	rsp, 40					; 00000028H
	ret	0
?GetThreadID@@YAHXZ ENDP				; GetThreadID
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
Name$ = 64
?FileExists@@YAHPEBD@Z PROC				; FileExists
; File W:\cpp\void\dr\plat-win32.c
; Line 742
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR Name$[rsp]
	call	?FileNameIsSymLink@@YAHPEBD@Z		; FileNameIsSymLink
	test	eax, eax
	jne	SHORT $LN3@FileExists
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_GetFileAttributesA
	cmp	eax, -1					; ffffffffH
	jne	SHORT $LN3@FileExists
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@FileExists
$LN3@FileExists:
	mov	DWORD PTR tv70[rsp], 1
$LN4@FileExists:
	mov	eax, DWORD PTR tv70[rsp]
; Line 743
	add	rsp, 56					; 00000038H
	ret	0
?FileExists@@YAHPEBD@Z ENDP				; FileExists
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Selection$1 = 32
Window$ = 40
RootViewSize$ = 48
$T2 = 64
$T3 = 80
__$ArrayPad$ = 96
?MAIN@@YAXXZ PROC					; MAIN
; File W:\cpp\void\zen\zen.c
; Line 188
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 189
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, OFFSET FLAT:$SG168654
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ZenInitialize@@YAXTi32x4@@PEB_W@Z	; ZenInitialize
; Line 190
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A
	call	?ZenConductSDFFontTest@@YAHPEAUZenCore@@@Z ; ZenConductSDFFontTest
; Line 194
	call	?ZenGetActiveWindow@@YAPEAUZenWindow@@XZ ; ZenGetActiveWindow
	mov	QWORD PTR Window$[rsp], rax
; Line 195
	mov	rax, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR [rax+520]
	mov	QWORD PTR RootViewSize$[rsp], rax
$LN2@MAIN:
; Line 198
	cmp	DWORD PTR ?Zen@@3UZenCore@@A+13612, 0
	jne	SHORT $LN3@MAIN
; Line 201
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A+4392
	call	?ZenFontDebugUI@@YAXPEAUZEN_IMGLUI@@@Z	; ZenFontDebugUI
; Line 204
	lea	r8, QWORD PTR Selection$1[rsp]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?Zen@@3UZenCore@@A+4392
	call	?ZenGluiColorPickerWindowView@@YAHPEAUZEN_IMGLUI@@HPEAI@Z ; ZenGluiColorPickerWindowView
; Line 206
	call	?ZenTick@@YAXXZ				; ZenTick
; Line 207
	jmp	SHORT $LN2@MAIN
$LN3@MAIN:
; Line 208
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?MAIN@@YAXXZ ENDP					; MAIN
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?strtoi@@YA_JUstr32@@@Z PROC				; strtoi
; File W:\cpp\void\dr\str32.h
; Line 27
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR r$[rsp], -1
; Line 28
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+4]
	mov	r9, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [rax+4]
	lea	rdx, QWORD PTR r$[rsp]
	mov	ecx, 10
	call	?rx7__stoi@@YAHHPEA_JPEBD1@Z		; rx7__stoi
; Line 29
	mov	rax, QWORD PTR r$[rsp]
; Line 30
	add	rsp, 56					; 00000038H
	ret	0
?strtoi@@YA_JUstr32@@@Z ENDP				; strtoi
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
this$ = 32
??7str32@@QEAAHXZ PROC					; str32::operator!
; File W:\cpp\void\dr\str32.h
; Line 170
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 172
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[rsp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv66[rsp]
; Line 173
	add	rsp, 24
	ret	0
??7str32@@QEAAHXZ ENDP					; str32::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAHXZ PROC					; str32::operator int
; File W:\cpp\void\dr\str32.h
; Line 196
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 197
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 198
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAHXZ ENDP					; str32::operator int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAIXZ PROC					; str32::operator unsigned int
; File W:\cpp\void\dr\str32.h
; Line 191
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 192
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 193
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAIXZ ENDP					; str32::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAMXZ PROC					; str32::operator float
; File W:\cpp\void\dr\str32.h
; Line 206
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 207
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
	cvtsi2ss xmm0, rax
; Line 208
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAMXZ ENDP					; str32::operator float
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAANXZ PROC					; str32::operator double
; File W:\cpp\void\dr\str32.h
; Line 201
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 202
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
	cvtsi2sd xmm0, rax
; Line 203
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAANXZ ENDP					; str32::operator double
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAA_KXZ PROC					; str32::operator unsigned __int64
; File W:\cpp\void\dr\str32.h
; Line 186
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 187
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 188
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAA_KXZ ENDP					; str32::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAA_JXZ PROC					; str32::operator __int64
; File W:\cpp\void\dr\str32.h
; Line 181
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 182
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 183
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAA_JXZ ENDP					; str32::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 8
??Bstr32@@QEAAPEADXZ PROC				; str32::operator char *
; File W:\cpp\void\dr\str32.h
; Line 176
	mov	QWORD PTR [rsp+8], rcx
; Line 177
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+4]
; Line 178
	ret	0
??Bstr32@@QEAAPEADXZ ENDP				; str32::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memr$ = 48
UserData$ = 80
Flags$ = 88
Alignment$ = 96
OldSize$ = 104
OldMemr$ = 112
NewSize$ = 120
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; HEAP_ALLOCATOR
; File W:\cpp\void\dr\cator.c
; Line 67
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR Memr$[rsp], 0
; Line 69
	cmp	QWORD PTR NewSize$[rsp], 0
	je	$LN2@HEAP_ALLOC
; Line 70
	cmp	DWORD PTR Alignment$[rsp], 0
	je	SHORT $LN4@HEAP_ALLOC
; Line 71
	movsxd	rax, DWORD PTR Alignment$[rsp]
	mov	DWORD PTR [rsp+32], 71			; 00000047H
	lea	r9, OFFSET FLAT:$SG80101
	mov	r8, rax
	mov	rdx, QWORD PTR NewSize$[rsp]
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp__aligned_realloc_dbg
	mov	QWORD PTR Memr$[rsp], rax
; Line 72
	jmp	SHORT $LN5@HEAP_ALLOC
$LN4@HEAP_ALLOC:
; Line 73
	mov	rdx, QWORD PTR NewSize$[rsp]
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR Memr$[rsp], rax
$LN5@HEAP_ALLOC:
; Line 76
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@HEAP_ALLOC
; Line 77
	mov	rax, QWORD PTR OldSize$[rsp]
	mov	rcx, QWORD PTR NewSize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR OldSize$[rsp]
	mov	rdx, QWORD PTR Memr$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN6@HEAP_ALLOC:
; Line 79
	jmp	SHORT $LN3@HEAP_ALLOC
$LN2@HEAP_ALLOC:
; Line 80
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	SHORT $LN7@HEAP_ALLOC
; Line 81
	cmp	DWORD PTR Alignment$[rsp], 0
	je	SHORT $LN8@HEAP_ALLOC
; Line 82
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp__aligned_free_dbg
; Line 83
	jmp	SHORT $LN9@HEAP_ALLOC
$LN8@HEAP_ALLOC:
; Line 84
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp_free
$LN9@HEAP_ALLOC:
$LN7@HEAP_ALLOC:
$LN3@HEAP_ALLOC:
; Line 89
	mov	rax, QWORD PTR Memr$[rsp]
; Line 90
	add	rsp, 72					; 00000048H
	ret	0
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; HEAP_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv190 = 48
Mem$ = 56
tv95 = 64
$T1 = 72
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 216
UserData$ = 272
Flags$ = 280
Alignment$ = 288
OldSize$ = 296
OldMemr$ = 304
NewSize$ = 312
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; STATIC_ALLOCATOR
; File W:\cpp\void\dr\cator.c
; Line 20
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 34
	mov	eax, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@STATIC_ALL
	mov	eax, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax]
	or	eax, 1
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [r8+rcx], eax
	mov	edx, 16384				; 00004000H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR tv95[rsp], rax
	mov	eax, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rax+rcx], rdx
$LN2@STATIC_ALL:
; Line 36
	mov	eax, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	movsxd	rax, DWORD PTR [rcx+rax]
	add	rax, QWORD PTR NewSize$[rsp]
	cmp	rax, 16384				; 00004000H
	jb	$LN3@STATIC_ALL
; Line 38
	cmp	QWORD PTR NewSize$[rsp], 16384		; 00004000H
	jb	SHORT $LN4@STATIC_ALL
; Line 40
	mov	DWORD PTR [rsp+32], 37			; 00000025H
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:$SG80076
	lea	rdx, OFFSET FLAT:$SG80077
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG80075
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 41
	xor	eax, eax
	jmp	$LN1@STATIC_ALL
$LN4@STATIC_ALL:
; Line 44
	mov	eax, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
$LN3@STATIC_ALL:
; Line 47
	mov	eax, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	edx, edx
	mov	edi, DWORD PTR _tls_index
	mov	rsi, QWORD PTR gs:88
	mov	rdi, QWORD PTR [rsi+rdi*8]
	movsxd	rdx, DWORD PTR [rdi+rdx]
	add	rdx, QWORD PTR [rcx+rax]
	mov	rax, rdx
	mov	QWORD PTR Mem$[rsp], rax
; Line 49
	mov	rax, QWORD PTR NewSize$[rsp]
	add	rax, 63					; 0000003fH
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	rcx
	imul	rax, rax, 64				; 00000040H
	mov	ecx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	add	eax, DWORD PTR [rdx+rcx]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rdi+rcx], eax
; Line 51
	cmp	QWORD PTR NewSize$[rsp], 0
	je	$LN5@STATIC_ALL
; Line 52
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	$LN7@STATIC_ALL
; Line 53
	mov	DWORD PTR [rsp+32], 38			; 00000026H
	mov	r9d, 53					; 00000035H
	lea	r8, OFFSET FLAT:$SG80084
	lea	rdx, OFFSET FLAT:$SG80085
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG80082
	test	rax, rax
	jne	SHORT $LN10@STATIC_ALL
	mov	DWORD PTR tv190[rsp], 1
	jmp	SHORT $LN11@STATIC_ALL
$LN10@STATIC_ALL:
	mov	DWORD PTR tv190[rsp], 0
$LN11@STATIC_ALL:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG80081
	mov	r8d, DWORD PTR tv190[rsp]
	lea	rdx, OFFSET FLAT:$SG80083
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@STATIC_ALL:
; Line 55
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@STATIC_ALL
; Line 56
	mov	rax, QWORD PTR OldSize$[rsp]
	mov	rcx, QWORD PTR NewSize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR OldSize$[rsp]
	mov	rdx, QWORD PTR Mem$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN8@STATIC_ALL:
$LN5@STATIC_ALL:
; Line 61
	mov	rax, QWORD PTR Mem$[rsp]
$LN1@STATIC_ALL:
; Line 62
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; STATIC_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memr$ = 64
?HeapFree@@YAXPEAX@Z PROC				; HeapFree
; File W:\cpp\void\dr\cator.c
; Line 94
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR Memr$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 16
	xor	edx, edx
	xor	ecx, ecx
	call	?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; HEAP_ALLOCATOR
; Line 95
	add	rsp, 56					; 00000038H
	ret	0
?HeapFree@@YAXPEAX@Z ENDP				; HeapFree
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
Zeroed$ = 80
Size$ = 88
?HeapAlloc@@YAPEAXH_K@Z PROC				; HeapAlloc
; File W:\cpp\void\dr\cator.c
; Line 99
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
	cmp	DWORD PTR Zeroed$[rsp], 0
	je	SHORT $LN3@HeapAlloc
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@HeapAlloc
$LN3@HeapAlloc:
	mov	DWORD PTR tv70[rsp], 0
$LN4@HeapAlloc:
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	mov	edx, DWORD PTR tv70[rsp]
	xor	ecx, ecx
	call	?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; HEAP_ALLOCATOR
; Line 101
	add	rsp, 72					; 00000048H
	ret	0
?HeapAlloc@@YAPEAXH_K@Z ENDP				; HeapAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
Zeroed$ = 80
Size$ = 88
?StaticAlloc@@YAPEAXH_K@Z PROC				; StaticAlloc
; File W:\cpp\void\dr\cator.c
; Line 105
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
	cmp	DWORD PTR Zeroed$[rsp], 0
	je	SHORT $LN3@StaticAllo
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@StaticAllo
$LN3@StaticAllo:
	mov	DWORD PTR tv70[rsp], 0
$LN4@StaticAllo:
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	mov	edx, DWORD PTR tv70[rsp]
	xor	ecx, ecx
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; Line 107
	add	rsp, 72					; 00000048H
	ret	0
?StaticAlloc@@YAPEAXH_K@Z ENDP				; StaticAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Output$ = 48
tv79 = 52
tv94 = 56
tv154 = 60
FormatArguments$ = 64
tv81 = 72
tv83 = 80
tv128 = 88
Formatted$1 = 96
tv152 = 104
tv150 = 112
tv148 = 120
$T2 = 128
$T3 = 160
Location$ = 224
TraceMessageKind$ = 232
FormatString$ = 240
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ PROC	; OutputTraceMessage
; File W:\cpp\void\dr\trace.c
; Line 22
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 25
	lea	rax, QWORD PTR FormatString$[rsp+8]
	mov	QWORD PTR FormatArguments$[rsp], rax
; Line 27
	mov	DWORD PTR Output$[rsp], 1
; Line 28
	cmp	QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA, 0
	je	$LN2@OutputTrac
; Line 29
	mov	rax, QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR FormatArguments$[rsp]
	mov	QWORD PTR tv81[rsp], rax
	mov	rcx, QWORD PTR FormatString$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv79[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR FormatString$[rsp]
	mov	r8d, DWORD PTR tv79[rsp]
	mov	edx, DWORD PTR TraceMessageKind$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR tv83[rsp]
	mov	DWORD PTR Output$[rsp], eax
$LN2@OutputTrac:
; Line 33
	cmp	DWORD PTR Output$[rsp], 0
	je	$LN3@OutputTrac
; Line 35
	mov	rax, QWORD PTR FormatArguments$[rsp]
	mov	QWORD PTR tv128[rsp], rax
	mov	rcx, QWORD PTR FormatString$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv94[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv128[rsp]
	mov	rdx, QWORD PTR FormatString$[rsp]
	mov	ecx, DWORD PTR tv94[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR Formatted$1[rsp], rax
; Line 37
	call	?GetThreadID@@YAHXZ			; GetThreadID
	mov	DWORD PTR tv154[rsp], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv152[rsp], rax
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv150[rsp], rax
	mov	ecx, DWORD PTR TraceMessageKind$[rsp]
	call	?TraceMessageKindToString@@YAPEB_WH@Z	; TraceMessageKindToString
	mov	QWORD PTR tv148[rsp], rax
	mov	rax, QWORD PTR Formatted$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv152[rsp]
	mov	r8, QWORD PTR tv150[rsp]
	mov	rdx, QWORD PTR tv148[rsp]
	lea	rcx, OFFSET FLAT:$SG80158
	call	?FormatW@@YAPEA_WPEB_WZZ		; FormatW
	mov	rcx, rax
	call	?OutputW@@YAXPEB_W@Z			; OutputW
$LN3@OutputTrac:
; Line 42
	mov	QWORD PTR FormatArguments$[rsp], 0
; Line 43
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ENDP	; OutputTraceMessage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ReturnAddress$ = 64
File$ = 72
Func$ = 80
Line$ = 88
Guid$ = 96
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z PROC	; TraceLocation
; File W:\cpp\void\dr\trace.h
; Line 40
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 43
	mov	rax, QWORD PTR File$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR Func$[rsp]
	mov	QWORD PTR $T1[rsp+8], rax
	mov	eax, DWORD PTR Line$[rsp]
	mov	DWORD PTR $T1[rsp+16], eax
	mov	eax, DWORD PTR Guid$[rsp]
	mov	DWORD PTR $T1[rsp+20], eax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 46
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ENDP	; TraceLocation
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
CounterB$ = 48
tv68 = 56
CounterE$ = 64
$T1 = 80
this$ = 144
??1_TRACE_BLOCK@@QEAA@XZ PROC				; _TRACE_BLOCK::~_TRACE_BLOCK
; File W:\cpp\void\dr\trace.c
; Line 54
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	call	?GetPerformanceCounter@@YA_KXZ		; GetPerformanceCounter
	mov	QWORD PTR CounterB$[rsp], rax
; Line 55
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR CounterB$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN5@TRACE_BLOC
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@TRACE_BLOC
$LN5@TRACE_BLOC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@TRACE_BLOC:
	movsd	xmm1, QWORD PTR __real@408f400000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv68[rsp], xmm0
	call	?GetPerformanceFrequency@@YA_KXZ	; GetPerformanceFrequency
	test	rax, rax
	jl	SHORT $LN3@TRACE_BLOC
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@TRACE_BLOC
$LN3@TRACE_BLOC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@TRACE_BLOC:
	movsd	xmm1, QWORD PTR tv68[rsp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR CounterE$[rsp], xmm0
; Line 57
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+8]
	mov	ecx, 24
	rep movsb
	movsd	xmm0, QWORD PTR CounterE$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:$SG80172
	mov	edx, 2
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 58
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??1_TRACE_BLOCK@@QEAA@XZ ENDP				; _TRACE_BLOCK::~_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 64
Location$ = 72
FriendlyName$ = 80
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z PROC	; _TRACE_BLOCK::_TRACE_BLOCK
; File W:\cpp\void\dr\trace.c
; Line 48
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
; Line 49
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR FriendlyName$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 50
	call	?GetPerformanceCounter@@YA_KXZ		; GetPerformanceCounter
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 51
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z ENDP	; _TRACE_BLOCK::_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 4
x$ = 8
tv88 = 16
tv134 = 24
tv148 = 32
base$ = 64
res$ = 72
min$ = 80
max$ = 88
?rx7__stoi@@YAHHPEA_JPEBD1@Z PROC			; rx7__stoi
; File W:\cpp\void\dr\rx7-text.h
; Line 125
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 126
	mov	QWORD PTR x$[rsp], 0
; Line 127
	mov	DWORD PTR s$[rsp], 1
$LN2@rx7__stoi:
; Line 131
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR min$[rsp], rax
	je	SHORT $LN7@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN6@rx7__stoi
$LN7@rx7__stoi:
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN6@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN3@rx7__stoi
$LN6@rx7__stoi:
; Line 134
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN15@rx7__stoi
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN16@rx7__stoi
$LN15@rx7__stoi:
	mov	DWORD PTR tv73[rsp], 1
$LN16@rx7__stoi:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR s$[rsp], eax
; Line 135
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
; Line 136
	jmp	SHORT $LN2@rx7__stoi
$LN3@rx7__stoi:
$LN4@rx7__stoi:
; Line 138
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR min$[rsp], rax
	jae	$LN5@rx7__stoi
; Line 139
	cmp	DWORD PTR base$[rsp], 10
	jl	SHORT $LN8@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN8@rx7__stoi
; Line 140
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR min$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR tv88[rsp], rax
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
	mov	rax, QWORD PTR tv88[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 141
	jmp	$LN9@rx7__stoi
$LN8@rx7__stoi:
; Line 142
	cmp	DWORD PTR base$[rsp], 16
	jne	SHORT $LN10@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN10@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN10@rx7__stoi
; Line 143
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR min$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR tv134[rsp], rax
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
	mov	rax, QWORD PTR tv134[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 144
	jmp	SHORT $LN11@rx7__stoi
$LN10@rx7__stoi:
; Line 145
	cmp	DWORD PTR base$[rsp], 16
	jne	SHORT $LN12@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN12@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN12@rx7__stoi
; Line 146
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR min$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR tv148[rsp], rax
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
	mov	rax, QWORD PTR tv148[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 147
	jmp	SHORT $LN13@rx7__stoi
$LN12@rx7__stoi:
; Line 148
	jmp	SHORT $LN5@rx7__stoi
$LN13@rx7__stoi:
$LN11@rx7__stoi:
$LN9@rx7__stoi:
; Line 150
	jmp	$LN4@rx7__stoi
$LN5@rx7__stoi:
; Line 152
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR res$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 155
	mov	rax, QWORD PTR min$[rsp]
	mov	rcx, QWORD PTR max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
; Line 156
	add	rsp, 56					; 00000038H
	ret	0
?rx7__stoi@@YAHHPEA_JPEBD1@Z ENDP			; rx7__stoi
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?strstr@@YAPEADQEADQEBD@Z
_TEXT	SEGMENT
_String$ = 48
_SubString$ = 56
?strstr@@YAPEADQEADQEBD@Z PROC				; strstr, COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\string.h
; Line 519
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 520
	mov	rdx, QWORD PTR _SubString$[rsp]
	mov	rcx, QWORD PTR _String$[rsp]
	call	strstr
; Line 521
	add	rsp, 40					; 00000028H
	ret	0
?strstr@@YAPEADQEADQEBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?strrchr@@YAPEADQEADH@Z
_TEXT	SEGMENT
_String$ = 48
_Ch$ = 56
?strrchr@@YAPEADQEADH@Z PROC				; strrchr, COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\string.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 514
	mov	edx, DWORD PTR _Ch$[rsp]
	mov	rcx, QWORD PTR _String$[rsp]
	call	strrchr
; Line 515
	add	rsp, 40					; 00000028H
	ret	0
?strrchr@@YAPEADQEADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?strchr@@YAPEADQEADH@Z
_TEXT	SEGMENT
_String$ = 48
_Ch$ = 56
?strchr@@YAPEADQEADH@Z PROC				; strchr, COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\string.h
; Line 501
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 502
	mov	edx, DWORD PTR _Ch$[rsp]
	mov	rcx, QWORD PTR _String$[rsp]
	call	strchr
; Line 503
	add	rsp, 40					; 00000028H
	ret	0
?strchr@@YAPEADQEADH@Z ENDP				; strchr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 56
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
sprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1823
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1826
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1827
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_s_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1828
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1829
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1830
	add	rsp, 72					; 00000048H
	ret	0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1771
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1774
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1776
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1778
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1779
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1780
	add	rsp, 56					; 00000038H
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1598
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1599
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _MaxCount$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_s_l
; Line 1600
	add	rsp, 56					; 00000038H
	ret	0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1577
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1578
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Format$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _MaxCount$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsnprintf_s
	mov	DWORD PTR _Result$[rsp], eax
; Line 1582
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1583
	add	rsp, 88					; 00000058H
	ret	0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT vsprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1512
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_s_l
; Line 1514
	add	rsp, 56					; 00000038H
	ret	0
vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1490
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1491
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsprintf_s
	mov	DWORD PTR _Result$[rsp], eax
; Line 1495
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsprintf_s
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1496
	add	rsp, 72					; 00000048H
	ret	0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1458
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1459
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, -1
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l
; Line 1460
	add	rsp, 56					; 00000038H
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1391
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1392
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp___stdio_common_vsprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1396
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1397
	add	rsp, 72					; 00000048H
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
tv77 = 48
tv75 = 56
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR tv77[rsp], rax
	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	QWORD PTR tv75[rsp], rax
	mov	r9, QWORD PTR tv77[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 72					; 00000048H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Stream$ = 64
_Format$ = 72
fprintf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 837
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 840
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 841
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Stream$[rsp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 842
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 843
	mov	eax, DWORD PTR _Result$[rsp]
; Line 844
	add	rsp, 56					; 00000038H
	ret	0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT vfprintf
_TEXT	SEGMENT
_Stream$ = 48
_Format$ = 56
_ArgList$ = 64
vfprintf PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 658
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 659
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Stream$[rsp]
	call	_vfprintf_l
; Line 660
	add	rsp, 40					; 00000028H
	ret	0
vfprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT swprintf
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 56
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
swprintf PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1465
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1468
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1469
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vswprintf_c_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1470
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1471
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1472
	add	rsp, 72					; 00000048H
	ret	0
swprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vswprintf_c_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vswprintf_c_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1155
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1156
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vswprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1160
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vswprintf_
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN4@vswprintf_
$LN3@vswprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN4@vswprintf_:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1161
	add	rsp, 72					; 00000048H
	ret	0
_vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnwprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnwprintf PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1129
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1130
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnwprintf_l
; Line 1131
	add	rsp, 56					; 00000038H
	ret	0
_vsnwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnwprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnwprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1061
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1062
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp___stdio_common_vswprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1066
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnwprintf
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnwprintf
$LN3@vsnwprintf:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnwprintf:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1067
	add	rsp, 72					; 00000048H
	ret	0
_vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
